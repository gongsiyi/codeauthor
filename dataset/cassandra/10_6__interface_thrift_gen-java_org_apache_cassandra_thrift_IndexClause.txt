1:078c56c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:078c56c:  *
1:078c56c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:078c56c:  */
1:078c56c: package org.apache.cassandra.thrift;
1:078c56c: /*
1:078c56c:  * 
1:078c56c:  * Licensed to the Apache Software Foundation (ASF) under one
1:078c56c:  * or more contributor license agreements.  See the NOTICE file
1:078c56c:  * distributed with this work for additional information
1:078c56c:  * regarding copyright ownership.  The ASF licenses this file
1:078c56c:  * to you under the Apache License, Version 2.0 (the
1:078c56c:  * "License"); you may not use this file except in compliance
1:078c56c:  * with the License.  You may obtain a copy of the License at
1:078c56c:  * 
1:078c56c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:078c56c:  * 
1:078c56c:  * Unless required by applicable law or agreed to in writing,
1:078c56c:  * software distributed under the License is distributed on an
1:078c56c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:078c56c:  * KIND, either express or implied.  See the License for the
1:078c56c:  * specific language governing permissions and limitations
1:078c56c:  * under the License.
1:078c56c:  * 
1:078c56c:  */
4:078c56c: 
1:078c56c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:078c56c: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:078c56c: import java.util.List;
1:078c56c: import java.util.ArrayList;
1:078c56c: import java.util.Map;
1:078c56c: import java.util.HashMap;
1:078c56c: import java.util.EnumMap;
1:078c56c: import java.util.Set;
1:078c56c: import java.util.HashSet;
1:078c56c: import java.util.EnumSet;
1:078c56c: import java.util.Collections;
1:078c56c: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:078c56c: import java.util.Arrays;
1:078c56c: import org.slf4j.Logger;
1:078c56c: import org.slf4j.LoggerFactory;
1:078c56c: 
1:3297a96: /**
1:6a5c9ed:  * @deprecated use a KeyRange with row_filter in get_range_slices instead
1:3297a96:  */
1:bffd9ea: public class IndexClause implements org.apache.thrift.TBase<IndexClause, IndexClause._Fields>, java.io.Serializable, Cloneable, Comparable<IndexClause> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexClause");
1:078c56c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField EXPRESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressions", org.apache.thrift.protocol.TType.LIST, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
1:078c56c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:078c56c:   static {
1:b153d45:     schemes.put(StandardScheme.class, new IndexClauseStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new IndexClauseTupleSchemeFactory());
5:078c56c:   }
1:078c56c: 
1:7c8c570:   public List<IndexExpression> expressions; // required
1:7c8c570:   public ByteBuffer start_key; // required
1:7c8c570:   public int count; // required
1:078c56c: 
1:078c56c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:078c56c:     EXPRESSIONS((short)1, "expressions"),
1:49f34a2:     START_KEY((short)2, "start_key"),
1:49f34a2:     COUNT((short)3, "count");
1:078c56c: 
1:078c56c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:078c56c: 
1:078c56c:     static {
1:078c56c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:078c56c:         byName.put(field.getFieldName(), field);
1:078c56c:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // EXPRESSIONS
1:d849c69:           return EXPRESSIONS;
1:49f34a2:         case 2: // START_KEY
1:d849c69:           return START_KEY;
1:49f34a2:         case 3: // COUNT
1:49f34a2:           return COUNT;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:078c56c:      * if it is not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:078c56c:       _Fields fields = findByThriftId(fieldId);
1:078c56c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:078c56c:       return fields;
1:078c56c:     }
1:078c56c: 
1:078c56c:     /**
1:078c56c:      * Find the _Fields constant that matches name, or null if its not found.
1:078c56c:      */
1:078c56c:     public static _Fields findByName(String name) {
1:078c56c:       return byName.get(name);
1:078c56c:     }
1:078c56c: 
1:078c56c:     private final short _thriftId;
1:078c56c:     private final String _fieldName;
1:078c56c: 
1:078c56c:     _Fields(short thriftId, String fieldName) {
1:078c56c:       _thriftId = thriftId;
1:078c56c:       _fieldName = fieldName;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public short getThriftFieldId() {
1:078c56c:       return _thriftId;
1:078c56c:     }
1:078c56c: 
1:078c56c:     public String getFieldName() {
1:078c56c:       return _fieldName;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   // isset id assignments
1:078c56c:   private static final int __COUNT_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.EXPRESSIONS, new org.apache.thrift.meta_data.FieldMetaData("expressions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexExpression.class))));
1:4ec9511:     tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexClause.class, metaDataMap);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexClause() {
1:078c56c:     this.count = 100;
1:078c56c: 
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexClause(
1:078c56c:     List<IndexExpression> expressions,
1:e7a385a:     ByteBuffer start_key,
1:078c56c:     int count)
1:078c56c:   {
1:078c56c:     this();
1:078c56c:     this.expressions = expressions;
1:49f34a2:     this.start_key = start_key;
2:078c56c:     this.count = count;
1:49f34a2:     setCountIsSet(true);
1:078c56c:   }
1:078c56c: 
1:078c56c:   /**
1:078c56c:    * Performs a deep copy on <i>other</i>.
1:078c56c:    */
1:078c56c:   public IndexClause(IndexClause other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:078c56c:     if (other.isSetExpressions()) {
1:bffd9ea:       List<IndexExpression> __this__expressions = new ArrayList<IndexExpression>(other.expressions.size());
1:078c56c:       for (IndexExpression other_element : other.expressions) {
1:078c56c:         __this__expressions.add(new IndexExpression(other_element));
1:078c56c:       }
1:078c56c:       this.expressions = __this__expressions;
1:078c56c:     }
1:078c56c:     if (other.isSetStart_key()) {
1:4ec9511:       this.start_key = org.apache.thrift.TBaseHelper.copyBinary(other.start_key);
1:e7a385a: ;
1:078c56c:     }
1:49f34a2:     this.count = other.count;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexClause deepCopy() {
2:078c56c:     return new IndexClause(this);
1:078c56c:   }
1:078c56c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.expressions = null;
1:e7a385a:     this.start_key = null;
1:e7a385a:     this.count = 100;
1:e7a385a: 
1:078c56c:   }
1:078c56c: 
1:078c56c:   public int getExpressionsSize() {
1:078c56c:     return (this.expressions == null) ? 0 : this.expressions.size();
1:078c56c:   }
1:078c56c: 
1:078c56c:   public java.util.Iterator<IndexExpression> getExpressionsIterator() {
1:078c56c:     return (this.expressions == null) ? null : this.expressions.iterator();
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void addToExpressions(IndexExpression elem) {
1:078c56c:     if (this.expressions == null) {
1:078c56c:       this.expressions = new ArrayList<IndexExpression>();
1:078c56c:     }
1:078c56c:     this.expressions.add(elem);
1:078c56c:   }
1:078c56c: 
1:078c56c:   public List<IndexExpression> getExpressions() {
1:078c56c:     return this.expressions;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexClause setExpressions(List<IndexExpression> expressions) {
1:078c56c:     this.expressions = expressions;
2:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetExpressions() {
1:078c56c:     this.expressions = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field expressions is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetExpressions() {
1:078c56c:     return this.expressions != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setExpressionsIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.expressions = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public byte[] getStart_key() {
1:4ec9511:     setStart_key(org.apache.thrift.TBaseHelper.rightSize(start_key));
1:4ec9511:     return start_key == null ? null : start_key.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForStart_key() {
1:e7a385a:     return start_key;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public IndexClause setStart_key(byte[] start_key) {
1:4ec9511:     setStart_key(start_key == null ? (ByteBuffer)null : ByteBuffer.wrap(start_key));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public IndexClause setStart_key(ByteBuffer start_key) {
1:078c56c:     this.start_key = start_key;
1:078c56c:     return this;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void unsetStart_key() {
1:078c56c:     this.start_key = null;
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSetStart_key() {
1:078c56c:     return this.start_key != null;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public void setStart_keyIsSet(boolean value) {
1:078c56c:     if (!value) {
1:078c56c:       this.start_key = null;
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:49f34a2:   public int getCount() {
1:49f34a2:     return this.count;
1:49f34a2:   }
1:49f34a2: 
1:49f34a2:   public IndexClause setCount(int count) {
1:49f34a2:     this.count = count;
1:49f34a2:     setCountIsSet(true);
1:49f34a2:     return this;
1:49f34a2:   }
1:49f34a2: 
1:49f34a2:   public void unsetCount() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:49f34a2:   }
1:49f34a2: 
1:4ec9511:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
1:49f34a2:   public boolean isSetCount() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:49f34a2:   }
1:49f34a2: 
1:49f34a2:   public void setCountIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
1:49f34a2:   }
1:49f34a2: 
1:078c56c:   public void setFieldValue(_Fields field, Object value) {
1:078c56c:     switch (field) {
1:078c56c:     case EXPRESSIONS:
2:078c56c:       if (value == null) {
1:078c56c:         unsetExpressions();
3:078c56c:       } else {
1:078c56c:         setExpressions((List<IndexExpression>)value);
1:078c56c:       }
2:078c56c:       break;
1:078c56c: 
1:078c56c:     case START_KEY:
1:078c56c:       if (value == null) {
1:078c56c:         unsetStart_key();
1:078c56c:       } else {
1:e7a385a:         setStart_key((ByteBuffer)value);
1:078c56c:       }
1:078c56c:       break;
1:078c56c: 
1:49f34a2:     case COUNT:
1:49f34a2:       if (value == null) {
1:49f34a2:         unsetCount();
1:49f34a2:       } else {
1:49f34a2:         setCount((Integer)value);
1:49f34a2:       }
1:49f34a2:       break;
1:49f34a2: 
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c:   public Object getFieldValue(_Fields field) {
1:078c56c:     switch (field) {
1:078c56c:     case EXPRESSIONS:
1:078c56c:       return getExpressions();
1:078c56c: 
1:078c56c:     case START_KEY:
1:078c56c:       return getStart_key();
1:49f34a2: 
1:49f34a2:     case COUNT:
1:7c8c570:       return Integer.valueOf(getCount());
1:078c56c: 
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:078c56c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:078c56c:     switch (field) {
1:078c56c:     case EXPRESSIONS:
1:078c56c:       return isSetExpressions();
1:078c56c:     case START_KEY:
1:078c56c:       return isSetStart_key();
1:49f34a2:     case COUNT:
1:49f34a2:       return isSetCount();
1:078c56c:     }
1:078c56c:     throw new IllegalStateException();
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public boolean equals(Object that) {
1:078c56c:     if (that == null)
3:078c56c:       return false;
1:078c56c:     if (that instanceof IndexClause)
1:078c56c:       return this.equals((IndexClause)that);
1:078c56c:     return false;
1:078c56c:   }
1:078c56c: 
1:078c56c:   public boolean equals(IndexClause that) {
1:078c56c:     if (that == null)
1:078c56c:       return false;
1:078c56c: 
1:078c56c:     boolean this_present_expressions = true && this.isSetExpressions();
1:078c56c:     boolean that_present_expressions = true && that.isSetExpressions();
1:078c56c:     if (this_present_expressions || that_present_expressions) {
1:078c56c:       if (!(this_present_expressions && that_present_expressions))
1:078c56c:         return false;
1:078c56c:       if (!this.expressions.equals(that.expressions))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:078c56c:     boolean this_present_start_key = true && this.isSetStart_key();
1:078c56c:     boolean that_present_start_key = true && that.isSetStart_key();
1:078c56c:     if (this_present_start_key || that_present_start_key) {
1:078c56c:       if (!(this_present_start_key && that_present_start_key))
1:078c56c:         return false;
1:e7a385a:       if (!this.start_key.equals(that.start_key))
1:078c56c:         return false;
1:078c56c:     }
1:078c56c: 
1:49f34a2:     boolean this_present_count = true;
1:49f34a2:     boolean that_present_count = true;
1:49f34a2:     if (this_present_count || that_present_count) {
1:49f34a2:       if (!(this_present_count && that_present_count))
1:49f34a2:         return false;
1:49f34a2:       if (this.count != that.count)
1:49f34a2:         return false;
1:49f34a2:     }
1:49f34a2: 
1:078c56c:     return true;
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_expressions = true && (isSetExpressions());
1:d966ed0:     builder.append(present_expressions);
1:d966ed0:     if (present_expressions)
1:d966ed0:       builder.append(expressions);
1:d966ed0: 
1:d966ed0:     boolean present_start_key = true && (isSetStart_key());
1:d966ed0:     builder.append(present_start_key);
1:d966ed0:     if (present_start_key)
1:d966ed0:       builder.append(start_key);
1:d966ed0: 
1:d966ed0:     boolean present_count = true;
1:d966ed0:     builder.append(present_count);
1:d966ed0:     if (present_count)
1:d966ed0:       builder.append(count);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:078c56c:   }
1:078c56c: 
1:bffd9ea:   @Override
1:078c56c:   public int compareTo(IndexClause other) {
1:078c56c:     if (!getClass().equals(other.getClass())) {
1:078c56c:       return getClass().getName().compareTo(other.getClass().getName());
1:078c56c:     }
1:078c56c: 
1:078c56c:     int lastComparison = 0;
1:078c56c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetExpressions()).compareTo(other.isSetExpressions());
3:078c56c:     if (lastComparison != 0) {
3:078c56c:       return lastComparison;
1:49f34a2:     }
1:e7a385a:     if (isSetExpressions()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressions, other.expressions);
1:49f34a2:       if (lastComparison != 0) {
1:49f34a2:         return lastComparison;
1:49f34a2:       }
1:49f34a2:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
1:49f34a2:     if (lastComparison != 0) {
1:49f34a2:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetStart_key()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:078c56c:     if (lastComparison != 0) {
1:078c56c:       return lastComparison;
1:078c56c:     }
1:e7a385a:     if (isSetCount()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
1:078c56c:       if (lastComparison != 0) {
1:078c56c:         return lastComparison;
1:078c56c:       }
1:078c56c:     }
2:078c56c:     return 0;
1:078c56c:   }
1:078c56c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:078c56c:   }
1:078c56c: 
1:078c56c:   @Override
1:078c56c:   public String toString() {
1:078c56c:     StringBuilder sb = new StringBuilder("IndexClause(");
1:078c56c:     boolean first = true;
1:078c56c: 
1:078c56c:     sb.append("expressions:");
1:078c56c:     if (this.expressions == null) {
2:078c56c:       sb.append("null");
1:078c56c:     } else {
1:078c56c:       sb.append(this.expressions);
1:49f34a2:     }
2:078c56c:     first = false;
2:078c56c:     if (!first) sb.append(", ");
1:49f34a2:     sb.append("start_key:");
1:49f34a2:     if (this.start_key == null) {
1:49f34a2:       sb.append("null");
1:49f34a2:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.start_key, sb);
1:49f34a2:     }
1:49f34a2:     first = false;
1:49f34a2:     if (!first) sb.append(", ");
1:078c56c:     sb.append("count:");
1:078c56c:     sb.append(this.count);
1:078c56c:     first = false;
1:078c56c:     sb.append(")");
1:078c56c:     return sb.toString();
1:078c56c:   }
1:078c56c: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:078c56c:     // check for required fields
1:078c56c:     if (expressions == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'expressions' was not present! Struct: " + toString());
1:078c56c:     }
1:49f34a2:     if (start_key == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
1:49f34a2:     }
1:078c56c:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:078c56c:   }
1:078c56c: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class IndexClauseStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public IndexClauseStandardScheme getScheme() {
1:b153d45:       return new IndexClauseStandardScheme();
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class IndexClauseStandardScheme extends StandardScheme<IndexClause> {
1:078c56c: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, IndexClause struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:078c56c:       iprot.readStructBegin();
1:078c56c:       while (true)
1:078c56c:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:078c56c:           break;
1:078c56c:         }
1:b153d45:         switch (schemeField.id) {
1:078c56c:           case 1: // EXPRESSIONS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:078c56c:               {
1:b153d45:                 org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
1:b153d45:                 struct.expressions = new ArrayList<IndexExpression>(_list24.size);
1:b153d45:                 for (int _i25 = 0; _i25 < _list24.size; ++_i25)
1:078c56c:                 {
1:bffd9ea:                   IndexExpression _elem26;
1:b153d45:                   _elem26 = new IndexExpression();
1:b153d45:                   _elem26.read(iprot);
1:b153d45:                   struct.expressions.add(_elem26);
1:078c56c:                 }
1:078c56c:                 iprot.readListEnd();
1:078c56c:               }
1:b153d45:               struct.setExpressionsIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:             }
1:078c56c:             break;
1:49f34a2:           case 2: // START_KEY
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.start_key = iprot.readBinary();
1:b153d45:               struct.setStart_keyIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:             }
1:078c56c:             break;
1:49f34a2:           case 3: // COUNT
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.count = iprot.readI32();
1:b153d45:               struct.setCountIsSet(true);
1:078c56c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:             }
1:078c56c:             break;
1:078c56c:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:078c56c:         }
1:078c56c:         iprot.readFieldEnd();
1:078c56c:       }
1:078c56c:       iprot.readStructEnd();
1:078c56c: 
1:078c56c:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetCount()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:078c56c:       }
1:b153d45:       struct.validate();
1:078c56c:     }
1:078c56c: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, IndexClause struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:078c56c: 
1:078c56c:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.expressions != null) {
1:078c56c:         oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
1:078c56c:         {
1:b153d45:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.expressions.size()));
1:b153d45:           for (IndexExpression _iter27 : struct.expressions)
1:078c56c:           {
1:b153d45:             _iter27.write(oprot);
1:078c56c:           }
1:078c56c:           oprot.writeListEnd();
1:078c56c:         }
2:078c56c:         oprot.writeFieldEnd();
1:078c56c:       }
1:b153d45:       if (struct.start_key != null) {
1:49f34a2:         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.start_key);
1:49f34a2:         oprot.writeFieldEnd();
1:49f34a2:       }
1:078c56c:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:b153d45:       oprot.writeI32(struct.count);
1:078c56c:       oprot.writeFieldEnd();
1:078c56c:       oprot.writeFieldStop();
1:078c56c:       oprot.writeStructEnd();
1:078c56c:     }
1:078c56c: 
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class IndexClauseTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public IndexClauseTupleScheme getScheme() {
1:b153d45:       return new IndexClauseTupleScheme();
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:b153d45:   private static class IndexClauseTupleScheme extends TupleScheme<IndexClause> {
1:078c56c: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, IndexClause struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
6:b153d45:       {
1:b153d45:         oprot.writeI32(struct.expressions.size());
1:b153d45:         for (IndexExpression _iter28 : struct.expressions)
1:b153d45:         {
1:b153d45:           _iter28.write(oprot);
1:078c56c:         }
1:078c56c:       }
1:b153d45:       oprot.writeBinary(struct.start_key);
1:b153d45:       oprot.writeI32(struct.count);
1:078c56c:     }
1:078c56c: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, IndexClause struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       {
1:b153d45:         org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:b153d45:         struct.expressions = new ArrayList<IndexExpression>(_list29.size);
1:b153d45:         for (int _i30 = 0; _i30 < _list29.size; ++_i30)
1:b153d45:         {
1:bffd9ea:           IndexExpression _elem31;
1:b153d45:           _elem31 = new IndexExpression();
1:b153d45:           _elem31.read(iprot);
1:b153d45:           struct.expressions.add(_elem31);
1:078c56c:         }
1:078c56c:       }
1:b153d45:       struct.setExpressionsIsSet(true);
1:b153d45:       struct.start_key = iprot.readBinary();
1:b153d45:       struct.setStart_keyIsSet(true);
1:b153d45:       struct.count = iprot.readI32();
1:b153d45:       struct.setCountIsSet(true);
1:078c56c:     }
1:078c56c:   }
1:078c56c: 
1:078c56c: }
1:078c56c: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class IndexClause implements org.apache.thrift.TBase<IndexClause, IndexClause._Fields>, java.io.Serializable, Cloneable, Comparable<IndexClause> {
/////////////////////////////////////////////////////////////////////////
1:       List<IndexExpression> __this__expressions = new ArrayList<IndexExpression>(other.expressions.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetExpressions()).compareTo(other.isSetExpressions());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressions, other.expressions);
1:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(other.isSetStart_key());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, other.start_key);
1:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
/////////////////////////////////////////////////////////////////////////
1:                   IndexExpression _elem26;
/////////////////////////////////////////////////////////////////////////
1:           IndexExpression _elem31;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   IndexExpression _elem26; // required
/////////////////////////////////////////////////////////////////////////
0:           IndexExpression _elem31; // required
commit:3297a96
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * @Deprecated: use a KeyRange with row_filter in get_range_slices instead
1:  */
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                   IndexExpression _elem26; // optional
/////////////////////////////////////////////////////////////////////////
0:           IndexExpression _elem31; // optional
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:6a5c9ed
/////////////////////////////////////////////////////////////////////////
1:  * @deprecated use a KeyRange with row_filter in get_range_slices instead
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer start_key;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer start_key,
/////////////////////////////////////////////////////////////////////////
0:       this.start_key = TBaseHelper.copyBinary(other.start_key);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.expressions = null;
1:     this.start_key = null;
1:     this.count = 100;
1: 
/////////////////////////////////////////////////////////////////////////
0:     setStart_key(TBaseHelper.rightSize(start_key));
0:     return start_key.array();
1:   }
1: 
0:   public ByteBuffer BufferForStart_key() {
1:     return start_key;
0:     setStart_key(ByteBuffer.wrap(start_key));
1:     return this;
1:   }
1: 
1:   public IndexClause setStart_key(ByteBuffer start_key) {
/////////////////////////////////////////////////////////////////////////
1:         setStart_key((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.start_key.equals(that.start_key))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetExpressions()) {
0:       lastComparison = TBaseHelper.compareTo(this.expressions, typedOther.expressions);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetStart_key()) {
0:       lastComparison = TBaseHelper.compareTo(this.start_key, typedOther.start_key);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetCount()) {
0:       lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.start_key, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_expressions = true && (isSetExpressions());
1:     builder.append(present_expressions);
1:     if (present_expressions)
1:       builder.append(expressions);
1: 
1:     boolean present_start_key = true && (isSetStart_key());
1:     builder.append(present_start_key);
1:     if (present_start_key)
1:       builder.append(start_key);
1: 
1:     boolean present_count = true;
1:     builder.append(present_count);
1:     if (present_count)
1:       builder.append(count);
1: 
1:     return builder.toHashCode();
commit:49f34a2
/////////////////////////////////////////////////////////////////////////
0:   private static final TField START_KEY_FIELD_DESC = new TField("start_key", TType.STRING, (short)2);
0:   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);
0:   public int count;
1:     START_KEY((short)2, "start_key"),
1:     COUNT((short)3, "count");
/////////////////////////////////////////////////////////////////////////
1:         case 2: // START_KEY
1:         case 3: // COUNT
1:           return COUNT;
/////////////////////////////////////////////////////////////////////////
0:     tmpMap.put(_Fields.START_KEY, new FieldMetaData("start_key", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
/////////////////////////////////////////////////////////////////////////
0:     byte[] start_key,
1:     this.start_key = start_key;
/////////////////////////////////////////////////////////////////////////
1:     this.count = other.count;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:   public int getCount() {
1:     return this.count;
1:   }
1: 
1:   public IndexClause setCount(int count) {
1:     this.count = count;
1:     setCountIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetCount() {
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field count is set (has been asigned a value) and false otherwise */
1:   public boolean isSetCount() {
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
1:   }
1: 
1:   public void setCountIsSet(boolean value) {
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     case COUNT:
1:       if (value == null) {
1:         unsetCount();
1:       } else {
1:         setCount((Integer)value);
1:       }
1:       break;
1: 
/////////////////////////////////////////////////////////////////////////
1:     case COUNT:
0:       return new Integer(getCount());
1: 
/////////////////////////////////////////////////////////////////////////
1:     case COUNT:
1:       return isSetCount();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_count = true;
1:     boolean that_present_count = true;
1:     if (this_present_count || that_present_count) {
1:       if (!(this_present_count && that_present_count))
1:         return false;
1:       if (this.count != that.count)
1:         return false;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
/////////////////////////////////////////////////////////////////////////
1:         case 2: // START_KEY
0:           if (field.type == TType.STRING) {
0:             this.start_key = iprot.readBinary();
1:         case 3: // COUNT
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
1:             setCountIsSet(true);
/////////////////////////////////////////////////////////////////////////
0:     if (this.start_key != null) {
1:       oprot.writeFieldBegin(START_KEY_FIELD_DESC);
0:       oprot.writeBinary(this.start_key);
1:       oprot.writeFieldEnd();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     sb.append("start_key:");
1:     if (this.start_key == null) {
1:       sb.append("null");
1:     } else {
0:         int __start_key_size = Math.min(this.start_key.length, 128);
0:         for (int i = 0; i < __start_key_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.start_key[i]).length() > 1 ? Integer.toHexString(this.start_key[i]).substring(Integer.toHexString(this.start_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start_key[i]).toUpperCase());
1:         }
0:         if (this.start_key.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
/////////////////////////////////////////////////////////////////////////
1:     if (start_key == null) {
0:       throw new TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
1:     }
commit:4fb3d18
/////////////////////////////////////////////////////////////////////////
0:               TList _list8 = iprot.readListBegin();
0:               this.expressions = new ArrayList<IndexExpression>(_list8.size);
0:               for (int _i9 = 0; _i9 < _list8.size; ++_i9)
0:                 IndexExpression _elem10;
0:                 _elem10 = new IndexExpression();
0:                 _elem10.read(iprot);
0:                 this.expressions.add(_elem10);
/////////////////////////////////////////////////////////////////////////
0:         for (IndexExpression _iter11 : this.expressions)
0:           _iter11.write(oprot);
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class IndexClause implements TBase<IndexClause, IndexClause._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // EXPRESSIONS
1:           return EXPRESSIONS;
0:         case 2: // COUNT
0:           return COUNT;
0:         case 3: // START_KEY
1:           return START_KEY;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.EXPRESSIONS, new FieldMetaData("expressions", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.START_KEY, new FieldMetaData("start_key", TFieldRequirementType.OPTIONAL, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetExpressions()) {      lastComparison = TBaseHelper.compareTo(this.expressions, typedOther.expressions);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetStart_key()) {      lastComparison = TBaseHelper.compareTo(this.start_key, typedOther.start_key);
commit:078c56c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class IndexClause implements TBase<IndexClause._Fields>, java.io.Serializable, Cloneable, Comparable<IndexClause> {
0:   private static final TStruct STRUCT_DESC = new TStruct("IndexClause");
1: 
0:   private static final TField EXPRESSIONS_FIELD_DESC = new TField("expressions", TType.LIST, (short)1);
0:   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)2);
0:   private static final TField START_KEY_FIELD_DESC = new TField("start_key", TType.STRING, (short)3);
1: 
0:   public List<IndexExpression> expressions;
0:   public int count;
0:   public byte[] start_key;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     EXPRESSIONS((short)1, "expressions"),
0:     COUNT((short)2, "count"),
0:     START_KEY((short)3, "start_key");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __COUNT_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.EXPRESSIONS, new FieldMetaData("expressions", TFieldRequirementType.REQUIRED, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, IndexExpression.class))));
0:     put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I32)));
0:     put(_Fields.START_KEY, new FieldMetaData("start_key", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(IndexClause.class, metaDataMap);
1:   }
1: 
1:   public IndexClause() {
1:     this.count = 100;
1: 
1:   }
1: 
1:   public IndexClause(
1:     List<IndexExpression> expressions,
1:     int count)
1:   {
1:     this();
1:     this.expressions = expressions;
1:     this.count = count;
0:     setCountIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public IndexClause(IndexClause other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetExpressions()) {
0:       List<IndexExpression> __this__expressions = new ArrayList<IndexExpression>();
1:       for (IndexExpression other_element : other.expressions) {
1:         __this__expressions.add(new IndexExpression(other_element));
1:       }
1:       this.expressions = __this__expressions;
1:     }
0:     this.count = other.count;
1:     if (other.isSetStart_key()) {
0:       this.start_key = new byte[other.start_key.length];
0:       System.arraycopy(other.start_key, 0, start_key, 0, other.start_key.length);
1:     }
1:   }
1: 
1:   public IndexClause deepCopy() {
1:     return new IndexClause(this);
1:   }
1: 
0:   @Deprecated
0:   public IndexClause clone() {
1:     return new IndexClause(this);
1:   }
1: 
1:   public int getExpressionsSize() {
1:     return (this.expressions == null) ? 0 : this.expressions.size();
1:   }
1: 
1:   public java.util.Iterator<IndexExpression> getExpressionsIterator() {
1:     return (this.expressions == null) ? null : this.expressions.iterator();
1:   }
1: 
1:   public void addToExpressions(IndexExpression elem) {
1:     if (this.expressions == null) {
1:       this.expressions = new ArrayList<IndexExpression>();
1:     }
1:     this.expressions.add(elem);
1:   }
1: 
1:   public List<IndexExpression> getExpressions() {
1:     return this.expressions;
1:   }
1: 
1:   public IndexClause setExpressions(List<IndexExpression> expressions) {
1:     this.expressions = expressions;
1:     return this;
1:   }
1: 
1:   public void unsetExpressions() {
1:     this.expressions = null;
1:   }
1: 
0:   /** Returns true if field expressions is set (has been asigned a value) and false otherwise */
1:   public boolean isSetExpressions() {
1:     return this.expressions != null;
1:   }
1: 
1:   public void setExpressionsIsSet(boolean value) {
1:     if (!value) {
1:       this.expressions = null;
1:     }
1:   }
1: 
0:   public int getCount() {
0:     return this.count;
1:   }
1: 
0:   public IndexClause setCount(int count) {
1:     this.count = count;
0:     setCountIsSet(true);
1:     return this;
1:   }
1: 
0:   public void unsetCount() {
0:     __isset_bit_vector.clear(__COUNT_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field count is set (has been asigned a value) and false otherwise */
0:   public boolean isSetCount() {
0:     return __isset_bit_vector.get(__COUNT_ISSET_ID);
1:   }
1: 
0:   public void setCountIsSet(boolean value) {
0:     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
1:   }
1: 
1:   public byte[] getStart_key() {
0:     return this.start_key;
1:   }
1: 
1:   public IndexClause setStart_key(byte[] start_key) {
1:     this.start_key = start_key;
1:     return this;
1:   }
1: 
1:   public void unsetStart_key() {
1:     this.start_key = null;
1:   }
1: 
0:   /** Returns true if field start_key is set (has been asigned a value) and false otherwise */
1:   public boolean isSetStart_key() {
1:     return this.start_key != null;
1:   }
1: 
1:   public void setStart_keyIsSet(boolean value) {
1:     if (!value) {
1:       this.start_key = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case EXPRESSIONS:
1:       if (value == null) {
1:         unsetExpressions();
1:       } else {
1:         setExpressions((List<IndexExpression>)value);
1:       }
1:       break;
1: 
0:     case COUNT:
1:       if (value == null) {
0:         unsetCount();
1:       } else {
0:         setCount((Integer)value);
1:       }
1:       break;
1: 
1:     case START_KEY:
1:       if (value == null) {
1:         unsetStart_key();
1:       } else {
0:         setStart_key((byte[])value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case EXPRESSIONS:
1:       return getExpressions();
1: 
0:     case COUNT:
0:       return new Integer(getCount());
1: 
1:     case START_KEY:
1:       return getStart_key();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case EXPRESSIONS:
1:       return isSetExpressions();
0:     case COUNT:
0:       return isSetCount();
1:     case START_KEY:
1:       return isSetStart_key();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof IndexClause)
1:       return this.equals((IndexClause)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(IndexClause that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_expressions = true && this.isSetExpressions();
1:     boolean that_present_expressions = true && that.isSetExpressions();
1:     if (this_present_expressions || that_present_expressions) {
1:       if (!(this_present_expressions && that_present_expressions))
1:         return false;
1:       if (!this.expressions.equals(that.expressions))
1:         return false;
1:     }
1: 
0:     boolean this_present_count = true;
0:     boolean that_present_count = true;
0:     if (this_present_count || that_present_count) {
0:       if (!(this_present_count && that_present_count))
1:         return false;
0:       if (this.count != that.count)
1:         return false;
1:     }
1: 
1:     boolean this_present_start_key = true && this.isSetStart_key();
1:     boolean that_present_start_key = true && that.isSetStart_key();
1:     if (this_present_start_key || that_present_start_key) {
1:       if (!(this_present_start_key && that_present_start_key))
1:         return false;
0:       if (!java.util.Arrays.equals(this.start_key, that.start_key))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(IndexClause other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     IndexClause typedOther = (IndexClause)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetExpressions()).compareTo(typedOther.isSetExpressions());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetExpressions()) {      lastComparison = TBaseHelper.compareTo(expressions, typedOther.expressions);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetCount()) {      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetStart_key()).compareTo(typedOther.isSetStart_key());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetStart_key()) {      lastComparison = TBaseHelper.compareTo(start_key, typedOther.start_key);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // EXPRESSIONS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list12 = iprot.readListBegin();
0:               this.expressions = new ArrayList<IndexExpression>(_list12.size);
0:               for (int _i13 = 0; _i13 < _list12.size; ++_i13)
1:               {
0:                 IndexExpression _elem14;
0:                 _elem14 = new IndexExpression();
0:                 _elem14.read(iprot);
0:                 this.expressions.add(_elem14);
1:               }
1:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case 2: // COUNT
0:           if (field.type == TType.I32) {
0:             this.count = iprot.readI32();
0:             setCountIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         case 3: // START_KEY
0:           if (field.type == TType.STRING) {
0:             this.start_key = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetCount()) {
0:       throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.expressions != null) {
1:       oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
1:       {
0:         oprot.writeListBegin(new TList(TType.STRUCT, this.expressions.size()));
0:         for (IndexExpression _iter15 : this.expressions)
1:         {
0:           _iter15.write(oprot);
1:         }
1:         oprot.writeListEnd();
1:       }
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldBegin(COUNT_FIELD_DESC);
0:     oprot.writeI32(this.count);
1:     oprot.writeFieldEnd();
0:     if (this.start_key != null) {
0:       if (isSetStart_key()) {
0:         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
0:         oprot.writeBinary(this.start_key);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("IndexClause(");
1:     boolean first = true;
1: 
1:     sb.append("expressions:");
1:     if (this.expressions == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.expressions);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("count:");
1:     sb.append(this.count);
1:     first = false;
0:     if (isSetStart_key()) {
1:       if (!first) sb.append(", ");
0:       sb.append("start_key:");
0:       if (this.start_key == null) {
1:         sb.append("null");
1:       } else {
0:           int __start_key_size = Math.min(this.start_key.length, 128);
0:           for (int i = 0; i < __start_key_size; i++) {
0:             if (i != 0) sb.append(" ");
0:             sb.append(Integer.toHexString(this.start_key[i]).length() > 1 ? Integer.toHexString(this.start_key[i]).substring(Integer.toHexString(this.start_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start_key[i]).toUpperCase());
1:           }
0:           if (this.start_key.length > 128) sb.append(" ...");
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (expressions == null) {
0:       throw new TProtocolException("Required field 'expressions' was not present! Struct: " + toString());
1:     }
1:     // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
0: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
0:   static {
1:     schemes.put(StandardScheme.class, new IndexClauseStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new IndexClauseTupleSchemeFactory());
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class IndexClauseStandardSchemeFactory implements SchemeFactory {
1:     public IndexClauseStandardScheme getScheme() {
1:       return new IndexClauseStandardScheme();
0:     }
0:   }
0: 
1:   private static class IndexClauseStandardScheme extends StandardScheme<IndexClause> {
0: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, IndexClause struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
0:         }
1:         switch (schemeField.id) {
0:           case 1: // EXPRESSIONS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
1:                 struct.expressions = new ArrayList<IndexExpression>(_list24.size);
1:                 for (int _i25 = 0; _i25 < _list24.size; ++_i25)
1:                 {
0:                   IndexExpression _elem26; // required
1:                   _elem26 = new IndexExpression();
1:                   _elem26.read(iprot);
1:                   struct.expressions.add(_elem26);
0:                 }
0:                 iprot.readListEnd();
0:               }
1:               struct.setExpressionsIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 2: // START_KEY
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.start_key = iprot.readBinary();
1:               struct.setStart_keyIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           case 3: // COUNT
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.count = iprot.readI32();
1:               struct.setCountIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
0:         }
0:         iprot.readFieldEnd();
0:       }
0:       iprot.readStructEnd();
0: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetCount()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
0:       }
1:       struct.validate();
0:     }
0: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, IndexClause struct) throws org.apache.thrift.TException {
1:       struct.validate();
0: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.expressions != null) {
0:         oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
1:         {
1:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.expressions.size()));
1:           for (IndexExpression _iter27 : struct.expressions)
1:           {
1:             _iter27.write(oprot);
0:           }
0:           oprot.writeListEnd();
0:         }
0:         oprot.writeFieldEnd();
0:       }
1:       if (struct.start_key != null) {
0:         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
1:         oprot.writeBinary(struct.start_key);
0:         oprot.writeFieldEnd();
0:       }
0:       oprot.writeFieldBegin(COUNT_FIELD_DESC);
1:       oprot.writeI32(struct.count);
0:       oprot.writeFieldEnd();
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
0:     }
0: 
0:   }
0: 
1:   private static class IndexClauseTupleSchemeFactory implements SchemeFactory {
1:     public IndexClauseTupleScheme getScheme() {
1:       return new IndexClauseTupleScheme();
0:     }
0:   }
0: 
1:   private static class IndexClauseTupleScheme extends TupleScheme<IndexClause> {
0: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, IndexClause struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       {
1:         oprot.writeI32(struct.expressions.size());
1:         for (IndexExpression _iter28 : struct.expressions)
1:         {
1:           _iter28.write(oprot);
0:         }
0:       }
1:       oprot.writeBinary(struct.start_key);
1:       oprot.writeI32(struct.count);
0:     }
0: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, IndexClause struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       {
1:         org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:         struct.expressions = new ArrayList<IndexExpression>(_list29.size);
1:         for (int _i30 = 0; _i30 < _list29.size; ++_i30)
1:         {
0:           IndexExpression _elem31; // required
1:           _elem31 = new IndexExpression();
1:           _elem31.read(iprot);
1:           struct.expressions.add(_elem31);
0:         }
0:       }
1:       struct.setExpressionsIsSet(true);
1:       struct.start_key = iprot.readBinary();
1:       struct.setStart_keyIsSet(true);
1:       struct.count = iprot.readI32();
1:       struct.setCountIsSet(true);
0:     }
0:   }
0: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public List<IndexExpression> expressions; // required
1:   public ByteBuffer start_key; // required
1:   public int count; // required
/////////////////////////////////////////////////////////////////////////
1:       return Integer.valueOf(getCount());
/////////////////////////////////////////////////////////////////////////
0:                 IndexExpression _elem14; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class IndexClause implements org.apache.thrift.TBase<IndexClause, IndexClause._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexClause");
1:   private static final org.apache.thrift.protocol.TField EXPRESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressions", org.apache.thrift.protocol.TType.LIST, (short)1);
1:   private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("start_key", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.EXPRESSIONS, new org.apache.thrift.meta_data.FieldMetaData("expressions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IndexExpression.class))));
1:     tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("start_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexClause.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.start_key = org.apache.thrift.TBaseHelper.copyBinary(other.start_key);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field expressions is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:     setStart_key(org.apache.thrift.TBaseHelper.rightSize(start_key));
1:     return start_key == null ? null : start_key.array();
1:   public ByteBuffer bufferForStart_key() {
1:     setStart_key(start_key == null ? (ByteBuffer)null : ByteBuffer.wrap(start_key));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field start_key is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field count is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressions, typedOther.expressions);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_key, typedOther.start_key);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
0:         oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.expressions.size()));
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.start_key, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'expressions' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_key' was not present! Struct: " + toString());
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:               TList _list12 = iprot.readListBegin();
0:               this.expressions = new ArrayList<IndexExpression>(_list12.size);
0:               for (int _i13 = 0; _i13 < _list12.size; ++_i13)
0:                 IndexExpression _elem14;
0:                 _elem14 = new IndexExpression();
0:                 _elem14.read(iprot);
0:                 this.expressions.add(_elem14);
/////////////////////////////////////////////////////////////////////////
0:         for (IndexExpression _iter15 : this.expressions)
0:           _iter15.write(oprot);
============================================================================