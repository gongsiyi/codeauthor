1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
1:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
2:066ef58:  */
1:066ef58: package org.apache.cassandra.net;
1:9ebc400: 
1:066ef58: import java.util.concurrent.TimeUnit;
1:066ef58: import java.util.concurrent.TimeoutException;
1:9ebc400: 
1:3d4c2f9: /**
1:3d4c2f9:  * A callback specialized for returning a value from a single target; that is, this is for messages
1:3d4c2f9:  * that we only send to one recipient.
1:3d4c2f9:  */
1:2923123: public class AsyncOneResponse<T> implements IAsyncCallback<T>
17:066ef58: {
1:a06be23:     private T result;
1:453b6f5:     private boolean done;
1:453b6f5:     private final long start = System.nanoTime();
1:a19f7f1: 
1:a06be23:     public T get(long timeout, TimeUnit tu) throws TimeoutException
1:066ef58:     {
1:453b6f5:         timeout = tu.toNanos(timeout);
1:453b6f5:         boolean interrupted = false;
4:066ef58:         try
1:6690c51:         {
1:453b6f5:             synchronized (this)
1:066ef58:             {
1:453b6f5:                 while (!done)
1:453b6f5:                 {
1:453b6f5:                     try
1:066ef58:                     {
1:453b6f5:                         long overallTimeout = timeout - (System.nanoTime() - start);
1:453b6f5:                         if (overallTimeout <= 0)
1:453b6f5:                         {
1:453b6f5:                             throw new TimeoutException("Operation timed out.");
1:453b6f5:                         }
1:453b6f5:                         TimeUnit.NANOSECONDS.timedWait(this, overallTimeout);
1:453b6f5:                     }
1:453b6f5:                     catch (InterruptedException e)
1:453b6f5:                     {
1:453b6f5:                         interrupted = true;
1:453b6f5:                     }
1:dc9992a:                 }
1:9ebc400:             }
1:9ebc400:         }
3:066ef58:         finally
1:dc9992a:         {
1:453b6f5:             if (interrupted)
1:453b6f5:             {
1:453b6f5:                 Thread.currentThread().interrupt();
1:453b6f5:             }
1:704c915:         }
1:81e55bf:         return result;
17:066ef58:     }
1:dc9992a: 
1:453b6f5:     public synchronized void response(MessageIn<T> response)
1:9ebc400:     {
1:453b6f5:         if (!done)
1:9ebc400:         {
1:453b6f5:             result = response.payload;
1:453b6f5:             done = true;
1:453b6f5:             this.notifyAll();
1:066ef58:         }
1:066ef58:     }
1:14d0647: 
1:dc9992a:     public boolean isLatencyForSnitch()
1:066ef58:     {
1:dc9992a:         return false;
1:066ef58:     }
1:066ef58: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:453b6f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private boolean done;
1:     private final long start = System.nanoTime();
1:         timeout = tu.toNanos(timeout);
1:         boolean interrupted = false;
1:             synchronized (this)
1:                 while (!done)
1:                     try
1:                     {
1:                         long overallTimeout = timeout - (System.nanoTime() - start);
1:                         if (overallTimeout <= 0)
1:                         {
1:                             throw new TimeoutException("Operation timed out.");
1:                         }
1:                         TimeUnit.NANOSECONDS.timedWait(this, overallTimeout);
1:                     }
1:                     catch (InterruptedException e)
1:                     {
1:                         interrupted = true;
1:                     }
1:             if (interrupted)
1:             {
1:                 Thread.currentThread().interrupt();
1:             }
1:     public synchronized void response(MessageIn<T> response)
1:         if (!done)
1:             result = response.payload;
1:             done = true;
1:             this.notifyAll();
commit:1d2c122
/////////////////////////////////////////////////////////////////////////
0:     private final long start;
0:         start = System.nanoTime();
/////////////////////////////////////////////////////////////////////////
0:                     timeout = tu.toNanos(timeout);
0:                     long overall_timeout = timeout - (System.nanoTime() - start);
0:                     bVal = overall_timeout > 0 && condition.await(overall_timeout, TimeUnit.NANOSECONDS);
commit:2923123
/////////////////////////////////////////////////////////////////////////
1: public class AsyncOneResponse<T> implements IAsyncCallback<T>
/////////////////////////////////////////////////////////////////////////
0:     public AsyncOneResponse()
commit:3d4c2f9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A callback specialized for returning a value from a single target; that is, this is for messages
1:  * that we only send to one recipient.
1:  */
0: public class AsyncResult<T> implements IAsyncCallback<T>
/////////////////////////////////////////////////////////////////////////
0:     public void response(MessageIn<T> response)
commit:e2ecb8a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class AsyncResult<T> implements IMessageCallback
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a06be23
/////////////////////////////////////////////////////////////////////////
0: class AsyncResult<T> implements IAsyncResult<T>
1:     private T result;
/////////////////////////////////////////////////////////////////////////
1:     public T get(long timeout, TimeUnit tu) throws TimeoutException
/////////////////////////////////////////////////////////////////////////
0:     public void result(MessageIn<T> response)
0:                 from = response.from;
0:                 result = response.payload;
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
0:     public void result(MessageIn response)
commit:a19f7f1
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger logger = LoggerFactory.getLogger(AsyncResult.class);
1: 
commit:dc9992a
/////////////////////////////////////////////////////////////////////////
1:     public boolean isLatencyForSnitch()
1:     {
1:         return false;
1:     }
1: 
commit:745fb44
/////////////////////////////////////////////////////////////////////////
commit:a043125
/////////////////////////////////////////////////////////////////////////
0:         MessagingService.instance().removeRegisteredCallback(response.getMessageId());
commit:14d0647
/////////////////////////////////////////////////////////////////////////
1: 
0:         MessagingService.removeRegisteredCallback(response.getMessageId());
commit:9ebc400
/////////////////////////////////////////////////////////////////////////
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
0:     private InetAddress from;
/////////////////////////////////////////////////////////////////////////
1: 
1:             {
0:                 from = response.getFrom();
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
0:     public InetAddress getFrom()
1:     {
0:         return from;
1:     }
commit:c26e89c
/////////////////////////////////////////////////////////////////////////
0:                     timeout = TimeUnit.MILLISECONDS.convert(timeout, tu);
commit:81e55bf
/////////////////////////////////////////////////////////////////////////
0:     private static Logger logger = LoggerFactory.getLogger(AsyncResult.class);
0:     private byte[] result;
0:     private AtomicBoolean done = new AtomicBoolean(false);
0:     private Lock lock = new ReentrantLock();
0:     private Condition condition;
0:     private long startTime;
0:         condition = lock.newCondition();
0:         startTime = System.currentTimeMillis();
0:             
0:         lock.lock();
0:                 if (!done.get())
0:                     long overall_timeout = timeout - (System.currentTimeMillis() - startTime);
0:                     bVal = overall_timeout > 0 && condition.await(overall_timeout, TimeUnit.MILLISECONDS);
/////////////////////////////////////////////////////////////////////////
0:             if (!bVal && !done.get())
0:             lock.unlock();
1:         return result;
0:             lock.lock();
0:             if (!done.get())
0:                 result = response.getMessageBody();
0:                 done.set(true);
0:                 condition.signal();
0:             lock.unlock();
commit:704c915
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (!done_.get())
0:                 condition_.await();
0:         catch (InterruptedException ex)
0:             throw new AssertionError(ex);
0:             lock_.unlock();
1:         }
/////////////////////////////////////////////////////////////////////////
0:             catch (InterruptedException ex)
0:                 throw new AssertionError(ex);
commit:6690c51
/////////////////////////////////////////////////////////////////////////
0:     private long startTime_;
0:         startTime_ = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:                 {
0:                     long overall_timeout = System.currentTimeMillis() - startTime_ + timeout;
0:                     if(overall_timeout > 0)
0:                         bVal = condition_.await(overall_timeout, TimeUnit.MILLISECONDS);
0:                     else
0:                         bVal = false;
/////////////////////////////////////////////////////////////////////////
0:       
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.cassandra.net;
0: 
0: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.locks.Condition;
0: import java.util.concurrent.locks.Lock;
0: import java.util.concurrent.locks.ReentrantLock;
0: 
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
0: 
0: class AsyncResult implements IAsyncResult
1: {
0:     private static Logger logger_ = Logger.getLogger( AsyncResult.class );
0:     private byte[] result_;
0:     private AtomicBoolean done_ = new AtomicBoolean(false);
0:     private Lock lock_ = new ReentrantLock();
0:     private Condition condition_;
0: 
0:     public AsyncResult()
1:     {        
0:         condition_ = lock_.newCondition();
1:     }    
0:     
0:     public byte[] get()
1:     {
0:         lock_.lock();
1:         try
1:         {
0:             if ( !done_.get() )
1:             {
0:                 condition_.await();                    
1:             }
1:         }
0:         catch ( InterruptedException ex )
1:         {
0:             logger_.warn( LogUtil.throwableToString(ex) );
1:         }
1:         finally
1:         {
0:             lock_.unlock();            
1:         }        
0:         return result_;
1:     }
0:     
0:     public boolean isDone()
1:     {
0:         return done_.get();
1:     }
0:     
0:     public byte[] get(long timeout, TimeUnit tu) throws TimeoutException
1:     {
0:         lock_.lock();
1:         try
1:         {            
0:             boolean bVal = true;
1:             try
1:             {
0:                 if ( !done_.get() )
1:                 {                    
0:                     bVal = condition_.await(timeout, tu);
1:                 }
1:             }
0:             catch ( InterruptedException ex )
1:             {
0:                 logger_.warn( LogUtil.throwableToString(ex) );
1:             }
0:             
0:             if ( !bVal && !done_.get() )
1:             {                                           
0:                 throw new TimeoutException("Operation timed out.");
1:             }
1:         }
1:         finally
1:         {
0:             lock_.unlock();      
1:         }
0:         return result_;
1:     }
0:     
0:     public List<byte[]> multiget()
1:     {
0:         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
1:     }
0:     
0:     public List<byte[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
1:     {
0:         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
1:     }
0:     
0:     public void result(Message response)
1:     {        
1:         try
1:         {
0:             lock_.lock();
0:             if ( !done_.get() )
1:             {                
0:                 result_ = response.getMessageBody();
0:                 done_.set(true);
0:                 condition_.signal();
1:             }
1:         }
1:         finally
1:         {
0:             lock_.unlock();
1:         }        
1:     }    
1: }
commit:49211d5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private byte[] result_;
/////////////////////////////////////////////////////////////////////////
0:     public byte[] get()
/////////////////////////////////////////////////////////////////////////
0:     public byte[] get(long timeout, TimeUnit tu) throws TimeoutException
/////////////////////////////////////////////////////////////////////////
0:     public List<byte[]> multiget()
0:     public List<byte[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
commit:71739ef
author:Dave Brosius
-------------------------------------------------------------------------------
commit:7588f74
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:     {
0:     }
0: 
0:         {
/////////////////////////////////////////////////////////////////////////
0: 
0:             {
/////////////////////////////////////////////////////////////////////////
0:     {
/////////////////////////////////////////////////////////////////////////
0:         }
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:     {
0:     }
0: 
0:         {
/////////////////////////////////////////////////////////////////////////
0: 
0:             {
/////////////////////////////////////////////////////////////////////////
0:     {
/////////////////////////////////////////////////////////////////////////
0:         }
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
0:     private final AtomicBoolean done = new AtomicBoolean(false);
0:     private final Lock lock = new ReentrantLock();
0:     private final Condition condition;
0:     private final long startTime;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Chris Goffinet
-------------------------------------------------------------------------------
commit:afe2420
/////////////////////////////////////////////////////////////////////////
0:                     long overall_timeout = timeout - (System.currentTimeMillis() - startTime_);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:0095f0c
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     private static Logger logger_ = LoggerFactory.getLogger( AsyncResult.class );
author:Avinash Lakshman
-------------------------------------------------------------------------------
commit:5206290
/////////////////////////////////////////////////////////////////////////
0:     public List<Object[]> multiget()
0:     {
0:         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
0:     }
0:     
0:     public List<Object[]> multiget(long timeout, TimeUnit tu) throws TimeoutException
0:     {
0:         throw new UnsupportedOperationException("This operation is not supported in the AsyncResult abstraction.");
0:     }
0:     
0:     public void result(Message response)
0:             {                
0:                 result_ = response.getMessageBody();
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.net;
0: 
0: import java.util.List;
0: import java.util.Hashtable;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.locks.Condition;
0: import java.util.concurrent.locks.Lock;
0: import java.util.concurrent.locks.ReentrantLock;
0: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.service.QuorumResponseHandler;
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: 
0: /**
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: class AsyncResult implements IAsyncResult
0: {
0:     private static Logger logger_ = Logger.getLogger( AsyncResult.class );
0:     private Object[] result_ = new Object[0];    
0:     private AtomicBoolean done_ = new AtomicBoolean(false);
0:     private Lock lock_ = new ReentrantLock();
0:     private Condition condition_;
0: 
0:     public AsyncResult()
0:     {        
0:         condition_ = lock_.newCondition();
0:     }    
0:     
0:     public Object[] get()
0:     {
0:         lock_.lock();
0:         try
0:         {
0:             if ( !done_.get() )
0:             {
0:                 condition_.await();                    
0:             }
0:         }
0:         catch ( InterruptedException ex )
0:         {
0:             logger_.warn( LogUtil.throwableToString(ex) );
0:         }
0:         finally
0:         {
0:             lock_.unlock();            
0:         }        
0:         return result_;
0:     }
0:     
0:     public boolean isDone()
0:     {
0:         return done_.get();
0:     }
0:     
0:     public Object[] get(long timeout, TimeUnit tu) throws TimeoutException
0:     {
0:         lock_.lock();
0:         try
0:         {            
0:             boolean bVal = true;
0:             try
0:             {
0:                 if ( !done_.get() )
0:                 {                    
0:                     bVal = condition_.await(timeout, tu);
0:                 }
0:             }
0:             catch ( InterruptedException ex )
0:             {
0:                 logger_.warn( LogUtil.throwableToString(ex) );
0:             }
0:             
0:             if ( !bVal && !done_.get() )
0:             {                                           
0:                 throw new TimeoutException("Operation timed out.");
0:             }
0:         }
0:         finally
0:         {
0:             lock_.unlock();      
0:         }
0:         return result_;
0:     }
0:     
0:     void result(Object[] result)
0:     {        
0:         try
0:         {
0:             lock_.lock();
0:             if ( !done_.get() )
0:             {
0:                 result_ = result;
0:                 done_.set(true);
0:                 condition_.signal();
0:             }
0:         }
0:         finally
0:         {
0:             lock_.unlock();
0:         }        
0:     }    
0: }
============================================================================