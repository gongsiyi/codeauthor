1:d40ac78: /*
1:d40ac78:  * Licensed to the Apache Software Foundation (ASF) under one
1:d40ac78:  * or more contributor license agreements.  See the NOTICE file
1:d40ac78:  * distributed with this work for additional information
1:d40ac78:  * regarding copyright ownership.  The ASF licenses this file
1:d40ac78:  * to you under the Apache License, Version 2.0 (the
1:d40ac78:  * "License"); you may not use this file except in compliance
1:d40ac78:  * with the License.  You may obtain a copy of the License at
1:d40ac78:  *
1:d40ac78:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d40ac78:  *
1:d40ac78:  * Unless required by applicable law or agreed to in writing, software
1:d40ac78:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d40ac78:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d40ac78:  * See the License for the specific language governing permissions and
1:d40ac78:  * limitations under the License.
1:d40ac78:  */
1:d40ac78: package org.apache.cassandra.db.compaction;
1:d40ac78: 
1:d40ac78: import static org.junit.Assert.*;
1:d40ac78: 
1:d40ac78: import java.util.*;
1:d40ac78: import java.util.regex.Matcher;
1:d40ac78: import java.util.regex.Pattern;
1:d40ac78: 
1:d40ac78: import com.google.common.collect.*;
1:d40ac78: 
1:d40ac78: import org.junit.Test;
1:d40ac78: 
1:d40ac78: import org.apache.cassandra.SchemaLoader;
1:d40ac78: import org.apache.cassandra.Util;
1:d40ac78: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:d40ac78: import org.apache.cassandra.db.ColumnFamilyStore;
1:d40ac78: import org.apache.cassandra.db.DecoratedKey;
1:d40ac78: import org.apache.cassandra.db.DeletionTime;
1:d40ac78: import org.apache.cassandra.db.Keyspace;
1:d40ac78: import org.apache.cassandra.db.marshal.Int32Type;
1:d40ac78: import org.apache.cassandra.db.marshal.UTF8Type;
1:d40ac78: import org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator;
1:d40ac78: import org.apache.cassandra.db.rows.*;
1:d40ac78: import org.apache.cassandra.io.sstable.ISSTableScanner;
1:10649b1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:d40ac78: import org.apache.cassandra.schema.KeyspaceParams;
1:d40ac78: 
1:d40ac78: public class CompactionIteratorTest
1:d40ac78: {
1:d40ac78: 
1:d40ac78:     private static final int NOW = 1000;
1:d40ac78:     private static final int GC_BEFORE = 100;
1:d40ac78:     private static final String KSNAME = "CompactionIteratorTest";
1:d40ac78:     private static final String CFNAME = "Integer1";
1:d40ac78: 
1:9797511:     static final DecoratedKey kk;
1:d40ac78:     static final CFMetaData metadata;
1:d40ac78:     private static final int RANGE = 1000;
1:d40ac78:     private static final int COUNT = 100;
1:d40ac78: 
1:d40ac78:     Map<List<Unfiltered>, DeletionTime> deletionTimes = new HashMap<>();
1:d40ac78: 
1:d40ac78:     static {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511: 
1:9797511:         kk = Util.dk("key");
1:9797511: 
1:d40ac78:         SchemaLoader.prepareServer();
1:d40ac78:         SchemaLoader.createKeyspace(KSNAME,
1:d40ac78:                                     KeyspaceParams.simple(1),
1:d40ac78:                                     metadata = SchemaLoader.standardCFMD(KSNAME,
1:d40ac78:                                                                          CFNAME,
1:d40ac78:                                                                          1,
1:d40ac78:                                                                          UTF8Type.instance,
1:d40ac78:                                                                          Int32Type.instance,
1:d40ac78:                                                                          Int32Type.instance));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     // See org.apache.cassandra.db.rows.UnfilteredRowsGenerator.parse for the syntax used in these tests.
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionSupersedeLeft()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "5<=[140] 10[150] [140]<20 22<[130] [130]<25 30[150]"
1:d40ac78:         }, new String[] {
1:d40ac78:             "7<[160] 15[180] [160]<30 40[120]"
1:d40ac78:         },
1:d40ac78:         3);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionSupersedeMiddle()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "5<=[140] 10[150] [140]<40 60[150]"
1:d40ac78:         }, new String[] {
1:d40ac78:             "7<=[160] 15[180] [160]<=30 40[120]"
1:d40ac78:         },
1:d40ac78:         3);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionSupersedeRight()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "9<=[140] 10[150] [140]<40 60[150]"
1:d40ac78:         }, new String[] {
1:d40ac78:             "7<[160] 15[180] [160]<30 40[120]"
1:d40ac78:         },
1:d40ac78:         3);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionSwitchInSuperseded()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "5<=[140] 10[150] [140]<20 20<=[170] [170]<=50 60[150]"
1:d40ac78:         }, new String[] {
1:d40ac78:             "7<[160] 15[180] [160]<30 40[120]"
1:d40ac78:         },
1:d40ac78:         5);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionBoundaries()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "5<=[120] [120]<9 9<=[140] 10[150] [140]<40 40<=[120] 60[150] [120]<90"
1:d40ac78:         }, new String[] {
1:d40ac78:             "7<[160] 15[180] [160]<30 40[120] 45<[140] [140]<80 88<=[130] [130]<100"
1:d40ac78:         },
1:d40ac78:         7);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionMatches()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "5<=[120] [120]<=9 9<[140] 10[150] [140]<40 40<=[120] 60[150] [120]<90 120<=[100] [100]<130"
1:d40ac78:         }, new String[] {
1:d40ac78:             "9<[160] 15[180] [160]<40 40[120] 45<[140] [140]<90 90<=[110] [110]<100 120<=[100] [100]<130"
1:d40ac78:         },
1:d40ac78:         5);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionRowDeletion()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "10[150] 20[160] 25[160] 30[170] 40[120] 50[120]"
1:d40ac78:         }, new String[] {
1:d40ac78:             "10<=[155] 20[200D180] 30[200D160] [155]<=30 40[150D130] 50[150D100]"
1:d40ac78:         },
1:d40ac78:         "25[160] 30[170] 50[120]");
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testGcCompactionPartitionDeletion()
1:d40ac78:     {
1:d40ac78:         testCompaction(new String[] {
1:d40ac78:             "10[150] 20[160] 25[160] 30[170] 40[120] 50[120]"
1:d40ac78:         }, new String[] {
1:d40ac78:             // Dxx| stands for partition deletion at time xx
1:d40ac78:             "D165|10<=[155] 20[200D180] 30[200D160] [155]<=30 40[150D130] 50[150D100]"
1:d40ac78:         },
1:d40ac78:         "30[170]");
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     void testCompaction(String[] inputs, String[] tombstones, String expected)
1:d40ac78:     {
1:d40ac78:         testNonGcCompaction(inputs, tombstones);
1:d40ac78: 
1:d40ac78:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:d40ac78:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:d40ac78:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:d40ac78:         List<Unfiltered> result = compact(inputLists, tombstoneLists);
1:d40ac78:         System.out.println("GC compaction resulted in " + size(result) + " Unfiltereds");
1:d40ac78:         generator.verifyValid(result);
1:d40ac78:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:d40ac78:         List<Unfiltered> expectedResult = generator.parse(expected, NOW - 1);
1:d40ac78:         if (!expectedResult.equals(result))
1:d40ac78:             fail("Expected " + expected + ", got " + generator.str(result));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     void testCompaction(String[] inputs, String[] tombstones, int expectedCount)
1:d40ac78:     {
1:d40ac78:         testNonGcCompaction(inputs, tombstones);
1:d40ac78: 
1:d40ac78:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:d40ac78:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:d40ac78:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:d40ac78:         List<Unfiltered> result = compact(inputLists, tombstoneLists);
1:d40ac78:         System.out.println("GC compaction resulted in " + size(result) + " Unfiltereds");
1:d40ac78:         generator.verifyValid(result);
1:d40ac78:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:d40ac78:         if (size(result) > expectedCount)
1:d40ac78:             fail("Expected compaction with " + expectedCount + " elements, got " + size(result) + ": " + generator.str(result));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     int testNonGcCompaction(String[] inputs, String[] tombstones)
1:d40ac78:     {
1:d40ac78:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:d40ac78:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:d40ac78:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:d40ac78:         List<Unfiltered> result = compact(inputLists, Collections.emptyList());
1:d40ac78:         System.out.println("Non-GC compaction resulted in " + size(result) + " Unfiltereds");
1:d40ac78:         generator.verifyValid(result);
1:d40ac78:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:d40ac78:         return size(result);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private static int size(List<Unfiltered> data)
1:d40ac78:     {
1:d40ac78:         return data.stream().mapToInt(x -> x instanceof RangeTombstoneBoundaryMarker ? 2 : 1).sum();
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private void verifyEquivalent(List<List<Unfiltered>> sources, List<Unfiltered> result, List<List<Unfiltered>> tombstoneSources, UnfilteredRowsGenerator generator)
1:d40ac78:     {
1:d40ac78:         // sources + tombstoneSources must be the same as result + tombstoneSources
1:d40ac78:         List<Unfiltered> expected = compact(Iterables.concat(sources, tombstoneSources), Collections.emptyList());
1:d40ac78:         List<Unfiltered> actual = compact(Iterables.concat(ImmutableList.of(result), tombstoneSources), Collections.emptyList());
1:d40ac78:         if (!expected.equals(actual))
1:d40ac78:         {
1:d40ac78:             System.out.println("Equivalence test failure between sources:");
1:d40ac78:             for (List<Unfiltered> partition : sources)
1:d40ac78:                 generator.dumpList(partition);
1:d40ac78:             System.out.println("and compacted " + generator.str(result));
1:d40ac78:             System.out.println("with tombstone sources:");
1:d40ac78:             for (List<Unfiltered> partition : tombstoneSources)
1:d40ac78:                 generator.dumpList(partition);
1:d40ac78:             System.out.println("expected " + generator.str(expected));
1:d40ac78:             System.out.println("got " + generator.str(actual));
1:d40ac78:             fail("Failed equivalence test.");
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private List<List<Unfiltered>> parse(String[] inputs, UnfilteredRowsGenerator generator)
1:d40ac78:     {
1:d40ac78:         return ImmutableList.copyOf(Lists.transform(Arrays.asList(inputs), x -> parse(x, generator)));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private List<Unfiltered> parse(String input, UnfilteredRowsGenerator generator)
1:d40ac78:     {
1:d40ac78:         Matcher m = Pattern.compile("D(\\d+)\\|").matcher(input);
1:d40ac78:         if (m.lookingAt())
1:d40ac78:         {
1:d40ac78:             int del = Integer.parseInt(m.group(1));
1:d40ac78:             input = input.substring(m.end());
1:d40ac78:             List<Unfiltered> list = generator.parse(input, NOW - 1);
1:d40ac78:             deletionTimes.put(list, new DeletionTime(del, del));
1:d40ac78:             return list;
1:d40ac78:         }
1:d40ac78:         else
1:d40ac78:             return generator.parse(input, NOW - 1);
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private List<Unfiltered> compact(Iterable<List<Unfiltered>> sources, Iterable<List<Unfiltered>> tombstoneSources)
1:d40ac78:     {
1:d40ac78:         List<Iterable<UnfilteredRowIterator>> content = ImmutableList.copyOf(Iterables.transform(sources, list -> ImmutableList.of(listToIterator(list, kk))));
1:d40ac78:         Map<DecoratedKey, Iterable<UnfilteredRowIterator>> transformedSources = new TreeMap<>();
1:d40ac78:         transformedSources.put(kk, Iterables.transform(tombstoneSources, list -> listToIterator(list, kk)));
1:d40ac78:         try (CompactionController controller = new Controller(Keyspace.openAndGetStore(metadata), transformedSources, GC_BEFORE);
1:d40ac78:              CompactionIterator iter = new CompactionIterator(OperationType.COMPACTION,
1:d40ac78:                                                               Lists.transform(content, x -> new Scanner(x)),
1:d40ac78:                                                               controller, NOW, null))
1:d40ac78:         {
1:d40ac78:             List<Unfiltered> result = new ArrayList<>();
1:d40ac78:             assertTrue(iter.hasNext());
1:d40ac78:             try (UnfilteredRowIterator partition = iter.next())
1:d40ac78:             {
1:d40ac78:                 Iterators.addAll(result, partition);
1:d40ac78:             }
1:d40ac78:             assertFalse(iter.hasNext());
1:d40ac78:             return result;
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     private UnfilteredRowIterator listToIterator(List<Unfiltered> list, DecoratedKey key)
1:d40ac78:     {
1:d40ac78:         return UnfilteredRowsGenerator.source(list, metadata, key, deletionTimes.getOrDefault(list, DeletionTime.LIVE));
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     NavigableMap<DecoratedKey, List<Unfiltered>> generateContent(Random rand, UnfilteredRowsGenerator generator,
1:d40ac78:                                                                  List<DecoratedKey> keys, int pcount, int rcount)
1:d40ac78:     {
1:d40ac78:         NavigableMap<DecoratedKey, List<Unfiltered>> map = new TreeMap<>();
1:d40ac78:         for (int i = 0; i < pcount; ++i)
1:d40ac78:         {
1:d40ac78:             DecoratedKey key = keys.get(rand.nextInt(keys.size()));
1:d40ac78:             map.put(key, generator.generateSource(rand, rcount, RANGE, NOW - 5, x -> NOW - 1));
1:d40ac78:         }
1:d40ac78:         return map;
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     @Test
1:d40ac78:     public void testRandom()
1:d40ac78:     {
1:d40ac78:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:d40ac78:         for (int seed = 1; seed < 100; ++seed)
1:d40ac78:         {
1:d40ac78:             Random rand = new Random(seed);
1:d40ac78:             List<List<Unfiltered>> sources = new ArrayList<>();
1:d40ac78:             for (int i = 0; i < 10; ++i)
1:d40ac78:                 sources.add(generator.generateSource(rand, COUNT, RANGE, NOW - 5, x -> NOW - 15));
1:d40ac78:             int srcSz = sources.stream().mapToInt(CompactionIteratorTest::size).sum();
1:d40ac78:             List<List<Unfiltered>> tombSources = new ArrayList<>();
1:d40ac78:             for (int i = 0; i < 10; ++i)
1:d40ac78:                 sources.add(generator.generateSource(rand, COUNT, RANGE, NOW - 5, x -> NOW - 15));
1:d40ac78:             List<Unfiltered> result = compact(sources, tombSources);
1:d40ac78:             verifyEquivalent(sources, result, tombSources, generator);
1:d40ac78:             assertTrue(size(result) < srcSz);
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     class Controller extends CompactionController
1:d40ac78:     {
1:d40ac78:         private final Map<DecoratedKey, Iterable<UnfilteredRowIterator>> tombstoneSources;
1:d40ac78: 
1:d40ac78:         public Controller(ColumnFamilyStore cfs, Map<DecoratedKey, Iterable<UnfilteredRowIterator>> tombstoneSources, int gcBefore)
1:d40ac78:         {
1:d40ac78:             super(cfs, Collections.emptySet(), gcBefore);
1:d40ac78:             this.tombstoneSources = tombstoneSources;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public Iterable<UnfilteredRowIterator> shadowSources(DecoratedKey key, boolean tombstoneOnly)
1:d40ac78:         {
1:d40ac78:             assert tombstoneOnly;
1:d40ac78:             return tombstoneSources.get(key);
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: 
1:d40ac78:     class Scanner extends AbstractUnfilteredPartitionIterator implements ISSTableScanner
1:d40ac78:     {
1:d40ac78:         Iterator<UnfilteredRowIterator> iter;
1:d40ac78: 
1:d40ac78:         Scanner(Iterable<UnfilteredRowIterator> content)
1:d40ac78:         {
1:d40ac78:             iter = content.iterator();
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public boolean isForThrift()
1:d40ac78:         {
1:d40ac78:             return false;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public CFMetaData metadata()
1:d40ac78:         {
1:d40ac78:             return metadata;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public boolean hasNext()
1:d40ac78:         {
1:d40ac78:             return iter.hasNext();
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public UnfilteredRowIterator next()
1:d40ac78:         {
1:d40ac78:             return iter.next();
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public long getLengthInBytes()
1:d40ac78:         {
1:d40ac78:             return 0;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:d40ac78:         public long getCurrentPosition()
1:d40ac78:         {
1:d40ac78:             return 0;
1:d40ac78:         }
1:d40ac78: 
1:d40ac78:         @Override
1:10649b1:         public long getBytesScanned()
1:10649b1:         {
1:10649b1:             return 0;
1:10649b1:         }
1:10649b1: 
1:10649b1:         @Override
1:10649b1:         public long getCompressedLengthInBytes()
1:10649b1:         {
1:10649b1:             return 0;
1:10649b1:         }
1:10649b1: 
1:10649b1:         @Override
1:d40ac78:         public String getBackingFiles()
1:d40ac78:         {
1:d40ac78:             return null;
1:d40ac78:         }
1:d40ac78:     }
1:d40ac78: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     static final DecoratedKey kk;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
1: 
1:         kk = Util.dk("key");
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:10649b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
/////////////////////////////////////////////////////////////////////////
1:         public long getBytesScanned()
1:         {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public long getCompressedLengthInBytes()
1:         {
1:             return 0;
1:         }
1: 
1:         @Override
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:d40ac78
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.compaction;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.util.*;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import com.google.common.collect.*;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.DeletionTime;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.io.sstable.ISSTableScanner;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: 
1: public class CompactionIteratorTest
1: {
1: 
1:     private static final int NOW = 1000;
1:     private static final int GC_BEFORE = 100;
1:     private static final String KSNAME = "CompactionIteratorTest";
1:     private static final String CFNAME = "Integer1";
1: 
0:     static final DecoratedKey kk = Util.dk("key");
1:     static final CFMetaData metadata;
1:     private static final int RANGE = 1000;
1:     private static final int COUNT = 100;
1: 
1:     Map<List<Unfiltered>, DeletionTime> deletionTimes = new HashMap<>();
1: 
1:     static {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KSNAME,
1:                                     KeyspaceParams.simple(1),
1:                                     metadata = SchemaLoader.standardCFMD(KSNAME,
1:                                                                          CFNAME,
1:                                                                          1,
1:                                                                          UTF8Type.instance,
1:                                                                          Int32Type.instance,
1:                                                                          Int32Type.instance));
1:     }
1: 
1:     // See org.apache.cassandra.db.rows.UnfilteredRowsGenerator.parse for the syntax used in these tests.
1: 
1:     @Test
1:     public void testGcCompactionSupersedeLeft()
1:     {
1:         testCompaction(new String[] {
1:             "5<=[140] 10[150] [140]<20 22<[130] [130]<25 30[150]"
1:         }, new String[] {
1:             "7<[160] 15[180] [160]<30 40[120]"
1:         },
1:         3);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionSupersedeMiddle()
1:     {
1:         testCompaction(new String[] {
1:             "5<=[140] 10[150] [140]<40 60[150]"
1:         }, new String[] {
1:             "7<=[160] 15[180] [160]<=30 40[120]"
1:         },
1:         3);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionSupersedeRight()
1:     {
1:         testCompaction(new String[] {
1:             "9<=[140] 10[150] [140]<40 60[150]"
1:         }, new String[] {
1:             "7<[160] 15[180] [160]<30 40[120]"
1:         },
1:         3);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionSwitchInSuperseded()
1:     {
1:         testCompaction(new String[] {
1:             "5<=[140] 10[150] [140]<20 20<=[170] [170]<=50 60[150]"
1:         }, new String[] {
1:             "7<[160] 15[180] [160]<30 40[120]"
1:         },
1:         5);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionBoundaries()
1:     {
1:         testCompaction(new String[] {
1:             "5<=[120] [120]<9 9<=[140] 10[150] [140]<40 40<=[120] 60[150] [120]<90"
1:         }, new String[] {
1:             "7<[160] 15[180] [160]<30 40[120] 45<[140] [140]<80 88<=[130] [130]<100"
1:         },
1:         7);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionMatches()
1:     {
1:         testCompaction(new String[] {
1:             "5<=[120] [120]<=9 9<[140] 10[150] [140]<40 40<=[120] 60[150] [120]<90 120<=[100] [100]<130"
1:         }, new String[] {
1:             "9<[160] 15[180] [160]<40 40[120] 45<[140] [140]<90 90<=[110] [110]<100 120<=[100] [100]<130"
1:         },
1:         5);
1:     }
1: 
1:     @Test
1:     public void testGcCompactionRowDeletion()
1:     {
1:         testCompaction(new String[] {
1:             "10[150] 20[160] 25[160] 30[170] 40[120] 50[120]"
1:         }, new String[] {
1:             "10<=[155] 20[200D180] 30[200D160] [155]<=30 40[150D130] 50[150D100]"
1:         },
1:         "25[160] 30[170] 50[120]");
1:     }
1: 
1:     @Test
1:     public void testGcCompactionPartitionDeletion()
1:     {
1:         testCompaction(new String[] {
1:             "10[150] 20[160] 25[160] 30[170] 40[120] 50[120]"
1:         }, new String[] {
1:             // Dxx| stands for partition deletion at time xx
1:             "D165|10<=[155] 20[200D180] 30[200D160] [155]<=30 40[150D130] 50[150D100]"
1:         },
1:         "30[170]");
1:     }
1: 
1:     void testCompaction(String[] inputs, String[] tombstones, String expected)
1:     {
1:         testNonGcCompaction(inputs, tombstones);
1: 
1:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:         List<Unfiltered> result = compact(inputLists, tombstoneLists);
1:         System.out.println("GC compaction resulted in " + size(result) + " Unfiltereds");
1:         generator.verifyValid(result);
1:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:         List<Unfiltered> expectedResult = generator.parse(expected, NOW - 1);
1:         if (!expectedResult.equals(result))
1:             fail("Expected " + expected + ", got " + generator.str(result));
1:     }
1: 
1:     void testCompaction(String[] inputs, String[] tombstones, int expectedCount)
1:     {
1:         testNonGcCompaction(inputs, tombstones);
1: 
1:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:         List<Unfiltered> result = compact(inputLists, tombstoneLists);
1:         System.out.println("GC compaction resulted in " + size(result) + " Unfiltereds");
1:         generator.verifyValid(result);
1:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:         if (size(result) > expectedCount)
1:             fail("Expected compaction with " + expectedCount + " elements, got " + size(result) + ": " + generator.str(result));
1:     }
1: 
1:     int testNonGcCompaction(String[] inputs, String[] tombstones)
1:     {
1:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:         List<List<Unfiltered>> inputLists = parse(inputs, generator);
1:         List<List<Unfiltered>> tombstoneLists = parse(tombstones, generator);
1:         List<Unfiltered> result = compact(inputLists, Collections.emptyList());
1:         System.out.println("Non-GC compaction resulted in " + size(result) + " Unfiltereds");
1:         generator.verifyValid(result);
1:         verifyEquivalent(inputLists, result, tombstoneLists, generator);
1:         return size(result);
1:     }
1: 
1:     private static int size(List<Unfiltered> data)
1:     {
1:         return data.stream().mapToInt(x -> x instanceof RangeTombstoneBoundaryMarker ? 2 : 1).sum();
1:     }
1: 
1:     private void verifyEquivalent(List<List<Unfiltered>> sources, List<Unfiltered> result, List<List<Unfiltered>> tombstoneSources, UnfilteredRowsGenerator generator)
1:     {
1:         // sources + tombstoneSources must be the same as result + tombstoneSources
1:         List<Unfiltered> expected = compact(Iterables.concat(sources, tombstoneSources), Collections.emptyList());
1:         List<Unfiltered> actual = compact(Iterables.concat(ImmutableList.of(result), tombstoneSources), Collections.emptyList());
1:         if (!expected.equals(actual))
1:         {
1:             System.out.println("Equivalence test failure between sources:");
1:             for (List<Unfiltered> partition : sources)
1:                 generator.dumpList(partition);
1:             System.out.println("and compacted " + generator.str(result));
1:             System.out.println("with tombstone sources:");
1:             for (List<Unfiltered> partition : tombstoneSources)
1:                 generator.dumpList(partition);
1:             System.out.println("expected " + generator.str(expected));
1:             System.out.println("got " + generator.str(actual));
1:             fail("Failed equivalence test.");
1:         }
1:     }
1: 
1:     private List<List<Unfiltered>> parse(String[] inputs, UnfilteredRowsGenerator generator)
1:     {
1:         return ImmutableList.copyOf(Lists.transform(Arrays.asList(inputs), x -> parse(x, generator)));
1:     }
1: 
1:     private List<Unfiltered> parse(String input, UnfilteredRowsGenerator generator)
1:     {
1:         Matcher m = Pattern.compile("D(\\d+)\\|").matcher(input);
1:         if (m.lookingAt())
1:         {
1:             int del = Integer.parseInt(m.group(1));
1:             input = input.substring(m.end());
1:             List<Unfiltered> list = generator.parse(input, NOW - 1);
1:             deletionTimes.put(list, new DeletionTime(del, del));
1:             return list;
1:         }
1:         else
1:             return generator.parse(input, NOW - 1);
1:     }
1: 
1:     private List<Unfiltered> compact(Iterable<List<Unfiltered>> sources, Iterable<List<Unfiltered>> tombstoneSources)
1:     {
1:         List<Iterable<UnfilteredRowIterator>> content = ImmutableList.copyOf(Iterables.transform(sources, list -> ImmutableList.of(listToIterator(list, kk))));
1:         Map<DecoratedKey, Iterable<UnfilteredRowIterator>> transformedSources = new TreeMap<>();
1:         transformedSources.put(kk, Iterables.transform(tombstoneSources, list -> listToIterator(list, kk)));
1:         try (CompactionController controller = new Controller(Keyspace.openAndGetStore(metadata), transformedSources, GC_BEFORE);
1:              CompactionIterator iter = new CompactionIterator(OperationType.COMPACTION,
1:                                                               Lists.transform(content, x -> new Scanner(x)),
1:                                                               controller, NOW, null))
1:         {
1:             List<Unfiltered> result = new ArrayList<>();
1:             assertTrue(iter.hasNext());
1:             try (UnfilteredRowIterator partition = iter.next())
1:             {
1:                 Iterators.addAll(result, partition);
1:             }
1:             assertFalse(iter.hasNext());
1:             return result;
1:         }
1:     }
1: 
1:     private UnfilteredRowIterator listToIterator(List<Unfiltered> list, DecoratedKey key)
1:     {
1:         return UnfilteredRowsGenerator.source(list, metadata, key, deletionTimes.getOrDefault(list, DeletionTime.LIVE));
1:     }
1: 
1:     NavigableMap<DecoratedKey, List<Unfiltered>> generateContent(Random rand, UnfilteredRowsGenerator generator,
1:                                                                  List<DecoratedKey> keys, int pcount, int rcount)
1:     {
1:         NavigableMap<DecoratedKey, List<Unfiltered>> map = new TreeMap<>();
1:         for (int i = 0; i < pcount; ++i)
1:         {
1:             DecoratedKey key = keys.get(rand.nextInt(keys.size()));
1:             map.put(key, generator.generateSource(rand, rcount, RANGE, NOW - 5, x -> NOW - 1));
1:         }
1:         return map;
1:     }
1: 
1:     @Test
1:     public void testRandom()
1:     {
1:         UnfilteredRowsGenerator generator = new UnfilteredRowsGenerator(metadata.comparator, false);
1:         for (int seed = 1; seed < 100; ++seed)
1:         {
1:             Random rand = new Random(seed);
1:             List<List<Unfiltered>> sources = new ArrayList<>();
1:             for (int i = 0; i < 10; ++i)
1:                 sources.add(generator.generateSource(rand, COUNT, RANGE, NOW - 5, x -> NOW - 15));
1:             int srcSz = sources.stream().mapToInt(CompactionIteratorTest::size).sum();
1:             List<List<Unfiltered>> tombSources = new ArrayList<>();
1:             for (int i = 0; i < 10; ++i)
1:                 sources.add(generator.generateSource(rand, COUNT, RANGE, NOW - 5, x -> NOW - 15));
1:             List<Unfiltered> result = compact(sources, tombSources);
1:             verifyEquivalent(sources, result, tombSources, generator);
1:             assertTrue(size(result) < srcSz);
1:         }
1:     }
1: 
1:     class Controller extends CompactionController
1:     {
1:         private final Map<DecoratedKey, Iterable<UnfilteredRowIterator>> tombstoneSources;
1: 
1:         public Controller(ColumnFamilyStore cfs, Map<DecoratedKey, Iterable<UnfilteredRowIterator>> tombstoneSources, int gcBefore)
1:         {
1:             super(cfs, Collections.emptySet(), gcBefore);
1:             this.tombstoneSources = tombstoneSources;
1:         }
1: 
1:         @Override
1:         public Iterable<UnfilteredRowIterator> shadowSources(DecoratedKey key, boolean tombstoneOnly)
1:         {
1:             assert tombstoneOnly;
1:             return tombstoneSources.get(key);
1:         }
1:     }
1: 
1:     class Scanner extends AbstractUnfilteredPartitionIterator implements ISSTableScanner
1:     {
1:         Iterator<UnfilteredRowIterator> iter;
1: 
1:         Scanner(Iterable<UnfilteredRowIterator> content)
1:         {
1:             iter = content.iterator();
1:         }
1: 
1:         @Override
1:         public boolean isForThrift()
1:         {
1:             return false;
1:         }
1: 
1:         @Override
1:         public CFMetaData metadata()
1:         {
1:             return metadata;
1:         }
1: 
1:         @Override
1:         public boolean hasNext()
1:         {
1:             return iter.hasNext();
1:         }
1: 
1:         @Override
1:         public UnfilteredRowIterator next()
1:         {
1:             return iter.next();
1:         }
1: 
1:         @Override
1:         public long getLengthInBytes()
1:         {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public long getCurrentPosition()
1:         {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public String getBackingFiles()
1:         {
1:             return null;
1:         }
1:     }
1: }
============================================================================