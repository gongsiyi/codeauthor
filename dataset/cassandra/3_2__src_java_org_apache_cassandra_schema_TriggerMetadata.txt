1:a965977: /*
1:a965977:  * Licensed to the Apache Software Foundation (ASF) under one
1:a965977:  * or more contributor license agreements.  See the NOTICE file
1:a965977:  * distributed with this work for additional information
1:a965977:  * regarding copyright ownership.  The ASF licenses this file
1:a965977:  * to you under the Apache License, Version 2.0 (the
1:a965977:  * "License"); you may not use this file except in compliance
1:a965977:  *  with the License.  You may obtain a copy of the License at
4:a965977:  *
1:a965977:  *   http://www.apache.org/licenses/LICENSE-2.0
1:a965977:  *
1:a965977:  * Unless required by applicable law or agreed to in writing,
1:a965977:  * software distributed under the License is distributed on an
1:a965977:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:a965977:  * KIND, either express or implied.  See the License for the
1:a965977:  * specific language governing permissions and limitations
1:a965977:  * under the License.
4:a965977:  */
1:16044a6: package org.apache.cassandra.schema;
14:a965977: 
1:e8a0d0a: import com.google.common.base.MoreObjects;
1:a965977: import com.google.common.base.Objects;
1:a965977: 
1:16044a6: public final class TriggerMetadata
9:a965977: {
1:a94b173:     public static final String CLASS = "class";
1:a965977: 
1:a965977:     public final String name;
1:a965977: 
1:a965977:     // For now, the only supported option is 'class'.
1:a965977:     // Proper trigger parametrization will be added later.
1:a965977:     public final String classOption;
1:a965977: 
1:16044a6:     public TriggerMetadata(String name, String classOption)
1:a965977:     {
1:a965977:         this.name = name;
1:a965977:         this.classOption = classOption;
9:a965977:     }
1:a965977: 
1:16044a6:     public static TriggerMetadata create(String name, String classOption)
1:a965977:     {
1:16044a6:         return new TriggerMetadata(name, classOption);
1:a965977:     }
1:a965977: 
1:a965977:     @Override
1:a965977:     public boolean equals(Object o)
1:a965977:     {
1:a965977:         if (this == o)
1:a965977:             return true;
1:a965977: 
1:16044a6:         if (!(o instanceof TriggerMetadata))
1:a965977:             return false;
1:a965977: 
1:16044a6:         TriggerMetadata td = (TriggerMetadata) o;
1:a965977: 
1:16044a6:         return name.equals(td.name) && classOption.equals(td.classOption);
1:a965977:     }
1:a965977: 
1:a965977:     @Override
1:a965977:     public int hashCode()
1:a965977:     {
1:a965977:         return Objects.hashCode(name, classOption);
1:a965977:     }
1:a965977: 
1:a965977:     @Override
1:a965977:     public String toString()
1:a965977:     {
1:e8a0d0a:         return MoreObjects.toStringHelper(this)
1:e8a0d0a:                           .add("name", name)
1:e8a0d0a:                           .add("class", classOption)
1:e8a0d0a:                           .toString();
1:a965977:     }
1:a965977: }
============================================================================
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e8a0d0a
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.base.MoreObjects;
/////////////////////////////////////////////////////////////////////////
1:         return MoreObjects.toStringHelper(this)
1:                           .add("name", name)
1:                           .add("class", classOption)
1:                           .toString();
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:16044a6
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.schema;
1: public final class TriggerMetadata
/////////////////////////////////////////////////////////////////////////
1:     public TriggerMetadata(String name, String classOption)
1:     public static TriggerMetadata create(String name, String classOption)
1:         return new TriggerMetadata(name, classOption);
/////////////////////////////////////////////////////////////////////////
1:         if (!(o instanceof TriggerMetadata))
1:         TriggerMetadata td = (TriggerMetadata) o;
1:         return name.equals(td.name) && classOption.equals(td.classOption);
/////////////////////////////////////////////////////////////////////////
0:         return Objects.toStringHelper(this)
0:                       .add("name", name)
0:                       .add("class", classOption)
0:                       .toString();
commit:3e9d345
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:611d1ba
/////////////////////////////////////////////////////////////////////////
0:         String query = String.format("SELECT * FROM %s.%s", SystemKeyspace.NAME, SystemKeyspace.SCHEMA_TRIGGERS_TABLE);
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_TABLE);
0:         CFMetaData cfm = SystemKeyspace.SchemaTriggersTable;
/////////////////////////////////////////////////////////////////////////
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_TABLE);
0:         Composite prefix = SystemKeyspace.SchemaTriggersTable.comparator.make(cfName, name);
commit:a94b173
/////////////////////////////////////////////////////////////////////////
0:     public static final String TRIGGER_NAME = "trigger_name";
0:     public static final String TRIGGER_OPTIONS = "trigger_options";
1:     public static final String CLASS = "class";
/////////////////////////////////////////////////////////////////////////
0:     public TriggerDefinition(String name, String classOption)
/////////////////////////////////////////////////////////////////////////
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
0:      * Add specified trigger to the schema using given mutation.
0:      * @param mutation  The schema mutation
0:     public void toSchema(Mutation mutation, String cfName, long timestamp)
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_CF);
/////////////////////////////////////////////////////////////////////////
0:      * Drop specified trigger from the schema using given mutation.
0:      * @param mutation  The schema mutation
0:     public void deleteFromSchema(Mutation mutation, String cfName, long timestamp)
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_CF);
commit:b248b1a
/////////////////////////////////////////////////////////////////////////
0:         return Objects.equal(name, td.name) && Objects.equal(classOption, td.classOption);
commit:a965977
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  *  with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
0: package org.apache.cassandra.config;
1: 
0: import java.util.*;
1: 
1: import com.google.common.base.Objects;
1: 
0: import org.apache.cassandra.cql3.ColumnNameBuilder;
0: import org.apache.cassandra.cql3.QueryProcessor;
0: import org.apache.cassandra.cql3.UntypedResultSet;
0: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.marshal.UTF8Type;
0: import org.apache.cassandra.thrift.TriggerDef;
1: 
0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
0: public class TriggerDefinition
1: {
0:     private static final String TRIGGER_NAME = "trigger_name";
0:     private static final String TRIGGER_OPTIONS = "trigger_options";
0:     private static final String CLASS = "class";
1: 
1:     public final String name;
1: 
1:     // For now, the only supported option is 'class'.
1:     // Proper trigger parametrization will be added later.
1:     public final String classOption;
1: 
0:     TriggerDefinition(String name, String classOption)
1:     {
1:         this.name = name;
1:         this.classOption = classOption;
1:     }
1: 
0:     public static TriggerDefinition create(String name, String classOption)
1:     {
0:         return new TriggerDefinition(name, classOption);
1:     }
1: 
0:     /**
0:      * Deserialize triggers from storage-level representation.
1:      *
0:      * @param serializedTriggers storage-level partition containing the trigger definitions
0:      * @return the list of processed TriggerDefinitions
1:      */
0:     public static List<TriggerDefinition> fromSchema(Row serializedTriggers)
1:     {
0:         List<TriggerDefinition> triggers = new ArrayList<>();
0:         String query = String.format("SELECT * FROM %s.%s", Keyspace.SYSTEM_KS, SystemKeyspace.SCHEMA_TRIGGERS_CF);
0:         for (UntypedResultSet.Row row : QueryProcessor.resultify(query, serializedTriggers))
1:         {
0:             String name = row.getString(TRIGGER_NAME);
0:             String classOption = row.getMap(TRIGGER_OPTIONS, UTF8Type.instance, UTF8Type.instance).get(CLASS);
0:             triggers.add(new TriggerDefinition(name, classOption));
1:         }
0:         return triggers;
1:     }
1: 
0:     /**
0:      * Add specified trigger to the schema using given row.
1:      *
0:      * @param rm        The schema row mutation
0:      * @param cfName    The name of the parent ColumnFamily
0:      * @param timestamp The timestamp to use for the columns
1:      */
0:     public void toSchema(RowMutation rm, String cfName, long timestamp)
1:     {
0:         ColumnFamily cf = rm.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_CF);
1: 
0:         ColumnNameBuilder builder = CFMetaData.SchemaTriggersCf.getCfDef().getColumnNameBuilder();
0:         builder.add(bytes(cfName)).add(bytes(name));
1: 
0:         cf.addColumn(builder.copy().add(bytes("")).build(), bytes(""), timestamp); // the row marker
0:         cf.addColumn(builder.copy().add(bytes(TRIGGER_OPTIONS)).add(bytes(CLASS)).build(), bytes(classOption), timestamp);
1:     }
1: 
0:     /**
0:      * Drop specified trigger from the schema using given row.
1:      *
0:      * @param rm        The schema row mutation
0:      * @param cfName    The name of the parent ColumnFamily
0:      * @param timestamp The timestamp to use for the tombstone
1:      */
0:     public void deleteFromSchema(RowMutation rm, String cfName, long timestamp)
1:     {
0:         ColumnFamily cf = rm.addOrGet(SystemKeyspace.SCHEMA_TRIGGERS_CF);
0:         int ldt = (int) (System.currentTimeMillis() / 1000);
1: 
0:         ColumnNameBuilder builder = CFMetaData.SchemaTriggersCf.getCfDef().getColumnNameBuilder();
0:         builder.add(bytes(cfName)).add(bytes(name));
0:         cf.addAtom(new RangeTombstone(builder.build(), builder.buildAsEndOfRange(), timestamp, ldt));
1:     }
1: 
0:     public static TriggerDefinition fromThrift(TriggerDef thriftDef)
1:     {
0:         return new TriggerDefinition(thriftDef.getName(), thriftDef.getOptions().get(CLASS));
1:     }
1: 
0:     public TriggerDef toThrift()
1:     {
0:         TriggerDef td = new TriggerDef();
0:         td.setName(name);
0:         td.setOptions(Collections.singletonMap(CLASS, classOption));
0:         return td;
1:     }
1: 
0:     public static Map<String, TriggerDefinition> fromThrift(List<TriggerDef> thriftDefs)
1:     {
0:         Map<String, TriggerDefinition> triggerDefinitions = new HashMap<>();
0:         for (TriggerDef thriftDef : thriftDefs)
0:             triggerDefinitions.put(thriftDef.getName(), fromThrift(thriftDef));
0:         return triggerDefinitions;
1:     }
1: 
0:     public static List<TriggerDef> toThrift(Map<String, TriggerDefinition> triggers)
1:     {
0:         List<TriggerDef> thriftDefs = new ArrayList<>(triggers.size());
0:         for (TriggerDefinition def : triggers.values())
0:             thriftDefs.add(def.toThrift());
0:         return thriftDefs;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o)
1:             return true;
1: 
0:         if (!(o instanceof TriggerDefinition))
1:             return false;
1: 
0:         TriggerDefinition td = (TriggerDefinition) o;
1: 
0:         return Objects.equal(this.name, td.name)
0:             && Objects.equal(this.classOption, td.classOption);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return Objects.hashCode(name, classOption);
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
0:         return Objects.toStringHelper(this).add("name", name).add("classOption", classOption).toString();
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.composites.Composite;
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData cfm = CFMetaData.SchemaTriggersCf;
0:         Composite prefix = cfm.comparator.make(cfName, name);
0:         CFRowAdder adder = new CFRowAdder(cf, prefix, timestamp);
0:         adder.addMapEntry(TRIGGER_OPTIONS, CLASS, classOption);
/////////////////////////////////////////////////////////////////////////
0:         Composite prefix = CFMetaData.SchemaTriggersCf.comparator.make(cfName, name);
0:         cf.addAtom(new RangeTombstone(prefix, prefix.end(), timestamp, ldt));
commit:5f5905d
/////////////////////////////////////////////////////////////////////////
0:         ColumnNameBuilder builder = CFMetaData.SchemaTriggersCf.getColumnNameBuilder();
/////////////////////////////////////////////////////////////////////////
0:         ColumnNameBuilder builder = CFMetaData.SchemaTriggersCf.getColumnNameBuilder();
============================================================================