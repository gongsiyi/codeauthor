1:e31e216: /*
1:e31e216:  * Licensed to the Apache Software Foundation (ASF) under one
1:e31e216:  * or more contributor license agreements.  See the NOTICE file
1:e31e216:  * distributed with this work for additional information
1:e31e216:  * regarding copyright ownership.  The ASF licenses this file
1:e31e216:  * to you under the Apache License, Version 2.0 (the
1:e31e216:  * "License"); you may not use this file except in compliance
1:e31e216:  * with the License.  You may obtain a copy of the License at
1:e31e216:  *
1:e31e216:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e31e216:  *
1:e31e216:  * Unless required by applicable law or agreed to in writing, software
1:e31e216:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e31e216:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e31e216:  * See the License for the specific language governing permissions and
1:e31e216:  * limitations under the License.
1:e31e216:  */
1:e31e216: 
1:e31e216: package org.apache.cassandra.db.commitlog;
1:e31e216: 
1:e31e216: import java.io.IOException;
1:e31e216: 
1:e31e216: import org.apache.cassandra.db.Mutation;
1:e31e216: 
1:e31e216: public interface CommitLogReadHandler
1:e31e216: {
1:e31e216:     enum CommitLogReadErrorReason
1:e31e216:     {
1:e31e216:         RECOVERABLE_DESCRIPTOR_ERROR,
1:e31e216:         UNRECOVERABLE_DESCRIPTOR_ERROR,
1:e31e216:         MUTATION_ERROR,
1:e31e216:         UNRECOVERABLE_UNKNOWN_ERROR,
1:e31e216:         EOF
1:e31e216:     }
1:e31e216: 
1:e31e216:     class CommitLogReadException extends IOException
1:e31e216:     {
1:e31e216:         public final CommitLogReadErrorReason reason;
1:e31e216:         public final boolean permissible;
1:e31e216: 
1:e31e216:         CommitLogReadException(String message, CommitLogReadErrorReason reason, boolean permissible)
1:e31e216:         {
1:e31e216:             super(message);
1:e31e216:             this.reason = reason;
1:e31e216:             this.permissible = permissible;
1:e31e216:         }
1:e31e216:     }
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Handle an error during segment read, signaling whether or not you want the reader to skip the remainder of the
1:e31e216:      * current segment on error.
1:e31e216:      *
1:e31e216:      * @param exception CommitLogReadException w/details on exception state
1:e31e216:      * @return boolean indicating whether to stop reading
1:e31e216:      * @throws IOException In the event the handler wants forceful termination of all processing, throw IOException.
1:e31e216:      */
1:e31e216:     boolean shouldSkipSegmentOnError(CommitLogReadException exception) throws IOException;
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * In instances where we cannot recover from a specific error and don't care what the reader thinks
1:e31e216:      *
1:e31e216:      * @param exception CommitLogReadException w/details on exception state
1:e31e216:      * @throws IOException
1:e31e216:      */
1:e31e216:     void handleUnrecoverableError(CommitLogReadException exception) throws IOException;
1:e31e216: 
1:e31e216:     /**
1:e31e216:      * Process a deserialized mutation
1:e31e216:      *
1:e31e216:      * @param m deserialized mutation
1:e31e216:      * @param size serialized size of the mutation
1:e31e216:      * @param entryLocation filePointer offset inside the CommitLogSegment for the record
1:e31e216:      * @param desc CommitLogDescriptor for mutation being processed
1:e31e216:      */
1:e31e216:     void handleMutation(Mutation m, int size, int entryLocation, CommitLogDescriptor desc);
1:e31e216: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.Mutation;
1: 
1: public interface CommitLogReadHandler
1: {
1:     enum CommitLogReadErrorReason
1:     {
1:         RECOVERABLE_DESCRIPTOR_ERROR,
1:         UNRECOVERABLE_DESCRIPTOR_ERROR,
1:         MUTATION_ERROR,
1:         UNRECOVERABLE_UNKNOWN_ERROR,
1:         EOF
1:     }
1: 
1:     class CommitLogReadException extends IOException
1:     {
1:         public final CommitLogReadErrorReason reason;
1:         public final boolean permissible;
1: 
1:         CommitLogReadException(String message, CommitLogReadErrorReason reason, boolean permissible)
1:         {
1:             super(message);
1:             this.reason = reason;
1:             this.permissible = permissible;
1:         }
1:     }
1: 
1:     /**
1:      * Handle an error during segment read, signaling whether or not you want the reader to skip the remainder of the
1:      * current segment on error.
1:      *
1:      * @param exception CommitLogReadException w/details on exception state
1:      * @return boolean indicating whether to stop reading
1:      * @throws IOException In the event the handler wants forceful termination of all processing, throw IOException.
1:      */
1:     boolean shouldSkipSegmentOnError(CommitLogReadException exception) throws IOException;
1: 
1:     /**
1:      * In instances where we cannot recover from a specific error and don't care what the reader thinks
1:      *
1:      * @param exception CommitLogReadException w/details on exception state
1:      * @throws IOException
1:      */
1:     void handleUnrecoverableError(CommitLogReadException exception) throws IOException;
1: 
1:     /**
1:      * Process a deserialized mutation
1:      *
1:      * @param m deserialized mutation
1:      * @param size serialized size of the mutation
1:      * @param entryLocation filePointer offset inside the CommitLogSegment for the record
1:      * @param desc CommitLogDescriptor for mutation being processed
1:      */
1:     void handleMutation(Mutation m, int size, int entryLocation, CommitLogDescriptor desc);
1: }
============================================================================