1:186777a: /*
1:186777a:  * Licensed to the Apache Software Foundation (ASF) under one
1:186777a:  * or more contributor license agreements.  See the NOTICE file
1:186777a:  * distributed with this work for additional information
1:186777a:  * regarding copyright ownership.  The ASF licenses this file
1:186777a:  * to you under the Apache License, Version 2.0 (the
1:186777a:  * "License"); you may not use this file except in compliance
1:186777a:  * with the License.  You may obtain a copy of the License at
1:186777a:  *
1:186777a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:186777a:  *
1:186777a:  * Unless required by applicable law or agreed to in writing, software
1:186777a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:186777a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:186777a:  * See the License for the specific language governing permissions and
1:186777a:  * limitations under the License.
1:186777a:  */
1:186777a: 
1:186777a: package org.apache.cassandra.auth;
1:186777a: 
1:186777a: import java.lang.management.ManagementFactory;
1:186777a: import java.util.concurrent.ExecutionException;
1:186777a: import java.util.concurrent.ThreadPoolExecutor;
1:186777a: import java.util.concurrent.TimeUnit;
1:186777a: import java.util.function.Consumer;
1:186777a: import java.util.function.Function;
1:186777a: import java.util.function.Supplier;
1:186777a: import javax.management.MBeanServer;
1:186777a: import javax.management.MalformedObjectNameException;
1:186777a: import javax.management.ObjectName;
1:186777a: 
1:186777a: import com.google.common.cache.CacheBuilder;
1:186777a: import com.google.common.cache.CacheLoader;
1:186777a: import com.google.common.cache.LoadingCache;
1:186777a: import com.google.common.util.concurrent.ListenableFuture;
1:186777a: import com.google.common.util.concurrent.ListenableFutureTask;
1:186777a: import org.slf4j.Logger;
1:186777a: import org.slf4j.LoggerFactory;
1:186777a: 
1:186777a: import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
1:186777a: 
1:186777a: public class AuthCache<K, V> implements AuthCacheMBean
1:186777a: {
1:186777a:     private static final Logger logger = LoggerFactory.getLogger(AuthCache.class);
1:186777a: 
1:186777a:     private static final String MBEAN_NAME_BASE = "org.apache.cassandra.auth:type=";
1:186777a: 
1:186777a:     private volatile LoadingCache<K, V> cache;
1:186777a:     private ThreadPoolExecutor cacheRefreshExecutor;
1:186777a: 
1:186777a:     private final String name;
1:186777a:     private final Consumer<Integer> setValidityDelegate;
1:186777a:     private final Supplier<Integer> getValidityDelegate;
1:186777a:     private final Consumer<Integer> setUpdateIntervalDelegate;
1:186777a:     private final Supplier<Integer> getUpdateIntervalDelegate;
1:186777a:     private final Consumer<Integer> setMaxEntriesDelegate;
1:186777a:     private final Supplier<Integer> getMaxEntriesDelegate;
1:186777a:     private final Function<K, V> loadFunction;
1:186777a:     private final Supplier<Boolean> enableCache;
1:186777a: 
1:186777a:     protected AuthCache(String name,
1:186777a:                         Consumer<Integer> setValidityDelegate,
1:186777a:                         Supplier<Integer> getValidityDelegate,
1:186777a:                         Consumer<Integer> setUpdateIntervalDelegate,
1:186777a:                         Supplier<Integer> getUpdateIntervalDelegate,
1:186777a:                         Consumer<Integer> setMaxEntriesDelegate,
1:186777a:                         Supplier<Integer> getMaxEntriesDelegate,
1:186777a:                         Function<K, V> loadFunction,
1:186777a:                         Supplier<Boolean> enableCache)
1:186777a:     {
1:186777a:         this.name = name;
1:186777a:         this.setValidityDelegate = setValidityDelegate;
1:186777a:         this.getValidityDelegate = getValidityDelegate;
1:186777a:         this.setUpdateIntervalDelegate = setUpdateIntervalDelegate;
1:186777a:         this.getUpdateIntervalDelegate = getUpdateIntervalDelegate;
1:186777a:         this.setMaxEntriesDelegate = setMaxEntriesDelegate;
1:186777a:         this.getMaxEntriesDelegate = getMaxEntriesDelegate;
1:186777a:         this.loadFunction = loadFunction;
1:186777a:         this.enableCache = enableCache;
1:186777a:         init();
1:186777a:     }
1:186777a: 
1:186777a:     protected void init()
1:186777a:     {
1:186777a:         this.cacheRefreshExecutor = new DebuggableThreadPoolExecutor(name + "Refresh", Thread.NORM_PRIORITY);
1:186777a:         this.cache = initCache(null);
1:186777a:         try
1:186777a:         {
1:186777a:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:186777a:             mbs.registerMBean(this, getObjectName());
1:186777a:         }
1:186777a:         catch (Exception e)
1:186777a:         {
1:186777a:             throw new RuntimeException(e);
1:186777a:         }
1:186777a:     }
1:186777a: 
1:186777a:     protected ObjectName getObjectName() throws MalformedObjectNameException
1:186777a:     {
1:186777a:         return new ObjectName(MBEAN_NAME_BASE + name);
1:186777a:     }
1:186777a: 
1:186777a:     public V get(K k) throws ExecutionException
1:186777a:     {
1:186777a:         if (cache == null)
1:186777a:             return loadFunction.apply(k);
1:186777a: 
1:186777a:         return cache.get(k);
1:186777a:     }
1:186777a: 
1:186777a:     public void invalidate()
1:186777a:     {
1:186777a:         cache = initCache(null);
1:186777a:     }
1:186777a: 
1:186777a:     public void invalidate(K k)
1:186777a:     {
1:186777a:         if (cache != null)
1:186777a:             cache.invalidate(k);
1:186777a:     }
1:186777a: 
1:186777a:     public void setValidity(int validityPeriod)
1:186777a:     {
1:186777a:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:186777a:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1:186777a: 
1:186777a:         setValidityDelegate.accept(validityPeriod);
1:186777a:         cache = initCache(cache);
1:186777a:     }
1:186777a: 
1:186777a:     public int getValidity()
1:186777a:     {
1:186777a:         return getValidityDelegate.get();
1:186777a:     }
1:186777a: 
1:186777a:     public void setUpdateInterval(int updateInterval)
1:186777a:     {
1:186777a:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:186777a:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1:186777a: 
1:186777a:         setUpdateIntervalDelegate.accept(updateInterval);
1:186777a:         cache = initCache(cache);
1:186777a:     }
1:186777a: 
1:186777a:     public int getUpdateInterval()
1:186777a:     {
1:186777a:         return getUpdateIntervalDelegate.get();
1:186777a:     }
1:186777a: 
1:186777a:     public void setMaxEntries(int maxEntries)
1:186777a:     {
1:186777a:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:186777a:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1:186777a: 
1:186777a:         setMaxEntriesDelegate.accept(maxEntries);
1:186777a:         cache = initCache(cache);
1:186777a:     }
1:186777a: 
1:186777a:     public int getMaxEntries()
1:186777a:     {
1:186777a:         return getMaxEntriesDelegate.get();
1:186777a:     }
1:186777a: 
1:186777a:     private LoadingCache<K, V> initCache(LoadingCache<K, V> existing)
1:186777a:     {
1:186777a:         if (!enableCache.get())
1:186777a:             return null;
1:186777a: 
1:186777a:         if (getValidity() <= 0)
1:186777a:             return null;
1:186777a: 
1:186777a:         logger.info("(Re)initializing {} (validity period/update interval/max entries) ({}/{}/{})",
1:186777a:                     name, getValidity(), getUpdateInterval(), getMaxEntries());
1:186777a: 
1:186777a:         LoadingCache<K, V> newcache = CacheBuilder.newBuilder()
1:186777a:                            .refreshAfterWrite(getUpdateInterval(), TimeUnit.MILLISECONDS)
1:186777a:                            .expireAfterWrite(getValidity(), TimeUnit.MILLISECONDS)
1:186777a:                            .maximumSize(getMaxEntries())
1:186777a:                            .build(new CacheLoader<K, V>()
1:186777a:                            {
1:fed476f:                                public V load(K k)
1:186777a:                                {
1:186777a:                                    return loadFunction.apply(k);
1:186777a:                                }
1:186777a: 
1:186777a:                                public ListenableFuture<V> reload(final K k, final V oldV)
1:186777a:                                {
1:186777a:                                    ListenableFutureTask<V> task = ListenableFutureTask.create(() -> {
1:186777a:                                        try
1:186777a:                                        {
1:186777a:                                            return loadFunction.apply(k);
1:186777a:                                        }
1:186777a:                                        catch (Exception e)
1:186777a:                                        {
1:186777a:                                            logger.trace("Error performing async refresh of auth data in {}", name, e);
1:186777a:                                            throw e;
1:186777a:                                        }
1:186777a:                                    });
1:186777a:                                    cacheRefreshExecutor.execute(task);
1:186777a:                                    return task;
1:186777a:                                }
1:186777a:                            });
1:186777a:         if (existing != null)
1:186777a:             newcache.putAll(existing.asMap());
1:186777a:         return newcache;
1:186777a:     }
1:186777a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fed476f
/////////////////////////////////////////////////////////////////////////
1:                                public V load(K k)
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:186777a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.auth;
1: 
1: import java.lang.management.ManagementFactory;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
1: import java.util.function.Consumer;
1: import java.util.function.Function;
1: import java.util.function.Supplier;
1: import javax.management.MBeanServer;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import com.google.common.cache.CacheBuilder;
1: import com.google.common.cache.CacheLoader;
1: import com.google.common.cache.LoadingCache;
1: import com.google.common.util.concurrent.ListenableFuture;
1: import com.google.common.util.concurrent.ListenableFutureTask;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
1: 
1: public class AuthCache<K, V> implements AuthCacheMBean
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(AuthCache.class);
1: 
1:     private static final String MBEAN_NAME_BASE = "org.apache.cassandra.auth:type=";
1: 
1:     private volatile LoadingCache<K, V> cache;
1:     private ThreadPoolExecutor cacheRefreshExecutor;
1: 
1:     private final String name;
1:     private final Consumer<Integer> setValidityDelegate;
1:     private final Supplier<Integer> getValidityDelegate;
1:     private final Consumer<Integer> setUpdateIntervalDelegate;
1:     private final Supplier<Integer> getUpdateIntervalDelegate;
1:     private final Consumer<Integer> setMaxEntriesDelegate;
1:     private final Supplier<Integer> getMaxEntriesDelegate;
1:     private final Function<K, V> loadFunction;
1:     private final Supplier<Boolean> enableCache;
1: 
1:     protected AuthCache(String name,
1:                         Consumer<Integer> setValidityDelegate,
1:                         Supplier<Integer> getValidityDelegate,
1:                         Consumer<Integer> setUpdateIntervalDelegate,
1:                         Supplier<Integer> getUpdateIntervalDelegate,
1:                         Consumer<Integer> setMaxEntriesDelegate,
1:                         Supplier<Integer> getMaxEntriesDelegate,
1:                         Function<K, V> loadFunction,
1:                         Supplier<Boolean> enableCache)
1:     {
1:         this.name = name;
1:         this.setValidityDelegate = setValidityDelegate;
1:         this.getValidityDelegate = getValidityDelegate;
1:         this.setUpdateIntervalDelegate = setUpdateIntervalDelegate;
1:         this.getUpdateIntervalDelegate = getUpdateIntervalDelegate;
1:         this.setMaxEntriesDelegate = setMaxEntriesDelegate;
1:         this.getMaxEntriesDelegate = getMaxEntriesDelegate;
1:         this.loadFunction = loadFunction;
1:         this.enableCache = enableCache;
1:         init();
1:     }
1: 
1:     protected void init()
1:     {
1:         this.cacheRefreshExecutor = new DebuggableThreadPoolExecutor(name + "Refresh", Thread.NORM_PRIORITY);
1:         this.cache = initCache(null);
1:         try
1:         {
1:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:             mbs.registerMBean(this, getObjectName());
1:         }
1:         catch (Exception e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     protected ObjectName getObjectName() throws MalformedObjectNameException
1:     {
1:         return new ObjectName(MBEAN_NAME_BASE + name);
1:     }
1: 
1:     public V get(K k) throws ExecutionException
1:     {
1:         if (cache == null)
1:             return loadFunction.apply(k);
1: 
1:         return cache.get(k);
1:     }
1: 
1:     public void invalidate()
1:     {
1:         cache = initCache(null);
1:     }
1: 
1:     public void invalidate(K k)
1:     {
1:         if (cache != null)
1:             cache.invalidate(k);
1:     }
1: 
1:     public void setValidity(int validityPeriod)
1:     {
1:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1: 
1:         setValidityDelegate.accept(validityPeriod);
1:         cache = initCache(cache);
1:     }
1: 
1:     public int getValidity()
1:     {
1:         return getValidityDelegate.get();
1:     }
1: 
1:     public void setUpdateInterval(int updateInterval)
1:     {
1:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1: 
1:         setUpdateIntervalDelegate.accept(updateInterval);
1:         cache = initCache(cache);
1:     }
1: 
1:     public int getUpdateInterval()
1:     {
1:         return getUpdateIntervalDelegate.get();
1:     }
1: 
1:     public void setMaxEntries(int maxEntries)
1:     {
1:         if (Boolean.getBoolean("cassandra.disable_auth_caches_remote_configuration"))
1:             throw new UnsupportedOperationException("Remote configuration of auth caches is disabled");
1: 
1:         setMaxEntriesDelegate.accept(maxEntries);
1:         cache = initCache(cache);
1:     }
1: 
1:     public int getMaxEntries()
1:     {
1:         return getMaxEntriesDelegate.get();
1:     }
1: 
1:     private LoadingCache<K, V> initCache(LoadingCache<K, V> existing)
1:     {
1:         if (!enableCache.get())
1:             return null;
1: 
1:         if (getValidity() <= 0)
1:             return null;
1: 
1:         logger.info("(Re)initializing {} (validity period/update interval/max entries) ({}/{}/{})",
1:                     name, getValidity(), getUpdateInterval(), getMaxEntries());
1: 
1:         LoadingCache<K, V> newcache = CacheBuilder.newBuilder()
1:                            .refreshAfterWrite(getUpdateInterval(), TimeUnit.MILLISECONDS)
1:                            .expireAfterWrite(getValidity(), TimeUnit.MILLISECONDS)
1:                            .maximumSize(getMaxEntries())
1:                            .build(new CacheLoader<K, V>()
1:                            {
0:                                public V load(K k) throws Exception
1:                                {
1:                                    return loadFunction.apply(k);
1:                                }
1: 
1:                                public ListenableFuture<V> reload(final K k, final V oldV)
1:                                {
1:                                    ListenableFutureTask<V> task = ListenableFutureTask.create(() -> {
1:                                        try
1:                                        {
1:                                            return loadFunction.apply(k);
1:                                        }
1:                                        catch (Exception e)
1:                                        {
1:                                            logger.trace("Error performing async refresh of auth data in {}", name, e);
1:                                            throw e;
1:                                        }
1:                                    });
1:                                    cacheRefreshExecutor.execute(task);
1:                                    return task;
1:                                }
1:                            });
1:         if (existing != null)
1:             newcache.putAll(existing.asMap());
1:         return newcache;
1:     }
1: }
============================================================================