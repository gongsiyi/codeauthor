1:bddfa9e: /*
1:bddfa9e:  * Licensed to the Apache Software Foundation (ASF) under one
1:bddfa9e:  * or more contributor license agreements.  See the NOTICE file
1:bddfa9e:  * distributed with this work for additional information
1:bddfa9e:  * regarding copyright ownership.  The ASF licenses this file
1:bddfa9e:  * to you under the Apache License, Version 2.0 (the
1:bddfa9e:  * "License"); you may not use this file except in compliance
1:bddfa9e:  * with the License.  You may obtain a copy of the License at
1:bddfa9e:  *
1:bddfa9e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:bddfa9e:  *
1:bddfa9e:  * Unless required by applicable law or agreed to in writing, software
1:bddfa9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bddfa9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bddfa9e:  * See the License for the specific language governing permissions and
1:bddfa9e:  * limitations under the License.
1:bddfa9e:  */
1:bddfa9e: package org.apache.cassandra.cql3.statements;
1:bddfa9e: 
1:879b694: import java.util.List;
1:879b694: 
1:879b694: import com.google.common.collect.ImmutableList;
1:879b694: 
1:b32ce68: import org.apache.cassandra.auth.*;
1:879b694: import org.apache.cassandra.config.DatabaseDescriptor;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:879b694: import org.apache.cassandra.cql3.ColumnIdentifier;
1:879b694: import org.apache.cassandra.cql3.ColumnSpecification;
1:879b694: import org.apache.cassandra.cql3.ResultSet;
1:879b694: import org.apache.cassandra.db.marshal.BooleanType;
1:879b694: import org.apache.cassandra.db.marshal.UTF8Type;
1:bddfa9e: import org.apache.cassandra.transport.messages.ResultMessage;
1:bddfa9e: 
1:879b694: public class ListUsersStatement extends ListRolesStatement
3:bddfa9e: {
1:879b694:     // pseudo-virtual cf as the actual datasource is dependent on the IRoleManager impl
1:9797511:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
1:879b694:     private static final String CF = "users";
1:bddfa9e: 
1:879b694:     private static final List<ColumnSpecification> metadata =
1:879b694:         ImmutableList.of(new ColumnSpecification(KS, CF, new ColumnIdentifier("name", true), UTF8Type.instance),
1:879b694:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("super", true), BooleanType.instance));
1:bddfa9e: 
1:879b694:     @Override
1:217721a:     protected ResultMessage formatResults(List<RoleResource> sortedRoles)
1:bddfa9e:     {
1:879b694:         ResultSet result = new ResultSet(metadata);
1:879b694: 
1:879b694:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
1:217721a:         for (RoleResource role : sortedRoles)
1:879b694:         {
1:879b694:             if (!roleManager.canLogin(role))
1:879b694:                 continue;
1:217721a:             result.addColumnValue(UTF8Type.instance.decompose(role.getRoleName()));
1:b32ce68:             result.addColumnValue(BooleanType.instance.decompose(Roles.hasSuperuserStatus(role)));
1:879b694:         }
1:879b694:         return new ResultMessage.Rows(result);
1:485feef:     }
4:bddfa9e: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:     private static final String KS = SchemaConstants.AUTH_KEYSPACE_NAME;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.auth.*;
/////////////////////////////////////////////////////////////////////////
1:             result.addColumnValue(BooleanType.instance.decompose(Roles.hasSuperuserStatus(role)));
commit:217721a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.auth.RoleResource;
/////////////////////////////////////////////////////////////////////////
1:     protected ResultMessage formatResults(List<RoleResource> sortedRoles)
1:         for (RoleResource role : sortedRoles)
1:             result.addColumnValue(UTF8Type.instance.decompose(role.getRoleName()));
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import com.google.common.collect.ImmutableList;
1: 
0: import org.apache.cassandra.auth.AuthKeyspace;
0: import org.apache.cassandra.auth.IRoleManager;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.cql3.ColumnIdentifier;
1: import org.apache.cassandra.cql3.ColumnSpecification;
1: import org.apache.cassandra.cql3.ResultSet;
1: import org.apache.cassandra.db.marshal.BooleanType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: public class ListUsersStatement extends ListRolesStatement
1:     // pseudo-virtual cf as the actual datasource is dependent on the IRoleManager impl
0:     private static final String KS = AuthKeyspace.NAME;
1:     private static final String CF = "users";
1:     private static final List<ColumnSpecification> metadata =
1:         ImmutableList.of(new ColumnSpecification(KS, CF, new ColumnIdentifier("name", true), UTF8Type.instance),
1:                          new ColumnSpecification(KS, CF, new ColumnIdentifier("super", true), BooleanType.instance));
1:     @Override
0:     protected ResultMessage formatResults(List<String> sortedRoles)
1:         ResultSet result = new ResultSet(metadata);
1: 
1:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
0:         for (String role : sortedRoles)
1:         {
1:             if (!roleManager.canLogin(role))
1:                 continue;
0:             result.addColumnValue(UTF8Type.instance.decompose(role));
0:             result.addColumnValue(BooleanType.instance.decompose(roleManager.isSuper(role)));
1:         }
1:         return new ResultMessage.Rows(result);
author:beobal
-------------------------------------------------------------------------------
commit:485feef
/////////////////////////////////////////////////////////////////////////
1: }
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:326d545
/////////////////////////////////////////////////////////////////////////
0:                                       QueryState.forInternalCalls());
commit:2659640
/////////////////////////////////////////////////////////////////////////
0:                                       ConsistencyLevel.QUORUM,
commit:bddfa9e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.auth.Auth;
0: import org.apache.cassandra.cql3.QueryProcessor;
0: import org.apache.cassandra.db.ConsistencyLevel;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
0: import org.apache.cassandra.exceptions.RequestExecutionException;
0: import org.apache.cassandra.exceptions.RequestValidationException;
0: import org.apache.cassandra.exceptions.UnauthorizedException;
0: import org.apache.cassandra.service.ClientState;
0: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.messages.ResultMessage;
1: 
0: public class ListUsersStatement extends AuthenticationStatement
1: {
0:     public void validate(ClientState state)
1:     {
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException
1:     {
0:         state.ensureNotAnonymous();
1:     }
1: 
0:     public ResultMessage execute(ClientState state) throws RequestValidationException, RequestExecutionException
1:     {
0:         return QueryProcessor.process(String.format("SELECT * FROM %s.%s", Auth.AUTH_KS, Auth.USERS_CF),
0:                                       ConsistencyLevel.ONE,
0:                                       new QueryState(new ClientState(true)));
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
============================================================================