1:b32ce68: /*
1:b32ce68:  * Licensed to the Apache Software Foundation (ASF) under one
1:b32ce68:  * or more contributor license agreements.  See the NOTICE file
1:b32ce68:  * distributed with this work for additional information
1:b32ce68:  * regarding copyright ownership.  The ASF licenses this file
1:b32ce68:  * to you under the Apache License, Version 2.0 (the
1:b32ce68:  * "License"); you may not use this file except in compliance
1:b32ce68:  * with the License.  You may obtain a copy of the License at
1:b32ce68:  *
1:b32ce68:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b32ce68:  *
1:b32ce68:  * Unless required by applicable law or agreed to in writing, software
1:b32ce68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b32ce68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b32ce68:  * See the License for the specific language governing permissions and
1:b32ce68:  * limitations under the License.
1:b32ce68:  */
1:b32ce68: package org.apache.cassandra.auth;
9:b32ce68: 
1:b32ce68: import java.util.Set;
1:186777a: import java.util.concurrent.ExecutionException;
1:b32ce68: 
1:b32ce68: import org.apache.cassandra.config.DatabaseDescriptor;
1:b32ce68: 
1:186777a: public class RolesCache extends AuthCache<RoleResource, Set<RoleResource>> implements RolesCacheMBean
9:b32ce68: {
1:e379f97:     public RolesCache(IRoleManager roleManager)
1:b32ce68:     {
1:186777a:         super("RolesCache",
1:186777a:               DatabaseDescriptor::setRolesValidity,
1:186777a:               DatabaseDescriptor::getRolesValidity,
1:186777a:               DatabaseDescriptor::setRolesUpdateInterval,
1:186777a:               DatabaseDescriptor::getRolesUpdateInterval,
1:186777a:               DatabaseDescriptor::setRolesCacheMaxEntries,
1:186777a:               DatabaseDescriptor::getRolesCacheMaxEntries,
1:186777a:               (r) -> roleManager.getRoles(r, true),
1:186777a:               () -> DatabaseDescriptor.getAuthenticator().requireAuthentication());
7:b32ce68:     }
1:b32ce68: 
1:b32ce68:     public Set<RoleResource> getRoles(RoleResource role)
1:b32ce68:     {
2:b32ce68:         try
1:b32ce68:         {
1:186777a:             return get(role);
1:b32ce68:         }
1:b32ce68:         catch (ExecutionException e)
1:b32ce68:         {
1:b32ce68:             throw new RuntimeException(e);
1:b32ce68:         }
1:b32ce68:     }
1:b32ce68: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:186777a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutionException;
1: public class RolesCache extends AuthCache<RoleResource, Set<RoleResource>> implements RolesCacheMBean
1:         super("RolesCache",
1:               DatabaseDescriptor::setRolesValidity,
1:               DatabaseDescriptor::getRolesValidity,
1:               DatabaseDescriptor::setRolesUpdateInterval,
1:               DatabaseDescriptor::getRolesUpdateInterval,
1:               DatabaseDescriptor::setRolesCacheMaxEntries,
1:               DatabaseDescriptor::getRolesCacheMaxEntries,
1:               (r) -> roleManager.getRoles(r, true),
1:               () -> DatabaseDescriptor.getAuthenticator().requireAuthentication());
1:             return get(role);
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Set;
0: import java.util.concurrent.*;
1: 
0: import com.google.common.cache.CacheBuilder;
0: import com.google.common.cache.CacheLoader;
0: import com.google.common.cache.LoadingCache;
0: import com.google.common.util.concurrent.ListenableFuture;
0: import com.google.common.util.concurrent.ListenableFutureTask;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
0: public class RolesCache
1: {
0:     private static final Logger logger = LoggerFactory.getLogger(RolesCache.class);
1: 
0:     private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor("RolesCacheRefresh",
0:                                                                                              Thread.NORM_PRIORITY);
0:     private final IRoleManager roleManager;
0:     private final LoadingCache<RoleResource, Set<RoleResource>> cache;
1: 
0:     public RolesCache(int validityPeriod, int updateInterval, int maxEntries, IRoleManager roleManager)
1:     {
0:         this.roleManager = roleManager;
0:         this.cache = initCache(validityPeriod, updateInterval, maxEntries);
1:     }
1: 
1:     public Set<RoleResource> getRoles(RoleResource role)
1:     {
0:         if (cache == null)
0:             return roleManager.getRoles(role, true);
1: 
1:         try
1:         {
0:             return cache.get(role);
1:         }
1:         catch (ExecutionException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
0:     private LoadingCache<RoleResource, Set<RoleResource>> initCache(int validityPeriod,
0:                                                                     int updateInterval,
0:                                                                     int maxEntries)
1:     {
0:         if (DatabaseDescriptor.getAuthenticator() instanceof AllowAllAuthenticator)
0:             return null;
1: 
0:         if (validityPeriod <= 0)
0:             return null;
1: 
0:         return CacheBuilder.newBuilder()
0:                            .refreshAfterWrite(updateInterval, TimeUnit.MILLISECONDS)
0:                            .expireAfterWrite(validityPeriod, TimeUnit.MILLISECONDS)
0:                            .maximumSize(maxEntries)
0:                            .build(new CacheLoader<RoleResource, Set<RoleResource>>()
1:                            {
0:                                public Set<RoleResource> load(RoleResource primaryRole)
1:                                {
0:                                    return roleManager.getRoles(primaryRole, true);
1:                                }
1: 
0:                                public ListenableFuture<Set<RoleResource>> reload(final RoleResource primaryRole,
0:                                                                                  final Set<RoleResource> oldValue)
1:                                {
0:                                    ListenableFutureTask<Set<RoleResource>> task;
0:                                    task = ListenableFutureTask.create(new Callable<Set<RoleResource>>()
1:                                    {
0:                                        public Set<RoleResource> call() throws Exception
1:                                        {
1:                                            try
1:                                            {
0:                                                return roleManager.getRoles(primaryRole, true);
1:                                            }
0:                                            catch (Exception e)
1:                                            {
0:                                                logger.debug("Error performing async refresh of user roles", e);
0:                                                throw e;
1:                                            }
1:                                        }
0:                                    });
0:                                    cacheRefreshExecutor.execute(task);
0:                                    return task;
1:                                }
0:                            });
1:     }
1: }
author:Mike Adamson
-------------------------------------------------------------------------------
commit:9b727ac
/////////////////////////////////////////////////////////////////////////
0:         if (!DatabaseDescriptor.getAuthenticator().requireAuthentication())
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
0:                                     logger.trace("Error performing async refresh of user roles", e);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:e379f97
/////////////////////////////////////////////////////////////////////////
0: import java.lang.management.ManagementFactory;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
0: 
0: public class RolesCache implements RolesCacheMBean
0:     private final String MBEAN_NAME = "org.apache.cassandra.auth:type=RolesCache";
0:     private volatile LoadingCache<RoleResource, Set<RoleResource>> cache;
1:     public RolesCache(IRoleManager roleManager)
0:         this.cache = initCache(null);
0:         try
0:         {
0:             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:             mbs.registerMBean(this, new ObjectName(MBEAN_NAME));
0:         }
0:         catch (Exception e)
0:         {
0:             throw new RuntimeException(e);
0:         }
/////////////////////////////////////////////////////////////////////////
0:     public void invalidate()
0:     {
0:         cache = initCache(null);
0:     }
0: 
0:     public void setValidity(int validityPeriod)
0:     {
0:         DatabaseDescriptor.setRolesValidity(validityPeriod);
0:         cache = initCache(cache);
0:     }
0: 
0:     public int getValidity()
0:     {
0:         return DatabaseDescriptor.getRolesValidity();
0:     }
0: 
0:     public void setUpdateInterval(int updateInterval)
0:     {
0:         DatabaseDescriptor.setRolesUpdateInterval(updateInterval);
0:         cache = initCache(cache);
0:     }
0: 
0:     public int getUpdateInterval()
0:     {
0:         return DatabaseDescriptor.getRolesUpdateInterval();
0:     }
0: 
0: 
0:     private LoadingCache<RoleResource, Set<RoleResource>> initCache(LoadingCache<RoleResource, Set<RoleResource>> existing)
0:         if (DatabaseDescriptor.getRolesValidity() <= 0)
0:         LoadingCache<RoleResource, Set<RoleResource>> newcache = CacheBuilder.newBuilder()
0:                 .refreshAfterWrite(DatabaseDescriptor.getRolesUpdateInterval(), TimeUnit.MILLISECONDS)
0:                 .expireAfterWrite(DatabaseDescriptor.getRolesValidity(), TimeUnit.MILLISECONDS)
0:                 .maximumSize(DatabaseDescriptor.getRolesCacheMaxEntries())
0:                 .build(new CacheLoader<RoleResource, Set<RoleResource>>()
0:                 {
0:                     public Set<RoleResource> load(RoleResource primaryRole)
0:                     {
0:                         return roleManager.getRoles(primaryRole, true);
0:                     }
0:                     public ListenableFuture<Set<RoleResource>> reload(final RoleResource primaryRole,
0:                                                                       final Set<RoleResource> oldValue)
0:                     {
0:                         ListenableFutureTask<Set<RoleResource>> task;
0:                         task = ListenableFutureTask.create(new Callable<Set<RoleResource>>()
0:                         {
0:                             public Set<RoleResource> call() throws Exception
0:                             {
0:                                 try
0:                                 {
0:                                     return roleManager.getRoles(primaryRole, true);
0:                                 } catch (Exception e)
0:                                 {
0:                                     logger.debug("Error performing async refresh of user roles", e);
0:                                     throw e;
0:                                 }
0:                             }
0:                         });
0:                         cacheRefreshExecutor.execute(task);
0:                         return task;
0:                     }
0:                 });
0:         if (existing != null)
0:             newcache.putAll(existing.asMap());
0:         return newcache;
============================================================================