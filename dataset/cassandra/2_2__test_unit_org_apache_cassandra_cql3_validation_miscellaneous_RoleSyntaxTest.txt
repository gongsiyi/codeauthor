1:2f3fd41: /*
1:2f3fd41:  * Licensed to the Apache Software Foundation (ASF) under one
1:2f3fd41:  * or more contributor license agreements.  See the NOTICE file
1:2f3fd41:  * distributed with this work for additional information
1:2f3fd41:  * regarding copyright ownership.  The ASF licenses this file
1:2f3fd41:  * to you under the Apache License, Version 2.0 (the
1:2f3fd41:  * "License"); you may not use this file except in compliance
1:2f3fd41:  * with the License.  You may obtain a copy of the License at
1:2f3fd41:  *
1:2f3fd41:  *     http://www.apache.org/licenses/LICENSE-2.0
1:2f3fd41:  *
1:2f3fd41:  * Unless required by applicable law or agreed to in writing, software
1:2f3fd41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f3fd41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f3fd41:  * See the License for the specific language governing permissions and
1:2f3fd41:  * limitations under the License.
1:2f3fd41:  */
1:01115f7: package org.apache.cassandra.cql3.validation.miscellaneous;
1:2f3fd41: 
1:2f3fd41: import org.junit.Test;
1:2f3fd41: 
1:01115f7: import org.apache.cassandra.cql3.CQLTester;
1:01115f7: 
1:2f3fd41: public class RoleSyntaxTest extends CQLTester
1:2f3fd41: {
1:4994f0c:     private final String NO_QUOTED_USERNAME = "Quoted strings are are not supported for user names " +
1:4994f0c:                                               "and USER is deprecated, please use ROLE";
1:2f3fd41:     @Test
1:2f3fd41:     public void standardOptionsSyntaxTest() throws Throwable
1:2f3fd41:     {
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH LOGIN = true AND SUPERUSER = false AND PASSWORD = 'foo'");
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH PASSWORD = 'foo' AND LOGIN = true AND SUPERUSER = false");
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH LOGIN = true AND PASSWORD = 'foo' AND SUPERUSER = false");
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:2f3fd41: 
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH LOGIN = true AND SUPERUSER = false AND PASSWORD = 'foo'");
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH PASSWORD = 'foo' AND LOGIN = true AND SUPERUSER = false");
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH LOGIN = true AND PASSWORD = 'foo' AND SUPERUSER = false");
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:2f3fd41:     }
1:2f3fd41: 
1:2f3fd41:     @Test
1:4994f0c:     public void customOptionsSyntaxTest() throws Throwable
1:2f3fd41:     {
1:2f3fd41:         assertValidSyntax("CREATE ROLE r WITH OPTIONS = {'a':'b', 'b':1}");
1:2f3fd41:         assertInvalidSyntax("CREATE ROLE r WITH OPTIONS = 'term'");
1:2f3fd41:         assertInvalidSyntax("CREATE ROLE r WITH OPTIONS = 99");
1:2f3fd41: 
1:2f3fd41:         assertValidSyntax("ALTER ROLE r WITH OPTIONS = {'a':'b', 'b':1}");
1:2f3fd41:         assertInvalidSyntax("ALTER ROLE r WITH OPTIONS = 'term'");
1:2f3fd41:         assertInvalidSyntax("ALTER ROLE r WITH OPTIONS = 99");
1:2f3fd41:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void createSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         assertValidSyntax("CREATE ROLE r1");
1:4994f0c:         assertValidSyntax("CREATE ROLE 'r1'");
1:4994f0c:         assertValidSyntax("CREATE ROLE \"r1\"");
1:4994f0c:         assertValidSyntax("CREATE ROLE $$r1$$");
1:4994f0c:         assertValidSyntax("CREATE ROLE $$ r1 ' x $ x ' $$");
1:4994f0c:         assertValidSyntax("CREATE USER u1");
1:4994f0c:         assertValidSyntax("CREATE USER 'u1'");
1:4994f0c:         assertValidSyntax("CREATE USER $$u1$$");
1:4994f0c:         assertValidSyntax("CREATE USER $$ u1 ' x $ x ' $$");
1:4994f0c:         // user names may not be quoted names
1:4994f0c:         assertInvalidSyntax("CREATE USER \"u1\"", NO_QUOTED_USERNAME);
1:4994f0c:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void dropSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         assertValidSyntax("DROP ROLE r1");
1:4994f0c:         assertValidSyntax("DROP ROLE 'r1'");
1:4994f0c:         assertValidSyntax("DROP ROLE \"r1\"");
1:4994f0c:         assertValidSyntax("DROP ROLE $$r1$$");
1:4994f0c:         assertValidSyntax("DROP ROLE $$ r1 ' x $ x ' $$");
1:4994f0c:         assertValidSyntax("DROP USER u1");
1:4994f0c:         assertValidSyntax("DROP USER 'u1'");
1:4994f0c:         assertValidSyntax("DROP USER $$u1$$");
1:4994f0c:         assertValidSyntax("DROP USER $$ u1 ' x $ x ' $$");
1:4994f0c:         // user names may not be quoted names
1:4994f0c:         assertInvalidSyntax("DROP USER \"u1\"", NO_QUOTED_USERNAME);
1:4994f0c:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void alterSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         assertValidSyntax("ALTER ROLE r1 WITH PASSWORD = 'password'");
1:4994f0c:         assertValidSyntax("ALTER ROLE 'r1' WITH PASSWORD = 'password'");
1:4994f0c:         assertValidSyntax("ALTER ROLE \"r1\" WITH PASSWORD = 'password'");
1:4994f0c:         assertValidSyntax("ALTER ROLE $$r1$$ WITH PASSWORD = 'password'");
1:4994f0c:         assertValidSyntax("ALTER ROLE $$ r1 ' x $ x ' $$ WITH PASSWORD = 'password'");
1:4994f0c:         // ALTER has slightly different form for USER (no =)
1:4994f0c:         assertValidSyntax("ALTER USER u1 WITH PASSWORD 'password'");
1:4994f0c:         assertValidSyntax("ALTER USER 'u1' WITH PASSWORD 'password'");
1:4994f0c:         assertValidSyntax("ALTER USER $$u1$$ WITH PASSWORD 'password'");
1:4994f0c:         assertValidSyntax("ALTER USER $$ u1 ' x $ x ' $$ WITH PASSWORD 'password'");
1:4994f0c:         // user names may not be quoted names
1:4994f0c:         assertInvalidSyntax("ALTER USER \"u1\" WITH PASSWORD 'password'", NO_QUOTED_USERNAME);
1:4994f0c:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void grantRevokePermissionsSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         // grant/revoke on RoleResource
1:4994f0c:         assertValidSyntax("GRANT ALTER ON ROLE r1 TO r2");
1:4994f0c:         assertValidSyntax("GRANT ALTER ON ROLE 'r1' TO \"r2\"");
1:4994f0c:         assertValidSyntax("GRANT ALTER ON ROLE \"r1\" TO 'r2'");
1:4994f0c:         assertValidSyntax("GRANT ALTER ON ROLE $$r1$$ TO $$ r '2' $$");
1:4994f0c:         assertValidSyntax("REVOKE ALTER ON ROLE r1 FROM r2");
1:4994f0c:         assertValidSyntax("REVOKE ALTER ON ROLE 'r1' FROM \"r2\"");
1:4994f0c:         assertValidSyntax("REVOKE ALTER ON ROLE \"r1\" FROM 'r2'");
1:4994f0c:         assertValidSyntax("REVOKE ALTER ON ROLE $$r1$$ FROM $$ r '2' $$");
1:4994f0c: 
1:4994f0c:         // grant/revoke on DataResource
1:4994f0c:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO r1");
1:4994f0c:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO 'r1'");
1:4994f0c:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO \"r1\"");
1:4994f0c:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO $$ r '1' $$");
1:4994f0c:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM r1");
1:4994f0c:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM 'r1'");
1:4994f0c:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM \"r1\"");
1:4994f0c:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM $$ r '1' $$");
1:4994f0c:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void listPermissionsSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF r1");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF 'r1'");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF \"r1\"");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF $$ r '1' $$");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE 'r1' OF r2");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE \"r1\" OF r2");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE $$ r '1' $$ OF r2");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE 'r1' OF 'r2'");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE \"r1\" OF \"r2\"");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE $$r1$$ OF $$ r '2' $$");
1:4994f0c: 
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF r1");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF 'r1'");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF \"r1\"");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF $$ r '1' $$");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS OF r1");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS OF 'r1'");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS OF \"r1\"");
1:4994f0c:         assertValidSyntax("LIST ALL PERMISSIONS OF $$ r '1' $$");
1:4994f0c:     }
1:4994f0c: 
1:4994f0c:     @Test
1:4994f0c:     public void listRolesSyntaxTest() throws Throwable
1:4994f0c:     {
1:4994f0c:         assertValidSyntax("LIST ROLES OF r1");
1:4994f0c:         assertValidSyntax("LIST ROLES OF 'r1'");
1:4994f0c:         assertValidSyntax("LIST ROLES OF \"r1\"");
1:4994f0c:         assertValidSyntax("LIST ROLES OF $$ r '1' $$");
1:4994f0c:     }
1:2f3fd41: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:4994f0c
/////////////////////////////////////////////////////////////////////////
1:     private final String NO_QUOTED_USERNAME = "Quoted strings are are not supported for user names " +
1:                                               "and USER is deprecated, please use ROLE";
/////////////////////////////////////////////////////////////////////////
1:     public void customOptionsSyntaxTest() throws Throwable
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void createSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("CREATE ROLE r1");
1:         assertValidSyntax("CREATE ROLE 'r1'");
1:         assertValidSyntax("CREATE ROLE \"r1\"");
1:         assertValidSyntax("CREATE ROLE $$r1$$");
1:         assertValidSyntax("CREATE ROLE $$ r1 ' x $ x ' $$");
1:         assertValidSyntax("CREATE USER u1");
1:         assertValidSyntax("CREATE USER 'u1'");
1:         assertValidSyntax("CREATE USER $$u1$$");
1:         assertValidSyntax("CREATE USER $$ u1 ' x $ x ' $$");
1:         // user names may not be quoted names
1:         assertInvalidSyntax("CREATE USER \"u1\"", NO_QUOTED_USERNAME);
1:     }
1: 
1:     @Test
1:     public void dropSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("DROP ROLE r1");
1:         assertValidSyntax("DROP ROLE 'r1'");
1:         assertValidSyntax("DROP ROLE \"r1\"");
1:         assertValidSyntax("DROP ROLE $$r1$$");
1:         assertValidSyntax("DROP ROLE $$ r1 ' x $ x ' $$");
1:         assertValidSyntax("DROP USER u1");
1:         assertValidSyntax("DROP USER 'u1'");
1:         assertValidSyntax("DROP USER $$u1$$");
1:         assertValidSyntax("DROP USER $$ u1 ' x $ x ' $$");
1:         // user names may not be quoted names
1:         assertInvalidSyntax("DROP USER \"u1\"", NO_QUOTED_USERNAME);
1:     }
1: 
1:     @Test
1:     public void alterSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("ALTER ROLE r1 WITH PASSWORD = 'password'");
1:         assertValidSyntax("ALTER ROLE 'r1' WITH PASSWORD = 'password'");
1:         assertValidSyntax("ALTER ROLE \"r1\" WITH PASSWORD = 'password'");
1:         assertValidSyntax("ALTER ROLE $$r1$$ WITH PASSWORD = 'password'");
1:         assertValidSyntax("ALTER ROLE $$ r1 ' x $ x ' $$ WITH PASSWORD = 'password'");
1:         // ALTER has slightly different form for USER (no =)
1:         assertValidSyntax("ALTER USER u1 WITH PASSWORD 'password'");
1:         assertValidSyntax("ALTER USER 'u1' WITH PASSWORD 'password'");
1:         assertValidSyntax("ALTER USER $$u1$$ WITH PASSWORD 'password'");
1:         assertValidSyntax("ALTER USER $$ u1 ' x $ x ' $$ WITH PASSWORD 'password'");
1:         // user names may not be quoted names
1:         assertInvalidSyntax("ALTER USER \"u1\" WITH PASSWORD 'password'", NO_QUOTED_USERNAME);
1:     }
1: 
1:     @Test
1:     public void grantRevokePermissionsSyntaxTest() throws Throwable
1:     {
1:         // grant/revoke on RoleResource
1:         assertValidSyntax("GRANT ALTER ON ROLE r1 TO r2");
1:         assertValidSyntax("GRANT ALTER ON ROLE 'r1' TO \"r2\"");
1:         assertValidSyntax("GRANT ALTER ON ROLE \"r1\" TO 'r2'");
1:         assertValidSyntax("GRANT ALTER ON ROLE $$r1$$ TO $$ r '2' $$");
1:         assertValidSyntax("REVOKE ALTER ON ROLE r1 FROM r2");
1:         assertValidSyntax("REVOKE ALTER ON ROLE 'r1' FROM \"r2\"");
1:         assertValidSyntax("REVOKE ALTER ON ROLE \"r1\" FROM 'r2'");
1:         assertValidSyntax("REVOKE ALTER ON ROLE $$r1$$ FROM $$ r '2' $$");
1: 
1:         // grant/revoke on DataResource
1:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO r1");
1:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO 'r1'");
1:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO \"r1\"");
1:         assertValidSyntax("GRANT SELECT ON KEYSPACE ks TO $$ r '1' $$");
1:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM r1");
1:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM 'r1'");
1:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM \"r1\"");
1:         assertValidSyntax("REVOKE SELECT ON KEYSPACE ks FROM $$ r '1' $$");
1:     }
1: 
1:     @Test
1:     public void listPermissionsSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF r1");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF 'r1'");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF \"r1\"");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL ROLES OF $$ r '1' $$");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE 'r1' OF r2");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE \"r1\" OF r2");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE $$ r '1' $$ OF r2");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE 'r1' OF 'r2'");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE \"r1\" OF \"r2\"");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ROLE $$r1$$ OF $$ r '2' $$");
1: 
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF r1");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF 'r1'");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF \"r1\"");
1:         assertValidSyntax("LIST ALL PERMISSIONS ON ALL KEYSPACES OF $$ r '1' $$");
1:         assertValidSyntax("LIST ALL PERMISSIONS OF r1");
1:         assertValidSyntax("LIST ALL PERMISSIONS OF 'r1'");
1:         assertValidSyntax("LIST ALL PERMISSIONS OF \"r1\"");
1:         assertValidSyntax("LIST ALL PERMISSIONS OF $$ r '1' $$");
1:     }
1: 
1:     @Test
1:     public void listRolesSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("LIST ROLES OF r1");
1:         assertValidSyntax("LIST ROLES OF 'r1'");
1:         assertValidSyntax("LIST ROLES OF \"r1\"");
1:         assertValidSyntax("LIST ROLES OF $$ r '1' $$");
1:     }
commit:2f3fd41
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.cql3;
1: 
1: import org.junit.Test;
1: 
1: public class RoleSyntaxTest extends CQLTester
1: {
1:     @Test
1:     public void standardOptionsSyntaxTest() throws Throwable
1:     {
1:         assertValidSyntax("CREATE ROLE r WITH LOGIN = true AND SUPERUSER = false AND PASSWORD = 'foo'");
1:         assertValidSyntax("CREATE ROLE r WITH PASSWORD = 'foo' AND LOGIN = true AND SUPERUSER = false");
1:         assertValidSyntax("CREATE ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:         assertValidSyntax("CREATE ROLE r WITH LOGIN = true AND PASSWORD = 'foo' AND SUPERUSER = false");
1:         assertValidSyntax("CREATE ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1: 
1:         assertValidSyntax("ALTER ROLE r WITH LOGIN = true AND SUPERUSER = false AND PASSWORD = 'foo'");
1:         assertValidSyntax("ALTER ROLE r WITH PASSWORD = 'foo' AND LOGIN = true AND SUPERUSER = false");
1:         assertValidSyntax("ALTER ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:         assertValidSyntax("ALTER ROLE r WITH LOGIN = true AND PASSWORD = 'foo' AND SUPERUSER = false");
1:         assertValidSyntax("ALTER ROLE r WITH SUPERUSER = true AND PASSWORD = 'foo' AND LOGIN = false");
1:     }
1: 
1:     @Test
0:     public void customOptionsSyntaxTestl() throws Throwable
1:     {
1:         assertValidSyntax("CREATE ROLE r WITH OPTIONS = {'a':'b', 'b':1}");
1:         assertInvalidSyntax("CREATE ROLE r WITH OPTIONS = 'term'");
1:         assertInvalidSyntax("CREATE ROLE r WITH OPTIONS = 99");
1: 
1:         assertValidSyntax("ALTER ROLE r WITH OPTIONS = {'a':'b', 'b':1}");
1:         assertInvalidSyntax("ALTER ROLE r WITH OPTIONS = 'term'");
1:         assertInvalidSyntax("ALTER ROLE r WITH OPTIONS = 99");
1:     }
1: }
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:01115f7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.validation.miscellaneous;
1: import org.apache.cassandra.cql3.CQLTester;
1: 
============================================================================