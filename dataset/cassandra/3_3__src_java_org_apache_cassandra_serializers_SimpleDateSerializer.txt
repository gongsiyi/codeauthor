1:107545b: /*
1:107545b:  * Licensed to the Apache Software Foundation (ASF) under one
1:107545b:  * or more contributor license agreements.  See the NOTICE file
1:107545b:  * distributed with this work for additional information
1:107545b:  * regarding copyright ownership.  The ASF licenses this file
1:107545b:  * to you under the Apache License, Version 2.0 (the
1:107545b:  * "License"); you may not use this file except in compliance
1:107545b:  * with the License.  You may obtain a copy of the License at
1:107545b:  *
1:107545b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:107545b:  *
1:107545b:  * Unless required by applicable law or agreed to in writing, software
1:107545b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:107545b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:107545b:  * See the License for the specific language governing permissions and
1:107545b:  * limitations under the License.
1:107545b:  */
1:107545b: package org.apache.cassandra.serializers;
1:107545b: 
1:107545b: import java.nio.ByteBuffer;
1:107545b: import java.util.concurrent.TimeUnit;
1:107545b: import java.util.regex.Pattern;
1:107545b: 
1:107545b: import org.joda.time.DateTime;
1:107545b: import org.joda.time.DateTimeZone;
1:107545b: import org.joda.time.LocalDate;
1:107545b: import org.joda.time.format.DateTimeFormat;
1:107545b: import org.joda.time.format.DateTimeFormatter;
1:107545b: 
1:107545b: import org.apache.cassandra.utils.ByteBufferUtil;
1:107545b: 
1:107545b: // For byte-order comparability, we shift by Integer.MIN_VALUE and treat the data as an unsigned integer ranging from
1:107545b: // min date to max date w/epoch sitting in the center @ 2^31
1:107545b: public class SimpleDateSerializer implements TypeSerializer<Integer>
1:107545b: {
1:107545b:     private static final DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd").withZone(DateTimeZone.UTC);
1:107545b:     private static final long minSupportedDateMillis = TimeUnit.DAYS.toMillis(Integer.MIN_VALUE);
1:107545b:     private static final long maxSupportedDateMillis = TimeUnit.DAYS.toMillis(Integer.MAX_VALUE);
1:107545b:     private static final long maxSupportedDays = (long)Math.pow(2,32) - 1;
1:107545b:     private static final long byteOrderShift = (long)Math.pow(2,31) * 2;
1:107545b: 
1:107545b:     private static final Pattern rawPattern = Pattern.compile("^-?\\d+$");
1:107545b:     public static final SimpleDateSerializer instance = new SimpleDateSerializer();
1:107545b: 
1:107545b:     public Integer deserialize(ByteBuffer bytes)
1:107545b:     {
1:107545b:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toInt(bytes);
1:107545b:     }
1:107545b: 
1:107545b:     public ByteBuffer serialize(Integer value)
1:107545b:     {
1:107545b:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
1:107545b:     }
1:107545b: 
1:b7d0238:     public static int dateStringToDays(String source) throws MarshalException
1:107545b:     {
1:107545b:         // Raw day value in unsigned int form, epoch @ 2^31
1:107545b:         if (rawPattern.matcher(source).matches())
1:107545b:         {
1:107545b:             try
1:107545b:             {
1:b7d0238:                 long result = Long.parseLong(source);
1:107545b: 
1:107545b:                 if (result < 0 || result > maxSupportedDays)
1:107545b:                     throw new NumberFormatException("Input out of bounds: " + source);
1:107545b: 
1:107545b:                 // Shift > epoch days into negative portion of Integer result for byte order comparability
1:107545b:                 if (result >= Integer.MAX_VALUE)
1:107545b:                     result -= byteOrderShift;
1:107545b: 
1:b7d0238:                 return (int) result;
1:107545b:             }
1:107545b:             catch (NumberFormatException e)
1:107545b:             {
1:107545b:                 throw new MarshalException(String.format("Unable to make unsigned int (for date) from: '%s'", source), e);
1:107545b:             }
1:107545b:         }
1:107545b: 
1:107545b:         // Attempt to parse as date string
1:107545b:         try
1:107545b:         {
1:107545b:             DateTime parsed = formatter.parseDateTime(source);
1:107545b:             long millis = parsed.getMillis();
1:107545b:             if (millis < minSupportedDateMillis)
1:107545b:                 throw new MarshalException(String.format("Input date %s is less than min supported date %s", source, new LocalDate(minSupportedDateMillis).toString()));
1:107545b:             if (millis > maxSupportedDateMillis)
1:107545b:                 throw new MarshalException(String.format("Input date %s is greater than max supported date %s", source, new LocalDate(maxSupportedDateMillis).toString()));
1:107545b: 
1:c08aaab:             return timeInMillisToDay(millis);
1:107545b:         }
1:107545b:         catch (IllegalArgumentException e1)
1:107545b:         {
1:107545b:             throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1);
1:107545b:         }
1:107545b:     }
1:107545b: 
1:c08aaab:     public static int timeInMillisToDay(long millis)
1:c08aaab:     {
1:c08aaab:         Integer result = (int) TimeUnit.MILLISECONDS.toDays(millis);
1:c08aaab:         result -= Integer.MIN_VALUE;
1:c08aaab:         return result;
1:c08aaab:     }
1:c08aaab: 
1:c08aaab:     public static long dayToTimeInMillis(int days)
1:c08aaab:     {
1:c08aaab:         return TimeUnit.DAYS.toMillis(days - Integer.MIN_VALUE);
1:c08aaab:     }
1:c08aaab: 
1:107545b:     public void validate(ByteBuffer bytes) throws MarshalException
1:107545b:     {
1:107545b:         if (bytes.remaining() != 4)
1:107545b:             throw new MarshalException(String.format("Expected 4 byte long for date (%d)", bytes.remaining()));
1:107545b:     }
1:107545b: 
1:107545b:     public String toString(Integer value)
1:107545b:     {
1:107545b:         if (value == null)
1:107545b:             return "";
1:107545b: 
1:c08aaab:         return formatter.print(new LocalDate(dayToTimeInMillis(value), DateTimeZone.UTC));
1:107545b:     }
1:107545b: 
1:107545b:     public Class<Integer> getType()
1:107545b:     {
1:107545b:         return Integer.class;
1:107545b:     }
1:107545b: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:c08aaab
/////////////////////////////////////////////////////////////////////////
1:             return timeInMillisToDay(millis);
/////////////////////////////////////////////////////////////////////////
1:     public static int timeInMillisToDay(long millis)
1:     {
1:         Integer result = (int) TimeUnit.MILLISECONDS.toDays(millis);
1:         result -= Integer.MIN_VALUE;
1:         return result;
1:     }
1: 
1:     public static long dayToTimeInMillis(int days)
1:     {
1:         return TimeUnit.DAYS.toMillis(days - Integer.MIN_VALUE);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return formatter.print(new LocalDate(dayToTimeInMillis(value), DateTimeZone.UTC));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b7d0238
/////////////////////////////////////////////////////////////////////////
1:     public static int dateStringToDays(String source) throws MarshalException
1:                 long result = Long.parseLong(source);
/////////////////////////////////////////////////////////////////////////
1:                 return (int) result;
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:107545b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.serializers;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.TimeUnit;
1: import java.util.regex.Pattern;
1: 
1: import org.joda.time.DateTime;
1: import org.joda.time.DateTimeZone;
1: import org.joda.time.LocalDate;
1: import org.joda.time.format.DateTimeFormat;
1: import org.joda.time.format.DateTimeFormatter;
1: 
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: // For byte-order comparability, we shift by Integer.MIN_VALUE and treat the data as an unsigned integer ranging from
1: // min date to max date w/epoch sitting in the center @ 2^31
1: public class SimpleDateSerializer implements TypeSerializer<Integer>
1: {
1:     private static final DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd").withZone(DateTimeZone.UTC);
1:     private static final long minSupportedDateMillis = TimeUnit.DAYS.toMillis(Integer.MIN_VALUE);
1:     private static final long maxSupportedDateMillis = TimeUnit.DAYS.toMillis(Integer.MAX_VALUE);
1:     private static final long maxSupportedDays = (long)Math.pow(2,32) - 1;
1:     private static final long byteOrderShift = (long)Math.pow(2,31) * 2;
1: 
1:     private static final Pattern rawPattern = Pattern.compile("^-?\\d+$");
1:     public static final SimpleDateSerializer instance = new SimpleDateSerializer();
1: 
1:     public Integer deserialize(ByteBuffer bytes)
1:     {
1:         return bytes.remaining() == 0 ? null : ByteBufferUtil.toInt(bytes);
1:     }
1: 
1:     public ByteBuffer serialize(Integer value)
1:     {
1:         return value == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBufferUtil.bytes(value);
1:     }
1: 
0:     public static Integer dateStringToDays(String source) throws MarshalException
1:     {
1:         // Raw day value in unsigned int form, epoch @ 2^31
1:         if (rawPattern.matcher(source).matches())
1:         {
1:             try
1:             {
0:                 Long result = Long.parseLong(source);
1: 
1:                 if (result < 0 || result > maxSupportedDays)
1:                     throw new NumberFormatException("Input out of bounds: " + source);
1: 
1:                 // Shift > epoch days into negative portion of Integer result for byte order comparability
1:                 if (result >= Integer.MAX_VALUE)
1:                     result -= byteOrderShift;
1: 
0:                 return result.intValue();
1:             }
1:             catch (NumberFormatException e)
1:             {
1:                 throw new MarshalException(String.format("Unable to make unsigned int (for date) from: '%s'", source), e);
1:             }
1:         }
1: 
1:         // Attempt to parse as date string
1:         try
1:         {
1:             DateTime parsed = formatter.parseDateTime(source);
1:             long millis = parsed.getMillis();
1:             if (millis < minSupportedDateMillis)
1:                 throw new MarshalException(String.format("Input date %s is less than min supported date %s", source, new LocalDate(minSupportedDateMillis).toString()));
1:             if (millis > maxSupportedDateMillis)
1:                 throw new MarshalException(String.format("Input date %s is greater than max supported date %s", source, new LocalDate(maxSupportedDateMillis).toString()));
1: 
0:             Integer result = (int)TimeUnit.MILLISECONDS.toDays(millis);
0:             result -= Integer.MIN_VALUE;
0:             return result;
1:         }
1:         catch (IllegalArgumentException e1)
1:         {
1:             throw new MarshalException(String.format("Unable to coerce '%s' to a formatted date (long)", source), e1);
1:         }
1:     }
1: 
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (bytes.remaining() != 4)
1:             throw new MarshalException(String.format("Expected 4 byte long for date (%d)", bytes.remaining()));
1:     }
1: 
1:     public String toString(Integer value)
1:     {
1:         if (value == null)
1:             return "";
1: 
0:         return formatter.print(new LocalDate(TimeUnit.DAYS.toMillis(value - Integer.MIN_VALUE), DateTimeZone.UTC));
1:     }
1: 
1:     public Class<Integer> getType()
1:     {
1:         return Integer.class;
1:     }
1: }
============================================================================