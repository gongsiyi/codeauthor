1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi;
5:72790dc: 
1:72790dc: import java.io.File;
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.concurrent.atomic.AtomicBoolean;
1:72790dc: import java.util.concurrent.atomic.AtomicInteger;
1:72790dc: 
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:72790dc: import org.apache.cassandra.io.util.FileUtils;
1:72790dc: import org.apache.cassandra.utils.concurrent.Ref;
1:72790dc: 
1:72790dc: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:72790dc: 
1:72790dc: public class SSTableIndex
8:72790dc: {
1:72790dc:     private final ColumnIndex columnIndex;
1:72790dc:     private final Ref<SSTableReader> sstableRef;
2:72790dc:     private final SSTableReader sstable;
1:72790dc:     private final OnDiskIndex index;
1:72790dc:     private final AtomicInteger references = new AtomicInteger(1);
1:72790dc:     private final AtomicBoolean obsolete = new AtomicBoolean(false);
1:72790dc: 
1:72790dc:     public SSTableIndex(ColumnIndex index, File indexFile, SSTableReader referent)
1:72790dc:     {
1:72790dc:         this.columnIndex = index;
1:72790dc:         this.sstableRef = referent.tryRef();
1:72790dc:         this.sstable = sstableRef.get();
1:72790dc: 
1:72790dc:         if (sstable == null)
1:72790dc:             throw new IllegalStateException("Couldn't acquire reference to the sstable: " + referent);
1:72790dc: 
1:72790dc:         AbstractType<?> validator = columnIndex.getValidator();
1:72790dc: 
1:72790dc:         assert validator != null;
1:72790dc:         assert indexFile.exists() : String.format("SSTable %s should have index %s.",
1:72790dc:                 sstable.getFilename(),
1:72790dc:                 columnIndex.getIndexName());
1:72790dc: 
1:7d857b4:         this.index = new OnDiskIndex(indexFile, validator, new KeyFetcher.SSTableKeyFetcher(sstable));
8:72790dc:     }
1:72790dc: 
1:2ca2fff:     public OnDiskIndexBuilder.Mode mode()
1:2ca2fff:     {
1:2ca2fff:         return index.mode();
1:2ca2fff:     }
1:2ca2fff: 
1:2ca2fff:     public boolean hasMarkedPartials()
1:2ca2fff:     {
1:2ca2fff:         return index.hasMarkedPartials();
1:2ca2fff:     }
1:2ca2fff: 
1:72790dc:     public ByteBuffer minTerm()
1:72790dc:     {
1:72790dc:         return index.minTerm();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer maxTerm()
1:72790dc:     {
1:72790dc:         return index.maxTerm();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer minKey()
1:72790dc:     {
1:72790dc:         return index.minKey();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ByteBuffer maxKey()
1:72790dc:     {
1:72790dc:         return index.maxKey();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public RangeIterator<Long, Token> search(Expression expression)
1:72790dc:     {
1:72790dc:         return index.search(expression);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public SSTableReader getSSTable()
1:72790dc:     {
1:72790dc:         return sstable;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public String getPath()
1:72790dc:     {
1:72790dc:         return index.getIndexPath();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean reference()
1:72790dc:     {
1:72790dc:         while (true)
1:72790dc:         {
1:72790dc:             int n = references.get();
1:72790dc:             if (n <= 0)
1:72790dc:                 return false;
1:72790dc:             if (references.compareAndSet(n, n + 1))
1:72790dc:                 return true;
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void release()
1:72790dc:     {
1:72790dc:         int n = references.decrementAndGet();
1:72790dc:         if (n == 0)
1:72790dc:         {
1:72790dc:             FileUtils.closeQuietly(index);
1:72790dc:             sstableRef.release();
1:72790dc:             if (obsolete.get() || sstableRef.globalCount() == 0)
1:72790dc:                 FileUtils.delete(index.getIndexPath());
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void markObsolete()
1:72790dc:     {
1:72790dc:         obsolete.getAndSet(true);
1:72790dc:         release();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isObsolete()
1:72790dc:     {
1:72790dc:         return obsolete.get();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean equals(Object o)
1:72790dc:     {
1:72790dc:         return o instanceof SSTableIndex && index.getIndexPath().equals(((SSTableIndex) o).index.getIndexPath());
1:72790dc:     }
1:72790dc: 
2:72790dc:     public int hashCode()
1:72790dc:     {
1:72790dc:         return new HashCodeBuilder().append(index.getIndexPath()).build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public String toString()
1:72790dc:     {
1:72790dc:         return String.format("SSTableIndex(column: %s, SSTable: %s)", columnIndex.getColumnName(), sstable.descriptor);
1:72790dc:     }
1:72790dc: 
1:72790dc: 
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.*;
/////////////////////////////////////////////////////////////////////////
1:         this.index = new OnDiskIndex(indexFile, validator, new KeyFetcher.SSTableKeyFetcher(sstable));
/////////////////////////////////////////////////////////////////////////
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
/////////////////////////////////////////////////////////////////////////
1:     public OnDiskIndexBuilder.Mode mode()
1:     {
1:         return index.mode();
1:     }
1: 
1:     public boolean hasMarkedPartials()
1:     {
1:         return index.hasMarkedPartials();
1:     }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi;
1: 
1: import java.io.File;
0: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.index.sasi.conf.ColumnIndex;
0: import org.apache.cassandra.index.sasi.disk.OnDiskIndex;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
0: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.concurrent.Ref;
1: 
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
1: 
0: import com.google.common.base.Function;
1: 
1: public class SSTableIndex
1: {
1:     private final ColumnIndex columnIndex;
1:     private final Ref<SSTableReader> sstableRef;
1:     private final SSTableReader sstable;
1:     private final OnDiskIndex index;
1:     private final AtomicInteger references = new AtomicInteger(1);
1:     private final AtomicBoolean obsolete = new AtomicBoolean(false);
1: 
1:     public SSTableIndex(ColumnIndex index, File indexFile, SSTableReader referent)
1:     {
1:         this.columnIndex = index;
1:         this.sstableRef = referent.tryRef();
1:         this.sstable = sstableRef.get();
1: 
1:         if (sstable == null)
1:             throw new IllegalStateException("Couldn't acquire reference to the sstable: " + referent);
1: 
1:         AbstractType<?> validator = columnIndex.getValidator();
1: 
1:         assert validator != null;
1:         assert indexFile.exists() : String.format("SSTable %s should have index %s.",
1:                 sstable.getFilename(),
1:                 columnIndex.getIndexName());
1: 
0:         this.index = new OnDiskIndex(indexFile, validator, new DecoratedKeyFetcher(sstable));
1:     }
1: 
1:     public ByteBuffer minTerm()
1:     {
1:         return index.minTerm();
1:     }
1: 
1:     public ByteBuffer maxTerm()
1:     {
1:         return index.maxTerm();
1:     }
1: 
1:     public ByteBuffer minKey()
1:     {
1:         return index.minKey();
1:     }
1: 
1:     public ByteBuffer maxKey()
1:     {
1:         return index.maxKey();
1:     }
1: 
1:     public RangeIterator<Long, Token> search(Expression expression)
1:     {
1:         return index.search(expression);
1:     }
1: 
1:     public SSTableReader getSSTable()
1:     {
1:         return sstable;
1:     }
1: 
1:     public String getPath()
1:     {
1:         return index.getIndexPath();
1:     }
1: 
1:     public boolean reference()
1:     {
1:         while (true)
1:         {
1:             int n = references.get();
1:             if (n <= 0)
1:                 return false;
1:             if (references.compareAndSet(n, n + 1))
1:                 return true;
1:         }
1:     }
1: 
1:     public void release()
1:     {
1:         int n = references.decrementAndGet();
1:         if (n == 0)
1:         {
1:             FileUtils.closeQuietly(index);
1:             sstableRef.release();
1:             if (obsolete.get() || sstableRef.globalCount() == 0)
1:                 FileUtils.delete(index.getIndexPath());
1:         }
1:     }
1: 
1:     public void markObsolete()
1:     {
1:         obsolete.getAndSet(true);
1:         release();
1:     }
1: 
1:     public boolean isObsolete()
1:     {
1:         return obsolete.get();
1:     }
1: 
1:     public boolean equals(Object o)
1:     {
1:         return o instanceof SSTableIndex && index.getIndexPath().equals(((SSTableIndex) o).index.getIndexPath());
1:     }
1: 
1:     public int hashCode()
1:     {
1:         return new HashCodeBuilder().append(index.getIndexPath()).build();
1:     }
1: 
1:     public String toString()
1:     {
1:         return String.format("SSTableIndex(column: %s, SSTable: %s)", columnIndex.getColumnName(), sstable.descriptor);
1:     }
1: 
0:     private static class DecoratedKeyFetcher implements Function<Long, DecoratedKey>
1:     {
1:         private final SSTableReader sstable;
1: 
0:         DecoratedKeyFetcher(SSTableReader reader)
1:         {
0:             sstable = reader;
1:         }
1: 
0:         public DecoratedKey apply(Long offset)
1:         {
0:             try
1:             {
0:                 return sstable.keyAt(offset);
1:             }
0:             catch (IOException e)
1:             {
0:                 throw new FSReadError(new IOException("Failed to read key from " + sstable.descriptor, e), sstable.getFilename());
1:             }
1:         }
1: 
1:         public int hashCode()
1:         {
0:             return sstable.descriptor.hashCode();
1:         }
1: 
0:         public boolean equals(Object other)
1:         {
0:             return other instanceof DecoratedKeyFetcher
0:                     && sstable.descriptor.equals(((DecoratedKeyFetcher) other).sstable.descriptor);
1:         }
1:     }
1: }
============================================================================