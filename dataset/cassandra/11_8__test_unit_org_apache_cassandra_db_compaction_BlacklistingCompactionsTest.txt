1:a5647ad: package org.apache.cassandra.db.compaction;
1:60bf7a5: /*
1:60bf7a5:  * 
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:60bf7a5:  * 
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:60bf7a5:  * 
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:60bf7a5:  * 
1:60bf7a5:  */
1:60bf7a5: 
6:a5647ad: 
1:a5647ad: import java.io.RandomAccessFile;
1:9b10928: import java.util.*;
1:a5647ad: 
1:c75ee41: import org.junit.After;
1:57ead56: import org.junit.AfterClass;
1:a5647ad: import org.junit.BeforeClass;
1:a5647ad: import org.junit.Test;
1:a5647ad: 
1:85cc390: import org.slf4j.Logger;
1:85cc390: import org.slf4j.LoggerFactory;
1:85cc390: 
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.assertNotNull;
1:a991b64: 
1:a5647ad: import org.apache.cassandra.SchemaLoader;
1:a5647ad: import org.apache.cassandra.Util;
1:30bb255: import org.apache.cassandra.cache.ChunkCache;
1:85cc390: import org.apache.cassandra.config.*;
1:6bbb13b: import org.apache.cassandra.db.*;
1:f5c9d6e: import org.apache.cassandra.db.marshal.LongType;
1:d2a3827: import org.apache.cassandra.exceptions.ConfigurationException;
1:a991b64: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:a5647ad: import org.apache.cassandra.io.util.FileUtils;
1:85cc390: import org.apache.cassandra.schema.*;
1:a5647ad: 
1:9b10928: import static org.junit.Assert.assertTrue;
1:a5647ad: 
1:d2a3827: public class BlacklistingCompactionsTest
2:a5647ad: {
1:85cc390:     private static final Logger logger = LoggerFactory.getLogger(BlacklistingCompactionsTest.class);
1:85cc390: 
1:85cc390:     private static Random random;
1:85cc390: 
1:d2a3827:     private static final String KEYSPACE1 = "BlacklistingCompactionsTest";
1:85cc390:     private static final String STANDARD_STCS = "Standard_STCS";
1:85cc390:     private static final String STANDARD_LCS = "Standard_LCS";
1:57ead56:     private static int maxValueSize;
1:a5647ad: 
1:c75ee41:     @After
1:c75ee41:     public void leakDetect() throws InterruptedException
1:c75ee41:     {
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         System.gc();
1:c75ee41:         Thread.sleep(10);
1:c75ee41:     }
1:c75ee41: 
1:a5647ad:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws ConfigurationException
1:d2a3827:     {
1:85cc390:         long seed = System.nanoTime();
1:85cc390:         //long seed = 754271160974509L; // CASSANDRA-9530: use this seed to reproduce compaction failures if reading empty rows
1:f5c9d6e:         //long seed = 2080431860597L; // CASSANDRA-12359: use this seed to reproduce undetected corruptions
1:85cc390:         logger.info("Seed {}", seed);
1:85cc390:         random = new Random(seed);
1:85cc390: 
1:d2a3827:         SchemaLoader.prepareServer();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:f5c9d6e:                                     makeTable(STANDARD_STCS).compaction(CompactionParams.DEFAULT),
1:f5c9d6e:                                     makeTable(STANDARD_LCS).compaction(CompactionParams.lcs(Collections.emptyMap())));
1:85cc390: 
1:57ead56:         maxValueSize = DatabaseDescriptor.getMaxValueSize();
1:57ead56:         DatabaseDescriptor.setMaxValueSize(1024 * 1024);
1:d2a3827:         closeStdErr();
1:d2a3827:     }
1:d2a3827: 
1:f5c9d6e:     /**
1:f5c9d6e:      * Return a table metadata, we use types with fixed size to increase the chance of detecting corrupt data
1:f5c9d6e:      */
1:f5c9d6e:     private static CFMetaData makeTable(String tableName)
1:f5c9d6e:     {
1:f5c9d6e:         return SchemaLoader.standardCFMD(KEYSPACE1, tableName, 1, LongType.instance, LongType.instance, LongType.instance);
1:f5c9d6e:     }
1:f5c9d6e: 
1:57ead56:     @AfterClass
1:57ead56:     public static void tearDown()
1:57ead56:     {
1:57ead56:         DatabaseDescriptor.setMaxValueSize(maxValueSize);
1:57ead56:     }
1:57ead56: 
1:a5647ad:     public static void closeStdErr()
1:85cc390:     {
1:a5647ad:         // These tests generate an error message per CorruptSSTableException since it goes through
1:a5647ad:         // DebuggableThreadPoolExecutor, which will log it in afterExecute.  We could stop that by
1:a5647ad:         // creating custom CompactionStrategy and CompactionTask classes, but that's kind of a
1:a5647ad:         // ridiculous amount of effort, especially since those aren't really intended to be wrapped
1:a5647ad:         // like that.
1:a5647ad:         System.err.close();
2:a5647ad:     }
1:a5647ad: 
1:a5647ad:     @Test
1:a5647ad:     public void testBlacklistingWithSizeTieredCompactionStrategy() throws Exception
1:a5647ad:     {
1:85cc390:         testBlacklisting(STANDARD_STCS);
1:a5647ad:     }
1:a5647ad: 
1:a5647ad:     @Test
1:a5647ad:     public void testBlacklistingWithLeveledCompactionStrategy() throws Exception
1:a5647ad:     {
1:85cc390:         testBlacklisting(STANDARD_LCS);
1:a5647ad:     }
1:a5647ad: 
1:85cc390:     private void testBlacklisting(String tableName) throws Exception
1:a5647ad:     {
1:a5647ad:         // this test does enough rows to force multiple block indexes to be used
1:85cc390:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
1:85cc390:         final ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(tableName);
1:85cc390: 
1:a5647ad:         final int ROWS_PER_SSTABLE = 10;
1:b31845c:         final int SSTABLES = cfs.metadata.params.minIndexInterval * 2 / ROWS_PER_SSTABLE;
1:f5c9d6e:         final int SSTABLES_TO_CORRUPT = 8;
1:f5c9d6e: 
1:f5c9d6e:         assertTrue(String.format("Not enough sstables (%d), expected at least %d sstables to corrupt", SSTABLES, SSTABLES_TO_CORRUPT),
1:f5c9d6e:                    SSTABLES > SSTABLES_TO_CORRUPT);
1:85cc390: 
1:a5647ad:         // disable compaction while flushing
1:a5647ad:         cfs.disableAutoCompaction();
1:a5647ad:         //test index corruption
1:a5647ad:         //now create a few new SSTables
1:a5647ad:         long maxTimestampExpected = Long.MIN_VALUE;
1:a991b64:         Set<DecoratedKey> inserted = new HashSet<>();
1:a991b64: 
1:a5647ad:         for (int j = 0; j < SSTABLES; j++)
1:a5647ad:         {
1:a5647ad:             for (int i = 0; i < ROWS_PER_SSTABLE; i++)
1:a5647ad:             {
1:a991b64:                 DecoratedKey key = Util.dk(String.valueOf(i));
1:a5647ad:                 long timestamp = j * ROWS_PER_SSTABLE + i;
1:a991b64:                 new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey())
1:f5c9d6e:                         .clustering(Long.valueOf(i))
1:f5c9d6e:                         .add("val", Long.valueOf(i))
1:a991b64:                         .build()
1:a991b64:                         .applyUnsafe();
1:a5647ad:                 maxTimestampExpected = Math.max(timestamp, maxTimestampExpected);
1:a5647ad:                 inserted.add(key);
1:85cc390:             }
1:a5647ad:             cfs.forceBlockingFlush();
1:a5647ad:             CompactionsTest.assertMaxTimestamp(cfs, maxTimestampExpected);
1:a991b64:             assertEquals(inserted.toString(), inserted.size(), Util.getAll(Util.cmd(cfs).build()).size());
1:a5647ad:         }
1:a5647ad: 
1:ad8cad7:         Collection<SSTableReader> sstables = cfs.getLiveSSTables();
1:a5647ad:         int currentSSTable = 0;
1:a5647ad: 
1:a5647ad:         // corrupt first 'sstablesToCorrupt' SSTables
1:a5647ad:         for (SSTableReader sstable : sstables)
1:a5647ad:         {
1:f5c9d6e:             if (currentSSTable + 1 > SSTABLES_TO_CORRUPT)
1:a5647ad:                 break;
1:a5647ad: 
1:a5647ad:             RandomAccessFile raf = null;
1:a5647ad: 
1:a5647ad:             try
1:a5647ad:             {
1:f5c9d6e:                 int corruptionSize = 100;
1:a5647ad:                 raf = new RandomAccessFile(sstable.getFilename(), "rw");
1:a5647ad:                 assertNotNull(raf);
1:a991b64:                 assertTrue(raf.length() > corruptionSize);
1:f5c9d6e:                 long pos = random.nextInt((int)(raf.length() - corruptionSize));
1:f5c9d6e:                 logger.info("Corrupting sstable {} [{}] at pos {} / {}", currentSSTable, sstable.getFilename(), pos, raf.length());
1:f5c9d6e:                 raf.seek(pos);
1:9b10928:                 // We want to write something large enough that the corruption cannot get undetected
1:9b10928:                 // (even without compression)
1:a991b64:                 byte[] corruption = new byte[corruptionSize];
1:85cc390:                 random.nextBytes(corruption);
1:9b10928:                 raf.write(corruption);
1:30bb255:                 if (ChunkCache.instance != null)
1:30bb255:                     ChunkCache.instance.invalidateFile(sstable.getFilename());
1:9b10928: 
1:a5647ad:             }
1:a5647ad:             finally
1:a5647ad:             {
1:a5647ad:                 FileUtils.closeQuietly(raf);
1:a5647ad:             }
1:a5647ad: 
1:a5647ad:             currentSSTable++;
1:a5647ad:         }
1:a5647ad: 
1:a5647ad:         int failures = 0;
1:a5647ad: 
1:a5647ad:         // in case something will go wrong we don't want to loop forever using for (;;)
1:a5647ad:         for (int i = 0; i < sstables.size(); i++)
1:a5647ad:         {
1:a5647ad:             try
1:a5647ad:             {
1:a5647ad:                 cfs.forceMajorCompaction();
1:a5647ad:             }
1:a5647ad:             catch (Exception e)
1:a5647ad:             {
1:a5647ad:                 // kind of a hack since we're not specifying just CorruptSSTableExceptions, or (what we actually expect)
1:a5647ad:                 // an ExecutionException wrapping a CSSTE.  This is probably Good Enough though, since if there are
1:a5647ad:                 // other errors in compaction presumably the other tests would bring that to light.
1:a5647ad:                 failures++;
1:a5647ad:                 continue;
1:a5647ad:             }
1:a5647ad:             break;
1:a5647ad:         }
1:a5647ad: 
1:a5647ad:         cfs.truncateBlocking();
1:f5c9d6e:         assertEquals(SSTABLES_TO_CORRUPT, failures);
1:a5647ad:     }
1:a5647ad: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:717c6d6
commit:f5c9d6e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.LongType;
/////////////////////////////////////////////////////////////////////////
1:         //long seed = 2080431860597L; // CASSANDRA-12359: use this seed to reproduce undetected corruptions
1:                                     makeTable(STANDARD_STCS).compaction(CompactionParams.DEFAULT),
1:                                     makeTable(STANDARD_LCS).compaction(CompactionParams.lcs(Collections.emptyMap())));
1:     /**
1:      * Return a table metadata, we use types with fixed size to increase the chance of detecting corrupt data
1:      */
1:     private static CFMetaData makeTable(String tableName)
1:     {
1:         return SchemaLoader.standardCFMD(KEYSPACE1, tableName, 1, LongType.instance, LongType.instance, LongType.instance);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         final int SSTABLES_TO_CORRUPT = 8;
1: 
1:         assertTrue(String.format("Not enough sstables (%d), expected at least %d sstables to corrupt", SSTABLES, SSTABLES_TO_CORRUPT),
1:                    SSTABLES > SSTABLES_TO_CORRUPT);
/////////////////////////////////////////////////////////////////////////
1:                         .clustering(Long.valueOf(i))
1:                         .add("val", Long.valueOf(i))
/////////////////////////////////////////////////////////////////////////
1:             if (currentSSTable + 1 > SSTABLES_TO_CORRUPT)
1:                 int corruptionSize = 100;
1:                 long pos = random.nextInt((int)(raf.length() - corruptionSize));
1:                 logger.info("Corrupting sstable {} [{}] at pos {} / {}", currentSSTable, sstable.getFilename(), pos, raf.length());
1:                 raf.seek(pos);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(SSTABLES_TO_CORRUPT, failures);
commit:a2b73a5
commit:68d20ed
author:Alex Petrov
-------------------------------------------------------------------------------
commit:57ead56
/////////////////////////////////////////////////////////////////////////
1: import org.junit.AfterClass;
/////////////////////////////////////////////////////////////////////////
1:     private static int maxValueSize;
/////////////////////////////////////////////////////////////////////////
1:         maxValueSize = DatabaseDescriptor.getMaxValueSize();
1:         DatabaseDescriptor.setMaxValueSize(1024 * 1024);
1:     @AfterClass
1:     public static void tearDown()
1:     {
1:         DatabaseDescriptor.setMaxValueSize(maxValueSize);
1:     }
1: 
commit:85cc390
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.config.*;
1: import org.apache.cassandra.schema.*;
1:     private static final Logger logger = LoggerFactory.getLogger(BlacklistingCompactionsTest.class);
1: 
1:     private static Random random;
1: 
1:     private static final String STANDARD_STCS = "Standard_STCS";
1:     private static final String STANDARD_LCS = "Standard_LCS";
/////////////////////////////////////////////////////////////////////////
1:         long seed = System.nanoTime();
1:         //long seed = 754271160974509L; // CASSANDRA-9530: use this seed to reproduce compaction failures if reading empty rows
1:         logger.info("Seed {}", seed);
1:         random = new Random(seed);
1: 
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, STANDARD_STCS).compaction(CompactionParams.DEFAULT),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, STANDARD_LCS).compaction(CompactionParams.lcs(Collections.emptyMap())));
1: 
1:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
0:         for (String tableName : new String[] {STANDARD_STCS, STANDARD_LCS})
1:         {
1:             final ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(tableName);
1: 
0:             for (ColumnDefinition cd : cfs.metadata.allColumns())
0:                 cd.type.setMaxValueSize(1024 * 1024); // set max value size to 1MB
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         testBlacklisting(STANDARD_STCS);
1:         testBlacklisting(STANDARD_LCS);
1:     private void testBlacklisting(String tableName) throws Exception
0:         final ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(tableName);
/////////////////////////////////////////////////////////////////////////
0:                 raf.seek(random.nextInt((int)(raf.length() - corruptionSize)));
1:                 random.nextBytes(corruption);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cache.ChunkCache;
/////////////////////////////////////////////////////////////////////////
1:                 if (ChunkCache.instance != null)
1:                     ChunkCache.instance.invalidateFile(sstable.getFilename());
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
1:         final int SSTABLES = cfs.metadata.params.minIndexInterval * 2 / ROWS_PER_SSTABLE;
commit:a89597d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
commit:ee477cc
/////////////////////////////////////////////////////////////////////////
0:         final int SSTABLES = cfs.metadata.getMinIndexInterval() * 2 / ROWS_PER_SSTABLE;
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.*;
/////////////////////////////////////////////////////////////////////////
0:                 Mutation rm = new Mutation(KEYSPACE, key.key);
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open(KEYSPACE);
0:         final ColumnFamilyStore cfs = keyspace.getColumnFamilyStore("Standard1");
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ad8cad7
/////////////////////////////////////////////////////////////////////////
1:         Collection<SSTableReader> sstables = cfs.getLiveSSTables();
commit:9c4a776
commit:c75ee41
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
0: import org.junit.AfterClass;
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void leakDetect() throws InterruptedException
1:     {
1:         System.gc();
1:         System.gc();
1:         System.gc();
1:         Thread.sleep(10);
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.Iterators;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
0: import org.apache.cassandra.db.partitions.UnfilteredPartitionIterator;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Set<DecoratedKey> inserted = new HashSet<>();
1: 
1:                 DecoratedKey key = Util.dk(String.valueOf(i));
1:                 new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey())
0:                         .clustering("cols" + "i")
0:                         .add("val", "val" + i)
1:                         .build()
1:                         .applyUnsafe();
1:             assertEquals(inserted.toString(), inserted.size(), Util.getAll(Util.cmd(cfs).build()).size());
/////////////////////////////////////////////////////////////////////////
0:             if (currentSSTable + 1 > sstablesToCorrupt)
0:                 int corruptionSize = 50;
1:                 assertTrue(raf.length() > corruptionSize);
0:                 raf.seek(new Random().nextInt((int)(raf.length() - corruptionSize)));
1:                 byte[] corruption = new byte[corruptionSize];
/////////////////////////////////////////////////////////////////////////
commit:a30d8bd
commit:c0f96e1
commit:9b10928
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
0:                 assertTrue(raf.length() > 20);
0:                 raf.seek(new Random().nextInt((int)(raf.length() - 20)));
1:                 // We want to write something large enough that the corruption cannot get undetected
1:                 // (even without compression)
0:                 byte[] corruption = new byte[20];
0:                 Arrays.fill(corruption, (byte)0xFF);
1:                 raf.write(corruption);
1: 
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(sstablesToCorrupt, failures);
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.Util.cellname;
/////////////////////////////////////////////////////////////////////////
0:                 rm.add("Standard1", cellname(i / 2), ByteBufferUtil.EMPTY_BYTE_BUFFER, timestamp);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.sstable.format.SSTableReader;
/////////////////////////////////////////////////////////////////////////
author:lyubent
-------------------------------------------------------------------------------
commit:b453f08
/////////////////////////////////////////////////////////////////////////
0:                 rm.applyUnsafe();
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: public class BlacklistingCompactionsTest
1:     private static final String KEYSPACE1 = "BlacklistingCompactionsTest";
0:     private static final String CF_STANDARD1 = "Standard1";
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:         closeStdErr();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         Keyspace keyspace = Keyspace.open(KEYSPACE1);
/////////////////////////////////////////////////////////////////////////
0:                 Mutation rm = new Mutation(KEYSPACE1, key.getKey());
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:                 Mutation rm = new Mutation(KEYSPACE, key.getKey());
author:Dave Brosius
-------------------------------------------------------------------------------
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:a5647ad
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.compaction;
1: 
1: import java.io.RandomAccessFile;
0: import java.util.Collection;
0: import java.util.HashSet;
0: import java.util.Set;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.Util;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.DecoratedKey;
0: import org.apache.cassandra.db.RowMutation;
0: import org.apache.cassandra.db.Table;
0: import org.apache.cassandra.io.sstable.SSTableReader;
1: import org.apache.cassandra.io.util.FileUtils;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.assertNotNull;
1: 
0: public class BlacklistingCompactionsTest extends SchemaLoader
1: {
0:     public static final String KEYSPACE = "Keyspace1";
1: 
1:     @BeforeClass
1:     public static void closeStdErr()
1:     {
1:         // These tests generate an error message per CorruptSSTableException since it goes through
1:         // DebuggableThreadPoolExecutor, which will log it in afterExecute.  We could stop that by
1:         // creating custom CompactionStrategy and CompactionTask classes, but that's kind of a
1:         // ridiculous amount of effort, especially since those aren't really intended to be wrapped
1:         // like that.
1:         System.err.close();
1:     }
1: 
1:     @Test
1:     public void testBlacklistingWithSizeTieredCompactionStrategy() throws Exception
1:     {
0:         testBlacklisting(SizeTieredCompactionStrategy.class.getCanonicalName());
1:     }
1: 
1:     @Test
1:     public void testBlacklistingWithLeveledCompactionStrategy() throws Exception
1:     {
0:         testBlacklisting(LeveledCompactionStrategy.class.getCanonicalName());
1:     }
1: 
0:     public void testBlacklisting(String compactionStrategy) throws Exception
1:     {
1:         // this test does enough rows to force multiple block indexes to be used
0:         Table table = Table.open(KEYSPACE);
0:         final ColumnFamilyStore cfs = table.getColumnFamilyStore("Standard1");
1: 
1:         final int ROWS_PER_SSTABLE = 10;
0:         final int SSTABLES = cfs.metadata.getIndexInterval() * 2 / ROWS_PER_SSTABLE;
1: 
0:         cfs.setCompactionStrategyClass(compactionStrategy);
1: 
1:         // disable compaction while flushing
1:         cfs.disableAutoCompaction();
1:         //test index corruption
1:         //now create a few new SSTables
1:         long maxTimestampExpected = Long.MIN_VALUE;
0:         Set<DecoratedKey> inserted = new HashSet<DecoratedKey>();
1:         for (int j = 0; j < SSTABLES; j++)
1:         {
1:             for (int i = 0; i < ROWS_PER_SSTABLE; i++)
1:             {
0:                 DecoratedKey key = Util.dk(String.valueOf(i % 2));
0:                 RowMutation rm = new RowMutation(KEYSPACE, key.key);
1:                 long timestamp = j * ROWS_PER_SSTABLE + i;
0:                 rm.add("Standard1", ByteBufferUtil.bytes(String.valueOf(i / 2)),
0:                        ByteBufferUtil.EMPTY_BYTE_BUFFER,
0:                        timestamp);
1:                 maxTimestampExpected = Math.max(timestamp, maxTimestampExpected);
0:                 rm.apply();
1:                 inserted.add(key);
1:             }
1:             cfs.forceBlockingFlush();
1:             CompactionsTest.assertMaxTimestamp(cfs, maxTimestampExpected);
0:             assertEquals(inserted.toString(), inserted.size(), Util.getRangeSlice(cfs).size());
1:         }
1: 
0:         Collection<SSTableReader> sstables = cfs.getSSTables();
1:         int currentSSTable = 0;
0:         int sstablesToCorrupt = 8;
1: 
1:         // corrupt first 'sstablesToCorrupt' SSTables
1:         for (SSTableReader sstable : sstables)
1:         {
0:             if(currentSSTable + 1 > sstablesToCorrupt)
1:                 break;
1: 
1:             RandomAccessFile raf = null;
1: 
1:             try
1:             {
1:                 raf = new RandomAccessFile(sstable.getFilename(), "rw");
1:                 assertNotNull(raf);
0:                 raf.write(0xFFFFFF);
1:             }
1:             finally
1:             {
1:                 FileUtils.closeQuietly(raf);
1:             }
1: 
1:             currentSSTable++;
1:         }
1: 
1:         int failures = 0;
1: 
1:         // in case something will go wrong we don't want to loop forever using for (;;)
1:         for (int i = 0; i < sstables.size(); i++)
1:         {
1:             try
1:             {
1:                 cfs.forceMajorCompaction();
1:             }
1:             catch (Exception e)
1:             {
1:                 // kind of a hack since we're not specifying just CorruptSSTableExceptions, or (what we actually expect)
1:                 // an ExecutionException wrapping a CSSTE.  This is probably Good Enough though, since if there are
1:                 // other errors in compaction presumably the other tests would bring that to light.
1:                 failures++;
1:                 continue;
1:             }
1: 
0:             assertEquals(sstablesToCorrupt + 1, cfs.getSSTables().size());
1:             break;
1:         }
1: 
1: 
1:         cfs.truncateBlocking();
0:         assertEquals(failures, sstablesToCorrupt);
1:     }
1: }
============================================================================