1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
6:69cedbf: 
1:8896a70: import com.codahale.metrics.Meter;
1:c9ef25f: import com.codahale.metrics.Timer;
1:c9ef25f: 
1:69cedbf: import org.apache.cassandra.net.MessagingService;
1:69cedbf: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: /**
1:69cedbf:  * Metrics for dropped messages by verb.
1:69cedbf:  */
1:69cedbf: public class DroppedMessageMetrics
2:69cedbf: {
1:69cedbf:     /** Number of dropped messages */
1:69cedbf:     public final Meter dropped;
1:69cedbf: 
1:c9ef25f:     /** The dropped latency within node */
1:c9ef25f:     public final Timer internalDroppedLatency;
1:c9ef25f: 
1:c9ef25f:     /** The cross node dropped latency */
1:c9ef25f:     public final Timer crossNodeDroppedLatency;
1:c9ef25f: 
1:69cedbf:     public DroppedMessageMetrics(MessagingService.Verb verb)
1:69cedbf:     {
1:eb390d0:         MetricNameFactory factory = new DefaultNameFactory("DroppedMessage", verb.toString());
1:8896a70:         dropped = Metrics.meter(factory.createMetricName("Dropped"));
1:c9ef25f:         internalDroppedLatency = Metrics.timer(factory.createMetricName("InternalDroppedLatency"));
1:c9ef25f:         crossNodeDroppedLatency = Metrics.timer(factory.createMetricName("CrossNodeDroppedLatency"));
2:69cedbf:     }
1:69cedbf: }
============================================================================
author:anubhavkale
-------------------------------------------------------------------------------
commit:c9ef25f
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Timer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** The dropped latency within node */
1:     public final Timer internalDroppedLatency;
1: 
1:     /** The cross node dropped latency */
1:     public final Timer crossNodeDroppedLatency;
1: 
1:         internalDroppedLatency = Metrics.timer(factory.createMetricName("InternalDroppedLatency"));
1:         crossNodeDroppedLatency = Metrics.timer(factory.createMetricName("CrossNodeDroppedLatency"));
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Meter;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
1:         dropped = Metrics.meter(factory.createMetricName("Dropped"));
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         MetricNameFactory factory = new DefaultNameFactory("DroppedMessage", verb.toString());
0:         dropped = Metrics.newMeter(factory.createMetricName("Dropped"), "dropped", TimeUnit.SECONDS);
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
1: 
1: import org.apache.cassandra.net.MessagingService;
1: 
1: /**
1:  * Metrics for dropped messages by verb.
1:  */
1: public class DroppedMessageMetrics
1: {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
0:     public static final String TYPE_NAME = "DroppedMessage";
1: 
1:     /** Number of dropped messages */
1:     public final Meter dropped;
1: 
0:     private long lastDropped = 0;
1: 
1:     public DroppedMessageMetrics(MessagingService.Verb verb)
1:     {
0:         dropped = Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "Dropped", verb.toString()), "dropped", TimeUnit.SECONDS);
1:     }
1: 
0:     @Deprecated
0:     public int getRecentlyDropped()
1:     {
0:         long currentDropped = dropped.count();
0:         long recentlyDropped = currentDropped - lastDropped;
0:         lastDropped = currentDropped;
0:         return (int)recentlyDropped;
1:     }
1: }
============================================================================