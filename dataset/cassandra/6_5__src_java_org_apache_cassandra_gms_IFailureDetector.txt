1:07cf56f: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
5:066ef58:  *
1:066ef58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:066ef58:  *
1:066ef58:  * Unless required by applicable law or agreed to in writing, software
1:066ef58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:066ef58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:066ef58:  * See the License for the specific language governing permissions and
1:066ef58:  * limitations under the License.
1:066ef58:  */
1:066ef58: package org.apache.cassandra.gms;
1:066ef58: 
1:b767bf7: import java.net.InetAddress;
1:066ef58: 
1:066ef58: /**
1:066ef58:  * An interface that provides an application with the ability
1:066ef58:  * to query liveness information of a node in the cluster. It
1:066ef58:  * also exposes methods which help an application register callbacks
1:066ef58:  * for notifications of liveness information of nodes.
1:066ef58:  */
1:066ef58: 
1:066ef58: public interface IFailureDetector
1:066ef58: {
1:066ef58:     /**
1:066ef58:      * Failure Detector's knowledge of whether a node is up or
1:066ef58:      * down.
1:b207956:      *
1:066ef58:      * @param ep endpoint in question.
1:066ef58:      * @return true if UP and false if DOWN.
1:066ef58:      */
1:b767bf7:     public boolean isAlive(InetAddress ep);
1:066ef58: 
1:066ef58:     /**
1:066ef58:      * This method is invoked by any entity wanting to interrogate the status of an endpoint.
1:066ef58:      * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
1:066ef58:      * deem an endpoint as suspicious or alive as explained in the Hayashibara paper.
1:222ea95:      *
1:066ef58:      * param ep endpoint for which we interpret the inter arrival times.
1:b207956:      */
1:b767bf7:     public void interpret(InetAddress ep);
1:066ef58: 
1:066ef58:     /**
1:066ef58:      * This method is invoked by the receiver of the heartbeat. In our case it would be
1:066ef58:      * the Gossiper. Gossiper inform the Failure Detector on receipt of a heartbeat. The
1:066ef58:      * FailureDetector will then sample the arrival time as explained in the paper.
1:222ea95:      *
1:066ef58:      * param ep endpoint being reported.
1:b207956:      */
1:b767bf7:     public void report(InetAddress ep);
1:066ef58: 
1:066ef58:     /**
1:38ee5fc:      * remove endpoint from failure detector
1:066ef58:      */
1:38ee5fc:     public void remove(InetAddress ep);
1:066ef58: 
1:066ef58:     /**
1:190e27b:      * force conviction of endpoint in the failure detector
1:066ef58:      */
1:190e27b:     public void forceConviction(InetAddress ep);
1:190e27b: 
1:190e27b:     /**
1:066ef58:      * Register interest for Failure Detector events.
1:b207956:      *
1:066ef58:      * @param listener implementation of an application provided IFailureDetectionEventListener
1:066ef58:      */
1:066ef58:     public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener);
1:066ef58: 
1:066ef58:     /**
1:066ef58:      * Un-register interest for Failure Detector events.
1:b207956:      *
1:066ef58:      * @param listener implementation of an application provided IFailureDetectionEventListener
1:066ef58:      */
1:066ef58:     public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener);
1:066ef58: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:222ea95
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:26d1b68
commit:b3ae77d
/////////////////////////////////////////////////////////////////////////
commit:b207956
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:      * <p/>
1:      */
0:      * <p/>
1:      */
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
commit:b767bf7
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isAlive(InetAddress ep);
/////////////////////////////////////////////////////////////////////////
1:     public void interpret(InetAddress ep);
/////////////////////////////////////////////////////////////////////////
1:     public void report(InetAddress ep);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.gms;
1: 
0: import org.apache.cassandra.net.EndPoint;
1: 
1: /**
1:  * An interface that provides an application with the ability
1:  * to query liveness information of a node in the cluster. It 
1:  * also exposes methods which help an application register callbacks
1:  * for notifications of liveness information of nodes.
1:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
1: 
1: public interface IFailureDetector
1: {
1:     /**
1:      * Failure Detector's knowledge of whether a node is up or
1:      * down.
1:      * 
1:      * @param ep endpoint in question.
1:      * @return true if UP and false if DOWN.
1:      */
0:     public boolean isAlive(EndPoint ep);
1:     
1:     /**
1:      * This method is invoked by any entity wanting to interrogate the status of an endpoint. 
1:      * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
1:      * deem an endpoint as suspicious or alive as explained in the Hayashibara paper. 
1:      * 
1:      * param ep endpoint for which we interpret the inter arrival times.
1:     */
0:     public void interpret(EndPoint ep);
1:     
1:     /**
1:      * This method is invoked by the receiver of the heartbeat. In our case it would be
1:      * the Gossiper. Gossiper inform the Failure Detector on receipt of a heartbeat. The
1:      * FailureDetector will then sample the arrival time as explained in the paper.
1:      * 
1:      * param ep endpoint being reported.
1:     */
0:     public void report(EndPoint ep);
1:     
1:     /**
1:      * Register interest for Failure Detector events. 
1:      * @param listener implementation of an application provided IFailureDetectionEventListener 
1:      */
1:     public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener);
1:     
1:     /**
1:      * Un-register interest for Failure Detector events. 
1:      * @param listener implementation of an application provided IFailureDetectionEventListener 
1:      */
1:     public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener);
1: }
commit:68564e1
/////////////////////////////////////////////////////////////////////////
0:     public void interpret(EndPoint ep);
commit:71739ef
author:Brandon Williams
-------------------------------------------------------------------------------
commit:f0ea699
commit:190e27b
/////////////////////////////////////////////////////////////////////////
1:      * force conviction of endpoint in the failure detector
0:      */
1:     public void forceConviction(InetAddress ep);
1: 
1:     /**
commit:e5f7b37
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Clear any existing interval timings for this endpoint
0:      * @param ep
0:      */
0:     public void clear(InetAddress ep);
0: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  * to query liveness information of a node in the cluster. It
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * This method is invoked by any entity wanting to interrogate the status of an endpoint.
0:      * deem an endpoint as suspicious or alive as explained in the Hayashibara paper.
0:      *
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0:      * Register interest for Failure Detector events.
0:      * @param listener implementation of an application provided IFailureDetectionEventListener
0: 
0:      * Un-register interest for Failure Detector events.
0:      * @param listener implementation of an application provided IFailureDetectionEventListener
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:  * to query liveness information of a node in the cluster. It
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * This method is invoked by any entity wanting to interrogate the status of an endpoint.
0:      * deem an endpoint as suspicious or alive as explained in the Hayashibara paper.
0:      *
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0:      * Register interest for Failure Detector events.
0:      * @param listener implementation of an application provided IFailureDetectionEventListener
0: 
0:      * Un-register interest for Failure Detector events.
0:      * @param listener implementation of an application provided IFailureDetectionEventListener
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
author:Laine Jaakko Olavi
-------------------------------------------------------------------------------
commit:38ee5fc
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * remove endpoint from failure detector
0:      */
1:     public void remove(InetAddress ep);
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.gms;
0: 
0: import org.apache.cassandra.net.EndPoint;
0: 
0: /**
0:  * An interface that provides an application with the ability
0:  * to query liveness information of a node in the cluster. It 
0:  * also exposes methods which help an application register callbacks
0:  * for notifications of liveness information of nodes.
0:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: 
0: public interface IFailureDetector
0: {
0:     /**
0:      * Failure Detector's knowledge of whether a node is up or
0:      * down.
0:      * 
0:      * @param ep endpoint in question.
0:      * @return true if UP and false if DOWN.
0:      */
0:     public boolean isAlive(EndPoint ep);
0:     
0:     /**
0:      * This method is invoked by any entity wanting to interrogate the status of an endpoint. 
0:      * In our case it would be the Gossiper. The Failure Detector will then calculate Phi and
0:      * deem an endpoint as suspicious or alive as explained in the Hayashibara paper. 
0:      * 
0:      * param ep endpoint for which we interpret the inter arrival times.
0:     */
0:     public void intepret(EndPoint ep);
0:     
0:     /**
0:      * This method is invoked by the receiver of the heartbeat. In our case it would be
0:      * the Gossiper. Gossiper inform the Failure Detector on receipt of a heartbeat. The
0:      * FailureDetector will then sample the arrival time as explained in the paper.
0:      * 
0:      * param ep endpoint being reported.
0:     */
0:     public void report(EndPoint ep);
0:     
0:     /**
0:      * Register interest for Failure Detector events. 
0:      * @param listener implementation of an application provided IFailureDetectionEventListener 
0:      */
0:     public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener);
0:     
0:     /**
0:      * Un-register interest for Failure Detector events. 
0:      * @param listener implementation of an application provided IFailureDetectionEventListener 
0:      */
0:     public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener);
0: }
============================================================================