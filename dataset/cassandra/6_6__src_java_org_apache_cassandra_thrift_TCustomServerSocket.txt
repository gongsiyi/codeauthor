1:763ada2: /*
1:763ada2:  * Licensed to the Apache Software Foundation (ASF) under one
1:763ada2:  * or more contributor license agreements.  See the NOTICE file
1:763ada2:  * distributed with this work for additional information
1:763ada2:  * regarding copyright ownership.  The ASF licenses this file
1:763ada2:  * to you under the Apache License, Version 2.0 (the
1:763ada2:  * "License"); you may not use this file except in compliance
1:763ada2:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:763ada2:  */
1:07cf56f: package org.apache.cassandra.thrift;
1:1e7cde5: 
1:07cf56f: 
1:1e7cde5: import java.io.IOException;
1:c6f383c: import java.net.InetSocketAddress;
1:1e7cde5: import java.net.ServerSocket;
1:c6f383c: import java.net.Socket;
1:c6f383c: import java.net.SocketException;
3:c6f383c: 
1:e98eb1c: import org.slf4j.Logger;
1:e98eb1c: import org.slf4j.LoggerFactory;
1:e98eb1c: 
1:1e7cde5: import org.apache.thrift.transport.TServerTransport;
1:e98eb1c: import org.apache.thrift.transport.TTransportException;
1:e98eb1c: 
1:c6f383c: /**
1:1e7cde5:  * Extends Thrift's TServerSocket to allow customization of various desirable TCP properties.
1:c6f383c:  */
1:1e7cde5: public class TCustomServerSocket extends TServerTransport
1:c6f383c: {
1:c6f383c: 
1:c6f383c:     private static final Logger logger = LoggerFactory.getLogger(TCustomServerSocket.class);
1:c6f383c: 
1:1e7cde5:     /**
1:1e7cde5:      * Underlying serversocket object
1:1e7cde5:      */
1:910b663:     private ServerSocket serverSocket = null;
1:1e7cde5: 
1:c6f383c:     private final boolean keepAlive;
1:c6f383c:     private final Integer sendBufferSize;
1:c6f383c:     private final Integer recvBufferSize;
1:c6f383c: 
1:c6f383c:     /**
1:c6f383c:      * Allows fine-tuning of the server socket including keep-alive, reuse of addresses, send and receive buffer sizes.
1:1e7cde5:      *
1:c6f383c:      * @param bindAddr
1:c6f383c:      * @param keepAlive
1:c6f383c:      * @param sendBufferSize
1:c6f383c:      * @param recvBufferSize
1:c6f383c:      * @throws TTransportException
1:c6f383c:      */
1:1e7cde5:     public TCustomServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Integer sendBufferSize,
1:d37696c:             Integer recvBufferSize, Integer listenBacklog)
1:1e7cde5:             throws TTransportException
1:c6f383c:     {
1:1e7cde5:         try
1:1e7cde5:         {
1:1e7cde5:             // Make server socket
1:910b663:             serverSocket = new ServerSocket();
1:1e7cde5:             // Prevent 2MSL delay problem on server restarts
1:910b663:             serverSocket.setReuseAddress(true);
1:1e7cde5:             // Bind to listening port
1:d37696c:             serverSocket.bind(bindAddr, listenBacklog);
1:1e7cde5:         }
1:1e7cde5:         catch (IOException ioe)
1:1e7cde5:         {
1:910b663:             serverSocket = null;
1:182051c:             throw new TTransportException("Could not create ServerSocket on address " + bindAddr + ".");
1:1e7cde5:         }
1:1e7cde5: 
1:c6f383c:         this.keepAlive = keepAlive;
1:c6f383c:         this.sendBufferSize = sendBufferSize;
1:c6f383c:         this.recvBufferSize = recvBufferSize;
1:c6f383c:     }
1:7d2fbf9: 
1:8495560:     public TCustomServerSocket(ServerSocket socket, boolean keepAlive, Integer sendBufferSize, Integer recvBufferSize)
1:8495560:     {
1:8495560:         this.serverSocket = socket;
1:8495560:         this.keepAlive = keepAlive;
1:8495560:         this.sendBufferSize = sendBufferSize;
1:8495560:         this.recvBufferSize = recvBufferSize;
1:8495560:     }
1:8495560: 
1:7d2fbf9:     @Override
1:7aafe05:     @SuppressWarnings("resource")
1:1e7cde5:     protected TCustomSocket acceptImpl() throws TTransportException
1:c6f383c:     {
1:1e7cde5: 
1:910b663:         if (serverSocket == null)
1:1e7cde5:             throw new TTransportException(TTransportException.NOT_OPEN, "No underlying server socket.");
1:1e7cde5: 
1:1e7cde5:         TCustomSocket tsocket = null;
1:1e7cde5:         Socket socket = null;
1:1e7cde5:         try
1:1e7cde5:         {
1:910b663:             socket = serverSocket.accept();
1:1e7cde5:             tsocket = new TCustomSocket(socket);
1:1e7cde5:             tsocket.setTimeout(0);
1:1e7cde5:         }
1:1e7cde5:         catch (IOException iox)
1:1e7cde5:         {
1:1e7cde5:             throw new TTransportException(iox);
1:1e7cde5:         }
1:c6f383c: 
1:c6f383c:         try
1:c6f383c:         {
1:c6f383c:             socket.setKeepAlive(this.keepAlive);
1:c6f383c:         }
1:c6f383c:         catch (SocketException se)
1:c6f383c:         {
1:c6f383c:             logger.warn("Failed to set keep-alive on Thrift socket.", se);
1:c6f383c:         }
1:c6f383c: 
1:c6f383c:         if (this.sendBufferSize != null)
1:c6f383c:         {
1:c6f383c:             try
1:c6f383c:             {
1:c6f383c:                 socket.setSendBufferSize(this.sendBufferSize.intValue());
1:c6f383c:             }
1:c6f383c:             catch (SocketException se)
1:c6f383c:             {
1:c6f383c:                 logger.warn("Failed to set send buffer size on Thrift socket.", se);
1:c6f383c:             }
1:c6f383c:         }
1:c6f383c: 
1:c6f383c:         if (this.recvBufferSize != null)
1:c6f383c:         {
1:c6f383c:             try
1:c6f383c:             {
1:c6f383c:                 socket.setReceiveBufferSize(this.recvBufferSize.intValue());
1:c6f383c:             }
1:c6f383c:             catch (SocketException se)
1:c6f383c:             {
1:c6f383c:                 logger.warn("Failed to set receive buffer size on Thrift socket.", se);
1:c6f383c:             }
1:c6f383c:         }
1:c6f383c: 
1:c6f383c:         return tsocket;
1:c6f383c:     }
1:1e7cde5: 
1:1e7cde5:     @Override
1:1e7cde5:     public void listen() throws TTransportException
1:1e7cde5:     {
1:1e7cde5:         // Make sure not to block on accept
1:910b663:         if (serverSocket != null)
1:1e7cde5:         {
1:1e7cde5:             try
1:1e7cde5:             {
1:910b663:                 serverSocket.setSoTimeout(100);
1:1e7cde5:             }
1:1e7cde5:             catch (SocketException sx)
1:1e7cde5:             {
1:1e7cde5:                 logger.error("Could not set socket timeout.", sx);
1:1e7cde5:             }
1:1e7cde5:         }
1:1e7cde5:     }
1:1e7cde5: 
1:1e7cde5:     @Override
1:1e7cde5:     public void close()
1:1e7cde5:     {
1:910b663:         if (serverSocket != null)
1:1e7cde5:         {
1:1e7cde5:             try
1:1e7cde5:             {
1:910b663:                 serverSocket.close();
1:1e7cde5:             }
1:1e7cde5:             catch (IOException iox)
1:1e7cde5:             {
1:1e7cde5:                 logger.warn("Could not close server socket.", iox);
1:1e7cde5:             }
1:910b663:             serverSocket = null;
1:1e7cde5:         }
1:1e7cde5:     }
1:c6f383c: 
1:c6f383c:     @Override
1:7d2fbf9:     public void interrupt()
1:7d2fbf9:     {
1:7d2fbf9:         // The thread-safeness of this is dubious, but Java documentation suggests
1:7d2fbf9:         // that it is safe to do this from a different thread context
1:7d2fbf9:         close();
1:7d2fbf9:     }
1:c6f383c: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7aafe05
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
commit:1e7cde5
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.ServerSocket;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.transport.TServerTransport;
1:  * Extends Thrift's TServerSocket to allow customization of various desirable TCP properties.
1: public class TCustomServerSocket extends TServerTransport
1:     /**
1:      * Underlying serversocket object
1:      */
0:     private ServerSocket serverSocket_ = null;
1: 
1:      * 
1:     public TCustomServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Integer sendBufferSize,
0:             Integer recvBufferSize)
1:             throws TTransportException
1:         try
1:         {
1:             // Make server socket
0:             serverSocket_ = new ServerSocket();
1:             // Prevent 2MSL delay problem on server restarts
0:             serverSocket_.setReuseAddress(true);
1:             // Bind to listening port
0:             serverSocket_.bind(bindAddr);
1:         }
1:         catch (IOException ioe)
1:         {
0:             serverSocket_ = null;
0:             throw new TTransportException("Could not create ServerSocket on address " + bindAddr.toString() + ".");
1:         }
1: 
1:     protected TCustomSocket acceptImpl() throws TTransportException
1: 
0:         if (serverSocket_ == null)
1:             throw new TTransportException(TTransportException.NOT_OPEN, "No underlying server socket.");
1: 
1:         TCustomSocket tsocket = null;
1:         Socket socket = null;
1:         try
1:         {
0:             socket = serverSocket_.accept();
1:             tsocket = new TCustomSocket(socket);
1:             tsocket.setTimeout(0);
1:         }
1:         catch (IOException iox)
1:         {
1:             throw new TTransportException(iox);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void listen() throws TTransportException
1:     {
1:         // Make sure not to block on accept
0:         if (serverSocket_ != null)
1:         {
1:             try
1:             {
0:                 serverSocket_.setSoTimeout(0);
1:             }
1:             catch (SocketException sx)
1:             {
1:                 logger.error("Could not set socket timeout.", sx);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void close()
1:     {
0:         if (serverSocket_ != null)
1:         {
1:             try
1:             {
0:                 serverSocket_.close();
1:             }
1:             catch (IOException iox)
1:             {
1:                 logger.warn("Could not close server socket.", iox);
1:             }
0:             serverSocket_ = null;
1:         }
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:182051c
/////////////////////////////////////////////////////////////////////////
1:             throw new TTransportException("Could not create ServerSocket on address " + bindAddr + ".");
commit:f1c9bc6
/////////////////////////////////////////////////////////////////////////
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:d37696c
/////////////////////////////////////////////////////////////////////////
1:             Integer recvBufferSize, Integer listenBacklog)
/////////////////////////////////////////////////////////////////////////
1:             serverSocket.bind(bindAddr, listenBacklog);
commit:8495560
/////////////////////////////////////////////////////////////////////////
1:     public TCustomServerSocket(ServerSocket socket, boolean keepAlive, Integer sendBufferSize, Integer recvBufferSize)
0:             throws TTransportException
1:     {
1:         this.serverSocket = socket;
1:         this.keepAlive = keepAlive;
1:         this.sendBufferSize = sendBufferSize;
1:         this.recvBufferSize = recvBufferSize;
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:      *
commit:2fd3268
/////////////////////////////////////////////////////////////////////////
0:      *
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.thrift;
1: 
commit:910b663
/////////////////////////////////////////////////////////////////////////
1:     private ServerSocket serverSocket = null;
/////////////////////////////////////////////////////////////////////////
1:             serverSocket = new ServerSocket();
1:             serverSocket.setReuseAddress(true);
0:             serverSocket.bind(bindAddr);
1:             serverSocket = null;
/////////////////////////////////////////////////////////////////////////
1:         if (serverSocket == null)
1:             socket = serverSocket.accept();
/////////////////////////////////////////////////////////////////////////
1:         if (serverSocket != null)
1:                 serverSocket.setSoTimeout(100);
/////////////////////////////////////////////////////////////////////////
1:         if (serverSocket != null)
1:                 serverSocket.close();
1:             serverSocket = null;
commit:7d2fbf9
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void interrupt()
1:     {
1:         // The thread-safeness of this is dubious, but Java documentation suggests
1:         // that it is safe to do this from a different thread context
1:         close();
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:e3c5d5d
/////////////////////////////////////////////////////////////////////////
0:                 serverSocket_.setSoTimeout(100);
commit:e98eb1c
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.transport.TServerSocket;
0: import org.apache.thrift.transport.TSocket;
1: import org.apache.thrift.transport.TTransportException;
1: 
commit:c6f383c
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.thrift;
1: 
0: import org.apache.thrift.transport.TServerSocket;
0: import org.apache.thrift.transport.TSocket;
0: import org.apache.thrift.transport.TTransportException;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.net.SocketException;
1: 
1: /**
0:  * Extends Thrift's TServerSocket to allow customization of various desirable
0:  * TCP properties.
1:  */
0: public class TCustomServerSocket extends TServerSocket
1: {
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(TCustomServerSocket.class);
1: 
1:     private final boolean keepAlive;
1:     private final Integer sendBufferSize;
1:     private final Integer recvBufferSize;
1: 
1:     /**
1:      * Allows fine-tuning of the server socket including keep-alive, reuse of addresses, send and receive buffer sizes.
1:      * @param bindAddr
1:      * @param keepAlive
1:      * @param sendBufferSize
1:      * @param recvBufferSize
1:      * @throws TTransportException
1:      */
0:     public TCustomServerSocket(InetSocketAddress bindAddr, boolean keepAlive, Integer sendBufferSize, Integer recvBufferSize)
0:     throws TTransportException
1:     {
0:         super(bindAddr);
1:         this.keepAlive = keepAlive;
1:         this.sendBufferSize = sendBufferSize;
1:         this.recvBufferSize = recvBufferSize;
1:     }
1: 
1:     @Override
0:     protected TSocket acceptImpl() throws TTransportException
1:     {
0:         TSocket tsocket = super.acceptImpl();
0:         Socket socket = tsocket.getSocket();
1: 
1:         try
1:         {
1:             socket.setKeepAlive(this.keepAlive);
1:         }
1:         catch (SocketException se)
1:         {
1:             logger.warn("Failed to set keep-alive on Thrift socket.", se);
1:         }
1: 
1:         if (this.sendBufferSize != null)
1:         {
1:             try
1:             {
1:                 socket.setSendBufferSize(this.sendBufferSize.intValue());
1:             }
1:             catch (SocketException se)
1:             {
1:                 logger.warn("Failed to set send buffer size on Thrift socket.", se);
1:             }
1:         }
1: 
1:         if (this.recvBufferSize != null)
1:         {
1:             try
1:             {
1:                 socket.setReceiveBufferSize(this.recvBufferSize.intValue());
1:             }
1:             catch (SocketException se)
1:             {
1:                 logger.warn("Failed to set receive buffer size on Thrift socket.", se);
1:             }
1:         }
1: 
1:         return tsocket;
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:763ada2
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
============================================================================