1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.memory;
2:72790dc: 
1:72790dc: import java.io.IOException;
1:7d857b4: import java.util.*;
1:72790dc: import java.util.concurrent.ConcurrentSkipListSet;
1:72790dc: 
1:7d857b4: import org.apache.cassandra.db.ColumnFamilyStore;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.*;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.utils.AbstractIterator;
1:72790dc: import org.apache.cassandra.index.sasi.utils.CombinedValue;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:72790dc: 
1:72790dc: import com.google.common.collect.PeekingIterator;
1:7d857b4: import org.slf4j.Logger;
1:7d857b4: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: public class KeyRangeIterator extends RangeIterator<Long, Token>
1:72790dc: {
1:72790dc:     private final DKIterator iterator;
1:72790dc: 
1:7d857b4:     public KeyRangeIterator(ConcurrentSkipListSet<RowKey> keys)
1:72790dc:     {
1:7d857b4:         super((Long) keys.first().decoratedKey.getToken().getTokenValue(), (Long) keys.last().decoratedKey.getToken().getTokenValue(), keys.size());
1:72790dc:         this.iterator = new DKIterator(keys.iterator());
2:72790dc:     }
1:72790dc: 
1:72790dc:     protected Token computeNext()
1:72790dc:     {
1:72790dc:         return iterator.hasNext() ? new DKToken(iterator.next()) : endOfData();
1:72790dc:     }
1:72790dc: 
1:72790dc:     protected void performSkipTo(Long nextToken)
1:72790dc:     {
1:72790dc:         while (iterator.hasNext())
1:72790dc:         {
1:7d857b4:             RowKey key = iterator.peek();
1:7d857b4:             if (Long.compare((Long) key.decoratedKey.getToken().getTokenValue(), nextToken) >= 0)
1:72790dc:                 break;
1:72790dc: 
1:72790dc:             // consume smaller key
1:72790dc:             iterator.next();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void close() throws IOException
1:72790dc:     {}
1:72790dc: 
1:7d857b4:     private static class DKIterator extends AbstractIterator<RowKey> implements PeekingIterator<RowKey>
1:72790dc:     {
1:7d857b4:         private final Iterator<RowKey> keys;
1:72790dc: 
1:7d857b4:         public DKIterator(Iterator<RowKey> keys)
1:72790dc:         {
1:72790dc:             this.keys = keys;
1:72790dc:         }
1:72790dc: 
1:7d857b4:         protected RowKey computeNext()
1:72790dc:         {
1:72790dc:             return keys.hasNext() ? keys.next() : endOfData();
1:72790dc:         }
1:72790dc:     }
1:72790dc: 
1:72790dc:     private static class DKToken extends Token
1:72790dc:     {
1:7d857b4:         private final SortedSet<RowKey> keys;
1:72790dc: 
1:7d857b4:         public DKToken(RowKey key)
1:72790dc:         {
1:7d857b4:             super((Long) key.decoratedKey.getToken().getTokenValue());
1:72790dc: 
1:7d857b4:             keys = new TreeSet<RowKey>(RowKey.COMPARATOR)
1:72790dc:             {{
1:72790dc:                 add(key);
1:72790dc:             }};
1:5c4d5c7:         }
1:5c4d5c7: 
1:7d857b4:         public KeyOffsets getOffsets()
1:5c4d5c7:         {
1:7d857b4:             throw new IllegalStateException("DecoratedKey tokens are used in memtables and do not have on-disk offsets");
1:72790dc:         }
1:5c4d5c7: 
1:72790dc:         public void merge(CombinedValue<Long> other)
1:72790dc:         {
1:72790dc:             if (!(other instanceof Token))
1:72790dc:                 return;
1:72790dc: 
1:72790dc:             Token o = (Token) other;
1:72790dc:             assert o.get().equals(token);
1:72790dc: 
1:72790dc:             if (o instanceof DKToken)
1:72790dc:             {
1:72790dc:                 keys.addAll(((DKToken) o).keys);
1:72790dc:             }
1:72790dc:             else
1:72790dc:             {
1:7d857b4:                 for (RowKey key : o)
1:72790dc:                     keys.add(key);
1:72790dc:             }
1:72790dc:         }
1:72790dc: 
1:7d857b4:         public Iterator<RowKey> iterator()
1:72790dc:         {
1:72790dc:             return keys.iterator();
1:7d857b4:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.index.sasi.disk.*;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     public KeyRangeIterator(ConcurrentSkipListSet<RowKey> keys)
1:         super((Long) keys.first().decoratedKey.getToken().getTokenValue(), (Long) keys.last().decoratedKey.getToken().getTokenValue(), keys.size());
/////////////////////////////////////////////////////////////////////////
1:             RowKey key = iterator.peek();
1:             if (Long.compare((Long) key.decoratedKey.getToken().getTokenValue(), nextToken) >= 0)
/////////////////////////////////////////////////////////////////////////
1:     private static class DKIterator extends AbstractIterator<RowKey> implements PeekingIterator<RowKey>
1:         private final Iterator<RowKey> keys;
1:         public DKIterator(Iterator<RowKey> keys)
1:         protected RowKey computeNext()
/////////////////////////////////////////////////////////////////////////
1:         private final SortedSet<RowKey> keys;
1:         public DKToken(RowKey key)
1:             super((Long) key.decoratedKey.getToken().getTokenValue());
1:             keys = new TreeSet<RowKey>(RowKey.COMPARATOR)
1:         public KeyOffsets getOffsets()
1:             throw new IllegalStateException("DecoratedKey tokens are used in memtables and do not have on-disk offsets");
/////////////////////////////////////////////////////////////////////////
1:                 for (RowKey key : o)
1:         public Iterator<RowKey> iterator()
1: }
author:Jordan West
-------------------------------------------------------------------------------
commit:5c4d5c7
/////////////////////////////////////////////////////////////////////////
0: import com.carrotsearch.hppc.LongOpenHashSet;
0: import com.carrotsearch.hppc.LongSet;
/////////////////////////////////////////////////////////////////////////
0:         public LongSet getOffsets()
1:         {
0:             LongSet offsets = new LongOpenHashSet(4);
0:             for (DecoratedKey key : keys)
0:                 offsets.add((long) key.getToken().getTokenValue());
1: 
0:             return offsets;
1:         }
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.memory;
1: 
1: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.SortedSet;
0: import java.util.TreeSet;
1: import java.util.concurrent.ConcurrentSkipListSet;
1: 
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.utils.AbstractIterator;
1: import org.apache.cassandra.index.sasi.utils.CombinedValue;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1: 
1: import com.google.common.collect.PeekingIterator;
1: 
1: public class KeyRangeIterator extends RangeIterator<Long, Token>
1: {
1:     private final DKIterator iterator;
1: 
0:     public KeyRangeIterator(ConcurrentSkipListSet<DecoratedKey> keys)
1:     {
0:         super((Long) keys.first().getToken().getTokenValue(), (Long) keys.last().getToken().getTokenValue(), keys.size());
1:         this.iterator = new DKIterator(keys.iterator());
1:     }
1: 
1:     protected Token computeNext()
1:     {
1:         return iterator.hasNext() ? new DKToken(iterator.next()) : endOfData();
1:     }
1: 
1:     protected void performSkipTo(Long nextToken)
1:     {
1:         while (iterator.hasNext())
1:         {
0:             DecoratedKey key = iterator.peek();
0:             if (Long.compare((long) key.getToken().getTokenValue(), nextToken) >= 0)
1:                 break;
1: 
1:             // consume smaller key
1:             iterator.next();
1:         }
1:     }
1: 
1:     public void close() throws IOException
1:     {}
1: 
0:     private static class DKIterator extends AbstractIterator<DecoratedKey> implements PeekingIterator<DecoratedKey>
1:     {
0:         private final Iterator<DecoratedKey> keys;
1: 
0:         public DKIterator(Iterator<DecoratedKey> keys)
1:         {
1:             this.keys = keys;
1:         }
1: 
0:         protected DecoratedKey computeNext()
1:         {
1:             return keys.hasNext() ? keys.next() : endOfData();
1:         }
1:     }
1: 
1:     private static class DKToken extends Token
1:     {
0:         private final SortedSet<DecoratedKey> keys;
1: 
0:         public DKToken(final DecoratedKey key)
1:         {
0:             super((long) key.getToken().getTokenValue());
1: 
0:             keys = new TreeSet<DecoratedKey>(DecoratedKey.comparator)
1:             {{
1:                 add(key);
1:             }};
1:         }
1: 
1:         public void merge(CombinedValue<Long> other)
1:         {
1:             if (!(other instanceof Token))
1:                 return;
1: 
1:             Token o = (Token) other;
1:             assert o.get().equals(token);
1: 
1:             if (o instanceof DKToken)
1:             {
1:                 keys.addAll(((DKToken) o).keys);
1:             }
1:             else
1:             {
0:                 for (DecoratedKey key : o)
1:                     keys.add(key);
1:             }
1:         }
1: 
0:         public Iterator<DecoratedKey> iterator()
1:         {
1:             return keys.iterator();
1:         }
1:     }
1: }
============================================================================