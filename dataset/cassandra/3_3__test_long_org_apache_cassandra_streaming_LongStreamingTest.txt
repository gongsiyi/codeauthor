1:1e92ce4: /*
1:1e92ce4:  * Licensed to the Apache Software Foundation (ASF) under one
1:1e92ce4:  * or more contributor license agreements.  See the NOTICE file
1:1e92ce4:  * distributed with this work for additional information
1:1e92ce4:  * regarding copyright ownership.  The ASF licenses this file
1:1e92ce4:  * to you under the Apache License, Version 2.0 (the
1:1e92ce4:  * "License"); you may not use this file except in compliance
1:1e92ce4:  * with the License.  You may obtain a copy of the License at
1:1e92ce4:  *
1:1e92ce4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:1e92ce4:  *
1:1e92ce4:  * Unless required by applicable law or agreed to in writing, software
1:1e92ce4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1e92ce4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1e92ce4:  * See the License for the specific language governing permissions and
1:1e92ce4:  * limitations under the License.
1:1e92ce4:  */
2:1e92ce4: 
1:1e92ce4: package org.apache.cassandra.streaming;
1:1e92ce4: 
1:1e92ce4: import java.io.File;
1:1e92ce4: import java.io.IOException;
1:1e92ce4: import java.util.concurrent.ExecutionException;
1:1e92ce4: import java.util.concurrent.TimeUnit;
1:1e92ce4: 
1:1e92ce4: import com.google.common.io.Files;
1:1e92ce4: import org.junit.AfterClass;
1:1e92ce4: import org.junit.BeforeClass;
1:1e92ce4: import org.junit.Test;
1:1e92ce4: 
1:1e92ce4: import org.apache.cassandra.SchemaLoader;
1:1e92ce4: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:1e92ce4: import org.apache.cassandra.config.Schema;
1:1e92ce4: import org.apache.cassandra.cql3.QueryProcessor;
1:1e92ce4: import org.apache.cassandra.cql3.UntypedResultSet;
1:1e92ce4: import org.apache.cassandra.db.Keyspace;
1:1e92ce4: import org.apache.cassandra.dht.Range;
1:1e92ce4: import org.apache.cassandra.dht.Token;
1:1e92ce4: import org.apache.cassandra.exceptions.InvalidRequestException;
1:1e92ce4: import org.apache.cassandra.io.sstable.CQLSSTableWriter;
1:1e92ce4: import org.apache.cassandra.io.sstable.SSTableLoader;
1:1e92ce4: import org.apache.cassandra.service.StorageService;
1:1e92ce4: import org.apache.cassandra.utils.FBUtilities;
1:1e92ce4: import org.apache.cassandra.utils.OutputHandler;
1:1e92ce4: 
1:1e92ce4: import static org.junit.Assert.assertEquals;
1:1e92ce4: 
1:1e92ce4: public class LongStreamingTest
2:1e92ce4: {
1:1e92ce4:     @BeforeClass
1:1e92ce4:     public static void setup() throws Exception
1:1e92ce4:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511: 
1:1e92ce4:         SchemaLoader.cleanupAndLeaveDirs();
1:1e92ce4:         Keyspace.setInitialized();
1:1e92ce4:         StorageService.instance.initServer();
1:1e92ce4: 
1:1e92ce4:         StorageService.instance.setCompactionThroughputMbPerSec(0);
1:1e92ce4:         StorageService.instance.setStreamThroughputMbPerSec(0);
1:1e92ce4:         StorageService.instance.setInterDCStreamThroughputMbPerSec(0);
2:1e92ce4:     }
1:1e92ce4: 
1:1e92ce4:     @Test
1:1e92ce4:     public void testCompressedStream() throws InvalidRequestException, IOException, ExecutionException, InterruptedException
1:1e92ce4:     {
1:1e92ce4:         String KS = "cql_keyspace";
1:1e92ce4:         String TABLE = "table1";
1:1e92ce4: 
1:1e92ce4:         File tempdir = Files.createTempDir();
1:1e92ce4:         File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);
1:1e92ce4:         assert dataDir.mkdirs();
1:1e92ce4: 
1:1e92ce4:         String schema = "CREATE TABLE cql_keyspace.table1 ("
1:1e92ce4:                         + "  k int PRIMARY KEY,"
1:1e92ce4:                         + "  v1 text,"
1:1e92ce4:                         + "  v2 int"
1:1e92ce4:                         + ");";// with compression = {};";
1:1e92ce4:         String insert = "INSERT INTO cql_keyspace.table1 (k, v1, v2) VALUES (?, ?, ?)";
1:1e92ce4:         CQLSSTableWriter writer = CQLSSTableWriter.builder()
1:1e92ce4:                                                   .sorted()
1:1e92ce4:                                                   .inDirectory(dataDir)
1:1e92ce4:                                                   .forTable(schema)
1:1e92ce4:                                                   .using(insert).build();
1:1e92ce4:         long start = System.nanoTime();
1:1e92ce4: 
1:1e92ce4:         for (int i = 0; i < 10_000_000; i++)
1:1e92ce4:             writer.addRow(i, "test1", 24);
1:1e92ce4: 
1:1e92ce4:         writer.close();
1:1e92ce4:         System.err.println(String.format("Writer finished after %d seconds....", TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start)));
1:1e92ce4: 
1:0026e4e:         File[] dataFiles = dataDir.listFiles((dir, name) -> name.endsWith("-Data.db"));
1:1e92ce4:         long dataSize = 0l;
1:1e92ce4:         for (File file : dataFiles)
1:1e92ce4:         {
1:1e92ce4:             System.err.println("File : "+file.getAbsolutePath());
1:1e92ce4:             dataSize += file.length();
1:1e92ce4:         }
1:1e92ce4: 
1:0026e4e:         SSTableLoader loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
1:1e92ce4:         {
1:1e92ce4:             private String ks;
1:1e92ce4:             public void init(String keyspace)
1:1e92ce4:             {
1:1e92ce4:                 for (Range<Token> range : StorageService.instance.getLocalRanges("cql_keyspace"))
1:1e92ce4:                     addRangeForEndpoint(range, FBUtilities.getBroadcastAddress());
1:1e92ce4: 
1:1e92ce4:                 this.ks = keyspace;
1:1e92ce4:             }
1:1e92ce4: 
1:1e92ce4:             public CFMetaData getTableMetadata(String cfName)
1:1e92ce4:             {
1:1e92ce4:                 return Schema.instance.getCFMetaData(ks, cfName);
1:1e92ce4:             }
1:1e92ce4:         }, new OutputHandler.SystemOutput(false, false));
1:1e92ce4: 
1:1e92ce4:         start = System.nanoTime();
1:1e92ce4:         loader.stream().get();
1:1e92ce4: 
1:1e92ce4:         long millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:1e92ce4:         System.err.println(String.format("Finished Streaming in %.2f seconds: %.2f Mb/sec",
1:1e92ce4:                                          millis/1000d,
1:1e92ce4:                                          (dataSize / (1 << 20) / (millis / 1000d)) * 8));
1:1e92ce4: 
1:1e92ce4: 
1:1e92ce4:         //Stream again
1:0026e4e:         loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
1:1e92ce4:         {
1:1e92ce4:             private String ks;
1:1e92ce4:             public void init(String keyspace)
1:1e92ce4:             {
1:1e92ce4:                 for (Range<Token> range : StorageService.instance.getLocalRanges("cql_keyspace"))
1:1e92ce4:                     addRangeForEndpoint(range, FBUtilities.getBroadcastAddress());
1:1e92ce4: 
1:1e92ce4:                 this.ks = keyspace;
1:1e92ce4:             }
1:1e92ce4: 
1:1e92ce4:             public CFMetaData getTableMetadata(String cfName)
1:1e92ce4:             {
1:1e92ce4:                 return Schema.instance.getCFMetaData(ks, cfName);
1:1e92ce4:             }
1:1e92ce4:         }, new OutputHandler.SystemOutput(false, false));
1:1e92ce4: 
1:1e92ce4:         start = System.nanoTime();
1:1e92ce4:         loader.stream().get();
1:1e92ce4: 
1:1e92ce4:         millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:1e92ce4:         System.err.println(String.format("Finished Streaming in %.2f seconds: %.2f Mb/sec",
1:1e92ce4:                                          millis/1000d,
1:1e92ce4:                                          (dataSize / (1 << 20) / (millis / 1000d)) * 8));
1:1e92ce4: 
1:1e92ce4: 
1:1e92ce4:         //Compact them both
1:1e92ce4:         start = System.nanoTime();
1:1e92ce4:         Keyspace.open(KS).getColumnFamilyStore(TABLE).forceMajorCompaction();
1:1e92ce4:         millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:1e92ce4: 
1:1e92ce4:         System.err.println(String.format("Finished Compacting in %.2f seconds: %.2f Mb/sec",
1:1e92ce4:                                          millis / 1000d,
1:1e92ce4:                                          (dataSize * 2 / (1 << 20) / (millis / 1000d)) * 8));
1:1e92ce4: 
1:1e92ce4:         UntypedResultSet rs = QueryProcessor.executeInternal("SELECT * FROM cql_keyspace.table1 limit 100;");
1:1e92ce4:         assertEquals(100, rs.size());
1:1e92ce4:     }
1:1e92ce4: }
============================================================================
author:Jeremiah D Jordan
-------------------------------------------------------------------------------
commit:0026e4e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         File[] dataFiles = dataDir.listFiles((dir, name) -> name.endsWith("-Data.db"));
/////////////////////////////////////////////////////////////////////////
1:         SSTableLoader loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
/////////////////////////////////////////////////////////////////////////
1:         loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
author:Robert Stupp
-------------------------------------------------------------------------------
commit:29239c7
/////////////////////////////////////////////////////////////////////////
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:         DatabaseDescriptor.daemonInitialization();
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
0:         File[] dataFiles = writer.getInnermostDirectory().listFiles((dir, name) -> name.endsWith("-Data.db"));
/////////////////////////////////////////////////////////////////////////
0:         SSTableLoader loader = new SSTableLoader(writer.getInnermostDirectory(), new SSTableLoader.Client()
/////////////////////////////////////////////////////////////////////////
0:         loader = new SSTableLoader(writer.getInnermostDirectory(), new SSTableLoader.Client()
commit:1e92ce4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.streaming;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.io.Files;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.Config;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.cql3.QueryProcessor;
1: import org.apache.cassandra.cql3.UntypedResultSet;
1: import org.apache.cassandra.db.Keyspace;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.io.sstable.CQLSSTableWriter;
1: import org.apache.cassandra.io.sstable.SSTableLoader;
1: import org.apache.cassandra.service.StorageService;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.OutputHandler;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class LongStreamingTest
1: {
1:     @BeforeClass
1:     public static void setup() throws Exception
1:     {
1:         SchemaLoader.cleanupAndLeaveDirs();
1:         Keyspace.setInitialized();
1:         StorageService.instance.initServer();
1: 
1:         StorageService.instance.setCompactionThroughputMbPerSec(0);
1:         StorageService.instance.setStreamThroughputMbPerSec(0);
1:         StorageService.instance.setInterDCStreamThroughputMbPerSec(0);
1:     }
1: 
0:     @AfterClass
0:     public static void tearDown()
1:     {
0:         Config.setClientMode(false);
1:     }
1: 
1:     @Test
1:     public void testCompressedStream() throws InvalidRequestException, IOException, ExecutionException, InterruptedException
1:     {
1:         String KS = "cql_keyspace";
1:         String TABLE = "table1";
1: 
1:         File tempdir = Files.createTempDir();
1:         File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE);
1:         assert dataDir.mkdirs();
1: 
1:         String schema = "CREATE TABLE cql_keyspace.table1 ("
1:                         + "  k int PRIMARY KEY,"
1:                         + "  v1 text,"
1:                         + "  v2 int"
1:                         + ");";// with compression = {};";
1:         String insert = "INSERT INTO cql_keyspace.table1 (k, v1, v2) VALUES (?, ?, ?)";
1:         CQLSSTableWriter writer = CQLSSTableWriter.builder()
1:                                                   .sorted()
1:                                                   .inDirectory(dataDir)
1:                                                   .forTable(schema)
1:                                                   .using(insert).build();
1:         long start = System.nanoTime();
1: 
1:         for (int i = 0; i < 10_000_000; i++)
1:             writer.addRow(i, "test1", 24);
1: 
1:         writer.close();
1:         System.err.println(String.format("Writer finished after %d seconds....", TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start)));
1: 
0:         File[] dataFiles = dataDir.listFiles((dir, name) -> name.endsWith("-Data.db"));
1:         long dataSize = 0l;
1:         for (File file : dataFiles)
1:         {
1:             System.err.println("File : "+file.getAbsolutePath());
1:             dataSize += file.length();
1:         }
1: 
0:         SSTableLoader loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
1:         {
1:             private String ks;
1:             public void init(String keyspace)
1:             {
1:                 for (Range<Token> range : StorageService.instance.getLocalRanges("cql_keyspace"))
1:                     addRangeForEndpoint(range, FBUtilities.getBroadcastAddress());
1: 
1:                 this.ks = keyspace;
1:             }
1: 
1:             public CFMetaData getTableMetadata(String cfName)
1:             {
1:                 return Schema.instance.getCFMetaData(ks, cfName);
1:             }
1:         }, new OutputHandler.SystemOutput(false, false));
1: 
1:         start = System.nanoTime();
1:         loader.stream().get();
1: 
1:         long millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:         System.err.println(String.format("Finished Streaming in %.2f seconds: %.2f Mb/sec",
1:                                          millis/1000d,
1:                                          (dataSize / (1 << 20) / (millis / 1000d)) * 8));
1: 
1: 
1:         //Stream again
0:         loader = new SSTableLoader(dataDir, new SSTableLoader.Client()
1:         {
1:             private String ks;
1:             public void init(String keyspace)
1:             {
1:                 for (Range<Token> range : StorageService.instance.getLocalRanges("cql_keyspace"))
1:                     addRangeForEndpoint(range, FBUtilities.getBroadcastAddress());
1: 
1:                 this.ks = keyspace;
1:             }
1: 
1:             public CFMetaData getTableMetadata(String cfName)
1:             {
1:                 return Schema.instance.getCFMetaData(ks, cfName);
1:             }
1:         }, new OutputHandler.SystemOutput(false, false));
1: 
1:         start = System.nanoTime();
1:         loader.stream().get();
1: 
1:         millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1:         System.err.println(String.format("Finished Streaming in %.2f seconds: %.2f Mb/sec",
1:                                          millis/1000d,
1:                                          (dataSize / (1 << 20) / (millis / 1000d)) * 8));
1: 
1: 
1:         //Compact them both
1:         start = System.nanoTime();
1:         Keyspace.open(KS).getColumnFamilyStore(TABLE).forceMajorCompaction();
1:         millis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
1: 
1:         System.err.println(String.format("Finished Compacting in %.2f seconds: %.2f Mb/sec",
1:                                          millis / 1000d,
1:                                          (dataSize * 2 / (1 << 20) / (millis / 1000d)) * 8));
1: 
1:         UntypedResultSet rs = QueryProcessor.executeInternal("SELECT * FROM cql_keyspace.table1 limit 100;");
1:         assertEquals(100, rs.size());
1:     }
1: }
============================================================================