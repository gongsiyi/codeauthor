1:72a6cff: package org.apache.cassandra.triggers;
1:60bf7a5: /*
1:68d2526:  *
1:60bf7a5:  * Licensed to the Apache Software Foundation (ASF) under one
1:60bf7a5:  * or more contributor license agreements.  See the NOTICE file
1:60bf7a5:  * distributed with this work for additional information
1:60bf7a5:  * regarding copyright ownership.  The ASF licenses this file
1:60bf7a5:  * to you under the Apache License, Version 2.0 (the
1:60bf7a5:  * "License"); you may not use this file except in compliance
1:60bf7a5:  * with the License.  You may obtain a copy of the License at
1:68d2526:  *
1:60bf7a5:  *   http://www.apache.org/licenses/LICENSE-2.0
1:68d2526:  *
1:60bf7a5:  * Unless required by applicable law or agreed to in writing,
1:60bf7a5:  * software distributed under the License is distributed on an
1:60bf7a5:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:60bf7a5:  * KIND, either express or implied.  See the License for the
1:60bf7a5:  * specific language governing permissions and limitations
1:60bf7a5:  * under the License.
1:68d2526:  *
1:60bf7a5:  */
1:60bf7a5: 
2:72a6cff: 
1:72a6cff: import java.io.File;
1:72a6cff: import java.io.FilenameFilter;
1:72a6cff: import java.io.IOError;
1:72a6cff: import java.io.IOException;
1:72a6cff: import java.net.URL;
1:72a6cff: import java.net.URLClassLoader;
1:72a6cff: import java.util.Map;
1:72a6cff: import java.util.concurrent.ConcurrentHashMap;
1:72a6cff: 
1:72a6cff: import org.slf4j.Logger;
1:72a6cff: import org.slf4j.LoggerFactory;
1:72a6cff: 
1:72a6cff: import com.google.common.io.Files;
1:72a6cff: 
1:72a6cff: /**
1:72a6cff:  * Custom class loader will load the classes from the class path, CCL will load
1:72a6cff:  * the classes from the the URL first, if it cannot find the required class it
1:72a6cff:  * will let the parent class loader do the its job.
4:60bf7a5:  *
1:72a6cff:  * Note: If the CCL is GC'ed then the associated classes will be unloaded.
1:72a6cff:  */
1:72a6cff: public class CustomClassLoader extends URLClassLoader
3:72a6cff: {
1:72a6cff:     private static final Logger logger = LoggerFactory.getLogger(CustomClassLoader.class);
1:72a6cff:     private final Map<String, Class<?>> cache = new ConcurrentHashMap<String, Class<?>>();
1:72a6cff:     private final ClassLoader parent;
1:72a6cff: 
1:72a6cff:     public CustomClassLoader(ClassLoader parent)
1:72a6cff:     {
1:72a6cff:         super(new URL[] {}, parent);
1:72a6cff:         assert parent != null;
1:72a6cff:         this.parent = getParent();
3:72a6cff:     }
1:72a6cff: 
1:72a6cff:     public CustomClassLoader(ClassLoader parent, File classPathDir)
1:72a6cff:     {
1:72a6cff:         super(new URL[] {}, parent);
1:72a6cff:         assert parent != null;
1:72a6cff:         this.parent = getParent();
1:72a6cff:         addClassPath(classPathDir);
1:72a6cff:     }
1:72a6cff: 
1:72a6cff:     public void addClassPath(File dir)
1:72a6cff:     {
1:72a6cff:         if (dir == null || !dir.exists())
1:72a6cff:             return;
1:68d2526:         FilenameFilter filter = new FilenameFilter()
1:68d2526:         {
1:68d2526:             public boolean accept(File dir, String name)
1:68d2526:             {
1:72a6cff:                 return name.endsWith(".jar");
1:72a6cff:             }
1:72a6cff:         };
1:72a6cff:         for (File inputJar : dir.listFiles(filter))
1:72a6cff:         {
1:72a6cff:             File lib = new File(System.getProperty("java.io.tmpdir"), "lib");
1:72a6cff:             if (!lib.exists())
1:72a6cff:             {
1:72a6cff:                 lib.mkdir();
1:72a6cff:                 lib.deleteOnExit();
1:72a6cff:             }
1:72a6cff:             try
1:72a6cff:             {
1:72a6cff:                 File out = File.createTempFile("cassandra-", ".jar", lib);
1:72a6cff:                 out.deleteOnExit();
1:72a6cff:                 logger.info("Loading new jar {}", inputJar.getAbsolutePath());
1:72a6cff:                 Files.copy(inputJar, out);
1:ee553f3:                 addURL(out.toURI().toURL());
1:72a6cff:             }
1:72a6cff:             catch (IOException ex)
1:72a6cff:             {
1:72a6cff:                 throw new IOError(ex);
1:72a6cff:             }
1:72a6cff:         }
1:72a6cff:     }
1:72a6cff: 
1:72a6cff:     @Override
1:72a6cff:     public Class<?> loadClass(String name) throws ClassNotFoundException
1:72a6cff:     {
1:72a6cff:         Class<?> clazz = cache.get(name);
1:72a6cff:         if (clazz == null)
1:72a6cff:             return loadClassInternal(name);
1:72a6cff:         return clazz;
1:72a6cff:     }
1:72a6cff: 
1:72a6cff:     public synchronized Class<?> loadClassInternal(String name) throws ClassNotFoundException
1:72a6cff:     {
1:72a6cff:         try
1:72a6cff:         {
1:1795e1b:             return parent.loadClass(name);
1:72a6cff:         }
1:72a6cff:         catch (ClassNotFoundException ex)
1:72a6cff:         {
1:4a849ef:             logger.trace("Class not found using parent class loader,", ex);
1:72a6cff:             // Don't throw the exception here, try triggers directory.
1:72a6cff:         }
1:72a6cff:         Class<?> clazz = this.findClass(name);
1:72a6cff:         cache.put(name, clazz);
1:72a6cff:         return clazz;
1:72a6cff:     }
1:72a6cff: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         FilenameFilter filter = new FilenameFilter()
1:         {
1:             public boolean accept(File dir, String name)
1:             {
commit:ee553f3
/////////////////////////////////////////////////////////////////////////
1:                 addURL(out.toURI().toURL());
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Class not found using parent class loader,", ex);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1795e1b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return parent.loadClass(name);
/////////////////////////////////////////////////////////////////////////
commit:60bf7a5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.triggers;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.io.IOError;
1: import java.io.IOException;
1: import java.net.URL;
1: import java.net.URLClassLoader;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.google.common.io.Files;
1: 
1: /**
1:  * Custom class loader will load the classes from the class path, CCL will load
1:  * the classes from the the URL first, if it cannot find the required class it
1:  * will let the parent class loader do the its job.
0:  *
1:  * Note: If the CCL is GC'ed then the associated classes will be unloaded.
1:  */
1: public class CustomClassLoader extends URLClassLoader
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(CustomClassLoader.class);
0:     private static final String[] PACKAGE_EXCLUSION_LIST = new String[] {"org.apache.log4j", "org.slf4j"};
1:     private final Map<String, Class<?>> cache = new ConcurrentHashMap<String, Class<?>>();
1:     private final ClassLoader parent;
1: 
1:     public CustomClassLoader(ClassLoader parent)
1:     {
1:         super(new URL[] {}, parent);
1:         assert parent != null;
1:         this.parent = getParent();
1:     }
1: 
1:     public CustomClassLoader(ClassLoader parent, File classPathDir)
1:     {
1:         super(new URL[] {}, parent);
1:         assert parent != null;
1:         this.parent = getParent();
1:         addClassPath(classPathDir);
1:     }
1: 
1:     public void addClassPath(File dir)
1:     {
1:         if (dir == null || !dir.exists())
1:             return;
0:         FilenameFilter filter = new FilenameFilter() {
0:             public boolean accept(File dir, String name) {
1:                 return name.endsWith(".jar");
1:             }
1:         };
1:         for (File inputJar : dir.listFiles(filter))
1:         {
1:             File lib = new File(System.getProperty("java.io.tmpdir"), "lib");
1:             if (!lib.exists())
1:             {
1:                 lib.mkdir();
1:                 lib.deleteOnExit();
1:             }
1:             try
1:             {
1:                 File out = File.createTempFile("cassandra-", ".jar", lib);
1:                 out.deleteOnExit();
1:                 logger.info("Loading new jar {}", inputJar.getAbsolutePath());
1:                 Files.copy(inputJar, out);
0:                 addURL(out.toURL());
1:             }
1:             catch (IOException ex)
1:             {
1:                 throw new IOError(ex);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public Class<?> loadClass(String name) throws ClassNotFoundException
1:     {
1:         Class<?> clazz = cache.get(name);
1:         if (clazz == null)
1:             return loadClassInternal(name);
1:         return clazz;
1:     }
1: 
1:     public synchronized Class<?> loadClassInternal(String name) throws ClassNotFoundException
1:     {
1:         try
1:         {
0:             if (!isExcluded(name))
0:                 return parent.loadClass(name);
1:         }
1:         catch (ClassNotFoundException ex)
1:         {
0:             logger.debug("Class not found using parent class loader,", ex);
1:             // Don't throw the exception here, try triggers directory.
1:         }
1:         Class<?> clazz = this.findClass(name);
1:         cache.put(name, clazz);
1:         return clazz;
1:     }
1: 
0:     private boolean isExcluded(String name)
1:     {
0:         for (String exclusion : PACKAGE_EXCLUSION_LIST)
1:         {
0:             if (name.startsWith(exclusion))
0:                 return true;
1:         }
0:         return false;
1:     }
1: }
============================================================================