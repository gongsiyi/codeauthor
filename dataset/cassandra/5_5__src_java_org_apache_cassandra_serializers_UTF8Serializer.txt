1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
1:fc8b76f: package org.apache.cassandra.serializers;
7:e9c6742: 
1:e9c6742: import java.nio.ByteBuffer;
1:ce206e2: import java.nio.charset.StandardCharsets;
1:e9c6742: 
1:fc8b76f: public class UTF8Serializer extends AbstractTextSerializer
7:e9c6742: {
1:e9c6742:     public static final UTF8Serializer instance = new UTF8Serializer();
1:e9c6742: 
1:fc8b76f:     private UTF8Serializer()
1:e9c6742:     {
1:ce206e2:         super(StandardCharsets.UTF_8);
7:e9c6742:     }
1:e9c6742: 
1:e9c6742:     public void validate(ByteBuffer bytes) throws MarshalException
1:e9c6742:     {
1:e9c6742:         if (!UTF8Validator.validate(bytes))
1:e9c6742:             throw new MarshalException("String didn't validate.");
1:e9c6742:     }
1:e9c6742: 
1:e9c6742:     static class UTF8Validator
1:e9c6742:     {
1:68d2526:         enum State
1:68d2526:         {
1:e9c6742:             START,
1:e9c6742:             TWO,
1:e9c6742:             TWO_80,
1:e9c6742:             THREE_a0bf,
1:e9c6742:             THREE_80bf_1,
1:e9c6742:             THREE_80bf_2,
1:e9c6742:             FOUR_90bf,
1:e9c6742:             FOUR_80bf_3,
1:e9c6742:         };
1:e9c6742: 
1:e9c6742:         // since we're not converting to java strings, we don't need to worry about converting to surrogates.
1:e9c6742:         // buf has already been sliced/duplicated.
1:e9c6742:         static boolean validate(ByteBuffer buf)
1:e9c6742:         {
1:6dc595d:             if (buf == null)
1:6dc595d:                 return false;
1:6dc595d: 
1:e9c6742:             buf = buf.slice();
1:e9c6742:             int b = 0;
1:e9c6742:             State state = State.START;
1:e9c6742:             while (buf.remaining() > 0)
1:e9c6742:             {
1:e9c6742:                 b = buf.get();
1:e9c6742:                 switch (state)
1:e9c6742:                 {
1:e9c6742:                     case START:
1:e9c6742:                         if (b >= 0)
1:e9c6742:                         {
1:e9c6742:                             // ascii, state stays start.
1:e9c6742:                             if (b > 127)
1:e9c6742:                                 return false;
1:e9c6742:                         }
1:e9c6742:                         else if ((b >> 5) == -2)
1:e9c6742:                         {
1:e9c6742:                             // validate first byte of 2-byte char, 0xc2-0xdf
1:e9c6742:                             if (b == (byte) 0xc0)
1:42cd66a:                                 // special case: modified utf8 null is 0xc080.
1:e9c6742:                                 state = State.TWO_80;
1:e9c6742:                             else if ((b & 0x1e) == 0)
1:e9c6742:                                 return false;
1:42cd66a:                             else
1:42cd66a:                                 state = State.TWO;
1:e9c6742:                         }
1:e9c6742:                         else if ((b >> 4) == -2)
1:e9c6742:                         {
1:e9c6742:                             // 3 bytes. first byte will be 0xe0 or 0xe1-0xef. handling of second byte will differ.
1:e9c6742:                             // so 0xe0,0xa0-0xbf,0x80-0xbf or 0xe1-0xef,0x80-0xbf,0x80-0xbf.
1:e9c6742:                             if (b == (byte)0xe0)
1:e9c6742:                                 state = State.THREE_a0bf;
1:e9c6742:                             else
1:e9c6742:                                 state = State.THREE_80bf_2;
1:e9c6742:                             break;
1:e9c6742:                         }
1:e9c6742:                         else if ((b >> 3) == -2)
1:e9c6742:                         {
1:e9c6742:                             // 4 bytes. this is where the fun starts.
1:e9c6742:                             if (b == (byte)0xf0)
1:e9c6742:                                 // 0xf0, 0x90-0xbf, 0x80-0xbf, 0x80-0xbf
1:e9c6742:                                 state = State.FOUR_90bf;
1:e9c6742:                             else
1:0f5e780:                                 // 0xf4, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
1:e9c6742:                                 // 0xf1-0xf3, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
2:e9c6742:                                 state = State.FOUR_80bf_3;
1:e9c6742:                             break;
1:e9c6742:                         }
1:e9c6742:                         else
1:e9c6742:                             return false; // malformed.
1:e9c6742:                         break;
1:e9c6742:                     case TWO:
1:e9c6742:                         // validate second byte of 2-byte char, 0x80-0xbf
1:e9c6742:                         if ((b & 0xc0) != 0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.START;
1:e9c6742:                         break;
1:e9c6742:                     case TWO_80:
1:e9c6742:                         if (b != (byte)0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.START;
1:e9c6742:                         break;
1:e9c6742:                     case THREE_a0bf:
1:e9c6742:                         if ((b & 0xe0) == 0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.THREE_80bf_1;
1:e9c6742:                         break;
1:e9c6742:                     case THREE_80bf_1:
1:e9c6742:                         // expecting 0x80-0xbf
1:e9c6742:                         if ((b & 0xc0) != 0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.START;
1:e9c6742:                         break;
1:e9c6742:                     case THREE_80bf_2:
1:e9c6742:                         // expecting 0x80-bf and then another of the same.
1:e9c6742:                         if ((b & 0xc0) != 0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.THREE_80bf_1;
1:e9c6742:                         break;
1:e9c6742:                     case FOUR_90bf:
1:e9c6742:                         // expecting 0x90-bf. 2nd byte of 4byte sequence. after that it should degrade to 80-bf,80-bf (like 3byte seq).
1:e9c6742:                         if ((b & 0x30) == 0)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.THREE_80bf_2;
1:e9c6742:                         break;
1:e9c6742:                     case FOUR_80bf_3:
1:e9c6742:                         // expecting 0x80-bf 3 times. degenerates to THREE_80bf_2.
1:e9c6742:                         if ((b & 0xc0) != 0x80)
1:e9c6742:                             return false;
1:e9c6742:                         state = State.THREE_80bf_2;
1:e9c6742:                         break;
1:e9c6742:                     default:
1:e9c6742:                         return false; // invalid state.
1:e9c6742:                 }
1:e9c6742:             }
1:e9c6742:             // if state != start, we've got underflow. that's an error.
1:e9c6742:             return state == State.START;
1:e9c6742:         }
1:e9c6742:     }
1:e9c6742: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:7bef418
commit:6dc595d
/////////////////////////////////////////////////////////////////////////
1:             if (buf == null)
1:                 return false;
1: 
commit:e3716ee
commit:42cd66a
/////////////////////////////////////////////////////////////////////////
1:                                 // special case: modified utf8 null is 0xc080.
1:                             else
1:                                 state = State.TWO;
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         enum State
1:         {
commit:6f217f7
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:                                 // 0xf4, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:ce206e2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:         super(StandardCharsets.UTF_8);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
/////////////////////////////////////////////////////////////////////////
1: public class UTF8Serializer extends AbstractTextSerializer
1:     private UTF8Serializer()
0:         super(Charset.forName("UTF-8"));
/////////////////////////////////////////////////////////////////////////
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: import java.nio.ByteBuffer;
0: import java.nio.charset.CharacterCodingException;
0: import java.nio.charset.Charset;
1: 
0: public class UTF8Serializer extends AbstractSerializer<String>
1: {
1:     public static final UTF8Serializer instance = new UTF8Serializer();
0:     private static final Charset UTF_8 = Charset.forName("UTF-8");
1: 
0:     @Override
0:     public String serialize(ByteBuffer bytes)
1:     {
0:         return getString(bytes);
1:     }
1: 
0:     @Override
0:     public ByteBuffer deserialize(String value)
1:     {
0:         return ByteBufferUtil.bytes(value, UTF_8);
1:     }
1: 
0:     @Override
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
1:         if (!UTF8Validator.validate(bytes))
1:             throw new MarshalException("String didn't validate.");
1:     }
1: 
1:     static class UTF8Validator
1:     {
0:         enum State {
1:             START,
1:             TWO,
1:             TWO_80,
1:             THREE_a0bf,
1:             THREE_80bf_1,
1:             THREE_80bf_2,
1:             FOUR_90bf,
1:             FOUR_80bf_3,
1:         };
1: 
1:         // since we're not converting to java strings, we don't need to worry about converting to surrogates.
1:         // buf has already been sliced/duplicated.
1:         static boolean validate(ByteBuffer buf)
1:         {
1:             buf = buf.slice();
1:             int b = 0;
1:             State state = State.START;
1:             while (buf.remaining() > 0)
1:             {
1:                 b = buf.get();
1:                 switch (state)
1:                 {
1:                     case START:
1:                         if (b >= 0)
1:                         {
1:                             // ascii, state stays start.
1:                             if (b > 127)
1:                                 return false;
1:                         }
1:                         else if ((b >> 5) == -2)
1:                         {
1:                             // validate first byte of 2-byte char, 0xc2-0xdf
1:                             if (b == (byte) 0xc0)
0:                                 // speical case: modified utf8 null is 0xc080.
1:                                 state = State.TWO_80;
1:                             else if ((b & 0x1e) == 0)
1:                                 return false;
0:                             state = State.TWO;
1:                         }
1:                         else if ((b >> 4) == -2)
1:                         {
1:                             // 3 bytes. first byte will be 0xe0 or 0xe1-0xef. handling of second byte will differ.
1:                             // so 0xe0,0xa0-0xbf,0x80-0xbf or 0xe1-0xef,0x80-0xbf,0x80-0xbf.
1:                             if (b == (byte)0xe0)
1:                                 state = State.THREE_a0bf;
1:                             else
1:                                 state = State.THREE_80bf_2;
1:                             break;
1:                         }
1:                         else if ((b >> 3) == -2)
1:                         {
1:                             // 4 bytes. this is where the fun starts.
1:                             if (b == (byte)0xf0)
1:                                 // 0xf0, 0x90-0xbf, 0x80-0xbf, 0x80-0xbf
1:                                 state = State.FOUR_90bf;
0:                             else if (b == (byte)0xf4)
0:                                 // 0xf4, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
1:                                 state = State.FOUR_80bf_3;
1:                             else
1:                                 // 0xf1-0xf3, 0x80-0xbf, 0x80-0xbf, 0x80-0xbf
1:                                 state = State.FOUR_80bf_3;
1:                             break;
1:                         }
1:                         else
1:                             return false; // malformed.
1:                         break;
1:                     case TWO:
1:                         // validate second byte of 2-byte char, 0x80-0xbf
1:                         if ((b & 0xc0) != 0x80)
1:                             return false;
1:                         state = State.START;
1:                         break;
1:                     case TWO_80:
1:                         if (b != (byte)0x80)
1:                             return false;
1:                         state = State.START;
1:                         break;
1:                     case THREE_a0bf:
1:                         if ((b & 0xe0) == 0x80)
1:                             return false;
1:                         state = State.THREE_80bf_1;
1:                         break;
1:                     case THREE_80bf_1:
1:                         // expecting 0x80-0xbf
1:                         if ((b & 0xc0) != 0x80)
1:                             return false;
1:                         state = State.START;
1:                         break;
1:                     case THREE_80bf_2:
1:                         // expecting 0x80-bf and then another of the same.
1:                         if ((b & 0xc0) != 0x80)
1:                             return false;
1:                         state = State.THREE_80bf_1;
1:                         break;
1:                     case FOUR_90bf:
1:                         // expecting 0x90-bf. 2nd byte of 4byte sequence. after that it should degrade to 80-bf,80-bf (like 3byte seq).
1:                         if ((b & 0x30) == 0)
1:                             return false;
1:                         state = State.THREE_80bf_2;
1:                         break;
1:                     case FOUR_80bf_3:
1:                         // expecting 0x80-bf 3 times. degenerates to THREE_80bf_2.
1:                         if ((b & 0xc0) != 0x80)
1:                             return false;
1:                         state = State.THREE_80bf_2;
1:                         break;
1:                     default:
1:                         return false; // invalid state.
1:                 }
1:             }
1:             // if state != start, we've got underflow. that's an error.
1:             return state == State.START;
1:         }
1:     }
1: 
0:     @Override
0:     public String getString(ByteBuffer bytes)
1:     {
0:         try
1:         {
0:             return ByteBufferUtil.string(bytes, UTF_8);
1:         }
0:         catch (CharacterCodingException e)
1:         {
0:             throw new MarshalException("Invalid ascii bytes " + ByteBufferUtil.bytesToHex(bytes));
1:         }
1:     }
1: 
0:     @Override
0:     public String toString(String value)
1:     {
0:         return value;
1:     }
1: 
0:     @Override
0:     public Class<String> getType()
1:     {
0:         return String.class;
1:     }
1: }
============================================================================