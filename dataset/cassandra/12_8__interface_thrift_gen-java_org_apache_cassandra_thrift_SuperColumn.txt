1:1f91e99: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
4:cba59a8:  *
1:1f91e99:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
3:04d5ec3:  */
1:542bd79: package org.apache.cassandra.thrift;
1:7b845a0: /*
1:7b845a0:  * 
1:7b845a0:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b845a0:  * or more contributor license agreements.  See the NOTICE file
1:7b845a0:  * distributed with this work for additional information
1:7b845a0:  * regarding copyright ownership.  The ASF licenses this file
1:7b845a0:  * to you under the Apache License, Version 2.0 (the
1:7b845a0:  * "License"); you may not use this file except in compliance
1:7b845a0:  * with the License.  You may obtain a copy of the License at
1:7b845a0:  * 
1:7b845a0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:7b845a0:  * 
1:7b845a0:  * Unless required by applicable law or agreed to in writing,
1:7b845a0:  * software distributed under the License is distributed on an
1:7b845a0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:7b845a0:  * KIND, either express or implied.  See the License for the
1:7b845a0:  * specific language governing permissions and limitations
1:7b845a0:  * under the License.
1:7b845a0:  * 
1:7b845a0:  */
1:7b845a0: 
1:cba59a8: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:1aeca2b: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:1f91e99: import java.util.List;
1:1f91e99: import java.util.ArrayList;
1:1f91e99: import java.util.Map;
1:1f91e99: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:1f91e99: import java.util.Set;
1:1f91e99: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:5e72fee: import java.util.Collections;
1:0f56a25: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:53895ad: import java.util.Arrays;
1:0f56a25: import org.slf4j.Logger;
1:0f56a25: import org.slf4j.LoggerFactory;
1:1f09fba: 
1:4e8691a: /**
1:4e8691a:  * A named list of columns.
1:4e8691a:  * @param name. see Column.name.
1:4e8691a:  * @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
1:4e8691a:  *                 Columns within a super column do not have to have matching structures (similarly named child columns).
1:cba59a8:  */
1:bffd9ea: public class SuperColumn implements org.apache.thrift.TBase<SuperColumn, SuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<SuperColumn> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SuperColumn");
1:ef293c1: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:5e72fee: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new SuperColumnStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new SuperColumnTupleSchemeFactory());
1:b153d45:   }
1:5e72fee: 
1:7c8c570:   public ByteBuffer name; // required
1:7c8c570:   public List<Column> columns; // required
1:5e72fee: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     NAME((short)1, "name"),
1:04d5ec3:     COLUMNS((short)2, "columns");
1:b153d45: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:b153d45: 
1:5e72fee:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:0f56a25:       }
1:5e72fee:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:1aeca2b:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // NAME
1:d849c69:           return NAME;
1:d849c69:         case 2: // COLUMNS
1:d849c69:           return COLUMNS;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:b153d45:     }
1:c8afd76: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
1:1f09fba:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:c8afd76:     }
1:c8afd76: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:c8afd76:     }
1:b43c785: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:04d5ec3: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:c8afd76:     }
1:04d5ec3: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
1:c8afd76:     }
1:04d5ec3: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:4ec9511:     }
1:4ec9511:   }
1:04d5ec3: 
1:0f56a25:   // isset id assignments
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SuperColumn.class, metaDataMap);
1:4ec9511:   }
1:04d5ec3: 
1:f2da00f:   public SuperColumn() {
4:04d5ec3:   }
1:04d5ec3: 
1:f2da00f:   public SuperColumn(
1:e7a385a:     ByteBuffer name,
1:f2da00f:     List<Column> columns)
2:b153d45:   {
1:1f91e99:     this();
1:1f91e99:     this.name = name;
1:1f91e99:     this.columns = columns;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   /**
1:5e72fee:    * Performs a deep copy on <i>other</i>.
1:5e72fee:    */
1:f2da00f:   public SuperColumn(SuperColumn other) {
1:ef293c1:     if (other.isSetName()) {
1:4ec9511:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
1:e7a385a: ;
1:5e72fee:     }
1:ef293c1:     if (other.isSetColumns()) {
1:bffd9ea:       List<Column> __this__columns = new ArrayList<Column>(other.columns.size());
1:f2da00f:       for (Column other_element : other.columns) {
1:f2da00f:         __this__columns.add(new Column(other_element));
1:5e72fee:       }
1:5e72fee:       this.columns = __this__columns;
1:5e72fee:     }
1:5e72fee:   }
1:5e72fee: 
1:53895ad:   public SuperColumn deepCopy() {
1:53895ad:     return new SuperColumn(this);
1:53895ad:   }
1:53895ad: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.name = null;
1:e7a385a:     this.columns = null;
1:5e72fee:   }
1:5e72fee: 
1:986cee6:   public byte[] getName() {
1:4ec9511:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:4ec9511:     return name == null ? null : name.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForName() {
1:e7a385a:     return name;
1:5e72fee:   }
1:5e72fee: 
1:8455ebf:   public SuperColumn setName(byte[] name) {
1:4ec9511:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public SuperColumn setName(ByteBuffer name) {
1:5e72fee:     this.name = name;
1:8455ebf:     return this;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void unsetName() {
1:ef293c1:     this.name = null;
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:5e72fee:   public boolean isSetName() {
1:ef293c1:     return this.name != null;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void setNameIsSet(boolean value) {
1:ef293c1:     if (!value) {
1:ef293c1:       this.name = null;
1:ef293c1:     }
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public int getColumnsSize() {
1:5e72fee:     return (this.columns == null) ? 0 : this.columns.size();
1:5e72fee:   }
1:5e72fee: 
1:f2da00f:   public java.util.Iterator<Column> getColumnsIterator() {
1:5e72fee:     return (this.columns == null) ? null : this.columns.iterator();
1:5e72fee:   }
1:5e72fee: 
1:f2da00f:   public void addToColumns(Column elem) {
1:5e72fee:     if (this.columns == null) {
1:f2da00f:       this.columns = new ArrayList<Column>();
1:5e72fee:     }
1:5e72fee:     this.columns.add(elem);
1:5e72fee:   }
1:04d5ec3: 
1:f2da00f:   public List<Column> getColumns() {
1:5e72fee:     return this.columns;
1:5e72fee:   }
1:5e72fee: 
1:8455ebf:   public SuperColumn setColumns(List<Column> columns) {
1:5e72fee:     this.columns = columns;
1:8455ebf:     return this;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void unsetColumns() {
1:5e72fee:     this.columns = null;
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
1:5e72fee:   public boolean isSetColumns() {
1:ef293c1:     return this.columns != null;
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   public void setColumnsIsSet(boolean value) {
1:ef293c1:     if (!value) {
1:ef293c1:       this.columns = null;
1:ef293c1:     }
1:5e72fee:   }
1:5e72fee: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
1:5e72fee:     case NAME:
1:ef293c1:       if (value == null) {
1:ef293c1:         unsetName();
1:ef293c1:       } else {
1:e7a385a:         setName((ByteBuffer)value);
1:ef293c1:       }
1:5e72fee:       break;
1:5e72fee: 
1:5e72fee:     case COLUMNS:
1:ef293c1:       if (value == null) {
1:ef293c1:         unsetColumns();
1:2b69c40:       } else {
1:f2da00f:         setColumns((List<Column>)value);
1:2b69c40:       }
1:2b69c40:       break;
1:5e72fee: 
1:ef293c1:     }
1:ef293c1:   }
1:5e72fee: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:5e72fee:     case NAME:
1:5e72fee:       return getName();
1:5e72fee: 
1:5e72fee:     case COLUMNS:
1:5e72fee:       return getColumns();
1:5e72fee: 
1:5e72fee:     }
1:04d5ec3:     throw new IllegalStateException();
1:5e72fee:   }
1:5e72fee: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:5e72fee:     case NAME:
1:ef293c1:       return isSetName();
1:5e72fee:     case COLUMNS:
1:ef293c1:       return isSetColumns();
1:5e72fee:     }
1:04d5ec3:     throw new IllegalStateException();
1:5e72fee:   }
1:5e72fee: 
1:5e72fee:   @Override
1:1f91e99:   public boolean equals(Object that) {
1:1f91e99:     if (that == null)
1:1f91e99:       return false;
1:f2da00f:     if (that instanceof SuperColumn)
1:f2da00f:       return this.equals((SuperColumn)that);
1:1f91e99:     return false;
1:5e72fee:   }
1:b153d45: 
1:f2da00f:   public boolean equals(SuperColumn that) {
1:1f91e99:     if (that == null)
1:1f91e99:       return false;
1:b153d45: 
1:ef293c1:     boolean this_present_name = true && this.isSetName();
1:ef293c1:     boolean that_present_name = true && that.isSetName();
1:1f91e99:     if (this_present_name || that_present_name) {
1:1f91e99:       if (!(this_present_name && that_present_name))
1:1f91e99:         return false;
1:e7a385a:       if (!this.name.equals(that.name))
1:1f91e99:         return false;
1:b153d45:     }
1:04d5ec3: 
1:ef293c1:     boolean this_present_columns = true && this.isSetColumns();
1:ef293c1:     boolean that_present_columns = true && that.isSetColumns();
1:1f91e99:     if (this_present_columns || that_present_columns) {
1:1f91e99:       if (!(this_present_columns && that_present_columns))
1:1f91e99:         return false;
1:1f91e99:       if (!this.columns.equals(that.columns))
1:1f91e99:         return false;
1:04d5ec3:     }
1:04d5ec3: 
1:1f91e99:     return true;
1:04d5ec3:   }
1:04d5ec3: 
1:5e72fee:   @Override
1:1f91e99:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_name = true && (isSetName());
1:d966ed0:     builder.append(present_name);
1:d966ed0:     if (present_name)
1:d966ed0:       builder.append(name);
1:d966ed0: 
1:d966ed0:     boolean present_columns = true && (isSetColumns());
1:d966ed0:     builder.append(present_columns);
1:d966ed0:     if (present_columns)
1:d966ed0:       builder.append(columns);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:04d5ec3:   }
1:04d5ec3: 
1:bffd9ea:   @Override
1:0f56a25:   public int compareTo(SuperColumn other) {
1:0f56a25:     if (!getClass().equals(other.getClass())) {
1:0f56a25:       return getClass().getName().compareTo(other.getClass().getName());
1:0f56a25:     }
1:0f56a25: 
1:0f56a25:     int lastComparison = 0;
1:0f56a25: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
3:0f56a25:     if (lastComparison != 0) {
3:0f56a25:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:0f56a25:     }
1:e7a385a:     if (isSetColumns()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:0f56a25:       }
1:0f56a25:     }
1:0f56a25:     return 0;
1:0f56a25:   }
1:0f56a25: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:04d5ec3:   }
2:04d5ec3: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:04d5ec3:   }
1:04d5ec3: 
1:5e72fee:   @Override
1:1f91e99:   public String toString() {
1:f2da00f:     StringBuilder sb = new StringBuilder("SuperColumn(");
1:5e72fee:     boolean first = true;
1:5e72fee: 
1:1f91e99:     sb.append("name:");
1:ef293c1:     if (this.name == null) {
1:ef293c1:       sb.append("null");
1:ef293c1:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
1:986cee6:     }
1:5e72fee:     first = false;
2:5e72fee:     if (!first) sb.append(", ");
1:5e72fee:     sb.append("columns:");
1:ef293c1:     if (this.columns == null) {
1:ef293c1:       sb.append("null");
1:ef293c1:     } else {
1:ef293c1:       sb.append(this.columns);
1:ef293c1:     }
1:5e72fee:     first = false;
1:1f91e99:     sb.append(")");
1:1f91e99:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:5e72fee:     // check for required fields
1:ac921c4:     if (name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:ac921c4:     }
1:ac921c4:     if (columns == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:ac921c4:     }
1:b153d45:     // check for sub-struct validity
1:0f56a25:   }
1:4ec9511: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class SuperColumnStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public SuperColumnStandardScheme getScheme() {
1:b153d45:       return new SuperColumnStandardScheme();
1:0f56a25:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SuperColumnStandardScheme extends StandardScheme<SuperColumn> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, SuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:2b69c40:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:5e72fee:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.name = iprot.readBinary();
1:b153d45:               struct.setNameIsSet(true);
1:ef293c1:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
3:b153d45:             break;
1:2b69c40:           case 2: // COLUMNS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:b153d45:               {
1:b153d45:                 org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
1:b153d45:                 struct.columns = new ArrayList<Column>(_list0.size);
1:2b69c40:                 for (int _i1 = 0; _i1 < _list0.size; ++_i1)
1:b153d45:                 {
1:bffd9ea:                   Column _elem2;
1:2b69c40:                   _elem2 = new Column();
1:2b69c40:                   _elem2.read(iprot);
1:b153d45:                   struct.columns.add(_elem2);
1:b153d45:                 }
1:2b69c40:                 iprot.readListEnd();
1:2b69c40:               }
1:b153d45:               struct.setColumnsIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:2b69c40:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:5e72fee: 
1:5e72fee:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:5e72fee: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, SuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:5e72fee: 
1:5e72fee:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name != null) {
1:5e72fee:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.name);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.columns != null) {
1:5e72fee:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:53895ad:         {
1:b153d45:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
1:b153d45:           for (Column _iter3 : struct.columns)
1:b153d45:           {
1:0fc2d87:             _iter3.write(oprot);
1:b153d45:           }
1:b153d45:           oprot.writeListEnd();
1:b153d45:         }
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:5e72fee:     }
1:5e72fee: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SuperColumnTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public SuperColumnTupleScheme getScheme() {
1:b153d45:       return new SuperColumnTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SuperColumnTupleScheme extends TupleScheme<SuperColumn> {
1:b153d45: 
1:5e72fee:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, SuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.name);
1:b153d45:       {
1:b153d45:         oprot.writeI32(struct.columns.size());
1:b153d45:         for (Column _iter4 : struct.columns)
1:b153d45:         {
1:b153d45:           _iter4.write(oprot);
1:b153d45:         }
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
2:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, SuperColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.name = iprot.readBinary();
1:b153d45:       struct.setNameIsSet(true);
1:b153d45:       {
1:b153d45:         org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:b153d45:         struct.columns = new ArrayList<Column>(_list5.size);
1:b153d45:         for (int _i6 = 0; _i6 < _list5.size; ++_i6)
1:b153d45:         {
1:bffd9ea:           Column _elem7;
1:b153d45:           _elem7 = new Column();
1:b153d45:           _elem7.read(iprot);
1:b153d45:           struct.columns.add(_elem7);
1:b153d45:         }
1:b153d45:       }
1:b153d45:       struct.setColumnsIsSet(true);
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class SuperColumn implements org.apache.thrift.TBase<SuperColumn, SuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<SuperColumn> {
/////////////////////////////////////////////////////////////////////////
1:       List<Column> __this__columns = new ArrayList<Column>(other.columns.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
/////////////////////////////////////////////////////////////////////////
1:                   Column _elem2;
/////////////////////////////////////////////////////////////////////////
1:           Column _elem7;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   Column _elem2; // required
/////////////////////////////////////////////////////////////////////////
0:           Column _elem7; // required
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                   Column _elem2; // optional
/////////////////////////////////////////////////////////////////////////
0:           Column _elem7; // optional
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer name;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer name,
/////////////////////////////////////////////////////////////////////////
0:       this.name = TBaseHelper.copyBinary(other.name);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     this.columns = null;
0:     setName(TBaseHelper.rightSize(name));
0:     return name.array();
1:   }
1: 
0:   public ByteBuffer BufferForName() {
1:     return name;
0:     setName(ByteBuffer.wrap(name));
1:     return this;
1:   }
1: 
1:   public SuperColumn setName(ByteBuffer name) {
/////////////////////////////////////////////////////////////////////////
1:         setName((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.name.equals(that.name))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetName()) {
0:       lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumns()) {
0:       lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.name, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_columns = true && (isSetColumns());
1:     builder.append(present_columns);
1:     if (present_columns)
1:       builder.append(columns);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class SuperColumn implements TBase<SuperColumn, SuperColumn._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // COLUMNS
1:           return COLUMNS;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     tmpMap.put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(this.columns, typedOther.columns);
commit:7b845a0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
0:     if (isSetColumns()) {      lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // NAME
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // COLUMNS
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list0 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list0.size);
1:               for (int _i1 = 0; _i1 < _list0.size; ++_i1)
0:                 Column _elem2;
1:                 _elem2 = new Column();
1:                 _elem2.read(iprot);
0:                 this.columns.add(_elem2);
1:               iprot.readListEnd();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:53895ad
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   public static final int NAME = 1;
/////////////////////////////////////////////////////////////////////////
1:   public SuperColumn deepCopy() {
1:     return new SuperColumn(this);
1:   }
1: 
0:   @Deprecated
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter3 : this.columns)
1:         {
commit:ac921c4
/////////////////////////////////////////////////////////////////////////
0:     put(NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     put(COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
1:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (columns == null) {
0:       throw new TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
commit:59ec410
/////////////////////////////////////////////////////////////////////////
commit:0f56a25
/////////////////////////////////////////////////////////////////////////
1: import java.util.BitSet;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: public class SuperColumn implements TBase, java.io.Serializable, Cloneable, Comparable<SuperColumn> {
/////////////////////////////////////////////////////////////////////////
1:   // isset id assignments
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(SuperColumn other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     SuperColumn typedOther = (SuperColumn)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetColumns()).compareTo(isSetColumns());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
0:     if (columns == null) {
0:       throw new TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
commit:0fc2d87
/////////////////////////////////////////////////////////////////////////
0:               TList _list0 = iprot.readListBegin();
0:               this.columns = new ArrayList<Column>(_list0.size);
0:               for (int _i1 = 0; _i1 < _list0.size; ++_i1)
0:                 Column _elem2;
0:                 _elem2 = new Column();
0:                 _elem2.read(iprot);
0:                 this.columns.add(_elem2);
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter3 : this.columns)        {
1:           _iter3.write(oprot);
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:986cee6
/////////////////////////////////////////////////////////////////////////
0:   public byte[] name;
/////////////////////////////////////////////////////////////////////////
0:     byte[] name,
/////////////////////////////////////////////////////////////////////////
0:       this.name = new byte[other.name.length];
0:       System.arraycopy(other.name, 0, name, 0, other.name.length);
/////////////////////////////////////////////////////////////////////////
1:   public byte[] getName() {
0:   public void setName(byte[] name) {
/////////////////////////////////////////////////////////////////////////
0:         setName((byte[])value);
/////////////////////////////////////////////////////////////////////////
0:       if (!java.util.Arrays.equals(this.name, that.name))
/////////////////////////////////////////////////////////////////////////
0:             this.name = iprot.readBinary();
/////////////////////////////////////////////////////////////////////////
0:       oprot.writeBinary(this.name);
/////////////////////////////////////////////////////////////////////////
0:         int __name_size = Math.min(this.name.length, 128);
0:         for (int i = 0; i < __name_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.name[i]).length() > 1 ? Integer.toHexString(this.name[i]).substring(Integer.toHexString(this.name[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.name[i]).toUpperCase());
1:         }
0:         if (this.name.length > 128) sb.append(" ...");
commit:f2da00f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class SuperColumn implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("SuperColumn");
0:   public List<Column> columns;
/////////////////////////////////////////////////////////////////////////
0:             new StructMetaData(TType.STRUCT, Column.class))));
0:     FieldMetaData.addStructMetaDataMap(SuperColumn.class, metaDataMap);
1:   public SuperColumn() {
1:   public SuperColumn(
1:     List<Column> columns)
/////////////////////////////////////////////////////////////////////////
1:   public SuperColumn(SuperColumn other) {
0:       List<Column> __this__columns = new ArrayList<Column>();
1:       for (Column other_element : other.columns) {
1:         __this__columns.add(new Column(other_element));
0:   public SuperColumn clone() {
0:     return new SuperColumn(this);
/////////////////////////////////////////////////////////////////////////
1:   public java.util.Iterator<Column> getColumnsIterator() {
1:   public void addToColumns(Column elem) {
1:       this.columns = new ArrayList<Column>();
1:   public List<Column> getColumns() {
0:   public void setColumns(List<Column> columns) {
/////////////////////////////////////////////////////////////////////////
1:         setColumns((List<Column>)value);
/////////////////////////////////////////////////////////////////////////
1:     if (that instanceof SuperColumn)
1:       return this.equals((SuperColumn)that);
1:   public boolean equals(SuperColumn that) {
/////////////////////////////////////////////////////////////////////////
0:               this.columns = new ArrayList<Column>(_list9.size);
0:                 Column _elem11;
0:                 _elem11 = new Column();
/////////////////////////////////////////////////////////////////////////
0:         for (Column _iter12 : this.columns)        {
/////////////////////////////////////////////////////////////////////////
1:     StringBuilder sb = new StringBuilder("SuperColumn(");
commit:1f09fba
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:6b5e940
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.Logger;
commit:551a1a0
commit:ef293c1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetName()) {
1:     if (other.isSetColumns()) {
/////////////////////////////////////////////////////////////////////////
1:     this.name = null;
1:     return this.name != null;
1:     if (!value) {
1:       this.name = null;
1:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     return this.columns != null;
1:     if (!value) {
1:       this.columns = null;
1:     }
1:       if (value == null) {
1:         unsetName();
1:       } else {
0:         setName((String)value);
1:       }
1:       if (value == null) {
1:         unsetColumns();
1:       } else {
0:         setColumns((List<column_t>)value);
1:       }
/////////////////////////////////////////////////////////////////////////
1:       return isSetName();
1:       return isSetColumns();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_columns = true && this.isSetColumns();
1:     boolean that_present_columns = true && that.isSetColumns();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (this.name == null) {
1:       sb.append("null");
1:     } else {
0:       sb.append(this.name);
1:     }
1:     if (this.columns == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.columns);
1:     }
commit:7b250fa
/////////////////////////////////////////////////////////////////////////
0:               TList _list9 = iprot.readListBegin();
0:               this.columns = new ArrayList<column_t>(_list9.size);
0:               for (int _i10 = 0; _i10 < _list9.size; ++_i10)
0:                 column_t _elem11;
0:                 _elem11 = new column_t();
0:                 _elem11.read(iprot);
0:                 this.columns.add(_elem11);
/////////////////////////////////////////////////////////////////////////
0:         for (column_t _iter12 : this.columns)        {
0:           _iter12.write(oprot);
commit:5e72fee
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
0: import org.apache.thrift.transport.*;
0: public class superColumn_t implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("superColumn_t");
0:   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
0:   private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short)2);
1: 
0:   public static final int NAME = 1;
0:   public static final int COLUMNS = 2;
0:   private final Isset __isset = new Isset();
0:   private static final class Isset implements java.io.Serializable {
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(COLUMNS, new FieldMetaData("columns", TFieldRequirementType.DEFAULT, 
0:         new ListMetaData(TType.LIST, 
0:             new StructMetaData(TType.STRUCT, column_t.class))));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(superColumn_t.class, metaDataMap);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:     this.__isset.name = (name != null);
0:     this.__isset.columns = (columns != null);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
0:   public superColumn_t(superColumn_t other) {
0:     __isset.name = other.__isset.name;
0:     if (other.name != null) {
0:       this.name = other.name;
1:     }
0:     __isset.columns = other.__isset.columns;
0:     if (other.columns != null) {
0:       List<column_t> __this__columns = new ArrayList<column_t>();
0:       for (column_t other_element : other.columns) {
0:         __this__columns.add(new column_t(other_element));
1:       }
1:       this.columns = __this__columns;
1:     }
1:   }
1: 
1:   @Override
0:   public superColumn_t clone() {
0:     return new superColumn_t(this);
1:   }
1: 
0:   public String getName() {
0:     return this.name;
1:   }
1: 
0:   public void setName(String name) {
1:     this.name = name;
0:     this.__isset.name = (name != null);
1:   }
1: 
1:   public void unsetName() {
0:     this.__isset.name = false;
1:   }
1: 
0:   // Returns true if field name is set (has been asigned a value) and false otherwise
1:   public boolean isSetName() {
0:     return this.__isset.name;
1:   }
1: 
1:   public void setNameIsSet(boolean value) {
0:     this.__isset.name = value;
1:   }
1: 
1:   public int getColumnsSize() {
1:     return (this.columns == null) ? 0 : this.columns.size();
1:   }
1: 
0:   public java.util.Iterator<column_t> getColumnsIterator() {
1:     return (this.columns == null) ? null : this.columns.iterator();
1:   }
1: 
0:   public void addToColumns(column_t elem) {
1:     if (this.columns == null) {
0:       this.columns = new ArrayList<column_t>();
1:     }
1:     this.columns.add(elem);
0:   public List<column_t> getColumns() {
1:     return this.columns;
1:   }
1: 
0:   public void setColumns(List<column_t> columns) {
1:     this.columns = columns;
0:     this.__isset.columns = (columns != null);
1:   }
1: 
1:   public void unsetColumns() {
1:     this.columns = null;
0:     this.__isset.columns = false;
1:   }
1: 
0:   // Returns true if field columns is set (has been asigned a value) and false otherwise
1:   public boolean isSetColumns() {
0:     return this.__isset.columns;
1:   }
1: 
1:   public void setColumnsIsSet(boolean value) {
0:     this.__isset.columns = value;
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case NAME:
0:       setName((String)value);
1:       break;
1: 
1:     case COLUMNS:
0:       setColumns((List<column_t>)value);
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case NAME:
1:       return getName();
1: 
1:     case COLUMNS:
1:       return getColumns();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case NAME:
0:       return this.__isset.name;
1:     case COLUMNS:
0:       return this.__isset.columns;
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
/////////////////////////////////////////////////////////////////////////
1:   @Override
/////////////////////////////////////////////////////////////////////////
0:         case NAME:
/////////////////////////////////////////////////////////////////////////
0:         case COLUMNS:
0:                 column_t _elem20;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
1:       oprot.writeFieldBegin(NAME_FIELD_DESC);
1:       oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     boolean first = true;
1: 
1:     if (!first) sb.append(", ");
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("columns:");
1:     first = false;
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new SuperColumnStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new SuperColumnTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class SuperColumnStandardSchemeFactory implements SchemeFactory {
1:     public SuperColumnStandardScheme getScheme() {
1:       return new SuperColumnStandardScheme();
1:     }
1:   }
1: 
1:   private static class SuperColumnStandardScheme extends StandardScheme<SuperColumn> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, SuperColumn struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readBinary();
1:               struct.setNameIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 2: // COLUMNS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
1:                 struct.columns = new ArrayList<Column>(_list0.size);
0:                 for (int _i1 = 0; _i1 < _list0.size; ++_i1)
1:                 {
0:                   Column _elem2; // required
0:                   _elem2 = new Column();
0:                   _elem2.read(iprot);
1:                   struct.columns.add(_elem2);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setColumnsIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, SuperColumn struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
0:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeBinary(struct.name);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.columns != null) {
0:         oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
1:         {
1:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
1:           for (Column _iter3 : struct.columns)
1:           {
0:             _iter3.write(oprot);
1:           }
1:           oprot.writeListEnd();
1:         }
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class SuperColumnTupleSchemeFactory implements SchemeFactory {
1:     public SuperColumnTupleScheme getScheme() {
1:       return new SuperColumnTupleScheme();
1:     }
1:   }
1: 
1:   private static class SuperColumnTupleScheme extends TupleScheme<SuperColumn> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, SuperColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.name);
1:       {
1:         oprot.writeI32(struct.columns.size());
1:         for (Column _iter4 : struct.columns)
1:         {
1:           _iter4.write(oprot);
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, SuperColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readBinary();
1:       struct.setNameIsSet(true);
1:       {
1:         org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:         struct.columns = new ArrayList<Column>(_list5.size);
1:         for (int _i6 = 0; _i6 < _list5.size; ++_i6)
1:         {
0:           Column _elem7; // required
1:           _elem7 = new Column();
1:           _elem7.read(iprot);
1:           struct.columns.add(_elem7);
1:         }
1:       }
1:       struct.setColumnsIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer name; // required
1:   public List<Column> columns; // required
/////////////////////////////////////////////////////////////////////////
0:                 Column _elem2; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class SuperColumn implements org.apache.thrift.TBase<SuperColumn, SuperColumn._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SuperColumn");
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SuperColumn.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
/////////////////////////////////////////////////////////////////////////
1:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:     return name == null ? null : name.array();
1:   public ByteBuffer bufferForName() {
1:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field columns is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
1:     }
1:   }
1: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
commit:7cd412b
/////////////////////////////////////////////////////////////////////////
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class SuperColumn implements TBase<SuperColumn._Fields>, java.io.Serializable, Cloneable, Comparable<SuperColumn> {
1: 
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     COLUMNS((short)2, "columns");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
0:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:     put(_Fields.COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, 
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field name is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field columns is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case NAME:
0:             if (field.type == TType.STRING) {
0:               this.name = iprot.readBinary();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             break;
0:           case COLUMNS:
0:             if (field.type == TType.LIST) {
0:               {
0:                 TList _list0 = iprot.readListBegin();
0:                 this.columns = new ArrayList<Column>(_list0.size);
0:                 for (int _i1 = 0; _i1 < _list0.size; ++_i1)
0:                 {
0:                   Column _elem2;
0:                   _elem2 = new Column();
0:                   _elem2.read(iprot);
0:                   this.columns.add(_elem2);
0:                 }
0:                 iprot.readListEnd();
0:               }
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A named list of columns.
1:  * @param name. see Column.name.
1:  * @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
1:  *                 Columns within a super column do not have to have matching structures (similarly named child columns).
0:  */
/////////////////////////////////////////////////////////////////////////
0:   public int getColumnsSize() {
0:     return (this.columns == null) ? 0 : this.columns.size();
0:   }
0: 
0:   public java.util.Iterator<Column> getColumnsIterator() {
0:     return (this.columns == null) ? null : this.columns.iterator();
0:   }
0: 
0:   public void addToColumns(Column elem) {
0:     if (this.columns == null) {
0:       this.columns = new ArrayList<Column>();
0:     }
0:     this.columns.add(elem);
0:   }
0: 
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
1:   public SuperColumn setName(byte[] name) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public SuperColumn setColumns(List<Column> columns) {
1:     return this;
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
0:  */
0: package org.apache.cassandra.service;
0: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
0: import com.facebook.thrift.*;
0: 
0: import com.facebook.thrift.protocol.*;
0: import com.facebook.thrift.transport.*;
0: 
0: public class superColumn_t implements TBase, java.io.Serializable {
0:   public String name;
0:   public List<column_t> columns;
0: 
0:   public final Isset __isset = new Isset();
0:   public static final class Isset implements java.io.Serializable {
0:     public boolean name = false;
0:     public boolean columns = false;
0:   }
0: 
0:   public superColumn_t() {
0:   }
0: 
0:   public superColumn_t(
0:     String name,
0:     List<column_t> columns)
0:   {
1:     this();
1:     this.name = name;
0:     this.__isset.name = true;
1:     this.columns = columns;
0:     this.__isset.columns = true;
0:   }
0: 
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
0:     if (that instanceof superColumn_t)
0:       return this.equals((superColumn_t)that);
1:     return false;
0:   }
0: 
0:   public boolean equals(superColumn_t that) {
1:     if (that == null)
1:       return false;
0: 
0:     boolean this_present_name = true && (this.name != null);
0:     boolean that_present_name = true && (that.name != null);
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
1:         return false;
0:       if (!this.name.equals(that.name))
1:         return false;
0:     }
0: 
0:     boolean this_present_columns = true && (this.columns != null);
0:     boolean that_present_columns = true && (that.columns != null);
1:     if (this_present_columns || that_present_columns) {
1:       if (!(this_present_columns && that_present_columns))
1:         return false;
1:       if (!this.columns.equals(that.columns))
1:         return false;
0:     }
0: 
1:     return true;
0:   }
0: 
1:   public int hashCode() {
0:     return 0;
0:   }
0: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
0:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
0:         break;
0:       }
0:       switch (field.id)
0:       {
0:         case 1:
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readString();
0:             this.__isset.name = true;
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         case 2:
0:           if (field.type == TType.LIST) {
0:             {
0:               TList _list18 = iprot.readListBegin();
0:               this.columns = new ArrayList<column_t>(_list18.size);
0:               for (int _i19 = 0; _i19 < _list18.size; ++_i19)
0:               {
0:                 column_t _elem20 = new column_t();
0:                 _elem20 = new column_t();
0:                 _elem20.read(iprot);
0:                 this.columns.add(_elem20);
0:               }
0:               iprot.readListEnd();
0:             }
0:             this.__isset.columns = true;
0:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
0:           break;
0:       }
0:       iprot.readFieldEnd();
0:     }
0:     iprot.readStructEnd();
0:   }
0: 
0:   public void write(TProtocol oprot) throws TException {
0:     TStruct struct = new TStruct("superColumn_t");
0:     oprot.writeStructBegin(struct);
0:     TField field = new TField();
0:     if (this.name != null) {
0:       field.name = "name";
0:       field.type = TType.STRING;
0:       field.id = 1;
0:       oprot.writeFieldBegin(field);
0:       oprot.writeString(this.name);
0:       oprot.writeFieldEnd();
0:     }
0:     if (this.columns != null) {
0:       field.name = "columns";
0:       field.type = TType.LIST;
0:       field.id = 2;
0:       oprot.writeFieldBegin(field);
0:       {
0:         oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
0:         for (column_t _iter21 : this.columns)        {
0:           _iter21.write(oprot);
0:         }
0:         oprot.writeListEnd();
0:       }
0:       oprot.writeFieldEnd();
0:     }
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
0:   }
0: 
1:   public String toString() {
0:     StringBuilder sb = new StringBuilder("superColumn_t(");
1:     sb.append("name:");
0:     sb.append(this.name);
0:     sb.append(",columns:");
0:     sb.append(this.columns);
1:     sb.append(")");
1:     return sb.toString();
0:   }
0: 
0: }
0: 
============================================================================