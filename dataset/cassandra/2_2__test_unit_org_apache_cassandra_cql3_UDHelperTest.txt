1:4df4f79: /*
1:4df4f79:  * Licensed to the Apache Software Foundation (ASF) under one
1:4df4f79:  * or more contributor license agreements.  See the NOTICE file
1:4df4f79:  * distributed with this work for additional information
1:4df4f79:  * regarding copyright ownership.  The ASF licenses this file
1:4df4f79:  * to you under the Apache License, Version 2.0 (the
1:4df4f79:  * "License"); you may not use this file except in compliance
1:4df4f79:  * with the License.  You may obtain a copy of the License at
1:4df4f79:  *
1:4df4f79:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4df4f79:  *
1:4df4f79:  * Unless required by applicable law or agreed to in writing, software
1:4df4f79:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4df4f79:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4df4f79:  * See the License for the specific language governing permissions and
1:4df4f79:  * limitations under the License.
1:4df4f79:  */
1:4df4f79: 
1:4df4f79: package org.apache.cassandra.cql3;
1:4df4f79: 
1:4df4f79: import java.nio.ByteBuffer;
1:4df4f79: 
1:4df4f79: import org.junit.Assert;
1:4df4f79: import org.junit.Test;
1:4df4f79: 
1:4df4f79: import org.apache.cassandra.cql3.functions.UDHelper;
1:4df4f79: import org.apache.cassandra.db.marshal.AbstractType;
1:4df4f79: import org.apache.cassandra.db.marshal.AsciiType;
1:4df4f79: import org.apache.cassandra.db.marshal.BooleanType;
1:4df4f79: import org.apache.cassandra.db.marshal.ByteType;
1:4df4f79: import org.apache.cassandra.db.marshal.BytesType;
1:4df4f79: import org.apache.cassandra.db.marshal.CounterColumnType;
1:4df4f79: import org.apache.cassandra.db.marshal.DateType;
1:4df4f79: import org.apache.cassandra.db.marshal.DecimalType;
1:4df4f79: import org.apache.cassandra.db.marshal.DoubleType;
1:4df4f79: import org.apache.cassandra.db.marshal.FloatType;
1:4df4f79: import org.apache.cassandra.db.marshal.InetAddressType;
1:4df4f79: import org.apache.cassandra.db.marshal.Int32Type;
1:4df4f79: import org.apache.cassandra.db.marshal.IntegerType;
1:4df4f79: import org.apache.cassandra.db.marshal.LongType;
1:4df4f79: import org.apache.cassandra.db.marshal.ReversedType;
1:4df4f79: import org.apache.cassandra.db.marshal.ShortType;
1:4df4f79: import org.apache.cassandra.db.marshal.SimpleDateType;
1:4df4f79: import org.apache.cassandra.db.marshal.TimeType;
1:4df4f79: import org.apache.cassandra.db.marshal.TimeUUIDType;
1:4df4f79: import org.apache.cassandra.db.marshal.TimestampType;
1:4df4f79: import org.apache.cassandra.db.marshal.UTF8Type;
1:4df4f79: import org.apache.cassandra.db.marshal.UUIDType;
1:4df4f79: import org.apache.cassandra.serializers.MarshalException;
1:4df4f79: import org.apache.cassandra.serializers.TypeSerializer;
1:4df4f79: import org.apache.cassandra.utils.ByteBufferUtil;
1:4df4f79: 
1:4df4f79: public class UDHelperTest
1:4df4f79: {
1:4df4f79:     static class UFTestCustomType extends AbstractType<String>
1:4df4f79:     {
1:07594ee:         protected UFTestCustomType()
1:07594ee:         {
1:07594ee:             super(ComparisonType.CUSTOM);
1:07594ee:         }
1:4df4f79: 
1:4df4f79:         public ByteBuffer fromString(String source) throws MarshalException
1:4df4f79:         {
1:4df4f79:             return ByteBuffer.wrap(source.getBytes());
1:4df4f79:         }
1:4df4f79: 
1:4df4f79:         public Term fromJSONObject(Object parsed) throws MarshalException
1:4df4f79:         {
1:4df4f79:             throw new UnsupportedOperationException();
1:4df4f79:         }
1:4df4f79: 
1:4df4f79:         public TypeSerializer<String> getSerializer()
1:4df4f79:         {
1:4df4f79:             return UTF8Type.instance.getSerializer();
1:4df4f79:         }
1:4df4f79: 
1:07594ee:         public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:4df4f79:         {
1:4df4f79:             return o1.compareTo(o2);
1:4df4f79:         }
1:4df4f79:     }
1:4df4f79: 
1:4df4f79:     @Test
1:4df4f79:     public void testEmptyVariableLengthTypes()
1:4df4f79:     {
1:4df4f79:         AbstractType<?>[] types = new AbstractType<?>[]{
1:4df4f79:                                                        AsciiType.instance,
1:4df4f79:                                                        BytesType.instance,
1:4df4f79:                                                        UTF8Type.instance,
1:4df4f79:                                                        new UFTestCustomType()
1:4df4f79:         };
1:4df4f79: 
1:4df4f79:         for (AbstractType<?> type : types)
1:4df4f79:         {
1:4df4f79:             Assert.assertFalse("type " + type.getClass().getName(),
1:4df4f79:                                UDHelper.isNullOrEmpty(type, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:4df4f79:         }
1:4df4f79:     }
1:4df4f79: 
1:4df4f79:     @Test
1:4df4f79:     public void testNonEmptyPrimitiveTypes()
1:4df4f79:     {
1:4df4f79:         AbstractType<?>[] types = new AbstractType<?>[]{
1:4df4f79:                                                        TimeType.instance,
1:4df4f79:                                                        SimpleDateType.instance,
1:4df4f79:                                                        ByteType.instance,
1:4df4f79:                                                        ShortType.instance
1:4df4f79:         };
1:4df4f79: 
1:4df4f79:         for (AbstractType<?> type : types)
1:4df4f79:         {
1:4df4f79:             try
1:4df4f79:             {
1:4df4f79:                 type.getSerializer().validate(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:4df4f79:                 Assert.fail(type.getClass().getSimpleName());
1:4df4f79:             }
1:4df4f79:             catch (MarshalException e)
1:4df4f79:             {
1:4df4f79:                 //
1:4df4f79:             }
1:4df4f79:         }
1:4df4f79:     }
1:4df4f79: 
1:4df4f79:     @Test
1:4df4f79:     public void testEmptiableTypes()
1:4df4f79:     {
1:4df4f79:         AbstractType<?>[] types = new AbstractType<?>[]{
1:4df4f79:                                                        BooleanType.instance,
1:4df4f79:                                                        CounterColumnType.instance,
1:4df4f79:                                                        DateType.instance,
1:4df4f79:                                                        DecimalType.instance,
1:4df4f79:                                                        DoubleType.instance,
1:4df4f79:                                                        FloatType.instance,
1:4df4f79:                                                        InetAddressType.instance,
1:4df4f79:                                                        Int32Type.instance,
1:4df4f79:                                                        IntegerType.instance,
1:4df4f79:                                                        LongType.instance,
1:4df4f79:                                                        TimestampType.instance,
1:4df4f79:                                                        TimeUUIDType.instance,
1:4df4f79:                                                        UUIDType.instance
1:4df4f79:         };
1:4df4f79: 
1:4df4f79:         for (AbstractType<?> type : types)
1:4df4f79:         {
1:4df4f79:             Assert.assertTrue(type.getClass().getSimpleName(), UDHelper.isNullOrEmpty(type, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:4df4f79:             Assert.assertTrue("reversed " + type.getClass().getSimpleName(),
1:4df4f79:                               UDHelper.isNullOrEmpty(ReversedType.getInstance(type), ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:4df4f79:         }
1:4df4f79:     }
1:4df4f79: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         protected UFTestCustomType()
1:         {
1:             super(ComparisonType.CUSTOM);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:4df4f79
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.functions.UDHelper;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.BooleanType;
1: import org.apache.cassandra.db.marshal.ByteType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.db.marshal.CounterColumnType;
1: import org.apache.cassandra.db.marshal.DateType;
1: import org.apache.cassandra.db.marshal.DecimalType;
1: import org.apache.cassandra.db.marshal.DoubleType;
1: import org.apache.cassandra.db.marshal.FloatType;
1: import org.apache.cassandra.db.marshal.InetAddressType;
1: import org.apache.cassandra.db.marshal.Int32Type;
1: import org.apache.cassandra.db.marshal.IntegerType;
1: import org.apache.cassandra.db.marshal.LongType;
1: import org.apache.cassandra.db.marshal.ReversedType;
1: import org.apache.cassandra.db.marshal.ShortType;
1: import org.apache.cassandra.db.marshal.SimpleDateType;
1: import org.apache.cassandra.db.marshal.TimeType;
1: import org.apache.cassandra.db.marshal.TimeUUIDType;
1: import org.apache.cassandra.db.marshal.TimestampType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.db.marshal.UUIDType;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class UDHelperTest
1: {
1:     static class UFTestCustomType extends AbstractType<String>
1:     {
1: 
1:         public ByteBuffer fromString(String source) throws MarshalException
1:         {
1:             return ByteBuffer.wrap(source.getBytes());
1:         }
1: 
1:         public Term fromJSONObject(Object parsed) throws MarshalException
1:         {
1:             throw new UnsupportedOperationException();
1:         }
1: 
1:         public TypeSerializer<String> getSerializer()
1:         {
1:             return UTF8Type.instance.getSerializer();
1:         }
1: 
0:         public int compare(ByteBuffer o1, ByteBuffer o2)
1:         {
1:             return o1.compareTo(o2);
1:         }
1:     }
1: 
1:     @Test
1:     public void testEmptyVariableLengthTypes()
1:     {
1:         AbstractType<?>[] types = new AbstractType<?>[]{
1:                                                        AsciiType.instance,
1:                                                        BytesType.instance,
1:                                                        UTF8Type.instance,
1:                                                        new UFTestCustomType()
1:         };
1: 
1:         for (AbstractType<?> type : types)
1:         {
1:             Assert.assertFalse("type " + type.getClass().getName(),
1:                                UDHelper.isNullOrEmpty(type, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         }
1:     }
1: 
1:     @Test
1:     public void testNonEmptyPrimitiveTypes()
1:     {
1:         AbstractType<?>[] types = new AbstractType<?>[]{
1:                                                        TimeType.instance,
1:                                                        SimpleDateType.instance,
1:                                                        ByteType.instance,
1:                                                        ShortType.instance
1:         };
1: 
1:         for (AbstractType<?> type : types)
1:         {
1:             try
1:             {
1:                 type.getSerializer().validate(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:                 Assert.fail(type.getClass().getSimpleName());
1:             }
1:             catch (MarshalException e)
1:             {
1:                 //
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testEmptiableTypes()
1:     {
1:         AbstractType<?>[] types = new AbstractType<?>[]{
1:                                                        BooleanType.instance,
1:                                                        CounterColumnType.instance,
1:                                                        DateType.instance,
1:                                                        DecimalType.instance,
1:                                                        DoubleType.instance,
1:                                                        FloatType.instance,
1:                                                        InetAddressType.instance,
1:                                                        Int32Type.instance,
1:                                                        IntegerType.instance,
1:                                                        LongType.instance,
1:                                                        TimestampType.instance,
1:                                                        TimeUUIDType.instance,
1:                                                        UUIDType.instance
1:         };
1: 
1:         for (AbstractType<?> type : types)
1:         {
1:             Assert.assertTrue(type.getClass().getSimpleName(), UDHelper.isNullOrEmpty(type, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:             Assert.assertTrue("reversed " + type.getClass().getSimpleName(),
1:                               UDHelper.isNullOrEmpty(ReversedType.getInstance(type), ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         }
1:     }
1: }
============================================================================