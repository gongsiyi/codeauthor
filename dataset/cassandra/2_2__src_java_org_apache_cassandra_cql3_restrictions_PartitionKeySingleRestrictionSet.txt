1:831bebd: /*
1:831bebd:  * Licensed to the Apache Software Foundation (ASF) under one
1:831bebd:  * or more contributor license agreements.  See the NOTICE file
1:831bebd:  * distributed with this work for additional information
1:831bebd:  * regarding copyright ownership.  The ASF licenses this file
1:831bebd:  * to you under the Apache License, Version 2.0 (the
1:831bebd:  * "License"); you may not use this file except in compliance
1:831bebd:  * with the License.  You may obtain a copy of the License at
1:831bebd:  *
1:831bebd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:831bebd:  *
1:831bebd:  * Unless required by applicable law or agreed to in writing, software
1:831bebd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:831bebd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:831bebd:  * See the License for the specific language governing permissions and
1:831bebd:  * limitations under the License.
1:831bebd:  */
1:831bebd: package org.apache.cassandra.cql3.restrictions;
1:831bebd: 
1:831bebd: import java.nio.ByteBuffer;
1:831bebd: import java.util.*;
1:831bebd: 
1:831bebd: import org.apache.cassandra.config.CFMetaData;
1:831bebd: import org.apache.cassandra.cql3.QueryOptions;
1:831bebd: import org.apache.cassandra.cql3.statements.Bound;
1:831bebd: import org.apache.cassandra.db.ClusteringComparator;
1:831bebd: import org.apache.cassandra.db.ClusteringPrefix;
1:831bebd: import org.apache.cassandra.db.MultiCBuilder;
1:831bebd: import org.apache.cassandra.db.filter.RowFilter;
1:831bebd: import org.apache.cassandra.index.SecondaryIndexManager;
1:831bebd: 
1:831bebd: /**
1:831bebd:  * A set of single restrictions on the partition key.
1:831bebd:  * <p>This class can only contains <code>SingleRestriction</code> instances. Token restrictions will be handled by
1:831bebd:  * <code>TokenRestriction</code> class or by the <code>TokenFilter</code> class if the query contains a mix of token
1:831bebd:  * restrictions and single column restrictions on the partition key.
1:831bebd:  */
1:831bebd: final class PartitionKeySingleRestrictionSet extends RestrictionSetWrapper implements PartitionKeyRestrictions
1:831bebd: {
1:831bebd:     /**
1:831bebd:      * The composite type.
1:831bebd:      */
1:831bebd:     protected final ClusteringComparator comparator;
1:831bebd: 
1:831bebd:     public PartitionKeySingleRestrictionSet(ClusteringComparator comparator)
1:831bebd:     {
1:831bebd:         super(new RestrictionSet());
1:831bebd:         this.comparator = comparator;
1:831bebd:     }
1:831bebd: 
1:831bebd:     private PartitionKeySingleRestrictionSet(PartitionKeySingleRestrictionSet restrictionSet,
1:831bebd:                                        SingleRestriction restriction)
1:831bebd:     {
1:831bebd:         super(restrictionSet.restrictions.addRestriction(restriction));
1:831bebd:         this.comparator = restrictionSet.comparator;
1:831bebd:     }
1:831bebd: 
1:831bebd:     private List<ByteBuffer> toByteBuffers(SortedSet<? extends ClusteringPrefix> clusterings)
1:831bebd:     {
1:831bebd:         List<ByteBuffer> l = new ArrayList<>(clusterings.size());
1:831bebd:         for (ClusteringPrefix clustering : clusterings)
1:831bebd:             l.add(CFMetaData.serializePartitionKey(clustering));
1:831bebd:         return l;
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public PartitionKeyRestrictions mergeWith(Restriction restriction)
1:831bebd:     {
1:831bebd:         if (restriction.isOnToken())
1:831bebd:         {
1:831bebd:             if (isEmpty())
1:831bebd:                 return (PartitionKeyRestrictions) restriction;
1:831bebd: 
1:831bebd:             return new TokenFilter(this, (TokenRestriction) restriction);
1:831bebd:         }
1:831bebd: 
1:831bebd:         return new PartitionKeySingleRestrictionSet(this, (SingleRestriction) restriction);
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public List<ByteBuffer> values(QueryOptions options)
1:831bebd:     {
1:831bebd:         MultiCBuilder builder = MultiCBuilder.create(comparator, hasIN());
1:831bebd:         for (SingleRestriction r : restrictions)
1:831bebd:         {
1:831bebd:             r.appendTo(builder, options);
1:831bebd:             if (builder.hasMissingElements())
1:831bebd:                 break;
1:831bebd:         }
1:831bebd:         return toByteBuffers(builder.build());
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public List<ByteBuffer> bounds(Bound bound, QueryOptions options)
1:831bebd:     {
1:831bebd:         MultiCBuilder builder = MultiCBuilder.create(comparator, hasIN());
1:831bebd:         for (SingleRestriction r : restrictions)
1:831bebd:         {
1:831bebd:             r.appendBoundTo(builder, bound, options);
1:831bebd:             if (builder.hasMissingElements())
1:831bebd:                 return Collections.emptyList();
1:831bebd:         }
1:831bebd:         return toByteBuffers(builder.buildBound(bound.isStart(), true));
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public boolean hasBound(Bound b)
1:831bebd:     {
1:831bebd:         if (isEmpty())
1:831bebd:             return false;
1:831bebd:         return restrictions.lastRestriction().hasBound(b);
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public boolean isInclusive(Bound b)
1:831bebd:     {
1:831bebd:         if (isEmpty())
1:831bebd:             return false;
1:831bebd:         return restrictions.lastRestriction().isInclusive(b);
1:831bebd:     }
1:831bebd: 
1:831bebd:     @Override
1:831bebd:     public void addRowFilterTo(RowFilter filter,
1:831bebd:                                SecondaryIndexManager indexManager,
1:831bebd:                                QueryOptions options)
1:831bebd:     {
1:831bebd:         for (SingleRestriction restriction : restrictions)
1:831bebd:         {
1:831bebd:              restriction.addRowFilterTo(filter, indexManager, options);
1:831bebd:         }
1:831bebd:     }
1:3f49c32: 
1:3f49c32:     @Override
1:3f49c32:     public boolean needFiltering(CFMetaData cfm)
1:3f49c32:     {
1:3f49c32:         if (isEmpty())
1:3f49c32:             return false;
1:3f49c32:         // slice or has unrestricted key component
1:3f49c32:         return hasUnrestrictedPartitionKeyComponents(cfm) || hasSlice();
1:3f49c32:     }
1:3f49c32: 
1:3f49c32:     @Override
1:3f49c32:     public boolean hasUnrestrictedPartitionKeyComponents(CFMetaData cfm)
1:3f49c32:     {
1:3f49c32:         return size() < cfm.partitionKeyColumns().size();
1:3f49c32:     }
1:3f49c32: 
1:3f49c32:     @Override
1:3f49c32:     public boolean hasSlice()
1:3f49c32:     {
1:3f49c32:         for (SingleRestriction restriction : restrictions)
1:3f49c32:         {
1:3f49c32:             if (restriction.isSlice())
1:3f49c32:                 return true;
1:3f49c32:         }
1:3f49c32:         return false;
1:3f49c32:     }
1:831bebd: }
============================================================================
author:ZhaoYang
-------------------------------------------------------------------------------
commit:3f49c32
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean needFiltering(CFMetaData cfm)
1:     {
1:         if (isEmpty())
1:             return false;
1:         // slice or has unrestricted key component
1:         return hasUnrestrictedPartitionKeyComponents(cfm) || hasSlice();
1:     }
1: 
1:     @Override
1:     public boolean hasUnrestrictedPartitionKeyComponents(CFMetaData cfm)
1:     {
1:         return size() < cfm.partitionKeyColumns().size();
1:     }
1: 
1:     @Override
1:     public boolean hasSlice()
1:     {
1:         for (SingleRestriction restriction : restrictions)
1:         {
1:             if (restriction.isSlice())
1:                 return true;
1:         }
1:         return false;
1:     }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:831bebd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.restrictions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.cql3.QueryOptions;
1: import org.apache.cassandra.cql3.statements.Bound;
1: import org.apache.cassandra.db.ClusteringComparator;
1: import org.apache.cassandra.db.ClusteringPrefix;
1: import org.apache.cassandra.db.MultiCBuilder;
1: import org.apache.cassandra.db.filter.RowFilter;
1: import org.apache.cassandra.index.SecondaryIndexManager;
1: 
1: /**
1:  * A set of single restrictions on the partition key.
1:  * <p>This class can only contains <code>SingleRestriction</code> instances. Token restrictions will be handled by
1:  * <code>TokenRestriction</code> class or by the <code>TokenFilter</code> class if the query contains a mix of token
1:  * restrictions and single column restrictions on the partition key.
1:  */
1: final class PartitionKeySingleRestrictionSet extends RestrictionSetWrapper implements PartitionKeyRestrictions
1: {
1:     /**
1:      * The composite type.
1:      */
1:     protected final ClusteringComparator comparator;
1: 
1:     public PartitionKeySingleRestrictionSet(ClusteringComparator comparator)
1:     {
1:         super(new RestrictionSet());
1:         this.comparator = comparator;
1:     }
1: 
1:     private PartitionKeySingleRestrictionSet(PartitionKeySingleRestrictionSet restrictionSet,
1:                                        SingleRestriction restriction)
1:     {
1:         super(restrictionSet.restrictions.addRestriction(restriction));
1:         this.comparator = restrictionSet.comparator;
1:     }
1: 
1:     private List<ByteBuffer> toByteBuffers(SortedSet<? extends ClusteringPrefix> clusterings)
1:     {
1:         List<ByteBuffer> l = new ArrayList<>(clusterings.size());
1:         for (ClusteringPrefix clustering : clusterings)
1:             l.add(CFMetaData.serializePartitionKey(clustering));
1:         return l;
1:     }
1: 
1:     @Override
1:     public PartitionKeyRestrictions mergeWith(Restriction restriction)
1:     {
1:         if (restriction.isOnToken())
1:         {
1:             if (isEmpty())
1:                 return (PartitionKeyRestrictions) restriction;
1: 
1:             return new TokenFilter(this, (TokenRestriction) restriction);
1:         }
1: 
1:         return new PartitionKeySingleRestrictionSet(this, (SingleRestriction) restriction);
1:     }
1: 
1:     @Override
1:     public List<ByteBuffer> values(QueryOptions options)
1:     {
1:         MultiCBuilder builder = MultiCBuilder.create(comparator, hasIN());
1:         for (SingleRestriction r : restrictions)
1:         {
1:             r.appendTo(builder, options);
1:             if (builder.hasMissingElements())
1:                 break;
1:         }
1:         return toByteBuffers(builder.build());
1:     }
1: 
1:     @Override
1:     public List<ByteBuffer> bounds(Bound bound, QueryOptions options)
1:     {
1:         MultiCBuilder builder = MultiCBuilder.create(comparator, hasIN());
1:         for (SingleRestriction r : restrictions)
1:         {
1:             r.appendBoundTo(builder, bound, options);
1:             if (builder.hasMissingElements())
1:                 return Collections.emptyList();
1:         }
1:         return toByteBuffers(builder.buildBound(bound.isStart(), true));
1:     }
1: 
1:     @Override
1:     public boolean hasBound(Bound b)
1:     {
1:         if (isEmpty())
1:             return false;
1:         return restrictions.lastRestriction().hasBound(b);
1:     }
1: 
1:     @Override
1:     public boolean isInclusive(Bound b)
1:     {
1:         if (isEmpty())
1:             return false;
1:         return restrictions.lastRestriction().isInclusive(b);
1:     }
1: 
1:     @Override
1:     public void addRowFilterTo(RowFilter filter,
1:                                SecondaryIndexManager indexManager,
1:                                QueryOptions options)
1:     {
1:         for (SingleRestriction restriction : restrictions)
1:         {
1:              restriction.addRowFilterTo(filter, indexManager, options);
1:         }
1:     }
1: }
============================================================================