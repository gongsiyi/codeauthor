1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.analyzer.filter;
1:72790dc: 
1:72790dc: import org.slf4j.Logger;
1:72790dc: import org.slf4j.LoggerFactory;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * Executes all linked Pipeline Tasks serially and returns
1:72790dc:  * output (if exists) from the executed logic
1:72790dc:  */
1:72790dc: public class FilterPipelineExecutor
1:72790dc: {
1:72790dc:     private static final Logger logger = LoggerFactory.getLogger(FilterPipelineExecutor.class);
1:72790dc: 
1:72790dc:     public static <F,T> T execute(FilterPipelineTask<F, T> task, T initialInput)
1:72790dc:     {
1:72790dc:         FilterPipelineTask<?, ?> taskPtr = task;
1:72790dc:         T result = initialInput;
1:72790dc:         try
1:72790dc:         {
1:72790dc:             while (true)
1:72790dc:             {
1:72790dc:                 FilterPipelineTask<F,T> taskGeneric = (FilterPipelineTask<F,T>) taskPtr;
1:72790dc:                 result = taskGeneric.process((F) result);
1:72790dc:                 taskPtr = taskPtr.next;
1:72790dc:                 if(taskPtr == null)
1:72790dc:                     return result;
1:72790dc:             }
1:72790dc:         }
1:72790dc:         catch (Exception e)
1:72790dc:         {
1:72790dc:             logger.info("An unhandled exception to occurred while processing " +
1:72790dc:                     "pipeline [{}]", task.getName(), e);
1:72790dc:         }
1:72790dc:         return null;
1:72790dc:     }
1:72790dc: }
============================================================================
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.analyzer.filter;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Executes all linked Pipeline Tasks serially and returns
1:  * output (if exists) from the executed logic
1:  */
1: public class FilterPipelineExecutor
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(FilterPipelineExecutor.class);
1: 
1:     public static <F,T> T execute(FilterPipelineTask<F, T> task, T initialInput)
1:     {
1:         FilterPipelineTask<?, ?> taskPtr = task;
1:         T result = initialInput;
1:         try
1:         {
1:             while (true)
1:             {
1:                 FilterPipelineTask<F,T> taskGeneric = (FilterPipelineTask<F,T>) taskPtr;
1:                 result = taskGeneric.process((F) result);
1:                 taskPtr = taskPtr.next;
1:                 if(taskPtr == null)
1:                     return result;
1:             }
1:         }
1:         catch (Exception e)
1:         {
1:             logger.info("An unhandled exception to occurred while processing " +
1:                     "pipeline [{}]", task.getName(), e);
1:         }
1:         return null;
1:     }
1: }
============================================================================