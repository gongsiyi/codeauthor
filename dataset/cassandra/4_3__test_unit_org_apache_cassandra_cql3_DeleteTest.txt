1:ee401cf: /*
1:ee401cf:  * Licensed to the Apache Software Foundation (ASF) under one
1:ee401cf:  * or more contributor license agreements.  See the NOTICE file
1:ee401cf:  * distributed with this work for additional information
1:ee401cf:  * regarding copyright ownership.  The ASF licenses this file
1:ee401cf:  * to you under the Apache License, Version 2.0 (the
1:ee401cf:  * "License"); you may not use this file except in compliance
1:ee401cf:  * with the License.  You may obtain a copy of the License at
1:ee401cf:  *
1:ee401cf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ee401cf:  *
1:ee401cf:  * Unless required by applicable law or agreed to in writing, software
1:ee401cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee401cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee401cf:  * See the License for the specific language governing permissions and
1:ee401cf:  * limitations under the License.
1:ee401cf:  */
1:a14a01c: package org.apache.cassandra.cql3;
10:a14a01c: 
1:a991b64: import org.junit.Assert;
1:5289a56: import org.junit.Before;
1:a991b64: import org.junit.Test;
1:a991b64: 
1:5289a56: import com.datastax.driver.core.ConsistencyLevel;
1:a14a01c: import com.datastax.driver.core.PreparedStatement;
1:a14a01c: import com.datastax.driver.core.ResultSetFuture;
1:a14a01c: import com.datastax.driver.core.Session;
1:a14a01c: 
1:5289a56: public class DeleteTest extends CQLTester
1:c81dc4b: {
1:a14a01c:     private static PreparedStatement pstmtI;
1:a14a01c:     private static PreparedStatement pstmtU;
1:a14a01c:     private static PreparedStatement pstmtD;
1:a14a01c:     private static PreparedStatement pstmt1;
1:a14a01c:     private static PreparedStatement pstmt2;
1:a14a01c:     private static PreparedStatement pstmt3;
1:a14a01c:     private static PreparedStatement pstmt4;
1:a14a01c:     private static PreparedStatement pstmt5;
1:c81dc4b: 
1:5289a56:     @Before
1:5289a56:     public void prepare() throws Exception
2:a14a01c:     {
1:5289a56:         // Schema.instance.clear();
1:a224e58: 
1:5289a56:         Session session = sessionNet();
1:5289a56:         session.getCluster().getConfiguration().getQueryOptions().setConsistencyLevel(ConsistencyLevel.ONE);
1:a14a01c: 
1:a14a01c:         session.execute("drop keyspace if exists junit;");
1:a14a01c:         session.execute("create keyspace junit WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 2 };");
1:a14a01c:         session.execute("CREATE TABLE junit.tpc_base (\n" +
1:a14a01c:                 "  id int ,\n" +
1:a14a01c:                 "  cid int ,\n" +
1:a14a01c:                 "  val text ,\n" +
1:a14a01c:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:a14a01c:                 ");");
1:a14a01c:         session.execute("CREATE TABLE junit.tpc_inherit_a (\n" +
1:a14a01c:                 "  id int ,\n" +
1:a14a01c:                 "  cid int ,\n" +
1:a14a01c:                 "  inh_a text ,\n" +
1:a14a01c:                 "  val text ,\n" +
1:a14a01c:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:a14a01c:                 ");");
1:a14a01c:         session.execute("CREATE TABLE junit.tpc_inherit_b (\n" +
1:a14a01c:                 "  id int ,\n" +
1:a14a01c:                 "  cid int ,\n" +
1:a14a01c:                 "  inh_b text ,\n" +
1:a14a01c:                 "  val text ,\n" +
1:a14a01c:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:a14a01c:                 ");");
1:a14a01c:         session.execute("CREATE TABLE junit.tpc_inherit_b2 (\n" +
1:a14a01c:                 "  id int ,\n" +
1:a14a01c:                 "  cid int ,\n" +
1:a14a01c:                 "  inh_b text ,\n" +
1:a14a01c:                 "  inh_b2 text ,\n" +
1:a14a01c:                 "  val text ,\n" +
1:a14a01c:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:a14a01c:                 ");");
1:a14a01c:         session.execute("CREATE TABLE junit.tpc_inherit_c (\n" +
1:a14a01c:                 "  id int ,\n" +
1:a14a01c:                 "  cid int ,\n" +
1:a14a01c:                 "  inh_c text ,\n" +
1:a14a01c:                 "  val text ,\n" +
1:a14a01c:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:a14a01c:                 ");");
1:a14a01c: 
1:a14a01c:         pstmtI = session.prepare("insert into junit.tpc_inherit_b ( id, cid, inh_b, val) values (?, ?, ?, ?)");
1:a14a01c:         pstmtU = session.prepare("update junit.tpc_inherit_b set inh_b=?, val=? where id=? and cid=?");
1:a14a01c:         pstmtD = session.prepare("delete from junit.tpc_inherit_b where id=? and cid=?");
1:a14a01c:         pstmt1 = session.prepare("select id, cid, val from junit.tpc_base where id=? and cid=?");
1:a14a01c:         pstmt2 = session.prepare("select id, cid, inh_a, val from junit.tpc_inherit_a where id=? and cid=?");
1:a14a01c:         pstmt3 = session.prepare("select id, cid, inh_b, val from junit.tpc_inherit_b where id=? and cid=?");
1:a14a01c:         pstmt4 = session.prepare("select id, cid, inh_b, inh_b2, val from junit.tpc_inherit_b2 where id=? and cid=?");
1:a14a01c:         pstmt5 = session.prepare("select id, cid, inh_c, val from junit.tpc_inherit_c where id=? and cid=?");
1:c81dc4b:     }
1:a14a01c: 
1:a14a01c:     @Test
1:a14a01c:     public void lostDeletesTest()
1:a14a01c:     {
1:5289a56:         Session session = sessionNet();
1:a14a01c: 
1:a14a01c:         for (int i = 0; i < 500; i++)
1:a14a01c:         {
1:a14a01c:             session.execute(pstmtI.bind(1, 1, "inhB", "valB"));
1:a14a01c: 
1:a14a01c:             ResultSetFuture[] futures = load();
1:a14a01c: 
1:a14a01c:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertNotNull(futures[2].getUninterruptibly().one());
1:a14a01c:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
1:a14a01c: 
1:a14a01c:             session.execute(pstmtU.bind("inhBu", "valBu", 1, 1));
1:a14a01c: 
1:a14a01c:             futures = load();
1:a14a01c: 
1:a14a01c:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertNotNull(futures[2].getUninterruptibly().one());
1:a14a01c:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
1:a14a01c: 
1:a14a01c:             session.execute(pstmtD.bind(1, 1));
1:a14a01c: 
1:a14a01c:             futures = load();
1:a14a01c: 
1:a14a01c:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[2].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:a14a01c:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
3:a14a01c:         }
1:a14a01c:     }
1:a14a01c: 
1:a14a01c:     private ResultSetFuture[] load() {
1:5289a56:         Session session = sessionNet();
1:5289a56: 
1:a14a01c:         return new ResultSetFuture[]{
1:a14a01c:                 session.executeAsync(pstmt1.bind(1, 1)),
1:a14a01c:                 session.executeAsync(pstmt2.bind(1, 1)),
1:a14a01c:                 session.executeAsync(pstmt3.bind(1, 1)),
1:a14a01c:                 session.executeAsync(pstmt4.bind(1, 1)),
1:a14a01c:                 session.executeAsync(pstmt5.bind(1, 1))
1:a14a01c:         };
1:a14a01c:     }
1:a14a01c: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:5289a56
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import com.datastax.driver.core.ConsistencyLevel;
1: public class DeleteTest extends CQLTester
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void prepare() throws Exception
1:         // Schema.instance.clear();
1:         Session session = sessionNet();
1:         session.getCluster().getConfiguration().getQueryOptions().setConsistencyLevel(ConsistencyLevel.ONE);
/////////////////////////////////////////////////////////////////////////
1:         Session session = sessionNet();
/////////////////////////////////////////////////////////////////////////
1:         Session session = sessionNet();
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.junit.AfterClass;
1: import org.junit.Assert;
0: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
commit:b701dd5
/////////////////////////////////////////////////////////////////////////
commit:d304b7c
/////////////////////////////////////////////////////////////////////////
commit:c81dc4b
/////////////////////////////////////////////////////////////////////////
0: import org.junit.AfterClass;
/////////////////////////////////////////////////////////////////////////
0:     @BeforeClass
0:     public static void setup() throws Exception
0:         // Currently the native server start method return before the server is fully binded to the socket,
0:         // so we need to wait slightly before trying to connect to it. We should fix this but in the meantime
0:         // using a sleep.
0:         Thread.sleep(500);
1: 
/////////////////////////////////////////////////////////////////////////
0:     @AfterClass
0:     public static void tearDown() throws Exception
1:     {
0:         cluster.close();
0:         cassandra.stop();
1:     }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:a224e58
/////////////////////////////////////////////////////////////////////////
0: public class DeleteTest extends SchemaLoader
/////////////////////////////////////////////////////////////////////////
0:         Schema.instance.clear();
1: 
commit:ee401cf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
0: public class DeleteTest
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:a14a01c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3;
1: 
1: 
0: import com.datastax.driver.core.Cluster;
1: import com.datastax.driver.core.PreparedStatement;
1: import com.datastax.driver.core.ResultSetFuture;
1: import com.datastax.driver.core.Session;
0: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.service.EmbeddedCassandraService;
0: import org.junit.Assert;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
1: 
0: import java.io.IOException;
1: 
0: public class DeleteTest extends SchemaLoader
1: {
1: 
0:     private static EmbeddedCassandraService cassandra;
1: 
0:     private static Cluster cluster;
0:     private static Session session;
1:     private static PreparedStatement pstmtI;
1:     private static PreparedStatement pstmtU;
1:     private static PreparedStatement pstmtD;
1:     private static PreparedStatement pstmt1;
1:     private static PreparedStatement pstmt2;
1:     private static PreparedStatement pstmt3;
1:     private static PreparedStatement pstmt4;
1:     private static PreparedStatement pstmt5;
1: 
0:     @BeforeClass()
0:     public static void setup() throws ConfigurationException, IOException
1:     {
1: 
0:         Schema.instance.clear(); // Schema are now written on disk and will be reloaded
0:         cassandra = new EmbeddedCassandraService();
0:         cassandra.start();
1: 
0:         cluster = Cluster.builder().addContactPoint("127.0.0.1").withPort(DatabaseDescriptor.getNativeTransportPort()).build();
0:         session = cluster.connect();
1: 
1:         session.execute("drop keyspace if exists junit;");
1:         session.execute("create keyspace junit WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 2 };");
1:         session.execute("CREATE TABLE junit.tpc_base (\n" +
1:                 "  id int ,\n" +
1:                 "  cid int ,\n" +
1:                 "  val text ,\n" +
1:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:                 ");");
1:         session.execute("CREATE TABLE junit.tpc_inherit_a (\n" +
1:                 "  id int ,\n" +
1:                 "  cid int ,\n" +
1:                 "  inh_a text ,\n" +
1:                 "  val text ,\n" +
1:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:                 ");");
1:         session.execute("CREATE TABLE junit.tpc_inherit_b (\n" +
1:                 "  id int ,\n" +
1:                 "  cid int ,\n" +
1:                 "  inh_b text ,\n" +
1:                 "  val text ,\n" +
1:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:                 ");");
1:         session.execute("CREATE TABLE junit.tpc_inherit_b2 (\n" +
1:                 "  id int ,\n" +
1:                 "  cid int ,\n" +
1:                 "  inh_b text ,\n" +
1:                 "  inh_b2 text ,\n" +
1:                 "  val text ,\n" +
1:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:                 ");");
1:         session.execute("CREATE TABLE junit.tpc_inherit_c (\n" +
1:                 "  id int ,\n" +
1:                 "  cid int ,\n" +
1:                 "  inh_c text ,\n" +
1:                 "  val text ,\n" +
1:                 "  PRIMARY KEY ( ( id ), cid )\n" +
1:                 ");");
0:         try {
0:             Thread.sleep(2000L);
0:         } catch (InterruptedException e) {
0:             throw new RuntimeException(e);
1:         }
1: 
1:         pstmtI = session.prepare("insert into junit.tpc_inherit_b ( id, cid, inh_b, val) values (?, ?, ?, ?)");
1:         pstmtU = session.prepare("update junit.tpc_inherit_b set inh_b=?, val=? where id=? and cid=?");
1:         pstmtD = session.prepare("delete from junit.tpc_inherit_b where id=? and cid=?");
1:         pstmt1 = session.prepare("select id, cid, val from junit.tpc_base where id=? and cid=?");
1:         pstmt2 = session.prepare("select id, cid, inh_a, val from junit.tpc_inherit_a where id=? and cid=?");
1:         pstmt3 = session.prepare("select id, cid, inh_b, val from junit.tpc_inherit_b where id=? and cid=?");
1:         pstmt4 = session.prepare("select id, cid, inh_b, inh_b2, val from junit.tpc_inherit_b2 where id=? and cid=?");
1:         pstmt5 = session.prepare("select id, cid, inh_c, val from junit.tpc_inherit_c where id=? and cid=?");
1:     }
1: 
1: 
1: 
1:     @Test
1:     public void lostDeletesTest()
1:     {
1: 
1:         for (int i = 0; i < 500; i++)
1:         {
1:             session.execute(pstmtI.bind(1, 1, "inhB", "valB"));
1: 
1:             ResultSetFuture[] futures = load();
1: 
1:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:             Assert.assertNotNull(futures[2].getUninterruptibly().one());
1:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
1: 
1:             session.execute(pstmtU.bind("inhBu", "valBu", 1, 1));
1: 
1:             futures = load();
1: 
1:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:             Assert.assertNotNull(futures[2].getUninterruptibly().one());
1:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
1: 
1:             session.execute(pstmtD.bind(1, 1));
1: 
1:             futures = load();
1: 
1:             Assert.assertTrue(futures[0].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[1].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[2].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[3].getUninterruptibly().isExhausted());
1:             Assert.assertTrue(futures[4].getUninterruptibly().isExhausted());
1:         }
1:     }
1: 
1:     private ResultSetFuture[] load() {
1:         return new ResultSetFuture[]{
1:                 session.executeAsync(pstmt1.bind(1, 1)),
1:                 session.executeAsync(pstmt2.bind(1, 1)),
1:                 session.executeAsync(pstmt3.bind(1, 1)),
1:                 session.executeAsync(pstmt4.bind(1, 1)),
1:                 session.executeAsync(pstmt5.bind(1, 1))
1:         };
1:     }
1: }
============================================================================