1:d6c37bd: /*
1:d6c37bd:  * Licensed to the Apache Software Foundation (ASF) under one
1:d6c37bd:  * or more contributor license agreements.  See the NOTICE file
1:d6c37bd:  * distributed with this work for additional information
1:d6c37bd:  * regarding copyright ownership.  The ASF licenses this file
1:d6c37bd:  * to you under the Apache License, Version 2.0 (the
1:d6c37bd:  * "License"); you may not use this file except in compliance
1:d6c37bd:  * with the License.  You may obtain a copy of the License at
1:d6c37bd:  *
1:d6c37bd:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d6c37bd:  *
1:d6c37bd:  * Unless required by applicable law or agreed to in writing, software
1:d6c37bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d6c37bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d6c37bd:  * See the License for the specific language governing permissions and
1:d6c37bd:  * limitations under the License.
1:d6c37bd:  */
2:d6c37bd: 
1:d6c37bd: package org.apache.cassandra.cql3;
1:d6c37bd: 
1:d6c37bd: import java.nio.ByteBuffer;
1:d6c37bd: 
1:d6c37bd: import org.junit.Before;
1:d6c37bd: import org.junit.Test;
1:d6c37bd: 
1:d6c37bd: public class LargeCompactValueTest extends CQLTester
1:d6c37bd: {
1:d6c37bd:     @Before
1:d6c37bd:     public void before()
1:d6c37bd:     {
1:d6c37bd:         createTable("CREATE TABLE %s (key TEXT, column TEXT, value BLOB, PRIMARY KEY (key, column)) WITH COMPACT STORAGE");
1:d6c37bd:     }
1:d6c37bd: 
1:d6c37bd:     @Test
1:d6c37bd:     public void testInsertAndQuery() throws Throwable
1:d6c37bd:     {
1:d6c37bd:         ByteBuffer largeBytes = ByteBuffer.wrap(new byte[100000]);
1:d6c37bd:         execute("INSERT INTO %s (key, column, value) VALUES (?, ?, ?)", "test", "a", largeBytes);
1:d6c37bd:         ByteBuffer smallBytes = ByteBuffer.wrap(new byte[10]);
1:d6c37bd:         execute("INSERT INTO %s (key, column, value) VALUES (?, ?, ?)", "test", "c", smallBytes);
1:d6c37bd: 
1:d6c37bd:         flush();
1:d6c37bd: 
1:d6c37bd:         assertRows(execute("SELECT column FROM %s WHERE key = ? AND column IN (?, ?, ?)", "test", "c", "a", "b"),
1:d6c37bd:                    row("a"),
1:d6c37bd:                    row("c"));
1:d6c37bd:     }
1:d6c37bd: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:d6c37bd
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.io.util.RandomAccessReader;
1: 
1: public class LargeCompactValueTest extends CQLTester
1: {
1:     @Before
1:     public void before()
1:     {
1:         createTable("CREATE TABLE %s (key TEXT, column TEXT, value BLOB, PRIMARY KEY (key, column)) WITH COMPACT STORAGE");
1:     }
1: 
1:     @Test
1:     public void testInsertAndQuery() throws Throwable
1:     {
1:         ByteBuffer largeBytes = ByteBuffer.wrap(new byte[100000]);
1:         execute("INSERT INTO %s (key, column, value) VALUES (?, ?, ?)", "test", "a", largeBytes);
1:         ByteBuffer smallBytes = ByteBuffer.wrap(new byte[10]);
1:         execute("INSERT INTO %s (key, column, value) VALUES (?, ?, ?)", "test", "c", smallBytes);
1: 
1:         flush();
1: 
1:         assertRows(execute("SELECT column FROM %s WHERE key = ? AND column IN (?, ?, ?)", "test", "c", "a", "b"),
1:                    row("a"),
1:                    row("c"));
1:     }
1: }
============================================================================