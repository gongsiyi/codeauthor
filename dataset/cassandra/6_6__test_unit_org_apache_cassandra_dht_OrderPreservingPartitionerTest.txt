1:f8fa6d2: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:f8fa6d2: package org.apache.cassandra.dht;
4:f8fa6d2: 
1:774bd0b: import java.io.IOException;
1:774bd0b: 
1:5b6d2e4: import org.junit.BeforeClass;
1:f8fa6d2: import org.junit.Test;
1:f8fa6d2: 
1:45310c0: import org.apache.cassandra.SchemaLoader;
1:45310c0: 
1:ad84e4d: public class OrderPreservingPartitionerTest extends PartitionerTestCase
1:45310c0: {
1:5b6d2e4:     @BeforeClass
1:774bd0b:     public static void cleanStatesFromPreviousTest() throws IOException
1:5b6d2e4:     {
1:5b6d2e4:         // Since OrderPreservingPartitioner#describeOwnership tries to read SSTables,
1:5b6d2e4:         // we need to clear data dir to clear garbage from previous test before running tests.
1:5b6d2e4:         SchemaLoader.cleanupAndLeaveDirs();
1:5b6d2e4:     }
1:5b6d2e4: 
1:4a6b002:     public void initPartitioner()
2:f8fa6d2:     {
1:07893d7:         partitioner = OrderPreservingPartitioner.instance;
2:f8fa6d2:     }
1:f8fa6d2: 
1:4fd05e5:     protected boolean shouldStopRecursion(Token left, Token right)
1:4fd05e5:     {
1:4fd05e5:         return false;
1:4fd05e5:     }
1:4fd05e5: 
1:4a6b002:     @Test
1:4a6b002:     public void testCompare()
1:f8fa6d2:     {
1:4a6b002:         assert tok("").compareTo(tok("asdf")) < 0;
1:4a6b002:         assert tok("asdf").compareTo(tok("")) > 0;
1:4a6b002:         assert tok("").compareTo(tok("")) == 0;
1:4a6b002:         assert tok("z").compareTo(tok("a")) > 0;
1:4a6b002:         assert tok("a").compareTo(tok("z")) < 0;
1:4a6b002:         assert tok("asdf").compareTo(tok("asdf")) == 0;
1:4a6b002:         assert tok("asdz").compareTo(tok("asdf")) > 0;
1:f8fa6d2:     }
1:f8fa6d2: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:4fd05e5
/////////////////////////////////////////////////////////////////////////
1:     protected boolean shouldStopRecursion(Token left, Token right)
1:     {
1:         return false;
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:774bd0b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static void cleanStatesFromPreviousTest() throws IOException
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1:         partitioner = OrderPreservingPartitioner.instance;
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: public class OrderPreservingPartitionerTest extends PartitionerTestCase
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:5b6d2e4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1:     @BeforeClass
0:     public static void cleanStatesFromPreviousTest()
1:     {
1:         // Since OrderPreservingPartitioner#describeOwnership tries to read SSTables,
1:         // we need to clear data dir to clear garbage from previous test before running tests.
1:         SchemaLoader.cleanupAndLeaveDirs();
1:     }
1: 
commit:45310c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.SchemaLoader;
1: 
0: public class OrderPreservingPartitionerTest extends PartitionerTestCase<StringToken>
1: {
0:         // need to clear data dir
0:         SchemaLoader.cleanupAndLeaveDirs();
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:5e75a7f
/////////////////////////////////////////////////////////////////////////
commit:4a6b002
/////////////////////////////////////////////////////////////////////////
1:     public void initPartitioner()
0:         partitioner = new OrderPreservingPartitioner();
1:     @Test
1:     public void testCompare()
1:         assert tok("").compareTo(tok("asdf")) < 0;
1:         assert tok("asdf").compareTo(tok("")) > 0;
1:         assert tok("").compareTo(tok("")) == 0;
1:         assert tok("z").compareTo(tok("a")) > 0;
1:         assert tok("a").compareTo(tok("z")) < 0;
1:         assert tok("asdf").compareTo(tok("asdf")) == 0;
1:         assert tok("asdz").compareTo(tok("asdf")) > 0;
commit:f8fa6d2
/////////////////////////////////////////////////////////////////////////
1: /*
0: * Licensed to the Apache Software Foundation (ASF) under one
0: * or more contributor license agreements.  See the NOTICE file
0: * distributed with this work for additional information
0: * regarding copyright ownership.  The ASF licenses this file
0: * to you under the Apache License, Version 2.0 (the
0: * "License"); you may not use this file except in compliance
0: * with the License.  You may obtain a copy of the License at
0: *
0: *    http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing,
0: * software distributed under the License is distributed on an
0: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0: * KIND, either express or implied.  See the License for the
0: * specific language governing permissions and limitations
0: * under the License.
0: */
1: package org.apache.cassandra.dht;
1: 
0: import java.math.BigInteger;
1: 
0: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import org.apache.cassandra.utils.FBUtilities;
1: 
0: public class OrderPreservingPartitionerTest extends PartitionerTestCase<StringToken> {
0:     @Override
0:     public IPartitioner<StringToken> getPartitioner()
1:     {
0:         return new OrderPreservingPartitioner();
1:     }
1: 
0:     @Override
0:     public StringToken tok(String string)
1:     {
0:         return new StringToken(string);
1:     }
1: 
0:     @Override
0:     public String tos(StringToken token)
1:     {
0:         return FBUtilities.bytesToHex(token.token.getBytes());
1:     }
1: }
============================================================================