1:b4133f3: /*
1:b4133f3:  * Licensed to the Apache Software Foundation (ASF) under one
1:b4133f3:  * or more contributor license agreements.  See the NOTICE file
1:b4133f3:  * distributed with this work for additional information
1:b4133f3:  * regarding copyright ownership.  The ASF licenses this file
1:b4133f3:  * to you under the Apache License, Version 2.0 (the
1:b4133f3:  * "License"); you may not use this file except in compliance
1:b4133f3:  * with the License.  You may obtain a copy of the License at
1:b4133f3:  *
1:b4133f3:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b4133f3:  *
1:b4133f3:  * Unless required by applicable law or agreed to in writing, software
1:b4133f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b4133f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b4133f3:  * See the License for the specific language governing permissions and
1:b4133f3:  * limitations under the License.
1:b4133f3:  */
1:b4133f3: 
1:b4133f3: package org.apache.cassandra.io.util;
1:b4133f3: 
1:b4133f3: import org.junit.Test;
1:b4133f3: 
1:b4133f3: import static org.junit.Assert.assertEquals;
1:b4133f3: 
1:b4133f3: public class DiskOptimizationStrategyTest
1:b4133f3: {
1:b4133f3:     @Test
1:b4133f3:     public void testRoundingBufferSize()
1:b4133f3:     {
1:b4133f3:         DiskOptimizationStrategy strategy = new SsdDiskOptimizationStrategy(0.95);
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(-1L));
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(0));
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(1));
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(2013));
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(4095));
1:b4133f3:         assertEquals(4096, strategy.roundBufferSize(4096));
1:b4133f3:         assertEquals(8192, strategy.roundBufferSize(4097));
1:b4133f3:         assertEquals(8192, strategy.roundBufferSize(8191));
1:b4133f3:         assertEquals(8192, strategy.roundBufferSize(8192));
1:b4133f3:         assertEquals(12288, strategy.roundBufferSize(8193));
1:b4133f3:         assertEquals(65536, strategy.roundBufferSize(65535));
1:b4133f3:         assertEquals(65536, strategy.roundBufferSize(65536));
1:b4133f3:         assertEquals(65536, strategy.roundBufferSize(65537));
1:b4133f3:         assertEquals(65536, strategy.roundBufferSize(10000000000000000L));
1:b4133f3:     }
1:b4133f3: 
1:b4133f3:     @Test
1:b4133f3:     public void testBufferSize_ssd()
1:b4133f3:     {
1:b4133f3:         DiskOptimizationStrategy strategy = new SsdDiskOptimizationStrategy(0.1);
1:b4133f3: 
1:b4133f3:         assertEquals(4096, strategy.bufferSize(0));
1:b4133f3:         assertEquals(4096, strategy.bufferSize(10));
1:b4133f3:         assertEquals(4096, strategy.bufferSize(100));
1:b4133f3:         assertEquals(4096, strategy.bufferSize(4096));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(4505));   // just < (4096 + 4096 * 0.1)
1:b4133f3:         assertEquals(12288, strategy.bufferSize(4506));  // just > (4096 + 4096 * 0.1)
1:b4133f3: 
1:b4133f3:         strategy = new SsdDiskOptimizationStrategy(0.5);
1:b4133f3:         assertEquals(8192, strategy.bufferSize(4506));  // just > (4096 + 4096 * 0.1)
1:b4133f3:         assertEquals(8192, strategy.bufferSize(6143));  // < (4096 + 4096 * 0.5)
1:b4133f3:         assertEquals(12288, strategy.bufferSize(6144));  // = (4096 + 4096 * 0.5)
1:b4133f3:         assertEquals(12288, strategy.bufferSize(6145));  // > (4096 + 4096 * 0.5)
1:b4133f3: 
1:b4133f3:         strategy = new SsdDiskOptimizationStrategy(1.0); // never add a page
1:b4133f3:         assertEquals(8192, strategy.bufferSize(8191));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(8192));
1:b4133f3: 
1:b4133f3:         strategy = new SsdDiskOptimizationStrategy(0.0); // always add a page
1:b4133f3:         assertEquals(8192, strategy.bufferSize(10));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(4096));
1:b4133f3:     }
1:b4133f3: 
1:b4133f3:     @Test
1:b4133f3:     public void testBufferSize_spinning()
1:b4133f3:     {
1:b4133f3:         DiskOptimizationStrategy strategy = new SpinningDiskOptimizationStrategy();
1:b4133f3: 
1:b4133f3:         assertEquals(4096, strategy.bufferSize(0));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(10));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(100));
1:b4133f3:         assertEquals(8192, strategy.bufferSize(4096));
1:b4133f3:         assertEquals(12288, strategy.bufferSize(4097));
1:b4133f3:     }
1:b4133f3: }
============================================================================
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.io.util;
1: 
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class DiskOptimizationStrategyTest
1: {
1:     @Test
1:     public void testRoundingBufferSize()
1:     {
1:         DiskOptimizationStrategy strategy = new SsdDiskOptimizationStrategy(0.95);
1:         assertEquals(4096, strategy.roundBufferSize(-1L));
1:         assertEquals(4096, strategy.roundBufferSize(0));
1:         assertEquals(4096, strategy.roundBufferSize(1));
1:         assertEquals(4096, strategy.roundBufferSize(2013));
1:         assertEquals(4096, strategy.roundBufferSize(4095));
1:         assertEquals(4096, strategy.roundBufferSize(4096));
1:         assertEquals(8192, strategy.roundBufferSize(4097));
1:         assertEquals(8192, strategy.roundBufferSize(8191));
1:         assertEquals(8192, strategy.roundBufferSize(8192));
1:         assertEquals(12288, strategy.roundBufferSize(8193));
1:         assertEquals(65536, strategy.roundBufferSize(65535));
1:         assertEquals(65536, strategy.roundBufferSize(65536));
1:         assertEquals(65536, strategy.roundBufferSize(65537));
1:         assertEquals(65536, strategy.roundBufferSize(10000000000000000L));
1:     }
1: 
1:     @Test
1:     public void testBufferSize_ssd()
1:     {
1:         DiskOptimizationStrategy strategy = new SsdDiskOptimizationStrategy(0.1);
1: 
1:         assertEquals(4096, strategy.bufferSize(0));
1:         assertEquals(4096, strategy.bufferSize(10));
1:         assertEquals(4096, strategy.bufferSize(100));
1:         assertEquals(4096, strategy.bufferSize(4096));
1:         assertEquals(8192, strategy.bufferSize(4505));   // just < (4096 + 4096 * 0.1)
1:         assertEquals(12288, strategy.bufferSize(4506));  // just > (4096 + 4096 * 0.1)
1: 
1:         strategy = new SsdDiskOptimizationStrategy(0.5);
1:         assertEquals(8192, strategy.bufferSize(4506));  // just > (4096 + 4096 * 0.1)
1:         assertEquals(8192, strategy.bufferSize(6143));  // < (4096 + 4096 * 0.5)
1:         assertEquals(12288, strategy.bufferSize(6144));  // = (4096 + 4096 * 0.5)
1:         assertEquals(12288, strategy.bufferSize(6145));  // > (4096 + 4096 * 0.5)
1: 
1:         strategy = new SsdDiskOptimizationStrategy(1.0); // never add a page
1:         assertEquals(8192, strategy.bufferSize(8191));
1:         assertEquals(8192, strategy.bufferSize(8192));
1: 
1:         strategy = new SsdDiskOptimizationStrategy(0.0); // always add a page
1:         assertEquals(8192, strategy.bufferSize(10));
1:         assertEquals(8192, strategy.bufferSize(4096));
1:     }
1: 
1:     @Test
1:     public void testBufferSize_spinning()
1:     {
1:         DiskOptimizationStrategy strategy = new SpinningDiskOptimizationStrategy();
1: 
1:         assertEquals(4096, strategy.bufferSize(0));
1:         assertEquals(8192, strategy.bufferSize(10));
1:         assertEquals(8192, strategy.bufferSize(100));
1:         assertEquals(8192, strategy.bufferSize(4096));
1:         assertEquals(12288, strategy.bufferSize(4097));
1:     }
1: }
============================================================================