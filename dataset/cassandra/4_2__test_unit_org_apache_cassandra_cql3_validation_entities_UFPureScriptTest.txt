1:5790b4a: /*
1:5790b4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:5790b4a:  * or more contributor license agreements.  See the NOTICE file
1:5790b4a:  * distributed with this work for additional information
1:5790b4a:  * regarding copyright ownership.  The ASF licenses this file
1:5790b4a:  * to you under the Apache License, Version 2.0 (the
1:5790b4a:  * "License"); you may not use this file except in compliance
1:5790b4a:  * with the License.  You may obtain a copy of the License at
1:5790b4a:  *
1:5790b4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5790b4a:  *
1:5790b4a:  * Unless required by applicable law or agreed to in writing, software
1:5790b4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5790b4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5790b4a:  * See the License for the specific language governing permissions and
1:5790b4a:  * limitations under the License.
1:5790b4a:  */
8:5790b4a: 
1:5790b4a: package org.apache.cassandra.cql3.validation.entities;
1:5790b4a: 
1:5790b4a: import java.math.BigDecimal;
1:5790b4a: import java.math.BigInteger;
1:5790b4a: import java.util.Arrays;
1:5790b4a: import java.util.Date;
1:5790b4a: import java.util.List;
1:5790b4a: import java.util.Map;
1:5790b4a: import java.util.Set;
1:5790b4a: import java.util.TreeMap;
1:5790b4a: import java.util.TreeSet;
1:5790b4a: import java.util.UUID;
1:5790b4a: 
1:5790b4a: import org.junit.Assert;
1:5790b4a: import org.junit.Test;
1:5790b4a: 
1:e37d577: import org.apache.cassandra.config.DatabaseDescriptor;
1:5790b4a: import org.apache.cassandra.cql3.CQLTester;
1:5790b4a: import org.apache.cassandra.cql3.UntypedResultSet;
1:5790b4a: import org.apache.cassandra.cql3.functions.FunctionName;
1:5790b4a: import org.apache.cassandra.exceptions.FunctionExecutionException;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:5790b4a: import org.apache.cassandra.utils.UUIDGen;
1:5790b4a: 
1:5790b4a: public class UFPureScriptTest extends CQLTester
3:5790b4a: {
1:5790b4a:     // Just JavaScript UDFs to check how UDF - especially security/class-loading/sandboxing stuff -
1:5790b4a:     // behaves, if no Java UDF has been executed before.
1:5790b4a: 
1:5790b4a:     // Do not add any other test here - especially none using Java UDFs
1:5790b4a: 
2:5790b4a:     @Test
1:5790b4a:     public void testJavascriptSimpleCollections() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>)");
1:5790b4a: 
1:5790b4a:         String fName1 = createFunction(KEYSPACE_PER_TEST, "list<double>",
1:5790b4a:                                        "CREATE FUNCTION %s( lst list<double> ) " +
6:5790b4a:                                        "RETURNS NULL ON NULL INPUT " +
2:5790b4a:                                        "RETURNS list<double> " +
6:5790b4a:                                        "LANGUAGE javascript\n" +
1:5790b4a:                                        "AS 'lst;';");
1:5790b4a:         String fName2 = createFunction(KEYSPACE_PER_TEST, "set<text>",
1:5790b4a:                                        "CREATE FUNCTION %s( st set<text> ) " +
1:5790b4a:                                        "RETURNS NULL ON NULL INPUT " +
2:5790b4a:                                        "RETURNS set<text> " +
1:5790b4a:                                        "LANGUAGE javascript\n" +
1:5790b4a:                                        "AS 'st;';");
1:5790b4a:         String fName3 = createFunction(KEYSPACE_PER_TEST, "map<int, boolean>",
1:5790b4a:                                        "CREATE FUNCTION %s( mp map<int, boolean> ) " +
1:5790b4a:                                        "RETURNS NULL ON NULL INPUT " +
2:5790b4a:                                        "RETURNS map<int, boolean> " +
1:5790b4a:                                        "LANGUAGE javascript\n" +
1:5790b4a:                                        "AS 'mp;';");
1:5790b4a: 
2:5790b4a:         List<Double> list = Arrays.asList(1d, 2d, 3d);
2:5790b4a:         Set<String> set = new TreeSet<>(Arrays.asList("one", "three", "two"));
2:5790b4a:         Map<Integer, Boolean> map = new TreeMap<>();
2:5790b4a:         map.put(1, true);
2:5790b4a:         map.put(2, false);
2:5790b4a:         map.put(3, true);
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map);
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"),
1:5790b4a:                    row(list, set, map));
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"),
1:5790b4a:                    row(list, set, map));
1:5790b4a: 
1:e0adc16:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
6:5790b4a:             assertRowsNet(version,
1:5790b4a:                           executeNet(version, "SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"),
1:5790b4a:                           row(list, set, map));
3:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptTupleType() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, tup frozen<tuple<double, text, int, boolean>>)");
1:5790b4a: 
1:5790b4a:         String fName = createFunction(KEYSPACE_PER_TEST, "tuple<double, text, int, boolean>",
1:5790b4a:                                       "CREATE FUNCTION %s( tup tuple<double, text, int, boolean> ) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS tuple<double, text, int, boolean> " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS $$tup;$$;");
1:5790b4a: 
1:5790b4a:         Object t = tuple(1d, "foo", 2, true);
1:5790b4a: 
2:5790b4a:         execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t);
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT tup FROM %s WHERE key = 1"),
2:5790b4a:                    row(t));
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT " + fName + "(tup) FROM %s WHERE key = 1"),
1:5790b4a:                    row(t));
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptUserType() throws Throwable
1:5790b4a:     {
1:5790b4a:         String type = createType("CREATE TYPE %s (txt text, i int)");
1:5790b4a: 
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, udt frozen<" + type + ">)");
1:5790b4a: 
1:5790b4a:         String fUdt1 = createFunction(KEYSPACE, type,
1:5790b4a:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS " + type + ' ' +
1:5790b4a:                                       "LANGUAGE javascript\n" +
6:5790b4a:                                       "AS $$" +
1:5790b4a:                                       "     udt;$$;");
1:5790b4a:         String fUdt2 = createFunction(KEYSPACE, type,
1:5790b4a:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS text " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS $$" +
1:5790b4a:                                       "     udt.getString(\"txt\");$$;");
1:5790b4a:         String fUdt3 = createFunction(KEYSPACE, type,
1:5790b4a:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS int " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS $$" +
1:5790b4a:                                       "     udt.getInt(\"i\");$$;");
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, udt) VALUES (1, {txt: 'one', i:1})");
1:5790b4a: 
1:5790b4a:         UntypedResultSet rows = execute("SELECT " + fUdt1 + "(udt) FROM %s WHERE key = 1");
1:5790b4a:         Assert.assertEquals(1, rows.size());
1:5790b4a:         assertRows(execute("SELECT " + fUdt2 + "(udt) FROM %s WHERE key = 1"),
1:5790b4a:                    row("one"));
1:5790b4a:         assertRows(execute("SELECT " + fUdt3 + "(udt) FROM %s WHERE key = 1"),
1:5790b4a:                    row(1));
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptUTCollections() throws Throwable
1:5790b4a:     {
1:5790b4a:         String type = createType("CREATE TYPE %s (txt text, i int)");
1:5790b4a: 
1:5790b4a:         createTable(String.format("CREATE TABLE %%s " +
1:5790b4a:                                   "(key int primary key, lst list<frozen<%s>>, st set<frozen<%s>>, mp map<int, frozen<%s>>)",
1:5790b4a:                                   type, type, type));
1:5790b4a: 
1:5790b4a:         String fName = createFunction(KEYSPACE, "list<frozen<" + type + ">>",
1:5790b4a:                                       "CREATE FUNCTION %s( lst list<frozen<" + type + ">> ) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS text " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS $$" +
1:5790b4a:                                       "        lst.get(1).getString(\"txt\");$$;");
1:5790b4a:         createFunctionOverload(fName, "set<frozen<" + type + ">>",
1:5790b4a:                                "CREATE FUNCTION %s( st set<frozen<" + type + ">> ) " +
1:5790b4a:                                "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                "RETURNS text " +
1:5790b4a:                                "LANGUAGE javascript\n" +
1:5790b4a:                                "AS $$" +
1:5790b4a:                                "        st.iterator().next().getString(\"txt\");$$;");
1:5790b4a:         createFunctionOverload(fName, "map<int, frozen<" + type + ">>",
1:5790b4a:                                "CREATE FUNCTION %s( mp map<int, frozen<" + type + ">> ) " +
1:5790b4a:                                "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                "RETURNS text " +
1:5790b4a:                                "LANGUAGE javascript\n" +
1:5790b4a:                                "AS $$" +
1:5790b4a:                                "        mp.get(java.lang.Integer.valueOf(3)).getString(\"txt\");$$;");
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, lst, st, mp) values (1, " +
1:5790b4a:                 // list<frozen<UDT>>
1:5790b4a:                 "[ {txt: 'one', i:1}, {txt: 'three', i:1}, {txt: 'one', i:1} ] , " +
1:5790b4a:                 // set<frozen<UDT>>
1:5790b4a:                 "{ {txt: 'one', i:1}, {txt: 'three', i:3}, {txt: 'two', i:2} }, " +
1:5790b4a:                 // map<int, frozen<UDT>>
1:5790b4a:                 "{ 1: {txt: 'one', i:1}, 2: {txt: 'one', i:3}, 3: {txt: 'two', i:2} })");
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT " + fName + "(lst) FROM %s WHERE key = 1"),
1:5790b4a:                    row("three"));
1:5790b4a:         assertRows(execute("SELECT " + fName + "(st) FROM %s WHERE key = 1"),
1:5790b4a:                    row("one"));
1:5790b4a:         assertRows(execute("SELECT " + fName + "(mp) FROM %s WHERE key = 1"),
1:5790b4a:                    row("two"));
1:5790b4a: 
1:5790b4a:         String cqlSelect = "SELECT " + fName + "(lst), " + fName + "(st), " + fName + "(mp) FROM %s WHERE key = 1";
1:5790b4a:         assertRows(execute(cqlSelect),
1:5790b4a:                    row("three", "one", "two"));
1:5790b4a: 
2:5790b4a:         // same test - but via native protocol
1:e0adc16:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
1:5790b4a:             assertRowsNet(version,
1:5790b4a:                           executeNet(version, cqlSelect),
1:5790b4a:                           row("three", "one", "two"));
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptFunction() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:5790b4a: 
1:5790b4a:         String functionBody = '\n' +
1:5790b4a:                               "  Math.sin(val);\n";
1:5790b4a: 
1:5790b4a:         String fName = createFunction(KEYSPACE, "double",
1:5790b4a:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
2:5790b4a:                                       "RETURNS double " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS '" + functionBody + "';");
1:5790b4a: 
1:5790b4a:         FunctionName fNameName = parseFunctionName(fName);
1:5790b4a: 
1:5790b4a:         assertRows(execute("SELECT language, body FROM system_schema.functions WHERE keyspace_name=? AND function_name=?",
1:5790b4a:                            fNameName.keyspace, fNameName.name),
1:5790b4a:                    row("javascript", functionBody));
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 2, 2d);
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 3, 3d);
1:5790b4a:         assertRows(execute("SELECT key, val, " + fName + "(val) FROM %s"),
1:5790b4a:                    row(1, 1d, Math.sin(1d)),
1:5790b4a:                    row(2, 2d, Math.sin(2d)),
1:5790b4a:                    row(3, 3d, Math.sin(3d))
1:5790b4a:         );
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptBadReturnType() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:5790b4a: 
1:5790b4a:         String fName = createFunction(KEYSPACE, "double",
1:5790b4a:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS double " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS '\"string\";';");
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:5790b4a:         // throws IRE with ClassCastException
1:5790b4a:         assertInvalidMessage("Invalid value for CQL type double", "SELECT key, val, " + fName + "(val) FROM %s");
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testJavascriptThrow() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:5790b4a: 
1:5790b4a:         String fName = createFunction(KEYSPACE, "double",
1:5790b4a:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:5790b4a:                                       "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                       "RETURNS double " +
1:5790b4a:                                       "LANGUAGE javascript\n" +
1:5790b4a:                                       "AS 'throw \"fool\";';");
1:5790b4a: 
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:5790b4a:         // throws IRE with ScriptException
1:5790b4a:         assertInvalidThrowMessage("fool", FunctionExecutionException.class,
1:5790b4a:                                   "SELECT key, val, " + fName + "(val) FROM %s");
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testScriptReturnTypeCasting() throws Throwable
1:5790b4a:     {
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:5790b4a:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:5790b4a: 
1:5790b4a:         Object[][] variations = {
1:5790b4a:                                 new Object[]    {   "true",     "boolean",  true    },
1:5790b4a:                                 new Object[]    {   "false",    "boolean",  false   },
1:5790b4a:                                 new Object[]    {   "100",      "tinyint",  (byte)100 },
1:5790b4a:                                 new Object[]    {   "100.",     "tinyint",  (byte)100 },
1:5790b4a:                                 new Object[]    {   "100",      "smallint", (short)100 },
1:5790b4a:                                 new Object[]    {   "100.",     "smallint", (short)100 },
1:5790b4a:                                 new Object[]    {   "100",      "int",      100     },
1:5790b4a:                                 new Object[]    {   "100.",     "int",      100     },
1:5790b4a:                                 new Object[]    {   "100",      "double",   100d    },
1:5790b4a:                                 new Object[]    {   "100.",     "double",   100d    },
1:5790b4a:                                 new Object[]    {   "100",      "bigint",   100L    },
1:5790b4a:                                 new Object[]    {   "100.",     "bigint",   100L    },
1:5790b4a:                                 new Object[]    {   "100",      "varint",   BigInteger.valueOf(100L)    },
1:5790b4a:                                 new Object[]    {   "100.",     "varint",   BigInteger.valueOf(100L)    },
1:5790b4a:                                 new Object[]    {   "parseInt(\"100\");", "decimal",  BigDecimal.valueOf(100d)    },
1:5790b4a:                                 new Object[]    {   "100.",     "decimal",  BigDecimal.valueOf(100d)    },
1:5790b4a:                                 };
1:5790b4a: 
1:5790b4a:         for (Object[] variation : variations)
1:5790b4a:         {
1:5790b4a:             Object functionBody = variation[0];
1:5790b4a:             Object returnType = variation[1];
1:5790b4a:             Object expectedResult = variation[2];
1:5790b4a: 
1:5790b4a:             String fName = createFunction(KEYSPACE, "double",
1:5790b4a:                                           "CREATE OR REPLACE FUNCTION %s(val double) " +
1:5790b4a:                                           "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                           "RETURNS " +returnType + ' ' +
1:5790b4a:                                           "LANGUAGE javascript " +
1:5790b4a:                                           "AS '" + functionBody + ";';");
1:5790b4a:             assertRows(execute("SELECT key, val, " + fName + "(val) FROM %s"),
1:5790b4a:                        row(1, 1d, expectedResult));
1:5790b4a:         }
1:5790b4a:     }
1:5790b4a: 
1:5790b4a:     @Test
1:5790b4a:     public void testScriptParamReturnTypes() throws Throwable
1:5790b4a:     {
1:5790b4a:         UUID ruuid = UUID.randomUUID();
1:5790b4a:         UUID tuuid = UUIDGen.getTimeUUID();
1:5790b4a: 
1:5790b4a:         createTable("CREATE TABLE %s (key int primary key, " +
1:5790b4a:                     "tival tinyint, sival smallint, ival int, lval bigint, fval float, dval double, vval varint, ddval decimal, " +
1:5790b4a:                     "timval time, dtval date, tsval timestamp, uval uuid, tuval timeuuid)");
1:5790b4a:         execute("INSERT INTO %s (key, tival, sival, ival, lval, fval, dval, vval, ddval, timval, dtval, tsval, uval, tuval) VALUES " +
1:5790b4a:                 "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1,
1:5790b4a:                 (byte)1, (short)1, 1, 1L, 1f, 1d, BigInteger.valueOf(1L), BigDecimal.valueOf(1d), 1L, Integer.MAX_VALUE, new Date(1), ruuid, tuuid);
1:5790b4a: 
1:5790b4a:         Object[][] variations = {
1:5790b4a:                                 new Object[] {  "tinyint",  "tival",    (byte)1,                (byte)2  },
1:5790b4a:                                 new Object[] {  "smallint", "sival",    (short)1,               (short)2  },
1:5790b4a:                                 new Object[] {  "int",      "ival",     1,                      2  },
1:5790b4a:                                 new Object[] {  "bigint",   "lval",     1L,                     2L  },
1:5790b4a:                                 new Object[] {  "float",    "fval",     1f,                     2f  },
1:5790b4a:                                 new Object[] {  "double",   "dval",     1d,                     2d  },
1:5790b4a:                                 new Object[] {  "varint",   "vval",     BigInteger.valueOf(1L), BigInteger.valueOf(2L)  },
1:5790b4a:                                 new Object[] {  "decimal",  "ddval",    BigDecimal.valueOf(1d), BigDecimal.valueOf(2d)  },
1:5790b4a:                                 new Object[] {  "time",     "timval",   1L,                     2L  },
1:5790b4a:                                 };
1:5790b4a: 
1:5790b4a:         for (Object[] variation : variations)
1:5790b4a:         {
1:5790b4a:             Object type = variation[0];
1:5790b4a:             Object col = variation[1];
1:5790b4a:             Object expected1 = variation[2];
1:5790b4a:             Object expected2 = variation[3];
1:5790b4a:             String fName = createFunction(KEYSPACE, type.toString(),
1:5790b4a:                            "CREATE OR REPLACE FUNCTION %s(val " + type + ") " +
1:5790b4a:                            "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                            "RETURNS " + type + ' ' +
1:5790b4a:                            "LANGUAGE javascript " +
1:5790b4a:                            "AS 'val+1;';");
1:5790b4a:             assertRows(execute("SELECT key, " + col + ", " + fName + '(' + col + ") FROM %s"),
1:5790b4a:                        row(1, expected1, expected2));
1:5790b4a:         }
1:e37d577: 
1:5790b4a:         variations = new Object[][] {
1:5790b4a:                      new Object[] {  "timestamp","tsval",    new Date(1),            new Date(1)  },
1:5790b4a:                      new Object[] {  "uuid",     "uval",     ruuid,                  ruuid  },
1:5790b4a:                      new Object[] {  "timeuuid", "tuval",    tuuid,                  tuuid  },
1:5790b4a:                      new Object[] {  "date",     "dtval",    Integer.MAX_VALUE,      Integer.MAX_VALUE },
1:5790b4a:         };
1:5790b4a: 
1:5790b4a:         for (Object[] variation : variations)
1:5790b4a:         {
1:5790b4a:             Object type = variation[0];
1:5790b4a:             Object col = variation[1];
1:5790b4a:             Object expected1 = variation[2];
1:5790b4a:             Object expected2 = variation[3];
1:5790b4a:             String fName = createFunction(KEYSPACE, type.toString(),
1:5790b4a:                                           "CREATE OR REPLACE FUNCTION %s(val " + type + ") " +
1:5790b4a:                                           "RETURNS NULL ON NULL INPUT " +
1:5790b4a:                                           "RETURNS " + type + ' ' +
1:5790b4a:                                           "LANGUAGE javascript " +
1:5790b4a:                                           "AS 'val;';");
1:5790b4a:             assertRows(execute("SELECT key, " + col + ", " + fName + '(' + col + ") FROM %s"),
1:5790b4a:                        row(1, expected1, expected2));
1:5790b4a:         }
1:5790b4a:     }
1:5790b4a: 
1:e37d577:     @Test
1:e37d577:     public void testJavascriptDisabled() throws Throwable
1:e37d577:     {
1:e37d577:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:e37d577: 
1:e37d577:         DatabaseDescriptor.enableScriptedUserDefinedFunctions(false);
1:e37d577:         try
1:e37d577:         {
1:e37d577:             assertInvalid("double",
1:e37d577:                           "CREATE OR REPLACE FUNCTION " + KEYSPACE + ".assertNotEnabled(val double) " +
1:e37d577:                           "RETURNS NULL ON NULL INPUT " +
1:e37d577:                           "RETURNS double " +
1:e37d577:                           "LANGUAGE javascript\n" +
1:e37d577:                           "AS 'Math.sin(val);';");
1:e37d577:         }
1:e37d577:         finally
1:e37d577:         {
1:e37d577:             DatabaseDescriptor.enableScriptedUserDefinedFunctions(true);
1:e37d577:         }
1:e37d577:     }
1:5790b4a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
/////////////////////////////////////////////////////////////////////////
1:         for (ProtocolVersion version : PROTOCOL_VERSIONS)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:3ae01dd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e37d577
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testJavascriptDisabled() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, val double)");
1: 
1:         DatabaseDescriptor.enableScriptedUserDefinedFunctions(false);
1:         try
1:         {
1:             assertInvalid("double",
1:                           "CREATE OR REPLACE FUNCTION " + KEYSPACE + ".assertNotEnabled(val double) " +
1:                           "RETURNS NULL ON NULL INPUT " +
1:                           "RETURNS double " +
1:                           "LANGUAGE javascript\n" +
1:                           "AS 'Math.sin(val);';");
1:         }
1:         finally
1:         {
1:             DatabaseDescriptor.enableScriptedUserDefinedFunctions(true);
1:         }
1:     }
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.cql3.validation.entities;
1: 
1: import java.math.BigDecimal;
1: import java.math.BigInteger;
1: import java.util.Arrays;
1: import java.util.Date;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.TreeMap;
1: import java.util.TreeSet;
1: import java.util.UUID;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
0: import com.datastax.driver.core.DataType;
0: import com.datastax.driver.core.TupleType;
0: import com.datastax.driver.core.TupleValue;
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.cql3.UntypedResultSet;
1: import org.apache.cassandra.cql3.functions.FunctionName;
1: import org.apache.cassandra.exceptions.FunctionExecutionException;
0: import org.apache.cassandra.transport.Server;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: public class UFPureScriptTest extends CQLTester
1: {
1:     // Just JavaScript UDFs to check how UDF - especially security/class-loading/sandboxing stuff -
1:     // behaves, if no Java UDF has been executed before.
1: 
1:     // Do not add any other test here - especially none using Java UDFs
1: 
1:     @Test
1:     public void testJavascriptSimpleCollections() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>)");
1: 
1:         String fName1 = createFunction(KEYSPACE_PER_TEST, "list<double>",
1:                                        "CREATE FUNCTION %s( lst list<double> ) " +
1:                                        "RETURNS NULL ON NULL INPUT " +
1:                                        "RETURNS list<double> " +
1:                                        "LANGUAGE javascript\n" +
1:                                        "AS 'lst;';");
1:         String fName2 = createFunction(KEYSPACE_PER_TEST, "set<text>",
1:                                        "CREATE FUNCTION %s( st set<text> ) " +
1:                                        "RETURNS NULL ON NULL INPUT " +
1:                                        "RETURNS set<text> " +
1:                                        "LANGUAGE javascript\n" +
1:                                        "AS 'st;';");
1:         String fName3 = createFunction(KEYSPACE_PER_TEST, "map<int, boolean>",
1:                                        "CREATE FUNCTION %s( mp map<int, boolean> ) " +
1:                                        "RETURNS NULL ON NULL INPUT " +
1:                                        "RETURNS map<int, boolean> " +
1:                                        "LANGUAGE javascript\n" +
1:                                        "AS 'mp;';");
1: 
1:         List<Double> list = Arrays.asList(1d, 2d, 3d);
1:         Set<String> set = new TreeSet<>(Arrays.asList("one", "three", "two"));
1:         Map<Integer, Boolean> map = new TreeMap<>();
1:         map.put(1, true);
1:         map.put(2, false);
1:         map.put(3, true);
1: 
1:         execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map);
1: 
1:         assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"),
1:                    row(list, set, map));
1: 
1:         assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"),
1:                    row(list, set, map));
1: 
0:         for (int version = Server.VERSION_2; version <= maxProtocolVersion; version++)
1:             assertRowsNet(version,
1:                           executeNet(version, "SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"),
1:                           row(list, set, map));
1:     }
1: 
1:     @Test
1:     public void testJavascriptTupleType() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, tup frozen<tuple<double, text, int, boolean>>)");
1: 
1:         String fName = createFunction(KEYSPACE_PER_TEST, "tuple<double, text, int, boolean>",
1:                                       "CREATE FUNCTION %s( tup tuple<double, text, int, boolean> ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS tuple<double, text, int, boolean> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$tup;$$;");
1: 
1:         Object t = tuple(1d, "foo", 2, true);
1: 
1:         execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t);
1: 
1:         assertRows(execute("SELECT tup FROM %s WHERE key = 1"),
1:                    row(t));
1: 
1:         assertRows(execute("SELECT " + fName + "(tup) FROM %s WHERE key = 1"),
1:                    row(t));
1:     }
1: 
1:     @Test
0:     public void testJavascriptTupleTypeCollection() throws Throwable
1:     {
0:         String tupleTypeDef = "tuple<double, list<double>, set<text>, map<int, boolean>>";
0:         createTable("CREATE TABLE %s (key int primary key, tup frozen<" + tupleTypeDef + ">)");
1: 
0:         String fTup1 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
0:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
0:                                       "RETURNS tuple<double, list<double>, set<text>, map<int, boolean>> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
0:                                       "       tup;$$;");
0:         String fTup2 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
0:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS double " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
0:                                       "       tup.getDouble(0);$$;");
0:         String fTup3 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
0:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS list<double> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
0:                                       "       tup.getList(1, java.lang.Double.class);$$;");
0:         String fTup4 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
0:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS set<text> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
0:                                       "       tup.getSet(2, java.lang.String.class);$$;");
0:         String fTup5 = createFunction(KEYSPACE_PER_TEST, tupleTypeDef,
0:                                       "CREATE FUNCTION %s( tup " + tupleTypeDef + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS map<int, boolean> " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
0:                                       "       tup.getMap(3, java.lang.Integer.class, java.lang.Boolean.class);$$;");
1: 
1:         List<Double> list = Arrays.asList(1d, 2d, 3d);
1:         Set<String> set = new TreeSet<>(Arrays.asList("one", "three", "two"));
1:         Map<Integer, Boolean> map = new TreeMap<>();
1:         map.put(1, true);
1:         map.put(2, false);
1:         map.put(3, true);
1: 
0:         Object t = tuple(1d, list, set, map);
1: 
1:         execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t);
1: 
0:         assertRows(execute("SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
1:                    row(t));
0:         assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
0:                    row(1d));
0:         assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
0:                    row(list));
0:         assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
0:                    row(set));
0:         assertRows(execute("SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
0:                    row(map));
1: 
1:         // same test - but via native protocol
0:         TupleType tType = TupleType.of(DataType.cdouble(),
0:                                        DataType.list(DataType.cdouble()),
0:                                        DataType.set(DataType.text()),
0:                                        DataType.map(DataType.cint(), DataType.cboolean()));
0:         TupleValue tup = tType.newValue(1d, list, set, map);
0:         for (int version = Server.VERSION_2; version <= maxProtocolVersion; version++)
1:         {
1:             assertRowsNet(version,
0:                           executeNet(version, "SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"),
0:                           row(tup));
1:             assertRowsNet(version,
0:                           executeNet(version, "SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"),
0:                           row(1d));
1:             assertRowsNet(version,
0:                           executeNet(version, "SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"),
0:                           row(list));
1:             assertRowsNet(version,
0:                           executeNet(version, "SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"),
0:                           row(set));
1:             assertRowsNet(version,
0:                           executeNet(version, "SELECT " + fTup5 + "(tup) FROM %s WHERE key = 1"),
0:                           row(map));
1:         }
1:     }
1: 
1:     @Test
1:     public void testJavascriptUserType() throws Throwable
1:     {
1:         String type = createType("CREATE TYPE %s (txt text, i int)");
1: 
1:         createTable("CREATE TABLE %s (key int primary key, udt frozen<" + type + ">)");
1: 
1:         String fUdt1 = createFunction(KEYSPACE, type,
1:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS " + type + ' ' +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "     udt;$$;");
1:         String fUdt2 = createFunction(KEYSPACE, type,
1:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS text " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "     udt.getString(\"txt\");$$;");
1:         String fUdt3 = createFunction(KEYSPACE, type,
1:                                       "CREATE FUNCTION %s( udt " + type + " ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS int " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "     udt.getInt(\"i\");$$;");
1: 
1:         execute("INSERT INTO %s (key, udt) VALUES (1, {txt: 'one', i:1})");
1: 
1:         UntypedResultSet rows = execute("SELECT " + fUdt1 + "(udt) FROM %s WHERE key = 1");
1:         Assert.assertEquals(1, rows.size());
1:         assertRows(execute("SELECT " + fUdt2 + "(udt) FROM %s WHERE key = 1"),
1:                    row("one"));
1:         assertRows(execute("SELECT " + fUdt3 + "(udt) FROM %s WHERE key = 1"),
1:                    row(1));
1:     }
1: 
1:     @Test
1:     public void testJavascriptUTCollections() throws Throwable
1:     {
1:         String type = createType("CREATE TYPE %s (txt text, i int)");
1: 
1:         createTable(String.format("CREATE TABLE %%s " +
1:                                   "(key int primary key, lst list<frozen<%s>>, st set<frozen<%s>>, mp map<int, frozen<%s>>)",
1:                                   type, type, type));
1: 
1:         String fName = createFunction(KEYSPACE, "list<frozen<" + type + ">>",
1:                                       "CREATE FUNCTION %s( lst list<frozen<" + type + ">> ) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS text " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS $$" +
1:                                       "        lst.get(1).getString(\"txt\");$$;");
1:         createFunctionOverload(fName, "set<frozen<" + type + ">>",
1:                                "CREATE FUNCTION %s( st set<frozen<" + type + ">> ) " +
1:                                "RETURNS NULL ON NULL INPUT " +
1:                                "RETURNS text " +
1:                                "LANGUAGE javascript\n" +
1:                                "AS $$" +
1:                                "        st.iterator().next().getString(\"txt\");$$;");
1:         createFunctionOverload(fName, "map<int, frozen<" + type + ">>",
1:                                "CREATE FUNCTION %s( mp map<int, frozen<" + type + ">> ) " +
1:                                "RETURNS NULL ON NULL INPUT " +
1:                                "RETURNS text " +
1:                                "LANGUAGE javascript\n" +
1:                                "AS $$" +
1:                                "        mp.get(java.lang.Integer.valueOf(3)).getString(\"txt\");$$;");
1: 
1:         execute("INSERT INTO %s (key, lst, st, mp) values (1, " +
1:                 // list<frozen<UDT>>
1:                 "[ {txt: 'one', i:1}, {txt: 'three', i:1}, {txt: 'one', i:1} ] , " +
1:                 // set<frozen<UDT>>
1:                 "{ {txt: 'one', i:1}, {txt: 'three', i:3}, {txt: 'two', i:2} }, " +
1:                 // map<int, frozen<UDT>>
1:                 "{ 1: {txt: 'one', i:1}, 2: {txt: 'one', i:3}, 3: {txt: 'two', i:2} })");
1: 
1:         assertRows(execute("SELECT " + fName + "(lst) FROM %s WHERE key = 1"),
1:                    row("three"));
1:         assertRows(execute("SELECT " + fName + "(st) FROM %s WHERE key = 1"),
1:                    row("one"));
1:         assertRows(execute("SELECT " + fName + "(mp) FROM %s WHERE key = 1"),
1:                    row("two"));
1: 
1:         String cqlSelect = "SELECT " + fName + "(lst), " + fName + "(st), " + fName + "(mp) FROM %s WHERE key = 1";
1:         assertRows(execute(cqlSelect),
1:                    row("three", "one", "two"));
1: 
1:         // same test - but via native protocol
0:         for (int version = Server.VERSION_2; version <= maxProtocolVersion; version++)
1:             assertRowsNet(version,
1:                           executeNet(version, cqlSelect),
1:                           row("three", "one", "two"));
1:     }
1: 
1:     @Test
1:     public void testJavascriptFunction() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, val double)");
1: 
1:         String functionBody = '\n' +
1:                               "  Math.sin(val);\n";
1: 
1:         String fName = createFunction(KEYSPACE, "double",
1:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS double " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS '" + functionBody + "';");
1: 
1:         FunctionName fNameName = parseFunctionName(fName);
1: 
1:         assertRows(execute("SELECT language, body FROM system_schema.functions WHERE keyspace_name=? AND function_name=?",
1:                            fNameName.keyspace, fNameName.name),
1:                    row("javascript", functionBody));
1: 
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 2, 2d);
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 3, 3d);
1:         assertRows(execute("SELECT key, val, " + fName + "(val) FROM %s"),
1:                    row(1, 1d, Math.sin(1d)),
1:                    row(2, 2d, Math.sin(2d)),
1:                    row(3, 3d, Math.sin(3d))
1:         );
1:     }
1: 
1:     @Test
1:     public void testJavascriptBadReturnType() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, val double)");
1: 
1:         String fName = createFunction(KEYSPACE, "double",
1:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS double " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS '\"string\";';");
1: 
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:         // throws IRE with ClassCastException
1:         assertInvalidMessage("Invalid value for CQL type double", "SELECT key, val, " + fName + "(val) FROM %s");
1:     }
1: 
1:     @Test
1:     public void testJavascriptThrow() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, val double)");
1: 
1:         String fName = createFunction(KEYSPACE, "double",
1:                                       "CREATE OR REPLACE FUNCTION %s(val double) " +
1:                                       "RETURNS NULL ON NULL INPUT " +
1:                                       "RETURNS double " +
1:                                       "LANGUAGE javascript\n" +
1:                                       "AS 'throw \"fool\";';");
1: 
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1:         // throws IRE with ScriptException
1:         assertInvalidThrowMessage("fool", FunctionExecutionException.class,
1:                                   "SELECT key, val, " + fName + "(val) FROM %s");
1:     }
1: 
1:     @Test
1:     public void testScriptReturnTypeCasting() throws Throwable
1:     {
1:         createTable("CREATE TABLE %s (key int primary key, val double)");
1:         execute("INSERT INTO %s (key, val) VALUES (?, ?)", 1, 1d);
1: 
1:         Object[][] variations = {
1:                                 new Object[]    {   "true",     "boolean",  true    },
1:                                 new Object[]    {   "false",    "boolean",  false   },
1:                                 new Object[]    {   "100",      "tinyint",  (byte)100 },
1:                                 new Object[]    {   "100.",     "tinyint",  (byte)100 },
1:                                 new Object[]    {   "100",      "smallint", (short)100 },
1:                                 new Object[]    {   "100.",     "smallint", (short)100 },
1:                                 new Object[]    {   "100",      "int",      100     },
1:                                 new Object[]    {   "100.",     "int",      100     },
1:                                 new Object[]    {   "100",      "double",   100d    },
1:                                 new Object[]    {   "100.",     "double",   100d    },
1:                                 new Object[]    {   "100",      "bigint",   100L    },
1:                                 new Object[]    {   "100.",     "bigint",   100L    },
1:                                 new Object[]    {   "100",      "varint",   BigInteger.valueOf(100L)    },
1:                                 new Object[]    {   "100.",     "varint",   BigInteger.valueOf(100L)    },
1:                                 new Object[]    {   "parseInt(\"100\");", "decimal",  BigDecimal.valueOf(100d)    },
1:                                 new Object[]    {   "100.",     "decimal",  BigDecimal.valueOf(100d)    },
1:                                 };
1: 
1:         for (Object[] variation : variations)
1:         {
1:             Object functionBody = variation[0];
1:             Object returnType = variation[1];
1:             Object expectedResult = variation[2];
1: 
1:             String fName = createFunction(KEYSPACE, "double",
1:                                           "CREATE OR REPLACE FUNCTION %s(val double) " +
1:                                           "RETURNS NULL ON NULL INPUT " +
1:                                           "RETURNS " +returnType + ' ' +
1:                                           "LANGUAGE javascript " +
1:                                           "AS '" + functionBody + ";';");
1:             assertRows(execute("SELECT key, val, " + fName + "(val) FROM %s"),
1:                        row(1, 1d, expectedResult));
1:         }
1:     }
1: 
1:     @Test
1:     public void testScriptParamReturnTypes() throws Throwable
1:     {
1:         UUID ruuid = UUID.randomUUID();
1:         UUID tuuid = UUIDGen.getTimeUUID();
1: 
1:         createTable("CREATE TABLE %s (key int primary key, " +
1:                     "tival tinyint, sival smallint, ival int, lval bigint, fval float, dval double, vval varint, ddval decimal, " +
1:                     "timval time, dtval date, tsval timestamp, uval uuid, tuval timeuuid)");
1:         execute("INSERT INTO %s (key, tival, sival, ival, lval, fval, dval, vval, ddval, timval, dtval, tsval, uval, tuval) VALUES " +
1:                 "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 1,
1:                 (byte)1, (short)1, 1, 1L, 1f, 1d, BigInteger.valueOf(1L), BigDecimal.valueOf(1d), 1L, Integer.MAX_VALUE, new Date(1), ruuid, tuuid);
1: 
1:         Object[][] variations = {
1:                                 new Object[] {  "tinyint",  "tival",    (byte)1,                (byte)2  },
1:                                 new Object[] {  "smallint", "sival",    (short)1,               (short)2  },
1:                                 new Object[] {  "int",      "ival",     1,                      2  },
1:                                 new Object[] {  "bigint",   "lval",     1L,                     2L  },
1:                                 new Object[] {  "float",    "fval",     1f,                     2f  },
1:                                 new Object[] {  "double",   "dval",     1d,                     2d  },
1:                                 new Object[] {  "varint",   "vval",     BigInteger.valueOf(1L), BigInteger.valueOf(2L)  },
1:                                 new Object[] {  "decimal",  "ddval",    BigDecimal.valueOf(1d), BigDecimal.valueOf(2d)  },
1:                                 new Object[] {  "time",     "timval",   1L,                     2L  },
1:                                 };
1: 
1:         for (Object[] variation : variations)
1:         {
1:             Object type = variation[0];
1:             Object col = variation[1];
1:             Object expected1 = variation[2];
1:             Object expected2 = variation[3];
1:             String fName = createFunction(KEYSPACE, type.toString(),
1:                            "CREATE OR REPLACE FUNCTION %s(val " + type + ") " +
1:                            "RETURNS NULL ON NULL INPUT " +
1:                            "RETURNS " + type + ' ' +
1:                            "LANGUAGE javascript " +
1:                            "AS 'val+1;';");
1:             assertRows(execute("SELECT key, " + col + ", " + fName + '(' + col + ") FROM %s"),
1:                        row(1, expected1, expected2));
1:         }
1: 
1:         variations = new Object[][] {
1:                      new Object[] {  "timestamp","tsval",    new Date(1),            new Date(1)  },
1:                      new Object[] {  "uuid",     "uval",     ruuid,                  ruuid  },
1:                      new Object[] {  "timeuuid", "tuval",    tuuid,                  tuuid  },
1:                      new Object[] {  "date",     "dtval",    Integer.MAX_VALUE,      Integer.MAX_VALUE },
1:         };
1: 
1:         for (Object[] variation : variations)
1:         {
1:             Object type = variation[0];
1:             Object col = variation[1];
1:             Object expected1 = variation[2];
1:             Object expected2 = variation[3];
1:             String fName = createFunction(KEYSPACE, type.toString(),
1:                                           "CREATE OR REPLACE FUNCTION %s(val " + type + ") " +
1:                                           "RETURNS NULL ON NULL INPUT " +
1:                                           "RETURNS " + type + ' ' +
1:                                           "LANGUAGE javascript " +
1:                                           "AS 'val;';");
1:             assertRows(execute("SELECT key, " + col + ", " + fName + '(' + col + ") FROM %s"),
1:                        row(1, expected1, expected2));
1:         }
1:     }
1: }
author:blerer
-------------------------------------------------------------------------------
commit:8439e74
/////////////////////////////////////////////////////////////////////////
0:         for (int version : PROTOCOL_VERSIONS)
/////////////////////////////////////////////////////////////////////////
0:         for (int version : PROTOCOL_VERSIONS)
/////////////////////////////////////////////////////////////////////////
0:         for (int version : PROTOCOL_VERSIONS)
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:06c130e
/////////////////////////////////////////////////////////////////////////
0:         // we use protocol V3 here to encode the expected version because the server
0:         // always serializes Collections using V3 - see CollectionSerializer's
0:         // serialize and deserialize methods.
0:         TupleType tType = tupleTypeOf(Server.VERSION_3,
0:                                       DataType.cdouble(),
0:                                       DataType.list(DataType.cdouble()),
0:                                       DataType.set(DataType.text()),
0:                                       DataType.map(DataType.cint(),
0:                                                    DataType.cboolean()));
============================================================================