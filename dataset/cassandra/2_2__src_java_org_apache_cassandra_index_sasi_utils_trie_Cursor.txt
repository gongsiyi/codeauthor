1:72790dc: /*
1:72790dc:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
3:72790dc:  *
1:72790dc:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:72790dc:  *   you may not use this file except in compliance with the License.
1:72790dc:  *   You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *       http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  *   Unless required by applicable law or agreed to in writing, software
1:72790dc:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  *   See the License for the specific language governing permissions and
1:72790dc:  *   limitations under the License.
1:72790dc:  */
7:72790dc: 
1:72790dc: package org.apache.cassandra.index.sasi.utils.trie;
1:72790dc: 
1:72790dc: import java.util.Map;
1:72790dc: import java.util.Map.Entry;
1:72790dc: 
1:72790dc: /**
1:72790dc:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:72790dc:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:72790dc:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:72790dc:  * on rkapsi/patricia-trie project) only supports String keys)
1:72790dc:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:72790dc:  */
1:72790dc: 
1:72790dc: /**
1:68d2526:  * A {@link Cursor} can be used to traverse a {@link Trie}, visit each node
1:68d2526:  * step by step and make {@link Decision}s on each step how to continue with
1:72790dc:  * traversing the {@link Trie}.
1:72790dc:  */
1:72790dc: public interface Cursor<K, V>
1:72790dc: {
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * The {@link Decision} tells the {@link Cursor} what to do on each step
1:72790dc:      * while traversing the {@link Trie}.
1:68d2526:      *
1:68d2526:      * NOTE: Not all operations that work with a {@link Cursor} support all
1:72790dc:      * {@link Decision} types
1:72790dc:      */
1:72790dc:     enum Decision
1:72790dc:     {
1:68d2526: 
1:72790dc:         /**
1:72790dc:          * Exit the traverse operation
1:72790dc:          */
1:68d2526:         EXIT,
1:68d2526: 
1:72790dc:         /**
1:72790dc:          * Continue with the traverse operation
1:72790dc:          */
1:68d2526:         CONTINUE,
1:68d2526: 
1:72790dc:         /**
1:72790dc:          * Remove the previously returned element
1:72790dc:          * from the {@link Trie} and continue
1:72790dc:          */
1:68d2526:         REMOVE,
1:68d2526: 
1:72790dc:         /**
1:72790dc:          * Remove the previously returned element
1:72790dc:          * from the {@link Trie} and exit from the
1:72790dc:          * traverse operation
1:72790dc:          */
1:72790dc:         REMOVE_AND_EXIT
1:72790dc:     }
1:68d2526: 
1:72790dc:     /**
1:68d2526:      * Called for each {@link Entry} in the {@link Trie}. Return
1:72790dc:      * {@link Decision#EXIT} to finish the {@link Trie} operation,
1:72790dc:      * {@link Decision#CONTINUE} to go to the next {@link Entry},
1:72790dc:      * {@link Decision#REMOVE} to remove the {@link Entry} and
1:72790dc:      * continue iterating or {@link Decision#REMOVE_AND_EXIT} to
1:72790dc:      * remove the {@link Entry} and stop iterating.
1:68d2526:      *
1:72790dc:      * Note: Not all operations support {@link Decision#REMOVE}.
1:72790dc:      */
1:72790dc:     Decision select(Map.Entry<? extends K, ? extends V> entry);
1:72790dc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:  * A {@link Cursor} can be used to traverse a {@link Trie}, visit each node
1:  * step by step and make {@link Decision}s on each step how to continue with
1: 
1:      * The {@link Decision} tells the {@link Cursor} what to do on each step
1:      *
1:      * NOTE: Not all operations that work with a {@link Cursor} support all
1: 
1:         EXIT,
1: 
1:         CONTINUE,
1: 
1:         REMOVE,
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Called for each {@link Entry} in the {@link Trie}. Return
1:      *
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2005-2010 Roger Kapsi, Sam Berlin
1:  *
1:  *   Licensed under the Apache License, Version 2.0 (the "License");
1:  *   you may not use this file except in compliance with the License.
1:  *   You may obtain a copy of the License at
1:  *
1:  *       http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *   Unless required by applicable law or agreed to in writing, software
1:  *   distributed under the License is distributed on an "AS IS" BASIS,
1:  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *   See the License for the specific language governing permissions and
1:  *   limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.utils.trie;
1: 
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: /**
1:  * This class is taken from https://github.com/rkapsi/patricia-trie (v0.6), and slightly modified
1:  * to correspond to Cassandra code style, as the only Patricia Trie implementation,
1:  * which supports pluggable key comparators (e.g. commons-collections PatriciaTrie (which is based
1:  * on rkapsi/patricia-trie project) only supports String keys)
1:  * but unfortunately is not deployed to the maven central as a downloadable artifact.
1:  */
1: 
1: /**
0:  * A {@link Cursor} can be used to traverse a {@link Trie}, visit each node 
0:  * step by step and make {@link Decision}s on each step how to continue with 
1:  * traversing the {@link Trie}.
1:  */
1: public interface Cursor<K, V>
1: {
1:     
1:     /**
0:      * The {@link Decision} tells the {@link Cursor} what to do on each step 
1:      * while traversing the {@link Trie}.
1:      * 
0:      * NOTE: Not all operations that work with a {@link Cursor} support all 
1:      * {@link Decision} types
1:      */
1:     enum Decision
1:     {
1:         
1:         /**
1:          * Exit the traverse operation
1:          */
0:         EXIT, 
1:         
1:         /**
1:          * Continue with the traverse operation
1:          */
0:         CONTINUE, 
1:         
1:         /**
1:          * Remove the previously returned element
1:          * from the {@link Trie} and continue
1:          */
0:         REMOVE, 
1:         
1:         /**
1:          * Remove the previously returned element
1:          * from the {@link Trie} and exit from the
1:          * traverse operation
1:          */
1:         REMOVE_AND_EXIT
1:     }
1:     
1:     /**
0:      * Called for each {@link Entry} in the {@link Trie}. Return 
1:      * {@link Decision#EXIT} to finish the {@link Trie} operation,
1:      * {@link Decision#CONTINUE} to go to the next {@link Entry},
1:      * {@link Decision#REMOVE} to remove the {@link Entry} and
1:      * continue iterating or {@link Decision#REMOVE_AND_EXIT} to
1:      * remove the {@link Entry} and stop iterating.
1:      * 
1:      * Note: Not all operations support {@link Decision#REMOVE}.
1:      */
1:     Decision select(Map.Entry<? extends K, ? extends V> entry);
1: }
============================================================================