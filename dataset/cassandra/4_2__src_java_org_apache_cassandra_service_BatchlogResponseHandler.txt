1:3c43775: /*
1:3c43775:  * Licensed to the Apache Software Foundation (ASF) under one
1:3c43775:  * or more contributor license agreements.  See the NOTICE file
1:3c43775:  * distributed with this work for additional information
1:3c43775:  * regarding copyright ownership.  The ASF licenses this file
1:3c43775:  * to you under the Apache License, Version 2.0 (the
1:3c43775:  * "License"); you may not use this file except in compliance
1:3c43775:  * with the License.  You may obtain a copy of the License at
1:3c43775:  *
1:3c43775:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3c43775:  *
1:3c43775:  * Unless required by applicable law or agreed to in writing, software
1:3c43775:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3c43775:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3c43775:  * See the License for the specific language governing permissions and
1:3c43775:  * limitations under the License.
1:3c43775:  */
1:3c43775: 
1:3c43775: package org.apache.cassandra.service;
1:3c43775: 
1:3c43775: import java.net.InetAddress;
1:3c43775: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1:3c43775: 
1:39df31a: import org.apache.cassandra.exceptions.RequestFailureReason;
1:3c43775: import org.apache.cassandra.exceptions.WriteFailureException;
1:3c43775: import org.apache.cassandra.exceptions.WriteTimeoutException;
1:3c43775: import org.apache.cassandra.net.MessageIn;
1:39df31a: import org.apache.cassandra.net.MessagingService;
1:3c43775: 
1:3c43775: public class BatchlogResponseHandler<T> extends AbstractWriteResponseHandler<T>
1:3c43775: {
1:3c43775:     AbstractWriteResponseHandler<T> wrapped;
1:3c43775:     BatchlogCleanup cleanup;
1:3c43775:     protected volatile int requiredBeforeFinish;
1:3c43775:     private static final AtomicIntegerFieldUpdater<BatchlogResponseHandler> requiredBeforeFinishUpdater
1:3c43775:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogResponseHandler.class, "requiredBeforeFinish");
1:3c43775: 
1:aa83c94:     public BatchlogResponseHandler(AbstractWriteResponseHandler<T> wrapped, int requiredBeforeFinish, BatchlogCleanup cleanup, long queryStartNanoTime)
1:3c43775:     {
1:aa83c94:         super(wrapped.keyspace, wrapped.naturalEndpoints, wrapped.pendingEndpoints, wrapped.consistencyLevel, wrapped.callback, wrapped.writeType, queryStartNanoTime);
1:3c43775:         this.wrapped = wrapped;
1:3c43775:         this.requiredBeforeFinish = requiredBeforeFinish;
1:3c43775:         this.cleanup = cleanup;
1:3c43775:     }
1:3c43775: 
1:3c43775:     protected int ackCount()
1:3c43775:     {
1:3c43775:         return wrapped.ackCount();
1:3c43775:     }
1:3c43775: 
1:3c43775:     public void response(MessageIn<T> msg)
1:3c43775:     {
1:3c43775:         wrapped.response(msg);
1:3c43775:         if (requiredBeforeFinishUpdater.decrementAndGet(this) == 0)
1:3c43775:             cleanup.run();
1:3c43775:     }
1:3c43775: 
1:3c43775:     public boolean isLatencyForSnitch()
1:3c43775:     {
1:3c43775:         return wrapped.isLatencyForSnitch();
1:3c43775:     }
1:3c43775: 
1:39df31a:     public void onFailure(InetAddress from, RequestFailureReason failureReason)
1:3c43775:     {
1:39df31a:         wrapped.onFailure(from, failureReason);
1:3c43775:     }
1:3c43775: 
1:3c43775:     public void assureSufficientLiveNodes()
1:3c43775:     {
1:3c43775:         wrapped.assureSufficientLiveNodes();
1:3c43775:     }
1:3c43775: 
1:3c43775:     public void get() throws WriteTimeoutException, WriteFailureException
1:3c43775:     {
1:3c43775:         wrapped.get();
1:3c43775:     }
1:3c43775: 
1:3c43775:     protected int totalBlockFor()
1:3c43775:     {
1:3c43775:         return wrapped.totalBlockFor();
1:3c43775:     }
1:3c43775: 
1:3c43775:     protected int totalEndpoints()
1:3c43775:     {
1:3c43775:         return wrapped.totalEndpoints();
1:3c43775:     }
1:3c43775: 
1:3c43775:     protected boolean waitingFor(InetAddress from)
1:3c43775:     {
1:3c43775:         return wrapped.waitingFor(from);
1:3c43775:     }
1:3c43775: 
1:3c43775:     protected void signal()
1:3c43775:     {
1:3c43775:         wrapped.signal();
1:3c43775:     }
1:3c43775: 
1:3c43775:     public static class BatchlogCleanup
1:3c43775:     {
1:3c43775:         private final BatchlogCleanupCallback callback;
1:3c43775: 
1:3c43775:         protected volatile int mutationsWaitingFor;
1:3c43775:         private static final AtomicIntegerFieldUpdater<BatchlogCleanup> mutationsWaitingForUpdater
1:3c43775:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogCleanup.class, "mutationsWaitingFor");
1:3c43775: 
1:3c43775:         public BatchlogCleanup(int mutationsWaitingFor, BatchlogCleanupCallback callback)
1:3c43775:         {
1:3c43775:             this.mutationsWaitingFor = mutationsWaitingFor;
1:3c43775:             this.callback = callback;
1:3c43775:         }
1:3c43775: 
1:3c43775:         public void run()
1:3c43775:         {
1:3c43775:             if (mutationsWaitingForUpdater.decrementAndGet(this) == 0)
1:3c43775:                 callback.invoke();
1:3c43775:         }
1:3c43775:     }
1:3c43775: 
1:3c43775:     public interface BatchlogCleanupCallback
1:3c43775:     {
1:3c43775:         void invoke();
1:3c43775:     }
1:3c43775: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.RequestFailureReason;
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:     public void onFailure(InetAddress from, RequestFailureReason failureReason)
1:         wrapped.onFailure(from, failureReason);
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public BatchlogResponseHandler(AbstractWriteResponseHandler<T> wrapped, int requiredBeforeFinish, BatchlogCleanup cleanup, long queryStartNanoTime)
1:         super(wrapped.keyspace, wrapped.naturalEndpoints, wrapped.pendingEndpoints, wrapped.consistencyLevel, wrapped.callback, wrapped.writeType, queryStartNanoTime);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:3c43775
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.service;
1: 
1: import java.net.InetAddress;
1: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
1: 
1: import org.apache.cassandra.exceptions.WriteFailureException;
1: import org.apache.cassandra.exceptions.WriteTimeoutException;
1: import org.apache.cassandra.net.MessageIn;
1: 
1: public class BatchlogResponseHandler<T> extends AbstractWriteResponseHandler<T>
1: {
1:     AbstractWriteResponseHandler<T> wrapped;
1:     BatchlogCleanup cleanup;
1:     protected volatile int requiredBeforeFinish;
1:     private static final AtomicIntegerFieldUpdater<BatchlogResponseHandler> requiredBeforeFinishUpdater
1:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogResponseHandler.class, "requiredBeforeFinish");
1: 
0:     public BatchlogResponseHandler(AbstractWriteResponseHandler<T> wrapped, int requiredBeforeFinish, BatchlogCleanup cleanup)
1:     {
0:         super(wrapped.keyspace, wrapped.naturalEndpoints, wrapped.pendingEndpoints, wrapped.consistencyLevel, wrapped.callback, wrapped.writeType);
1:         this.wrapped = wrapped;
1:         this.requiredBeforeFinish = requiredBeforeFinish;
1:         this.cleanup = cleanup;
1:     }
1: 
1:     protected int ackCount()
1:     {
1:         return wrapped.ackCount();
1:     }
1: 
1:     public void response(MessageIn<T> msg)
1:     {
1:         wrapped.response(msg);
1:         if (requiredBeforeFinishUpdater.decrementAndGet(this) == 0)
1:             cleanup.run();
1:     }
1: 
1:     public boolean isLatencyForSnitch()
1:     {
1:         return wrapped.isLatencyForSnitch();
1:     }
1: 
0:     public void onFailure(InetAddress from)
1:     {
0:         wrapped.onFailure(from);
1:     }
1: 
1:     public void assureSufficientLiveNodes()
1:     {
1:         wrapped.assureSufficientLiveNodes();
1:     }
1: 
1:     public void get() throws WriteTimeoutException, WriteFailureException
1:     {
1:         wrapped.get();
1:     }
1: 
1:     protected int totalBlockFor()
1:     {
1:         return wrapped.totalBlockFor();
1:     }
1: 
1:     protected int totalEndpoints()
1:     {
1:         return wrapped.totalEndpoints();
1:     }
1: 
1:     protected boolean waitingFor(InetAddress from)
1:     {
1:         return wrapped.waitingFor(from);
1:     }
1: 
1:     protected void signal()
1:     {
1:         wrapped.signal();
1:     }
1: 
1:     public static class BatchlogCleanup
1:     {
1:         private final BatchlogCleanupCallback callback;
1: 
1:         protected volatile int mutationsWaitingFor;
1:         private static final AtomicIntegerFieldUpdater<BatchlogCleanup> mutationsWaitingForUpdater
1:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogCleanup.class, "mutationsWaitingFor");
1: 
1:         public BatchlogCleanup(int mutationsWaitingFor, BatchlogCleanupCallback callback)
1:         {
1:             this.mutationsWaitingFor = mutationsWaitingFor;
1:             this.callback = callback;
1:         }
1: 
1:         public void run()
1:         {
1:             if (mutationsWaitingForUpdater.decrementAndGet(this) == 0)
1:                 callback.invoke();
1:         }
1:     }
1: 
1:     public interface BatchlogCleanupCallback
1:     {
1:         void invoke();
1:     }
1: }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:24d185d
/////////////////////////////////////////////////////////////////////////
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:3bdcaa3
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.service;
0: 
0: import java.net.InetAddress;
0: import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
0: 
0: import org.apache.cassandra.exceptions.WriteFailureException;
0: import org.apache.cassandra.exceptions.WriteTimeoutException;
0: import org.apache.cassandra.net.MessageIn;
0: 
0: public class BatchlogResponseHandler<T> extends AbstractWriteResponseHandler<T>
0: {
0:     AbstractWriteResponseHandler<T> wrapped;
0:     BatchlogCleanup cleanup;
0:     protected volatile int requiredBeforeFinish;
0:     private static final AtomicIntegerFieldUpdater<BatchlogResponseHandler> requiredBeforeFinishUpdater
0:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogResponseHandler.class, "requiredBeforeFinish");
0: 
0:     public BatchlogResponseHandler(AbstractWriteResponseHandler<T> wrapped, int requiredBeforeFinish, BatchlogCleanup cleanup)
0:     {
0:         super(wrapped.keyspace, wrapped.naturalEndpoints, wrapped.pendingEndpoints, wrapped.consistencyLevel, wrapped.callback, wrapped.writeType);
0:         this.wrapped = wrapped;
0:         this.requiredBeforeFinish = requiredBeforeFinish;
0:         this.cleanup = cleanup;
0:     }
0: 
0:     protected int ackCount()
0:     {
0:         return wrapped.ackCount();
0:     }
0: 
0:     public void response(MessageIn<T> msg)
0:     {
0:         wrapped.response(msg);
0:         if (requiredBeforeFinishUpdater.decrementAndGet(this) == 0)
0:             cleanup.run();
0:     }
0: 
0:     public boolean isLatencyForSnitch()
0:     {
0:         return wrapped.isLatencyForSnitch();
0:     }
0: 
0:     public void onFailure(InetAddress from)
0:     {
0:         wrapped.onFailure(from);
0:     }
0: 
0:     public void assureSufficientLiveNodes()
0:     {
0:         wrapped.assureSufficientLiveNodes();
0:     }
0: 
0:     public void get() throws WriteTimeoutException, WriteFailureException
0:     {
0:         wrapped.get();
0:     }
0: 
0:     protected int totalBlockFor()
0:     {
0:         return wrapped.totalBlockFor();
0:     }
0: 
0:     protected int totalEndpoints()
0:     {
0:         return wrapped.totalEndpoints();
0:     }
0: 
0:     protected boolean waitingFor(InetAddress from)
0:     {
0:         return wrapped.waitingFor(from);
0:     }
0: 
0:     protected void signal()
0:     {
0:         wrapped.signal();
0:     }
0: 
0:     public static class BatchlogCleanup
0:     {
0:         private final BatchlogCleanupCallback callback;
0: 
0:         protected volatile int mutationsWaitingFor;
0:         private static final AtomicIntegerFieldUpdater<BatchlogCleanup> mutationsWaitingForUpdater
0:             = AtomicIntegerFieldUpdater.newUpdater(BatchlogCleanup.class, "mutationsWaitingFor");
0: 
0:         public BatchlogCleanup(int mutationsWaitingFor, BatchlogCleanupCallback callback)
0:         {
0:             this.mutationsWaitingFor = mutationsWaitingFor;
0:             this.callback = callback;
0:         }
0: 
0:         public void run()
0:         {
0:             if (mutationsWaitingForUpdater.decrementAndGet(this) == 0)
0:                 callback.invoke();
0:         }
0:     }
0: 
0:     public interface BatchlogCleanupCallback
0:     {
0:         void invoke();
0:     }
0: }
============================================================================