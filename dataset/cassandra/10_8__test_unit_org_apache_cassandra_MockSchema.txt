1:e5a76bd: /*
1:e5a76bd: * Licensed to the Apache Software Foundation (ASF) under one
1:e5a76bd: * or more contributor license agreements.  See the NOTICE file
1:e5a76bd: * distributed with this work for additional information
1:e5a76bd: * regarding copyright ownership.  The ASF licenses this file
1:e5a76bd: * to you under the Apache License, Version 2.0 (the
1:e5a76bd: * "License"); you may not use this file except in compliance
1:e5a76bd: * with the License.  You may obtain a copy of the License at
1:e5a76bd: *
1:e5a76bd: *    http://www.apache.org/licenses/LICENSE-2.0
1:e5a76bd: *
1:e5a76bd: * Unless required by applicable law or agreed to in writing,
1:e5a76bd: * software distributed under the License is distributed on an
1:e5a76bd: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:e5a76bd: * KIND, either express or implied.  See the License for the
1:e5a76bd: * specific language governing permissions and limitations
1:e5a76bd: * under the License.
1:e5a76bd: */
1:e5a76bd: package org.apache.cassandra;
1:e5a76bd: 
1:e5a76bd: import java.io.File;
1:e5a76bd: import java.io.IOException;
1:e5a76bd: import java.io.RandomAccessFile;
1:a991b64: import java.util.*;
1:e5a76bd: import java.util.concurrent.atomic.AtomicInteger;
1:e5a76bd: 
1:e5a76bd: import com.google.common.collect.ImmutableSet;
1:e5a76bd: 
1:e5a76bd: import org.apache.cassandra.config.CFMetaData;
1:8b80b55: import org.apache.cassandra.config.DatabaseDescriptor;
1:e5a76bd: import org.apache.cassandra.db.*;
1:e5a76bd: import org.apache.cassandra.db.marshal.UTF8Type;
1:e5a76bd: import org.apache.cassandra.dht.Murmur3Partitioner;
1:e5a76bd: import org.apache.cassandra.io.sstable.Component;
1:e5a76bd: import org.apache.cassandra.io.sstable.Descriptor;
1:e5a76bd: import org.apache.cassandra.io.sstable.IndexSummary;
1:b4133f3: import org.apache.cassandra.io.sstable.format.SSTableFormat;
1:e5a76bd: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:e5a76bd: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1:e5a76bd: import org.apache.cassandra.io.sstable.metadata.MetadataType;
1:e5a76bd: import org.apache.cassandra.io.sstable.metadata.StatsMetadata;
1:8b80b55: import org.apache.cassandra.io.util.FileUtils;
1:e5a76bd: import org.apache.cassandra.io.util.Memory;
1:b4133f3: import org.apache.cassandra.io.util.FileHandle;
1:b31845c: import org.apache.cassandra.schema.CachingParams;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:e5a76bd: import org.apache.cassandra.utils.AlwaysPresentFilter;
1:e5a76bd: import org.apache.cassandra.utils.ByteBufferUtil;
1:e5a76bd: 
1:e5a76bd: public class MockSchema
1:e5a76bd: {
1:e5a76bd:     static
1:e5a76bd:     {
1:e5a76bd:         Memory offsets = Memory.allocate(4);
1:e5a76bd:         offsets.setInt(0, 0);
1:e5a76bd:         indexSummary = new IndexSummary(Murmur3Partitioner.instance, offsets, 0, Memory.allocate(4), 0, 0, 0, 1);
1:e5a76bd:     }
1:e5a76bd:     private static final AtomicInteger id = new AtomicInteger();
1:a89597d:     public static final Keyspace ks = Keyspace.mockKS(KeyspaceMetadata.create("mockks", KeyspaceParams.simpleTransient(1)));
1:e5a76bd: 
1:b09e60f:     public static final IndexSummary indexSummary;
1:b4133f3:     private static final FileHandle RANDOM_ACCESS_READER_FACTORY = new FileHandle.Builder(temp("mocksegmentedfile").getAbsolutePath()).complete();
1:e5a76bd: 
1:99da210:     public static Memtable memtable(ColumnFamilyStore cfs)
1:e5a76bd:     {
1:e5a76bd:         return new Memtable(cfs.metadata);
1:e5a76bd:     }
1:e5a76bd: 
1:99da210:     public static SSTableReader sstable(int generation, ColumnFamilyStore cfs)
1:e5a76bd:     {
1:99da210:         return sstable(generation, false, cfs);
1:e5a76bd:     }
1:e5a76bd: 
1:99da210:     public static SSTableReader sstable(int generation, boolean keepRef, ColumnFamilyStore cfs)
1:e5a76bd:     {
1:99da210:         return sstable(generation, 0, keepRef, cfs);
1:e5a76bd:     }
1:e5a76bd: 
1:99da210:     public static SSTableReader sstable(int generation, int size, ColumnFamilyStore cfs)
1:e5a76bd:     {
1:99da210:         return sstable(generation, size, false, cfs);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)
1:e5a76bd:     {
1:9ed2727:         Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),
1:99a84bc:                                                cfs.keyspace.getName(),
1:99a84bc:                                                cfs.getColumnFamilyName(),
1:b4133f3:                                                generation, SSTableFormat.Type.BIG);
1:e5a76bd:         Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);
1:e5a76bd:         for (Component component : components)
1:e5a76bd:         {
1:e5a76bd:             File file = new File(descriptor.filenameFor(component));
1:e5a76bd:             try
1:e5a76bd:             {
1:e5a76bd:                 file.createNewFile();
1:e5a76bd:             }
1:e5a76bd:             catch (IOException e)
1:e5a76bd:             {
1:e5a76bd:             }
1:e5a76bd:         }
1:e5a76bd:         if (size > 0)
1:e5a76bd:         {
1:e5a76bd:             try
1:e5a76bd:             {
1:e5a76bd:                 File file = new File(descriptor.filenameFor(Component.DATA));
1:e5a76bd:                 try (RandomAccessFile raf = new RandomAccessFile(file, "rw"))
1:e5a76bd:                 {
1:e5a76bd:                     raf.setLength(size);
1:e5a76bd:                 }
1:e5a76bd:             }
1:e5a76bd:             catch (IOException e)
1:e5a76bd:             {
1:e5a76bd:                 throw new RuntimeException(e);
1:e5a76bd:             }
1:e5a76bd:         }
1:0a08525:         SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList());
1:e5a76bd:         StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata.comparator)
1:0a08525:                                                  .finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header)
1:e5a76bd:                                                  .get(MetadataType.STATS);
1:0a08525:         SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,
1:b4133f3:                                                           RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),
1:a991b64:                                                           new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);
1:e5a76bd:         reader.first = reader.last = readerBounds(generation);
1:e5a76bd:         if (!keepRef)
1:e5a76bd:             reader.selfRef().release();
1:e5a76bd:         return reader;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     public static ColumnFamilyStore newCFS()
1:e5a76bd:     {
1:b09e60f:         return newCFS(ks.getName());
1:e5a76bd:     }
1:b09e60f: 
1:b09e60f:     public static ColumnFamilyStore newCFS(String ksname)
1:e5a76bd:     {
1:e5a76bd:         String cfname = "mockcf" + (id.incrementAndGet());
1:b09e60f:         CFMetaData metadata = newCFMetaData(ksname, cfname);
1:47d3b7e:         return new ColumnFamilyStore(ks, cfname, 0, metadata, new Directories(metadata), false, false, false);
1:e5a76bd:     }
1:e5a76bd: 
1:40f4daa:     public static CFMetaData newCFMetaData(String ksname, String cfname)
1:e5a76bd:     {
1:a991b64:         CFMetaData metadata = CFMetaData.Builder.create(ksname, cfname)
1:a991b64:                                                 .addPartitionKey("key", UTF8Type.instance)
1:a991b64:                                                 .addClusteringColumn("col", UTF8Type.instance)
1:a991b64:                                                 .addRegularColumn("value", UTF8Type.instance)
1:0a08525:                                                 .withPartitioner(Murmur3Partitioner.instance)
1:a991b64:                                                 .build();
1:b31845c:         metadata.caching(CachingParams.CACHE_NOTHING);
1:e5a76bd:         return metadata;
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     public static BufferDecoratedKey readerBounds(int generation)
1:e5a76bd:     {
1:e5a76bd:         return new BufferDecoratedKey(new Murmur3Partitioner.LongToken(generation), ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:e5a76bd:     }
1:e5a76bd: 
1:e5a76bd:     private static File temp(String id)
1:e5a76bd:     {
1:e5a76bd:         try
1:e5a76bd:         {
1:e5a76bd:             File file = File.createTempFile(id, "tmp");
2:e5a76bd:             file.deleteOnExit();
1:e5a76bd:             return file;
1:e5a76bd:         }
1:e5a76bd:         catch (IOException e)
1:e5a76bd:         {
1:e5a76bd:             throw new RuntimeException(e);
1:e5a76bd:         }
1:e5a76bd:     }
1:8b80b55: 
1:8b80b55:     public static void cleanup()
1:b09e60f:     {
1:8b80b55:         // clean up data directory which are stored as data directory/keyspace/data files
1:8b80b55:         for (String dirName : DatabaseDescriptor.getAllDataFileLocations())
2:8b80b55:         {
1:8b80b55:             File dir = new File(dirName);
1:8b80b55:             if (!dir.exists())
1:99a84bc:                 continue;
1:8b80b55:             String[] children = dir.list();
1:8b80b55:             for (String child : children)
1:8b80b55:                 FileUtils.deleteRecursive(new File(dir, child));
1:e5a76bd:         }
1:b09e60f:     }
2:8b80b55: }
============================================================================
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1:         return new ColumnFamilyStore(ks, cfname, 0, metadata, new Directories(metadata), false, false, false);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:b4133f3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableFormat;
1: import org.apache.cassandra.io.util.FileHandle;
/////////////////////////////////////////////////////////////////////////
1:     private static final FileHandle RANDOM_ACCESS_READER_FACTORY = new FileHandle.Builder(temp("mocksegmentedfile").getAbsolutePath()).complete();
/////////////////////////////////////////////////////////////////////////
1:                                                generation, SSTableFormat.Type.BIG);
/////////////////////////////////////////////////////////////////////////
1:                                                           RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:40f4daa
/////////////////////////////////////////////////////////////////////////
1:     public static CFMetaData newCFMetaData(String ksname, String cfname)
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
0: import java.util.List;
0: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.ImmutableSet;
1: 
0: import org.apache.cassandra.cache.CachingOptions;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.composites.SimpleSparseCellNameType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.dht.Murmur3Partitioner;
1: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.Descriptor;
1: import org.apache.cassandra.io.sstable.IndexSummary;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.io.sstable.metadata.MetadataCollector;
1: import org.apache.cassandra.io.sstable.metadata.MetadataType;
1: import org.apache.cassandra.io.sstable.metadata.StatsMetadata;
0: import org.apache.cassandra.io.util.BufferedSegmentedFile;
0: import org.apache.cassandra.io.util.ChannelProxy;
1: import org.apache.cassandra.io.util.Memory;
0: import org.apache.cassandra.io.util.SegmentedFile;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.utils.AlwaysPresentFilter;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class MockSchema
1: {
1:     static
1:     {
1:         Memory offsets = Memory.allocate(4);
1:         offsets.setInt(0, 0);
1:         indexSummary = new IndexSummary(Murmur3Partitioner.instance, offsets, 0, Memory.allocate(4), 0, 0, 0, 1);
1:     }
1:     private static final AtomicInteger id = new AtomicInteger();
0:     public static final Keyspace ks = Keyspace.mockKS(new KSMetaData("mockks", SimpleStrategy.class, ImmutableMap.of("replication_factor", "1"), false));
0:     public static final ColumnFamilyStore cfs = newCFS();
1: 
0:     private static final IndexSummary indexSummary;
0:     private static final SegmentedFile segmentedFile = new BufferedSegmentedFile(new ChannelProxy(temp("mocksegmentedfile")), 0);
1: 
0:     public static Memtable memtable()
1:     {
1:         return new Memtable(cfs.metadata);
1:     }
1: 
0:     public static SSTableReader sstable(int generation)
1:     {
0:         return sstable(generation, false);
1:     }
1: 
0:     public static SSTableReader sstable(int generation, boolean keepRef)
1:     {
0:         return sstable(generation, 0, keepRef);
1:     }
1: 
0:     public static SSTableReader sstable(int generation, int size)
1:     {
0:         return sstable(generation, size, false);
1:     }
1: 
0:     public static SSTableReader sstable(int generation, int size, boolean keepRef)
1:     {
0:         return sstable(generation, size, keepRef, cfs);
1:     }
1:     public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)
1:     {
0:         Descriptor descriptor = new Descriptor(temp("mockcfdir").getParentFile(), "mockks", "mockcf", generation, Descriptor.Type.FINAL);
1:         Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);
1:         for (Component component : components)
1:         {
1:             File file = new File(descriptor.filenameFor(component));
1:             try
1:             {
1:                 file.createNewFile();
1:             }
1:             catch (IOException e)
1:             {
1:             }
1:             file.deleteOnExit();
1:         }
1:         if (size > 0)
1:         {
1:             try
1:             {
1:                 File file = new File(descriptor.filenameFor(Component.DATA));
1:                 try (RandomAccessFile raf = new RandomAccessFile(file, "rw"))
1:                 {
1:                     raf.setLength(size);
1:                 }
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:         StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata.comparator)
0:                                                  .finalizeMetadata(Murmur3Partitioner.instance.getClass().getCanonicalName(), 0.01f, -1)
1:                                                  .get(MetadataType.STATS);
0:         SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, Murmur3Partitioner.instance,
0:                                                           segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(),
0:                                                           new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL);
1:         reader.first = reader.last = readerBounds(generation);
1:         if (!keepRef)
1:             reader.selfRef().release();
1:         return reader;
1:     }
1: 
1:     public static ColumnFamilyStore newCFS()
1:     {
1:         String cfname = "mockcf" + (id.incrementAndGet());
0:         CFMetaData metadata = newCFMetaData(cfname);
0:         return new ColumnFamilyStore(ks, cfname, Murmur3Partitioner.instance, 0, metadata, new Directories(metadata), false, false);
1:     }
1: 
0:     private static CFMetaData newCFMetaData(String cfname)
1:     {
0:         CFMetaData metadata = new CFMetaData("mockks", cfname, ColumnFamilyType.Standard, new SimpleSparseCellNameType(UTF8Type.instance));
0:         metadata.caching(CachingOptions.NONE);
1:         return metadata;
1:     }
1: 
1:     public static BufferDecoratedKey readerBounds(int generation)
1:     {
1:         return new BufferDecoratedKey(new Murmur3Partitioner.LongToken(generation), ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:     }
1: 
1:     private static File temp(String id)
1:     {
1:         try
1:         {
1:             File file = File.createTempFile(id, "tmp");
1:             file.deleteOnExit();
1:             return file;
1:         }
1:         catch (IOException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1:         Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:b31845c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.CachingParams;
/////////////////////////////////////////////////////////////////////////
1:         metadata.caching(CachingParams.CACHE_NOTHING);
commit:0a08525
/////////////////////////////////////////////////////////////////////////
1:         SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList());
1:                                                  .finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header)
1:         SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,
/////////////////////////////////////////////////////////////////////////
0:         return new ColumnFamilyStore(ks, cfname, 0, metadata, new Directories(metadata), false, false);
/////////////////////////////////////////////////////////////////////////
1:                                                 .withPartitioner(Murmur3Partitioner.instance)
commit:a89597d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:     public static final Keyspace ks = Keyspace.mockKS(KeyspaceMetadata.create("mockks", KeyspaceParams.simpleTransient(1)));
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
0:     public static final Keyspace ks = Keyspace.mockKS(KSMetaData.create("mockks", KeyspaceParams.simpleTransient(1)));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
0:         SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.EMPTY_LIST);
0:                                                  .finalizeMetadata(Murmur3Partitioner.instance.getClass().getCanonicalName(), 0.01f, -1, header)
0:         SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, Murmur3Partitioner.instance,
/////////////////////////////////////////////////////////////////////////
0:         return new ColumnFamilyStore(ks, cfname, Murmur3Partitioner.instance, 0, metadata, new Directories(metadata), false, false);
/////////////////////////////////////////////////////////////////////////
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
0:         SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList());
0:                                                  .finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header)
0:         SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,
/////////////////////////////////////////////////////////////////////////
0:         return new ColumnFamilyStore(ks, cfname, 0, metadata, new Directories(metadata), false, false);
/////////////////////////////////////////////////////////////////////////
0:                                                 .withPartitioner(Murmur3Partitioner.instance)
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:6422e34
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.RandomAccessReader;
/////////////////////////////////////////////////////////////////////////
0:     private static final SegmentedFile segmentedFile = new BufferedSegmentedFile(new ChannelProxy(temp("mocksegmentedfile")), RandomAccessReader.DEFAULT_BUFFER_SIZE, 0);
commit:b09e60f
/////////////////////////////////////////////////////////////////////////
1:     public static final IndexSummary indexSummary;
/////////////////////////////////////////////////////////////////////////
0:                                                generation);
/////////////////////////////////////////////////////////////////////////
1:         return newCFS(ks.getName());
1:     }
1: 
1:     public static ColumnFamilyStore newCFS(String ksname)
1:     {
1:         CFMetaData metadata = newCFMetaData(ksname, cfname);
commit:8b80b55
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.FileUtils;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static void cleanup()
1:     {
1:         // clean up data directory which are stored as data directory/keyspace/data files
1:         for (String dirName : DatabaseDescriptor.getAllDataFileLocations())
1:         {
1:             File dir = new File(dirName);
1:             if (!dir.exists())
0:                 throw new RuntimeException("No such directory: " + dir.getAbsolutePath());
1:             String[] children = dir.list();
1:             for (String child : children)
1:                 FileUtils.deleteRecursive(new File(dir, child));
1:         }
1:     }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.EMPTY_LIST);
0:                                                  .finalizeMetadata(Murmur3Partitioner.instance.getClass().getCanonicalName(), 0.01f, -1, header)
1:                                                           new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = CFMetaData.Builder.create(ksname, cfname)
1:                                                 .addPartitionKey("key", UTF8Type.instance)
1:                                                 .addClusteringColumn("col", UTF8Type.instance)
1:                                                 .addRegularColumn("value", UTF8Type.instance)
1:                                                 .build();
author:stefania
-------------------------------------------------------------------------------
commit:99a84bc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Descriptor descriptor = new Descriptor(cfs.directories.getDirectoryForNewSSTables(),
1:                                                cfs.keyspace.getName(),
1:                                                cfs.getColumnFamilyName(),
0:                                                generation,
0:                                                Descriptor.Type.FINAL);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         CFMetaData metadata = newCFMetaData(ks.getName(), cfname);
0:     private static CFMetaData newCFMetaData(String ksname, String cfname)
0:         CFMetaData metadata = new CFMetaData(ksname,
0:                                              cfname,
0:                                              ColumnFamilyType.Standard,
0:                                              new SimpleSparseCellNameType(UTF8Type.instance));
/////////////////////////////////////////////////////////////////////////
1:                 continue;
commit:99da210
/////////////////////////////////////////////////////////////////////////
1:     public static Memtable memtable(ColumnFamilyStore cfs)
1:     public static SSTableReader sstable(int generation, ColumnFamilyStore cfs)
1:         return sstable(generation, false, cfs);
1:     public static SSTableReader sstable(int generation, boolean keepRef, ColumnFamilyStore cfs)
1:         return sstable(generation, 0, keepRef, cfs);
1:     public static SSTableReader sstable(int generation, int size, ColumnFamilyStore cfs)
1:         return sstable(generation, size, false, cfs);
0:         Descriptor descriptor = new Descriptor(temp("mockcfdir").getParentFile(), ks.getName(), cfs.getColumnFamilyName(), generation, Descriptor.Type.FINAL);
============================================================================