1:ca556c4: package org.apache.cassandra.db.commitlog;
1:ca556c4: 
1:ca556c4: import java.util.ArrayList;
1:ca556c4: import java.util.Collection;
1:ca556c4: 
1:ca556c4: import org.junit.Test;
1:ca556c4: 
1:ca556c4: import org.apache.cassandra.cql3.CQLTester;
1:ca556c4: import org.apache.cassandra.db.ColumnFamilyStore;
1:ca556c4: 
1:ca556c4: public class CommitLogCQLTest extends CQLTester
1:ca556c4: {
1:ca556c4:     @Test
1:ca556c4:     public void testTruncateSegmentDiscard() throws Throwable
1:ca556c4:     {
1:ca556c4:         String otherTable = createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1:ca556c4: 
1:ca556c4:         createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1:ca556c4:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(15));
1:ca556c4:         flush();
1:ca556c4: 
1:ca556c4:         // We write something in different table to advance the commit log position. Current table remains clean.
1:ca556c4:         executeFormattedQuery(String.format("INSERT INTO %s.%s (idx, data) VALUES (?, ?)", keyspace(), otherTable), 16, Integer.toString(16));
1:ca556c4: 
1:ca556c4:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:ca556c4:         assert cfs.getTracker().getView().getCurrentMemtable().isClean();
1:ca556c4:         // Calling switchMemtable directly applies Flush even though memtable is empty. This can happen with some races
1:ca556c4:         // (flush with recycling by segment manager). It should still tell commitlog that the memtable's region is clean.
1:ca556c4:         // CASSANDRA-12436
1:ca556c4:         cfs.switchMemtable();
1:ca556c4: 
1:ca556c4:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(17));
1:ca556c4: 
1:ca556c4:         Collection<CommitLogSegment> active = new ArrayList<>(CommitLog.instance.segmentManager.getActiveSegments());
1:ca556c4:         CommitLog.instance.forceRecycleAllSegments();
1:ca556c4: 
1:ca556c4:         // If one of the previous segments remains, it wasn't clean.
1:ca556c4:         active.retainAll(CommitLog.instance.segmentManager.getActiveSegments());
1:ca556c4:         assert active.isEmpty();
1:ca556c4:     }
1:ca556c4: }
============================================================================
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:ca556c4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.cql3.CQLTester;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: 
1: public class CommitLogCQLTest extends CQLTester
1: {
1:     @Test
1:     public void testTruncateSegmentDiscard() throws Throwable
1:     {
1:         String otherTable = createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1: 
1:         createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
1:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(15));
1:         flush();
1: 
1:         // We write something in different table to advance the commit log position. Current table remains clean.
1:         executeFormattedQuery(String.format("INSERT INTO %s.%s (idx, data) VALUES (?, ?)", keyspace(), otherTable), 16, Integer.toString(16));
1: 
1:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
1:         assert cfs.getTracker().getView().getCurrentMemtable().isClean();
1:         // Calling switchMemtable directly applies Flush even though memtable is empty. This can happen with some races
1:         // (flush with recycling by segment manager). It should still tell commitlog that the memtable's region is clean.
1:         // CASSANDRA-12436
1:         cfs.switchMemtable();
1: 
1:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(17));
1: 
1:         Collection<CommitLogSegment> active = new ArrayList<>(CommitLog.instance.segmentManager.getActiveSegments());
1:         CommitLog.instance.forceRecycleAllSegments();
1: 
1:         // If one of the previous segments remains, it wasn't clean.
1:         active.retainAll(CommitLog.instance.segmentManager.getActiveSegments());
1:         assert active.isEmpty();
1:     }
1: }
commit:5cef78a
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.commitlog;
0: 
0: import java.util.ArrayList;
0: import java.util.Collection;
0: 
0: import org.junit.Test;
0: 
0: import org.apache.cassandra.cql3.CQLTester;
0: import org.apache.cassandra.db.ColumnFamilyStore;
0: 
0: public class CommitLogCQLTest extends CQLTester
0: {
0:     @Test
0:     public void testTruncateSegmentDiscard() throws Throwable
0:     {
0:         String otherTable = createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
0: 
0:         createTable("CREATE TABLE %s (idx INT, data TEXT, PRIMARY KEY(idx));");
0:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(15));
0:         flush();
0: 
0:         // We write something in different table to advance the commit log position. Current table remains clean.
0:         execute(String.format("INSERT INTO %s.%s (idx, data) VALUES (?, ?)", keyspace(), otherTable), 16, Integer.toString(16));
0: 
0:         ColumnFamilyStore cfs = getCurrentColumnFamilyStore();
0:         assert cfs.getTracker().getView().getCurrentMemtable().isClean();
0:         // Calling switchMemtable directly applies Flush even though memtable is empty. This can happen with some races
0:         // (flush with recycling by segment manager). It should still tell commitlog that the memtable's region is clean.
0:         // CASSANDRA-12436
0:         cfs.switchMemtable();
0: 
0:         execute("INSERT INTO %s (idx, data) VALUES (?, ?)", 15, Integer.toString(17));
0: 
0:         Collection<CommitLogSegment> active = new ArrayList<>(CommitLog.instance.allocator.getActiveSegments());
0:         CommitLog.instance.forceRecycleAllSegments();
0: 
0:         // If one of the previous segments remains, it wasn't clean.
0:         active.retainAll(CommitLog.instance.allocator.getActiveSegments());
0:         assert active.isEmpty();
0:     }
0: }
============================================================================