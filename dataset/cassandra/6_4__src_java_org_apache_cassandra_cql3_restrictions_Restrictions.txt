1:65a7088: /*
1:65a7088:  * Licensed to the Apache Software Foundation (ASF) under one
1:65a7088:  * or more contributor license agreements.  See the NOTICE file
1:65a7088:  * distributed with this work for additional information
1:65a7088:  * regarding copyright ownership.  The ASF licenses this file
1:65a7088:  * to you under the Apache License, Version 2.0 (the
1:65a7088:  * "License"); you may not use this file except in compliance
1:65a7088:  * with the License.  You may obtain a copy of the License at
4:65a7088:  *
1:65a7088:  *     http://www.apache.org/licenses/LICENSE-2.0
1:65a7088:  *
1:65a7088:  * Unless required by applicable law or agreed to in writing, software
1:65a7088:  * distributed under the License is distributed on an "AS IS" BASIS,
1:65a7088:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:65a7088:  * See the License for the specific language governing permissions and
1:65a7088:  * limitations under the License.
5:65a7088:  */
1:65a7088: package org.apache.cassandra.cql3.restrictions;
8:65a7088: 
1:4205011: import java.util.Set;
1:4205011: 
1:4205011: import org.apache.cassandra.config.ColumnDefinition;
1:4205011: 
5:65a7088: /**
1:65a7088:  * Sets of restrictions
1:65a7088:  */
1:831bebd: public interface Restrictions extends Restriction
1:65a7088: {
1:65a7088:     /**
1:4205011:      * Returns the restrictions applied to the specified column.
1:65a7088:      *
1:4205011:      * @param columnDef the column definition
1:4205011:      * @return the restrictions applied to the specified column
1:4205011:      */
1:4205011:     Set<Restriction> getRestrictions(ColumnDefinition columnDef);
1:4205011: 
1:4205011:     /**
1:4205011:      * Checks if this <code>Restrictions</code> is empty or not.
1:4205011:      *
1:4205011:      * @return <code>true</code> if this <code>Restrictions</code> is empty, <code>false</code> otherwise.
1:65a7088:      */
1:65a7088:     boolean isEmpty();
1:cb5897f: 
1:65a7088:     /**
1:65a7088:      * Returns the number of columns that have a restriction.
1:65a7088:      *
1:65a7088:      * @return the number of columns that have a restriction.
1:65a7088:      */
1:65a7088:     public int size();
1:831bebd: 
1:831bebd:     /**
1:831bebd:      * Checks if any of the underlying restriction is an IN.
1:831bebd:      * @return <code>true</code> if any of the underlying restriction is an IN, <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public boolean hasIN();
1:831bebd: 
1:831bebd:     /**
1:3f49c32:      * Checks if any of the underlying restrictions is a slice.
1:3f49c32:      * @return <code>true</code> if any of the underlying restrictions is a slice, <code>false</code> otherwise
1:3f49c32:      */
1:3f49c32:     public boolean hasSlice();
1:3f49c32: 
1:3f49c32:     /**
1:831bebd:      * Checks if all of the underlying restrictions are EQ or IN restrictions.
1:831bebd:      *
1:831bebd:      * @return <code>true</code> if all of the underlying restrictions are EQ or IN restrictions,
1:831bebd:      * <code>false</code> otherwise
1:831bebd:      */
1:831bebd:     public boolean hasOnlyEqualityRestrictions();
1:cb5897f: }
============================================================================
author:ZhaoYang
-------------------------------------------------------------------------------
commit:3f49c32
/////////////////////////////////////////////////////////////////////////
1:      * Checks if any of the underlying restrictions is a slice.
1:      * @return <code>true</code> if any of the underlying restrictions is a slice, <code>false</code> otherwise
1:      */
1:     public boolean hasSlice();
1: 
1:     /**
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4205011
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
1: 
1:      * Returns the restrictions applied to the specified column.
1:      * @param columnDef the column definition
1:      * @return the restrictions applied to the specified column
1:      */
1:     Set<Restriction> getRestrictions(ColumnDefinition columnDef);
1: 
1:     /**
1:      * Checks if this <code>Restrictions</code> is empty or not.
1:      *
1:      * @return <code>true</code> if this <code>Restrictions</code> is empty, <code>false</code> otherwise.
commit:89464ea
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:      * Adds all functions (native and user-defined) used by any component of the restriction
0:      * to the specified list.
0:      * @param functions the list to add to
0:     public void addFunctionsTo(List<Function> functions);
commit:831bebd
/////////////////////////////////////////////////////////////////////////
1: public interface Restrictions extends Restriction
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Checks if any of the underlying restriction is an IN.
1:      * @return <code>true</code> if any of the underlying restriction is an IN, <code>false</code> otherwise
1:      */
1:     public boolean hasIN();
1: 
1:     /**
1:      * Checks if all of the underlying restrictions are EQ or IN restrictions.
1:      *
1:      * @return <code>true</code> if all of the underlying restrictions are EQ or IN restrictions,
1:      * <code>false</code> otherwise
1:      */
1:     public boolean hasOnlyEqualityRestrictions();
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:1a73af7
/////////////////////////////////////////////////////////////////////////
0: public interface Restrictions
commit:0626be8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.index.SecondaryIndexManager;
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
0:      * Return an Iterable over all of the functions (both native and user-defined) used by any component
0:      * of the restrictions
0:      * @return functions all functions found (may contain duplicates)
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.cql3.functions.Function;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions();
1: 
/////////////////////////////////////////////////////////////////////////
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.filter.RowFilter;
/////////////////////////////////////////////////////////////////////////
0:      * Adds to the specified row filter the expressions corresponding to this <code>Restrictions</code>.
0:      * @param filter the row filter to add expressions to
0:      * @throws InvalidRequestException if this <code>Restrictions</code> cannot be converted into a row filter
0:     public void addRowFilterTo(RowFilter filter, SecondaryIndexManager indexManager, QueryOptions options) throws InvalidRequestException;
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:71778ee
commit:fbc38cd
author:blerer
-------------------------------------------------------------------------------
commit:65a7088
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.restrictions;
1: 
0: import java.util.Collection;
0: import java.util.List;
1: 
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.cql3.QueryOptions;
0: import org.apache.cassandra.db.IndexExpression;
0: import org.apache.cassandra.db.index.SecondaryIndexManager;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: /**
1:  * Sets of restrictions
1:  */
0: interface Restrictions
1: {
1:     /**
0:      * Returns the column definitions in position order.
0:      * @return the column definitions in position order.
1:      */
0:     public Collection<ColumnDefinition> getColumnDefs();
1: 
1:     /**
0:      * Returns <code>true</code> if one of the restrictions use the specified function.
1:      *
0:      * @param ksName the keyspace name
0:      * @param functionName the function name
0:      * @return <code>true</code> if one of the restrictions use the specified function, <code>false</code> otherwise.
1:      */
0:     public boolean usesFunction(String ksName, String functionName);
1: 
1:     /**
0:      * Check if the restriction is on indexed columns.
1:      *
0:      * @param indexManager the index manager
0:      * @return <code>true</code> if the restriction is on indexed columns, <code>false</code>
1:      */
0:     public boolean hasSupportingIndex(SecondaryIndexManager indexManager);
1: 
1:     /**
0:      * Adds to the specified list the <code>IndexExpression</code>s corresponding to this <code>Restriction</code>.
1:      *
0:      * @param expressions the list to add the <code>IndexExpression</code>s to
0:      * @param options the query options
0:      * @throws InvalidRequestException if this <code>Restriction</code> cannot be converted into
0:      * <code>IndexExpression</code>s
1:      */
0:     public void addIndexExpressionTo(List<IndexExpression> expressions,
0:                                      QueryOptions options)
0:                                      throws InvalidRequestException;
1: 
1:     /**
0:      * Checks if this <code>SingleColumnPrimaryKeyRestrictions</code> is empty or not.
1:      *
0:      * @return <code>true</code> if this <code>SingleColumnPrimaryKeyRestrictions</code> is empty, <code>false</code> otherwise.
1:      */
1:     boolean isEmpty();
1: 
1:     /**
1:      * Returns the number of columns that have a restriction.
1:      *
1:      * @return the number of columns that have a restriction.
1:      */
1:     public int size();
0: }
============================================================================