1:4cf8a8a: /**
1:4cf8a8a:  * Licensed to the Apache Software Foundation (ASF) under one
1:4cf8a8a:  * or more contributor license agreements.  See the NOTICE file
1:4cf8a8a:  * distributed with this work for additional information
1:4cf8a8a:  * regarding copyright ownership.  The ASF licenses this file
1:4cf8a8a:  * to you under the Apache License, Version 2.0 (the
1:4cf8a8a:  * "License"); you may not use this file except in compliance
1:4cf8a8a:  * with the License.  You may obtain a copy of the License at
1:4cf8a8a:  *
1:4cf8a8a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4cf8a8a:  *
1:4cf8a8a:  * Unless required by applicable law or agreed to in writing, software
1:4cf8a8a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4cf8a8a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4cf8a8a:  * See the License for the specific language governing permissions and
1:4cf8a8a:  * limitations under the License.
1:4cf8a8a:  */
1:4cf8a8a: 
1:4cf8a8a: package org.apache.cassandra.hadoop;
1:4cf8a8a: 
1:4cf8a8a: import java.lang.reflect.Constructor;
1:4cf8a8a: import java.lang.reflect.Field;
1:4cf8a8a: import java.lang.reflect.InvocationTargetException;
1:4cf8a8a: import java.lang.reflect.Method;
1:4cf8a8a: 
1:4cf8a8a: import org.apache.hadoop.conf.Configuration;
1:4cf8a8a: import org.apache.hadoop.mapreduce.Counter;
1:4cf8a8a: import org.apache.hadoop.mapreduce.InputSplit;
1:4cf8a8a: import org.apache.hadoop.mapreduce.JobContext;
1:4cf8a8a: import org.apache.hadoop.mapreduce.JobID;
1:4cf8a8a: import org.apache.hadoop.mapreduce.MapContext;
1:4cf8a8a: import org.apache.hadoop.mapreduce.OutputCommitter;
1:4cf8a8a: import org.apache.hadoop.mapreduce.RecordReader;
1:4cf8a8a: import org.apache.hadoop.mapreduce.RecordWriter;
1:4cf8a8a: import org.apache.hadoop.mapreduce.StatusReporter;
1:4cf8a8a: import org.apache.hadoop.mapreduce.TaskAttemptContext;
1:4cf8a8a: import org.apache.hadoop.mapreduce.TaskAttemptID;
1:4cf8a8a: import org.apache.hadoop.mapreduce.TaskInputOutputContext;
1:4cf8a8a: 
1:4cf8a8a: /*
1:4cf8a8a:  * This is based on ContextFactory.java from hadoop-2.0.x sources.
1:4cf8a8a:  */
1:4cf8a8a: 
1:4cf8a8a: /**
1:4cf8a8a:  * Utility methods to allow applications to deal with inconsistencies between
1:4cf8a8a:  * MapReduce Context Objects API between Hadoop 1.x and 2.x.
1:4cf8a8a:  */
1:68d2526: public class HadoopCompat
1:68d2526: {
1:4cf8a8a: 
1:4cf8a8a:     private static final boolean useV21;
1:4cf8a8a: 
1:4cf8a8a:     private static final Constructor<?> JOB_CONTEXT_CONSTRUCTOR;
1:4cf8a8a:     private static final Constructor<?> TASK_CONTEXT_CONSTRUCTOR;
1:4cf8a8a:     private static final Constructor<?> MAP_CONTEXT_CONSTRUCTOR;
1:4cf8a8a:     private static final Constructor<?> GENERIC_COUNTER_CONSTRUCTOR;
1:4cf8a8a: 
1:4cf8a8a:     private static final Field READER_FIELD;
1:4cf8a8a:     private static final Field WRITER_FIELD;
1:4cf8a8a: 
1:4cf8a8a:     private static final Method GET_CONFIGURATION_METHOD;
1:4cf8a8a:     private static final Method SET_STATUS_METHOD;
1:4cf8a8a:     private static final Method GET_COUNTER_METHOD;
1:4cf8a8a:     private static final Method INCREMENT_COUNTER_METHOD;
1:4cf8a8a:     private static final Method GET_TASK_ATTEMPT_ID;
1:4cf8a8a:     private static final Method PROGRESS_METHOD;
1:4cf8a8a: 
1:68d2526:     static
1:68d2526:     {
1:4cf8a8a:         boolean v21 = true;
1:4cf8a8a:         final String PACKAGE = "org.apache.hadoop.mapreduce";
1:68d2526:         try
1:68d2526:         {
1:4cf8a8a:             Class.forName(PACKAGE + ".task.JobContextImpl");
1:68d2526:         } catch (ClassNotFoundException cnfe)
1:68d2526:         {
1:4cf8a8a:             v21 = false;
1:4cf8a8a:         }
1:4cf8a8a:         useV21 = v21;
1:4cf8a8a:         Class<?> jobContextCls;
1:4cf8a8a:         Class<?> taskContextCls;
1:4cf8a8a:         Class<?> taskIOContextCls;
1:4cf8a8a:         Class<?> mapContextCls;
1:4cf8a8a:         Class<?> genericCounterCls;
1:68d2526:         try
1:68d2526:         {
1:68d2526:             if (v21)
1:68d2526:             {
1:4cf8a8a:                 jobContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".task.JobContextImpl");
1:4cf8a8a:                 taskContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".task.TaskAttemptContextImpl");
1:4cf8a8a:                 taskIOContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".task.TaskInputOutputContextImpl");
1:4cf8a8a:                 mapContextCls = Class.forName(PACKAGE + ".task.MapContextImpl");
1:4cf8a8a:                 genericCounterCls = Class.forName(PACKAGE+".counters.GenericCounter");
1:68d2526:             }
1:68d2526:             else
1:68d2526:             {
1:4cf8a8a:                 jobContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".JobContext");
1:4cf8a8a:                 taskContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".TaskAttemptContext");
1:4cf8a8a:                 taskIOContextCls =
1:4cf8a8a:                         Class.forName(PACKAGE+".TaskInputOutputContext");
1:4cf8a8a:                 mapContextCls = Class.forName(PACKAGE + ".MapContext");
1:4cf8a8a:                 genericCounterCls =
1:4cf8a8a:                         Class.forName("org.apache.hadoop.mapred.Counters$Counter");
1:4cf8a8a: 
1:4cf8a8a:             }
1:68d2526:         } catch (ClassNotFoundException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't find class", e);
1:4cf8a8a:         }
1:68d2526:         try
1:68d2526:         {
1:4cf8a8a:             JOB_CONTEXT_CONSTRUCTOR =
1:4cf8a8a:                     jobContextCls.getConstructor(Configuration.class, JobID.class);
1:4cf8a8a:             JOB_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:4cf8a8a:             TASK_CONTEXT_CONSTRUCTOR =
1:4cf8a8a:                     taskContextCls.getConstructor(Configuration.class,
1:4cf8a8a:                             TaskAttemptID.class);
1:4cf8a8a:             TASK_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:4cf8a8a:             GENERIC_COUNTER_CONSTRUCTOR =
1:4cf8a8a:                     genericCounterCls.getDeclaredConstructor(String.class,
1:4cf8a8a:                             String.class,
1:4cf8a8a:                             Long.TYPE);
1:4cf8a8a:             GENERIC_COUNTER_CONSTRUCTOR.setAccessible(true);
1:4cf8a8a: 
1:68d2526:             if (useV21)
1:68d2526:             {
1:4cf8a8a:                 MAP_CONTEXT_CONSTRUCTOR =
1:4cf8a8a:                         mapContextCls.getDeclaredConstructor(Configuration.class,
1:4cf8a8a:                                 TaskAttemptID.class,
1:4cf8a8a:                                 RecordReader.class,
1:4cf8a8a:                                 RecordWriter.class,
1:4cf8a8a:                                 OutputCommitter.class,
1:4cf8a8a:                                 StatusReporter.class,
1:4cf8a8a:                                 InputSplit.class);
1:4cf8a8a:                 Method get_counter;
1:68d2526:                 try
1:68d2526:                 {
1:4cf8a8a:                     get_counter = Class.forName(PACKAGE + ".TaskAttemptContext").getMethod("getCounter", String.class,
1:4cf8a8a:                             String.class);
1:68d2526:                 }
1:68d2526:                 catch (Exception e)
1:68d2526:                 {
1:4cf8a8a:                     get_counter = Class.forName(PACKAGE + ".TaskInputOutputContext").getMethod("getCounter",
1:4cf8a8a:                             String.class, String.class);
1:4cf8a8a:                 }
1:4cf8a8a:                 GET_COUNTER_METHOD = get_counter;
1:68d2526:             }
1:68d2526:             else
1:68d2526:             {
1:4cf8a8a:                 MAP_CONTEXT_CONSTRUCTOR =
1:4cf8a8a:                         mapContextCls.getConstructor(Configuration.class,
1:4cf8a8a:                                 TaskAttemptID.class,
1:4cf8a8a:                                 RecordReader.class,
1:4cf8a8a:                                 RecordWriter.class,
1:4cf8a8a:                                 OutputCommitter.class,
1:4cf8a8a:                                 StatusReporter.class,
1:4cf8a8a:                                 InputSplit.class);
1:4cf8a8a:                 GET_COUNTER_METHOD = Class.forName(PACKAGE+".TaskInputOutputContext")
1:4cf8a8a:                         .getMethod("getCounter", String.class, String.class);
1:4cf8a8a:             }
1:4cf8a8a:             MAP_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:4cf8a8a:             READER_FIELD = mapContextCls.getDeclaredField("reader");
1:4cf8a8a:             READER_FIELD.setAccessible(true);
1:4cf8a8a:             WRITER_FIELD = taskIOContextCls.getDeclaredField("output");
1:4cf8a8a:             WRITER_FIELD.setAccessible(true);
1:4cf8a8a:             GET_CONFIGURATION_METHOD = Class.forName(PACKAGE+".JobContext")
1:4cf8a8a:                     .getMethod("getConfiguration");
1:4cf8a8a:             SET_STATUS_METHOD = Class.forName(PACKAGE+".TaskAttemptContext")
1:4cf8a8a:                     .getMethod("setStatus", String.class);
1:4cf8a8a:             GET_TASK_ATTEMPT_ID = Class.forName(PACKAGE+".TaskAttemptContext")
1:4cf8a8a:                     .getMethod("getTaskAttemptID");
1:4cf8a8a:             INCREMENT_COUNTER_METHOD = Class.forName(PACKAGE+".Counter")
1:4cf8a8a:                     .getMethod("increment", Long.TYPE);
1:4cf8a8a:             PROGRESS_METHOD = Class.forName(PACKAGE+".TaskAttemptContext")
1:4cf8a8a:                     .getMethod("progress");
1:4cf8a8a: 
1:68d2526:         }
1:68d2526:         catch (SecurityException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't run constructor ", e);
1:68d2526:         }
1:68d2526:         catch (NoSuchMethodException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't find constructor ", e);
1:68d2526:         }
1:68d2526:         catch (NoSuchFieldException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't find field ", e);
1:68d2526:         }
1:68d2526:         catch (ClassNotFoundException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't find class", e);
1:4cf8a8a:         }
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * True if runtime Hadoop version is 2.x, false otherwise.
1:4cf8a8a:      */
1:68d2526:     public static boolean isVersion2x()
1:68d2526:     {
1:4cf8a8a:         return useV21;
1:4cf8a8a:     }
1:4cf8a8a: 
1:68d2526:     private static Object newInstance(Constructor<?> constructor, Object...args)
1:68d2526:     {
1:68d2526:         try
1:68d2526:         {
1:4cf8a8a:             return constructor.newInstance(args);
1:68d2526:         }
1:68d2526:         catch (InstantiationException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
1:68d2526:         }
1:68d2526:         catch (IllegalAccessException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
1:68d2526:         }
1:68d2526:         catch (InvocationTargetException e)
1:68d2526:         {
1:4cf8a8a:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
1:4cf8a8a:         }
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Creates JobContext from a JobConf and jobId using the correct constructor
1:4cf8a8a:      * for based on Hadoop version. <code>jobId</code> could be null.
1:4cf8a8a:      */
1:4cf8a8a:     public static JobContext newJobContext(Configuration conf, JobID jobId) {
1:4cf8a8a:         return (JobContext) newInstance(JOB_CONTEXT_CONSTRUCTOR, conf, jobId);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Creates TaskAttempContext from a JobConf and jobId using the correct
1:4cf8a8a:      * constructor for based on Hadoop version.
1:4cf8a8a:      */
1:4cf8a8a:     public static TaskAttemptContext newTaskAttemptContext(
1:4cf8a8a:             Configuration conf, TaskAttemptID taskAttemptId) {
1:4cf8a8a:         return (TaskAttemptContext)
1:4cf8a8a:                 newInstance(TASK_CONTEXT_CONSTRUCTOR, conf, taskAttemptId);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Instantiates MapContext under Hadoop 1 and MapContextImpl under Hadoop 2.
1:4cf8a8a:      */
1:4cf8a8a:     public static MapContext newMapContext(Configuration conf,
1:4cf8a8a:                                            TaskAttemptID taskAttemptID,
1:4cf8a8a:                                            RecordReader recordReader,
1:4cf8a8a:                                            RecordWriter recordWriter,
1:4cf8a8a:                                            OutputCommitter outputCommitter,
1:4cf8a8a:                                            StatusReporter statusReporter,
1:4cf8a8a:                                            InputSplit inputSplit) {
1:4cf8a8a:         return (MapContext) newInstance(MAP_CONTEXT_CONSTRUCTOR,
1:4cf8a8a:                 conf, taskAttemptID, recordReader, recordWriter, outputCommitter,
1:4cf8a8a:                 statusReporter, inputSplit);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * @return with Hadoop 2 : <code>new GenericCounter(args)</code>,<br>
1:4cf8a8a:      *         with Hadoop 1 : <code>new Counter(args)</code>
1:4cf8a8a:      */
1:68d2526:     public static Counter newGenericCounter(String name, String displayName, long value)
1:68d2526:     {
1:68d2526:         try
1:68d2526:         {
1:4cf8a8a:             return (Counter)
1:4cf8a8a:                     GENERIC_COUNTER_CONSTRUCTOR.newInstance(name, displayName, value);
1:68d2526:         }
1:68d2526:         catch (InstantiationException | IllegalAccessException | InvocationTargetException e)
1:68d2526:         {
3:4cf8a8a:             throw new IllegalArgumentException("Can't instantiate Counter", e);
1:4cf8a8a:         }
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Invokes a method and rethrows any exception as runtime excetpions.
1:4cf8a8a:      */
1:68d2526:     private static Object invoke(Method method, Object obj, Object... args)
1:68d2526:     {
1:68d2526:         try
1:68d2526:         {
1:4cf8a8a:             return method.invoke(obj, args);
1:68d2526:         }
1:68d2526:         catch (IllegalAccessException | InvocationTargetException e)
1:68d2526:         {
2:4cf8a8a:             throw new IllegalArgumentException("Can't invoke method " + method.getName(), e);
1:4cf8a8a:         }
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Invoke getConfiguration() on JobContext. Works with both
1:4cf8a8a:      * Hadoop 1 and 2.
1:4cf8a8a:      */
1:68d2526:     public static Configuration getConfiguration(JobContext context)
1:68d2526:     {
1:4cf8a8a:         return (Configuration) invoke(GET_CONFIGURATION_METHOD, context);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Invoke setStatus() on TaskAttemptContext. Works with both
1:4cf8a8a:      * Hadoop 1 and 2.
1:4cf8a8a:      */
1:68d2526:     public static void setStatus(TaskAttemptContext context, String status)
1:68d2526:     {
1:4cf8a8a:         invoke(SET_STATUS_METHOD, context, status);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * returns TaskAttemptContext.getTaskAttemptID(). Works with both
1:4cf8a8a:      * Hadoop 1 and 2.
1:4cf8a8a:      */
1:68d2526:     public static TaskAttemptID getTaskAttemptID(TaskAttemptContext taskContext)
1:68d2526:     {
1:4cf8a8a:         return (TaskAttemptID) invoke(GET_TASK_ATTEMPT_ID, taskContext);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Invoke getCounter() on TaskInputOutputContext. Works with both
1:4cf8a8a:      * Hadoop 1 and 2.
1:4cf8a8a:      */
1:4cf8a8a:     public static Counter getCounter(TaskInputOutputContext context,
1:68d2526:                                      String groupName, String counterName)
1:68d2526:     {
1:4cf8a8a:         return (Counter) invoke(GET_COUNTER_METHOD, context, groupName, counterName);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Invoke TaskAttemptContext.progress(). Works with both
1:4cf8a8a:      * Hadoop 1 and 2.
1:4cf8a8a:      */
1:68d2526:     public static void progress(TaskAttemptContext context)
1:68d2526:     {
1:4cf8a8a:         invoke(PROGRESS_METHOD, context);
1:4cf8a8a:     }
1:4cf8a8a: 
1:4cf8a8a:     /**
1:4cf8a8a:      * Increment the counter. Works with both Hadoop 1 and 2
1:4cf8a8a:      */
1:68d2526:     public static void incrementCounter(Counter counter, long increment)
1:68d2526:     {
1:4cf8a8a:         // incrementing a count might be called often. Might be affected by
1:4cf8a8a:         // cost of invoke(). might be good candidate to handle in a shim.
1:4cf8a8a:         // (TODO Raghu) figure out how achieve such a build with maven
1:4cf8a8a:         invoke(INCREMENT_COUNTER_METHOD, counter, increment);
1:4cf8a8a:     }
1:4cf8a8a: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1: public class HadoopCompat
1: {
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         try
1:         {
1:         } catch (ClassNotFoundException cnfe)
1:         {
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
1:             if (v21)
1:             {
/////////////////////////////////////////////////////////////////////////
1:             }
1:             else
1:             {
/////////////////////////////////////////////////////////////////////////
1:         } catch (ClassNotFoundException e)
1:         {
1:         try
1:         {
/////////////////////////////////////////////////////////////////////////
1:             if (useV21)
1:             {
/////////////////////////////////////////////////////////////////////////
1:                 try
1:                 {
1:                 }
1:                 catch (Exception e)
1:                 {
1:             }
1:             else
1:             {
/////////////////////////////////////////////////////////////////////////
1:         }
1:         catch (SecurityException e)
1:         {
1:         }
1:         catch (NoSuchMethodException e)
1:         {
1:         }
1:         catch (NoSuchFieldException e)
1:         {
1:         }
1:         catch (ClassNotFoundException e)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isVersion2x()
1:     {
1:     private static Object newInstance(Constructor<?> constructor, Object...args)
1:     {
1:         try
1:         {
1:         }
1:         catch (InstantiationException e)
1:         {
1:         }
1:         catch (IllegalAccessException e)
1:         {
1:         }
1:         catch (InvocationTargetException e)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     public static Counter newGenericCounter(String name, String displayName, long value)
1:     {
1:         try
1:         {
1:         }
1:         catch (InstantiationException | IllegalAccessException | InvocationTargetException e)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     private static Object invoke(Method method, Object obj, Object... args)
1:     {
1:         try
1:         {
1:         }
1:         catch (IllegalAccessException | InvocationTargetException e)
1:         {
/////////////////////////////////////////////////////////////////////////
1:     public static Configuration getConfiguration(JobContext context)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static void setStatus(TaskAttemptContext context, String status)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static TaskAttemptID getTaskAttemptID(TaskAttemptContext taskContext)
1:     {
/////////////////////////////////////////////////////////////////////////
1:                                      String groupName, String counterName)
1:     {
/////////////////////////////////////////////////////////////////////////
1:     public static void progress(TaskAttemptContext context)
1:     {
1:     public static void incrementCounter(Counter counter, long increment)
1:     {
commit:01880a4
/////////////////////////////////////////////////////////////////////////
0:         } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
/////////////////////////////////////////////////////////////////////////
0:         } catch (IllegalAccessException | InvocationTargetException e) {
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:deff175
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f25da97
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.JVMStabilityInspector;
/////////////////////////////////////////////////////////////////////////
0:                     JVMStabilityInspector.inspectThrowable(e);
author:Brandon Williams
-------------------------------------------------------------------------------
commit:4cf8a8a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.hadoop;
1: 
1: import java.lang.reflect.Constructor;
1: import java.lang.reflect.Field;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: 
1: import org.apache.hadoop.conf.Configuration;
1: import org.apache.hadoop.mapreduce.Counter;
1: import org.apache.hadoop.mapreduce.InputSplit;
1: import org.apache.hadoop.mapreduce.JobContext;
1: import org.apache.hadoop.mapreduce.JobID;
1: import org.apache.hadoop.mapreduce.MapContext;
1: import org.apache.hadoop.mapreduce.OutputCommitter;
1: import org.apache.hadoop.mapreduce.RecordReader;
1: import org.apache.hadoop.mapreduce.RecordWriter;
1: import org.apache.hadoop.mapreduce.StatusReporter;
1: import org.apache.hadoop.mapreduce.TaskAttemptContext;
1: import org.apache.hadoop.mapreduce.TaskAttemptID;
1: import org.apache.hadoop.mapreduce.TaskInputOutputContext;
1: 
1: /*
1:  * This is based on ContextFactory.java from hadoop-2.0.x sources.
1:  */
1: 
1: /**
1:  * Utility methods to allow applications to deal with inconsistencies between
1:  * MapReduce Context Objects API between Hadoop 1.x and 2.x.
1:  */
0: public class HadoopCompat {
1: 
1:     private static final boolean useV21;
1: 
1:     private static final Constructor<?> JOB_CONTEXT_CONSTRUCTOR;
1:     private static final Constructor<?> TASK_CONTEXT_CONSTRUCTOR;
1:     private static final Constructor<?> MAP_CONTEXT_CONSTRUCTOR;
1:     private static final Constructor<?> GENERIC_COUNTER_CONSTRUCTOR;
1: 
1:     private static final Field READER_FIELD;
1:     private static final Field WRITER_FIELD;
1: 
1:     private static final Method GET_CONFIGURATION_METHOD;
1:     private static final Method SET_STATUS_METHOD;
1:     private static final Method GET_COUNTER_METHOD;
1:     private static final Method INCREMENT_COUNTER_METHOD;
1:     private static final Method GET_TASK_ATTEMPT_ID;
1:     private static final Method PROGRESS_METHOD;
1: 
0:     static {
1:         boolean v21 = true;
1:         final String PACKAGE = "org.apache.hadoop.mapreduce";
0:         try {
1:             Class.forName(PACKAGE + ".task.JobContextImpl");
0:         } catch (ClassNotFoundException cnfe) {
1:             v21 = false;
1:         }
1:         useV21 = v21;
1:         Class<?> jobContextCls;
1:         Class<?> taskContextCls;
1:         Class<?> taskIOContextCls;
1:         Class<?> mapContextCls;
1:         Class<?> genericCounterCls;
0:         try {
0:             if (v21) {
1:                 jobContextCls =
1:                         Class.forName(PACKAGE+".task.JobContextImpl");
1:                 taskContextCls =
1:                         Class.forName(PACKAGE+".task.TaskAttemptContextImpl");
1:                 taskIOContextCls =
1:                         Class.forName(PACKAGE+".task.TaskInputOutputContextImpl");
1:                 mapContextCls = Class.forName(PACKAGE + ".task.MapContextImpl");
1:                 genericCounterCls = Class.forName(PACKAGE+".counters.GenericCounter");
0:             } else {
1:                 jobContextCls =
1:                         Class.forName(PACKAGE+".JobContext");
1:                 taskContextCls =
1:                         Class.forName(PACKAGE+".TaskAttemptContext");
1:                 taskIOContextCls =
1:                         Class.forName(PACKAGE+".TaskInputOutputContext");
1:                 mapContextCls = Class.forName(PACKAGE + ".MapContext");
1:                 genericCounterCls =
1:                         Class.forName("org.apache.hadoop.mapred.Counters$Counter");
1: 
1:             }
0:         } catch (ClassNotFoundException e) {
1:             throw new IllegalArgumentException("Can't find class", e);
1:         }
0:         try {
1:             JOB_CONTEXT_CONSTRUCTOR =
1:                     jobContextCls.getConstructor(Configuration.class, JobID.class);
1:             JOB_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:             TASK_CONTEXT_CONSTRUCTOR =
1:                     taskContextCls.getConstructor(Configuration.class,
1:                             TaskAttemptID.class);
1:             TASK_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:             GENERIC_COUNTER_CONSTRUCTOR =
1:                     genericCounterCls.getDeclaredConstructor(String.class,
1:                             String.class,
1:                             Long.TYPE);
1:             GENERIC_COUNTER_CONSTRUCTOR.setAccessible(true);
1: 
0:             if (useV21) {
1:                 MAP_CONTEXT_CONSTRUCTOR =
1:                         mapContextCls.getDeclaredConstructor(Configuration.class,
1:                                 TaskAttemptID.class,
1:                                 RecordReader.class,
1:                                 RecordWriter.class,
1:                                 OutputCommitter.class,
1:                                 StatusReporter.class,
1:                                 InputSplit.class);
1:                 Method get_counter;
0:                 try {
1:                     get_counter = Class.forName(PACKAGE + ".TaskAttemptContext").getMethod("getCounter", String.class,
1:                             String.class);
0:                 } catch (Exception e) {
1:                     get_counter = Class.forName(PACKAGE + ".TaskInputOutputContext").getMethod("getCounter",
1:                             String.class, String.class);
1:                 }
1:                 GET_COUNTER_METHOD = get_counter;
0:             } else {
1:                 MAP_CONTEXT_CONSTRUCTOR =
1:                         mapContextCls.getConstructor(Configuration.class,
1:                                 TaskAttemptID.class,
1:                                 RecordReader.class,
1:                                 RecordWriter.class,
1:                                 OutputCommitter.class,
1:                                 StatusReporter.class,
1:                                 InputSplit.class);
1:                 GET_COUNTER_METHOD = Class.forName(PACKAGE+".TaskInputOutputContext")
1:                         .getMethod("getCounter", String.class, String.class);
1:             }
1:             MAP_CONTEXT_CONSTRUCTOR.setAccessible(true);
1:             READER_FIELD = mapContextCls.getDeclaredField("reader");
1:             READER_FIELD.setAccessible(true);
1:             WRITER_FIELD = taskIOContextCls.getDeclaredField("output");
1:             WRITER_FIELD.setAccessible(true);
1:             GET_CONFIGURATION_METHOD = Class.forName(PACKAGE+".JobContext")
1:                     .getMethod("getConfiguration");
1:             SET_STATUS_METHOD = Class.forName(PACKAGE+".TaskAttemptContext")
1:                     .getMethod("setStatus", String.class);
1:             GET_TASK_ATTEMPT_ID = Class.forName(PACKAGE+".TaskAttemptContext")
1:                     .getMethod("getTaskAttemptID");
1:             INCREMENT_COUNTER_METHOD = Class.forName(PACKAGE+".Counter")
1:                     .getMethod("increment", Long.TYPE);
1:             PROGRESS_METHOD = Class.forName(PACKAGE+".TaskAttemptContext")
1:                     .getMethod("progress");
1: 
0:         } catch (SecurityException e) {
1:             throw new IllegalArgumentException("Can't run constructor ", e);
0:         } catch (NoSuchMethodException e) {
1:             throw new IllegalArgumentException("Can't find constructor ", e);
0:         } catch (NoSuchFieldException e) {
1:             throw new IllegalArgumentException("Can't find field ", e);
0:         } catch (ClassNotFoundException e) {
1:             throw new IllegalArgumentException("Can't find class", e);
1:         }
1:     }
1: 
1:     /**
1:      * True if runtime Hadoop version is 2.x, false otherwise.
1:      */
0:     public static boolean isVersion2x() {
1:         return useV21;
1:     }
1: 
0:     private static Object newInstance(Constructor<?> constructor, Object...args) {
0:         try {
1:             return constructor.newInstance(args);
0:         } catch (InstantiationException e) {
1:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
0:         } catch (IllegalAccessException e) {
1:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
0:         } catch (InvocationTargetException e) {
1:             throw new IllegalArgumentException("Can't instantiate " + constructor, e);
1:         }
1:     }
1: 
1:     /**
1:      * Creates JobContext from a JobConf and jobId using the correct constructor
1:      * for based on Hadoop version. <code>jobId</code> could be null.
1:      */
1:     public static JobContext newJobContext(Configuration conf, JobID jobId) {
1:         return (JobContext) newInstance(JOB_CONTEXT_CONSTRUCTOR, conf, jobId);
1:     }
1: 
1:     /**
1:      * Creates TaskAttempContext from a JobConf and jobId using the correct
1:      * constructor for based on Hadoop version.
1:      */
1:     public static TaskAttemptContext newTaskAttemptContext(
1:             Configuration conf, TaskAttemptID taskAttemptId) {
1:         return (TaskAttemptContext)
1:                 newInstance(TASK_CONTEXT_CONSTRUCTOR, conf, taskAttemptId);
1:     }
1: 
1:     /**
1:      * Instantiates MapContext under Hadoop 1 and MapContextImpl under Hadoop 2.
1:      */
1:     public static MapContext newMapContext(Configuration conf,
1:                                            TaskAttemptID taskAttemptID,
1:                                            RecordReader recordReader,
1:                                            RecordWriter recordWriter,
1:                                            OutputCommitter outputCommitter,
1:                                            StatusReporter statusReporter,
1:                                            InputSplit inputSplit) {
1:         return (MapContext) newInstance(MAP_CONTEXT_CONSTRUCTOR,
1:                 conf, taskAttemptID, recordReader, recordWriter, outputCommitter,
1:                 statusReporter, inputSplit);
1:     }
1: 
1:     /**
1:      * @return with Hadoop 2 : <code>new GenericCounter(args)</code>,<br>
1:      *         with Hadoop 1 : <code>new Counter(args)</code>
1:      */
0:     public static Counter newGenericCounter(String name, String displayName, long value) {
0:         try {
1:             return (Counter)
1:                     GENERIC_COUNTER_CONSTRUCTOR.newInstance(name, displayName, value);
0:         } catch (InstantiationException e) {
1:             throw new IllegalArgumentException("Can't instantiate Counter", e);
0:         } catch (IllegalAccessException e) {
1:             throw new IllegalArgumentException("Can't instantiate Counter", e);
0:         } catch (InvocationTargetException e) {
1:             throw new IllegalArgumentException("Can't instantiate Counter", e);
1:         }
1:     }
1: 
1:     /**
1:      * Invokes a method and rethrows any exception as runtime excetpions.
1:      */
0:     private static Object invoke(Method method, Object obj, Object... args) {
0:         try {
1:             return method.invoke(obj, args);
0:         } catch (IllegalAccessException e) {
1:             throw new IllegalArgumentException("Can't invoke method " + method.getName(), e);
0:         } catch (InvocationTargetException e) {
1:             throw new IllegalArgumentException("Can't invoke method " + method.getName(), e);
1:         }
1:     }
1: 
1:     /**
1:      * Invoke getConfiguration() on JobContext. Works with both
1:      * Hadoop 1 and 2.
1:      */
0:     public static Configuration getConfiguration(JobContext context) {
1:         return (Configuration) invoke(GET_CONFIGURATION_METHOD, context);
1:     }
1: 
1:     /**
1:      * Invoke setStatus() on TaskAttemptContext. Works with both
1:      * Hadoop 1 and 2.
1:      */
0:     public static void setStatus(TaskAttemptContext context, String status) {
1:         invoke(SET_STATUS_METHOD, context, status);
1:     }
1: 
1:     /**
1:      * returns TaskAttemptContext.getTaskAttemptID(). Works with both
1:      * Hadoop 1 and 2.
1:      */
0:     public static TaskAttemptID getTaskAttemptID(TaskAttemptContext taskContext) {
1:         return (TaskAttemptID) invoke(GET_TASK_ATTEMPT_ID, taskContext);
1:     }
1: 
1:     /**
1:      * Invoke getCounter() on TaskInputOutputContext. Works with both
1:      * Hadoop 1 and 2.
1:      */
1:     public static Counter getCounter(TaskInputOutputContext context,
0:                                      String groupName, String counterName) {
1:         return (Counter) invoke(GET_COUNTER_METHOD, context, groupName, counterName);
1:     }
1: 
1:     /**
1:      * Invoke TaskAttemptContext.progress(). Works with both
1:      * Hadoop 1 and 2.
1:      */
0:     public static void progress(TaskAttemptContext context) {
1:         invoke(PROGRESS_METHOD, context);
1:     }
1: 
1:     /**
1:      * Increment the counter. Works with both Hadoop 1 and 2
1:      */
0:     public static void incrementCounter(Counter counter, long increment) {
1:         // incrementing a count might be called often. Might be affected by
1:         // cost of invoke(). might be good candidate to handle in a shim.
1:         // (TODO Raghu) figure out how achieve such a build with maven
1:         invoke(INCREMENT_COUNTER_METHOD, counter, increment);
1:     }
1: }
============================================================================