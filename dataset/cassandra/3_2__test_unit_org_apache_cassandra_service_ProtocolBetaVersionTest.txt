1:d9322a1: /*
1:d9322a1:  * Licensed to the Apache Software Foundation (ASF) under one
1:d9322a1:  * or more contributor license agreements.  See the NOTICE file
1:d9322a1:  * distributed with this work for additional information
1:d9322a1:  * regarding copyright ownership.  The ASF licenses this file
1:d9322a1:  * to you under the Apache License, Version 2.0 (the
1:d9322a1:  * "License"); you may not use this file except in compliance
1:d9322a1:  * with the License.  You may obtain a copy of the License at
1:d9322a1:  *
1:d9322a1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:d9322a1:  *
1:d9322a1:  * Unless required by applicable law or agreed to in writing, software
1:d9322a1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d9322a1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d9322a1:  * See the License for the specific language governing permissions and
1:d9322a1:  * limitations under the License.
1:d9322a1:  */
1:d9322a1: package org.apache.cassandra.service;
1:d9322a1: 
1:d9322a1: import org.junit.BeforeClass;
1:d9322a1: import org.junit.Test;
1:d9322a1: 
1:d9322a1: import org.apache.cassandra.config.*;
1:d9322a1: import org.apache.cassandra.cql3.*;
1:d9322a1: import org.apache.cassandra.transport.*;
1:d9322a1: import org.apache.cassandra.transport.messages.*;
1:d9322a1: 
1:d9322a1: import static junit.framework.Assert.assertEquals;
1:e0adc16: import static junit.framework.Assert.assertTrue;
1:d9322a1: import static junit.framework.Assert.fail;
1:d9322a1: 
1:d9322a1: public class ProtocolBetaVersionTest extends CQLTester
1:d9322a1: {
1:d9322a1:     @BeforeClass
1:d9322a1:     public static void setUp()
1:d9322a1:     {
1:d9322a1:         requireNetwork();
1:d9322a1:         DatabaseDescriptor.setBatchSizeWarnThresholdInKB(1);
1:d9322a1:     }
1:d9322a1: 
1:e0adc16:     private ProtocolVersion getBetaVersion()
1:e0adc16:     {
1:e0adc16:         ProtocolVersion betaVersion = ProtocolVersion.BETA.orElse(null);
1:e0adc16:         if (betaVersion == null)
1:e0adc16:         {
1:e0adc16:             for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:e0adc16:             {
1:e0adc16:                 if (version.isBeta())
1:e0adc16:                 {
1:e0adc16:                     betaVersion = version;
1:e0adc16:                     break;
1:e0adc16:                 }
1:e0adc16:             }
1:e0adc16:         }
1:e0adc16:         return betaVersion;
1:e0adc16:     }
1:e0adc16: 
1:d9322a1:     @Test
1:d9322a1:     public void testProtocolBetaVersion() throws Exception
1:d9322a1:     {
1:e0adc16:         ProtocolVersion betaVersion = getBetaVersion();
1:e0adc16:         if (betaVersion == null)
1:e0adc16:         {
1:e0adc16:             logger.info("No beta version found for testing");
1:e0adc16:             return;
1:e0adc16:         }
1:d9322a1: 
1:e0adc16:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, v int)");
1:e0adc16:         assertTrue(betaVersion.isBeta()); // change to another beta version or remove test if no beta version
1:e0adc16: 
1:e0adc16:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, betaVersion, true, new EncryptionOptions.ClientEncryptionOptions()))
1:d9322a1:         {
1:d9322a1:             client.connect(false);
1:d9322a1:             for (int i = 0; i < 10; i++)
1:d9322a1:             {
1:d9322a1:                 QueryMessage query = new QueryMessage(String.format("INSERT INTO %s.%s (pk, v) VALUES (%s, %s)",
1:d9322a1:                                                                     KEYSPACE,
1:d9322a1:                                                                     currentTable(),
1:d9322a1:                                                                     i, i), QueryOptions.DEFAULT);
1:d9322a1:                 client.execute(query);
1:d9322a1:             }
1:d9322a1: 
1:d9322a1:             QueryMessage query = new QueryMessage(String.format("SELECT * FROM %s.%s",
1:d9322a1:                                                                 KEYSPACE,
1:d9322a1:                                                                 currentTable()), QueryOptions.DEFAULT);
1:d9322a1:             ResultMessage.Rows resp = (ResultMessage.Rows) client.execute(query);
1:d9322a1:             assertEquals(10, resp.result.size());
1:d9322a1:         }
1:d9322a1:         catch (Exception e)
1:d9322a1:         {
1:d9322a1:             fail("No exceptions should've been thrown: " + e.getMessage());
1:d9322a1:         }
1:d9322a1:     }
1:d9322a1: 
1:d9322a1:     @Test
1:d9322a1:     public void unforcedProtocolVersionTest() throws Exception
1:e0adc16:     {
1:e0adc16:         ProtocolVersion betaVersion = getBetaVersion();
1:e0adc16:         if (betaVersion == null)
1:d9322a1:         {
1:e0adc16:             logger.info("No beta version found for testing");
1:e0adc16:             return;
1:e0adc16:         }
1:e0adc16: 
1:e0adc16:         assertTrue(betaVersion.isBeta()); // change to another beta version or remove test if no beta version
1:e0adc16:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, betaVersion, false, new EncryptionOptions.ClientEncryptionOptions()))
1:d9322a1:         {
1:d9322a1:             client.connect(false);
1:d9322a1:             fail("Exception should have been thrown");
1:d9322a1:         }
1:d9322a1:         catch (Exception e)
1:d9322a1:         {
1:e0adc16:             assertEquals("Beta version of server used (5/v5-beta), but USE_BETA flag is not set",
1:d9322a1:                          e.getMessage());
1:d9322a1:         }
1:d9322a1:     }
1:d9322a1: }
1:d9322a1: 
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import static junit.framework.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:     private ProtocolVersion getBetaVersion()
1:     {
1:         ProtocolVersion betaVersion = ProtocolVersion.BETA.orElse(null);
1:         if (betaVersion == null)
1:         {
1:             for (ProtocolVersion version : ProtocolVersion.SUPPORTED)
1:             {
1:                 if (version.isBeta())
1:                 {
1:                     betaVersion = version;
1:                     break;
1:                 }
1:             }
1:         }
1:         return betaVersion;
1:     }
1: 
1:         ProtocolVersion betaVersion = getBetaVersion();
1:         if (betaVersion == null)
1:         {
1:             logger.info("No beta version found for testing");
1:             return;
1:         }
1:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, v int)");
1:         assertTrue(betaVersion.isBeta()); // change to another beta version or remove test if no beta version
1: 
1:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, betaVersion, true, new EncryptionOptions.ClientEncryptionOptions()))
/////////////////////////////////////////////////////////////////////////
1:         ProtocolVersion betaVersion = getBetaVersion();
1:         if (betaVersion == null)
1:         {
1:             logger.info("No beta version found for testing");
1:             return;
1:         }
1: 
1:         assertTrue(betaVersion.isBeta()); // change to another beta version or remove test if no beta version
1:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, betaVersion, false, new EncryptionOptions.ClientEncryptionOptions()))
1:             assertEquals("Beta version of server used (5/v5-beta), but USE_BETA flag is not set",
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9484783
/////////////////////////////////////////////////////////////////////////
0:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, Server.BETA_VERSION, false, new EncryptionOptions.ClientEncryptionOptions()))
author:Alex Petrov
-------------------------------------------------------------------------------
commit:d9322a1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.service;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.*;
1: import org.apache.cassandra.cql3.*;
1: import org.apache.cassandra.transport.*;
1: import org.apache.cassandra.transport.messages.*;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.fail;
1: 
1: public class ProtocolBetaVersionTest extends CQLTester
1: {
1:     @BeforeClass
1:     public static void setUp()
1:     {
1:         requireNetwork();
1:         DatabaseDescriptor.setBatchSizeWarnThresholdInKB(1);
1:     }
1: 
1:     @Test
1:     public void testProtocolBetaVersion() throws Exception
1:     {
0:         createTable("CREATE TABLE %s (pk int PRIMARY KEY, v int)");
1: 
0:         try (SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, Server.BETA_VERSION, true, new EncryptionOptions.ClientEncryptionOptions()))
1:         {
1:             client.connect(false);
1:             for (int i = 0; i < 10; i++)
1:             {
1:                 QueryMessage query = new QueryMessage(String.format("INSERT INTO %s.%s (pk, v) VALUES (%s, %s)",
1:                                                                     KEYSPACE,
1:                                                                     currentTable(),
1:                                                                     i, i), QueryOptions.DEFAULT);
1:                 client.execute(query);
1:             }
1: 
1:             QueryMessage query = new QueryMessage(String.format("SELECT * FROM %s.%s",
1:                                                                 KEYSPACE,
1:                                                                 currentTable()), QueryOptions.DEFAULT);
1:             ResultMessage.Rows resp = (ResultMessage.Rows) client.execute(query);
1:             assertEquals(10, resp.result.size());
1:         }
1:         catch (Exception e)
1:         {
1:             fail("No exceptions should've been thrown: " + e.getMessage());
1:         }
1:     }
1: 
1:     @Test
1:     public void unforcedProtocolVersionTest() throws Exception
1:     {
0:         try
1:         {
0:             SimpleClient client = new SimpleClient(nativeAddr.getHostAddress(), nativePort, Server.BETA_VERSION, false, new EncryptionOptions.ClientEncryptionOptions());
1:             client.connect(false);
1:             fail("Exception should have been thrown");
1:         }
1:         catch (Exception e)
1:         {
0:             assertEquals("Beta version of server used (5), but USE_BETA flag is not set",
1:                          e.getMessage());
1:         }
1:     }
1: }
1: 
============================================================================