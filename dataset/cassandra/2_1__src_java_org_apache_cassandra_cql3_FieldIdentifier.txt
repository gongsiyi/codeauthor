1:4ed0060: /*
1:4ed0060:  * Licensed to the Apache Software Foundation (ASF) under one
1:4ed0060:  * or more contributor license agreements.  See the NOTICE file
1:4ed0060:  * distributed with this work for additional information
1:4ed0060:  * regarding copyright ownership.  The ASF licenses this file
1:4ed0060:  * to you under the Apache License, Version 2.0 (the
1:4ed0060:  * "License"); you may not use this file except in compliance
1:4ed0060:  * with the License.  You may obtain a copy of the License at
1:4ed0060:  *
1:4ed0060:  *     http://www.apache.org/licenses/LICENSE-2.0
1:4ed0060:  *
1:4ed0060:  * Unless required by applicable law or agreed to in writing, software
1:4ed0060:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4ed0060:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ed0060:  * See the License for the specific language governing permissions and
1:4ed0060:  * limitations under the License.
1:4ed0060:  */
1:4ed0060: package org.apache.cassandra.cql3;
1:4ed0060: 
1:4ed0060: import java.util.Locale;
1:4ed0060: import java.nio.ByteBuffer;
1:4ed0060: 
1:4ed0060: import org.apache.cassandra.db.marshal.UTF8Type;
1:4ed0060: import org.apache.cassandra.exceptions.SyntaxException;
1:4ed0060: import org.apache.cassandra.serializers.MarshalException;
1:4ed0060: 
1:4ed0060: /**
1:4ed0060:  * Identifies a field in a UDT.
1:4ed0060:  */
1:4ed0060: public class FieldIdentifier
1:4ed0060: {
1:4ed0060:     public final ByteBuffer bytes;
1:4ed0060: 
1:4ed0060:     public FieldIdentifier(ByteBuffer bytes)
1:4ed0060:     {
1:4ed0060:         this.bytes = bytes;
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     /**
1:4ed0060:      * Creates a {@code FieldIdentifier} from an unquoted identifier string.
1:4ed0060:      */
1:4ed0060:     public static FieldIdentifier forUnquoted(String text)
1:4ed0060:     {
1:4ed0060:         return new FieldIdentifier(convert(text.toLowerCase(Locale.US)));
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     /**
1:4ed0060:      * Creates a {@code FieldIdentifier} from a quoted identifier string.
1:4ed0060:      */
1:4ed0060:     public static FieldIdentifier forQuoted(String text)
1:4ed0060:     {
1:4ed0060:         return new FieldIdentifier(convert(text));
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     /**
1:4ed0060:      * Creates a {@code FieldIdentifier} from an internal string.
1:4ed0060:      */
1:4ed0060:     public static FieldIdentifier forInternalString(String text)
1:4ed0060:     {
1:4ed0060:         // If we store a field internally, we consider it as quoted, i.e. we preserve
1:4ed0060:         // whatever case the text has.
1:4ed0060:         return forQuoted(text);
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     private static ByteBuffer convert(String text)
1:4ed0060:     {
1:4ed0060:         try
1:4ed0060:         {
1:4ed0060:             return UTF8Type.instance.decompose(text);
1:4ed0060:         }
1:4ed0060:         catch (MarshalException e)
1:4ed0060:         {
1:4ed0060:             throw new SyntaxException(String.format("For field name %s: %s", text, e.getMessage()));
1:4ed0060:         }
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Override
1:4ed0060:     public String toString()
1:4ed0060:     {
1:4ed0060:         return UTF8Type.instance.compose(bytes);
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Override
1:4ed0060:     public final int hashCode()
1:4ed0060:     {
1:4ed0060:         return bytes.hashCode();
1:4ed0060:     }
1:4ed0060: 
1:4ed0060:     @Override
1:4ed0060:     public final boolean equals(Object o)
1:4ed0060:     {
1:4ed0060:         if(!(o instanceof FieldIdentifier))
1:4ed0060:             return false;
1:4ed0060:         FieldIdentifier that = (FieldIdentifier)o;
1:4ed0060:         return this.bytes.equals(that.bytes);
1:4ed0060:     }
1:4ed0060: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import java.util.Locale;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.SyntaxException;
0: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.serializers.MarshalException;
1: 
1: /**
1:  * Identifies a field in a UDT.
1:  */
1: public class FieldIdentifier
1: {
1:     public final ByteBuffer bytes;
1: 
1:     public FieldIdentifier(ByteBuffer bytes)
1:     {
1:         this.bytes = bytes;
1:     }
1: 
1:     /**
1:      * Creates a {@code FieldIdentifier} from an unquoted identifier string.
1:      */
1:     public static FieldIdentifier forUnquoted(String text)
1:     {
1:         return new FieldIdentifier(convert(text.toLowerCase(Locale.US)));
1:     }
1: 
1:     /**
1:      * Creates a {@code FieldIdentifier} from a quoted identifier string.
1:      */
1:     public static FieldIdentifier forQuoted(String text)
1:     {
1:         return new FieldIdentifier(convert(text));
1:     }
1: 
1:     /**
1:      * Creates a {@code FieldIdentifier} from an internal string.
1:      */
1:     public static FieldIdentifier forInternalString(String text)
1:     {
1:         // If we store a field internally, we consider it as quoted, i.e. we preserve
1:         // whatever case the text has.
1:         return forQuoted(text);
1:     }
1: 
1:     private static ByteBuffer convert(String text)
1:     {
1:         try
1:         {
1:             return UTF8Type.instance.decompose(text);
1:         }
1:         catch (MarshalException e)
1:         {
1:             throw new SyntaxException(String.format("For field name %s: %s", text, e.getMessage()));
1:         }
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return UTF8Type.instance.compose(bytes);
1:     }
1: 
1:     @Override
1:     public final int hashCode()
1:     {
1:         return bytes.hashCode();
1:     }
1: 
1:     @Override
1:     public final boolean equals(Object o)
1:     {
1:         if(!(o instanceof FieldIdentifier))
1:             return false;
1:         FieldIdentifier that = (FieldIdentifier)o;
1:         return this.bytes.equals(that.bytes);
1:     }
1: }
============================================================================