1:90033b9: /*
1:90033b9:  * Licensed to the Apache Software Foundation (ASF) under one
1:90033b9:  * or more contributor license agreements.  See the NOTICE file
1:90033b9:  * distributed with this work for additional information
1:90033b9:  * regarding copyright ownership.  The ASF licenses this file
1:90033b9:  * to you under the Apache License, Version 2.0 (the
1:90033b9:  * "License"); you may not use this file except in compliance
1:90033b9:  * with the License.  You may obtain a copy of the License at
1:90033b9:  *
1:90033b9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90033b9:  *
1:90033b9:  * Unless required by applicable law or agreed to in writing, software
1:90033b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90033b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90033b9:  * See the License for the specific language governing permissions and
1:90033b9:  * limitations under the License.
1:90033b9:  */
1:90033b9: package org.apache.cassandra.hints;
1:90033b9: 
1:90033b9: import java.io.File;
1:90033b9: import java.nio.ByteBuffer;
1:90033b9: import java.util.ArrayList;
1:90033b9: import java.util.Iterator;
1:90033b9: import java.util.LinkedList;
1:90033b9: import java.util.List;
1:90033b9: import java.util.UUID;
1:90033b9: import java.util.concurrent.TimeUnit;
1:90033b9: 
1:90033b9: import com.google.common.collect.ImmutableMap;
1:90033b9: import com.google.common.io.Files;
1:90033b9: import org.junit.Assert;
1:90033b9: import org.junit.BeforeClass;
1:90033b9: 
1:90033b9: import org.apache.cassandra.SchemaLoader;
1:90033b9: import org.apache.cassandra.config.CFMetaData;
1:90033b9: import org.apache.cassandra.config.Schema;
1:90033b9: import org.apache.cassandra.db.Mutation;
1:90033b9: import org.apache.cassandra.db.RowUpdateBuilder;
1:90033b9: import org.apache.cassandra.schema.KeyspaceParams;
1:90033b9: import org.apache.cassandra.utils.UUIDGen;
1:90033b9: 
1:90033b9: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:90033b9: 
1:90033b9: /**
1:90033b9:  * Base class for testing compressed and encrypted hints.
1:90033b9:  */
1:90033b9: public abstract class AlteredHints
1:90033b9: {
1:90033b9:     protected static final String KEYSPACE = "hints_compression_test";
1:90033b9:     private static final String TABLE = "table";
1:90033b9: 
1:90033b9:     private static Mutation createMutation(int index, long timestamp)
1:90033b9:     {
1:90033b9:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:90033b9:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:90033b9:                .clustering(bytes(index))
1:90033b9:                .add("val", bytes(index))
1:90033b9:                .build();
1:90033b9:     }
1:90033b9: 
1:90033b9:     private static Hint createHint(int idx, long baseTimestamp)
1:90033b9:     {
1:90033b9:         long timestamp = baseTimestamp + idx;
1:90033b9:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:90033b9:     }
1:90033b9: 
1:90033b9:     @BeforeClass
1:90033b9:     public static void defineSchema()
1:90033b9:     {
1:90033b9:         SchemaLoader.prepareServer();
1:90033b9:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:90033b9:     }
1:90033b9: 
1:90033b9:     abstract ImmutableMap<String, Object> params();
1:90033b9:     abstract boolean looksLegit(HintsWriter writer);
1:90033b9:     abstract boolean looksLegit(ChecksummedDataInput checksummedDataInput);
1:90033b9: 
1:90033b9:     public void multiFlushAndDeserializeTest() throws Exception
1:90033b9:     {
1:90033b9:         int hintNum = 0;
1:90033b9:         int bufferSize = HintsWriteExecutor.WRITE_BUFFER_SIZE;
1:90033b9:         List<Hint> hints = new LinkedList<>();
1:90033b9: 
1:90033b9:         UUID hostId = UUIDGen.getTimeUUID();
1:90033b9:         long ts = System.currentTimeMillis();
1:90033b9: 
1:90033b9:         HintsDescriptor descriptor = new HintsDescriptor(hostId, ts, params());
1:90033b9:         File dir = Files.createTempDir();
1:90033b9:         try (HintsWriter writer = HintsWriter.create(dir, descriptor))
1:90033b9:         {
1:90033b9:             Assert.assertTrue(looksLegit(writer));
1:90033b9: 
1:90033b9:             ByteBuffer writeBuffer = ByteBuffer.allocateDirect(bufferSize);
1:90033b9:             try (HintsWriter.Session session = writer.newSession(writeBuffer))
1:90033b9:             {
1:90033b9:                 while (session.getBytesWritten() < bufferSize * 3)
1:90033b9:                 {
1:90033b9:                     Hint hint = createHint(hintNum, ts+hintNum);
1:90033b9:                     session.append(hint);
1:90033b9:                     hints.add(hint);
1:90033b9:                     hintNum++;
1:90033b9:                 }
1:90033b9:             }
1:90033b9:         }
1:90033b9: 
1:90033b9:         try (HintsReader reader = HintsReader.open(new File(dir, descriptor.fileName())))
1:90033b9:         {
1:90033b9:             Assert.assertTrue(looksLegit(reader.getInput()));
1:90033b9:             List<Hint> deserialized = new ArrayList<>(hintNum);
1:cee22ad:             List<InputPosition> pagePositions = new ArrayList<>(hintNum);
1:90033b9: 
1:90033b9:             for (HintsReader.Page page: reader)
1:90033b9:             {
1:cee22ad:                 pagePositions.add(page.position);
1:90033b9:                 Iterator<Hint> iterator = page.hintsIterator();
1:90033b9:                 while (iterator.hasNext())
1:90033b9:                 {
1:90033b9:                     deserialized.add(iterator.next());
1:90033b9:                 }
1:90033b9:             }
1:90033b9: 
1:90033b9:             Assert.assertEquals(hints.size(), deserialized.size());
1:90033b9:             hintNum = 0;
1:90033b9:             for (Hint expected: hints)
1:90033b9:             {
1:90033b9:                 HintsTestUtil.assertHintsEqual(expected, deserialized.get(hintNum));
1:90033b9:                 hintNum++;
1:90033b9:             }
1:cee22ad: 
1:cee22ad:             // explicitely seek to each page by iterating collected page positions and check if hints still match as expected
1:cee22ad:             int hintOffset = 0;
1:cee22ad:             for (InputPosition pos : pagePositions)
1:cee22ad:             {
1:cee22ad:                 reader.seek(pos);
1:cee22ad:                 HintsReader.Page page = reader.iterator().next();
1:cee22ad:                 Iterator<Hint> iterator = page.hintsIterator();
1:cee22ad:                 while (iterator.hasNext())
1:cee22ad:                 {
1:cee22ad:                     Hint seekedHint = iterator.next();
1:cee22ad:                     HintsTestUtil.assertHintsEqual(hints.get(hintOffset), seekedHint);
1:cee22ad:                     hintOffset++;
1:cee22ad:                 }
1:cee22ad:             }
1:90033b9:         }
1:90033b9:     }
1:90033b9: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1:             List<InputPosition> pagePositions = new ArrayList<>(hintNum);
1:                 pagePositions.add(page.position);
/////////////////////////////////////////////////////////////////////////
1: 
1:             // explicitely seek to each page by iterating collected page positions and check if hints still match as expected
1:             int hintOffset = 0;
1:             for (InputPosition pos : pagePositions)
1:             {
1:                 reader.seek(pos);
1:                 HintsReader.Page page = reader.iterator().next();
1:                 Iterator<Hint> iterator = page.hintsIterator();
1:                 while (iterator.hasNext())
1:                 {
1:                     Hint seekedHint = iterator.next();
1:                     HintsTestUtil.assertHintsEqual(hints.get(hintOffset), seekedHint);
1:                     hintOffset++;
1:                 }
1:             }
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: 
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.io.Files;
1: import org.junit.Assert;
1: import org.junit.BeforeClass;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.Mutation;
1: import org.apache.cassandra.db.RowUpdateBuilder;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: /**
1:  * Base class for testing compressed and encrypted hints.
1:  */
1: public abstract class AlteredHints
1: {
1:     protected static final String KEYSPACE = "hints_compression_test";
1:     private static final String TABLE = "table";
1: 
1:     private static Mutation createMutation(int index, long timestamp)
1:     {
1:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:                .clustering(bytes(index))
1:                .add("val", bytes(index))
1:                .build();
1:     }
1: 
1:     private static Hint createHint(int idx, long baseTimestamp)
1:     {
1:         long timestamp = baseTimestamp + idx;
1:         return Hint.create(createMutation(idx, TimeUnit.MILLISECONDS.toMicros(timestamp)), timestamp);
1:     }
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:     }
1: 
1:     abstract ImmutableMap<String, Object> params();
1:     abstract boolean looksLegit(HintsWriter writer);
1:     abstract boolean looksLegit(ChecksummedDataInput checksummedDataInput);
1: 
1:     public void multiFlushAndDeserializeTest() throws Exception
1:     {
1:         int hintNum = 0;
1:         int bufferSize = HintsWriteExecutor.WRITE_BUFFER_SIZE;
1:         List<Hint> hints = new LinkedList<>();
1: 
1:         UUID hostId = UUIDGen.getTimeUUID();
1:         long ts = System.currentTimeMillis();
1: 
1:         HintsDescriptor descriptor = new HintsDescriptor(hostId, ts, params());
1:         File dir = Files.createTempDir();
1:         try (HintsWriter writer = HintsWriter.create(dir, descriptor))
1:         {
1:             Assert.assertTrue(looksLegit(writer));
1: 
1:             ByteBuffer writeBuffer = ByteBuffer.allocateDirect(bufferSize);
1:             try (HintsWriter.Session session = writer.newSession(writeBuffer))
1:             {
1:                 while (session.getBytesWritten() < bufferSize * 3)
1:                 {
1:                     Hint hint = createHint(hintNum, ts+hintNum);
1:                     session.append(hint);
1:                     hints.add(hint);
1:                     hintNum++;
1:                 }
1:             }
1:         }
1: 
1:         try (HintsReader reader = HintsReader.open(new File(dir, descriptor.fileName())))
1:         {
1:             Assert.assertTrue(looksLegit(reader.getInput()));
1:             List<Hint> deserialized = new ArrayList<>(hintNum);
1: 
1:             for (HintsReader.Page page: reader)
1:             {
1:                 Iterator<Hint> iterator = page.hintsIterator();
1:                 while (iterator.hasNext())
1:                 {
1:                     deserialized.add(iterator.next());
1:                 }
1:             }
1: 
1:             Assert.assertEquals(hints.size(), deserialized.size());
1:             hintNum = 0;
1:             for (Hint expected: hints)
1:             {
1:                 HintsTestUtil.assertHintsEqual(expected, deserialized.get(hintNum));
1:                 hintNum++;
1:             }
1:         }
1:     }
1: }
============================================================================