1:bfd57d1: /**
1:bfd57d1:  * Licensed to the Apache Software Foundation (ASF) under one
1:bfd57d1:  * or more contributor license agreements.  See the NOTICE file
1:bfd57d1:  * distributed with this work for additional information
1:bfd57d1:  * regarding copyright ownership.  The ASF licenses this file
1:bfd57d1:  * to you under the Apache License, Version 2.0 (the
1:bfd57d1:  * "License"); you may not use this file except in compliance
1:bfd57d1:  * with the License.  You may obtain a copy of the License at
1:bfd57d1:  *
1:bfd57d1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:bfd57d1:  *
1:bfd57d1:  * Unless required by applicable law or agreed to in writing,
1:bfd57d1:  * software distributed under the License is distributed on an
1:bfd57d1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bfd57d1:  * KIND, either express or implied.  See the License for the
1:bfd57d1:  * specific language governing permissions and limitations
1:bfd57d1:  * under the License.
1:bfd57d1:  */
1:bfd57d1: package org.apache.cassandra.cql3;
1:bfd57d1: 
1:bfd57d1: import org.junit.Assert;
1:bfd57d1: import org.junit.Test;
1:bfd57d1: 
1:bfd57d1: import static org.junit.Assert.assertEquals;
1:bfd57d1: 
1:bfd57d1: import org.apache.cassandra.exceptions.InvalidRequestException;
1:bfd57d1: 
1:bfd57d1: import static org.apache.cassandra.cql3.Duration.*;
1:bfd57d1: import static org.apache.cassandra.cql3.Duration.NANOS_PER_HOUR;
1:bfd57d1: 
1:bfd57d1: public class DurationTest
1:bfd57d1: {
1:bfd57d1:     @Test
1:bfd57d1:     public void testFromStringWithStandardPattern()
1:bfd57d1:     {
1:bfd57d1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("1y2mo"));
1:bfd57d1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-1y2mo"));
1:bfd57d1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("1Y2MO"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 14, 0), Duration.from("2w"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 2, 10 * NANOS_PER_HOUR), Duration.from("2d10h"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("2d"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("30h"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("30h20m"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("20m"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("56s"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 567 * NANOS_PER_MILLI), Duration.from("567ms"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 1950 * NANOS_PER_MICRO), Duration.from("1950us"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 1950 * NANOS_PER_MICRO), Duration.from("1950µs"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 1950000), Duration.from("1950000ns"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 1950000), Duration.from("1950000NS"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, -1950000), Duration.from("-1950000ns"));
1:bfd57d1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("1y3mo2h10m"));
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     @Test
1:bfd57d1:     public void testFromStringWithIso8601Pattern()
1:bfd57d1:     {
1:bfd57d1:         assertEquals(Duration.newInstance(12, 2, 0), Duration.from("P1Y2D"));
1:bfd57d1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("P1Y2M"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 14, 0), Duration.from("P2W"));
1:bfd57d1:         assertEquals(Duration.newInstance(12, 0, 2 * NANOS_PER_HOUR), Duration.from("P1YT2H"));
1:bfd57d1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-P1Y2M"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("P2D"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("PT30H"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("PT30H20M"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("PT20M"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("PT56S"));
1:bfd57d1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("P1Y3MT2H10M"));
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     @Test
1:bfd57d1:     public void testFromStringWithIso8601AlternativePattern()
1:bfd57d1:     {
1:bfd57d1:         assertEquals(Duration.newInstance(12, 2, 0), Duration.from("P0001-00-02T00:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("P0001-02-00T00:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(12, 0, 2 * NANOS_PER_HOUR), Duration.from("P0001-00-00T02:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-P0001-02-00T00:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("P0000-00-02T00:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("P0000-00-00T30:00:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("P0000-00-00T30:20:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("P0000-00-00T00:20:00"));
1:bfd57d1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("P0000-00-00T00:00:56"));
1:bfd57d1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("P0001-03-00T02:10:00"));
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     @Test
1:bfd57d1:     public void testInvalidDurations()
1:bfd57d1:     {
1:bfd57d1:         assertInvalidDuration(Long.MAX_VALUE + "d", "Invalid duration. The total number of days must be less or equal to 2147483647");
1:bfd57d1:         assertInvalidDuration("2µ", "Unable to convert '2µ' to a duration");
1:bfd57d1:         assertInvalidDuration("-2µ", "Unable to convert '2µ' to a duration");
1:bfd57d1:         assertInvalidDuration("12.5s", "Unable to convert '12.5s' to a duration");
1:bfd57d1:         assertInvalidDuration("2m12.5s", "Unable to convert '2m12.5s' to a duration");
1:bfd57d1:         assertInvalidDuration("2m-12s", "Unable to convert '2m-12s' to a duration");
1:bfd57d1:         assertInvalidDuration("12s3s", "Invalid duration. The seconds are specified multiple times");
1:bfd57d1:         assertInvalidDuration("12s3m", "Invalid duration. The seconds should be after minutes");
1:bfd57d1:         assertInvalidDuration("1Y3M4D", "Invalid duration. The minutes should be after days");
1:bfd57d1:         assertInvalidDuration("P2Y3W", "Unable to convert 'P2Y3W' to a duration");
1:bfd57d1:         assertInvalidDuration("P0002-00-20", "Unable to convert 'P0002-00-20' to a duration");
1:bfd57d1:     }
1:bfd57d1: 
1:bfd57d1:     public void assertInvalidDuration(String duration, String expectedErrorMessage)
1:bfd57d1:     {
1:bfd57d1:         try
1:bfd57d1:         {
1:bfd57d1:             System.out.println(Duration.from(duration));
1:bfd57d1:             Assert.fail();
1:bfd57d1:         }
1:bfd57d1:         catch (InvalidRequestException e)
1:bfd57d1:         {
1:bfd57d1:             assertEquals(expectedErrorMessage, e.getMessage());
1:bfd57d1:         }
1:bfd57d1:     }
1:bfd57d1: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:bfd57d1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *    http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
1: import static org.apache.cassandra.cql3.Duration.*;
1: import static org.apache.cassandra.cql3.Duration.NANOS_PER_HOUR;
1: 
1: public class DurationTest
1: {
1:     @Test
1:     public void testFromStringWithStandardPattern()
1:     {
1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("1y2mo"));
1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-1y2mo"));
1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("1Y2MO"));
1:         assertEquals(Duration.newInstance(0, 14, 0), Duration.from("2w"));
1:         assertEquals(Duration.newInstance(0, 2, 10 * NANOS_PER_HOUR), Duration.from("2d10h"));
1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("2d"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("30h"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("30h20m"));
1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("20m"));
1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("56s"));
1:         assertEquals(Duration.newInstance(0, 0, 567 * NANOS_PER_MILLI), Duration.from("567ms"));
1:         assertEquals(Duration.newInstance(0, 0, 1950 * NANOS_PER_MICRO), Duration.from("1950us"));
1:         assertEquals(Duration.newInstance(0, 0, 1950 * NANOS_PER_MICRO), Duration.from("1950µs"));
1:         assertEquals(Duration.newInstance(0, 0, 1950000), Duration.from("1950000ns"));
1:         assertEquals(Duration.newInstance(0, 0, 1950000), Duration.from("1950000NS"));
1:         assertEquals(Duration.newInstance(0, 0, -1950000), Duration.from("-1950000ns"));
1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("1y3mo2h10m"));
1:     }
1: 
1:     @Test
1:     public void testFromStringWithIso8601Pattern()
1:     {
1:         assertEquals(Duration.newInstance(12, 2, 0), Duration.from("P1Y2D"));
1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("P1Y2M"));
1:         assertEquals(Duration.newInstance(0, 14, 0), Duration.from("P2W"));
1:         assertEquals(Duration.newInstance(12, 0, 2 * NANOS_PER_HOUR), Duration.from("P1YT2H"));
1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-P1Y2M"));
1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("P2D"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("PT30H"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("PT30H20M"));
1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("PT20M"));
1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("PT56S"));
1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("P1Y3MT2H10M"));
1:     }
1: 
1:     @Test
1:     public void testFromStringWithIso8601AlternativePattern()
1:     {
1:         assertEquals(Duration.newInstance(12, 2, 0), Duration.from("P0001-00-02T00:00:00"));
1:         assertEquals(Duration.newInstance(14, 0, 0), Duration.from("P0001-02-00T00:00:00"));
1:         assertEquals(Duration.newInstance(12, 0, 2 * NANOS_PER_HOUR), Duration.from("P0001-00-00T02:00:00"));
1:         assertEquals(Duration.newInstance(-14, 0, 0), Duration.from("-P0001-02-00T00:00:00"));
1:         assertEquals(Duration.newInstance(0, 2, 0), Duration.from("P0000-00-02T00:00:00"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR), Duration.from("P0000-00-00T30:00:00"));
1:         assertEquals(Duration.newInstance(0, 0, 30 * NANOS_PER_HOUR + 20 * NANOS_PER_MINUTE), Duration.from("P0000-00-00T30:20:00"));
1:         assertEquals(Duration.newInstance(0, 0, 20 * NANOS_PER_MINUTE), Duration.from("P0000-00-00T00:20:00"));
1:         assertEquals(Duration.newInstance(0, 0, 56 * NANOS_PER_SECOND), Duration.from("P0000-00-00T00:00:56"));
1:         assertEquals(Duration.newInstance(15, 0, 130 * NANOS_PER_MINUTE), Duration.from("P0001-03-00T02:10:00"));
1:     }
1: 
1:     @Test
1:     public void testInvalidDurations()
1:     {
1:         assertInvalidDuration(Long.MAX_VALUE + "d", "Invalid duration. The total number of days must be less or equal to 2147483647");
1:         assertInvalidDuration("2µ", "Unable to convert '2µ' to a duration");
1:         assertInvalidDuration("-2µ", "Unable to convert '2µ' to a duration");
1:         assertInvalidDuration("12.5s", "Unable to convert '12.5s' to a duration");
1:         assertInvalidDuration("2m12.5s", "Unable to convert '2m12.5s' to a duration");
1:         assertInvalidDuration("2m-12s", "Unable to convert '2m-12s' to a duration");
1:         assertInvalidDuration("12s3s", "Invalid duration. The seconds are specified multiple times");
1:         assertInvalidDuration("12s3m", "Invalid duration. The seconds should be after minutes");
1:         assertInvalidDuration("1Y3M4D", "Invalid duration. The minutes should be after days");
1:         assertInvalidDuration("P2Y3W", "Unable to convert 'P2Y3W' to a duration");
1:         assertInvalidDuration("P0002-00-20", "Unable to convert 'P0002-00-20' to a duration");
1:     }
1: 
1:     public void assertInvalidDuration(String duration, String expectedErrorMessage)
1:     {
1:         try
1:         {
1:             System.out.println(Duration.from(duration));
1:             Assert.fail();
1:         }
1:         catch (InvalidRequestException e)
1:         {
1:             assertEquals(expectedErrorMessage, e.getMessage());
1:         }
1:     }
1: }
============================================================================