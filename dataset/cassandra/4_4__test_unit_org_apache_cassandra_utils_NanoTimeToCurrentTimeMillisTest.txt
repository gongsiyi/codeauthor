1:8284964: /*
1:8284964:  * Licensed to the Apache Software Foundation (ASF) under one
1:8284964:  * or more contributor license agreements.  See the NOTICE file
1:8284964:  * distributed with this work for additional information
1:8284964:  * regarding copyright ownership.  The ASF licenses this file
1:8284964:  * to you under the Apache License, Version 2.0 (the
1:8284964:  * "License"); you may not use this file except in compliance
1:8284964:  * with the License.  You may obtain a copy of the License at
1:8284964:  *
1:8284964:  *     http://www.apache.org/licenses/LICENSE-2.0
1:8284964:  *
1:8284964:  * Unless required by applicable law or agreed to in writing, software
1:8284964:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8284964:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8284964:  * See the License for the specific language governing permissions and
1:8284964:  * limitations under the License.
1:8284964:  */
1:8284964: package org.apache.cassandra.utils;
1:8284964: 
1:8284964: import static org.junit.Assert.*;
1:8284964: 
1:8284964: import org.junit.Test;
1:8284964: 
1:8284964: public class NanoTimeToCurrentTimeMillisTest
2:8284964: {
1:8284964:     @Test
1:8284964:     public void testTimestampOrdering() throws Exception
1:8284964:     {
1:8284964:         long nowNanos = System.nanoTime();
1:8284964:         long now = System.currentTimeMillis();
1:8284964:         long lastConverted = 0;
1:8284964:         for (long ii = 0; ii < 10000000; ii++)
1:8284964:         {
1:8284964:             now = Math.max(now, System.currentTimeMillis());
1:8284964:             if (ii % 10000 == 0)
1:8284964:             {
1:557bbbc:                 NanoTimeToCurrentTimeMillis.updateNow();
1:8284964:                 Thread.sleep(1);
2:8284964:             }
1:8284964: 
1:06a053d:             nowNanos = Math.max(nowNanos, System.nanoTime());
1:06a053d:             long convertedNow = NanoTimeToCurrentTimeMillis.convert(nowNanos);
1:06a053d: 
1:54836ec:             int maxDiff = FBUtilities.isWindows ? 15 : 1;
1:06a053d:             assertTrue("convertedNow = " + convertedNow + " lastConverted = " + lastConverted + " in iteration " + ii,
1:06a053d:                        convertedNow >= (lastConverted - maxDiff));
1:06a053d: 
1:54836ec:             maxDiff = FBUtilities.isWindows ? 25 : 2;
1:06a053d:             assertTrue("now = " + now + " convertedNow = " + convertedNow + " in iteration " + ii,
1:06a053d:                        (maxDiff - 2) <= convertedNow);
1:06a053d: 
1:06a053d:             lastConverted = convertedNow;
1:8284964:         }
1:8284964:     }
1:8284964: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:54836ec
/////////////////////////////////////////////////////////////////////////
1:             int maxDiff = FBUtilities.isWindows ? 15 : 1;
1:             maxDiff = FBUtilities.isWindows ? 25 : 2;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1:                 NanoTimeToCurrentTimeMillis.updateNow();
author:Paulo Motta
-------------------------------------------------------------------------------
commit:06a053d
/////////////////////////////////////////////////////////////////////////
1:             nowNanos = Math.max(nowNanos, System.nanoTime());
1:             long convertedNow = NanoTimeToCurrentTimeMillis.convert(nowNanos);
1: 
0:             int maxDiff = FBUtilities.isWindows()? 15 : 1;
1:             assertTrue("convertedNow = " + convertedNow + " lastConverted = " + lastConverted + " in iteration " + ii,
1:                        convertedNow >= (lastConverted - maxDiff));
1: 
0:             maxDiff = FBUtilities.isWindows()? 25 : 2;
1:             assertTrue("now = " + now + " convertedNow = " + convertedNow + " in iteration " + ii,
1:                        (maxDiff - 2) <= convertedNow);
1: 
1:             lastConverted = convertedNow;
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:8284964
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import static org.junit.Assert.*;
1: 
1: import org.junit.Test;
1: 
1: public class NanoTimeToCurrentTimeMillisTest
1: {
1:     @Test
1:     public void testTimestampOrdering() throws Exception
1:     {
1:         long nowNanos = System.nanoTime();
1:         long now = System.currentTimeMillis();
1:         long lastConverted = 0;
1:         for (long ii = 0; ii < 10000000; ii++)
1:         {
1:             now = Math.max(now, System.currentTimeMillis());
1:             if (ii % 10000 == 0)
1:             {
0:                 synchronized (NanoTimeToCurrentTimeMillis.TIMESTAMP_UPDATE)
1:                 {
0:                     NanoTimeToCurrentTimeMillis.TIMESTAMP_UPDATE.notify();
1:                 }
1:                 Thread.sleep(1);
1:             }
0:             nowNanos = Math.max(now, System.nanoTime());
0:             long convertedNow = NanoTimeToCurrentTimeMillis.convert(nowNanos);
0:             assertTrue("convertedNow = " + convertedNow + " lastConverted = " + lastConverted + " in iteration " + ii, convertedNow >= (lastConverted - 1));
0:             lastConverted = convertedNow;
0:             //Seems to be off by as much as two milliseconds sadly
0:             assertTrue("now = " + now + " convertedNow = " + convertedNow + " in iteration " + ii, (now - 2) <= convertedNow);
1: 
1:         }
1:     }
1: }
============================================================================