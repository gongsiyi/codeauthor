1:74bf5aa: /*
1:74bf5aa:  * Licensed to the Apache Software Foundation (ASF) under one
1:74bf5aa:  * or more contributor license agreements.  See the NOTICE file
1:74bf5aa:  * distributed with this work for additional information
1:74bf5aa:  * regarding copyright ownership.  The ASF licenses this file
1:74bf5aa:  * to you under the Apache License, Version 2.0 (the
1:74bf5aa:  * "License"); you may not use this file except in compliance
1:74bf5aa:  * with the License.  You may obtain a copy of the License at
1:74bf5aa:  *
1:74bf5aa:  *     http://www.apache.org/licenses/LICENSE-2.0
1:74bf5aa:  *
1:74bf5aa:  * Unless required by applicable law or agreed to in writing, software
1:74bf5aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74bf5aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74bf5aa:  * See the License for the specific language governing permissions and
1:74bf5aa:  * limitations under the License.
1:74bf5aa:  */
1:74bf5aa: package org.apache.cassandra.io.sstable.metadata;
1:74bf5aa: 
1:74bf5aa: import java.io.IOException;
1:74bf5aa: 
1:74bf5aa: import org.apache.cassandra.db.TypeSizes;
1:0368e97: import org.apache.cassandra.io.sstable.format.Version;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:74bf5aa: 
1:74bf5aa: /**
1:74bf5aa:  * SSTable metadata component used only for validating SSTable.
1:74bf5aa:  *
1:74bf5aa:  * This part is read before opening main Data.db file for validation
1:74bf5aa:  * and discarded immediately after that.
1:74bf5aa:  */
1:74bf5aa: public class ValidationMetadata extends MetadataComponent
1:74bf5aa: {
1:74bf5aa:     public static final IMetadataComponentSerializer serializer = new ValidationMetadataSerializer();
1:74bf5aa: 
1:74bf5aa:     public final String partitioner;
1:74bf5aa:     public final double bloomFilterFPChance;
1:74bf5aa: 
1:74bf5aa:     public ValidationMetadata(String partitioner, double bloomFilterFPChance)
1:74bf5aa:     {
1:74bf5aa:         this.partitioner = partitioner;
1:74bf5aa:         this.bloomFilterFPChance = bloomFilterFPChance;
1:74bf5aa:     }
1:74bf5aa: 
1:74bf5aa:     public MetadataType getType()
1:74bf5aa:     {
1:74bf5aa:         return MetadataType.VALIDATION;
1:74bf5aa:     }
1:74bf5aa: 
1:74bf5aa:     @Override
1:74bf5aa:     public boolean equals(Object o)
1:74bf5aa:     {
1:74bf5aa:         if (this == o) return true;
1:74bf5aa:         if (o == null || getClass() != o.getClass()) return false;
1:74bf5aa: 
1:74bf5aa:         ValidationMetadata that = (ValidationMetadata) o;
1:74bf5aa:         return Double.compare(that.bloomFilterFPChance, bloomFilterFPChance) == 0 && partitioner.equals(that.partitioner);
1:74bf5aa:     }
1:74bf5aa: 
1:74bf5aa:     @Override
1:74bf5aa:     public int hashCode()
1:74bf5aa:     {
1:74bf5aa:         int result;
1:74bf5aa:         long temp;
1:74bf5aa:         result = partitioner.hashCode();
1:74bf5aa:         temp = Double.doubleToLongBits(bloomFilterFPChance);
1:74bf5aa:         result = 31 * result + (int) (temp ^ (temp >>> 32));
1:74bf5aa:         return result;
1:74bf5aa:     }
1:74bf5aa: 
1:74bf5aa:     public static class ValidationMetadataSerializer implements IMetadataComponentSerializer<ValidationMetadata>
1:74bf5aa:     {
1:0600d7d:         public int serializedSize(Version version, ValidationMetadata component) throws IOException
1:74bf5aa:         {
1:03f72ac:             return TypeSizes.sizeof(component.partitioner) + 8;
1:74bf5aa:         }
1:74bf5aa: 
1:0600d7d:         public void serialize(Version version, ValidationMetadata component, DataOutputPlus out) throws IOException
1:74bf5aa:         {
1:74bf5aa:             out.writeUTF(component.partitioner);
1:74bf5aa:             out.writeDouble(component.bloomFilterFPChance);
1:74bf5aa:         }
1:74bf5aa: 
1:03f72ac:         public ValidationMetadata deserialize(Version version, DataInputPlus in) throws IOException
1:74bf5aa:         {
1:74bf5aa: 
1:74bf5aa:             return new ValidationMetadata(in.readUTF(), in.readDouble());
1:74bf5aa:         }
1:74bf5aa:     }
1:74bf5aa: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0600d7d
/////////////////////////////////////////////////////////////////////////
1:         public int serializedSize(Version version, ValidationMetadata component) throws IOException
1:         public void serialize(Version version, ValidationMetadata component, DataOutputPlus out) throws IOException
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:             return TypeSizes.sizeof(component.partitioner) + 8;
/////////////////////////////////////////////////////////////////////////
1:         public ValidationMetadata deserialize(Version version, DataInputPlus in) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:b30cdd9
/////////////////////////////////////////////////////////////////////////
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.Version;
/////////////////////////////////////////////////////////////////////////
0:         public ValidationMetadata deserialize(Version version, DataInput in) throws IOException
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(ValidationMetadata component, DataOutputPlus out) throws IOException
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:74bf5aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.metadata;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.cassandra.db.TypeSizes;
0: import org.apache.cassandra.io.sstable.Descriptor;
1: 
1: /**
1:  * SSTable metadata component used only for validating SSTable.
1:  *
1:  * This part is read before opening main Data.db file for validation
1:  * and discarded immediately after that.
1:  */
1: public class ValidationMetadata extends MetadataComponent
1: {
1:     public static final IMetadataComponentSerializer serializer = new ValidationMetadataSerializer();
1: 
1:     public final String partitioner;
1:     public final double bloomFilterFPChance;
1: 
1:     public ValidationMetadata(String partitioner, double bloomFilterFPChance)
1:     {
1:         this.partitioner = partitioner;
1:         this.bloomFilterFPChance = bloomFilterFPChance;
1:     }
1: 
1:     public MetadataType getType()
1:     {
1:         return MetadataType.VALIDATION;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         ValidationMetadata that = (ValidationMetadata) o;
1:         return Double.compare(that.bloomFilterFPChance, bloomFilterFPChance) == 0 && partitioner.equals(that.partitioner);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         int result;
1:         long temp;
1:         result = partitioner.hashCode();
1:         temp = Double.doubleToLongBits(bloomFilterFPChance);
1:         result = 31 * result + (int) (temp ^ (temp >>> 32));
1:         return result;
1:     }
1: 
1:     public static class ValidationMetadataSerializer implements IMetadataComponentSerializer<ValidationMetadata>
1:     {
0:         public int serializedSize(ValidationMetadata component) throws IOException
1:         {
0:             return TypeSizes.NATIVE.sizeof(component.partitioner) + 8;
1:         }
1: 
0:         public void serialize(ValidationMetadata component, DataOutput out) throws IOException
1:         {
1:             out.writeUTF(component.partitioner);
1:             out.writeDouble(component.bloomFilterFPChance);
1:         }
1: 
0:         public ValidationMetadata deserialize(Descriptor.Version version, DataInput in) throws IOException
1:         {
1: 
1:             return new ValidationMetadata(in.readUTF(), in.readDouble());
1:         }
1:     }
1: }
============================================================================