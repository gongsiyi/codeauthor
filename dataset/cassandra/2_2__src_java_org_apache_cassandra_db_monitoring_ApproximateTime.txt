1:557bbbc: /*
1:557bbbc:  * Licensed to the Apache Software Foundation (ASF) under one
1:557bbbc:  * or more contributor license agreements.  See the NOTICE file
1:557bbbc:  * distributed with this work for additional information
1:557bbbc:  * regarding copyright ownership.  The ASF licenses this file
1:557bbbc:  * to you under the Apache License, Version 2.0 (the
1:557bbbc:  * "License"); you may not use this file except in compliance
1:557bbbc:  * with the License.  You may obtain a copy of the License at
1:557bbbc:  *
1:557bbbc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:557bbbc:  *
1:557bbbc:  * Unless required by applicable law or agreed to in writing, software
1:557bbbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:557bbbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:557bbbc:  * See the License for the specific language governing permissions and
1:557bbbc:  * limitations under the License.
1:557bbbc:  */
1:557bbbc: 
1:557bbbc: package org.apache.cassandra.db.monitoring;
1:557bbbc: 
1:557bbbc: import java.util.concurrent.TimeUnit;
1:557bbbc: 
1:557bbbc: import org.slf4j.Logger;
1:557bbbc: import org.slf4j.LoggerFactory;
1:557bbbc: 
1:557bbbc: import org.apache.cassandra.concurrent.ScheduledExecutors;
1:557bbbc: import org.apache.cassandra.config.Config;
1:557bbbc: 
1:557bbbc: /**
1:557bbbc:  * This is an approximation of System.currentTimeInMillis(). It updates its
1:557bbbc:  * time value at periodic intervals of CHECK_INTERVAL_MS milliseconds
1:557bbbc:  * (currently 10 milliseconds by default). It can be used as a faster alternative
1:557bbbc:  * to System.currentTimeInMillis() every time an imprecision of a few milliseconds
1:557bbbc:  * can be accepted.
1:557bbbc:  */
1:557bbbc: public class ApproximateTime
1:557bbbc: {
1:557bbbc:     private static final Logger logger = LoggerFactory.getLogger(ApproximateTime.class);
1:f6ca482:     private static final int CHECK_INTERVAL_MS = Math.max(5, Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + "approximate_time_precision_ms", "10")));
1:557bbbc: 
1:557bbbc:     private static volatile long time = System.currentTimeMillis();
1:557bbbc:     static
1:557bbbc:     {
1:557bbbc:         logger.info("Scheduling approximate time-check task with a precision of {} milliseconds", CHECK_INTERVAL_MS);
1:557bbbc:         ScheduledExecutors.scheduledFastTasks.scheduleWithFixedDelay(() -> time = System.currentTimeMillis(),
1:557bbbc:                                                                      CHECK_INTERVAL_MS,
1:557bbbc:                                                                      CHECK_INTERVAL_MS,
1:557bbbc:                                                                      TimeUnit.MILLISECONDS);
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public static long currentTimeMillis()
1:557bbbc:     {
1:557bbbc:         return time;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc:     public static long precision()
1:557bbbc:     {
1:557bbbc:         return 2 * CHECK_INTERVAL_MS;
1:557bbbc:     }
1:557bbbc: 
1:557bbbc: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f6ca482
/////////////////////////////////////////////////////////////////////////
1:     private static final int CHECK_INTERVAL_MS = Math.max(5, Integer.parseInt(System.getProperty(Config.PROPERTY_PREFIX + "approximate_time_precision_ms", "10")));
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:557bbbc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.monitoring;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.concurrent.ScheduledExecutors;
1: import org.apache.cassandra.config.Config;
1: 
1: /**
1:  * This is an approximation of System.currentTimeInMillis(). It updates its
1:  * time value at periodic intervals of CHECK_INTERVAL_MS milliseconds
1:  * (currently 10 milliseconds by default). It can be used as a faster alternative
1:  * to System.currentTimeInMillis() every time an imprecision of a few milliseconds
1:  * can be accepted.
1:  */
1: public class ApproximateTime
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(ApproximateTime.class);
0:     private static final int CHECK_INTERVAL_MS = Math.max(5, Integer.valueOf(System.getProperty(Config.PROPERTY_PREFIX + "approximate_time_precision_ms", "10")));
1: 
1:     private static volatile long time = System.currentTimeMillis();
1:     static
1:     {
1:         logger.info("Scheduling approximate time-check task with a precision of {} milliseconds", CHECK_INTERVAL_MS);
1:         ScheduledExecutors.scheduledFastTasks.scheduleWithFixedDelay(() -> time = System.currentTimeMillis(),
1:                                                                      CHECK_INTERVAL_MS,
1:                                                                      CHECK_INTERVAL_MS,
1:                                                                      TimeUnit.MILLISECONDS);
1:     }
1: 
1:     public static long currentTimeMillis()
1:     {
1:         return time;
1:     }
1: 
1:     public static long precision()
1:     {
1:         return 2 * CHECK_INTERVAL_MS;
1:     }
1: 
1: }
============================================================================