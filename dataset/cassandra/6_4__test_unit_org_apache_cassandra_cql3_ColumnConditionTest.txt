1:3d5f3a6: /*
1:3d5f3a6:  * Licensed to the Apache Software Foundation (ASF) under one
1:3d5f3a6:  * or more contributor license agreements.  See the NOTICE file
1:3d5f3a6:  * distributed with this work for additional information
1:3d5f3a6:  * regarding copyright ownership.  The ASF licenses this file
1:3d5f3a6:  * to you under the Apache License, Version 2.0 (the
1:3d5f3a6:  * "License"); you may not use this file except in compliance
1:3d5f3a6:  * with the License.  You may obtain a copy of the License at
1:3d5f3a6:  *
1:3d5f3a6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:3d5f3a6:  *
1:3d5f3a6:  * Unless required by applicable law or agreed to in writing, software
1:3d5f3a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3d5f3a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3d5f3a6:  * See the License for the specific language governing permissions and
1:3d5f3a6:  * limitations under the License.
1:3d5f3a6:  */
1:3d5f3a6: package org.apache.cassandra.cql3;
1:3d5f3a6: 
1:3d5f3a6: import java.nio.ByteBuffer;
1:3d5f3a6: import java.util.*;
1:a991b64: 
1:9797511: import org.junit.BeforeClass;
1:3d5f3a6: import org.junit.Test;
1:a991b64: 
1:3d5f3a6: import org.apache.cassandra.config.CFMetaData;
1:3d5f3a6: import org.apache.cassandra.config.ColumnDefinition;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:2457599: import org.apache.cassandra.db.rows.BufferCell;
1:a991b64: import org.apache.cassandra.db.rows.Cell;
1:a991b64: import org.apache.cassandra.db.rows.CellPath;
1:3d5f3a6: import org.apache.cassandra.db.marshal.*;
1:3d5f3a6: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3d5f3a6: import org.apache.cassandra.serializers.Int32Serializer;
1:3d5f3a6: import org.apache.cassandra.utils.ByteBufferUtil;
1:2457599: import org.apache.cassandra.utils.UUIDGen;
1:3d5f3a6: 
1:a991b64: import static org.junit.Assert.*;
1:3d5f3a6: 
1:3d5f3a6: public class ColumnConditionTest
1:3d5f3a6: {
1:2457599:     private static final CellPath LIST_PATH = CellPath.create(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
1:3d5f3a6: 
1:3d5f3a6:     public static final ByteBuffer ZERO = Int32Type.instance.fromString("0");
1:3d5f3a6:     public static final ByteBuffer ONE = Int32Type.instance.fromString("1");
1:3d5f3a6:     public static final ByteBuffer TWO = Int32Type.instance.fromString("2");
1:3d5f3a6: 
1:3d5f3a6:     public static final ByteBuffer A = AsciiType.instance.fromString("a");
1:3d5f3a6:     public static final ByteBuffer B = AsciiType.instance.fromString("b");
1:3d5f3a6: 
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:3d5f3a6:     private static boolean isSatisfiedBy(ColumnCondition.Bound bound, ByteBuffer conditionValue, ByteBuffer columnValue) throws InvalidRequestException
1:3d5f3a6:     {
1:3d5f3a6:         Cell cell = null;
1:3d5f3a6:         if (columnValue != null)
1:3d5f3a6:         {
1:2457599:             ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:2457599:             cell = testCell(definition, columnValue, LIST_PATH);
1:3d5f3a6:         }
1:a991b64:         return bound.isSatisfiedByValue(conditionValue, cell, Int32Type.instance, bound.operator);
1:3d5f3a6:     }
1:3d5f3a6: 
1:2457599:     private static Cell testCell(ColumnDefinition column, ByteBuffer value, CellPath path)
1:2457599:     {
1:2457599:         return new BufferCell(column, 0L, Cell.NO_TTL, Cell.NO_DELETION_TIME, value, path);
1:2457599:     }
1:2457599: 
1:3d5f3a6:     private static void assertThrowsIRE(ColumnCondition.Bound bound, ByteBuffer conditionValue, ByteBuffer columnValue)
1:3d5f3a6:     {
1:3d5f3a6:         try
1:3d5f3a6:         {
1:3d5f3a6:             isSatisfiedBy(bound, conditionValue, columnValue);
1:3d5f3a6:             fail("Expected InvalidRequestException was not thrown");
1:3d5f3a6:         } catch (InvalidRequestException e) { }
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     @Test
1:3d5f3a6:     public void testSimpleBoundIsSatisfiedByValue() throws InvalidRequestException
1:3d5f3a6:     {
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         // EQ
1:5117a5d:         ColumnCondition condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.EQ);
1:3d5f3a6:         ColumnCondition.Bound bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, null, null));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, null, ONE));
1:3d5f3a6: 
1:3d5f3a6:         // NEQ
1:5117a5d:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.NEQ);
1:3d5f3a6:         bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, null, null));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, null, ONE));
1:3d5f3a6: 
1:3d5f3a6:         // LT
1:5117a5d:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.LT);
1:3d5f3a6:         bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertThrowsIRE(bound, null, ONE);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6: 
1:3d5f3a6:         // LTE
1:5117a5d:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.LTE);
1:3d5f3a6:         bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertThrowsIRE(bound, null, ONE);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6: 
1:3d5f3a6:         // GT
1:5117a5d:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.GT);
1:3d5f3a6:         bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertThrowsIRE(bound, null, ONE);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6: 
1:3d5f3a6:         // GT
1:5117a5d:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.GTE);
1:3d5f3a6:         bound = condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:3d5f3a6:         assertThrowsIRE(bound, null, ONE);
1:3d5f3a6:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     private static List<ByteBuffer> list(ByteBuffer... values)
1:3d5f3a6:     {
1:3d5f3a6:         return Arrays.asList(values);
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     private static boolean listAppliesTo(ColumnCondition.CollectionBound bound, List<ByteBuffer> conditionValues, List<ByteBuffer> columnValues)
1:3d5f3a6:     {
1:3d5f3a6:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b int, c list<int>)", "ks");
1:3d5f3a6:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
1:ee55f36:         typeMap.put(ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:3d5f3a6:         if (columnValues != null)
1:3d5f3a6:         {
1:3d5f3a6:             for (int i = 0; i < columnValues.size(); i++)
1:3d5f3a6:             {
1:3d5f3a6:                 ByteBuffer key = Int32Serializer.instance.serialize(i);
1:3d5f3a6:                 ByteBuffer value = columnValues.get(i);
1:2457599:                 cells.add(testCell(definition, value, CellPath.create(key)));
1:3d5f3a6:             };
1:3d5f3a6:         }
1:3d5f3a6: 
1:ee55f36:         return bound.listAppliesTo(ListType.getInstance(Int32Type.instance, true), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     @Test
1:3d5f3a6:     // sets use the same check as lists
1:3d5f3a6:     public void testListCollectionBoundAppliesTo() throws InvalidRequestException
1:3d5f3a6:     {
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         // EQ
1:677230d:         ColumnCondition condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.EQ);
1:3d5f3a6:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // NEQ
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.NEQ);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LT
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LTE
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GT
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GTE
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list()));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:     }
1:3d5f3a6: 
1:ee55f36:     private static SortedSet<ByteBuffer> set(ByteBuffer... values)
1:3d5f3a6:     {
1:ee55f36:         SortedSet<ByteBuffer> results = new TreeSet<>(Int32Type.instance);
1:3d5f3a6:         results.addAll(Arrays.asList(values));
1:3d5f3a6:         return results;
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     private static boolean setAppliesTo(ColumnCondition.CollectionBound bound, Set<ByteBuffer> conditionValues, List<ByteBuffer> columnValues)
1:3d5f3a6:     {
1:3d5f3a6:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b int, c set<int>)", "ks");
1:3d5f3a6:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
1:ee55f36:         typeMap.put(ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance, true));
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:3d5f3a6:         if (columnValues != null)
1:3d5f3a6:         {
1:3d5f3a6:             for (int i = 0; i < columnValues.size(); i++)
1:3d5f3a6:             {
1:3d5f3a6:                 ByteBuffer key = columnValues.get(i);
1:2457599:                 cells.add(testCell(definition, ByteBufferUtil.EMPTY_BYTE_BUFFER, CellPath.create(key)));
1:3d5f3a6:             };
1:3d5f3a6:         }
1:3d5f3a6: 
1:ee55f36:         return bound.setAppliesTo(SetType.getInstance(Int32Type.instance, true), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     @Test
1:3d5f3a6:     public void testSetCollectionBoundAppliesTo() throws InvalidRequestException
1:3d5f3a6:     {
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         // EQ
1:677230d:         ColumnCondition condition = ColumnCondition.condition(definition, new Sets.Value(set(ONE)), Operator.EQ);
1:3d5f3a6:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // NEQ
1:677230d:         condition = ColumnCondition.condition(definition, new Sets.Value(set(ONE)), Operator.NEQ);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LT
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LTE
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GT
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GTE
1:677230d:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list()));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:3d5f3a6:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     // values should be a list of key, value, key, value, ...
1:3d5f3a6:     private static Map<ByteBuffer, ByteBuffer> map(ByteBuffer... values)
1:3d5f3a6:     {
1:3d5f3a6:         Map<ByteBuffer, ByteBuffer> map = new TreeMap<>();
1:3d5f3a6:         for (int i = 0; i < values.length; i += 2)
1:3d5f3a6:             map.put(values[i], values[i + 1]);
1:3d5f3a6: 
1:3d5f3a6:         return map;
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     private static boolean mapAppliesTo(ColumnCondition.CollectionBound bound, Map<ByteBuffer, ByteBuffer> conditionValues, Map<ByteBuffer, ByteBuffer> columnValues)
1:3d5f3a6:     {
1:3d5f3a6:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b map<int, int>)", "ks");
1:3d5f3a6:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
1:ee55f36:         typeMap.put(ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:3d5f3a6:         if (columnValues != null)
1:3d5f3a6:         {
1:3d5f3a6:             for (Map.Entry<ByteBuffer, ByteBuffer> entry : columnValues.entrySet())
1:2457599:                 cells.add(testCell(definition, entry.getValue(), CellPath.create(entry.getKey())));
1:3d5f3a6:         }
1:3d5f3a6: 
1:ee55f36:         return bound.mapAppliesTo(MapType.getInstance(Int32Type.instance, Int32Type.instance, true), cells.iterator(), conditionValues, bound.operator);
1:3d5f3a6:     }
1:3d5f3a6: 
1:3d5f3a6:     @Test
1:3d5f3a6:     public void testMapCollectionBoundIsSatisfiedByValue() throws InvalidRequestException
1:3d5f3a6:     {
1:2457599:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:3d5f3a6: 
1:3d5f3a6:         Map<ByteBuffer, ByteBuffer> placeholderMap = new TreeMap<>();
1:3d5f3a6:         placeholderMap.put(ONE, ONE);
1:3d5f3a6:         Maps.Value placeholder = new Maps.Value(placeholderMap);
1:3d5f3a6: 
1:3d5f3a6:         // EQ
1:677230d:         ColumnCondition condition = ColumnCondition.condition(definition, placeholder, Operator.EQ);
1:3d5f3a6:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // NEQ
1:677230d:         condition = ColumnCondition.condition(definition, placeholder, Operator.NEQ);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LT
1:677230d:         condition = ColumnCondition.condition(definition, placeholder, Operator.LT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // LTE
1:677230d:         condition = ColumnCondition.condition(definition, placeholder, Operator.LTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GT
1:677230d:         condition = ColumnCondition.condition(definition, placeholder, Operator.GT);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6: 
1:3d5f3a6:         // GTE
1:677230d:         condition = ColumnCondition.condition(definition, placeholder, Operator.GTE);
1:3d5f3a6:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:3d5f3a6: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map()));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1:a991b64: 
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:3d5f3a6:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:3d5f3a6:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:3d5f3a6:     }
1:3d5f3a6: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1:         ColumnCondition condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.EQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
/////////////////////////////////////////////////////////////////////////
1:         ColumnCondition condition = ColumnCondition.condition(definition, new Sets.Value(set(ONE)), Operator.EQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Sets.Value(set(ONE)), Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
/////////////////////////////////////////////////////////////////////////
1:         ColumnCondition condition = ColumnCondition.condition(definition, placeholder, Operator.EQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, placeholder, Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, placeholder, Operator.LT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, placeholder, Operator.LTE);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, placeholder, Operator.GT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, placeholder, Operator.GTE);
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1:         typeMap.put(ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance, true));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance, true), 0, ColumnDefinition.Kind.REGULAR);
/////////////////////////////////////////////////////////////////////////
1:         return bound.listAppliesTo(ListType.getInstance(Int32Type.instance, true), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), ListType.getInstance(Int32Type.instance, true), null, null, null, null, null);
/////////////////////////////////////////////////////////////////////////
1:     private static SortedSet<ByteBuffer> set(ByteBuffer... values)
1:         SortedSet<ByteBuffer> results = new TreeSet<>(Int32Type.instance);
/////////////////////////////////////////////////////////////////////////
1:         typeMap.put(ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance, true));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance, true), 0, ColumnDefinition.Kind.REGULAR);
/////////////////////////////////////////////////////////////////////////
1:         return bound.setAppliesTo(SetType.getInstance(Int32Type.instance, true), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), SetType.getInstance(Int32Type.instance, true), null, null, null, null, null);
/////////////////////////////////////////////////////////////////////////
1:         typeMap.put(ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance, true), 0, ColumnDefinition.Kind.REGULAR);
/////////////////////////////////////////////////////////////////////////
1:         return bound.mapAppliesTo(MapType.getInstance(Int32Type.instance, Int32Type.instance, true), cells.iterator(), conditionValues, bound.operator);
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("b", true), MapType.getInstance(Int32Type.instance, Int32Type.instance, true), null, null, null, null, null);
commit:3d5f3a6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.db.BufferCell;
0: import org.apache.cassandra.db.Cell;
0: import org.apache.cassandra.db.composites.*;
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.serializers.Int32Serializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.junit.Test;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.fail;
1: 
1: public class ColumnConditionTest
1: {
1:     public static final ByteBuffer ZERO = Int32Type.instance.fromString("0");
1:     public static final ByteBuffer ONE = Int32Type.instance.fromString("1");
1:     public static final ByteBuffer TWO = Int32Type.instance.fromString("2");
1: 
1:     public static final ByteBuffer A = AsciiType.instance.fromString("a");
1:     public static final ByteBuffer B = AsciiType.instance.fromString("b");
1: 
1:     private static boolean isSatisfiedBy(ColumnCondition.Bound bound, ByteBuffer conditionValue, ByteBuffer columnValue) throws InvalidRequestException
1:     {
1:         Cell cell = null;
1:         if (columnValue != null)
1:         {
0:             CompoundSparseCellNameType nameType = new CompoundSparseCellNameType(Collections.EMPTY_LIST);
0:             ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), Int32Type.instance, null, null, null, null, null);
0:             cell = new BufferCell(nameType.create(Composites.EMPTY, definition), columnValue);
1:         }
0:         return bound.isSatisfiedByValue(conditionValue, cell, Int32Type.instance, bound.operator, 1234);
1:     }
1: 
1:     private static void assertThrowsIRE(ColumnCondition.Bound bound, ByteBuffer conditionValue, ByteBuffer columnValue)
1:     {
1:         try
1:         {
1:             isSatisfiedBy(bound, conditionValue, columnValue);
1:             fail("Expected InvalidRequestException was not thrown");
1:         } catch (InvalidRequestException e) { }
1:     }
1: 
1:     @Test
1:     public void testSimpleBoundIsSatisfiedByValue() throws InvalidRequestException
1:     {
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), Int32Type.instance, null, null, null, null, null);
1: 
1:         // EQ
0:         ColumnCondition condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.EQ);
1:         ColumnCondition.Bound bound = condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertTrue(isSatisfiedBy(bound, null, null));
1:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:         assertFalse(isSatisfiedBy(bound, null, ONE));
1: 
1:         // NEQ
0:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.NEQ);
1:         bound = condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertFalse(isSatisfiedBy(bound, null, null));
1:         assertTrue(isSatisfiedBy(bound, ONE, null));
1:         assertTrue(isSatisfiedBy(bound, null, ONE));
1: 
1:         // LT
0:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.LT);
1:         bound = condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertThrowsIRE(bound, null, ONE);
1:         assertFalse(isSatisfiedBy(bound, ONE, null));
1: 
1:         // LTE
0:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.LTE);
1:         bound = condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:         assertFalse(isSatisfiedBy(bound, ZERO, ONE));
1:         assertTrue(isSatisfiedBy(bound, TWO, ONE));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertTrue(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertThrowsIRE(bound, null, ONE);
1:         assertFalse(isSatisfiedBy(bound, ONE, null));
1: 
1:         // GT
0:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.GT);
1:         bound = condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(isSatisfiedBy(bound, ONE, ONE));
1:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertFalse(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertThrowsIRE(bound, null, ONE);
1:         assertFalse(isSatisfiedBy(bound, ONE, null));
1: 
1:         // GT
0:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Relation.Type.GTE);
1:         bound = condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(isSatisfiedBy(bound, ONE, ONE));
1:         assertTrue(isSatisfiedBy(bound, ZERO, ONE));
1:         assertFalse(isSatisfiedBy(bound, TWO, ONE));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE));
1:         assertFalse(isSatisfiedBy(bound, ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertTrue(isSatisfiedBy(bound, ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertThrowsIRE(bound, null, ONE);
1:         assertFalse(isSatisfiedBy(bound, ONE, null));
1:     }
1: 
1:     private static List<ByteBuffer> list(ByteBuffer... values)
1:     {
1:         return Arrays.asList(values);
1:     }
1: 
1:     private static boolean listAppliesTo(ColumnCondition.CollectionBound bound, List<ByteBuffer> conditionValues, List<ByteBuffer> columnValues)
1:     {
1:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b int, c list<int>)", "ks");
1:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
0:         typeMap.put(ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance));
0:         CompoundSparseCellNameType.WithCollection nameType = new CompoundSparseCellNameType.WithCollection(Collections.EMPTY_LIST, ColumnToCollectionType.getInstance(typeMap));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance), 0, ColumnDefinition.Kind.REGULAR);
1: 
1:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:         if (columnValues != null)
1:         {
1:             for (int i = 0; i < columnValues.size(); i++)
1:             {
1:                 ByteBuffer key = Int32Serializer.instance.serialize(i);
1:                 ByteBuffer value = columnValues.get(i);
0:                 cells.add(new BufferCell(nameType.create(Composites.EMPTY, definition, key), value));
1:             };
1:         }
1: 
0:         return bound.listAppliesTo(ListType.getInstance(Int32Type.instance), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
1:     }
1: 
1:     @Test
1:     // sets use the same check as lists
1:     public void testListCollectionBoundAppliesTo() throws InvalidRequestException
1:     {
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), ListType.getInstance(Int32Type.instance), null, null, null, null, null);
1: 
1:         // EQ
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.EQ);
1:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list()));
1:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // NEQ
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.NEQ);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list()));
1:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LT
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.LT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list()));
1:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LTE
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.LTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list()));
1:         assertFalse(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GT
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.GT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(), list()));
1:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GTE
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.GTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list()));
1:         assertTrue(listAppliesTo(bound, list(ZERO), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ZERO)));
1:         assertTrue(listAppliesTo(bound, list(ONE), list(ONE, ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE, ONE), list(ONE)));
1:         assertTrue(listAppliesTo(bound, list(), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list()));
1: 
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(listAppliesTo(bound, list(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(listAppliesTo(bound, list(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:     }
1: 
0:     private static Set<ByteBuffer> set(ByteBuffer... values)
1:     {
0:         Set results = new HashSet<ByteBuffer>(values.length);
1:         results.addAll(Arrays.asList(values));
1:         return results;
1:     }
1: 
1:     private static boolean setAppliesTo(ColumnCondition.CollectionBound bound, Set<ByteBuffer> conditionValues, List<ByteBuffer> columnValues)
1:     {
1:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b int, c set<int>)", "ks");
1:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
0:         typeMap.put(ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance));
0:         CompoundSparseCellNameType.WithCollection nameType = new CompoundSparseCellNameType.WithCollection(Collections.EMPTY_LIST, ColumnToCollectionType.getInstance(typeMap));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance), 0, ColumnDefinition.Kind.REGULAR);
1: 
1:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:         if (columnValues != null)
1:         {
1:             for (int i = 0; i < columnValues.size(); i++)
1:             {
1:                 ByteBuffer key = columnValues.get(i);
0:                 cells.add(new BufferCell(nameType.create(Composites.EMPTY, definition, key), ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:             };
1:         }
1: 
0:         return bound.setAppliesTo(SetType.getInstance(Int32Type.instance), cells == null ? null : cells.iterator(), conditionValues, bound.operator);
1:     }
1: 
1:     @Test
1:     public void testSetCollectionBoundAppliesTo() throws InvalidRequestException
1:     {
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("c", true), SetType.getInstance(Int32Type.instance), null, null, null, null, null);
1: 
1:         // EQ
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, new Sets.Value(set(ONE)), Relation.Type.EQ);
1:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list()));
1:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // NEQ
0:         condition = ColumnCondition.condition(definition, null, new Sets.Value(set(ONE)), Relation.Type.NEQ);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list()));
1:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LT
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.LT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list()));
1:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LTE
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.LTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list()));
1:         assertFalse(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertTrue(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GT
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.GT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(), list()));
1:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GTE
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Relation.Type.GTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list()));
1:         assertTrue(setAppliesTo(bound, set(ZERO), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ZERO)));
1:         assertTrue(setAppliesTo(bound, set(ONE), list(ONE, TWO)));
1:         assertFalse(setAppliesTo(bound, set(ONE, TWO), list(ONE)));
1:         assertTrue(setAppliesTo(bound, set(), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list()));
1: 
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ONE)));
1:         assertFalse(setAppliesTo(bound, set(ONE), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(setAppliesTo(bound, set(ByteBufferUtil.EMPTY_BYTE_BUFFER), list(ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:     }
1: 
1:     // values should be a list of key, value, key, value, ...
1:     private static Map<ByteBuffer, ByteBuffer> map(ByteBuffer... values)
1:     {
1:         Map<ByteBuffer, ByteBuffer> map = new TreeMap<>();
1:         for (int i = 0; i < values.length; i += 2)
1:             map.put(values[i], values[i + 1]);
1: 
1:         return map;
1:     }
1: 
1:     private static boolean mapAppliesTo(ColumnCondition.CollectionBound bound, Map<ByteBuffer, ByteBuffer> conditionValues, Map<ByteBuffer, ByteBuffer> columnValues)
1:     {
1:         CFMetaData cfm = CFMetaData.compile("create table foo(a int PRIMARY KEY, b map<int, int>)", "ks");
1:         Map<ByteBuffer, CollectionType> typeMap = new HashMap<>();
0:         typeMap.put(ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance));
0:         CompoundSparseCellNameType.WithCollection nameType = new CompoundSparseCellNameType.WithCollection(Collections.EMPTY_LIST, ColumnToCollectionType.getInstance(typeMap));
0:         ColumnDefinition definition = new ColumnDefinition(cfm, ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance), 0, ColumnDefinition.Kind.REGULAR);
1: 
1:         List<Cell> cells = new ArrayList<>(columnValues.size());
1:         if (columnValues != null)
1:         {
1:             for (Map.Entry<ByteBuffer, ByteBuffer> entry : columnValues.entrySet())
0:                 cells.add(new BufferCell(nameType.create(Composites.EMPTY, definition, entry.getKey()), entry.getValue()));
1:         }
1: 
0:         return bound.mapAppliesTo(MapType.getInstance(Int32Type.instance, Int32Type.instance), cells.iterator(), conditionValues, bound.operator);
1:     }
1: 
1:     @Test
1:     public void testMapCollectionBoundIsSatisfiedByValue() throws InvalidRequestException
1:     {
0:         ColumnDefinition definition = new ColumnDefinition("ks", "cf", new ColumnIdentifier("b", true), MapType.getInstance(Int32Type.instance, Int32Type.instance), null, null, null, null, null);
1: 
1:         Map<ByteBuffer, ByteBuffer> placeholderMap = new TreeMap<>();
1:         placeholderMap.put(ONE, ONE);
1:         Maps.Value placeholder = new Maps.Value(placeholderMap);
1: 
1:         // EQ
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.EQ);
1:         ColumnCondition.CollectionBound bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map()));
1:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // NEQ
0:         condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.NEQ);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map()));
1:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LT
0:         condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.LT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map()));
1:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // LTE
0:         condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.LTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map()));
1:         assertFalse(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GT
0:         condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.GT);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(), map()));
1:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertFalse(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1: 
1:         // GTE
0:         condition = ColumnCondition.condition(definition, null, placeholder, Relation.Type.GTE);
1:         bound = (ColumnCondition.CollectionBound) condition.bind(QueryOptions.DEFAULT);
1: 
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map()));
1:         assertTrue(mapAppliesTo(bound, map(ZERO, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ZERO, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ZERO), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ZERO)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ONE, TWO, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE, TWO, ONE), map(ONE, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map()));
1: 
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ONE)));
1:         assertFalse(mapAppliesTo(bound, map(ONE, ONE), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:         assertTrue(mapAppliesTo(bound, map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE), map(ByteBufferUtil.EMPTY_BYTE_BUFFER, ONE)));
1:         assertTrue(mapAppliesTo(bound, map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER), map(ONE, ByteBufferUtil.EMPTY_BYTE_BUFFER)));
1:     }
1: }
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.BufferCell;
1: import org.apache.cassandra.utils.UUIDGen;
1:     private static final CellPath LIST_PATH = CellPath.create(ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes()));
/////////////////////////////////////////////////////////////////////////
1:             ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
1:             cell = testCell(definition, columnValue, LIST_PATH);
1:     private static Cell testCell(ColumnDefinition column, ByteBuffer value, CellPath path)
1:     {
1:         return new BufferCell(column, 0L, Cell.NO_TTL, Cell.NO_DELETION_TIME, value, path);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("c"), ListType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
1:                 cells.add(testCell(definition, value, CellPath.create(key)));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("c"), SetType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
1:                 cells.add(testCell(definition, ByteBufferUtil.EMPTY_BYTE_BUFFER, CellPath.create(key)));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef(cfm, ByteBufferUtil.bytes("b"), MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
1:                 cells.add(testCell(definition, entry.getValue(), CellPath.create(entry.getKey())));
/////////////////////////////////////////////////////////////////////////
1:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true));
/////////////////////////////////////////////////////////////////////////
commit:a991b64
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
0: import java.util.*;
1: 
0: import org.junit.Test;
1: 
0: import org.apache.cassandra.db.LivenessInfo;
0: import org.apache.cassandra.db.rows.AbstractCell;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.CellPath;
1: import static org.junit.Assert.*;
0:     public static ByteBuffer UNSET_BYTE_BUFFER = ByteBuffer.wrap(new byte[]{});
1: 
/////////////////////////////////////////////////////////////////////////
0:             ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true), null);
0:             cell = new TestCell(definition, null, columnValue, LivenessInfo.NONE);
1:         return bound.isSatisfiedByValue(conditionValue, cell, Int32Type.instance, bound.operator);
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true), null);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:                 cells.add(new TestCell(definition, CellPath.create(key), value, LivenessInfo.NONE));
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true), null);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 cells.add(new TestCell(definition, CellPath.create(key), ByteBufferUtil.EMPTY_BYTE_BUFFER, LivenessInfo.NONE));
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true), null);
/////////////////////////////////////////////////////////////////////////
0:                 cells.add(new TestCell(definition, CellPath.create(entry.getKey()), entry.getValue(), LivenessInfo.NONE));
/////////////////////////////////////////////////////////////////////////
0:         ColumnDefinition definition = ColumnDefinition.regularDef("ks", "cf", "c", ListType.getInstance(Int32Type.instance, true), null);
/////////////////////////////////////////////////////////////////////////
0: 
0:     static class TestCell extends AbstractCell
0:     {
0:         private final ColumnDefinition column;
0:         private final CellPath path;
0:         private final ByteBuffer value;
0:         private final LivenessInfo info;
0: 
0:         public TestCell(ColumnDefinition column, CellPath path, ByteBuffer value, LivenessInfo info)
0:         {
0:             this.column = column;
0:             this.path = path;
0:             this.value = value;
0:             this.info = info.takeAlias();
0:         }
0: 
0:         public ColumnDefinition column()
0:         {
0:             return column;
0:         }
0: 
0:         public boolean isCounterCell()
0:         {
0:             return false;
0:         }
0: 
0:         public ByteBuffer value()
0:         {
0:             return value;
0:         }
0: 
0:         public LivenessInfo livenessInfo()
0:         {
0:             return info;
0:         }
0: 
0:         public CellPath path()
0:         {
0:             return path;
0:         }
0:     }
0: }
author:Oded Peer
-------------------------------------------------------------------------------
commit:48f6446
/////////////////////////////////////////////////////////////////////////
0: import static org.apache.cassandra.utils.ByteBufferUtil.UNSET_BYTE_BUFFER;
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
/////////////////////////////////////////////////////////////////////////
0:         assertThrowsIRE(bound, UNSET_BYTE_BUFFER, ONE);
author:blerer
-------------------------------------------------------------------------------
commit:5117a5d
/////////////////////////////////////////////////////////////////////////
1:         ColumnCondition condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.EQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.LT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.LTE);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.GT);
/////////////////////////////////////////////////////////////////////////
1:         condition = ColumnCondition.condition(definition, new Constants.Value(ONE), Operator.GTE);
/////////////////////////////////////////////////////////////////////////
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.EQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
/////////////////////////////////////////////////////////////////////////
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, new Sets.Value(set(ONE)), Operator.EQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Sets.Value(set(ONE)), Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.LT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.LTE);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.GT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, new Lists.Value(Arrays.asList(ONE)), Operator.GTE);
/////////////////////////////////////////////////////////////////////////
0:         ColumnCondition condition = ColumnCondition.condition(definition, null, placeholder, Operator.EQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, placeholder, Operator.NEQ);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, placeholder, Operator.LT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, placeholder, Operator.LTE);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, placeholder, Operator.GT);
/////////////////////////////////////////////////////////////////////////
0:         condition = ColumnCondition.condition(definition, null, placeholder, Operator.GTE);
============================================================================