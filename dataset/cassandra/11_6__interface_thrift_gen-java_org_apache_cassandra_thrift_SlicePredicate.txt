1:15354b4: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
2:1aeca2b:  *
1:15354b4:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:15354b4:  */
1:542bd79: package org.apache.cassandra.thrift;
1:cba59a8: /*
1:cba59a8:  * 
1:cba59a8:  * Licensed to the Apache Software Foundation (ASF) under one
1:cba59a8:  * or more contributor license agreements.  See the NOTICE file
1:cba59a8:  * distributed with this work for additional information
1:cba59a8:  * regarding copyright ownership.  The ASF licenses this file
1:cba59a8:  * to you under the Apache License, Version 2.0 (the
1:cba59a8:  * "License"); you may not use this file except in compliance
1:cba59a8:  * with the License.  You may obtain a copy of the License at
1:cba59a8:  * 
1:cba59a8:  *   http://www.apache.org/licenses/LICENSE-2.0
1:cba59a8:  * 
1:cba59a8:  * Unless required by applicable law or agreed to in writing,
1:cba59a8:  * software distributed under the License is distributed on an
1:cba59a8:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:cba59a8:  * KIND, either express or implied.  See the License for the
1:cba59a8:  * specific language governing permissions and limitations
1:cba59a8:  * under the License.
1:cba59a8:  * 
1:cba59a8:  */
1:cba59a8: 
1:1aeca2b: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:15354b4: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.protocol.TProtocolException;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:15354b4: import java.util.List;
1:15354b4: import java.util.ArrayList;
1:15354b4: import java.util.Map;
1:15354b4: import java.util.HashMap;
1:04d5ec3: import java.util.EnumMap;
1:15354b4: import java.util.Set;
1:15354b4: import java.util.HashSet;
1:04d5ec3: import java.util.EnumSet;
1:15354b4: import java.util.Collections;
1:0f56a25: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:53895ad: import java.util.Arrays;
1:0f56a25: import org.slf4j.Logger;
1:0f56a25: import org.slf4j.LoggerFactory;
1:15354b4: 
1:4e8691a: /**
1:4e8691a:  * A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
1:4e8691a:  * which is described as "a property that the elements of a set have in common."
1:1aeca2b:  * 
1:4e8691a:  * SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
1:4e8691a:  * specified, slice_range is ignored.
1:1aeca2b:  * 
1:4e8691a:  * @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
1:4e8691a:  *                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
1:4e8691a:  *                     and 'Jim' you can pass those column names as a list to fetch all three at once.
1:4e8691a:  * @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
1:1aeca2b:  */
1:bffd9ea: public class SlicePredicate implements org.apache.thrift.TBase<SlicePredicate, SlicePredicate._Fields>, java.io.Serializable, Cloneable, Comparable<SlicePredicate> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlicePredicate");
1:15354b4: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_names", org.apache.thrift.protocol.TType.LIST, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField SLICE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("slice_range", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:15354b4: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new SlicePredicateStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new SlicePredicateTupleSchemeFactory());
1:15354b4:   }
1:15354b4: 
1:b153d45:   public List<ByteBuffer> column_names; // optional
1:b153d45:   public SliceRange slice_range; // optional
1:15354b4: 
1:04d5ec3:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:04d5ec3:     COLUMN_NAMES((short)1, "column_names"),
1:04d5ec3:     SLICE_RANGE((short)2, "slice_range");
1:15354b4: 
1:04d5ec3:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:15354b4: 
1:15354b4:     static {
1:04d5ec3:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:04d5ec3:         byName.put(field.getFieldName(), field);
1:0f56a25:       }
1:15354b4:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:b43c785:      */
1:04d5ec3:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // COLUMN_NAMES
1:d849c69:           return COLUMN_NAMES;
1:d849c69:         case 2: // SLICE_RANGE
1:d849c69:           return SLICE_RANGE;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:15354b4:     }
1:15354b4: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches fieldId, throwing an exception
1:04d5ec3:      * if it is not found.
2:04d5ec3:      */
1:04d5ec3:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:04d5ec3:       _Fields fields = findByThriftId(fieldId);
1:04d5ec3:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:04d5ec3:       return fields;
1:15354b4:     }
1:b153d45: 
1:04d5ec3:     /**
1:04d5ec3:      * Find the _Fields constant that matches name, or null if its not found.
1:04d5ec3:      */
1:04d5ec3:     public static _Fields findByName(String name) {
1:04d5ec3:       return byName.get(name);
1:15354b4:     }
1:b153d45: 
1:04d5ec3:     private final short _thriftId;
1:04d5ec3:     private final String _fieldName;
1:b153d45: 
1:04d5ec3:     _Fields(short thriftId, String fieldName) {
1:04d5ec3:       _thriftId = thriftId;
1:04d5ec3:       _fieldName = fieldName;
1:b153d45:     }
1:b153d45: 
1:04d5ec3:     public short getThriftFieldId() {
1:04d5ec3:       return _thriftId;
9:b153d45:     }
1:c8afd76: 
1:04d5ec3:     public String getFieldName() {
1:04d5ec3:       return _fieldName;
1:b153d45:     }
1:b153d45:   }
1:c8afd76: 
1:0f56a25:   // isset id assignments
1:b153d45:   private _Fields optionals[] = {_Fields.COLUMN_NAMES,_Fields.SLICE_RANGE};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:d849c69:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:4ec9511:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
1:4ec9511:     tmpMap.put(_Fields.SLICE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("slice_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SliceRange.class)));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlicePredicate.class, metaDataMap);
1:b153d45:   }
2:4ec9511: 
1:15354b4:   public SlicePredicate() {
1:15354b4:   }
1:15354b4: 
1:15354b4:   /**
1:15354b4:    * Performs a deep copy on <i>other</i>.
1:15354b4:    */
1:15354b4:   public SlicePredicate(SlicePredicate other) {
1:15354b4:     if (other.isSetColumn_names()) {
1:bffd9ea:       List<ByteBuffer> __this__column_names = new ArrayList<ByteBuffer>(other.column_names);
1:15354b4:       this.column_names = __this__column_names;
1:15354b4:     }
1:15354b4:     if (other.isSetSlice_range()) {
1:15354b4:       this.slice_range = new SliceRange(other.slice_range);
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:53895ad:   public SlicePredicate deepCopy() {
1:53895ad:     return new SlicePredicate(this);
1:53895ad:   }
1:53895ad: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.column_names = null;
1:e7a385a:     this.slice_range = null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public int getColumn_namesSize() {
1:15354b4:     return (this.column_names == null) ? 0 : this.column_names.size();
1:15354b4:   }
1:15354b4: 
1:e7a385a:   public java.util.Iterator<ByteBuffer> getColumn_namesIterator() {
1:15354b4:     return (this.column_names == null) ? null : this.column_names.iterator();
1:15354b4:   }
1:15354b4: 
1:e7a385a:   public void addToColumn_names(ByteBuffer elem) {
1:15354b4:     if (this.column_names == null) {
1:e7a385a:       this.column_names = new ArrayList<ByteBuffer>();
1:15354b4:     }
1:15354b4:     this.column_names.add(elem);
1:15354b4:   }
1:15354b4: 
1:e7a385a:   public List<ByteBuffer> getColumn_names() {
1:15354b4:     return this.column_names;
1:15354b4:   }
1:15354b4: 
1:e7a385a:   public SlicePredicate setColumn_names(List<ByteBuffer> column_names) {
2:15354b4:     this.column_names = column_names;
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetColumn_names() {
1:15354b4:     this.column_names = null;
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field column_names is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetColumn_names() {
1:15354b4:     return this.column_names != null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setColumn_namesIsSet(boolean value) {
1:15354b4:     if (!value) {
1:15354b4:       this.column_names = null;
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:15354b4:   public SliceRange getSlice_range() {
1:15354b4:     return this.slice_range;
1:15354b4:   }
1:15354b4: 
1:8455ebf:   public SlicePredicate setSlice_range(SliceRange slice_range) {
2:15354b4:     this.slice_range = slice_range;
1:8455ebf:     return this;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void unsetSlice_range() {
1:15354b4:     this.slice_range = null;
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field slice_range is set (has been assigned a value) and false otherwise */
1:15354b4:   public boolean isSetSlice_range() {
1:15354b4:     return this.slice_range != null;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public void setSlice_rangeIsSet(boolean value) {
1:15354b4:     if (!value) {
1:15354b4:       this.slice_range = null;
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:04d5ec3:   public void setFieldValue(_Fields field, Object value) {
1:04d5ec3:     switch (field) {
2:15354b4:     case COLUMN_NAMES:
1:15354b4:       if (value == null) {
1:15354b4:         unsetColumn_names();
3:15354b4:       } else {
1:e7a385a:         setColumn_names((List<ByteBuffer>)value);
1:15354b4:       }
4:15354b4:       break;
1:15354b4: 
2:15354b4:     case SLICE_RANGE:
1:15354b4:       if (value == null) {
1:15354b4:         unsetSlice_range();
1:15354b4:       } else {
1:15354b4:         setSlice_range((SliceRange)value);
1:15354b4:       }
1:15354b4:       break;
1:15354b4: 
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:04d5ec3:   public Object getFieldValue(_Fields field) {
1:04d5ec3:     switch (field) {
1:15354b4:     case COLUMN_NAMES:
1:15354b4:       return getColumn_names();
1:15354b4: 
1:15354b4:     case SLICE_RANGE:
1:15354b4:       return getSlice_range();
1:15354b4: 
1:15354b4:     }
1:04d5ec3:     throw new IllegalStateException();
1:15354b4:   }
1:15354b4: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:04d5ec3:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:04d5ec3:     switch (field) {
1:15354b4:     case COLUMN_NAMES:
1:15354b4:       return isSetColumn_names();
1:15354b4:     case SLICE_RANGE:
1:15354b4:       return isSetSlice_range();
1:15354b4:     }
1:04d5ec3:     throw new IllegalStateException();
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public boolean equals(Object that) {
1:15354b4:     if (that == null)
1:15354b4:       return false;
1:15354b4:     if (that instanceof SlicePredicate)
1:15354b4:       return this.equals((SlicePredicate)that);
1:15354b4:     return false;
1:15354b4:   }
1:15354b4: 
1:15354b4:   public boolean equals(SlicePredicate that) {
1:15354b4:     if (that == null)
1:15354b4:       return false;
1:15354b4: 
1:15354b4:     boolean this_present_column_names = true && this.isSetColumn_names();
1:15354b4:     boolean that_present_column_names = true && that.isSetColumn_names();
1:15354b4:     if (this_present_column_names || that_present_column_names) {
1:15354b4:       if (!(this_present_column_names && that_present_column_names))
1:15354b4:         return false;
1:15354b4:       if (!this.column_names.equals(that.column_names))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     boolean this_present_slice_range = true && this.isSetSlice_range();
1:15354b4:     boolean that_present_slice_range = true && that.isSetSlice_range();
1:15354b4:     if (this_present_slice_range || that_present_slice_range) {
1:15354b4:       if (!(this_present_slice_range && that_present_slice_range))
1:15354b4:         return false;
1:15354b4:       if (!this.slice_range.equals(that.slice_range))
1:15354b4:         return false;
1:15354b4:     }
1:15354b4: 
1:15354b4:     return true;
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_column_names = true && (isSetColumn_names());
1:d966ed0:     builder.append(present_column_names);
1:d966ed0:     if (present_column_names)
1:d966ed0:       builder.append(column_names);
1:d966ed0: 
1:d966ed0:     boolean present_slice_range = true && (isSetSlice_range());
1:d966ed0:     builder.append(present_slice_range);
1:d966ed0:     if (present_slice_range)
1:d966ed0:       builder.append(slice_range);
1:d966ed0: 
1:d966ed0:     return builder.toHashCode();
1:15354b4:   }
1:15354b4: 
1:bffd9ea:   @Override
1:0f56a25:   public int compareTo(SlicePredicate other) {
1:0f56a25:     if (!getClass().equals(other.getClass())) {
1:0f56a25:       return getClass().getName().compareTo(other.getClass().getName());
1:0f56a25:     }
1:0f56a25: 
1:0f56a25:     int lastComparison = 0;
1:0f56a25: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(other.isSetColumn_names());
3:0f56a25:     if (lastComparison != 0) {
3:0f56a25:       return lastComparison;
1:2b69c40:     }
1:e7a385a:     if (isSetColumn_names()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_names, other.column_names);
1:2b69c40:       if (lastComparison != 0) {
1:2b69c40:         return lastComparison;
1:2b69c40:       }
1:2b69c40:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(other.isSetSlice_range());
1:2b69c40:     if (lastComparison != 0) {
1:2b69c40:       return lastComparison;
1:0f56a25:     }
1:e7a385a:     if (isSetSlice_range()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slice_range, other.slice_range);
1:0f56a25:       if (lastComparison != 0) {
1:0f56a25:         return lastComparison;
1:0f56a25:       }
1:0f56a25:     }
1:0f56a25:     return 0;
1:0f56a25:   }
1:0f56a25: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:15354b4:   }
1:15354b4: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:15354b4:   }
1:15354b4: 
1:15354b4:   @Override
1:15354b4:   public String toString() {
1:15354b4:     StringBuilder sb = new StringBuilder("SlicePredicate(");
1:15354b4:     boolean first = true;
1:15354b4: 
1:15354b4:     if (isSetColumn_names()) {
1:15354b4:       sb.append("column_names:");
1:15354b4:       if (this.column_names == null) {
1:15354b4:         sb.append("null");
1:15354b4:       } else {
1:15354b4:         sb.append(this.column_names);
1:15354b4:       }
1:15354b4:       first = false;
1:15354b4:     }
1:15354b4:     if (isSetSlice_range()) {
1:15354b4:       if (!first) sb.append(", ");
1:15354b4:       sb.append("slice_range:");
1:15354b4:       if (this.slice_range == null) {
1:15354b4:         sb.append("null");
1:15354b4:       } else {
1:15354b4:         sb.append(this.slice_range);
1:15354b4:       }
1:15354b4:       first = false;
1:15354b4:     }
1:15354b4:     sb.append(")");
1:15354b4:     return sb.toString();
1:15354b4:   }
1:b153d45: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:15354b4:     // check for required fields
1:b153d45:     // check for sub-struct validity
1:b153d45:     if (slice_range != null) {
1:b153d45:       slice_range.validate();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class SlicePredicateStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public SlicePredicateStandardScheme getScheme() {
1:b153d45:       return new SlicePredicateStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class SlicePredicateStandardScheme extends StandardScheme<SlicePredicate> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, SlicePredicate struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:15354b4:       iprot.readStructBegin();
1:15354b4:       while (true)
1:2b69c40:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:2b69c40:           break;
1:15354b4:         }
1:b153d45:         switch (schemeField.id) {
1:2b69c40:           case 1: // COLUMN_NAMES
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:15354b4:               {
1:b153d45:                 org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
1:b153d45:                 struct.column_names = new ArrayList<ByteBuffer>(_list16.size);
1:b153d45:                 for (int _i17 = 0; _i17 < _list16.size; ++_i17)
1:15354b4:                 {
1:bffd9ea:                   ByteBuffer _elem18;
1:b153d45:                   _elem18 = iprot.readBinary();
1:b153d45:                   struct.column_names.add(_elem18);
1:15354b4:                 }
1:2b69c40:                 iprot.readListEnd();
1:2b69c40:               }
1:b153d45:               struct.setColumn_namesIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:2b69c40:             }
1:2b69c40:             break;
1:2b69c40:           case 2: // SLICE_RANGE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:b153d45:               struct.slice_range = new SliceRange();
1:b153d45:               struct.slice_range.read(iprot);
1:b153d45:               struct.setSlice_rangeIsSet(true);
1:2b69c40:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:15354b4:             break;
1:2b69c40:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:2b69c40:         iprot.readFieldEnd();
1:b153d45:       }
1:15354b4:       iprot.readStructEnd();
1:b153d45: 
1:15354b4:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, SlicePredicate struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:15354b4:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.column_names != null) {
1:b153d45:         if (struct.isSetColumn_names()) {
1:15354b4:           oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
1:53895ad:           {
1:b153d45:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.column_names.size()));
1:b153d45:             for (ByteBuffer _iter19 : struct.column_names)
1:15354b4:             {
1:b153d45:               oprot.writeBinary(_iter19);
1:b153d45:             }
1:15354b4:             oprot.writeListEnd();
1:15354b4:           }
1:15354b4:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.slice_range != null) {
1:b153d45:         if (struct.isSetSlice_range()) {
1:15354b4:           oprot.writeFieldBegin(SLICE_RANGE_FIELD_DESC);
1:b153d45:           struct.slice_range.write(oprot);
1:15354b4:           oprot.writeFieldEnd();
1:15354b4:         }
1:b153d45:       }
1:15354b4:       oprot.writeFieldStop();
1:15354b4:       oprot.writeStructEnd();
1:15354b4:     }
1:15354b4: 
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class SlicePredicateTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public SlicePredicateTupleScheme getScheme() {
1:b153d45:       return new SlicePredicateTupleScheme();
1:15354b4:     }
1:15354b4:   }
1:15354b4: 
1:b153d45:   private static class SlicePredicateTupleScheme extends TupleScheme<SlicePredicate> {
1:15354b4: 
1:15354b4:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, SlicePredicate struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetColumn_names()) {
1:b153d45:         optionals.set(0);
1:15354b4:       }
1:b153d45:       if (struct.isSetSlice_range()) {
1:b153d45:         optionals.set(1);
1:15354b4:       }
1:b153d45:       oprot.writeBitSet(optionals, 2);
1:b153d45:       if (struct.isSetColumn_names()) {
1:15354b4:         {
1:b153d45:           oprot.writeI32(struct.column_names.size());
1:b153d45:           for (ByteBuffer _iter20 : struct.column_names)
1:15354b4:           {
1:b153d45:             oprot.writeBinary(_iter20);
1:15354b4:           }
1:15354b4:         }
1:b153d45:       }
1:b153d45:       if (struct.isSetSlice_range()) {
1:b153d45:         struct.slice_range.write(oprot);
1:b153d45:       }
1:b153d45:     }
1:15354b4: 
2:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, SlicePredicate struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       BitSet incoming = iprot.readBitSet(2);
1:b153d45:       if (incoming.get(0)) {
1:15354b4:         {
1:b153d45:           org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:b153d45:           struct.column_names = new ArrayList<ByteBuffer>(_list21.size);
1:b153d45:           for (int _i22 = 0; _i22 < _list21.size; ++_i22)
9:b153d45:           {
1:bffd9ea:             ByteBuffer _elem23;
1:b153d45:             _elem23 = iprot.readBinary();
1:b153d45:             struct.column_names.add(_elem23);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setColumn_namesIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.slice_range = new SliceRange();
1:b153d45:         struct.slice_range.read(iprot);
1:b153d45:         struct.setSlice_rangeIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class SlicePredicate implements org.apache.thrift.TBase<SlicePredicate, SlicePredicate._Fields>, java.io.Serializable, Cloneable, Comparable<SlicePredicate> {
/////////////////////////////////////////////////////////////////////////
1:       List<ByteBuffer> __this__column_names = new ArrayList<ByteBuffer>(other.column_names);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(other.isSetColumn_names());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_names, other.column_names);
1:     lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(other.isSetSlice_range());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slice_range, other.slice_range);
/////////////////////////////////////////////////////////////////////////
1:                   ByteBuffer _elem18;
/////////////////////////////////////////////////////////////////////////
1:             ByteBuffer _elem23;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:0ba5cf1
/////////////////////////////////////////////////////////////////////////
0:                   ByteBuffer _elem18; // required
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer _elem23; // required
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:72a6cff
/////////////////////////////////////////////////////////////////////////
0:                   ByteBuffer _elem18; // optional
/////////////////////////////////////////////////////////////////////////
0:             ByteBuffer _elem23; // optional
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public List<ByteBuffer> column_names;
/////////////////////////////////////////////////////////////////////////
0:       List<ByteBuffer> __this__column_names = new ArrayList<ByteBuffer>();
0:       for (ByteBuffer other_element : other.column_names) {
0:         ByteBuffer temp_binary_element = TBaseHelper.copyBinary(other_element);
0: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.column_names = null;
1:     this.slice_range = null;
1:   public java.util.Iterator<ByteBuffer> getColumn_namesIterator() {
1:   public void addToColumn_names(ByteBuffer elem) {
1:       this.column_names = new ArrayList<ByteBuffer>();
1:   public List<ByteBuffer> getColumn_names() {
1:   public SlicePredicate setColumn_names(List<ByteBuffer> column_names) {
/////////////////////////////////////////////////////////////////////////
1:         setColumn_names((List<ByteBuffer>)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (isSetColumn_names()) {
0:       lastComparison = TBaseHelper.compareTo(this.column_names, typedOther.column_names);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetSlice_range()) {
0:       lastComparison = TBaseHelper.compareTo(this.slice_range, typedOther.slice_range);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:               this.column_names = new ArrayList<ByteBuffer>(_list4.size);
0:                 ByteBuffer _elem6;
/////////////////////////////////////////////////////////////////////////
0:           for (ByteBuffer _iter7 : this.column_names)
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_column_names = true && (isSetColumn_names());
1:     builder.append(present_column_names);
1:     if (present_column_names)
1:       builder.append(column_names);
1: 
1:     boolean present_slice_range = true && (isSetSlice_range());
1:     builder.append(present_slice_range);
1:     if (present_slice_range)
1:       builder.append(slice_range);
1: 
1:     return builder.toHashCode();
commit:4fb3d18
/////////////////////////////////////////////////////////////////////////
0:               TList _list4 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list4.size);
0:               for (int _i5 = 0; _i5 < _list4.size; ++_i5)
0:                 byte[] _elem6;
0:                 _elem6 = iprot.readBinary();
0:                 this.column_names.add(_elem6);
/////////////////////////////////////////////////////////////////////////
0:           for (byte[] _iter7 : this.column_names)
0:             oprot.writeBinary(_iter7);
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
/////////////////////////////////////////////////////////////////////////
0: public class SlicePredicate implements TBase<SlicePredicate, SlicePredicate._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // COLUMN_NAMES
1:           return COLUMN_NAMES;
1:         case 2: // SLICE_RANGE
1:           return SLICE_RANGE;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.COLUMN_NAMES, new FieldMetaData("column_names", TFieldRequirementType.OPTIONAL, 
0:     tmpMap.put(_Fields.SLICE_RANGE, new FieldMetaData("slice_range", TFieldRequirementType.OPTIONAL, 
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetColumn_names()) {      lastComparison = TBaseHelper.compareTo(this.column_names, typedOther.column_names);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetSlice_range()) {      lastComparison = TBaseHelper.compareTo(this.slice_range, typedOther.slice_range);
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
commit:7d2115b
/////////////////////////////////////////////////////////////////////////
0:               TList _list8 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list8.size);
0:               for (int _i9 = 0; _i9 < _list8.size; ++_i9)
0:                 byte[] _elem10;
0:                 _elem10 = iprot.readBinary();
0:                 this.column_names.add(_elem10);
/////////////////////////////////////////////////////////////////////////
0:           for (byte[] _iter11 : this.column_names)
0:             oprot.writeBinary(_iter11);
commit:2b69c40
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(typedOther.isSetColumn_names());
0:     if (isSetColumn_names()) {      lastComparison = TBaseHelper.compareTo(column_names, typedOther.column_names);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(typedOther.isSetSlice_range());
0:     if (isSetSlice_range()) {      lastComparison = TBaseHelper.compareTo(slice_range, typedOther.slice_range);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
/////////////////////////////////////////////////////////////////////////
0:       switch (field.id) {
1:         case 1: // COLUMN_NAMES
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list4 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list4.size);
0:               for (int _i5 = 0; _i5 < _list4.size; ++_i5)
0:                 byte[] _elem6;
0:                 _elem6 = iprot.readBinary();
0:                 this.column_names.add(_elem6);
1:               iprot.readListEnd();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // SLICE_RANGE
0:           if (field.type == TType.STRUCT) {
0:             this.slice_range = new SliceRange();
0:             this.slice_range.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       iprot.readFieldEnd();
commit:53895ad
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:   public static final int COLUMN_NAMES = 1;
/////////////////////////////////////////////////////////////////////////
1:   public SlicePredicate deepCopy() {
1:     return new SlicePredicate(this);
1:   }
1: 
0:   @Deprecated
/////////////////////////////////////////////////////////////////////////
0:           for (byte[] _iter7 : this.column_names)
1:           {
commit:0f56a25
/////////////////////////////////////////////////////////////////////////
1: import java.util.BitSet;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: public class SlicePredicate implements TBase, java.io.Serializable, Cloneable, Comparable<SlicePredicate> {
/////////////////////////////////////////////////////////////////////////
1:   // isset id assignments
/////////////////////////////////////////////////////////////////////////
1:   public int compareTo(SlicePredicate other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     SlicePredicate typedOther = (SlicePredicate)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetColumn_names()).compareTo(isSetColumn_names());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(column_names, typedOther.column_names);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = Boolean.valueOf(isSetSlice_range()).compareTo(isSetSlice_range());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     lastComparison = TBaseHelper.compareTo(slice_range, typedOther.slice_range);
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     return 0;
1:   }
1: 
commit:0fc2d87
/////////////////////////////////////////////////////////////////////////
0:               TList _list4 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list4.size);
0:               for (int _i5 = 0; _i5 < _list4.size; ++_i5)
0:                 byte[] _elem6;
0:                 _elem6 = iprot.readBinary();
0:                 this.column_names.add(_elem6);
/////////////////////////////////////////////////////////////////////////
0:           for (byte[] _iter7 : this.column_names)          {
0:             oprot.writeBinary(_iter7);
commit:1aeca2b
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
commit:15354b4
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
0:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
0: package org.apache.cassandra.service;
1: 
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.Collections;
0: import org.apache.log4j.Logger;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class SlicePredicate implements TBase, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("SlicePredicate");
0:   private static final TField COLUMN_NAMES_FIELD_DESC = new TField("column_names", TType.LIST, (short)1);
0:   private static final TField SLICE_RANGE_FIELD_DESC = new TField("slice_range", TType.STRUCT, (short)2);
1: 
0:   public List<byte[]> column_names;
0:   public static final int COLUMN_NAMES = 1;
0:   public SliceRange slice_range;
0:   public static final int SLICE_RANGE = 2;
1: 
0:   private final Isset __isset = new Isset();
0:   private static final class Isset implements java.io.Serializable {
1:   }
1: 
0:   public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
0:     put(COLUMN_NAMES, new FieldMetaData("column_names", TFieldRequirementType.OPTIONAL, 
0:         new ListMetaData(TType.LIST, 
0:             new FieldValueMetaData(TType.STRING))));
0:     put(SLICE_RANGE, new FieldMetaData("slice_range", TFieldRequirementType.OPTIONAL, 
0:         new StructMetaData(TType.STRUCT, SliceRange.class)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(SlicePredicate.class, metaDataMap);
1:   }
1: 
1:   public SlicePredicate() {
1:   }
1: 
0:   public SlicePredicate(
0:     List<byte[]> column_names,
0:     SliceRange slice_range)
1:   {
0:     this();
1:     this.column_names = column_names;
1:     this.slice_range = slice_range;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public SlicePredicate(SlicePredicate other) {
1:     if (other.isSetColumn_names()) {
0:       List<byte[]> __this__column_names = new ArrayList<byte[]>();
0:       for (byte[] other_element : other.column_names) {
0:         byte[] temp_binary_element = new byte[other_element.length];
0:         System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
0:         __this__column_names.add(temp_binary_element);
1:       }
1:       this.column_names = __this__column_names;
1:     }
1:     if (other.isSetSlice_range()) {
1:       this.slice_range = new SliceRange(other.slice_range);
1:     }
1:   }
1: 
1:   @Override
0:   public SlicePredicate clone() {
0:     return new SlicePredicate(this);
1:   }
1: 
1:   public int getColumn_namesSize() {
1:     return (this.column_names == null) ? 0 : this.column_names.size();
1:   }
1: 
0:   public java.util.Iterator<byte[]> getColumn_namesIterator() {
1:     return (this.column_names == null) ? null : this.column_names.iterator();
1:   }
1: 
0:   public void addToColumn_names(byte[] elem) {
1:     if (this.column_names == null) {
0:       this.column_names = new ArrayList<byte[]>();
1:     }
1:     this.column_names.add(elem);
1:   }
1: 
0:   public List<byte[]> getColumn_names() {
1:     return this.column_names;
1:   }
1: 
0:   public void setColumn_names(List<byte[]> column_names) {
1:     this.column_names = column_names;
1:   }
1: 
1:   public void unsetColumn_names() {
1:     this.column_names = null;
1:   }
1: 
0:   // Returns true if field column_names is set (has been asigned a value) and false otherwise
1:   public boolean isSetColumn_names() {
1:     return this.column_names != null;
1:   }
1: 
1:   public void setColumn_namesIsSet(boolean value) {
1:     if (!value) {
1:       this.column_names = null;
1:     }
1:   }
1: 
1:   public SliceRange getSlice_range() {
1:     return this.slice_range;
1:   }
1: 
0:   public void setSlice_range(SliceRange slice_range) {
1:     this.slice_range = slice_range;
1:   }
1: 
1:   public void unsetSlice_range() {
1:     this.slice_range = null;
1:   }
1: 
0:   // Returns true if field slice_range is set (has been asigned a value) and false otherwise
1:   public boolean isSetSlice_range() {
1:     return this.slice_range != null;
1:   }
1: 
1:   public void setSlice_rangeIsSet(boolean value) {
1:     if (!value) {
1:       this.slice_range = null;
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     switch (fieldID) {
1:     case COLUMN_NAMES:
1:       if (value == null) {
1:         unsetColumn_names();
1:       } else {
0:         setColumn_names((List<byte[]>)value);
1:       }
1:       break;
1: 
1:     case SLICE_RANGE:
1:       if (value == null) {
1:         unsetSlice_range();
1:       } else {
1:         setSlice_range((SliceRange)value);
1:       }
1:       break;
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   public Object getFieldValue(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN_NAMES:
1:       return getColumn_names();
1: 
1:     case SLICE_RANGE:
1:       return getSlice_range();
1: 
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
0:   // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
0:   public boolean isSet(int fieldID) {
0:     switch (fieldID) {
1:     case COLUMN_NAMES:
1:       return isSetColumn_names();
1:     case SLICE_RANGE:
1:       return isSetSlice_range();
0:     default:
0:       throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
1:     }
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof SlicePredicate)
1:       return this.equals((SlicePredicate)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(SlicePredicate that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_column_names = true && this.isSetColumn_names();
1:     boolean that_present_column_names = true && that.isSetColumn_names();
1:     if (this_present_column_names || that_present_column_names) {
1:       if (!(this_present_column_names && that_present_column_names))
1:         return false;
1:       if (!this.column_names.equals(that.column_names))
1:         return false;
1:     }
1: 
1:     boolean this_present_slice_range = true && this.isSetSlice_range();
1:     boolean that_present_slice_range = true && that.isSetSlice_range();
1:     if (this_present_slice_range || that_present_slice_range) {
1:       if (!(this_present_slice_range && that_present_slice_range))
1:         return false;
1:       if (!this.slice_range.equals(that.slice_range))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
0:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id)
1:       {
1:         case COLUMN_NAMES:
0:           if (field.type == TType.LIST) {
1:             {
0:               TList _list31 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list31.size);
0:               for (int _i32 = 0; _i32 < _list31.size; ++_i32)
1:               {
0:                 byte[] _elem33;
0:                 _elem33 = iprot.readBinary();
0:                 this.column_names.add(_elem33);
1:               }
0:               iprot.readListEnd();
1:             }
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case SLICE_RANGE:
0:           if (field.type == TType.STRUCT) {
0:             this.slice_range = new SliceRange();
0:             this.slice_range.read(iprot);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
0:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:           break;
1:       }
0:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.column_names != null) {
1:       oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
1:       {
0:         oprot.writeListBegin(new TList(TType.STRING, this.column_names.size()));
0:         for (byte[] _iter34 : this.column_names)        {
0:           oprot.writeBinary(_iter34);
1:         }
1:         oprot.writeListEnd();
1:       }
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.slice_range != null) {
1:       oprot.writeFieldBegin(SLICE_RANGE_FIELD_DESC);
0:       this.slice_range.write(oprot);
1:       oprot.writeFieldEnd();
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("SlicePredicate(");
1:     boolean first = true;
1: 
1:     if (isSetColumn_names()) {
1:       sb.append("column_names:");
1:       if (this.column_names == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.column_names);
1:       }
1:       first = false;
1:     }
1:     if (isSetSlice_range()) {
1:       if (!first) sb.append(", ");
1:       sb.append("slice_range:");
1:       if (this.slice_range == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.slice_range);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
0:     // check that fields of type enum have valid values
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new SlicePredicateStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new SlicePredicateTupleSchemeFactory());
1:   }
1: 
1:   public List<ByteBuffer> column_names; // optional
1:   public SliceRange slice_range; // optional
/////////////////////////////////////////////////////////////////////////
1:   private _Fields optionals[] = {_Fields.COLUMN_NAMES,_Fields.SLICE_RANGE};
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
1:     if (slice_range != null) {
1:       slice_range.validate();
1:     }
/////////////////////////////////////////////////////////////////////////
1:   private static class SlicePredicateStandardSchemeFactory implements SchemeFactory {
1:     public SlicePredicateStandardScheme getScheme() {
1:       return new SlicePredicateStandardScheme();
1:     }
1:   }
1: 
1:   private static class SlicePredicateStandardScheme extends StandardScheme<SlicePredicate> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, SlicePredicate struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
0:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // COLUMN_NAMES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
1:                 struct.column_names = new ArrayList<ByteBuffer>(_list16.size);
1:                 for (int _i17 = 0; _i17 < _list16.size; ++_i17)
1:                 {
0:                   ByteBuffer _elem18; // required
1:                   _elem18 = iprot.readBinary();
1:                   struct.column_names.add(_elem18);
1:                 }
0:                 iprot.readListEnd();
1:               }
1:               struct.setColumn_namesIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           case 2: // SLICE_RANGE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
1:               struct.slice_range = new SliceRange();
1:               struct.slice_range.read(iprot);
1:               struct.setSlice_rangeIsSet(true);
0:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
0:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, SlicePredicate struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.column_names != null) {
1:         if (struct.isSetColumn_names()) {
0:           oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.column_names.size()));
1:             for (ByteBuffer _iter19 : struct.column_names)
1:             {
1:               oprot.writeBinary(_iter19);
1:             }
0:             oprot.writeListEnd();
1:           }
0:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.slice_range != null) {
1:         if (struct.isSetSlice_range()) {
0:           oprot.writeFieldBegin(SLICE_RANGE_FIELD_DESC);
1:           struct.slice_range.write(oprot);
0:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class SlicePredicateTupleSchemeFactory implements SchemeFactory {
1:     public SlicePredicateTupleScheme getScheme() {
1:       return new SlicePredicateTupleScheme();
1:     }
1:   }
1: 
1:   private static class SlicePredicateTupleScheme extends TupleScheme<SlicePredicate> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, SlicePredicate struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetColumn_names()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetSlice_range()) {
1:         optionals.set(1);
1:       }
1:       oprot.writeBitSet(optionals, 2);
1:       if (struct.isSetColumn_names()) {
1:         {
1:           oprot.writeI32(struct.column_names.size());
1:           for (ByteBuffer _iter20 : struct.column_names)
1:           {
1:             oprot.writeBinary(_iter20);
1:           }
1:         }
1:       }
1:       if (struct.isSetSlice_range()) {
1:         struct.slice_range.write(oprot);
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, SlicePredicate struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       BitSet incoming = iprot.readBitSet(2);
1:       if (incoming.get(0)) {
1:         {
1:           org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:           struct.column_names = new ArrayList<ByteBuffer>(_list21.size);
1:           for (int _i22 = 0; _i22 < _list21.size; ++_i22)
1:           {
0:             ByteBuffer _elem23; // required
1:             _elem23 = iprot.readBinary();
1:             struct.column_names.add(_elem23);
1:           }
1:         }
1:         struct.setColumn_namesIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.slice_range = new SliceRange();
1:         struct.slice_range.read(iprot);
1:         struct.setSlice_rangeIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
0:   public List<ByteBuffer> column_names; // required
0:   public SliceRange slice_range; // required
/////////////////////////////////////////////////////////////////////////
0:                 ByteBuffer _elem10; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class SlicePredicate implements org.apache.thrift.TBase<SlicePredicate, SlicePredicate._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlicePredicate");
1:   private static final org.apache.thrift.protocol.TField COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_names", org.apache.thrift.protocol.TType.LIST, (short)1);
1:   private static final org.apache.thrift.protocol.TField SLICE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("slice_range", org.apache.thrift.protocol.TType.STRUCT, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
1:     tmpMap.put(_Fields.SLICE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("slice_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SliceRange.class)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlicePredicate.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field column_names is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field slice_range is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_names, typedOther.column_names);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slice_range, typedOther.slice_range);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.LIST) {
0:               org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
/////////////////////////////////////////////////////////////////////////
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
0:           oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.column_names.size()));
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
1: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
0:               TList _list8 = iprot.readListBegin();
0:               this.column_names = new ArrayList<ByteBuffer>(_list8.size);
0:               for (int _i9 = 0; _i9 < _list8.size; ++_i9)
0:                 ByteBuffer _elem10;
0:                 _elem10 = iprot.readBinary();
0:                 this.column_names.add(_elem10);
/////////////////////////////////////////////////////////////////////////
0:           for (ByteBuffer _iter11 : this.column_names)
0:             oprot.writeBinary(_iter11);
commit:0658589
/////////////////////////////////////////////////////////////////////////
author:Eric Evans
-------------------------------------------------------------------------------
commit:b43c785
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
0: 
commit:f91c7d3
commit:542bd79
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.thrift;
commit:04d5ec3
/////////////////////////////////////////////////////////////////////////
1: import java.util.EnumMap;
1: import java.util.EnumSet;
/////////////////////////////////////////////////////////////////////////
0: public class SlicePredicate implements TBase<SlicePredicate._Fields>, java.io.Serializable, Cloneable, Comparable<SlicePredicate> {
0: 
0: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     COLUMN_NAMES((short)1, "column_names"),
1:     SLICE_RANGE((short)2, "slice_range");
0: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
0: 
0:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
0:       }
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
0:     }
0: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
0:     }
0: 
1:     private final short _thriftId;
1:     private final String _fieldName;
0: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
0:     }
0: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
0:     }
0: 
1:     public String getFieldName() {
1:       return _fieldName;
0:     }
0:   }
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.COLUMN_NAMES, new FieldMetaData("column_names", TFieldRequirementType.OPTIONAL, 
0:     put(_Fields.SLICE_RANGE, new FieldMetaData("slice_range", TFieldRequirementType.OPTIONAL, 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field column_names is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:   /** Returns true if field slice_range is set (has been asigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
/////////////////////////////////////////////////////////////////////////
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
0:   }
0: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
0:   }
0: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     throw new IllegalStateException();
0:   }
0: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
/////////////////////////////////////////////////////////////////////////
0:       _Fields fieldId = _Fields.findByThriftId(field.id);
0:       if (fieldId == null) {
0:         TProtocolUtil.skip(iprot, field.type);
0:       } else {
0:         switch (fieldId) {
0:           case COLUMN_NAMES:
0:             if (field.type == TType.LIST) {
0:                 TList _list4 = iprot.readListBegin();
0:                 this.column_names = new ArrayList<byte[]>(_list4.size);
0:                 for (int _i5 = 0; _i5 < _list4.size; ++_i5)
0:                 {
0:                   byte[] _elem6;
0:                   _elem6 = iprot.readBinary();
0:                   this.column_names.add(_elem6);
0:                 }
0:                 iprot.readListEnd();
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             break;
0:           case SLICE_RANGE:
0:             if (field.type == TType.STRUCT) {
0:               this.slice_range = new SliceRange();
0:               this.slice_range.read(iprot);
0:             } else { 
0:               TProtocolUtil.skip(iprot, field.type);
0:             }
0:             break;
0:         }
0:         iprot.readFieldEnd();
/////////////////////////////////////////////////////////////////////////
commit:4e8691a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
1:  * which is described as "a property that the elements of a set have in common."
0:  * 
1:  * SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
1:  * specified, slice_range is ignored.
0:  * 
1:  * @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
1:  *                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
1:  *                     and 'Jim' you can pass those column names as a list to fetch all three at once.
1:  * @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
0:  */
/////////////////////////////////////////////////////////////////////////
0:   public int getColumn_namesSize() {
0:     return (this.column_names == null) ? 0 : this.column_names.size();
0:   }
0: 
0:   public java.util.Iterator<byte[]> getColumn_namesIterator() {
0:     return (this.column_names == null) ? null : this.column_names.iterator();
0:   }
0: 
0:   public void addToColumn_names(byte[] elem) {
0:     if (this.column_names == null) {
0:       this.column_names = new ArrayList<byte[]>();
0:     }
0:     this.column_names.add(elem);
0:   }
0: 
commit:cd66ac8
/////////////////////////////////////////////////////////////////////////
0:               TList _list22 = iprot.readListBegin();
0:               this.column_names = new ArrayList<byte[]>(_list22.size);
0:               for (int _i23 = 0; _i23 < _list22.size; ++_i23)
0:                 byte[] _elem24;
0:                 _elem24 = iprot.readBinary();
0:                 this.column_names.add(_elem24);
/////////////////////////////////////////////////////////////////////////
0:           for (byte[] _iter25 : this.column_names)          {
0:             oprot.writeBinary(_iter25);
commit:8455ebf
/////////////////////////////////////////////////////////////////////////
0:   public SlicePredicate setColumn_names(List<byte[]> column_names) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
1:   public SlicePredicate setSlice_range(SliceRange slice_range) {
1:     return this;
/////////////////////////////////////////////////////////////////////////
0:       if (isSetColumn_names()) {
0:         oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
0:         {
0:           oprot.writeListBegin(new TList(TType.STRING, this.column_names.size()));
0:           for (byte[] _iter34 : this.column_names)          {
0:             oprot.writeBinary(_iter34);
0:           }
0:           oprot.writeListEnd();
0:         oprot.writeFieldEnd();
0:       if (isSetSlice_range()) {
0:         oprot.writeFieldBegin(SLICE_RANGE_FIELD_DESC);
0:         this.slice_range.write(oprot);
0:         oprot.writeFieldEnd();
0:       }
============================================================================