1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.rows;
1:a991b64: 
1:489a9e8: import org.apache.cassandra.utils.AbstractIterator;
1:a991b64: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.db.*;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * Abstract class to create UnfilteredRowIterator that lazily initialize themselves.
1:a991b64:  *
1:a991b64:  * This is used during partition range queries when we know the partition key but want
1:a991b64:  * to defer the initialization of the rest of the UnfilteredRowIterator until we need those informations.
1:143a7d9:  * See {@link org.apache.cassandra.io.sstable.format.big.BigTableScanner.KeyScanningIterator} for instance.
1:a991b64:  */
1:a991b64: public abstract class LazilyInitializedUnfilteredRowIterator extends AbstractIterator<Unfiltered> implements UnfilteredRowIterator
1:a991b64: {
1:a991b64:     private final DecoratedKey partitionKey;
1:a991b64: 
1:a991b64:     private UnfilteredRowIterator iterator;
1:a991b64: 
1:a991b64:     public LazilyInitializedUnfilteredRowIterator(DecoratedKey partitionKey)
1:a991b64:     {
1:a991b64:         this.partitionKey = partitionKey;
1:a991b64:     }
1:a991b64: 
1:a991b64:     protected abstract UnfilteredRowIterator initializeIterator();
1:a991b64: 
1:b11fba7:     protected void maybeInit()
1:a991b64:     {
1:a991b64:         if (iterator == null)
1:a991b64:             iterator = initializeIterator();
1:a991b64:     }
1:a991b64: 
1:b11fba7:     public boolean initialized()
1:b11fba7:     {
1:b11fba7:         return iterator != null;
1:b11fba7:     }
1:b11fba7: 
1:a991b64:     public CFMetaData metadata()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.metadata();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public PartitionColumns columns()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.columns();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public boolean isReverseOrder()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.isReverseOrder();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DecoratedKey partitionKey()
1:a991b64:     {
1:a991b64:         return partitionKey;
1:a991b64:     }
1:a991b64: 
1:a991b64:     public DeletionTime partitionLevelDeletion()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.partitionLevelDeletion();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public Row staticRow()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.staticRow();
1:a991b64:     }
1:a991b64: 
1:c055ab9:     public EncodingStats stats()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.stats();
1:a991b64:     }
1:a991b64: 
1:a991b64:     protected Unfiltered computeNext()
1:a991b64:     {
1:a991b64:         maybeInit();
1:a991b64:         return iterator.hasNext() ? iterator.next() : endOfData();
1:a991b64:     }
1:a991b64: 
1:a991b64:     public void close()
1:a991b64:     {
1:a991b64:         if (iterator != null)
1:a991b64:             iterator.close();
1:a991b64:     }
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:143a7d9
/////////////////////////////////////////////////////////////////////////
1:  * See {@link org.apache.cassandra.io.sstable.format.big.BigTableScanner.KeyScanningIterator} for instance.
commit:6536c05
/////////////////////////////////////////////////////////////////////////
0:  * See {@link org.apache.cassandra.io.sstable.format.big.BigTableScanner#KeyScanningIterator} for instance.
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:b11fba7
/////////////////////////////////////////////////////////////////////////
1:     protected void maybeInit()
1:     public boolean initialized()
1:     {
1:         return iterator != null;
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:489a9e8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.AbstractIterator;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:c055ab9
/////////////////////////////////////////////////////////////////////////
1:     public EncodingStats stats()
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.rows;
1: 
0: import com.google.common.collect.AbstractIterator;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: 
1: /**
1:  * Abstract class to create UnfilteredRowIterator that lazily initialize themselves.
1:  *
1:  * This is used during partition range queries when we know the partition key but want
1:  * to defer the initialization of the rest of the UnfilteredRowIterator until we need those informations.
0:  * See {@link BigTableScanner#KeyScanningIterator} for instance.
1:  */
1: public abstract class LazilyInitializedUnfilteredRowIterator extends AbstractIterator<Unfiltered> implements UnfilteredRowIterator
1: {
1:     private final DecoratedKey partitionKey;
1: 
1:     private UnfilteredRowIterator iterator;
1: 
1:     public LazilyInitializedUnfilteredRowIterator(DecoratedKey partitionKey)
1:     {
1:         this.partitionKey = partitionKey;
1:     }
1: 
1:     protected abstract UnfilteredRowIterator initializeIterator();
1: 
0:     private void maybeInit()
1:     {
1:         if (iterator == null)
1:             iterator = initializeIterator();
1:     }
1: 
1:     public CFMetaData metadata()
1:     {
1:         maybeInit();
1:         return iterator.metadata();
1:     }
1: 
1:     public PartitionColumns columns()
1:     {
1:         maybeInit();
1:         return iterator.columns();
1:     }
1: 
1:     public boolean isReverseOrder()
1:     {
1:         maybeInit();
1:         return iterator.isReverseOrder();
1:     }
1: 
1:     public DecoratedKey partitionKey()
1:     {
1:         return partitionKey;
1:     }
1: 
1:     public DeletionTime partitionLevelDeletion()
1:     {
1:         maybeInit();
1:         return iterator.partitionLevelDeletion();
1:     }
1: 
1:     public Row staticRow()
1:     {
1:         maybeInit();
1:         return iterator.staticRow();
1:     }
1: 
0:     public RowStats stats()
1:     {
1:         maybeInit();
1:         return iterator.stats();
1:     }
1: 
1:     protected Unfiltered computeNext()
1:     {
1:         maybeInit();
1:         return iterator.hasNext() ? iterator.next() : endOfData();
1:     }
1: 
1:     public void close()
1:     {
1:         if (iterator != null)
1:             iterator.close();
1:     }
1: }
============================================================================