1:c1eb74c: /*
1:c1eb74c:  * Licensed to the Apache Software Foundation (ASF) under one
1:c1eb74c:  * or more contributor license agreements.  See the NOTICE file
1:c1eb74c:  * distributed with this work for additional information
1:c1eb74c:  * regarding copyright ownership.  The ASF licenses this file
1:c1eb74c:  * to you under the Apache License, Version 2.0 (the
1:c1eb74c:  * "License"); you may not use this file except in compliance
1:c1eb74c:  * with the License.  You may obtain a copy of the License at
1:c1eb74c:  *
1:c1eb74c:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c1eb74c:  *
1:c1eb74c:  * Unless required by applicable law or agreed to in writing, software
1:c1eb74c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c1eb74c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c1eb74c:  * See the License for the specific language governing permissions and
1:c1eb74c:  * limitations under the License.
1:c1eb74c:  */
1:c1eb74c: package org.apache.cassandra.triggers;
11:c1eb74c: 
1:c1eb74c: import java.util.*;
1:a991b64: 
1:9797511: import org.junit.BeforeClass;
1:c1eb74c: import org.junit.Test;
1:c1eb74c: 
1:a991b64: import org.apache.cassandra.Util;
1:c1eb74c: import org.apache.cassandra.config.CFMetaData;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:c1eb74c: import org.apache.cassandra.db.*;
1:2457599: import org.apache.cassandra.db.rows.*;
1:c1eb74c: import org.apache.cassandra.db.marshal.UTF8Type;
1:a991b64: import org.apache.cassandra.db.partitions.Partition;
1:a991b64: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:c1eb74c: import org.apache.cassandra.exceptions.ConfigurationException;
1:c1eb74c: import org.apache.cassandra.exceptions.InvalidRequestException;
1:16044a6: import org.apache.cassandra.schema.TriggerMetadata;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:c1eb74c: 
1:c1eb74c: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:a991b64: import static org.junit.Assert.assertEquals;
1:a991b64: import static org.junit.Assert.assertNull;
1:a991b64: import static org.junit.Assert.assertTrue;
1:c1eb74c: 
1:c1eb74c: public class TriggerExecutorTest
6:c1eb74c: {
1:9797511:     @BeforeClass
1:9797511:     public static void setupDD()
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:c1eb74c:     @Test
1:c1eb74c:     public void sameKeySameCfColumnFamilies() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfTrigger.class.getName()));
1:a991b64:         PartitionUpdate mutated = TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1:a991b64: 
1:e017f94:         try (RowIterator rowIterator = UnfilteredRowIterators.filter(mutated.unfilteredIterator(),
1:e017f94:                                                                      FBUtilities.nowInSeconds()))
1:e017f94:         {
1:e017f94:             Iterator<Cell> cells = rowIterator.next().cells().iterator();
1:e017f94:             assertEquals(bytes("trigger"), cells.next().value());
1:a991b64: 
1:e017f94:             assertTrue(!rowIterator.hasNext());
1:e017f94:         }
6:c1eb74c:     }
1:a991b64: 
1:c1eb74c:     @Test(expected = InvalidRequestException.class)
1:c1eb74c:     public void sameKeyDifferentCfColumnFamilies() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentCfTrigger.class.getName()));
1:a991b64:         TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test(expected = InvalidRequestException.class)
1:c1eb74c:     public void differentKeyColumnFamilies() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", DifferentKeyTrigger.class.getName()));
1:a991b64:         TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void noTriggerMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", NoOpTrigger.class.getName()));
1:a991b64:         Mutation rm = new Mutation(makeCf(metadata, "k1", "v1", null));
1:c1eb74c:         assertNull(TriggerExecutor.instance.execute(Collections.singletonList(rm)));
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void sameKeySameCfRowMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfTrigger.class.getName()));
1:a991b64:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:a991b64:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:a991b64:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:a991b64:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:c1eb74c: 
1:c1eb74c:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:c1eb74c:         assertEquals(2, tmutations.size());
1:c1eb74c:         Collections.sort(tmutations, new RmComparator());
1:c1eb74c: 
1:a991b64:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         Row row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void sameKeySameCfPartialRowMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfPartialTrigger.class.getName()));
1:a991b64:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:a991b64:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:a991b64:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:a991b64:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:c1eb74c: 
1:c1eb74c:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:c1eb74c:         assertEquals(2, tmutations.size());
1:c1eb74c:         Collections.sort(tmutations, new RmComparator());
1:c1eb74c: 
1:a991b64:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         Row row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void sameKeyDifferentCfRowMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentCfTrigger.class.getName()));
1:a991b64:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:a991b64:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:a991b64:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:a991b64:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:c1eb74c: 
1:c1eb74c:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:c1eb74c:         assertEquals(2, tmutations.size());
1:c1eb74c:         Collections.sort(tmutations, new RmComparator());
1:c1eb74c: 
1:a991b64:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:a991b64:         assertEquals(2, mutatedCFs.size());
1:a991b64:         for (PartitionUpdate update : mutatedCFs)
1:a991b64:         {
1:a991b64:             if (update.metadata().cfName.equals("cf1"))
1:a991b64:             {
1:a991b64:                 Row row = update.iterator().next();
1:a991b64:                 assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 Row row = update.iterator().next();
1:a991b64:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:a991b64:                 assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:a991b64:             }
1:a991b64:         }
1:a991b64: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
2:c1eb74c:         assertEquals(2, mutatedCFs.size());
1:c1eb74c: 
1:a991b64:         for (PartitionUpdate update : mutatedCFs)
1:a991b64:         {
1:a991b64:             if (update.metadata().cfName.equals("cf1"))
1:a991b64:             {
1:a991b64:                 Row row = update.iterator().next();
1:a991b64:                 assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:a991b64:             }
1:a991b64:             else
1:a991b64:             {
1:a991b64:                 Row row = update.iterator().next();
1:a991b64:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:a991b64:                 assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:a991b64:             }
1:a991b64:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void sameKeyDifferentKsRowMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentKsTrigger.class.getName()));
1:a991b64:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:a991b64:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:a991b64:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:a991b64:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:c1eb74c: 
1:c1eb74c:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:c1eb74c:         assertEquals(4, tmutations.size());
1:c1eb74c:         Collections.sort(tmutations, new RmComparator());
1:c1eb74c: 
1:a991b64:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         Row row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(2).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(3).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     @Test
1:c1eb74c:     public void differentKeyRowMutations() throws ConfigurationException, InvalidRequestException
1:c1eb74c:     {
1:a991b64: 
1:16044a6:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", DifferentKeyTrigger.class.getName()));
1:a991b64:         PartitionUpdate cf1 = makeCf(metadata, "k1", "v1", null);
1:a991b64:         Mutation rm = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:c1eb74c: 
1:c1eb74c:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm)));
1:c1eb74c:         assertEquals(2, tmutations.size());
1:c1eb74c:         Collections.sort(tmutations, new RmComparator());
1:c1eb74c: 
1:a991b64:         assertEquals(bytes("k1"), tmutations.get(0).key().getKey());
1:a991b64:         assertEquals(bytes("otherKey"), tmutations.get(1).key().getKey());
1:c1eb74c: 
1:a991b64:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         Row row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:c1eb74c: 
1:a991b64:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:c1eb74c:         assertEquals(1, mutatedCFs.size());
1:a991b64:         row = mutatedCFs.get(0).iterator().next();
1:a991b64:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:a991b64:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:c1eb74c:     }
1:c1eb74c: 
1:16044a6:     private static CFMetaData makeCfMetaData(String ks, String cf, TriggerMetadata trigger)
1:c1eb74c:     {
1:a991b64:         CFMetaData metadata = CFMetaData.Builder.create(ks, cf)
1:a991b64:                 .addPartitionKey("pkey", UTF8Type.instance)
1:a991b64:                 .addRegularColumn("c1", UTF8Type.instance)
1:a991b64:                 .addRegularColumn("c2", UTF8Type.instance)
1:a991b64:                 .build();
1:c1eb74c: 
1:c1eb74c:         try
1:c1eb74c:         {
1:c1eb74c:             if (trigger != null)
1:16044a6:                 metadata.triggers(metadata.getTriggers().with(trigger));
1:c1eb74c:         }
1:591a277:         catch (InvalidRequestException e)
1:c1eb74c:         {
1:c1eb74c:             throw new AssertionError(e);
1:c1eb74c:         }
1:c1eb74c: 
1:a991b64:         return metadata;
1:c1eb74c:     }
1:a991b64: 
1:a991b64:     private static PartitionUpdate makeCf(CFMetaData metadata, String key, String columnValue1, String columnValue2)
1:a991b64:     {
1:aa57626:         Row.Builder builder = BTreeRow.unsortedBuilder(FBUtilities.nowInSeconds());
1:2457599:         builder.newRow(Clustering.EMPTY);
1:2457599:         long ts = FBUtilities.timestampMicros();
1:c1eb74c:         if (columnValue1 != null)
1:e017f94:             builder.addCell(BufferCell.live(metadata.getColumnDefinition(bytes("c1")), ts, bytes(columnValue1)));
1:c1eb74c:         if (columnValue2 != null)
1:e017f94:             builder.addCell(BufferCell.live(metadata.getColumnDefinition(bytes("c2")), ts, bytes(columnValue2)));
1:c1eb74c: 
1:2457599:         return PartitionUpdate.singleRowUpdate(metadata, Util.dk(key), builder.build());
1:a991b64:     }
1:c1eb74c: 
1:c1eb74c:     public static class NoOpTrigger implements ITrigger
1:a991b64:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:c1eb74c:             return null;
1:a991b64:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     public static class SameKeySameCfTrigger implements ITrigger
1:c1eb74c:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:a991b64:             RowUpdateBuilder builder = new RowUpdateBuilder(partition.metadata(), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:a991b64:             builder.add("c2", bytes("trigger"));
1:a991b64:             return Collections.singletonList(builder.build());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     public static class SameKeySameCfPartialTrigger implements ITrigger
1:c1eb74c:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:a991b64:             if (!partition.partitionKey().getKey().equals(bytes("k2")))
1:c1eb74c:                 return null;
1:c1eb74c: 
1:a991b64:             RowUpdateBuilder builder = new RowUpdateBuilder(partition.metadata(), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:a991b64:             builder.add("c2", bytes("trigger"));
1:a991b64:             return Collections.singletonList(builder.build());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     public static class SameKeyDifferentCfTrigger implements ITrigger
1:c1eb74c:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:a991b64:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData(partition.metadata().ksName, "otherCf", null), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:a991b64:             builder.add("c2", bytes("trigger"));
1:a991b64:             return Collections.singletonList(builder.build());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     public static class SameKeyDifferentKsTrigger implements ITrigger
1:c1eb74c:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:a991b64:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData("otherKs", "otherCf", null), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:a991b64:             builder.add("c2", bytes("trigger"));
1:a991b64:             return Collections.singletonList(builder.build());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     public static class DifferentKeyTrigger implements ITrigger
1:c1eb74c:     {
1:a991b64:         public Collection<Mutation> augment(Partition partition)
1:c1eb74c:         {
1:a991b64:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData("otherKs", "otherCf", null), FBUtilities.timestampMicros(), "otherKey");
1:a991b64:             builder.add("c2", bytes("trigger"));
1:a991b64:             return Collections.singletonList(builder.build());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: 
1:c1eb74c:     private static class RmComparator implements Comparator<IMutation>
1:c1eb74c:     {
1:c1eb74c:         public int compare(IMutation m1, IMutation m2)
1:c1eb74c:         {
1:c1eb74c:             int cmp = m1.getKeyspaceName().compareTo(m2.getKeyspaceName());
1:c1eb74c:             return cmp != 0 ? cmp : m1.key().compareTo(m2.key());
1:c1eb74c:         }
1:c1eb74c:     }
1:c1eb74c: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:fdfc2d8
/////////////////////////////////////////////////////////////////////////
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     @BeforeClass
1:     public static void setupDD()
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:e017f94
/////////////////////////////////////////////////////////////////////////
1:         try (RowIterator rowIterator = UnfilteredRowIterators.filter(mutated.unfilteredIterator(),
1:                                                                      FBUtilities.nowInSeconds()))
1:         {
1:             Iterator<Cell> cells = rowIterator.next().cells().iterator();
1:             assertEquals(bytes("trigger"), cells.next().value());
1:             assertTrue(!rowIterator.hasNext());
1:         }
/////////////////////////////////////////////////////////////////////////
1:             builder.addCell(BufferCell.live(metadata.getColumnDefinition(bytes("c1")), ts, bytes(columnValue1)));
1:             builder.addCell(BufferCell.live(metadata.getColumnDefinition(bytes("c2")), ts, bytes(columnValue2)));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aa57626
/////////////////////////////////////////////////////////////////////////
1:         Row.Builder builder = BTreeRow.unsortedBuilder(FBUtilities.nowInSeconds());
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
0:         Row.Builder builder = BTreeRow.unsortedBuilder(metadata.partitionColumns().regulars, FBUtilities.nowInSeconds());
commit:639d4b2
/////////////////////////////////////////////////////////////////////////
0:         Row.Builder builder = BTreeBackedRow.unsortedBuilder(metadata.partitionColumns().regulars, FBUtilities.nowInSeconds());
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2457599
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.*;
/////////////////////////////////////////////////////////////////////////
0:         Iterator<Cell> cells = rowIterator.next().cells().iterator();
/////////////////////////////////////////////////////////////////////////
0:         Row.Builder builder = ArrayBackedRow.unsortedBuilder(metadata.partitionColumns().regulars, FBUtilities.nowInSeconds());
1:         builder.newRow(Clustering.EMPTY);
1:         long ts = FBUtilities.timestampMicros();
0:             builder.addCell(BufferCell.live(metadata, metadata.getColumnDefinition(bytes("c1")), ts, bytes(columnValue1)));
0:             builder.addCell(BufferCell.live(metadata, metadata.getColumnDefinition(bytes("c2")), ts, bytes(columnValue2)));
1:         return PartitionUpdate.singleRowUpdate(metadata, Util.dk(key), builder.build());
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.cassandra.Util;
0: import org.apache.cassandra.db.rows.UnfilteredRowIterators;
0: import org.apache.cassandra.db.rows.Cell;
0: import org.apache.cassandra.db.rows.Row;
0: import org.apache.cassandra.db.rows.RowIterator;
1: import org.apache.cassandra.db.partitions.Partition;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.utils.FBUtilities;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:         PartitionUpdate mutated = TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1: 
0:         RowIterator rowIterator = UnfilteredRowIterators.filter(mutated.unfilteredIterator(), FBUtilities.nowInSeconds());
1: 
0:         Iterator<Cell> cells = rowIterator.next().iterator();
0:         assertEquals(bytes("trigger"), cells.next().value());
1: 
0:         assertTrue(!rowIterator.hasNext());
1:         TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1:         TriggerExecutor.instance.execute(makeCf(metadata, "k1", "v1", null));
1:         Mutation rm = new Mutation(makeCf(metadata, "k1", "v1", null));
/////////////////////////////////////////////////////////////////////////
1:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:         Row row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:         Row row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:         assertEquals(2, mutatedCFs.size());
1:         for (PartitionUpdate update : mutatedCFs)
1:         {
1:             if (update.metadata().cfName.equals("cf1"))
1:             {
1:                 Row row = update.iterator().next();
1:                 assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:             }
1:             else
1:             {
1:                 Row row = update.iterator().next();
1:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:                 assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:             }
1:         }
1: 
1:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:         for (PartitionUpdate update : mutatedCFs)
1:         {
1:             if (update.metadata().cfName.equals("cf1"))
1:             {
1:                 Row row = update.iterator().next();
1:                 assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:             }
1:             else
1:             {
1:                 Row row = update.iterator().next();
1:                 assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:                 assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:             }
1:         }
1:         PartitionUpdate cf1 = makeCf(metadata, "k1", "k1v1", null);
1:         PartitionUpdate cf2 = makeCf(metadata, "k2", "k2v1", null);
1:         Mutation rm1 = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:         Mutation rm2 = new Mutation("ks1", cf2.partitionKey()).add(cf2);
1:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:         Row row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k1v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("k2v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:         mutatedCFs = new ArrayList<>(tmutations.get(2).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:         mutatedCFs = new ArrayList<>(tmutations.get(3).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1: 
1:         PartitionUpdate cf1 = makeCf(metadata, "k1", "v1", null);
1:         Mutation rm = new Mutation("ks1", cf1.partitionKey()).add(cf1);
1:         assertEquals(bytes("k1"), tmutations.get(0).key().getKey());
1:         assertEquals(bytes("otherKey"), tmutations.get(1).key().getKey());
1:         List<PartitionUpdate> mutatedCFs = new ArrayList<>(tmutations.get(0).getPartitionUpdates());
1:         Row row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("v1"), row.getCell(metadata.getColumnDefinition(bytes("c1"))).value());
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c2"))));
1:         mutatedCFs = new ArrayList<>(tmutations.get(1).getPartitionUpdates());
1:         row = mutatedCFs.get(0).iterator().next();
1:         assertEquals(bytes("trigger"), row.getCell(metadata.getColumnDefinition(bytes("c2"))).value());
1:         assertNull(row.getCell(metadata.getColumnDefinition(bytes("c1"))));
1:         CFMetaData metadata = CFMetaData.Builder.create(ks, cf)
1:                 .addPartitionKey("pkey", UTF8Type.instance)
1:                 .addRegularColumn("c1", UTF8Type.instance)
1:                 .addRegularColumn("c2", UTF8Type.instance)
1:                 .build();
/////////////////////////////////////////////////////////////////////////
1:         return metadata;
1:     private static PartitionUpdate makeCf(CFMetaData metadata, String key, String columnValue1, String columnValue2)
0:         PartitionUpdate update = new PartitionUpdate(metadata, Util.dk(key), metadata.partitionColumns(), 1);
1: 
0:         LivenessInfo info = SimpleLivenessInfo.forUpdate(FBUtilities.timestampMicros(), LivenessInfo.NO_TTL, FBUtilities.nowInSeconds(), metadata);
1:         {
0:             update.writer().writeCell(metadata.getColumnDefinition(bytes("c1")), false, bytes(columnValue1), info, null);
0:             update.writer().endOfRow();
1:         }
1:         {
0:             update.writer().writeCell(metadata.getColumnDefinition(bytes("c2")), false, bytes(columnValue1), info, null);
0:             update.writer().endOfRow();
1:         }
0:         return update;
1:         public Collection<Mutation> augment(Partition partition)
/////////////////////////////////////////////////////////////////////////
1:         public Collection<Mutation> augment(Partition partition)
1:             RowUpdateBuilder builder = new RowUpdateBuilder(partition.metadata(), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:             builder.add("c2", bytes("trigger"));
1:             return Collections.singletonList(builder.build());
1:         public Collection<Mutation> augment(Partition partition)
1:             if (!partition.partitionKey().getKey().equals(bytes("k2")))
1:             RowUpdateBuilder builder = new RowUpdateBuilder(partition.metadata(), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:             builder.add("c2", bytes("trigger"));
1:             return Collections.singletonList(builder.build());
1:         public Collection<Mutation> augment(Partition partition)
1:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData(partition.metadata().ksName, "otherCf", null), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:             builder.add("c2", bytes("trigger"));
1:             return Collections.singletonList(builder.build());
1:         public Collection<Mutation> augment(Partition partition)
1:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData("otherKs", "otherCf", null), FBUtilities.timestampMicros(), partition.partitionKey().getKey());
1:             builder.add("c2", bytes("trigger"));
1:             return Collections.singletonList(builder.build());
1:         public Collection<Mutation> augment(Partition partition)
1:             RowUpdateBuilder builder = new RowUpdateBuilder(makeCfMetaData("otherKs", "otherCf", null), FBUtilities.timestampMicros(), "otherKey");
1:             builder.add("c2", bytes("trigger"));
1:             return Collections.singletonList(builder.build());
/////////////////////////////////////////////////////////////////////////
0:     private static class CfComparator implements Comparator<Partition>
0:         public int compare(Partition cf1, Partition cf2)
commit:591a277
/////////////////////////////////////////////////////////////////////////
1:         catch (InvalidRequestException e)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:16044a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.TriggerMetadata;
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentCfTrigger.class.getName()));
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", DifferentKeyTrigger.class.getName()));
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", NoOpTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeySameCfPartialTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentCfTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", SameKeyDifferentKsTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerMetadata.create("test", DifferentKeyTrigger.class.getName()));
/////////////////////////////////////////////////////////////////////////
1:     private static CFMetaData makeCfMetaData(String ks, String cf, TriggerMetadata trigger)
/////////////////////////////////////////////////////////////////////////
1:                 metadata.triggers(metadata.getTriggers().with(trigger));
commit:1f52122
commit:c1eb74c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.triggers;
1: 
0: import java.nio.ByteBuffer;
1: import java.util.*;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.TriggerDefinition;
1: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.marshal.CompositeType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: 
0: import static org.junit.Assert.*;
1: 
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: public class TriggerExecutorTest
1: {
1:     @Test
1:     public void sameKeySameCfColumnFamilies() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeySameCfTrigger.class.getName()));
0:         ColumnFamily mutated = TriggerExecutor.instance.execute(bytes("k1"), makeCf(metadata, "v1", null));
0:         assertEquals(bytes("v1"), mutated.getColumn(getColumnName(metadata, "c1")).value());
0:         assertEquals(bytes("trigger"), mutated.getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
1:     @Test(expected = InvalidRequestException.class)
1:     public void sameKeyDifferentCfColumnFamilies() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeyDifferentCfTrigger.class.getName()));
0:         TriggerExecutor.instance.execute(bytes("k1"), makeCf(metadata, "v1", null));
1:     }
1: 
1:     @Test(expected = InvalidRequestException.class)
1:     public void differentKeyColumnFamilies() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", DifferentKeyTrigger.class.getName()));
0:         TriggerExecutor.instance.execute(bytes("k1"), makeCf(metadata, "v1", null));
1:     }
1: 
1:     @Test
1:     public void noTriggerMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", NoOpTrigger.class.getName()));
0:         RowMutation rm = new RowMutation(bytes("k1"), makeCf(metadata, "v1", null));
1:         assertNull(TriggerExecutor.instance.execute(Collections.singletonList(rm)));
1:     }
1: 
1:     @Test
1:     public void sameKeySameCfRowMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeySameCfTrigger.class.getName()));
0:         ColumnFamily cf1 = makeCf(metadata, "k1v1", null);
0:         ColumnFamily cf2 = makeCf(metadata, "k2v1", null);
0:         RowMutation rm1 = new RowMutation(bytes("k1"), cf1);
0:         RowMutation rm2 = new RowMutation(bytes("k2"), cf2);
1: 
1:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:         assertEquals(2, tmutations.size());
1:         Collections.sort(tmutations, new RmComparator());
1: 
0:         List<ColumnFamily> mutatedCFs = new ArrayList<>(tmutations.get(0).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k1v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(1).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k2v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
1:     @Test
1:     public void sameKeySameCfPartialRowMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeySameCfPartialTrigger.class.getName()));
0:         ColumnFamily cf1 = makeCf(metadata, "k1v1", null);
0:         ColumnFamily cf2 = makeCf(metadata, "k2v1", null);
0:         RowMutation rm1 = new RowMutation(bytes("k1"), cf1);
0:         RowMutation rm2 = new RowMutation(bytes("k2"), cf2);
1: 
1:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:         assertEquals(2, tmutations.size());
1:         Collections.sort(tmutations, new RmComparator());
1: 
0:         List<ColumnFamily> mutatedCFs = new ArrayList<>(tmutations.get(0).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k1v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(1).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k2v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
1:     @Test
1:     public void sameKeyDifferentCfRowMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeyDifferentCfTrigger.class.getName()));
0:         ColumnFamily cf1 = makeCf(metadata, "k1v1", null);
0:         ColumnFamily cf2 = makeCf(metadata, "k2v1", null);
0:         RowMutation rm1 = new RowMutation(bytes("k1"), cf1);
0:         RowMutation rm2 = new RowMutation(bytes("k2"), cf2);
1: 
1:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:         assertEquals(2, tmutations.size());
1:         Collections.sort(tmutations, new RmComparator());
1: 
0:         List<ColumnFamily> mutatedCFs = new ArrayList<>(tmutations.get(0).getColumnFamilies());
1:         assertEquals(2, mutatedCFs.size());
1: 
0:         Collections.sort(mutatedCFs, new CfComparator());
0:         assertEquals(bytes("k1v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
0:         assertNull(mutatedCFs.get(1).getColumn(getColumnName(metadata, "c1")));
0:         assertEquals(bytes("trigger"), mutatedCFs.get(1).getColumn(getColumnName(metadata, "c2")).value());
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(1).getColumnFamilies());
1:         assertEquals(2, mutatedCFs.size());
1: 
0:         Collections.sort(mutatedCFs, new CfComparator());
0:         assertEquals(bytes("k2v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
0:         assertNull(mutatedCFs.get(1).getColumn(getColumnName(metadata, "c1")));
0:         assertEquals(bytes("trigger"), mutatedCFs.get(1).getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
1:     @Test
1:     public void sameKeyDifferentKsRowMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", SameKeyDifferentKsTrigger.class.getName()));
0:         ColumnFamily cf1 = makeCf(metadata, "k1v1", null);
0:         ColumnFamily cf2 = makeCf(metadata, "k2v1", null);
0:         RowMutation rm1 = new RowMutation(bytes("k1"), cf1);
0:         RowMutation rm2 = new RowMutation(bytes("k2"), cf2);
1: 
1:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm1, rm2)));
1:         assertEquals(4, tmutations.size());
1:         Collections.sort(tmutations, new RmComparator());
1: 
0:         List<ColumnFamily> mutatedCFs = new ArrayList<>(tmutations.get(0).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k1v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(1).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("k2v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(2).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")));
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(3).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")));
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
1:     @Test
1:     public void differentKeyRowMutations() throws ConfigurationException, InvalidRequestException
1:     {
0:         CFMetaData metadata = makeCfMetaData("ks1", "cf1", TriggerDefinition.create("test", DifferentKeyTrigger.class.getName()));
0:         ColumnFamily cf = makeCf(metadata, "v1", null);
0:         RowMutation rm = new RowMutation(UTF8Type.instance.fromString("k1"), cf);
1: 
1:         List<? extends IMutation> tmutations = new ArrayList<>(TriggerExecutor.instance.execute(Arrays.asList(rm)));
1:         assertEquals(2, tmutations.size());
1:         Collections.sort(tmutations, new RmComparator());
1: 
0:         assertEquals(bytes("k1"), tmutations.get(0).key());
0:         assertEquals(bytes("otherKey"), tmutations.get(1).key());
1: 
0:         List<ColumnFamily> mutatedCFs = new ArrayList<>(tmutations.get(0).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertEquals(bytes("v1"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")).value());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")));
1: 
0:         mutatedCFs = new ArrayList<>(tmutations.get(1).getColumnFamilies());
1:         assertEquals(1, mutatedCFs.size());
0:         assertNull(mutatedCFs.get(0).getColumn(getColumnName(metadata, "c1")));
0:         assertEquals(bytes("trigger"), mutatedCFs.get(0).getColumn(getColumnName(metadata, "c2")).value());
1:     }
1: 
0:     private static CFMetaData makeCfMetaData(String ks, String cf, TriggerDefinition trigger)
1:     {
1: 
0:         CFMetaData metadata = new CFMetaData(ks, cf, ColumnFamilyType.Standard, CompositeType.getInstance(UTF8Type.instance));
1: 
0:         metadata.keyValidator(UTF8Type.instance);
0:         metadata.addOrReplaceColumnDefinition(ColumnDefinition.partitionKeyDef(UTF8Type.instance.fromString("pkey"),
0:                                                                                UTF8Type.instance,
0:                                                                                null));
0:         metadata.addOrReplaceColumnDefinition(ColumnDefinition.regularDef(UTF8Type.instance.fromString("c1"),
0:                                                                           UTF8Type.instance,
0:                                                                           0));
0:         metadata.addOrReplaceColumnDefinition(ColumnDefinition.regularDef(UTF8Type.instance.fromString("c2"),
0:                                                                           UTF8Type.instance,
0:                                                                           0));
1:         try
1:         {
1:             if (trigger != null)
0:                 metadata.addTriggerDefinition(trigger);
1:         }
0:         catch (ConfigurationException e)
1:         {
1:             throw new AssertionError(e);
1:         }
1: 
0:         return metadata.rebuild();
1:     }
1: 
0:     private static ColumnFamily makeCf(CFMetaData metadata, String columnValue1, String columnValue2)
1:     {
0:         ColumnFamily cf = ArrayBackedSortedColumns.factory.create(metadata);
1: 
1:         if (columnValue1 != null)
0:             cf.addColumn(new Column(getColumnName(metadata, "c1"), bytes(columnValue1)));
1: 
1:         if (columnValue2 != null)
0:             cf.addColumn(new Column(getColumnName(metadata, "c2"), bytes(columnValue2)));
1: 
0:         return cf;
1:     }
1: 
0:     private static ByteBuffer getColumnName(CFMetaData metadata, String stringName)
1:     {
0:         return ((CompositeType) metadata.comparator).builder().add(bytes(stringName)).build();
1:     }
1: 
1:     public static class NoOpTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
1:             return null;
1:         }
1:     }
1: 
1:     public static class SameKeySameCfTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
0:             ColumnFamily cf = ArrayBackedSortedColumns.factory.create(update.metadata());
0:             cf.addColumn(new Column(getColumnName(update.metadata(), "c2"), bytes("trigger")));
0:             return Collections.singletonList(new RowMutation(update.metadata().ksName, key, cf));
1:         }
1:     }
1: 
1:     public static class SameKeySameCfPartialTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
0:             if (!key.equals(bytes("k2")))
1:                 return null;
1: 
0:             ColumnFamily cf = ArrayBackedSortedColumns.factory.create(update.metadata());
0:             cf.addColumn(new Column(getColumnName(update.metadata(), "c2"), bytes("trigger")));
0:             return Collections.singletonList(new RowMutation(update.metadata().ksName, key, cf));
1:         }
1:     }
1: 
1:     public static class SameKeyDifferentCfTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
0:             ColumnFamily cf = ArrayBackedSortedColumns.factory.create(makeCfMetaData(update.metadata().ksName, "otherCf", null));
0:             cf.addColumn(new Column(getColumnName(update.metadata(), "c2"), bytes("trigger")));
0:             return Collections.singletonList(new RowMutation(cf.metadata().ksName, key, cf));
1:         }
1:     }
1: 
1:     public static class SameKeyDifferentKsTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
0:             ColumnFamily cf = ArrayBackedSortedColumns.factory.create(makeCfMetaData("otherKs", "otherCf", null));
0:             cf.addColumn(new Column(getColumnName(update.metadata(), "c2"), bytes("trigger")));
0:             return Collections.singletonList(new RowMutation(cf.metadata().ksName, key, cf));
1:         }
1:     }
1: 
1:     public static class DifferentKeyTrigger implements ITrigger
1:     {
0:         public Collection<RowMutation> augment(ByteBuffer key, ColumnFamily update)
1:         {
0:             ColumnFamily cf = ArrayBackedSortedColumns.factory.create(update.metadata());
0:             cf.addColumn(new Column(getColumnName(update.metadata(), "c2"), bytes("trigger")));
0:             return Collections.singletonList(new RowMutation(cf.metadata().ksName, bytes("otherKey"), cf));
1:         }
1:     }
1: 
1:     private static class RmComparator implements Comparator<IMutation>
1:     {
1:         public int compare(IMutation m1, IMutation m2)
1:         {
1:             int cmp = m1.getKeyspaceName().compareTo(m2.getKeyspaceName());
1:             return cmp != 0 ? cmp : m1.key().compareTo(m2.key());
1:         }
1:     }
1: 
0:     private static class CfComparator implements Comparator<ColumnFamily>
1:     {
0:         public int compare(ColumnFamily cf1, ColumnFamily cf2)
1:         {
0:             return cf1.metadata().cfName.compareTo(cf2.metadata().cfName);
1:         }
1:     }
1: }
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(metadata, "c1"), bytes(columnValue1)));
0:             cf.addColumn(new BufferCell(getColumnName(metadata, "c2"), bytes(columnValue2)));
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(update.metadata(), "c2"), bytes("trigger")));
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(update.metadata(), "c2"), bytes("trigger")));
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(update.metadata(), "c2"), bytes("trigger")));
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(update.metadata(), "c2"), bytes("trigger")));
/////////////////////////////////////////////////////////////////////////
0:             cf.addColumn(new BufferCell(getColumnName(update.metadata(), "c2"), bytes("trigger")));
============================================================================