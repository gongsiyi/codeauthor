1:f27ab29: /*
1:f27ab29:  * Licensed to the Apache Software Foundation (ASF) under one
1:f27ab29:  * or more contributor license agreements.  See the NOTICE file
1:f27ab29:  * distributed with this work for additional information
1:f27ab29:  * regarding copyright ownership.  The ASF licenses this file
1:f27ab29:  * to you under the Apache License, Version 2.0 (the
1:f27ab29:  * "License"); you may not use this file except in compliance
1:f27ab29:  * with the License.  You may obtain a copy of the License at
1:f27ab29:  *
1:f27ab29:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f27ab29:  *
1:f27ab29:  * Unless required by applicable law or agreed to in writing, software
1:f27ab29:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f27ab29:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f27ab29:  * See the License for the specific language governing permissions and
1:f27ab29:  * limitations under the License.
1:f27ab29:  */
3:f27ab29: 
1:f27ab29: package org.apache.cassandra.stress.operations;
1:f27ab29: 
1:f27ab29: import java.util.ArrayList;
1:f27ab29: import java.util.List;
1:f27ab29: 
1:f27ab29: import org.apache.cassandra.stress.Operation;
1:f27ab29: import org.apache.cassandra.stress.WorkManager;
1:f27ab29: import org.apache.cassandra.stress.generate.Distribution;
1:f27ab29: import org.apache.cassandra.stress.generate.PartitionGenerator;
1:f27ab29: import org.apache.cassandra.stress.generate.PartitionIterator;
1:f27ab29: import org.apache.cassandra.stress.generate.RatioDistribution;
1:f27ab29: import org.apache.cassandra.stress.generate.Seed;
1:f27ab29: import org.apache.cassandra.stress.generate.SeedManager;
1:e73633c: import org.apache.cassandra.stress.report.Timer;
1:f27ab29: import org.apache.cassandra.stress.settings.OptionRatioDistribution;
1:f27ab29: import org.apache.cassandra.stress.settings.StressSettings;
1:f27ab29: 
1:f27ab29: public abstract class PartitionOperation extends Operation
1:f27ab29: {
1:f27ab29:     protected final DataSpec spec;
1:f27ab29:     private final static RatioDistribution defaultRowPopulationRatio = OptionRatioDistribution.BUILDER.apply("fixed(1)/1").get();
1:f27ab29: 
1:f27ab29:     private final List<PartitionIterator> partitionCache = new ArrayList<>();
1:f27ab29:     protected List<PartitionIterator> partitions;
1:f27ab29: 
1:f27ab29:     public static final class DataSpec
1:f27ab29:     {
1:f27ab29:         public final PartitionGenerator partitionGenerator;
1:f27ab29:         final SeedManager seedManager;
1:f27ab29:         final Distribution partitionCount;
1:f27ab29:         final RatioDistribution useRatio;
1:f27ab29:         final RatioDistribution rowPopulationRatio;
1:f27ab29:         final Integer targetCount;
1:f27ab29: 
1:f27ab29:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution rowPopulationRatio, Integer targetCount)
1:f27ab29:         {
1:f27ab29:             this(partitionGenerator, seedManager, partitionCount, null, rowPopulationRatio, targetCount);
1:f27ab29:         }
1:f27ab29:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio)
1:f27ab29:         {
1:f27ab29:             this(partitionGenerator, seedManager, partitionCount, useRatio, rowPopulationRatio, null);
1:f27ab29:         }
1:f27ab29:         private DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio, Integer targetCount)
1:f27ab29:         {
1:f27ab29:             this.partitionGenerator = partitionGenerator;
1:f27ab29:             this.seedManager = seedManager;
1:f27ab29:             this.partitionCount = partitionCount;
1:f27ab29:             this.useRatio = useRatio;
1:f27ab29:             this.rowPopulationRatio = rowPopulationRatio == null ? defaultRowPopulationRatio : rowPopulationRatio;
1:f27ab29:             this.targetCount = targetCount;
1:f27ab29:         }
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public PartitionOperation(Timer timer, StressSettings settings, DataSpec spec)
1:f27ab29:     {
1:f27ab29:         super(timer, settings);
1:f27ab29:         this.spec = spec;
1:f27ab29:     }
1:f27ab29: 
1:89f275c:     public int ready(WorkManager permits)
1:f27ab29:     {
1:f27ab29:         int partitionCount = (int) spec.partitionCount.next();
1:f27ab29:         if (partitionCount <= 0)
1:89f275c:             return 0;
1:f27ab29:         partitionCount = permits.takePermits(partitionCount);
1:f27ab29:         if (partitionCount <= 0)
1:89f275c:             return 0;
1:f27ab29: 
1:f27ab29:         int i = 0;
1:f27ab29:         boolean success = true;
1:f27ab29:         for (; i < partitionCount && success ; i++)
1:f27ab29:         {
1:f27ab29:             if (i >= partitionCache.size())
1:f27ab29:                 partitionCache.add(PartitionIterator.get(spec.partitionGenerator, spec.seedManager));
1:f27ab29: 
1:f27ab29:             success = false;
1:f27ab29:             while (!success)
1:f27ab29:             {
1:f27ab29:                 Seed seed = spec.seedManager.next(this);
1:f27ab29:                 if (seed == null)
1:f27ab29:                     break;
1:f27ab29: 
1:f27ab29:                 success = reset(seed, partitionCache.get(i));
1:f27ab29:             }
1:f27ab29:         }
1:f27ab29:         partitionCount = i;
1:f27ab29: 
1:f27ab29:         partitions = partitionCache.subList(0, partitionCount);
1:89f275c:         return partitions.size();
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     protected boolean reset(Seed seed, PartitionIterator iterator)
1:f27ab29:     {
1:f27ab29:         if (spec.useRatio == null)
1:f27ab29:             return iterator.reset(seed, spec.targetCount, spec.rowPopulationRatio.next(), isWrite());
1:f27ab29:         else
1:f27ab29:             return iterator.reset(seed, spec.useRatio.next(), spec.rowPopulationRatio.next(), isWrite());
1:f27ab29:     }
1:f27ab29: 
1:f27ab29:     public String key()
1:f27ab29:     {
1:f27ab29:         List<String> keys = new ArrayList<>();
1:f27ab29:         for (PartitionIterator partition : partitions)
1:f27ab29:             keys.add(partition.getKeyAsString());
1:f27ab29:         return keys.toString();
1:f27ab29:     }
1:f27ab29: }
============================================================================
author:nitsanw
-------------------------------------------------------------------------------
commit:e73633c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.stress.report.Timer;
commit:89f275c
/////////////////////////////////////////////////////////////////////////
1:     public int ready(WorkManager permits)
1:             return 0;
1:             return 0;
/////////////////////////////////////////////////////////////////////////
1:         return partitions.size();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:f27ab29
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress.operations;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: import com.google.common.util.concurrent.RateLimiter;
1: 
1: import org.apache.cassandra.stress.Operation;
1: import org.apache.cassandra.stress.WorkManager;
1: import org.apache.cassandra.stress.generate.Distribution;
1: import org.apache.cassandra.stress.generate.PartitionGenerator;
1: import org.apache.cassandra.stress.generate.PartitionIterator;
1: import org.apache.cassandra.stress.generate.RatioDistribution;
1: import org.apache.cassandra.stress.generate.Seed;
1: import org.apache.cassandra.stress.generate.SeedManager;
1: import org.apache.cassandra.stress.settings.OptionRatioDistribution;
1: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.util.Timer;
1: 
1: public abstract class PartitionOperation extends Operation
1: {
1:     protected final DataSpec spec;
1:     private final static RatioDistribution defaultRowPopulationRatio = OptionRatioDistribution.BUILDER.apply("fixed(1)/1").get();
1: 
1:     private final List<PartitionIterator> partitionCache = new ArrayList<>();
1:     protected List<PartitionIterator> partitions;
1: 
1:     public static final class DataSpec
1:     {
1:         public final PartitionGenerator partitionGenerator;
1:         final SeedManager seedManager;
1:         final Distribution partitionCount;
1:         final RatioDistribution useRatio;
1:         final RatioDistribution rowPopulationRatio;
1:         final Integer targetCount;
1: 
1:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution rowPopulationRatio, Integer targetCount)
1:         {
1:             this(partitionGenerator, seedManager, partitionCount, null, rowPopulationRatio, targetCount);
1:         }
1:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio)
1:         {
1:             this(partitionGenerator, seedManager, partitionCount, useRatio, rowPopulationRatio, null);
1:         }
1:         private DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio, Integer targetCount)
1:         {
1:             this.partitionGenerator = partitionGenerator;
1:             this.seedManager = seedManager;
1:             this.partitionCount = partitionCount;
1:             this.useRatio = useRatio;
1:             this.rowPopulationRatio = rowPopulationRatio == null ? defaultRowPopulationRatio : rowPopulationRatio;
1:             this.targetCount = targetCount;
1:         }
1:     }
1: 
1:     public PartitionOperation(Timer timer, StressSettings settings, DataSpec spec)
1:     {
1:         super(timer, settings);
1:         this.spec = spec;
1:     }
1: 
0:     public boolean ready(WorkManager permits, RateLimiter rateLimiter)
1:     {
1:         int partitionCount = (int) spec.partitionCount.next();
1:         if (partitionCount <= 0)
0:             return false;
1:         partitionCount = permits.takePermits(partitionCount);
1:         if (partitionCount <= 0)
0:             return false;
1: 
1:         int i = 0;
1:         boolean success = true;
1:         for (; i < partitionCount && success ; i++)
1:         {
1:             if (i >= partitionCache.size())
1:                 partitionCache.add(PartitionIterator.get(spec.partitionGenerator, spec.seedManager));
1: 
1:             success = false;
1:             while (!success)
1:             {
1:                 Seed seed = spec.seedManager.next(this);
1:                 if (seed == null)
1:                     break;
1: 
1:                 success = reset(seed, partitionCache.get(i));
1:             }
1:         }
1:         partitionCount = i;
1: 
0:         if (rateLimiter != null)
0:             rateLimiter.acquire(partitionCount);
1: 
1:         partitions = partitionCache.subList(0, partitionCount);
0:         return !partitions.isEmpty();
1:     }
1: 
1:     protected boolean reset(Seed seed, PartitionIterator iterator)
1:     {
1:         if (spec.useRatio == null)
1:             return iterator.reset(seed, spec.targetCount, spec.rowPopulationRatio.next(), isWrite());
1:         else
1:             return iterator.reset(seed, spec.useRatio.next(), spec.rowPopulationRatio.next(), isWrite());
1:     }
1: 
1:     public String key()
1:     {
1:         List<String> keys = new ArrayList<>();
1:         for (PartitionIterator partition : partitions)
1:             keys.add(partition.getKeyAsString());
1:         return keys.toString();
1:     }
1: }
commit:232e12b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.stress.operations;
0: 
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: import com.google.common.util.concurrent.RateLimiter;
0: 
0: import org.apache.cassandra.stress.Operation;
0: import org.apache.cassandra.stress.WorkManager;
0: import org.apache.cassandra.stress.generate.Distribution;
0: import org.apache.cassandra.stress.generate.PartitionGenerator;
0: import org.apache.cassandra.stress.generate.PartitionIterator;
0: import org.apache.cassandra.stress.generate.RatioDistribution;
0: import org.apache.cassandra.stress.generate.Seed;
0: import org.apache.cassandra.stress.generate.SeedManager;
0: import org.apache.cassandra.stress.settings.OptionRatioDistribution;
0: import org.apache.cassandra.stress.settings.StressSettings;
0: import org.apache.cassandra.stress.util.Timer;
0: 
0: public abstract class PartitionOperation extends Operation
0: {
0:     protected final DataSpec spec;
0:     private final static RatioDistribution defaultRowPopulationRatio = OptionRatioDistribution.BUILDER.apply("fixed(1)/1").get();
0: 
0:     private final List<PartitionIterator> partitionCache = new ArrayList<>();
0:     protected List<PartitionIterator> partitions;
0: 
0:     public static final class DataSpec
0:     {
0:         public final PartitionGenerator partitionGenerator;
0:         final SeedManager seedManager;
0:         final Distribution partitionCount;
0:         final RatioDistribution useRatio;
0:         final RatioDistribution rowPopulationRatio;
0:         final Integer targetCount;
0: 
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution rowPopulationRatio, Integer targetCount)
0:         {
0:             this(partitionGenerator, seedManager, partitionCount, null, rowPopulationRatio, targetCount);
0:         }
0:         public DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio)
0:         {
0:             this(partitionGenerator, seedManager, partitionCount, useRatio, rowPopulationRatio, null);
0:         }
0:         private DataSpec(PartitionGenerator partitionGenerator, SeedManager seedManager, Distribution partitionCount, RatioDistribution useRatio, RatioDistribution rowPopulationRatio, Integer targetCount)
0:         {
0:             this.partitionGenerator = partitionGenerator;
0:             this.seedManager = seedManager;
0:             this.partitionCount = partitionCount;
0:             this.useRatio = useRatio;
0:             this.rowPopulationRatio = rowPopulationRatio == null ? defaultRowPopulationRatio : rowPopulationRatio;
0:             this.targetCount = targetCount;
0:         }
0:     }
0: 
0:     public PartitionOperation(Timer timer, StressSettings settings, DataSpec spec)
0:     {
0:         super(timer, settings);
0:         this.spec = spec;
0:     }
0: 
0:     public boolean ready(WorkManager permits, RateLimiter rateLimiter)
0:     {
0:         int partitionCount = (int) spec.partitionCount.next();
0:         if (partitionCount <= 0)
0:             return false;
0:         partitionCount = permits.takePermits(partitionCount);
0:         if (partitionCount <= 0)
0:             return false;
0: 
0:         int i = 0;
0:         boolean success = true;
0:         for (; i < partitionCount && success ; i++)
0:         {
0:             if (i >= partitionCache.size())
0:                 partitionCache.add(PartitionIterator.get(spec.partitionGenerator, spec.seedManager));
0: 
0:             success = false;
0:             while (!success)
0:             {
0:                 Seed seed = spec.seedManager.next(this);
0:                 if (seed == null)
0:                     break;
0: 
0:                 success = reset(seed, partitionCache.get(i));
0:             }
0:         }
0:         partitionCount = i;
0: 
0:         if (rateLimiter != null)
0:             rateLimiter.acquire(partitionCount);
0: 
0:         partitions = partitionCache.subList(0, partitionCount);
0:         return !partitions.isEmpty();
0:     }
0: 
0:     protected boolean reset(Seed seed, PartitionIterator iterator)
0:     {
0:         if (spec.useRatio == null)
0:             return iterator.reset(seed, spec.targetCount, spec.rowPopulationRatio.next(), isWrite());
0:         else
0:             return iterator.reset(seed, spec.useRatio.next(), spec.rowPopulationRatio.next(), isWrite());
0:     }
0: 
0:     public String key()
0:     {
0:         List<String> keys = new ArrayList<>();
0:         for (PartitionIterator partition : partitions)
0:             keys.add(partition.getKeyAsString());
0:         return keys.toString();
0:     }
0: }
============================================================================