1:75508ec: /*
1:75508ec:  * Licensed to the Apache Software Foundation (ASF) under one
1:75508ec:  * or more contributor license agreements.  See the NOTICE file
1:75508ec:  * distributed with this work for additional information
1:75508ec:  * regarding copyright ownership.  The ASF licenses this file
1:75508ec:  * to you under the Apache License, Version 2.0 (the
1:75508ec:  * "License"); you may not use this file except in compliance
1:75508ec:  * with the License.  You may obtain a copy of the License at
1:75508ec:  *
1:75508ec:  *     http://www.apache.org/licenses/LICENSE-2.0
1:75508ec:  *
1:75508ec:  * Unless required by applicable law or agreed to in writing, software
1:75508ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:75508ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:75508ec:  * See the License for the specific language governing permissions and
1:75508ec:  * limitations under the License.
1:75508ec:  */
1:75508ec: package org.apache.cassandra.io.util;
16:03f72ac: 
1:75508ec: import java.io.DataOutput;
1:75508ec: import java.io.IOException;
1:75508ec: import java.nio.ByteBuffer;
1:16499ca: import java.nio.channels.WritableByteChannel;
1:03f72ac: 
1:16499ca: import com.google.common.base.Function;
1:03f72ac: 
1:753a943: import org.apache.cassandra.utils.vint.VIntCoding;
1:753a943: 
1:16499ca: /**
1:16499ca:  * Extension to DataOutput that provides for writing ByteBuffer and Memory, potentially with an efficient
1:16499ca:  * implementation that is zero copy or at least has reduced bounds checking overhead.
1:16499ca:  */
1:75508ec: public interface DataOutputPlus extends DataOutput
19:03f72ac: {
1:75508ec:     // write the buffer without modifying its position
1:75508ec:     void write(ByteBuffer buffer) throws IOException;
1:03f72ac: 
1:f3c0e11:     void write(Memory memory, long offset, long length) throws IOException;
1:03f72ac: 
1:16499ca:     /**
1:16499ca:      * Safe way to operate against the underlying channel. Impossible to stash a reference to the channel
1:16499ca:      * and forget to flush
1:16499ca:      */
1:16499ca:     <R> R applyToChannel(Function<WritableByteChannel, R> c) throws IOException;
1:03f72ac: 
1:1491a40:     default void writeVInt(long i) throws IOException
1:03f72ac:     {
1:1491a40:         VIntCoding.writeVInt(i, this);
19:03f72ac:     }
1:03f72ac: 
1:1491a40:     /**
1:649a106:      * This is more efficient for storing unsigned values, both in storage and CPU burden.
1:1491a40:      *
1:649a106:      * Note that it is still possible to store negative values, they just take up more space.
1:649a106:      * So this method doesn't forbid e.g. negative sentinel values in future, if they need to be snuck in.
1:649a106:      * A protocol version bump can then be introduced to improve efficiency.
1:1491a40:      */
1:1491a40:     default void writeUnsignedVInt(long i) throws IOException
1:03f72ac:     {
1:1491a40:         VIntCoding.writeUnsignedVInt(i, this);
1:03f72ac:     }
1:03f72ac: 
1:753a943:     /**
1:753a943:      * Returns the current position of the underlying target like a file-pointer
1:753a943:      * or the position withing a buffer. Not every implementation may support this
1:753a943:      * functionality. Whether or not this functionality is supported can be checked
1:753a943:      * via the {@link #hasPosition()}.
1:753a943:      *
1:753a943:      * @throws UnsupportedOperationException if the implementation does not support
1:753a943:      *                                       position
1:753a943:      */
1:753a943:     default long position()
1:51b1a1c:     {
1:51b1a1c:         throw new UnsupportedOperationException();
1:51b1a1c:     }
1:51b1a1c: 
1:753a943:     /**
1:753a943:      * If the implementation supports providing a position, this method returns
1:753a943:      * {@code true}, otherwise {@code false}.
1:753a943:      */
1:753a943:     default boolean hasPosition()
1:51b1a1c:     {
1:51b1a1c:         return false;
1:51b1a1c:     }
1:03f72ac: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:649a106
/////////////////////////////////////////////////////////////////////////
1:      * This is more efficient for storing unsigned values, both in storage and CPU burden.
1:      * Note that it is still possible to store negative values, they just take up more space.
1:      * So this method doesn't forbid e.g. negative sentinel values in future, if they need to be snuck in.
1:      * A protocol version bump can then be introduced to improve efficiency.
commit:f3c0e11
/////////////////////////////////////////////////////////////////////////
1:     void write(Memory memory, long offset, long length) throws IOException;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:753a943
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.vint.VIntCoding;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the current position of the underlying target like a file-pointer
1:      * or the position withing a buffer. Not every implementation may support this
1:      * functionality. Whether or not this functionality is supported can be checked
1:      * via the {@link #hasPosition()}.
1:      *
1:      * @throws UnsupportedOperationException if the implementation does not support
1:      *                                       position
1:      */
1:     default long position()
1:     /**
1:      * If the implementation supports providing a position, this method returns
1:      * {@code true}, otherwise {@code false}.
1:      */
1:     default boolean hasPosition()
commit:51b1a1c
/////////////////////////////////////////////////////////////////////////
0:     default long getFilePointer()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
0:     default boolean hasFilePointer()
1:     {
1:         return false;
1:     }
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:177e0dc
/////////////////////////////////////////////////////////////////////////
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:     public static class ForwardingDataOutput implements DataOutput
1:     {
0:         protected final DataOutput out;
1: 
0:         public ForwardingDataOutput(DataOutput out)
1:         {
0:             this.out = out;
1:         }
1: 
0:         public void write(byte[] b) throws IOException
1:         {
0:             out.write(b);
1:         }
1: 
0:         public void write(byte[] b, int off, int len) throws IOException
1:         {
0:             out.write(b, off, len);
1:         }
1: 
0:         public void write(int b) throws IOException
1:         {
0:             out.write(b);
1:         }
1: 
0:         public void writeBoolean(boolean v) throws IOException
1:         {
0:             out.writeBoolean(v);
1:         }
1: 
0:         public void writeByte(int v) throws IOException
1:         {
0:             out.writeByte(v);
1:         }
1: 
0:         public void writeBytes(String s) throws IOException
1:         {
0:             out.writeBytes(s);
1:         }
1: 
0:         public void writeChar(int v) throws IOException
1:         {
0:             out.writeChar(v);
1:         }
1: 
0:         public void writeChars(String s) throws IOException
1:         {
0:             out.writeChars(s);
1:         }
1: 
0:         public void writeDouble(double v) throws IOException
1:         {
0:             out.writeDouble(v);
1:         }
1: 
0:         public void writeFloat(float v) throws IOException
1:         {
0:             out.writeFloat(v);
1:         }
1: 
0:         public void writeInt(int v) throws IOException
1:         {
0:             out.writeInt(v);
1:         }
1: 
0:         public void writeLong(long v) throws IOException
1:         {
0:             out.writeLong(v);
1:         }
1: 
0:         public void writeShort(int v) throws IOException
1:         {
0:             out.writeShort(v);
1:         }
1: 
0:         public void writeUTF(String s) throws IOException
1:         {
0:             out.writeUTF(s);
1:         }
1: 
1:     }
1: 
0:     public static class DataOutputPlusAdapter extends ForwardingDataOutput implements DataOutputPlus
1:     {
1: 
0:         public DataOutputPlusAdapter(DataOutput out)
1:         {
0:             super(out);
1:         }
1: 
0:         public void write(ByteBuffer buffer) throws IOException
1:         {
0:             if (buffer.hasArray())
0:                 out.write(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());
0:             else
0:                 throw new UnsupportedOperationException("IMPLEMENT ME");
1:         }
1: 
0:         public void write(Memory memory, long offset, long length) throws IOException
1:         {
0:             throw new UnsupportedOperationException("IMPLEMENT ME");
1:         }
1: 
0:         public <R> R applyToChannel(Function<WritableByteChannel, R> c) throws IOException
1:         {
0:             throw new UnsupportedOperationException("IMPLEMENT ME");
1:         }
1:     }
commit:1491a40
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.vint.VIntCoding;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     default void writeVInt(long i) throws IOException
0:     {
1:         VIntCoding.writeVInt(i, this);
0:     }
0: 
1:     /**
0:      * Think hard before opting for an unsigned encoding. Is this going to bite someone because some day
0:      * they might need to pass in a sentinel value using negative numbers? Is the risk worth it
0:      * to save a few bytes?
1:      *
0:      * Signed, not a fan of unsigned values in protocols and formats
1:      */
1:     default void writeUnsignedVInt(long i) throws IOException
0:     {
1:         VIntCoding.writeUnsignedVInt(i, this);
0:     }
commit:16499ca
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.WritableByteChannel;
1: import com.google.common.base.Function;
0: 
1: /**
1:  * Extension to DataOutput that provides for writing ByteBuffer and Memory, potentially with an efficient
1:  * implementation that is zero copy or at least has reduced bounds checking overhead.
1:  */
0: 
1:     /**
1:      * Safe way to operate against the underlying channel. Impossible to stash a reference to the channel
1:      * and forget to flush
1:      */
1:     <R> R applyToChannel(Function<WritableByteChannel, R> c) throws IOException;
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
0: 
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
0: 
1: public interface DataOutputPlus extends DataOutput
0: {
0: 
1:     // write the buffer without modifying its position
1:     void write(ByteBuffer buffer) throws IOException;
0: 
0:     void write(Memory memory) throws IOException;
0: 
0: }
============================================================================