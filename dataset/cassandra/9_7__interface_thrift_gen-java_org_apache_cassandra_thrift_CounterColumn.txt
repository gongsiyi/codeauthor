1:2c4ac98: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:2c4ac98:  *
1:2c4ac98:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:2c4ac98:  */
1:2c4ac98: package org.apache.cassandra.thrift;
1:2c4ac98: /*
1:2c4ac98:  * 
1:2c4ac98:  * Licensed to the Apache Software Foundation (ASF) under one
1:2c4ac98:  * or more contributor license agreements.  See the NOTICE file
1:2c4ac98:  * distributed with this work for additional information
1:2c4ac98:  * regarding copyright ownership.  The ASF licenses this file
1:2c4ac98:  * to you under the Apache License, Version 2.0 (the
1:2c4ac98:  * "License"); you may not use this file except in compliance
1:2c4ac98:  * with the License.  You may obtain a copy of the License at
1:2c4ac98:  * 
1:2c4ac98:  *   http://www.apache.org/licenses/LICENSE-2.0
1:2c4ac98:  * 
1:2c4ac98:  * Unless required by applicable law or agreed to in writing,
1:2c4ac98:  * software distributed under the License is distributed on an
1:2c4ac98:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:2c4ac98:  * KIND, either express or implied.  See the License for the
1:2c4ac98:  * specific language governing permissions and limitations
1:2c4ac98:  * under the License.
1:2c4ac98:  * 
1:2c4ac98:  */
9:2c4ac98: 
1:2c4ac98: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:b153d45: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:b153d45: import org.apache.thrift.EncodingUtils;
1:b153d45: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:2c4ac98: import java.util.List;
1:2c4ac98: import java.util.ArrayList;
1:2c4ac98: import java.util.Map;
1:2c4ac98: import java.util.HashMap;
1:2c4ac98: import java.util.EnumMap;
1:2c4ac98: import java.util.Set;
1:2c4ac98: import java.util.HashSet;
1:2c4ac98: import java.util.EnumSet;
1:2c4ac98: import java.util.Collections;
1:2c4ac98: import java.util.BitSet;
1:2c4ac98: import java.nio.ByteBuffer;
1:2c4ac98: import java.util.Arrays;
1:2c4ac98: import org.slf4j.Logger;
1:2c4ac98: import org.slf4j.LoggerFactory;
1:2c4ac98: 
1:bffd9ea: public class CounterColumn implements org.apache.thrift.TBase<CounterColumn, CounterColumn._Fields>, java.io.Serializable, Cloneable, Comparable<CounterColumn> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CounterColumn");
1:2c4ac98: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);
1:2c4ac98: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new CounterColumnStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new CounterColumnTupleSchemeFactory());
1:b153d45:   }
1:b153d45: 
1:7c8c570:   public ByteBuffer name; // required
1:7c8c570:   public long value; // required
1:4ec9511: 
1:2c4ac98:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:2c4ac98:     NAME((short)1, "name"),
1:2c4ac98:     VALUE((short)2, "value");
1:2c4ac98: 
1:2c4ac98:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:2c4ac98: 
1:2c4ac98:     static {
1:2c4ac98:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:2c4ac98:         byName.put(field.getFieldName(), field);
1:c8afd76:       }
1:c8afd76:     }
1:2c4ac98: 
1:2c4ac98:     /**
1:2c4ac98:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:2c4ac98:      */
1:2c4ac98:     public static _Fields findByThriftId(int fieldId) {
1:2c4ac98:       switch(fieldId) {
2:2c4ac98:         case 1: // NAME
1:2c4ac98:           return NAME;
2:2c4ac98:         case 2: // VALUE
1:2c4ac98:           return VALUE;
2:2c4ac98:         default:
1:2c4ac98:           return null;
1:4ec9511:       }
1:4ec9511:     }
1:2c4ac98: 
1:2c4ac98:     /**
1:2c4ac98:      * Find the _Fields constant that matches fieldId, throwing an exception
1:2c4ac98:      * if it is not found.
1:2c4ac98:      */
1:2c4ac98:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:2c4ac98:       _Fields fields = findByThriftId(fieldId);
1:2c4ac98:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:2c4ac98:       return fields;
16:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     /**
1:2c4ac98:      * Find the _Fields constant that matches name, or null if its not found.
1:2c4ac98:      */
1:2c4ac98:     public static _Fields findByName(String name) {
1:2c4ac98:       return byName.get(name);
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     private final short _thriftId;
1:2c4ac98:     private final String _fieldName;
1:2c4ac98: 
1:2c4ac98:     _Fields(short thriftId, String fieldName) {
1:2c4ac98:       _thriftId = thriftId;
1:2c4ac98:       _fieldName = fieldName;
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     public short getThriftFieldId() {
1:2c4ac98:       return _thriftId;
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     public String getFieldName() {
1:2c4ac98:       return _fieldName;
1:2c4ac98:     }
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   // isset id assignments
1:2c4ac98:   private static final int __VALUE_ISSET_ID = 0;
1:b153d45:   private byte __isset_bitfield = 0;
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:2c4ac98:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:2c4ac98:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CounterColumn.class, metaDataMap);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn() {
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn(
1:2c4ac98:     ByteBuffer name,
1:2c4ac98:     long value)
2:2c4ac98:   {
1:2c4ac98:     this();
1:2c4ac98:     this.name = name;
1:2c4ac98:     this.value = value;
2:2c4ac98:     setValueIsSet(true);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   /**
1:2c4ac98:    * Performs a deep copy on <i>other</i>.
1:2c4ac98:    */
1:2c4ac98:   public CounterColumn(CounterColumn other) {
1:b153d45:     __isset_bitfield = other.__isset_bitfield;
1:2c4ac98:     if (other.isSetName()) {
1:4ec9511:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
1:2c4ac98: ;
1:2c4ac98:     }
1:2c4ac98:     this.value = other.value;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn deepCopy() {
1:2c4ac98:     return new CounterColumn(this);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   @Override
1:2c4ac98:   public void clear() {
1:2c4ac98:     this.name = null;
1:2c4ac98:     setValueIsSet(false);
1:2c4ac98:     this.value = 0;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public byte[] getName() {
1:4ec9511:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:4ec9511:     return name == null ? null : name.array();
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   public ByteBuffer bufferForName() {
1:2c4ac98:     return name;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn setName(byte[] name) {
1:4ec9511:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
1:2c4ac98:     return this;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn setName(ByteBuffer name) {
1:2c4ac98:     this.name = name;
1:2c4ac98:     return this;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public void unsetName() {
1:2c4ac98:     this.name = null;
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:2c4ac98:   public boolean isSetName() {
1:2c4ac98:     return this.name != null;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public void setNameIsSet(boolean value) {
1:2c4ac98:     if (!value) {
1:2c4ac98:       this.name = null;
1:2c4ac98:     }
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public long getValue() {
1:2c4ac98:     return this.value;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public CounterColumn setValue(long value) {
1:2c4ac98:     this.value = value;
1:2c4ac98:     setValueIsSet(true);
1:2c4ac98:     return this;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public void unsetValue() {
1:b153d45:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
1:2c4ac98:   public boolean isSetValue() {
1:b153d45:     return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public void setValueIsSet(boolean value) {
1:b153d45:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public void setFieldValue(_Fields field, Object value) {
1:2c4ac98:     switch (field) {
1:2c4ac98:     case NAME:
1:2c4ac98:       if (value == null) {
1:2c4ac98:         unsetName();
3:2c4ac98:       } else {
1:2c4ac98:         setName((ByteBuffer)value);
1:2c4ac98:       }
4:2c4ac98:       break;
1:2c4ac98: 
1:2c4ac98:     case VALUE:
1:2c4ac98:       if (value == null) {
1:2c4ac98:         unsetValue();
1:2c4ac98:       } else {
1:2c4ac98:         setValue((Long)value);
1:2c4ac98:       }
1:2c4ac98:       break;
1:2c4ac98: 
1:2c4ac98:     }
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public Object getFieldValue(_Fields field) {
1:2c4ac98:     switch (field) {
1:2c4ac98:     case NAME:
1:2c4ac98:       return getName();
1:2c4ac98: 
1:2c4ac98:     case VALUE:
1:7c8c570:       return Long.valueOf(getValue());
1:2c4ac98: 
1:2c4ac98:     }
1:2c4ac98:     throw new IllegalStateException();
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:2c4ac98:   public boolean isSet(_Fields field) {
1:2c4ac98:     if (field == null) {
1:2c4ac98:       throw new IllegalArgumentException();
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     switch (field) {
1:2c4ac98:     case NAME:
1:2c4ac98:       return isSetName();
1:2c4ac98:     case VALUE:
1:2c4ac98:       return isSetValue();
1:2c4ac98:     }
1:2c4ac98:     throw new IllegalStateException();
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   @Override
1:2c4ac98:   public boolean equals(Object that) {
1:2c4ac98:     if (that == null)
1:2c4ac98:       return false;
1:2c4ac98:     if (that instanceof CounterColumn)
1:2c4ac98:       return this.equals((CounterColumn)that);
1:2c4ac98:     return false;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public boolean equals(CounterColumn that) {
1:2c4ac98:     if (that == null)
1:2c4ac98:       return false;
1:2c4ac98: 
1:2c4ac98:     boolean this_present_name = true && this.isSetName();
1:2c4ac98:     boolean that_present_name = true && that.isSetName();
1:2c4ac98:     if (this_present_name || that_present_name) {
1:2c4ac98:       if (!(this_present_name && that_present_name))
1:2c4ac98:         return false;
1:2c4ac98:       if (!this.name.equals(that.name))
1:2c4ac98:         return false;
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     boolean this_present_value = true;
1:2c4ac98:     boolean that_present_value = true;
1:2c4ac98:     if (this_present_value || that_present_value) {
1:2c4ac98:       if (!(this_present_value && that_present_value))
1:2c4ac98:         return false;
1:2c4ac98:       if (this.value != that.value)
1:2c4ac98:         return false;
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     return true;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   @Override
1:2c4ac98:   public int hashCode() {
1:2c4ac98:     HashCodeBuilder builder = new HashCodeBuilder();
1:2c4ac98: 
1:2c4ac98:     boolean present_name = true && (isSetName());
1:2c4ac98:     builder.append(present_name);
1:2c4ac98:     if (present_name)
1:2c4ac98:       builder.append(name);
1:2c4ac98: 
1:2c4ac98:     boolean present_value = true;
1:2c4ac98:     builder.append(present_value);
1:2c4ac98:     if (present_value)
1:2c4ac98:       builder.append(value);
1:2c4ac98: 
1:2c4ac98:     return builder.toHashCode();
1:2c4ac98:   }
1:2c4ac98: 
1:bffd9ea:   @Override
1:2c4ac98:   public int compareTo(CounterColumn other) {
1:2c4ac98:     if (!getClass().equals(other.getClass())) {
1:2c4ac98:       return getClass().getName().compareTo(other.getClass().getName());
1:2c4ac98:     }
1:2c4ac98: 
1:2c4ac98:     int lastComparison = 0;
1:2c4ac98: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:2c4ac98:     if (lastComparison != 0) {
1:2c4ac98:       return lastComparison;
1:2c4ac98:     }
1:2c4ac98:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:2c4ac98:       if (lastComparison != 0) {
1:2c4ac98:         return lastComparison;
1:2c4ac98:       }
1:2c4ac98:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:2c4ac98:     if (lastComparison != 0) {
1:2c4ac98:       return lastComparison;
1:2c4ac98:     }
1:2c4ac98:     if (isSetValue()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
1:2c4ac98:       if (lastComparison != 0) {
1:2c4ac98:         return lastComparison;
1:2c4ac98:       }
1:2c4ac98:     }
1:2c4ac98:     return 0;
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   public _Fields fieldForId(int fieldId) {
1:2c4ac98:     return _Fields.findByThriftId(fieldId);
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:2c4ac98:   }
1:2c4ac98: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:2c4ac98:   }
1:2c4ac98: 
1:2c4ac98:   @Override
1:2c4ac98:   public String toString() {
1:2c4ac98:     StringBuilder sb = new StringBuilder("CounterColumn(");
1:2c4ac98:     boolean first = true;
1:2c4ac98: 
1:2c4ac98:     sb.append("name:");
1:2c4ac98:     if (this.name == null) {
1:2c4ac98:       sb.append("null");
1:2c4ac98:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
1:2c4ac98:     }
1:2c4ac98:     first = false;
1:2c4ac98:     if (!first) sb.append(", ");
1:2c4ac98:     sb.append("value:");
1:2c4ac98:     sb.append(this.value);
1:2c4ac98:     first = false;
1:2c4ac98:     sb.append(")");
1:2c4ac98:     return sb.toString();
1:4ec9511:   }
1:4ec9511: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:2c4ac98:     // check for required fields
1:2c4ac98:     if (name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:4ec9511:     }
1:2c4ac98:     // alas, we cannot check 'value' because it's a primitive and you chose the non-beans generator.
1:b153d45:     // check for sub-struct validity
1:c8afd76:   }
1:c8afd76: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:b153d45:       __isset_bitfield = 0;
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class CounterColumnStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public CounterColumnStandardScheme getScheme() {
1:b153d45:       return new CounterColumnStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CounterColumnStandardScheme extends StandardScheme<CounterColumn> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, CounterColumn struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:b153d45:       iprot.readStructBegin();
1:b153d45:       while (true)
1:b153d45:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:b153d45:           break;
1:b153d45:         }
1:b153d45:         switch (schemeField.id) {
1:b153d45:           case 1: // NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.name = iprot.readBinary();
1:b153d45:               struct.setNameIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           case 2: // VALUE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:b153d45:               struct.value = iprot.readI64();
1:b153d45:               struct.setValueIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:b153d45:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:b153d45:         iprot.readFieldEnd();
1:b153d45:       }
1:b153d45:       iprot.readStructEnd();
1:b153d45: 
1:b153d45:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       if (!struct.isSetValue()) {
1:b153d45:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
1:b153d45:       }
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, CounterColumn struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:b153d45:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name != null) {
1:b153d45:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.name);
1:b153d45:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:b153d45:       oprot.writeI64(struct.value);
1:b153d45:       oprot.writeFieldEnd();
1:b153d45:       oprot.writeFieldStop();
1:b153d45:       oprot.writeStructEnd();
1:b153d45:     }
1:b153d45: 
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CounterColumnTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public CounterColumnTupleScheme getScheme() {
1:b153d45:       return new CounterColumnTupleScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class CounterColumnTupleScheme extends TupleScheme<CounterColumn> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, CounterColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.name);
1:b153d45:       oprot.writeI64(struct.value);
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, CounterColumn struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.name = iprot.readBinary();
1:b153d45:       struct.setNameIsSet(true);
1:b153d45:       struct.value = iprot.readI64();
1:b153d45:       struct.setValueIsSet(true);
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:c8afd76: }
1:c8afd76: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CounterColumn implements org.apache.thrift.TBase<CounterColumn, CounterColumn._Fields>, java.io.Serializable, Cloneable, Comparable<CounterColumn> {
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CounterColumnStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CounterColumnTupleSchemeFactory());
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
1:   private byte __isset_bitfield = 0;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = other.__isset_bitfield;
/////////////////////////////////////////////////////////////////////////
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
1:     return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:       __isset_bitfield = 0;
1:   private static class CounterColumnStandardSchemeFactory implements SchemeFactory {
1:     public CounterColumnStandardScheme getScheme() {
1:       return new CounterColumnStandardScheme();
1:     }
1:   }
1: 
1:   private static class CounterColumnStandardScheme extends StandardScheme<CounterColumn> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CounterColumn struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readBinary();
1:               struct.setNameIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // VALUE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
1:               struct.value = iprot.readI64();
1:               struct.setValueIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetValue()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
1:       }
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CounterColumn struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
1:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeBinary(struct.name);
1:         oprot.writeFieldEnd();
1:       }
1:       oprot.writeFieldBegin(VALUE_FIELD_DESC);
1:       oprot.writeI64(struct.value);
1:       oprot.writeFieldEnd();
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class CounterColumnTupleSchemeFactory implements SchemeFactory {
1:     public CounterColumnTupleScheme getScheme() {
1:       return new CounterColumnTupleScheme();
1:     }
1:   }
1: 
1:   private static class CounterColumnTupleScheme extends TupleScheme<CounterColumn> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CounterColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.name);
1:       oprot.writeI64(struct.value);
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CounterColumn struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readBinary();
1:       struct.setNameIsSet(true);
1:       struct.value = iprot.readI64();
1:       struct.setValueIsSet(true);
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer name; // required
1:   public long value; // required
/////////////////////////////////////////////////////////////////////////
1:       return Long.valueOf(getValue());
commit:16d7385
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class CounterColumn implements org.apache.thrift.TBase<CounterColumn, CounterColumn._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CounterColumn");
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CounterColumn.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
/////////////////////////////////////////////////////////////////////////
1:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:     return name == null ? null : name.array();
1:   public ByteBuffer bufferForName() {
1:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field value is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I64) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
0:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
0:       __isset_bit_vector = new BitSet(1);
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
author:Johan Oskarsson
-------------------------------------------------------------------------------
commit:2c4ac98
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.transport.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class CounterColumn implements TBase<CounterColumn, CounterColumn._Fields>, java.io.Serializable, Cloneable {
0:   private static final TStruct STRUCT_DESC = new TStruct("CounterColumn");
1: 
0:   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
0:   private static final TField VALUE_FIELD_DESC = new TField("value", TType.I64, (short)2);
1: 
0:   public ByteBuffer name;
0:   public long value;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     VALUE((short)2, "value");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // VALUE
1:           return VALUE;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __VALUE_ISSET_ID = 0;
0:   private BitSet __isset_bit_vector = new BitSet(1);
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
1:   static {
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.I64)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
0:     FieldMetaData.addStructMetaDataMap(CounterColumn.class, metaDataMap);
1:   }
1: 
1:   public CounterColumn() {
1:   }
1: 
1:   public CounterColumn(
1:     ByteBuffer name,
1:     long value)
1:   {
1:     this();
1:     this.name = name;
1:     this.value = value;
1:     setValueIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CounterColumn(CounterColumn other) {
0:     __isset_bit_vector.clear();
0:     __isset_bit_vector.or(other.__isset_bit_vector);
1:     if (other.isSetName()) {
0:       this.name = TBaseHelper.copyBinary(other.name);
1: ;
1:     }
1:     this.value = other.value;
1:   }
1: 
1:   public CounterColumn deepCopy() {
1:     return new CounterColumn(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     setValueIsSet(false);
1:     this.value = 0;
1:   }
1: 
1:   public byte[] getName() {
0:     setName(TBaseHelper.rightSize(name));
0:     return name.array();
1:   }
1: 
0:   public ByteBuffer BufferForName() {
1:     return name;
1:   }
1: 
1:   public CounterColumn setName(byte[] name) {
0:     setName(ByteBuffer.wrap(name));
1:     return this;
1:   }
1: 
1:   public CounterColumn setName(ByteBuffer name) {
1:     this.name = name;
1:     return this;
1:   }
1: 
1:   public void unsetName() {
1:     this.name = null;
1:   }
1: 
0:   /** Returns true if field name is set (has been asigned a value) and false otherwise */
1:   public boolean isSetName() {
1:     return this.name != null;
1:   }
1: 
1:   public void setNameIsSet(boolean value) {
1:     if (!value) {
1:       this.name = null;
1:     }
1:   }
1: 
1:   public long getValue() {
1:     return this.value;
1:   }
1: 
1:   public CounterColumn setValue(long value) {
1:     this.value = value;
1:     setValueIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetValue() {
0:     __isset_bit_vector.clear(__VALUE_ISSET_ID);
1:   }
1: 
0:   /** Returns true if field value is set (has been asigned a value) and false otherwise */
1:   public boolean isSetValue() {
0:     return __isset_bit_vector.get(__VALUE_ISSET_ID);
1:   }
1: 
1:   public void setValueIsSet(boolean value) {
0:     __isset_bit_vector.set(__VALUE_ISSET_ID, value);
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case NAME:
1:       if (value == null) {
1:         unsetName();
1:       } else {
1:         setName((ByteBuffer)value);
1:       }
1:       break;
1: 
1:     case VALUE:
1:       if (value == null) {
1:         unsetValue();
1:       } else {
1:         setValue((Long)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return getName();
1: 
1:     case VALUE:
0:       return new Long(getValue());
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case NAME:
1:       return isSetName();
1:     case VALUE:
1:       return isSetValue();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CounterColumn)
1:       return this.equals((CounterColumn)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CounterColumn that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
1:         return false;
1:       if (!this.name.equals(that.name))
1:         return false;
1:     }
1: 
1:     boolean this_present_value = true;
1:     boolean that_present_value = true;
1:     if (this_present_value || that_present_value) {
1:       if (!(this_present_value && that_present_value))
1:         return false;
1:       if (this.value != that.value)
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_value = true;
1:     builder.append(present_value);
1:     if (present_value)
1:       builder.append(value);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CounterColumn other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CounterColumn typedOther = (CounterColumn)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetName()) {
0:       lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetValue()) {
0:       lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
0:     iprot.readStructBegin();
0:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // NAME
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // VALUE
0:           if (field.type == TType.I64) {
0:             this.value = iprot.readI64();
1:             setValueIsSet(true);
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
0:       iprot.readFieldEnd();
1:     }
0:     iprot.readStructEnd();
1: 
0:     // check for required fields of primitive type, which can't be checked in the validate method
0:     if (!isSetValue()) {
0:       throw new TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
1:     }
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
0:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.name != null) {
0:       oprot.writeFieldBegin(NAME_FIELD_DESC);
0:       oprot.writeBinary(this.name);
0:       oprot.writeFieldEnd();
1:     }
0:     oprot.writeFieldBegin(VALUE_FIELD_DESC);
0:     oprot.writeI64(this.value);
0:     oprot.writeFieldEnd();
0:     oprot.writeFieldStop();
0:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CounterColumn(");
1:     boolean first = true;
1: 
1:     sb.append("name:");
1:     if (this.name == null) {
1:       sb.append("null");
1:     } else {
0:       TBaseHelper.toString(this.name, sb);
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("value:");
1:     sb.append(this.value);
1:     first = false;
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     // alas, we cannot check 'value' because it's a primitive and you chose the non-beans generator.
1:   }
1: 
1: }
1: 
============================================================================