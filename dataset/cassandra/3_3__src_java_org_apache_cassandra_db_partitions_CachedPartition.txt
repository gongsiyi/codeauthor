1:a991b64: /*
1:a991b64:  * Licensed to the Apache Software Foundation (ASF) under one
1:a991b64:  * or more contributor license agreements.  See the NOTICE file
1:a991b64:  * distributed with this work for additional information
1:a991b64:  * regarding copyright ownership.  The ASF licenses this file
1:a991b64:  * to you under the Apache License, Version 2.0 (the
1:a991b64:  * "License"); you may not use this file except in compliance
1:a991b64:  * with the License.  You may obtain a copy of the License at
1:a991b64:  *
1:a991b64:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a991b64:  *
1:a991b64:  * Unless required by applicable law or agreed to in writing, software
1:a991b64:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a991b64:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a991b64:  * See the License for the specific language governing permissions and
1:a991b64:  * limitations under the License.
1:a991b64:  */
1:a991b64: package org.apache.cassandra.db.partitions;
1:a991b64: 
1:a991b64: import org.apache.cassandra.cache.IRowCacheEntry;
1:a991b64: import org.apache.cassandra.db.rows.Row;
1:a991b64: import org.apache.cassandra.io.ISerializer;
1:a991b64: 
1:a991b64: /**
1:a991b64:  * A partition stored in the partition cache.
1:a991b64:  *
1:e51f83b:  * Note that in practice, the only implementation of this is {@link CachedBTreePartition},
1:e51f83b:  * we keep this interface mainly to make it clear what we need from partition in the cache
1:e51f83b:  * (that we don't otherwise)
1:a991b64:  */
1:a991b64: public interface CachedPartition extends Partition, IRowCacheEntry
1:a991b64: {
1:e51f83b:     public static final ISerializer<CachedPartition> cacheSerializer = new CachedBTreePartition.Serializer();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The number of {@code Row} objects in this cached partition.
1:a991b64:      *
1:a991b64:      * Please note that this is <b>not</b> the number of <em>live</em> rows since
1:a991b64:      * some of the row may only contains deleted (or expired) information.
1:a991b64:      *
1:a991b64:      * @return the number of row in the partition.
1:a991b64:      */
1:a991b64:     public int rowCount();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The number of rows that were live at the time the partition was cached.
1:a991b64:      *
1:6536c05:      * See {@link org.apache.cassandra.db.ColumnFamilyStore#isFilterFullyCoveredBy} to see why we need this.
1:a991b64:      *
1:a991b64:      * @return the number of rows in this partition that were live at the time the
1:a991b64:      * partition was cached (this can be different from the number of live rows now
1:a991b64:      * due to expiring cells).
1:a991b64:      */
1:a991b64:     public int cachedLiveRows();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The number of rows in this cached partition that have at least one non-expiring
1:a991b64:      * non-deleted cell.
1:a991b64:      *
1:a991b64:      * Note that this is generally not a very meaningful number, but this is used by
1:6536c05:      * {@link org.apache.cassandra.db.filter.DataLimits#hasEnoughLiveData} as an optimization.
1:a991b64:      *
1:a991b64:      * @return the number of row that have at least one non-expiring non-deleted cell.
1:a991b64:      */
1:a991b64:     public int rowsWithNonExpiringCells();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The last row in this cached partition (in order words, the row with the
1:a991b64:      * biggest clustering that the partition contains).
1:a991b64:      *
1:a991b64:      * @return the last row of the partition, or {@code null} if the partition is empty.
1:a991b64:      */
1:a991b64:     public Row lastRow();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The number of {@code cell} objects that are not tombstone in this cached partition.
1:a991b64:      *
1:a991b64:      * Please note that this is <b>not</b> the number of <em>live</em> cells since
1:a991b64:      * some of the cells might be expired.
1:a991b64:      *
1:a991b64:      * @return the number of non tombstone cells in the partition.
1:a991b64:      */
1:a991b64:     public int nonTombstoneCellCount();
1:a991b64: 
1:a991b64:     /**
1:a991b64:      * The number of cells in this cached partition that are neither tombstone nor expiring.
1:a991b64:      *
1:a991b64:      * Note that this is generally not a very meaningful number, but this is used by
1:6536c05:      * {@link org.apache.cassandra.db.filter.DataLimits#hasEnoughLiveData} as an optimization.
1:a991b64:      *
1:a991b64:      * @return the number of cells that are neither tombstones nor expiring.
1:a991b64:      */
1:a991b64:     public int nonExpiringLiveCells();
1:a991b64: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6536c05
/////////////////////////////////////////////////////////////////////////
1:      * See {@link org.apache.cassandra.db.ColumnFamilyStore#isFilterFullyCoveredBy} to see why we need this.
/////////////////////////////////////////////////////////////////////////
1:      * {@link org.apache.cassandra.db.filter.DataLimits#hasEnoughLiveData} as an optimization.
/////////////////////////////////////////////////////////////////////////
1:      * {@link org.apache.cassandra.db.filter.DataLimits#hasEnoughLiveData} as an optimization.
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e51f83b
/////////////////////////////////////////////////////////////////////////
1:  * Note that in practice, the only implementation of this is {@link CachedBTreePartition},
1:  * we keep this interface mainly to make it clear what we need from partition in the cache
1:  * (that we don't otherwise)
1:     public static final ISerializer<CachedPartition> cacheSerializer = new CachedBTreePartition.Serializer();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.partitions;
1: 
1: import org.apache.cassandra.cache.IRowCacheEntry;
1: import org.apache.cassandra.db.rows.Row;
1: import org.apache.cassandra.io.ISerializer;
1: 
1: /**
1:  * A partition stored in the partition cache.
1:  *
0:  * Note that in practice, the only implementation of this is {@link ArrayBackedPartition},
0:  * we keep this interface mainly 1) to make it clear what we need from partition in the cache
0:  * (that we don't otherwise) and 2) because {@code ArrayBackedPartition} is used for other
0:  * purpose (than caching) and hence using {@code CachedPartition} when we talk about caching is
0:  * clearer.
1:  */
1: public interface CachedPartition extends Partition, IRowCacheEntry
1: {
0:     public static final ISerializer<CachedPartition> cacheSerializer = new ArrayBackedCachedPartition.Serializer();
1: 
1:     /**
1:      * The number of {@code Row} objects in this cached partition.
1:      *
1:      * Please note that this is <b>not</b> the number of <em>live</em> rows since
1:      * some of the row may only contains deleted (or expired) information.
1:      *
1:      * @return the number of row in the partition.
1:      */
1:     public int rowCount();
1: 
1:     /**
1:      * The number of rows that were live at the time the partition was cached.
1:      *
0:      * See {@link ColumnFamilyStore#isFilterFullyCoveredBy} to see why we need this.
1:      *
1:      * @return the number of rows in this partition that were live at the time the
1:      * partition was cached (this can be different from the number of live rows now
1:      * due to expiring cells).
1:      */
1:     public int cachedLiveRows();
1: 
1:     /**
1:      * The number of rows in this cached partition that have at least one non-expiring
1:      * non-deleted cell.
1:      *
1:      * Note that this is generally not a very meaningful number, but this is used by
0:      * {@link DataLimits#hasEnoughLiveData} as an optimization.
1:      *
1:      * @return the number of row that have at least one non-expiring non-deleted cell.
1:      */
1:     public int rowsWithNonExpiringCells();
1: 
1:     /**
1:      * The last row in this cached partition (in order words, the row with the
1:      * biggest clustering that the partition contains).
1:      *
1:      * @return the last row of the partition, or {@code null} if the partition is empty.
1:      */
1:     public Row lastRow();
1: 
1:     /**
1:      * The number of {@code cell} objects that are not tombstone in this cached partition.
1:      *
1:      * Please note that this is <b>not</b> the number of <em>live</em> cells since
1:      * some of the cells might be expired.
1:      *
1:      * @return the number of non tombstone cells in the partition.
1:      */
1:     public int nonTombstoneCellCount();
1: 
1:     /**
1:      * The number of cells in this cached partition that are neither tombstone nor expiring.
1:      *
1:      * Note that this is generally not a very meaningful number, but this is used by
0:      * {@link DataLimits#hasEnoughLiveData} as an optimization.
1:      *
1:      * @return the number of cells that are neither tombstones nor expiring.
1:      */
1:     public int nonExpiringLiveCells();
1: }
============================================================================