1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import static java.lang.String.format;
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import java.net.InetAddress;
1:c5a8190: import java.net.UnknownHostException;
1:c5a8190: import java.text.DecimalFormat;
1:c5a8190: import java.util.ArrayList;
1:c5a8190: import java.util.Collection;
1:c5a8190: import java.util.Collections;
1:c5a8190: import java.util.Comparator;
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:c5a8190: import java.util.Map.Entry;
1:c5a8190: 
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: 
1:c5a8190: import com.google.common.collect.LinkedHashMultimap;
1:c5a8190: 
1:c5a8190: @Command(name = "ring", description = "Print information about the token ring")
1:c5a8190: public class Ring extends NodeToolCmd
1:c5a8190: {
1:c5a8190:     @Arguments(description = "Specify a keyspace for accurate ownership information (topology awareness)")
1:c5a8190:     private String keyspace = null;
1:c5a8190: 
1:c5a8190:     @Option(title = "resolve_ip", name = {"-r", "--resolve-ip"}, description = "Show node domain names instead of IPs")
1:c5a8190:     private boolean resolveIp = false;
1:c5a8190: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:c5a8190:         Map<String, String> tokensToEndpoints = probe.getTokenToEndpointMap();
1:c5a8190:         LinkedHashMultimap<String, String> endpointsToTokens = LinkedHashMultimap.create();
1:c5a8190:         boolean haveVnodes = false;
1:c5a8190:         for (Map.Entry<String, String> entry : tokensToEndpoints.entrySet())
1:c5a8190:         {
1:c5a8190:             haveVnodes |= endpointsToTokens.containsKey(entry.getValue());
1:c5a8190:             endpointsToTokens.put(entry.getValue(), entry.getKey());
1:c5a8190:         }
1:c5a8190: 
1:c5a8190:         int maxAddressLength = Collections.max(endpointsToTokens.keys(), new Comparator<String>()
1:c5a8190:         {
1:c5a8190:             @Override
1:c5a8190:             public int compare(String first, String second)
1:c5a8190:             {
1:d1dd3ce:             	return Integer.compare(first.length(), second.length());
1:c5a8190:             }
1:c5a8190:         }).length();
1:c5a8190: 
1:c5a8190:         String formatPlaceholder = "%%-%ds  %%-12s%%-7s%%-8s%%-16s%%-20s%%-44s%%n";
1:c5a8190:         String format = format(formatPlaceholder, maxAddressLength);
1:c5a8190: 
1:3c95d47:         StringBuilder errors = new StringBuilder();
1:c5a8190:         boolean showEffectiveOwnership = true;
1:c5a8190:         // Calculate per-token ownership of the ring
1:c5a8190:         Map<InetAddress, Float> ownerships;
1:c5a8190:         try
1:c5a8190:         {
1:c5a8190:             ownerships = probe.effectiveOwnership(keyspace);
1:c5a8190:         }
1:c5a8190:         catch (IllegalStateException ex)
1:c5a8190:         {
1:c5a8190:             ownerships = probe.getOwnership();
1:3c95d47:             errors.append("Note: ").append(ex.getMessage()).append("%n");
1:c5a8190:             showEffectiveOwnership = false;
1:c5a8190:         }
1:c5a8190:         catch (IllegalArgumentException ex)
1:c5a8190:         {
1:0f5e780:             System.out.printf("%nError: %s%n", ex.getMessage());
1:c5a8190:             return;
1:c5a8190:         }
1:c5a8190: 
1:c5a8190: 
1:c5a8190:         System.out.println();
1:c5a8190:         for (Entry<String, SetHostStat> entry : NodeTool.getOwnershipByDc(probe, resolveIp, tokensToEndpoints, ownerships).entrySet())
1:c5a8190:             printDc(probe, format, entry.getKey(), endpointsToTokens, entry.getValue(),showEffectiveOwnership);
1:c5a8190: 
1:c5a8190:         if (haveVnodes)
1:c5a8190:         {
1:c5a8190:             System.out.println("  Warning: \"nodetool ring\" is used to output all the tokens of a node.");
1:c5a8190:             System.out.println("  To view status related info of a node use \"nodetool status\" instead.\n");
1:c5a8190:         }
1:c5a8190: 
1:c5a8190:         System.out.printf("%n  " + errors.toString());
1:c5a8190:     }
1:c5a8190: 
1:c5a8190:     private void printDc(NodeProbe probe, String format,
1:c5a8190:                          String dc,
1:c5a8190:                          LinkedHashMultimap<String, String> endpointsToTokens,
1:c5a8190:                          SetHostStat hoststats,boolean showEffectiveOwnership)
1:c5a8190:     {
1:c5a8190:         Collection<String> liveNodes = probe.getLiveNodes();
1:c5a8190:         Collection<String> deadNodes = probe.getUnreachableNodes();
1:c5a8190:         Collection<String> joiningNodes = probe.getJoiningNodes();
1:c5a8190:         Collection<String> leavingNodes = probe.getLeavingNodes();
1:c5a8190:         Collection<String> movingNodes = probe.getMovingNodes();
1:c5a8190:         Map<String, String> loadMap = probe.getLoadMap();
1:c5a8190: 
1:c5a8190:         System.out.println("Datacenter: " + dc);
1:c5a8190:         System.out.println("==========");
1:c5a8190: 
1:c5a8190:         // get the total amount of replicas for this dc and the last token in this dc's ring
1:c5a8190:         List<String> tokens = new ArrayList<>();
1:c5a8190:         String lastToken = "";
1:c5a8190: 
1:c5a8190:         for (HostStat stat : hoststats)
1:c5a8190:         {
1:c5a8190:             tokens.addAll(endpointsToTokens.get(stat.endpoint.getHostAddress()));
1:c5a8190:             lastToken = tokens.get(tokens.size() - 1);
1:c5a8190:         }
1:c5a8190: 
1:c5a8190:         System.out.printf(format, "Address", "Rack", "Status", "State", "Load", "Owns", "Token");
1:c5a8190: 
1:c5a8190:         if (hoststats.size() > 1)
1:c5a8190:             System.out.printf(format, "", "", "", "", "", "", lastToken);
1:c5a8190:         else
1:c5a8190:             System.out.println();
1:c5a8190: 
1:c5a8190:         for (HostStat stat : hoststats)
1:c5a8190:         {
1:c5a8190:             String endpoint = stat.endpoint.getHostAddress();
1:c5a8190:             String rack;
1:c5a8190:             try
1:c5a8190:             {
1:c5a8190:                 rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint);
1:c5a8190:             }
1:c5a8190:             catch (UnknownHostException e)
1:c5a8190:             {
1:c5a8190:                 rack = "Unknown";
1:c5a8190:             }
1:c5a8190: 
1:c5a8190:             String status = liveNodes.contains(endpoint)
1:c5a8190:                     ? "Up"
1:c5a8190:                     : deadNodes.contains(endpoint)
1:c5a8190:                             ? "Down"
1:c5a8190:                             : "?";
1:c5a8190: 
1:c5a8190:             String state = "Normal";
1:c5a8190: 
1:c5a8190:             if (joiningNodes.contains(endpoint))
1:c5a8190:                 state = "Joining";
1:c5a8190:             else if (leavingNodes.contains(endpoint))
1:c5a8190:                 state = "Leaving";
1:c5a8190:             else if (movingNodes.contains(endpoint))
1:c5a8190:                 state = "Moving";
1:c5a8190: 
1:c5a8190:             String load = loadMap.containsKey(endpoint)
1:c5a8190:                     ? loadMap.get(endpoint)
1:c5a8190:                     : "?";
1:c5a8190:             String owns = stat.owns != null && showEffectiveOwnership? new DecimalFormat("##0.00%").format(stat.owns) : "?";
1:c5a8190:             System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token);
1:c5a8190:         }
1:c5a8190:         System.out.println();
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:3c95d47
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder errors = new StringBuilder();
/////////////////////////////////////////////////////////////////////////
1:             errors.append("Note: ").append(ex.getMessage()).append("%n");
commit:d1dd3ce
/////////////////////////////////////////////////////////////////////////
1:             	return Integer.compare(first.length(), second.length());
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import static java.lang.String.format;
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.text.DecimalFormat;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: 
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: 
1: import com.google.common.collect.LinkedHashMultimap;
1: 
1: @Command(name = "ring", description = "Print information about the token ring")
1: public class Ring extends NodeToolCmd
1: {
1:     @Arguments(description = "Specify a keyspace for accurate ownership information (topology awareness)")
1:     private String keyspace = null;
1: 
1:     @Option(title = "resolve_ip", name = {"-r", "--resolve-ip"}, description = "Show node domain names instead of IPs")
1:     private boolean resolveIp = false;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
1:         Map<String, String> tokensToEndpoints = probe.getTokenToEndpointMap();
1:         LinkedHashMultimap<String, String> endpointsToTokens = LinkedHashMultimap.create();
1:         boolean haveVnodes = false;
1:         for (Map.Entry<String, String> entry : tokensToEndpoints.entrySet())
1:         {
1:             haveVnodes |= endpointsToTokens.containsKey(entry.getValue());
1:             endpointsToTokens.put(entry.getValue(), entry.getKey());
1:         }
1: 
1:         int maxAddressLength = Collections.max(endpointsToTokens.keys(), new Comparator<String>()
1:         {
1:             @Override
1:             public int compare(String first, String second)
1:             {
0:                 return ((Integer) first.length()).compareTo(second.length());
1:             }
1:         }).length();
1: 
1:         String formatPlaceholder = "%%-%ds  %%-12s%%-7s%%-8s%%-16s%%-20s%%-44s%%n";
1:         String format = format(formatPlaceholder, maxAddressLength);
1: 
0:         StringBuffer errors = new StringBuffer();
1:         boolean showEffectiveOwnership = true;
1:         // Calculate per-token ownership of the ring
1:         Map<InetAddress, Float> ownerships;
1:         try
1:         {
1:             ownerships = probe.effectiveOwnership(keyspace);
1:         }
1:         catch (IllegalStateException ex)
1:         {
1:             ownerships = probe.getOwnership();
0:             errors.append("Note: " + ex.getMessage() + "%n");
1:             showEffectiveOwnership = false;
1:         }
1:         catch (IllegalArgumentException ex)
1:         {
0:             System.out.printf("%nError: " + ex.getMessage() + "%n");
1:             return;
1:         }
1: 
1: 
1:         System.out.println();
1:         for (Entry<String, SetHostStat> entry : NodeTool.getOwnershipByDc(probe, resolveIp, tokensToEndpoints, ownerships).entrySet())
1:             printDc(probe, format, entry.getKey(), endpointsToTokens, entry.getValue(),showEffectiveOwnership);
1: 
1:         if (haveVnodes)
1:         {
1:             System.out.println("  Warning: \"nodetool ring\" is used to output all the tokens of a node.");
1:             System.out.println("  To view status related info of a node use \"nodetool status\" instead.\n");
1:         }
1: 
1:         System.out.printf("%n  " + errors.toString());
1:     }
1: 
1:     private void printDc(NodeProbe probe, String format,
1:                          String dc,
1:                          LinkedHashMultimap<String, String> endpointsToTokens,
1:                          SetHostStat hoststats,boolean showEffectiveOwnership)
1:     {
1:         Collection<String> liveNodes = probe.getLiveNodes();
1:         Collection<String> deadNodes = probe.getUnreachableNodes();
1:         Collection<String> joiningNodes = probe.getJoiningNodes();
1:         Collection<String> leavingNodes = probe.getLeavingNodes();
1:         Collection<String> movingNodes = probe.getMovingNodes();
1:         Map<String, String> loadMap = probe.getLoadMap();
1: 
1:         System.out.println("Datacenter: " + dc);
1:         System.out.println("==========");
1: 
1:         // get the total amount of replicas for this dc and the last token in this dc's ring
1:         List<String> tokens = new ArrayList<>();
1:         String lastToken = "";
1: 
1:         for (HostStat stat : hoststats)
1:         {
1:             tokens.addAll(endpointsToTokens.get(stat.endpoint.getHostAddress()));
1:             lastToken = tokens.get(tokens.size() - 1);
1:         }
1: 
1:         System.out.printf(format, "Address", "Rack", "Status", "State", "Load", "Owns", "Token");
1: 
1:         if (hoststats.size() > 1)
1:             System.out.printf(format, "", "", "", "", "", "", lastToken);
1:         else
1:             System.out.println();
1: 
1:         for (HostStat stat : hoststats)
1:         {
1:             String endpoint = stat.endpoint.getHostAddress();
1:             String rack;
1:             try
1:             {
1:                 rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint);
1:             }
1:             catch (UnknownHostException e)
1:             {
1:                 rack = "Unknown";
1:             }
1: 
1:             String status = liveNodes.contains(endpoint)
1:                     ? "Up"
1:                     : deadNodes.contains(endpoint)
1:                             ? "Down"
1:                             : "?";
1: 
1:             String state = "Normal";
1: 
1:             if (joiningNodes.contains(endpoint))
1:                 state = "Joining";
1:             else if (leavingNodes.contains(endpoint))
1:                 state = "Leaving";
1:             else if (movingNodes.contains(endpoint))
1:                 state = "Moving";
1: 
1:             String load = loadMap.containsKey(endpoint)
1:                     ? loadMap.get(endpoint)
1:                     : "?";
1:             String owns = stat.owns != null && showEffectiveOwnership? new DecimalFormat("##0.00%").format(stat.owns) : "?";
1:             System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token);
1:         }
1:         System.out.println();
1:     }
1: }
author:Robert Stupp
-------------------------------------------------------------------------------
commit:0f5e780
/////////////////////////////////////////////////////////////////////////
1:             System.out.printf("%nError: %s%n", ex.getMessage());
/////////////////////////////////////////////////////////////////////////
0: }
============================================================================