1:c8889a7: /*
1:c8889a7: * Licensed to the Apache Software Foundation (ASF) under one
1:c8889a7: * or more contributor license agreements.  See the NOTICE file
1:c8889a7: * distributed with this work for additional information
1:c8889a7: * regarding copyright ownership.  The ASF licenses this file
1:c8889a7: * to you under the Apache License, Version 2.0 (the
1:c8889a7: * "License"); you may not use this file except in compliance
1:c8889a7: * with the License.  You may obtain a copy of the License at
2:c8889a7: *
1:c8889a7: *    http://www.apache.org/licenses/LICENSE-2.0
1:c8889a7: *
1:c8889a7: * Unless required by applicable law or agreed to in writing,
1:c8889a7: * software distributed under the License is distributed on an
1:c8889a7: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:c8889a7: * KIND, either express or implied.  See the License for the
1:c8889a7: * specific language governing permissions and limitations
1:c8889a7: * under the License.
1:c8889a7: */
1:c8889a7: package org.apache.cassandra.service;
6:c8889a7: 
1:c8889a7: import java.io.IOException;
1:e7a385a: import java.nio.ByteBuffer;
1:b62b0ae: import java.nio.charset.CharacterCodingException;
1:d966ed0: 
1:d966ed0: import org.junit.BeforeClass;
1:d966ed0: import org.junit.Test;
1:c8889a7: 
1:438acfc: import org.apache.cassandra.SchemaLoader;
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:7a75b63: import org.apache.cassandra.config.DatabaseDescriptor;
1:a991b64: import org.apache.cassandra.db.marshal.AsciiType;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:d966ed0: import org.apache.cassandra.thrift.*;
1:789f625: import org.apache.cassandra.utils.ByteBufferUtil;
1:c8889a7: import org.apache.thrift.TException;
1:c8889a7: import org.apache.thrift.protocol.TBinaryProtocol;
1:c8889a7: import org.apache.thrift.protocol.TProtocol;
1:60d7cfa: import org.apache.thrift.transport.TFramedTransport;
1:c8889a7: import org.apache.thrift.transport.TSocket;
1:c8889a7: import org.apache.thrift.transport.TTransport;
1:c8889a7: import org.apache.thrift.transport.TTransportException;
1:c8889a7: 
1:d966ed0: import static org.junit.Assert.assertEquals;
1:d966ed0: import static org.junit.Assert.assertNotNull;
1:c8889a7: 
1:c8889a7: /**
1:c8889a7:  * Example how to use an embedded cassandra service.
1:c8889a7:  *
1:c8889a7:  * Tests connect to localhost:9160 when the embedded server is running.
1:c8889a7:  *
1:c8889a7:  */
1:d2a3827: public class EmbeddedCassandraServiceTest
1:2ffd301: {
1:c8889a7: 
1:c8889a7:     private static EmbeddedCassandraService cassandra;
1:d2a3827:     private static final String KEYSPACE1 = "EmbeddedCassandraServiceTest";
1:d2a3827:     private static final String CF_STANDARD = "Standard1";
1:d2a3827: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void defineSchema() throws Exception
1:d2a3827:     {
1:d2a3827:         SchemaLoader.prepareServer();
1:3e9d345:         setup();
1:d2a3827:         SchemaLoader.createKeyspace(KEYSPACE1,
1:31e3f61:                                     KeyspaceParams.simple(1),
1:31e3f61:                                     CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD, true, false, false)
1:31e3f61:                                                       .addPartitionKey("pk", AsciiType.instance)
1:31e3f61:                                                       .addClusteringColumn("ck", AsciiType.instance)
1:31e3f61:                                                       .addRegularColumn("val", AsciiType.instance)
1:31e3f61:                                                       .build());
1:d2a3827:     }
1:c8889a7: 
1:c8889a7:     /**
1:c8889a7:      * Set embedded cassandra up and spawn it in a new thread.
1:c8889a7:      *
1:c8889a7:      * @throws TTransportException
1:c8889a7:      * @throws IOException
1:c8889a7:      * @throws InterruptedException
1:c8889a7:      */
1:9639f95:     public static void setup() throws TTransportException, IOException, InterruptedException
2:c8889a7:     {
1:d2a3827:         // unique ks / cfs mean no need to clear the schema
1:c8889a7:         cassandra = new EmbeddedCassandraService();
1:1506731:         cassandra.start();
1:2ffd301:     }
1:c8889a7: 
1:c8889a7:     @Test
1:b62b0ae:     public void testEmbeddedCassandraService()
1:b62b0ae:     throws AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException
1:c8889a7:     {
1:c8889a7:         Cassandra.Client client = getClient();
1:d2a3827:         client.set_keyspace(KEYSPACE1);
1:e7a385a: 
1:8358669:         ByteBuffer key_user_id = ByteBufferUtil.bytes("1");
1:07cdfd0: 
1:c8889a7:         long timestamp = System.currentTimeMillis();
1:c8889a7:         ColumnPath cp = new ColumnPath("Standard1");
1:16ba403:         ColumnParent par = new ColumnParent("Standard1");
1:8358669:         cp.column = ByteBufferUtil.bytes("name");
1:c8889a7: 
1:c8889a7:         // insert
1:1adcd1c:         client.insert(key_user_id,
1:1adcd1c:                       par,
1:1adcd1c:                       new Column(ByteBufferUtil.bytes("name")).setValue(ByteBufferUtil.bytes("Ran")).setTimestamp(timestamp),
1:1adcd1c:                       ConsistencyLevel.ONE);
1:c8889a7: 
1:c8889a7:         // read
1:e7a385a:         ColumnOrSuperColumn got = client.get(key_user_id, cp, ConsistencyLevel.ONE);
1:c8889a7: 
1:c8889a7:         // assert
1:c8889a7:         assertNotNull("Got a null ColumnOrSuperColumn", got);
1:b62b0ae:         assertEquals("Ran", ByteBufferUtil.string(got.getColumn().value));
2:c8889a7:     }
1:c8889a7: 
1:c8889a7:     /**
1:c8889a7:      * Gets a connection to the localhost client
1:c8889a7:      *
1:c8889a7:      * @return
1:c8889a7:      * @throws TTransportException
1:c8889a7:      */
1:c8889a7:     private Cassandra.Client getClient() throws TTransportException
1:c8889a7:     {
1:60d7cfa:         TTransport tr = new TFramedTransport(new TSocket("localhost", DatabaseDescriptor.getRpcPort()));
1:c8889a7:         TProtocol proto = new TBinaryProtocol(tr);
1:c8889a7:         Cassandra.Client client = new Cassandra.Client(proto);
1:c8889a7:         tr.open();
1:c8889a7:         return client;
1:c8889a7:     }
1:c8889a7: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
1:                                     KeyspaceParams.simple(1),
1:                                     CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD, true, false, false)
1:                                                       .addPartitionKey("pk", AsciiType.instance)
1:                                                       .addClusteringColumn("ck", AsciiType.instance)
1:                                                       .addRegularColumn("val", AsciiType.instance)
1:                                                       .build());
commit:3e9d345
/////////////////////////////////////////////////////////////////////////
1:         setup();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.marshal.AsciiType;
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 KSMetaData.optsWithRF(1),
0:                 CFMetaData.Builder.create(KEYSPACE1, CF_STANDARD, true, false, false)
0:                                   .addPartitionKey("pk", AsciiType.instance)
0:                                   .addClusteringColumn("ck", AsciiType.instance)
0:                                   .addRegularColumn("val", AsciiType.instance)
0:                                   .build());
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.exceptions.ConfigurationException;
commit:438acfc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.SchemaLoader;
0: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
0: public class EmbeddedCassandraServiceTest extends SchemaLoader
/////////////////////////////////////////////////////////////////////////
0:         Schema.instance.clear(); // Schema are now written on disk and will be reloaded
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1: 
commit:b62b0ae
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.CharacterCodingException;
/////////////////////////////////////////////////////////////////////////
1:     public void testEmbeddedCassandraService()
1:     throws AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException
/////////////////////////////////////////////////////////////////////////
0:                       ByteBufferUtil.bytes("Ran"), timestamp), ConsistencyLevel.ONE);
1:         assertEquals("Ran", ByteBufferUtil.string(got.getColumn().value));
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
0: import org.apache.cassandra.locator.SimpleStrategy;
/////////////////////////////////////////////////////////////////////////
1: public class EmbeddedCassandraServiceTest
1:     private static final String KEYSPACE1 = "EmbeddedCassandraServiceTest";
1:     private static final String CF_STANDARD = "Standard1";
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws Exception
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                                     SimpleStrategy.class,
0:                                     KSMetaData.optsWithRF(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD));
0:         setup();
1:     }
/////////////////////////////////////////////////////////////////////////
1:         // unique ks / cfs mean no need to clear the schema
/////////////////////////////////////////////////////////////////////////
1:         client.set_keyspace(KEYSPACE1);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:9639f95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static void setup() throws TTransportException, IOException, InterruptedException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1:         client.insert(key_user_id,
1:                       par,
1:                       new Column(ByteBufferUtil.bytes("name")).setValue(ByteBufferUtil.bytes("Ran")).setTimestamp(timestamp),
1:                       ConsistencyLevel.ONE);
commit:f178331
/////////////////////////////////////////////////////////////////////////
commit:789f625
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.CleanupHelper;
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0: public class EmbeddedCassandraServiceTest extends CleanupHelper
commit:8358669
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer key_user_id = ByteBufferUtil.bytes("1");
1:         cp.column = ByteBufferUtil.bytes("name");
0:         client.insert(key_user_id, par, new Column(ByteBufferUtil.bytes("name"),
commit:cdb07b1
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.base.Charsets;
/////////////////////////////////////////////////////////////////////////
0:     InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException
/////////////////////////////////////////////////////////////////////////
0:         cp.column = ByteBuffer.wrap("name".getBytes(Charsets.UTF_8));
0:         client.insert(key_user_id, par, new Column(ByteBuffer.wrap("name".getBytes(Charsets.UTF_8)),
0:                 ByteBuffer.wrap( "Ran".getBytes(Charsets.UTF_8)), timestamp), ConsistencyLevel.ONE);
0:         assertEquals("Ran", new String(got.getColumn().getValue(), Charsets.UTF_8));
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:         ByteBuffer key_user_id = ByteBuffer.wrap("1".getBytes());
1:         
0:         cp.column = ByteBuffer.wrap("name".getBytes("utf-8"));
0:         client.insert(key_user_id, par, new Column(ByteBuffer.wrap("name".getBytes("utf-8")),
0:                 ByteBuffer.wrap( "Ran".getBytes("UTF-8")), timestamp), ConsistencyLevel.ONE);
1:         ColumnOrSuperColumn got = client.get(key_user_id, cp, ConsistencyLevel.ONE);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.apache.cassandra.thrift.*;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
0:                 "Ran".getBytes("UTF-8"), timestamp), ConsistencyLevel.ONE);
commit:60d7cfa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.transport.TFramedTransport;
/////////////////////////////////////////////////////////////////////////
1:         TTransport tr = new TFramedTransport(new TSocket("localhost", DatabaseDescriptor.getRpcPort()));
commit:cba59a8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.Clock;
/////////////////////////////////////////////////////////////////////////
0:         Clock clock = new Clock();
0:         clock.setTimestamp(timestamp);
0:                 "Ran".getBytes("UTF-8"), clock), ConsistencyLevel.ONE);
commit:0438494
/////////////////////////////////////////////////////////////////////////
0:         // Manually load tables from the test configuration file.
0:         for (KSMetaData table : DatabaseDescriptor.readTablesFromYaml())
commit:16ba403
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.Column;
0: import org.apache.cassandra.thrift.Column;
0: import org.apache.cassandra.thrift.ColumnParent;
0: import org.apache.cassandra.thrift.ColumnParent;
/////////////////////////////////////////////////////////////////////////
1:         ColumnParent par = new ColumnParent("Standard1");
0:         client.insert("Keyspace1", key_user_id, par, 
0:                 new Column("name".getBytes("utf-8"), "Ran".getBytes("UTF-8"), timestamp), ConsistencyLevel.ONE);
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1506731
/////////////////////////////////////////////////////////////////////////
1:         cassandra.start();
commit:2797a47
/////////////////////////////////////////////////////////////////////////
0:         TTransport tr = new TSocket("localhost", DatabaseDescriptor.getRpcPort());
commit:2ffd301
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.CFMetaData;
/////////////////////////////////////////////////////////////////////////
1:         {
0:             for (CFMetaData cfm : table.cfMetaData().values())
0:                 CFMetaData.map(cfm);
1:         }
commit:f3a4e17
/////////////////////////////////////////////////////////////////////////
0:         byte[] key_user_id = "1".getBytes();
commit:94f8a8e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.KSMetaData;
/////////////////////////////////////////////////////////////////////////
0:         for (KSMetaData table : DatabaseDescriptor.readTablesFromXml())
0:             DatabaseDescriptor.setTableDefinition(table, DatabaseDescriptor.getDefsVersion());
commit:7a75b63
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
0:     public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException
0:         DatabaseDescriptor.readTablesFromXml();
commit:c8889a7
/////////////////////////////////////////////////////////////////////////
1: /*
1: * Licensed to the Apache Software Foundation (ASF) under one
1: * or more contributor license agreements.  See the NOTICE file
1: * distributed with this work for additional information
1: * regarding copyright ownership.  The ASF licenses this file
1: * to you under the Apache License, Version 2.0 (the
1: * "License"); you may not use this file except in compliance
1: * with the License.  You may obtain a copy of the License at
1: *
1: *    http://www.apache.org/licenses/LICENSE-2.0
1: *
1: * Unless required by applicable law or agreed to in writing,
1: * software distributed under the License is distributed on an
1: * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1: * KIND, either express or implied.  See the License for the
1: * specific language governing permissions and limitations
1: * under the License.
1: */
1: package org.apache.cassandra.service;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.IOException;
0: import java.io.UnsupportedEncodingException;
1: 
0: import org.apache.cassandra.thrift.Cassandra;
0: import org.apache.cassandra.thrift.ColumnOrSuperColumn;
0: import org.apache.cassandra.thrift.ColumnPath;
0: import org.apache.cassandra.thrift.ConsistencyLevel;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.thrift.NotFoundException;
0: import org.apache.cassandra.thrift.TimedOutException;
0: import org.apache.cassandra.thrift.UnavailableException;
1: import org.apache.thrift.TException;
1: import org.apache.thrift.protocol.TBinaryProtocol;
1: import org.apache.thrift.protocol.TProtocol;
1: import org.apache.thrift.transport.TSocket;
1: import org.apache.thrift.transport.TTransport;
1: import org.apache.thrift.transport.TTransportException;
0: import org.junit.BeforeClass;
0: import org.junit.Test;
1: 
1: /**
1:  * Example how to use an embedded cassandra service.
1:  *
1:  * Tests connect to localhost:9160 when the embedded server is running.
1:  *
0:  * @author Ran Tavory (rantav@gmail.com)
1:  *
1:  */
0: public class EmbeddedCassandraServiceTest
1: {
1: 
1:     private static EmbeddedCassandraService cassandra;
1: 
1:     /**
1:      * Set embedded cassandra up and spawn it in a new thread.
1:      *
1:      * @throws TTransportException
1:      * @throws IOException
1:      * @throws InterruptedException
1:      */
0:     @BeforeClass
0:     public static void setup() throws TTransportException, IOException, InterruptedException
1:     {
1: 
0:         // Tell cassandra where the configuration files are.
0:         // Use the test configuration file.
0:         System.setProperty("storage-config", "test/conf");
1: 
1:         cassandra = new EmbeddedCassandraService();
0:         cassandra.init();
1: 
0:         // spawn cassandra in a new thread
0:         Thread t = new Thread(cassandra);
0:         t.setDaemon(true);
0:         t.start();
1:     }
1: 
1:     @Test
0:     public void testEmbeddedCassandraService() throws UnsupportedEncodingException, InvalidRequestException,
0:             UnavailableException, TimedOutException, TException, NotFoundException
1:     {
1:         Cassandra.Client client = getClient();
1: 
0:         String key_user_id = "1";
1: 
1:         long timestamp = System.currentTimeMillis();
1:         ColumnPath cp = new ColumnPath("Standard1");
0:         cp.setColumn("name".getBytes("utf-8"));
1: 
1:         // insert
0:         client.insert("Keyspace1", key_user_id, cp, "Ran".getBytes("UTF-8"),
0:                 timestamp, ConsistencyLevel.ONE);
1: 
1:         // read
0:         ColumnOrSuperColumn got = client.get("Keyspace1", key_user_id, cp,
0:                 ConsistencyLevel.ONE);
1: 
1:         // assert
1:         assertNotNull("Got a null ColumnOrSuperColumn", got);
0:         assertEquals("Ran", new String(got.getColumn().getValue(), "utf-8"));
1:     }
1: 
1:     /**
1:      * Gets a connection to the localhost client
1:      *
1:      * @return
1:      * @throws TTransportException
1:      */
1:     private Cassandra.Client getClient() throws TTransportException
1:     {
0:         TTransport tr = new TSocket("localhost", 9170);
1:         TProtocol proto = new TBinaryProtocol(tr);
1:         Cassandra.Client client = new Cassandra.Client(proto);
1:         tr.open();
1:         return client;
1:     }
1: }
author:Eric Evans
-------------------------------------------------------------------------------
commit:e649d0f
/////////////////////////////////////////////////////////////////////////
0:         client.set_keyspace("Keyspace1");
commit:cb3455f
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.thrift.AuthenticationRequest;
0: import org.apache.cassandra.thrift.AuthorizationException;
0: import org.apache.cassandra.thrift.AuthenticationException;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public void testEmbeddedCassandraService() throws AuthenticationException, AuthorizationException,
0:     UnsupportedEncodingException, InvalidRequestException,
0:         client.login("Keyspace1", new AuthenticationRequest(new HashMap<String, String>()));
/////////////////////////////////////////////////////////////////////////
0:         client.insert(key_user_id, par, new Column("name".getBytes("utf-8"),
0:                 "Ran".getBytes("UTF-8"), timestamp), ConsistencyLevel.ONE);
0:         ColumnOrSuperColumn got = client.get(key_user_id, cp,
============================================================================