1:c8d3cc1: /*
1:c8d3cc1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c8d3cc1:  * or more contributor license agreements.  See the NOTICE file
1:c8d3cc1:  * distributed with this work for additional information
1:c8d3cc1:  * regarding copyright ownership.  The ASF licenses this file
1:c8d3cc1:  * to you under the Apache License, Version 2.0 (the
1:c8d3cc1:  * "License"); you may not use this file except in compliance
1:c8d3cc1:  * with the License.  You may obtain a copy of the License at
1:c8d3cc1:  *
1:c8d3cc1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c8d3cc1:  *
1:c8d3cc1:  * Unless required by applicable law or agreed to in writing, software
1:c8d3cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c8d3cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8d3cc1:  * See the License for the specific language governing permissions and
1:c8d3cc1:  * limitations under the License.
1:c8d3cc1:  */
1:c8d3cc1: package org.apache.cassandra;
1:c8d3cc1: 
1:c8d3cc1: import java.io.ByteArrayOutputStream;
1:c8d3cc1: import java.io.IOException;
1:c8d3cc1: import java.io.OutputStream;
1:c8d3cc1: import java.io.PrintStream;
1:c8d3cc1: import java.util.Locale;
1:c8d3cc1: 
1:c8d3cc1: import org.slf4j.Logger;
1:c8d3cc1: import org.slf4j.LoggerFactory;
1:c8d3cc1: 
1:c8d3cc1: import ch.qos.logback.core.status.Status;
1:c8d3cc1: import ch.qos.logback.core.status.StatusListener;
1:c8d3cc1: 
1:c8d3cc1: /*
1:c8d3cc1:  * Listen for logback readiness and then redirect stdout/stderr to logback
1:c8d3cc1:  */
1:c8d3cc1: public class LogbackStatusListener implements StatusListener
1:c8d3cc1: {
1:c8d3cc1: 
1:c8d3cc1:     public static final PrintStream originalOut = System.out;
1:c8d3cc1: 
1:c8d3cc1:     public static final PrintStream originalErr = System.err;
1:c8d3cc1: 
1:c8d3cc1:     private boolean hadError = false;
1:c8d3cc1: 
1:c8d3cc1:     private PrintStream replacementOut;
1:c8d3cc1: 
1:c8d3cc1:     private PrintStream replacementErr;
1:c8d3cc1: 
1:c8d3cc1:     @Override
1:c8d3cc1:     public void addStatusEvent(Status s)
1:c8d3cc1:     {
1:c8d3cc1:         if (s.getLevel() != 0 || s.getEffectiveLevel() != 0)
1:c8d3cc1:             hadError = true;
1:c8d3cc1: 
1:c8d3cc1:         if (!hadError && s.getMessage().equals("Registering current configuration as safe fallback point"))
1:c8d3cc1:         {
1:c8d3cc1:             try
1:c8d3cc1:             {
1:c8d3cc1:                 installReplacementStreams();
1:c8d3cc1:             }
1:c8d3cc1:             catch (Exception e)
1:c8d3cc1:             {
1:c8d3cc1:                 throw new RuntimeException(e);
1:c8d3cc1:             }
1:c8d3cc1:         }
1:c8d3cc1: 
1:c8d3cc1:         if (s.getMessage().equals("Logback context being closed via shutdown hook"))
1:c8d3cc1:         {
1:c8d3cc1:             if (replacementOut != null) replacementOut.flush();
1:c8d3cc1:             if (replacementErr != null) replacementErr.flush();
1:c8d3cc1:             System.setErr(originalErr);
1:c8d3cc1:             System.setOut(originalOut);
1:c8d3cc1:         }
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     private void installReplacementStreams() throws Exception
1:c8d3cc1:     {
1:c8d3cc1:         Logger stdoutLogger = LoggerFactory.getLogger("stdout");
1:c8d3cc1:         Logger stderrLogger = LoggerFactory.getLogger("stderr");
1:c8d3cc1: 
1:c8d3cc1:         replacementOut = wrapLogger(stdoutLogger, originalOut, "sun.stdout.encoding", false);
1:c8d3cc1:         System.setOut(replacementOut);
1:c8d3cc1:         replacementErr = wrapLogger(stderrLogger, originalErr, "sun.stderr.encoding", true);
1:c8d3cc1:         System.setErr(replacementErr);
1:c8d3cc1:     }
1:c8d3cc1: 
1:c8d3cc1:     private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception
1:c8d3cc1:     {
1:c8d3cc1:         final String encoding = System.getProperty(encodingProperty);
1:c8d3cc1:         OutputStream os = new OutputStream()
1:c8d3cc1:         {
1:c8d3cc1: 
1:c8d3cc1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(int b) throws IOException
1:c8d3cc1:             {
1:c8d3cc1:                 baos.write(b);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(byte[] b, int offset, int length)
1:c8d3cc1:             {
1:c8d3cc1:                 baos.write(b,  offset, length);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(byte[] b)
1:c8d3cc1:             {
1:c8d3cc1:                 write(b, 0, b.length);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void flush() throws IOException
1:c8d3cc1:             {
1:c8d3cc1:                 try
1:c8d3cc1:                 {
1:c8d3cc1:                     //Filter out stupid PrintStream empty flushes
1:c8d3cc1:                     if (baos.size() == 0) return;
1:c8d3cc1: 
1:c8d3cc1:                     //Filter out newlines, log framework provides its own
1:c8d3cc1:                     if (baos.size() == 1)
1:c8d3cc1:                     {
1:c8d3cc1:                         byte[] bytes = baos.toByteArray();
1:c8d3cc1:                         if (bytes[0] == 0xA)
1:c8d3cc1:                             return;
1:c8d3cc1:                     }
1:c8d3cc1: 
1:c8d3cc1:                     //Filter out Windows newline
1:c8d3cc1:                     if (baos.size() == 2)
1:c8d3cc1:                     {
1:c8d3cc1:                         byte[] bytes = baos.toByteArray();
1:c8d3cc1:                         if (bytes[0] == 0xD && bytes[1] == 0xA)
1:c8d3cc1:                             return;
1:c8d3cc1:                     }
1:c8d3cc1: 
1:c8d3cc1:                     String statement;
1:c8d3cc1:                     if (encoding != null)
1:c8d3cc1:                         statement = new String(baos.toByteArray(), encoding);
1:c8d3cc1:                     else
1:c8d3cc1:                         statement = new String(baos.toByteArray());
1:c8d3cc1: 
1:c8d3cc1:                     if (error)
1:c8d3cc1:                         logger.error(statement);
1:c8d3cc1:                     else
1:c8d3cc1:                         logger.info(statement);
1:c8d3cc1:                 }
1:c8d3cc1:                 finally
1:c8d3cc1:                 {
1:c8d3cc1:                     baos.reset();
1:c8d3cc1:                 }
1:c8d3cc1:             }
1:c8d3cc1:         };
1:c8d3cc1: 
1:c8d3cc1:         if (encoding != null)
1:c8d3cc1:             return new PrintStream(os, true, encoding);
1:c8d3cc1:         return new PrintStream(os, true)
1:c8d3cc1:         {
1:c8d3cc1: 
1:c8d3cc1:             private long asyncAppenderThreadId = Long.MIN_VALUE;
1:c8d3cc1: 
1:c8d3cc1:             /*
1:c8d3cc1:              * Long and the short of it is that we don't want to serve logback a fake System.out/err.
1:c8d3cc1:              * ConsoleAppender is replaced so it always goes to the real System.out/err, but logback itself
1:c8d3cc1:              * will at times try to log to System.out/err when it has issues.
1:c8d3cc1:              *
1:c8d3cc1:              * Now here is the problem. There is a deadlock if a thread logs to System.out, blocks on the async
1:c8d3cc1:              * appender queue, and the async appender thread tries to log to System.out directly as part of some
1:c8d3cc1:              * internal logback issue.
1:c8d3cc1:              *
1:c8d3cc1:              * So to prevent this we have to exhaustively check before locking in the PrintStream and forward
1:c8d3cc1:              * to real System.out/err if it is the async appender
1:c8d3cc1:              */
1:c8d3cc1:             private boolean isAsyncAppender()
1:c8d3cc1:             {
1:c8d3cc1:                 //Set the thread id based on the name
1:c8d3cc1:                 if (asyncAppenderThreadId == Long.MIN_VALUE)
1:c8d3cc1:                         asyncAppenderThreadId = Thread.currentThread().getName().equals("AsyncAppender-Worker-ASYNC") ? Thread.currentThread().getId() : asyncAppenderThreadId;
1:c8d3cc1:                 if (Thread.currentThread().getId() == asyncAppenderThreadId)
1:c8d3cc1:                     original.println("Was in async appender");
1:c8d3cc1:                 return Thread.currentThread().getId() == asyncAppenderThreadId;
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void flush()
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.flush();
1:c8d3cc1:                 else
1:c8d3cc1:                     super.flush();
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void close()
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.close();
1:c8d3cc1:                 else
1:c8d3cc1:                     super.flush();
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(int b)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.write(b);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.write(b);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void write(byte[] buf, int off, int len)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.write(buf, off, len);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.write(buf, off, len);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(boolean b)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(b);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(b);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(char c)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(c);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(c);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(int i)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(i);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(i);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(long l)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(l);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(l);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(float f)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(f);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(f);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(double d)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(d);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(d);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(char[] s)
1:c8d3cc1:             {
1:c8d3cc1:                 if(isAsyncAppender())
1:c8d3cc1:                     original.println(s);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(s);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(String s)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(s);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(s);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void print(Object obj)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.print(obj);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.print(obj);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println()
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println();
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println();
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(boolean v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(char v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(int v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(long v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(float v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(double v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(char[] v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(String v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public void println(Object v)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     original.println(v);
1:c8d3cc1:                 else
1:c8d3cc1:                     super.println(v);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream printf(String format, Object... args)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.printf(format, args);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.printf(format, args);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream printf(Locale l, String format, Object... args)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.printf(l, format, args);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.printf(l, format, args);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream format(String format, Object... args)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.format(format, args);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.format(format, args);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream format(Locale l, String format, Object... args)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.format(l, format, args);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.format(l, format, args);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream append(CharSequence csq)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.append(csq);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.append(csq);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream append(CharSequence csq, int start, int end)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.append(csq, start, end);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.append(csq, start, end);
1:c8d3cc1:             }
1:c8d3cc1: 
1:c8d3cc1:             @Override
1:c8d3cc1:             public PrintStream append(char c)
1:c8d3cc1:             {
1:c8d3cc1:                 if (isAsyncAppender())
1:c8d3cc1:                     return original.append(c);
1:c8d3cc1:                 else
1:c8d3cc1:                     return super.append(c);
1:c8d3cc1:             }
1:c8d3cc1:         };
1:c8d3cc1:     }
1:c8d3cc1: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:c8d3cc1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: import java.util.Locale;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import ch.qos.logback.core.status.Status;
1: import ch.qos.logback.core.status.StatusListener;
1: 
1: /*
1:  * Listen for logback readiness and then redirect stdout/stderr to logback
1:  */
1: public class LogbackStatusListener implements StatusListener
1: {
1: 
1:     public static final PrintStream originalOut = System.out;
1: 
1:     public static final PrintStream originalErr = System.err;
1: 
1:     private boolean hadError = false;
1: 
1:     private PrintStream replacementOut;
1: 
1:     private PrintStream replacementErr;
1: 
1:     @Override
1:     public void addStatusEvent(Status s)
1:     {
1:         if (s.getLevel() != 0 || s.getEffectiveLevel() != 0)
1:             hadError = true;
1: 
1:         if (!hadError && s.getMessage().equals("Registering current configuration as safe fallback point"))
1:         {
1:             try
1:             {
1:                 installReplacementStreams();
1:             }
1:             catch (Exception e)
1:             {
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         if (s.getMessage().equals("Logback context being closed via shutdown hook"))
1:         {
1:             if (replacementOut != null) replacementOut.flush();
1:             if (replacementErr != null) replacementErr.flush();
1:             System.setErr(originalErr);
1:             System.setOut(originalOut);
1:         }
1:     }
1: 
1:     private void installReplacementStreams() throws Exception
1:     {
1:         Logger stdoutLogger = LoggerFactory.getLogger("stdout");
1:         Logger stderrLogger = LoggerFactory.getLogger("stderr");
1: 
1:         replacementOut = wrapLogger(stdoutLogger, originalOut, "sun.stdout.encoding", false);
1:         System.setOut(replacementOut);
1:         replacementErr = wrapLogger(stderrLogger, originalErr, "sun.stderr.encoding", true);
1:         System.setErr(replacementErr);
1:     }
1: 
1:     private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception
1:     {
1:         final String encoding = System.getProperty(encodingProperty);
1:         OutputStream os = new OutputStream()
1:         {
1: 
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1: 
1:             @Override
1:             public void write(int b) throws IOException
1:             {
1:                 baos.write(b);
1:             }
1: 
1:             @Override
1:             public void write(byte[] b, int offset, int length)
1:             {
1:                 baos.write(b,  offset, length);
1:             }
1: 
1:             @Override
1:             public void write(byte[] b)
1:             {
1:                 write(b, 0, b.length);
1:             }
1: 
1:             @Override
1:             public void flush() throws IOException
1:             {
1:                 try
1:                 {
1:                     //Filter out stupid PrintStream empty flushes
1:                     if (baos.size() == 0) return;
1: 
1:                     //Filter out newlines, log framework provides its own
1:                     if (baos.size() == 1)
1:                     {
1:                         byte[] bytes = baos.toByteArray();
1:                         if (bytes[0] == 0xA)
1:                             return;
1:                     }
1: 
1:                     //Filter out Windows newline
1:                     if (baos.size() == 2)
1:                     {
1:                         byte[] bytes = baos.toByteArray();
1:                         if (bytes[0] == 0xD && bytes[1] == 0xA)
1:                             return;
1:                     }
1: 
1:                     String statement;
1:                     if (encoding != null)
1:                         statement = new String(baos.toByteArray(), encoding);
1:                     else
1:                         statement = new String(baos.toByteArray());
1: 
1:                     if (error)
1:                         logger.error(statement);
1:                     else
1:                         logger.info(statement);
1:                 }
1:                 finally
1:                 {
1:                     baos.reset();
1:                 }
1:             }
1:         };
1: 
1:         if (encoding != null)
1:             return new PrintStream(os, true, encoding);
1:         return new PrintStream(os, true)
1:         {
1: 
1:             private long asyncAppenderThreadId = Long.MIN_VALUE;
1: 
1:             /*
1:              * Long and the short of it is that we don't want to serve logback a fake System.out/err.
1:              * ConsoleAppender is replaced so it always goes to the real System.out/err, but logback itself
1:              * will at times try to log to System.out/err when it has issues.
1:              *
1:              * Now here is the problem. There is a deadlock if a thread logs to System.out, blocks on the async
1:              * appender queue, and the async appender thread tries to log to System.out directly as part of some
1:              * internal logback issue.
1:              *
1:              * So to prevent this we have to exhaustively check before locking in the PrintStream and forward
1:              * to real System.out/err if it is the async appender
1:              */
1:             private boolean isAsyncAppender()
1:             {
1:                 //Set the thread id based on the name
1:                 if (asyncAppenderThreadId == Long.MIN_VALUE)
1:                         asyncAppenderThreadId = Thread.currentThread().getName().equals("AsyncAppender-Worker-ASYNC") ? Thread.currentThread().getId() : asyncAppenderThreadId;
1:                 if (Thread.currentThread().getId() == asyncAppenderThreadId)
1:                     original.println("Was in async appender");
1:                 return Thread.currentThread().getId() == asyncAppenderThreadId;
1:             }
1: 
1:             @Override
1:             public void flush()
1:             {
1:                 if (isAsyncAppender())
1:                     original.flush();
1:                 else
1:                     super.flush();
1:             }
1: 
1:             @Override
1:             public void close()
1:             {
1:                 if (isAsyncAppender())
1:                     original.close();
1:                 else
1:                     super.flush();
1:             }
1: 
1:             @Override
1:             public void write(int b)
1:             {
1:                 if (isAsyncAppender())
1:                     original.write(b);
1:                 else
1:                     super.write(b);
1:             }
1: 
1:             @Override
1:             public void write(byte[] buf, int off, int len)
1:             {
1:                 if (isAsyncAppender())
1:                     original.write(buf, off, len);
1:                 else
1:                     super.write(buf, off, len);
1:             }
1: 
1:             @Override
1:             public void print(boolean b)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(b);
1:                 else
1:                     super.print(b);
1:             }
1: 
1:             @Override
1:             public void print(char c)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(c);
1:                 else
1:                     super.print(c);
1:             }
1: 
1:             @Override
1:             public void print(int i)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(i);
1:                 else
1:                     super.print(i);
1:             }
1: 
1:             @Override
1:             public void print(long l)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(l);
1:                 else
1:                     super.print(l);
1:             }
1: 
1:             @Override
1:             public void print(float f)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(f);
1:                 else
1:                     super.print(f);
1:             }
1: 
1:             @Override
1:             public void print(double d)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(d);
1:                 else
1:                     super.print(d);
1:             }
1: 
1:             @Override
1:             public void print(char[] s)
1:             {
1:                 if(isAsyncAppender())
1:                     original.println(s);
1:                 else
1:                     super.print(s);
1:             }
1: 
1:             @Override
1:             public void print(String s)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(s);
1:                 else
1:                     super.print(s);
1:             }
1: 
1:             @Override
1:             public void print(Object obj)
1:             {
1:                 if (isAsyncAppender())
1:                     original.print(obj);
1:                 else
1:                     super.print(obj);
1:             }
1: 
1:             @Override
1:             public void println()
1:             {
1:                 if (isAsyncAppender())
1:                     original.println();
1:                 else
1:                     super.println();
1:             }
1: 
1:             @Override
1:             public void println(boolean v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(char v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(int v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(long v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(float v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(double v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(char[] v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(String v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public void println(Object v)
1:             {
1:                 if (isAsyncAppender())
1:                     original.println(v);
1:                 else
1:                     super.println(v);
1:             }
1: 
1:             @Override
1:             public PrintStream printf(String format, Object... args)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.printf(format, args);
1:                 else
1:                     return super.printf(format, args);
1:             }
1: 
1:             @Override
1:             public PrintStream printf(Locale l, String format, Object... args)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.printf(l, format, args);
1:                 else
1:                     return super.printf(l, format, args);
1:             }
1: 
1:             @Override
1:             public PrintStream format(String format, Object... args)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.format(format, args);
1:                 else
1:                     return super.format(format, args);
1:             }
1: 
1:             @Override
1:             public PrintStream format(Locale l, String format, Object... args)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.format(l, format, args);
1:                 else
1:                     return super.format(l, format, args);
1:             }
1: 
1:             @Override
1:             public PrintStream append(CharSequence csq)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.append(csq);
1:                 else
1:                     return super.append(csq);
1:             }
1: 
1:             @Override
1:             public PrintStream append(CharSequence csq, int start, int end)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.append(csq, start, end);
1:                 else
1:                     return super.append(csq, start, end);
1:             }
1: 
1:             @Override
1:             public PrintStream append(char c)
1:             {
1:                 if (isAsyncAppender())
1:                     return original.append(c);
1:                 else
1:                     return super.append(c);
1:             }
1:         };
1:     }
1: }
============================================================================