1:35a945e: /*
1:35a945e:  * Licensed to the Apache Software Foundation (ASF) under one
1:35a945e:  * or more contributor license agreements.  See the NOTICE file
1:35a945e:  * distributed with this work for additional information
1:35a945e:  * regarding copyright ownership.  The ASF licenses this file
1:35a945e:  * to you under the Apache License, Version 2.0 (the
1:35a945e:  * "License"); you may not use this file except in compliance
1:35a945e:  * with the License.  You may obtain a copy of the License at
1:35a945e:  *
1:35a945e:  *     http://www.apache.org/licenses/LICENSE-2.0
1:35a945e:  *
1:35a945e:  * Unless required by applicable law or agreed to in writing, software
1:35a945e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:35a945e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:35a945e:  * See the License for the specific language governing permissions and
1:35a945e:  * limitations under the License.
1:35a945e:  */
1:35a945e: package org.apache.cassandra.db.marshal;
2:35a945e: 
1:35a945e: import java.nio.ByteBuffer;
1:35a945e: 
1:35a945e: import org.apache.cassandra.cql3.CQL3Type;
1:35a945e: import org.apache.cassandra.cql3.Constants;
1:35a945e: import org.apache.cassandra.cql3.Term;
1:35a945e: import org.apache.cassandra.serializers.MarshalException;
1:35a945e: import org.apache.cassandra.serializers.ShortSerializer;
1:35a945e: import org.apache.cassandra.serializers.TypeSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:35a945e: import org.apache.cassandra.utils.ByteBufferUtil;
1:35a945e: 
1:35a945e: public class ShortType extends AbstractType<Short>
3:35a945e: {
1:35a945e:     public static final ShortType instance = new ShortType();
1:35a945e: 
1:35a945e:     ShortType()
1:35a945e:     {
1:07594ee:         super(ComparisonType.CUSTOM);
1:35a945e:     } // singleton
1:35a945e: 
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:35a945e:     {
1:35a945e:         int diff = o1.get(o1.position()) - o2.get(o2.position());
1:35a945e:         if (diff != 0)
1:35a945e:             return diff;
1:35a945e: 
1:35a945e:         return ByteBufferUtil.compareUnsigned(o1, o2);
3:35a945e:     }
1:35a945e: 
1:35a945e:     public ByteBuffer fromString(String source) throws MarshalException
1:35a945e:     {
1:35a945e:         // Return an empty ByteBuffer for an empty string.
1:35a945e:         if (source.isEmpty())
1:35a945e:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1:35a945e: 
1:35a945e:         short s;
1:35a945e: 
2:35a945e:         try
1:35a945e:         {
1:35a945e:             s = Short.parseShort(source);
1:35a945e:         }
1:35a945e:         catch (Exception e)
1:35a945e:         {
1:35a945e:             throw new MarshalException(String.format("Unable to make short from '%s'", source), e);
1:35a945e:         }
1:35a945e: 
1:35a945e:         return decompose(s);
1:35a945e:     }
1:35a945e: 
1:35a945e:     public Term fromJSONObject(Object parsed) throws MarshalException
1:35a945e:     {
1:dc8a017:         if (parsed instanceof String || parsed instanceof Number)
1:dc8a017:             return new Constants.Value(fromString(String.valueOf(parsed)));
1:35a945e: 
1:dc8a017:         throw new MarshalException(String.format(
1:dc8a017:                 "Expected a short value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:35a945e:     }
1:35a945e: 
1:35a945e:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:35a945e:     {
1:35a945e:         return getSerializer().deserialize(buffer).toString();
1:35a945e:     }
1:35a945e: 
1:35a945e:     @Override
1:35a945e:     public CQL3Type asCQL3Type()
1:35a945e:     {
1:35a945e:         return CQL3Type.Native.SMALLINT;
1:35a945e:     }
1:35a945e: 
1:35a945e:     public TypeSerializer<Short> getSerializer()
1:35a945e:     {
1:35a945e:         return ShortSerializer.instance;
1:35a945e:     }
1:35a945e: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:2d73f3b
author:Pawe? Rychlik
-------------------------------------------------------------------------------
commit:dc8a017
/////////////////////////////////////////////////////////////////////////
1:         if (parsed instanceof String || parsed instanceof Number)
1:             return new Constants.Value(fromString(String.valueOf(parsed)));
1:         throw new MarshalException(String.format(
1:                 "Expected a short value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM);
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:35a945e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.cassandra.cql3.CQL3Type;
1: import org.apache.cassandra.cql3.Constants;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.apache.cassandra.serializers.ShortSerializer;
1: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
1: public class ShortType extends AbstractType<Short>
1: {
1:     public static final ShortType instance = new ShortType();
1: 
1:     ShortType()
1:     {
1:     } // singleton
1: 
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         int diff = o1.get(o1.position()) - o2.get(o2.position());
1:         if (diff != 0)
1:             return diff;
1: 
1:         return ByteBufferUtil.compareUnsigned(o1, o2);
1:     }
1: 
1:     public ByteBuffer fromString(String source) throws MarshalException
1:     {
1:         // Return an empty ByteBuffer for an empty string.
1:         if (source.isEmpty())
1:             return ByteBufferUtil.EMPTY_BYTE_BUFFER;
1: 
1:         short s;
1: 
1:         try
1:         {
1:             s = Short.parseShort(source);
1:         }
1:         catch (Exception e)
1:         {
1:             throw new MarshalException(String.format("Unable to make short from '%s'", source), e);
1:         }
1: 
1:         return decompose(s);
1:     }
1: 
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         try
1:         {
0:             if (parsed instanceof String)
0:                 return new Constants.Value(fromString((String) parsed));
1: 
0:             Number parsedNumber = (Number) parsed;
0:             if (!(parsedNumber instanceof Short))
0:                 throw new MarshalException(String.format("Expected a short value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1: 
0:             return new Constants.Value(getSerializer().serialize(parsedNumber.shortValue()));
1:         }
0:         catch (ClassCastException exc)
1:         {
0:             throw new MarshalException(String.format(
0:                     "Expected a short value, but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:         }
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return getSerializer().deserialize(buffer).toString();
1:     }
1: 
1:     @Override
1:     public CQL3Type asCQL3Type()
1:     {
1:         return CQL3Type.Native.SMALLINT;
1:     }
1: 
1:     public TypeSerializer<Short> getSerializer()
1:     {
1:         return ShortSerializer.instance;
1:     }
1: }
============================================================================