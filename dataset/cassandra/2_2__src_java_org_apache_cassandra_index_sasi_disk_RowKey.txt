1:7d857b4: /*
1:7d857b4:  * Licensed to the Apache Software Foundation (ASF) under one
1:7d857b4:  * or more contributor license agreements.  See the NOTICE file
1:7d857b4:  * distributed with this work for additional information
1:7d857b4:  * regarding copyclustering ownership.  The ASF licenses this file
1:7d857b4:  * to you under the Apache License, Version 2.0 (the
1:7d857b4:  * "License"); you may not use this file except in compliance
1:7d857b4:  * with the License.  You may obtain a copy of the License at
1:7d857b4:  *
1:7d857b4:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7d857b4:  *
1:7d857b4:  * Unless required by applicable law or agreed to in writing, software
1:7d857b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d857b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d857b4:  * See the License for the specific language governing permissions and
1:7d857b4:  * limitations under the License.
1:7d857b4:  */
1:7d857b4: 
1:7d857b4: package org.apache.cassandra.index.sasi.disk;
1:7d857b4: 
1:7d857b4: import java.util.*;
1:7d857b4: import java.util.stream.*;
1:7d857b4: 
1:ea77d00: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:7d857b4: 
1:7d857b4: import org.apache.cassandra.config.CFMetaData;
1:7d857b4: import org.apache.cassandra.db.*;
1:7d857b4: import org.apache.cassandra.utils.*;
1:7d857b4: 
1:7d857b4: /**
1:7d857b4:  * Primary key of the found row, a combination of the Partition Key
1:7d857b4:  * and clustering that belongs to the row.
1:7d857b4:  */
1:7d857b4: public class RowKey implements Comparable<RowKey>
1:7d857b4: {
1:7d857b4: 
1:7d857b4:     public final DecoratedKey decoratedKey;
1:7d857b4:     public final Clustering clustering;
1:7d857b4: 
1:7d857b4:     private final ClusteringComparator comparator;
1:7d857b4: 
1:7d857b4:     public RowKey(DecoratedKey primaryKey, Clustering clustering, ClusteringComparator comparator)
1:7d857b4:     {
1:7d857b4:         this.decoratedKey = primaryKey;
1:7d857b4:         this.clustering = clustering;
1:7d857b4:         this.comparator = comparator;
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public boolean equals(Object o)
1:7d857b4:     {
1:7d857b4:         if (this == o) return true;
1:7d857b4:         if (o == null || getClass() != o.getClass()) return false;
1:7d857b4: 
1:7d857b4:         RowKey rowKey = (RowKey) o;
1:7d857b4: 
1:7d857b4:         if (decoratedKey != null ? !decoratedKey.equals(rowKey.decoratedKey) : rowKey.decoratedKey != null)
1:7d857b4:             return false;
1:7d857b4:         return clustering != null ? clustering.equals(rowKey.clustering) : rowKey.clustering == null;
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public int hashCode()
1:7d857b4:     {
1:f0b229a:         return new HashCodeBuilder().append(decoratedKey).append(clustering).toHashCode();
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public int compareTo(RowKey other)
1:7d857b4:     {
1:7d857b4:         int cmp = this.decoratedKey.compareTo(other.decoratedKey);
1:7d857b4:         if (cmp == 0 && clustering != null)
1:7d857b4:         {
1:7d857b4:             // Both clustering and rows should match
1:7d857b4:             if (clustering.kind() == ClusteringPrefix.Kind.STATIC_CLUSTERING || other.clustering.kind() == ClusteringPrefix.Kind.STATIC_CLUSTERING)
1:7d857b4:                 return 0;
1:7d857b4: 
1:7d857b4:             return comparator.compare(this.clustering, other.clustering);
1:7d857b4:         }
1:7d857b4:         else
1:7d857b4:         {
1:7d857b4:             return cmp;
1:7d857b4:         }
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     public static RowKeyComparator COMPARATOR = new RowKeyComparator();
1:7d857b4: 
1:7d857b4:     public String toString(CFMetaData metadata)
1:7d857b4:     {
1:7d857b4:         return String.format("RowKey: { pk : %s, clustering: %s}",
1:7d857b4:                              metadata.getKeyValidator().getString(decoratedKey.getKey()),
1:7d857b4:                              clustering.toString(metadata));
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     @Override
1:7d857b4:     public String toString()
1:7d857b4:     {
1:7d857b4:         return String.format("RowKey: { pk : %s, clustering: %s}",
1:7d857b4:                              ByteBufferUtil.bytesToHex(decoratedKey.getKey()),
1:7d857b4:                              String.join(",", Arrays.stream(clustering.getRawValues()).map(ByteBufferUtil::bytesToHex).collect(Collectors.toList())));
1:7d857b4:     }
1:7d857b4: 
1:7d857b4:     private static class RowKeyComparator implements Comparator<RowKey>
1:7d857b4:     {
1:7d857b4:         public int compare(RowKey o1, RowKey o2)
1:7d857b4:         {
1:7d857b4:             return o1.compareTo(o2);
1:7d857b4:         }
1:7d857b4:     }
1:7d857b4: 
1:7d857b4: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f0b229a
/////////////////////////////////////////////////////////////////////////
1:         return new HashCodeBuilder().append(decoratedKey).append(clustering).toHashCode();
commit:ea77d00
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyclustering ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.sasi.disk;
1: 
1: import java.util.*;
1: import java.util.stream.*;
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.utils.*;
1: 
1: /**
1:  * Primary key of the found row, a combination of the Partition Key
1:  * and clustering that belongs to the row.
1:  */
1: public class RowKey implements Comparable<RowKey>
1: {
1: 
1:     public final DecoratedKey decoratedKey;
1:     public final Clustering clustering;
1: 
1:     private final ClusteringComparator comparator;
1: 
1:     public RowKey(DecoratedKey primaryKey, Clustering clustering, ClusteringComparator comparator)
1:     {
1:         this.decoratedKey = primaryKey;
1:         this.clustering = clustering;
1:         this.comparator = comparator;
1:     }
1: 
1:     public boolean equals(Object o)
1:     {
1:         if (this == o) return true;
1:         if (o == null || getClass() != o.getClass()) return false;
1: 
1:         RowKey rowKey = (RowKey) o;
1: 
1:         if (decoratedKey != null ? !decoratedKey.equals(rowKey.decoratedKey) : rowKey.decoratedKey != null)
1:             return false;
1:         return clustering != null ? clustering.equals(rowKey.clustering) : rowKey.clustering == null;
1:     }
1: 
1:     public int hashCode()
1:     {
0:         return new HashCodeBuilder().append(decoratedKey).append(clustering).hashCode();
1:     }
1: 
1:     public int compareTo(RowKey other)
1:     {
1:         int cmp = this.decoratedKey.compareTo(other.decoratedKey);
1:         if (cmp == 0 && clustering != null)
1:         {
1:             // Both clustering and rows should match
1:             if (clustering.kind() == ClusteringPrefix.Kind.STATIC_CLUSTERING || other.clustering.kind() == ClusteringPrefix.Kind.STATIC_CLUSTERING)
1:                 return 0;
1: 
1:             return comparator.compare(this.clustering, other.clustering);
1:         }
1:         else
1:         {
1:             return cmp;
1:         }
1:     }
1: 
1:     public static RowKeyComparator COMPARATOR = new RowKeyComparator();
1: 
1:     public String toString(CFMetaData metadata)
1:     {
1:         return String.format("RowKey: { pk : %s, clustering: %s}",
1:                              metadata.getKeyValidator().getString(decoratedKey.getKey()),
1:                              clustering.toString(metadata));
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return String.format("RowKey: { pk : %s, clustering: %s}",
1:                              ByteBufferUtil.bytesToHex(decoratedKey.getKey()),
1:                              String.join(",", Arrays.stream(clustering.getRawValues()).map(ByteBufferUtil::bytesToHex).collect(Collectors.toList())));
1:     }
1: 
1:     private static class RowKeyComparator implements Comparator<RowKey>
1:     {
1:         public int compare(RowKey o1, RowKey o2)
1:         {
1:             return o1.compareTo(o2);
1:         }
1:     }
1: 
1: }
============================================================================