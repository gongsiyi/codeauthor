1:af96d40: /*
1:af96d40:  * Licensed to the Apache Software Foundation (ASF) under one
1:af96d40:  * or more contributor license agreements.  See the NOTICE file
1:af96d40:  * distributed with this work for additional information
1:af96d40:  * regarding copyright ownership.  The ASF licenses this file
1:af96d40:  * to you under the Apache License, Version 2.0 (the
1:af96d40:  * "License"); you may not use this file except in compliance
1:af96d40:  * with the License.  You may obtain a copy of the License at
1:af96d40:  *
1:af96d40:  *     http://www.apache.org/licenses/LICENSE-2.0
1:af96d40:  *
1:af96d40:  * Unless required by applicable law or agreed to in writing, software
1:af96d40:  * distributed under the License is distributed on an "AS IS" BASIS,
1:af96d40:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af96d40:  * See the License for the specific language governing permissions and
1:af96d40:  * limitations under the License.
1:af96d40:  */
1:53a177a: package org.apache.cassandra.batchlog;
11:af96d40: 
1:af96d40: import java.net.InetAddress;
1:af96d40: import java.net.UnknownHostException;
1:af96d40: import java.util.Collection;
1:1c80b04: import java.util.HashSet;
1:1c80b04: 
1:af96d40: import com.google.common.collect.ImmutableMultimap;
1:af96d40: import com.google.common.collect.Multimap;
1:a991b64: import org.junit.Test;
1:a991b64: import org.junit.matchers.JUnitMatchers;
1:f486193: 
1:f486193: import static org.hamcrest.CoreMatchers.is;
1:a991b64: import static org.junit.Assert.assertThat;
1:f486193: 
1:f486193: public class BatchlogEndpointFilterTest
5:af96d40: {
1:af96d40:     private static final String LOCAL = "local";
1:af96d40: 
1:af96d40:     @Test
1:af96d40:     public void shouldSelect2hostsFromNonLocalRacks() throws UnknownHostException
1:af96d40:     {
1:af96d40:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:af96d40:                 .put(LOCAL, InetAddress.getByName("0"))
1:af96d40:                 .put(LOCAL, InetAddress.getByName("00"))
1:af96d40:                 .put("1", InetAddress.getByName("1"))
1:af96d40:                 .put("1", InetAddress.getByName("11"))
1:af96d40:                 .put("2", InetAddress.getByName("2"))
1:af96d40:                 .put("2", InetAddress.getByName("22"))
1:af96d40:                 .build();
1:f486193:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
2:af96d40:         assertThat(result.size(), is(2));
2:af96d40:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("11")));
1:af96d40:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("22")));
4:af96d40:     }
1:f486193: 
1:af96d40:     @Test
1:af96d40:     public void shouldSelectHostFromLocal() throws UnknownHostException
1:af96d40:     {
1:af96d40:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:af96d40:                 .put(LOCAL, InetAddress.getByName("0"))
1:af96d40:                 .put(LOCAL, InetAddress.getByName("00"))
1:af96d40:                 .put("1", InetAddress.getByName("1"))
1:af96d40:                 .build();
1:f486193:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1:af96d40:         assertThat(result.size(), is(2));
2:af96d40:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("1")));
1:af96d40:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("0")));
1:af96d40:     }
1:f486193: 
1:af96d40:     @Test
1:af96d40:     public void shouldReturnAsIsIfNoEnoughEndpoints() throws UnknownHostException
1:af96d40:     {
1:af96d40:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:af96d40:                 .put(LOCAL, InetAddress.getByName("0"))
1:af96d40:                 .build();
1:f486193:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1:af96d40:         assertThat(result.size(), is(1));
1:af96d40:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("0")));
1:af96d40:     }
1:f486193: 
1:af96d40:     @Test
1:1c80b04:     public void shouldSelectTwoRandomHostsFromSingleOtherRack() throws UnknownHostException
1:af96d40:     {
1:af96d40:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:af96d40:                 .put(LOCAL, InetAddress.getByName("0"))
1:af96d40:                 .put(LOCAL, InetAddress.getByName("00"))
1:af96d40:                 .put("1", InetAddress.getByName("1"))
1:af96d40:                 .put("1", InetAddress.getByName("11"))
1:af96d40:                 .put("1", InetAddress.getByName("111"))
1:af96d40:                 .build();
1:f486193:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1:1c80b04:         // result should contain random two distinct values
1:1c80b04:         assertThat(new HashSet<>(result).size(), is(2));
1:af96d40:     }
1:f486193: 
1:f486193:     private static class TestEndpointFilter extends BatchlogManager.EndpointFilter
1:f486193:     {
1:53a177a:         TestEndpointFilter(String localRack, Multimap<String, InetAddress> endpoints)
1:f486193:         {
1:f486193:             super(localRack, endpoints);
1:f486193:         }
1:f486193: 
1:f486193:         @Override
1:f486193:         protected boolean isValid(InetAddress input)
1:f486193:         {
1:f486193:             // We will use always alive non-localhost endpoints
1:f486193:             return true;
1:f486193:         }
1:f486193: 
1:f486193:         @Override
1:f486193:         protected int getRandomInt(int bound)
1:f486193:         {
1:f486193:             // We don't need random behavior here
1:f486193:             return bound - 1;
1:f486193:         }
1:f486193:     }
1:af96d40: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:53a177a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.batchlog;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TestEndpointFilter(String localRack, Multimap<String, InetAddress> endpoints)
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:d9dfbdd
commit:1c80b04
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void shouldSelectTwoRandomHostsFromSingleOtherRack() throws UnknownHostException
/////////////////////////////////////////////////////////////////////////
1:         // result should contain random two distinct values
1:         assertThat(new HashSet<>(result).size(), is(2));
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: import org.junit.matchers.JUnitMatchers;
1: import static org.junit.Assert.assertThat;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:f486193
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.BatchlogManager;
1: 
0: import static org.junit.Assert.assertThat;
1: import static org.hamcrest.CoreMatchers.is;
1: 
1: public class BatchlogEndpointFilterTest
/////////////////////////////////////////////////////////////////////////
1:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1: 
/////////////////////////////////////////////////////////////////////////
1:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1: 
1:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1: 
/////////////////////////////////////////////////////////////////////////
1:         Collection<InetAddress> result = new TestEndpointFilter(LOCAL, endpoints).filter();
1: 
1:     private static class TestEndpointFilter extends BatchlogManager.EndpointFilter
1:     {
0:         public TestEndpointFilter(String localRack, Multimap<String, InetAddress> endpoints)
1:         {
1:             super(localRack, endpoints);
1:         }
1: 
1:         @Override
1:         protected boolean isValid(InetAddress input)
1:         {
1:             // We will use always alive non-localhost endpoints
1:             return true;
1:         }
1: 
1:         @Override
1:         protected int getRandomInt(int bound)
1:         {
1:             // We don't need random behavior here
1:             return bound - 1;
1:         }
1:     }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:af96d40
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.cassandra.service;
1: 
0: import static org.hamcrest.CoreMatchers.is;
0: import static org.junit.Assert.assertThat;
1: 
1: import java.net.InetAddress;
1: import java.net.UnknownHostException;
1: import java.util.Collection;
1: 
0: import org.junit.Test;
0: import org.junit.matchers.JUnitMatchers;
1: 
1: import com.google.common.collect.ImmutableMultimap;
1: import com.google.common.collect.Multimap;
1: 
0: public class BatchlogEndpointSelectorTest
1: {
0:     private final BatchlogEndpointSelector target;
1:     private static final String LOCAL = "local";
1:     
1: 
0:     public BatchlogEndpointSelectorTest() throws UnknownHostException
1:     {
0:         target = new BatchlogEndpointSelector(LOCAL)
1:         {
0:             @Override
0:             protected boolean isValid(InetAddress input)
1:             {   
0:                 //we will use always alive non-localhost endpoints
0:                 return true;
1:             }
1: 
0:             @Override
0:             protected int getRandomInt(int bound)
1:             {
0:                 //we don't need a random behavior here
0:                 return bound - 1;
1:             }
0:         };
1:     }
1:     
1:     @Test
1:     public void shouldSelect2hostsFromNonLocalRacks() throws UnknownHostException
1:     {
1:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:                 .put(LOCAL, InetAddress.getByName("0"))
1:                 .put(LOCAL, InetAddress.getByName("00"))
1:                 .put("1", InetAddress.getByName("1"))
1:                 .put("1", InetAddress.getByName("11"))
1:                 .put("2", InetAddress.getByName("2"))
1:                 .put("2", InetAddress.getByName("22"))
1:                 .build();
0:         Collection<InetAddress> result = target.chooseEndpoints(endpoints);
1:         assertThat(result.size(), is(2));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("11")));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("22")));
1:     }
1:     
1:     @Test
1:     public void shouldSelectHostFromLocal() throws UnknownHostException
1:     {
1:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:                 .put(LOCAL, InetAddress.getByName("0"))
1:                 .put(LOCAL, InetAddress.getByName("00"))
1:                 .put("1", InetAddress.getByName("1"))
1:                 .build();
0:         Collection<InetAddress> result = target.chooseEndpoints(endpoints);
1:         assertThat(result.size(), is(2));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("1")));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("0")));
1:     }
1:     
1:     @Test
1:     public void shouldReturnAsIsIfNoEnoughEndpoints() throws UnknownHostException
1:     {
1:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:                 .put(LOCAL, InetAddress.getByName("0"))
1:                 .build();
0:         Collection<InetAddress> result = target.chooseEndpoints(endpoints);
1:         assertThat(result.size(), is(1));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("0")));
1:     }
1:     
1:     @Test
0:     public void shouldSelectTwoFirstHostsFromSingleOtherRack() throws UnknownHostException
1:     {
1:         Multimap<String, InetAddress> endpoints = ImmutableMultimap.<String, InetAddress> builder()
1:                 .put(LOCAL, InetAddress.getByName("0"))
1:                 .put(LOCAL, InetAddress.getByName("00"))
1:                 .put("1", InetAddress.getByName("1"))
1:                 .put("1", InetAddress.getByName("11"))
1:                 .put("1", InetAddress.getByName("111"))
1:                 .build();
0:         Collection<InetAddress> result = target.chooseEndpoints(endpoints);
1:         assertThat(result.size(), is(2));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("1")));
1:         assertThat(result, JUnitMatchers.hasItem(InetAddress.getByName("11")));
1:     }
1: }
============================================================================