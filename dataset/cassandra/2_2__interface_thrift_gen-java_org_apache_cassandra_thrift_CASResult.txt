1:bfe1e1c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:bfe1e1c:  *
1:bfe1e1c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:bfe1e1c:  *  @generated
1:bfe1e1c:  */
1:bfe1e1c: package org.apache.cassandra.thrift;
1:bfe1e1c: /*
1:bfe1e1c:  * 
1:bfe1e1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:bfe1e1c:  * or more contributor license agreements.  See the NOTICE file
1:bfe1e1c:  * distributed with this work for additional information
1:bfe1e1c:  * regarding copyright ownership.  The ASF licenses this file
1:bfe1e1c:  * to you under the Apache License, Version 2.0 (the
1:bfe1e1c:  * "License"); you may not use this file except in compliance
1:bfe1e1c:  * with the License.  You may obtain a copy of the License at
1:bfe1e1c:  * 
1:bfe1e1c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:bfe1e1c:  * 
1:bfe1e1c:  * Unless required by applicable law or agreed to in writing,
1:bfe1e1c:  * software distributed under the License is distributed on an
1:bfe1e1c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:bfe1e1c:  * KIND, either express or implied.  See the License for the
1:bfe1e1c:  * specific language governing permissions and limitations
1:bfe1e1c:  * under the License.
1:bfe1e1c:  * 
1:bfe1e1c:  */
1:bfe1e1c: 
1:bfe1e1c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:bfe1e1c: import org.apache.thrift.scheme.IScheme;
1:bfe1e1c: import org.apache.thrift.scheme.SchemeFactory;
1:bfe1e1c: import org.apache.thrift.scheme.StandardScheme;
1:bfe1e1c: 
1:bfe1e1c: import org.apache.thrift.scheme.TupleScheme;
1:bfe1e1c: import org.apache.thrift.protocol.TTupleProtocol;
1:bfe1e1c: import org.apache.thrift.protocol.TProtocolException;
1:bfe1e1c: import org.apache.thrift.EncodingUtils;
1:bfe1e1c: import org.apache.thrift.TException;
1:bffd9ea: import org.apache.thrift.async.AsyncMethodCallback;
1:bffd9ea: import org.apache.thrift.server.AbstractNonblockingServer.*;
1:bfe1e1c: import java.util.List;
1:bfe1e1c: import java.util.ArrayList;
1:bfe1e1c: import java.util.Map;
1:bfe1e1c: import java.util.HashMap;
1:bfe1e1c: import java.util.EnumMap;
1:bfe1e1c: import java.util.Set;
1:bfe1e1c: import java.util.HashSet;
1:bfe1e1c: import java.util.EnumSet;
1:bfe1e1c: import java.util.Collections;
1:bfe1e1c: import java.util.BitSet;
1:bfe1e1c: import java.nio.ByteBuffer;
1:bfe1e1c: import java.util.Arrays;
1:bfe1e1c: import org.slf4j.Logger;
1:bfe1e1c: import org.slf4j.LoggerFactory;
1:bfe1e1c: 
1:bffd9ea: public class CASResult implements org.apache.thrift.TBase<CASResult, CASResult._Fields>, java.io.Serializable, Cloneable, Comparable<CASResult> {
1:bfe1e1c:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CASResult");
1:bfe1e1c: 
1:bfe1e1c:   private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)1);
1:bfe1e1c:   private static final org.apache.thrift.protocol.TField CURRENT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("current_values", org.apache.thrift.protocol.TType.LIST, (short)2);
1:bfe1e1c: 
1:bfe1e1c:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:bfe1e1c:   static {
1:bfe1e1c:     schemes.put(StandardScheme.class, new CASResultStandardSchemeFactory());
1:bfe1e1c:     schemes.put(TupleScheme.class, new CASResultTupleSchemeFactory());
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public boolean success; // required
1:bfe1e1c:   public List<Column> current_values; // optional
1:bfe1e1c: 
1:bfe1e1c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:bfe1e1c:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:bfe1e1c:     SUCCESS((short)1, "success"),
1:bfe1e1c:     CURRENT_VALUES((short)2, "current_values");
1:bfe1e1c: 
1:bfe1e1c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:bfe1e1c: 
1:bfe1e1c:     static {
1:bfe1e1c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:bfe1e1c:         byName.put(field.getFieldName(), field);
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     /**
1:bfe1e1c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:bfe1e1c:      */
1:bfe1e1c:     public static _Fields findByThriftId(int fieldId) {
1:bfe1e1c:       switch(fieldId) {
1:bfe1e1c:         case 1: // SUCCESS
1:bfe1e1c:           return SUCCESS;
1:bfe1e1c:         case 2: // CURRENT_VALUES
1:bfe1e1c:           return CURRENT_VALUES;
1:bfe1e1c:         default:
1:bfe1e1c:           return null;
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     /**
1:bfe1e1c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:bfe1e1c:      * if it is not found.
1:bfe1e1c:      */
1:bfe1e1c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:bfe1e1c:       _Fields fields = findByThriftId(fieldId);
1:bfe1e1c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:bfe1e1c:       return fields;
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     /**
1:bfe1e1c:      * Find the _Fields constant that matches name, or null if its not found.
1:bfe1e1c:      */
1:bfe1e1c:     public static _Fields findByName(String name) {
1:bfe1e1c:       return byName.get(name);
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     private final short _thriftId;
1:bfe1e1c:     private final String _fieldName;
1:bfe1e1c: 
1:bfe1e1c:     _Fields(short thriftId, String fieldName) {
1:bfe1e1c:       _thriftId = thriftId;
1:bfe1e1c:       _fieldName = fieldName;
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     public short getThriftFieldId() {
1:bfe1e1c:       return _thriftId;
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     public String getFieldName() {
1:bfe1e1c:       return _fieldName;
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   // isset id assignments
1:bfe1e1c:   private static final int __SUCCESS_ISSET_ID = 0;
1:bfe1e1c:   private byte __isset_bitfield = 0;
1:bfe1e1c:   private _Fields optionals[] = {_Fields.CURRENT_VALUES};
1:bfe1e1c:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:bfe1e1c:   static {
1:bfe1e1c:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:bfe1e1c:     tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:bfe1e1c:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:bfe1e1c:     tmpMap.put(_Fields.CURRENT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("current_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:bfe1e1c:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:bfe1e1c:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:bfe1e1c:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:bfe1e1c:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CASResult.class, metaDataMap);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public CASResult() {
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public CASResult(
1:bfe1e1c:     boolean success)
1:bfe1e1c:   {
1:bfe1e1c:     this();
1:bfe1e1c:     this.success = success;
1:bfe1e1c:     setSuccessIsSet(true);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   /**
1:bfe1e1c:    * Performs a deep copy on <i>other</i>.
1:bfe1e1c:    */
1:bfe1e1c:   public CASResult(CASResult other) {
1:bfe1e1c:     __isset_bitfield = other.__isset_bitfield;
1:bfe1e1c:     this.success = other.success;
1:bfe1e1c:     if (other.isSetCurrent_values()) {
1:bffd9ea:       List<Column> __this__current_values = new ArrayList<Column>(other.current_values.size());
1:bfe1e1c:       for (Column other_element : other.current_values) {
1:bfe1e1c:         __this__current_values.add(new Column(other_element));
1:bfe1e1c:       }
1:bfe1e1c:       this.current_values = __this__current_values;
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public CASResult deepCopy() {
1:bfe1e1c:     return new CASResult(this);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   @Override
1:bfe1e1c:   public void clear() {
1:bfe1e1c:     setSuccessIsSet(false);
1:bfe1e1c:     this.success = false;
1:bfe1e1c:     this.current_values = null;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public boolean isSuccess() {
1:bfe1e1c:     return this.success;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public CASResult setSuccess(boolean success) {
1:bfe1e1c:     this.success = success;
1:bfe1e1c:     setSuccessIsSet(true);
1:bfe1e1c:     return this;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void unsetSuccess() {
1:bfe1e1c:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   /** Returns true if field success is set (has been assigned a value) and false otherwise */
1:bfe1e1c:   public boolean isSetSuccess() {
1:bfe1e1c:     return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void setSuccessIsSet(boolean value) {
1:bfe1e1c:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public int getCurrent_valuesSize() {
1:bfe1e1c:     return (this.current_values == null) ? 0 : this.current_values.size();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public java.util.Iterator<Column> getCurrent_valuesIterator() {
1:bfe1e1c:     return (this.current_values == null) ? null : this.current_values.iterator();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void addToCurrent_values(Column elem) {
1:bfe1e1c:     if (this.current_values == null) {
1:bfe1e1c:       this.current_values = new ArrayList<Column>();
1:bfe1e1c:     }
1:bfe1e1c:     this.current_values.add(elem);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public List<Column> getCurrent_values() {
1:bfe1e1c:     return this.current_values;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public CASResult setCurrent_values(List<Column> current_values) {
1:bfe1e1c:     this.current_values = current_values;
1:bfe1e1c:     return this;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void unsetCurrent_values() {
1:bfe1e1c:     this.current_values = null;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   /** Returns true if field current_values is set (has been assigned a value) and false otherwise */
1:bfe1e1c:   public boolean isSetCurrent_values() {
1:bfe1e1c:     return this.current_values != null;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void setCurrent_valuesIsSet(boolean value) {
1:bfe1e1c:     if (!value) {
1:bfe1e1c:       this.current_values = null;
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void setFieldValue(_Fields field, Object value) {
1:bfe1e1c:     switch (field) {
1:bfe1e1c:     case SUCCESS:
1:bfe1e1c:       if (value == null) {
1:bfe1e1c:         unsetSuccess();
1:bfe1e1c:       } else {
1:bfe1e1c:         setSuccess((Boolean)value);
1:bfe1e1c:       }
1:bfe1e1c:       break;
1:bfe1e1c: 
1:bfe1e1c:     case CURRENT_VALUES:
1:bfe1e1c:       if (value == null) {
1:bfe1e1c:         unsetCurrent_values();
1:bfe1e1c:       } else {
1:bfe1e1c:         setCurrent_values((List<Column>)value);
1:bfe1e1c:       }
1:bfe1e1c:       break;
1:bfe1e1c: 
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public Object getFieldValue(_Fields field) {
1:bfe1e1c:     switch (field) {
1:bfe1e1c:     case SUCCESS:
1:bfe1e1c:       return Boolean.valueOf(isSuccess());
1:bfe1e1c: 
1:bfe1e1c:     case CURRENT_VALUES:
1:bfe1e1c:       return getCurrent_values();
1:bfe1e1c: 
1:bfe1e1c:     }
1:bfe1e1c:     throw new IllegalStateException();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:bfe1e1c:   public boolean isSet(_Fields field) {
1:bfe1e1c:     if (field == null) {
1:bfe1e1c:       throw new IllegalArgumentException();
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     switch (field) {
1:bfe1e1c:     case SUCCESS:
1:bfe1e1c:       return isSetSuccess();
1:bfe1e1c:     case CURRENT_VALUES:
1:bfe1e1c:       return isSetCurrent_values();
1:bfe1e1c:     }
1:bfe1e1c:     throw new IllegalStateException();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   @Override
1:bfe1e1c:   public boolean equals(Object that) {
1:bfe1e1c:     if (that == null)
1:bfe1e1c:       return false;
1:bfe1e1c:     if (that instanceof CASResult)
1:bfe1e1c:       return this.equals((CASResult)that);
1:bfe1e1c:     return false;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public boolean equals(CASResult that) {
1:bfe1e1c:     if (that == null)
1:bfe1e1c:       return false;
1:bfe1e1c: 
1:bfe1e1c:     boolean this_present_success = true;
1:bfe1e1c:     boolean that_present_success = true;
1:bfe1e1c:     if (this_present_success || that_present_success) {
1:bfe1e1c:       if (!(this_present_success && that_present_success))
1:bfe1e1c:         return false;
1:bfe1e1c:       if (this.success != that.success)
1:bfe1e1c:         return false;
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     boolean this_present_current_values = true && this.isSetCurrent_values();
1:bfe1e1c:     boolean that_present_current_values = true && that.isSetCurrent_values();
1:bfe1e1c:     if (this_present_current_values || that_present_current_values) {
1:bfe1e1c:       if (!(this_present_current_values && that_present_current_values))
1:bfe1e1c:         return false;
1:bfe1e1c:       if (!this.current_values.equals(that.current_values))
1:bfe1e1c:         return false;
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     return true;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   @Override
1:bfe1e1c:   public int hashCode() {
1:bfe1e1c:     HashCodeBuilder builder = new HashCodeBuilder();
1:bfe1e1c: 
1:bfe1e1c:     boolean present_success = true;
1:bfe1e1c:     builder.append(present_success);
1:bfe1e1c:     if (present_success)
1:bfe1e1c:       builder.append(success);
1:bfe1e1c: 
1:bfe1e1c:     boolean present_current_values = true && (isSetCurrent_values());
1:bfe1e1c:     builder.append(present_current_values);
1:bfe1e1c:     if (present_current_values)
1:bfe1e1c:       builder.append(current_values);
1:bfe1e1c: 
1:bfe1e1c:     return builder.toHashCode();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bffd9ea:   @Override
1:bfe1e1c:   public int compareTo(CASResult other) {
1:bfe1e1c:     if (!getClass().equals(other.getClass())) {
1:bfe1e1c:       return getClass().getName().compareTo(other.getClass().getName());
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     int lastComparison = 0;
1:bfe1e1c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
1:bfe1e1c:     if (lastComparison != 0) {
1:bfe1e1c:       return lastComparison;
1:bfe1e1c:     }
1:bfe1e1c:     if (isSetSuccess()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
1:bfe1e1c:       if (lastComparison != 0) {
1:bfe1e1c:         return lastComparison;
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetCurrent_values()).compareTo(other.isSetCurrent_values());
1:bfe1e1c:     if (lastComparison != 0) {
1:bfe1e1c:       return lastComparison;
1:bfe1e1c:     }
1:bfe1e1c:     if (isSetCurrent_values()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_values, other.current_values);
1:bfe1e1c:       if (lastComparison != 0) {
1:bfe1e1c:         return lastComparison;
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bfe1e1c:     return 0;
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public _Fields fieldForId(int fieldId) {
1:bfe1e1c:     return _Fields.findByThriftId(fieldId);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:bfe1e1c:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:bfe1e1c:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   @Override
1:bfe1e1c:   public String toString() {
1:bfe1e1c:     StringBuilder sb = new StringBuilder("CASResult(");
1:bfe1e1c:     boolean first = true;
1:bfe1e1c: 
1:bfe1e1c:     sb.append("success:");
1:bfe1e1c:     sb.append(this.success);
1:bfe1e1c:     first = false;
1:bfe1e1c:     if (isSetCurrent_values()) {
1:bfe1e1c:       if (!first) sb.append(", ");
1:bfe1e1c:       sb.append("current_values:");
1:bfe1e1c:       if (this.current_values == null) {
1:bfe1e1c:         sb.append("null");
1:bfe1e1c:       } else {
1:bfe1e1c:         sb.append(this.current_values);
1:bfe1e1c:       }
1:bfe1e1c:       first = false;
1:bfe1e1c:     }
1:bfe1e1c:     sb.append(")");
1:bfe1e1c:     return sb.toString();
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   public void validate() throws org.apache.thrift.TException {
1:bfe1e1c:     // check for required fields
1:bfe1e1c:     // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
1:bfe1e1c:     // check for sub-struct validity
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:bfe1e1c:     try {
1:bfe1e1c:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:bfe1e1c:     } catch (org.apache.thrift.TException te) {
1:bfe1e1c:       throw new java.io.IOException(te);
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:bfe1e1c:     try {
1:bfe1e1c:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:bfe1e1c:       __isset_bitfield = 0;
1:bfe1e1c:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:bfe1e1c:     } catch (org.apache.thrift.TException te) {
1:bfe1e1c:       throw new java.io.IOException(te);
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private static class CASResultStandardSchemeFactory implements SchemeFactory {
1:bfe1e1c:     public CASResultStandardScheme getScheme() {
1:bfe1e1c:       return new CASResultStandardScheme();
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private static class CASResultStandardScheme extends StandardScheme<CASResult> {
1:bfe1e1c: 
1:bfe1e1c:     public void read(org.apache.thrift.protocol.TProtocol iprot, CASResult struct) throws org.apache.thrift.TException {
1:bfe1e1c:       org.apache.thrift.protocol.TField schemeField;
1:bfe1e1c:       iprot.readStructBegin();
1:bfe1e1c:       while (true)
1:bfe1e1c:       {
1:bfe1e1c:         schemeField = iprot.readFieldBegin();
1:bfe1e1c:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:bfe1e1c:           break;
1:bfe1e1c:         }
1:bfe1e1c:         switch (schemeField.id) {
1:bfe1e1c:           case 1: // SUCCESS
1:bfe1e1c:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:bfe1e1c:               struct.success = iprot.readBool();
1:bfe1e1c:               struct.setSuccessIsSet(true);
1:bfe1e1c:             } else { 
1:bfe1e1c:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:bfe1e1c:             }
1:bfe1e1c:             break;
1:bfe1e1c:           case 2: // CURRENT_VALUES
1:bfe1e1c:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:bfe1e1c:               {
1:bfe1e1c:                 org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
1:bfe1e1c:                 struct.current_values = new ArrayList<Column>(_list48.size);
1:bfe1e1c:                 for (int _i49 = 0; _i49 < _list48.size; ++_i49)
1:bfe1e1c:                 {
1:bffd9ea:                   Column _elem50;
1:bfe1e1c:                   _elem50 = new Column();
1:bfe1e1c:                   _elem50.read(iprot);
1:bfe1e1c:                   struct.current_values.add(_elem50);
1:bfe1e1c:                 }
1:bfe1e1c:                 iprot.readListEnd();
1:bfe1e1c:               }
1:bfe1e1c:               struct.setCurrent_valuesIsSet(true);
1:bfe1e1c:             } else { 
1:bfe1e1c:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:bfe1e1c:             }
1:bfe1e1c:             break;
1:bfe1e1c:           default:
1:bfe1e1c:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:bfe1e1c:         }
1:bfe1e1c:         iprot.readFieldEnd();
1:bfe1e1c:       }
1:bfe1e1c:       iprot.readStructEnd();
1:bfe1e1c: 
1:bfe1e1c:       // check for required fields of primitive type, which can't be checked in the validate method
1:bfe1e1c:       if (!struct.isSetSuccess()) {
1:bfe1e1c:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
1:bfe1e1c:       }
1:bfe1e1c:       struct.validate();
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     public void write(org.apache.thrift.protocol.TProtocol oprot, CASResult struct) throws org.apache.thrift.TException {
1:bfe1e1c:       struct.validate();
1:bfe1e1c: 
1:bfe1e1c:       oprot.writeStructBegin(STRUCT_DESC);
1:bfe1e1c:       oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
1:bfe1e1c:       oprot.writeBool(struct.success);
1:bfe1e1c:       oprot.writeFieldEnd();
1:bfe1e1c:       if (struct.current_values != null) {
1:bfe1e1c:         if (struct.isSetCurrent_values()) {
1:bfe1e1c:           oprot.writeFieldBegin(CURRENT_VALUES_FIELD_DESC);
1:bfe1e1c:           {
1:bfe1e1c:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.current_values.size()));
1:bfe1e1c:             for (Column _iter51 : struct.current_values)
1:bfe1e1c:             {
1:bfe1e1c:               _iter51.write(oprot);
1:bfe1e1c:             }
1:bfe1e1c:             oprot.writeListEnd();
1:bfe1e1c:           }
1:bfe1e1c:           oprot.writeFieldEnd();
1:bfe1e1c:         }
1:bfe1e1c:       }
1:bfe1e1c:       oprot.writeFieldStop();
1:bfe1e1c:       oprot.writeStructEnd();
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private static class CASResultTupleSchemeFactory implements SchemeFactory {
1:bfe1e1c:     public CASResultTupleScheme getScheme() {
1:bfe1e1c:       return new CASResultTupleScheme();
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c:   private static class CASResultTupleScheme extends TupleScheme<CASResult> {
1:bfe1e1c: 
1:bfe1e1c:     @Override
1:bfe1e1c:     public void write(org.apache.thrift.protocol.TProtocol prot, CASResult struct) throws org.apache.thrift.TException {
1:bfe1e1c:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:bfe1e1c:       oprot.writeBool(struct.success);
1:bfe1e1c:       BitSet optionals = new BitSet();
1:bfe1e1c:       if (struct.isSetCurrent_values()) {
1:bfe1e1c:         optionals.set(0);
1:bfe1e1c:       }
1:bfe1e1c:       oprot.writeBitSet(optionals, 1);
1:bfe1e1c:       if (struct.isSetCurrent_values()) {
1:bfe1e1c:         {
1:bfe1e1c:           oprot.writeI32(struct.current_values.size());
1:bfe1e1c:           for (Column _iter52 : struct.current_values)
1:bfe1e1c:           {
1:bfe1e1c:             _iter52.write(oprot);
1:bfe1e1c:           }
1:bfe1e1c:         }
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bfe1e1c: 
1:bfe1e1c:     @Override
1:bfe1e1c:     public void read(org.apache.thrift.protocol.TProtocol prot, CASResult struct) throws org.apache.thrift.TException {
1:bfe1e1c:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:bfe1e1c:       struct.success = iprot.readBool();
1:bfe1e1c:       struct.setSuccessIsSet(true);
1:bfe1e1c:       BitSet incoming = iprot.readBitSet(1);
1:bfe1e1c:       if (incoming.get(0)) {
1:bfe1e1c:         {
1:bfe1e1c:           org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:bfe1e1c:           struct.current_values = new ArrayList<Column>(_list53.size);
1:bfe1e1c:           for (int _i54 = 0; _i54 < _list53.size; ++_i54)
1:bfe1e1c:           {
1:bffd9ea:             Column _elem55;
1:bfe1e1c:             _elem55 = new Column();
1:bfe1e1c:             _elem55.read(iprot);
1:bfe1e1c:             struct.current_values.add(_elem55);
1:bfe1e1c:           }
1:bfe1e1c:         }
1:bfe1e1c:         struct.setCurrent_valuesIsSet(true);
1:bfe1e1c:       }
1:bfe1e1c:     }
1:bfe1e1c:   }
1:bfe1e1c: 
1:bfe1e1c: }
1:bfe1e1c: 
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.async.AsyncMethodCallback;
1: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class CASResult implements org.apache.thrift.TBase<CASResult, CASResult._Fields>, java.io.Serializable, Cloneable, Comparable<CASResult> {
/////////////////////////////////////////////////////////////////////////
1:       List<Column> __this__current_values = new ArrayList<Column>(other.current_values.size());
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
1:     lastComparison = Boolean.valueOf(isSetCurrent_values()).compareTo(other.isSetCurrent_values());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_values, other.current_values);
/////////////////////////////////////////////////////////////////////////
1:                   Column _elem50;
/////////////////////////////////////////////////////////////////////////
1:             Column _elem55;
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  *  @generated
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import org.apache.commons.lang.builder.HashCodeBuilder;
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
1: import org.apache.thrift.protocol.TProtocolException;
1: import org.apache.thrift.EncodingUtils;
1: import org.apache.thrift.TException;
1: import java.util.List;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
1: import java.util.Set;
1: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class CASResult implements org.apache.thrift.TBase<CASResult, CASResult._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CASResult");
1: 
1:   private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)1);
1:   private static final org.apache.thrift.protocol.TField CURRENT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("current_values", org.apache.thrift.protocol.TType.LIST, (short)2);
1: 
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new CASResultStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new CASResultTupleSchemeFactory());
1:   }
1: 
1:   public boolean success; // required
1:   public List<Column> current_values; // optional
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:     SUCCESS((short)1, "success"),
1:     CURRENT_VALUES((short)2, "current_values");
1: 
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
1:       switch(fieldId) {
1:         case 1: // SUCCESS
1:           return SUCCESS;
1:         case 2: // CURRENT_VALUES
1:           return CURRENT_VALUES;
1:         default:
1:           return null;
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1:   private static final int __SUCCESS_ISSET_ID = 0;
1:   private byte __isset_bitfield = 0;
1:   private _Fields optionals[] = {_Fields.CURRENT_VALUES};
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:   static {
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
1:     tmpMap.put(_Fields.CURRENT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("current_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
1:             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class))));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CASResult.class, metaDataMap);
1:   }
1: 
1:   public CASResult() {
1:   }
1: 
1:   public CASResult(
1:     boolean success)
1:   {
1:     this();
1:     this.success = success;
1:     setSuccessIsSet(true);
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public CASResult(CASResult other) {
1:     __isset_bitfield = other.__isset_bitfield;
1:     this.success = other.success;
1:     if (other.isSetCurrent_values()) {
0:       List<Column> __this__current_values = new ArrayList<Column>();
1:       for (Column other_element : other.current_values) {
1:         __this__current_values.add(new Column(other_element));
1:       }
1:       this.current_values = __this__current_values;
1:     }
1:   }
1: 
1:   public CASResult deepCopy() {
1:     return new CASResult(this);
1:   }
1: 
1:   @Override
1:   public void clear() {
1:     setSuccessIsSet(false);
1:     this.success = false;
1:     this.current_values = null;
1:   }
1: 
1:   public boolean isSuccess() {
1:     return this.success;
1:   }
1: 
1:   public CASResult setSuccess(boolean success) {
1:     this.success = success;
1:     setSuccessIsSet(true);
1:     return this;
1:   }
1: 
1:   public void unsetSuccess() {
1:     __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
1:   }
1: 
1:   /** Returns true if field success is set (has been assigned a value) and false otherwise */
1:   public boolean isSetSuccess() {
1:     return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
1:   }
1: 
1:   public void setSuccessIsSet(boolean value) {
1:     __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
1:   }
1: 
1:   public int getCurrent_valuesSize() {
1:     return (this.current_values == null) ? 0 : this.current_values.size();
1:   }
1: 
1:   public java.util.Iterator<Column> getCurrent_valuesIterator() {
1:     return (this.current_values == null) ? null : this.current_values.iterator();
1:   }
1: 
1:   public void addToCurrent_values(Column elem) {
1:     if (this.current_values == null) {
1:       this.current_values = new ArrayList<Column>();
1:     }
1:     this.current_values.add(elem);
1:   }
1: 
1:   public List<Column> getCurrent_values() {
1:     return this.current_values;
1:   }
1: 
1:   public CASResult setCurrent_values(List<Column> current_values) {
1:     this.current_values = current_values;
1:     return this;
1:   }
1: 
1:   public void unsetCurrent_values() {
1:     this.current_values = null;
1:   }
1: 
1:   /** Returns true if field current_values is set (has been assigned a value) and false otherwise */
1:   public boolean isSetCurrent_values() {
1:     return this.current_values != null;
1:   }
1: 
1:   public void setCurrent_valuesIsSet(boolean value) {
1:     if (!value) {
1:       this.current_values = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case SUCCESS:
1:       if (value == null) {
1:         unsetSuccess();
1:       } else {
1:         setSuccess((Boolean)value);
1:       }
1:       break;
1: 
1:     case CURRENT_VALUES:
1:       if (value == null) {
1:         unsetCurrent_values();
1:       } else {
1:         setCurrent_values((List<Column>)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case SUCCESS:
1:       return Boolean.valueOf(isSuccess());
1: 
1:     case CURRENT_VALUES:
1:       return getCurrent_values();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
1:     switch (field) {
1:     case SUCCESS:
1:       return isSetSuccess();
1:     case CURRENT_VALUES:
1:       return isSetCurrent_values();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof CASResult)
1:       return this.equals((CASResult)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(CASResult that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_success = true;
1:     boolean that_present_success = true;
1:     if (this_present_success || that_present_success) {
1:       if (!(this_present_success && that_present_success))
1:         return false;
1:       if (this.success != that.success)
1:         return false;
1:     }
1: 
1:     boolean this_present_current_values = true && this.isSetCurrent_values();
1:     boolean that_present_current_values = true && that.isSetCurrent_values();
1:     if (this_present_current_values || that_present_current_values) {
1:       if (!(this_present_current_values && that_present_current_values))
1:         return false;
1:       if (!this.current_values.equals(that.current_values))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_success = true;
1:     builder.append(present_success);
1:     if (present_success)
1:       builder.append(success);
1: 
1:     boolean present_current_values = true && (isSetCurrent_values());
1:     builder.append(present_current_values);
1:     if (present_current_values)
1:       builder.append(current_values);
1: 
1:     return builder.toHashCode();
1:   }
1: 
1:   public int compareTo(CASResult other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     CASResult typedOther = (CASResult)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetSuccess()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetCurrent_values()).compareTo(typedOther.isSetCurrent_values());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
1:     if (isSetCurrent_values()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_values, typedOther.current_values);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:   }
1: 
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("CASResult(");
1:     boolean first = true;
1: 
1:     sb.append("success:");
1:     sb.append(this.success);
1:     first = false;
1:     if (isSetCurrent_values()) {
1:       if (!first) sb.append(", ");
1:       sb.append("current_values:");
1:       if (this.current_values == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.current_values);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
1:   public void validate() throws org.apache.thrift.TException {
1:     // check for required fields
1:     // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
1:     // check for sub-struct validity
1:   }
1: 
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
1:       __isset_bitfield = 0;
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private static class CASResultStandardSchemeFactory implements SchemeFactory {
1:     public CASResultStandardScheme getScheme() {
1:       return new CASResultStandardScheme();
1:     }
1:   }
1: 
1:   private static class CASResultStandardScheme extends StandardScheme<CASResult> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, CASResult struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
1:       iprot.readStructBegin();
1:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
1:           case 1: // SUCCESS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
1:               struct.success = iprot.readBool();
1:               struct.setSuccessIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 2: // CURRENT_VALUES
1:             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
1:               {
1:                 org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
1:                 struct.current_values = new ArrayList<Column>(_list48.size);
1:                 for (int _i49 = 0; _i49 < _list48.size; ++_i49)
1:                 {
0:                   Column _elem50; // required
1:                   _elem50 = new Column();
1:                   _elem50.read(iprot);
1:                   struct.current_values.add(_elem50);
1:                 }
1:                 iprot.readListEnd();
1:               }
1:               struct.setCurrent_valuesIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
1:         iprot.readFieldEnd();
1:       }
1:       iprot.readStructEnd();
1: 
1:       // check for required fields of primitive type, which can't be checked in the validate method
1:       if (!struct.isSetSuccess()) {
1:         throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
1:       }
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, CASResult struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
1:       oprot.writeStructBegin(STRUCT_DESC);
1:       oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
1:       oprot.writeBool(struct.success);
1:       oprot.writeFieldEnd();
1:       if (struct.current_values != null) {
1:         if (struct.isSetCurrent_values()) {
1:           oprot.writeFieldBegin(CURRENT_VALUES_FIELD_DESC);
1:           {
1:             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.current_values.size()));
1:             for (Column _iter51 : struct.current_values)
1:             {
1:               _iter51.write(oprot);
1:             }
1:             oprot.writeListEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       oprot.writeFieldStop();
1:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class CASResultTupleSchemeFactory implements SchemeFactory {
1:     public CASResultTupleScheme getScheme() {
1:       return new CASResultTupleScheme();
1:     }
1:   }
1: 
1:   private static class CASResultTupleScheme extends TupleScheme<CASResult> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, CASResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBool(struct.success);
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetCurrent_values()) {
1:         optionals.set(0);
1:       }
1:       oprot.writeBitSet(optionals, 1);
1:       if (struct.isSetCurrent_values()) {
1:         {
1:           oprot.writeI32(struct.current_values.size());
1:           for (Column _iter52 : struct.current_values)
1:           {
1:             _iter52.write(oprot);
1:           }
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, CASResult struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.success = iprot.readBool();
1:       struct.setSuccessIsSet(true);
1:       BitSet incoming = iprot.readBitSet(1);
1:       if (incoming.get(0)) {
1:         {
1:           org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
1:           struct.current_values = new ArrayList<Column>(_list53.size);
1:           for (int _i54 = 0; _i54 < _list53.size; ++_i54)
1:           {
0:             Column _elem55; // required
1:             _elem55 = new Column();
1:             _elem55.read(iprot);
1:             struct.current_values.add(_elem55);
1:           }
1:         }
1:         struct.setCurrent_valuesIsSet(true);
1:       }
1:     }
1:   }
1: 
1: }
1: 
============================================================================