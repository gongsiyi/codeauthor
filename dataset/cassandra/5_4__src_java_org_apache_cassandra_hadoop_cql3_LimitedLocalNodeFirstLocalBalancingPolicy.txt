1:e28e7bf: /*
1:e28e7bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:e28e7bf:  * or more contributor license agreements.  See the NOTICE file
1:e28e7bf:  * distributed with this work for additional information
1:e28e7bf:  * regarding copyright ownership.  The ASF licenses this file
1:e28e7bf:  * to you under the Apache License, Version 2.0 (the
1:e28e7bf:  * "License"); you may not use this file except in compliance
1:e28e7bf:  * with the License.  You may obtain a copy of the License at
1:e28e7bf:  *
1:e28e7bf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e28e7bf:  *
1:e28e7bf:  * Unless required by applicable law or agreed to in writing, software
1:e28e7bf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e28e7bf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e28e7bf:  * See the License for the specific language governing permissions and
1:e28e7bf:  * limitations under the License.
1:e28e7bf:  */
1:fe39eb7: package org.apache.cassandra.hadoop.cql3;
1:fe39eb7: 
1:fe39eb7: import com.datastax.driver.core.Cluster;
1:fe39eb7: import com.datastax.driver.core.Host;
1:fe39eb7: import com.datastax.driver.core.HostDistance;
1:fe39eb7: import com.datastax.driver.core.Statement;
1:fe39eb7: import com.datastax.driver.core.policies.LoadBalancingPolicy;
1:fe39eb7: import com.google.common.base.Function;
1:fe39eb7: import com.google.common.collect.Iterators;
1:fe39eb7: import com.google.common.collect.Sets;
1:fe39eb7: import org.slf4j.Logger;
1:fe39eb7: import org.slf4j.LoggerFactory;
1:fe39eb7: 
1:fe39eb7: import java.net.InetAddress;
1:fe39eb7: import java.net.NetworkInterface;
1:fe39eb7: import java.net.SocketException;
1:fe39eb7: import java.net.UnknownHostException;
1:fe39eb7: import java.util.*;
1:fe39eb7: import java.util.concurrent.CopyOnWriteArraySet;
1:fe39eb7: 
1:fe39eb7: /**
1:fe39eb7:  * This load balancing policy is intended to be used only for CqlRecordReader when it fetches a particular split.
1:fe39eb7:  * <p/>
1:fe39eb7:  * It chooses alive hosts only from the set of the given replicas - because the connection is used to load the data from
1:fe39eb7:  * the particular split, with a strictly defined list of the replicas, it is pointless to try the other nodes.
1:fe39eb7:  * The policy tracks which of the replicas are alive, and when a new query plan is requested, it returns those replicas
1:fe39eb7:  * in the following order:
1:fe39eb7:  * <ul>
1:fe39eb7:  * <li>the local node</li>
1:fe39eb7:  * <li>the collection of the remaining hosts (which is shuffled on each request)</li>
1:fe39eb7:  * </ul>
1:fe39eb7:  */
1:fe39eb7: class LimitedLocalNodeFirstLocalBalancingPolicy implements LoadBalancingPolicy
1:fe39eb7: {
1:fe39eb7:     private final static Logger logger = LoggerFactory.getLogger(LimitedLocalNodeFirstLocalBalancingPolicy.class);
1:fe39eb7: 
1:fe39eb7:     private final static Set<InetAddress> localAddresses = Collections.unmodifiableSet(getLocalInetAddresses());
1:fe39eb7: 
1:fe39eb7:     private final CopyOnWriteArraySet<Host> liveReplicaHosts = new CopyOnWriteArraySet<>();
1:fe39eb7: 
1:fe39eb7:     private final Set<InetAddress> replicaAddresses = new HashSet<>();
1:fe39eb7: 
1:fe39eb7:     public LimitedLocalNodeFirstLocalBalancingPolicy(String[] replicas)
1:fe39eb7:     {
1:fe39eb7:         for (String replica : replicas)
1:fe39eb7:         {
1:fe39eb7:             try
1:fe39eb7:             {
1:fe39eb7:                 InetAddress[] addresses = InetAddress.getAllByName(replica);
1:fe39eb7:                 Collections.addAll(replicaAddresses, addresses);
1:fe39eb7:             }
1:fe39eb7:             catch (UnknownHostException e)
1:fe39eb7:             {
1:fe39eb7:                 logger.warn("Invalid replica host name: {}, skipping it", replica);
1:fe39eb7:             }
1:fe39eb7:         }
1:4a849ef:         logger.trace("Created instance with the following replicas: {}", Arrays.asList(replicas));
1:fe39eb7:     }
1:fe39eb7: 
2:fe39eb7:     @Override
1:fe39eb7:     public void init(Cluster cluster, Collection<Host> hosts)
1:fe39eb7:     {
1:fe39eb7:         List<Host> replicaHosts = new ArrayList<>();
1:fe39eb7:         for (Host host : hosts)
1:fe39eb7:         {
1:fe39eb7:             if (replicaAddresses.contains(host.getAddress()))
1:fe39eb7:             {
1:fe39eb7:                 replicaHosts.add(host);
1:fe39eb7:             }
1:fe39eb7:         }
1:fe39eb7:         liveReplicaHosts.addAll(replicaHosts);
1:4a849ef:         logger.trace("Initialized with replica hosts: {}", replicaHosts);
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     @Override
1:16b0288:     public void close()
1:16b0288:     {
1:16b0288:         //
1:16b0288:     }
1:16b0288: 
1:16b0288:     @Override
1:fe39eb7:     public HostDistance distance(Host host)
1:fe39eb7:     {
1:fe39eb7:         if (isLocalHost(host))
1:fe39eb7:         {
1:fe39eb7:             return HostDistance.LOCAL;
1:fe39eb7:         }
1:fe39eb7:         else
1:fe39eb7:         {
1:fe39eb7:             return HostDistance.REMOTE;
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     @Override
1:fe39eb7:     public Iterator<Host> newQueryPlan(String keyspace, Statement statement)
1:fe39eb7:     {
1:fe39eb7:         List<Host> local = new ArrayList<>(1);
1:fe39eb7:         List<Host> remote = new ArrayList<>(liveReplicaHosts.size());
1:fe39eb7:         for (Host liveReplicaHost : liveReplicaHosts)
1:fe39eb7:         {
1:fe39eb7:             if (isLocalHost(liveReplicaHost))
1:fe39eb7:             {
1:fe39eb7:                 local.add(liveReplicaHost);
1:fe39eb7:             }
1:fe39eb7:             else
1:fe39eb7:             {
1:fe39eb7:                 remote.add(liveReplicaHost);
1:fe39eb7:             }
1:fe39eb7:         }
1:fe39eb7: 
1:fe39eb7:         Collections.shuffle(remote);
1:fe39eb7: 
1:4a849ef:         logger.trace("Using the following hosts order for the new query plan: {} | {}", local, remote);
1:fe39eb7: 
1:fe39eb7:         return Iterators.concat(local.iterator(), remote.iterator());
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     @Override
1:fe39eb7:     public void onAdd(Host host)
1:fe39eb7:     {
1:fe39eb7:         if (replicaAddresses.contains(host.getAddress()))
1:fe39eb7:         {
1:fe39eb7:             liveReplicaHosts.add(host);
1:4a849ef:             logger.trace("Added a new host {}", host);
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     @Override
1:fe39eb7:     public void onUp(Host host)
1:fe39eb7:     {
1:fe39eb7:         if (replicaAddresses.contains(host.getAddress()))
1:fe39eb7:         {
1:fe39eb7:             liveReplicaHosts.add(host);
1:4a849ef:             logger.trace("The host {} is now up", host);
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     @Override
1:fe39eb7:     public void onDown(Host host)
1:fe39eb7:     {
1:fe39eb7:         if (liveReplicaHosts.remove(host))
1:fe39eb7:         {
1:4a849ef:             logger.trace("The host {} is now down", host);
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7: 
1:fe39eb7:     @Override
1:fe39eb7:     public void onRemove(Host host)
1:fe39eb7:     {
1:fe39eb7:         if (liveReplicaHosts.remove(host))
1:fe39eb7:         {
1:4a849ef:             logger.trace("Removed the host {}", host);
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     public void onSuspected(Host host)
1:fe39eb7:     {
1:fe39eb7:         // not supported by this load balancing policy
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     private static boolean isLocalHost(Host host)
1:fe39eb7:     {
1:fe39eb7:         InetAddress hostAddress = host.getAddress();
1:fe39eb7:         return hostAddress.isLoopbackAddress() || localAddresses.contains(hostAddress);
1:fe39eb7:     }
1:fe39eb7: 
1:fe39eb7:     private static Set<InetAddress> getLocalInetAddresses()
1:fe39eb7:     {
1:fe39eb7:         try
1:fe39eb7:         {
1:fe39eb7:             return Sets.newHashSet(Iterators.concat(
1:fe39eb7:                     Iterators.transform(
1:fe39eb7:                             Iterators.forEnumeration(NetworkInterface.getNetworkInterfaces()),
1:fe39eb7:                             new Function<NetworkInterface, Iterator<InetAddress>>()
1:fe39eb7:                             {
1:fe39eb7:                                 @Override
1:fe39eb7:                                 public Iterator<InetAddress> apply(NetworkInterface netIface)
1:fe39eb7:                                 {
1:fe39eb7:                                     return Iterators.forEnumeration(netIface.getInetAddresses());
1:fe39eb7:                                 }
1:fe39eb7:                             })));
1:fe39eb7:         }
1:fe39eb7:         catch (SocketException e)
1:fe39eb7:         {
1:fe39eb7:             logger.warn("Could not retrieve local network interfaces.", e);
1:fe39eb7:             return Collections.emptySet();
1:fe39eb7:         }
1:fe39eb7:     }
1:fe39eb7: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Created instance with the following replicas: {}", Arrays.asList(replicas));
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Initialized with replica hosts: {}", replicaHosts);
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Using the following hosts order for the new query plan: {} | {}", local, remote);
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Added a new host {}", host);
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("The host {} is now up", host);
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("The host {} is now down", host);
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Removed the host {}", host);
author:Robert Stupp
-------------------------------------------------------------------------------
commit:16b0288
/////////////////////////////////////////////////////////////////////////
1:     public void close()
1:     {
1:         //
1:     }
1: 
1:     @Override
author:Brandon Williams
-------------------------------------------------------------------------------
commit:ec1f8f9
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:e28e7bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Jacek Lewandowski
-------------------------------------------------------------------------------
commit:fe39eb7
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.hadoop.cql3;
1: 
1: import com.datastax.driver.core.Cluster;
1: import com.datastax.driver.core.Host;
1: import com.datastax.driver.core.HostDistance;
1: import com.datastax.driver.core.Statement;
1: import com.datastax.driver.core.policies.LoadBalancingPolicy;
1: import com.google.common.base.Function;
1: import com.google.common.collect.Iterators;
1: import com.google.common.collect.Sets;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.net.InetAddress;
1: import java.net.NetworkInterface;
1: import java.net.SocketException;
1: import java.net.UnknownHostException;
1: import java.util.*;
1: import java.util.concurrent.CopyOnWriteArraySet;
1: 
1: /**
1:  * This load balancing policy is intended to be used only for CqlRecordReader when it fetches a particular split.
1:  * <p/>
1:  * It chooses alive hosts only from the set of the given replicas - because the connection is used to load the data from
1:  * the particular split, with a strictly defined list of the replicas, it is pointless to try the other nodes.
1:  * The policy tracks which of the replicas are alive, and when a new query plan is requested, it returns those replicas
1:  * in the following order:
1:  * <ul>
1:  * <li>the local node</li>
1:  * <li>the collection of the remaining hosts (which is shuffled on each request)</li>
1:  * </ul>
1:  */
1: class LimitedLocalNodeFirstLocalBalancingPolicy implements LoadBalancingPolicy
1: {
1:     private final static Logger logger = LoggerFactory.getLogger(LimitedLocalNodeFirstLocalBalancingPolicy.class);
1: 
1:     private final static Set<InetAddress> localAddresses = Collections.unmodifiableSet(getLocalInetAddresses());
1: 
1:     private final CopyOnWriteArraySet<Host> liveReplicaHosts = new CopyOnWriteArraySet<>();
1: 
1:     private final Set<InetAddress> replicaAddresses = new HashSet<>();
1: 
1:     public LimitedLocalNodeFirstLocalBalancingPolicy(String[] replicas)
1:     {
1:         for (String replica : replicas)
1:         {
1:             try
1:             {
1:                 InetAddress[] addresses = InetAddress.getAllByName(replica);
1:                 Collections.addAll(replicaAddresses, addresses);
1:             }
1:             catch (UnknownHostException e)
1:             {
1:                 logger.warn("Invalid replica host name: {}, skipping it", replica);
1:             }
1:         }
0:         logger.debug("Created instance with the following replicas: {}", Arrays.asList(replicas));
1:     }
1: 
1:     @Override
1:     public void init(Cluster cluster, Collection<Host> hosts)
1:     {
1:         List<Host> replicaHosts = new ArrayList<>();
1:         for (Host host : hosts)
1:         {
1:             if (replicaAddresses.contains(host.getAddress()))
1:             {
1:                 replicaHosts.add(host);
1:             }
1:         }
1:         liveReplicaHosts.addAll(replicaHosts);
0:         logger.debug("Initialized with replica hosts: {}", replicaHosts);
1:     }
1: 
1:     @Override
1:     public HostDistance distance(Host host)
1:     {
1:         if (isLocalHost(host))
1:         {
1:             return HostDistance.LOCAL;
1:         }
1:         else
1:         {
1:             return HostDistance.REMOTE;
1:         }
1:     }
1: 
1:     @Override
1:     public Iterator<Host> newQueryPlan(String keyspace, Statement statement)
1:     {
1:         List<Host> local = new ArrayList<>(1);
1:         List<Host> remote = new ArrayList<>(liveReplicaHosts.size());
1:         for (Host liveReplicaHost : liveReplicaHosts)
1:         {
1:             if (isLocalHost(liveReplicaHost))
1:             {
1:                 local.add(liveReplicaHost);
1:             }
1:             else
1:             {
1:                 remote.add(liveReplicaHost);
1:             }
1:         }
1: 
1:         Collections.shuffle(remote);
1: 
0:         logger.debug("Using the following hosts order for the new query plan: {} | {}", local, remote);
1: 
1:         return Iterators.concat(local.iterator(), remote.iterator());
1:     }
1: 
1:     @Override
1:     public void onAdd(Host host)
1:     {
1:         if (replicaAddresses.contains(host.getAddress()))
1:         {
1:             liveReplicaHosts.add(host);
0:             logger.debug("Added a new host {}", host);
1:         }
1:     }
1: 
1:     @Override
1:     public void onUp(Host host)
1:     {
1:         if (replicaAddresses.contains(host.getAddress()))
1:         {
1:             liveReplicaHosts.add(host);
0:             logger.debug("The host {} is now up", host);
1:         }
1:     }
1: 
1:     @Override
1:     public void onDown(Host host)
1:     {
1:         if (liveReplicaHosts.remove(host))
1:         {
0:             logger.debug("The host {} is now down", host);
1:         }
1:     }
1: 
1: 
1:     @Override
1:     public void onRemove(Host host)
1:     {
1:         if (liveReplicaHosts.remove(host))
1:         {
0:             logger.debug("Removed the host {}", host);
1:         }
1:     }
1: 
1:     @Override
1:     public void onSuspected(Host host)
1:     {
1:         // not supported by this load balancing policy
1:     }
1: 
1:     private static boolean isLocalHost(Host host)
1:     {
1:         InetAddress hostAddress = host.getAddress();
1:         return hostAddress.isLoopbackAddress() || localAddresses.contains(hostAddress);
1:     }
1: 
1:     private static Set<InetAddress> getLocalInetAddresses()
1:     {
1:         try
1:         {
1:             return Sets.newHashSet(Iterators.concat(
1:                     Iterators.transform(
1:                             Iterators.forEnumeration(NetworkInterface.getNetworkInterfaces()),
1:                             new Function<NetworkInterface, Iterator<InetAddress>>()
1:                             {
1:                                 @Override
1:                                 public Iterator<InetAddress> apply(NetworkInterface netIface)
1:                                 {
1:                                     return Iterators.forEnumeration(netIface.getInetAddresses());
1:                                 }
1:                             })));
1:         }
1:         catch (SocketException e)
1:         {
1:             logger.warn("Could not retrieve local network interfaces.", e);
1:             return Collections.emptySet();
1:         }
1:     }
1: }
============================================================================