1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
2:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
2:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
11:69cedbf: 
1:ae0f634: import java.util.List;
1:69cedbf: import java.util.concurrent.TimeUnit;
1:ae0f634: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: import com.codahale.metrics.Timer;
1:5b8ac8c: 
1:ae0f634: import com.google.common.collect.ImmutableList;
1:ae0f634: import com.google.common.collect.Lists;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: 
2:69cedbf: /**
1:69cedbf:  * Metrics about latencies
1:69cedbf:  */
1:69cedbf: public class LatencyMetrics
1:5b8ac8c: {
1:69cedbf:     /** Latency */
1:69cedbf:     public final Timer latency;
1:69cedbf:     /** Total latency in micro sec */
1:69cedbf:     public final Counter totalLatency;
1:5b8ac8c: 
1:ae0f634:     /** parent metrics to replicate any updates to **/
1:ae0f634:     private List<LatencyMetrics> parents = Lists.newArrayList();
1:ae0f634:     
1:69cedbf:     protected final MetricNameFactory factory;
1:0bd5170:     protected final MetricNameFactory aliasFactory;
1:69cedbf:     protected final String namePrefix;
1:69cedbf: 
1:69cedbf:     /**
1:69cedbf:      * Create LatencyMetrics with given group, type, and scope. Name prefix for each metric will be empty.
1:69cedbf:      *
1:69cedbf:      * @param type Type name
1:69cedbf:      * @param scope Scope
1:69cedbf:      */
1:eb390d0:     public LatencyMetrics(String type, String scope)
1:5e51aa4:     {
1:eb390d0:         this(type, "", scope);
1:5e51aa4:     }
1:ae0f634: 
1:ae0f634:     /**
1:69cedbf:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
1:5b8ac8c:      *
1:69cedbf:      * @param type Type name
2:69cedbf:      * @param namePrefix Prefix to append to each metric name
1:69cedbf:      * @param scope Scope of metrics
1:69cedbf:      */
1:eb390d0:     public LatencyMetrics(String type, String namePrefix, String scope)
12:69cedbf:     {
1:eb390d0:         this(new DefaultNameFactory(type, scope), namePrefix);
12:69cedbf:     }
1:5b8ac8c: 
1:5b8ac8c:     /**
1:69cedbf:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
1:69cedbf:      *
1:5b8ac8c:      * @param factory MetricName factory to use
1:5b8ac8c:      * @param namePrefix Prefix to append to each metric name
1:5b8ac8c:      */
1:69cedbf:     public LatencyMetrics(MetricNameFactory factory, String namePrefix)
1:5b8ac8c:     {
1:0bd5170:         this(factory, null, namePrefix);
1:0bd5170:     }
1:0bd5170: 
1:0bd5170:     public LatencyMetrics(MetricNameFactory factory, MetricNameFactory aliasFactory, String namePrefix)
1:0bd5170:     {
1:69cedbf:         this.factory = factory;
1:0bd5170:         this.aliasFactory = aliasFactory;
1:69cedbf:         this.namePrefix = namePrefix;
1:69cedbf: 
1:0bd5170:         if (aliasFactory == null)
1:0bd5170:         {
1:0bd5170:             latency = Metrics.timer(factory.createMetricName(namePrefix + "Latency"));
1:0bd5170:             totalLatency = Metrics.counter(factory.createMetricName(namePrefix + "TotalLatency"));
1:0bd5170:         }
1:0bd5170:         else
1:0bd5170:         {
1:0bd5170:             latency = Metrics.timer(factory.createMetricName(namePrefix + "Latency"), aliasFactory.createMetricName(namePrefix + "Latency"));
1:0bd5170:             totalLatency = Metrics.counter(factory.createMetricName(namePrefix + "TotalLatency"), aliasFactory.createMetricName(namePrefix + "TotalLatency"));
1:0bd5170:         }
1:69cedbf:     }
1:69cedbf:     
1:69cedbf:     /**
1:ae0f634:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.  Any updates
1:ae0f634:      * to this will also run on parent
1:ae0f634:      *
1:ae0f634:      * @param factory MetricName factory to use
1:ae0f634:      * @param namePrefix Prefix to append to each metric name
1:f92d00c:      * @param parents any amount of parents to replicate updates to
1:ae0f634:      */
1:ae0f634:     public LatencyMetrics(MetricNameFactory factory, String namePrefix, LatencyMetrics ... parents)
1:ae0f634:     {
1:0bd5170:         this(factory, null, namePrefix);
1:ae0f634:         this.parents.addAll(ImmutableList.copyOf(parents));
1:ae0f634:     }
1:69cedbf: 
1:69cedbf:     /** takes nanoseconds **/
1:69cedbf:     public void addNano(long nanos)
1:5e51aa4:     {
1:69cedbf:         // convert to microseconds. 1 millionth
1:28d8216:         latency.update(nanos, TimeUnit.NANOSECONDS);
1:6d2f276:         totalLatency.inc(nanos / 1000);
1:ae0f634:         for(LatencyMetrics parent : parents)
1:ae0f634:         {
1:ae0f634:             parent.addNano(nanos);
1:ae0f634:         }
1:5b8ac8c:     }
1:69cedbf: 
1:69cedbf:     public void release()
1:0bd5170:     {
1:0bd5170:         if (aliasFactory == null)
1:69cedbf:         {
1:0bd5170:             Metrics.remove(factory.createMetricName(namePrefix + "Latency"));
1:0bd5170:             Metrics.remove(factory.createMetricName(namePrefix + "TotalLatency"));
1:0bd5170:         }
1:0bd5170:         else
1:0bd5170:         {
1:0bd5170:             Metrics.remove(factory.createMetricName(namePrefix + "Latency"), aliasFactory.createMetricName(namePrefix + "Latency"));
1:0bd5170:             Metrics.remove(factory.createMetricName(namePrefix + "TotalLatency"), aliasFactory.createMetricName(namePrefix + "TotalLatency"));
1:0bd5170:         }
1:5b8ac8c:     }
1:5e51aa4: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1:     protected final MetricNameFactory aliasFactory;
/////////////////////////////////////////////////////////////////////////
1:         this(factory, null, namePrefix);
1:     }
1: 
1:     public LatencyMetrics(MetricNameFactory factory, MetricNameFactory aliasFactory, String namePrefix)
1:     {
1:         this.aliasFactory = aliasFactory;
1:         if (aliasFactory == null)
1:         {
1:             latency = Metrics.timer(factory.createMetricName(namePrefix + "Latency"));
1:             totalLatency = Metrics.counter(factory.createMetricName(namePrefix + "TotalLatency"));
1:         }
1:         else
1:         {
1:             latency = Metrics.timer(factory.createMetricName(namePrefix + "Latency"), aliasFactory.createMetricName(namePrefix + "Latency"));
1:             totalLatency = Metrics.counter(factory.createMetricName(namePrefix + "TotalLatency"), aliasFactory.createMetricName(namePrefix + "TotalLatency"));
1:         }
/////////////////////////////////////////////////////////////////////////
1:         this(factory, null, namePrefix);
/////////////////////////////////////////////////////////////////////////
1:         if (aliasFactory == null)
1:         {
1:             Metrics.remove(factory.createMetricName(namePrefix + "Latency"));
1:             Metrics.remove(factory.createMetricName(namePrefix + "TotalLatency"));
1:         }
1:         else
1:         {
1:             Metrics.remove(factory.createMetricName(namePrefix + "Latency"), aliasFactory.createMetricName(namePrefix + "Latency"));
1:             Metrics.remove(factory.createMetricName(namePrefix + "TotalLatency"), aliasFactory.createMetricName(namePrefix + "TotalLatency"));
1:         }
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:6d2f276
/////////////////////////////////////////////////////////////////////////
1:         totalLatency.inc(nanos / 1000);
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Timer;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         latency = Metrics.timer(factory.createMetricName(namePrefix + "Latency"));
0:         totalLatency = Metrics.counter(factory.createMetricName(namePrefix + "TotalLatency"));
/////////////////////////////////////////////////////////////////////////
0:         totalLatency.inc(nanos);
/////////////////////////////////////////////////////////////////////////
0:         Metrics.remove(factory.createMetricName(namePrefix + "Latency"));
0:         Metrics.remove(factory.createMetricName(namePrefix + "TotalLatency"));
author:Dave Brosius
-------------------------------------------------------------------------------
commit:f92d00c
/////////////////////////////////////////////////////////////////////////
1:      * @param parents any amount of parents to replicate updates to
author:Brandon Williams
-------------------------------------------------------------------------------
commit:ae0f634
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
0: import org.apache.cassandra.utils.EstimatedHistogram;
1: 
1: import com.google.common.collect.ImmutableList;
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1:     /** parent metrics to replicate any updates to **/
1:     private List<LatencyMetrics> parents = Lists.newArrayList();
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.  Any updates
1:      * to this will also run on parent
1:      *
1:      * @param factory MetricName factory to use
1:      * @param namePrefix Prefix to append to each metric name
0:      * @param parents... any amount of parents to replicate updates to
1:      */
1:     public LatencyMetrics(MetricNameFactory factory, String namePrefix, LatencyMetrics ... parents)
1:     {
0:         this(factory, namePrefix);
1:         this.parents.addAll(ImmutableList.copyOf(parents));
1:     }
/////////////////////////////////////////////////////////////////////////
1:         for(LatencyMetrics parent : parents)
1:         {
1:             parent.addNano(nanos);
1:         }
commit:5b8ac8c
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import org.apache.cassandra.utils.EstimatedHistogram;
1: 
0: import com.google.common.collect.ImmutableList;
0: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
0:     /** parent metrics to replicate any updates to **/
0:     private List<LatencyMetrics> parents = Lists.newArrayList();
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.  Any updates
0:      * to this will also run on parent
1:      *
1:      * @param factory MetricName factory to use
1:      * @param namePrefix Prefix to append to each metric name
0:      * @param parents... any amount of parents to replicate updates to
1:      */
0:     public LatencyMetrics(MetricNameFactory factory, String namePrefix, LatencyMetrics ... parents)
1:     {
0:         this(factory, namePrefix);
0:         this.parents.addAll(ImmutableList.copyOf(parents));
1:     }
/////////////////////////////////////////////////////////////////////////
0:         for(LatencyMetrics parent : parents)
1:         {
0:             parent.addNano(nanos);
1:         }
commit:ca75b97
/////////////////////////////////////////////////////////////////////////
0:     public synchronized double getRecentLatency()
0:         if (ops == lastOpCount)
0:             return 0;
commit:28d8216
/////////////////////////////////////////////////////////////////////////
1:         latency.update(nanos, TimeUnit.NANOSECONDS);
0:         totalLatency.inc(nanos / 1000);
/////////////////////////////////////////////////////////////////////////
0:         long ops = latency.count();
0:         long n = totalLatency.count();
commit:4b09b8d
/////////////////////////////////////////////////////////////////////////
0:     public synchronized double getRecentLatency()
0:         if (ops == lastOpCount)
0:             return 0;
commit:bc89517
/////////////////////////////////////////////////////////////////////////
0:         latency.update(nanos, TimeUnit.NANOSECONDS);
0:         totalLatency.inc(nanos / 1000);
/////////////////////////////////////////////////////////////////////////
0:         long ops = latency.count();
0:         long n = totalLatency.count();
commit:5e51aa4
/////////////////////////////////////////////////////////////////////////
0:         synchronized (this)
1:         {
0:             latency.update(nanos, TimeUnit.NANOSECONDS);
0:             totalLatency.inc(nanos / 1000);
1:         }
/////////////////////////////////////////////////////////////////////////
0:         long ops = 0;
0:         long n = 0;
0:         synchronized (this)
1:         {
0:             ops = latency.count();
0:             n = totalLatency.count();
1:         }
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:8693a26
/////////////////////////////////////////////////////////////////////////
0:         latency.update(nanos, TimeUnit.NANOSECONDS);
0:         totalLatency.inc(nanos / 1000);
0:         totalLatencyHistogram.add(nanos / 1000);
0:         recentLatencyHistogram.add(nanos / 1000);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public LatencyMetrics(String type, String scope)
1:         this(type, "", scope);
1:     public LatencyMetrics(String type, String namePrefix, String scope)
1:         this(new DefaultNameFactory(type, scope), namePrefix);
/////////////////////////////////////////////////////////////////////////
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.MetricName;
0: import com.yammer.metrics.core.Timer;
1: 
0: import org.apache.cassandra.utils.EstimatedHistogram;
1: 
1: /**
1:  * Metrics about latencies
1:  */
1: public class LatencyMetrics
1: {
1:     /** Latency */
1:     public final Timer latency;
1:     /** Total latency in micro sec */
1:     public final Counter totalLatency;
1: 
1:     protected final MetricNameFactory factory;
1:     protected final String namePrefix;
1: 
0:     @Deprecated public final EstimatedHistogram totalLatencyHistogram = new EstimatedHistogram();
0:     @Deprecated public final EstimatedHistogram recentLatencyHistogram = new EstimatedHistogram();
0:     protected long lastLatency;
0:     protected long lastOpCount;
1: 
1:     /**
1:      * Create LatencyMetrics with given group, type, and scope. Name prefix for each metric will be empty.
1:      *
0:      * @param group Group name
1:      * @param type Type name
1:      * @param scope Scope
1:      */
0:     public LatencyMetrics(String group, String type, String scope)
1:     {
0:         this(group, type, "", scope);
1:     }
1: 
1:     /**
1:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
1:      *
0:      * @param group Group name
1:      * @param type Type name
1:      * @param namePrefix Prefix to append to each metric name
1:      * @param scope Scope of metrics
1:      */
0:     public LatencyMetrics(String group, String type, String namePrefix, String scope)
1:     {
0:         this(new LatencyMetricNameFactory(group, type, scope), namePrefix);
1:     }
1: 
1:     /**
1:      * Create LatencyMetrics with given group, type, prefix to append to each metric name, and scope.
1:      *
0:      * @param factory MetricName factory to use
1:      * @param namePrefix Prefix to append to each metric name
1:      */
1:     public LatencyMetrics(MetricNameFactory factory, String namePrefix)
1:     {
1:         this.factory = factory;
1:         this.namePrefix = namePrefix;
1: 
0:         latency = Metrics.newTimer(factory.createMetricName(namePrefix + "Latency"), TimeUnit.MICROSECONDS, TimeUnit.SECONDS);
0:         totalLatency = Metrics.newCounter(factory.createMetricName(namePrefix + "TotalLatency"));
1:     }
1: 
1:     /** takes nanoseconds **/
1:     public void addNano(long nanos)
1:     {
1:         // convert to microseconds. 1 millionth
0:         addMicro(nanos / 1000);
1:     }
1: 
0:     public void addMicro(long micros)
1:     {
0:         latency.update(micros, TimeUnit.MICROSECONDS);
0:         totalLatency.inc(micros);
0:         totalLatencyHistogram.add(micros);
0:         recentLatencyHistogram.add(micros);
1:     }
1: 
1:     public void release()
1:     {
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName(namePrefix + "Latency"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName(namePrefix + "TotalLatency"));
1:     }
1: 
0:     @Deprecated
0:     public double getRecentLatency()
1:     {
0:         long ops = latency.count();
0:         long n = totalLatency.count();
0:         try
1:         {
0:             return ((double) n - lastLatency) / (ops - lastOpCount);
1:         }
0:         finally
1:         {
0:             lastLatency = n;
0:             lastOpCount = ops;
1:         }
1:     }
1: 
0:     static class LatencyMetricNameFactory implements MetricNameFactory
1:     {
0:         private final String group;
0:         private final String type;
0:         private final String scope;
1: 
0:         LatencyMetricNameFactory(String group, String type, String scope)
1:         {
0:             this.group = group;
0:             this.type = type;
0:             this.scope = scope;
1:         }
1: 
0:         public MetricName createMetricName(String metricName)
1:         {
0:             return new MetricName(group, type, metricName, scope);
1:         }
1:     }
1: }
============================================================================