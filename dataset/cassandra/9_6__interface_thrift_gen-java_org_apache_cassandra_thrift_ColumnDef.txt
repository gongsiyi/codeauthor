1:9249a6c: /**
1:bffd9ea:  * Autogenerated by Thrift Compiler (0.9.1)
1:9249a6c:  *
1:9249a6c:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:b153d45:  *  @generated
1:9249a6c:  */
1:9249a6c: package org.apache.cassandra.thrift;
1:9249a6c: /*
1:9249a6c:  * 
1:9249a6c:  * Licensed to the Apache Software Foundation (ASF) under one
1:9249a6c:  * or more contributor license agreements.  See the NOTICE file
1:9249a6c:  * distributed with this work for additional information
1:9249a6c:  * regarding copyright ownership.  The ASF licenses this file
1:9249a6c:  * to you under the Apache License, Version 2.0 (the
1:9249a6c:  * "License"); you may not use this file except in compliance
1:9249a6c:  * with the License.  You may obtain a copy of the License at
1:9249a6c:  * 
1:9249a6c:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9249a6c:  * 
1:9249a6c:  * Unless required by applicable law or agreed to in writing,
1:9249a6c:  * software distributed under the License is distributed on an
1:9249a6c:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9249a6c:  * KIND, either express or implied.  See the License for the
1:9249a6c:  * specific language governing permissions and limitations
1:9249a6c:  * under the License.
1:9249a6c:  * 
1:9249a6c:  */
1:9249a6c: 
1:9249a6c: 
1:bffd9ea: import org.apache.commons.lang3.builder.HashCodeBuilder;
1:b153d45: import org.apache.thrift.scheme.IScheme;
1:b153d45: import org.apache.thrift.scheme.SchemeFactory;
1:b153d45: import org.apache.thrift.scheme.StandardScheme;
1:9249a6c: 
1:b153d45: import org.apache.thrift.scheme.TupleScheme;
1:b153d45: import org.apache.thrift.protocol.TTupleProtocol;
1:9249a6c: import java.util.Map;
1:9249a6c: import java.util.HashMap;
1:9249a6c: import java.util.EnumMap;
1:9249a6c: import java.util.EnumSet;
1:9249a6c: import java.util.Collections;
1:9249a6c: import java.util.BitSet;
1:e7a385a: import java.nio.ByteBuffer;
1:9249a6c: 
1:bffd9ea: public class ColumnDef implements org.apache.thrift.TBase<ColumnDef, ColumnDef._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnDef> {
1:4ec9511:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnDef");
1:9249a6c: 
1:4ec9511:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:4ec9511:   private static final org.apache.thrift.protocol.TField VALIDATION_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("validation_class", org.apache.thrift.protocol.TType.STRING, (short)2);
1:4ec9511:   private static final org.apache.thrift.protocol.TField INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("index_type", org.apache.thrift.protocol.TType.I32, (short)3);
1:4ec9511:   private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("index_name", org.apache.thrift.protocol.TType.STRING, (short)4);
1:16d7385:   private static final org.apache.thrift.protocol.TField INDEX_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("index_options", org.apache.thrift.protocol.TType.MAP, (short)5);
1:9249a6c: 
1:b153d45:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:b153d45:   static {
1:b153d45:     schemes.put(StandardScheme.class, new ColumnDefStandardSchemeFactory());
1:b153d45:     schemes.put(TupleScheme.class, new ColumnDefTupleSchemeFactory());
1:b153d45:   }
1:9249a6c: 
1:7c8c570:   public ByteBuffer name; // required
1:7c8c570:   public String validation_class; // required
1:972812c:   /**
1:972812c:    * 
1:972812c:    * @see IndexType
1:972812c:    */
1:b153d45:   public IndexType index_type; // optional
1:b153d45:   public String index_name; // optional
1:b153d45:   public Map<String,String> index_options; // optional
1:9249a6c: 
1:9249a6c:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
1:4ec9511:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
1:9249a6c:     NAME((short)1, "name"),
1:9249a6c:     VALIDATION_CLASS((short)2, "validation_class"),
1:972812c:     /**
1:972812c:      * 
1:972812c:      * @see IndexType
1:972812c:      */
1:9249a6c:     INDEX_TYPE((short)3, "index_type"),
1:16d7385:     INDEX_NAME((short)4, "index_name"),
1:16d7385:     INDEX_OPTIONS((short)5, "index_options");
1:9249a6c: 
1:9249a6c:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1:9249a6c: 
1:9249a6c:     static {
1:9249a6c:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
1:9249a6c:         byName.put(field.getFieldName(), field);
1:9249a6c:       }
1:9249a6c:     }
1:9249a6c: 
1:972812c:     /**
1:9249a6c:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:972812c:      */
1:9249a6c:     public static _Fields findByThriftId(int fieldId) {
1:d849c69:       switch(fieldId) {
1:d849c69:         case 1: // NAME
1:d849c69:           return NAME;
1:d849c69:         case 2: // VALIDATION_CLASS
1:d849c69:           return VALIDATION_CLASS;
1:d849c69:         case 3: // INDEX_TYPE
1:d849c69:           return INDEX_TYPE;
1:d849c69:         case 4: // INDEX_NAME
1:d849c69:           return INDEX_NAME;
1:16d7385:         case 5: // INDEX_OPTIONS
1:16d7385:           return INDEX_OPTIONS;
1:d849c69:         default:
1:d849c69:           return null;
1:d849c69:       }
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     /**
1:9249a6c:      * Find the _Fields constant that matches fieldId, throwing an exception
1:9249a6c:      * if it is not found.
1:9249a6c:      */
1:9249a6c:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:9249a6c:       _Fields fields = findByThriftId(fieldId);
1:9249a6c:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:9249a6c:       return fields;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     /**
1:9249a6c:      * Find the _Fields constant that matches name, or null if its not found.
1:9249a6c:      */
1:9249a6c:     public static _Fields findByName(String name) {
1:9249a6c:       return byName.get(name);
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     private final short _thriftId;
1:9249a6c:     private final String _fieldName;
1:9249a6c: 
1:9249a6c:     _Fields(short thriftId, String fieldName) {
1:9249a6c:       _thriftId = thriftId;
1:9249a6c:       _fieldName = fieldName;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     public short getThriftFieldId() {
1:9249a6c:       return _thriftId;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     public String getFieldName() {
1:9249a6c:       return _fieldName;
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   // isset id assignments
1:b153d45:   private _Fields optionals[] = {_Fields.INDEX_TYPE,_Fields.INDEX_NAME,_Fields.INDEX_OPTIONS};
1:4ec9511:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:9249a6c:   static {
1:4ec9511:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:4ec9511:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:4ec9511:     tmpMap.put(_Fields.VALIDATION_CLASS, new org.apache.thrift.meta_data.FieldMetaData("validation_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:4ec9511:     tmpMap.put(_Fields.INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("index_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IndexType.class)));
1:4ec9511:     tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("index_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:4ec9511:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:16d7385:     tmpMap.put(_Fields.INDEX_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("index_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:16d7385:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:16d7385:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:16d7385:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
1:d849c69:     metaDataMap = Collections.unmodifiableMap(tmpMap);
1:4ec9511:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnDef.class, metaDataMap);
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef() {
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef(
1:e7a385a:     ByteBuffer name,
1:9249a6c:     String validation_class)
1:9249a6c:   {
1:9249a6c:     this();
1:9249a6c:     this.name = name;
1:9249a6c:     this.validation_class = validation_class;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   /**
1:9249a6c:    * Performs a deep copy on <i>other</i>.
1:9249a6c:    */
1:9249a6c:   public ColumnDef(ColumnDef other) {
1:9249a6c:     if (other.isSetName()) {
1:4ec9511:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
1:e7a385a: ;
1:9249a6c:     }
1:9249a6c:     if (other.isSetValidation_class()) {
1:9249a6c:       this.validation_class = other.validation_class;
1:9249a6c:     }
1:9249a6c:     if (other.isSetIndex_type()) {
1:9249a6c:       this.index_type = other.index_type;
1:9249a6c:     }
1:9249a6c:     if (other.isSetIndex_name()) {
1:9249a6c:       this.index_name = other.index_name;
1:9249a6c:     }
1:16d7385:     if (other.isSetIndex_options()) {
1:bffd9ea:       Map<String,String> __this__index_options = new HashMap<String,String>(other.index_options);
1:16d7385:       this.index_options = __this__index_options;
1:9249a6c:     }
1:b153d45:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef deepCopy() {
2:9249a6c:     return new ColumnDef(this);
1:9249a6c:   }
1:9249a6c: 
1:e7a385a:   @Override
1:e7a385a:   public void clear() {
1:e7a385a:     this.name = null;
1:e7a385a:     this.validation_class = null;
1:e7a385a:     this.index_type = null;
1:e7a385a:     this.index_name = null;
1:16d7385:     this.index_options = null;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public byte[] getName() {
1:4ec9511:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:4ec9511:     return name == null ? null : name.array();
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public ByteBuffer bufferForName() {
1:e7a385a:     return name;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef setName(byte[] name) {
1:4ec9511:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
1:e7a385a:     return this;
1:e7a385a:   }
1:e7a385a: 
1:e7a385a:   public ColumnDef setName(ByteBuffer name) {
1:9249a6c:     this.name = name;
1:9249a6c:     return this;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void unsetName() {
1:9249a6c:     this.name = null;
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
1:9249a6c:   public boolean isSetName() {
1:9249a6c:     return this.name != null;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void setNameIsSet(boolean value) {
1:9249a6c:     if (!value) {
1:9249a6c:       this.name = null;
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public String getValidation_class() {
1:9249a6c:     return this.validation_class;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef setValidation_class(String validation_class) {
1:9249a6c:     this.validation_class = validation_class;
1:9249a6c:     return this;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void unsetValidation_class() {
1:9249a6c:     this.validation_class = null;
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   /** Returns true if field validation_class is set (has been assigned a value) and false otherwise */
1:9249a6c:   public boolean isSetValidation_class() {
1:9249a6c:     return this.validation_class != null;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void setValidation_classIsSet(boolean value) {
1:9249a6c:     if (!value) {
1:9249a6c:       this.validation_class = null;
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   /**
1:972812c:    * 
1:972812c:    * @see IndexType
1:9249a6c:    */
1:972812c:   public IndexType getIndex_type() {
1:9249a6c:     return this.index_type;
1:9249a6c:   }
1:9249a6c: 
1:972812c:   /**
1:972812c:    * 
1:972812c:    * @see IndexType
1:972812c:    */
1:972812c:   public ColumnDef setIndex_type(IndexType index_type) {
1:9249a6c:     this.index_type = index_type;
1:9249a6c:     return this;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void unsetIndex_type() {
1:9249a6c:     this.index_type = null;
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   /** Returns true if field index_type is set (has been assigned a value) and false otherwise */
1:9249a6c:   public boolean isSetIndex_type() {
1:9249a6c:     return this.index_type != null;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void setIndex_typeIsSet(boolean value) {
1:9249a6c:     if (!value) {
1:9249a6c:       this.index_type = null;
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public String getIndex_name() {
1:9249a6c:     return this.index_name;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public ColumnDef setIndex_name(String index_name) {
1:9249a6c:     this.index_name = index_name;
1:9249a6c:     return this;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void unsetIndex_name() {
1:9249a6c:     this.index_name = null;
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   /** Returns true if field index_name is set (has been assigned a value) and false otherwise */
1:9249a6c:   public boolean isSetIndex_name() {
1:9249a6c:     return this.index_name != null;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public void setIndex_nameIsSet(boolean value) {
1:9249a6c:     if (!value) {
1:9249a6c:       this.index_name = null;
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:16d7385:   public int getIndex_optionsSize() {
1:16d7385:     return (this.index_options == null) ? 0 : this.index_options.size();
1:9249a6c:   }
1:9249a6c: 
1:16d7385:   public void putToIndex_options(String key, String val) {
1:16d7385:     if (this.index_options == null) {
1:16d7385:       this.index_options = new HashMap<String,String>();
1:9249a6c:     }
1:16d7385:     this.index_options.put(key, val);
1:b153d45:   }
1:9249a6c: 
1:16d7385:   public Map<String,String> getIndex_options() {
1:16d7385:     return this.index_options;
1:b153d45:   }
1:b153d45: 
1:16d7385:   public ColumnDef setIndex_options(Map<String,String> index_options) {
1:16d7385:     this.index_options = index_options;
1:16d7385:     return this;
1:b153d45:   }
1:b153d45: 
1:16d7385:   public void unsetIndex_options() {
1:16d7385:     this.index_options = null;
1:b153d45:   }
2:16d7385: 
1:16d7385:   /** Returns true if field index_options is set (has been assigned a value) and false otherwise */
1:16d7385:   public boolean isSetIndex_options() {
1:16d7385:     return this.index_options != null;
1:b153d45:   }
1:16d7385: 
1:16d7385:   public void setIndex_optionsIsSet(boolean value) {
1:16d7385:     if (!value) {
1:16d7385:       this.index_options = null;
1:b153d45:     }
1:b153d45:   }
1:16d7385: 
1:9249a6c:   public void setFieldValue(_Fields field, Object value) {
1:9249a6c:     switch (field) {
1:9249a6c:     case NAME:
1:9249a6c:       if (value == null) {
1:9249a6c:         unsetName();
1:9249a6c:       } else {
1:e7a385a:         setName((ByteBuffer)value);
1:9249a6c:       }
1:9249a6c:       break;
1:9249a6c: 
1:9249a6c:     case VALIDATION_CLASS:
1:9249a6c:       if (value == null) {
1:9249a6c:         unsetValidation_class();
1:9249a6c:       } else {
1:9249a6c:         setValidation_class((String)value);
1:9249a6c:       }
1:9249a6c:       break;
1:9249a6c: 
1:9249a6c:     case INDEX_TYPE:
1:9249a6c:       if (value == null) {
1:9249a6c:         unsetIndex_type();
1:9249a6c:       } else {
1:972812c:         setIndex_type((IndexType)value);
1:9249a6c:       }
1:9249a6c:       break;
1:9249a6c: 
1:9249a6c:     case INDEX_NAME:
1:9249a6c:       if (value == null) {
1:9249a6c:         unsetIndex_name();
1:9249a6c:       } else {
1:9249a6c:         setIndex_name((String)value);
1:9249a6c:       }
1:9249a6c:       break;
1:9249a6c: 
1:16d7385:     case INDEX_OPTIONS:
1:16d7385:       if (value == null) {
1:16d7385:         unsetIndex_options();
3:b153d45:       } else {
1:16d7385:         setIndex_options((Map<String,String>)value);
1:9249a6c:       }
5:b153d45:       break;
1:9249a6c: 
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public Object getFieldValue(_Fields field) {
1:9249a6c:     switch (field) {
1:9249a6c:     case NAME:
1:9249a6c:       return getName();
1:9249a6c: 
1:9249a6c:     case VALIDATION_CLASS:
1:9249a6c:       return getValidation_class();
1:9249a6c: 
1:9249a6c:     case INDEX_TYPE:
1:9249a6c:       return getIndex_type();
1:9249a6c: 
1:9249a6c:     case INDEX_NAME:
1:9249a6c:       return getIndex_name();
1:9249a6c: 
1:16d7385:     case INDEX_OPTIONS:
1:16d7385:       return getIndex_options();
1:9249a6c: 
1:9249a6c:     }
1:9249a6c:     throw new IllegalStateException();
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
1:9249a6c:   public boolean isSet(_Fields field) {
1:e7a385a:     if (field == null) {
1:e7a385a:       throw new IllegalArgumentException();
1:e7a385a:     }
1:e7a385a: 
1:9249a6c:     switch (field) {
1:9249a6c:     case NAME:
1:9249a6c:       return isSetName();
1:9249a6c:     case VALIDATION_CLASS:
1:9249a6c:       return isSetValidation_class();
1:9249a6c:     case INDEX_TYPE:
1:9249a6c:       return isSetIndex_type();
1:9249a6c:     case INDEX_NAME:
1:9249a6c:       return isSetIndex_name();
1:16d7385:     case INDEX_OPTIONS:
1:16d7385:       return isSetIndex_options();
1:9249a6c:     }
1:9249a6c:     throw new IllegalStateException();
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   @Override
1:9249a6c:   public boolean equals(Object that) {
1:9249a6c:     if (that == null)
1:9249a6c:       return false;
1:9249a6c:     if (that instanceof ColumnDef)
1:9249a6c:       return this.equals((ColumnDef)that);
1:9249a6c:     return false;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   public boolean equals(ColumnDef that) {
1:9249a6c:     if (that == null)
1:9249a6c:       return false;
1:9249a6c: 
1:9249a6c:     boolean this_present_name = true && this.isSetName();
1:9249a6c:     boolean that_present_name = true && that.isSetName();
1:9249a6c:     if (this_present_name || that_present_name) {
1:9249a6c:       if (!(this_present_name && that_present_name))
1:9249a6c:         return false;
1:e7a385a:       if (!this.name.equals(that.name))
1:9249a6c:         return false;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     boolean this_present_validation_class = true && this.isSetValidation_class();
1:9249a6c:     boolean that_present_validation_class = true && that.isSetValidation_class();
1:9249a6c:     if (this_present_validation_class || that_present_validation_class) {
1:9249a6c:       if (!(this_present_validation_class && that_present_validation_class))
1:9249a6c:         return false;
1:9249a6c:       if (!this.validation_class.equals(that.validation_class))
1:9249a6c:         return false;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     boolean this_present_index_type = true && this.isSetIndex_type();
1:9249a6c:     boolean that_present_index_type = true && that.isSetIndex_type();
1:9249a6c:     if (this_present_index_type || that_present_index_type) {
1:9249a6c:       if (!(this_present_index_type && that_present_index_type))
1:9249a6c:         return false;
1:9249a6c:       if (!this.index_type.equals(that.index_type))
1:9249a6c:         return false;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     boolean this_present_index_name = true && this.isSetIndex_name();
1:9249a6c:     boolean that_present_index_name = true && that.isSetIndex_name();
1:9249a6c:     if (this_present_index_name || that_present_index_name) {
1:9249a6c:       if (!(this_present_index_name && that_present_index_name))
1:9249a6c:         return false;
1:9249a6c:       if (!this.index_name.equals(that.index_name))
1:9249a6c:         return false;
1:9249a6c:     }
1:9249a6c: 
1:16d7385:     boolean this_present_index_options = true && this.isSetIndex_options();
1:16d7385:     boolean that_present_index_options = true && that.isSetIndex_options();
1:16d7385:     if (this_present_index_options || that_present_index_options) {
1:16d7385:       if (!(this_present_index_options && that_present_index_options))
1:16d7385:         return false;
1:16d7385:       if (!this.index_options.equals(that.index_options))
1:16d7385:         return false;
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     return true;
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   @Override
1:9249a6c:   public int hashCode() {
1:d966ed0:     HashCodeBuilder builder = new HashCodeBuilder();
1:d966ed0: 
1:d966ed0:     boolean present_name = true && (isSetName());
1:d966ed0:     builder.append(present_name);
1:d966ed0:     if (present_name)
1:d966ed0:       builder.append(name);
1:d966ed0: 
1:d966ed0:     boolean present_validation_class = true && (isSetValidation_class());
1:d966ed0:     builder.append(present_validation_class);
1:d966ed0:     if (present_validation_class)
1:d966ed0:       builder.append(validation_class);
1:d966ed0: 
1:d966ed0:     boolean present_index_type = true && (isSetIndex_type());
1:d966ed0:     builder.append(present_index_type);
1:d966ed0:     if (present_index_type)
1:d966ed0:       builder.append(index_type.getValue());
1:d966ed0: 
1:d966ed0:     boolean present_index_name = true && (isSetIndex_name());
1:d966ed0:     builder.append(present_index_name);
1:d966ed0:     if (present_index_name)
1:d966ed0:       builder.append(index_name);
1:d966ed0: 
1:16d7385:     boolean present_index_options = true && (isSetIndex_options());
1:16d7385:     builder.append(present_index_options);
1:16d7385:     if (present_index_options)
1:16d7385:       builder.append(index_options);
1:9249a6c: 
1:d966ed0:     return builder.toHashCode();
1:9249a6c:   }
1:9249a6c: 
1:bffd9ea:   @Override
1:9249a6c:   public int compareTo(ColumnDef other) {
1:9249a6c:     if (!getClass().equals(other.getClass())) {
1:9249a6c:       return getClass().getName().compareTo(other.getClass().getName());
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:     int lastComparison = 0;
1:9249a6c: 
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:9249a6c:     if (lastComparison != 0) {
1:9249a6c:       return lastComparison;
1:9249a6c:     }
1:e7a385a:     if (isSetName()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:9249a6c:       if (lastComparison != 0) {
1:9249a6c:         return lastComparison;
1:9249a6c:       }
1:9249a6c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetValidation_class()).compareTo(other.isSetValidation_class());
1:9249a6c:     if (lastComparison != 0) {
1:9249a6c:       return lastComparison;
1:9249a6c:     }
1:e7a385a:     if (isSetValidation_class()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validation_class, other.validation_class);
1:9249a6c:       if (lastComparison != 0) {
1:9249a6c:         return lastComparison;
1:9249a6c:       }
1:9249a6c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetIndex_type()).compareTo(other.isSetIndex_type());
1:9249a6c:     if (lastComparison != 0) {
1:9249a6c:       return lastComparison;
1:9249a6c:     }
1:e7a385a:     if (isSetIndex_type()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_type, other.index_type);
1:9249a6c:       if (lastComparison != 0) {
1:9249a6c:         return lastComparison;
1:9249a6c:       }
1:9249a6c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetIndex_name()).compareTo(other.isSetIndex_name());
1:9249a6c:     if (lastComparison != 0) {
1:9249a6c:       return lastComparison;
1:9249a6c:     }
1:e7a385a:     if (isSetIndex_name()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, other.index_name);
1:9249a6c:       if (lastComparison != 0) {
1:9249a6c:         return lastComparison;
1:9249a6c:       }
1:9249a6c:     }
1:bffd9ea:     lastComparison = Boolean.valueOf(isSetIndex_options()).compareTo(other.isSetIndex_options());
1:16d7385:     if (lastComparison != 0) {
1:16d7385:       return lastComparison;
1:9249a6c:     }
1:16d7385:     if (isSetIndex_options()) {
1:bffd9ea:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_options, other.index_options);
1:16d7385:       if (lastComparison != 0) {
1:16d7385:         return lastComparison;
1:9249a6c:       }
1:9249a6c:     }
2:9249a6c:     return 0;
1:9249a6c:   }
1:9249a6c: 
1:e7a385a:   public _Fields fieldForId(int fieldId) {
1:e7a385a:     return _Fields.findByThriftId(fieldId);
1:e7a385a:   }
1:e7a385a: 
1:4ec9511:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:9249a6c:   }
1:9249a6c: 
1:4ec9511:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
1:b153d45:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
1:9249a6c:   }
1:9249a6c: 
1:9249a6c:   @Override
1:9249a6c:   public String toString() {
1:9249a6c:     StringBuilder sb = new StringBuilder("ColumnDef(");
1:9249a6c:     boolean first = true;
1:9249a6c: 
1:9249a6c:     sb.append("name:");
1:9249a6c:     if (this.name == null) {
1:9249a6c:       sb.append("null");
1:9249a6c:     } else {
1:4ec9511:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
1:9249a6c:     }
1:9249a6c:     first = false;
1:9249a6c:     if (!first) sb.append(", ");
1:9249a6c:     sb.append("validation_class:");
1:9249a6c:     if (this.validation_class == null) {
1:9249a6c:       sb.append("null");
1:9249a6c:     } else {
1:9249a6c:       sb.append(this.validation_class);
1:9249a6c:     }
1:9249a6c:     first = false;
2:9249a6c:     if (isSetIndex_type()) {
1:9249a6c:       if (!first) sb.append(", ");
1:9249a6c:       sb.append("index_type:");
1:9249a6c:       if (this.index_type == null) {
1:9249a6c:         sb.append("null");
1:9249a6c:       } else {
1:9249a6c:         sb.append(this.index_type);
1:9249a6c:       }
1:9249a6c:       first = false;
1:9249a6c:     }
2:9249a6c:     if (isSetIndex_name()) {
1:9249a6c:       if (!first) sb.append(", ");
1:9249a6c:       sb.append("index_name:");
1:9249a6c:       if (this.index_name == null) {
1:9249a6c:         sb.append("null");
1:9249a6c:       } else {
1:9249a6c:         sb.append(this.index_name);
1:9249a6c:       }
1:9249a6c:       first = false;
1:9249a6c:     }
1:16d7385:     if (isSetIndex_options()) {
1:16d7385:       if (!first) sb.append(", ");
1:16d7385:       sb.append("index_options:");
1:16d7385:       if (this.index_options == null) {
1:16d7385:         sb.append("null");
1:9249a6c:       } else {
1:16d7385:         sb.append(this.index_options);
1:9249a6c:       }
1:16d7385:       first = false;
1:9249a6c:     }
1:9249a6c:     sb.append(")");
1:9249a6c:     return sb.toString();
1:9249a6c:   }
1:b153d45: 
1:4ec9511:   public void validate() throws org.apache.thrift.TException {
1:9249a6c:     // check for required fields
1:9249a6c:     if (name == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:9249a6c:     }
1:9249a6c:     if (validation_class == null) {
1:4ec9511:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'validation_class' was not present! Struct: " + toString());
1:b153d45:     }
1:b153d45:     // check for sub-struct validity
1:b153d45:   }
1:b153d45: 
1:e1a1ec5:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:e1a1ec5:     try {
1:e1a1ec5:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:e1a1ec5:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:e1a1ec5:     try {
1:e1a1ec5:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:e1a1ec5:     } catch (org.apache.thrift.TException te) {
1:e1a1ec5:       throw new java.io.IOException(te);
1:e1a1ec5:     }
1:e1a1ec5:   }
1:e1a1ec5: 
1:b153d45:   private static class ColumnDefStandardSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnDefStandardScheme getScheme() {
1:b153d45:       return new ColumnDefStandardScheme();
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45:   private static class ColumnDefStandardScheme extends StandardScheme<ColumnDef> {
1:b153d45: 
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnDef struct) throws org.apache.thrift.TException {
1:b153d45:       org.apache.thrift.protocol.TField schemeField;
1:9249a6c:       iprot.readStructBegin();
1:9249a6c:       while (true)
1:9249a6c:       {
1:b153d45:         schemeField = iprot.readFieldBegin();
1:b153d45:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:9249a6c:           break;
1:9249a6c:         }
1:b153d45:         switch (schemeField.id) {
1:9249a6c:           case 1: // NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.name = iprot.readBinary();
1:b153d45:               struct.setNameIsSet(true);
1:9249a6c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:9249a6c:             break;
1:9249a6c:           case 2: // VALIDATION_CLASS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.validation_class = iprot.readString();
1:b153d45:               struct.setValidation_classIsSet(true);
1:9249a6c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:9249a6c:             break;
1:9249a6c:           case 3: // INDEX_TYPE
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:b153d45:               struct.index_type = IndexType.findByValue(iprot.readI32());
1:b153d45:               struct.setIndex_typeIsSet(true);
1:9249a6c:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:9249a6c:             break;
1:9249a6c:           case 4: // INDEX_NAME
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:b153d45:               struct.index_name = iprot.readString();
1:b153d45:               struct.setIndex_nameIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:9249a6c:             break;
1:b153d45:           case 5: // INDEX_OPTIONS
1:b153d45:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
2:b153d45:               {
1:bfe1e1c:                 org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
1:bfe1e1c:                 struct.index_options = new HashMap<String,String>(2*_map90.size);
1:bfe1e1c:                 for (int _i91 = 0; _i91 < _map90.size; ++_i91)
1:b153d45:                 {
1:bffd9ea:                   String _key92;
1:bffd9ea:                   String _val93;
1:bfe1e1c:                   _key92 = iprot.readString();
1:bfe1e1c:                   _val93 = iprot.readString();
1:bfe1e1c:                   struct.index_options.put(_key92, _val93);
1:b153d45:                 }
1:b153d45:                 iprot.readMapEnd();
1:b153d45:               }
1:b153d45:               struct.setIndex_optionsIsSet(true);
1:b153d45:             } else { 
1:b153d45:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:             }
1:b153d45:             break;
1:9249a6c:           default:
1:b153d45:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:b153d45:         }
1:9249a6c:         iprot.readFieldEnd();
1:b153d45:       }
1:9249a6c:       iprot.readStructEnd();
1:b153d45: 
1:9249a6c:       // check for required fields of primitive type, which can't be checked in the validate method
1:b153d45:       struct.validate();
1:b153d45:     }
1:b153d45: 
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnDef struct) throws org.apache.thrift.TException {
1:b153d45:       struct.validate();
1:b153d45: 
1:9249a6c:       oprot.writeStructBegin(STRUCT_DESC);
1:b153d45:       if (struct.name != null) {
1:9249a6c:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:b153d45:         oprot.writeBinary(struct.name);
1:9249a6c:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.validation_class != null) {
1:9249a6c:         oprot.writeFieldBegin(VALIDATION_CLASS_FIELD_DESC);
1:b153d45:         oprot.writeString(struct.validation_class);
1:9249a6c:         oprot.writeFieldEnd();
1:b153d45:       }
1:b153d45:       if (struct.index_type != null) {
1:b153d45:         if (struct.isSetIndex_type()) {
1:9249a6c:           oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
1:b153d45:           oprot.writeI32(struct.index_type.getValue());
1:9249a6c:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.index_name != null) {
1:b153d45:         if (struct.isSetIndex_name()) {
1:9249a6c:           oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
1:b153d45:           oprot.writeString(struct.index_name);
1:9249a6c:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:b153d45:       if (struct.index_options != null) {
1:b153d45:         if (struct.isSetIndex_options()) {
1:b153d45:           oprot.writeFieldBegin(INDEX_OPTIONS_FIELD_DESC);
1:b153d45:           {
1:b153d45:             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.index_options.size()));
1:bfe1e1c:             for (Map.Entry<String, String> _iter94 : struct.index_options.entrySet())
1:b153d45:             {
1:bfe1e1c:               oprot.writeString(_iter94.getKey());
1:bfe1e1c:               oprot.writeString(_iter94.getValue());
1:b153d45:             }
1:b153d45:             oprot.writeMapEnd();
1:b153d45:           }
5:b153d45:           oprot.writeFieldEnd();
1:b153d45:         }
1:b153d45:       }
1:9249a6c:       oprot.writeFieldStop();
1:9249a6c:       oprot.writeStructEnd();
1:9249a6c:     }
1:9249a6c: 
1:9249a6c:   }
1:9249a6c: 
1:b153d45:   private static class ColumnDefTupleSchemeFactory implements SchemeFactory {
1:b153d45:     public ColumnDefTupleScheme getScheme() {
1:b153d45:       return new ColumnDefTupleScheme();
1:9249a6c:     }
1:9249a6c:   }
1:9249a6c: 
1:b153d45:   private static class ColumnDefTupleScheme extends TupleScheme<ColumnDef> {
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnDef struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:b153d45:       oprot.writeBinary(struct.name);
1:b153d45:       oprot.writeString(struct.validation_class);
1:b153d45:       BitSet optionals = new BitSet();
1:b153d45:       if (struct.isSetIndex_type()) {
1:b153d45:         optionals.set(0);
1:9249a6c:       }
1:b153d45:       if (struct.isSetIndex_name()) {
1:b153d45:         optionals.set(1);
1:9249a6c:       }
1:b153d45:       if (struct.isSetIndex_options()) {
1:b153d45:         optionals.set(2);
1:9249a6c:       }
1:b153d45:       oprot.writeBitSet(optionals, 3);
1:b153d45:       if (struct.isSetIndex_type()) {
1:b153d45:         oprot.writeI32(struct.index_type.getValue());
1:9249a6c:       }
1:b153d45:       if (struct.isSetIndex_name()) {
1:b153d45:         oprot.writeString(struct.index_name);
1:9249a6c:       }
1:b153d45:       if (struct.isSetIndex_options()) {
1:b153d45:         {
1:b153d45:           oprot.writeI32(struct.index_options.size());
1:bfe1e1c:           for (Map.Entry<String, String> _iter95 : struct.index_options.entrySet())
1:b153d45:           {
1:bfe1e1c:             oprot.writeString(_iter95.getKey());
1:bfe1e1c:             oprot.writeString(_iter95.getValue());
1:9249a6c:           }
1:b153d45:         }
1:b153d45:       }
1:b153d45:     }
1:b153d45: 
1:b153d45:     @Override
1:b153d45:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnDef struct) throws org.apache.thrift.TException {
1:b153d45:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:b153d45:       struct.name = iprot.readBinary();
1:b153d45:       struct.setNameIsSet(true);
1:b153d45:       struct.validation_class = iprot.readString();
1:b153d45:       struct.setValidation_classIsSet(true);
1:b153d45:       BitSet incoming = iprot.readBitSet(3);
1:b153d45:       if (incoming.get(0)) {
1:b153d45:         struct.index_type = IndexType.findByValue(iprot.readI32());
1:b153d45:         struct.setIndex_typeIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(1)) {
1:b153d45:         struct.index_name = iprot.readString();
1:b153d45:         struct.setIndex_nameIsSet(true);
1:b153d45:       }
1:b153d45:       if (incoming.get(2)) {
1:b153d45:         {
1:bfe1e1c:           org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:bfe1e1c:           struct.index_options = new HashMap<String,String>(2*_map96.size);
1:bfe1e1c:           for (int _i97 = 0; _i97 < _map96.size; ++_i97)
1:b153d45:           {
1:bffd9ea:             String _key98;
1:bffd9ea:             String _val99;
1:bfe1e1c:             _key98 = iprot.readString();
1:bfe1e1c:             _val99 = iprot.readString();
1:bfe1e1c:             struct.index_options.put(_key98, _val99);
1:b153d45:           }
1:b153d45:         }
1:b153d45:         struct.setIndex_optionsIsSet(true);
1:b153d45:       }
1:b153d45:     }
1:b153d45:   }
1:b153d45: 
1:b153d45: }
1:b153d45: 
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:bffd9ea
/////////////////////////////////////////////////////////////////////////
1:  * Autogenerated by Thrift Compiler (0.9.1)
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang3.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.AsyncMethodCallback;
0: import org.apache.thrift.server.AbstractNonblockingServer.*;
/////////////////////////////////////////////////////////////////////////
1: public class ColumnDef implements org.apache.thrift.TBase<ColumnDef, ColumnDef._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnDef> {
/////////////////////////////////////////////////////////////////////////
1:       Map<String,String> __this__index_options = new HashMap<String,String>(other.index_options);
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:     lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
1:     lastComparison = Boolean.valueOf(isSetValidation_class()).compareTo(other.isSetValidation_class());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validation_class, other.validation_class);
1:     lastComparison = Boolean.valueOf(isSetIndex_type()).compareTo(other.isSetIndex_type());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_type, other.index_type);
1:     lastComparison = Boolean.valueOf(isSetIndex_name()).compareTo(other.isSetIndex_name());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, other.index_name);
1:     lastComparison = Boolean.valueOf(isSetIndex_options()).compareTo(other.isSetIndex_options());
1:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_options, other.index_options);
/////////////////////////////////////////////////////////////////////////
1:                   String _key92;
1:                   String _val93;
/////////////////////////////////////////////////////////////////////////
1:             String _key98;
1:             String _val99;
commit:a965977
/////////////////////////////////////////////////////////////////////////
0:                   String _key92; // optional
/////////////////////////////////////////////////////////////////////////
0:             String _key98; // optional
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:bfd73be
/////////////////////////////////////////////////////////////////////////
0:                   String _key92; // required
/////////////////////////////////////////////////////////////////////////
0:             String _key98; // required
commit:bfe1e1c
/////////////////////////////////////////////////////////////////////////
1:                 org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
1:                 struct.index_options = new HashMap<String,String>(2*_map90.size);
1:                 for (int _i91 = 0; _i91 < _map90.size; ++_i91)
0:                   String _key92; // required
0:                   String _val93; // required
1:                   _key92 = iprot.readString();
1:                   _val93 = iprot.readString();
1:                   struct.index_options.put(_key92, _val93);
/////////////////////////////////////////////////////////////////////////
1:             for (Map.Entry<String, String> _iter94 : struct.index_options.entrySet())
1:               oprot.writeString(_iter94.getKey());
1:               oprot.writeString(_iter94.getValue());
/////////////////////////////////////////////////////////////////////////
1:           for (Map.Entry<String, String> _iter95 : struct.index_options.entrySet())
1:             oprot.writeString(_iter95.getKey());
1:             oprot.writeString(_iter95.getValue());
/////////////////////////////////////////////////////////////////////////
1:           org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
1:           struct.index_options = new HashMap<String,String>(2*_map96.size);
1:           for (int _i97 = 0; _i97 < _map96.size; ++_i97)
0:             String _key98; // required
0:             String _val99; // required
1:             _key98 = iprot.readString();
1:             _val99 = iprot.readString();
1:             struct.index_options.put(_key98, _val99);
commit:3297a96
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map41 = iprot.readMapBegin();
0:               this.index_options = new HashMap<String,String>(2*_map41.size);
0:               for (int _i42 = 0; _i42 < _map41.size; ++_i42)
0:                 String _key43;
0:                 String _val44;
0:                 _key43 = iprot.readString();
0:                 _val44 = iprot.readString();
0:                 this.index_options.put(_key43, _val44);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter45 : this.index_options.entrySet())
0:             oprot.writeString(_iter45.getKey());
0:             oprot.writeString(_iter45.getValue());
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d394ab1
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
commit:b8434fc
commit:b391600
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
0:               this.index_options = new HashMap<String,String>(2*_map33.size);
0:               for (int _i34 = 0; _i34 < _map33.size; ++_i34)
0:                 String _key35;
0:                 String _val36;
0:                 _key35 = iprot.readString();
0:                 _val36 = iprot.readString();
0:                 this.index_options.put(_key35, _val36);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter37 : this.index_options.entrySet())
0:             oprot.writeString(_iter37.getKey());
0:             oprot.writeString(_iter37.getValue());
commit:e1a1ec5
/////////////////////////////////////////////////////////////////////////
1:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
1:     try {
1:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
1:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
1:     try {
1:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
1:     } catch (org.apache.thrift.TException te) {
1:       throw new java.io.IOException(te);
1:     }
1:   }
1: 
commit:4f9b160
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
0:   public ByteBuffer name;
/////////////////////////////////////////////////////////////////////////
1:     ByteBuffer name,
/////////////////////////////////////////////////////////////////////////
0:       this.name = TBaseHelper.copyBinary(other.name);
1: ;
/////////////////////////////////////////////////////////////////////////
1:   @Override
1:   public void clear() {
1:     this.name = null;
1:     this.validation_class = null;
1:     this.index_type = null;
1:     this.index_name = null;
0:     setName(TBaseHelper.rightSize(name));
0:     return name.array();
1:   }
1: 
0:   public ByteBuffer BufferForName() {
1:     return name;
0:     setName(ByteBuffer.wrap(name));
1:     return this;
1:   }
1: 
1:   public ColumnDef setName(ByteBuffer name) {
/////////////////////////////////////////////////////////////////////////
1:         setName((ByteBuffer)value);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     if (field == null) {
1:       throw new IllegalArgumentException();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       if (!this.name.equals(that.name))
/////////////////////////////////////////////////////////////////////////
1:     if (isSetName()) {
0:       lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetValidation_class()) {
0:       lastComparison = TBaseHelper.compareTo(this.validation_class, typedOther.validation_class);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetIndex_type()) {
0:       lastComparison = TBaseHelper.compareTo(this.index_type, typedOther.index_type);
/////////////////////////////////////////////////////////////////////////
1:     if (isSetIndex_name()) {
0:       lastComparison = TBaseHelper.compareTo(this.index_name, typedOther.index_name);
/////////////////////////////////////////////////////////////////////////
1:   public _Fields fieldForId(int fieldId) {
1:     return _Fields.findByThriftId(fieldId);
1:   }
1: 
/////////////////////////////////////////////////////////////////////////
0:       TBaseHelper.toString(this.name, sb);
commit:d966ed0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.builder.HashCodeBuilder;
/////////////////////////////////////////////////////////////////////////
1:     HashCodeBuilder builder = new HashCodeBuilder();
1: 
1:     boolean present_name = true && (isSetName());
1:     builder.append(present_name);
1:     if (present_name)
1:       builder.append(name);
1: 
1:     boolean present_validation_class = true && (isSetValidation_class());
1:     builder.append(present_validation_class);
1:     if (present_validation_class)
1:       builder.append(validation_class);
1: 
1:     boolean present_index_type = true && (isSetIndex_type());
1:     builder.append(present_index_type);
1:     if (present_index_type)
1:       builder.append(index_type.getValue());
1: 
1:     boolean present_index_name = true && (isSetIndex_name());
1:     builder.append(present_index_name);
1:     if (present_index_name)
1:       builder.append(index_name);
1: 
1:     return builder.toHashCode();
commit:d849c69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.thrift.async.*;
0: import org.apache.thrift.transport.*;
0: public class ColumnDef implements TBase<ColumnDef, ColumnDef._Fields>, java.io.Serializable, Cloneable {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:       switch(fieldId) {
1:         case 1: // NAME
1:           return NAME;
1:         case 2: // VALIDATION_CLASS
1:           return VALIDATION_CLASS;
1:         case 3: // INDEX_TYPE
1:           return INDEX_TYPE;
1:         case 4: // INDEX_NAME
1:           return INDEX_NAME;
1:         default:
1:           return null;
1:       }
/////////////////////////////////////////////////////////////////////////
0:   public static final Map<_Fields, FieldMetaData> metaDataMap;
0:     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
0:     tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.VALIDATION_CLASS, new FieldMetaData("validation_class", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     tmpMap.put(_Fields.INDEX_TYPE, new FieldMetaData("index_type", TFieldRequirementType.OPTIONAL, 
0:         new EnumMetaData(TType.ENUM, IndexType.class)));
0:     tmpMap.put(_Fields.INDEX_NAME, new FieldMetaData("index_name", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
1:     metaDataMap = Collections.unmodifiableMap(tmpMap);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetValidation_class()) {      lastComparison = TBaseHelper.compareTo(this.validation_class, typedOther.validation_class);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetIndex_type()) {      lastComparison = TBaseHelper.compareTo(this.index_type, typedOther.index_type);
/////////////////////////////////////////////////////////////////////////
0:     if (isSetIndex_name()) {      lastComparison = TBaseHelper.compareTo(this.index_name, typedOther.index_name);
commit:972812c
/////////////////////////////////////////////////////////////////////////
0:   private static final TField INDEX_TYPE_FIELD_DESC = new TField("index_type", TType.I32, (short)3);
1:   /**
1:    * 
1:    * @see IndexType
1:    */
0:   public IndexType index_type;
1:     /**
1:      * 
1:      * @see IndexType
1:      */
/////////////////////////////////////////////////////////////////////////
0:         new EnumMetaData(TType.ENUM, IndexType.class)));
/////////////////////////////////////////////////////////////////////////
1:   /**
1:    * 
1:    * @see IndexType
1:    */
1:   public IndexType getIndex_type() {
1:   /**
1:    * 
1:    * @see IndexType
1:    */
1:   public ColumnDef setIndex_type(IndexType index_type) {
/////////////////////////////////////////////////////////////////////////
1:         setIndex_type((IndexType)value);
/////////////////////////////////////////////////////////////////////////
0:           if (field.type == TType.I32) {
0:             this.index_type = IndexType.findByValue(iprot.readI32());
/////////////////////////////////////////////////////////////////////////
0:         oprot.writeI32(this.index_type.getValue());
commit:9249a6c
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * Autogenerated by Thrift
1:  *
1:  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
1:  */
1: package org.apache.cassandra.thrift;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import java.util.List;
0: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.EnumMap;
0: import java.util.Set;
0: import java.util.HashSet;
1: import java.util.EnumSet;
1: import java.util.Collections;
1: import java.util.BitSet;
0: import java.util.Arrays;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.thrift.*;
0: import org.apache.thrift.meta_data.*;
0: import org.apache.thrift.protocol.*;
1: 
0: public class ColumnDef implements TBase<ColumnDef._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnDef> {
0:   private static final TStruct STRUCT_DESC = new TStruct("ColumnDef");
1: 
0:   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
0:   private static final TField VALIDATION_CLASS_FIELD_DESC = new TField("validation_class", TType.STRING, (short)2);
0:   private static final TField INDEX_TYPE_FIELD_DESC = new TField("index_type", TType.STRING, (short)3);
0:   private static final TField INDEX_NAME_FIELD_DESC = new TField("index_name", TType.STRING, (short)4);
1: 
0:   public byte[] name;
0:   public String validation_class;
0:   public String index_type;
0:   public String index_name;
1: 
1:   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
0:   public enum _Fields implements TFieldIdEnum {
1:     NAME((short)1, "name"),
1:     VALIDATION_CLASS((short)2, "validation_class"),
1:     INDEX_TYPE((short)3, "index_type"),
0:     INDEX_NAME((short)4, "index_name");
1: 
0:     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
1:     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
1: 
1:     static {
1:       for (_Fields field : EnumSet.allOf(_Fields.class)) {
0:         byId.put((int)field._thriftId, field);
1:         byName.put(field.getFieldName(), field);
1:       }
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, or null if its not found.
1:      */
1:     public static _Fields findByThriftId(int fieldId) {
0:       return byId.get(fieldId);
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches fieldId, throwing an exception
1:      * if it is not found.
1:      */
1:     public static _Fields findByThriftIdOrThrow(int fieldId) {
1:       _Fields fields = findByThriftId(fieldId);
1:       if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
1:       return fields;
1:     }
1: 
1:     /**
1:      * Find the _Fields constant that matches name, or null if its not found.
1:      */
1:     public static _Fields findByName(String name) {
1:       return byName.get(name);
1:     }
1: 
1:     private final short _thriftId;
1:     private final String _fieldName;
1: 
1:     _Fields(short thriftId, String fieldName) {
1:       _thriftId = thriftId;
1:       _fieldName = fieldName;
1:     }
1: 
1:     public short getThriftFieldId() {
1:       return _thriftId;
1:     }
1: 
1:     public String getFieldName() {
1:       return _fieldName;
1:     }
1:   }
1: 
1:   // isset id assignments
1: 
0:   public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
0:     put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.VALIDATION_CLASS, new FieldMetaData("validation_class", TFieldRequirementType.REQUIRED, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.INDEX_TYPE, new FieldMetaData("index_type", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:     put(_Fields.INDEX_NAME, new FieldMetaData("index_name", TFieldRequirementType.OPTIONAL, 
0:         new FieldValueMetaData(TType.STRING)));
0:   }});
1: 
1:   static {
0:     FieldMetaData.addStructMetaDataMap(ColumnDef.class, metaDataMap);
1:   }
1: 
1:   public ColumnDef() {
1:   }
1: 
1:   public ColumnDef(
0:     byte[] name,
1:     String validation_class)
1:   {
1:     this();
1:     this.name = name;
1:     this.validation_class = validation_class;
1:   }
1: 
1:   /**
1:    * Performs a deep copy on <i>other</i>.
1:    */
1:   public ColumnDef(ColumnDef other) {
1:     if (other.isSetName()) {
0:       this.name = new byte[other.name.length];
0:       System.arraycopy(other.name, 0, name, 0, other.name.length);
1:     }
1:     if (other.isSetValidation_class()) {
1:       this.validation_class = other.validation_class;
1:     }
1:     if (other.isSetIndex_type()) {
1:       this.index_type = other.index_type;
1:     }
1:     if (other.isSetIndex_name()) {
1:       this.index_name = other.index_name;
1:     }
1:   }
1: 
1:   public ColumnDef deepCopy() {
1:     return new ColumnDef(this);
1:   }
1: 
0:   @Deprecated
0:   public ColumnDef clone() {
1:     return new ColumnDef(this);
1:   }
1: 
1:   public byte[] getName() {
0:     return this.name;
1:   }
1: 
1:   public ColumnDef setName(byte[] name) {
1:     this.name = name;
1:     return this;
1:   }
1: 
1:   public void unsetName() {
1:     this.name = null;
1:   }
1: 
0:   /** Returns true if field name is set (has been asigned a value) and false otherwise */
1:   public boolean isSetName() {
1:     return this.name != null;
1:   }
1: 
1:   public void setNameIsSet(boolean value) {
1:     if (!value) {
1:       this.name = null;
1:     }
1:   }
1: 
1:   public String getValidation_class() {
1:     return this.validation_class;
1:   }
1: 
1:   public ColumnDef setValidation_class(String validation_class) {
1:     this.validation_class = validation_class;
1:     return this;
1:   }
1: 
1:   public void unsetValidation_class() {
1:     this.validation_class = null;
1:   }
1: 
0:   /** Returns true if field validation_class is set (has been asigned a value) and false otherwise */
1:   public boolean isSetValidation_class() {
1:     return this.validation_class != null;
1:   }
1: 
1:   public void setValidation_classIsSet(boolean value) {
1:     if (!value) {
1:       this.validation_class = null;
1:     }
1:   }
1: 
0:   public String getIndex_type() {
1:     return this.index_type;
1:   }
1: 
0:   public ColumnDef setIndex_type(String index_type) {
1:     this.index_type = index_type;
1:     return this;
1:   }
1: 
1:   public void unsetIndex_type() {
1:     this.index_type = null;
1:   }
1: 
0:   /** Returns true if field index_type is set (has been asigned a value) and false otherwise */
1:   public boolean isSetIndex_type() {
1:     return this.index_type != null;
1:   }
1: 
1:   public void setIndex_typeIsSet(boolean value) {
1:     if (!value) {
1:       this.index_type = null;
1:     }
1:   }
1: 
1:   public String getIndex_name() {
1:     return this.index_name;
1:   }
1: 
1:   public ColumnDef setIndex_name(String index_name) {
1:     this.index_name = index_name;
1:     return this;
1:   }
1: 
1:   public void unsetIndex_name() {
1:     this.index_name = null;
1:   }
1: 
0:   /** Returns true if field index_name is set (has been asigned a value) and false otherwise */
1:   public boolean isSetIndex_name() {
1:     return this.index_name != null;
1:   }
1: 
1:   public void setIndex_nameIsSet(boolean value) {
1:     if (!value) {
1:       this.index_name = null;
1:     }
1:   }
1: 
1:   public void setFieldValue(_Fields field, Object value) {
1:     switch (field) {
1:     case NAME:
1:       if (value == null) {
1:         unsetName();
1:       } else {
0:         setName((byte[])value);
1:       }
1:       break;
1: 
1:     case VALIDATION_CLASS:
1:       if (value == null) {
1:         unsetValidation_class();
1:       } else {
1:         setValidation_class((String)value);
1:       }
1:       break;
1: 
1:     case INDEX_TYPE:
1:       if (value == null) {
1:         unsetIndex_type();
1:       } else {
0:         setIndex_type((String)value);
1:       }
1:       break;
1: 
1:     case INDEX_NAME:
1:       if (value == null) {
1:         unsetIndex_name();
1:       } else {
1:         setIndex_name((String)value);
1:       }
1:       break;
1: 
1:     }
1:   }
1: 
0:   public void setFieldValue(int fieldID, Object value) {
0:     setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
1:   }
1: 
1:   public Object getFieldValue(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return getName();
1: 
1:     case VALIDATION_CLASS:
1:       return getValidation_class();
1: 
1:     case INDEX_TYPE:
1:       return getIndex_type();
1: 
1:     case INDEX_NAME:
1:       return getIndex_name();
1: 
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public Object getFieldValue(int fieldId) {
0:     return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
1:   }
1: 
0:   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
1:   public boolean isSet(_Fields field) {
1:     switch (field) {
1:     case NAME:
1:       return isSetName();
1:     case VALIDATION_CLASS:
1:       return isSetValidation_class();
1:     case INDEX_TYPE:
1:       return isSetIndex_type();
1:     case INDEX_NAME:
1:       return isSetIndex_name();
1:     }
1:     throw new IllegalStateException();
1:   }
1: 
0:   public boolean isSet(int fieldID) {
0:     return isSet(_Fields.findByThriftIdOrThrow(fieldID));
1:   }
1: 
1:   @Override
1:   public boolean equals(Object that) {
1:     if (that == null)
1:       return false;
1:     if (that instanceof ColumnDef)
1:       return this.equals((ColumnDef)that);
1:     return false;
1:   }
1: 
1:   public boolean equals(ColumnDef that) {
1:     if (that == null)
1:       return false;
1: 
1:     boolean this_present_name = true && this.isSetName();
1:     boolean that_present_name = true && that.isSetName();
1:     if (this_present_name || that_present_name) {
1:       if (!(this_present_name && that_present_name))
1:         return false;
0:       if (!java.util.Arrays.equals(this.name, that.name))
1:         return false;
1:     }
1: 
1:     boolean this_present_validation_class = true && this.isSetValidation_class();
1:     boolean that_present_validation_class = true && that.isSetValidation_class();
1:     if (this_present_validation_class || that_present_validation_class) {
1:       if (!(this_present_validation_class && that_present_validation_class))
1:         return false;
1:       if (!this.validation_class.equals(that.validation_class))
1:         return false;
1:     }
1: 
1:     boolean this_present_index_type = true && this.isSetIndex_type();
1:     boolean that_present_index_type = true && that.isSetIndex_type();
1:     if (this_present_index_type || that_present_index_type) {
1:       if (!(this_present_index_type && that_present_index_type))
1:         return false;
1:       if (!this.index_type.equals(that.index_type))
1:         return false;
1:     }
1: 
1:     boolean this_present_index_name = true && this.isSetIndex_name();
1:     boolean that_present_index_name = true && that.isSetIndex_name();
1:     if (this_present_index_name || that_present_index_name) {
1:       if (!(this_present_index_name && that_present_index_name))
1:         return false;
1:       if (!this.index_name.equals(that.index_name))
1:         return false;
1:     }
1: 
1:     return true;
1:   }
1: 
1:   @Override
1:   public int hashCode() {
1:     return 0;
1:   }
1: 
1:   public int compareTo(ColumnDef other) {
1:     if (!getClass().equals(other.getClass())) {
1:       return getClass().getName().compareTo(other.getClass().getName());
1:     }
1: 
1:     int lastComparison = 0;
0:     ColumnDef typedOther = (ColumnDef)other;
1: 
0:     lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetName()) {      lastComparison = TBaseHelper.compareTo(name, typedOther.name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetValidation_class()).compareTo(typedOther.isSetValidation_class());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetValidation_class()) {      lastComparison = TBaseHelper.compareTo(validation_class, typedOther.validation_class);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetIndex_type()).compareTo(typedOther.isSetIndex_type());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetIndex_type()) {      lastComparison = TBaseHelper.compareTo(index_type, typedOther.index_type);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
0:     lastComparison = Boolean.valueOf(isSetIndex_name()).compareTo(typedOther.isSetIndex_name());
1:     if (lastComparison != 0) {
1:       return lastComparison;
1:     }
0:     if (isSetIndex_name()) {      lastComparison = TBaseHelper.compareTo(index_name, typedOther.index_name);
1:       if (lastComparison != 0) {
1:         return lastComparison;
1:       }
1:     }
1:     return 0;
1:   }
1: 
0:   public void read(TProtocol iprot) throws TException {
0:     TField field;
1:     iprot.readStructBegin();
1:     while (true)
1:     {
0:       field = iprot.readFieldBegin();
0:       if (field.type == TType.STOP) { 
1:         break;
1:       }
0:       switch (field.id) {
1:         case 1: // NAME
0:           if (field.type == TType.STRING) {
0:             this.name = iprot.readBinary();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 2: // VALIDATION_CLASS
0:           if (field.type == TType.STRING) {
0:             this.validation_class = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 3: // INDEX_TYPE
0:           if (field.type == TType.STRING) {
0:             this.index_type = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         case 4: // INDEX_NAME
0:           if (field.type == TType.STRING) {
0:             this.index_name = iprot.readString();
1:           } else { 
0:             TProtocolUtil.skip(iprot, field.type);
1:           }
1:           break;
1:         default:
0:           TProtocolUtil.skip(iprot, field.type);
1:       }
1:       iprot.readFieldEnd();
1:     }
1:     iprot.readStructEnd();
1: 
1:     // check for required fields of primitive type, which can't be checked in the validate method
0:     validate();
1:   }
1: 
0:   public void write(TProtocol oprot) throws TException {
0:     validate();
1: 
1:     oprot.writeStructBegin(STRUCT_DESC);
0:     if (this.name != null) {
1:       oprot.writeFieldBegin(NAME_FIELD_DESC);
0:       oprot.writeBinary(this.name);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.validation_class != null) {
1:       oprot.writeFieldBegin(VALIDATION_CLASS_FIELD_DESC);
0:       oprot.writeString(this.validation_class);
1:       oprot.writeFieldEnd();
1:     }
0:     if (this.index_type != null) {
1:       if (isSetIndex_type()) {
1:         oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
0:         oprot.writeString(this.index_type);
1:         oprot.writeFieldEnd();
1:       }
1:     }
0:     if (this.index_name != null) {
1:       if (isSetIndex_name()) {
1:         oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
0:         oprot.writeString(this.index_name);
1:         oprot.writeFieldEnd();
1:       }
1:     }
1:     oprot.writeFieldStop();
1:     oprot.writeStructEnd();
1:   }
1: 
1:   @Override
1:   public String toString() {
1:     StringBuilder sb = new StringBuilder("ColumnDef(");
1:     boolean first = true;
1: 
1:     sb.append("name:");
1:     if (this.name == null) {
1:       sb.append("null");
1:     } else {
0:         int __name_size = Math.min(this.name.length, 128);
0:         for (int i = 0; i < __name_size; i++) {
0:           if (i != 0) sb.append(" ");
0:           sb.append(Integer.toHexString(this.name[i]).length() > 1 ? Integer.toHexString(this.name[i]).substring(Integer.toHexString(this.name[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.name[i]).toUpperCase());
1:         }
0:         if (this.name.length > 128) sb.append(" ...");
1:     }
1:     first = false;
1:     if (!first) sb.append(", ");
1:     sb.append("validation_class:");
1:     if (this.validation_class == null) {
1:       sb.append("null");
1:     } else {
1:       sb.append(this.validation_class);
1:     }
1:     first = false;
1:     if (isSetIndex_type()) {
1:       if (!first) sb.append(", ");
1:       sb.append("index_type:");
1:       if (this.index_type == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.index_type);
1:       }
1:       first = false;
1:     }
1:     if (isSetIndex_name()) {
1:       if (!first) sb.append(", ");
1:       sb.append("index_name:");
1:       if (this.index_name == null) {
1:         sb.append("null");
1:       } else {
1:         sb.append(this.index_name);
1:       }
1:       first = false;
1:     }
1:     sb.append(")");
1:     return sb.toString();
1:   }
1: 
0:   public void validate() throws TException {
1:     // check for required fields
1:     if (name == null) {
0:       throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:     }
1:     if (validation_class == null) {
0:       throw new TProtocolException("Required field 'validation_class' was not present! Struct: " + toString());
1:     }
1:   }
1: 
1: }
1: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:22f515b
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.8.0)
commit:effb653
/////////////////////////////////////////////////////////////////////////
0:               org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
0:               this.index_options = new HashMap<String,String>(2*_map33.size);
0:               for (int _i34 = 0; _i34 < _map33.size; ++_i34)
0:                 String _key35;
0:                 String _val36;
0:                 _key35 = iprot.readString();
0:                 _val36 = iprot.readString();
0:                 this.index_options.put(_key35, _val36);
/////////////////////////////////////////////////////////////////////////
0:           for (Map.Entry<String, String> _iter37 : this.index_options.entrySet())
0:             oprot.writeString(_iter37.getKey());
0:             oprot.writeString(_iter37.getValue());
author:Jake Luciani
-------------------------------------------------------------------------------
commit:b153d45
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.9.0)
1:  *  @generated
/////////////////////////////////////////////////////////////////////////
1: import org.apache.thrift.scheme.IScheme;
1: import org.apache.thrift.scheme.SchemeFactory;
1: import org.apache.thrift.scheme.StandardScheme;
1: 
1: import org.apache.thrift.scheme.TupleScheme;
1: import org.apache.thrift.protocol.TTupleProtocol;
0: import org.apache.thrift.protocol.TProtocolException;
0: import org.apache.thrift.EncodingUtils;
0: import org.apache.thrift.TException;
/////////////////////////////////////////////////////////////////////////
1:   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
1:   static {
1:     schemes.put(StandardScheme.class, new ColumnDefStandardSchemeFactory());
1:     schemes.put(TupleScheme.class, new ColumnDefTupleSchemeFactory());
1:   }
1: 
1:   public IndexType index_type; // optional
1:   public String index_name; // optional
1:   public Map<String,String> index_options; // optional
/////////////////////////////////////////////////////////////////////////
1:   private _Fields optionals[] = {_Fields.INDEX_TYPE,_Fields.INDEX_NAME,_Fields.INDEX_OPTIONS};
/////////////////////////////////////////////////////////////////////////
1:     schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
1:     schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
/////////////////////////////////////////////////////////////////////////
1:     // check for sub-struct validity
/////////////////////////////////////////////////////////////////////////
1:   private static class ColumnDefStandardSchemeFactory implements SchemeFactory {
1:     public ColumnDefStandardScheme getScheme() {
1:       return new ColumnDefStandardScheme();
1:     }
1:   }
1: 
1:   private static class ColumnDefStandardScheme extends StandardScheme<ColumnDef> {
1: 
1:     public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnDef struct) throws org.apache.thrift.TException {
1:       org.apache.thrift.protocol.TField schemeField;
0:       iprot.readStructBegin();
0:       while (true)
1:       {
1:         schemeField = iprot.readFieldBegin();
1:         if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
1:           break;
1:         }
1:         switch (schemeField.id) {
0:           case 1: // NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.name = iprot.readBinary();
1:               struct.setNameIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 2: // VALIDATION_CLASS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.validation_class = iprot.readString();
1:               struct.setValidation_classIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 3: // INDEX_TYPE
1:             if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
1:               struct.index_type = IndexType.findByValue(iprot.readI32());
1:               struct.setIndex_typeIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           case 4: // INDEX_NAME
1:             if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
1:               struct.index_name = iprot.readString();
1:               struct.setIndex_nameIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
1:           case 5: // INDEX_OPTIONS
1:             if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
1:               {
0:                 org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
0:                 struct.index_options = new HashMap<String,String>(2*_map82.size);
0:                 for (int _i83 = 0; _i83 < _map82.size; ++_i83)
1:                 {
0:                   String _key84; // required
0:                   String _val85; // required
0:                   _key84 = iprot.readString();
0:                   _val85 = iprot.readString();
0:                   struct.index_options.put(_key84, _val85);
1:                 }
1:                 iprot.readMapEnd();
1:               }
1:               struct.setIndex_optionsIsSet(true);
1:             } else { 
1:               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:             }
1:             break;
0:           default:
1:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
1:         }
0:         iprot.readFieldEnd();
1:       }
0:       iprot.readStructEnd();
1: 
0:       // check for required fields of primitive type, which can't be checked in the validate method
1:       struct.validate();
1:     }
1: 
1:     public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnDef struct) throws org.apache.thrift.TException {
1:       struct.validate();
1: 
0:       oprot.writeStructBegin(STRUCT_DESC);
1:       if (struct.name != null) {
0:         oprot.writeFieldBegin(NAME_FIELD_DESC);
1:         oprot.writeBinary(struct.name);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.validation_class != null) {
0:         oprot.writeFieldBegin(VALIDATION_CLASS_FIELD_DESC);
1:         oprot.writeString(struct.validation_class);
1:         oprot.writeFieldEnd();
1:       }
1:       if (struct.index_type != null) {
1:         if (struct.isSetIndex_type()) {
0:           oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
1:           oprot.writeI32(struct.index_type.getValue());
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.index_name != null) {
1:         if (struct.isSetIndex_name()) {
0:           oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
1:           oprot.writeString(struct.index_name);
1:           oprot.writeFieldEnd();
1:         }
1:       }
1:       if (struct.index_options != null) {
1:         if (struct.isSetIndex_options()) {
1:           oprot.writeFieldBegin(INDEX_OPTIONS_FIELD_DESC);
1:           {
1:             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.index_options.size()));
0:             for (Map.Entry<String, String> _iter86 : struct.index_options.entrySet())
1:             {
0:               oprot.writeString(_iter86.getKey());
0:               oprot.writeString(_iter86.getValue());
1:             }
1:             oprot.writeMapEnd();
1:           }
1:           oprot.writeFieldEnd();
1:         }
1:       }
0:       oprot.writeFieldStop();
0:       oprot.writeStructEnd();
1:     }
1: 
1:   }
1: 
1:   private static class ColumnDefTupleSchemeFactory implements SchemeFactory {
1:     public ColumnDefTupleScheme getScheme() {
1:       return new ColumnDefTupleScheme();
1:     }
1:   }
1: 
1:   private static class ColumnDefTupleScheme extends TupleScheme<ColumnDef> {
1: 
1:     @Override
1:     public void write(org.apache.thrift.protocol.TProtocol prot, ColumnDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol oprot = (TTupleProtocol) prot;
1:       oprot.writeBinary(struct.name);
1:       oprot.writeString(struct.validation_class);
1:       BitSet optionals = new BitSet();
1:       if (struct.isSetIndex_type()) {
1:         optionals.set(0);
1:       }
1:       if (struct.isSetIndex_name()) {
1:         optionals.set(1);
1:       }
1:       if (struct.isSetIndex_options()) {
1:         optionals.set(2);
1:       }
1:       oprot.writeBitSet(optionals, 3);
1:       if (struct.isSetIndex_type()) {
1:         oprot.writeI32(struct.index_type.getValue());
1:       }
1:       if (struct.isSetIndex_name()) {
1:         oprot.writeString(struct.index_name);
1:       }
1:       if (struct.isSetIndex_options()) {
1:         {
1:           oprot.writeI32(struct.index_options.size());
0:           for (Map.Entry<String, String> _iter87 : struct.index_options.entrySet())
1:           {
0:             oprot.writeString(_iter87.getKey());
0:             oprot.writeString(_iter87.getValue());
1:           }
1:         }
1:       }
1:     }
1: 
1:     @Override
1:     public void read(org.apache.thrift.protocol.TProtocol prot, ColumnDef struct) throws org.apache.thrift.TException {
1:       TTupleProtocol iprot = (TTupleProtocol) prot;
1:       struct.name = iprot.readBinary();
1:       struct.setNameIsSet(true);
1:       struct.validation_class = iprot.readString();
1:       struct.setValidation_classIsSet(true);
1:       BitSet incoming = iprot.readBitSet(3);
1:       if (incoming.get(0)) {
1:         struct.index_type = IndexType.findByValue(iprot.readI32());
1:         struct.setIndex_typeIsSet(true);
1:       }
1:       if (incoming.get(1)) {
1:         struct.index_name = iprot.readString();
1:         struct.setIndex_nameIsSet(true);
1:       }
1:       if (incoming.get(2)) {
1:         {
0:           org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
0:           struct.index_options = new HashMap<String,String>(2*_map88.size);
0:           for (int _i89 = 0; _i89 < _map88.size; ++_i89)
1:           {
0:             String _key90; // required
0:             String _val91; // required
0:             _key90 = iprot.readString();
0:             _val91 = iprot.readString();
0:             struct.index_options.put(_key90, _val91);
1:           }
1:         }
1:         struct.setIndex_optionsIsSet(true);
1:       }
1:     }
1:   }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7c8c570
/////////////////////////////////////////////////////////////////////////
0:  * Autogenerated by Thrift Compiler (0.7.0)
/////////////////////////////////////////////////////////////////////////
1:   public ByteBuffer name; // required
1:   public String validation_class; // required
0:   public IndexType index_type; // required
0:   public String index_name; // required
0:   public Map<String,String> index_options; // required
/////////////////////////////////////////////////////////////////////////
0:                 String _key43; // required
0:                 String _val44; // required
commit:16d7385
/////////////////////////////////////////////////////////////////////////
1:   private static final org.apache.thrift.protocol.TField INDEX_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("index_options", org.apache.thrift.protocol.TType.MAP, (short)5);
/////////////////////////////////////////////////////////////////////////
0:   public Map<String,String> index_options;
/////////////////////////////////////////////////////////////////////////
1:     INDEX_NAME((short)4, "index_name"),
1:     INDEX_OPTIONS((short)5, "index_options");
/////////////////////////////////////////////////////////////////////////
1:         case 5: // INDEX_OPTIONS
1:           return INDEX_OPTIONS;
/////////////////////////////////////////////////////////////////////////
1:     tmpMap.put(_Fields.INDEX_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("index_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
1:             new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
/////////////////////////////////////////////////////////////////////////
1:     if (other.isSetIndex_options()) {
0:       Map<String,String> __this__index_options = new HashMap<String,String>();
0:       for (Map.Entry<String, String> other_element : other.index_options.entrySet()) {
1: 
0:         String other_element_key = other_element.getKey();
0:         String other_element_value = other_element.getValue();
1: 
0:         String __this__index_options_copy_key = other_element_key;
1: 
0:         String __this__index_options_copy_value = other_element_value;
1: 
0:         __this__index_options.put(__this__index_options_copy_key, __this__index_options_copy_value);
0:       }
1:       this.index_options = __this__index_options;
0:     }
/////////////////////////////////////////////////////////////////////////
1:     this.index_options = null;
/////////////////////////////////////////////////////////////////////////
1:   public int getIndex_optionsSize() {
1:     return (this.index_options == null) ? 0 : this.index_options.size();
0:   }
0: 
1:   public void putToIndex_options(String key, String val) {
1:     if (this.index_options == null) {
1:       this.index_options = new HashMap<String,String>();
0:     }
1:     this.index_options.put(key, val);
0:   }
0: 
1:   public Map<String,String> getIndex_options() {
1:     return this.index_options;
0:   }
0: 
1:   public ColumnDef setIndex_options(Map<String,String> index_options) {
1:     this.index_options = index_options;
1:     return this;
0:   }
0: 
1:   public void unsetIndex_options() {
1:     this.index_options = null;
0:   }
0: 
1:   /** Returns true if field index_options is set (has been assigned a value) and false otherwise */
1:   public boolean isSetIndex_options() {
1:     return this.index_options != null;
0:   }
0: 
1:   public void setIndex_optionsIsSet(boolean value) {
1:     if (!value) {
1:       this.index_options = null;
0:     }
0:   }
0: 
/////////////////////////////////////////////////////////////////////////
1:     case INDEX_OPTIONS:
1:       if (value == null) {
1:         unsetIndex_options();
0:       } else {
1:         setIndex_options((Map<String,String>)value);
0:       }
0:       break;
0: 
/////////////////////////////////////////////////////////////////////////
1:     case INDEX_OPTIONS:
1:       return getIndex_options();
0: 
/////////////////////////////////////////////////////////////////////////
1:     case INDEX_OPTIONS:
1:       return isSetIndex_options();
/////////////////////////////////////////////////////////////////////////
1:     boolean this_present_index_options = true && this.isSetIndex_options();
1:     boolean that_present_index_options = true && that.isSetIndex_options();
1:     if (this_present_index_options || that_present_index_options) {
1:       if (!(this_present_index_options && that_present_index_options))
1:         return false;
1:       if (!this.index_options.equals(that.index_options))
1:         return false;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     boolean present_index_options = true && (isSetIndex_options());
1:     builder.append(present_index_options);
1:     if (present_index_options)
1:       builder.append(index_options);
0: 
/////////////////////////////////////////////////////////////////////////
0:     lastComparison = Boolean.valueOf(isSetIndex_options()).compareTo(typedOther.isSetIndex_options());
1:     if (lastComparison != 0) {
1:       return lastComparison;
0:     }
1:     if (isSetIndex_options()) {
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_options, typedOther.index_options);
1:       if (lastComparison != 0) {
1:         return lastComparison;
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:         case 5: // INDEX_OPTIONS
0:           if (field.type == org.apache.thrift.protocol.TType.MAP) {
0:             {
0:               org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
0:               this.index_options = new HashMap<String,String>(2*_map29.size);
0:               for (int _i30 = 0; _i30 < _map29.size; ++_i30)
0:               {
0:                 String _key31;
0:                 String _val32;
0:                 _key31 = iprot.readString();
0:                 _val32 = iprot.readString();
0:                 this.index_options.put(_key31, _val32);
0:               }
0:               iprot.readMapEnd();
0:             }
0:           } else { 
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           }
0:           break;
/////////////////////////////////////////////////////////////////////////
0:     if (this.index_options != null) {
1:       if (isSetIndex_options()) {
0:         oprot.writeFieldBegin(INDEX_OPTIONS_FIELD_DESC);
0:         {
0:           oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.index_options.size()));
0:           for (Map.Entry<String, String> _iter33 : this.index_options.entrySet())
0:           {
0:             oprot.writeString(_iter33.getKey());
0:             oprot.writeString(_iter33.getValue());
0:           }
0:           oprot.writeMapEnd();
0:         }
0:         oprot.writeFieldEnd();
0:       }
0:     }
/////////////////////////////////////////////////////////////////////////
0:     if (isSetIndex_options()) {
1:       if (!first) sb.append(", ");
1:       sb.append("index_options:");
1:       if (this.index_options == null) {
1:         sb.append("null");
0:       } else {
1:         sb.append(this.index_options);
0:       }
1:       first = false;
0:     }
/////////////////////////////////////////////////////////////////////////
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:c8afd76
/////////////////////////////////////////////////////////////////////////
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:4ec9511
/////////////////////////////////////////////////////////////////////////
0: public class ColumnDef implements org.apache.thrift.TBase<ColumnDef, ColumnDef._Fields>, java.io.Serializable, Cloneable {
1:   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnDef");
1:   private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
1:   private static final org.apache.thrift.protocol.TField VALIDATION_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("validation_class", org.apache.thrift.protocol.TType.STRING, (short)2);
1:   private static final org.apache.thrift.protocol.TField INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("index_type", org.apache.thrift.protocol.TType.I32, (short)3);
1:   private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("index_name", org.apache.thrift.protocol.TType.STRING, (short)4);
/////////////////////////////////////////////////////////////////////////
1:   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
/////////////////////////////////////////////////////////////////////////
1:   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
1:     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
1:     tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
1:     tmpMap.put(_Fields.VALIDATION_CLASS, new org.apache.thrift.meta_data.FieldMetaData("validation_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     tmpMap.put(_Fields.INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("index_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IndexType.class)));
1:     tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("index_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
1:         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
1:     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnDef.class, metaDataMap);
/////////////////////////////////////////////////////////////////////////
1:       this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
/////////////////////////////////////////////////////////////////////////
1:     setName(org.apache.thrift.TBaseHelper.rightSize(name));
1:     return name == null ? null : name.array();
1:   public ByteBuffer bufferForName() {
1:     setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field validation_class is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field index_type is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field index_name is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
1:   /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validation_class, typedOther.validation_class);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_type, typedOther.index_type);
/////////////////////////////////////////////////////////////////////////
0:       lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_name, typedOther.index_name);
/////////////////////////////////////////////////////////////////////////
1:   public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
0:     org.apache.thrift.protocol.TField field;
0:       if (field.type == org.apache.thrift.protocol.TType.STOP) { 
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.I32) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           if (field.type == org.apache.thrift.protocol.TType.STRING) {
0:             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
0:           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
/////////////////////////////////////////////////////////////////////////
1:   public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
/////////////////////////////////////////////////////////////////////////
1:       org.apache.thrift.TBaseHelper.toString(this.name, sb);
/////////////////////////////////////////////////////////////////////////
1:   public void validate() throws org.apache.thrift.TException {
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
1:       throw new org.apache.thrift.protocol.TProtocolException("Required field 'validation_class' was not present! Struct: " + toString());
0:     }
0:   }
0: 
0:   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
0:     try {
0:       write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
0:     }
0:   }
0: 
0:   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
0:     try {
0:       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
0:     } catch (org.apache.thrift.TException te) {
0:       throw new java.io.IOException(te);
============================================================================