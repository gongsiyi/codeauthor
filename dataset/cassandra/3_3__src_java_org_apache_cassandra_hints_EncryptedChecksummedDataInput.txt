1:90033b9: /*
1:90033b9:  * Licensed to the Apache Software Foundation (ASF) under one
1:90033b9:  * or more contributor license agreements.  See the NOTICE file
1:90033b9:  * distributed with this work for additional information
1:90033b9:  * regarding copyright ownership.  The ASF licenses this file
1:90033b9:  * to you under the Apache License, Version 2.0 (the
1:90033b9:  * "License"); you may not use this file except in compliance
1:90033b9:  * with the License.  You may obtain a copy of the License at
1:90033b9:  *
1:90033b9:  *     http://www.apache.org/licenses/LICENSE-2.0
1:90033b9:  *
1:90033b9:  * Unless required by applicable law or agreed to in writing, software
1:90033b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90033b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90033b9:  * See the License for the specific language governing permissions and
1:90033b9:  * limitations under the License.
1:90033b9:  */
1:90033b9: package org.apache.cassandra.hints;
5:90033b9: 
1:90033b9: import java.io.IOException;
1:90033b9: import java.nio.ByteBuffer;
1:90033b9: import javax.crypto.Cipher;
1:90033b9: 
1:90033b9: import com.google.common.annotations.VisibleForTesting;
1:90033b9: 
1:90033b9: import org.apache.cassandra.security.EncryptionUtils;
1:cee22ad: import org.apache.cassandra.hints.CompressedChecksummedDataInput.Position;
1:90033b9: import org.apache.cassandra.io.FSReadError;
1:90033b9: import org.apache.cassandra.io.compress.ICompressor;
1:90033b9: import org.apache.cassandra.io.util.ChannelProxy;
1:90033b9: 
1:90033b9: public class EncryptedChecksummedDataInput extends ChecksummedDataInput
5:90033b9: {
1:90033b9:     private static final ThreadLocal<ByteBuffer> reusableBuffers = new ThreadLocal<ByteBuffer>()
1:90033b9:     {
1:90033b9:         protected ByteBuffer initialValue()
1:90033b9:         {
1:90033b9:             return ByteBuffer.allocate(0);
5:90033b9:         }
1:90033b9:     };
1:90033b9: 
1:90033b9:     private final Cipher cipher;
1:90033b9:     private final ICompressor compressor;
1:90033b9: 
1:90033b9:     private final EncryptionUtils.ChannelProxyReadChannel readChannel;
1:cee22ad:     private long sourcePosition;
1:90033b9: 
1:30bb255:     protected EncryptedChecksummedDataInput(ChannelProxy channel, Cipher cipher, ICompressor compressor, long filePosition)
1:90033b9:     {
1:30bb255:         super(channel);
1:30bb255:         this.cipher = cipher;
1:30bb255:         this.compressor = compressor;
1:30bb255:         readChannel = new EncryptionUtils.ChannelProxyReadChannel(channel, filePosition);
1:cee22ad:         this.sourcePosition = filePosition;
2:90033b9:         assert cipher != null;
2:90033b9:         assert compressor != null;
1:90033b9:     }
1:90033b9: 
1:90033b9:     /**
1:90033b9:      * Since an entire block of compressed data is read off of disk, not just a hint at a time,
1:90033b9:      * we don't report EOF until the decompressed data has also been read completely
1:90033b9:      */
1:90033b9:     public boolean isEOF()
1:90033b9:     {
1:cee22ad:         return readChannel.getCurrentPosition() == channel.size() && buffer.remaining() == 0;
1:90033b9:     }
1:90033b9: 
1:30bb255:     public long getSourcePosition()
1:30bb255:     {
1:cee22ad:         return sourcePosition;
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     static class Position extends ChecksummedDataInput.Position
1:cee22ad:     {
1:cee22ad:         final long bufferStart;
1:cee22ad:         final int bufferPosition;
1:cee22ad: 
1:cee22ad:         public Position(long sourcePosition, long bufferStart, int bufferPosition)
1:cee22ad:         {
1:cee22ad:             super(sourcePosition);
1:cee22ad:             this.bufferStart = bufferStart;
1:cee22ad:             this.bufferPosition = bufferPosition;
1:cee22ad:         }
1:cee22ad: 
1:cee22ad:         @Override
1:cee22ad:         public long subtract(InputPosition o)
1:cee22ad:         {
1:cee22ad:             Position other = (Position) o;
1:cee22ad:             return bufferStart - other.bufferStart + bufferPosition - other.bufferPosition;
1:cee22ad:         }
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     public InputPosition getSeekPosition()
1:cee22ad:     {
1:cee22ad:         return new Position(sourcePosition, bufferOffset, buffer.position());
1:cee22ad:     }
1:cee22ad: 
1:cee22ad:     public void seek(InputPosition p)
1:cee22ad:     {
1:cee22ad:         Position pos = (Position) p;
1:cee22ad:         bufferOffset = pos.bufferStart;
1:cee22ad:         readChannel.setPosition(pos.sourcePosition);
1:cee22ad:         buffer.position(0).limit(0);
1:cee22ad:         resetCrc();
1:cee22ad:         reBuffer();
1:cee22ad:         buffer.position(pos.bufferPosition);
1:cee22ad:         assert sourcePosition == pos.sourcePosition;
1:cee22ad:         assert bufferOffset == pos.bufferStart;
1:cee22ad:         assert buffer.position() == pos.bufferPosition;
1:30bb255:     }
1:30bb255: 
1:30bb255:     @Override
1:30bb255:     protected void readBuffer()
1:90033b9:     {
1:cee22ad:         this.sourcePosition = readChannel.getCurrentPosition();
1:cee22ad:         if (isEOF())
1:cee22ad:             return;
1:cee22ad: 
1:90033b9:         try
1:90033b9:         {
1:90033b9:             ByteBuffer byteBuffer = reusableBuffers.get();
1:90033b9:             ByteBuffer decrypted = EncryptionUtils.decrypt(readChannel, byteBuffer, true, cipher);
1:90033b9:             buffer = EncryptionUtils.uncompress(decrypted, buffer, true, compressor);
1:90033b9: 
1:90033b9:             if (decrypted.capacity() > byteBuffer.capacity())
1:90033b9:                 reusableBuffers.set(decrypted);
1:90033b9:         }
1:90033b9:         catch (IOException ioe)
1:90033b9:         {
1:90033b9:             throw new FSReadError(ioe, getPath());
1:90033b9:         }
1:90033b9:     }
1:90033b9: 
1:30bb255:     @SuppressWarnings("resource")
1:90033b9:     public static ChecksummedDataInput upgradeInput(ChecksummedDataInput input, Cipher cipher, ICompressor compressor)
1:90033b9:     {
1:90033b9:         long position = input.getPosition();
1:90033b9:         input.close();
1:90033b9: 
1:30bb255:         return new EncryptedChecksummedDataInput(new ChannelProxy(input.getPath()), cipher, compressor, position);
1:90033b9:     }
1:90033b9: 
1:90033b9:     @VisibleForTesting
1:90033b9:     Cipher getCipher()
1:90033b9:     {
1:90033b9:         return cipher;
1:90033b9:     }
1:90033b9: 
1:90033b9:     @VisibleForTesting
1:90033b9:     ICompressor getCompressor()
1:90033b9:     {
1:90033b9:         return compressor;
1:90033b9:     }
1:90033b9: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:cee22ad
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.hints.CompressedChecksummedDataInput.Position;
/////////////////////////////////////////////////////////////////////////
1:     private long sourcePosition;
/////////////////////////////////////////////////////////////////////////
1:         this.sourcePosition = filePosition;
/////////////////////////////////////////////////////////////////////////
1:         return readChannel.getCurrentPosition() == channel.size() && buffer.remaining() == 0;
1:         return sourcePosition;
1:     }
1: 
1:     static class Position extends ChecksummedDataInput.Position
1:     {
1:         final long bufferStart;
1:         final int bufferPosition;
1: 
1:         public Position(long sourcePosition, long bufferStart, int bufferPosition)
1:         {
1:             super(sourcePosition);
1:             this.bufferStart = bufferStart;
1:             this.bufferPosition = bufferPosition;
1:         }
1: 
1:         @Override
1:         public long subtract(InputPosition o)
1:         {
1:             Position other = (Position) o;
1:             return bufferStart - other.bufferStart + bufferPosition - other.bufferPosition;
1:         }
1:     }
1: 
1:     public InputPosition getSeekPosition()
1:     {
1:         return new Position(sourcePosition, bufferOffset, buffer.position());
1:     }
1: 
1:     public void seek(InputPosition p)
1:     {
1:         Position pos = (Position) p;
1:         bufferOffset = pos.bufferStart;
1:         readChannel.setPosition(pos.sourcePosition);
1:         buffer.position(0).limit(0);
1:         resetCrc();
1:         reBuffer();
1:         buffer.position(pos.bufferPosition);
1:         assert sourcePosition == pos.sourcePosition;
1:         assert bufferOffset == pos.bufferStart;
1:         assert buffer.position() == pos.bufferPosition;
1:         this.sourcePosition = readChannel.getCurrentPosition();
1:         if (isEOF())
1:             return;
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:30bb255
/////////////////////////////////////////////////////////////////////////
1:     protected EncryptedChecksummedDataInput(ChannelProxy channel, Cipher cipher, ICompressor compressor, long filePosition)
1:         super(channel);
1:         this.cipher = cipher;
1:         this.compressor = compressor;
1:         readChannel = new EncryptionUtils.ChannelProxyReadChannel(channel, filePosition);
/////////////////////////////////////////////////////////////////////////
0:         return getSourcePosition() == channel.size() && buffer.remaining() == 0;
1:     public long getSourcePosition()
1:     {
0:         return readChannel.getCurrentPosition();
1:     }
1: 
1:     @Override
1:     protected void readBuffer()
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("resource")
1:         return new EncryptedChecksummedDataInput(new ChannelProxy(input.getPath()), cipher, compressor, position);
author:Jason Brown
-------------------------------------------------------------------------------
commit:90033b9
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import javax.crypto.Cipher;
1: 
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: import org.apache.cassandra.security.EncryptionUtils;
1: import org.apache.cassandra.io.FSReadError;
1: import org.apache.cassandra.io.compress.ICompressor;
1: import org.apache.cassandra.io.util.ChannelProxy;
1: 
1: public class EncryptedChecksummedDataInput extends ChecksummedDataInput
1: {
1:     private static final ThreadLocal<ByteBuffer> reusableBuffers = new ThreadLocal<ByteBuffer>()
1:     {
1:         protected ByteBuffer initialValue()
1:         {
1:             return ByteBuffer.allocate(0);
1:         }
1:     };
1: 
1:     private final Cipher cipher;
1:     private final ICompressor compressor;
1: 
1:     private final EncryptionUtils.ChannelProxyReadChannel readChannel;
1: 
0:     protected EncryptedChecksummedDataInput(Builder builder)
1:     {
0:         super(builder);
0:         cipher = builder.cipher;
0:         compressor = builder.compressor;
0:         readChannel = new EncryptionUtils.ChannelProxyReadChannel(channel, builder.position);
1:         assert cipher != null;
1:         assert compressor != null;
1:     }
1: 
1:     /**
1:      * Since an entire block of compressed data is read off of disk, not just a hint at a time,
1:      * we don't report EOF until the decompressed data has also been read completely
1:      */
1:     public boolean isEOF()
1:     {
0:         return readChannel.getCurrentPosition() == channel.size() && buffer.remaining() == 0;
1:     }
1: 
0:     protected void reBufferStandard()
1:     {
1:         try
1:         {
1:             ByteBuffer byteBuffer = reusableBuffers.get();
1:             ByteBuffer decrypted = EncryptionUtils.decrypt(readChannel, byteBuffer, true, cipher);
1:             buffer = EncryptionUtils.uncompress(decrypted, buffer, true, compressor);
1: 
1:             if (decrypted.capacity() > byteBuffer.capacity())
1:                 reusableBuffers.set(decrypted);
1:         }
1:         catch (IOException ioe)
1:         {
1:             throw new FSReadError(ioe, getPath());
1:         }
1:     }
1: 
0:     public static class Builder extends CompressedChecksummedDataInputBuilder
1:     {
0:         Cipher cipher;
1: 
0:         public Builder(ChannelProxy channel)
1:         {
0:             super(channel);
1:         }
1: 
0:         public Builder withCipher(Cipher cipher)
1:         {
0:             this.cipher = cipher;
0:             return this;
1:         }
1: 
0:         public ChecksummedDataInput build()
1:         {
0:             assert position >= 0;
1:             assert compressor != null;
1:             assert cipher != null;
0:             return new EncryptedChecksummedDataInput(this);
1:         }
1:     }
1: 
1:     public static ChecksummedDataInput upgradeInput(ChecksummedDataInput input, Cipher cipher, ICompressor compressor)
1:     {
1:         long position = input.getPosition();
1:         input.close();
1: 
0:         Builder builder = new Builder(new ChannelProxy(input.getPath()));
0:         builder.withPosition(position);
0:         builder.withCompressor(compressor);
0:         builder.withCipher(cipher);
0:         return builder.build();
1:     }
1: 
1:     @VisibleForTesting
1:     Cipher getCipher()
1:     {
1:         return cipher;
1:     }
1: 
1:     @VisibleForTesting
1:     ICompressor getCompressor()
1:     {
1:         return compressor;
1:     }
1: }
============================================================================