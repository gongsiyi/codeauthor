1:5799897: /*
1:8b374b2:  *
1:5799897:  * Licensed to the Apache Software Foundation (ASF) under one
1:5799897:  * or more contributor license agreements.  See the NOTICE file
1:5799897:  * distributed with this work for additional information
1:5799897:  * regarding copyright ownership.  The ASF licenses this file
1:5799897:  * to you under the Apache License, Version 2.0 (the
1:5799897:  * "License"); you may not use this file except in compliance
1:5799897:  * with the License.  You may obtain a copy of the License at
1:8b374b2:  *
1:5799897:  *   http://www.apache.org/licenses/LICENSE-2.0
1:8b374b2:  *
1:5799897:  * Unless required by applicable law or agreed to in writing,
1:5799897:  * software distributed under the License is distributed on an
1:5799897:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:5799897:  * KIND, either express or implied.  See the License for the
1:5799897:  * specific language governing permissions and limitations
1:5799897:  * under the License.
1:8b374b2:  *
1:5799897:  */
1:a4add95: package org.apache.cassandra.db.commitlog;
9:5799897: 
1:44f8254: import java.io.DataInput;
1:134e022: import java.io.EOFException;
1:134e022: import java.io.File;
1:134e022: import java.io.IOException;
1:134e022: import java.io.RandomAccessFile;
1:134e022: import java.nio.ByteBuffer;
1:44f8254: import java.nio.charset.StandardCharsets;
1:7374e9b: import java.util.Collections;
1:44f8254: import java.util.Map;
1:44f8254: import java.util.TreeMap;
1:5799897: import java.util.regex.Matcher;
1:5799897: import java.util.regex.Pattern;
1:8c22b4a: import java.util.zip.CRC32;
1:44f8254: 
1:0368e97: import com.google.common.annotations.VisibleForTesting;
1:44f8254: import com.google.common.base.Objects;
1:66a5d3b: 
1:8a03181: import org.apache.cassandra.config.ParameterizedClass;
1:44f8254: import org.apache.cassandra.exceptions.ConfigurationException;
1:134e022: import org.apache.cassandra.io.FSReadError;
1:5799897: import org.apache.cassandra.net.MessagingService;
1:7374e9b: import org.apache.cassandra.security.EncryptionContext;
1:44f8254: import org.json.simple.JSONValue;
1:134e022: 
1:8c22b4a: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1:8c22b4a: 
1:5799897: public class CommitLogDescriptor
5:5799897: {
1:5799897:     private static final String SEPARATOR = "-";
1:5799897:     private static final String FILENAME_PREFIX = "CommitLog" + SEPARATOR;
1:5799897:     private static final String FILENAME_EXTENSION = ".log";
1:8b374b2:     // match both legacy and new version of commitlogs Ex: CommitLog-12345.log and CommitLog-4-12345.log.
1:5799897:     private static final Pattern COMMIT_LOG_FILE_PATTERN = Pattern.compile(FILENAME_PREFIX + "((\\d+)(" + SEPARATOR + "\\d+)?)" + FILENAME_EXTENSION);
1:8b374b2: 
1:7374e9b:     static final String COMPRESSION_PARAMETERS_KEY = "compressionParameters";
1:7374e9b:     static final String COMPRESSION_CLASS_KEY = "compressionClass";
1:7374e9b: 
1:5799897:     public static final int VERSION_12 = 2;
1:3a005df:     public static final int VERSION_20 = 3;
1:5fd4631:     public static final int VERSION_21 = 4;
1:79e1e80:     public static final int VERSION_22 = 5;
1:a991b64:     public static final int VERSION_30 = 6;
1:7374e9b: 
1:8b374b2:     /**
1:5799897:      * Increment this number if there is a changes in the commit log disc layout or MessagingVersion changes.
1:5799897:      * Note: make sure to handle {@link #getMessagingVersion()}
1:5799897:      */
1:0368e97:     @VisibleForTesting
1:a991b64:     public static final int current_version = VERSION_30;
1:8b374b2: 
1:0b26c77:     final int version;
1:5799897:     public final long id;
1:8a03181:     public final ParameterizedClass compression;
1:7374e9b:     private final EncryptionContext encryptionContext;
1:8b374b2: 
1:7374e9b:     public CommitLogDescriptor(int version, long id, ParameterizedClass compression, EncryptionContext encryptionContext)
1:5799897:     {
1:5799897:         this.version = version;
1:5799897:         this.id = id;
1:44f8254:         this.compression = compression;
1:7374e9b:         this.encryptionContext = encryptionContext;
4:5799897:     }
1:134e022: 
1:7374e9b:     public CommitLogDescriptor(long id, ParameterizedClass compression, EncryptionContext encryptionContext)
1:44f8254:     {
1:7374e9b:         this(current_version, id, compression, encryptionContext);
1:134e022:     }
1:134e022: 
1:44f8254:     public static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor)
1:134e022:     {
1:7374e9b:         writeHeader(out, descriptor, Collections.<String, String>emptyMap());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * @param additionalHeaders Allow segments to pass custom header data
1:7374e9b:      */
1:7374e9b:     public static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor, Map<String, String> additionalHeaders)
1:7374e9b:     {
1:8c22b4a:         CRC32 crc = new CRC32();
1:44f8254:         out.putInt(descriptor.version);
1:8c22b4a:         updateChecksumInt(crc, descriptor.version);
1:44f8254:         out.putLong(descriptor.id);
1:8c22b4a:         updateChecksumInt(crc, (int) (descriptor.id & 0xFFFFFFFFL));
1:8c22b4a:         updateChecksumInt(crc, (int) (descriptor.id >>> 32));
1:68d2526:         if (descriptor.version >= VERSION_22)
1:68d2526:         {
1:7374e9b:             String parametersString = constructParametersString(descriptor.compression, descriptor.encryptionContext, additionalHeaders);
1:44f8254:             byte[] parametersBytes = parametersString.getBytes(StandardCharsets.UTF_8);
1:44f8254:             if (parametersBytes.length != (((short) parametersBytes.length) & 0xFFFF))
1:44f8254:                 throw new ConfigurationException(String.format("Compression parameters too long, length %d cannot be above 65535.",
1:44f8254:                                                                parametersBytes.length));
1:44f8254:             out.putShort((short) parametersBytes.length);
1:8c22b4a:             updateChecksumInt(crc, parametersBytes.length);
1:44f8254:             out.put(parametersBytes);
1:44f8254:             crc.update(parametersBytes, 0, parametersBytes.length);
1:68d2526:         }
1:68d2526:         else
1:44f8254:             assert descriptor.compression == null;
1:8c22b4a:         out.putInt((int) crc.getValue());
1:44f8254:     }
1:44f8254: 
1:7374e9b:     @VisibleForTesting
1:7374e9b:     static String constructParametersString(ParameterizedClass compression, EncryptionContext encryptionContext, Map<String, String> additionalHeaders)
1:44f8254:     {
1:7374e9b:         Map<String, Object> params = new TreeMap<>();
1:44f8254:         if (compression != null)
1:44f8254:         {
1:44f8254:             params.put(COMPRESSION_PARAMETERS_KEY, compression.parameters);
1:44f8254:             params.put(COMPRESSION_CLASS_KEY, compression.class_name);
1:44f8254:         }
1:7374e9b:         if (encryptionContext != null)
1:7374e9b:             params.putAll(encryptionContext.toHeaderParameters());
1:7374e9b:         params.putAll(additionalHeaders);
1:44f8254:         return JSONValue.toJSONString(params);
1:ad3a4f8:     }
1:581ce63: 
1:7374e9b:     public static CommitLogDescriptor fromHeader(File file, EncryptionContext encryptionContext)
1:134e022:     {
1:134e022:         try (RandomAccessFile raf = new RandomAccessFile(file, "r"))
1:134e022:         {
1:134e022:             assert raf.getFilePointer() == 0;
1:7374e9b:             return readHeader(raf, encryptionContext);
1:134e022:         }
1:134e022:         catch (EOFException e)
1:134e022:         {
1:134e022:             throw new RuntimeException(e);
1:134e022:         }
1:134e022:         catch (IOException e)
1:134e022:         {
1:134e022:             throw new FSReadError(e, file);
1:134e022:         }
1:134e022:     }
1:134e022: 
1:7374e9b:     public static CommitLogDescriptor readHeader(DataInput input, EncryptionContext encryptionContext) throws IOException
1:ad3a4f8:     {
1:8c22b4a:         CRC32 checkcrc = new CRC32();
1:44f8254:         int version = input.readInt();
1:8c22b4a:         updateChecksumInt(checkcrc, version);
1:44f8254:         long id = input.readLong();
1:8c22b4a:         updateChecksumInt(checkcrc, (int) (id & 0xFFFFFFFFL));
1:8c22b4a:         updateChecksumInt(checkcrc, (int) (id >>> 32));
1:44f8254:         int parametersLength = 0;
1:68d2526:         if (version >= VERSION_22)
1:68d2526:         {
1:44f8254:             parametersLength = input.readShort() & 0xFFFF;
1:8c22b4a:             updateChecksumInt(checkcrc, parametersLength);
1:44f8254:         }
1:44f8254:         // This should always succeed as parametersLength cannot be too long even for a
1:44f8254:         // corrupt segment file.
1:44f8254:         byte[] parametersBytes = new byte[parametersLength];
1:44f8254:         input.readFully(parametersBytes);
1:44f8254:         checkcrc.update(parametersBytes, 0, parametersBytes.length);
1:44f8254:         int crc = input.readInt();
1:7374e9b: 
1:8c22b4a:         if (crc == (int) checkcrc.getValue())
1:7374e9b:         {
1:7374e9b:             Map<?, ?> map = (Map<?, ?>) JSONValue.parse(new String(parametersBytes, StandardCharsets.UTF_8));
1:7374e9b:             return new CommitLogDescriptor(version, id, parseCompression(map), EncryptionContext.createFromMap(map, encryptionContext));
1:7374e9b:         }
1:44f8254:         return null;
1:44f8254:     }
1:44f8254: 
1:44f8254:     @SuppressWarnings("unchecked")
1:7374e9b:     @VisibleForTesting
1:7374e9b:     static ParameterizedClass parseCompression(Map<?, ?> params)
1:44f8254:     {
1:7374e9b:         if (params == null || params.isEmpty())
1:44f8254:             return null;
1:44f8254:         String className = (String) params.get(COMPRESSION_CLASS_KEY);
1:44f8254:         if (className == null)
1:44f8254:             return null;
1:44f8254: 
1:44f8254:         Map<String, String> cparams = (Map<String, String>) params.get(COMPRESSION_PARAMETERS_KEY);
1:8a03181:         return new ParameterizedClass(className, cparams);
1:44f8254:     }
1:44f8254: 
1:5799897:     public static CommitLogDescriptor fromFileName(String name)
1:5799897:     {
1:5799897:         Matcher matcher;
1:5799897:         if (!(matcher = COMMIT_LOG_FILE_PATTERN.matcher(name)).matches())
1:5799897:             throw new RuntimeException("Cannot parse the version of the file: " + name);
1:ad3a4f8: 
1:7f2c3a8:         if (matcher.group(3) == null)
1:7f2c3a8:             throw new UnsupportedOperationException("Commitlog segment is too old to open; upgrade to 1.2.5+ first");
1:7f2c3a8: 
1:8b374b2:         long id = Long.parseLong(matcher.group(3).split(SEPARATOR)[1]);
1:7374e9b:         return new CommitLogDescriptor(Integer.parseInt(matcher.group(2)), id, null, new EncryptionContext());
1:5799897:     }
1:5799897: 
1:5799897:     public int getMessagingVersion()
1:5799897:     {
1:5799897:         switch (version)
1:5799897:         {
1:5799897:             case VERSION_12:
1:5799897:                 return MessagingService.VERSION_12;
1:3a005df:             case VERSION_20:
1:3a005df:                 return MessagingService.VERSION_20;
1:5fd4631:             case VERSION_21:
1:5fd4631:                 return MessagingService.VERSION_21;
1:79e1e80:             case VERSION_22:
1:79e1e80:                 return MessagingService.VERSION_22;
1:a991b64:             case VERSION_30:
1:a991b64:                 return MessagingService.VERSION_30;
1:5799897:             default:
1:5799897:                 throw new IllegalStateException("Unknown commitlog version " + version);
1:5799897:         }
1:5799897:     }
1:5799897: 
1:5799897:     public String fileName()
1:8b374b2:     {
1:5799897:         return FILENAME_PREFIX + version + SEPARATOR + id + FILENAME_EXTENSION;
1:5799897:     }
1:5799897: 
2:5799897:     /**
1:5799897:      * @param   filename  the filename to check
1:5799897:      * @return true if filename could be a commit log based on it's filename
1:5799897:      */
1:5799897:     public static boolean isValid(String filename)
1:5799897:     {
1:5799897:         return COMMIT_LOG_FILE_PATTERN.matcher(filename).matches();
1:5799897:     }
1:134e022: 
1:7374e9b:     public EncryptionContext getEncryptionContext()
1:7374e9b:     {
1:7374e9b:         return encryptionContext;
1:7374e9b:     }
1:7374e9b: 
1:134e022:     public String toString()
1:134e022:     {
1:44f8254:         return "(" + version + "," + id + (compression != null ? "," + compression : "") + ")";
1:134e022:     }
1:134e022: 
1:134e022:     public boolean equals(Object that)
1:134e022:     {
1:134e022:         return that instanceof CommitLogDescriptor && equals((CommitLogDescriptor) that);
1:134e022:     }
1:134e022: 
1:44f8254:     public boolean equalsIgnoringCompression(CommitLogDescriptor that)
1:134e022:     {
1:134e022:         return this.version == that.version && this.id == that.id;
1:44f8254:     }
1:44f8254: 
1:44f8254:     public boolean equals(CommitLogDescriptor that)
1:44f8254:     {
1:7374e9b:         return equalsIgnoringCompression(that) && Objects.equal(this.compression, that.compression)
1:7374e9b:                 && Objects.equal(encryptionContext, that.encryptionContext);
1:134e022:     }
1:5799897: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         if (descriptor.version >= VERSION_22)
1:         {
/////////////////////////////////////////////////////////////////////////
1:         }
1:         else
/////////////////////////////////////////////////////////////////////////
1:         if (version >= VERSION_22)
1:         {
commit:1def02f
/////////////////////////////////////////////////////////////////////////
commit:8b374b2
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     // match both legacy and new version of commitlogs Ex: CommitLog-12345.log and CommitLog-4-12345.log.
1: 
1:     /**
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             long id = Long.parseLong(matcher.group(3).split(SEPARATOR)[1]);
0:             return new CommitLogDescriptor(Integer.parseInt(matcher.group(2)), id);
0:             long id = Long.parseLong(matcher.group(1));
/////////////////////////////////////////////////////////////////////////
1:     {
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.security.EncryptionContext;
/////////////////////////////////////////////////////////////////////////
1: 
1:     static final String COMPRESSION_PARAMETERS_KEY = "compressionParameters";
1:     static final String COMPRESSION_CLASS_KEY = "compressionClass";
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final EncryptionContext encryptionContext;
1:     public CommitLogDescriptor(int version, long id, ParameterizedClass compression, EncryptionContext encryptionContext)
1:         this.encryptionContext = encryptionContext;
1:     public CommitLogDescriptor(long id, ParameterizedClass compression, EncryptionContext encryptionContext)
1:         this(current_version, id, compression, encryptionContext);
1:         writeHeader(out, descriptor, Collections.<String, String>emptyMap());
1:     }
1: 
1:     /**
1:      * @param additionalHeaders Allow segments to pass custom header data
1:      */
1:     public static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor, Map<String, String> additionalHeaders)
1:     {
/////////////////////////////////////////////////////////////////////////
1:             String parametersString = constructParametersString(descriptor.compression, descriptor.encryptionContext, additionalHeaders);
/////////////////////////////////////////////////////////////////////////
1:     @VisibleForTesting
1:     static String constructParametersString(ParameterizedClass compression, EncryptionContext encryptionContext, Map<String, String> additionalHeaders)
1:         Map<String, Object> params = new TreeMap<>();
1:         if (encryptionContext != null)
1:             params.putAll(encryptionContext.toHeaderParameters());
1:         params.putAll(additionalHeaders);
1:     public static CommitLogDescriptor fromHeader(File file, EncryptionContext encryptionContext)
1:             return readHeader(raf, encryptionContext);
/////////////////////////////////////////////////////////////////////////
1:     public static CommitLogDescriptor readHeader(DataInput input, EncryptionContext encryptionContext) throws IOException
/////////////////////////////////////////////////////////////////////////
1: 
1:         {
1:             Map<?, ?> map = (Map<?, ?>) JSONValue.parse(new String(parametersBytes, StandardCharsets.UTF_8));
1:             return new CommitLogDescriptor(version, id, parseCompression(map), EncryptionContext.createFromMap(map, encryptionContext));
1:         }
1:     @VisibleForTesting
1:     static ParameterizedClass parseCompression(Map<?, ?> params)
1:         if (params == null || params.isEmpty())
/////////////////////////////////////////////////////////////////////////
1:         return new CommitLogDescriptor(Integer.parseInt(matcher.group(2)), id, null, new EncryptionContext());
/////////////////////////////////////////////////////////////////////////
1:     public EncryptionContext getEncryptionContext()
1:     {
1:         return encryptionContext;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return equalsIgnoringCompression(that) && Objects.equal(this.compression, that.compression)
1:                 && Objects.equal(encryptionContext, that.encryptionContext);
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:f8f6fd2
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8c22b4a
/////////////////////////////////////////////////////////////////////////
1: import java.util.zip.CRC32;
0: import org.apache.cassandra.utils.FBUtilities;
1: import static org.apache.cassandra.utils.FBUtilities.updateChecksumInt;
1: 
/////////////////////////////////////////////////////////////////////////
1:         CRC32 crc = new CRC32();
1:         updateChecksumInt(crc, descriptor.version);
1:         updateChecksumInt(crc, (int) (descriptor.id & 0xFFFFFFFFL));
1:         updateChecksumInt(crc, (int) (descriptor.id >>> 32));
/////////////////////////////////////////////////////////////////////////
1:             updateChecksumInt(crc, parametersBytes.length);
1:         out.putInt((int) crc.getValue());
/////////////////////////////////////////////////////////////////////////
1:         CRC32 checkcrc = new CRC32();
1:         updateChecksumInt(checkcrc, version);
1:         updateChecksumInt(checkcrc, (int) (id & 0xFFFFFFFFL));
1:         updateChecksumInt(checkcrc, (int) (id >>> 32));
1:             updateChecksumInt(checkcrc, parametersLength);
/////////////////////////////////////////////////////////////////////////
1:         if (crc == (int) checkcrc.getValue())
commit:66a5d3b
/////////////////////////////////////////////////////////////////////////
1: 
0: import com.github.tjake.ICRC32;
0: import org.apache.cassandra.utils.CRC32Factory;
/////////////////////////////////////////////////////////////////////////
0:         ICRC32 crc = CRC32Factory.instance.create();
/////////////////////////////////////////////////////////////////////////
0:             ICRC32 checkcrc = CRC32Factory.instance.create();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_30 = 6;
1:     public static final int current_version = VERSION_30;
/////////////////////////////////////////////////////////////////////////
1:             case VERSION_30:
1:                 return MessagingService.VERSION_30;
commit:3a005df
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_20 = 3;
0:     public static final int current_version = VERSION_20;
/////////////////////////////////////////////////////////////////////////
0:         assert MessagingService.current_version == MessagingService.VERSION_20;
1:             case VERSION_20:
1:                 return MessagingService.VERSION_20;
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:79e1e80
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_22 = 5;
0:     public static final int current_version = VERSION_22;
/////////////////////////////////////////////////////////////////////////
0:         if (descriptor.version >= VERSION_22) {
/////////////////////////////////////////////////////////////////////////
0:         if (version >= VERSION_22) {
/////////////////////////////////////////////////////////////////////////
1:             case VERSION_22:
1:                 return MessagingService.VERSION_22;
author:blambov
-------------------------------------------------------------------------------
commit:8a03181
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.ParameterizedClass;
/////////////////////////////////////////////////////////////////////////
1:     public final ParameterizedClass compression;
0:     public CommitLogDescriptor(int version, long id, ParameterizedClass compression)
0:     public CommitLogDescriptor(long id, ParameterizedClass compression)
/////////////////////////////////////////////////////////////////////////
0:         ParameterizedClass compression = descriptor.compression;
/////////////////////////////////////////////////////////////////////////
0:     private static ParameterizedClass parseCompression(Map<?, ?> params)
/////////////////////////////////////////////////////////////////////////
1:         return new ParameterizedClass(className, cparams);
commit:44f8254
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.nio.charset.StandardCharsets;
1: import java.util.Map;
1: import java.util.TreeMap;
1: import com.google.common.base.Objects;
1: 
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.config.ParametrizedClass;
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.json.simple.JSONValue;
/////////////////////////////////////////////////////////////////////////
0:     private static final String COMPRESSION_PARAMETERS_KEY = "compressionParameters";
0:     private static final String COMPRESSION_CLASS_KEY = "compressionClass";
/////////////////////////////////////////////////////////////////////////
0:     public final ParametrizedClass compression;
0:     public CommitLogDescriptor(int version, long id, ParametrizedClass compression)
1:         this.compression = compression;
0:     public CommitLogDescriptor(long id, ParametrizedClass compression)
0:         this(current_version, id, compression);
1:     public static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor)
1:         out.putInt(descriptor.version);
1:         out.putLong(descriptor.id);
0:         if (descriptor.version >= VERSION_30) {
0:             String parametersString = constructParametersString(descriptor);
1:             byte[] parametersBytes = parametersString.getBytes(StandardCharsets.UTF_8);
1:             if (parametersBytes.length != (((short) parametersBytes.length) & 0xFFFF))
1:                 throw new ConfigurationException(String.format("Compression parameters too long, length %d cannot be above 65535.",
1:                                                                parametersBytes.length));
1:             out.putShort((short) parametersBytes.length);
0:             crc.updateInt(parametersBytes.length);
1:             out.put(parametersBytes);
1:             crc.update(parametersBytes, 0, parametersBytes.length);
0:         } else
1:             assert descriptor.compression == null;
0:         out.putInt(crc.getCrc());
1:     }
1: 
0:     private static String constructParametersString(CommitLogDescriptor descriptor)
1:     {
0:         Map<String, Object> params = new TreeMap<String, Object>();
0:         ParametrizedClass compression = descriptor.compression;
1:         if (compression != null)
1:         {
1:             params.put(COMPRESSION_PARAMETERS_KEY, compression.parameters);
1:             params.put(COMPRESSION_CLASS_KEY, compression.class_name);
1:         }
1:         return JSONValue.toJSONString(params);
/////////////////////////////////////////////////////////////////////////
0:             return readHeader(raf);
/////////////////////////////////////////////////////////////////////////
0:     public static CommitLogDescriptor readHeader(DataInput input) throws IOException
1:     {
0:         ICRC32 checkcrc = CRC32Factory.instance.create();
1:         int version = input.readInt();
0:         checkcrc.updateInt(version);
1:         long id = input.readLong();
0:         checkcrc.updateInt((int) (id & 0xFFFFFFFFL));
0:         checkcrc.updateInt((int) (id >>> 32));
1:         int parametersLength = 0;
0:         if (version >= VERSION_30) {
1:             parametersLength = input.readShort() & 0xFFFF;
0:             checkcrc.updateInt(parametersLength);
1:         }
1:         // This should always succeed as parametersLength cannot be too long even for a
1:         // corrupt segment file.
1:         byte[] parametersBytes = new byte[parametersLength];
1:         input.readFully(parametersBytes);
1:         checkcrc.update(parametersBytes, 0, parametersBytes.length);
1:         int crc = input.readInt();
0:         if (crc == checkcrc.getCrc())
0:             return new CommitLogDescriptor(version, id,
0:                     parseCompression((Map<?, ?>) JSONValue.parse(new String(parametersBytes, StandardCharsets.UTF_8))));
1:         return null;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
0:     private static ParametrizedClass parseCompression(Map<?, ?> params)
1:     {
0:         if (params == null)
1:             return null;
1:         String className = (String) params.get(COMPRESSION_CLASS_KEY);
1:         if (className == null)
1:             return null;
1: 
1:         Map<String, String> cparams = (Map<String, String>) params.get(COMPRESSION_PARAMETERS_KEY);
0:         return new ParametrizedClass(className, cparams);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         return new CommitLogDescriptor(Integer.parseInt(matcher.group(2)), id, null);
/////////////////////////////////////////////////////////////////////////
1:         return "(" + version + "," + id + (compression != null ? "," + compression : "") + ")";
/////////////////////////////////////////////////////////////////////////
1:     public boolean equalsIgnoringCompression(CommitLogDescriptor that)
1:     public boolean equals(CommitLogDescriptor that)
1:     {
0:         return equalsIgnoringCompression(that) && Objects.equal(this.compression, that.compression);
1:     }
1: 
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.annotations.VisibleForTesting;
/////////////////////////////////////////////////////////////////////////
0:     public static final int VERSION_30 = 5;
1:     @VisibleForTesting
0:     public static final int current_version = VERSION_30;
/////////////////////////////////////////////////////////////////////////
0:             case VERSION_30:
0:                 return MessagingService.VERSION_30;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4d282ca
commit:a5bc52e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     static final int HEADER_SIZE = 4 + 8 + 4;
/////////////////////////////////////////////////////////////////////////
0:     static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor)
commit:0b26c77
/////////////////////////////////////////////////////////////////////////
1:     final int version;
/////////////////////////////////////////////////////////////////////////
commit:134e022
/////////////////////////////////////////////////////////////////////////
1: import java.io.EOFException;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.io.FSReadError;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.PureJavaCrc32;
/////////////////////////////////////////////////////////////////////////
0:     // [version, id, checksum]
0:     static final int HEADER_SIZE = 4 + 8 + 4;
1: 
/////////////////////////////////////////////////////////////////////////
0:     static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor)
1:     {
0:         out.putInt(0, descriptor.version);
0:         out.putLong(4, descriptor.id);
0:         PureJavaCrc32 crc = new PureJavaCrc32();
0:         crc.updateInt(descriptor.version);
0:         crc.updateInt((int) (descriptor.id & 0xFFFFFFFFL));
0:         crc.updateInt((int) (descriptor.id >>> 32));
0:         out.putInt(12, crc.getCrc());
1:     }
1: 
0:     public static CommitLogDescriptor fromHeader(File file)
1:     {
1:         try (RandomAccessFile raf = new RandomAccessFile(file, "r"))
1:         {
1:             assert raf.getFilePointer() == 0;
0:             int version = raf.readInt();
0:             long id = raf.readLong();
0:             int crc = raf.readInt();
0:             PureJavaCrc32 checkcrc = new PureJavaCrc32();
0:             checkcrc.updateInt(version);
0:             checkcrc.updateInt((int) (id & 0xFFFFFFFFL));
0:             checkcrc.updateInt((int) (id >>> 32));
0:             if (crc == checkcrc.getCrc())
0:                 return new CommitLogDescriptor(version, id);
0:             return null;
1:         }
1:         catch (EOFException e)
1:         {
1:             throw new RuntimeException(e);
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSReadError(e, file);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
0:         return "(" + version + "," + id + ")";
1:     }
1: 
1:     public boolean equals(Object that)
1:     {
1:         return that instanceof CommitLogDescriptor && equals((CommitLogDescriptor) that);
1:     }
1: 
0:     public boolean equals(CommitLogDescriptor that)
1:     {
1:         return this.version == that.version && this.id == that.id;
1:     }
1: 
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (matcher.group(3) == null)
1:             throw new UnsupportedOperationException("Commitlog segment is too old to open; upgrade to 1.2.5+ first");
1: 
0:         long id = Long.parseLong(matcher.group(3).split(SEPARATOR)[1]);
0:         return new CommitLogDescriptor(Integer.parseInt(matcher.group(2)), id);
/////////////////////////////////////////////////////////////////////////
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:ac4a026
commit:581ce63
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.annotations.VisibleForTesting;
1: 
/////////////////////////////////////////////////////////////////////////
0:     @VisibleForTesting
0:     public static final int HEADER_SIZE = 4 + 8 + 4;
/////////////////////////////////////////////////////////////////////////
0:     @VisibleForTesting
0:     public static void writeHeader(ByteBuffer out, CommitLogDescriptor descriptor)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:c2681e9
commit:ad3a4f8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public int getVersion()
1:     {
0:         return version;
1:     }
1: 
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:5fd4631
/////////////////////////////////////////////////////////////////////////
1:     public static final int VERSION_21 = 4;
0:     public static final int current_version = VERSION_21;
/////////////////////////////////////////////////////////////////////////
1:             case VERSION_21:
1:                 return MessagingService.VERSION_21;
commit:14da6bc
/////////////////////////////////////////////////////////////////////////
0:         assert MessagingService.current_version == MessagingService.VERSION_21;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:a4add95
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db.commitlog;
/////////////////////////////////////////////////////////////////////////
0:         assert MessagingService.current_version == MessagingService.VERSION_12;
commit:5799897
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db.commitlog;
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
0:  * 
1:  */
1: 
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import org.apache.cassandra.net.MessagingService;
1: 
1: public class CommitLogDescriptor
1: {
1:     private static final String SEPARATOR = "-";
1:     private static final String FILENAME_PREFIX = "CommitLog" + SEPARATOR;
1:     private static final String FILENAME_EXTENSION = ".log";
0:     // match both legacy and new version of commitlogs Ex: CommitLog-12345.log and CommitLog-4-12345.log. 
1:     private static final Pattern COMMIT_LOG_FILE_PATTERN = Pattern.compile(FILENAME_PREFIX + "((\\d+)(" + SEPARATOR + "\\d+)?)" + FILENAME_EXTENSION);
1:     
0:     public static final int LEGACY_VERSION = 1;
1:     public static final int VERSION_12 = 2;
1:     /** 
1:      * Increment this number if there is a changes in the commit log disc layout or MessagingVersion changes.
1:      * Note: make sure to handle {@link #getMessagingVersion()}
1:      */
0:     public static final int current_version = VERSION_12;
1:     
0:     private final int version;
1:     public final long id;
1:     
0:     public CommitLogDescriptor(int version, long id)
1:     {
1:         this.version = version;
1:         this.id = id;
1:     }
1: 
0:     public CommitLogDescriptor(long id)
1:     {
0:         this(current_version, id);
1:     }
1: 
1:     public static CommitLogDescriptor fromFileName(String name)
1:     {
1:         Matcher matcher;
1:         if (!(matcher = COMMIT_LOG_FILE_PATTERN.matcher(name)).matches())
1:             throw new RuntimeException("Cannot parse the version of the file: " + name);
1: 
0:         if (matcher.group(3) != null)
1:         {
0:             long id = Long.valueOf(matcher.group(3).split(SEPARATOR)[1]);
0:             return new CommitLogDescriptor(Integer.valueOf(matcher.group(2)), id);
1:         }
0:         else
1:         {
0:             long id = Long.valueOf(matcher.group(1));
0:             return new CommitLogDescriptor(LEGACY_VERSION, id);
1:         }
1:     }
1: 
1:     public int getMessagingVersion()
1:     {
1:         switch (version)
1:         {
0:             case LEGACY_VERSION:
0:                 return MessagingService.VERSION_11;
1:             case VERSION_12:
1:                 return MessagingService.VERSION_12;
1:             default:
1:                 throw new IllegalStateException("Unknown commitlog version " + version);
1:         }
1:     }
1: 
1:     public String fileName()
1:     {   
1:         return FILENAME_PREFIX + version + SEPARATOR + id + FILENAME_EXTENSION;
1:     }
1: 
1:     /**
1:      * @param   filename  the filename to check
1:      * @return true if filename could be a commit log based on it's filename
1:      */
1:     public static boolean isValid(String filename)
1:     {
1:         return COMMIT_LOG_FILE_PATTERN.matcher(filename).matches();
1:     }
1: }
============================================================================