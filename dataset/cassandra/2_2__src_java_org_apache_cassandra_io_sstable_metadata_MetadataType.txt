1:74bf5aa: /*
1:74bf5aa:  * Licensed to the Apache Software Foundation (ASF) under one
1:74bf5aa:  * or more contributor license agreements.  See the NOTICE file
1:74bf5aa:  * distributed with this work for additional information
1:74bf5aa:  * regarding copyright ownership.  The ASF licenses this file
1:74bf5aa:  * to you under the Apache License, Version 2.0 (the
1:74bf5aa:  * "License"); you may not use this file except in compliance
1:74bf5aa:  * with the License.  You may obtain a copy of the License at
1:74bf5aa:  *
1:74bf5aa:  *     http://www.apache.org/licenses/LICENSE-2.0
1:74bf5aa:  *
1:74bf5aa:  * Unless required by applicable law or agreed to in writing, software
1:74bf5aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74bf5aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74bf5aa:  * See the License for the specific language governing permissions and
1:74bf5aa:  * limitations under the License.
1:74bf5aa:  */
1:74bf5aa: package org.apache.cassandra.io.sstable.metadata;
1:74bf5aa: 
1:a991b64: import org.apache.cassandra.db.SerializationHeader;
1:a991b64: 
1:74bf5aa: /**
1:74bf5aa:  * Defines Metadata component type.
1:74bf5aa:  */
1:74bf5aa: public enum MetadataType
1:74bf5aa: {
1:74bf5aa:     /** Metadata only used for SSTable validation */
1:74bf5aa:     VALIDATION(ValidationMetadata.serializer),
1:74bf5aa:     /** Metadata only used at compaction */
1:74bf5aa:     COMPACTION(CompactionMetadata.serializer),
1:74bf5aa:     /** Metadata always keep in memory */
1:a991b64:     STATS(StatsMetadata.serializer),
1:a991b64:     /** Serialization header */
1:a991b64:     HEADER((IMetadataComponentSerializer)SerializationHeader.serializer);
1:74bf5aa: 
1:74bf5aa:     public final IMetadataComponentSerializer<MetadataComponent> serializer;
1:74bf5aa: 
1:74bf5aa:     private MetadataType(IMetadataComponentSerializer<MetadataComponent> serializer)
1:74bf5aa:     {
1:74bf5aa:         this.serializer = serializer;
1:74bf5aa:     }
1:74bf5aa: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.SerializationHeader;
1: 
/////////////////////////////////////////////////////////////////////////
1:     STATS(StatsMetadata.serializer),
1:     /** Serialization header */
1:     HEADER((IMetadataComponentSerializer)SerializationHeader.serializer);
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:74bf5aa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.sstable.metadata;
1: 
1: /**
1:  * Defines Metadata component type.
1:  */
1: public enum MetadataType
1: {
1:     /** Metadata only used for SSTable validation */
1:     VALIDATION(ValidationMetadata.serializer),
1:     /** Metadata only used at compaction */
1:     COMPACTION(CompactionMetadata.serializer),
1:     /** Metadata always keep in memory */
0:     STATS(StatsMetadata.serializer);
1: 
1:     public final IMetadataComponentSerializer<MetadataComponent> serializer;
1: 
1:     private MetadataType(IMetadataComponentSerializer<MetadataComponent> serializer)
1:     {
1:         this.serializer = serializer;
1:     }
1: }
============================================================================