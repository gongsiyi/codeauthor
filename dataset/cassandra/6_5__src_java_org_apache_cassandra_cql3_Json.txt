1:c7b02d1: /*
1:c7b02d1:  * Licensed to the Apache Software Foundation (ASF) under one
1:c7b02d1:  * or more contributor license agreements.  See the NOTICE file
1:c7b02d1:  * distributed with this work for additional information
1:c7b02d1:  * regarding copyright ownership.  The ASF licenses this file
1:c7b02d1:  * to you under the Apache License, Version 2.0 (the
1:c7b02d1:  * "License"); you may not use this file except in compliance
1:c7b02d1:  * with the License.  You may obtain a copy of the License at
2:c7b02d1:  *
1:c7b02d1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c7b02d1:  *
1:c7b02d1:  * Unless required by applicable law or agreed to in writing, software
1:c7b02d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7b02d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7b02d1:  * See the License for the specific language governing permissions and
1:c7b02d1:  * limitations under the License.
1:c7b02d1:  */
1:c7b02d1: package org.apache.cassandra.cql3;
11:c7b02d1: 
1:c7b02d1: import java.io.IOException;
1:c7b02d1: import java.util.*;
1:c7b02d1: 
1:c7b02d1: import org.apache.cassandra.config.CFMetaData;
1:c7b02d1: import org.apache.cassandra.config.ColumnDefinition;
1:cb5897f: import org.apache.cassandra.cql3.functions.Function;
1:4ed0060: import org.apache.cassandra.db.marshal.AbstractType;
1:c7b02d1: import org.apache.cassandra.db.marshal.UTF8Type;
1:c7b02d1: import org.apache.cassandra.exceptions.InvalidRequestException;
1:c7b02d1: import org.apache.cassandra.serializers.MarshalException;
1:c7b02d1: import org.codehaus.jackson.io.JsonStringEncoder;
1:c7b02d1: import org.codehaus.jackson.map.ObjectMapper;
1:c7b02d1: 
1:c7b02d1: /** Term-related classes for INSERT JSON support. */
1:c7b02d1: public class Json
5:c7b02d1: {
1:c7b02d1:     public static final ObjectMapper JSON_OBJECT_MAPPER = new ObjectMapper();
1:c7b02d1: 
1:c7b02d1:     public static final ColumnIdentifier JSON_COLUMN_ID = new ColumnIdentifier("[json]", true);
1:c7b02d1: 
1:6b1bd17:     /**
1:6b1bd17:      * Quotes string contents using standard JSON quoting.
1:6b1bd17:      */
1:6b1bd17:     public static String quoteAsJsonString(String s)
1:6b1bd17:     {
1:6b1bd17:         return new String(JsonStringEncoder.getInstance().quoteAsString(s));
1:6b1bd17:     }
1:6b1bd17: 
1:b7be198:     public static Object decodeJson(String json)
1:b7be198:     {
1:b7be198:         try
1:b7be198:         {
1:b7be198:             return JSON_OBJECT_MAPPER.readValue(json, Object.class);
1:b7be198:         }
1:b7be198:         catch (IOException exc)
1:b7be198:         {
1:b7be198:             throw new MarshalException("Error decoding JSON string: " + exc.getMessage());
1:b7be198:         }
1:b7be198:     }
1:5a4253b: 
1:c7b02d1:     public interface Raw
1:c7b02d1:     {
1:c7b02d1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames);
5:c7b02d1:     }
1:b7be198: 
1:c7b02d1:     /**
1:c7b02d1:      * Represents a literal JSON string in an INSERT JSON statement.
1:c7b02d1:      * For example: INSERT INTO mytable (key, col) JSON '{"key": 0, "col": 0}';
1:c7b02d1:      */
1:c7b02d1:     public static class Literal implements Raw
1:c7b02d1:     {
1:c7b02d1:         private final String text;
1:c7b02d1: 
1:c7b02d1:         public Literal(String text)
1:c7b02d1:         {
1:c7b02d1:             this.text = text;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames)
1:c7b02d1:         {
1:2e3727e:             return new PreparedLiteral(parseJson(text, receivers));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * Represents a marker for a JSON string in an INSERT JSON statement.
1:c7b02d1:      * For example: INSERT INTO mytable (key, col) JSON ?;
1:c7b02d1:      */
1:c7b02d1:     public static class Marker implements Raw
1:c7b02d1:     {
1:c7b02d1:         protected final int bindIndex;
1:c7b02d1: 
1:c7b02d1:         public Marker(int bindIndex)
1:c7b02d1:         {
1:c7b02d1:             this.bindIndex = bindIndex;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames)
1:c7b02d1:         {
1:c7b02d1:             boundNames.add(bindIndex, makeReceiver(metadata));
1:2e3727e:             return new PreparedMarker(bindIndex, receivers);
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         private ColumnSpecification makeReceiver(CFMetaData metadata)
1:c7b02d1:         {
1:c7b02d1:             return new ColumnSpecification(metadata.ksName, metadata.cfName, JSON_COLUMN_ID, UTF8Type.instance);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * A prepared, full set of JSON values.
1:c7b02d1:      */
1:c7b02d1:     public static abstract class Prepared
1:c7b02d1:     {
1:1291135:         public abstract Term.Raw getRawTermForColumn(ColumnDefinition def, boolean defaultUnset);
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * A prepared literal set of JSON values
1:c7b02d1:      */
1:c7b02d1:     private static class PreparedLiteral extends Prepared
1:c7b02d1:     {
1:c7b02d1:         private final Map<ColumnIdentifier, Term> columnMap;
1:c7b02d1: 
1:2e3727e:         public PreparedLiteral(Map<ColumnIdentifier, Term> columnMap)
1:c7b02d1:         {
1:c7b02d1:             this.columnMap = columnMap;
1:c7b02d1:         }
1:c7b02d1: 
1:1291135:         public Term.Raw getRawTermForColumn(ColumnDefinition def, boolean defaultUnset)
1:c7b02d1:         {
1:c7b02d1:             Term value = columnMap.get(def.name);
1:1291135:             return value == null
1:1291135:                  ? (defaultUnset ? Constants.UNSET_LITERAL : Constants.NULL_LITERAL)
1:1291135:                  : new ColumnValue(value);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      *  A prepared bind marker for a set of JSON values
1:c7b02d1:      */
1:c7b02d1:     private static class PreparedMarker extends Prepared
1:c7b02d1:     {
1:c7b02d1:         private final int bindIndex;
1:c7b02d1:         private final Collection<ColumnDefinition> columns;
1:c7b02d1: 
1:2e3727e:         public PreparedMarker(int bindIndex, Collection<ColumnDefinition> columns)
1:c7b02d1:         {
1:c7b02d1:             this.bindIndex = bindIndex;
1:c7b02d1:             this.columns = columns;
1:c7b02d1:         }
1:c7b02d1: 
1:1291135:         public RawDelayedColumnValue getRawTermForColumn(ColumnDefinition def, boolean defaultUnset)
1:c7b02d1:         {
1:1291135:             return new RawDelayedColumnValue(this, def, defaultUnset);
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * A Terminal for a single column.
1:c7b02d1:      *
1:c7b02d1:      * Note that this is intrinsically an already prepared term, but this still implements Term.Raw so that we can
1:c7b02d1:      * easily use it to create raw operations.
1:c7b02d1:      */
1:5a4253b:     private static class ColumnValue extends Term.Raw
1:c7b02d1:     {
1:c7b02d1:         private final Term term;
1:c7b02d1: 
1:c7b02d1:         public ColumnValue(Term term)
1:c7b02d1:         {
1:c7b02d1:             this.term = term;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:c7b02d1:         {
1:c7b02d1:             return term;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:c7b02d1:         {
1:c7b02d1:             return TestResult.NOT_ASSIGNABLE;
1:c7b02d1:         }
1:5a4253b: 
1:4ed0060:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:4ed0060:         {
1:4ed0060:             return null;
1:4ed0060:         }
1:4ed0060: 
1:5a4253b:         public String getText()
1:5a4253b:         {
1:5a4253b:             return term.toString();
1:5a4253b:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:5a4253b:      * A Raw term for a single column. Like ColumnValue, this is intrinsically already prepared.
1:c7b02d1:      */
1:5a4253b:     private static class RawDelayedColumnValue extends Term.Raw
1:c7b02d1:     {
1:c7b02d1:         private final PreparedMarker marker;
1:c7b02d1:         private final ColumnDefinition column;
1:1291135:         private final boolean defaultUnset;
1:c7b02d1: 
1:1291135:         public RawDelayedColumnValue(PreparedMarker prepared, ColumnDefinition column, boolean defaultUnset)
1:c7b02d1:         {
1:c7b02d1:             this.marker = prepared;
1:c7b02d1:             this.column = column;
1:1291135:             this.defaultUnset = defaultUnset;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:c7b02d1:         {
1:1291135:             return new DelayedColumnValue(marker, column, defaultUnset);
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:c7b02d1:         {
1:c7b02d1:             return TestResult.WEAKLY_ASSIGNABLE;
1:4ed0060:         }
1:4ed0060: 
1:4ed0060:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:4ed0060:         {
1:4ed0060:             return null;
1:c7b02d1:         }
1:c7b02d1: 
1:5a4253b:         public String getText()
1:5a4253b:         {
1:5a4253b:             return marker.toString();
1:5a4253b:         }
1:5a4253b:     }
1:5a4253b: 
1:5a4253b:     /**
1:5a4253b:      * A NonTerminal for a single column. As with {@code ColumnValue}, this is intrinsically a prepared.
1:5a4253b:      */
1:5a4253b:     private static class DelayedColumnValue extends Term.NonTerminal
1:5a4253b:     {
1:5a4253b:         private final PreparedMarker marker;
1:5a4253b:         private final ColumnDefinition column;
1:1291135:         private final boolean defaultUnset;
1:5a4253b: 
1:1291135:         public DelayedColumnValue(PreparedMarker prepared, ColumnDefinition column, boolean defaultUnset)
1:5a4253b:         {
1:5a4253b:             this.marker = prepared;
1:5a4253b:             this.column = column;
1:1291135:             this.defaultUnset = defaultUnset;
1:5a4253b:         }
1:5a4253b: 
1:c7b02d1:         @Override
1:c7b02d1:         public void collectMarkerSpecification(VariableSpecifications boundNames)
1:c7b02d1:         {
1:c7b02d1:             // We've already collected what we should (and in practice this method is never called).
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public boolean containsBindMarker()
1:c7b02d1:         {
1:c7b02d1:             return true;
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         @Override
1:c7b02d1:         public Terminal bind(QueryOptions options) throws InvalidRequestException
1:c7b02d1:         {
1:2cbd776:             Term term = options.getJsonColumnValue(marker.bindIndex, column.name, marker.columns);
1:1291135:             return term == null
1:1291135:                  ? (defaultUnset ? Constants.UNSET_VALUE : null)
1:1291135:                  : term.bind(options);
1:c7b02d1:         }
1:c7b02d1: 
1:cb5897f:         @Override
1:89464ea:         public void addFunctionsTo(List<Function> functions)
1:c7b02d1:         {
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * Given a JSON string, return a map of columns to their values for the insert.
1:c7b02d1:      */
1:2cbd776:     public static Map<ColumnIdentifier, Term> parseJson(String jsonString, Collection<ColumnDefinition> expectedReceivers)
1:c7b02d1:     {
1:c7b02d1:         try
1:c7b02d1:         {
1:c7b02d1:             Map<String, Object> valueMap = JSON_OBJECT_MAPPER.readValue(jsonString, Map.class);
1:c7b02d1: 
1:c7b02d1:             if (valueMap == null)
2:c7b02d1:                 throw new InvalidRequestException("Got null for INSERT JSON values");
1:c7b02d1: 
1:c7b02d1:             handleCaseSensitivity(valueMap);
1:c7b02d1: 
1:c7b02d1:             Map<ColumnIdentifier, Term> columnMap = new HashMap<>(expectedReceivers.size());
1:c7b02d1:             for (ColumnSpecification spec : expectedReceivers)
1:c7b02d1:             {
1:1291135:                 // We explicitely test containsKey() because the value itself can be null, and we want to distinguish an
1:1291135:                 // explicit null value from no value
1:1291135:                 if (!valueMap.containsKey(spec.name.toString()))
1:1291135:                     continue;
1:1291135: 
1:c7b02d1:                 Object parsedJsonObject = valueMap.remove(spec.name.toString());
1:c7b02d1:                 if (parsedJsonObject == null)
1:c7b02d1:                 {
1:1291135:                     // This is an explicit user null
1:1291135:                     columnMap.put(spec.name, Constants.NULL_VALUE);
1:c7b02d1:                 }
1:c7b02d1:                 else
1:c7b02d1:                 {
1:c7b02d1:                     try
1:c7b02d1:                     {
1:c7b02d1:                         columnMap.put(spec.name, spec.type.fromJSONObject(parsedJsonObject));
1:c7b02d1:                     }
1:c7b02d1:                     catch(MarshalException exc)
1:c7b02d1:                     {
1:c7b02d1:                         throw new InvalidRequestException(String.format("Error decoding JSON value for %s: %s", spec.name, exc.getMessage()));
1:c7b02d1:                     }
1:c7b02d1:                 }
1:c7b02d1:             }
1:c7b02d1: 
1:c7b02d1:             if (!valueMap.isEmpty())
1:c7b02d1:             {
1:c7b02d1:                 throw new InvalidRequestException(String.format(
1:c7b02d1:                         "JSON values map contains unrecognized column: %s", valueMap.keySet().iterator().next()));
1:c7b02d1:             }
1:c7b02d1: 
1:c7b02d1:             return columnMap;
1:c7b02d1:         }
1:c7b02d1:         catch (IOException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new InvalidRequestException(String.format("Could not decode JSON string as a map: %s. (String was: %s)", exc.toString(), jsonString));
1:c7b02d1:         }
1:c7b02d1:         catch (MarshalException exc)
1:c7b02d1:         {
1:c7b02d1:             throw new InvalidRequestException(exc.getMessage());
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     /**
1:c7b02d1:      * Handles unquoting and case-insensitivity in map keys.
1:c7b02d1:      */
1:c7b02d1:     public static void handleCaseSensitivity(Map<String, Object> valueMap)
1:c7b02d1:     {
1:c7b02d1:         for (String mapKey : new ArrayList<>(valueMap.keySet()))
1:c7b02d1:         {
1:c7b02d1:             // if it's surrounded by quotes, remove them and preserve the case
1:c7b02d1:             if (mapKey.startsWith("\"") && mapKey.endsWith("\""))
1:c7b02d1:             {
1:c7b02d1:                 valueMap.put(mapKey.substring(1, mapKey.length() - 1), valueMap.remove(mapKey));
1:c7b02d1:                 continue;
1:c7b02d1:             }
1:c7b02d1: 
1:c7b02d1:             // otherwise, lowercase it if needed
1:c7b02d1:             String lowered = mapKey.toLowerCase(Locale.US);
1:c7b02d1:             if (!mapKey.equals(lowered))
1:c7b02d1:                 valueMap.put(lowered, valueMap.remove(mapKey));
1:c7b02d1:         }
1:c7b02d1:     }
1:c7b02d1: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:1291135
/////////////////////////////////////////////////////////////////////////
1:         public abstract Term.Raw getRawTermForColumn(ColumnDefinition def, boolean defaultUnset);
/////////////////////////////////////////////////////////////////////////
1:         public Term.Raw getRawTermForColumn(ColumnDefinition def, boolean defaultUnset)
1:             return value == null
1:                  ? (defaultUnset ? Constants.UNSET_LITERAL : Constants.NULL_LITERAL)
1:                  : new ColumnValue(value);
/////////////////////////////////////////////////////////////////////////
1:         public RawDelayedColumnValue getRawTermForColumn(ColumnDefinition def, boolean defaultUnset)
1:             return new RawDelayedColumnValue(this, def, defaultUnset);
/////////////////////////////////////////////////////////////////////////
1:         private final boolean defaultUnset;
1:         public RawDelayedColumnValue(PreparedMarker prepared, ColumnDefinition column, boolean defaultUnset)
1:             this.defaultUnset = defaultUnset;
1:             return new DelayedColumnValue(marker, column, defaultUnset);
/////////////////////////////////////////////////////////////////////////
1:         private final boolean defaultUnset;
1:         public DelayedColumnValue(PreparedMarker prepared, ColumnDefinition column, boolean defaultUnset)
1:             this.defaultUnset = defaultUnset;
/////////////////////////////////////////////////////////////////////////
1:             return term == null
1:                  ? (defaultUnset ? Constants.UNSET_VALUE : null)
1:                  : term.bind(options);
/////////////////////////////////////////////////////////////////////////
1:                 // We explicitely test containsKey() because the value itself can be null, and we want to distinguish an
1:                 // explicit null value from no value
1:                 if (!valueMap.containsKey(spec.name.toString()))
1:                     continue;
1: 
1:                     // This is an explicit user null
1:                     columnMap.put(spec.name, Constants.NULL_VALUE);
commit:4ed0060
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.AbstractType;
/////////////////////////////////////////////////////////////////////////
1:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:         {
1:             return null;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         public AbstractType<?> getExactTypeIfKnown(String keyspace)
1:         {
1:             return null;
1:         }
1: 
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Term term = options.getJsonColumnValue(marker.bindIndex, column.name, marker.columns);
/////////////////////////////////////////////////////////////////////////
1:     public static Map<ColumnIdentifier, Term> parseJson(String jsonString, Collection<ColumnDefinition> expectedReceivers)
commit:31be903
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             Term term = options.getJsonColumnValue(marker.bindIndex, column.name, marker.columns);
/////////////////////////////////////////////////////////////////////////
0:     public static Map<ColumnIdentifier, Term> parseJson(String jsonString, Collection<ColumnDefinition> expectedReceivers)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:087264f
/////////////////////////////////////////////////////////////////////////
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:89464ea
/////////////////////////////////////////////////////////////////////////
1:         public void addFunctionsTo(List<Function> functions)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:9b5af91
commit:6b1bd17
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Quotes string contents using standard JSON quoting.
1:      */
1:     public static String quoteAsJsonString(String s)
1:     {
1:         return new String(JsonStringEncoder.getInstance().quoteAsString(s));
1:     }
1: 
commit:5a4253b
/////////////////////////////////////////////////////////////////////////
0:         public RawDelayedColumnValue getRawTermForColumn(ColumnDefinition def)
0:             return new RawDelayedColumnValue(this, def);
/////////////////////////////////////////////////////////////////////////
1:     private static class ColumnValue extends Term.Raw
/////////////////////////////////////////////////////////////////////////
1: 
1:         public String getText()
1:         {
1:             return term.toString();
1:         }
1:      * A Raw term for a single column. Like ColumnValue, this is intrinsically already prepared.
1:     private static class RawDelayedColumnValue extends Term.Raw
0:         public RawDelayedColumnValue(PreparedMarker prepared, ColumnDefinition column)
/////////////////////////////////////////////////////////////////////////
0:             return new DelayedColumnValue(marker, column);
/////////////////////////////////////////////////////////////////////////
1:         public String getText()
1:         {
1:             return marker.toString();
1:         }
1:     }
1: 
1:     /**
1:      * A NonTerminal for a single column. As with {@code ColumnValue}, this is intrinsically a prepared.
1:      */
1:     private static class DelayedColumnValue extends Term.NonTerminal
1:     {
1:         private final PreparedMarker marker;
1:         private final ColumnDefinition column;
1: 
0:         public DelayedColumnValue(PreparedMarker prepared, ColumnDefinition column)
1:         {
1:             this.marker = prepared;
1:             this.column = column;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:b7be198
/////////////////////////////////////////////////////////////////////////
1:     public static Object decodeJson(String json)
1:     {
1:         try
1:         {
1:             return JSON_OBJECT_MAPPER.readValue(json, Object.class);
1:         }
1:         catch (IOException exc)
1:         {
1:             throw new MarshalException("Error decoding JSON string: " + exc.getMessage());
1:         }
1:     }
1: 
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3;
1: 
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.serializers.MarshalException;
1: import org.codehaus.jackson.io.JsonStringEncoder;
1: import org.codehaus.jackson.map.ObjectMapper;
1: 
1: import java.io.IOException;
0: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: /** Term-related classes for INSERT JSON support. */
1: public class Json
1: {
1:     public static final ObjectMapper JSON_OBJECT_MAPPER = new ObjectMapper();
1: 
0:     public static final JsonStringEncoder JSON_STRING_ENCODER = new JsonStringEncoder();
1: 
1:     public static final ColumnIdentifier JSON_COLUMN_ID = new ColumnIdentifier("[json]", true);
1: 
1:     public interface Raw
1:     {
1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames);
1:     }
1: 
1:     /**
1:      * Represents a literal JSON string in an INSERT JSON statement.
1:      * For example: INSERT INTO mytable (key, col) JSON '{"key": 0, "col": 0}';
1:      */
1:     public static class Literal implements Raw
1:     {
1:         private final String text;
1: 
1:         public Literal(String text)
1:         {
1:             this.text = text;
1:         }
1: 
1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames)
1:         {
0:             return new PreparedLiteral(metadata.ksName, parseJson(text, receivers));
1:         }
1:     }
1: 
1:     /**
1:      * Represents a marker for a JSON string in an INSERT JSON statement.
1:      * For example: INSERT INTO mytable (key, col) JSON ?;
1:      */
1:     public static class Marker implements Raw
1:     {
1:         protected final int bindIndex;
1: 
1:         public Marker(int bindIndex)
1:         {
1:             this.bindIndex = bindIndex;
1:         }
1: 
1:         public Prepared prepareAndCollectMarkers(CFMetaData metadata, Collection<ColumnDefinition> receivers, VariableSpecifications boundNames)
1:         {
1:             boundNames.add(bindIndex, makeReceiver(metadata));
0:             return new PreparedMarker(metadata.ksName, bindIndex, receivers);
1:         }
1: 
1:         private ColumnSpecification makeReceiver(CFMetaData metadata)
1:         {
1:             return new ColumnSpecification(metadata.ksName, metadata.cfName, JSON_COLUMN_ID, UTF8Type.instance);
1:         }
1:     }
1: 
1:     /**
1:      * A prepared, full set of JSON values.
1:      */
1:     public static abstract class Prepared
1:     {
0:         private final String keyspace;
1: 
0:         protected Prepared(String keyspace)
1:         {
0:             this.keyspace = keyspace;
1:         }
1: 
0:         protected abstract Term.Raw getRawTermForColumn(ColumnDefinition def);
1: 
0:         public Term getPrimaryKeyValueForColumn(ColumnDefinition def)
1:         {
0:             // Note that we know we don't have to call collectMarkerSpecification since it has already been collected
0:             return getRawTermForColumn(def).prepare(keyspace, def);
1:         }
1: 
0:         public Operation getSetOperationForColumn(ColumnDefinition def)
1:         {
0:             // Note that we know we don't have to call collectMarkerSpecification on the operation since we have
0:             // already collected all we need.
0:             return new Operation.SetValue(getRawTermForColumn(def)).prepare(keyspace, def);
1:         }
1:     }
1: 
1:     /**
1:      * A prepared literal set of JSON values
1:      */
1:     private static class PreparedLiteral extends Prepared
1:     {
1:         private final Map<ColumnIdentifier, Term> columnMap;
1: 
0:         public PreparedLiteral(String keyspace, Map<ColumnIdentifier, Term> columnMap)
1:         {
0:             super(keyspace);
1:             this.columnMap = columnMap;
1:         }
1: 
0:         protected Term.Raw getRawTermForColumn(ColumnDefinition def)
1:         {
1:             Term value = columnMap.get(def.name);
0:             return value == null ? Constants.NULL_LITERAL : new ColumnValue(value);
1:         }
1:     }
1: 
1:     /**
1:      *  A prepared bind marker for a set of JSON values
1:      */
1:     private static class PreparedMarker extends Prepared
1:     {
1:         private final int bindIndex;
1:         private final Collection<ColumnDefinition> columns;
1: 
0:         private Map<ColumnIdentifier, Term> columnMap;
1: 
0:         public PreparedMarker(String keyspace, int bindIndex, Collection<ColumnDefinition> columns)
1:         {
0:             super(keyspace);
1:             this.bindIndex = bindIndex;
1:             this.columns = columns;
1:         }
1: 
0:         protected DelayedColumnValue getRawTermForColumn(ColumnDefinition def)
1:         {
0:             return new DelayedColumnValue(this, def);
1:         }
1: 
0:         public void bind(QueryOptions options) throws InvalidRequestException
1:         {
0:             // this will be called once per column, so avoid duplicating work
0:             if (columnMap != null)
0:                 return;
1: 
0:             ByteBuffer value = options.getValues().get(bindIndex);
0:             if (value == null)
1:                 throw new InvalidRequestException("Got null for INSERT JSON values");
1: 
0:             columnMap = parseJson(UTF8Type.instance.getSerializer().deserialize(value), columns);
1:         }
1: 
0:         public Term getValue(ColumnDefinition def)
1:         {
0:             return columnMap.get(def.name);
1:         }
1:     }
1: 
1:     /**
1:      * A Terminal for a single column.
1:      *
1:      * Note that this is intrinsically an already prepared term, but this still implements Term.Raw so that we can
1:      * easily use it to create raw operations.
1:      */
0:     private static class ColumnValue implements Term.Raw
1:     {
1:         private final Term term;
1: 
1:         public ColumnValue(Term term)
1:         {
1:             this.term = term;
1:         }
1: 
1:         @Override
1:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:         {
1:             return term;
1:         }
1: 
1:         @Override
1:         public TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:         {
1:             return TestResult.NOT_ASSIGNABLE;
1:         }
1:     }
1: 
1:     /**
0:      * A NonTerminal for a single column.
1:      *
0:      * As with {@code ColumnValue}, this is intrinsically a prepared term but implements Terms.Raw for convenience.
1:      */
0:     private static class DelayedColumnValue extends Term.NonTerminal implements Term.Raw
1:     {
1:         private final PreparedMarker marker;
1:         private final ColumnDefinition column;
1: 
0:         public DelayedColumnValue(PreparedMarker prepared, ColumnDefinition column)
1:         {
1:             this.marker = prepared;
1:             this.column = column;
1:         }
1: 
1:         @Override
1:         public Term prepare(String keyspace, ColumnSpecification receiver) throws InvalidRequestException
1:         {
0:             return this;
1:         }
1: 
1:         @Override
1:         public TestResult testAssignment(String keyspace, ColumnSpecification receiver)
1:         {
1:             return TestResult.WEAKLY_ASSIGNABLE;
1:         }
1: 
1:         @Override
1:         public void collectMarkerSpecification(VariableSpecifications boundNames)
1:         {
1:             // We've already collected what we should (and in practice this method is never called).
1:         }
1: 
1:         @Override
1:         public boolean containsBindMarker()
1:         {
1:             return true;
1:         }
1: 
1:         @Override
1:         public Terminal bind(QueryOptions options) throws InvalidRequestException
1:         {
0:             marker.bind(options);
0:             Term term = marker.getValue(column);
0:             return term == null ? null : term.bind(options);
1:         }
1:     }
1: 
1:     /**
1:      * Given a JSON string, return a map of columns to their values for the insert.
1:      */
0:     private static Map<ColumnIdentifier, Term> parseJson(String jsonString, Collection<ColumnDefinition> expectedReceivers)
1:     {
1:         try
1:         {
1:             Map<String, Object> valueMap = JSON_OBJECT_MAPPER.readValue(jsonString, Map.class);
1: 
1:             if (valueMap == null)
1:                 throw new InvalidRequestException("Got null for INSERT JSON values");
1: 
1:             handleCaseSensitivity(valueMap);
1: 
1:             Map<ColumnIdentifier, Term> columnMap = new HashMap<>(expectedReceivers.size());
1:             for (ColumnSpecification spec : expectedReceivers)
1:             {
1:                 Object parsedJsonObject = valueMap.remove(spec.name.toString());
1:                 if (parsedJsonObject == null)
1:                 {
0:                     columnMap.put(spec.name, null);
1:                 }
1:                 else
1:                 {
1:                     try
1:                     {
1:                         columnMap.put(spec.name, spec.type.fromJSONObject(parsedJsonObject));
1:                     }
1:                     catch(MarshalException exc)
1:                     {
1:                         throw new InvalidRequestException(String.format("Error decoding JSON value for %s: %s", spec.name, exc.getMessage()));
1:                     }
1:                 }
1:             }
1: 
1:             if (!valueMap.isEmpty())
1:             {
1:                 throw new InvalidRequestException(String.format(
1:                         "JSON values map contains unrecognized column: %s", valueMap.keySet().iterator().next()));
1:             }
1: 
1:             return columnMap;
1:         }
1:         catch (IOException exc)
1:         {
1:             throw new InvalidRequestException(String.format("Could not decode JSON string as a map: %s. (String was: %s)", exc.toString(), jsonString));
1:         }
1:         catch (MarshalException exc)
1:         {
1:             throw new InvalidRequestException(exc.getMessage());
1:         }
1:     }
1: 
1:     /**
1:      * Handles unquoting and case-insensitivity in map keys.
1:      */
1:     public static void handleCaseSensitivity(Map<String, Object> valueMap)
1:     {
1:         for (String mapKey : new ArrayList<>(valueMap.keySet()))
1:         {
1:             // if it's surrounded by quotes, remove them and preserve the case
1:             if (mapKey.startsWith("\"") && mapKey.endsWith("\""))
1:             {
1:                 valueMap.put(mapKey.substring(1, mapKey.length() - 1), valueMap.remove(mapKey));
1:                 continue;
1:             }
1: 
1:             // otherwise, lowercase it if needed
1:             String lowered = mapKey.toLowerCase(Locale.US);
1:             if (!mapKey.equals(lowered))
1:                 valueMap.put(lowered, valueMap.remove(mapKey));
1:         }
1:     }
1: }
author:blerer
-------------------------------------------------------------------------------
commit:2e3727e
/////////////////////////////////////////////////////////////////////////
1:             return new PreparedLiteral(parseJson(text, receivers));
/////////////////////////////////////////////////////////////////////////
1:             return new PreparedMarker(bindIndex, receivers);
/////////////////////////////////////////////////////////////////////////
0:         public abstract Term.Raw getRawTermForColumn(ColumnDefinition def);
/////////////////////////////////////////////////////////////////////////
1:         public PreparedLiteral(Map<ColumnIdentifier, Term> columnMap)
0:         public Term.Raw getRawTermForColumn(ColumnDefinition def)
/////////////////////////////////////////////////////////////////////////
1:         public PreparedMarker(int bindIndex, Collection<ColumnDefinition> columns)
0:         public DelayedColumnValue getRawTermForColumn(ColumnDefinition def)
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.nio.ByteBuffer;
0: import java.util.*;
0: 
1: import org.apache.cassandra.cql3.functions.Function;
/////////////////////////////////////////////////////////////////////////
0: 
1:         @Override
0:         public Iterable<Function> getFunctions()
0:         {
0:             return Collections.emptyList();
0:         }
============================================================================