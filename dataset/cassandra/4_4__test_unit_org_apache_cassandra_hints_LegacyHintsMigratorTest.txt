1:96d41f0: /*
1:96d41f0:  * Licensed to the Apache Software Foundation (ASF) under one
1:96d41f0:  * or more contributor license agreements.  See the NOTICE file
1:96d41f0:  * distributed with this work for additional information
1:96d41f0:  * regarding copyright ownership.  The ASF licenses this file
1:96d41f0:  * to you under the Apache License, Version 2.0 (the
1:96d41f0:  * "License"); you may not use this file except in compliance
1:96d41f0:  * with the License.  You may obtain a copy of the License at
1:96d41f0:  *
1:96d41f0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:96d41f0:  *
1:96d41f0:  * Unless required by applicable law or agreed to in writing, software
1:96d41f0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:96d41f0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:96d41f0:  * See the License for the specific language governing permissions and
1:96d41f0:  * limitations under the License.
1:96d41f0:  */
1:96d41f0: package org.apache.cassandra.hints;
1:96d41f0: 
1:96d41f0: import java.io.File;
1:96d41f0: import java.io.IOException;
1:96d41f0: import java.nio.ByteBuffer;
1:96d41f0: import java.nio.file.Files;
1:96d41f0: import java.util.*;
1:96d41f0: 
1:96d41f0: import org.junit.BeforeClass;
1:96d41f0: import org.junit.Test;
1:96d41f0: 
1:96d41f0: import org.apache.cassandra.SchemaLoader;
1:2683806: import org.apache.cassandra.Util;
1:96d41f0: import org.apache.cassandra.config.CFMetaData;
1:96d41f0: import org.apache.cassandra.config.Schema;
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:96d41f0: import org.apache.cassandra.db.*;
1:96d41f0: import org.apache.cassandra.db.marshal.UUIDType;
1:96d41f0: import org.apache.cassandra.db.partitions.PartitionUpdate;
1:96d41f0: import org.apache.cassandra.db.rows.BTreeRow;
1:96d41f0: import org.apache.cassandra.db.rows.BufferCell;
1:96d41f0: import org.apache.cassandra.db.rows.Cell;
1:96d41f0: import org.apache.cassandra.net.MessagingService;
1:96d41f0: import org.apache.cassandra.schema.KeyspaceParams;
1:96d41f0: import org.apache.cassandra.utils.FBUtilities;
1:96d41f0: import org.apache.cassandra.utils.UUIDGen;
1:96d41f0: 
1:96d41f0: import static junit.framework.Assert.assertEquals;
1:96d41f0: import static junit.framework.Assert.assertNotNull;
1:96d41f0: import static junit.framework.Assert.assertTrue;
1:96d41f0: 
1:96d41f0: import static org.apache.cassandra.hints.HintsTestUtil.assertMutationsEqual;
1:96d41f0: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1:96d41f0: 
1:96d41f0: // TODO: test split into several files
1:96d41f0: @SuppressWarnings("deprecation")
1:96d41f0: public class LegacyHintsMigratorTest
1:96d41f0: {
1:96d41f0:     private static final String KEYSPACE = "legacy_hints_migrator_test";
1:96d41f0:     private static final String TABLE = "table";
1:96d41f0: 
1:96d41f0:     @BeforeClass
1:96d41f0:     public static void defineSchema()
1:96d41f0:     {
1:96d41f0:         SchemaLoader.prepareServer();
1:96d41f0:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testNothingToMigrate() throws IOException
1:96d41f0:     {
1:96d41f0:         File directory = Files.createTempDirectory(null).toFile();
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             testNothingToMigrate(directory);
1:96d41f0:         }
1:96d41f0:         finally
1:96d41f0:         {
1:96d41f0:             directory.deleteOnExit();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void testNothingToMigrate(File directory)
1:96d41f0:     {
1:96d41f0:         // truncate system.hints to enseure nothing inside
1:9797511:         Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).truncateBlocking();
1:96d41f0:         new LegacyHintsMigrator(directory, 128 * 1024 * 1024).migrate();
1:c20566f:         HintsCatalog catalog = HintsCatalog.load(directory, HintsService.EMPTY_PARAMS);
1:96d41f0:         assertEquals(0, catalog.stores().count());
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     @Test
1:96d41f0:     public void testMigrationIsComplete() throws IOException
1:96d41f0:     {
1:96d41f0:         File directory = Files.createTempDirectory(null).toFile();
1:96d41f0:         try
1:96d41f0:         {
1:96d41f0:             testMigrationIsComplete(directory);
1:96d41f0:         }
1:96d41f0:         finally
1:96d41f0:         {
1:96d41f0:             directory.deleteOnExit();
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static void testMigrationIsComplete(File directory)
1:96d41f0:     {
1:96d41f0:         long timestamp = System.currentTimeMillis();
1:96d41f0: 
1:96d41f0:         // write 100 mutations for each of the 10 generated endpoints
1:96d41f0:         Map<UUID, Queue<Mutation>> mutations = new HashMap<>();
1:96d41f0:         for (int i = 0; i < 10; i++)
1:96d41f0:         {
1:96d41f0:             UUID hostId = UUID.randomUUID();
1:96d41f0:             Queue<Mutation> queue = new LinkedList<>();
1:96d41f0:             mutations.put(hostId, queue);
1:96d41f0: 
1:96d41f0:             for (int j = 0; j < 100; j++)
1:96d41f0:             {
1:96d41f0:                 Mutation mutation = createMutation(j, timestamp + j);
1:96d41f0:                 queue.offer(mutation);
1:96d41f0:                 Mutation legacyHint = createLegacyHint(mutation, timestamp, hostId);
1:96d41f0:                 legacyHint.applyUnsafe();
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0: 
1:96d41f0:         // run the migration
1:96d41f0:         new LegacyHintsMigrator(directory, 128 * 1024 * 1024).migrate();
1:96d41f0: 
1:96d41f0:         // validate that the hints table is truncated now
1:9797511:         assertTrue(Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).isEmpty());
1:96d41f0: 
1:c20566f:         HintsCatalog catalog = HintsCatalog.load(directory, HintsService.EMPTY_PARAMS);
1:96d41f0: 
1:96d41f0:         // assert that we've correctly loaded 10 hints stores
1:96d41f0:         assertEquals(10, catalog.stores().count());
1:96d41f0: 
1:96d41f0:         // for each of the 10 stores, make sure the mutations have been migrated correctly
1:96d41f0:         for (Map.Entry<UUID, Queue<Mutation>> entry : mutations.entrySet())
1:96d41f0:         {
1:96d41f0:             HintsStore store = catalog.get(entry.getKey());
1:96d41f0:             assertNotNull(store);
1:96d41f0: 
1:96d41f0:             HintsDescriptor descriptor = store.poll();
1:96d41f0:             assertNotNull(descriptor);
1:96d41f0: 
1:96d41f0:             // read all the hints
1:96d41f0:             Queue<Hint> actualHints = new LinkedList<>();
1:96d41f0:             try (HintsReader reader = HintsReader.open(new File(directory, descriptor.fileName())))
1:96d41f0:             {
1:96d41f0:                 for (HintsReader.Page page : reader)
1:96d41f0:                     page.hintsIterator().forEachRemaining(actualHints::offer);
1:96d41f0:             }
1:96d41f0: 
1:96d41f0:             // assert the size matches
1:96d41f0:             assertEquals(100, actualHints.size());
1:96d41f0: 
1:96d41f0:             // compare expected hints to actual hints
1:96d41f0:             for (int i = 0; i < 100; i++)
1:96d41f0:             {
1:96d41f0:                 Hint hint = actualHints.poll();
1:96d41f0:                 Mutation mutation = entry.getValue().poll();
1:96d41f0:                 int ttl = mutation.smallestGCGS();
1:96d41f0: 
1:96d41f0:                 assertEquals(timestamp, hint.creationTime);
1:96d41f0:                 assertEquals(ttl, hint.gcgs);
1:2683806:                 assertTrue(mutation + " != " + hint.mutation, Util.sameContent(mutation, hint.mutation));
1:96d41f0:             }
1:96d41f0:         }
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     // legacy hint mutation creation code, copied more or less verbatim from the previous implementation
1:96d41f0:     private static Mutation createLegacyHint(Mutation mutation, long now, UUID targetId)
1:96d41f0:     {
1:96d41f0:         int version = MessagingService.VERSION_21;
1:96d41f0:         int ttl = mutation.smallestGCGS();
1:96d41f0:         UUID hintId = UUIDGen.getTimeUUID();
1:96d41f0: 
1:96d41f0:         ByteBuffer key = UUIDType.instance.decompose(targetId);
1:96d41f0:         Clustering clustering = SystemKeyspace.LegacyHints.comparator.make(hintId, version);
1:96d41f0:         ByteBuffer value = ByteBuffer.wrap(FBUtilities.serialize(mutation, Mutation.serializer, version));
1:96d41f0:         Cell cell = BufferCell.expiring(SystemKeyspace.LegacyHints.compactValueColumn(),
1:96d41f0:                                         now,
1:96d41f0:                                         ttl,
1:96d41f0:                                         FBUtilities.nowInSeconds(),
1:96d41f0:                                         value);
1:96d41f0:         return new Mutation(PartitionUpdate.singleRowUpdate(SystemKeyspace.LegacyHints,
1:96d41f0:                                                             key,
1:96d41f0:                                                             BTreeRow.singleCellRow(clustering, cell)));
1:96d41f0:     }
1:96d41f0: 
1:96d41f0:     private static Mutation createMutation(int index, long timestamp)
1:96d41f0:     {
1:96d41f0:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:96d41f0:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:96d41f0:                .clustering(bytes(index))
1:96d41f0:                .add("val", bytes(index))
1:96d41f0:                .build();
1:96d41f0:     }
1:96d41f0: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:         Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).truncateBlocking();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).isEmpty());
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:2683806
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.Util;
/////////////////////////////////////////////////////////////////////////
1:                 assertTrue(mutation + " != " + hint.mutation, Util.sameContent(mutation, hint.mutation));
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:c20566f
/////////////////////////////////////////////////////////////////////////
1:         HintsCatalog catalog = HintsCatalog.load(directory, HintsService.EMPTY_PARAMS);
/////////////////////////////////////////////////////////////////////////
1:         HintsCatalog catalog = HintsCatalog.load(directory, HintsService.EMPTY_PARAMS);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:96d41f0
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.hints;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.nio.file.Files;
1: import java.util.*;
1: 
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.*;
1: import org.apache.cassandra.db.marshal.UUIDType;
1: import org.apache.cassandra.db.partitions.PartitionUpdate;
1: import org.apache.cassandra.db.rows.BTreeRow;
1: import org.apache.cassandra.db.rows.BufferCell;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.utils.FBUtilities;
1: import org.apache.cassandra.utils.UUIDGen;
1: 
1: import static junit.framework.Assert.assertEquals;
1: import static junit.framework.Assert.assertNotNull;
1: import static junit.framework.Assert.assertTrue;
1: 
1: import static org.apache.cassandra.hints.HintsTestUtil.assertMutationsEqual;
1: import static org.apache.cassandra.utils.ByteBufferUtil.bytes;
1: 
1: // TODO: test split into several files
1: @SuppressWarnings("deprecation")
1: public class LegacyHintsMigratorTest
1: {
1:     private static final String KEYSPACE = "legacy_hints_migrator_test";
1:     private static final String TABLE = "table";
1: 
1:     @BeforeClass
1:     public static void defineSchema()
1:     {
1:         SchemaLoader.prepareServer();
1:         SchemaLoader.createKeyspace(KEYSPACE, KeyspaceParams.simple(1), SchemaLoader.standardCFMD(KEYSPACE, TABLE));
1:     }
1: 
1:     @Test
1:     public void testNothingToMigrate() throws IOException
1:     {
1:         File directory = Files.createTempDirectory(null).toFile();
1:         try
1:         {
1:             testNothingToMigrate(directory);
1:         }
1:         finally
1:         {
1:             directory.deleteOnExit();
1:         }
1:     }
1: 
1:     private static void testNothingToMigrate(File directory)
1:     {
1:         // truncate system.hints to enseure nothing inside
0:         Keyspace.open(SystemKeyspace.NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).truncateBlocking();
1:         new LegacyHintsMigrator(directory, 128 * 1024 * 1024).migrate();
0:         HintsCatalog catalog = HintsCatalog.load(directory);
1:         assertEquals(0, catalog.stores().count());
1:     }
1: 
1:     @Test
1:     public void testMigrationIsComplete() throws IOException
1:     {
1:         File directory = Files.createTempDirectory(null).toFile();
1:         try
1:         {
1:             testMigrationIsComplete(directory);
1:         }
1:         finally
1:         {
1:             directory.deleteOnExit();
1:         }
1:     }
1: 
1:     private static void testMigrationIsComplete(File directory)
1:     {
1:         long timestamp = System.currentTimeMillis();
1: 
1:         // write 100 mutations for each of the 10 generated endpoints
1:         Map<UUID, Queue<Mutation>> mutations = new HashMap<>();
1:         for (int i = 0; i < 10; i++)
1:         {
1:             UUID hostId = UUID.randomUUID();
1:             Queue<Mutation> queue = new LinkedList<>();
1:             mutations.put(hostId, queue);
1: 
1:             for (int j = 0; j < 100; j++)
1:             {
1:                 Mutation mutation = createMutation(j, timestamp + j);
1:                 queue.offer(mutation);
1:                 Mutation legacyHint = createLegacyHint(mutation, timestamp, hostId);
1:                 legacyHint.applyUnsafe();
1:             }
1:         }
1: 
1:         // run the migration
1:         new LegacyHintsMigrator(directory, 128 * 1024 * 1024).migrate();
1: 
1:         // validate that the hints table is truncated now
0:         assertTrue(Keyspace.open(SystemKeyspace.NAME).getColumnFamilyStore(SystemKeyspace.LEGACY_HINTS).isEmpty());
1: 
0:         HintsCatalog catalog = HintsCatalog.load(directory);
1: 
1:         // assert that we've correctly loaded 10 hints stores
1:         assertEquals(10, catalog.stores().count());
1: 
1:         // for each of the 10 stores, make sure the mutations have been migrated correctly
1:         for (Map.Entry<UUID, Queue<Mutation>> entry : mutations.entrySet())
1:         {
1:             HintsStore store = catalog.get(entry.getKey());
1:             assertNotNull(store);
1: 
1:             HintsDescriptor descriptor = store.poll();
1:             assertNotNull(descriptor);
1: 
1:             // read all the hints
1:             Queue<Hint> actualHints = new LinkedList<>();
1:             try (HintsReader reader = HintsReader.open(new File(directory, descriptor.fileName())))
1:             {
1:                 for (HintsReader.Page page : reader)
1:                     page.hintsIterator().forEachRemaining(actualHints::offer);
1:             }
1: 
1:             // assert the size matches
1:             assertEquals(100, actualHints.size());
1: 
1:             // compare expected hints to actual hints
1:             for (int i = 0; i < 100; i++)
1:             {
1:                 Hint hint = actualHints.poll();
1:                 Mutation mutation = entry.getValue().poll();
1:                 int ttl = mutation.smallestGCGS();
1: 
1:                 assertEquals(timestamp, hint.creationTime);
1:                 assertEquals(ttl, hint.gcgs);
0:                 assertMutationsEqual(mutation, hint.mutation);
1:             }
1:         }
1:     }
1: 
1:     // legacy hint mutation creation code, copied more or less verbatim from the previous implementation
1:     private static Mutation createLegacyHint(Mutation mutation, long now, UUID targetId)
1:     {
1:         int version = MessagingService.VERSION_21;
1:         int ttl = mutation.smallestGCGS();
1:         UUID hintId = UUIDGen.getTimeUUID();
1: 
1:         ByteBuffer key = UUIDType.instance.decompose(targetId);
1:         Clustering clustering = SystemKeyspace.LegacyHints.comparator.make(hintId, version);
1:         ByteBuffer value = ByteBuffer.wrap(FBUtilities.serialize(mutation, Mutation.serializer, version));
1:         Cell cell = BufferCell.expiring(SystemKeyspace.LegacyHints.compactValueColumn(),
1:                                         now,
1:                                         ttl,
1:                                         FBUtilities.nowInSeconds(),
1:                                         value);
1:         return new Mutation(PartitionUpdate.singleRowUpdate(SystemKeyspace.LegacyHints,
1:                                                             key,
1:                                                             BTreeRow.singleCellRow(clustering, cell)));
1:     }
1: 
1:     private static Mutation createMutation(int index, long timestamp)
1:     {
1:         CFMetaData table = Schema.instance.getCFMetaData(KEYSPACE, TABLE);
1:         return new RowUpdateBuilder(table, timestamp, bytes(index))
1:                .clustering(bytes(index))
1:                .add("val", bytes(index))
1:                .build();
1:     }
1: }
============================================================================