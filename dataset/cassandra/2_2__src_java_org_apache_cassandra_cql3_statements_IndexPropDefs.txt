1:5fa6055: /*
1:5fa6055:  * Licensed to the Apache Software Foundation (ASF) under one
1:5fa6055:  * or more contributor license agreements.  See the NOTICE file
1:5fa6055:  * distributed with this work for additional information
1:5fa6055:  * regarding copyright ownership.  The ASF licenses this file
1:5fa6055:  * to you under the Apache License, Version 2.0 (the
1:5fa6055:  * "License"); you may not use this file except in compliance
1:5fa6055:  * with the License.  You may obtain a copy of the License at
1:5fa6055:  *
1:5fa6055:  *     http://www.apache.org/licenses/LICENSE-2.0
1:5fa6055:  *
1:5fa6055:  * Unless required by applicable law or agreed to in writing, software
1:5fa6055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5fa6055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5fa6055:  * See the License for the specific language governing permissions and
1:5fa6055:  * limitations under the License.
1:5fa6055:  */
1:5fa6055: package org.apache.cassandra.cql3.statements;
1:5fa6055: 
1:5fa6055: import java.util.*;
1:5fa6055: 
1:0626be8: import org.apache.cassandra.exceptions.InvalidRequestException;
1:0626be8: import org.apache.cassandra.exceptions.RequestValidationException;
1:0626be8: import org.apache.cassandra.exceptions.SyntaxException;
1:5fa6055: 
1:5fa6055: public class IndexPropDefs extends PropertyDefinitions
1:5fa6055: {
1:5fa6055:     public static final String KW_OPTIONS = "options";
1:5fa6055: 
1:5fa6055:     public static final Set<String> keywords = new HashSet<>();
1:5fa6055:     public static final Set<String> obsoleteKeywords = new HashSet<>();
1:5fa6055: 
1:5fa6055:     public boolean isCustom;
1:5fa6055:     public String customClass;
1:5fa6055: 
1:5fa6055:     static
1:5fa6055:     {
1:5fa6055:         keywords.add(KW_OPTIONS);
1:5fa6055:     }
1:5fa6055: 
1:5fa6055:     public void validate() throws RequestValidationException
1:5fa6055:     {
1:5fa6055:         validate(keywords, obsoleteKeywords);
1:5fa6055: 
1:5fa6055:         if (isCustom && customClass == null)
1:5fa6055:             throw new InvalidRequestException("CUSTOM index requires specifiying the index class");
1:5fa6055: 
1:5fa6055:         if (!isCustom && customClass != null)
1:5fa6055:             throw new InvalidRequestException("Cannot specify index class for a non-CUSTOM index");
1:5fa6055: 
1:5fa6055:         if (!isCustom && !properties.isEmpty())
1:5fa6055:             throw new InvalidRequestException("Cannot specify options for a non-CUSTOM index");
1:5fa6055: 
1:0626be8:         if (getRawOptions().containsKey(IndexTarget.CUSTOM_INDEX_OPTION_NAME))
1:5fa6055:             throw new InvalidRequestException(String.format("Cannot specify %s as a CUSTOM option",
1:0626be8:                                                             IndexTarget.CUSTOM_INDEX_OPTION_NAME));
1:fde97c3: 
1:fde97c3:         if (getRawOptions().containsKey(IndexTarget.TARGET_OPTION_NAME))
1:fde97c3:             throw new InvalidRequestException(String.format("Cannot specify %s as a CUSTOM option",
1:fde97c3:                                                             IndexTarget.TARGET_OPTION_NAME));
1:fde97c3: 
1:5fa6055:     }
1:5fa6055: 
1:5fa6055:     public Map<String, String> getRawOptions() throws SyntaxException
1:5fa6055:     {
1:5fa6055:         Map<String, String> options = getMap(KW_OPTIONS);
1:5fa6055:         return options == null ? Collections.<String, String>emptyMap() : options;
1:5fa6055:     }
1:5fa6055: 
1:5fa6055:     public Map<String, String> getOptions() throws SyntaxException
1:5fa6055:     {
1:5fa6055:         Map<String, String> options = new HashMap<>(getRawOptions());
1:0626be8:         options.put(IndexTarget.CUSTOM_INDEX_OPTION_NAME, customClass);
1:5fa6055:         return options;
1:5fa6055:     }
1:5fa6055: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:fde97c3
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (getRawOptions().containsKey(IndexTarget.TARGET_OPTION_NAME))
1:             throw new InvalidRequestException(String.format("Cannot specify %s as a CUSTOM option",
1:                                                             IndexTarget.TARGET_OPTION_NAME));
1: 
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
/////////////////////////////////////////////////////////////////////////
1:         if (getRawOptions().containsKey(IndexTarget.CUSTOM_INDEX_OPTION_NAME))
1:                                                             IndexTarget.CUSTOM_INDEX_OPTION_NAME));
/////////////////////////////////////////////////////////////////////////
1:         options.put(IndexTarget.CUSTOM_INDEX_OPTION_NAME, customClass);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:5fa6055
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.statements;
1: 
1: import java.util.*;
1: 
0: import org.apache.cassandra.db.index.SecondaryIndex;
0: import org.apache.cassandra.exceptions.*;
1: 
1: public class IndexPropDefs extends PropertyDefinitions
1: {
1:     public static final String KW_OPTIONS = "options";
1: 
1:     public static final Set<String> keywords = new HashSet<>();
1:     public static final Set<String> obsoleteKeywords = new HashSet<>();
1: 
1:     public boolean isCustom;
1:     public String customClass;
1: 
1:     static
1:     {
1:         keywords.add(KW_OPTIONS);
1:     }
1: 
1:     public void validate() throws RequestValidationException
1:     {
1:         validate(keywords, obsoleteKeywords);
1: 
1:         if (isCustom && customClass == null)
1:             throw new InvalidRequestException("CUSTOM index requires specifiying the index class");
1: 
1:         if (!isCustom && customClass != null)
1:             throw new InvalidRequestException("Cannot specify index class for a non-CUSTOM index");
1: 
1:         if (!isCustom && !properties.isEmpty())
1:             throw new InvalidRequestException("Cannot specify options for a non-CUSTOM index");
1: 
0:         if (getRawOptions().containsKey(SecondaryIndex.CUSTOM_INDEX_OPTION_NAME))
1:             throw new InvalidRequestException(String.format("Cannot specify %s as a CUSTOM option",
0:                                                             SecondaryIndex.CUSTOM_INDEX_OPTION_NAME));
1:     }
1: 
1:     public Map<String, String> getRawOptions() throws SyntaxException
1:     {
1:         Map<String, String> options = getMap(KW_OPTIONS);
1:         return options == null ? Collections.<String, String>emptyMap() : options;
1:     }
1: 
1:     public Map<String, String> getOptions() throws SyntaxException
1:     {
1:         Map<String, String> options = new HashMap<>(getRawOptions());
0:         options.put(SecondaryIndex.CUSTOM_INDEX_OPTION_NAME, customClass);
1:         return options;
1:     }
1: }
============================================================================