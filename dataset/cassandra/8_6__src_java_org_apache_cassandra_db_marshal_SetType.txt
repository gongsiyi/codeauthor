1:91bdf7f: /*
1:91bdf7f:  * Licensed to the Apache Software Foundation (ASF) under one
1:91bdf7f:  * or more contributor license agreements.  See the NOTICE file
1:91bdf7f:  * distributed with this work for additional information
1:91bdf7f:  * regarding copyright ownership.  The ASF licenses this file
1:91bdf7f:  * to you under the Apache License, Version 2.0 (the
1:91bdf7f:  * "License"); you may not use this file except in compliance
1:91bdf7f:  * with the License.  You may obtain a copy of the License at
1:91bdf7f:  *
1:91bdf7f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:91bdf7f:  *
1:91bdf7f:  * Unless required by applicable law or agreed to in writing, software
1:91bdf7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91bdf7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91bdf7f:  * See the License for the specific language governing permissions and
1:91bdf7f:  * limitations under the License.
1:91bdf7f:  */
1:91bdf7f: package org.apache.cassandra.db.marshal;
7:91bdf7f: 
1:91bdf7f: import java.nio.ByteBuffer;
1:5e5fbc6: import java.util.*;
1:91bdf7f: 
1:b7be198: import org.apache.cassandra.cql3.Json;
1:c7b02d1: import org.apache.cassandra.cql3.Sets;
1:c7b02d1: import org.apache.cassandra.cql3.Term;
1:a991b64: import org.apache.cassandra.db.rows.Cell;
1:3a2faf9: import org.apache.cassandra.exceptions.ConfigurationException;
1:3a2faf9: import org.apache.cassandra.exceptions.SyntaxException;
1:c7b02d1: import org.apache.cassandra.serializers.MarshalException;
1:fc8b76f: import org.apache.cassandra.serializers.SetSerializer;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:91bdf7f: 
1:5e5fbc6: public class SetType<T> extends CollectionType<Set<T>>
9:91bdf7f: {
1:91bdf7f:     // interning instances
1:ee55f36:     private static final Map<AbstractType<?>, SetType> instances = new HashMap<>();
1:ee55f36:     private static final Map<AbstractType<?>, SetType> frozenInstances = new HashMap<>();
1:f634ac7: 
1:ee55f36:     private final AbstractType<T> elements;
1:daff1fc:     private final SetSerializer<T> serializer;
1:ee55f36:     private final boolean isMultiCell;
1:91bdf7f: 
1:3a2faf9:     public static SetType<?> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
1:8b00f3a:     {
1:91bdf7f:         List<AbstractType<?>> l = parser.getTypeParameters();
1:91bdf7f:         if (l.size() != 1)
1:91bdf7f:             throw new ConfigurationException("SetType takes exactly 1 type parameter");
1:91bdf7f: 
1:ee55f36:         return getInstance(l.get(0), true);
1:8b00f3a:     }
1:e9c6742: 
1:ee55f36:     public static synchronized <T> SetType<T> getInstance(AbstractType<T> elements, boolean isMultiCell)
1:e9c6742:     {
1:ee55f36:         Map<AbstractType<?>, SetType> internMap = isMultiCell ? instances : frozenInstances;
1:ee55f36:         SetType<T> t = internMap.get(elements);
1:91bdf7f:         if (t == null)
1:8b00f3a:         {
1:ee55f36:             t = new SetType<T>(elements, isMultiCell);
1:ee55f36:             internMap.put(elements, t);
1:e9c6742:         }
1:91bdf7f:         return t;
1:8b00f3a:     }
1:91bdf7f: 
1:ee55f36:     public SetType(AbstractType<T> elements, boolean isMultiCell)
1:91bdf7f:     {
1:07594ee:         super(ComparisonType.CUSTOM, Kind.SET);
1:91bdf7f:         this.elements = elements;
1:70819bf:         this.serializer = SetSerializer.getInstance(elements.getSerializer(), elements);
1:ee55f36:         this.isMultiCell = isMultiCell;
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:7a3c3ab:     public boolean referencesUserType(String userTypeName)
1:d62b2cf:     {
1:7a3c3ab:         return getElementsType().referencesUserType(userTypeName);
1:98c4a7c:     }
1:98c4a7c: 
1:ee55f36:     public AbstractType<T> getElementsType()
1:ee55f36:     {
1:ee55f36:         return elements;
9:91bdf7f:     }
1:91bdf7f: 
1:5e5fbc6:     public AbstractType<T> nameComparator()
1:98c4a7c:     {
1:91bdf7f:         return elements;
1:91bdf7f:     }
1:91bdf7f: 
1:2b62df2:     public AbstractType<?> valueComparator()
1:91bdf7f:     {
1:91bdf7f:         return EmptyType.instance;
1:91bdf7f:     }
1:91bdf7f: 
1:98c4a7c:     @Override
1:ee55f36:     public boolean isMultiCell()
1:ee55f36:     {
1:ee55f36:         return isMultiCell;
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:ee55f36:     public AbstractType<?> freeze()
1:ee55f36:     {
1:ee55f36:         if (isMultiCell)
1:ee55f36:             return getInstance(this.elements, false);
1:d62b2cf:         else
1:ee55f36:             return this;
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:dee84cc:     public AbstractType<?> freezeNestedMulticellTypes()
1:f4b9f16:     {
1:dee84cc:         if (!isMultiCell())
1:dee84cc:             return this;
1:dee84cc: 
1:dee84cc:         if (elements.isFreezable() && elements.isMultiCell())
1:d62b2cf:             return getInstance(elements.freeze(), isMultiCell);
1:dee84cc: 
1:dee84cc:         return getInstance(elements.freezeNestedMulticellTypes(), isMultiCell);
1:d62b2cf:     }
1:d62b2cf: 
1:d62b2cf:     @Override
1:ee55f36:     public boolean isCompatibleWithFrozen(CollectionType<?> previous)
1:ee55f36:     {
1:ee55f36:         assert !isMultiCell;
1:ee55f36:         return this.elements.isCompatibleWith(((SetType) previous).elements);
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:ee55f36:     public boolean isValueCompatibleWithFrozen(CollectionType<?> previous)
1:ee55f36:     {
1:ee55f36:         // because sets are ordered, any changes to the type must maintain the ordering
1:ee55f36:         return isCompatibleWithFrozen(previous);
1:ee55f36:     }
1:ee55f36: 
1:ee55f36:     @Override
1:07594ee:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
1:91bdf7f:     {
1:f4b9f16:         return ListType.compareListOrSet(elements, o1, o2);
1:f4b9f16:     }
1:f4b9f16: 
1:9872b74:     public SetSerializer<T> getSerializer()
1:91bdf7f:     {
1:daff1fc:         return serializer;
1:91bdf7f:     }
1:91bdf7f: 
1:f4b9f16:     @Override
1:ee55f36:     public String toString(boolean ignoreFreezing)
1:91bdf7f:     {
1:ee55f36:         boolean includeFrozenType = !ignoreFreezing && !isMultiCell();
1:ee55f36: 
1:ee55f36:         StringBuilder sb = new StringBuilder();
1:ee55f36:         if (includeFrozenType)
1:ee55f36:             sb.append(FrozenType.class.getName()).append("(");
1:ee55f36:         sb.append(getClass().getName());
1:ee55f36:         sb.append(TypeParser.stringifyTypeParameters(Collections.<AbstractType<?>>singletonList(elements), ignoreFreezing || !isMultiCell));
1:ee55f36:         if (includeFrozenType)
1:ee55f36:             sb.append(")");
1:ee55f36:         return sb.toString();
1:91bdf7f:     }
1:91bdf7f: 
1:a991b64:     public List<ByteBuffer> serializedValues(Iterator<Cell> cells)
1:91bdf7f:     {
1:a991b64:         List<ByteBuffer> bbs = new ArrayList<ByteBuffer>();
1:a991b64:         while (cells.hasNext())
1:a991b64:             bbs.add(cells.next().path().get(0));
1:9872b74:         return bbs;
1:91bdf7f:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:c7b02d1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:c7b02d1:     {
1:b7be198:         if (parsed instanceof String)
1:b7be198:             parsed = Json.decodeJson((String) parsed);
1:b7be198: 
1:c7b02d1:         if (!(parsed instanceof List))
1:c7b02d1:             throw new MarshalException(String.format(
1:c7b02d1:                     "Expected a list (representing a set), but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1:c7b02d1: 
1:c7b02d1:         List list = (List) parsed;
1:c7b02d1:         Set<Term> terms = new HashSet<>(list.size());
1:c7b02d1:         for (Object element : list)
1:c7b02d1:         {
1:c7b02d1:             if (element == null)
1:c7b02d1:                 throw new MarshalException("Invalid null element in set");
1:c7b02d1:             terms.add(elements.fromJSONObject(element));
1:c7b02d1:         }
1:c7b02d1: 
1:c7b02d1:         return new Sets.DelayedValue(elements, terms);
1:c7b02d1:     }
1:c7b02d1: 
1:c7b02d1:     @Override
1:e0adc16:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
1:c7b02d1:     {
1:c7b02d1:         return ListType.setOrListToJsonString(buffer, elements, protocolVersion);
1:c7b02d1:     }
1:91bdf7f: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public String toJSONString(ByteBuffer buffer, ProtocolVersion protocolVersion)
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:dee84cc
/////////////////////////////////////////////////////////////////////////
1:     public AbstractType<?> freezeNestedMulticellTypes()
1:         if (!isMultiCell())
1:             return this;
1: 
1:         if (elements.isFreezable() && elements.isMultiCell())
1: 
1:         return getInstance(elements.freezeNestedMulticellTypes(), isMultiCell);
commit:d62b2cf
/////////////////////////////////////////////////////////////////////////
0:     public AbstractType<?> freezeNestedUDTs()
1:     {
0:         if (elements.isUDT() && elements.isMultiCell())
1:             return getInstance(elements.freeze(), isMultiCell);
1:         else
0:             return getInstance(elements.freezeNestedUDTs(), isMultiCell);
1:     }
1: 
1:     @Override
commit:b7be198
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Json;
/////////////////////////////////////////////////////////////////////////
1:         if (parsed instanceof String)
1:             parsed = Json.decodeJson((String) parsed);
1: 
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Sets;
1: import org.apache.cassandra.cql3.Term;
1: import org.apache.cassandra.serializers.MarshalException;
0: import org.apache.cassandra.transport.Server;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public Term fromJSONObject(Object parsed) throws MarshalException
1:     {
1:         if (!(parsed instanceof List))
1:             throw new MarshalException(String.format(
1:                     "Expected a list (representing a set), but got a %s: %s", parsed.getClass().getSimpleName(), parsed));
1: 
1:         List list = (List) parsed;
1:         Set<Term> terms = new HashSet<>(list.size());
1:         for (Object element : list)
1:         {
1:             if (element == null)
1:                 throw new MarshalException("Invalid null element in set");
1:             terms.add(elements.fromJSONObject(element));
1:         }
1: 
1:         return new Sets.DelayedValue(elements, terms);
1:     }
1: 
1:     @Override
0:     public String toJSONString(ByteBuffer buffer, int protocolVersion)
1:     {
1:         return ListType.setOrListToJsonString(buffer, elements, protocolVersion);
1:     }
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<AbstractType<?>, SetType> instances = new HashMap<>();
1:     private static final Map<AbstractType<?>, SetType> frozenInstances = new HashMap<>();
1:     private final AbstractType<T> elements;
1:     private final boolean isMultiCell;
/////////////////////////////////////////////////////////////////////////
1:         return getInstance(l.get(0), true);
1:     public static synchronized <T> SetType<T> getInstance(AbstractType<T> elements, boolean isMultiCell)
1:         Map<AbstractType<?>, SetType> internMap = isMultiCell ? instances : frozenInstances;
1:         SetType<T> t = internMap.get(elements);
1:             t = new SetType<T>(elements, isMultiCell);
1:             internMap.put(elements, t);
1:     public SetType(AbstractType<T> elements, boolean isMultiCell)
1:         this.isMultiCell = isMultiCell;
1:     }
1: 
1:     public AbstractType<T> getElementsType()
1:     {
1:         return elements;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isMultiCell()
1:     {
1:         return isMultiCell;
1:     }
1: 
1:     @Override
1:     public AbstractType<?> freeze()
1:     {
1:         if (isMultiCell)
1:             return getInstance(this.elements, false);
0:         else
1:             return this;
1:     }
1: 
1:     @Override
1:     public boolean isCompatibleWithFrozen(CollectionType<?> previous)
1:     {
1:         assert !isMultiCell;
1:         return this.elements.isCompatibleWith(((SetType) previous).elements);
1:     }
1: 
1:     @Override
1:     public boolean isValueCompatibleWithFrozen(CollectionType<?> previous)
1:     {
1:         // because sets are ordered, any changes to the type must maintain the ordering
1:         return isCompatibleWithFrozen(previous);
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString(boolean ignoreFreezing)
1:         boolean includeFrozenType = !ignoreFreezing && !isMultiCell();
1: 
1:         StringBuilder sb = new StringBuilder();
1:         if (includeFrozenType)
1:             sb.append(FrozenType.class.getName()).append("(");
1:         sb.append(getClass().getName());
1:         sb.append(TypeParser.stringifyTypeParameters(Collections.<AbstractType<?>>singletonList(elements), ignoreFreezing || !isMultiCell));
1:         if (includeFrozenType)
1:             sb.append(")");
1:         return sb.toString();
author:Robert Stupp
-------------------------------------------------------------------------------
commit:7a3c3ab
/////////////////////////////////////////////////////////////////////////
1:     public boolean referencesUserType(String userTypeName)
1:         return getElementsType().referencesUserType(userTypeName);
commit:e6f23e6
commit:1de63e9
commit:98c4a7c
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public boolean references(AbstractType<?> check)
1:     {
0:         return super.references(check) || elements.references(check);
1:     }
1: 
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:07594ee
/////////////////////////////////////////////////////////////////////////
1:         super(ComparisonType.CUSTOM, Kind.SET);
/////////////////////////////////////////////////////////////////////////
1:     public int compareCustom(ByteBuffer o1, ByteBuffer o2)
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:70819bf
/////////////////////////////////////////////////////////////////////////
1:         this.serializer = SetSerializer.getInstance(elements.getSerializer(), elements);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.rows.Cell;
/////////////////////////////////////////////////////////////////////////
1:     public List<ByteBuffer> serializedValues(Iterator<Cell> cells)
1:         List<ByteBuffer> bbs = new ArrayList<ByteBuffer>();
1:         while (cells.hasNext())
1:             bbs.add(cells.next().path().get(0));
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1:     public SetSerializer<T> getSerializer()
/////////////////////////////////////////////////////////////////////////
0:     public List<ByteBuffer> serializedValues(List<Cell> cells)
0:             bbs.add(c.name().collectionElement());
1:         return bbs;
commit:f4b9f16
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public int compare(ByteBuffer o1, ByteBuffer o2)
1:     {
1:         return ListType.compareListOrSet(elements, o1, o2);
1:     }
1: 
commit:e50d6af
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Cell;
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer serialize(List<Cell> cells)
0:         cells = enforceLimit(cells);
0:         List<ByteBuffer> bbs = new ArrayList<ByteBuffer>(cells.size());
0:         for (Cell c : cells)
0:         return pack(bbs, cells.size(), size);
commit:362cc05
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer serialize(List<Column> columns)
0:         for (Column c : columns)
0:             ByteBuffer key = c.name().collectionElement();
0:             bbs.add(key);
0:             size += 2 + key.remaining();
commit:b2da839
commit:f634ac7
/////////////////////////////////////////////////////////////////////////
0:         columns = enforceLimit(columns);
1: 
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
1:     private final SetSerializer<T> serializer;
/////////////////////////////////////////////////////////////////////////
0:         this.serializer = SetSerializer.getInstance(elements.getSerializer());
/////////////////////////////////////////////////////////////////////////
1:         return serializer;
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.serializers.TypeSerializer;
1: import org.apache.cassandra.serializers.SetSerializer;
/////////////////////////////////////////////////////////////////////////
0:         this.composer = SetSerializer.getInstance(elements.getSerializer());
/////////////////////////////////////////////////////////////////////////
0:     public TypeSerializer<Set<T>> getSerializer()
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.type.AbstractSerializer;
0: import org.apache.cassandra.type.SetSerializer;
/////////////////////////////////////////////////////////////////////////
0:     private final SetSerializer<T> composer;
/////////////////////////////////////////////////////////////////////////
0:         this.composer = SetSerializer.getInstance(elements.asComposer());
/////////////////////////////////////////////////////////////////////////
0:         return composer.serialize(bytes);
0:         return composer.deserialize(value);
1:     }
1: 
0:     public AbstractSerializer<Set<T>> asComposer()
1:     {
0:         return composer;
commit:c47f407
commit:9f268d1
/////////////////////////////////////////////////////////////////////////
0:             int n = getUnsignedShort(input);
0:                 int s = getUnsignedShort(input);
commit:3a005df
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Column;
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer serialize(List<Pair<ByteBuffer, Column>> columns)
0:         for (Pair<ByteBuffer, Column> p : columns)
commit:8b00f3a
/////////////////////////////////////////////////////////////////////////
0: import java.nio.BufferUnderflowException;
/////////////////////////////////////////////////////////////////////////
0:         try
0:             ByteBuffer input = bytes.duplicate();
0:             int n = input.getShort();
0:             Set<T> l = new LinkedHashSet<T>(n);
0:             for (int i = 0; i < n; i++)
1:             {
0:                 int s = input.getShort();
0:                 byte[] data = new byte[s];
0:                 input.get(data);
0:                 ByteBuffer databb = ByteBuffer.wrap(data);
0:                 elements.validate(databb);
0:                 l.add(elements.compose(databb));
1:             }
0:             return l;
0:         catch (BufferUnderflowException e)
1:         {
0:             throw new MarshalException("Not enough bytes to read a set");
1:         }
commit:3a2faf9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.exceptions.SyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     public static SetType<?> getInstance(TypeParser parser) throws ConfigurationException, SyntaxException
commit:2b62df2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public AbstractType<?> nameComparator()
1:     public AbstractType<?> valueComparator()
/////////////////////////////////////////////////////////////////////////
commit:91bdf7f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.marshal;
1: 
1: import java.nio.ByteBuffer;
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.List;
0: import java.util.Map;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.cql3.ColumnNameBuilder;
0: import org.apache.cassandra.cql3.Term;
0: import org.apache.cassandra.cql3.UpdateParameters;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.IColumn;
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.thrift.InvalidRequestException;
0: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.cassandra.utils.Pair;
1: 
0: public class SetType extends CollectionType
1: {
0:     private static final Logger logger = LoggerFactory.getLogger(SetType.class);
1: 
1:     // interning instances
0:     private static final Map<AbstractType<?>, SetType> instances = new HashMap<AbstractType<?>, SetType>();
1: 
0:     public final AbstractType<?> elements;
1: 
0:     public static SetType getInstance(TypeParser parser) throws ConfigurationException
1:     {
1:         List<AbstractType<?>> l = parser.getTypeParameters();
1:         if (l.size() != 1)
1:             throw new ConfigurationException("SetType takes exactly 1 type parameter");
1: 
0:         return getInstance(l.get(0));
1:     }
1: 
0:     public static synchronized SetType getInstance(AbstractType<?> elements)
1:     {
0:         SetType t = instances.get(elements);
1:         if (t == null)
1:         {
0:             t = new SetType(elements);
0:             instances.put(elements, t);
1:         }
1:         return t;
1:     }
1: 
0:     public SetType(AbstractType<?> elements)
1:     {
0:         super(Kind.SET);
1:         this.elements = elements;
1:     }
1: 
0:     protected AbstractType<?> nameComparator()
1:     {
1:         return elements;
1:     }
1: 
0:     protected AbstractType<?> valueComparator()
1:     {
1:         return EmptyType.instance;
1:     }
1: 
0:     protected void appendToStringBuilder(StringBuilder sb)
1:     {
0:         sb.append(getClass().getName()).append(TypeParser.stringifyTypeParameters(Collections.<AbstractType<?>>singletonList(elements)));
1:     }
1: 
0:     public void executeFunction(ColumnFamily cf, ColumnNameBuilder fullPath, Function fct, List<Term> args, UpdateParameters params) throws InvalidRequestException
1:     {
0:         switch (fct)
1:         {
0:             case ADD:
0:                 doAdd(cf, fullPath, args, params);
0:                 break;
0:             case DISCARD_SET:
0:                 doDiscard(cf, fullPath, args, params);
0:                 break;
0:             default:
0:                 throw new AssertionError("Unsupported function " + fct);
1:         }
1:     }
1: 
0:     public void doAdd(ColumnFamily cf, ColumnNameBuilder builder, List<Term> values, UpdateParameters params) throws InvalidRequestException
1:     {
0:         for (int i = 0; i < values.size(); ++i)
1:         {
0:             ColumnNameBuilder b = i == values.size() - 1 ? builder : builder.copy();
0:             ByteBuffer name = b.add(values.get(i).getByteBuffer(elements, params.variables)).build();
0:             cf.addColumn(params.makeColumn(name, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         }
1:     }
1: 
0:     public void doDiscard(ColumnFamily cf, ColumnNameBuilder builder, List<Term> values, UpdateParameters params) throws InvalidRequestException
1:     {
0:         for (int i = 0; i < values.size(); ++i)
1:         {
0:             ColumnNameBuilder b = i == values.size() - 1 ? builder : builder.copy();
0:             ByteBuffer name = b.add(values.get(i).getByteBuffer(elements, params.variables)).build();
0:             cf.addColumn(params.makeTombstone(name));
1:         }
1:     }
1: 
0:     public ByteBuffer serializeForThrift(List<Pair<ByteBuffer, IColumn>> columns)
1:     {
0:         // We're using a list for now, since json doesn't have maps
0:         List<Object> l = new ArrayList<Object>(columns.size());
0:         for (Pair<ByteBuffer, IColumn> p : columns)
0:             l.add(elements.compose(p.left));
0:         return ByteBufferUtil.bytes(FBUtilities.json(l));
1:     }
1: }
author:belliottsmith
-------------------------------------------------------------------------------
commit:acf1b18
/////////////////////////////////////////////////////////////////////////
0:     public boolean isByteOrderComparable()
0:     {
0:         return elements.isByteOrderComparable();
0:     }
0: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:95f94a4
/////////////////////////////////////////////////////////////////////////
commit:7588f74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:d54a93f
/////////////////////////////////////////////////////////////////////////
0:     public static synchronized <T> SetType<T> getInstance(AbstractType<T> elements)
0:         SetType<T> t = instances.get(elements);
0:             t = new SetType<T>(elements);
commit:5e5fbc6
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1: public class SetType<T> extends CollectionType<Set<T>>
0:     public final AbstractType<T> elements;
0:     public static SetType<?> getInstance(TypeParser parser) throws ConfigurationException
/////////////////////////////////////////////////////////////////////////
0:     public static synchronized <T> SetType getInstance(AbstractType<T> elements)
/////////////////////////////////////////////////////////////////////////
0:     public SetType(AbstractType<T> elements)
1:     public AbstractType<T> nameComparator()
/////////////////////////////////////////////////////////////////////////
0:     public Set<T> compose(ByteBuffer bytes)
0:     {
0:         ByteBuffer input = bytes.duplicate();
0:         int n = input.getShort();
0:         Set<T> l = new LinkedHashSet<T>(n);
0:         for (int i = 0; i < n; i++)
0:         {
0:             int s = input.getShort();
0:             byte[] data = new byte[s];
0:             input.get(data);
0:             l.add(elements.compose(ByteBuffer.wrap(data)));
0:         }
0:         return l;
0:     }
0: 
0:     /**
0:      * Layout is: {@code <n><s_1><b_1>...<s_n><b_n> }
0:      * where:
0:      *   n is the number of elements
0:      *   s_i is the number of bytes composing the ith element
0:      *   b_i is the s_i bytes composing the ith element
0:      */
0:     public ByteBuffer decompose(Set<T> value)
0:     {
0:         List<ByteBuffer> bbs = new ArrayList<ByteBuffer>(value.size());
0:         int size = 0;
0:         for (T elt : value)
0:         {
0:             ByteBuffer bb = elements.decompose(elt);
0:             bbs.add(bb);
0:             size += 2 + bb.remaining();
0:         }
0:         return pack(bbs, value.size(), size);
0:     }
0: 
0:     public ByteBuffer serialize(List<Pair<ByteBuffer, IColumn>> columns)
0:         List<ByteBuffer> bbs = new ArrayList<ByteBuffer>(columns.size());
0:         int size = 0;
0:         {
0:             bbs.add(p.left);
0:             size += 2 + p.left.remaining();
0:         }
0:         return pack(bbs, columns.size(), size);
============================================================================