1:0160ad5: /*
1:0160ad5:  * Licensed to the Apache Software Foundation (ASF) under one
1:0160ad5:  * or more contributor license agreements.  See the NOTICE file
1:0160ad5:  * distributed with this work for additional information
1:0160ad5:  * regarding copyright ownership.  The ASF licenses this file
1:0160ad5:  * to you under the Apache License, Version 2.0 (the
1:0160ad5:  * "License"); you may not use this file except in compliance
1:0160ad5:  * with the License.  You may obtain a copy of the License at
3:0160ad5:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0160ad5:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:0160ad5:  */
1:0160ad5: package org.apache.cassandra.cache;
5:0160ad5: 
1:dfd78d0: import java.util.Iterator;
1:0160ad5: 
1:69cedbf: import org.apache.cassandra.metrics.CacheMetrics;
1:0160ad5: 
1:4d1af49: /**
1:4d1af49:  * Wraps an ICache in requests + hits tracking.
1:4d1af49:  */
1:295aedb: public class InstrumentingCache<K, V>
7:0160ad5: {
1:4d1af49:     private final ICache<K, V> map;
1:69cedbf:     private final String type;
1:6879422: 
1:69cedbf:     private CacheMetrics metrics;
1:6879422: 
1:69cedbf:     public InstrumentingCache(String type, ICache<K, V> map)
1:4d1af49:     {
1:4d1af49:         this.map = map;
1:69cedbf:         this.type = type;
1:69cedbf:         this.metrics = new CacheMetrics(type, map);
1:4d1af49:     }
1:e688815: 
1:0160ad5:     public void put(K key, V value)
1:e688815:     {
1:0160ad5:         map.put(key, value);
1:e688815:     }
1:80d3dec: 
1:c9270f4:     public boolean putIfAbsent(K key, V value)
1:80d3dec:     {
1:c9270f4:         return map.putIfAbsent(key, value);
1:80d3dec:     }
1:4d1af49: 
1:c9270f4:     public boolean replace(K key, V old, V value)
1:4d1af49:     {
1:c9270f4:         return map.replace(key, old, value);
1:4d1af49:     }
1:5c44cc1: 
1:0160ad5:     public V get(K key)
1:6879422:     {
1:0160ad5:         V v = map.get(key);
1:69cedbf:         metrics.requests.mark();
1:0160ad5:         if (v != null)
1:69cedbf:             metrics.hits.mark();
1:0160ad5:         return v;
1:6879422:     }
1:40d3fe4: 
1:0160ad5:     public V getInternal(K key)
1:5c44cc1:     {
1:0160ad5:         return map.get(key);
1:5c44cc1:     }
1:df95549: 
1:0160ad5:     public void remove(K key)
1:40d3fe4:     {
1:0160ad5:         map.remove(key);
1:40d3fe4:     }
1:c1758b2: 
1:0267293:     public long getCapacity()
1:df95549:     {
1:6879422:         return map.capacity();
1:df95549:     }
1:0160ad5: 
1:0267293:     public void setCapacity(long capacity)
1:0160ad5:     {
1:dfd78d0:         map.setCapacity(capacity);
1:40d3fe4:     }
1:0160ad5: 
1:4d1af49:     public int size()
1:0160ad5:     {
1:0160ad5:         return map.size();
8:0160ad5:     }
1:0160ad5: 
1:0267293:     public long weightedSize()
1:0160ad5:     {
1:295aedb:         return map.weightedSize();
1:0160ad5:     }
1:0160ad5: 
1:c1758b2:     public void clear()
1:c1758b2:     {
1:c1758b2:         map.clear();
1:69cedbf:         metrics = new CacheMetrics(type, map);
1:c1758b2:     }
1:0160ad5: 
1:dfd78d0:     public Iterator<K> keyIterator()
1:0160ad5:     {
1:dfd78d0:         return map.keyIterator();
1:0160ad5:     }
1:0160ad5: 
1:dfd78d0:     public Iterator<K> hotKeyIterator(int n)
1:0160ad5:     {
1:dfd78d0:         return map.hotKeyIterator(n);
1:0160ad5:     }
1:0160ad5: 
1:295aedb:     public boolean containsKey(K key)
1:0160ad5:     {
1:295aedb:         return map.containsKey(key);
1:0160ad5:     }
1:0160ad5: 
1:69cedbf:     public CacheMetrics getMetrics()
1:0160ad5:     {
1:69cedbf:         return metrics;
1:0160ad5:     }
1:0160ad5: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:dfd78d0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         map.setCapacity(capacity);
/////////////////////////////////////////////////////////////////////////
1:     public Iterator<K> keyIterator()
1:         return map.keyIterator();
1:     public Iterator<K> hotKeyIterator(int n)
1:         return map.hotKeyIterator(n);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a3734e5
/////////////////////////////////////////////////////////////////////////
commit:e688815
/////////////////////////////////////////////////////////////////////////
0:     public Set<K> hotKeySet(int n)
1:     {
0:         return map.hotKeySet(n);
1:     }
1: 
commit:f491265
commit:80d3dec
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isPutCopying()
1:     {
0:         return map.isPutCopying();
1:     }
commit:4d1af49
/////////////////////////////////////////////////////////////////////////
0: import java.lang.management.ManagementFactory;
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: /**
1:  * Wraps an ICache in requests + hits tracking.
1:  */
0: public class InstrumentingCache<K, V> implements InstrumentingCacheMBean
1:     private final ICache<K, V> map;
0:     public InstrumentingCache(ICache<K, V> map, String table, String name)
1:         this.map = map;
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:         try
1:         {
0:             ObjectName mbeanName = new ObjectName("org.apache.cassandra.db:type=Caches,keyspace=" + table + ",cache=" + name);
0:             // unregister any previous, as this may be a replacement.
0:             if (mbs.isRegistered(mbeanName))
0:                 mbs.unregisterMBean(mbeanName);
0:             mbs.registerMBean(this, mbeanName);
1:         }
0:         catch (Exception e)
1:         {
0:             throw new RuntimeException(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public int size()
/////////////////////////////////////////////////////////////////////////
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import com.googlecode.concurrentlinkedhashmap.Weighers;
commit:6879422
/////////////////////////////////////////////////////////////////////////
0: import com.googlecode.concurrentlinkedhashmap.Weighers;
0: import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
0:     public static final int DEFAULT_CONCURENCY_LEVEL = 64;
1: 
/////////////////////////////////////////////////////////////////////////
0:         this(capacity, DEFAULT_CONCURENCY_LEVEL);
1:     }
1: 
0:     public InstrumentedCache(int capacity, int concurency)
1:     {
0:         map = new ConcurrentLinkedHashMap.Builder<K, V>()
0:                 .weigher(Weighers.<V>singleton())
0:                 .initialCapacity(capacity)
0:                 .maximumWeightedCapacity(capacity)
0:                 .concurrencyLevel(concurency)
0:                 .build();
/////////////////////////////////////////////////////////////////////////
1:         return map.capacity();
/////////////////////////////////////////////////////////////////////////
commit:5c44cc1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Set<K> getKeySet()
1:     {
0:         return map.keySet();
1:     }
commit:40d3fe4
/////////////////////////////////////////////////////////////////////////
0:     private volatile boolean capacitySetManually;
/////////////////////////////////////////////////////////////////////////
0:     public boolean isCapacitySetManually()
0:         return capacitySetManually;
1:     }
1:     
0:     public void updateCapacity(int capacity)
1:     {
0:         map.setCapacity(capacity);
0:         this.capacity = capacity;
0:         updateCapacity(capacity);
0:         capacitySetManually = true;
1:     }
commit:df95549
/////////////////////////////////////////////////////////////////////////
0:     private volatile boolean capacityModified;
/////////////////////////////////////////////////////////////////////////
0:     public boolean isCapacityModified()
1:     {
0:         return capacityModified;
1:     }
1: 
0:         capacityModified = true;
commit:c1758b2
/////////////////////////////////////////////////////////////////////////
0:     private final AtomicLong lastRequests = new AtomicLong(0);
0:     private final AtomicLong lastHits = new AtomicLong(0);
/////////////////////////////////////////////////////////////////////////
0:             return ((double)(h - lastHits.get())) / (r - lastRequests.get());
0:             lastRequests.set(r);
0:             lastHits.set(h);
1: 
1:     public void clear()
1:     {
1:         map.clear();
0:         requests.set(0);
0:         hits.set(0);
1:     }
commit:0160ad5
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cache;
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  * 
1:  */
1: 
1: 
0: import java.util.concurrent.atomic.AtomicLong;
1: 
0: import com.reardencommerce.kernel.collections.shared.evictable.ConcurrentLinkedHashMap;
1: 
0: public class InstrumentedCache<K, V>
1: {
0:     private int capacity;
0:     private final ConcurrentLinkedHashMap<K, V> map;
0:     private final AtomicLong requests = new AtomicLong(0);
0:     private final AtomicLong hits = new AtomicLong(0);
0:     long lastRequests, lastHits;
1: 
0:     public InstrumentedCache(int capacity)
1:     {
0:         this.capacity = capacity;
0:         map = ConcurrentLinkedHashMap.create(ConcurrentLinkedHashMap.EvictionPolicy.SECOND_CHANCE, capacity);
1:     }
1: 
1:     public void put(K key, V value)
1:     {
1:         map.put(key, value);
1:     }
1: 
1:     public V get(K key)
1:     {
1:         V v = map.get(key);
0:         requests.incrementAndGet();
1:         if (v != null)
0:             hits.incrementAndGet();
1:         return v;
1:     }
1: 
1:     public V getInternal(K key)
1:     {
1:         return map.get(key);
1:     }
1: 
1:     public void remove(K key)
1:     {
1:         map.remove(key);
1:     }
1: 
0:     public int getCapacity()
1:     {
0:         return capacity;
1:     }
1: 
0:     public void setCapacity(int capacity)
1:     {
0:         map.setCapacity(capacity);
0:         this.capacity = capacity;
1:      }
1: 
0:     public int getSize()
1:     {
1:         return map.size();
1:     }
1: 
0:     public long getHits()
1:     {
0:         return hits.get();
1:     }
1: 
0:     public long getRequests()
1:     {
0:         return requests.get();
1:     }
1: 
0:     public double getRecentHitRate()
1:     {
0:         long r = requests.get();
0:         long h = hits.get();
0:         try
1:         {
0:             return ((double)(h - lastHits)) / (r - lastRequests);
1:         }
0:         finally
1:         {
0:             lastRequests = r;
0:             lastHits = h;
1:         }
1:     }
1: }
commit:db1bebf
/////////////////////////////////////////////////////////////////////////
0:     public V getInternal(K key)
0:     {
0:         return map.get(key);
0:     }
0: 
commit:496ab23
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicLong;
0: 
0:     private final AtomicLong requests = new AtomicLong(0);
0:     private final AtomicLong hits = new AtomicLong(0);
0:     long lastRequests, lastHits;
/////////////////////////////////////////////////////////////////////////
0:         requests.incrementAndGet();
0:         if (v != null)
0:             hits.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
0:     public long getHits()
0:         return hits.get();
0:     }
0: 
0:     public long getRequests()
0:     {
0:         return requests.get();
0:     }
0: 
0:     public double getRecentHitRate()
0:     {
0:         long r = requests.get();
0:         long h = hits.get();
0:         try
0:         {
0:             return ((double)(h - lastHits)) / (r - lastRequests);
0:         }
0:         finally
0:         {
0:             lastRequests = r;
0:             lastHits = h;
0:         }
commit:45b9525
/////////////////////////////////////////////////////////////////////////
0:     private int capacity;
/////////////////////////////////////////////////////////////////////////
0:     public void setCapacity(int capacity)
0:     {
0:         map.setCapacity(capacity);
0:         this.capacity = capacity;
0:      }
0: 
commit:15e5d1c
/////////////////////////////////////////////////////////////////////////
0: public class InstrumentedCache<K, V>
0:     public InstrumentedCache(int capacity)
commit:1dc4279
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cache;
0: import org.apache.cassandra.utils.TimedStatsDeque;
commit:ab800ad
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.utils;
0: 
0: import java.lang.management.ManagementFactory;
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
0: 
0: import com.reardencommerce.kernel.collections.shared.evictable.ConcurrentLinkedHashMap;
0: 
0: public class InstrumentedCache<K, V> implements InstrumentedCacheMBean
0: {
0:     private final int capacity;
0:     private final ConcurrentLinkedHashMap<K, V> map;
0:     private final TimedStatsDeque stats;
0: 
0:     public InstrumentedCache(String table, String name, int capacity)
0:     {
0:         this.capacity = capacity;
0:         map = ConcurrentLinkedHashMap.create(ConcurrentLinkedHashMap.EvictionPolicy.SECOND_CHANCE, capacity);
0:         stats = new TimedStatsDeque(60000);
0: 
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:         try
0:         {
0:             String mbeanName = "org.apache.cassandra.db:type=Caches,keyspace=" + table + ",cache=" + name;
0:             mbs.registerMBean(this, new ObjectName(mbeanName));
0:         }
0:         catch (Exception e)
0:         {
0:             throw new RuntimeException(e);
0:         }
0:     }
0: 
0:     public void put(K key, V value)
0:     {
0:         map.put(key, value);
0:     }
0: 
0:     public V get(K key)
0:     {
0:         V v = map.get(key);
0:         stats.add(v == null ? 0 : 1);
0:         return v;
0:     }
0: 
0:     public void remove(K key)
0:     {
0:         map.remove(key);
0:     }
0: 
0:     public int getCapacity()
0:     {
0:         return capacity;
0:     }
0: 
0:     public int getSize()
0:     {
0:         return map.size();
0:     }
0: 
0:     public double getHitRate()
0:     {
0:         return stats.mean();
0:     }
0: }
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.cassandra.metrics.CacheMetrics;
1:     private final String type;
1:     private CacheMetrics metrics;
0: 
1:     public InstrumentingCache(String type, ICache<K, V> map)
1:         this.type = type;
1:         this.metrics = new CacheMetrics(type, map);
/////////////////////////////////////////////////////////////////////////
1:         metrics.requests.mark();
1:             metrics.hits.mark();
/////////////////////////////////////////////////////////////////////////
1:         metrics = new CacheMetrics(type, map);
/////////////////////////////////////////////////////////////////////////
0: 
1:     public CacheMetrics getMetrics()
0:     {
1:         return metrics;
0:     }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:ac362da
commit:0267293
/////////////////////////////////////////////////////////////////////////
1:     public long getCapacity()
/////////////////////////////////////////////////////////////////////////
0:     public void updateCapacity(long capacity)
1:     public void setCapacity(long capacity)
/////////////////////////////////////////////////////////////////////////
1:     public long weightedSize()
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:5c7ccb0
commit:c9270f4
/////////////////////////////////////////////////////////////////////////
1:     public boolean putIfAbsent(K key, V value)
0:     {
1:         return map.putIfAbsent(key, value);
0:     }
0: 
1:     public boolean replace(K key, V old, V value)
0:     {
1:         return map.replace(key, old, value);
0:     }
0: 
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: package org.apache.cassandra.cache;
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
1: public class InstrumentingCache<K, V>
/////////////////////////////////////////////////////////////////////////
0:     public InstrumentingCache(ICache<K, V> map)
/////////////////////////////////////////////////////////////////////////
0:     public int weightedSize()
1:         return map.weightedSize();
/////////////////////////////////////////////////////////////////////////
1:     public boolean containsKey(K key)
0:     {
1:         return map.containsKey(key);
0:     }
0: 
author:Brandon Williams
-------------------------------------------------------------------------------
commit:4b64659
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public Set<Map.Entry<K, V>> getEntrySet()
0:     {
0:         return map.entrySet();
0:     }
============================================================================