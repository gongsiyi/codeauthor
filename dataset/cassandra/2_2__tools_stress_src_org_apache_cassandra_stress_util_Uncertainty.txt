1:2e1e98a: package org.apache.cassandra.stress.util;
1:9f14856: /*
1:9f14856:  * 
1:9f14856:  * Licensed to the Apache Software Foundation (ASF) under one
1:9f14856:  * or more contributor license agreements.  See the NOTICE file
1:9f14856:  * distributed with this work for additional information
1:9f14856:  * regarding copyright ownership.  The ASF licenses this file
1:9f14856:  * to you under the Apache License, Version 2.0 (the
1:9f14856:  * "License"); you may not use this file except in compliance
1:9f14856:  * with the License.  You may obtain a copy of the License at
1:9f14856:  * 
1:9f14856:  *   http://www.apache.org/licenses/LICENSE-2.0
1:9f14856:  * 
1:9f14856:  * Unless required by applicable law or agreed to in writing,
1:9f14856:  * software distributed under the License is distributed on an
1:9f14856:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:9f14856:  * KIND, either express or implied.  See the License for the
1:9f14856:  * specific language governing permissions and limitations
1:9f14856:  * under the License.
1:9f14856:  * 
1:9f14856:  */
1:9f14856: 
1:2e1e98a: 
1:2e1e98a: import java.util.concurrent.CopyOnWriteArrayList;
1:2e1e98a: import java.util.concurrent.CountDownLatch;
1:2e1e98a: 
1:2e1e98a: // TODO: do not assume normal distribution of measurements.
1:2e1e98a: public class Uncertainty
1:2e1e98a: {
1:2e1e98a: 
1:2e1e98a:     private int measurements;
1:2e1e98a:     private double sumsquares;
1:2e1e98a:     private double sum;
1:2e1e98a:     private double stdev;
1:2e1e98a:     private double mean;
1:2e1e98a:     private double uncertainty;
1:2e1e98a: 
1:2e1e98a:     private CopyOnWriteArrayList<WaitForTargetUncertainty> waiting = new CopyOnWriteArrayList<>();
1:2e1e98a: 
1:2e1e98a:     private static final class WaitForTargetUncertainty
1:2e1e98a:     {
1:2e1e98a:         final double targetUncertainty;
1:2e1e98a:         final int minMeasurements;
1:2e1e98a:         final int maxMeasurements;
1:2e1e98a:         final CountDownLatch latch = new CountDownLatch(1);
1:2e1e98a: 
1:2e1e98a:         private WaitForTargetUncertainty(double targetUncertainty, int minMeasurements, int maxMeasurements)
1:2e1e98a:         {
1:2e1e98a:             this.targetUncertainty = targetUncertainty;
1:2e1e98a:             this.minMeasurements = minMeasurements;
1:2e1e98a:             this.maxMeasurements = maxMeasurements;
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:         void await() throws InterruptedException
1:2e1e98a:         {
1:2e1e98a:             latch.await();
1:2e1e98a:         }
1:2e1e98a: 
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void update(double value)
1:2e1e98a:     {
1:2e1e98a:         measurements++;
1:2e1e98a:         sumsquares += value * value;
1:2e1e98a:         sum += value;
1:2e1e98a:         mean = sum / measurements;
1:2e1e98a:         stdev = Math.sqrt((sumsquares / measurements) - (mean * mean));
1:2e1e98a:         uncertainty = (stdev / Math.sqrt(measurements)) / mean;
1:2e1e98a: 
1:2e1e98a:         for (WaitForTargetUncertainty waiter : waiting)
1:2e1e98a:         {
1:2e1e98a:             if ((uncertainty < waiter.targetUncertainty && measurements >= waiter.minMeasurements) || (measurements >= waiter.maxMeasurements))
1:2e1e98a:             {
1:2e1e98a:                 waiter.latch.countDown();
1:2e1e98a:                 // can safely remove as working over snapshot with COWArrayList
1:2e1e98a:                 waiting.remove(waiter);
1:2e1e98a:             }
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void await(double targetUncertainty, int minMeasurements, int maxMeasurements) throws InterruptedException
1:2e1e98a:     {
1:2e1e98a:         final WaitForTargetUncertainty wait = new WaitForTargetUncertainty(targetUncertainty, minMeasurements, maxMeasurements);
1:2e1e98a:         waiting.add(wait);
1:2e1e98a:         wait.await();
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public double getUncertainty()
1:2e1e98a:     {
1:2e1e98a:         return uncertainty;
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a:     public void wakeAll()
1:2e1e98a:     {
1:2e1e98a:         for (WaitForTargetUncertainty waiting : this.waiting)
1:2e1e98a:         {
1:2e1e98a:             waiting.latch.countDown();
1:2e1e98a:             this.waiting.remove(waiting);
1:2e1e98a:         }
1:2e1e98a:     }
1:2e1e98a: 
1:2e1e98a: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:9f14856
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:belliottsmith
-------------------------------------------------------------------------------
commit:2e1e98a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.stress.util;
1: 
1: import java.util.concurrent.CopyOnWriteArrayList;
1: import java.util.concurrent.CountDownLatch;
1: 
1: // TODO: do not assume normal distribution of measurements.
1: public class Uncertainty
1: {
1: 
1:     private int measurements;
1:     private double sumsquares;
1:     private double sum;
1:     private double stdev;
1:     private double mean;
1:     private double uncertainty;
1: 
1:     private CopyOnWriteArrayList<WaitForTargetUncertainty> waiting = new CopyOnWriteArrayList<>();
1: 
1:     private static final class WaitForTargetUncertainty
1:     {
1:         final double targetUncertainty;
1:         final int minMeasurements;
1:         final int maxMeasurements;
1:         final CountDownLatch latch = new CountDownLatch(1);
1: 
1:         private WaitForTargetUncertainty(double targetUncertainty, int minMeasurements, int maxMeasurements)
1:         {
1:             this.targetUncertainty = targetUncertainty;
1:             this.minMeasurements = minMeasurements;
1:             this.maxMeasurements = maxMeasurements;
1:         }
1: 
1:         void await() throws InterruptedException
1:         {
1:             latch.await();
1:         }
1: 
1:     }
1: 
1:     public void update(double value)
1:     {
1:         measurements++;
1:         sumsquares += value * value;
1:         sum += value;
1:         mean = sum / measurements;
1:         stdev = Math.sqrt((sumsquares / measurements) - (mean * mean));
1:         uncertainty = (stdev / Math.sqrt(measurements)) / mean;
1: 
1:         for (WaitForTargetUncertainty waiter : waiting)
1:         {
1:             if ((uncertainty < waiter.targetUncertainty && measurements >= waiter.minMeasurements) || (measurements >= waiter.maxMeasurements))
1:             {
1:                 waiter.latch.countDown();
1:                 // can safely remove as working over snapshot with COWArrayList
1:                 waiting.remove(waiter);
1:             }
1:         }
1:     }
1: 
1:     public void await(double targetUncertainty, int minMeasurements, int maxMeasurements) throws InterruptedException
1:     {
1:         final WaitForTargetUncertainty wait = new WaitForTargetUncertainty(targetUncertainty, minMeasurements, maxMeasurements);
1:         waiting.add(wait);
1:         wait.await();
1:     }
1: 
1:     public double getUncertainty()
1:     {
1:         return uncertainty;
1:     }
1: 
1:     public void wakeAll()
1:     {
1:         for (WaitForTargetUncertainty waiting : this.waiting)
1:         {
1:             waiting.latch.countDown();
1:             this.waiting.remove(waiting);
1:         }
1:     }
1: 
1: }
============================================================================