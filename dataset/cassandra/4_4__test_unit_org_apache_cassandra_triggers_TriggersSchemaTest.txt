1:553401d: /*
1:553401d:  * Licensed to the Apache Software Foundation (ASF) under one
1:553401d:  * or more contributor license agreements.  See the NOTICE file
1:553401d:  * distributed with this work for additional information
1:553401d:  * regarding copyright ownership.  The ASF licenses this file
1:553401d:  * to you under the Apache License, Version 2.0 (the
1:553401d:  * "License"); you may not use this file except in compliance
1:553401d:  * with the License.  You may obtain a copy of the License at
1:553401d:  *
1:553401d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:553401d:  *
1:553401d:  * Unless required by applicable law or agreed to in writing, software
1:553401d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:553401d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:553401d:  * See the License for the specific language governing permissions and
1:553401d:  * limitations under the License.
1:553401d:  */
1:553401d: package org.apache.cassandra.triggers;
2:553401d: 
1:d2a3827: import org.junit.BeforeClass;
1:553401d: import org.junit.Test;
1:553401d: 
1:553401d: import org.apache.cassandra.SchemaLoader;
1:553401d: import org.apache.cassandra.config.CFMetaData;
1:553401d: import org.apache.cassandra.config.Schema;
1:d2a3827: import org.apache.cassandra.exceptions.ConfigurationException;
1:a89597d: import org.apache.cassandra.schema.KeyspaceMetadata;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:31e3f61: import org.apache.cassandra.schema.Tables;
1:16044a6: import org.apache.cassandra.schema.TriggerMetadata;
1:553401d: import org.apache.cassandra.service.MigrationManager;
1:553401d: 
1:a991b64: import static org.junit.Assert.*;
1:553401d: 
1:d2a3827: public class TriggersSchemaTest
1:553401d: {
1:553401d:     String ksName = "ks" + System.nanoTime();
1:553401d:     String cfName = "cf" + System.nanoTime();
1:553401d:     String triggerName = "trigger_" + System.nanoTime();
1:553401d:     String triggerClass = "org.apache.cassandra.triggers.NoSuchTrigger.class";
1:553401d: 
1:d2a3827:     @BeforeClass
1:d2a3827:     public static void beforeTest() throws ConfigurationException
1:d2a3827:     {
1:d2a3827:         SchemaLoader.loadSchema();
1:d2a3827:     }
1:d2a3827: 
1:553401d:     @Test
1:553401d:     public void newKsContainsCfWithTrigger() throws Exception
1:553401d:     {
1:16044a6:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:553401d:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
1:16044a6:         cfm1.triggers(cfm1.getTriggers().with(td));
1:a89597d:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
1:553401d:         MigrationManager.announceNewKeyspace(ksm);
1:553401d: 
1:553401d:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName);
1:553401d:         assertFalse(cfm2.getTriggers().isEmpty());
1:553401d:         assertEquals(1, cfm2.getTriggers().size());
1:16044a6:         assertEquals(td, cfm2.getTriggers().get(triggerName).get());
1:553401d:     }
1:553401d: 
1:553401d:     @Test
1:553401d:     public void addNewCfWithTriggerToKs() throws Exception
1:553401d:     {
1:a89597d:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1));
1:553401d:         MigrationManager.announceNewKeyspace(ksm);
1:553401d: 
1:553401d:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
1:16044a6:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:16044a6:         cfm1.triggers(cfm1.getTriggers().with(td));
1:553401d: 
1:553401d:         MigrationManager.announceNewColumnFamily(cfm1);
1:553401d: 
1:553401d:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName);
1:553401d:         assertFalse(cfm2.getTriggers().isEmpty());
1:553401d:         assertEquals(1, cfm2.getTriggers().size());
1:16044a6:         assertEquals(td, cfm2.getTriggers().get(triggerName).get());
1:553401d:     }
1:553401d: 
1:553401d:     @Test
1:553401d:     public void addTriggerToCf() throws Exception
1:553401d:     {
1:553401d:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
1:a89597d:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
1:553401d:         MigrationManager.announceNewKeyspace(ksm);
1:553401d: 
1:69bfca0:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).copy();
1:16044a6:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:16044a6:         cfm2.triggers(cfm2.getTriggers().with(td));
1:e5c4027:         MigrationManager.announceColumnFamilyUpdate(cfm2);
1:553401d: 
1:553401d:         CFMetaData cfm3 = Schema.instance.getCFMetaData(ksName, cfName);
1:553401d:         assertFalse(cfm3.getTriggers().isEmpty());
1:553401d:         assertEquals(1, cfm3.getTriggers().size());
1:16044a6:         assertEquals(td, cfm3.getTriggers().get(triggerName).get());
1:553401d:     }
1:553401d: 
1:553401d:     @Test
1:553401d:     public void removeTriggerFromCf() throws Exception
1:553401d:     {
1:16044a6:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:553401d:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
1:16044a6:         cfm1.triggers(cfm1.getTriggers().with(td));
1:a89597d:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
1:553401d:         MigrationManager.announceNewKeyspace(ksm);
1:553401d: 
1:69bfca0:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).copy();
1:16044a6:         cfm2.triggers(cfm2.getTriggers().without(triggerName));
1:e5c4027:         MigrationManager.announceColumnFamilyUpdate(cfm2);
1:553401d: 
1:69bfca0:         CFMetaData cfm3 = Schema.instance.getCFMetaData(ksName, cfName).copy();
1:553401d:         assertTrue(cfm3.getTriggers().isEmpty());
1:553401d:     }
1:553401d: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3079ae6
commit:e5c4027
/////////////////////////////////////////////////////////////////////////
1:         MigrationManager.announceColumnFamilyUpdate(cfm2);
/////////////////////////////////////////////////////////////////////////
1:         MigrationManager.announceColumnFamilyUpdate(cfm2);
commit:16044a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.TriggerMetadata;
/////////////////////////////////////////////////////////////////////////
1:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:         cfm1.triggers(cfm1.getTriggers().with(td));
1:         assertEquals(td, cfm2.getTriggers().get(triggerName).get());
/////////////////////////////////////////////////////////////////////////
1:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:         cfm1.triggers(cfm1.getTriggers().with(td));
1:         assertEquals(td, cfm2.getTriggers().get(triggerName).get());
/////////////////////////////////////////////////////////////////////////
1:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:         cfm2.triggers(cfm2.getTriggers().with(td));
1:         assertEquals(td, cfm3.getTriggers().get(triggerName).get());
1:         TriggerMetadata td = TriggerMetadata.create(triggerName, triggerClass);
1:         cfm1.triggers(cfm1.getTriggers().with(td));
1:         cfm2.triggers(cfm2.getTriggers().without(triggerName));
commit:a89597d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceMetadata;
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1));
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
/////////////////////////////////////////////////////////////////////////
1:         KeyspaceMetadata ksm = KeyspaceMetadata.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
1: import org.apache.cassandra.schema.Tables;
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.create(ksName, KeyspaceParams.simple(1));
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
/////////////////////////////////////////////////////////////////////////
0:         KSMetaData ksm = KSMetaData.create(ksName, KeyspaceParams.simple(1), Tables.of(cfm1));
commit:69bfca0
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).copy();
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).copy();
1:         CFMetaData cfm3 = Schema.instance.getCFMetaData(ksName, cfName).copy();
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 Collections.singletonMap("replication_factor", "1"),
0:                 true,
0:                 Collections.singletonList(cfm1));
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 Collections.singletonMap("replication_factor", "1"),
0:                 true,
0:                 Collections.EMPTY_LIST);
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 Collections.singletonMap("replication_factor", "1"),
0:                 true,
0:                 Collections.singletonList(cfm1));
/////////////////////////////////////////////////////////////////////////
0:                 SimpleStrategy.class,
0:                 Collections.singletonMap("replication_factor", "1"),
0:                 true,
0:                 Collections.singletonList(cfm1));
author:lyubent
-------------------------------------------------------------------------------
commit:d2a3827
/////////////////////////////////////////////////////////////////////////
1: import org.junit.BeforeClass;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1: public class TriggersSchemaTest
1:     @BeforeClass
1:     public static void beforeTest() throws ConfigurationException
1:     {
1:         SchemaLoader.loadSchema();
1:     }
1: 
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:553401d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.triggers;
1: 
0: import java.util.Collections;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.config.CFMetaData;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.config.TriggerDefinition;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.service.MigrationManager;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
1: 
0: public class TriggersSchemaTest extends SchemaLoader
1: {
1:     String ksName = "ks" + System.nanoTime();
1:     String cfName = "cf" + System.nanoTime();
1:     String triggerName = "trigger_" + System.nanoTime();
1:     String triggerClass = "org.apache.cassandra.triggers.NoSuchTrigger.class";
1: 
1:     @Test
1:     public void newKsContainsCfWithTrigger() throws Exception
1:     {
0:         TriggerDefinition td = TriggerDefinition.create(triggerName, triggerClass);
1:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
0:         cfm1.addTriggerDefinition(td);
0:         KSMetaData ksm = KSMetaData.newKeyspace(ksName,
0:                                                 SimpleStrategy.class,
0:                                                 Collections.singletonMap("replication_factor", "1"),
0:                                                 true,
0:                                                 Collections.singletonList(cfm1));
1:         MigrationManager.announceNewKeyspace(ksm);
1: 
1:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName);
1:         assertFalse(cfm2.getTriggers().isEmpty());
1:         assertEquals(1, cfm2.getTriggers().size());
0:         assertEquals(td, cfm2.getTriggers().get(triggerName));
1:     }
1: 
1:     @Test
1:     public void addNewCfWithTriggerToKs() throws Exception
1:     {
0:         KSMetaData ksm = KSMetaData.newKeyspace(ksName,
0:                                                 SimpleStrategy.class,
0:                                                 Collections.singletonMap("replication_factor", "1"),
0:                                                 true,
0:                                                 Collections.EMPTY_LIST);
1:         MigrationManager.announceNewKeyspace(ksm);
1: 
1:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
0:         TriggerDefinition td = TriggerDefinition.create(triggerName, triggerClass);
0:         cfm1.addTriggerDefinition(td);
1: 
1:         MigrationManager.announceNewColumnFamily(cfm1);
1: 
1:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName);
1:         assertFalse(cfm2.getTriggers().isEmpty());
1:         assertEquals(1, cfm2.getTriggers().size());
0:         assertEquals(td, cfm2.getTriggers().get(triggerName));
1:     }
1: 
1:     @Test
1:     public void addTriggerToCf() throws Exception
1:     {
1:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
0:         KSMetaData ksm = KSMetaData.newKeyspace(ksName,
0:                                                 SimpleStrategy.class,
0:                                                 Collections.singletonMap("replication_factor", "1"),
0:                                                 true,
0:                                                 Collections.singletonList(cfm1));
1:         MigrationManager.announceNewKeyspace(ksm);
1: 
0:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).clone();
0:         TriggerDefinition td = TriggerDefinition.create(triggerName, triggerClass);
0:         cfm2.addTriggerDefinition(td);
0:         MigrationManager.announceColumnFamilyUpdate(cfm2, false);
1: 
1:         CFMetaData cfm3 = Schema.instance.getCFMetaData(ksName, cfName);
1:         assertFalse(cfm3.getTriggers().isEmpty());
1:         assertEquals(1, cfm3.getTriggers().size());
0:         assertEquals(td, cfm3.getTriggers().get(triggerName));
1:     }
1: 
1:     @Test
1:     public void removeTriggerFromCf() throws Exception
1:     {
0:         TriggerDefinition td = TriggerDefinition.create(triggerName, triggerClass);
1:         CFMetaData cfm1 = CFMetaData.compile(String.format("CREATE TABLE %s (k int PRIMARY KEY, v int)", cfName), ksName);
0:         cfm1.addTriggerDefinition(td);
0:         KSMetaData ksm = KSMetaData.newKeyspace(ksName,
0:                                                 SimpleStrategy.class,
0:                                                 Collections.singletonMap("replication_factor", "1"),
0:                                                 true,
0:                                                 Collections.singletonList(cfm1));
1:         MigrationManager.announceNewKeyspace(ksm);
1: 
0:         CFMetaData cfm2 = Schema.instance.getCFMetaData(ksName, cfName).clone();
0:         cfm2.removeTrigger(triggerName);
0:         MigrationManager.announceColumnFamilyUpdate(cfm2, false);
1: 
0:         CFMetaData cfm3 = Schema.instance.getCFMetaData(ksName, cfName).clone();
1:         assertTrue(cfm3.getTriggers().isEmpty());
1:     }
1: }
============================================================================