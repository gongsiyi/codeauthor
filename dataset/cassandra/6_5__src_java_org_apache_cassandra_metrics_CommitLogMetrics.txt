1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
3:69cedbf: 
1:8896a70: import com.codahale.metrics.Gauge;
1:8896a70: import com.codahale.metrics.Timer;
1:22e18f5: import org.apache.cassandra.db.commitlog.AbstractCommitLogService;
1:e31e216: import org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager;
1:4b54b8a: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:69cedbf: 
1:69cedbf: /**
1:69cedbf:  * Metrics for commit log
1:69cedbf:  */
1:69cedbf: public class CommitLogMetrics
1:69cedbf: {
1:eb390d0:     public static final MetricNameFactory factory = new DefaultNameFactory("CommitLog");
1:69cedbf: 
1:69cedbf:     /** Number of completed tasks */
1:44f8254:     public Gauge<Long> completedTasks;
1:69cedbf:     /** Number of pending tasks */
1:44f8254:     public Gauge<Long> pendingTasks;
1:69cedbf:     /** Current size used by all the commit log segments */
1:44f8254:     public Gauge<Long> totalCommitLogSize;
1:4b54b8a:     /** Time spent waiting for a CLS to be allocated - under normal conditions this should be zero */
1:4b54b8a:     public final Timer waitingOnSegmentAllocation;
1:4b54b8a:     /** The time spent waiting on CL sync; for Periodic this is only occurs when the sync is lagging its sync interval */
1:4b54b8a:     public final Timer waitingOnCommit;
1:e31e216: 
1:44f8254:     public CommitLogMetrics()
1:44f8254:     {
1:44f8254:         waitingOnSegmentAllocation = Metrics.timer(factory.createMetricName("WaitingOnSegmentAllocation"));
1:44f8254:         waitingOnCommit = Metrics.timer(factory.createMetricName("WaitingOnCommit"));
1:44f8254:     }
1:44f8254: 
1:e31e216:     public void attach(final AbstractCommitLogService service, final AbstractCommitLogSegmentManager segmentManager)
1:69cedbf:     {
1:8896a70:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:22e18f5:                 return service.getCompletedTasks();
1:69cedbf:             }
1:69cedbf:         });
1:8896a70:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:22e18f5:                 return service.getPendingTasks();
1:69cedbf:             }
1:69cedbf:         });
1:8896a70:         totalCommitLogSize = Metrics.register(factory.createMetricName("TotalCommitLogSize"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:e31e216:                 return segmentManager.onDiskSize();
1:69cedbf:             }
1:69cedbf:         });
1:69cedbf:     }
1:69cedbf: }
============================================================================
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void attach(final AbstractCommitLogService service, final AbstractCommitLogSegmentManager segmentManager)
/////////////////////////////////////////////////////////////////////////
1:                 return segmentManager.onDiskSize();
author:Jason Brown
-------------------------------------------------------------------------------
commit:675a0f4
/////////////////////////////////////////////////////////////////////////
0:                 return allocator.onDiskSize();
author:blambov
-------------------------------------------------------------------------------
commit:44f8254
/////////////////////////////////////////////////////////////////////////
1:     public Gauge<Long> completedTasks;
1:     public Gauge<Long> pendingTasks;
1:     public Gauge<Long> totalCommitLogSize;
1:     
1:     public CommitLogMetrics()
1:     {
1:         waitingOnSegmentAllocation = Metrics.timer(factory.createMetricName("WaitingOnSegmentAllocation"));
1:         waitingOnCommit = Metrics.timer(factory.createMetricName("WaitingOnCommit"));
1:     }
0:     public void attach(final AbstractCommitLogService service, final CommitLogSegmentManager allocator)
/////////////////////////////////////////////////////////////////////////
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.Timer;
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
/////////////////////////////////////////////////////////////////////////
1:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:             public Long getValue()
1:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Long>()
1:             public Long getValue()
1:         totalCommitLogSize = Metrics.register(factory.createMetricName("TotalCommitLogSize"), new Gauge<Long>()
1:             public Long getValue()
0:         waitingOnSegmentAllocation = Metrics.timer(factory.createMetricName("WaitingOnSegmentAllocation"));
0:         waitingOnCommit = Metrics.timer(factory.createMetricName("WaitingOnCommit"));
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
0: import com.yammer.metrics.core.Timer;
0: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:     /** Time spent waiting for a CLS to be allocated - under normal conditions this should be zero */
1:     public final Timer waitingOnSegmentAllocation;
1:     /** The time spent waiting on CL sync; for Periodic this is only occurs when the sync is lagging its sync interval */
1:     public final Timer waitingOnCommit;
/////////////////////////////////////////////////////////////////////////
0:         waitingOnSegmentAllocation = Metrics.newTimer(factory.createMetricName("WaitingOnSegmentAllocation"), TimeUnit.MICROSECONDS, TimeUnit.SECONDS);
0:         waitingOnCommit = Metrics.newTimer(factory.createMetricName("WaitingOnCommit"), TimeUnit.MICROSECONDS, TimeUnit.SECONDS);
commit:22e18f5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.commitlog.AbstractCommitLogService;
0: import org.apache.cassandra.db.commitlog.CommitLogSegmentManager;
/////////////////////////////////////////////////////////////////////////
0:     public CommitLogMetrics(final AbstractCommitLogService service, final CommitLogSegmentManager allocator)
1:                 return service.getCompletedTasks();
1:                 return service.getPendingTasks();
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final MetricNameFactory factory = new DefaultNameFactory("CommitLog");
/////////////////////////////////////////////////////////////////////////
0:         completedTasks = Metrics.newGauge(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
0:         pendingTasks = Metrics.newGauge(factory.createMetricName("PendingTasks"), new Gauge<Long>()
0:         totalCommitLogSize = Metrics.newGauge(factory.createMetricName("TotalCommitLogSize"), new Gauge<Long>()
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.core.MetricName;
1: 
0: import org.apache.cassandra.db.commitlog.CommitLogAllocator;
0: import org.apache.cassandra.db.commitlog.ICommitLogExecutorService;
1: 
1: /**
1:  * Metrics for commit log
1:  */
1: public class CommitLogMetrics
1: {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
0:     public static final String TYPE_NAME = "CommitLog";
1: 
1:     /** Number of completed tasks */
0:     public final Gauge<Long> completedTasks;
1:     /** Number of pending tasks */
0:     public final Gauge<Long> pendingTasks;
1:     /** Current size used by all the commit log segments */
0:     public final Gauge<Long> totalCommitLogSize;
1: 
0:     public CommitLogMetrics(final ICommitLogExecutorService executor, final CommitLogAllocator allocator)
1:     {
0:         completedTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "CompletedTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return executor.getCompletedTasks();
1:             }
1:         });
0:         pendingTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "PendingTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return executor.getPendingTasks();
1:             }
1:         });
0:         totalCommitLogSize = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "TotalCommitLogSize"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
0:                 return allocator.bytesUsed();
1:             }
1:         });
1:     }
1: }
============================================================================