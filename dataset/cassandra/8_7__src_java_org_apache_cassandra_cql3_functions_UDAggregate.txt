1:e2f35c7: /*
1:e2f35c7:  * Licensed to the Apache Software Foundation (ASF) under one
1:e2f35c7:  * or more contributor license agreements.  See the NOTICE file
1:e2f35c7:  * distributed with this work for additional information
1:e2f35c7:  * regarding copyright ownership.  The ASF licenses this file
1:e2f35c7:  * to you under the Apache License, Version 2.0 (the
1:e2f35c7:  * "License"); you may not use this file except in compliance
1:e2f35c7:  * with the License.  You may obtain a copy of the License at
1:e2f35c7:  *
1:e2f35c7:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e2f35c7:  *
1:e2f35c7:  * Unless required by applicable law or agreed to in writing, software
1:e2f35c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e2f35c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e2f35c7:  * See the License for the specific language governing permissions and
1:e2f35c7:  * limitations under the License.
1:e2f35c7:  */
1:e2f35c7: package org.apache.cassandra.cql3.functions;
11:e2f35c7: 
1:e2f35c7: import java.nio.ByteBuffer;
1:e2f35c7: import java.util.*;
1:e2f35c7: 
1:e2f35c7: import com.google.common.base.Objects;
1:e2f35c7: import org.slf4j.Logger;
1:e2f35c7: import org.slf4j.LoggerFactory;
1:e2f35c7: 
1:adffb36: import com.datastax.driver.core.TypeCodec;
1:e2f35c7: import org.apache.cassandra.db.marshal.AbstractType;
1:cb5897f: import org.apache.cassandra.exceptions.InvalidRequestException;
1:3566843: import org.apache.cassandra.schema.Functions;
1:e651fdd: import org.apache.cassandra.tracing.Tracing;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:e2f35c7: 
1:e2f35c7: /**
1:e2f35c7:  * Base class for user-defined-aggregates.
1:e2f35c7:  */
1:e2f35c7: public class UDAggregate extends AbstractFunction implements AggregateFunction
9:e2f35c7: {
1:e2f35c7:     protected static final Logger logger = LoggerFactory.getLogger(UDAggregate.class);
1:e2f35c7: 
1:adffb36:     private final AbstractType<?> stateType;
1:adffb36:     private final TypeCodec stateTypeCodec;
1:adffb36:     private final TypeCodec returnTypeCodec;
1:e2f35c7:     protected final ByteBuffer initcond;
1:e2f35c7:     private final ScalarFunction stateFunction;
1:e2f35c7:     private final ScalarFunction finalFunction;
1:e2f35c7: 
1:e2f35c7:     public UDAggregate(FunctionName name,
1:e2f35c7:                        List<AbstractType<?>> argTypes,
1:e2f35c7:                        AbstractType<?> returnType,
1:e2f35c7:                        ScalarFunction stateFunc,
1:e2f35c7:                        ScalarFunction finalFunc,
1:e2f35c7:                        ByteBuffer initcond)
1:e2f35c7:     {
1:e2f35c7:         super(name, argTypes, returnType);
1:e2f35c7:         this.stateFunction = stateFunc;
1:e2f35c7:         this.finalFunction = finalFunc;
1:e2f35c7:         this.stateType = stateFunc != null ? stateFunc.returnType() : null;
1:adffb36:         this.stateTypeCodec = stateType != null ? UDHelper.codecFor(UDHelper.driverType(stateType)) : null;
1:adffb36:         this.returnTypeCodec = returnType != null ? UDHelper.codecFor(UDHelper.driverType(returnType)) : null;
1:e2f35c7:         this.initcond = initcond;
10:e2f35c7:     }
1:e2f35c7: 
1:e1eed52:     public static UDAggregate create(Functions functions,
1:e1eed52:                                      FunctionName name,
1:3e9d345:                                      List<AbstractType<?>> argTypes,
1:3e9d345:                                      AbstractType<?> returnType,
1:3e9d345:                                      FunctionName stateFunc,
1:3e9d345:                                      FunctionName finalFunc,
1:3e9d345:                                      AbstractType<?> stateType,
1:3e9d345:                                      ByteBuffer initcond)
1:e2f35c7:     throws InvalidRequestException
1:e2f35c7:     {
1:e2f35c7:         List<AbstractType<?>> stateTypes = new ArrayList<>(argTypes.size() + 1);
1:e2f35c7:         stateTypes.add(stateType);
1:e2f35c7:         stateTypes.addAll(argTypes);
1:adffb36:         List<AbstractType<?>> finalTypes = Collections.singletonList(stateType);
1:3e9d345:         return new UDAggregate(name,
1:3e9d345:                                argTypes,
1:3e9d345:                                returnType,
1:e1eed52:                                resolveScalar(functions, name, stateFunc, stateTypes),
1:e1eed52:                                finalFunc != null ? resolveScalar(functions, name, finalFunc, finalTypes) : null,
1:e2f35c7:                                initcond);
1:e2f35c7:     }
1:e2f35c7: 
1:3e9d345:     public static UDAggregate createBroken(FunctionName name,
1:3e9d345:                                            List<AbstractType<?>> argTypes,
1:3e9d345:                                            AbstractType<?> returnType,
1:3e9d345:                                            ByteBuffer initcond,
1:adffb36:                                            InvalidRequestException reason)
1:e2f35c7:     {
1:3e9d345:         return new UDAggregate(name, argTypes, returnType, null, null, initcond)
1:e2f35c7:         {
1:e2f35c7:             public Aggregate newAggregate() throws InvalidRequestException
1:e2f35c7:             {
1:e2f35c7:                 throw new InvalidRequestException(String.format("Aggregate '%s' exists but hasn't been loaded successfully for the following reason: %s. "
1:3e9d345:                                                                 + "Please see the server log for more details",
1:3e9d345:                                                                 this,
1:3e9d345:                                                                 reason.getMessage()));
1:e2f35c7:             }
1:e2f35c7:         };
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     public boolean hasReferenceTo(Function function)
1:e2f35c7:     {
1:e2f35c7:         return stateFunction == function || finalFunction == function;
1:e2f35c7:     }
1:e2f35c7: 
1:89464ea:     @Override
1:89464ea:     public void addFunctionsTo(List<Function> functions)
1:e2f35c7:     {
1:89464ea:         functions.add(this);
1:89464ea:         if (stateFunction != null)
1:e2f35c7:         {
1:89464ea:             stateFunction.addFunctionsTo(functions);
1:e2f35c7: 
1:e2f35c7:             if (finalFunction != null)
1:89464ea:                 finalFunction.addFunctionsTo(functions);
1:e2f35c7:         }
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     public boolean isAggregate()
1:e2f35c7:     {
1:e2f35c7:         return true;
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     public boolean isNative()
1:e2f35c7:     {
2:e2f35c7:         return false;
1:e2f35c7:     }
1:e2f35c7: 
1:3e9d345:     public ScalarFunction stateFunction()
1:e2f35c7:     {
1:3e9d345:         return stateFunction;
1:e2f35c7:     }
1:e2f35c7: 
1:3e9d345:     public ScalarFunction finalFunction()
1:e2f35c7:     {
1:3e9d345:         return finalFunction;
1:e2f35c7:     }
1:e2f35c7: 
1:3e9d345:     public ByteBuffer initialCondition()
1:e2f35c7:     {
1:3e9d345:         return initcond;
1:e2f35c7:     }
1:e2f35c7: 
1:3e9d345:     public AbstractType<?> stateType()
1:e2f35c7:     {
1:3e9d345:         return stateType;
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     public Aggregate newAggregate() throws InvalidRequestException
1:e2f35c7:     {
1:e2f35c7:         return new Aggregate()
1:e2f35c7:         {
1:e651fdd:             private long stateFunctionCount;
1:e651fdd:             private long stateFunctionDuration;
1:e2f35c7: 
1:adffb36:             private Object state;
1:adffb36:             private boolean needsInit = true;
1:e2f35c7: 
1:e0adc16:             public void addInput(ProtocolVersion protocolVersion, List<ByteBuffer> values) throws InvalidRequestException
1:e2f35c7:             {
1:adffb36:                 if (needsInit)
1:adffb36:                 {
1:adffb36:                     state = initcond != null ? UDHelper.deserialize(stateTypeCodec, protocolVersion, initcond.duplicate()) : null;
1:adffb36:                     stateFunctionDuration = 0;
1:adffb36:                     stateFunctionCount = 0;
1:adffb36:                     needsInit = false;
1:adffb36:                 }
1:adffb36: 
1:e651fdd:                 long startTime = System.nanoTime();
1:e651fdd:                 stateFunctionCount++;
1:1937bed:                 if (stateFunction instanceof UDFunction)
1:1937bed:                 {
1:1937bed:                     UDFunction udf = (UDFunction)stateFunction;
1:adffb36:                     if (udf.isCallableWrtNullable(values))
1:adffb36:                         state = udf.executeForAggregate(protocolVersion, state, values);
1:1937bed:                 }
1:1937bed:                 else
1:1937bed:                 {
1:adffb36:                     throw new UnsupportedOperationException("UDAs only support UDFs");
1:1937bed:                 }
1:e651fdd:                 stateFunctionDuration += (System.nanoTime() - startTime) / 1000;
1:e2f35c7:             }
1:e2f35c7: 
1:e0adc16:             public ByteBuffer compute(ProtocolVersion protocolVersion) throws InvalidRequestException
1:e2f35c7:             {
1:adffb36:                 assert !needsInit;
1:adffb36: 
1:e651fdd:                 // final function is traced in UDFunction
1:e651fdd:                 Tracing.trace("Executed UDA {}: {} call(s) to state function {} in {}\u03bcs", name(), stateFunctionCount, stateFunction.name(), stateFunctionDuration);
1:e2f35c7:                 if (finalFunction == null)
1:adffb36:                     return UDFunction.decompose(stateTypeCodec, protocolVersion, state);
1:e2f35c7: 
1:adffb36:                 if (finalFunction instanceof UDFunction)
1:adffb36:                 {
1:adffb36:                     UDFunction udf = (UDFunction)finalFunction;
1:adffb36:                     Object result = udf.executeForAggregate(protocolVersion, state, Collections.emptyList());
1:adffb36:                     return UDFunction.decompose(returnTypeCodec, protocolVersion, result);
1:adffb36:                 }
1:adffb36:                 throw new UnsupportedOperationException("UDAs only support UDFs");
1:e2f35c7:             }
1:e2f35c7: 
1:e2f35c7:             public void reset()
1:e2f35c7:             {
1:adffb36:                 needsInit = true;
1:e2f35c7:             }
1:e2f35c7:         };
1:e2f35c7:     }
1:e2f35c7: 
1:e1eed52:     private static ScalarFunction resolveScalar(Functions functions, FunctionName aName, FunctionName fName, List<AbstractType<?>> argTypes) throws InvalidRequestException
1:e2f35c7:     {
1:e1eed52:         Optional<Function> fun = functions.find(fName, argTypes);
1:3566843:         if (!fun.isPresent())
1:e2f35c7:             throw new InvalidRequestException(String.format("Referenced state function '%s %s' for aggregate '%s' does not exist",
1:3566843:                                                             fName,
1:3566843:                                                             Arrays.toString(UDHelper.driverTypes(argTypes)),
1:3566843:                                                             aName));
1:e2f35c7: 
1:3566843:         if (!(fun.get() instanceof ScalarFunction))
1:e2f35c7:             throw new InvalidRequestException(String.format("Referenced state function '%s %s' for aggregate '%s' is not a scalar function",
1:3566843:                                                             fName,
1:3566843:                                                             Arrays.toString(UDHelper.driverTypes(argTypes)),
1:3566843:                                                             aName));
1:3566843:         return (ScalarFunction) fun.get();
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     @Override
1:e2f35c7:     public boolean equals(Object o)
1:e2f35c7:     {
1:e2f35c7:         if (!(o instanceof UDAggregate))
1:e2f35c7:             return false;
1:e2f35c7: 
1:e2f35c7:         UDAggregate that = (UDAggregate) o;
1:3e9d345:         return Objects.equal(name, that.name)
1:3566843:             && Functions.typesMatch(argTypes, that.argTypes)
1:3566843:             && Functions.typesMatch(returnType, that.returnType)
1:3e9d345:             && Objects.equal(stateFunction, that.stateFunction)
1:3e9d345:             && Objects.equal(finalFunction, that.finalFunction)
1:677230d:             && ((stateType == that.stateType) || ((stateType != null) && stateType.equals(that.stateType, true)))  // ignore freezing
1:3e9d345:             && Objects.equal(initcond, that.initcond);
1:e2f35c7:     }
1:e2f35c7: 
1:e2f35c7:     @Override
1:e2f35c7:     public int hashCode()
1:e2f35c7:     {
1:af1c658:         return Objects.hashCode(name, Functions.typeHashCode(argTypes), Functions.typeHashCode(returnType), stateFunction, finalFunction, stateType, initcond);
1:e2f35c7:     }
1:e2f35c7: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:             public void addInput(ProtocolVersion protocolVersion, List<ByteBuffer> values) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:             public ByteBuffer compute(ProtocolVersion protocolVersion) throws InvalidRequestException
author:Robert Stupp
-------------------------------------------------------------------------------
commit:adffb36
/////////////////////////////////////////////////////////////////////////
1: import com.datastax.driver.core.TypeCodec;
/////////////////////////////////////////////////////////////////////////
1:     private final AbstractType<?> stateType;
1:     private final TypeCodec stateTypeCodec;
1:     private final TypeCodec returnTypeCodec;
/////////////////////////////////////////////////////////////////////////
1:         this.stateTypeCodec = stateType != null ? UDHelper.codecFor(UDHelper.driverType(stateType)) : null;
1:         this.returnTypeCodec = returnType != null ? UDHelper.codecFor(UDHelper.driverType(returnType)) : null;
/////////////////////////////////////////////////////////////////////////
1:         List<AbstractType<?>> finalTypes = Collections.singletonList(stateType);
/////////////////////////////////////////////////////////////////////////
1:                                            InvalidRequestException reason)
/////////////////////////////////////////////////////////////////////////
1:             private Object state;
1:             private boolean needsInit = true;
1:                 if (needsInit)
1:                 {
1:                     state = initcond != null ? UDHelper.deserialize(stateTypeCodec, protocolVersion, initcond.duplicate()) : null;
1:                     stateFunctionDuration = 0;
1:                     stateFunctionCount = 0;
1:                     needsInit = false;
1:                 }
1: 
1:                     if (udf.isCallableWrtNullable(values))
1:                         state = udf.executeForAggregate(protocolVersion, state, values);
1:                     throw new UnsupportedOperationException("UDAs only support UDFs");
1:                 assert !needsInit;
1: 
1:                     return UDFunction.decompose(stateTypeCodec, protocolVersion, state);
1:                 if (finalFunction instanceof UDFunction)
1:                 {
1:                     UDFunction udf = (UDFunction)finalFunction;
1:                     Object result = udf.executeForAggregate(protocolVersion, state, Collections.emptyList());
1:                     return UDFunction.decompose(returnTypeCodec, protocolVersion, result);
1:                 }
1:                 throw new UnsupportedOperationException("UDAs only support UDFs");
1:                 needsInit = true;
commit:e1eed52
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static UDAggregate create(Functions functions,
1:                                      FunctionName name,
/////////////////////////////////////////////////////////////////////////
1:                                resolveScalar(functions, name, stateFunc, stateTypes),
1:                                finalFunc != null ? resolveScalar(functions, name, finalFunc, finalTypes) : null,
/////////////////////////////////////////////////////////////////////////
1:     private static ScalarFunction resolveScalar(Functions functions, FunctionName aName, FunctionName fName, List<AbstractType<?>> argTypes) throws InvalidRequestException
1:         Optional<Function> fun = functions.find(fName, argTypes);
commit:5790b4a
/////////////////////////////////////////////////////////////////////////
0:                         state = udf.execute(protocolVersion, fArgs);
commit:030762a
commit:0c59c1f
commit:af1c658
/////////////////////////////////////////////////////////////////////////
1:         return Objects.hashCode(name, Functions.typeHashCode(argTypes), Functions.typeHashCode(returnType), stateFunction, finalFunction, stateType, initcond);
commit:1937bed
/////////////////////////////////////////////////////////////////////////
0:                 List<ByteBuffer> fArgs = new ArrayList<>(values.size() + 1);
0:                 fArgs.add(state);
0:                 fArgs.addAll(values);
1:                 if (stateFunction instanceof UDFunction)
1:                 {
1:                     UDFunction udf = (UDFunction)stateFunction;
0:                     if (udf.isCallableWrtNullable(fArgs))
0:                         state = udf.executeUserDefined(protocolVersion, fArgs);
1:                 }
1:                 else
1:                 {
0:                     state = stateFunction.execute(protocolVersion, fArgs);
1:                 }
0:                 List<ByteBuffer> fArgs = Collections.singletonList(state);
0:                 return finalFunction.execute(protocolVersion, fArgs);
commit:40a7e86
/////////////////////////////////////////////////////////////////////////
0:         if (stateFunction == null)
0:             return Collections.emptySet();
commit:e2f35c7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.*;
1: 
1: import com.google.common.base.Objects;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import org.apache.cassandra.cql3.*;
0: import org.apache.cassandra.db.*;
0: import org.apache.cassandra.db.composites.Composite;
1: import org.apache.cassandra.db.marshal.AbstractType;
0: import org.apache.cassandra.db.marshal.TypeParser;
0: import org.apache.cassandra.db.marshal.UTF8Type;
0: import org.apache.cassandra.exceptions.*;
1: 
1: /**
1:  * Base class for user-defined-aggregates.
1:  */
1: public class UDAggregate extends AbstractFunction implements AggregateFunction
1: {
1:     protected static final Logger logger = LoggerFactory.getLogger(UDAggregate.class);
1: 
0:     protected final AbstractType<?> stateType;
1:     protected final ByteBuffer initcond;
1:     private final ScalarFunction stateFunction;
1:     private final ScalarFunction finalFunction;
1: 
1:     public UDAggregate(FunctionName name,
1:                        List<AbstractType<?>> argTypes,
1:                        AbstractType<?> returnType,
1:                        ScalarFunction stateFunc,
1:                        ScalarFunction finalFunc,
1:                        ByteBuffer initcond)
1:     {
1:         super(name, argTypes, returnType);
1:         this.stateFunction = stateFunc;
1:         this.finalFunction = finalFunc;
1:         this.stateType = stateFunc != null ? stateFunc.returnType() : null;
1:         this.initcond = initcond;
1:     }
1: 
1:     public boolean hasReferenceTo(Function function)
1:     {
1:         return stateFunction == function || finalFunction == function;
1:     }
1: 
0:     public boolean usesFunction(String ksName, String functionName)
1:     {
0:         return super.usesFunction(ksName, functionName)
0:             || stateFunction != null && stateFunction.name().keyspace.equals(ksName) && stateFunction.name().name.equals(functionName)
0:             || finalFunction != null && finalFunction.name().keyspace.equals(ksName) && finalFunction.name().name.equals(functionName);
1:     }
1: 
1:     public boolean isAggregate()
1:     {
1:         return true;
1:     }
1: 
0:     public boolean isPure()
1:     {
1:         return false;
1:     }
1: 
1:     public boolean isNative()
1:     {
1:         return false;
1:     }
1: 
1:     public Aggregate newAggregate() throws InvalidRequestException
1:     {
1:         return new Aggregate()
1:         {
0:             private ByteBuffer state;
1:             {
0:                 reset();
1:             }
1: 
0:             public void addInput(int protocolVersion, List<ByteBuffer> values) throws InvalidRequestException
1:             {
0:                 List<ByteBuffer> copy = new ArrayList<>(values.size() + 1);
0:                 copy.add(state);
0:                 copy.addAll(values);
0:                 state = stateFunction.execute(protocolVersion, copy);
1:             }
1: 
0:             public ByteBuffer compute(int protocolVersion) throws InvalidRequestException
1:             {
1:                 if (finalFunction == null)
0:                     return state;
0:                 return finalFunction.execute(protocolVersion, Collections.singletonList(state));
1:             }
1: 
1:             public void reset()
1:             {
0:                 state = initcond != null ? initcond.duplicate() : null;
1:             }
1:         };
1:     }
1: 
0:     private static ScalarFunction resolveScalar(FunctionName aName, FunctionName fName, List<AbstractType<?>> argTypes) throws InvalidRequestException
1:     {
0:         Function func = Functions.find(fName, argTypes);
0:         if (func == null)
1:             throw new InvalidRequestException(String.format("Referenced state function '%s %s' for aggregate '%s' does not exist",
0:                                                             fName, Arrays.toString(UDHelper.driverTypes(argTypes)), aName));
0:         if (!(func instanceof ScalarFunction))
1:             throw new InvalidRequestException(String.format("Referenced state function '%s %s' for aggregate '%s' is not a scalar function",
0:                                                             fName, Arrays.toString(UDHelper.driverTypes(argTypes)), aName));
0:         return (ScalarFunction) func;
1:     }
1: 
0:     private static Mutation makeSchemaMutation(FunctionName name)
1:     {
0:         UTF8Type kv = (UTF8Type)SystemKeyspace.SchemaAggregatesTable.getKeyValidator();
0:         return new Mutation(SystemKeyspace.NAME, kv.decompose(name.keyspace));
1:     }
1: 
0:     public Mutation toSchemaDrop(long timestamp)
1:     {
0:         Mutation mutation = makeSchemaMutation(name);
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_AGGREGATES_TABLE);
1: 
0:         Composite prefix = SystemKeyspace.SchemaAggregatesTable.comparator.make(name.name, UDHelper.computeSignature(argTypes));
0:         int ldt = (int) (System.currentTimeMillis() / 1000);
0:         cf.addAtom(new RangeTombstone(prefix, prefix.end(), timestamp, ldt));
1: 
0:         return mutation;
1:     }
1: 
0:     public static Map<Composite, UDAggregate> fromSchema(Row row)
1:     {
0:         UntypedResultSet results = QueryProcessor.resultify("SELECT * FROM system." + SystemKeyspace.SCHEMA_AGGREGATES_TABLE, row);
0:         Map<Composite, UDAggregate> udfs = new HashMap<>(results.size());
0:         for (UntypedResultSet.Row result : results)
0:             udfs.put(SystemKeyspace.SchemaAggregatesTable.comparator.make(result.getString("aggregate_name"), result.getBlob("signature")),
0:                      fromSchema(result));
0:         return udfs;
1:     }
1: 
0:     public Mutation toSchemaUpdate(long timestamp)
1:     {
0:         Mutation mutation = makeSchemaMutation(name);
0:         ColumnFamily cf = mutation.addOrGet(SystemKeyspace.SCHEMA_AGGREGATES_TABLE);
1: 
0:         Composite prefix = SystemKeyspace.SchemaAggregatesTable.comparator.make(name.name, UDHelper.computeSignature(argTypes));
0:         CFRowAdder adder = new CFRowAdder(cf, prefix, timestamp);
1: 
0:         adder.resetCollection("argument_types");
0:         adder.add("return_type", returnType.toString());
0:         adder.add("state_func", stateFunction.name().name);
0:         if (stateType != null)
0:             adder.add("state_type", stateType.toString());
1:         if (finalFunction != null)
0:             adder.add("final_func", finalFunction.name().name);
0:         if (initcond != null)
0:             adder.add("initcond", initcond);
1: 
0:         for (AbstractType<?> argType : argTypes)
0:             adder.addListEntry("argument_types", argType.toString());
1: 
0:         return mutation;
1:     }
1: 
0:     public static UDAggregate fromSchema(UntypedResultSet.Row row)
1:     {
0:         String ksName = row.getString("keyspace_name");
0:         String functionName = row.getString("aggregate_name");
0:         FunctionName name = new FunctionName(ksName, functionName);
1: 
0:         List<String> types = row.getList("argument_types", UTF8Type.instance);
1: 
0:         List<AbstractType<?>> argTypes;
0:         if (types == null)
1:         {
0:             argTypes = Collections.emptyList();
1:         }
0:         else
1:         {
0:             argTypes = new ArrayList<>(types.size());
0:             for (String type : types)
0:                 argTypes.add(parseType(type));
1:         }
1: 
0:         AbstractType<?> returnType = parseType(row.getString("return_type"));
1: 
0:         FunctionName stateFunc = new FunctionName(ksName, row.getString("state_func"));
0:         FunctionName finalFunc = row.has("final_func") ? new FunctionName(ksName, row.getString("final_func")) : null;
0:         AbstractType<?> stateType = row.has("state_type") ? parseType(row.getString("state_type")) : null;
0:         ByteBuffer initcond = row.has("initcond") ? row.getBytes("initcond") : null;
1: 
0:         try
1:         {
0:             return create(name, argTypes, returnType, stateFunc, finalFunc, stateType, initcond);
1:         }
0:         catch (InvalidRequestException reason)
1:         {
0:             return createBroken(name, argTypes, returnType, initcond, reason);
1:         }
1:     }
1: 
0:     private static UDAggregate createBroken(FunctionName name, List<AbstractType<?>> argTypes, AbstractType<?> returnType,
0:                                             ByteBuffer initcond, final InvalidRequestException reason)
1:     {
0:         return new UDAggregate(name, argTypes, returnType, null, null, initcond) {
1:             public Aggregate newAggregate() throws InvalidRequestException
1:             {
1:                 throw new InvalidRequestException(String.format("Aggregate '%s' exists but hasn't been loaded successfully for the following reason: %s. "
0:                                                                 + "Please see the server log for more details", this, reason.getMessage()));
1:             }
1:         };
1:     }
1: 
0:     private static UDAggregate create(FunctionName name, List<AbstractType<?>> argTypes, AbstractType<?> returnType,
0:                                       FunctionName stateFunc, FunctionName finalFunc, AbstractType<?> stateType, ByteBuffer initcond)
1:     throws InvalidRequestException
1:     {
1:         List<AbstractType<?>> stateTypes = new ArrayList<>(argTypes.size() + 1);
1:         stateTypes.add(stateType);
1:         stateTypes.addAll(argTypes);
0:         List<AbstractType<?>> finalTypes = Collections.<AbstractType<?>>singletonList(stateType);
0:         return new UDAggregate(name, argTypes, returnType,
0:                                resolveScalar(name, stateFunc, stateTypes),
0:                                finalFunc != null ? resolveScalar(name, finalFunc, finalTypes) : null,
1:                                initcond);
1:     }
1: 
0:     private static AbstractType<?> parseType(String str)
1:     {
0:         // We only use this when reading the schema where we shouldn't get an error
0:         try
1:         {
0:             return TypeParser.parse(str);
1:         }
0:         catch (SyntaxException | ConfigurationException e)
1:         {
0:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (!(o instanceof UDAggregate))
1:             return false;
1: 
1:         UDAggregate that = (UDAggregate) o;
0:         return Objects.equal(this.name, that.name)
0:                && Functions.typeEquals(this.argTypes, that.argTypes)
0:                && Functions.typeEquals(this.returnType, that.returnType)
0:                && Objects.equal(this.stateFunction, that.stateFunction)
0:                && Objects.equal(this.finalFunction, that.finalFunction)
0:                && Objects.equal(this.stateType, that.stateType)
0:                && Objects.equal(this.initcond, that.initcond);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
0:         return Objects.hashCode(name, argTypes, returnType, stateFunction, finalFunction, stateType, initcond);
1:     }
1: }
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:4edd9ed
commit:89464ea
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void addFunctionsTo(List<Function> functions)
1:         functions.add(this);
1:         if (stateFunction != null)
0:         {
1:             stateFunction.addFunctionsTo(functions);
0: 
0:             if (finalFunction != null)
1:                 finalFunction.addFunctionsTo(functions);
0:         }
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:677230d
/////////////////////////////////////////////////////////////////////////
1:             && ((stateType == that.stateType) || ((stateType != null) && stateType.equals(that.stateType, true)))  // ignore freezing
author:Christopher Batey
-------------------------------------------------------------------------------
commit:e651fdd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.tracing.Tracing;
/////////////////////////////////////////////////////////////////////////
1:             private long stateFunctionCount;
1:             private long stateFunctionDuration;
0: 
/////////////////////////////////////////////////////////////////////////
1:                 long startTime = System.nanoTime();
1:                 stateFunctionCount++;
/////////////////////////////////////////////////////////////////////////
1:                 stateFunctionDuration += (System.nanoTime() - startTime) / 1000;
1:                 // final function is traced in UDFunction
1:                 Tracing.trace("Executed UDA {}: {} call(s) to state function {} in {}\u03bcs", name(), stateFunctionCount, stateFunction.name(), stateFunctionDuration);
0: 
0:                 ByteBuffer result = finalFunction.execute(protocolVersion, fArgs);
0:                 return result;
0:                 stateFunctionDuration = 0;
0:                 stateFunctionCount = 0;
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.schema.Functions;
/////////////////////////////////////////////////////////////////////////
0:         Optional<Function> fun = Schema.instance.findFunction(fName, argTypes);
1:         if (!fun.isPresent())
1:                                                             fName,
1:                                                             Arrays.toString(UDHelper.driverTypes(argTypes)),
1:                                                             aName));
0: 
1:         if (!(fun.get() instanceof ScalarFunction))
1:                                                             fName,
1:                                                             Arrays.toString(UDHelper.driverTypes(argTypes)),
1:                                                             aName));
1:         return (ScalarFunction) fun.get();
/////////////////////////////////////////////////////////////////////////
1:             && Functions.typesMatch(argTypes, that.argTypes)
1:             && Functions.typesMatch(returnType, that.returnType)
commit:3e9d345
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public static UDAggregate create(FunctionName name,
1:                                      List<AbstractType<?>> argTypes,
1:                                      AbstractType<?> returnType,
1:                                      FunctionName stateFunc,
1:                                      FunctionName finalFunc,
1:                                      AbstractType<?> stateType,
1:                                      ByteBuffer initcond)
0:     throws InvalidRequestException
0:     {
0:         List<AbstractType<?>> stateTypes = new ArrayList<>(argTypes.size() + 1);
0:         stateTypes.add(stateType);
0:         stateTypes.addAll(argTypes);
0:         List<AbstractType<?>> finalTypes = Collections.<AbstractType<?>>singletonList(stateType);
1:         return new UDAggregate(name,
1:                                argTypes,
1:                                returnType,
0:                                resolveScalar(name, stateFunc, stateTypes),
0:                                finalFunc != null ? resolveScalar(name, finalFunc, finalTypes) : null,
0:                                initcond);
0:     }
0: 
1:     public static UDAggregate createBroken(FunctionName name,
1:                                            List<AbstractType<?>> argTypes,
1:                                            AbstractType<?> returnType,
1:                                            ByteBuffer initcond,
0:                                            final InvalidRequestException reason)
0:     {
1:         return new UDAggregate(name, argTypes, returnType, null, null, initcond)
0:         {
0:             public Aggregate newAggregate() throws InvalidRequestException
0:             {
0:                 throw new InvalidRequestException(String.format("Aggregate '%s' exists but hasn't been loaded successfully for the following reason: %s. "
1:                                                                 + "Please see the server log for more details",
1:                                                                 this,
1:                                                                 reason.getMessage()));
0:             }
0:         };
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public ScalarFunction stateFunction()
0:     {
1:         return stateFunction;
0:     }
0: 
1:     public ScalarFunction finalFunction()
0:     {
1:         return finalFunction;
0:     }
0: 
1:     public ByteBuffer initialCondition()
0:     {
1:         return initcond;
0:     }
0: 
1:     public AbstractType<?> stateType()
0:     {
1:         return stateType;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return Objects.equal(name, that.name)
0:             && Functions.typeEquals(argTypes, that.argTypes)
0:             && Functions.typeEquals(returnType, that.returnType)
1:             && Objects.equal(stateFunction, that.stateFunction)
1:             && Objects.equal(finalFunction, that.finalFunction)
0:             && Objects.equal(stateType, that.stateType)
1:             && Objects.equal(initcond, that.initcond);
author:Carl Yeksigian
-------------------------------------------------------------------------------
commit:b2abcb7
/////////////////////////////////////////////////////////////////////////
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:d9836e0
/////////////////////////////////////////////////////////////////////////
0:         if (finalFunction != null)
0:             return ImmutableSet.of(this, stateFunction, finalFunction);
0:         else
0:             return ImmutableSet.of(this, stateFunction);
commit:cb5897f
/////////////////////////////////////////////////////////////////////////
0: import com.google.common.collect.ImmutableSet;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
0:     public Iterable<Function> getFunctions()
0:     {
0:         return ImmutableSet.of(this, stateFunction, finalFunction);
0:     }
0: 
============================================================================