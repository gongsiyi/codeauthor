1:31e669a: /*
1:31e669a:  * Licensed to the Apache Software Foundation (ASF) under one
1:31e669a:  * or more contributor license agreements.  See the NOTICE file
1:31e669a:  * distributed with this work for additional information
1:31e669a:  * regarding copyright ownership.  The ASF licenses this file
1:31e669a:  * to you under the Apache License, Version 2.0 (the
1:31e669a:  * "License"); you may not use this file except in compliance
1:31e669a:  * with the License.  You may obtain a copy of the License at
1:31e669a:  *
1:31e669a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:31e669a:  *
1:31e669a:  * Unless required by applicable law or agreed to in writing, software
1:31e669a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31e669a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31e669a:  * See the License for the specific language governing permissions and
1:31e669a:  * limitations under the License.
1:31e669a:  */
1:31e669a: package org.apache.cassandra.cql3.functions;
1:31e669a: 
1:31e669a: import java.nio.ByteBuffer;
1:3566843: import java.util.ArrayList;
1:3566843: import java.util.Collection;
1:31e669a: import java.util.List;
1:31e669a: 
1:3566843: import org.apache.cassandra.cql3.CQL3Type;
1:31e669a: import org.apache.cassandra.db.marshal.AbstractType;
1:31e669a: import org.apache.cassandra.db.marshal.BytesType;
1:31e669a: import org.apache.cassandra.db.marshal.UTF8Type;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:b70eaf3: import org.apache.cassandra.utils.ByteBufferUtil;
1:b70eaf3: import org.apache.cassandra.exceptions.InvalidRequestException;
1:b70eaf3: import org.apache.cassandra.serializers.MarshalException;
1:31e669a: 
1:31e669a: public abstract class BytesConversionFcts
1:31e669a: {
1:3566843:     public static Collection<Function> all()
1:3566843:     {
1:3566843:         Collection<Function> functions = new ArrayList<>();
1:3566843: 
1:3566843:         // because text and varchar ends up being synonymous, our automatic makeToBlobFunction doesn't work
1:3566843:         // for varchar, so we special case it below. We also skip blob for obvious reasons.
1:3566843:         for (CQL3Type type : CQL3Type.Native.values())
1:3566843:         {
1:3566843:             if (type != CQL3Type.Native.VARCHAR && type != CQL3Type.Native.BLOB)
1:3566843:             {
1:3566843:                 functions.add(makeToBlobFunction(type.getType()));
1:3566843:                 functions.add(makeFromBlobFunction(type.getType()));
1:3566843:             }
1:3566843:         }
1:3566843: 
1:3566843:         functions.add(VarcharAsBlobFct);
1:3566843:         functions.add(BlobAsVarcharFct);
1:3566843: 
1:3566843:         return functions;
1:3566843:     }
1:3566843: 
1:31e669a:     // Most of the XAsBlob and blobAsX functions are basically no-op since everything is
1:31e669a:     // bytes internally. They only "trick" the type system.
1:31e669a:     public static Function makeToBlobFunction(AbstractType<?> fromType)
1:31e669a:     {
1:31e669a:         String name = fromType.asCQL3Type() + "asblob";
1:0cad81a:         return new NativeScalarFunction(name, BytesType.instance, fromType)
1:31e669a:         {
1:e0adc16:             public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:31e669a:             {
2:31e669a:                 return parameters.get(0);
1:31e669a:             }
1:31e669a:         };
1:31e669a:     }
1:31e669a: 
1:b70eaf3:     public static Function makeFromBlobFunction(final AbstractType<?> toType)
1:31e669a:     {
1:b70eaf3:         final String name = "blobas" + toType.asCQL3Type();
1:0cad81a:         return new NativeScalarFunction(name, toType, BytesType.instance)
1:31e669a:         {
1:e0adc16:             public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
1:31e669a:             {
1:b70eaf3:                 ByteBuffer val = parameters.get(0);
1:b70eaf3:                 try
1:b70eaf3:                 {
1:b70eaf3:                     if (val != null)
1:b70eaf3:                         toType.validate(val);
1:b70eaf3:                     return val;
1:b70eaf3:                 }
1:b70eaf3:                 catch (MarshalException e)
1:b70eaf3:                 {
1:b70eaf3:                     throw new InvalidRequestException(String.format("In call to function %s, value 0x%s is not a valid binary representation for type %s",
1:b70eaf3:                                                                     name, ByteBufferUtil.bytesToHex(val), toType.asCQL3Type()));
1:b70eaf3:                 }
1:31e669a:             }
1:31e669a:         };
1:31e669a:     }
1:31e669a: 
1:0cad81a:     public static final Function VarcharAsBlobFct = new NativeScalarFunction("varcharasblob", BytesType.instance, UTF8Type.instance)
1:31e669a:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:31e669a:         {
1:31e669a:             return parameters.get(0);
1:31e669a:         }
1:31e669a:     };
1:31e669a: 
1:3566843:     public static final Function BlobAsVarcharFct = new NativeScalarFunction("blobasvarchar", UTF8Type.instance, BytesType.instance)
1:31e669a:     {
1:e0adc16:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
1:31e669a:         {
1:31e669a:             return parameters.get(0);
1:31e669a:         }
1:31e669a:     };
1:31e669a: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:             public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:             public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
1:         public ByteBuffer execute(ProtocolVersion protocolVersion, List<ByteBuffer> parameters)
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3566843
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import org.apache.cassandra.cql3.CQL3Type;
/////////////////////////////////////////////////////////////////////////
1:     public static Collection<Function> all()
1:     {
1:         Collection<Function> functions = new ArrayList<>();
1: 
1:         // because text and varchar ends up being synonymous, our automatic makeToBlobFunction doesn't work
1:         // for varchar, so we special case it below. We also skip blob for obvious reasons.
1:         for (CQL3Type type : CQL3Type.Native.values())
1:         {
1:             if (type != CQL3Type.Native.VARCHAR && type != CQL3Type.Native.BLOB)
1:             {
1:                 functions.add(makeToBlobFunction(type.getType()));
1:                 functions.add(makeFromBlobFunction(type.getType()));
1:             }
1:         }
1: 
1:         functions.add(VarcharAsBlobFct);
1:         functions.add(BlobAsVarcharFct);
1: 
1:         return functions;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static final Function BlobAsVarcharFct = new NativeScalarFunction("blobasvarchar", UTF8Type.instance, BytesType.instance)
author:Robert Stupp
-------------------------------------------------------------------------------
commit:794d68b
/////////////////////////////////////////////////////////////////////////
0:             public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
0:             public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters) throws InvalidRequestException
/////////////////////////////////////////////////////////////////////////
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
/////////////////////////////////////////////////////////////////////////
0:         public ByteBuffer execute(int protocolVersion, List<ByteBuffer> parameters)
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:0cad81a
/////////////////////////////////////////////////////////////////////////
1:         return new NativeScalarFunction(name, BytesType.instance, fromType)
/////////////////////////////////////////////////////////////////////////
1:         return new NativeScalarFunction(name, toType, BytesType.instance)
/////////////////////////////////////////////////////////////////////////
1:     public static final Function VarcharAsBlobFct = new NativeScalarFunction("varcharasblob", BytesType.instance, UTF8Type.instance)
/////////////////////////////////////////////////////////////////////////
0:     public static final Function BlobAsVarcharFact = new NativeScalarFunction("blobasvarchar", UTF8Type.instance, BytesType.instance)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:44fa12e
/////////////////////////////////////////////////////////////////////////
0:         return new NativeFunction(name, BytesType.instance, fromType)
/////////////////////////////////////////////////////////////////////////
0:         return new NativeFunction(name, toType, BytesType.instance)
/////////////////////////////////////////////////////////////////////////
0:     public static final Function VarcharAsBlobFct = new NativeFunction("varcharasblob", BytesType.instance, UTF8Type.instance)
/////////////////////////////////////////////////////////////////////////
0:     public static final Function BlobAsVarcharFact = new NativeFunction("blobasvarchar", UTF8Type.instance, BytesType.instance)
commit:b70eaf3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
1:     public static Function makeFromBlobFunction(final AbstractType<?> toType)
1:         final String name = "blobas" + toType.asCQL3Type();
0:             public ByteBuffer execute(List<ByteBuffer> parameters) throws InvalidRequestException
1:                 ByteBuffer val = parameters.get(0);
1:                 try
1:                 {
1:                     if (val != null)
1:                         toType.validate(val);
1:                     return val;
1:                 }
1:                 catch (MarshalException e)
1:                 {
1:                     throw new InvalidRequestException(String.format("In call to function %s, value 0x%s is not a valid binary representation for type %s",
1:                                                                     name, ByteBufferUtil.bytesToHex(val), toType.asCQL3Type()));
1:                 }
commit:31e669a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.cql3.functions;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.BytesType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: 
1: public abstract class BytesConversionFcts
1: {
1:     // Most of the XAsBlob and blobAsX functions are basically no-op since everything is
1:     // bytes internally. They only "trick" the type system.
1:     public static Function makeToBlobFunction(AbstractType<?> fromType)
1:     {
1:         String name = fromType.asCQL3Type() + "asblob";
0:         return new AbstractFunction(name, BytesType.instance, fromType)
1:         {
0:             public ByteBuffer execute(List<ByteBuffer> parameters)
1:             {
1:                 return parameters.get(0);
1:             }
1:         };
1:     }
1: 
0:     public static Function makeFromBlobFunction(AbstractType<?> toType)
1:     {
0:         String name = "blobas" + toType.asCQL3Type();
0:         return new AbstractFunction(name, toType, BytesType.instance)
1:         {
0:             public ByteBuffer execute(List<ByteBuffer> parameters)
1:             {
1:                 return parameters.get(0);
1:             }
1:         };
1:     }
1: 
0:     public static final Function VarcharAsBlobFct = new AbstractFunction("varcharasblob", BytesType.instance, UTF8Type.instance)
1:     {
0:         public ByteBuffer execute(List<ByteBuffer> parameters)
1:         {
1:             return parameters.get(0);
1:         }
1:     };
1: 
0:     public static final Function BlobAsVarcharFact = new AbstractFunction("blobasvarchar", UTF8Type.instance, BytesType.instance)
1:     {
0:         public ByteBuffer execute(List<ByteBuffer> parameters)
1:         {
1:             return parameters.get(0);
1:         }
1:     };
1: }
============================================================================