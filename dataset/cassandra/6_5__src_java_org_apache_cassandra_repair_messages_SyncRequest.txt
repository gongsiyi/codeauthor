1:eb4fa4a: /*
1:eb4fa4a:  * Licensed to the Apache Software Foundation (ASF) under one
1:eb4fa4a:  * or more contributor license agreements.  See the NOTICE file
1:eb4fa4a:  * distributed with this work for additional information
1:eb4fa4a:  * regarding copyright ownership.  The ASF licenses this file
1:eb4fa4a:  * to you under the Apache License, Version 2.0 (the
1:eb4fa4a:  * "License"); you may not use this file except in compliance
1:eb4fa4a:  * with the License.  You may obtain a copy of the License at
1:eb4fa4a:  *
1:eb4fa4a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:eb4fa4a:  *
1:eb4fa4a:  * Unless required by applicable law or agreed to in writing, software
1:eb4fa4a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb4fa4a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb4fa4a:  * See the License for the specific language governing permissions and
1:eb4fa4a:  * limitations under the License.
1:eb4fa4a:  */
1:eb4fa4a: package org.apache.cassandra.repair.messages;
1:eb4fa4a: 
1:eb4fa4a: import java.io.IOException;
1:eb4fa4a: import java.net.InetAddress;
1:eb4fa4a: import java.util.ArrayList;
1:eb4fa4a: import java.util.Collection;
1:eb4fa4a: import java.util.List;
1:eb4fa4a: 
1:eb4fa4a: import org.apache.cassandra.db.TypeSizes;
1:eb4fa4a: import org.apache.cassandra.dht.AbstractBounds;
1:eb4fa4a: import org.apache.cassandra.dht.Range;
1:eb4fa4a: import org.apache.cassandra.dht.Token;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
1:eb4fa4a: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1:806facc: import org.apache.cassandra.net.MessagingService;
1:eb4fa4a: import org.apache.cassandra.repair.RepairJobDesc;
1:eb4fa4a: 
1:eb4fa4a: /**
1:eb4fa4a:  * Body part of SYNC_REQUEST repair message.
1:eb4fa4a:  * Request {@code src} node to sync data with {@code dst} node for range {@code ranges}.
1:eb4fa4a:  *
1:eb4fa4a:  * @since 2.0
1:eb4fa4a:  */
1:eb4fa4a: public class SyncRequest extends RepairMessage
1:eb4fa4a: {
1:eb4fa4a:     public static MessageSerializer serializer = new SyncRequestSerializer();
1:eb4fa4a: 
1:eb4fa4a:     public final InetAddress initiator;
1:eb4fa4a:     public final InetAddress src;
1:eb4fa4a:     public final InetAddress dst;
1:eb4fa4a:     public final Collection<Range<Token>> ranges;
1:eb4fa4a: 
1:eb4fa4a:     public SyncRequest(RepairJobDesc desc, InetAddress initiator, InetAddress src, InetAddress dst, Collection<Range<Token>> ranges)
1:eb4fa4a:     {
1:eb4fa4a:         super(Type.SYNC_REQUEST, desc);
1:eb4fa4a:         this.initiator = initiator;
1:eb4fa4a:         this.src = src;
1:eb4fa4a:         this.dst = dst;
1:eb4fa4a:         this.ranges = ranges;
1:eb4fa4a:     }
1:eb4fa4a: 
1:eb4fa4a:     public static class SyncRequestSerializer implements MessageSerializer<SyncRequest>
1:eb4fa4a:     {
1:75508ec:         public void serialize(SyncRequest message, DataOutputPlus out, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc.serializer.serialize(message.desc, out, version);
1:eb4fa4a:             CompactEndpointSerializationHelper.serialize(message.initiator, out);
1:eb4fa4a:             CompactEndpointSerializationHelper.serialize(message.src, out);
1:eb4fa4a:             CompactEndpointSerializationHelper.serialize(message.dst, out);
1:eb4fa4a:             out.writeInt(message.ranges.size());
1:eb4fa4a:             for (Range<Token> range : message.ranges)
1:806facc:             {
1:806facc:                 MessagingService.validatePartitioner(range);
1:69542a9:                 AbstractBounds.tokenSerializer.serialize(range, out, version);
1:806facc:             }
1:eb4fa4a:         }
1:eb4fa4a: 
1:03f72ac:         public SyncRequest deserialize(DataInputPlus in, int version) throws IOException
1:eb4fa4a:         {
1:eb4fa4a:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(in, version);
1:eb4fa4a:             InetAddress owner = CompactEndpointSerializationHelper.deserialize(in);
1:eb4fa4a:             InetAddress src = CompactEndpointSerializationHelper.deserialize(in);
1:eb4fa4a:             InetAddress dst = CompactEndpointSerializationHelper.deserialize(in);
1:eb4fa4a:             int rangesCount = in.readInt();
1:eb4fa4a:             List<Range<Token>> ranges = new ArrayList<>(rangesCount);
1:eb4fa4a:             for (int i = 0; i < rangesCount; ++i)
1:69542a9:                 ranges.add((Range<Token>) AbstractBounds.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version));
1:eb4fa4a:             return new SyncRequest(desc, owner, src, dst, ranges);
1:eb4fa4a:         }
1:eb4fa4a: 
1:eb4fa4a:         public long serializedSize(SyncRequest message, int version)
1:eb4fa4a:         {
1:eb4fa4a:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
1:eb4fa4a:             size += 3 * CompactEndpointSerializationHelper.serializedSize(message.initiator);
1:03f72ac:             size += TypeSizes.sizeof(message.ranges.size());
1:eb4fa4a:             for (Range<Token> range : message.ranges)
1:69542a9:                 size += AbstractBounds.tokenSerializer.serializedSize(range, version);
1:eb4fa4a:             return size;
1:eb4fa4a:         }
1:eb4fa4a:     }
1:e60a06c: 
1:e60a06c:     @Override
1:e60a06c:     public String toString()
1:e60a06c:     {
1:e60a06c:         return "SyncRequest{" +
1:e60a06c:                 "initiator=" + initiator +
1:e60a06c:                 ", src=" + src +
1:e60a06c:                 ", dst=" + dst +
1:e60a06c:                 ", ranges=" + ranges +
1:e60a06c:                 "} " + super.toString();
1:e60a06c:     }
1:eb4fa4a: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public SyncRequest deserialize(DataInputPlus in, int version) throws IOException
/////////////////////////////////////////////////////////////////////////
1:             size += TypeSizes.sizeof(message.ranges.size());
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:69542a9
/////////////////////////////////////////////////////////////////////////
1:                 AbstractBounds.tokenSerializer.serialize(range, out, version);
/////////////////////////////////////////////////////////////////////////
1:                 ranges.add((Range<Token>) AbstractBounds.tokenSerializer.deserialize(in, MessagingService.globalPartitioner(), version));
/////////////////////////////////////////////////////////////////////////
1:                 size += AbstractBounds.tokenSerializer.serializedSize(range, version);
commit:806facc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:             {
1:                 MessagingService.validatePartitioner(range);
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 ranges.add((Range<Token>) AbstractBounds.serializer.deserialize(in, MessagingService.globalPartitioner(), version).toTokenBounds());
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:e60a06c
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return "SyncRequest{" +
1:                 "initiator=" + initiator +
1:                 ", src=" + src +
1:                 ", dst=" + dst +
1:                 ", ranges=" + ranges +
1:                 "} " + super.toString();
1:     }
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(SyncRequest message, DataOutputPlus out, int version) throws IOException
author:Dave Brosius
-------------------------------------------------------------------------------
commit:66f3014
/////////////////////////////////////////////////////////////////////////
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:eb4fa4a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.repair.messages;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.cassandra.db.TypeSizes;
1: import org.apache.cassandra.dht.AbstractBounds;
1: import org.apache.cassandra.dht.Range;
1: import org.apache.cassandra.dht.Token;
0: import org.apache.cassandra.io.IVersionedSerializer;
1: import org.apache.cassandra.net.CompactEndpointSerializationHelper;
1: import org.apache.cassandra.repair.RepairJobDesc;
0: import org.apache.cassandra.utils.FBUtilities;
1: 
1: /**
1:  * Body part of SYNC_REQUEST repair message.
1:  * Request {@code src} node to sync data with {@code dst} node for range {@code ranges}.
1:  *
1:  * @since 2.0
1:  */
1: public class SyncRequest extends RepairMessage
1: {
1:     public static MessageSerializer serializer = new SyncRequestSerializer();
1: 
1:     public final InetAddress initiator;
1:     public final InetAddress src;
1:     public final InetAddress dst;
1:     public final Collection<Range<Token>> ranges;
1: 
1:     public SyncRequest(RepairJobDesc desc, InetAddress initiator, InetAddress src, InetAddress dst, Collection<Range<Token>> ranges)
1:     {
1:         super(Type.SYNC_REQUEST, desc);
1:         this.initiator = initiator;
1:         this.src = src;
1:         this.dst = dst;
1:         this.ranges = ranges;
1:     }
1: 
1:     public static class SyncRequestSerializer implements MessageSerializer<SyncRequest>
1:     {
0:         public void serialize(SyncRequest message, DataOutput out, int version) throws IOException
1:         {
1:             RepairJobDesc.serializer.serialize(message.desc, out, version);
1:             CompactEndpointSerializationHelper.serialize(message.initiator, out);
1:             CompactEndpointSerializationHelper.serialize(message.src, out);
1:             CompactEndpointSerializationHelper.serialize(message.dst, out);
1:             out.writeInt(message.ranges.size());
1:             for (Range<Token> range : message.ranges)
0:                 AbstractBounds.serializer.serialize(range, out, version);
1:         }
1: 
0:         public SyncRequest deserialize(DataInput in, int version) throws IOException
1:         {
1:             RepairJobDesc desc = RepairJobDesc.serializer.deserialize(in, version);
1:             InetAddress owner = CompactEndpointSerializationHelper.deserialize(in);
1:             InetAddress src = CompactEndpointSerializationHelper.deserialize(in);
1:             InetAddress dst = CompactEndpointSerializationHelper.deserialize(in);
1:             int rangesCount = in.readInt();
1:             List<Range<Token>> ranges = new ArrayList<>(rangesCount);
1:             for (int i = 0; i < rangesCount; ++i)
0:                 ranges.add((Range<Token>) AbstractBounds.serializer.deserialize(in, version).toTokenBounds());
1:             return new SyncRequest(desc, owner, src, dst, ranges);
1:         }
1: 
1:         public long serializedSize(SyncRequest message, int version)
1:         {
1:             long size = RepairJobDesc.serializer.serializedSize(message.desc, version);
1:             size += 3 * CompactEndpointSerializationHelper.serializedSize(message.initiator);
0:             size += TypeSizes.NATIVE.sizeof(message.ranges.size());
1:             for (Range<Token> range : message.ranges)
0:                 size += AbstractBounds.serializer.serializedSize(range, version);
1:             return size;
1:         }
1:     }
1: }
============================================================================