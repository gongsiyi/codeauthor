1:fcdb393: /*
1:fcdb393:  * Licensed to the Apache Software Foundation (ASF) under one
1:fcdb393:  * or more contributor license agreements.  See the NOTICE file
1:fcdb393:  * distributed with this work for additional information
1:fcdb393:  * regarding copyright ownership.  The ASF licenses this file
1:fcdb393:  * to you under the Apache License, Version 2.0 (the
1:fcdb393:  * "License"); you may not use this file except in compliance
1:fcdb393:  * with the License.  You may obtain a copy of the License at
1:fcdb393:  *
1:fcdb393:  *     http://www.apache.org/licenses/LICENSE-2.0
1:fcdb393:  *
1:fcdb393:  * Unless required by applicable law or agreed to in writing, software
1:fcdb393:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fcdb393:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fcdb393:  * See the License for the specific language governing permissions and
1:fcdb393:  * limitations under the License.
1:fcdb393:  */
1:8bf6e15: package org.apache.cassandra.cql3.statements;
2:8bf6e15: 
1:a965977: import org.slf4j.Logger;
1:a965977: import org.slf4j.LoggerFactory;
1:a965977: 
1:8bf6e15: import org.apache.cassandra.config.CFMetaData;
1:8bf6e15: import org.apache.cassandra.config.Schema;
1:8bf6e15: import org.apache.cassandra.cql3.CFName;
1:8bf6e15: import org.apache.cassandra.exceptions.ConfigurationException;
1:591a277: import org.apache.cassandra.exceptions.InvalidRequestException;
1:8bf6e15: import org.apache.cassandra.exceptions.RequestValidationException;
1:8bf6e15: import org.apache.cassandra.exceptions.UnauthorizedException;
1:16044a6: import org.apache.cassandra.schema.Triggers;
1:8bf6e15: import org.apache.cassandra.service.ClientState;
1:8bf6e15: import org.apache.cassandra.service.MigrationManager;
1:8bf6e15: import org.apache.cassandra.thrift.ThriftValidation;
1:2fe6de6: import org.apache.cassandra.transport.Event;
1:8bf6e15: 
1:8bf6e15: public class DropTriggerStatement extends SchemaAlteringStatement
2:8bf6e15: {
1:8bf6e15:     private static final Logger logger = LoggerFactory.getLogger(DropTriggerStatement.class);
1:a965977: 
1:8bf6e15:     private final String triggerName;
1:8bf6e15: 
1:591a277:     private final boolean ifExists;
1:591a277: 
1:591a277:     public DropTriggerStatement(CFName name, String triggerName, boolean ifExists)
1:8bf6e15:     {
1:8bf6e15:         super(name);
1:8bf6e15:         this.triggerName = triggerName;
1:591a277:         this.ifExists = ifExists;
2:8bf6e15:     }
1:8bf6e15: 
1:edc7531:     public void checkAccess(ClientState state) throws UnauthorizedException
1:8bf6e15:     {
1:edc7531:         state.ensureIsSuper("Only superusers are allowed to perfrom DROP TRIGGER queries");
1:8bf6e15:     }
1:8bf6e15: 
1:8bf6e15:     public void validate(ClientState state) throws RequestValidationException
1:8bf6e15:     {
1:8bf6e15:         ThriftValidation.validateColumnFamily(keyspace(), columnFamily());
1:591a277:     }
1:8bf6e15: 
1:2cbd776:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws ConfigurationException, InvalidRequestException
1:8bf6e15:     {
1:69bfca0:         CFMetaData cfm = Schema.instance.getCFMetaData(keyspace(), columnFamily()).copy();
1:16044a6:         Triggers triggers = cfm.getTriggers();
1:16044a6: 
1:16044a6:         if (!triggers.get(triggerName).isPresent())
1:591a277:         {
1:16044a6:             if (ifExists)
1:2cbd776:                 return null;
1:16044a6:             else
1:16044a6:                 throw new InvalidRequestException(String.format("Trigger %s was not found", triggerName));
1:8bf6e15:         }
1:16044a6: 
1:16044a6:         logger.info("Dropping trigger with name {}", triggerName);
1:16044a6:         cfm.triggers(triggers.without(triggerName));
1:e5c4027:         MigrationManager.announceColumnFamilyUpdate(cfm, isLocalOnly);
1:2fe6de6:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
1:8bf6e15:     }
1:8bf6e15: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:3079ae6
commit:e5c4027
/////////////////////////////////////////////////////////////////////////
1:             MigrationManager.announceColumnFamilyUpdate(cfm, isLocalOnly);
commit:16044a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.Triggers;
/////////////////////////////////////////////////////////////////////////
1:         Triggers triggers = cfm.getTriggers();
1: 
1:         if (!triggers.get(triggerName).isPresent())
1:             if (ifExists)
0:                 return false;
1:             else
1:                 throw new InvalidRequestException(String.format("Trigger %s was not found", triggerName));
1: 
1:         logger.info("Dropping trigger with name {}", triggerName);
1:         cfm.triggers(triggers.without(triggerName));
0:         MigrationManager.announceColumnFamilyUpdate(cfm, false, isLocalOnly);
0:         return true;
commit:69bfca0
/////////////////////////////////////////////////////////////////////////
1:         CFMetaData cfm = Schema.instance.getCFMetaData(keyspace(), columnFamily()).copy();
commit:edc7531
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void checkAccess(ClientState state) throws UnauthorizedException
1:         state.ensureIsSuper("Only superusers are allowed to perfrom DROP TRIGGER queries");
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration() throws ConfigurationException
commit:a965977
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (!cfm.removeTrigger(triggerName))
0:             throw new ConfigurationException(String.format("Trigger %s was not found", triggerName));
commit:663bdfb
/////////////////////////////////////////////////////////////////////////
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:2cbd776
/////////////////////////////////////////////////////////////////////////
1:     public Event.SchemaChange announceMigration(boolean isLocalOnly) throws ConfigurationException, InvalidRequestException
/////////////////////////////////////////////////////////////////////////
1:                 return null;
/////////////////////////////////////////////////////////////////////////
commit:591a277
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.InvalidRequestException;
/////////////////////////////////////////////////////////////////////////
1:     private final boolean ifExists;
1: 
1:     public DropTriggerStatement(CFName name, String triggerName, boolean ifExists)
1:         this.ifExists = ifExists;
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration(boolean isLocalOnly) throws ConfigurationException, InvalidRequestException
0:         if (cfm.removeTrigger(triggerName))
1:         {
0:             logger.info("Dropping trigger with name {}", triggerName);
0:             MigrationManager.announceColumnFamilyUpdate(cfm, false, isLocalOnly);
0:             return true;
1:         }
0:         if (!ifExists)
0:             throw new InvalidRequestException(String.format("Trigger %s was not found", triggerName));
0:         return false;
commit:2fe6de6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.Event;
/////////////////////////////////////////////////////////////////////////
0:     public Event.SchemaChange changeEvent()
1:         return new Event.SchemaChange(Event.SchemaChange.Change.UPDATED, Event.SchemaChange.Target.TABLE, keyspace(), columnFamily());
commit:78e91c4
/////////////////////////////////////////////////////////////////////////
0:     public void announceMigration(boolean isLocalOnly) throws ConfigurationException
0:         MigrationManager.announceColumnFamilyUpdate(cfm, false, isLocalOnly);
commit:fcdb393
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:664efd4
commit:e4d5eda
/////////////////////////////////////////////////////////////////////////
0:     public boolean announceMigration() throws ConfigurationException
0:         return true;
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8bf6e15
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.cql3.statements;
1: 
0: import org.apache.cassandra.auth.Permission;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.Schema;
0: import org.apache.cassandra.config.TriggerOptions;
1: import org.apache.cassandra.cql3.CFName;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.exceptions.ExceptionCode;
0: import org.apache.cassandra.exceptions.InvalidRequestException;
1: import org.apache.cassandra.exceptions.RequestValidationException;
1: import org.apache.cassandra.exceptions.UnauthorizedException;
1: import org.apache.cassandra.service.ClientState;
1: import org.apache.cassandra.service.MigrationManager;
1: import org.apache.cassandra.thrift.ThriftValidation;
0: import org.apache.cassandra.transport.messages.ResultMessage;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class DropTriggerStatement extends SchemaAlteringStatement
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(DropTriggerStatement.class);
1:     private final String triggerName;
1: 
0:     public DropTriggerStatement(CFName name, String triggerName)
1:     {
1:         super(name);
1:         this.triggerName = triggerName;
1:     }
1: 
0:     public void checkAccess(ClientState state) throws UnauthorizedException, InvalidRequestException
1:     {
0:         state.hasColumnFamilyAccess(keyspace(), columnFamily(), Permission.ALTER);
1:     }
1: 
0:     @Override
1:     public void validate(ClientState state) throws RequestValidationException
1:     {
1:         ThriftValidation.validateColumnFamily(keyspace(), columnFamily());
0:         CFMetaData cfm = Schema.instance.getCFMetaData(keyspace(), columnFamily());
0:         if (cfm.getTriggerClasses() == null)
0:             throw new RequestValidationException(ExceptionCode.CONFIG_ERROR, "No triggers found") {};
0:         if (!TriggerOptions.hasTrigger(cfm, triggerName))
0:             throw new RequestValidationException(ExceptionCode.CONFIG_ERROR, "trigger: " + triggerName + ", not found") {};
1:     }
1: 
0:     public void announceMigration() throws InvalidRequestException, ConfigurationException
1:     {
0:         CFMetaData cfm = Schema.instance.getCFMetaData(keyspace(), columnFamily()).clone();
0:         TriggerOptions.remove(cfm, triggerName);
0:         logger.info("Dropping trigger with name {}", triggerName);
0:         MigrationManager.announceColumnFamilyUpdate(cfm, false);
1:     }
1: 
0:     public ResultMessage.SchemaChange.Change changeType()
1:     {
0:         return ResultMessage.SchemaChange.Change.UPDATED;
1:     }
1: }
============================================================================