1:72790dc: /*
1:72790dc:  * Licensed to the Apache Software Foundation (ASF) under one
1:72790dc:  * or more contributor license agreements.  See the NOTICE file
1:72790dc:  * distributed with this work for additional information
1:72790dc:  * regarding copyright ownership.  The ASF licenses this file
1:72790dc:  * to you under the Apache License, Version 2.0 (the
1:72790dc:  * "License"); you may not use this file except in compliance
1:72790dc:  * with the License.  You may obtain a copy of the License at
1:72790dc:  *
1:72790dc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:72790dc:  *
1:72790dc:  * Unless required by applicable law or agreed to in writing, software
1:72790dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72790dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72790dc:  * See the License for the specific language governing permissions and
1:72790dc:  * limitations under the License.
1:72790dc:  */
1:72790dc: package org.apache.cassandra.index.sasi.conf;
1:72790dc: 
1:72790dc: import java.nio.ByteBuffer;
1:72790dc: import java.util.Collection;
1:72790dc: import java.util.Collections;
1:72790dc: import java.util.Optional;
1:72790dc: import java.util.Set;
1:48815d4: import java.util.concurrent.ConcurrentHashMap;
1:48815d4: import java.util.concurrent.ConcurrentMap;
1:72790dc: import java.util.concurrent.atomic.AtomicReference;
1:72790dc: 
1:48815d4: import com.google.common.annotations.VisibleForTesting;
1:48815d4: 
1:72790dc: import org.apache.cassandra.config.ColumnDefinition;
1:3928665: import org.apache.cassandra.cql3.Operator;
1:48815d4: import org.apache.cassandra.db.Memtable;
1:72790dc: import org.apache.cassandra.db.marshal.AbstractType;
1:72790dc: import org.apache.cassandra.db.marshal.AsciiType;
1:72790dc: import org.apache.cassandra.db.marshal.UTF8Type;
1:72790dc: import org.apache.cassandra.db.rows.Cell;
1:72790dc: import org.apache.cassandra.db.rows.Row;
1:72790dc: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1:72790dc: import org.apache.cassandra.index.sasi.conf.view.View;
1:2ca2fff: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
1:7d857b4: import org.apache.cassandra.index.sasi.disk.RowKey;
1:72790dc: import org.apache.cassandra.index.sasi.disk.Token;
1:72790dc: import org.apache.cassandra.index.sasi.memory.IndexMemtable;
1:72790dc: import org.apache.cassandra.index.sasi.plan.Expression;
1:479e8af: import org.apache.cassandra.index.sasi.plan.Expression.Op;
1:72790dc: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1:48815d4: import org.apache.cassandra.index.sasi.utils.RangeUnionIterator;
1:72790dc: import org.apache.cassandra.io.sstable.Component;
1:72790dc: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:72790dc: import org.apache.cassandra.schema.IndexMetadata;
1:72790dc: import org.apache.cassandra.utils.FBUtilities;
1:72790dc: 
1:72790dc: public class ColumnIndex
2:72790dc: {
1:72790dc:     private static final String FILE_NAME_FORMAT = "SI_%s.db";
1:72790dc: 
1:72790dc:     private final AbstractType<?> keyValidator;
1:72790dc: 
1:72790dc:     private final ColumnDefinition column;
1:72790dc:     private final Optional<IndexMetadata> config;
1:72790dc: 
1:72790dc:     private final AtomicReference<IndexMemtable> memtable;
1:48815d4:     private final ConcurrentMap<Memtable, IndexMemtable> pendingFlush = new ConcurrentHashMap<>();
1:48815d4: 
1:72790dc:     private final IndexMode mode;
1:72790dc: 
1:72790dc:     private final Component component;
1:72790dc:     private final DataTracker tracker;
1:72790dc: 
1:479e8af:     private final boolean isTokenized;
1:479e8af: 
1:72790dc:     public ColumnIndex(AbstractType<?> keyValidator, ColumnDefinition column, IndexMetadata metadata)
1:72790dc:     {
1:72790dc:         this.keyValidator = keyValidator;
1:72790dc:         this.column = column;
1:72790dc:         this.config = metadata == null ? Optional.empty() : Optional.of(metadata);
1:72790dc:         this.mode = IndexMode.getMode(column, config);
1:72790dc:         this.memtable = new AtomicReference<>(new IndexMemtable(this));
1:72790dc:         this.tracker = new DataTracker(keyValidator, this);
1:72790dc:         this.component = new Component(Component.Type.SECONDARY_INDEX, String.format(FILE_NAME_FORMAT, getIndexName()));
1:479e8af:         this.isTokenized = getAnalyzer().isTokenizing();
2:72790dc:     }
1:72790dc: 
1:72790dc:     /**
1:72790dc:      * Initialize this column index with specific set of SSTables.
1:72790dc:      *
1:72790dc:      * @param sstables The sstables to be used by index initially.
1:72790dc:      *
1:72790dc:      * @return A collection of sstables which don't have this specific index attached to them.
1:72790dc:      */
1:72790dc:     public Iterable<SSTableReader> init(Set<SSTableReader> sstables)
1:72790dc:     {
1:72790dc:         return tracker.update(Collections.emptySet(), sstables);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public AbstractType<?> keyValidator()
1:72790dc:     {
1:72790dc:         return keyValidator;
1:72790dc:     }
1:72790dc: 
1:7d857b4:     public long index(RowKey key, Row row)
1:72790dc:     {
1:48815d4:         return getCurrentMemtable().index(key, getValueOf(column, row, FBUtilities.nowInSeconds()));
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void switchMemtable()
1:72790dc:     {
1:48815d4:         // discard current memtable with all of it's data, useful on truncate
1:72790dc:         memtable.set(new IndexMemtable(this));
1:72790dc:     }
1:72790dc: 
1:48815d4:     public void switchMemtable(Memtable parent)
1:48815d4:     {
1:48815d4:         pendingFlush.putIfAbsent(parent, memtable.getAndSet(new IndexMemtable(this)));
1:48815d4:     }
1:48815d4: 
1:48815d4:     public void discardMemtable(Memtable parent)
1:48815d4:     {
1:48815d4:         pendingFlush.remove(parent);
1:48815d4:     }
1:48815d4: 
1:48815d4:     @VisibleForTesting
1:48815d4:     public IndexMemtable getCurrentMemtable()
1:48815d4:     {
1:48815d4:         return memtable.get();
1:48815d4:     }
1:48815d4: 
1:48815d4:     @VisibleForTesting
1:48815d4:     public Collection<IndexMemtable> getPendingMemtables()
1:48815d4:     {
1:48815d4:         return pendingFlush.values();
1:48815d4:     }
1:48815d4: 
1:72790dc:     public RangeIterator<Long, Token> searchMemtable(Expression e)
1:72790dc:     {
1:48815d4:         RangeIterator.Builder<Long, Token> builder = new RangeUnionIterator.Builder<>();
1:48815d4:         builder.add(getCurrentMemtable().search(e));
1:48815d4:         for (IndexMemtable memtable : getPendingMemtables())
1:48815d4:             builder.add(memtable.search(e));
1:48815d4: 
1:48815d4:         return builder.build();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public void update(Collection<SSTableReader> oldSSTables, Collection<SSTableReader> newSSTables)
1:72790dc:     {
1:72790dc:         tracker.update(oldSSTables, newSSTables);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public ColumnDefinition getDefinition()
1:72790dc:     {
1:72790dc:         return column;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public AbstractType<?> getValidator()
1:72790dc:     {
1:72790dc:         return column.cellValueType();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public Component getComponent()
1:72790dc:     {
1:72790dc:         return component;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public IndexMode getMode()
1:72790dc:     {
1:72790dc:         return mode;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public String getColumnName()
1:72790dc:     {
1:72790dc:         return column.name.toString();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public String getIndexName()
1:72790dc:     {
1:72790dc:         return config.isPresent() ? config.get().name : "undefined";
1:72790dc:     }
1:72790dc: 
1:72790dc:     public AbstractAnalyzer getAnalyzer()
1:72790dc:     {
1:72790dc:         AbstractAnalyzer analyzer = mode.getAnalyzer(getValidator());
1:72790dc:         analyzer.init(config.isPresent() ? config.get().options : Collections.emptyMap(), column.cellValueType());
1:72790dc:         return analyzer;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public View getView()
1:72790dc:     {
1:72790dc:         return tracker.getView();
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean hasSSTable(SSTableReader sstable)
1:72790dc:     {
1:72790dc:         return tracker.hasSSTable(sstable);
1:72790dc:     }
1:72790dc: 
1:fa11316:     public void dropData(Collection<SSTableReader> sstablesToRebuild)
1:fa11316:     {
1:fa11316:         tracker.dropData(sstablesToRebuild);
1:fa11316:     }
1:fa11316: 
1:72790dc:     public void dropData(long truncateUntil)
1:72790dc:     {
1:72790dc:         switchMemtable();
1:72790dc:         tracker.dropData(truncateUntil);
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isIndexed()
1:72790dc:     {
1:72790dc:         return mode != IndexMode.NOT_INDEXED;
1:72790dc:     }
1:72790dc: 
1:72790dc:     public boolean isLiteral()
1:72790dc:     {
1:72790dc:         AbstractType<?> validator = getValidator();
1:72790dc:         return isIndexed() ? mode.isLiteral : (validator instanceof UTF8Type || validator instanceof AsciiType);
1:3928665:     }
1:3928665: 
1:479e8af:     public boolean supports(Operator op)
1:3928665:     {
1:bdae452:         if (op == Operator.LIKE)
1:bdae452:             return isLiteral();
1:72790dc: 
1:479e8af:         Op operator = Op.valueOf(op);
1:479e8af:         return !(isTokenized && operator == Op.EQ) // EQ is only applicable to non-tokenized indexes
1:2ca2fff:                && !(isTokenized && mode.mode == OnDiskIndexBuilder.Mode.CONTAINS && operator == Op.PREFIX) // PREFIX not supported on tokenized CONTAINS mode indexes
1:479e8af:                && !(isLiteral() && operator == Op.RANGE) // RANGE only applicable to indexes non-literal indexes
1:479e8af:                && mode.supports(operator); // for all other cases let's refer to index itself
1:479e8af: 
1:72790dc:     }
1:72790dc: 
1:72790dc:     public static ByteBuffer getValueOf(ColumnDefinition column, Row row, int nowInSecs)
1:72790dc:     {
1:b7d1d44:         if (row == null)
1:b7d1d44:             return null;
1:b7d1d44: 
1:72790dc:         switch (column.kind)
1:72790dc:         {
1:72790dc:             case CLUSTERING:
1:5c6cdc6:                 // skip indexing of static clustering when regular column is indexed
1:5c6cdc6:                 if (row.isStatic())
1:5c6cdc6:                     return null;
1:5c6cdc6: 
1:72790dc:                 return row.clustering().get(column.position());
1:72790dc: 
1:b7d1d44:             // treat static cell retrieval the same was as regular
1:b7d1d44:             // only if row kind is STATIC otherwise return null
1:b7d1d44:             case STATIC:
1:b7d1d44:                 if (!row.isStatic())
1:b7d1d44:                     return null;
1:72790dc:             case REGULAR:
1:72790dc:                 Cell cell = row.getCell(column);
1:72790dc:                 return cell == null || !cell.isLive(nowInSecs) ? null : cell.value();
1:72790dc: 
1:72790dc:             default:
1:72790dc:                 return null;
1:72790dc:         }
1:72790dc:     }
1:72790dc: }
============================================================================
author:Alex Petrov
-------------------------------------------------------------------------------
commit:7d857b4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.RowKey;
/////////////////////////////////////////////////////////////////////////
1:     public long index(RowKey key, Row row)
commit:fa11316
/////////////////////////////////////////////////////////////////////////
1:     public void dropData(Collection<SSTableReader> sstablesToRebuild)
1:     {
1:         tracker.dropData(sstablesToRebuild);
1:     }
1: 
commit:5c6cdc6
/////////////////////////////////////////////////////////////////////////
1:                 // skip indexing of static clustering when regular column is indexed
1:                 if (row.isStatic())
1:                     return null;
1: 
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:b7d1d44
/////////////////////////////////////////////////////////////////////////
1:         if (row == null)
1:             return null;
1: 
1:             // treat static cell retrieval the same was as regular
1:             // only if row kind is STATIC otherwise return null
1:             case STATIC:
1:                 if (!row.isStatic())
1:                     return null;
commit:48815d4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
1: import com.google.common.annotations.VisibleForTesting;
1: 
1: import org.apache.cassandra.db.Memtable;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.utils.RangeUnionIterator;
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<Memtable, IndexMemtable> pendingFlush = new ConcurrentHashMap<>();
1: 
/////////////////////////////////////////////////////////////////////////
1:         return getCurrentMemtable().index(key, getValueOf(column, row, FBUtilities.nowInSeconds()));
1:         // discard current memtable with all of it's data, useful on truncate
1:     public void switchMemtable(Memtable parent)
1:     {
1:         pendingFlush.putIfAbsent(parent, memtable.getAndSet(new IndexMemtable(this)));
1:     }
1: 
1:     public void discardMemtable(Memtable parent)
1:     {
1:         pendingFlush.remove(parent);
1:     }
1: 
1:     @VisibleForTesting
1:     public IndexMemtable getCurrentMemtable()
1:     {
1:         return memtable.get();
1:     }
1: 
1:     @VisibleForTesting
1:     public Collection<IndexMemtable> getPendingMemtables()
1:     {
1:         return pendingFlush.values();
1:     }
1: 
1:         RangeIterator.Builder<Long, Token> builder = new RangeUnionIterator.Builder<>();
1:         builder.add(getCurrentMemtable().search(e));
1:         for (IndexMemtable memtable : getPendingMemtables())
1:             builder.add(memtable.search(e));
1: 
1:         return builder.build();
commit:479e8af
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.plan.Expression.Op;
/////////////////////////////////////////////////////////////////////////
1:     private final boolean isTokenized;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.isTokenized = getAnalyzer().isTokenizing();
/////////////////////////////////////////////////////////////////////////
1:     public boolean supports(Operator op)
1:         Op operator = Op.valueOf(op);
1:         return !(isTokenized && operator == Op.EQ) // EQ is only applicable to non-tokenized indexes
1:             && !(isLiteral() && operator == Op.RANGE) // RANGE only applicable to indexes non-literal indexes
1:             && mode.supports(operator); // for all other cases let's refer to index itself
1: 
commit:f8e86eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:3928665
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.Operator;
/////////////////////////////////////////////////////////////////////////
0:     public boolean supports(Operator operator)
1:     {
0:         return mode.supports(Expression.Op.valueOf(operator));
1:     }
1: 
commit:72790dc
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.index.sasi.conf;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Collection;
1: import java.util.Collections;
1: import java.util.Optional;
1: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: import org.apache.cassandra.db.marshal.AsciiType;
1: import org.apache.cassandra.db.marshal.UTF8Type;
1: import org.apache.cassandra.db.rows.Cell;
1: import org.apache.cassandra.db.rows.Row;
0: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.index.sasi.analyzer.AbstractAnalyzer;
1: import org.apache.cassandra.index.sasi.conf.view.View;
1: import org.apache.cassandra.index.sasi.disk.Token;
1: import org.apache.cassandra.index.sasi.memory.IndexMemtable;
1: import org.apache.cassandra.index.sasi.plan.Expression;
1: import org.apache.cassandra.index.sasi.utils.RangeIterator;
1: import org.apache.cassandra.io.sstable.Component;
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
1: import org.apache.cassandra.schema.IndexMetadata;
1: import org.apache.cassandra.utils.FBUtilities;
1: 
1: public class ColumnIndex
1: {
1:     private static final String FILE_NAME_FORMAT = "SI_%s.db";
1: 
1:     private final AbstractType<?> keyValidator;
1: 
1:     private final ColumnDefinition column;
1:     private final Optional<IndexMetadata> config;
1: 
1:     private final AtomicReference<IndexMemtable> memtable;
1:     private final IndexMode mode;
1: 
1:     private final Component component;
1:     private final DataTracker tracker;
1: 
1:     public ColumnIndex(AbstractType<?> keyValidator, ColumnDefinition column, IndexMetadata metadata)
1:     {
1:         this.keyValidator = keyValidator;
1:         this.column = column;
1:         this.config = metadata == null ? Optional.empty() : Optional.of(metadata);
1:         this.mode = IndexMode.getMode(column, config);
1:         this.memtable = new AtomicReference<>(new IndexMemtable(this));
1:         this.tracker = new DataTracker(keyValidator, this);
1:         this.component = new Component(Component.Type.SECONDARY_INDEX, String.format(FILE_NAME_FORMAT, getIndexName()));
1:     }
1: 
0:     public void validate() throws ConfigurationException
1:     {
0:         mode.validate(config);
1:     }
1: 
1:     /**
1:      * Initialize this column index with specific set of SSTables.
1:      *
1:      * @param sstables The sstables to be used by index initially.
1:      *
1:      * @return A collection of sstables which don't have this specific index attached to them.
1:      */
1:     public Iterable<SSTableReader> init(Set<SSTableReader> sstables)
1:     {
1:         return tracker.update(Collections.emptySet(), sstables);
1:     }
1: 
1:     public AbstractType<?> keyValidator()
1:     {
1:         return keyValidator;
1:     }
1: 
0:     public long index(DecoratedKey key, Row row)
1:     {
0:         return memtable.get().index(key, getValueOf(column, row, FBUtilities.nowInSeconds()));
1:     }
1: 
1:     public void switchMemtable()
1:     {
1:         memtable.set(new IndexMemtable(this));
1:     }
1: 
1:     public RangeIterator<Long, Token> searchMemtable(Expression e)
1:     {
0:         return memtable.get().search(e);
1:     }
1: 
1:     public void update(Collection<SSTableReader> oldSSTables, Collection<SSTableReader> newSSTables)
1:     {
1:         tracker.update(oldSSTables, newSSTables);
1:     }
1: 
1:     public ColumnDefinition getDefinition()
1:     {
1:         return column;
1:     }
1: 
1:     public AbstractType<?> getValidator()
1:     {
1:         return column.cellValueType();
1:     }
1: 
1:     public Component getComponent()
1:     {
1:         return component;
1:     }
1: 
1:     public IndexMode getMode()
1:     {
1:         return mode;
1:     }
1: 
1:     public String getColumnName()
1:     {
1:         return column.name.toString();
1:     }
1: 
1:     public String getIndexName()
1:     {
1:         return config.isPresent() ? config.get().name : "undefined";
1:     }
1: 
1:     public AbstractAnalyzer getAnalyzer()
1:     {
1:         AbstractAnalyzer analyzer = mode.getAnalyzer(getValidator());
1:         analyzer.init(config.isPresent() ? config.get().options : Collections.emptyMap(), column.cellValueType());
1:         return analyzer;
1:     }
1: 
1:     public View getView()
1:     {
1:         return tracker.getView();
1:     }
1: 
1:     public boolean hasSSTable(SSTableReader sstable)
1:     {
1:         return tracker.hasSSTable(sstable);
1:     }
1: 
1:     public void dropData(long truncateUntil)
1:     {
1:         switchMemtable();
1:         tracker.dropData(truncateUntil);
1:     }
1: 
1:     public boolean isIndexed()
1:     {
1:         return mode != IndexMode.NOT_INDEXED;
1:     }
1: 
1:     public boolean isLiteral()
1:     {
1:         AbstractType<?> validator = getValidator();
1:         return isIndexed() ? mode.isLiteral : (validator instanceof UTF8Type || validator instanceof AsciiType);
1:     }
1: 
1:     public static ByteBuffer getValueOf(ColumnDefinition column, Row row, int nowInSecs)
1:     {
1:         switch (column.kind)
1:         {
1:             case CLUSTERING:
1:                 return row.clustering().get(column.position());
1: 
1:             case REGULAR:
1:                 Cell cell = row.getCell(column);
1:                 return cell == null || !cell.isLive(nowInSecs) ? null : cell.value();
1: 
1:             default:
1:                 return null;
1:         }
1:     }
1: }
author:Jordan West
-------------------------------------------------------------------------------
commit:2ca2fff
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.index.sasi.disk.OnDiskIndexBuilder;
/////////////////////////////////////////////////////////////////////////
1:                && !(isTokenized && mode.mode == OnDiskIndexBuilder.Mode.CONTAINS && operator == Op.PREFIX) // PREFIX not supported on tokenized CONTAINS mode indexes
0:                && !(isLiteral() && operator == Op.RANGE) // RANGE only applicable to indexes non-literal indexes
0:                && mode.supports(operator); // for all other cases let's refer to index itself
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:bdae452
/////////////////////////////////////////////////////////////////////////
1:         if (op == Operator.LIKE)
1:             return isLiteral();
0: 
============================================================================