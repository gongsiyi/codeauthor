1:401b46b: /*
1:401b46b:  * Licensed to the Apache Software Foundation (ASF) under one
1:401b46b:  * or more contributor license agreements.  See the NOTICE file
1:401b46b:  * distributed with this work for additional information
1:401b46b:  * regarding copyright ownership.  The ASF licenses this file
1:401b46b:  * to you under the Apache License, Version 2.0 (the
1:401b46b:  * "License"); you may not use this file except in compliance
1:401b46b:  * with the License.  You may obtain a copy of the License at
1:401b46b:  *
1:401b46b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:401b46b:  *
1:401b46b:  * Unless required by applicable law or agreed to in writing, software
1:401b46b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:401b46b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:401b46b:  * See the License for the specific language governing permissions and
1:401b46b:  * limitations under the License.
1:401b46b:  */
1:401b46b: package org.apache.cassandra.transport.messages;
2:401b46b: 
1:401b46b: import org.apache.cassandra.transport.CBUtil;
1:401b46b: import org.apache.cassandra.transport.Message;
1:cbf304e: import io.netty.buffer.ByteBuf;
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:401b46b: 
1:4960355: import java.nio.ByteBuffer;
1:4960355: 
1:401b46b: /**
1:401b46b:  * SASL challenge sent from client to server
1:401b46b:  */
1:4960355: public class AuthChallenge extends Message.Response
2:401b46b: {
1:4960355:     public static final Message.Codec<AuthChallenge> codec = new Message.Codec<AuthChallenge>()
1:401b46b:     {
1:e0adc16:         public AuthChallenge decode(ByteBuf body, ProtocolVersion version)
1:401b46b:         {
1:4960355:             ByteBuffer b = CBUtil.readValue(body);
1:4960355:             byte[] token = new byte[b.remaining()];
1:4960355:             b.get(token);
1:4960355:             return new AuthChallenge(token);
2:401b46b:         }
1:401b46b: 
1:e0adc16:         public void encode(AuthChallenge challenge, ByteBuf dest, ProtocolVersion version)
1:401b46b:         {
1:f8be23a:             CBUtil.writeValue(challenge.token, dest);
1:f8be23a:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(AuthChallenge challenge, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             return CBUtil.sizeOfValue(challenge.token);
1:401b46b:         }
1:401b46b:     };
1:401b46b: 
1:401b46b:     private byte[] token;
1:401b46b: 
1:4960355:     public AuthChallenge(byte[] token)
1:401b46b:     {
1:1a70df0:         super(Message.Type.AUTH_CHALLENGE);
1:401b46b:         this.token = token;
1:401b46b:     }
1:401b46b: 
1:401b46b:     public byte[] getToken()
1:401b46b:     {
1:401b46b:         return token;
1:401b46b:     }
1:401b46b: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:         public AuthChallenge decode(ByteBuf body, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:         public void encode(AuthChallenge challenge, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(AuthChallenge challenge, ProtocolVersion version)
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public AuthChallenge decode(ByteBuf body, int version)
/////////////////////////////////////////////////////////////////////////
0:         public void encode(AuthChallenge challenge, ByteBuf dest, int version)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         public void encode(AuthChallenge challenge, ChannelBuffer dest, int version)
1:             CBUtil.writeValue(challenge.token, dest);
1:         }
1: 
0:         public int encodedSize(AuthChallenge challenge, int version)
1:         {
1:             return CBUtil.sizeOfValue(challenge.token);
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(AuthChallenge challenge, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:4960355
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: 
1: public class AuthChallenge extends Message.Response
1:     public static final Message.Codec<AuthChallenge> codec = new Message.Codec<AuthChallenge>()
0:         public AuthChallenge decode(ChannelBuffer body, int version)
1:             ByteBuffer b = CBUtil.readValue(body);
1:             byte[] token = new byte[b.remaining()];
1:             b.get(token);
1:             return new AuthChallenge(token);
0:         public ChannelBuffer encode(AuthChallenge challenge)
/////////////////////////////////////////////////////////////////////////
1:     public AuthChallenge(byte[] token)
commit:1a70df0
/////////////////////////////////////////////////////////////////////////
0:             return new SaslChallenge(CBUtil.readValue(body));
0:             return CBUtil.valueToCB(challenge.token);
/////////////////////////////////////////////////////////////////////////
1:         super(Message.Type.AUTH_CHALLENGE);
commit:401b46b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
1: import org.apache.cassandra.transport.CBUtil;
1: import org.apache.cassandra.transport.Message;
0: import org.jboss.netty.buffer.ChannelBuffer;
1: 
1: /**
1:  * SASL challenge sent from client to server
1:  */
0: public class SaslChallenge extends Message.Response
1: {
0:     public static final Message.Codec<SaslChallenge> codec = new Message.Codec<SaslChallenge>()
1:     {
0:         @Override
0:         public SaslChallenge decode(ChannelBuffer body, int version)
1:         {
0:             return new SaslChallenge(CBUtil.readBytes(body));
1:         }
1: 
0:         @Override
0:         public ChannelBuffer encode(SaslChallenge challenge)
1:         {
0:             return CBUtil.bytesToCB(challenge.token);
1:         }
1:     };
1: 
1:     private byte[] token;
1: 
0:     public SaslChallenge(byte[] token)
1:     {
0:         super(Message.Type.SASL_CHALLENGE);
1:         this.token = token;
1:     }
1: 
0:     @Override
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
1:     public byte[] getToken()
1:     {
1:         return token;
1:     }
1: }
============================================================================