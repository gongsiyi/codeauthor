1:07cf56f: /*
1:c59a4fc:  * Licensed to the Apache Software Foundation (ASF) under one
1:c59a4fc:  * or more contributor license agreements.  See the NOTICE file
1:c59a4fc:  * distributed with this work for additional information
1:c59a4fc:  * regarding copyright ownership.  The ASF licenses this file
1:c59a4fc:  * to you under the Apache License, Version 2.0 (the
1:c59a4fc:  * "License"); you may not use this file except in compliance
1:c59a4fc:  * with the License.  You may obtain a copy of the License at
1:c59a4fc:  *
1:c59a4fc:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c59a4fc:  *
1:c59a4fc:  * Unless required by applicable law or agreed to in writing, software
1:c59a4fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c59a4fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c59a4fc:  * See the License for the specific language governing permissions and
1:c59a4fc:  * limitations under the License.
1:c59a4fc:  */
1:c59a4fc: package org.apache.cassandra.locator;
1:c59a4fc: 
1:c59a4fc: import java.net.InetAddress;
1:34e241a: import java.util.List;
1:c59a4fc: 
2:c59a4fc: /**
1:ce9179e:  * A simple endpoint snitch implementation that treats Strategy order as proximity,
1:ce9179e:  * allowing non-read-repaired reads to prefer a single endpoint, which improves
1:ce9179e:  * cache locality.
1:c59a4fc:  */
1:34e241a: public class SimpleSnitch extends AbstractEndpointSnitch
1:c59a4fc: {
1:67c5720:     public String getRack(InetAddress endpoint)
1:c59a4fc:     {
1:a8b89fb:         return "rack1";
1:c59a4fc:     }
1:c59a4fc: 
1:67c5720:     public String getDatacenter(InetAddress endpoint)
1:c59a4fc:     {
1:a8b89fb:         return "datacenter1";
1:c59a4fc:     }
1:c59a4fc: 
1:31f4e62:     @Override
1:7aac793:     public void sortByProximity(final InetAddress address, List<InetAddress> addresses)
2:67c5720:     {
1:31f4e62:         // Optimization to avoid walking the list
1:31f4e62:     }
1:31f4e62: 
1:31f4e62:     public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:31f4e62:     {
1:31f4e62:         // Making all endpoints equal ensures we won't change the original ordering (since
1:31f4e62:         // Collections.sort is guaranteed to be stable)
1:31f4e62:         return 0;
1:c59a4fc:     }
2:67c5720: }
============================================================================
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:31f4e62
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         // Optimization to avoid walking the list
1:     }
1: 
1:     public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
1:     {
1:         // Making all endpoints equal ensures we won't change the original ordering (since
1:         // Collections.sort is guaranteed to be stable)
1:         return 0;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a8b89fb
/////////////////////////////////////////////////////////////////////////
1:         return "rack1";
1:         return "datacenter1";
commit:7aac793
/////////////////////////////////////////////////////////////////////////
1:     public void sortByProximity(final InetAddress address, List<InetAddress> addresses)
commit:ce9179e
/////////////////////////////////////////////////////////////////////////
1:  * A simple endpoint snitch implementation that treats Strategy order as proximity,
1:  * allowing non-read-repaired reads to prefer a single endpoint, which improves
1:  * cache locality.
commit:d52fcb1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         throw new UnsupportedOperationException();
0:         throw new UnsupportedOperationException();
commit:34e241a
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collection;
1: import java.util.List;
1: public class SimpleSnitch extends AbstractEndpointSnitch
0:         return new ArrayList<InetAddress>(addresses);
commit:c59a4fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.locator;
1: 
1: import java.net.InetAddress;
0: import java.util.*;
1: 
1: /**
0:  * A simple endpoint snitch implementation does not sort addresses by
0:  * proximity.
1:  */
0: public class SimpleSnitch implements IEndpointSnitch
1: {
0:     public List<InetAddress> getSortedListByProximity(final InetAddress address, Collection<InetAddress> addresses)
1:     {
0:         List<InetAddress> list = new ArrayList<InetAddress>(addresses);
0:         return list;
1:     }
1: 
0:     public List<InetAddress> sortByProximity(final InetAddress address, List<InetAddress> addresses)
1:     {
0:         return addresses;
1:     }
1: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:67c5720
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.lang.NotImplementedException;
0: 
1:     public String getRack(InetAddress endpoint)
1:     {
0:         throw new NotImplementedException();
1:     }
0: 
1:     public String getDatacenter(InetAddress endpoint)
1:     {
0:         throw new NotImplementedException();
1:     }
0:     
============================================================================