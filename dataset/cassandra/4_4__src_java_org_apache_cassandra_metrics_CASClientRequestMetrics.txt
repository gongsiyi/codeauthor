1:67db1bf: /*
1:67db1bf:  * Licensed to the Apache Software Foundation (ASF) under one
1:67db1bf:  * or more contributor license agreements.  See the NOTICE file
1:67db1bf:  * distributed with this work for additional information
1:67db1bf:  * regarding copyright ownership.  The ASF licenses this file
1:67db1bf:  * to you under the Apache License, Version 2.0 (the
1:67db1bf:  * "License"); you may not use this file except in compliance
1:67db1bf:  * with the License.  You may obtain a copy of the License at
1:67db1bf:  *
1:67db1bf:  *   http://www.apache.org/licenses/LICENSE-2.0
1:67db1bf:  *
1:67db1bf:  * Unless required by applicable law or agreed to in writing,
1:67db1bf:  * software distributed under the License is distributed on an
1:67db1bf:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:67db1bf:  * KIND, either express or implied.  See the License for the
1:67db1bf:  * specific language governing permissions and limitations
1:67db1bf:  * under the License.
1:67db1bf:  */
1:67db1bf: package org.apache.cassandra.metrics;
2:67db1bf: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: import com.codahale.metrics.Histogram;
1:8896a70: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:67db1bf: 
1:67db1bf: public class CASClientRequestMetrics extends ClientRequestMetrics
1:67db1bf: {
1:67db1bf:     public final Histogram contention;
1:67db1bf:     /* Used only for write  */
1:67db1bf:     public final Counter conditionNotMet;
1:67db1bf: 
1:67db1bf:     public final Counter unfinishedCommit;
1:67db1bf: 
1:68d2526:     public CASClientRequestMetrics(String scope) 
1:68d2526:     {
1:67db1bf:         super(scope);
1:5aa19cb:         contention = Metrics.histogram(factory.createMetricName("ContentionHistogram"), false);
1:8896a70:         conditionNotMet =  Metrics.counter(factory.createMetricName("ConditionNotMet"));
1:8896a70:         unfinishedCommit =  Metrics.counter(factory.createMetricName("UnfinishedCommit"));
1:67db1bf:     }
1:67db1bf: 
1:67db1bf:     public void release()
1:67db1bf:     {
1:67db1bf:         super.release();
1:8896a70:         Metrics.remove(factory.createMetricName("ContentionHistogram"));
1:8896a70:         Metrics.remove(factory.createMetricName("ConditionNotMet"));
1:8896a70:         Metrics.remove(factory.createMetricName("UnfinishedCommit"));
1:67db1bf:     }
1:67db1bf: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:     public CASClientRequestMetrics(String scope) 
1:     {
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:5aa19cb
/////////////////////////////////////////////////////////////////////////
1:         contention = Metrics.histogram(factory.createMetricName("ContentionHistogram"), false);
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Histogram;
1: 
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
0:         contention = Metrics.histogram(factory.createMetricName("ContentionHistogram"));
1:         conditionNotMet =  Metrics.counter(factory.createMetricName("ConditionNotMet"));
1:         unfinishedCommit =  Metrics.counter(factory.createMetricName("UnfinishedCommit"));
1:         Metrics.remove(factory.createMetricName("ContentionHistogram"));
1:         Metrics.remove(factory.createMetricName("ConditionNotMet"));
1:         Metrics.remove(factory.createMetricName("UnfinishedCommit"));
author:Brandon Williams
-------------------------------------------------------------------------------
commit:67db1bf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
0: import com.yammer.metrics.*;
0: import com.yammer.metrics.core.*;
1: 
1: public class CASClientRequestMetrics extends ClientRequestMetrics
1: {
1: 
1:     public final Histogram contention;
1:     /* Used only for write  */
1:     public final Counter conditionNotMet;
1: 
1:     public final Counter unfinishedCommit;
1: 
0:     public CASClientRequestMetrics(String scope) {
1:         super(scope);
0:         contention = Metrics.newHistogram(factory.createMetricName("ContentionHistogram"), true);
0:         conditionNotMet =  Metrics.newCounter(factory.createMetricName("ConditionNotMet"));
0:         unfinishedCommit =  Metrics.newCounter(factory.createMetricName("UnfinishedCommit"));
1:     }
1: 
1:     public void release()
1:     {
1:         super.release();
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("ContentionHistogram"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("ConditionNotMet"));
0:         Metrics.defaultRegistry().removeMetric(factory.createMetricName("UnfinishedCommit"));
1:     }
1: }
============================================================================