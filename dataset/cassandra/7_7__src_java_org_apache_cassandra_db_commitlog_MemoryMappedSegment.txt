1:44f8254: /*
1:44f8254:  * Licensed to the Apache Software Foundation (ASF) under one
1:44f8254:  * or more contributor license agreements.  See the NOTICE file
1:44f8254:  * distributed with this work for additional information
1:44f8254:  * regarding copyright ownership.  The ASF licenses this file
1:44f8254:  * to you under the Apache License, Version 2.0 (the
1:44f8254:  * "License"); you may not use this file except in compliance
1:44f8254:  * with the License.  You may obtain a copy of the License at
1:44f8254:  *
1:44f8254:  *     http://www.apache.org/licenses/LICENSE-2.0
1:44f8254:  *
1:44f8254:  * Unless required by applicable law or agreed to in writing, software
1:44f8254:  * distributed under the License is distributed on an "AS IS" BASIS,
1:44f8254:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:44f8254:  * See the License for the specific language governing permissions and
1:44f8254:  * limitations under the License.
1:44f8254:  */
1:44f8254: package org.apache.cassandra.db.commitlog;
1:44f8254: 
1:44f8254: import java.io.IOException;
1:44f8254: import java.io.RandomAccessFile;
1:44f8254: import java.nio.ByteBuffer;
1:44f8254: import java.nio.MappedByteBuffer;
1:44f8254: import java.nio.channels.FileChannel;
1:44f8254: 
1:44f8254: import org.apache.cassandra.config.DatabaseDescriptor;
1:44f8254: import org.apache.cassandra.io.FSWriteError;
1:44f8254: import org.apache.cassandra.io.util.FileUtils;
1:44f8254: import org.apache.cassandra.utils.CLibrary;
1:91187b5: import org.apache.cassandra.utils.SyncUtil;
1:44f8254: 
1:44f8254: /*
1:44f8254:  * Memory-mapped segment. Maps the destination channel into an appropriately-sized memory-mapped buffer in which the
1:44f8254:  * mutation threads write. On sync forces the buffer to disk.
1:44f8254:  * If possible, recycles used segment files to avoid reallocating large chunks of disk.
1:44f8254:  */
1:44f8254: public class MemoryMappedSegment extends CommitLogSegment
1:44f8254: {
1:44f8254:     /**
1:44f8254:      * Constructs a new segment file.
1:44f8254:      *
1:44f8254:      * @param commitLog the commit log it will be used with.
1:44f8254:      */
1:e31e216:     MemoryMappedSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
1:44f8254:     {
1:e31e216:         super(commitLog, manager);
1:44f8254:         // mark the initial sync marker as uninitialised
1:44f8254:         int firstSync = buffer.position();
1:44f8254:         buffer.putInt(firstSync + 0, 0);
1:44f8254:         buffer.putInt(firstSync + 4, 0);
1:44f8254:     }
1:44f8254: 
1:44f8254:     ByteBuffer createBuffer(CommitLog commitLog)
1:44f8254:     {
1:44f8254:         try
1:44f8254:         {
1:44f8254:             // Extend the file size to the standard segment size.
1:44f8254:             // NOTE: while we're using RAF to easily adjust file size, we need to avoid using RAF
1:44f8254:             // for grabbing the FileChannel due to FILE_SHARE_DELETE flag bug on windows.
1:44f8254:             // See: https://bugs.openjdk.java.net/browse/JDK-6357433 and CASSANDRA-8308
1:44f8254:             try (RandomAccessFile raf = new RandomAccessFile(logFile, "rw"))
1:44f8254:             {
1:44f8254:                 raf.setLength(DatabaseDescriptor.getCommitLogSegmentSize());
1:44f8254:             }
1:44f8254:             catch (IOException e)
1:44f8254:             {
1:44f8254:                 throw new FSWriteError(e, logFile);
1:44f8254:             }
1:e31e216:             manager.addSize(DatabaseDescriptor.getCommitLogSegmentSize());
1:44f8254: 
1:44f8254:             return channel.map(FileChannel.MapMode.READ_WRITE, 0, DatabaseDescriptor.getCommitLogSegmentSize());
1:44f8254:         }
1:44f8254:         catch (IOException e)
1:44f8254:         {
1:44f8254:             throw new FSWriteError(e, logFile);
1:44f8254:         }
1:44f8254:     }
1:44f8254: 
1:44f8254:     @Override
1:44f8254:     void write(int startMarker, int nextMarker)
1:44f8254:     {
1:44f8254:         // if there's room in the discard section to write an empty header,
1:44f8254:         // zero out the next sync marker so replayer can cleanly exit
1:44f8254:         if (nextMarker <= buffer.capacity() - SYNC_MARKER_SIZE)
1:44f8254:         {
1:44f8254:             buffer.putInt(nextMarker, 0);
1:44f8254:             buffer.putInt(nextMarker + 4, 0);
1:44f8254:         }
1:44f8254: 
1:44f8254:         // write previous sync marker to point to next sync marker
1:44f8254:         // we don't chain the crcs here to ensure this method is idempotent if it fails
1:44f8254:         writeSyncMarker(buffer, startMarker, startMarker, nextMarker);
1:44f8254: 
1:68d2526:         try
1:68d2526:         {
1:91187b5:             SyncUtil.force((MappedByteBuffer) buffer);
1:44f8254:         }
1:44f8254:         catch (Exception e) // MappedByteBuffer.force() does not declare IOException but can actually throw it
1:44f8254:         {
1:44f8254:             throw new FSWriteError(e, getPath());
1:44f8254:         }
1:cb06283:         CLibrary.trySkipCache(fd, startMarker, nextMarker, logFile.getAbsolutePath());
1:44f8254:     }
1:44f8254: 
1:44f8254:     @Override
1:675a0f4:     public long onDiskSize()
1:675a0f4:     {
1:675a0f4:         return DatabaseDescriptor.getCommitLogSegmentSize();
1:675a0f4:     }
1:675a0f4: 
1:675a0f4:     @Override
1:44f8254:     protected void internalClose()
1:44f8254:     {
1:54836ec:         if (FileUtils.isCleanerAvailable)
1:44f8254:             FileUtils.clean(buffer);
1:44f8254:         super.internalClose();
1:44f8254:     }
1:44f8254: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:         try
1:         {
author:Robert Stupp
-------------------------------------------------------------------------------
commit:54836ec
/////////////////////////////////////////////////////////////////////////
1:         if (FileUtils.isCleanerAvailable)
author:Josh McKenzie
-------------------------------------------------------------------------------
commit:e31e216
/////////////////////////////////////////////////////////////////////////
1:     MemoryMappedSegment(CommitLog commitLog, AbstractCommitLogSegmentManager manager)
1:         super(commitLog, manager);
/////////////////////////////////////////////////////////////////////////
1:             manager.addSize(DatabaseDescriptor.getCommitLogSegmentSize());
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
commit:675a0f4
/////////////////////////////////////////////////////////////////////////
0:             commitLog.allocator.addSize(DatabaseDescriptor.getCommitLogSegmentSize());
/////////////////////////////////////////////////////////////////////////
1:     public long onDiskSize()
1:     {
1:         return DatabaseDescriptor.getCommitLogSegmentSize();
1:     }
1: 
1:     @Override
author:ariel
-------------------------------------------------------------------------------
commit:cb06283
/////////////////////////////////////////////////////////////////////////
1:         CLibrary.trySkipCache(fd, startMarker, nextMarker, logFile.getAbsolutePath());
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:91187b5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.SyncUtil;
/////////////////////////////////////////////////////////////////////////
1:             SyncUtil.force((MappedByteBuffer) buffer);
author:blambov
-------------------------------------------------------------------------------
commit:44f8254
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.nio.ByteBuffer;
1: import java.nio.MappedByteBuffer;
1: import java.nio.channels.FileChannel;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: import org.apache.cassandra.io.FSWriteError;
1: import org.apache.cassandra.io.util.FileUtils;
1: import org.apache.cassandra.utils.CLibrary;
1: 
1: /*
1:  * Memory-mapped segment. Maps the destination channel into an appropriately-sized memory-mapped buffer in which the
1:  * mutation threads write. On sync forces the buffer to disk.
1:  * If possible, recycles used segment files to avoid reallocating large chunks of disk.
1:  */
1: public class MemoryMappedSegment extends CommitLogSegment
1: {
1:     /**
1:      * Constructs a new segment file.
1:      *
0:      * @param filePath  if not null, recycles the existing file by renaming it and truncating it to CommitLog.SEGMENT_SIZE.
1:      * @param commitLog the commit log it will be used with.
1:      */
0:     MemoryMappedSegment(CommitLog commitLog)
1:     {
0:         super(commitLog);
1:         // mark the initial sync marker as uninitialised
1:         int firstSync = buffer.position();
1:         buffer.putInt(firstSync + 0, 0);
1:         buffer.putInt(firstSync + 4, 0);
1:     }
1: 
1:     ByteBuffer createBuffer(CommitLog commitLog)
1:     {
1:         try
1:         {
1:             // Extend the file size to the standard segment size.
1:             // NOTE: while we're using RAF to easily adjust file size, we need to avoid using RAF
1:             // for grabbing the FileChannel due to FILE_SHARE_DELETE flag bug on windows.
1:             // See: https://bugs.openjdk.java.net/browse/JDK-6357433 and CASSANDRA-8308
1:             try (RandomAccessFile raf = new RandomAccessFile(logFile, "rw"))
1:             {
1:                 raf.setLength(DatabaseDescriptor.getCommitLogSegmentSize());
1:             }
1:             catch (IOException e)
1:             {
1:                 throw new FSWriteError(e, logFile);
1:             }
1: 
1:             return channel.map(FileChannel.MapMode.READ_WRITE, 0, DatabaseDescriptor.getCommitLogSegmentSize());
1:         }
1:         catch (IOException e)
1:         {
1:             throw new FSWriteError(e, logFile);
1:         }
1:     }
1: 
1:     @Override
1:     void write(int startMarker, int nextMarker)
1:     {
1:         // if there's room in the discard section to write an empty header,
1:         // zero out the next sync marker so replayer can cleanly exit
1:         if (nextMarker <= buffer.capacity() - SYNC_MARKER_SIZE)
1:         {
1:             buffer.putInt(nextMarker, 0);
1:             buffer.putInt(nextMarker + 4, 0);
1:         }
1: 
1:         // write previous sync marker to point to next sync marker
1:         // we don't chain the crcs here to ensure this method is idempotent if it fails
1:         writeSyncMarker(buffer, startMarker, startMarker, nextMarker);
1: 
0:         try {
0:             ((MappedByteBuffer) buffer).force();
1:         }
1:         catch (Exception e) // MappedByteBuffer.force() does not declare IOException but can actually throw it
1:         {
1:             throw new FSWriteError(e, getPath());
1:         }
0:         CLibrary.trySkipCache(fd, startMarker, nextMarker);
1:     }
1: 
1:     @Override
1:     protected void internalClose()
1:     {
0:         if (FileUtils.isCleanerAvailable())
1:             FileUtils.clean(buffer);
1:         super.internalClose();
1:     }
1: }
============================================================================