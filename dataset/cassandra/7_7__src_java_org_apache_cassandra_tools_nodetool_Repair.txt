1:c5a8190: /*
1:c5a8190:  * Licensed to the Apache Software Foundation (ASF) under one
1:c5a8190:  * or more contributor license agreements.  See the NOTICE file
1:c5a8190:  * distributed with this work for additional information
1:c5a8190:  * regarding copyright ownership.  The ASF licenses this file
1:c5a8190:  * to you under the Apache License, Version 2.0 (the
1:c5a8190:  * "License"); you may not use this file except in compliance
1:c5a8190:  * with the License.  You may obtain a copy of the License at
1:c5a8190:  *
1:c5a8190:  *     http://www.apache.org/licenses/LICENSE-2.0
1:c5a8190:  *
1:c5a8190:  * Unless required by applicable law or agreed to in writing, software
1:c5a8190:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c5a8190:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c5a8190:  * See the License for the specific language governing permissions and
1:c5a8190:  * limitations under the License.
1:c5a8190:  */
1:c5a8190: package org.apache.cassandra.tools.nodetool;
1:c5a8190: 
1:c5a8190: import static com.google.common.collect.Lists.newArrayList;
1:c5a8190: import static org.apache.commons.lang3.StringUtils.EMPTY;
1:c5a8190: import io.airlift.command.Arguments;
1:c5a8190: import io.airlift.command.Command;
1:c5a8190: import io.airlift.command.Option;
1:c5a8190: 
1:c5a8190: import java.util.ArrayList;
1:c5a8190: import java.util.HashMap;
1:c5a8190: import java.util.List;
1:c5a8190: import java.util.Map;
1:2deb68e: import java.util.Set;
1:2deb68e: 
1:2deb68e: import com.google.common.collect.Sets;
1:c5a8190: 
1:9797511: import org.apache.cassandra.config.SchemaConstants;
1:c5a8190: import org.apache.cassandra.repair.RepairParallelism;
1:c5a8190: import org.apache.cassandra.repair.messages.RepairOption;
1:c5a8190: import org.apache.cassandra.tools.NodeProbe;
1:c5a8190: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1:c5a8190: import org.apache.commons.lang3.StringUtils;
1:c5a8190: 
1:c5a8190: @Command(name = "repair", description = "Repair one or more tables")
1:c5a8190: public class Repair extends NodeToolCmd
1:c5a8190: {
1:9797511:     public final static Set<String> ONLY_EXPLICITLY_REPAIRED = Sets.newHashSet(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME);
1:2deb68e: 
1:c5a8190:     @Arguments(usage = "[<keyspace> <tables>...]", description = "The keyspace followed by one or many tables")
1:c5a8190:     private List<String> args = new ArrayList<>();
1:c5a8190: 
1:c5a8190:     @Option(title = "seqential", name = {"-seq", "--sequential"}, description = "Use -seq to carry out a sequential repair")
1:c5a8190:     private boolean sequential = false;
1:c5a8190: 
1:c5a8190:     @Option(title = "dc parallel", name = {"-dcpar", "--dc-parallel"}, description = "Use -dcpar to repair data centers in parallel.")
1:c5a8190:     private boolean dcParallel = false;
1:c5a8190: 
1:c5a8190:     @Option(title = "local_dc", name = {"-local", "--in-local-dc"}, description = "Use -local to only repair against nodes in the same datacenter")
1:c5a8190:     private boolean localDC = false;
1:c5a8190: 
1:c5a8190:     @Option(title = "specific_dc", name = {"-dc", "--in-dc"}, description = "Use -dc to repair specific datacenters")
1:e8651b6:     private List<String> specificDataCenters = new ArrayList<>();;
1:c5a8190: 
1:c5a8190:     @Option(title = "specific_host", name = {"-hosts", "--in-hosts"}, description = "Use -hosts to repair specific hosts")
1:c5a8190:     private List<String> specificHosts = new ArrayList<>();
1:c5a8190: 
1:c5a8190:     @Option(title = "start_token", name = {"-st", "--start-token"}, description = "Use -st to specify a token at which the repair range starts")
1:c5a8190:     private String startToken = EMPTY;
1:c5a8190: 
1:c5a8190:     @Option(title = "end_token", name = {"-et", "--end-token"}, description = "Use -et to specify a token at which repair range ends")
1:c5a8190:     private String endToken = EMPTY;
1:c5a8190: 
1:c5a8190:     @Option(title = "primary_range", name = {"-pr", "--partitioner-range"}, description = "Use -pr to repair only the first range returned by the partitioner")
1:c5a8190:     private boolean primaryRange = false;
1:c5a8190: 
1:c5a8190:     @Option(title = "full", name = {"-full", "--full"}, description = "Use -full to issue a full repair.")
1:c5a8190:     private boolean fullRepair = false;
1:c5a8190: 
1:c5a8190:     @Option(title = "job_threads", name = {"-j", "--job-threads"}, description = "Number of threads to run repair jobs. " +
1:c5a8190:                                                                                  "Usually this means number of CFs to repair concurrently. " +
1:c5a8190:                                                                                  "WARNING: increasing this puts more load on repairing nodes, so be careful. (default: 1, max: 4)")
1:c5a8190:     private int numJobThreads = 1;
1:c5a8190: 
1:c5a8190:     @Option(title = "trace_repair", name = {"-tr", "--trace"}, description = "Use -tr to trace the repair. Traces are logged to system_traces.events.")
1:c5a8190:     private boolean trace = false;
1:c5a8190: 
1:b29736c:     @Option(title = "pull_repair", name = {"-pl", "--pull"}, description = "Use --pull to perform a one way repair where data is only streamed from a remote node to this node.")
1:b29736c:     private boolean pullRepair = false;
1:b29736c: 
1:c5a8190:     @Override
1:c5a8190:     public void execute(NodeProbe probe)
1:c5a8190:     {
1:a4e1182:         List<String> keyspaces = parseOptionalKeyspace(args, probe, KeyspaceSet.NON_LOCAL_STRATEGY);
1:0bd5170:         String[] cfnames = parseOptionalTables(args);
1:c5a8190: 
1:c5a8190:         if (primaryRange && (!specificDataCenters.isEmpty() || !specificHosts.isEmpty()))
1:c5a8190:             throw new RuntimeException("Primary range repair should be performed on all nodes in the cluster.");
1:c5a8190: 
1:c5a8190:         for (String keyspace : keyspaces)
1:c5a8190:         {
1:2deb68e:             // avoid repairing system_distributed by default (CASSANDRA-9621)
1:2deb68e:             if ((args == null || args.isEmpty()) && ONLY_EXPLICITLY_REPAIRED.contains(keyspace))
1:2deb68e:                 continue;
1:2deb68e: 
1:c5a8190:             Map<String, String> options = new HashMap<>();
1:c5a8190:             RepairParallelism parallelismDegree = RepairParallelism.PARALLEL;
1:c5a8190:             if (sequential)
1:c5a8190:                 parallelismDegree = RepairParallelism.SEQUENTIAL;
1:c5a8190:             else if (dcParallel)
1:c5a8190:                 parallelismDegree = RepairParallelism.DATACENTER_AWARE;
1:c5a8190:             options.put(RepairOption.PARALLELISM_KEY, parallelismDegree.getName());
1:c5a8190:             options.put(RepairOption.PRIMARY_RANGE_KEY, Boolean.toString(primaryRange));
1:c5a8190:             options.put(RepairOption.INCREMENTAL_KEY, Boolean.toString(!fullRepair));
1:c5a8190:             options.put(RepairOption.JOB_THREADS_KEY, Integer.toString(numJobThreads));
1:c5a8190:             options.put(RepairOption.TRACE_KEY, Boolean.toString(trace));
1:c5a8190:             options.put(RepairOption.COLUMNFAMILIES_KEY, StringUtils.join(cfnames, ","));
1:b29736c:             options.put(RepairOption.PULL_REPAIR_KEY, Boolean.toString(pullRepair));
1:c5a8190:             if (!startToken.isEmpty() || !endToken.isEmpty())
1:c5a8190:             {
1:c5a8190:                 options.put(RepairOption.RANGES_KEY, startToken + ":" + endToken);
2:c5a8190:             }
1:c5a8190:             if (localDC)
1:c5a8190:             {
1:c5a8190:                 options.put(RepairOption.DATACENTERS_KEY, StringUtils.join(newArrayList(probe.getDataCenter()), ","));
1:9797511:             }
1:c5a8190:             else
1:c5a8190:             {
1:c5a8190:                 options.put(RepairOption.DATACENTERS_KEY, StringUtils.join(specificDataCenters, ","));
1:c5a8190:             }
1:c5a8190:             options.put(RepairOption.HOSTS_KEY, StringUtils.join(specificHosts, ","));
1:c5a8190:             try
1:c5a8190:             {
1:c5a8190:                 probe.repairAsync(System.out, keyspace, options);
1:c5a8190:             } catch (Exception e)
1:c5a8190:             {
1:c5a8190:                 throw new RuntimeException("Error occurred during repair", e);
1:c5a8190:             }
1:c5a8190:         }
1:c5a8190:     }
1:c5a8190: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.SchemaConstants;
/////////////////////////////////////////////////////////////////////////
1:     public final static Set<String> ONLY_EXPLICITLY_REPAIRED = Sets.newHashSet(SchemaConstants.DISTRIBUTED_KEYSPACE_NAME);
/////////////////////////////////////////////////////////////////////////
1: }
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:b29736c
/////////////////////////////////////////////////////////////////////////
1:     @Option(title = "pull_repair", name = {"-pl", "--pull"}, description = "Use --pull to perform a one way repair where data is only streamed from a remote node to this node.")
1:     private boolean pullRepair = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:             options.put(RepairOption.PULL_REPAIR_KEY, Boolean.toString(pullRepair));
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:a4e1182
/////////////////////////////////////////////////////////////////////////
1:         List<String> keyspaces = parseOptionalKeyspace(args, probe, KeyspaceSet.NON_LOCAL_STRATEGY);
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1:     private List<String> specificDataCenters = new ArrayList<>();;
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:0bd5170
/////////////////////////////////////////////////////////////////////////
1:         String[] cfnames = parseOptionalTables(args);
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:2deb68e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
1: import com.google.common.collect.Sets;
0: import org.apache.cassandra.repair.SystemDistributedKeyspace;
/////////////////////////////////////////////////////////////////////////
0:     public final static Set<String> ONLY_EXPLICITLY_REPAIRED = Sets.newHashSet(SystemDistributedKeyspace.NAME);
1: 
/////////////////////////////////////////////////////////////////////////
1:             // avoid repairing system_distributed by default (CASSANDRA-9621)
1:             if ((args == null || args.isEmpty()) && ONLY_EXPLICITLY_REPAIRED.contains(keyspace))
1:                 continue;
1: 
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c5a8190
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.tools.nodetool;
1: 
1: import static com.google.common.collect.Lists.newArrayList;
1: import static org.apache.commons.lang3.StringUtils.EMPTY;
1: import io.airlift.command.Arguments;
1: import io.airlift.command.Command;
1: import io.airlift.command.Option;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: 
1: import org.apache.cassandra.repair.RepairParallelism;
1: import org.apache.cassandra.repair.messages.RepairOption;
1: import org.apache.cassandra.tools.NodeProbe;
1: import org.apache.cassandra.tools.NodeTool.NodeToolCmd;
1: import org.apache.commons.lang3.StringUtils;
1: 
1: @Command(name = "repair", description = "Repair one or more tables")
1: public class Repair extends NodeToolCmd
1: {
1:     @Arguments(usage = "[<keyspace> <tables>...]", description = "The keyspace followed by one or many tables")
1:     private List<String> args = new ArrayList<>();
1: 
1:     @Option(title = "seqential", name = {"-seq", "--sequential"}, description = "Use -seq to carry out a sequential repair")
1:     private boolean sequential = false;
1: 
1:     @Option(title = "dc parallel", name = {"-dcpar", "--dc-parallel"}, description = "Use -dcpar to repair data centers in parallel.")
1:     private boolean dcParallel = false;
1: 
1:     @Option(title = "local_dc", name = {"-local", "--in-local-dc"}, description = "Use -local to only repair against nodes in the same datacenter")
1:     private boolean localDC = false;
1: 
1:     @Option(title = "specific_dc", name = {"-dc", "--in-dc"}, description = "Use -dc to repair specific datacenters")
0:     private List<String> specificDataCenters = new ArrayList<>();
1: 
1:     @Option(title = "specific_host", name = {"-hosts", "--in-hosts"}, description = "Use -hosts to repair specific hosts")
1:     private List<String> specificHosts = new ArrayList<>();
1: 
1:     @Option(title = "start_token", name = {"-st", "--start-token"}, description = "Use -st to specify a token at which the repair range starts")
1:     private String startToken = EMPTY;
1: 
1:     @Option(title = "end_token", name = {"-et", "--end-token"}, description = "Use -et to specify a token at which repair range ends")
1:     private String endToken = EMPTY;
1: 
1:     @Option(title = "primary_range", name = {"-pr", "--partitioner-range"}, description = "Use -pr to repair only the first range returned by the partitioner")
1:     private boolean primaryRange = false;
1: 
1:     @Option(title = "full", name = {"-full", "--full"}, description = "Use -full to issue a full repair.")
1:     private boolean fullRepair = false;
1: 
1:     @Option(title = "job_threads", name = {"-j", "--job-threads"}, description = "Number of threads to run repair jobs. " +
1:                                                                                  "Usually this means number of CFs to repair concurrently. " +
1:                                                                                  "WARNING: increasing this puts more load on repairing nodes, so be careful. (default: 1, max: 4)")
1:     private int numJobThreads = 1;
1: 
1:     @Option(title = "trace_repair", name = {"-tr", "--trace"}, description = "Use -tr to trace the repair. Traces are logged to system_traces.events.")
1:     private boolean trace = false;
1: 
1:     @Override
1:     public void execute(NodeProbe probe)
1:     {
0:         List<String> keyspaces = parseOptionalKeyspace(args, probe);
0:         String[] cfnames = parseOptionalColumnFamilies(args);
1: 
1:         if (primaryRange && (!specificDataCenters.isEmpty() || !specificHosts.isEmpty()))
1:             throw new RuntimeException("Primary range repair should be performed on all nodes in the cluster.");
1: 
1:         for (String keyspace : keyspaces)
1:         {
1:             Map<String, String> options = new HashMap<>();
1:             RepairParallelism parallelismDegree = RepairParallelism.PARALLEL;
1:             if (sequential)
1:                 parallelismDegree = RepairParallelism.SEQUENTIAL;
1:             else if (dcParallel)
1:                 parallelismDegree = RepairParallelism.DATACENTER_AWARE;
1:             options.put(RepairOption.PARALLELISM_KEY, parallelismDegree.getName());
1:             options.put(RepairOption.PRIMARY_RANGE_KEY, Boolean.toString(primaryRange));
1:             options.put(RepairOption.INCREMENTAL_KEY, Boolean.toString(!fullRepair));
1:             options.put(RepairOption.JOB_THREADS_KEY, Integer.toString(numJobThreads));
1:             options.put(RepairOption.TRACE_KEY, Boolean.toString(trace));
1:             options.put(RepairOption.COLUMNFAMILIES_KEY, StringUtils.join(cfnames, ","));
1:             if (!startToken.isEmpty() || !endToken.isEmpty())
1:             {
1:                 options.put(RepairOption.RANGES_KEY, startToken + ":" + endToken);
1:             }
1:             if (localDC)
1:             {
1:                 options.put(RepairOption.DATACENTERS_KEY, StringUtils.join(newArrayList(probe.getDataCenter()), ","));
1:             }
1:             else
1:             {
1:                 options.put(RepairOption.DATACENTERS_KEY, StringUtils.join(specificDataCenters, ","));
1:             }
1:             options.put(RepairOption.HOSTS_KEY, StringUtils.join(specificHosts, ","));
1:             try
1:             {
1:                 probe.repairAsync(System.out, keyspace, options);
1:             } catch (Exception e)
1:             {
1:                 throw new RuntimeException("Error occurred during repair", e);
1:             }
1:         }
1:     }
1: }
============================================================================