1:69cedbf: /*
1:69cedbf:  * Licensed to the Apache Software Foundation (ASF) under one
1:69cedbf:  * or more contributor license agreements.  See the NOTICE file
1:69cedbf:  * distributed with this work for additional information
1:69cedbf:  * regarding copyright ownership.  The ASF licenses this file
1:69cedbf:  * to you under the Apache License, Version 2.0 (the
1:69cedbf:  * "License"); you may not use this file except in compliance
1:69cedbf:  * with the License.  You may obtain a copy of the License at
1:69cedbf:  *
1:69cedbf:  *     http://www.apache.org/licenses/LICENSE-2.0
1:69cedbf:  *
1:69cedbf:  * Unless required by applicable law or agreed to in writing, software
1:69cedbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:69cedbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:69cedbf:  * See the License for the specific language governing permissions and
1:69cedbf:  * limitations under the License.
1:69cedbf:  */
1:69cedbf: package org.apache.cassandra.metrics;
1:69cedbf: 
1:69cedbf: import java.util.*;
1:69cedbf: import java.util.concurrent.ThreadPoolExecutor;
1:69cedbf: 
1:8896a70: import com.codahale.metrics.Counter;
1:8896a70: import com.codahale.metrics.Gauge;
1:8896a70: import com.codahale.metrics.Meter;
1:69cedbf: 
1:a808769: import org.apache.cassandra.config.CFMetaData;
1:69cedbf: import org.apache.cassandra.config.Schema;
1:69cedbf: import org.apache.cassandra.db.ColumnFamilyStore;
1:0e96e58: import org.apache.cassandra.db.Keyspace;
1:69cedbf: import org.apache.cassandra.db.compaction.CompactionInfo;
1:69cedbf: import org.apache.cassandra.db.compaction.CompactionManager;
1:69cedbf: 
1:8896a70: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1:8896a70: 
1:69cedbf: /**
1:69cedbf:  * Metrics for compaction.
1:69cedbf:  */
1:69cedbf: public class CompactionMetrics implements CompactionManager.CompactionExecutorStatsCollector
1:69cedbf: {
1:eb390d0:     public static final MetricNameFactory factory = new DefaultNameFactory("Compaction");
1:69cedbf: 
1:69cedbf:     // a synchronized identity set of running tasks to their compaction info
1:69cedbf:     private static final Set<CompactionInfo.Holder> compactions = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<CompactionInfo.Holder, Boolean>()));
1:69cedbf: 
1:69cedbf:     /** Estimated number of compactions remaining to perform */
1:69cedbf:     public final Gauge<Integer> pendingTasks;
1:a808769:     /** Estimated number of compactions remaining to perform, group by keyspace and then table name */
1:a808769:     public final Gauge<Map<String, Map<String, Integer>>> pendingTasksByTableName;
1:a808769: 
1:69cedbf:     /** Number of completed compactions since server [re]start */
1:69cedbf:     public final Gauge<Long> completedTasks;
1:69cedbf:     /** Total number of compactions since server [re]start */
1:69cedbf:     public final Meter totalCompactionsCompleted;
1:69cedbf:     /** Total number of bytes compacted since server [re]start */
1:69cedbf:     public final Counter bytesCompacted;
1:69cedbf: 
1:69cedbf:     public CompactionMetrics(final ThreadPoolExecutor... collectors)
1:69cedbf:     {
1:8896a70:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Integer>()
1:69cedbf:         {
1:8896a70:             public Integer getValue()
1:69cedbf:             {
1:69cedbf:                 int n = 0;
1:f283ed2:                 // add estimate number of compactions need to be done
1:0e96e58:                 for (String keyspaceName : Schema.instance.getKeyspaces())
1:69cedbf:                 {
1:0e96e58:                     for (ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores())
1:7df3a5c:                         n += cfs.getCompactionStrategyManager().getEstimatedRemainingTasks();
1:69cedbf:                 }
1:f283ed2:                 // add number of currently running compactions
1:f283ed2:                 return n + compactions.size();
1:69cedbf:             }
1:69cedbf:         });
1:a808769: 
1:a808769:         pendingTasksByTableName = Metrics.register(factory.createMetricName("PendingTasksByTableName"),
1:a808769:             new Gauge<Map<String, Map<String, Integer>>>()
1:a808769:         {
1:a808769:             @Override
1:68d2526:             public Map<String, Map<String, Integer>> getValue() 
1:68d2526:             {
1:a808769:                 Map<String, Map<String, Integer>> resultMap = new HashMap<>();
1:a808769:                 // estimation of compactions need to be done
1:a808769:                 for (String keyspaceName : Schema.instance.getKeyspaces())
1:a808769:                 {
1:a808769:                     for (ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores())
1:a808769:                     {
1:a808769:                         int taskNumber = cfs.getCompactionStrategyManager().getEstimatedRemainingTasks();
1:a808769:                         if (taskNumber > 0)
1:a808769:                         {
1:a808769:                             if (!resultMap.containsKey(keyspaceName))
1:a808769:                             {
1:a808769:                                 resultMap.put(keyspaceName, new HashMap<>());
1:a808769:                             }
1:a808769:                             resultMap.get(keyspaceName).put(cfs.getTableName(), taskNumber);
1:a808769:                         }
1:a808769:                     }
1:a808769:                 }
1:a808769: 
1:a808769:                 // currently running compactions
1:a808769:                 for (CompactionInfo.Holder compaction : compactions)
1:a808769:                 {
1:a808769:                     CFMetaData metaData = compaction.getCompactionInfo().getCFMetaData();
1:4754cdd:                     if (metaData == null)
1:4754cdd:                     {
1:4754cdd:                         continue;
1:4754cdd:                     }
1:a808769:                     if (!resultMap.containsKey(metaData.ksName))
1:a808769:                     {
1:a808769:                         resultMap.put(metaData.ksName, new HashMap<>());
1:a808769:                     }
1:a808769: 
1:a808769:                     Map<String, Integer> tableNameToCountMap = resultMap.get(metaData.ksName);
1:a808769:                     if (tableNameToCountMap.containsKey(metaData.cfName))
1:a808769:                     {
1:a808769:                         tableNameToCountMap.put(metaData.cfName,
1:a808769:                                                 tableNameToCountMap.get(metaData.cfName) + 1);
1:a808769:                     }
1:a808769:                     else
1:a808769:                     {
1:a808769:                         tableNameToCountMap.put(metaData.cfName, 1);
1:a808769:                     }
1:a808769:                 }
1:a808769:                 return resultMap;
1:a808769:             }
1:a808769:         });
1:a808769: 
1:8896a70:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:69cedbf:         {
1:8896a70:             public Long getValue()
1:69cedbf:             {
1:69cedbf:                 long completedTasks = 0;
2:69cedbf:                 for (ThreadPoolExecutor collector : collectors)
1:69cedbf:                     completedTasks += collector.getCompletedTaskCount();
1:69cedbf:                 return completedTasks;
1:69cedbf:             }
1:69cedbf:         });
1:8896a70:         totalCompactionsCompleted = Metrics.meter(factory.createMetricName("TotalCompactionsCompleted"));
1:8896a70:         bytesCompacted = Metrics.counter(factory.createMetricName("BytesCompacted"));
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public void beginCompaction(CompactionInfo.Holder ci)
1:69cedbf:     {
1:69cedbf:         compactions.add(ci);
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public void finishCompaction(CompactionInfo.Holder ci)
1:69cedbf:     {
1:69cedbf:         compactions.remove(ci);
1:69cedbf:         bytesCompacted.inc(ci.getCompactionInfo().getTotal());
1:69cedbf:         totalCompactionsCompleted.mark();
1:69cedbf:     }
1:69cedbf: 
1:69cedbf:     public static List<CompactionInfo.Holder> getCompactions()
1:69cedbf:     {
1:69cedbf:         return new ArrayList<CompactionInfo.Holder>(compactions);
1:69cedbf:     }
1:69cedbf: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:68d2526
/////////////////////////////////////////////////////////////////////////
1:             public Map<String, Map<String, Integer>> getValue() 
1:             {
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:286f6a1
/////////////////////////////////////////////////////////////////////////
author:Achal Shah
-------------------------------------------------------------------------------
commit:4754cdd
/////////////////////////////////////////////////////////////////////////
1:                     if (metaData == null)
1:                     {
1:                         continue;
1:                     }
author:Taiyuan Zhang
-------------------------------------------------------------------------------
commit:a808769
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.CFMetaData;
/////////////////////////////////////////////////////////////////////////
1:     /** Estimated number of compactions remaining to perform, group by keyspace and then table name */
1:     public final Gauge<Map<String, Map<String, Integer>>> pendingTasksByTableName;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         pendingTasksByTableName = Metrics.register(factory.createMetricName("PendingTasksByTableName"),
1:             new Gauge<Map<String, Map<String, Integer>>>()
1:         {
1:             @Override
0:             public Map<String, Map<String, Integer>> getValue() {
1:                 Map<String, Map<String, Integer>> resultMap = new HashMap<>();
1:                 // estimation of compactions need to be done
1:                 for (String keyspaceName : Schema.instance.getKeyspaces())
1:                 {
1:                     for (ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores())
1:                     {
1:                         int taskNumber = cfs.getCompactionStrategyManager().getEstimatedRemainingTasks();
1:                         if (taskNumber > 0)
1:                         {
1:                             if (!resultMap.containsKey(keyspaceName))
1:                             {
1:                                 resultMap.put(keyspaceName, new HashMap<>());
1:                             }
1:                             resultMap.get(keyspaceName).put(cfs.getTableName(), taskNumber);
1:                         }
1:                     }
1:                 }
1: 
1:                 // currently running compactions
1:                 for (CompactionInfo.Holder compaction : compactions)
1:                 {
1:                     CFMetaData metaData = compaction.getCompactionInfo().getCFMetaData();
1:                     if (!resultMap.containsKey(metaData.ksName))
1:                     {
1:                         resultMap.put(metaData.ksName, new HashMap<>());
1:                     }
1: 
1:                     Map<String, Integer> tableNameToCountMap = resultMap.get(metaData.ksName);
1:                     if (tableNameToCountMap.containsKey(metaData.cfName))
1:                     {
1:                         tableNameToCountMap.put(metaData.cfName,
1:                                                 tableNameToCountMap.get(metaData.cfName) + 1);
1:                     }
1:                     else
1:                     {
1:                         tableNameToCountMap.put(metaData.cfName, 1);
1:                     }
1:                 }
1:                 return resultMap;
1:             }
1:         });
1: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:83e3787
commit:ce63a2e
commit:f283ed2
/////////////////////////////////////////////////////////////////////////
1:                 // add estimate number of compactions need to be done
1:                 // add number of currently running compactions
1:                 return n + compactions.size();
commit:6e3a241
commit:eb390d0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final MetricNameFactory factory = new DefaultNameFactory("Compaction");
/////////////////////////////////////////////////////////////////////////
0:         pendingTasks = Metrics.newGauge(factory.createMetricName("PendingTasks"), new Gauge<Integer>()
/////////////////////////////////////////////////////////////////////////
0:         completedTasks = Metrics.newGauge(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
/////////////////////////////////////////////////////////////////////////
0:         totalCompactionsCompleted = Metrics.newMeter(factory.createMetricName("TotalCompactionsCompleted"), "compaction completed", TimeUnit.SECONDS);
0:         bytesCompacted = Metrics.newCounter(factory.createMetricName("BytesCompacted"));
commit:69cedbf
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.metrics;
1: 
1: import java.util.*;
1: import java.util.concurrent.ThreadPoolExecutor;
0: import java.util.concurrent.TimeUnit;
1: 
0: import com.yammer.metrics.Metrics;
0: import com.yammer.metrics.core.Counter;
0: import com.yammer.metrics.core.Gauge;
0: import com.yammer.metrics.core.Meter;
0: import com.yammer.metrics.core.MetricName;
1: 
1: import org.apache.cassandra.config.Schema;
1: import org.apache.cassandra.db.ColumnFamilyStore;
0: import org.apache.cassandra.db.Table;
1: import org.apache.cassandra.db.compaction.CompactionInfo;
1: import org.apache.cassandra.db.compaction.CompactionManager;
1: 
1: /**
1:  * Metrics for compaction.
1:  */
1: public class CompactionMetrics implements CompactionManager.CompactionExecutorStatsCollector
1: {
0:     public static final String GROUP_NAME = "org.apache.cassandra.metrics";
0:     public static final String TYPE_NAME = "Compaction";
1: 
1:     // a synchronized identity set of running tasks to their compaction info
1:     private static final Set<CompactionInfo.Holder> compactions = Collections.synchronizedSet(Collections.newSetFromMap(new IdentityHashMap<CompactionInfo.Holder, Boolean>()));
1: 
1:     /** Estimated number of compactions remaining to perform */
1:     public final Gauge<Integer> pendingTasks;
1:     /** Number of completed compactions since server [re]start */
1:     public final Gauge<Long> completedTasks;
1:     /** Total number of compactions since server [re]start */
1:     public final Meter totalCompactionsCompleted;
1:     /** Total number of bytes compacted since server [re]start */
1:     public final Counter bytesCompacted;
1: 
1:     public CompactionMetrics(final ThreadPoolExecutor... collectors)
1:     {
0:         pendingTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "PendingTasks"), new Gauge<Integer>()
1:         {
0:             public Integer value()
1:             {
1:                 int n = 0;
0:                 for (String tableName : Schema.instance.getTables())
1:                 {
0:                     for (ColumnFamilyStore cfs : Table.open(tableName).getColumnFamilyStores())
0:                         n += cfs.getCompactionStrategy().getEstimatedRemainingTasks();
1:                 }
1:                 for (ThreadPoolExecutor collector : collectors)
0:                     n += collector.getTaskCount() - collector.getCompletedTaskCount();
0:                 return n;
1:             }
1:         });
0:         completedTasks = Metrics.newGauge(new MetricName(GROUP_NAME, TYPE_NAME, "CompletedTasks"), new Gauge<Long>()
1:         {
0:             public Long value()
1:             {
1:                 long completedTasks = 0;
1:                 for (ThreadPoolExecutor collector : collectors)
1:                     completedTasks += collector.getCompletedTaskCount();
1:                 return completedTasks;
1:             }
1:         });
0:         totalCompactionsCompleted = Metrics.newMeter(new MetricName(GROUP_NAME, TYPE_NAME, "TotalCompactionsCompleted"), "compaction completed", TimeUnit.SECONDS);
0:         bytesCompacted = Metrics.newCounter(new MetricName(GROUP_NAME, TYPE_NAME, "BytesCompacted"));
1:     }
1: 
1:     public void beginCompaction(CompactionInfo.Holder ci)
1:     {
0:         // notify
0:         ci.started();
1:         compactions.add(ci);
1:     }
1: 
1:     public void finishCompaction(CompactionInfo.Holder ci)
1:     {
0:         // notify
0:         ci.finished();
1:         compactions.remove(ci);
1:         bytesCompacted.inc(ci.getCompactionInfo().getTotal());
1:         totalCompactionsCompleted.mark();
1:     }
1: 
1:     public static List<CompactionInfo.Holder> getCompactions()
1:     {
1:         return new ArrayList<CompactionInfo.Holder>(compactions);
1:     }
1: }
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:7df3a5c
/////////////////////////////////////////////////////////////////////////
1:                         n += cfs.getCompactionStrategyManager().getEstimatedRemainingTasks();
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:8896a70
/////////////////////////////////////////////////////////////////////////
1: import com.codahale.metrics.Counter;
1: import com.codahale.metrics.Gauge;
1: import com.codahale.metrics.Meter;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.cassandra.metrics.CassandraMetricsRegistry.Metrics;
1: 
/////////////////////////////////////////////////////////////////////////
1:         pendingTasks = Metrics.register(factory.createMetricName("PendingTasks"), new Gauge<Integer>()
1:             public Integer getValue()
/////////////////////////////////////////////////////////////////////////
1:         completedTasks = Metrics.register(factory.createMetricName("CompletedTasks"), new Gauge<Long>()
1:             public Long getValue()
/////////////////////////////////////////////////////////////////////////
1:         totalCompactionsCompleted = Metrics.meter(factory.createMetricName("TotalCompactionsCompleted"));
1:         bytesCompacted = Metrics.counter(factory.createMetricName("BytesCompacted"));
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Keyspace;
/////////////////////////////////////////////////////////////////////////
1:                 for (String keyspaceName : Schema.instance.getKeyspaces())
1:                     for (ColumnFamilyStore cfs : Keyspace.open(keyspaceName).getColumnFamilyStores())
============================================================================