1:ad84e4d: /*
1:ad84e4d:  * Licensed to the Apache Software Foundation (ASF) under one
1:ad84e4d:  * or more contributor license agreements.  See the NOTICE file
1:ad84e4d:  * distributed with this work for additional information
1:ad84e4d:  * regarding copyright ownership.  The ASF licenses this file
1:ad84e4d:  * to you under the Apache License, Version 2.0 (the
1:ad84e4d:  * "License"); you may not use this file except in compliance
1:ad84e4d:  * with the License.  You may obtain a copy of the License at
1:ad84e4d:  *
1:ad84e4d:  *     http://www.apache.org/licenses/LICENSE-2.0
1:ad84e4d:  *
1:ad84e4d:  * Unless required by applicable law or agreed to in writing, software
1:ad84e4d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad84e4d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad84e4d:  * See the License for the specific language governing permissions and
1:ad84e4d:  * limitations under the License.
1:ad84e4d:  */
1:ad84e4d: package org.apache.cassandra.dht;
1:ad84e4d: 
1:6eef6f7: abstract class ComparableObjectToken<C extends Comparable<C>> extends Token
1:ad84e4d: {
1:ad84e4d:     private static final long serialVersionUID = 1L;
1:ad84e4d: 
1:ad84e4d:     final C token;   // Package-private to allow access from subtypes, which should all reside in the dht package.
1:ad84e4d: 
1:6eef6f7:     protected ComparableObjectToken(C token)
1:ad84e4d:     {
1:ad84e4d:         this.token = token;
1:ad84e4d:     }
1:ad84e4d: 
1:ad84e4d:     @Override
1:6eef6f7:     public C getTokenValue()
1:6eef6f7:     {
1:6eef6f7:         return token;
1:6eef6f7:     }
1:6eef6f7: 
1:6eef6f7:     @Override
1:ad84e4d:     public String toString()
1:ad84e4d:     {
1:ad84e4d:         return token.toString();
1:ad84e4d:     }
1:ad84e4d: 
1:ad84e4d:     @Override
1:ad84e4d:     public boolean equals(Object obj)
1:ad84e4d:     {
1:ad84e4d:         if (this == obj)
1:ad84e4d:             return true;
1:ad84e4d:         if (obj == null || this.getClass() != obj.getClass())
1:ad84e4d:             return false;
1:ad84e4d: 
1:6eef6f7:         return token.equals(((ComparableObjectToken<?>)obj).token);
1:ad84e4d:     }
1:ad84e4d: 
1:ad84e4d:     @Override
1:ad84e4d:     public int hashCode()
1:ad84e4d:     {
1:ad84e4d:         return token.hashCode();
1:ad84e4d:     }
1:6eef6f7: 
1:6eef6f7:     @Override
1:6eef6f7:     @SuppressWarnings("unchecked")
1:6eef6f7:     public int compareTo(Token o)
1:6eef6f7:     {
1:6eef6f7:         if (o.getClass() != getClass())
1:6eef6f7:             throw new IllegalArgumentException("Invalid type of Token.compareTo() argument.");
1:6eef6f7: 
1:6eef6f7:         return token.compareTo(((ComparableObjectToken<C>) o).token);
1:6eef6f7:     }
1:9a3fa88: 
1:9a3fa88:     @Override
1:9a3fa88:     public double size(Token next)
1:9a3fa88:     {
1:9a3fa88:         throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:9a3fa88:                                                               getClass().getSimpleName()));
1:9a3fa88:     }
1:9a3fa88: 
1:9a3fa88:     @Override
1:9a3fa88:     public Token increaseSlightly()
1:9a3fa88:     {
1:9a3fa88:         throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:9a3fa88:                                                               getClass().getSimpleName()));
1:9a3fa88:     }
1:ad84e4d: }
============================================================================
author:branimir
-------------------------------------------------------------------------------
commit:9a3fa88
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public double size(Token next)
1:     {
1:         throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:                                                               getClass().getSimpleName()));
1:     }
1: 
1:     @Override
1:     public Token increaseSlightly()
1:     {
1:         throw new UnsupportedOperationException(String.format("Token type %s does not support token allocation.",
1:                                                               getClass().getSimpleName()));
1:     }
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:6eef6f7
/////////////////////////////////////////////////////////////////////////
1: abstract class ComparableObjectToken<C extends Comparable<C>> extends Token
1:     protected ComparableObjectToken(C token)
1:     public C getTokenValue()
1:     {
1:         return token;
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         return token.equals(((ComparableObjectToken<?>)obj).token);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @SuppressWarnings("unchecked")
1:     public int compareTo(Token o)
1:     {
1:         if (o.getClass() != getClass())
1:             throw new IllegalArgumentException("Invalid type of Token.compareTo() argument.");
1: 
1:         return token.compareTo(((ComparableObjectToken<C>) o).token);
1:     }
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.dht;
1: 
0: abstract class AbstractToken<C> extends Token
1: {
1:     private static final long serialVersionUID = 1L;
1: 
1:     final C token;   // Package-private to allow access from subtypes, which should all reside in the dht package.
1: 
0:     protected AbstractToken(C token)
1:     {
1:         this.token = token;
1:     }
1: 
1:     @Override
1:     public String toString()
1:     {
1:         return token.toString();
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj)
1:     {
1:         if (this == obj)
1:             return true;
1:         if (obj == null || this.getClass() != obj.getClass())
1:             return false;
1: 
0:         return token.equals(((AbstractToken<?>)obj).token);
1:     }
1: 
1:     @Override
1:     public int hashCode()
1:     {
1:         return token.hashCode();
1:     }
1: }
============================================================================