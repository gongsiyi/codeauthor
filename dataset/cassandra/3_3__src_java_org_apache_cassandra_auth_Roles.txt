1:b32ce68: /*
1:b32ce68:  * Licensed to the Apache Software Foundation (ASF) under one
1:b32ce68:  * or more contributor license agreements.  See the NOTICE file
1:b32ce68:  * distributed with this work for additional information
1:b32ce68:  * regarding copyright ownership.  The ASF licenses this file
1:b32ce68:  * to you under the Apache License, Version 2.0 (the
1:b32ce68:  * "License"); you may not use this file except in compliance
1:b32ce68:  * with the License.  You may obtain a copy of the License at
1:b32ce68:  *
1:b32ce68:  *     http://www.apache.org/licenses/LICENSE-2.0
1:b32ce68:  *
1:b32ce68:  * Unless required by applicable law or agreed to in writing, software
1:b32ce68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b32ce68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b32ce68:  * See the License for the specific language governing permissions and
1:b32ce68:  * limitations under the License.
1:b32ce68:  */
1:b32ce68: package org.apache.cassandra.auth;
1:b32ce68: 
1:b32ce68: import java.util.Set;
1:b32ce68: 
1:b32ce68: import org.apache.cassandra.config.DatabaseDescriptor;
1:b32ce68: 
1:b32ce68: public class Roles
1:b32ce68: {
1:e379f97:     private static final RolesCache cache = new RolesCache(DatabaseDescriptor.getRoleManager());
1:b32ce68: 
1:b32ce68:     /**
1:b32ce68:      * Get all roles granted to the supplied Role, including both directly granted
1:b32ce68:      * and inherited roles.
1:6b7db8a:      * The returned roles may be cached if {@code roles_validity_in_ms > 0}
1:b32ce68:      *
1:b32ce68:      * @param primaryRole the Role
1:b32ce68:      * @return set of all granted Roles for the primary Role
1:b32ce68:      */
1:b32ce68:     public static Set<RoleResource> getRoles(RoleResource primaryRole)
1:b32ce68:     {
1:b32ce68:         return cache.getRoles(primaryRole);
1:b32ce68:     }
1:b32ce68: 
1:b32ce68:     /**
1:b32ce68:      * Returns true if the supplied role or any other role granted to it
1:b32ce68:      * (directly or indirectly) has superuser status.
1:b32ce68:      *
1:b32ce68:      * @param role the primary role
1:b32ce68:      * @return true if the role has superuser status, false otherwise
1:b32ce68:      */
1:b32ce68:     public static boolean hasSuperuserStatus(RoleResource role)
1:b32ce68:     {
1:b32ce68:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
1:b32ce68:         for (RoleResource r : cache.getRoles(role))
1:b32ce68:             if (roleManager.isSuper(r))
1:b32ce68:                 return true;
1:b32ce68:         return false;
1:b32ce68:     }
1:b32ce68: }
============================================================================
author:Dave Brosius
-------------------------------------------------------------------------------
commit:6b7db8a
/////////////////////////////////////////////////////////////////////////
1:      * The returned roles may be cached if {@code roles_validity_in_ms > 0}
author:Brandon Williams
-------------------------------------------------------------------------------
commit:e379f97
/////////////////////////////////////////////////////////////////////////
1:     private static final RolesCache cache = new RolesCache(DatabaseDescriptor.getRoleManager());
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:b32ce68
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.util.Set;
1: 
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: 
1: public class Roles
1: {
0:     private static final RolesCache cache = new RolesCache(DatabaseDescriptor.getRolesValidity(),
0:                                                            DatabaseDescriptor.getRolesUpdateInterval(),
0:                                                            DatabaseDescriptor.getRolesCacheMaxEntries(),
0:                                                            DatabaseDescriptor.getRoleManager());
1: 
1:     /**
1:      * Get all roles granted to the supplied Role, including both directly granted
1:      * and inherited roles.
0:      * The returned roles may be cached if roles_validity_in_ms > 0
1:      *
1:      * @param primaryRole the Role
1:      * @return set of all granted Roles for the primary Role
1:      */
1:     public static Set<RoleResource> getRoles(RoleResource primaryRole)
1:     {
1:         return cache.getRoles(primaryRole);
1:     }
1: 
1:     /**
1:      * Returns true if the supplied role or any other role granted to it
1:      * (directly or indirectly) has superuser status.
1:      *
1:      * @param role the primary role
1:      * @return true if the role has superuser status, false otherwise
1:      */
1:     public static boolean hasSuperuserStatus(RoleResource role)
1:     {
1:         IRoleManager roleManager = DatabaseDescriptor.getRoleManager();
1:         for (RoleResource r : cache.getRoles(role))
1:             if (roleManager.isSuper(r))
1:                 return true;
1:         return false;
1:     }
1: }
============================================================================