1:0bc9841: /*
1:0bc9841:  * Licensed to the Apache Software Foundation (ASF) under one
1:0bc9841:  * or more contributor license agreements.  See the NOTICE file
1:0bc9841:  * distributed with this work for additional information
1:0bc9841:  * regarding copyright ownership.  The ASF licenses this file
1:0bc9841:  * to you under the Apache License, Version 2.0 (the
1:0bc9841:  * "License"); you may not use this file except in compliance
1:0bc9841:  * with the License.  You may obtain a copy of the License at
3:0bc9841:  * 
1:0bc9841:  *   http://www.apache.org/licenses/LICENSE-2.0
1:0bc9841:  * 
1:0bc9841:  * Unless required by applicable law or agreed to in writing,
1:0bc9841:  * software distributed under the License is distributed on an
1:0bc9841:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:0bc9841:  * KIND, either express or implied.  See the License for the
1:0bc9841:  * specific language governing permissions and limitations
1:0bc9841:  * under the License.
1:0bc9841:  */
1:31e3f61: package org.apache.cassandra.db;
1:0bc9841: 
1:69ffd1f: import java.nio.ByteBuffer;
1:b263af9: import java.util.List;
1:c83f20a: 
1:b263af9: import com.google.common.collect.Lists;
1:b263af9: 
1:a991b64: import junit.framework.Assert;
1:a991b64: import org.junit.BeforeClass;
1:0bc4663: import org.junit.Test;
4:b263af9: 
1:a991b64: import org.apache.cassandra.config.CFMetaData;
1:a991b64: import org.apache.cassandra.config.ColumnDefinition;
1:9797511: import org.apache.cassandra.config.DatabaseDescriptor;
1:b263af9: import org.apache.cassandra.cql3.ColumnIdentifier;
1:de228c7: import org.apache.cassandra.db.marshal.*;
1:a991b64: import org.apache.cassandra.db.rows.*;
1:a991b64: import org.apache.cassandra.exceptions.ConfigurationException;
1:a991b64: import org.apache.cassandra.SchemaLoader;
1:31e3f61: import org.apache.cassandra.schema.KeyspaceParams;
1:de228c7: import org.apache.cassandra.serializers.MarshalException;
1:0bc4663: import org.apache.cassandra.utils.ByteBufferUtil;
1:a991b64: import org.apache.cassandra.utils.FBUtilities;
1:a991b64: 
1:0bc4663: public class CellTest
1:c83f20a: {
1:9797511:     static
1:9797511:     {
1:9797511:         DatabaseDescriptor.daemonInitialization();
1:9797511:     }
1:9797511: 
1:a991b64:     private static final String KEYSPACE1 = "CellTest";
1:a991b64:     private static final String CF_STANDARD1 = "Standard1";
1:b263af9:     private static final String CF_COLLECTION = "Collection1";
1:c83f20a: 
1:b263af9:     private static final CFMetaData cfm = SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1);
1:b263af9:     private static final CFMetaData cfm2 = CFMetaData.Builder.create(KEYSPACE1, CF_COLLECTION)
1:b263af9:                                                              .addPartitionKey("k", IntegerType.instance)
1:b263af9:                                                              .addClusteringColumn("c", IntegerType.instance)
1:b263af9:                                                              .addRegularColumn("v", IntegerType.instance)
1:b263af9:                                                              .addRegularColumn("m", MapType.getInstance(IntegerType.instance, IntegerType.instance, true))
1:b263af9:                                                              .build();
1:de228c7: 
1:a991b64:     @BeforeClass
1:a991b64:     public static void defineSchema() throws ConfigurationException
1:c83f20a:     {
1:a991b64:         SchemaLoader.prepareServer();
1:b263af9:         SchemaLoader.createKeyspace(KEYSPACE1, KeyspaceParams.simple(1), cfm, cfm2);
1:c83f20a:     }
1:c83f20a: 
1:de228c7:     private static ColumnDefinition fakeColumn(String name, AbstractType<?> type)
1:de228c7:     {
1:ad7e36b:         return new ColumnDefinition("fakeKs",
1:ad7e36b:                                     "fakeTable",
1:de228c7:                                     ColumnIdentifier.getInterned(name, false),
1:de228c7:                                     type,
1:de228c7:                                     ColumnDefinition.NO_POSITION,
1:de228c7:                                     ColumnDefinition.Kind.REGULAR);
1:de228c7:     }
1:de228c7: 
1:c83f20a:     @Test
1:69ffd1f:     public void testConflictingTypeEquality()
1:c83f20a:     {
1:69ffd1f:         boolean[] tf = new boolean[]{ true, false };
1:69ffd1f:         for (boolean lhs : tf)
1:c83f20a:         {
1:69ffd1f:             for (boolean rhs : tf)
1:c83f20a:             {
1:69ffd1f:                 // don't test equality for both sides native, as this is based on CellName resolution
1:69ffd1f:                 if (lhs && rhs)
1:69ffd1f:                     continue;
1:2457599:                 Cell a = expiring(cfm, "val", "a", 1, 1);
1:2457599:                 Cell b = regular(cfm, "val", "a", 1);
1:69ffd1f:                 Assert.assertNotSame(a, b);
1:69ffd1f:                 Assert.assertNotSame(b, a);
1:c83f20a: 
1:2457599:                 a = deleted(cfm, "val", 1, 1);
1:69ffd1f:                 Assert.assertNotSame(a, b);
1:69ffd1f:                 Assert.assertNotSame(b, a);
1:c83f20a:             }
1:c83f20a:         }
1:c83f20a:     }
1:c83f20a: 
1:de228c7:     private void assertValid(Cell cell)
1:de228c7:     {
1:de228c7:         try
1:de228c7:         {
1:de228c7:             cell.validate();
1:de228c7:         }
1:de228c7:         catch (Exception e)
1:de228c7:         {
1:de228c7:             Assert.fail("Cell should be valid but got error: " + e);
1:de228c7:         }
1:de228c7:     }
1:de228c7: 
1:de228c7:     private void assertInvalid(Cell cell)
1:de228c7:     {
1:de228c7:         try
1:de228c7:         {
1:de228c7:             cell.validate();
1:de228c7:             Assert.fail("Cell " + cell + " should be invalid");
1:de228c7:         }
1:de228c7:         catch (MarshalException e)
1:de228c7:         {
1:de228c7:             // Note that we shouldn't get anything else than a MarshalException so let other escape and fail the test
1:de228c7:         }
1:de228c7:     }
1:de228c7: 
1:de228c7:     @Test
1:de228c7:     public void testValidate()
1:de228c7:     {
1:de228c7:         ColumnDefinition c;
1:de228c7: 
1:de228c7:         // Valid cells
1:de228c7:         c = fakeColumn("c", Int32Type.instance);
1:ad7e36b:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:ad7e36b:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4)));
1:de228c7: 
1:de228c7:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:de228c7:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.bytes(4)));
1:de228c7: 
1:de228c7:         assertValid(BufferCell.tombstone(c, 0, 4));
1:de228c7: 
1:de228c7:         // Invalid value (we don't all empty values for smallint)
1:de228c7:         c = fakeColumn("c", ShortType.instance);
1:ad7e36b:         assertInvalid(BufferCell.live(c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:de228c7:         // But this should be valid even though the underlying value is an empty BB (catches bug #11618)
1:de228c7:         assertValid(BufferCell.tombstone(c, 0, 4));
1:de228c7:         // And of course, this should be valid with a proper value
1:ad7e36b:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes((short)4)));
1:de228c7: 
1:de228c7:         // Invalid ttl
1:de228c7:         assertInvalid(BufferCell.expiring(c, 0, -4, 4, ByteBufferUtil.bytes(4)));
1:de228c7:         // Invalid local deletion times
1:de228c7:         assertInvalid(BufferCell.expiring(c, 0, 4, -4, ByteBufferUtil.bytes(4)));
1:de228c7:         assertInvalid(BufferCell.expiring(c, 0, 4, Cell.NO_DELETION_TIME, ByteBufferUtil.bytes(4)));
1:de228c7: 
1:de228c7:         c = fakeColumn("c", MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
1:de228c7:         // Valid cell path
1:ad7e36b:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes(4))));
1:de228c7:         // Invalid cell path (int values should be 0 or 4 bytes)
1:ad7e36b:         assertInvalid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes((long)4))));
1:de228c7:     }
1:de228c7: 
1:69ffd1f:     @Test
1:0bc4663:     public void testExpiringCellReconile()
1:c83f20a:     {
1:0bc4663:         // equal
1:2457599:         Assert.assertEquals(0, testExpiring("val", "a", 1, 1, null, null, null, null));
1:c83f20a: 
1:0bc4663:         // newer timestamp
1:2457599:         Assert.assertEquals(-1, testExpiring("val", "a", 2, 1, null, null, 1L, null));
1:2457599:         Assert.assertEquals(-1, testExpiring("val", "a", 2, 1, null, "val", 1L, 2));
1:c83f20a: 
1:2457599:         Assert.assertEquals(-1, testExpiring("val", "a", 1, 2, null, null, null, 1));
1:2457599:         Assert.assertEquals(1, testExpiring("val", "a", 1, 2, null, "val", null, 1));
1:c83f20a: 
1:0bc4663:         // newer value
1:2457599:         Assert.assertEquals(-1, testExpiring("val", "b", 2, 1, null, "a", null, null));
1:2457599:         Assert.assertEquals(-1, testExpiring("val", "b", 2, 1, null, "a", null, 2));
1:c83f20a:     }
1:c83f20a: 
1:b263af9:     private static ByteBuffer bb(int i)
1:c83f20a:     {
1:b263af9:         return ByteBufferUtil.bytes(i);
1:c83f20a:     }
1:c83f20a: 
1:b263af9:     @Test
1:b263af9:     public void testComplexCellReconcile()
1:c83f20a:     {
1:b263af9:         ColumnDefinition m = cfm2.getColumnDefinition(new ColumnIdentifier("m", false));
1:b263af9:         int now1 = FBUtilities.nowInSeconds();
1:b263af9:         long ts1 = now1*1000000;
1:c83f20a: 
1:a991b64: 
1:e017f94:         Cell r1m1 = BufferCell.live(m, ts1, bb(1), CellPath.create(bb(1)));
1:e017f94:         Cell r1m2 = BufferCell.live(m, ts1, bb(2), CellPath.create(bb(2)));
1:b263af9:         List<Cell> cells1 = Lists.newArrayList(r1m1, r1m2);
1:a991b64: 
1:b263af9:         int now2 = now1 + 1;
1:b263af9:         long ts2 = now2*1000000;
1:e017f94:         Cell r2m2 = BufferCell.live(m, ts2, bb(1), CellPath.create(bb(2)));
1:e017f94:         Cell r2m3 = BufferCell.live(m, ts2, bb(2), CellPath.create(bb(3)));
1:e017f94:         Cell r2m4 = BufferCell.live(m, ts2, bb(3), CellPath.create(bb(4)));
1:b263af9:         List<Cell> cells2 = Lists.newArrayList(r2m2, r2m3, r2m4);
1:b263af9: 
1:b263af9:         RowBuilder builder = new RowBuilder();
1:b263af9:         Cells.reconcileComplex(m, cells1.iterator(), cells2.iterator(), DeletionTime.LIVE, builder, now2 + 1);
1:b263af9:         Assert.assertEquals(Lists.newArrayList(r1m1, r2m2, r2m3, r2m4), builder.cells);
1:c83f20a:     }
1:b263af9: 
1:0bc4663:     private int testExpiring(String n1, String v1, long t1, int et1, String n2, String v2, Long t2, Integer et2)
1:a991b64:     {
1:0bc4663:         if (n2 == null)
1:0bc4663:             n2 = n1;
1:0bc4663:         if (v2 == null)
1:0bc4663:             v2 = v1;
1:0bc4663:         if (t2 == null)
1:0bc4663:             t2 = t1;
1:0bc4663:         if (et2 == null)
1:0bc4663:             et2 = et1;
1:2457599:         Cell c1 = expiring(cfm, n1, v1, t1, et1);
1:2457599:         Cell c2 = expiring(cfm, n2, v2, t2, et2);
1:a991b64: 
1:a991b64:         int now = FBUtilities.nowInSeconds();
1:a991b64:         if (Cells.reconcile(c1, c2, now) == c1)
1:a991b64:             return Cells.reconcile(c2, c1, now) == c1 ? -1 : 0;
1:a991b64:         return Cells.reconcile(c2, c1, now) == c2 ? 1 : 0;
1:c83f20a:     }
1:a991b64: 
1:2457599:     private Cell regular(CFMetaData cfm, String columnName, String value, long timestamp)
4:a991b64:     {
1:a991b64:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
1:e017f94:         return BufferCell.live(cdef, timestamp, ByteBufferUtil.bytes(value));
1:a991b64:     }
1:a991b64: 
1:2457599:     private Cell expiring(CFMetaData cfm, String columnName, String value, long timestamp, int localExpirationTime)
1:a991b64:     {
1:a991b64:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
1:2457599:         return new BufferCell(cdef, timestamp, 1, localExpirationTime, ByteBufferUtil.bytes(value), null);
4:a991b64:     }
1:a991b64: 
1:2457599:     private Cell deleted(CFMetaData cfm, String columnName, int localDeletionTime, long timestamp)
1:a991b64:     {
1:2457599:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
1:2457599:         return BufferCell.tombstone(cdef, timestamp, localDeletionTime);
1:a991b64:     }
1:a991b64: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:9797511
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
/////////////////////////////////////////////////////////////////////////
1:     static
1:     {
1:         DatabaseDescriptor.daemonInitialization();
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:ad7e36b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new ColumnDefinition("fakeKs",
1:                                     "fakeTable",
/////////////////////////////////////////////////////////////////////////
1:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4)));
/////////////////////////////////////////////////////////////////////////
1:         assertInvalid(BufferCell.live(c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes((short)4)));
/////////////////////////////////////////////////////////////////////////
1:         assertValid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes(4))));
1:         assertInvalid(BufferCell.live(c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes((long)4))));
commit:de228c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.marshal.*;
1: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:     private static final CFMetaData fakeMetadata = CFMetaData.createFake("fakeKS", "fakeTable");
1: 
/////////////////////////////////////////////////////////////////////////
1:     private static ColumnDefinition fakeColumn(String name, AbstractType<?> type)
1:     {
0:         return new ColumnDefinition(fakeMetadata.ksName,
0:                                     fakeMetadata.cfName,
1:                                     ColumnIdentifier.getInterned(name, false),
1:                                     type,
1:                                     ColumnDefinition.NO_POSITION,
1:                                     ColumnDefinition.Kind.REGULAR);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void assertValid(Cell cell)
1:     {
1:         try
1:         {
1:             cell.validate();
1:         }
1:         catch (Exception e)
1:         {
1:             Assert.fail("Cell should be valid but got error: " + e);
1:         }
1:     }
1: 
1:     private void assertInvalid(Cell cell)
1:     {
1:         try
1:         {
1:             cell.validate();
1:             Assert.fail("Cell " + cell + " should be invalid");
1:         }
1:         catch (MarshalException e)
1:         {
1:             // Note that we shouldn't get anything else than a MarshalException so let other escape and fail the test
1:         }
1:     }
1: 
1:     @Test
1:     public void testValidate()
1:     {
1:         ColumnDefinition c;
1: 
1:         // Valid cells
1:         c = fakeColumn("c", Int32Type.instance);
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4)));
1: 
1:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.bytes(4)));
1: 
1:         assertValid(BufferCell.tombstone(c, 0, 4));
1: 
1:         // Invalid value (we don't all empty values for smallint)
1:         c = fakeColumn("c", ShortType.instance);
0:         assertInvalid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
1:         // But this should be valid even though the underlying value is an empty BB (catches bug #11618)
1:         assertValid(BufferCell.tombstone(c, 0, 4));
1:         // And of course, this should be valid with a proper value
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes((short)4)));
1: 
1:         // Invalid ttl
1:         assertInvalid(BufferCell.expiring(c, 0, -4, 4, ByteBufferUtil.bytes(4)));
1:         // Invalid local deletion times
1:         assertInvalid(BufferCell.expiring(c, 0, 4, -4, ByteBufferUtil.bytes(4)));
1:         assertInvalid(BufferCell.expiring(c, 0, 4, Cell.NO_DELETION_TIME, ByteBufferUtil.bytes(4)));
1: 
1:         c = fakeColumn("c", MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
1:         // Valid cell path
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes(4))));
1:         // Invalid cell path (int values should be 0 or 4 bytes)
0:         assertInvalid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes((long)4))));
1:     }
1: 
commit:a62f70d
commit:c83f20a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.marshal.*;
0: import org.apache.cassandra.serializers.MarshalException;
/////////////////////////////////////////////////////////////////////////
0:     private static final CFMetaData fakeMetadata = CFMetaData.createFake("fakeKS", "fakeTable");
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static ColumnDefinition fakeColumn(String name, AbstractType<?> type)
1:     {
0:         return new ColumnDefinition(fakeMetadata.ksName,
0:                                     fakeMetadata.cfName,
0:                                     ColumnIdentifier.getInterned(name, false),
0:                                     type,
0:                                     ColumnDefinition.NO_POSITION,
0:                                     ColumnDefinition.Kind.REGULAR);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     private void assertValid(Cell cell)
1:     {
0:         try
1:         {
0:             cell.validate();
1:         }
0:         catch (Exception e)
1:         {
0:             Assert.fail("Cell should be valid but got error: " + e);
1:         }
1:     }
1: 
0:     private void assertInvalid(Cell cell)
1:     {
0:         try
1:         {
0:             cell.validate();
0:             Assert.fail("Cell " + cell + " should be invalid");
1:         }
0:         catch (MarshalException e)
1:         {
0:             // Note that we shouldn't get anything else than a MarshalException so let other escape and fail the test
1:         }
1:     }
1: 
1:     @Test
0:     public void testValidate()
1:     {
0:         ColumnDefinition c;
1: 
0:         // Valid cells
0:         c = fakeColumn("c", Int32Type.instance);
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4)));
1: 
0:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.EMPTY_BYTE_BUFFER));
0:         assertValid(BufferCell.expiring(c, 0, 4, 4, ByteBufferUtil.bytes(4)));
1: 
0:         assertValid(BufferCell.tombstone(c, 0, 4));
1: 
0:         // Invalid value (we don't all empty values for smallint)
0:         c = fakeColumn("c", ShortType.instance);
0:         assertInvalid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
0:         // But this should be valid even though the underlying value is an empty BB (catches bug #11618)
0:         assertValid(BufferCell.tombstone(c, 0, 4));
0:         // And of course, this should be valid with a proper value
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes((short)4)));
1: 
0:         // Invalid ttl
0:         assertInvalid(BufferCell.expiring(c, 0, -4, 4, ByteBufferUtil.bytes(4)));
0:         // Invalid local deletion times
0:         assertInvalid(BufferCell.expiring(c, 0, 4, -4, ByteBufferUtil.bytes(4)));
0:         assertInvalid(BufferCell.expiring(c, 0, 4, Cell.NO_DELETION_TIME, ByteBufferUtil.bytes(4)));
1: 
0:         c = fakeColumn("c", MapType.getInstance(Int32Type.instance, Int32Type.instance, true));
0:         // Valid cell path
0:         assertValid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes(4))));
0:         // Invalid cell path (int values should be 0 or 4 bytes)
0:         assertInvalid(BufferCell.live(fakeMetadata, c, 0, ByteBufferUtil.bytes(4), CellPath.create(ByteBufferUtil.bytes((long)4))));
1:     }
1: 
commit:2457599
/////////////////////////////////////////////////////////////////////////
1:                 Cell a = expiring(cfm, "val", "a", 1, 1);
1:                 Cell b = regular(cfm, "val", "a", 1);
1:                 a = deleted(cfm, "val", 1, 1);
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(0, testExpiring("val", "a", 1, 1, null, null, null, null));
1:         Assert.assertEquals(-1, testExpiring("val", "a", 2, 1, null, null, 1L, null));
1:         Assert.assertEquals(-1, testExpiring("val", "a", 2, 1, null, "val", 1L, 2));
1:         Assert.assertEquals(-1, testExpiring("val", "a", 1, 2, null, null, null, 1));
1:         Assert.assertEquals(1, testExpiring("val", "a", 1, 2, null, "val", null, 1));
1:         Assert.assertEquals(-1, testExpiring("val", "b", 2, 1, null, "a", null, null));
1:         Assert.assertEquals(-1, testExpiring("val", "b", 2, 1, null, "a", null, 2));
/////////////////////////////////////////////////////////////////////////
1:         Cell c1 = expiring(cfm, n1, v1, t1, et1);
1:         Cell c2 = expiring(cfm, n2, v2, t2, et2);
/////////////////////////////////////////////////////////////////////////
1:     private Cell regular(CFMetaData cfm, String columnName, String value, long timestamp)
0:         return BufferCell.live(cfm, cdef, timestamp, ByteBufferUtil.bytes(value));
1:     private Cell expiring(CFMetaData cfm, String columnName, String value, long timestamp, int localExpirationTime)
1:         return new BufferCell(cdef, timestamp, 1, localExpirationTime, ByteBufferUtil.bytes(value), null);
1:     private Cell deleted(CFMetaData cfm, String columnName, int localDeletionTime, long timestamp)
1:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
1:         return BufferCell.tombstone(cdef, timestamp, localDeletionTime);
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Assert;
1: import org.junit.BeforeClass;
1: import org.apache.cassandra.config.CFMetaData;
1: import org.apache.cassandra.config.ColumnDefinition;
0: import org.apache.cassandra.config.KSMetaData;
1: import org.apache.cassandra.db.rows.*;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.locator.SimpleStrategy;
1: import org.apache.cassandra.SchemaLoader;
1: import org.apache.cassandra.utils.FBUtilities;
1:     private static final String KEYSPACE1 = "CellTest";
1:     private static final String CF_STANDARD1 = "Standard1";
0:     private CFMetaData cfm = SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1);
1: 
1:     @BeforeClass
1:     public static void defineSchema() throws ConfigurationException
1:     {
1:         SchemaLoader.prepareServer();
0:         SchemaLoader.createKeyspace(KEYSPACE1,
0:                 SimpleStrategy.class,
0:                 KSMetaData.optsWithRF(1),
0:                 SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
1:     }
/////////////////////////////////////////////////////////////////////////
0:                 Cell a = buildCell(cfm, "a", "a", 1, 1);
0:                 Cell b = buildCell(cfm, "a", "a", 1, 0);
1: 
0:                 a = deleted(cfm, "a", "a", 1, 1);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Cell c1 = buildCell(cfm, n1, v1, t1, et1);
0:         Cell c2 = buildCell(cfm, n2, v2, t2, et2);
1: 
1:         int now = FBUtilities.nowInSeconds();
1:         if (Cells.reconcile(c1, c2, now) == c1)
1:             return Cells.reconcile(c2, c1, now) == c1 ? -1 : 0;
1:         return Cells.reconcile(c2, c1, now) == c2 ? 1 : 0;
0:     private Cell buildCell(CFMetaData cfm, String columnName, String value, long timestamp, int ttl)
1:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
0:         LivenessInfo info = SimpleLivenessInfo.forUpdate(timestamp, ttl, FBUtilities.nowInSeconds(), cfm);
0:         return new TestCell(cdef, ByteBufferUtil.bytes(value), info);
0:     private Cell deleted(CFMetaData cfm, String columnName, String value, int localDeletionTime, long timestamp)
1:         ColumnDefinition cdef = cfm.getColumnDefinition(ByteBufferUtil.bytes(columnName));
0:         LivenessInfo info = SimpleLivenessInfo.forDeletion(timestamp, localDeletionTime);
0:         return new TestCell(cdef, ByteBufferUtil.bytes(value), info);
0:     public static class TestCell extends AbstractCell
0:         private final ColumnDefinition column;
0:         private final ByteBuffer value;
0:         private final LivenessInfo info;
0:         public TestCell(ColumnDefinition column, ByteBuffer value, LivenessInfo info)
1:         {
0:             this.column = column;
0:             this.value = value;
0:             this.info = info.takeAlias();
1:         }
0:         public ColumnDefinition column()
1:         {
0:             return column;
1:         }
1: 
0:         public boolean isCounterCell()
1:         {
0:             return false;
1:         }
1: 
0:         public ByteBuffer value()
1:         {
0:             return value;
1:         }
1: 
0:         public LivenessInfo livenessInfo()
1:         {
0:             return info;
1:         }
1: 
0:         public CellPath path()
1:         {
0:             return null;
1:         }
commit:0bc9841
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  * 
1:  */
1: 
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:e017f94
/////////////////////////////////////////////////////////////////////////
1:         Cell r1m1 = BufferCell.live(m, ts1, bb(1), CellPath.create(bb(1)));
1:         Cell r1m2 = BufferCell.live(m, ts1, bb(2), CellPath.create(bb(2)));
1:         Cell r2m2 = BufferCell.live(m, ts2, bb(1), CellPath.create(bb(2)));
1:         Cell r2m3 = BufferCell.live(m, ts2, bb(2), CellPath.create(bb(3)));
1:         Cell r2m4 = BufferCell.live(m, ts2, bb(3), CellPath.create(bb(4)));
/////////////////////////////////////////////////////////////////////////
1:         return BufferCell.live(cdef, timestamp, ByteBufferUtil.bytes(value));
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:b263af9
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import com.google.common.collect.Lists;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.cql3.ColumnIdentifier;
0: import org.apache.cassandra.db.marshal.IntegerType;
0: import org.apache.cassandra.db.marshal.MapType;
/////////////////////////////////////////////////////////////////////////
1:     private static final String CF_COLLECTION = "Collection1";
1:     private static final CFMetaData cfm = SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1);
1:     private static final CFMetaData cfm2 = CFMetaData.Builder.create(KEYSPACE1, CF_COLLECTION)
1:                                                              .addPartitionKey("k", IntegerType.instance)
1:                                                              .addClusteringColumn("c", IntegerType.instance)
1:                                                              .addRegularColumn("v", IntegerType.instance)
1:                                                              .addRegularColumn("m", MapType.getInstance(IntegerType.instance, IntegerType.instance, true))
1:                                                              .build();
1:         SchemaLoader.createKeyspace(KEYSPACE1, KeyspaceParams.simple(1), cfm, cfm2);
/////////////////////////////////////////////////////////////////////////
1:     private static ByteBuffer bb(int i)
0:     {
1:         return ByteBufferUtil.bytes(i);
0:     }
1: 
1:     @Test
1:     public void testComplexCellReconcile()
0:     {
1:         ColumnDefinition m = cfm2.getColumnDefinition(new ColumnIdentifier("m", false));
1:         int now1 = FBUtilities.nowInSeconds();
1:         long ts1 = now1*1000000;
1: 
1: 
0:         Cell r1m1 = BufferCell.live(cfm2, m, ts1, bb(1), CellPath.create(bb(1)));
0:         Cell r1m2 = BufferCell.live(cfm2, m, ts1, bb(2), CellPath.create(bb(2)));
1:         List<Cell> cells1 = Lists.newArrayList(r1m1, r1m2);
1: 
1:         int now2 = now1 + 1;
1:         long ts2 = now2*1000000;
0:         Cell r2m2 = BufferCell.live(cfm2, m, ts2, bb(1), CellPath.create(bb(2)));
0:         Cell r2m3 = BufferCell.live(cfm2, m, ts2, bb(2), CellPath.create(bb(3)));
0:         Cell r2m4 = BufferCell.live(cfm2, m, ts2, bb(3), CellPath.create(bb(4)));
1:         List<Cell> cells2 = Lists.newArrayList(r2m2, r2m3, r2m4);
1: 
1:         RowBuilder builder = new RowBuilder();
1:         Cells.reconcileComplex(m, cells1.iterator(), cells2.iterator(), DeletionTime.LIVE, builder, now2 + 1);
1:         Assert.assertEquals(Lists.newArrayList(r1m1, r2m2, r2m3, r2m4), builder.cells);
0:     }
1: 
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:31e3f61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.db;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.KeyspaceParams;
/////////////////////////////////////////////////////////////////////////
0:                                     KeyspaceParams.simple(1),
0:                                     SchemaLoader.standardCFMD(KEYSPACE1, CF_STANDARD1));
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:69ffd1f
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void testConflictingTypeEquality()
0:     {
1:         boolean[] tf = new boolean[]{ true, false };
1:         for (boolean lhs : tf)
0:         {
1:             for (boolean rhs : tf)
0:             {
1:                 // don't test equality for both sides native, as this is based on CellName resolution
1:                 if (lhs && rhs)
1:                     continue;
0:                 Cell a = expiring("a", "a", 1, 1, lhs);
0:                 Cell b = regular("a", "a", 1, rhs);
1:                 Assert.assertNotSame(a, b);
1:                 Assert.assertNotSame(b, a);
0:                 a = deleted("a", 1, 1, lhs);
0:                 b = regular("a", ByteBufferUtil.bytes(1), 1, rhs);
1:                 Assert.assertNotSame(a, b);
1:                 Assert.assertNotSame(b, a);
0:             }
0:         }
0:     }
0: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:     private Cell regular(String name, ByteBuffer value, long timestamp, boolean nativeCell)
0:     {
0:         Cell cell = new BufferCell(Util.cellname(name), value, timestamp);
0:         if (nativeCell)
0:             cell = new NativeCell(allocator, order.getCurrent(), cell);
0:         return cell;
0:     }
0:     private Cell regular(String name, String value, long timestamp, boolean nativeCell)
0:     {
0:         return regular(name, ByteBufferUtil.bytes(value), timestamp, nativeCell);
0:     }
0: 
0:     private Cell deleted(String name, int localDeletionTime, long timestamp, boolean nativeCell)
0:     {
0:         DeletedCell cell = new BufferDeletedCell(Util.cellname(name), localDeletionTime, timestamp);
0:         if (nativeCell)
0:             cell = new NativeDeletedCell(allocator, order.getCurrent(), cell);
0:         return cell;
0:     }
commit:0bc4663
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.db;
0: 
1: import org.junit.Test;
0: 
0: import junit.framework.Assert;
0: import org.apache.cassandra.Util;
1: import org.apache.cassandra.utils.ByteBufferUtil;
0: import org.apache.cassandra.utils.concurrent.OpOrder;
0: import org.apache.cassandra.utils.memory.NativeAllocator;
0: import org.apache.cassandra.utils.memory.NativePool;
0: 
1: public class CellTest
0: {
0: 
0:     private static final OpOrder order = new OpOrder();
0:     private static NativeAllocator allocator = new NativePool(Integer.MAX_VALUE, Integer.MAX_VALUE, 1f, null).newAllocator();
0: 
0:     @Test
1:     public void testExpiringCellReconile()
0:     {
1:         // equal
0:         Assert.assertEquals(0, testExpiring("a", "a", 1, 1, null, null, null, null));
0: 
1:         // newer timestamp
0:         Assert.assertEquals(-1, testExpiring("a", "a", 2, 1, null, null, 1L, null));
0:         Assert.assertEquals(-1, testExpiring("a", "a", 2, 1, null, "b", 1L, 2));
0: 
0:         // newer TTL
0:         Assert.assertEquals(-1, testExpiring("a", "a", 1, 2, null, null, null, 1));
0:         Assert.assertEquals(1, testExpiring("a", "a", 1, 2, null, "b", null, 1));
0: 
1:         // newer value
0:         Assert.assertEquals(-1, testExpiring("a", "b", 2, 1, null, "a", null, null));
0:         Assert.assertEquals(-1, testExpiring("a", "b", 2, 1, null, "a", null, 2));
0:     }
0: 
1:     private int testExpiring(String n1, String v1, long t1, int et1, String n2, String v2, Long t2, Integer et2)
0:     {
1:         if (n2 == null)
1:             n2 = n1;
1:         if (v2 == null)
1:             v2 = v1;
1:         if (t2 == null)
1:             t2 = t1;
1:         if (et2 == null)
1:             et2 = et1;
0:         int result = testExpiring(n1, v1, t1, et1, false, n2, v2, t2, et2, false);
0:         Assert.assertEquals(result, testExpiring(n1, v1, t1, et1, false, n2, v2, t2, et2, true));
0:         Assert.assertEquals(result, testExpiring(n1, v1, t1, et1, true, n2, v2, t2, et2, false));
0:         Assert.assertEquals(result, testExpiring(n1, v1, t1, et1, true, n2, v2, t2, et2, true));
0:         return result;
0:     }
0: 
0:     private int testExpiring(String n1, String v1, long t1, int et1, boolean native1, String n2, String v2, long t2, int et2, boolean native2)
0:     {
0:         Cell c1 = expiring(n1, v1, t1, et1, native1);
0:         Cell c2 = expiring(n2, v2, t2, et2, native2);
0:         return reconcile(c1, c2);
0:     }
0: 
0:     int reconcile(Cell c1, Cell c2)
0:     {
0:         if (c1.reconcile(c2) == c1)
0:             return c2.reconcile(c1) == c1 ? -1 : 0;
0:         return c2.reconcile(c1) == c2 ? 1 : 0;
0:     }
0: 
0:     private Cell expiring(String name, String value, long timestamp, int expirationTime, boolean nativeCell)
0:     {
0:         ExpiringCell cell = new BufferExpiringCell(Util.cellname(name), ByteBufferUtil.bytes(value), timestamp, 1, expirationTime);
0:         if (nativeCell)
0:             cell = new NativeExpiringCell(allocator, order.getCurrent(), cell);
0:         return cell;
0:     }
0: 
0: }
============================================================================