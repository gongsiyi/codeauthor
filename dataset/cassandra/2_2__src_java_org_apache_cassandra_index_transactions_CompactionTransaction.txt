1:0626be8: /*
1:0626be8:  * Licensed to the Apache Software Foundation (ASF) under one
1:0626be8:  * or more contributor license agreements.  See the NOTICE file
1:0626be8:  * distributed with this work for additional information
1:0626be8:  * regarding copyright ownership.  The ASF licenses this file
1:0626be8:  * to you under the Apache License, Version 2.0 (the
1:0626be8:  * "License"); you may not use this file except in compliance
1:0626be8:  * with the License.  You may obtain a copy of the License at
1:0626be8:  *
1:0626be8:  *     http://www.apache.org/licenses/LICENSE-2.0
1:0626be8:  *
1:0626be8:  * Unless required by applicable law or agreed to in writing, software
1:0626be8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0626be8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0626be8:  * See the License for the specific language governing permissions and
1:0626be8:  * limitations under the License.
1:0626be8:  */
1:0626be8: 
1:0626be8: package org.apache.cassandra.index.transactions;
1:0626be8: 
1:0626be8: import org.apache.cassandra.db.rows.Row;
1:0626be8: 
1:0626be8: /**
1:0626be8:  * Performs garbage collection of stale index entries during a regular compaction.
1:0626be8:  *
1:0626be8:  * A CompactionTransaction is concerned with cleaning up stale index entries.
1:0626be8:  * When multiple versions of a row are compacted, the CompactionTransaction is
1:0626be8:  * notified of the versions being merged, which it diffs against the merge result.
1:0626be8:  *
1:0626be8:  * Instances are currently scoped to a single row within a partition, but this could be improved to batch process
1:0626be8:  * multiple rows within a single partition.
1:0626be8:  */
1:0626be8: public interface CompactionTransaction extends IndexTransaction
1:0626be8: {
1:aa57626:     void onRowMerge(Row merged, Row...versions);
1:0626be8: 
1:0626be8:     CompactionTransaction NO_OP = new CompactionTransaction()
1:0626be8:     {
1:0626be8:         public void start(){}
1:aa57626:         public void onRowMerge(Row merged, Row...versions){}
1:0626be8:         public void commit(){}
1:0626be8:     };
1:0626be8: }
============================================================================
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:aa57626
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     void onRowMerge(Row merged, Row...versions);
1:         public void onRowMerge(Row merged, Row...versions){}
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:0626be8
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.index.transactions;
1: 
0: import org.apache.cassandra.db.Columns;
1: import org.apache.cassandra.db.rows.Row;
1: 
1: /**
1:  * Performs garbage collection of stale index entries during a regular compaction.
1:  *
1:  * A CompactionTransaction is concerned with cleaning up stale index entries.
1:  * When multiple versions of a row are compacted, the CompactionTransaction is
1:  * notified of the versions being merged, which it diffs against the merge result.
1:  *
1:  * Instances are currently scoped to a single row within a partition, but this could be improved to batch process
1:  * multiple rows within a single partition.
1:  */
1: public interface CompactionTransaction extends IndexTransaction
1: {
0:     void onRowMerge(Columns columns, Row merged, Row...versions);
1: 
1:     CompactionTransaction NO_OP = new CompactionTransaction()
1:     {
1:         public void start(){}
0:         public void onRowMerge(Columns columns, Row merged, Row...versions){}
1:         public void commit(){}
1:     };
1: }
============================================================================