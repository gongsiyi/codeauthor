1:401b46b: /*
1:401b46b:  * Licensed to the Apache Software Foundation (ASF) under one
1:401b46b:  * or more contributor license agreements.  See the NOTICE file
1:401b46b:  * distributed with this work for additional information
1:401b46b:  * regarding copyright ownership.  The ASF licenses this file
1:401b46b:  * to you under the Apache License, Version 2.0 (the
1:401b46b:  * "License"); you may not use this file except in compliance
1:401b46b:  * with the License.  You may obtain a copy of the License at
1:401b46b:  *
1:401b46b:  *     http://www.apache.org/licenses/LICENSE-2.0
1:401b46b:  *
1:401b46b:  * Unless required by applicable law or agreed to in writing, software
1:401b46b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:401b46b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:401b46b:  * See the License for the specific language governing permissions and
1:401b46b:  * limitations under the License.
1:401b46b:  */
1:401b46b: package org.apache.cassandra.transport.messages;
3:401b46b: 
1:879b694: import java.nio.ByteBuffer;
1:4960355: 
1:cbf304e: import io.netty.buffer.ByteBuf;
1:879b694: import org.apache.cassandra.auth.AuthenticatedUser;
1:879b694: import org.apache.cassandra.auth.IAuthenticator;
1:879b694: import org.apache.cassandra.exceptions.AuthenticationException;
1:f00e7a7: import org.apache.cassandra.metrics.AuthMetrics;
1:879b694: import org.apache.cassandra.service.QueryState;
1:879b694: import org.apache.cassandra.transport.*;
1:401b46b: 
1:401b46b: /**
1:401b46b:  * A SASL token message sent from client to server. Some SASL
1:246f07b:  * mechanisms and clients may send an initial token before
1:401b46b:  * receiving a challenge from the server.
1:401b46b:  */
1:4960355: public class AuthResponse extends Message.Request
2:401b46b: {
1:4960355:     public static final Message.Codec<AuthResponse> codec = new Message.Codec<AuthResponse>()
1:401b46b:     {
1:e0adc16:         public AuthResponse decode(ByteBuf body, ProtocolVersion version)
1:401b46b:         {
1:e0adc16:             if (version == ProtocolVersion.V1)
1:401b46b:                 throw new ProtocolException("SASL Authentication is not supported in version 1 of the protocol");
1:401b46b: 
1:4960355:             ByteBuffer b = CBUtil.readValue(body);
1:4960355:             byte[] token = new byte[b.remaining()];
1:4960355:             b.get(token);
1:4960355:             return new AuthResponse(token);
2:401b46b:         }
1:401b46b: 
1:e0adc16:         public void encode(AuthResponse response, ByteBuf dest, ProtocolVersion version)
1:401b46b:         {
1:f8be23a:             CBUtil.writeValue(response.token, dest);
1:f8be23a:         }
1:f8be23a: 
1:e0adc16:         public int encodedSize(AuthResponse response, ProtocolVersion version)
1:f8be23a:         {
1:f8be23a:             return CBUtil.sizeOfValue(response.token);
1:401b46b:         }
1:401b46b:     };
1:401b46b: 
1:879b694:     private final byte[] token;
1:401b46b: 
1:4960355:     public AuthResponse(byte[] token)
1:401b46b:     {
1:1a70df0:         super(Message.Type.AUTH_RESPONSE);
1:879b694:         assert token != null;
1:401b46b:         this.token = token;
1:401b46b:     }
1:401b46b: 
4:401b46b:     @Override
1:aa83c94:     public Response execute(QueryState queryState, long queryStartNanoTime)
1:401b46b:     {
1:401b46b:         try
1:401b46b:         {
1:8a8427d:             IAuthenticator.SaslNegotiator negotiator = ((ServerConnection) connection).getSaslNegotiator(queryState);
1:879b694:             byte[] challenge = negotiator.evaluateResponse(token);
1:879b694:             if (negotiator.isComplete())
1:401b46b:             {
1:879b694:                 AuthenticatedUser user = negotiator.getAuthenticatedUser();
1:401b46b:                 queryState.getClientState().login(user);
1:f00e7a7:                 AuthMetrics.instance.markSuccess();
1:401b46b:                 // authentication is complete, send a ready message to the client
1:1a70df0:                 return new AuthSuccess(challenge);
1:401b46b:             }
1:401b46b:             else
1:401b46b:             {
1:4960355:                 return new AuthChallenge(challenge);
1:401b46b:             }
1:401b46b:         }
1:401b46b:         catch (AuthenticationException e)
1:401b46b:         {
1:f00e7a7:             AuthMetrics.instance.markFailure();
1:401b46b:             return ErrorMessage.fromException(e);
1:401b46b:         }
1:401b46b:     }
1:401b46b: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1:         public AuthResponse decode(ByteBuf body, ProtocolVersion version)
1:             if (version == ProtocolVersion.V1)
/////////////////////////////////////////////////////////////////////////
1:         public void encode(AuthResponse response, ByteBuf dest, ProtocolVersion version)
1:         public int encodedSize(AuthResponse response, ProtocolVersion version)
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:aa83c94
/////////////////////////////////////////////////////////////////////////
1:     public Response execute(QueryState queryState, long queryStartNanoTime)
author:Soumava Ghosh
-------------------------------------------------------------------------------
commit:f00e7a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.metrics.AuthMetrics;
/////////////////////////////////////////////////////////////////////////
1:                 AuthMetrics.instance.markSuccess();
/////////////////////////////////////////////////////////////////////////
1:             AuthMetrics.instance.markFailure();
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:8a8427d
/////////////////////////////////////////////////////////////////////////
1:             IAuthenticator.SaslNegotiator negotiator = ((ServerConnection) connection).getSaslNegotiator(queryState);
commit:879b694
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import org.apache.cassandra.auth.AuthenticatedUser;
1: import org.apache.cassandra.auth.IAuthenticator;
1: import org.apache.cassandra.exceptions.AuthenticationException;
1: import org.apache.cassandra.service.QueryState;
1: import org.apache.cassandra.transport.*;
/////////////////////////////////////////////////////////////////////////
1:     private final byte[] token;
1:         assert token != null;
/////////////////////////////////////////////////////////////////////////
0:             IAuthenticator.SaslNegotiator negotiator = ((ServerConnection) connection).getSaslNegotiator();
1:             byte[] challenge = negotiator.evaluateResponse(token);
1:             if (negotiator.isComplete())
1:                 AuthenticatedUser user = negotiator.getAuthenticatedUser();
author:Dave Brosius
-------------------------------------------------------------------------------
commit:246f07b
/////////////////////////////////////////////////////////////////////////
1:  * mechanisms and clients may send an initial token before
author:belliottsmith
-------------------------------------------------------------------------------
commit:cbf304e
/////////////////////////////////////////////////////////////////////////
1: import io.netty.buffer.ByteBuf;
/////////////////////////////////////////////////////////////////////////
0:         public AuthResponse decode(ByteBuf body, int version)
/////////////////////////////////////////////////////////////////////////
0:         public void encode(AuthResponse response, ByteBuf dest, int version)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:f8be23a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         public void encode(AuthResponse response, ChannelBuffer dest, int version)
1:             CBUtil.writeValue(response.token, dest);
1:         }
1: 
0:         public int encodedSize(AuthResponse response, int version)
1:         {
1:             return CBUtil.sizeOfValue(response.token);
/////////////////////////////////////////////////////////////////////////
commit:5a18e37
/////////////////////////////////////////////////////////////////////////
0:     public ChannelBuffer encode(int version)
0:         return codec.encode(this, version);
commit:e48ff29
/////////////////////////////////////////////////////////////////////////
0:         public ChannelBuffer encode(AuthResponse response, int version)
/////////////////////////////////////////////////////////////////////////
0:         return codec.encode(this, getVersion());
commit:4960355
/////////////////////////////////////////////////////////////////////////
0: import java.nio.ByteBuffer;
1: 
1: public class AuthResponse extends Message.Request
1:     public static final Message.Codec<AuthResponse> codec = new Message.Codec<AuthResponse>()
0:         public AuthResponse decode(ChannelBuffer body, int version)
1:             ByteBuffer b = CBUtil.readValue(body);
1:             byte[] token = new byte[b.remaining()];
1:             b.get(token);
1:             return new AuthResponse(token);
0:         public ChannelBuffer encode(AuthResponse response)
/////////////////////////////////////////////////////////////////////////
1:     public AuthResponse(byte[] token)
/////////////////////////////////////////////////////////////////////////
1:                 return new AuthChallenge(challenge);
commit:1a70df0
/////////////////////////////////////////////////////////////////////////
0:             return new SaslResponse(CBUtil.readValue(body));
0:             return CBUtil.valueToCB(response.token);
/////////////////////////////////////////////////////////////////////////
1:         super(Message.Type.AUTH_RESPONSE);
/////////////////////////////////////////////////////////////////////////
0:             byte[] challenge = authenticator.evaluateResponse(token == null ? new byte[0] : token);
1:                 return new AuthSuccess(challenge);
commit:401b46b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.transport.messages;
1: 
0: import org.apache.cassandra.auth.AuthenticatedUser;
0: import org.apache.cassandra.auth.ISaslAwareAuthenticator.SaslAuthenticator;
0: import org.apache.cassandra.exceptions.AuthenticationException;
0: import org.apache.cassandra.service.QueryState;
0: import org.apache.cassandra.transport.CBUtil;
0: import org.apache.cassandra.transport.Message;
0: import org.apache.cassandra.transport.ProtocolException;
0: import org.apache.cassandra.transport.ServerConnection;
1: 
0: import org.jboss.netty.buffer.ChannelBuffer;
1: 
1: /**
1:  * A SASL token message sent from client to server. Some SASL
0:  * mechanisms & clients may send an initial token before
1:  * receiving a challenge from the server.
1:  */
0: public class SaslResponse extends Message.Request
1: {
0:     public static final Message.Codec<SaslResponse> codec = new Message.Codec<SaslResponse>()
1:     {
1:         @Override
0:         public SaslResponse decode(ChannelBuffer body, int version)
1:         {
0:             if (version == 1)
1:                 throw new ProtocolException("SASL Authentication is not supported in version 1 of the protocol");
1: 
0:             return new SaslResponse(CBUtil.readBytes(body));
1:         }
1: 
1:         @Override
0:         public ChannelBuffer encode(SaslResponse response)
1:         {
0:             return CBUtil.bytesToCB(response.token);
1:         }
1:     };
1: 
0:     private byte[] token;
1: 
0:     public SaslResponse(byte[] token)
1:     {
0:         super(Message.Type.SASL_RESPONSE);
1:         this.token = token;
1:     }
1: 
1:     @Override
0:     public ChannelBuffer encode()
1:     {
0:         return codec.encode(this);
1:     }
1: 
1:     @Override
0:     public Response execute(QueryState queryState)
1:     {
1:         try
1:         {
0:             SaslAuthenticator authenticator = ((ServerConnection) connection).getAuthenticator();
0:             byte[] challenge = authenticator.evaluateResponse(token);
0:             if (authenticator.isComplete())
1:             {
0:                 AuthenticatedUser user = authenticator.getAuthenticatedUser();
1:                 queryState.getClientState().login(user);
1:                 // authentication is complete, send a ready message to the client
0:                 return new ReadyMessage();
1:             }
1:             else
1:             {
0:                 return new SaslChallenge(challenge);
1:             }
1:         }
1:         catch (AuthenticationException e)
1:         {
1:             return ErrorMessage.fromException(e);
1:         }
1:     }
1: }
============================================================================