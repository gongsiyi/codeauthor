1:39df31a: /*
1:39df31a:  * Licensed to the Apache Software Foundation (ASF) under one
1:39df31a:  * or more contributor license agreements.  See the NOTICE file
1:39df31a:  * distributed with this work for additional information
1:39df31a:  * regarding copyright ownership.  The ASF licenses this file
1:39df31a:  * to you under the Apache License, Version 2.0 (the
1:39df31a:  * "License"); you may not use this file except in compliance
1:39df31a:  * with the License.  You may obtain a copy of the License at
1:39df31a:  *
1:39df31a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:39df31a:  *
1:39df31a:  * Unless required by applicable law or agreed to in writing, software
1:39df31a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39df31a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39df31a:  * See the License for the specific language governing permissions and
1:39df31a:  * limitations under the License.
1:39df31a:  */
1:39df31a: 
1:39df31a: package org.apache.cassandra.exceptions;
1:39df31a: 
1:39df31a: public enum RequestFailureReason
1:39df31a: {
1:39df31a:     /**
1:39df31a:      * The reason for the failure was none of the below reasons or was not recorded by the data node.
1:39df31a:      */
1:39df31a:     UNKNOWN                  (0x0000),
1:39df31a: 
1:39df31a:     /**
1:39df31a:      * The data node read too many tombstones when attempting to execute a read query (see tombstone_failure_threshold).
1:39df31a:      */
1:39df31a:     READ_TOO_MANY_TOMBSTONES (0x0001);
1:39df31a: 
1:39df31a:     /** The code to be serialized as an unsigned 16 bit integer */
1:39df31a:     public final int code;
1:39df31a:     public static final RequestFailureReason[] VALUES = values();
1:39df31a: 
1:39df31a:     RequestFailureReason(final int code)
1:39df31a:     {
1:39df31a:         this.code = code;
1:39df31a:     }
1:39df31a: 
1:39df31a:     public static RequestFailureReason fromCode(final int code)
1:39df31a:     {
1:39df31a:         for (RequestFailureReason reasonCode : VALUES)
1:39df31a:         {
1:39df31a:             if (reasonCode.code == code)
1:39df31a:                 return reasonCode;
1:39df31a:         }
1:39df31a:         throw new IllegalArgumentException("Unknown request failure reason error code: " + code);
1:39df31a:     }
1:39df31a: }
============================================================================
author:Geoffrey Yu
-------------------------------------------------------------------------------
commit:39df31a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.exceptions;
1: 
1: public enum RequestFailureReason
1: {
1:     /**
1:      * The reason for the failure was none of the below reasons or was not recorded by the data node.
1:      */
1:     UNKNOWN                  (0x0000),
1: 
1:     /**
1:      * The data node read too many tombstones when attempting to execute a read query (see tombstone_failure_threshold).
1:      */
1:     READ_TOO_MANY_TOMBSTONES (0x0001);
1: 
1:     /** The code to be serialized as an unsigned 16 bit integer */
1:     public final int code;
1:     public static final RequestFailureReason[] VALUES = values();
1: 
1:     RequestFailureReason(final int code)
1:     {
1:         this.code = code;
1:     }
1: 
1:     public static RequestFailureReason fromCode(final int code)
1:     {
1:         for (RequestFailureReason reasonCode : VALUES)
1:         {
1:             if (reasonCode.code == code)
1:                 return reasonCode;
1:         }
1:         throw new IllegalArgumentException("Unknown request failure reason error code: " + code);
1:     }
1: }
============================================================================