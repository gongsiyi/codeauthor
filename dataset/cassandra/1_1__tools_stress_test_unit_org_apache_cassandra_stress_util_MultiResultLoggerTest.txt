1:f42e235: /*
1:f42e235:  * Licensed to the Apache Software Foundation (ASF) under one
1:f42e235:  * or more contributor license agreements.  See the NOTICE file
1:f42e235:  * distributed with this work for additional information
1:f42e235:  * regarding copyright ownership.  The ASF licenses this file
1:f42e235:  * to you under the Apache License, Version 2.0 (the
1:f42e235:  * "License"); you may not use this file except in compliance
1:f42e235:  * with the License.  You may obtain a copy of the License at
1:f42e235:  *
1:f42e235:  *     http://www.apache.org/licenses/LICENSE-2.0
1:f42e235:  *
1:f42e235:  * Unless required by applicable law or agreed to in writing, software
1:f42e235:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f42e235:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f42e235:  * See the License for the specific language governing permissions and
1:f42e235:  * limitations under the License.
1:f42e235:  */
1:f42e235: 
1:f42e235: package org.apache.cassandra.stress.util;
1:f42e235: 
1:f42e235: 
1:f42e235: import java.io.IOException;
1:f42e235: import java.io.OutputStream;
1:f42e235: import java.io.PrintStream;
1:f42e235: 
1:f42e235: import org.apache.commons.io.output.ByteArrayOutputStream;
1:f42e235: import org.junit.Test;
1:f42e235: 
1:f42e235: import static org.junit.Assert.*;
1:f42e235: 
1:f42e235: public class MultiResultLoggerTest
1:f42e235: {
1:f42e235: 
1:f42e235:     public static final OutputStream NOOP = new OutputStream()
1:f42e235:     {
1:f42e235:         public void write(int b) throws IOException
1:f42e235:         {
1:f42e235:         }
1:f42e235:     };
1:f42e235: 
1:f42e235:     @Test
1:f42e235:     public void delegatesToInitialPrintStream() throws Exception
1:f42e235:     {
1:f42e235:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:f42e235:         PrintStream printStream = new PrintStream(output, true);
1:f42e235:         MultiResultLogger underTest = new MultiResultLogger(printStream);
1:f42e235: 
1:f42e235:         underTest.println("Very important result");
1:f42e235: 
1:f42e235:         assertEquals("Very important result\n", output.toString());
1:f42e235:     }
1:f42e235: 
1:f42e235:     @Test
1:f42e235:     public void printingExceptions() throws Exception
1:f42e235:     {
1:f42e235:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:f42e235:         PrintStream printStream = new PrintStream(output, true);
1:f42e235:         MultiResultLogger underTest = new MultiResultLogger(printStream);
1:f42e235: 
1:f42e235:         underTest.printException(new RuntimeException("Bad things"));
1:f42e235: 
1:f42e235:         String stackTrace = output.toString();
1:f42e235:         assertTrue("Expected strack trace to be printed but got: " + stackTrace, stackTrace.startsWith("java.lang.RuntimeException: Bad things\n" +
1:f42e235:                                                 "\tat org.apache.cassandra.stress.util.MultiResultLoggerTest.printingExceptions"));
1:f42e235:     }
1:f42e235: 
1:f42e235:     @Test
1:f42e235:     public void delegatesToAdditionalPrintStreams() throws Exception
1:f42e235:     {
1:f42e235:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:f42e235:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:f42e235:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1:f42e235: 
1:f42e235:         underTest.addStream(additionalPrintStream);
1:f42e235:         underTest.println("Very important result");
1:f42e235: 
1:f42e235:         assertEquals("Very important result\n", output.toString());
1:f42e235:     }
1:f42e235: 
1:f42e235:     @Test
1:f42e235:     public void delegatesPrintfToAdditionalPrintStreams() throws Exception
1:f42e235:     {
1:f42e235:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:f42e235:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:f42e235:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1:f42e235: 
1:f42e235:         underTest.addStream(additionalPrintStream);
1:f42e235:         underTest.printf("%s %s %s", "one", "two", "three");
1:f42e235: 
1:f42e235:         assertEquals("one two three", output.toString());
1:f42e235:     }
1:f42e235: 
1:f42e235:     @Test
1:f42e235:     public void delegatesPrintlnToAdditionalPrintStreams() throws Exception
1:f42e235:     {
1:f42e235:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:f42e235:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:f42e235:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1:f42e235: 
1:f42e235:         underTest.addStream(additionalPrintStream);
1:f42e235:         underTest.println();
1:f42e235: 
1:f42e235:         assertEquals("\n", output.toString());
1:f42e235:     }
1:f42e235: }
============================================================================
author:Christopher Batey
-------------------------------------------------------------------------------
commit:f42e235
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.stress.util;
1: 
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.io.PrintStream;
1: 
1: import org.apache.commons.io.output.ByteArrayOutputStream;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class MultiResultLoggerTest
1: {
1: 
1:     public static final OutputStream NOOP = new OutputStream()
1:     {
1:         public void write(int b) throws IOException
1:         {
1:         }
1:     };
1: 
1:     @Test
1:     public void delegatesToInitialPrintStream() throws Exception
1:     {
1:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:         PrintStream printStream = new PrintStream(output, true);
1:         MultiResultLogger underTest = new MultiResultLogger(printStream);
1: 
1:         underTest.println("Very important result");
1: 
1:         assertEquals("Very important result\n", output.toString());
1:     }
1: 
1:     @Test
1:     public void printingExceptions() throws Exception
1:     {
1:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:         PrintStream printStream = new PrintStream(output, true);
1:         MultiResultLogger underTest = new MultiResultLogger(printStream);
1: 
1:         underTest.printException(new RuntimeException("Bad things"));
1: 
1:         String stackTrace = output.toString();
1:         assertTrue("Expected strack trace to be printed but got: " + stackTrace, stackTrace.startsWith("java.lang.RuntimeException: Bad things\n" +
1:                                                 "\tat org.apache.cassandra.stress.util.MultiResultLoggerTest.printingExceptions"));
1:     }
1: 
1:     @Test
1:     public void delegatesToAdditionalPrintStreams() throws Exception
1:     {
1:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1: 
1:         underTest.addStream(additionalPrintStream);
1:         underTest.println("Very important result");
1: 
1:         assertEquals("Very important result\n", output.toString());
1:     }
1: 
1:     @Test
1:     public void delegatesPrintfToAdditionalPrintStreams() throws Exception
1:     {
1:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1: 
1:         underTest.addStream(additionalPrintStream);
1:         underTest.printf("%s %s %s", "one", "two", "three");
1: 
1:         assertEquals("one two three", output.toString());
1:     }
1: 
1:     @Test
1:     public void delegatesPrintlnToAdditionalPrintStreams() throws Exception
1:     {
1:         ByteArrayOutputStream output = new ByteArrayOutputStream();
1:         PrintStream additionalPrintStream = new PrintStream(output, true);
1:         MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));
1: 
1:         underTest.addStream(additionalPrintStream);
1:         underTest.println();
1: 
1:         assertEquals("\n", output.toString());
1:     }
1: }
============================================================================