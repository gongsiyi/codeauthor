1:e8651b6: /*
1:e8651b6:  * Licensed to the Apache Software Foundation (ASF) under one
1:e8651b6:  * or more contributor license agreements.  See the NOTICE file
1:e8651b6:  * distributed with this work for additional information
1:e8651b6:  * regarding copyright ownership.  The ASF licenses this file
1:e8651b6:  * to you under the Apache License, Version 2.0 (the
1:e8651b6:  * "License"); you may not use this file except in compliance
1:e8651b6:  * with the License.  You may obtain a copy of the License at
1:e8651b6:  *
1:e8651b6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e8651b6:  *
1:e8651b6:  * Unless required by applicable law or agreed to in writing, software
1:e8651b6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e8651b6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e8651b6:  * See the License for the specific language governing permissions and
1:e8651b6:  * limitations under the License.
1:e8651b6:  */
1:e8651b6: package org.apache.cassandra.io.util;
1:e8651b6: 
1:e8651b6: import java.io.FilterInputStream;
1:e8651b6: import java.io.IOException;
1:e8651b6: import java.io.InputStream;
1:e8651b6: 
1:e8651b6: /**
1:e8651b6:  * This class is to track bytes read from given DataInputStream
1:e8651b6:  */
1:e8651b6: public class TrackedInputStream extends FilterInputStream implements BytesReadTracker
1:e8651b6: {
1:e8651b6:     private long bytesRead;
1:e8651b6: 
1:e8651b6:     public TrackedInputStream(InputStream source)
1:e8651b6:     {
1:e8651b6:         super(source);
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public long getBytesRead()
1:e8651b6:     {
1:e8651b6:         return bytesRead;
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     /**
1:e8651b6:      * reset counter to @param count
1:e8651b6:      */
1:e8651b6:     public void reset(long count)
1:e8651b6:     {
1:e8651b6:         bytesRead = count;
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public int read() throws IOException
1:e8651b6:     {
1:e8651b6:         int read = super.read();
1:e8651b6:         bytesRead += 1;
1:e8651b6:         return read;
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public int read(byte[] b, int off, int len) throws IOException
1:e8651b6:     {
1:e8651b6:         int read = super.read(b, off, len);
1:e8651b6:         bytesRead += read;
1:e8651b6:         return read;
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public int read(byte[] b) throws IOException
1:e8651b6:     {
1:e8651b6:         int read = super.read(b);
1:e8651b6:         bytesRead += read;
1:e8651b6:         return read;
1:e8651b6:     }
1:e8651b6: 
1:e8651b6:     public long skip(long n) throws IOException
1:e8651b6:     {
1:e8651b6:         long skip = super.skip(n);
1:e8651b6:         bytesRead += skip;
1:e8651b6:         return skip;
1:e8651b6:     }
1:e8651b6: }
============================================================================
author:Paulo Motta
-------------------------------------------------------------------------------
commit:e8651b6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.io.util;
1: 
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: /**
1:  * This class is to track bytes read from given DataInputStream
1:  */
1: public class TrackedInputStream extends FilterInputStream implements BytesReadTracker
1: {
1:     private long bytesRead;
1: 
1:     public TrackedInputStream(InputStream source)
1:     {
1:         super(source);
1:     }
1: 
1:     public long getBytesRead()
1:     {
1:         return bytesRead;
1:     }
1: 
1:     /**
1:      * reset counter to @param count
1:      */
1:     public void reset(long count)
1:     {
1:         bytesRead = count;
1:     }
1: 
1:     public int read() throws IOException
1:     {
1:         int read = super.read();
1:         bytesRead += 1;
1:         return read;
1:     }
1: 
1:     public int read(byte[] b, int off, int len) throws IOException
1:     {
1:         int read = super.read(b, off, len);
1:         bytesRead += read;
1:         return read;
1:     }
1: 
1:     public int read(byte[] b) throws IOException
1:     {
1:         int read = super.read(b);
1:         bytesRead += read;
1:         return read;
1:     }
1: 
1:     public long skip(long n) throws IOException
1:     {
1:         long skip = super.skip(n);
1:         bytesRead += skip;
1:         return skip;
1:     }
1: }
============================================================================