1:7b0c716: /*
1:7b0c716:  * Licensed to the Apache Software Foundation (ASF) under one
1:7b0c716:  * or more contributor license agreements.  See the NOTICE file
1:7b0c716:  * distributed with this work for additional information
1:7b0c716:  * regarding copyright ownership.  The ASF licenses this file
1:7b0c716:  * to you under the Apache License, Version 2.0 (the
1:7b0c716:  * "License"); you may not use this file except in compliance
1:7b0c716:  * with the License.  You may obtain a copy of the License at
1:7b0c716:  *
1:7b0c716:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7b0c716:  *
1:7b0c716:  * Unless required by applicable law or agreed to in writing, software
1:7b0c716:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7b0c716:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7b0c716:  * See the License for the specific language governing permissions and
1:7b0c716:  * limitations under the License.
1:7b0c716:  */
1:7b0c716: package org.apache.cassandra.auth;
1:7b0c716: 
1:7b0c716: import java.io.Serializable;
1:7b0c716: import java.security.Principal;
1:7b0c716: 
1:7b0c716: /**
1:7b0c716:  * <p> This class implements the <code>Principal</code> interface
1:7b0c716:  * and represents a user.
1:7b0c716:  *
1:7b0c716:  * <p> Principals such as this <code>CassPrincipal</code>
1:7b0c716:  * may be associated with a particular <code>Subject</code>
1:7b0c716:  * to augment that <code>Subject</code> with an additional
1:7b0c716:  * identity.  Refer to the <code>Subject</code> class for more information
1:7b0c716:  * on how to achieve this.  Authorization decisions can then be based upon
1:7b0c716:  * the Principals associated with a <code>Subject</code>.
1:7b0c716:  *
1:7b0c716:  * @see java.security.Principal
1:7b0c716:  * @see javax.security.auth.Subject
1:7b0c716:  */
1:7b0c716: public class CassandraPrincipal implements Principal, Serializable
1:7b0c716: {
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      *
1:7b0c716:      */
1:7b0c716:     private static final long serialVersionUID = 1L;
1:7b0c716:     private final String name;
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Create a CassPrincipal with a username.
1:7b0c716:      *
1:7b0c716:      * <p>
1:7b0c716:      *
1:7b0c716:      * @param name the username for this user.
1:7b0c716:      *
1:7b0c716:      * @exception NullPointerException if the <code>name</code>
1:7b0c716:      *                  is <code>null</code>.
1:7b0c716:      */
1:7b0c716:     public CassandraPrincipal(String name)
1:7b0c716:     {
1:7b0c716:         if (name == null)
1:7b0c716:             throw new NullPointerException("illegal null input");
1:7b0c716: 
1:7b0c716:         this.name = name;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Return the username for this <code>CassPrincipal</code>.
1:7b0c716:      *
1:7b0c716:      * <p>
1:7b0c716:      *
1:7b0c716:      * @return the username for this <code>CassPrincipal</code>
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public String getName()
1:7b0c716:     {
1:7b0c716:         return name;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Return a string representation of this <code>CassPrincipal</code>.
1:7b0c716:      *
1:7b0c716:      * <p>
1:7b0c716:      *
1:7b0c716:      * @return a string representation of this <code>CassPrincipal</code>.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public String toString()
1:7b0c716:     {
1:7b0c716:         return ("CassandraPrincipal:  " + name);
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Compares the specified Object with this <code>CassPrincipal</code>
1:7b0c716:      * for equality.  Returns true if the given object is also a
1:7b0c716:      * <code>CassPrincipal</code> and the two CassPrincipals
1:7b0c716:      * have the same username.
1:7b0c716:      *
1:7b0c716:      * <p>
1:7b0c716:      *
1:7b0c716:      * @param o Object to be compared for equality with this
1:7b0c716:      *          <code>CassPrincipal</code>.
1:7b0c716:      *
1:7b0c716:      * @return true if the specified Object is equal equal to this
1:7b0c716:      *          <code>CassPrincipal</code>.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public boolean equals(Object o)
1:7b0c716:     {
1:7b0c716:         if (o == null)
1:7b0c716:             return false;
1:7b0c716: 
1:7b0c716:         if (this == o)
1:7b0c716:             return true;
1:7b0c716: 
1:7b0c716:         if (!(o instanceof CassandraPrincipal))
1:7b0c716:             return false;
1:7b0c716:         CassandraPrincipal that = (CassandraPrincipal) o;
1:7b0c716: 
1:7b0c716:         if (this.getName().equals(that.getName()))
1:7b0c716:             return true;
1:7b0c716:         return false;
1:7b0c716:     }
1:7b0c716: 
1:7b0c716:     /**
1:7b0c716:      * Return a hash code for this <code>CassPrincipal</code>.
1:7b0c716:      *
1:7b0c716:      * <p>
1:7b0c716:      *
1:7b0c716:      * @return a hash code for this <code>CassPrincipal</code>.
1:7b0c716:      */
1:7b0c716:     @Override
1:7b0c716:     public int hashCode()
1:7b0c716:     {
1:7b0c716:         return name.hashCode();
1:7b0c716:     }
1:7b0c716: }
============================================================================
author:Sam Tunnicliffe
-------------------------------------------------------------------------------
commit:7b0c716
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.auth;
1: 
1: import java.io.Serializable;
1: import java.security.Principal;
1: 
1: /**
1:  * <p> This class implements the <code>Principal</code> interface
1:  * and represents a user.
1:  *
1:  * <p> Principals such as this <code>CassPrincipal</code>
1:  * may be associated with a particular <code>Subject</code>
1:  * to augment that <code>Subject</code> with an additional
1:  * identity.  Refer to the <code>Subject</code> class for more information
1:  * on how to achieve this.  Authorization decisions can then be based upon
1:  * the Principals associated with a <code>Subject</code>.
1:  *
1:  * @see java.security.Principal
1:  * @see javax.security.auth.Subject
1:  */
1: public class CassandraPrincipal implements Principal, Serializable
1: {
1: 
1:     /**
1:      *
1:      */
1:     private static final long serialVersionUID = 1L;
1:     private final String name;
1: 
1:     /**
1:      * Create a CassPrincipal with a username.
1:      *
1:      * <p>
1:      *
1:      * @param name the username for this user.
1:      *
1:      * @exception NullPointerException if the <code>name</code>
1:      *                  is <code>null</code>.
1:      */
1:     public CassandraPrincipal(String name)
1:     {
1:         if (name == null)
1:             throw new NullPointerException("illegal null input");
1: 
1:         this.name = name;
1:     }
1: 
1:     /**
1:      * Return the username for this <code>CassPrincipal</code>.
1:      *
1:      * <p>
1:      *
1:      * @return the username for this <code>CassPrincipal</code>
1:      */
1:     @Override
1:     public String getName()
1:     {
1:         return name;
1:     }
1: 
1:     /**
1:      * Return a string representation of this <code>CassPrincipal</code>.
1:      *
1:      * <p>
1:      *
1:      * @return a string representation of this <code>CassPrincipal</code>.
1:      */
1:     @Override
1:     public String toString()
1:     {
1:         return ("CassandraPrincipal:  " + name);
1:     }
1: 
1:     /**
1:      * Compares the specified Object with this <code>CassPrincipal</code>
1:      * for equality.  Returns true if the given object is also a
1:      * <code>CassPrincipal</code> and the two CassPrincipals
1:      * have the same username.
1:      *
1:      * <p>
1:      *
1:      * @param o Object to be compared for equality with this
1:      *          <code>CassPrincipal</code>.
1:      *
1:      * @return true if the specified Object is equal equal to this
1:      *          <code>CassPrincipal</code>.
1:      */
1:     @Override
1:     public boolean equals(Object o)
1:     {
1:         if (o == null)
1:             return false;
1: 
1:         if (this == o)
1:             return true;
1: 
1:         if (!(o instanceof CassandraPrincipal))
1:             return false;
1:         CassandraPrincipal that = (CassandraPrincipal) o;
1: 
1:         if (this.getName().equals(that.getName()))
1:             return true;
1:         return false;
1:     }
1: 
1:     /**
1:      * Return a hash code for this <code>CassPrincipal</code>.
1:      *
1:      * <p>
1:      *
1:      * @return a hash code for this <code>CassPrincipal</code>.
1:      */
1:     @Override
1:     public int hashCode()
1:     {
1:         return name.hashCode();
1:     }
1: }
============================================================================