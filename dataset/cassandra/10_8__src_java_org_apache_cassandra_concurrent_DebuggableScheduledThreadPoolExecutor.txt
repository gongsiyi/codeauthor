1:4deb779: /*
1:066ef58:  * Licensed to the Apache Software Foundation (ASF) under one
1:066ef58:  * or more contributor license agreements.  See the NOTICE file
1:066ef58:  * distributed with this work for additional information
1:066ef58:  * regarding copyright ownership.  The ASF licenses this file
1:066ef58:  * to you under the Apache License, Version 2.0 (the
1:066ef58:  * "License"); you may not use this file except in compliance
1:066ef58:  * with the License.  You may obtain a copy of the License at
2:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
3:066ef58:  */
1:07cf56f: package org.apache.cassandra.concurrent;
6:066ef58: 
1:066ef58: import java.util.concurrent.*;
1:066ef58: 
1:9e9846e: import org.slf4j.Logger;
1:9e9846e: import org.slf4j.LoggerFactory;
1:9e9846e: 
1:9e9846e: import org.apache.cassandra.service.StorageService;
1:1452134: import org.apache.cassandra.utils.JVMStabilityInspector;
1:1452134: 
1:eac19fe: /**
1:eac19fe:  * Like DebuggableThreadPoolExecutor, DebuggableScheduledThreadPoolExecutor always
1:eac19fe:  * logs exceptions from the tasks it is given, even if Future.get is never called elsewhere.
1:07cdfd0:  *
1:eac19fe:  * DebuggableScheduledThreadPoolExecutor also catches exceptions during Task execution
1:eac19fe:  * so that they don't supress subsequent invocations of the task.
1:7af9c6a:  *
1:7af9c6a:  * Finally, there is a special rejected execution handler for tasks rejected during the shutdown hook.
1:7af9c6a:  *
1:7af9c6a:  * For fire and forget tasks (like ref tidy) we can safely ignore the exceptions.
1:7af9c6a:  * For any callers that care to know their task was rejected we cancel passed task.
1:eac19fe:  */
1:4deb779: public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor
6:066ef58: {
1:9e9846e:     private static final Logger logger = LoggerFactory.getLogger(DebuggableScheduledThreadPoolExecutor.class);
1:9e9846e: 
1:9e9846e:     public static final RejectedExecutionHandler rejectedExecutionHandler = new RejectedExecutionHandler()
1:9e9846e:     {
1:9e9846e:         public void rejectedExecution(Runnable task, ThreadPoolExecutor executor)
1:9e9846e:         {
1:9e9846e:             if (executor.isShutdown())
1:9e9846e:             {
1:5115c10:                 if (!StorageService.instance.isShutdown())
1:9e9846e:                     throw new RejectedExecutionException("ScheduledThreadPoolExecutor has shut down.");
1:9e9846e: 
1:7af9c6a:                 //Give some notification to the caller the task isn't going to run
1:7af9c6a:                 if (task instanceof Future)
1:7af9c6a:                     ((Future) task).cancel(false);
1:7af9c6a: 
1:be6e6ea:                 logger.debug("ScheduledThreadPoolExecutor has shut down as part of C* shutdown");
1:9e9846e:             }
1:9e9846e:             else
1:9e9846e:             {
1:9e9846e:                 throw new AssertionError("Unknown rejection of ScheduledThreadPoolExecutor task");
1:9e9846e:             }
1:9e9846e:         }
1:9e9846e:     };
1:9e9846e: 
1:4deb779:     public DebuggableScheduledThreadPoolExecutor(int corePoolSize, String threadPoolName, int priority)
1:066ef58:     {
1:4deb779:         super(corePoolSize, new NamedThreadFactory(threadPoolName, priority));
1:9e9846e:         setRejectedExecutionHandler(rejectedExecutionHandler);
5:066ef58:     }
1:313f053: 
1:351e35b:     public DebuggableScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory)
1:351e35b:     {
1:351e35b:         super(corePoolSize, threadFactory);
1:9e9846e:         setRejectedExecutionHandler(rejectedExecutionHandler);
1:351e35b:     }
1:351e35b: 
1:4deb779:     public DebuggableScheduledThreadPoolExecutor(String threadPoolName)
1:066ef58:     {
1:4deb779:         this(1, threadPoolName, Thread.NORM_PRIORITY);
1:9e9846e:         setRejectedExecutionHandler(rejectedExecutionHandler);
1:066ef58:     }
1:066ef58: 
1:eac19fe:     // We need this as well as the wrapper for the benefit of non-repeating tasks
1:4deb779:     @Override
1:066ef58:     public void afterExecute(Runnable r, Throwable t)
1:313f053:     {
1:066ef58:         super.afterExecute(r,t);
1:4deb779:         DebuggableThreadPoolExecutor.logExceptionsAfterExecute(r, t);
1:066ef58:     }
1:eac19fe: 
1:eac19fe:     // override scheduling to supress exceptions that would cancel future executions
1:eac19fe:     @Override
1:eac19fe:     public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
1:eac19fe:     {
1:eac19fe:         return super.scheduleAtFixedRate(new UncomplainingRunnable(command), initialDelay, period, unit);
1:eac19fe:     }
1:eac19fe: 
1:eac19fe:     @Override
1:eac19fe:     public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)
1:eac19fe:     {
1:eac19fe:         return super.scheduleWithFixedDelay(new UncomplainingRunnable(command), initialDelay, delay, unit);
1:eac19fe:     }
1:eac19fe: 
1:eac19fe:     private static class UncomplainingRunnable implements Runnable
1:eac19fe:     {
1:eac19fe:         private final Runnable runnable;
1:eac19fe: 
1:eac19fe:         public UncomplainingRunnable(Runnable runnable)
1:eac19fe:         {
1:eac19fe:             this.runnable = runnable;
1:eac19fe:         }
1:eac19fe: 
1:eac19fe:         public void run()
1:eac19fe:         {
1:eac19fe:             try
1:eac19fe:             {
1:eac19fe:                 runnable.run();
1:eac19fe:             }
1:1452134:             catch (Throwable t)
1:eac19fe:             {
1:1452134:                 JVMStabilityInspector.inspectThrowable(t);
1:1452134:                 DebuggableThreadPoolExecutor.handleOrLog(t);
1:eac19fe:             }
1:eac19fe:         }
1:eac19fe:     }
1:066ef58: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:695065e
commit:be6e6ea
/////////////////////////////////////////////////////////////////////////
1:                 logger.debug("ScheduledThreadPoolExecutor has shut down as part of C* shutdown");
author:Alex Petrov
-------------------------------------------------------------------------------
commit:5115c10
/////////////////////////////////////////////////////////////////////////
1:                 if (!StorageService.instance.isShutdown())
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
0:                 logger.trace("ScheduledThreadPoolExecutor has shut down as part of C* shutdown");
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:7af9c6a
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Finally, there is a special rejected execution handler for tasks rejected during the shutdown hook.
1:  *
1:  * For fire and forget tasks (like ref tidy) we can safely ignore the exceptions.
1:  * For any callers that care to know their task was rejected we cancel passed task.
/////////////////////////////////////////////////////////////////////////
1:                 //Give some notification to the caller the task isn't going to run
1:                 if (task instanceof Future)
1:                     ((Future) task).cancel(false);
1: 
commit:9e9846e
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import org.apache.cassandra.service.StorageService;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger logger = LoggerFactory.getLogger(DebuggableScheduledThreadPoolExecutor.class);
1: 
1:     public static final RejectedExecutionHandler rejectedExecutionHandler = new RejectedExecutionHandler()
1:     {
1:         public void rejectedExecution(Runnable task, ThreadPoolExecutor executor)
1:         {
1:             if (executor.isShutdown())
1:             {
0:                 if (!StorageService.instance.isInShutdownHook())
1:                     throw new RejectedExecutionException("ScheduledThreadPoolExecutor has shut down.");
1: 
0:                 logger.debug("ScheduledThreadPoolExecutor has shut down as part of C* shutdown");
1:             }
1:             else
1:             {
1:                 throw new AssertionError("Unknown rejection of ScheduledThreadPoolExecutor task");
1:             }
1:         }
1:     };
1: 
1:         setRejectedExecutionHandler(rejectedExecutionHandler);
1:         setRejectedExecutionHandler(rejectedExecutionHandler);
1:         setRejectedExecutionHandler(rejectedExecutionHandler);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:6f42afa
commit:351e35b
/////////////////////////////////////////////////////////////////////////
1:     public DebuggableScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory)
1:     {
1:         super(corePoolSize, threadFactory);
1:     }
1: 
author:Joshua McKenzie
-------------------------------------------------------------------------------
commit:1452134
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.JVMStabilityInspector;
1: 
/////////////////////////////////////////////////////////////////////////
1:             catch (Throwable t)
1:                 JVMStabilityInspector.inspectThrowable(t);
1:                 DebuggableThreadPoolExecutor.handleOrLog(t);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a15c35b
/////////////////////////////////////////////////////////////////////////
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:37f6a9f
/////////////////////////////////////////////////////////////////////////
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.concurrent;
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:eac19fe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Like DebuggableThreadPoolExecutor, DebuggableScheduledThreadPoolExecutor always
1:  * logs exceptions from the tasks it is given, even if Future.get is never called elsewhere.
0:  *
1:  * DebuggableScheduledThreadPoolExecutor also catches exceptions during Task execution
1:  * so that they don't supress subsequent invocations of the task.
1:  */
/////////////////////////////////////////////////////////////////////////
1:     // We need this as well as the wrapper for the benefit of non-repeating tasks
1: 
1:     // override scheduling to supress exceptions that would cancel future executions
1:     @Override
1:     public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
1:     {
1:         return super.scheduleAtFixedRate(new UncomplainingRunnable(command), initialDelay, period, unit);
1:     }
1: 
1:     @Override
1:     public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)
1:     {
1:         return super.scheduleWithFixedDelay(new UncomplainingRunnable(command), initialDelay, delay, unit);
1:     }
1: 
1:     private static class UncomplainingRunnable implements Runnable
1:     {
1:         private final Runnable runnable;
1: 
1:         public UncomplainingRunnable(Runnable runnable)
1:         {
1:             this.runnable = runnable;
1:         }
1: 
1:         public void run()
1:         {
1:             try
1:             {
1:                 runnable.run();
1:             }
0:             catch (Throwable e)
1:             {
0:                 DebuggableThreadPoolExecutor.handleOrLog(e);
1:             }
1:         }
1:     }
commit:de83183
/////////////////////////////////////////////////////////////////////////
commit:313f053
/////////////////////////////////////////////////////////////////////////
1: 
0:         DebuggableThreadPoolExecutor.logFutureExceptions(r);
0:         if (t != null)
1:         {
0:             logger_.error("Error in ThreadPoolExecutor", t);
commit:d7e4924
/////////////////////////////////////////////////////////////////////////
commit:066ef58
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.concurrent;
1: 
1: import java.util.concurrent.*;
1: 
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.utils.*;
1: 
0: /**
0:  * This is a wrapper class for the <i>ScheduledThreadPoolExecutor</i>. It provides an implementation
0:  * for the <i>afterExecute()</i> found in the <i>ThreadPoolExecutor</i> class to log any unexpected 
0:  * Runtime Exceptions.
0:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
1:  */
0: public final class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor
1: {
0:     private static Logger logger_ = Logger.getLogger(DebuggableScheduledThreadPoolExecutor.class);
1:     
0:     public DebuggableScheduledThreadPoolExecutor(int threads,
0:             ThreadFactory threadFactory)
1:     {
0:         super(threads, threadFactory);        
1:     }
1:     
0:     /**
0:      *  (non-Javadoc)
0:      * @see java.util.concurrent.ThreadPoolExecutor#afterExecute(java.lang.Runnable, java.lang.Throwable)
1:      */
1:     public void afterExecute(Runnable r, Throwable t)
1:     {
1:         super.afterExecute(r,t);
0:         if ( t != null )
1:         {  
0:             Context ctx = ThreadLocalContext.get();
0:             if ( ctx != null )
1:             {
0:                 Object object = ctx.get(r.getClass().getName());
1:                 
0:                 if ( object != null )
1:                 {
0:                     logger_.info("**** In afterExecute() " + t.getClass().getName() + " occured while working with " + object + " ****");
1:                 }
0:                 else
1:                 {
0:                     logger_.info("**** In afterExecute() " + t.getClass().getName() + " occured ****");
1:                 }
1:             }
1:             
0:             Throwable cause = t.getCause();
0:             if ( cause != null )
1:             {
0:                 logger_.info( LogUtil.throwableToString(cause) );
1:             }
0:             logger_.info( LogUtil.throwableToString(t) );
1:         }
1:     }
1: }
commit:71739ef
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:4deb779
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.concurrent;
1: /*
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
0:  */
0: 
0: 
0: import java.util.concurrent.*;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
1: public class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor
0: {
0:     private static Logger logger = LoggerFactory.getLogger(DebuggableScheduledThreadPoolExecutor.class);
0: 
1:     public DebuggableScheduledThreadPoolExecutor(int corePoolSize, String threadPoolName, int priority)
0:     {
1:         super(corePoolSize, new NamedThreadFactory(threadPoolName, priority));
0:     }
0: 
1:     public DebuggableScheduledThreadPoolExecutor(String threadPoolName)
0:     {
1:         this(1, threadPoolName, Thread.NORM_PRIORITY);
0:     }
0: 
1:     @Override
0:     public void afterExecute(Runnable r, Throwable t)
0:     {
0:         super.afterExecute(r,t);
1:         DebuggableThreadPoolExecutor.logExceptionsAfterExecute(r, t);
0:     }
0: }
author:Prashant Malik
-------------------------------------------------------------------------------
commit:1f91e99
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.cassandra.concurrent;
0: 
0: import java.util.concurrent.*;
0: 
0: import org.apache.cassandra.utils.LogUtil;
0: import org.apache.log4j.Logger;
0: import org.apache.cassandra.utils.*;
0: 
0: /**
0:  * This is a wrapper class for the <i>ScheduledThreadPoolExecutor</i>. It provides an implementation
0:  * for the <i>afterExecute()</i> found in the <i>ThreadPoolExecutor</i> class to log any unexpected 
0:  * Runtime Exceptions.
0:  * 
0:  * Author : Avinash Lakshman ( alakshman@facebook.com) & Prashant Malik ( pmalik@facebook.com )
0:  */
0: public final class DebuggableScheduledThreadPoolExecutor extends ScheduledThreadPoolExecutor
0: {
0:     private static Logger logger_ = Logger.getLogger(DebuggableScheduledThreadPoolExecutor.class);
0:     
0:     public DebuggableScheduledThreadPoolExecutor(int threads,
0:             ThreadFactory threadFactory)
0:     {
0:         super(threads, threadFactory);        
0:     }
0:     
0:     /**
0:      *  (non-Javadoc)
0:      * @see java.util.concurrent.ThreadPoolExecutor#afterExecute(java.lang.Runnable, java.lang.Throwable)
0:      */
0:     public void afterExecute(Runnable r, Throwable t)
0:     {
0:         super.afterExecute(r,t);
0:         if ( t != null )
0:         {  
0:             Context ctx = ThreadLocalContext.get();
0:             if ( ctx != null )
0:             {
0:                 Object object = ctx.get(r.getClass().getName());
0:                 
0:                 if ( object != null )
0:                 {
0:                     logger_.info("**** In afterExecute() " + t.getClass().getName() + " occured while working with " + object + " ****");
0:                 }
0:                 else
0:                 {
0:                     logger_.info("**** In afterExecute() " + t.getClass().getName() + " occured ****");
0:                 }
0:             }
0:             
0:             Throwable cause = t.getCause();
0:             if ( cause != null )
0:             {
0:                 logger_.info( LogUtil.throwableToString(cause) );
0:             }
0:             logger_.info( LogUtil.throwableToString(t) );
0:         }
0:     }
0: }
============================================================================