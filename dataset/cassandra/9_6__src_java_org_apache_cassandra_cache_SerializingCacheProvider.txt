1:1adcd1c: /*
1:1adcd1c:  * Licensed to the Apache Software Foundation (ASF) under one
1:1adcd1c:  * or more contributor license agreements.  See the NOTICE file
1:1adcd1c:  * distributed with this work for additional information
1:1adcd1c:  * regarding copyright ownership.  The ASF licenses this file
1:1adcd1c:  * to you under the Apache License, Version 2.0 (the
1:1adcd1c:  * "License"); you may not use this file except in compliance
1:1adcd1c:  * with the License.  You may obtain a copy of the License at
1:07cdfd0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
3:07cdfd0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:1adcd1c:  */
1:07cf56f: package org.apache.cassandra.cache;
1:1adcd1c: 
1:c9270f4: import java.io.IOException;
1:c9270f4: 
1:dfd78d0: import org.apache.cassandra.config.DatabaseDescriptor;
1:2ae5272: import org.apache.cassandra.db.TypeSizes;
1:a991b64: import org.apache.cassandra.db.partitions.CachedPartition;
1:c9270f4: import org.apache.cassandra.io.ISerializer;
1:03f72ac: import org.apache.cassandra.io.util.DataInputPlus;
1:75508ec: import org.apache.cassandra.io.util.DataOutputPlus;
4:80d3dec: 
1:dfd78d0: public class SerializingCacheProvider implements CacheProvider<RowCacheKey, IRowCacheEntry>
1:c9270f4: {
1:dfd78d0:     public ICache<RowCacheKey, IRowCacheEntry> create()
1:c9270f4:     {
1:dfd78d0:         return SerializingCache.create(DatabaseDescriptor.getRowCacheSizeInMB() * 1024 * 1024, new RowCacheSerializer());
1:c9270f4:     }
1:c9270f4: 
1:4d34917:     // Package protected for tests
1:4d34917:     static class RowCacheSerializer implements ISerializer<IRowCacheEntry>
1:c9270f4:     {
1:75508ec:         public void serialize(IRowCacheEntry entry, DataOutputPlus out) throws IOException
1:c9270f4:         {
1:debb15e:             assert entry != null; // unlike CFS we don't support nulls, since there is no need for that in the cache
1:debb15e:             boolean isSentinel = entry instanceof RowCacheSentinel;
1:debb15e:             out.writeBoolean(isSentinel);
1:debb15e:             if (isSentinel)
1:debb15e:                 out.writeLong(((RowCacheSentinel) entry).sentinelId);
1:c9270f4:             else
1:a991b64:                 CachedPartition.cacheSerializer.serialize((CachedPartition)entry, out);
1:c9270f4:         }
1:c9270f4: 
1:03f72ac:         public IRowCacheEntry deserialize(DataInputPlus in) throws IOException
1:c9270f4:         {
1:c9270f4:             boolean isSentinel = in.readBoolean();
1:c9270f4:             if (isSentinel)
1:c9270f4:                 return new RowCacheSentinel(in.readLong());
1:a991b64: 
1:a991b64:             return CachedPartition.cacheSerializer.deserialize(in);
1:c9270f4:         }
1:c9270f4: 
1:03f72ac:         public long serializedSize(IRowCacheEntry entry)
1:c9270f4:         {
1:03f72ac:             int size = TypeSizes.sizeof(true);
1:debb15e:             if (entry instanceof RowCacheSentinel)
1:03f72ac:                 size += TypeSizes.sizeof(((RowCacheSentinel) entry).sentinelId);
1:debb15e:             else
1:03f72ac:                 size += CachedPartition.cacheSerializer.serializedSize((CachedPartition) entry);
1:cb25a8f:             return size;
1:c9270f4:         }
1:c9270f4:     }
1:c9270f4: }
============================================================================
author:Ariel Weisberg
-------------------------------------------------------------------------------
commit:03f72ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataInputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public IRowCacheEntry deserialize(DataInputPlus in) throws IOException
/////////////////////////////////////////////////////////////////////////
1:         public long serializedSize(IRowCacheEntry entry)
1:             int size = TypeSizes.sizeof(true);
1:                 size += TypeSizes.sizeof(((RowCacheSentinel) entry).sentinelId);
1:                 size += CachedPartition.cacheSerializer.serializedSize((CachedPartition) entry);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.partitions.CachedPartition;
/////////////////////////////////////////////////////////////////////////
1:                 CachedPartition.cacheSerializer.serialize((CachedPartition)entry, out);
/////////////////////////////////////////////////////////////////////////
1: 
1:             return CachedPartition.cacheSerializer.deserialize(in);
/////////////////////////////////////////////////////////////////////////
0:                 size += CachedPartition.cacheSerializer.serializedSize((CachedPartition) entry, typeSizes);
commit:4d34917
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
1:     // Package protected for tests
1:     static class RowCacheSerializer implements ISerializer<IRowCacheEntry>
/////////////////////////////////////////////////////////////////////////
0:                     ColumnFamily.serializer.serialize((ColumnFamily) cf, out, MessagingService.current_version);
/////////////////////////////////////////////////////////////////////////
0:             return ColumnFamily.serializer.deserialize(in, MessagingService.current_version);
/////////////////////////////////////////////////////////////////////////
0:                 size += ColumnFamily.serializer.serializedSize((ColumnFamily) cf, typeSizes, MessagingService.current_version);
commit:5c7ccb0
commit:c9270f4
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataInput;
0: import java.io.DataOutput;
0: import java.io.IOError;
1: import java.io.IOException;
1: 
0: import org.apache.cassandra.db.DBConstants;
1: import org.apache.cassandra.io.ISerializer;
0:     public ICache<RowCacheKey, IRowCacheEntry> create(int capacity, boolean useMemoryWeigher)
0:         return new SerializingCache<RowCacheKey, IRowCacheEntry>(capacity, useMemoryWeigher, new RowCacheSerializer());
1:     }
1: 
0:     private static class RowCacheSerializer implements ISerializer<IRowCacheEntry>
1:     {
0:         public void serialize(IRowCacheEntry cf, DataOutput out)
1:         {
0:             assert cf != null; // unlike CFS we don't support nulls, since there is no need for that in the cache
0:             try
1:             {
0:                 out.writeBoolean(cf instanceof RowCacheSentinel);
0:                 if (cf instanceof RowCacheSentinel)
0:                     out.writeLong(((RowCacheSentinel) cf).sentinelId);
1:                 else
0:                     ColumnFamily.serializer.serialize((ColumnFamily) cf, out);
1:             }
0:             catch (IOException e)
1:             {
0:                 throw new IOError(e);
1:             }
1:         }
1: 
0:         public IRowCacheEntry deserialize(DataInput in) throws IOException
1:         {
1:             boolean isSentinel = in.readBoolean();
1:             if (isSentinel)
1:                 return new RowCacheSentinel(in.readLong());
0:             return ColumnFamily.serializer.deserialize(in);
1:         }
1: 
0:         public long serializedSize(IRowCacheEntry cf)
1:         {
0:             return DBConstants.boolSize
0:                    + (cf instanceof RowCacheSentinel
0:                       ? DBConstants.intSize + DBConstants.longSize
0:                       : ColumnFamily.serializer().serializedSize((ColumnFamily) cf));
1:         }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1: package org.apache.cassandra.cache;
author:Robert Stupp
-------------------------------------------------------------------------------
commit:dfd78d0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.config.DatabaseDescriptor;
1: public class SerializingCacheProvider implements CacheProvider<RowCacheKey, IRowCacheEntry>
1:     public ICache<RowCacheKey, IRowCacheEntry> create()
1:         return SerializingCache.create(DatabaseDescriptor.getRowCacheSizeInMB() * 1024 * 1024, new RowCacheSerializer());
author:belliottsmith
-------------------------------------------------------------------------------
commit:75508ec
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.util.DataOutputPlus;
/////////////////////////////////////////////////////////////////////////
1:         public void serialize(IRowCacheEntry entry, DataOutputPlus out) throws IOException
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a3734e5
/////////////////////////////////////////////////////////////////////////
0: public class SerializingCacheProvider
commit:debb15e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         public void serialize(IRowCacheEntry entry, DataOutput out) throws IOException
1:             assert entry != null; // unlike CFS we don't support nulls, since there is no need for that in the cache
1:             boolean isSentinel = entry instanceof RowCacheSentinel;
1:             out.writeBoolean(isSentinel);
1:             if (isSentinel)
1:                 out.writeLong(((RowCacheSentinel) entry).sentinelId);
1:             else
0:                 ColumnFamily.serializer.serialize((ColumnFamily) entry, out, MessagingService.current_version);
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(IRowCacheEntry entry, TypeSizes typeSizes)
1:             if (entry instanceof RowCacheSentinel)
0:                 size += typeSizes.sizeof(((RowCacheSentinel) entry).sentinelId);
0:                 size += ColumnFamily.serializer.serializedSize((ColumnFamily) entry, typeSizes, MessagingService.current_version);
commit:2ae5272
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.TypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(IRowCacheEntry cf, TypeSizes typeSizes)
commit:1adcd1c
/////////////////////////////////////////////////////////////////////////
1: /*
0:  * 
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
0:  * 
1:  */
1: 
commit:80d3dec
/////////////////////////////////////////////////////////////////////////
0: package org.apache.cassandra.cache;
1: 
0: import org.apache.cassandra.config.ConfigurationException;
0: import org.apache.cassandra.db.ColumnFamily;
0: import org.apache.cassandra.db.DecoratedKey;
1: 
0: import com.sun.jna.Memory;
1: 
0: public class SerializingCacheProvider implements IRowCacheProvider
0: {
0:     public SerializingCacheProvider() throws ConfigurationException
0:     {
0:         try
0:         {
0:             Memory.class.getName();
0:         }
0:         catch (NoClassDefFoundError e)
0:         {
0:             throw new ConfigurationException("Cannot intialize SerializationCache without JNA in the class path");
0:         }
0:     }
1: 
0:     public ICache<DecoratedKey, ColumnFamily> create(int capacity)
0:     {
0:         return new SerializingCache<DecoratedKey, ColumnFamily>(capacity, ColumnFamily.serializer());
0:     }
0: }
author:Vijay Parthasarathy
-------------------------------------------------------------------------------
commit:8aaaacd
/////////////////////////////////////////////////////////////////////////
0:     public ICache<RowCacheKey, IRowCacheEntry> create(long capacity)
0:         return SerializingCache.create(capacity, new RowCacheSerializer());
commit:ac362da
commit:0267293
/////////////////////////////////////////////////////////////////////////
0:     public ICache<RowCacheKey, IRowCacheEntry> create(long capacity, boolean useMemoryWeigher)
commit:cb25a8f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.DBTypeSizes;
/////////////////////////////////////////////////////////////////////////
0:         public long serializedSize(IRowCacheEntry cf, DBTypeSizes typeSizes)
0:             int size = typeSizes.sizeof(true);
0:             if (cf instanceof RowCacheSentinel)
0:                 size += typeSizes.sizeof(((RowCacheSentinel) cf).sentinelId);
0:             else
0:                 size += ColumnFamily.serializer().serializedSize((ColumnFamily) cf, typeSizes);
1:             return size;
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:587cb58
/////////////////////////////////////////////////////////////////////////
0:                 size += ColumnFamily.serializer.serializedSize((ColumnFamily) cf, typeSizes);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:295aedb
/////////////////////////////////////////////////////////////////////////
0:     public ICache<RowCacheKey, ColumnFamily> create(int capacity, boolean useMemoryWeigher)
0:         return new SerializingCache<RowCacheKey, ColumnFamily>(capacity, useMemoryWeigher, ColumnFamily.serializer());
commit:6fa1eaa
/////////////////////////////////////////////////////////////////////////
commit:f6183e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             throw new ConfigurationException("Cannot initialize SerializationCache without JNA in the class path");
author:Chris Goffinet
-------------------------------------------------------------------------------
commit:1d0d6d4
/////////////////////////////////////////////////////////////////////////
0:     public ICache<DecoratedKey, ColumnFamily> create(int capacity, String tableName, String cfName)
0:         return new SerializingCache<DecoratedKey, ColumnFamily>(capacity, ColumnFamily.serializer(), tableName, cfName);
============================================================================