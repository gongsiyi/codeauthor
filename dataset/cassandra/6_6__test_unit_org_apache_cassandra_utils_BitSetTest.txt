1:dc37dea: /*
1:dc37dea:  * Licensed to the Apache Software Foundation (ASF) under one
1:dc37dea:  * or more contributor license agreements.  See the NOTICE file
1:dc37dea:  * distributed with this work for additional information
1:dc37dea:  * regarding copyright ownership.  The ASF licenses this file
1:dc37dea:  * to you under the Apache License, Version 2.0 (the
1:dc37dea:  * "License"); you may not use this file except in compliance
1:dc37dea:  * with the License.  You may obtain a copy of the License at
1:dc37dea:  *
1:dc37dea:  *     http://www.apache.org/licenses/LICENSE-2.0
1:dc37dea:  *
1:dc37dea:  * Unless required by applicable law or agreed to in writing, software
1:dc37dea:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc37dea:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc37dea:  * See the License for the specific language governing permissions and
1:dc37dea:  * limitations under the License.
2:dc37dea:  */
1:dc37dea: package org.apache.cassandra.utils;
11:dc37dea: 
1:dc37dea: import java.io.ByteArrayInputStream;
1:dc37dea: import java.io.DataInputStream;
1:dc37dea: import java.io.IOException;
1:dc37dea: import java.util.List;
1:dc37dea: import java.util.Random;
1:dc37dea: 
1:7f2c3a8: import com.google.common.collect.Lists;
1:83a43f1: import org.junit.Assert;
1:a991b64: import org.junit.Test;
1:a991b64: 
1:dc37dea: import org.apache.cassandra.io.util.DataOutputBuffer;
1:18d8f26: import org.apache.cassandra.utils.IFilter.FilterKey;
1:8ff5262: import org.apache.cassandra.utils.KeyGenerator.RandomStringGenerator;
1:dc37dea: import org.apache.cassandra.utils.obs.IBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1:dc37dea: import org.apache.cassandra.utils.obs.OpenBitSet;
1:dc37dea: 
1:83a43f1: import static org.junit.Assert.assertEquals;
1:dc37dea: 
1:dc37dea: public class BitSetTest
2:dc37dea: {
2:dc37dea:     /**
1:dc37dea:      * Test bitsets in a "real-world" environment, i.e., bloom filters
1:dc37dea:      */
2:dc37dea:     @Test
1:dc37dea:     public void compareBitSets()
1:dc37dea:     {
1:23fd75f:         compareBitSets(false);
1:23fd75f:         compareBitSets(true);
1:23fd75f:     }
1:23fd75f:     private static void compareBitSets(boolean oldBfHashOrder)
1:23fd75f:     {
1:23fd75f:         BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, oldBfHashOrder);
1:23fd75f:         BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, true, oldBfHashOrder);
1:8ff5262: 
1:8ff5262:         RandomStringGenerator gen1 = new KeyGenerator.RandomStringGenerator(new Random().nextInt(), FilterTestHelper.ELEMENTS);
1:dc37dea: 
1:dc37dea:         // make sure both bitsets are empty.
1:dc37dea:         compare(bf2.bitset, bf3.bitset);
1:dc37dea: 
1:dc37dea:         while (gen1.hasNext())
1:dc37dea:         {
1:18d8f26:             FilterKey key = FilterTestHelper.wrap(gen1.next());
1:dc37dea:             bf2.add(key);
1:dc37dea:             bf3.add(key);
2:dc37dea:         }
1:dc37dea: 
1:dc37dea:         compare(bf2.bitset, bf3.bitset);
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     private static final Random random = new Random();
1:dc37dea: 
1:dc37dea:     /**
1:dc37dea:      * Test serialization and de-serialization in-memory
1:dc37dea:      */
1:dc37dea:     @Test
1:dc37dea:     public void testOffHeapSerialization() throws IOException
1:dc37dea:     {
1:c87b6a3:         try (OffHeapBitSet bs = new OffHeapBitSet(100000))
1:c87b6a3:         {
1:c87b6a3:             populateAndReserialize(bs);
1:c87b6a3:         }
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     @Test
1:dc37dea:     public void testOffHeapCompatibility() throws IOException
1:dc37dea:     {
1:a991b64:         try (OpenBitSet bs = new OpenBitSet(100000))
1:c87b6a3:         {
1:c87b6a3:             populateAndReserialize(bs);
1:c87b6a3:         }
1:dc37dea:     }
1:dc37dea: 
1:23fd75f:     private static void populateAndReserialize(IBitSet bs) throws IOException
1:dc37dea:     {
1:dc37dea:         for (long i = 0; i < bs.capacity(); i++)
1:dc37dea:             if (random.nextBoolean())
1:dc37dea:                 bs.set(i);
1:dc37dea: 
1:60d9c7f:         DataOutputBuffer out = new DataOutputBuffer();
1:60d9c7f:         bs.serialize(out);
1:60d9c7f:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(out.getData()));
1:c87b6a3:         try (OffHeapBitSet newbs = OffHeapBitSet.deserialize(in))
1:c87b6a3:         {
1:c87b6a3:             compare(bs, newbs);
1:c87b6a3:         }
1:dc37dea:     }
1:dc37dea: 
1:18d8f26:     static void compare(IBitSet bs, IBitSet newbs)
1:dc37dea:     {
1:dc37dea:         assertEquals(bs.capacity(), newbs.capacity());
1:dc37dea:         for (long i = 0; i < bs.capacity(); i++)
1:dc37dea:             Assert.assertEquals(bs.get(i), newbs.get(i));
1:dc37dea:     }
1:dc37dea: 
1:dc37dea:     @Test
1:c87b6a3:     public void testBitClear()
1:dc37dea:     {
1:dc37dea:         int size = Integer.MAX_VALUE / 4000;
1:c87b6a3:         try (OffHeapBitSet bitset = new OffHeapBitSet(size))
1:c87b6a3:         {
1:c87b6a3:             List<Integer> randomBits = Lists.newArrayList();
1:c87b6a3:             for (int i = 0; i < 10; i++)
1:c87b6a3:                 randomBits.add(random.nextInt(size));
1:c87b6a3:     
1:c87b6a3:             for (long randomBit : randomBits)
1:c87b6a3:                 bitset.set(randomBit);
1:c87b6a3:     
1:c87b6a3:             for (long randomBit : randomBits)
1:c87b6a3:                 Assert.assertEquals(true, bitset.get(randomBit));
1:c87b6a3:     
1:c87b6a3:             for (long randomBit : randomBits)
1:c87b6a3:                 bitset.clear(randomBit);
1:c87b6a3:     
1:c87b6a3:             for (long randomBit : randomBits)
1:c87b6a3:                 Assert.assertEquals(false, bitset.get(randomBit));
1:c87b6a3:         }
1:dc37dea:     }
1:dc37dea: }
============================================================================
author:Robert Stupp
-------------------------------------------------------------------------------
commit:23fd75f
/////////////////////////////////////////////////////////////////////////
1:         compareBitSets(false);
1:         compareBitSets(true);
1:     }
1:     private static void compareBitSets(boolean oldBfHashOrder)
1:     {
1:         BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, oldBfHashOrder);
1:         BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, true, oldBfHashOrder);
/////////////////////////////////////////////////////////////////////////
1:     private static void populateAndReserialize(IBitSet bs) throws IOException
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a991b64
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
/////////////////////////////////////////////////////////////////////////
1:         try (OpenBitSet bs = new OpenBitSet(100000))
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Test;
1: import org.apache.cassandra.utils.IFilter.FilterKey;
/////////////////////////////////////////////////////////////////////////
1:             FilterKey key = FilterTestHelper.wrap(gen1.next());
/////////////////////////////////////////////////////////////////////////
1:     static void compare(IBitSet bs, IBitSet newbs)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:c87b6a3
/////////////////////////////////////////////////////////////////////////
1:         try (OffHeapBitSet bs = new OffHeapBitSet(100000))
1:         {
1:             populateAndReserialize(bs);
1:         }
0:         try (OpenBitSet bs = new OpenBitSet(100000)) 
1:         {
1:             populateAndReserialize(bs);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try (OffHeapBitSet newbs = OffHeapBitSet.deserialize(in))
1:         {
1:             compare(bs, newbs);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void testBitClear()
1:         try (OffHeapBitSet bitset = new OffHeapBitSet(size))
1:         {
1:             List<Integer> randomBits = Lists.newArrayList();
1:             for (int i = 0; i < 10; i++)
1:                 randomBits.add(random.nextInt(size));
1:     
1:             for (long randomBit : randomBits)
1:                 bitset.set(randomBit);
1:     
1:             for (long randomBit : randomBits)
1:                 Assert.assertEquals(true, bitset.get(randomBit));
1:     
1:             for (long randomBit : randomBits)
1:                 bitset.clear(randomBit);
1:     
1:             for (long randomBit : randomBits)
1:                 Assert.assertEquals(false, bitset.get(randomBit));
1:         }
commit:83a43f1
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
1: import static org.junit.Assert.assertEquals;
author:Brandon Williams
-------------------------------------------------------------------------------
commit:8ff5262
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.KeyGenerator.RandomStringGenerator;
/////////////////////////////////////////////////////////////////////////
0:         BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false);
0:         BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, true);
1: 
1:         RandomStringGenerator gen1 = new KeyGenerator.RandomStringGenerator(new Random().nextInt(), FilterTestHelper.ELEMENTS);
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
1: import com.google.common.collect.Lists;
0: import org.junit.Test;
0: import junit.framework.Assert;
/////////////////////////////////////////////////////////////////////////
commit:60d9c7f
/////////////////////////////////////////////////////////////////////////
0:         DataInputStream in = new DataInputStream(new FileInputStream(new File(LEGACY_SST_FILE)));
0:         in.readInt(); // bloom filter hash count
0:         OpenBitSet bs = OpenBitSet.deserialize(in);
0:         in = new DataInputStream(new FileInputStream(new File(LEGACY_SST_FILE)));
0:         in.readInt(); // bloom filter hash count
0:         OffHeapBitSet obs = OffHeapBitSet.deserialize(in);
/////////////////////////////////////////////////////////////////////////
1:         DataOutputBuffer out = new DataOutputBuffer();
1:         bs.serialize(out);
1:         DataInputStream in = new DataInputStream(new ByteArrayInputStream(out.getData()));
0:         OffHeapBitSet newbs = OffHeapBitSet.deserialize(in);
commit:dc37dea
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.DataInputStream;
0: import java.io.File;
0: import java.io.FileInputStream;
1: import java.io.IOException;
0: import java.nio.ByteBuffer;
1: import java.util.List;
1: import java.util.Random;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.cassandra.io.util.DataOutputBuffer;
0: import org.apache.cassandra.utils.KeyGenerator.WordGenerator;
1: import org.apache.cassandra.utils.obs.IBitSet;
1: import org.apache.cassandra.utils.obs.OffHeapBitSet;
1: import org.apache.cassandra.utils.obs.OpenBitSet;
0: import org.junit.Test;
1: 
0: import com.google.common.collect.Lists;
1: 
0: import static junit.framework.Assert.assertEquals;
1: 
1: public class BitSetTest
1: {
1:     /**
1:      * Test bitsets in a "real-world" environment, i.e., bloom filters
1:      */
1:     @Test
1:     public void compareBitSets()
1:     {
0:         BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(KeyGenerator.WordGenerator.WORDS / 2, FilterTestHelper.MAX_FAILURE_RATE, false);
0:         BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(KeyGenerator.WordGenerator.WORDS / 2, FilterTestHelper.MAX_FAILURE_RATE, true);
0:         int skipEven = KeyGenerator.WordGenerator.WORDS % 2 == 0 ? 0 : 2;
0:         WordGenerator gen1 = new KeyGenerator.WordGenerator(skipEven, 2);
1: 
1:         // make sure both bitsets are empty.
1:         compare(bf2.bitset, bf3.bitset);
1: 
1:         while (gen1.hasNext())
1:         {
0:             ByteBuffer key = gen1.next();
1:             bf2.add(key);
1:             bf3.add(key);
1:         }
1: 
1:         compare(bf2.bitset, bf3.bitset);
1:     }
1: 
0:     private static final String LEGACY_SST_FILE = "test/data/legacy-sstables/hb/Keyspace1/Keyspace1-Standard1-hb-0-Filter.db";
1: 
1:     /**
0:      * Test compatibility with a 1.1-version data file
1:      */
1:     @Test
0:     public void testExpectedCompatablity() throws IOException
1:     {
0:         DataInputStream dis = new DataInputStream(new FileInputStream(new File(LEGACY_SST_FILE)));
0:         dis.readInt(); // bloom filter hash count
0:         OpenBitSet bs = OpenBitSet.deserialize(dis);
1: 
0:         dis = new DataInputStream(new FileInputStream(new File(LEGACY_SST_FILE)));
0:         dis.readInt(); // bloom filter hash count
0:         OffHeapBitSet obs = OffHeapBitSet.deserialize(dis);
1: 
0:         compare(obs, bs);
1:     }
1: 
1:     private static final Random random = new Random();
1: 
1:     /**
1:      * Test serialization and de-serialization in-memory
1:      */
1:     @Test
1:     public void testOffHeapSerialization() throws IOException
1:     {
0:         OffHeapBitSet bs = new OffHeapBitSet(100000);
0:         populateAndReserialize(bs);
1:     }
1: 
1:     @Test
1:     public void testOffHeapCompatibility() throws IOException
1:     {
0:         OpenBitSet bs = new OpenBitSet(100000);
0:         populateAndReserialize(bs);
1:     }
1: 
0:     private void populateAndReserialize(IBitSet bs) throws IOException
1:     {
1:         for (long i = 0; i < bs.capacity(); i++)
1:             if (random.nextBoolean())
1:                 bs.set(i);
1: 
0:         DataOutputBuffer dos = new DataOutputBuffer();
0:         bs.serialize(dos);
0:         DataInputStream dis = new DataInputStream(new ByteArrayInputStream(dos.getData()));
0:         OffHeapBitSet newbs = OffHeapBitSet.deserialize(dis);
0:         compare(bs, newbs);
1:     }
1: 
0:     private void compare(IBitSet bs, IBitSet newbs)
1:     {
1:         assertEquals(bs.capacity(), newbs.capacity());
1:         for (long i = 0; i < bs.capacity(); i++)
1:             Assert.assertEquals(bs.get(i), newbs.get(i));
1:     }
1: 
1:     @Test
0:     public void testBitClear() throws IOException
1:     {
1:         int size = Integer.MAX_VALUE / 4000;
0:         OffHeapBitSet bitset = new OffHeapBitSet(size);
0:         List<Integer> randomBits = Lists.newArrayList();
0:         for (int i = 0; i < 10; i++)
0:             randomBits.add(random.nextInt(size));
1: 
0:         for (long randomBit : randomBits)
0:             bitset.set(randomBit);
1: 
0:         for (long randomBit : randomBits)
0:             Assert.assertEquals(true, bitset.get(randomBit));
1: 
0:         for (long randomBit : randomBits)
0:             bitset.clear(randomBit);
1: 
0:         for (long randomBit : randomBits)
0:             Assert.assertEquals(false, bitset.get(randomBit));
0:         bitset.close();
1:     }
1: }
============================================================================