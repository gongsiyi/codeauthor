1:07cf56f: /*
1:714eab0:  * Licensed to the Apache Software Foundation (ASF) under one
1:714eab0:  * or more contributor license agreements.  See the NOTICE file
1:714eab0:  * distributed with this work for additional information
1:714eab0:  * regarding copyright ownership.  The ASF licenses this file
1:714eab0:  * to you under the Apache License, Version 2.0 (the
1:714eab0:  * "License"); you may not use this file except in compliance
1:714eab0:  * with the License.  You may obtain a copy of the License at
1:714eab0:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:714eab0:  *
1:07cf56f:  * Unless required by applicable law or agreed to in writing, software
1:07cf56f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:07cf56f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:07cf56f:  * See the License for the specific language governing permissions and
1:07cf56f:  * limitations under the License.
1:714eab0:  */
1:078c56c: package org.apache.cassandra.dht;
1:714eab0: 
1:e7a385a: import java.nio.ByteBuffer;
1:ef25537: import java.util.Collections;
1:ef25537: import java.util.List;
1:ef25537: import java.util.Map;
1:47d3b7e: import java.util.Random;
4:078c56c: 
1:078c56c: import org.apache.cassandra.db.DecoratedKey;
1:18d8f26: import org.apache.cassandra.db.CachedHashDecoratedKey;
1:078c56c: import org.apache.cassandra.db.marshal.AbstractType;
1:43d330d: import org.apache.cassandra.utils.ByteBufferUtil;
1:4b54b8a: import org.apache.cassandra.utils.ObjectSizes;
1:078c56c: 
1:07893d7: public class LocalPartitioner implements IPartitioner
3:078c56c: {
1:07893d7:     private static final long EMPTY_SIZE = ObjectSizes.measure(new LocalPartitioner(null).new LocalToken(null));
1:4b54b8a: 
1:07893d7:     final AbstractType<?> comparator;   // package-private to avoid access workarounds in embedded LocalToken.
1:078c56c: 
1:2bc0d4d:     public LocalPartitioner(AbstractType<?> comparator)
1:078c56c:     {
1:078c56c:         this.comparator = comparator;
3:078c56c:     }
1:0a08525: 
1:7e4ef1c:     public DecoratedKey decorateKey(ByteBuffer key)
1:0a08525:     {
1:18d8f26:         return new CachedHashDecoratedKey(getToken(key), key);
1:4b54b8a:     }
1:4b54b8a: 
1:e7a385a:     public Token midpoint(Token left, Token right)
1:4b54b8a:     {
2:078c56c:         throw new UnsupportedOperationException();
1:078c56c:     }
1:078c56c: 
1:e2a0d75:     public Token split(Token left, Token right, double ratioToLeft)
1:e2a0d75:     {
1:e2a0d75:         throw new UnsupportedOperationException();
1:e2a0d75:     }
1:e2a0d75: 
1:078c56c:     public LocalToken getMinimumToken()
1:078c56c:     {
1:07893d7:         return new LocalToken(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:078c56c:     }
1:078c56c: 
1:e7a385a:     public LocalToken getToken(ByteBuffer key)
1:078c56c:     {
1:07893d7:         return new LocalToken(key);
1:078c56c:     }
1:078c56c: 
1:078c56c:     public LocalToken getRandomToken()
1:078c56c:     {
1:078c56c:         throw new UnsupportedOperationException();
1:078c56c:     }
1:078c56c: 
1:47d3b7e:     public LocalToken getRandomToken(Random random)
1:47d3b7e:     {
1:47d3b7e:         throw new UnsupportedOperationException();
1:47d3b7e:     }
1:47d3b7e: 
1:078c56c:     public Token.TokenFactory getTokenFactory()
1:078c56c:     {
1:762db47:         return tokenFactory;
1:078c56c:     }
1:078c56c: 
1:762db47:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory()
1:762db47:     {
1:762db47:         public ByteBuffer toByteArray(Token token)
1:762db47:         {
1:762db47:             return ((LocalToken)token).token;
1:762db47:         }
1:762db47: 
1:762db47:         public Token fromByteArray(ByteBuffer bytes)
1:762db47:         {
1:762db47:             return new LocalToken(bytes);
1:762db47:         }
1:762db47: 
1:762db47:         public String toString(Token token)
1:762db47:         {
1:762db47:             return comparator.getString(((LocalToken)token).token);
1:762db47:         }
1:762db47: 
1:762db47:         public void validate(String token)
1:762db47:         {
1:762db47:             comparator.validate(comparator.fromString(token));
1:762db47:         }
1:762db47: 
1:762db47:         public Token fromString(String string)
1:762db47:         {
1:762db47:             return new LocalToken(comparator.fromString(string));
1:762db47:         }
1:762db47:     };
1:762db47: 
1:078c56c:     public boolean preservesOrder()
1:078c56c:     {
1:078c56c:         return true;
1:078c56c:     }
1:078c56c: 
1:2564647:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
1:078c56c:     {
1:2564647:         return Collections.singletonMap((Token)getMinimumToken(), new Float(1.0));
1:078c56c:     }
1:078c56c: 
1:a67f779:     public AbstractType<?> getTokenValidator()
1:078c56c:     {
1:0a08525:         return comparator;
1:0a08525:     }
1:07893d7: 
1:69f77cb:     public AbstractType<?> partitionOrdering()
1:69f77cb:     {
1:69f77cb:         return comparator;
1:69f77cb:     }
1:69f77cb: 
1:07893d7:     public class LocalToken extends ComparableObjectToken<ByteBuffer>
1:07893d7:     {
1:07893d7:         static final long serialVersionUID = 8437543776403014875L;
1:07893d7: 
1:07893d7:         public LocalToken(ByteBuffer token)
1:07893d7:         {
1:07893d7:             super(token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public String toString()
1:07893d7:         {
1:07893d7:             return comparator.getString(token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public int compareTo(Token o)
1:07893d7:         {
1:07893d7:             assert getPartitioner() == o.getPartitioner();
1:07893d7:             return comparator.compare(token, ((LocalToken) o).token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public int hashCode()
1:07893d7:         {
1:07893d7:             final int prime = 31;
1:07893d7:             return prime + token.hashCode();
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public boolean equals(Object obj)
1:07893d7:         {
1:07893d7:             if (this == obj)
1:07893d7:                 return true;
1:07893d7:             if (!(obj instanceof LocalToken))
1:07893d7:                 return false;
1:07893d7:             LocalToken other = (LocalToken) obj;
1:07893d7:             return token.equals(other.token);
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public IPartitioner getPartitioner()
1:07893d7:         {
1:07893d7:             return LocalPartitioner.this;
1:07893d7:         }
1:07893d7: 
1:07893d7:         @Override
1:07893d7:         public long getHeapSize()
1:07893d7:         {
1:07893d7:             return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(token);
1:07893d7:         }
1:07893d7:     }
1:078c56c: }
============================================================================
author:Dikang Gu
-------------------------------------------------------------------------------
commit:e2a0d75
/////////////////////////////////////////////////////////////////////////
1:     public Token split(Token left, Token right, double ratioToLeft)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
author:T Jake Luciani
-------------------------------------------------------------------------------
commit:47d3b7e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1:     public LocalToken getRandomToken(Random random)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
author:Branimir Lambov
-------------------------------------------------------------------------------
commit:762db47
/////////////////////////////////////////////////////////////////////////
1:         return tokenFactory;
1:     private final Token.TokenFactory tokenFactory = new Token.TokenFactory()
1:     {
1:         public ByteBuffer toByteArray(Token token)
1:         {
1:             return ((LocalToken)token).token;
1:         }
1: 
1:         public Token fromByteArray(ByteBuffer bytes)
1:         {
1:             return new LocalToken(bytes);
1:         }
1: 
1:         public String toString(Token token)
1:         {
1:             return comparator.getString(((LocalToken)token).token);
1:         }
1: 
1:         public void validate(String token)
1:         {
1:             comparator.validate(comparator.fromString(token));
1:         }
1: 
1:         public Token fromString(String string)
1:         {
1:             return new LocalToken(comparator.fromString(string));
1:         }
1:     };
1: 
commit:69f77cb
/////////////////////////////////////////////////////////////////////////
1:     public AbstractType<?> partitionOrdering()
1:     {
1:         return comparator;
1:     }
1: 
commit:07893d7
/////////////////////////////////////////////////////////////////////////
1: public class LocalPartitioner implements IPartitioner
1:     private static final long EMPTY_SIZE = ObjectSizes.measure(new LocalPartitioner(null).new LocalToken(null));
1:     final AbstractType<?> comparator;   // package-private to avoid access workarounds in embedded LocalToken.
/////////////////////////////////////////////////////////////////////////
1:         return new LocalToken(ByteBufferUtil.EMPTY_BYTE_BUFFER);
1:         return new LocalToken(key);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public class LocalToken extends ComparableObjectToken<ByteBuffer>
1:     {
1:         static final long serialVersionUID = 8437543776403014875L;
1: 
1:         public LocalToken(ByteBuffer token)
1:         {
1:             super(token);
1:         }
1: 
1:         @Override
1:         public String toString()
1:         {
1:             return comparator.getString(token);
1:         }
1: 
1:         @Override
1:         public int compareTo(Token o)
1:         {
1:             assert getPartitioner() == o.getPartitioner();
1:             return comparator.compare(token, ((LocalToken) o).token);
1:         }
1: 
1:         @Override
1:         public int hashCode()
1:         {
1:             final int prime = 31;
1:             return prime + token.hashCode();
1:         }
1: 
1:         @Override
1:         public boolean equals(Object obj)
1:         {
1:             if (this == obj)
1:                 return true;
1:             if (!(obj instanceof LocalToken))
1:                 return false;
1:             LocalToken other = (LocalToken) obj;
1:             return token.equals(other.token);
1:         }
1: 
1:         @Override
1:         public IPartitioner getPartitioner()
1:         {
1:             return LocalPartitioner.this;
1:         }
1: 
1:         @Override
1:         public long getHeapSize()
1:         {
1:             return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(token);
1:         }
1:     }
commit:ad84e4d
/////////////////////////////////////////////////////////////////////////
0: public class LocalPartitioner extends AbstractPartitioner
/////////////////////////////////////////////////////////////////////////
0:     public long getHeapSizeOf(Token token)
0:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(((LocalToken) token).token);
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:0a08525
/////////////////////////////////////////////////////////////////////////
0:     public AbstractType<?> partitionOrdering()
1:     {
1:         return comparator;
1:     }
1: 
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:a22ce89
/////////////////////////////////////////////////////////////////////////
commit:4b54b8a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ObjectSizes;
0:     private static final long EMPTY_SIZE = ObjectSizes.measure(new LocalToken(null, null));
1: 
/////////////////////////////////////////////////////////////////////////
0:     public long getHeapSizeOf(LocalToken token)
1:     {
0:         return EMPTY_SIZE + ObjectSizes.sizeOnHeapOf(token.token);
1:     }
1: 
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
commit:5613f8f
commit:7e4ef1c
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey convertFromDiskFormat(ByteBuffer key)
1:     public DecoratedKey decorateKey(ByteBuffer key)
0:         return new DecoratedKey(getToken(key), key);
commit:2bc0d4d
/////////////////////////////////////////////////////////////////////////
0:     private final AbstractType<?> comparator;
1:     public LocalPartitioner(AbstractType<?> comparator)
commit:43d330d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
/////////////////////////////////////////////////////////////////////////
0:         return new LocalToken(comparator, ByteBufferUtil.EMPTY_BYTE_BUFFER);
commit:ef25537
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.List;
1: import java.util.Map;
commit:e7a385a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
0: import org.apache.cassandra.utils.FBUtilities;
0: import org.apache.commons.lang.ArrayUtils;
/////////////////////////////////////////////////////////////////////////
0:     public DecoratedKey<LocalToken> convertFromDiskFormat(ByteBuffer key)
0:     public DecoratedKey<LocalToken> decorateKey(ByteBuffer key)
1:     public Token midpoint(Token left, Token right)
0:         return new LocalToken(comparator, FBUtilities.EMPTY_BYTE_BUFFER);
1:     public LocalToken getToken(ByteBuffer key)
commit:714eab0
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  * 
0:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing,
0:  * software distributed under the License is distributed on an
0:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
0:  * KIND, either express or implied.  See the License for the
0:  * specific language governing permissions and limitations
0:  * under the License.
1:  */
1: 
commit:b6b1053
/////////////////////////////////////////////////////////////////////////
commit:078c56c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.dht;
1: 
0: import org.apache.commons.lang.ArrayUtils;
1: 
1: import org.apache.cassandra.db.DecoratedKey;
1: import org.apache.cassandra.db.marshal.AbstractType;
1: 
0: public class LocalPartitioner implements IPartitioner<LocalToken>
1: {
0:     private final AbstractType comparator;
1: 
0:     public LocalPartitioner(AbstractType comparator)
1:     {
1:         this.comparator = comparator;
1:     }
1: 
0:     public DecoratedKey<LocalToken> convertFromDiskFormat(byte[] key)
1:     {
0:         return decorateKey(key);
1:     }
1: 
0:     public byte[] convertToDiskFormat(DecoratedKey<LocalToken> key)
1:     {
0:         return key.token.token;
1:     }
1: 
0:     public DecoratedKey<LocalToken> decorateKey(byte[] key)
1:     {
0:         return new DecoratedKey<LocalToken>(getToken(key), key);
1:     }
1: 
0:     public LocalToken midpoint(LocalToken left, LocalToken right)
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public LocalToken getMinimumToken()
1:     {
0:         return new LocalToken(comparator, ArrayUtils.EMPTY_BYTE_ARRAY);
1:     }
1: 
0:     public LocalToken getToken(byte[] key)
1:     {
0:         return new LocalToken(comparator, key);
1:     }
1: 
1:     public LocalToken getRandomToken()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public Token.TokenFactory getTokenFactory()
1:     {
1:         throw new UnsupportedOperationException();
1:     }
1: 
1:     public boolean preservesOrder()
1:     {
1:         return true;
1:     }
1: }
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:18d8f26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.CachedHashDecoratedKey;
/////////////////////////////////////////////////////////////////////////
1:         return new CachedHashDecoratedKey(getToken(key), key);
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:8541cca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.BufferDecoratedKey;
/////////////////////////////////////////////////////////////////////////
0:         return new BufferDecoratedKey(getToken(key), key);
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:a67f779
/////////////////////////////////////////////////////////////////////////
0: 
1:     public AbstractType<?> getTokenValidator()
0:     {
0:         return comparator;
0:     }
commit:07cdfd0
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:554223b
/////////////////////////////////////////////////////////////////////////
0: public class LocalPartitioner extends AbstractPartitioner<LocalToken>
author:Brandon Williams
-------------------------------------------------------------------------------
commit:2564647
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public Map<Token, Float> describeOwnership(List<Token> sortedTokens)
0:     {
1:         return Collections.singletonMap((Token)getMinimumToken(), new Float(1.0));
0:     }
============================================================================