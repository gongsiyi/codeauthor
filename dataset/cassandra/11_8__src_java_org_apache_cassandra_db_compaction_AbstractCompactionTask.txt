1:07cf56f: /*
1:129d80a:  * Licensed to the Apache Software Foundation (ASF) under one
1:129d80a:  * or more contributor license agreements.  See the NOTICE file
1:129d80a:  * distributed with this work for additional information
1:129d80a:  * regarding copyright ownership.  The ASF licenses this file
1:129d80a:  * to you under the Apache License, Version 2.0 (the
1:129d80a:  * "License"); you may not use this file except in compliance
1:129d80a:  * with the License.  You may obtain a copy of the License at
1:129d80a:  *
1:129d80a:  *     http://www.apache.org/licenses/LICENSE-2.0
1:129d80a:  *
1:129d80a:  * Unless required by applicable law or agreed to in writing, software
1:129d80a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:129d80a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:129d80a:  * See the License for the specific language governing permissions and
1:129d80a:  * limitations under the License.
1:129d80a:  */
1:129d80a: package org.apache.cassandra.db.compaction;
1:99ad7d6: 
1:686f516: import java.util.Set;
1:686f516: 
1:129d80a: import org.apache.cassandra.db.ColumnFamilyStore;
1:9ed2727: import org.apache.cassandra.db.Directories;
1:129d80a: import org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutorStatsCollector;
1:910170c: import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
1:8bd6299: import org.apache.cassandra.io.FSDiskFullWriteError;
1:0368e97: import org.apache.cassandra.io.sstable.format.SSTableReader;
1:910170c: import org.apache.cassandra.utils.WrappedRunnable;
1:e5a76bd: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:6b2ea26: 
1:910170c: public abstract class AbstractCompactionTask extends WrappedRunnable
1:f10148f: {
1:5a6e2b0:     protected final ColumnFamilyStore cfs;
1:e5a76bd:     protected LifecycleTransaction transaction;
1:6b2ea26:     protected boolean isUserDefined;
1:65059cf:     protected OperationType compactionType;
1:686f516: 
1:686f516:     /**
1:686f516:      * @param cfs
1:e5a76bd:      * @param transaction the modifying managing the status of the sstables we're replacing
1:686f516:      */
1:e5a76bd:     public AbstractCompactionTask(ColumnFamilyStore cfs, LifecycleTransaction transaction)
1:6b2ea26:     {
1:129d80a:         this.cfs = cfs;
1:e5a76bd:         this.transaction = transaction;
1:6b2ea26:         this.isUserDefined = false;
1:65059cf:         this.compactionType = OperationType.COMPACTION;
1:686f516:         // enforce contract that caller should mark sstables compacting
1:e5a76bd:         Set<SSTableReader> compacting = transaction.tracker.getCompacting();
1:e5a76bd:         for (SSTableReader sstable : transaction.originals())
1:686f516:             assert compacting.contains(sstable) : sstable.getFilename() + " is not correctly marked compacting";
1:f10148f:     }
1:f10148f: 
1:686f516:     /**
1:686f516:      * executes the task and unmarks sstables compacting
1:686f516:      */
1:686f516:     public int execute(CompactionExecutorStatsCollector collector)
1:686f516:     {
1:686f516:         try
1:686f516:         {
1:686f516:             return executeInternal(collector);
1:686f516:         }
1:8bd6299:         catch(FSDiskFullWriteError e)
1:8bd6299:         {
1:8bd6299:             RuntimeException cause = new RuntimeException("Converted from FSDiskFullWriteError: " + e.getMessage());
1:8bd6299:             cause.setStackTrace(e.getStackTrace());
1:8bd6299:             throw new RuntimeException("Throwing new Runtime to bypass exception handler when disk is full", cause);
1:8bd6299:         }
1:686f516:         finally
1:686f516:         {
1:e5a76bd:             transaction.close();
1:686f516:         }
1:686f516:     }
1:9ed2727:     public abstract CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables);
1:686f516: 
1:686f516:     protected abstract int executeInternal(CompactionExecutorStatsCollector collector);
6:129d80a: 
1:2a3076b:     public AbstractCompactionTask setUserDefined(boolean isUserDefined)
3:129d80a:     {
1:6b2ea26:         this.isUserDefined = isUserDefined;
1:6b2ea26:         return this;
1:6b2ea26:     }
1:129d80a: 
1:65059cf:     public AbstractCompactionTask setCompactionType(OperationType compactionType)
1:129d80a:     {
1:65059cf:         this.compactionType = compactionType;
1:65059cf:         return this;
3:129d80a:     }
1:129d80a: 
1:99ad7d6:     public String toString()
1:99ad7d6:     {
1:e5a76bd:         return "CompactionTask(" + transaction + ")";
1:99ad7d6:     }
1:129d80a: }
============================================================================
author:sankalp kohli
-------------------------------------------------------------------------------
commit:8bd6299
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.FSDiskFullWriteError;
/////////////////////////////////////////////////////////////////////////
1:         catch(FSDiskFullWriteError e)
1:         {
1:             RuntimeException cause = new RuntimeException("Converted from FSDiskFullWriteError: " + e.getMessage());
1:             cause.setStackTrace(e.getStackTrace());
1:             throw new RuntimeException("Throwing new Runtime to bypass exception handler when disk is full", cause);
1:         }
author:Blake Eggleston
-------------------------------------------------------------------------------
commit:9ed2727
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
1:     public abstract CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, Directories directories, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables);
author:Benedict Elliott Smith
-------------------------------------------------------------------------------
commit:e5a76bd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.lifecycle.LifecycleTransaction;
1:     protected LifecycleTransaction transaction;
1:      * @param transaction the modifying managing the status of the sstables we're replacing
1:     public AbstractCompactionTask(ColumnFamilyStore cfs, LifecycleTransaction transaction)
1:         this.transaction = transaction;
1:         Set<SSTableReader> compacting = transaction.tracker.getCompacting();
1:         for (SSTableReader sstable : transaction.originals())
/////////////////////////////////////////////////////////////////////////
1:             transaction.close();
0:     public abstract CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, LifecycleTransaction txn, Set<SSTableReader> nonExpiredSSTables);
/////////////////////////////////////////////////////////////////////////
1:         return "CompactionTask(" + transaction + ")";
author:Marcus Eriksson
-------------------------------------------------------------------------------
commit:910170c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.db.compaction.writers.CompactionAwareWriter;
1: import org.apache.cassandra.utils.WrappedRunnable;
1: public abstract class AbstractCompactionTask extends WrappedRunnable
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public abstract CompactionAwareWriter getCompactionAwareWriter(ColumnFamilyStore cfs, Set<SSTableReader> allSSTables, Set<SSTableReader> nonExpiredSSTables);
author:Jake Luciani
-------------------------------------------------------------------------------
commit:0368e97
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.io.sstable.format.SSTableReader;
author:belliottsmith
-------------------------------------------------------------------------------
commit:ee950b4
/////////////////////////////////////////////////////////////////////////
commit:4e95953
/////////////////////////////////////////////////////////////////////////
0:     protected Set<SSTableReader> sstables;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractCompactionTask(ColumnFamilyStore cfs, Set<SSTableReader> sstables)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:f10148f
/////////////////////////////////////////////////////////////////////////
0:     protected Directories.DataDirectory getWriteableLocation()
1:     {
0:         return cfs.directories.getCompactionLocation();
1:     }
1: 
commit:4902bdc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Directories;
0: import org.apache.cassandra.io.sstable.SSTableReader;
0:     protected Iterable<SSTableReader> sstables;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractCompactionTask(ColumnFamilyStore cfs, Iterable<SSTableReader> sstables)
commit:686f516
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
0: import com.google.common.annotations.VisibleForTesting;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param cfs
0:      * @param sstables must be marked compacting
1:      */
1: 
1:         // enforce contract that caller should mark sstables compacting
0:         Set<SSTableReader> compacting = cfs.getDataTracker().getCompacting();
0:         for (SSTableReader sstable : sstables)
1:             assert compacting.contains(sstable) : sstable.getFilename() + " is not correctly marked compacting";
1:     /**
1:      * executes the task and unmarks sstables compacting
1:      */
1:     public int execute(CompactionExecutorStatsCollector collector)
1:     {
1:         try
1:         {
1:             return executeInternal(collector);
1:         }
1:         finally
1:         {
0:             cfs.getDataTracker().unmarkCompacting(sstables);
1:         }
1:     }
1: 
1:     protected abstract int executeInternal(CompactionExecutorStatsCollector collector);
commit:e1fef72
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.io.util.DiskAwareRunnable;
0: public abstract class AbstractCompactionTask extends DiskAwareRunnable
commit:debb15e
/////////////////////////////////////////////////////////////////////////
0:     public abstract int execute(CompactionExecutorStatsCollector collector);
commit:15d690f
commit:99ad7d6
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString()
1:     {
0:         return "CompactionTask(" + sstables + ")";
1:     }
commit:6b2ea26
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUserDefined;
1:         this.isUserDefined = false;
/////////////////////////////////////////////////////////////////////////
0:         int min = isUserDefined ? 1 : cfs.getMinimumCompactionThreshold();
0:         int max = isUserDefined ? Integer.MAX_VALUE : cfs.getMaximumCompactionThreshold();
0:         return markSSTablesForCompaction(min, max);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public AbstractCompactionTask isUserDefined(boolean isUserDefined)
1:     {
1:         this.isUserDefined = isUserDefined;
1:         return this;
1:     }
commit:129d80a
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db.compaction;
1: 
0: import java.util.Collection;
0: import java.io.IOException;
1: 
0: import org.apache.cassandra.io.sstable.SSTableReader;
1: import org.apache.cassandra.db.ColumnFamilyStore;
1: import org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutorStatsCollector;
1: 
0: public abstract class AbstractCompactionTask
1: {
0:     protected ColumnFamilyStore cfs;
0:     protected Collection<SSTableReader> sstables;
1: 
0:     public AbstractCompactionTask(ColumnFamilyStore cfs, Collection<SSTableReader> sstables)
1:     {
1:         this.cfs = cfs;
0:         this.sstables = sstables;
1:     }
1: 
0:     public abstract int execute(CompactionExecutorStatsCollector collector) throws IOException;
1: 
0:     public ColumnFamilyStore getColumnFamilyStore()
1:     {
0:         return cfs;
1:     }
1: 
0:     public Collection<SSTableReader> getSSTables()
1:     {
0:         return sstables;
1:     }
1: }
author:Dave Brosius
-------------------------------------------------------------------------------
commit:56f35db
/////////////////////////////////////////////////////////////////////////
commit:7588f74
/////////////////////////////////////////////////////////////////////////
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:29915e8
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.db.Directories;
/////////////////////////////////////////////////////////////////////////
0:     protected Directories getDirectories()
0:     {
0:         return cfs.directories;
0:     }
0: 
author:Yuki Morishita
-------------------------------------------------------------------------------
commit:2a3076b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public AbstractCompactionTask setUserDefined(boolean isUserDefined)
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:65059cf
/////////////////////////////////////////////////////////////////////////
1:     protected OperationType compactionType;
1:         this.compactionType = OperationType.COMPACTION;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public AbstractCompactionTask setCompactionType(OperationType compactionType)
0:     {
1:         this.compactionType = compactionType;
1:         return this;
0:     }
commit:5a6e2b0
/////////////////////////////////////////////////////////////////////////
1:     protected final ColumnFamilyStore cfs;
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
commit:5c752cd
/////////////////////////////////////////////////////////////////////////
0:         {
0:             cancel();
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:     // Can be overriden for action that need to be performed if the task won't
0:     // execute (if sstable can't be marked successfully)
0:     protected void cancel() {}
commit:6067e5d
/////////////////////////////////////////////////////////////////////////
0:         {
0:             cancel();
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:     // Can be overriden for action that need to be performed if the task won't
0:     // execute (if sstable can't be marked successfully)
0:     protected void cancel() {}
commit:3398373
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Try to mark the sstable to compact as compacting.
0:      * It returns true if some sstables have been marked for compaction, false
0:      * otherwise.
0:      * This *must* be called before calling execute(). Moreover,
0:      * unmarkSSTables *must* always be called after execute() if this
0:      * method returns true.
0:      */
0:     public boolean markSSTablesForCompaction()
0:     {
0:         return markSSTablesForCompaction(cfs.getMinimumCompactionThreshold(), cfs.getMaximumCompactionThreshold());
0:     }
0: 
0:     public boolean markSSTablesForCompaction(int min, int max)
0:     {
0:         Set<SSTableReader> marked = cfs.getDataTracker().markCompacting(sstables, min, max);
0: 
0:         if (marked == null || marked.isEmpty())
0:             return false;
0: 
0:         this.sstables = marked;
0:         return true;
0:     }
0: 
0:     public void unmarkSSTables()
0:     {
0:         cfs.getDataTracker().unmarkCompacting(sstables);
0:     }
============================================================================