1:07cf56f: /*
1:82bd54d:  * Licensed to the Apache Software Foundation (ASF) under one
1:82bd54d:  * or more contributor license agreements.  See the NOTICE file
1:82bd54d:  * distributed with this work for additional information
1:82bd54d:  * regarding copyright ownership.  The ASF licenses this file
1:82bd54d:  * to you under the Apache License, Version 2.0 (the
1:82bd54d:  * "License"); you may not use this file except in compliance
1:82bd54d:  * with the License.  You may obtain a copy of the License at
1:07cf56f:  *
1:07cf56f:  *     http://www.apache.org/licenses/LICENSE-2.0
1:07cf56f:  *
1:82bd54d:  * Unless required by applicable law or agreed to in writing, software
1:82bd54d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82bd54d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82bd54d:  * See the License for the specific language governing permissions and
1:82bd54d:  * limitations under the License.
1:82bd54d:  */
1:82bd54d: package org.apache.cassandra.db;
1:ef25537: 
1:a06be23: import java.util.Collection;
1:a06be23: 
1:ef25537: import org.slf4j.Logger;
1:ef25537: import org.slf4j.LoggerFactory;
1:ef25537: 
1:52b6edc: import org.apache.cassandra.concurrent.Stage;
1:82bd54d: import org.apache.cassandra.concurrent.StageManager;
1:340df43: import org.apache.cassandra.exceptions.ConfigurationException;
1:82bd54d: import org.apache.cassandra.net.IVerbHandler;
1:5d46a01: import org.apache.cassandra.net.MessageIn;
1:7d6c876: import org.apache.cassandra.schema.SchemaKeyspace;
1:82bd54d: import org.apache.cassandra.utils.WrappedRunnable;
4:82bd54d: 
1:37b0793: /**
1:37b0793:  * Called when node receives updated schema state from the schema migration coordinator node.
1:37b0793:  * Such happens when user makes local schema migration on one of the nodes in the ring
1:37b0793:  * (which is going to act as coordinator) and that node sends (pushes) it's updated schema state
1:6bbb13b:  * (in form of mutations) to all the alive nodes in the cluster.
1:37b0793:  */
1:6bbb13b: public class DefinitionsUpdateVerbHandler implements IVerbHandler<Collection<Mutation>>
1:96e0ed4: {
1:5699721:     private static final Logger logger = LoggerFactory.getLogger(DefinitionsUpdateVerbHandler.class);
1:37b0793: 
1:6bbb13b:     public void doVerb(final MessageIn<Collection<Mutation>> message, int id)
1:96e0ed4:     {
1:4a849ef:         logger.trace("Received schema mutation push from {}", message.from);
1:82bd54d: 
1:52b6edc:         StageManager.getStage(Stage.MIGRATION).submit(new WrappedRunnable()
1:a06be23:         {
1:340df43:             public void runMayThrow() throws ConfigurationException
2:9f9ac5d:             {
1:5c2912d:                 SchemaKeyspace.mergeSchemaAndAnnounceVersion(message.payload);
1:a06be23:             }
1:37b0793:         });
1:37b0793:     }
2:96e0ed4: }
============================================================================
author:Aleksey Yeschenko
-------------------------------------------------------------------------------
commit:340df43
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.exceptions.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:             public void runMayThrow() throws ConfigurationException
commit:7d6c876
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.schema.SchemaKeyspace;
/////////////////////////////////////////////////////////////////////////
0:                 SchemaKeyspace.mergeSchema(message.payload);
commit:3e9d345
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.schema.LegacySchemaTables;
/////////////////////////////////////////////////////////////////////////
0:                 LegacySchemaTables.mergeSchema(message.payload);
commit:6bbb13b
/////////////////////////////////////////////////////////////////////////
1:  * (in form of mutations) to all the alive nodes in the cluster.
1: public class DefinitionsUpdateVerbHandler implements IVerbHandler<Collection<Mutation>>
1:     public void doVerb(final MessageIn<Collection<Mutation>> message, int id)
commit:0e96e58
/////////////////////////////////////////////////////////////////////////
0:                 DefsTables.mergeSchema(message.payload);
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:5c2912d
/////////////////////////////////////////////////////////////////////////
1:                 SchemaKeyspace.mergeSchemaAndAnnounceVersion(message.payload);
author:blerer
-------------------------------------------------------------------------------
commit:aa60cde
author:Paulo Motta
-------------------------------------------------------------------------------
commit:4a849ef
/////////////////////////////////////////////////////////////////////////
1:         logger.trace("Received schema mutation push from {}", message.from);
author:Dave Brosius
-------------------------------------------------------------------------------
commit:cd6aa2d
/////////////////////////////////////////////////////////////////////////
0:         logger.debug("Received schema mutation push from {}", message.from);
commit:997ab95
/////////////////////////////////////////////////////////////////////////
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:7f2c3a8
/////////////////////////////////////////////////////////////////////////
commit:1936648
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(final MessageIn<Collection<RowMutation>> message, int id)
commit:a06be23
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.net.MessagingService;
/////////////////////////////////////////////////////////////////////////
0: public class DefinitionsUpdateVerbHandler implements IVerbHandler<Collection<RowMutation>>
0:     public void doVerb(final MessageIn<Collection<RowMutation>> message, String id)
0:         logger.debug("Received schema mutation push from " + message.from);
0:                 if (message.version < MessagingService.VERSION_11)
1:                 {
0:                     logger.error("Can't accept schema migrations from Cassandra versions previous to 1.1, please upgrade first");
0:                     return;
1:                 }
0:                 DefsTable.mergeSchema(message.payload);
commit:5d46a01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.net.MessageIn;
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(final MessageIn message, String id)
commit:5699721
/////////////////////////////////////////////////////////////////////////
0: public class DefinitionsUpdateVerbHandler implements IVerbHandler
1:     private static final Logger logger = LoggerFactory.getLogger(DefinitionsUpdateVerbHandler.class);
commit:5e75a7f
/////////////////////////////////////////////////////////////////////////
commit:c5ee059
/////////////////////////////////////////////////////////////////////////
0:     public void doVerb(final Message message, String id)
commit:ef25537
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOError;
0: import java.io.IOException;
0: import java.util.Collection;
0: import java.util.UUID;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
/////////////////////////////////////////////////////////////////////////
commit:9b5c44c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 final UUID version = UUIDGen.getUUID(col.name());
commit:52b6edc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.concurrent.Stage;
/////////////////////////////////////////////////////////////////////////
1:                     StageManager.getStage(Stage.MIGRATION).submit(new WrappedRunnable()
commit:dcafab8
/////////////////////////////////////////////////////////////////////////
0:                                     // Trying to apply the same migration twice. This happens as a result of gossip.
0:                                     logger.debug("Migration not applied " + ex.getMessage());
author:Pavel Yaskevich
-------------------------------------------------------------------------------
commit:bd33330
commit:37b0793
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Called when node receives updated schema state from the schema migration coordinator node.
1:  * Such happens when user makes local schema migration on one of the nodes in the ring
1:  * (which is going to act as coordinator) and that node sends (pushes) it's updated schema state
0:  * (in form of row mutations) to all the alive nodes in the cluster.
1:  */
0:         logger.debug("Received schema mutation push from " + message.getFrom());
1: 
0:         StageManager.getStage(Stage.MIGRATION).submit(new WrappedRunnable()
0:             public void runMayThrow() throws Exception
0:                 DefsTable.mergeRemoteSchema(message.getMessageBody(), message.getVersion());
1:         });
1: }
commit:7b532bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.Schema;
/////////////////////////////////////////////////////////////////////////
0:                 if (version.timestamp() > Schema.instance.getVersion().timestamp())
/////////////////////////////////////////////////////////////////////////
0:                             if (Schema.instance.getVersion().timestamp() == version.timestamp())
0:                             else if (Schema.instance.getVersion().timestamp() > version.timestamp())
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:07cf56f
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
author:Gary Dusbabek
-------------------------------------------------------------------------------
commit:1ecdd7f
/////////////////////////////////////////////////////////////////////////
0:                     final Migration m = Migration.deserialize(col.value(), message.getVersion());
commit:66d32c8
/////////////////////////////////////////////////////////////////////////
commit:96e0ed4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0:                                 try
1:                                 {
0:                                     m.apply();
1:                                 }
0:                                 catch (ConfigurationException ex)
1:                                 {
0:                                     logger.info("Migration not applied " + ex.getMessage());
1:                                 }
commit:91c3ecc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                                 m.apply();
commit:9f9ac5d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.cassandra.config.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
0:                                 try
1:                                 {
0:                                     m.apply();
0:                                 }
0:                                 catch (ConfigurationException ex)
1:                                 {
0:                                     logger.info("Migration not applied " + ex.getMessage());
0:                                 }
commit:849bb95
/////////////////////////////////////////////////////////////////////////
0:                     final Migration m = Migration.deserialize(col.value());
commit:dd5cebc
/////////////////////////////////////////////////////////////////////////
0:                             if (DatabaseDescriptor.getDefsVersion().timestamp() == version.timestamp())
0:                                 logger.debug("Not appling (equal) " + version.toString());
0:                             else if (DatabaseDescriptor.getDefsVersion().timestamp() > version.timestamp())
0:                                 logger.debug("Not applying (before)" + version.toString());
commit:82bd54d
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
0:  * <p/>
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.cassandra.db;
1: 
1: import org.apache.cassandra.concurrent.StageManager;
0: import org.apache.cassandra.config.DatabaseDescriptor;
0: import org.apache.cassandra.db.migration.Migration;
1: import org.apache.cassandra.net.IVerbHandler;
0: import org.apache.cassandra.net.Message;
0: import org.apache.cassandra.service.MigrationManager;
0: import org.apache.cassandra.utils.UUIDGen;
1: import org.apache.cassandra.utils.WrappedRunnable;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.ByteArrayInputStream;
0: import java.io.IOError;
0: import java.io.IOException;
0: import java.util.Collection;
0: import java.util.UUID;
1: 
0: public class DefinitionsUpdateResponseVerbHandler implements IVerbHandler
0: {
0:     private static final Logger logger = LoggerFactory.getLogger(DefinitionsUpdateResponseVerbHandler.class);
1: 
0:     /** someone sent me their data definitions */
0:     public void doVerb(final Message message)
0:     {
0:         try
0:         {
0:             // these are the serialized row mutations that I must apply.
0:             // check versions at every step along the way to make sure migrations are not applied out of order.
0:             Collection<Column> cols = MigrationManager.makeColumns(message);
0:             for (Column col : cols)
0:             {
0:                 final UUID version = UUIDGen.makeType1UUID(col.name());
0:                 if (version.timestamp() > DatabaseDescriptor.getDefsVersion().timestamp())
0:                 {
0:                     final Migration m = Migration.deserialize(new ByteArrayInputStream(col.value()));
0:                     assert m.getVersion().equals(version);
0:                     StageManager.getStage(StageManager.MIGRATION_STAGE).submit(new WrappedRunnable()
0:                     {
0:                         @Override
0:                         protected void runMayThrow() throws Exception
0:                         {
0:                             // check to make sure the current version is before this one.
0:                             if (DatabaseDescriptor.getDefsVersion().timestamp() >= version.timestamp())
0:                                 logger.debug("Not applying " + version.toString());
0:                             else
0:                             {
0:                                 logger.debug("Applying {} from {}", m.getClass().getSimpleName(), message.getFrom());
0:                                 m.apply();
0:                                 m.announce();
0:                             }
0:                         }
0:                     });
0:                 }
0:             }
0:         }
0:         catch (IOException ex)
0:         {
0:             throw new IOError(ex);
0:         }
0:     }
0: }
author:Brandon Williams
-------------------------------------------------------------------------------
commit:ecbd71f
/////////////////////////////////////////////////////////////////////////
0:                                     // update gossip, but don't contact nodes directly
0:                                     m.passiveAnnounce();
============================================================================