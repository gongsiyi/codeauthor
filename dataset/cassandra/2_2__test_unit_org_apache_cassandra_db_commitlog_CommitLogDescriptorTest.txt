1:6c445d6: /*
1:6c445d6:  * Licensed to the Apache Software Foundation (ASF) under one
1:6c445d6:  * or more contributor license agreements.  See the NOTICE file
1:6c445d6:  * distributed with this work for additional information
1:6c445d6:  * regarding copyright ownership.  The ASF licenses this file
1:6c445d6:  * to you under the Apache License, Version 2.0 (the
1:6c445d6:  * "License"); you may not use this file except in compliance
1:6c445d6:  * with the License.  You may obtain a copy of the License at
1:6c445d6:  *
1:6c445d6:  *     http://www.apache.org/licenses/LICENSE-2.0
1:6c445d6:  *
1:6c445d6:  * Unless required by applicable law or agreed to in writing, software
1:6c445d6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c445d6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c445d6:  * See the License for the specific language governing permissions and
1:6c445d6:  * limitations under the License.
1:6c445d6:  */
11:7374e9b: 
1:6c445d6: package org.apache.cassandra.db.commitlog;
1:6c445d6: 
1:6c445d6: import java.io.IOException;
1:6c445d6: import java.nio.ByteBuffer;
1:7374e9b: import java.util.Collections;
1:6c445d6: import java.util.HashMap;
1:6c445d6: import java.util.Map;
1:6c445d6: 
1:6c445d6: import com.google.common.collect.ImmutableMap;
1:7374e9b: import org.junit.Assert;
1:7374e9b: import org.junit.Before;
1:6c445d6: import org.junit.Test;
1:6c445d6: 
1:6c445d6: import org.apache.cassandra.config.ParameterizedClass;
1:7374e9b: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
1:6c445d6: import org.apache.cassandra.exceptions.ConfigurationException;
1:7374e9b: import org.apache.cassandra.io.compress.LZ4Compressor;
1:6c445d6: import org.apache.cassandra.io.util.FileDataInput;
1:7374e9b: import org.apache.cassandra.io.util.FileSegmentInputStream;
1:6c445d6: import org.apache.cassandra.net.MessagingService;
1:7374e9b: import org.apache.cassandra.security.EncryptionContext;
1:7374e9b: import org.apache.cassandra.security.EncryptionContextGenerator;
1:6c445d6: 
1:6c445d6: public class CommitLogDescriptorTest
1:6c445d6: {
1:7374e9b:     private static final byte[] iv = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
1:6c445d6: 
1:7374e9b:     ParameterizedClass compression;
1:7374e9b:     TransparentDataEncryptionOptions enabledTdeOptions;
1:6c445d6: 
1:7374e9b:     // Context with enabledTdeOptions enabled
1:7374e9b:     EncryptionContext enabledEncryption;
1:7374e9b: 
1:7374e9b:     // Context with enabledTdeOptions disabled, with the assumption that enabledTdeOptions was never previously enabled
1:7374e9b:     EncryptionContext neverEnabledEncryption;
1:7374e9b: 
1:7374e9b:     // Context with enabledTdeOptions disabled, with the assumption that enabledTdeOptions was previously enabled, but now disabled
1:7374e9b:     // due to operator changing the yaml.
1:7374e9b:     EncryptionContext previouslyEnabledEncryption;
1:7374e9b: 
1:7374e9b:     @Before
1:7374e9b:     public void setup()
8:7374e9b:     {
1:7374e9b:         Map<String,String> params = new HashMap<>();
1:7374e9b:         compression = new ParameterizedClass(LZ4Compressor.class.getName(), params);
1:7374e9b: 
1:7374e9b:         enabledTdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:7374e9b:         enabledEncryption = new EncryptionContext(enabledTdeOptions, iv, false);
1:7374e9b:         
1:7374e9b:         neverEnabledEncryption = EncryptionContextGenerator.createDisabledContext();
1:7374e9b:         TransparentDataEncryptionOptions disaabledTdeOptions = new TransparentDataEncryptionOptions(false, enabledTdeOptions.cipher, enabledTdeOptions.key_alias, enabledTdeOptions.key_provider);
1:7374e9b:         previouslyEnabledEncryption = new EncryptionContext(disaabledTdeOptions);
8:7374e9b:     }
1:7374e9b: 
1:6c445d6:     @Test
1:6c445d6:     public void testVersions()
1:6c445d6:     {
1:7374e9b:         Assert.assertTrue(CommitLogDescriptor.isValid("CommitLog-1340512736956320000.log"));
1:7374e9b:         Assert.assertTrue(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000.log"));
1:7374e9b:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog--1340512736956320000.log"));
1:7374e9b:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog--2-1340512736956320000.log"));
1:7374e9b:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000-123.log"));
1:6c445d6: 
1:7374e9b:         Assert.assertEquals(1340512736956320000L, CommitLogDescriptor.fromFileName("CommitLog-2-1340512736956320000.log").id);
1:6c445d6: 
1:7374e9b:         Assert.assertEquals(MessagingService.current_version, new CommitLogDescriptor(1340512736956320000L, null, neverEnabledEncryption).getMessagingVersion());
1:6c445d6:         String newCLName = "CommitLog-" + CommitLogDescriptor.current_version + "-1340512736956320000.log";
1:7374e9b:         Assert.assertEquals(MessagingService.current_version, CommitLogDescriptor.fromFileName(newCLName).getMessagingVersion());
1:6c445d6:     }
1:6c445d6: 
1:7374e9b:     // migrated from CommitLogTest
1:6c445d6:     private void testDescriptorPersistence(CommitLogDescriptor desc) throws IOException
1:6c445d6:     {
1:6c445d6:         ByteBuffer buf = ByteBuffer.allocate(1024);
1:6c445d6:         CommitLogDescriptor.writeHeader(buf, desc);
1:6c445d6:         long length = buf.position();
1:6c445d6:         // Put some extra data in the stream.
1:6c445d6:         buf.putDouble(0.1);
1:6c445d6:         buf.flip();
1:7374e9b:         FileDataInput input = new FileSegmentInputStream(buf, "input", 0);
1:7374e9b:         CommitLogDescriptor read = CommitLogDescriptor.readHeader(input, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals("Descriptor length", length, input.getFilePointer());
1:7374e9b:         Assert.assertEquals("Descriptors", desc, read);
1:6c445d6:     }
1:6c445d6: 
1:7374e9b:     // migrated from CommitLogTest
1:6c445d6:     @Test
1:6c445d6:     public void testDescriptorPersistence() throws IOException
1:6c445d6:     {
1:7374e9b:         testDescriptorPersistence(new CommitLogDescriptor(11, null, neverEnabledEncryption));
1:7374e9b:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_21, 13, null, neverEnabledEncryption));
1:7374e9b:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 15, null, neverEnabledEncryption));
1:7374e9b:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 17, new ParameterizedClass("LZ4Compressor", null), neverEnabledEncryption));
1:6c445d6:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 19,
1:7374e9b:                                                           new ParameterizedClass("StubbyCompressor", ImmutableMap.of("parameter1", "value1", "flag2", "55", "argument3", "null")
1:7374e9b:                                                           ), neverEnabledEncryption));
1:6c445d6:     }
1:6c445d6: 
1:7374e9b:     // migrated from CommitLogTest
1:6c445d6:     @Test
1:6c445d6:     public void testDescriptorInvalidParametersSize() throws IOException
1:6c445d6:     {
1:6c445d6:         Map<String, String> params = new HashMap<>();
1:7374e9b:         for (int i=0; i<65535; ++i)
1:6c445d6:             params.put("key"+i, Integer.toString(i, 16));
1:6c445d6:         try {
1:6c445d6:             CommitLogDescriptor desc = new CommitLogDescriptor(CommitLogDescriptor.VERSION_22,
1:6c445d6:                                                                21,
1:7374e9b:                                                                new ParameterizedClass("LZ4Compressor", params),
1:7374e9b:                                                                neverEnabledEncryption);
1:7374e9b: 
1:6c445d6:             ByteBuffer buf = ByteBuffer.allocate(1024000);
1:6c445d6:             CommitLogDescriptor.writeHeader(buf, desc);
1:7374e9b:             Assert.fail("Parameter object too long should fail on writing descriptor.");
1:6c445d6:         } catch (ConfigurationException e)
1:6c445d6:         {
1:6c445d6:             // correct path
1:6c445d6:         }
1:6c445d6:     }
1:7374e9b: 
4:7374e9b:     @Test
1:7374e9b:     public void constructParametersString_NoCompressionOrEncryption()
1:6c445d6:     {
1:7374e9b:         String json = CommitLogDescriptor.constructParametersString(null, null, Collections.emptyMap());
1:7374e9b:         Assert.assertFalse(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:7374e9b:         Assert.assertFalse(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1:7374e9b: 
1:7374e9b:         json = CommitLogDescriptor.constructParametersString(null, neverEnabledEncryption, Collections.emptyMap());
1:7374e9b:         Assert.assertFalse(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:7374e9b:         Assert.assertFalse(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1:6c445d6:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void constructParametersString_WithCompressionAndEncryption()
1:7374e9b:     {
1:7374e9b:         String json = CommitLogDescriptor.constructParametersString(compression, enabledEncryption, Collections.emptyMap());
1:7374e9b:         Assert.assertTrue(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:7374e9b:         Assert.assertTrue(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1:6c445d6:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void writeAndReadHeader_NoCompressionOrEncryption() throws IOException
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:7374e9b:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:7374e9b:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:7374e9b:         buffer.flip();
1:7374e9b:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:7374e9b:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, neverEnabledEncryption);
1:7374e9b:         Assert.assertNotNull(result);
1:7374e9b:         Assert.assertNull(result.compression);
1:7374e9b:         Assert.assertFalse(result.getEncryptionContext().isEnabled());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void writeAndReadHeader_OnlyCompression() throws IOException
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:7374e9b:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:7374e9b:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:7374e9b:         buffer.flip();
1:7374e9b:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:7374e9b:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, neverEnabledEncryption);
1:7374e9b:         Assert.assertNotNull(result);
1:7374e9b:         Assert.assertEquals(compression, result.compression);
1:7374e9b:         Assert.assertFalse(result.getEncryptionContext().isEnabled());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void writeAndReadHeader_WithEncryptionHeader_EncryptionEnabledInYaml() throws IOException
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:7374e9b:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:7374e9b:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:7374e9b:         buffer.flip();
1:7374e9b:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:7374e9b:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, enabledEncryption);
1:7374e9b:         Assert.assertNotNull(result);
1:7374e9b:         Assert.assertNull(result.compression);
1:7374e9b:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:7374e9b:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * Check that even though enabledTdeOptions is disabled in the yaml, we can still read the commit log header as encrypted.
2:7374e9b:      */
1:7374e9b:     @Test
1:7374e9b:     public void writeAndReadHeader_WithEncryptionHeader_EncryptionDisabledInYaml() throws IOException
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:7374e9b:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:7374e9b:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:7374e9b:         buffer.flip();
1:7374e9b:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:7374e9b:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertNotNull(result);
1:7374e9b:         Assert.assertNull(result.compression);
1:7374e9b:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:7374e9b:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * Shouldn't happen in the real world (should only have either compression or enabledTdeOptions), but the header
1:7374e9b:      * functionality should be correct
1:7374e9b:      */
1:7374e9b:     @Test
1:7374e9b:     public void writeAndReadHeader_WithCompressionAndEncryption() throws IOException
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:7374e9b:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:7374e9b:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:7374e9b:         buffer.flip();
1:7374e9b:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:7374e9b:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, enabledEncryption);
1:7374e9b:         Assert.assertNotNull(result);
1:7374e9b:         Assert.assertEquals(compression, result.compression);
1:7374e9b:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:7374e9b:         Assert.assertEquals(enabledEncryption, result.getEncryptionContext());
1:7374e9b:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void equals_NoCompressionOrEncryption()
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, null);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b: 
1:7374e9b:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, null);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void equals_OnlyCompression()
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, null);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b: 
1:7374e9b:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, null);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     @Test
1:7374e9b:     public void equals_OnlyEncryption()
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b: 
1:7374e9b:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b: 
1:7374e9b:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b:     }
1:7374e9b: 
1:7374e9b:     /**
1:7374e9b:      * Shouldn't have both enabled in real life, but ensure they are correct, nonetheless
1:7374e9b:      */
1:7374e9b:     @Test
1:7374e9b:     public void equals_BothCompressionAndEncryption()
1:7374e9b:     {
1:7374e9b:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc1);
1:7374e9b: 
1:7374e9b:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:7374e9b:         Assert.assertEquals(desc1, desc2);
1:7374e9b:     }
1:7374e9b: }
============================================================================
author:Benjamin Lerer
-------------------------------------------------------------------------------
commit:dc6ffc2
commit:1e82695
commit:6c445d6
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.db.commitlog;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import com.google.common.collect.ImmutableMap;
1: 
1: import org.junit.Test;
1: 
1: import org.apache.cassandra.config.ParameterizedClass;
1: import org.apache.cassandra.exceptions.ConfigurationException;
0: import org.apache.cassandra.io.util.ByteBufferDataInput;
1: import org.apache.cassandra.io.util.FileDataInput;
1: import org.apache.cassandra.net.MessagingService;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
1: public class CommitLogDescriptorTest
1: {
1:     @Test
1:     public void testVersions()
1:     {
0:         assertTrue(CommitLogDescriptor.isValid("CommitLog-1340512736956320000.log"));
0:         assertTrue(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000.log"));
0:         assertFalse(CommitLogDescriptor.isValid("CommitLog--1340512736956320000.log"));
0:         assertFalse(CommitLogDescriptor.isValid("CommitLog--2-1340512736956320000.log"));
0:         assertFalse(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000-123.log"));
1: 
0:         assertEquals(1340512736956320000L, CommitLogDescriptor.fromFileName("CommitLog-2-1340512736956320000.log").id);
1: 
0:         assertEquals(MessagingService.current_version, new CommitLogDescriptor(1340512736956320000L, null).getMessagingVersion());
1:         String newCLName = "CommitLog-" + CommitLogDescriptor.current_version + "-1340512736956320000.log";
0:         assertEquals(MessagingService.current_version, CommitLogDescriptor.fromFileName(newCLName).getMessagingVersion());
1:     }
1: 
1:     private void testDescriptorPersistence(CommitLogDescriptor desc) throws IOException
1:     {
1:         ByteBuffer buf = ByteBuffer.allocate(1024);
1:         CommitLogDescriptor.writeHeader(buf, desc);
1:         long length = buf.position();
1:         // Put some extra data in the stream.
1:         buf.putDouble(0.1);
1:         buf.flip();
0:         try (FileDataInput input = new ByteBufferDataInput(buf, "input", 0, 0))
1:         {
0:             CommitLogDescriptor read = CommitLogDescriptor.readHeader(input);
0:             assertEquals("Descriptor length", length, input.getFilePointer());
0:             assertEquals("Descriptors", desc, read);
1:         }
1:     }
1: 
1:     @Test
1:     public void testDescriptorPersistence() throws IOException
1:     {
0:         testDescriptorPersistence(new CommitLogDescriptor(11, null));
0:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_21, 13, null));
0:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 15, null));
0:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 17, new ParameterizedClass("LZ4Compressor", null)));
1:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 19,
0:                 new ParameterizedClass("StubbyCompressor", ImmutableMap.of("parameter1", "value1", "flag2", "55", "argument3", "null"))));
1:     }
1: 
1:     @Test
1:     public void testDescriptorInvalidParametersSize() throws IOException
1:     {
1:         Map<String, String> params = new HashMap<>();
0:         for (int i=0; i<6000; ++i)
1:             params.put("key"+i, Integer.toString(i, 16));
1:         try {
1:             CommitLogDescriptor desc = new CommitLogDescriptor(CommitLogDescriptor.VERSION_22,
1:                                                                21,
0:                                                                new ParameterizedClass("LZ4Compressor", params));
1:             ByteBuffer buf = ByteBuffer.allocate(1024000);
1:             CommitLogDescriptor.writeHeader(buf, desc);
0:             fail("Parameter object too long should fail on writing descriptor.");
1:         } catch (ConfigurationException e)
1:         {
1:             // correct path
1:         }
1:     }
1: }
author:Jason Brown
-------------------------------------------------------------------------------
commit:7374e9b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Licensed to the Apache Software Foundation (ASF) under one
0:  * or more contributor license agreements.  See the NOTICE file
0:  * distributed with this work for additional information
0:  * regarding copyright ownership.  The ASF licenses this file
0:  * to you under the Apache License, Version 2.0 (the
0:  * "License"); you may not use this file except in compliance
0:  * with the License.  You may obtain a copy of the License at
0:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
0: package org.apache.cassandra.db.commitlog;
1: 
0: import java.io.IOException;
0: import java.nio.ByteBuffer;
1: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
0: import com.google.common.collect.ImmutableMap;
1: import org.junit.Assert;
1: import org.junit.Before;
0: import org.junit.Test;
1: 
0: import org.apache.cassandra.config.ParameterizedClass;
1: import org.apache.cassandra.config.TransparentDataEncryptionOptions;
0: import org.apache.cassandra.exceptions.ConfigurationException;
1: import org.apache.cassandra.io.compress.LZ4Compressor;
0: import org.apache.cassandra.io.util.FileDataInput;
1: import org.apache.cassandra.io.util.FileSegmentInputStream;
0: import org.apache.cassandra.net.MessagingService;
1: import org.apache.cassandra.security.EncryptionContext;
1: import org.apache.cassandra.security.EncryptionContextGenerator;
1: 
0: public class CommitLogDescriptorTest
1: {
1:     private static final byte[] iv = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
1: 
1:     ParameterizedClass compression;
1:     TransparentDataEncryptionOptions enabledTdeOptions;
1: 
1:     // Context with enabledTdeOptions enabled
1:     EncryptionContext enabledEncryption;
1: 
1:     // Context with enabledTdeOptions disabled, with the assumption that enabledTdeOptions was never previously enabled
1:     EncryptionContext neverEnabledEncryption;
1: 
1:     // Context with enabledTdeOptions disabled, with the assumption that enabledTdeOptions was previously enabled, but now disabled
1:     // due to operator changing the yaml.
1:     EncryptionContext previouslyEnabledEncryption;
1: 
1:     @Before
1:     public void setup()
1:     {
1:         Map<String,String> params = new HashMap<>();
1:         compression = new ParameterizedClass(LZ4Compressor.class.getName(), params);
1: 
1:         enabledTdeOptions = EncryptionContextGenerator.createEncryptionOptions();
1:         enabledEncryption = new EncryptionContext(enabledTdeOptions, iv, false);
1:         
1:         neverEnabledEncryption = EncryptionContextGenerator.createDisabledContext();
1:         TransparentDataEncryptionOptions disaabledTdeOptions = new TransparentDataEncryptionOptions(false, enabledTdeOptions.cipher, enabledTdeOptions.key_alias, enabledTdeOptions.key_provider);
1:         previouslyEnabledEncryption = new EncryptionContext(disaabledTdeOptions);
1:     }
1: 
1:     @Test
0:     public void testVersions()
1:     {
1:         Assert.assertTrue(CommitLogDescriptor.isValid("CommitLog-1340512736956320000.log"));
1:         Assert.assertTrue(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000.log"));
1:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog--1340512736956320000.log"));
1:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog--2-1340512736956320000.log"));
1:         Assert.assertFalse(CommitLogDescriptor.isValid("CommitLog-2-1340512736956320000-123.log"));
1: 
1:         Assert.assertEquals(1340512736956320000L, CommitLogDescriptor.fromFileName("CommitLog-2-1340512736956320000.log").id);
1: 
1:         Assert.assertEquals(MessagingService.current_version, new CommitLogDescriptor(1340512736956320000L, null, neverEnabledEncryption).getMessagingVersion());
0:         String newCLName = "CommitLog-" + CommitLogDescriptor.current_version + "-1340512736956320000.log";
1:         Assert.assertEquals(MessagingService.current_version, CommitLogDescriptor.fromFileName(newCLName).getMessagingVersion());
1:     }
1: 
1:     // migrated from CommitLogTest
0:     private void testDescriptorPersistence(CommitLogDescriptor desc) throws IOException
1:     {
0:         ByteBuffer buf = ByteBuffer.allocate(1024);
0:         CommitLogDescriptor.writeHeader(buf, desc);
0:         long length = buf.position();
0:         // Put some extra data in the stream.
0:         buf.putDouble(0.1);
0:         buf.flip();
1:         FileDataInput input = new FileSegmentInputStream(buf, "input", 0);
1:         CommitLogDescriptor read = CommitLogDescriptor.readHeader(input, neverEnabledEncryption);
1:         Assert.assertEquals("Descriptor length", length, input.getFilePointer());
1:         Assert.assertEquals("Descriptors", desc, read);
1:     }
1: 
1:     // migrated from CommitLogTest
1:     @Test
0:     public void testDescriptorPersistence() throws IOException
1:     {
1:         testDescriptorPersistence(new CommitLogDescriptor(11, null, neverEnabledEncryption));
1:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_21, 13, null, neverEnabledEncryption));
1:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 15, null, neverEnabledEncryption));
1:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 17, new ParameterizedClass("LZ4Compressor", null), neverEnabledEncryption));
0:         testDescriptorPersistence(new CommitLogDescriptor(CommitLogDescriptor.VERSION_22, 19,
1:                                                           new ParameterizedClass("StubbyCompressor", ImmutableMap.of("parameter1", "value1", "flag2", "55", "argument3", "null")
1:                                                           ), neverEnabledEncryption));
1:     }
1: 
1:     // migrated from CommitLogTest
1:     @Test
0:     public void testDescriptorInvalidParametersSize() throws IOException
1:     {
0:         Map<String, String> params = new HashMap<>();
1:         for (int i=0; i<65535; ++i)
0:             params.put("key"+i, Integer.toString(i, 16));
0:         try {
0:             CommitLogDescriptor desc = new CommitLogDescriptor(CommitLogDescriptor.VERSION_22,
0:                                                                21,
1:                                                                new ParameterizedClass("LZ4Compressor", params),
1:                                                                neverEnabledEncryption);
0:             ByteBuffer buf = ByteBuffer.allocate(1024000);
0:             CommitLogDescriptor.writeHeader(buf, desc);
1:             Assert.fail("Parameter object too long should fail on writing descriptor.");
0:         } catch (ConfigurationException e)
1:         {
0:             // correct path
1:         }
1:     }
1: 
1:     @Test
1:     public void constructParametersString_NoCompressionOrEncryption()
1:     {
1:         String json = CommitLogDescriptor.constructParametersString(null, null, Collections.emptyMap());
1:         Assert.assertFalse(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:         Assert.assertFalse(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1: 
1:         json = CommitLogDescriptor.constructParametersString(null, neverEnabledEncryption, Collections.emptyMap());
1:         Assert.assertFalse(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:         Assert.assertFalse(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1:     }
1: 
1:     @Test
1:     public void constructParametersString_WithCompressionAndEncryption()
1:     {
1:         String json = CommitLogDescriptor.constructParametersString(compression, enabledEncryption, Collections.emptyMap());
1:         Assert.assertTrue(json.contains(CommitLogDescriptor.COMPRESSION_CLASS_KEY));
1:         Assert.assertTrue(json.contains(EncryptionContext.ENCRYPTION_CIPHER));
1:     }
1: 
1:     @Test
1:     public void writeAndReadHeader_NoCompressionOrEncryption() throws IOException
1:     {
1:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:         buffer.flip();
1:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, neverEnabledEncryption);
1:         Assert.assertNotNull(result);
1:         Assert.assertNull(result.compression);
1:         Assert.assertFalse(result.getEncryptionContext().isEnabled());
1:     }
1: 
1:     @Test
1:     public void writeAndReadHeader_OnlyCompression() throws IOException
1:     {
1:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:         buffer.flip();
1:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, neverEnabledEncryption);
1:         Assert.assertNotNull(result);
1:         Assert.assertEquals(compression, result.compression);
1:         Assert.assertFalse(result.getEncryptionContext().isEnabled());
1:     }
1: 
1:     @Test
1:     public void writeAndReadHeader_WithEncryptionHeader_EncryptionEnabledInYaml() throws IOException
1:     {
1:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:         buffer.flip();
1:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, enabledEncryption);
1:         Assert.assertNotNull(result);
1:         Assert.assertNull(result.compression);
1:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:     }
1: 
1:     /**
1:      * Check that even though enabledTdeOptions is disabled in the yaml, we can still read the commit log header as encrypted.
1:      */
1:     @Test
1:     public void writeAndReadHeader_WithEncryptionHeader_EncryptionDisabledInYaml() throws IOException
1:     {
1:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:         buffer.flip();
1:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, previouslyEnabledEncryption);
1:         Assert.assertNotNull(result);
1:         Assert.assertNull(result.compression);
1:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:     }
1: 
1:     /**
1:      * Shouldn't happen in the real world (should only have either compression or enabledTdeOptions), but the header
1:      * functionality should be correct
1:      */
1:     @Test
1:     public void writeAndReadHeader_WithCompressionAndEncryption() throws IOException
1:     {
1:         CommitLogDescriptor descriptor = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:         ByteBuffer buffer = ByteBuffer.allocate(16 * 1024);
1:         CommitLogDescriptor.writeHeader(buffer, descriptor);
1:         buffer.flip();
1:         FileSegmentInputStream dataInput = new FileSegmentInputStream(buffer, null, 0);
1:         CommitLogDescriptor result = CommitLogDescriptor.readHeader(dataInput, enabledEncryption);
1:         Assert.assertNotNull(result);
1:         Assert.assertEquals(compression, result.compression);
1:         Assert.assertTrue(result.getEncryptionContext().isEnabled());
1:         Assert.assertEquals(enabledEncryption, result.getEncryptionContext());
1:         Assert.assertArrayEquals(iv, result.getEncryptionContext().getIV());
1:     }
1: 
1:     @Test
1:     public void equals_NoCompressionOrEncryption()
1:     {
1:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, null);
1:         Assert.assertEquals(desc1, desc1);
1: 
1:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, null);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1:     }
1: 
1:     @Test
1:     public void equals_OnlyCompression()
1:     {
1:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, null);
1:         Assert.assertEquals(desc1, desc1);
1: 
1:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, null);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1:     }
1: 
1:     @Test
1:     public void equals_OnlyEncryption()
1:     {
1:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1: 
1:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, enabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, neverEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1: 
1:         desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1:         desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, null, previouslyEnabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1:     }
1: 
1:     /**
1:      * Shouldn't have both enabled in real life, but ensure they are correct, nonetheless
1:      */
1:     @Test
1:     public void equals_BothCompressionAndEncryption()
1:     {
1:         CommitLogDescriptor desc1 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:         Assert.assertEquals(desc1, desc1);
1: 
1:         CommitLogDescriptor desc2 = new CommitLogDescriptor(CommitLogDescriptor.current_version, 1, compression, enabledEncryption);
1:         Assert.assertEquals(desc1, desc2);
1:     }
1: 
1: }
============================================================================