1:7751588: /*
1:7751588:  * Licensed to the Apache Software Foundation (ASF) under one
1:7751588:  * or more contributor license agreements.  See the NOTICE file
1:7751588:  * distributed with this work for additional information
1:7751588:  * regarding copyright ownership.  The ASF licenses this file
1:7751588:  * to you under the Apache License, Version 2.0 (the
1:7751588:  * "License"); you may not use this file except in compliance
1:7751588:  * with the License.  You may obtain a copy of the License at
1:7751588:  *
1:7751588:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7751588:  *
1:7751588:  * Unless required by applicable law or agreed to in writing, software
1:7751588:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7751588:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7751588:  * See the License for the specific language governing permissions and
1:7751588:  * limitations under the License.
1:7751588:  */
1:7751588: package org.apache.cassandra.utils;
1:7751588: 
1:7751588: import org.slf4j.Logger;
1:7751588: import org.slf4j.LoggerFactory;
1:7751588: 
1:7751588: /**
1:7751588:  * Wrapper around time related functions that are either implemented by using the default JVM calls
1:7751588:  * or by using a custom implementation for testing purposes.
1:7751588:  *
1:7751588:  * See {@link #instance} for how to use a custom implementation.
1:7751588:  *
1:7751588:  * Please note that {@link java.time.Clock} wasn't used, as it would not be possible to provide an
1:7751588:  * implementation for {@link #nanoTime()} with the exact same properties of {@link System#nanoTime()}.
1:7751588:  */
1:7751588: public class Clock
1:7751588: {
1:7751588:     private static final Logger logger = LoggerFactory.getLogger(Clock.class);
1:7751588: 
1:7751588:     /**
1:7751588:      * Static singleton object that will be instanciated by default with a system clock
1:7751588:      * implementation. Set <code>cassandra.clock</code> system property to a FQCN to use a
1:7751588:      * different implementation instead.
1:7751588:      */
1:7751588:     public static Clock instance;
1:7751588: 
1:7751588:     static
1:7751588:     {
1:7751588:         String sclock = System.getProperty("cassandra.clock");
1:7751588:         if (sclock == null)
1:7751588:         {
1:7751588:             instance = new Clock();
1:7751588:         }
1:7751588:         else
1:7751588:         {
1:7751588:             try
1:7751588:             {
1:7751588:                 logger.debug("Using custom clock implementation: {}", sclock);
1:7751588:                 instance = (Clock) Class.forName(sclock).newInstance();
1:7751588:             }
1:7751588:             catch (Exception e)
1:7751588:             {
1:7751588:                 logger.error(e.getMessage(), e);
1:7751588:             }
1:7751588:         }
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * @see System#nanoTime()
1:7751588:      */
1:7751588:     public long nanoTime()
1:7751588:     {
1:7751588:         return System.nanoTime();
1:7751588:     }
1:7751588: 
1:7751588:     /**
1:7751588:      * @see System#currentTimeMillis()
1:7751588:      */
1:7751588:     public long currentTimeMillis()
1:7751588:     {
1:7751588:         return System.currentTimeMillis();
1:7751588:     }
1:7751588: 
1:7751588: }
============================================================================
author:Stefan Podkowinski
-------------------------------------------------------------------------------
commit:7751588
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.cassandra.utils;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Wrapper around time related functions that are either implemented by using the default JVM calls
1:  * or by using a custom implementation for testing purposes.
1:  *
1:  * See {@link #instance} for how to use a custom implementation.
1:  *
1:  * Please note that {@link java.time.Clock} wasn't used, as it would not be possible to provide an
1:  * implementation for {@link #nanoTime()} with the exact same properties of {@link System#nanoTime()}.
1:  */
1: public class Clock
1: {
1:     private static final Logger logger = LoggerFactory.getLogger(Clock.class);
1: 
1:     /**
1:      * Static singleton object that will be instanciated by default with a system clock
1:      * implementation. Set <code>cassandra.clock</code> system property to a FQCN to use a
1:      * different implementation instead.
1:      */
1:     public static Clock instance;
1: 
1:     static
1:     {
1:         String sclock = System.getProperty("cassandra.clock");
1:         if (sclock == null)
1:         {
1:             instance = new Clock();
1:         }
1:         else
1:         {
1:             try
1:             {
1:                 logger.debug("Using custom clock implementation: {}", sclock);
1:                 instance = (Clock) Class.forName(sclock).newInstance();
1:             }
1:             catch (Exception e)
1:             {
1:                 logger.error(e.getMessage(), e);
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @see System#nanoTime()
1:      */
1:     public long nanoTime()
1:     {
1:         return System.nanoTime();
1:     }
1: 
1:     /**
1:      * @see System#currentTimeMillis()
1:      */
1:     public long currentTimeMillis()
1:     {
1:         return System.currentTimeMillis();
1:     }
1: 
1: }
============================================================================