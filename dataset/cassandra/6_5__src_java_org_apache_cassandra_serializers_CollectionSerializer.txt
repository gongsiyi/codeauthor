1:e9c6742: /*
1:e9c6742:  * Licensed to the Apache Software Foundation (ASF) under one
1:e9c6742:  * or more contributor license agreements.  See the NOTICE file
1:e9c6742:  * distributed with this work for additional information
1:e9c6742:  * regarding copyright ownership.  The ASF licenses this file
1:e9c6742:  * to you under the Apache License, Version 2.0 (the
1:e9c6742:  * "License"); you may not use this file except in compliance
1:e9c6742:  * with the License.  You may obtain a copy of the License at
1:e9c6742:  *
1:e9c6742:  *     http://www.apache.org/licenses/LICENSE-2.0
1:e9c6742:  *
1:e9c6742:  * Unless required by applicable law or agreed to in writing, software
1:e9c6742:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9c6742:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9c6742:  * See the License for the specific language governing permissions and
1:e9c6742:  * limitations under the License.
1:e9c6742:  */
6:e9c6742: 
1:fc8b76f: package org.apache.cassandra.serializers;
1:e9c6742: 
1:e9c6742: import java.nio.ByteBuffer;
1:ee55f36: import java.util.Collection;
1:e9c6742: import java.util.List;
1:e9c6742: 
1:e0adc16: import org.apache.cassandra.transport.ProtocolVersion;
1:9872b74: import org.apache.cassandra.utils.ByteBufferUtil;
1:9872b74: 
1:fc8b76f: public abstract class CollectionSerializer<T> implements TypeSerializer<T>
5:9872b74: {
1:9872b74:     protected abstract List<ByteBuffer> serializeValues(T value);
1:9872b74:     protected abstract int getElementCount(T value);
1:9872b74: 
1:e0adc16:     public abstract T deserializeForNativeProtocol(ByteBuffer buffer, ProtocolVersion version);
1:e0adc16:     public abstract void validateForNativeProtocol(ByteBuffer buffer, ProtocolVersion version);
1:9872b74: 
1:9872b74:     public ByteBuffer serialize(T value)
1:9872b74:     {
1:9872b74:         List<ByteBuffer> values = serializeValues(value);
1:233761e:         // See deserialize() for why using the protocol v3 variant is the right thing to do.
1:e0adc16:         return pack(values, getElementCount(value), ProtocolVersion.V3);
6:9872b74:     }
1:9b539f9: 
1:9872b74:     public T deserialize(ByteBuffer bytes)
1:9b539f9:     {
1:233761e:         // The only cases we serialize/deserialize collections internally (i.e. not for the protocol sake),
1:233761e:         // is:
1:ee55f36:         //  1) when collections are frozen
1:233761e:         //  2) for internal calls.
1:233761e:         // In both case, using the protocol 3 version variant is the right thing to do.
1:e0adc16:         return deserializeForNativeProtocol(bytes, ProtocolVersion.V3);
1:9b539f9:     }
1:9872b74: 
1:590b3b2:     public void validate(ByteBuffer bytes) throws MarshalException
1:590b3b2:     {
1:ee55f36:         // Same thing as above
1:e0adc16:         validateForNativeProtocol(bytes, ProtocolVersion.V3);
1:590b3b2:     }
1:590b3b2: 
1:e0adc16:     public static ByteBuffer pack(Collection<ByteBuffer> buffers, int elements, ProtocolVersion version)
1:9872b74:     {
1:e9c6742:         int size = 0;
2:e9c6742:         for (ByteBuffer bb : buffers)
1:9872b74:             size += sizeOfValue(bb, version);
1:9872b74: 
1:9872b74:         ByteBuffer result = ByteBuffer.allocate(sizeOfCollectionSize(elements, version) + size);
1:9872b74:         writeCollectionSize(result, elements, version);
1:9872b74:         for (ByteBuffer bb : buffers)
1:9872b74:             writeValue(result, bb, version);
1:9872b74:         return (ByteBuffer)result.flip();
1:9872b74:     }
1:9872b74: 
1:e0adc16:     protected static void writeCollectionSize(ByteBuffer output, int elements, ProtocolVersion version)
1:9872b74:     {
1:9872b74:             output.putInt(elements);
1:9872b74:     }
1:9872b74: 
1:e0adc16:     public static int readCollectionSize(ByteBuffer input, ProtocolVersion version)
1:9872b74:     {
1:8439e74:         return input.getInt();
1:9872b74:     }
1:9872b74: 
1:e0adc16:     protected static int sizeOfCollectionSize(int elements, ProtocolVersion version)
1:9872b74:     {
1:8439e74:         return 4;
1:9872b74:     }
1:9872b74: 
1:e0adc16:     public static void writeValue(ByteBuffer output, ByteBuffer value, ProtocolVersion version)
1:9872b74:     {
1:8439e74:         if (value == null)
1:9872b74:         {
1:8439e74:             output.putInt(-1);
1:8439e74:             return;
1:8439e74:         }
1:9872b74: 
1:8439e74:         output.putInt(value.remaining());
1:8439e74:         output.put(value.duplicate());
1:9872b74:     }
1:9872b74: 
1:e0adc16:     public static ByteBuffer readValue(ByteBuffer input, ProtocolVersion version)
1:9872b74:     {
1:8439e74:         int size = input.getInt();
1:8439e74:         if (size < 0)
1:8439e74:             return null;
1:9872b74: 
1:8439e74:         return ByteBufferUtil.readBytes(input, size);
1:9872b74:     }
1:9872b74: 
1:e0adc16:     public static int sizeOfValue(ByteBuffer value, ProtocolVersion version)
1:9872b74:     {
1:8439e74:         return value == null ? 4 : 4 + value.remaining();
1:9872b74:     }
1:9872b74: }
============================================================================
author:Stefania Alborghetti
-------------------------------------------------------------------------------
commit:e0adc16
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.transport.ProtocolVersion;
/////////////////////////////////////////////////////////////////////////
1:     public abstract T deserializeForNativeProtocol(ByteBuffer buffer, ProtocolVersion version);
1:     public abstract void validateForNativeProtocol(ByteBuffer buffer, ProtocolVersion version);
1:         return pack(values, getElementCount(value), ProtocolVersion.V3);
/////////////////////////////////////////////////////////////////////////
1:         return deserializeForNativeProtocol(bytes, ProtocolVersion.V3);
1:         validateForNativeProtocol(bytes, ProtocolVersion.V3);
1:     public static ByteBuffer pack(Collection<ByteBuffer> buffers, int elements, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     protected static void writeCollectionSize(ByteBuffer output, int elements, ProtocolVersion version)
1:     public static int readCollectionSize(ByteBuffer input, ProtocolVersion version)
1:     protected static int sizeOfCollectionSize(int elements, ProtocolVersion version)
1:     public static void writeValue(ByteBuffer output, ByteBuffer value, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     public static ByteBuffer readValue(ByteBuffer input, ProtocolVersion version)
/////////////////////////////////////////////////////////////////////////
1:     public static int sizeOfValue(ByteBuffer value, ProtocolVersion version)
author:blerer
-------------------------------------------------------------------------------
commit:8439e74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return input.getInt();
1:         return 4;
1:         if (value == null)
1:             output.putInt(-1);
1:             return;
1:         }
1:         output.putInt(value.remaining());
1:         output.put(value.duplicate());
1:         int size = input.getInt();
1:         if (size < 0)
1:             return null;
1:         return ByteBufferUtil.readBytes(input, size);
1:         return value == null ? 4 : 4 + value.remaining();
author:Tyler Hobbs
-------------------------------------------------------------------------------
commit:c7b02d1
/////////////////////////////////////////////////////////////////////////
0:     public static void writeValue(ByteBuffer output, ByteBuffer value, int version)
/////////////////////////////////////////////////////////////////////////
0:     public static int sizeOfValue(ByteBuffer value, int version)
commit:ee55f36
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
0: import org.apache.cassandra.transport.Server;
/////////////////////////////////////////////////////////////////////////
0:         return pack(values, getElementCount(value), Server.VERSION_3);
1:         //  1) when collections are frozen
0:         return deserializeForNativeProtocol(bytes, Server.VERSION_3);
/////////////////////////////////////////////////////////////////////////
1:         // Same thing as above
0:         validateForNativeProtocol(bytes, Server.VERSION_3);
0:     public static ByteBuffer pack(Collection<ByteBuffer> buffers, int elements, int version)
/////////////////////////////////////////////////////////////////////////
0:         if (version >= Server.VERSION_3)
/////////////////////////////////////////////////////////////////////////
0:         return version >= Server.VERSION_3 ? input.getInt() : ByteBufferUtil.readShortLength(input);
0:         return version >= Server.VERSION_3 ? 4 : 2;
/////////////////////////////////////////////////////////////////////////
0:         if (version >= Server.VERSION_3)
/////////////////////////////////////////////////////////////////////////
0:         if (version >= Server.VERSION_3)
author:Dave Brosius
-------------------------------------------------------------------------------
commit:d314c07
/////////////////////////////////////////////////////////////////////////
0:         if (version >= Server.VERSION_3)
author:Jonathan Ellis
-------------------------------------------------------------------------------
commit:9b539f9
/////////////////////////////////////////////////////////////////////////
0:     public ByteBuffer reserializeToV3(ByteBuffer bytes)
1:     {
0:         return serialize(deserializeForNativeProtocol(bytes, 2));
1:     }
1: 
author:Sylvain Lebresne
-------------------------------------------------------------------------------
commit:590b3b2
/////////////////////////////////////////////////////////////////////////
0:     public abstract void validateForNativeProtocol(ByteBuffer buffer, int version);
/////////////////////////////////////////////////////////////////////////
1:     public void validate(ByteBuffer bytes) throws MarshalException
1:     {
0:         // Same thing than above
0:         validateForNativeProtocol(bytes, 3);
1:     }
1: 
commit:3b299c4
/////////////////////////////////////////////////////////////////////////
0:     public static int readCollectionSize(ByteBuffer input, int version)
/////////////////////////////////////////////////////////////////////////
0:     public static ByteBuffer readValue(ByteBuffer input, int version)
commit:233761e
/////////////////////////////////////////////////////////////////////////
1:         // See deserialize() for why using the protocol v3 variant is the right thing to do.
1:         // The only cases we serialize/deserialize collections internally (i.e. not for the protocol sake),
1:         // is:
0:         //  1) when collections are in UDT values
1:         //  2) for internal calls.
1:         // In both case, using the protocol 3 version variant is the right thing to do.
commit:9872b74
/////////////////////////////////////////////////////////////////////////
1: import org.apache.cassandra.utils.ByteBufferUtil;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected abstract List<ByteBuffer> serializeValues(T value);
1:     protected abstract int getElementCount(T value);
1: 
0:     public abstract T deserializeForNativeProtocol(ByteBuffer buffer, int version);
1: 
1:     public ByteBuffer serialize(T value)
1:         List<ByteBuffer> values = serializeValues(value);
0:         // The only case we serialize/deserialize collections internally (i.e. not for the protocol sake),
0:         // is when collections are in UDT values. There, we use the protocol 3 version since it's more flexible.
0:         return pack(values, getElementCount(value), 3);
1:     public T deserialize(ByteBuffer bytes)
1:     {
0:         // The only case we serialize/deserialize collections internally (i.e. not for the protocol sake),
0:         // is when collections are in UDT values. There, we use the protocol 3 version since it's more flexible.
0:         return deserializeForNativeProtocol(bytes, 3);
1:     }
1: 
0:     public static ByteBuffer pack(List<ByteBuffer> buffers, int elements, int version)
1:             size += sizeOfValue(bb, version);
1: 
1:         ByteBuffer result = ByteBuffer.allocate(sizeOfCollectionSize(elements, version) + size);
1:         writeCollectionSize(result, elements, version);
1:         for (ByteBuffer bb : buffers)
1:             writeValue(result, bb, version);
1:         return (ByteBuffer)result.flip();
1:     }
1: 
0:     protected static void writeCollectionSize(ByteBuffer output, int elements, int version)
1:     {
0:         if (version >= 3)
1:             output.putInt(elements);
0:         else
0:             output.putShort((short)elements);
1:     }
1: 
0:     protected static int readCollectionSize(ByteBuffer input, int version)
1:     {
0:         return version >= 3 ? input.getInt() : ByteBufferUtil.readShortLength(input);
1:     }
1: 
0:     protected static int sizeOfCollectionSize(int elements, int version)
1:     {
0:         return version >= 3 ? 4 : 2;
1:     }
1: 
0:     protected static void writeValue(ByteBuffer output, ByteBuffer value, int version)
1:     {
0:         if (version >= 3)
1:         {
0:             if (value == null)
1:             {
0:                 output.putInt(-1);
0:                 return;
1:             }
1: 
0:             output.putInt(value.remaining());
0:             output.put(value.duplicate());
1:         }
0:         else
1:         {
0:             assert value != null;
0:             output.putShort((short)value.remaining());
0:             output.put(value.duplicate());
1:         }
1:     }
1: 
0:     protected static ByteBuffer readValue(ByteBuffer input, int version)
1:     {
0:         if (version >= 3)
1:         {
0:             int size = input.getInt();
0:             if (size < 0)
0:                 return null;
1: 
0:             return ByteBufferUtil.readBytes(input, size);
1:         }
0:         else
1:         {
0:             return ByteBufferUtil.readBytesWithShortLength(input);
1:         }
1:     }
1: 
0:     protected static int sizeOfValue(ByteBuffer value, int version)
1:     {
0:         if (version >= 3)
1:         {
0:             return value == null ? 4 : 4 + value.remaining();
1:         }
0:         else
1:         {
0:             assert value != null;
0:             return 2 + value.remaining();
1:         }
commit:8a52f5a
/////////////////////////////////////////////////////////////////////////
commit:daff1fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fc8b76f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.cassandra.serializers;
1: public abstract class CollectionSerializer<T> implements TypeSerializer<T>
commit:e9c6742
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.cassandra.type;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.List;
1: 
0: public abstract class CollectionSerializer<T> extends AbstractSerializer<T>
0: {
0:     @Override
0:     public void validate(ByteBuffer bytes) throws MarshalException
0:     {
0:         // The collection is not currently being properly validated.
0:     }
1: 
0:     public String getString(ByteBuffer bytes)
0:     {
0:         return BytesSerializer.instance.getString(bytes);
0:     }
1: 
0:     // Utilitary method
0:     protected static ByteBuffer pack(List<ByteBuffer> buffers, int elements, int size)
0:     {
0:         ByteBuffer result = ByteBuffer.allocate(2 + size);
0:         result.putShort((short)elements);
1:         for (ByteBuffer bb : buffers)
0:         {
0:             result.putShort((short)bb.remaining());
0:             result.put(bb.duplicate());
0:         }
0:         return (ByteBuffer)result.flip();
0:     }
1: 
0:     public static ByteBuffer pack(List<ByteBuffer> buffers, int elements)
0:     {
1:         int size = 0;
1:         for (ByteBuffer bb : buffers)
0:             size += 2 + bb.remaining();
0:         return pack(buffers, elements, size);
0:     }
1: 
1: 
0:     protected static int getUnsignedShort(ByteBuffer bb)
0:     {
0:         int length = (bb.get() & 0xFF) << 8;
0:         return length | (bb.get() & 0xFF);
0:     }
0: }
============================================================================