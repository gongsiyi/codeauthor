1:456a2ba: /**
1:456a2ba:  *
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  * http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:1aab71b: 
1:1aab71b: import org.apache.activemq.util.IntrospectionSupport;
1:456a2ba: 
1:456a2ba: import java.util.ArrayList;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Support utility that can be used to set the properties on any object
1:456a2ba:  * using command line arguments.
1:456a2ba:  * 
1:456a2ba:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:456a2ba:  */
1:456a2ba: public class CommandLineSupport {
1:456a2ba: 	
1:456a2ba: 	/**
1:456a2ba: 	 * Sets the properties of an object given the command line args.
1:456a2ba: 	 * 
1:456a2ba: 	 * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1:456a2ba: 	 * 
1:456a2ba: 	 * then it will try to call the following setters on the target object.
1:456a2ba: 	 * 
1:456a2ba: 	 * target.setAckMode("AUTO");
1:456a2ba: 	 * target.setURL(new URI("tcp://localhost:61616") );
1:456a2ba: 	 * target.setPersistent(true);
1:456a2ba: 	 * 
1:456a2ba: 	 * Notice the the proper conversion for the argument is determined by examining the 
1:456a2ba: 	 * setter argument type.  
1:456a2ba: 	 * 
1:456a2ba: 	 * @param target the object that will have it's properties set
1:456a2ba: 	 * @param args the command line options
1:456a2ba: 	 * @return any arguments that are not valid options for the target
1:456a2ba: 	 */
1:456a2ba: 	static public String[] setOptions(Object target, String []args) {
1:456a2ba: 		ArrayList rc = new ArrayList();
1:456a2ba: 		
1:456a2ba: 		for (int i = 0; i < args.length; i++) {
1:456a2ba: 			if( args[i] == null )
1:456a2ba: 				continue;
1:456a2ba: 			
1:456a2ba: 			if( args[i].startsWith("--") ) {
1:456a2ba: 				
1:456a2ba: 				// --options without a specified value are considered boolean flags that are enabled.
1:456a2ba: 				String value="true";
1:456a2ba: 				String name = args[i].substring(2);
1:456a2ba: 				
1:456a2ba: 				// if --option=value case
1:456a2ba: 				int p = name.indexOf("=");
1:456a2ba: 				if( p > 0 ) {
1:456a2ba: 					value = name.substring(p+1);
1:456a2ba: 					name = name.substring(0,p);
1:456a2ba: 				}
1:456a2ba: 				
1:456a2ba: 				// name not set, then it's an unrecognized option
1:456a2ba: 				if( name.length()==0 ) {
1:456a2ba: 					rc.add(args[i]);
1:456a2ba: 					continue;
1:456a2ba: 				}
1:456a2ba: 				
1:456a2ba: 				String propName = convertOptionToPropertyName(name);
1:1aab71b: 				if( !IntrospectionSupport.setProperty(target, propName, value) ) {
1:456a2ba: 					rc.add(args[i]);
1:456a2ba: 					continue;
1:456a2ba: 				}
1:456a2ba: 			} else {
1:456a2ba:                             rc.add(args[i]);
1:456a2ba: 			}
1:456a2ba: 			
1:456a2ba: 		}
1:456a2ba: 		
1:456a2ba: 		String r[] = new String[rc.size()];
1:456a2ba: 		rc.toArray(r);
1:456a2ba: 		return r;
1:456a2ba: 	}
1:456a2ba: 
1:456a2ba: 	/**
1:456a2ba: 	 * converts strings like: test-enabled to testEnabled
1:456a2ba: 	 * @param name
1:456a2ba: 	 * @return
1:456a2ba: 	 */
1:456a2ba: 	private static String convertOptionToPropertyName(String name) {
1:456a2ba: 		String rc="";
1:456a2ba: 		
1:456a2ba: 		// Look for '-' and strip and then convert the subsequent char to uppercase
1:456a2ba: 		int p = name.indexOf("-");
1:456a2ba: 		while( p > 0 ) {
1:456a2ba: 			// strip
1:456a2ba: 			rc += name.substring(0, p);
1:456a2ba: 			name = name.substring(p+1);
1:456a2ba: 			
1:456a2ba: 			// can I convert the next char to upper?
1:456a2ba: 			if( name.length() >0 ) {
1:456a2ba: 				rc += name.substring(0,1).toUpperCase();
1:456a2ba: 				name = name.substring(1);
1:456a2ba: 			}
1:456a2ba: 			
1:456a2ba: 			p = name.indexOf("-");
1:456a2ba: 		}
1:456a2ba: 		return rc+name;
1:456a2ba: 	}
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
1: 
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1: 				if( !IntrospectionSupport.setProperty(target, propName, value) ) {
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.util.ArrayList;
1: 
1: /**
1:  * Support utility that can be used to set the properties on any object
1:  * using command line arguments.
1:  * 
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class CommandLineSupport {
1: 	
1: 	/**
1: 	 * Sets the properties of an object given the command line args.
1: 	 * 
1: 	 * if args contains: --ack-mode=AUTO --url=tcp://localhost:61616 --persistent 
1: 	 * 
1: 	 * then it will try to call the following setters on the target object.
1: 	 * 
1: 	 * target.setAckMode("AUTO");
1: 	 * target.setURL(new URI("tcp://localhost:61616") );
1: 	 * target.setPersistent(true);
1: 	 * 
1: 	 * Notice the the proper conversion for the argument is determined by examining the 
1: 	 * setter argument type.  
1: 	 * 
1: 	 * @param target the object that will have it's properties set
1: 	 * @param args the command line options
1: 	 * @return any arguments that are not valid options for the target
1: 	 */
1: 	static public String[] setOptions(Object target, String []args) {
1: 		ArrayList rc = new ArrayList();
1: 		
1: 		for (int i = 0; i < args.length; i++) {
1: 			if( args[i] == null )
1: 				continue;
1: 			
1: 			if( args[i].startsWith("--") ) {
1: 				
1: 				// --options without a specified value are considered boolean flags that are enabled.
1: 				String value="true";
1: 				String name = args[i].substring(2);
1: 				
1: 				// if --option=value case
1: 				int p = name.indexOf("=");
1: 				if( p > 0 ) {
1: 					value = name.substring(p+1);
1: 					name = name.substring(0,p);
1: 				}
1: 				
1: 				// name not set, then it's an unrecognized option
1: 				if( name.length()==0 ) {
1: 					rc.add(args[i]);
1: 					continue;
1: 				}
1: 				
1: 				String propName = convertOptionToPropertyName(name);
0: 				if( !IntrospectionSupport.setProperty(target, propName, value) ) {					
1: 					rc.add(args[i]);
1: 					continue;
1: 				}
1: 			} else {
1:                             rc.add(args[i]);
1: 			}
1: 			
1: 		}
1: 		
1: 		String r[] = new String[rc.size()];
1: 		rc.toArray(r);
1: 		return r;
1: 	}
1: 
1: 	/**
1: 	 * converts strings like: test-enabled to testEnabled
1: 	 * @param name
1: 	 * @return
1: 	 */
1: 	private static String convertOptionToPropertyName(String name) {
1: 		String rc="";
1: 		
1: 		// Look for '-' and strip and then convert the subsequent char to uppercase
1: 		int p = name.indexOf("-");
1: 		while( p > 0 ) {
1: 			// strip
1: 			rc += name.substring(0, p);
1: 			name = name.substring(p+1);
1: 			
1: 			// can I convert the next char to upper?
1: 			if( name.length() >0 ) {
1: 				rc += name.substring(0,1).toUpperCase();
1: 				name = name.substring(1);
1: 			}
1: 			
1: 			p = name.indexOf("-");
1: 		}
1: 		return rc+name;
1: 	}
1: }
============================================================================