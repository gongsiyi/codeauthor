1:8d589ec: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8d589ec:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d589ec:  *
1:8d589ec:  * Unless required by applicable law or agreed to in writing, software
1:8d589ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d589ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d589ec:  * See the License for the specific language governing permissions and
1:8d589ec:  * limitations under the License.
1:8d589ec:  */
1:8d589ec: package org.apache.activemq.transport.udp;
2:8d589ec: 
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.net.SocketAddress;
1:74a7a8b: 
1:8d589ec: import org.apache.activemq.command.Command;
1:8d589ec: import org.apache.activemq.openwire.OpenWireFormat;
1:f3ef1a9: import org.apache.activemq.transport.reliable.ReplayBuffer;
1:8d589ec: import org.apache.activemq.util.IntSequenceGenerator;
1:8d589ec: 
1:8d589ec: /**
1:0bbc0ac:  * 
1:8d589ec:  * 
1:8d589ec:  */
1:8d589ec: public abstract class CommandChannelSupport implements CommandChannel {
1:8d589ec: 
1:8d589ec:     protected OpenWireFormat wireFormat;
1:8d589ec:     protected int datagramSize = 4 * 1024;
1:8d589ec:     protected SocketAddress targetAddress;
1:8d589ec:     protected SocketAddress replayAddress;
1:8d589ec:     protected final String name;
1:8d589ec:     protected final IntSequenceGenerator sequenceGenerator;
1:8d589ec:     protected DatagramHeaderMarshaller headerMarshaller;
1:f3ef1a9:     private ReplayBuffer replayBuffer;
1:8d589ec: 
1:8d589ec:     public CommandChannelSupport(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress,
1:8d589ec:             DatagramHeaderMarshaller headerMarshaller) {
1:8d589ec:         this.wireFormat = wireFormat;
1:8d589ec:         this.datagramSize = datagramSize;
1:8d589ec:         this.targetAddress = targetAddress;
1:8d589ec:         this.headerMarshaller = headerMarshaller;
1:8d589ec:         this.name = transport.toString();
1:8d589ec:         this.sequenceGenerator = transport.getSequenceGenerator();
1:8d589ec:         this.replayAddress = targetAddress;
1:8d589ec:         if (sequenceGenerator == null) {
1:8d589ec:             throw new IllegalArgumentException("No sequenceGenerator on the given transport: " + transport);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec:     
1:8d589ec:     public void write(Command command) throws IOException {
1:8d589ec:         write(command, targetAddress);
1:8d589ec:     }
1:8d589ec: 
1:8d589ec: 
1:8d589ec:     // Properties
1:8d589ec:     // -------------------------------------------------------------------------
1:8d589ec: 
1:8d589ec:     public int getDatagramSize() {
1:8d589ec:         return datagramSize;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     /**
1:8d589ec:      * Sets the default size of a datagram on the network.
1:8d589ec:      */
1:8d589ec:     public void setDatagramSize(int datagramSize) {
1:8d589ec:         this.datagramSize = datagramSize;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public SocketAddress getTargetAddress() {
1:8d589ec:         return targetAddress;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void setTargetAddress(SocketAddress targetAddress) {
1:8d589ec:         this.targetAddress = targetAddress;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public SocketAddress getReplayAddress() {
1:8d589ec:         return replayAddress;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void setReplayAddress(SocketAddress replayAddress) {
1:8d589ec:         this.replayAddress = replayAddress;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public String toString() {
1:8d589ec:         return "CommandChannel#" + name;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public DatagramHeaderMarshaller getHeaderMarshaller() {
1:8d589ec:         return headerMarshaller;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller) {
1:8d589ec:         this.headerMarshaller = headerMarshaller;
1:8d589ec:     }
1:8d589ec: 
1:f3ef1a9:     public ReplayBuffer getReplayBuffer() {
1:f3ef1a9:         return replayBuffer;
1:f3ef1a9:     }
1:f3ef1a9: 
1:f3ef1a9:     public void setReplayBuffer(ReplayBuffer replayBuffer) {
1:f3ef1a9:         this.replayBuffer = replayBuffer;
1:f3ef1a9:     }
1:f3ef1a9: 
1:8d589ec: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.SocketAddress;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.reliable.ReplayBuffer;
/////////////////////////////////////////////////////////////////////////
1:     private ReplayBuffer replayBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public ReplayBuffer getReplayBuffer() {
1:         return replayBuffer;
1:     }
1: 
1:     public void setReplayBuffer(ReplayBuffer replayBuffer) {
1:         this.replayBuffer = replayBuffer;
1:     }
1: 
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.util.IntSequenceGenerator;
1: 
0: import java.io.IOException;
0: import java.net.SocketAddress;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public abstract class CommandChannelSupport implements CommandChannel {
1: 
1:     protected OpenWireFormat wireFormat;
1:     protected int datagramSize = 4 * 1024;
1:     protected SocketAddress targetAddress;
1:     protected SocketAddress replayAddress;
1:     protected final String name;
1:     protected final IntSequenceGenerator sequenceGenerator;
1:     protected DatagramHeaderMarshaller headerMarshaller;
1: 
1:     public CommandChannelSupport(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress,
1:             DatagramHeaderMarshaller headerMarshaller) {
1:         this.wireFormat = wireFormat;
1:         this.datagramSize = datagramSize;
1:         this.targetAddress = targetAddress;
1:         this.headerMarshaller = headerMarshaller;
1:         this.name = transport.toString();
1:         this.sequenceGenerator = transport.getSequenceGenerator();
1:         this.replayAddress = targetAddress;
1:         if (sequenceGenerator == null) {
1:             throw new IllegalArgumentException("No sequenceGenerator on the given transport: " + transport);
1:         }
1:     }
1:     
1:     public void write(Command command) throws IOException {
1:         write(command, targetAddress);
1:     }
1: 
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public int getDatagramSize() {
1:         return datagramSize;
1:     }
1: 
1:     /**
1:      * Sets the default size of a datagram on the network.
1:      */
1:     public void setDatagramSize(int datagramSize) {
1:         this.datagramSize = datagramSize;
1:     }
1: 
1:     public SocketAddress getTargetAddress() {
1:         return targetAddress;
1:     }
1: 
1:     public void setTargetAddress(SocketAddress targetAddress) {
1:         this.targetAddress = targetAddress;
1:     }
1: 
1:     public SocketAddress getReplayAddress() {
1:         return replayAddress;
1:     }
1: 
1:     public void setReplayAddress(SocketAddress replayAddress) {
1:         this.replayAddress = replayAddress;
1:     }
1: 
1:     public String toString() {
1:         return "CommandChannel#" + name;
1:     }
1: 
1:     public DatagramHeaderMarshaller getHeaderMarshaller() {
1:         return headerMarshaller;
1:     }
1: 
1:     public void setHeaderMarshaller(DatagramHeaderMarshaller headerMarshaller) {
1:         this.headerMarshaller = headerMarshaller;
1:     }
1: 
1: }
============================================================================