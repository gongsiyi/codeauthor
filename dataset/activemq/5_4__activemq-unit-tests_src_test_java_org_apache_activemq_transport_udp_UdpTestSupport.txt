1:05b81ba: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:4f446eb:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:05b81ba:  *
1:05b81ba:  * Unless required by applicable law or agreed to in writing, software
1:05b81ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05b81ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05b81ba:  * See the License for the specific language governing permissions and
1:05b81ba:  * limitations under the License.
1:05b81ba:  */
1:05b81ba: package org.apache.activemq.transport.udp;
1:93dc39b: 
1:93dc39b: import java.io.IOException;
1:93dc39b: 
1:93dc39b: import javax.jms.MessageNotWriteableException;
1:93dc39b: 
1:93dc39b: import junit.framework.TestCase;
1:2f1dcea: import org.apache.activemq.command.ActiveMQDestination;
1:2f1dcea: import org.apache.activemq.command.ActiveMQQueue;
1:2f1dcea: import org.apache.activemq.command.ActiveMQTextMessage;
1:05b81ba: import org.apache.activemq.command.Command;
1:05b81ba: import org.apache.activemq.command.ConsumerInfo;
1:f3ef1a9: import org.apache.activemq.command.ProducerInfo;
1:72b382d: import org.apache.activemq.command.Response;
1:4f446eb: import org.apache.activemq.command.WireFormatInfo;
1:05b81ba: import org.apache.activemq.transport.Transport;
1:4f446eb: import org.apache.activemq.transport.TransportAcceptListener;
1:05b81ba: import org.apache.activemq.transport.TransportListener;
1:4f446eb: import org.apache.activemq.transport.TransportServer;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2f1dcea: 
1:05b81ba: /**
1:0bbc0ac:  * 
1:05b81ba:  */
1:4f446eb: public abstract class UdpTestSupport extends TestCase implements TransportListener {
1:93dc39b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(UdpTestSupport.class);
1:4f446eb: 
1:05b81ba:     protected Transport producer;
1:05b81ba:     protected Transport consumer;
20:05b81ba: 
1:05b81ba:     protected Object lock = new Object();
1:05b81ba:     protected Command receivedCommand;
1:2f1dcea:     protected TransportServer server;
1:2f1dcea:     protected boolean large;
1:4f446eb: 
1:f3ef1a9:     // You might want to set this to massive number if debugging
1:f3ef1a9:     protected int waitForCommandTimeout = 40000;
1:f3ef1a9: 
1:05b81ba:     public void testSendingSmallMessage() throws Exception {
1:05b81ba:         ConsumerInfo expected = new ConsumerInfo();
1:05b81ba:         expected.setSelector("Cheese");
1:4f446eb:         expected.setExclusive(true);
1:4f446eb:         expected.setExclusive(true);
1:4f446eb:         expected.setPrefetchSize(3456);
1:2f1dcea: 
1:05b81ba:         try {
1:fc00993:             LOG.info("About to send: " + expected);
1:05b81ba:             producer.oneway(expected);
1:4f446eb: 
1:05b81ba:             Command received = assertCommandReceived();
1:05b81ba:             assertTrue("Should have received a ConsumerInfo but was: " + received, received instanceof ConsumerInfo);
1:f812e34:             ConsumerInfo actual = (ConsumerInfo)received;
1:05b81ba:             assertEquals("Selector", expected.getSelector(), actual.getSelector());
1:4f446eb:             assertEquals("isExclusive", expected.isExclusive(), actual.isExclusive());
1:4f446eb:             assertEquals("getPrefetchSize", expected.getPrefetchSize(), actual.getPrefetchSize());
1:f812e34:         } catch (Exception e) {
1:fc00993:             LOG.info("Caught: " + e);
1:05b81ba:             e.printStackTrace();
1:05b81ba:             fail("Failed to send to transport: " + e);
8:05b81ba:         }
1:2f1dcea:     }
1:4f446eb: 
1:2f1dcea:     public void testSendingMediumMessage() throws Exception {
1:2f1dcea:         String text = createMessageBodyText(4 * 105);
1:2f1dcea:         ActiveMQDestination destination = new ActiveMQQueue("Foo.Bar.Medium");
1:2f1dcea:         assertSendTextMessage(destination, text);
1:2f1dcea:     }
1:2f1dcea: 
1:2f1dcea:     public void testSendingLargeMessage() throws Exception {
1:2f1dcea:         String text = createMessageBodyText(4 * 1024);
1:2f1dcea:         ActiveMQDestination destination = new ActiveMQQueue("Foo.Bar.Large");
1:2f1dcea:         assertSendTextMessage(destination, text);
1:2f1dcea:     }
1:2f1dcea: 
1:f812e34:     protected void assertSendTextMessage(ActiveMQDestination destination, String text) throws MessageNotWriteableException {
1:2f1dcea:         large = true;
1:2f1dcea: 
1:2f1dcea:         ActiveMQTextMessage expected = new ActiveMQTextMessage();
1:2f1dcea: 
1:2f1dcea:         expected.setText(text);
1:2f1dcea:         expected.setDestination(destination);
1:2f1dcea: 
1:2f1dcea:         try {
1:fc00993:             LOG.info("About to send message of type: " + expected.getClass());
1:2f1dcea:             producer.oneway(expected);
1:2f1dcea: 
1:f3ef1a9:             // lets send a dummy command to ensure things don't block if we
1:f3ef1a9:             // discard the last one
1:f3ef1a9:             // keepalive does not have a commandId...
1:f3ef1a9:             // producer.oneway(new KeepAliveInfo());
1:f3ef1a9:             producer.oneway(new ProducerInfo());
1:f3ef1a9:             producer.oneway(new ProducerInfo());
1:f3ef1a9: 
1:2f1dcea:             Command received = assertCommandReceived();
1:f812e34:             assertTrue("Should have received a ActiveMQTextMessage but was: " + received, received instanceof ActiveMQTextMessage);
1:f812e34:             ActiveMQTextMessage actual = (ActiveMQTextMessage)received;
1:2f1dcea: 
1:2f1dcea:             assertEquals("getDestination", expected.getDestination(), actual.getDestination());
1:2f1dcea:             assertEquals("getText", expected.getText(), actual.getText());
1:f3ef1a9: 
1:fc00993:             LOG.info("Received text message with: " + actual.getText().length() + " character(s)");
1:f812e34:         } catch (Exception e) {
1:fc00993:             LOG.info("Caught: " + e);
1:2f1dcea:             e.printStackTrace();
1:2f1dcea:             fail("Failed to send to transport: " + e);
1:2f1dcea:         }
1:2f1dcea:     }
1:2f1dcea: 
1:2f1dcea:     protected String createMessageBodyText(int loopSize) {
1:2f1dcea:         StringBuffer buffer = new StringBuffer();
1:2f1dcea:         for (int i = 0; i < loopSize; i++) {
1:2f1dcea:             buffer.append("0123456789");
1:2f1dcea:         }
1:2f1dcea:         return buffer.toString();
1:2f1dcea:     }
1:2f1dcea: 
1:05b81ba:     protected void setUp() throws Exception {
1:4f446eb:         server = createServer();
1:4f446eb:         if (server != null) {
1:4f446eb:             server.setAcceptListener(new TransportAcceptListener() {
1:2f1dcea: 
1:4f446eb:                 public void onAccept(Transport transport) {
1:4f446eb:                     consumer = transport;
1:4f446eb:                     consumer.setTransportListener(UdpTestSupport.this);
1:4f446eb:                     try {
1:4f446eb:                         consumer.start();
1:f812e34:                     } catch (Exception e) {
1:4f446eb:                         throw new RuntimeException(e);
1:2f1dcea:                     }
1:4f446eb:                 }
1:4f446eb: 
1:4f446eb:                 public void onAcceptError(Exception error) {
1:4f446eb:                 }
1:4f446eb:             });
1:4f446eb:             server.start();
1:4f446eb:         }
1:4f446eb: 
1:05b81ba:         consumer = createConsumer();
1:4f446eb:         if (consumer != null) {
1:4f446eb:             consumer.setTransportListener(this);
1:4f446eb:             consumer.start();
1:4f446eb:         }
1:4f446eb: 
1:05b81ba:         producer = createProducer();
1:05b81ba:         producer.setTransportListener(new TransportListener() {
1:9ca56a0:             public void onCommand(Object command) {
1:fc00993:                 LOG.info("Producer received: " + command);
1:4f446eb:             }
1:4f446eb: 
1:05b81ba:             public void onException(IOException error) {
1:fc00993:                 LOG.info("Producer exception: " + error);
1:f3ef1a9:                 error.printStackTrace();
1:4f446eb:             }
1:4f446eb: 
1:05b81ba:             public void transportInterupted() {
1:05b81ba:             }
1:4f446eb: 
1:05b81ba:             public void transportResumed() {
1:05b81ba:             }
1:05b81ba:         });
1:4f446eb: 
1:05b81ba:         producer.start();
1:05b81ba:     }
1:05b81ba: 
1:05b81ba:     protected void tearDown() throws Exception {
1:05b81ba:         if (producer != null) {
1:8163b0b:             try {
1:8163b0b:                 producer.stop();
1:8163b0b:             } catch (Exception e) {
1:8163b0b:             }
1:05b81ba:         }
1:05b81ba:         if (consumer != null) {
1:05b81ba:             consumer.stop();
1:05b81ba:         }
1:4f446eb:         if (server != null) {
1:4f446eb:             server.stop();
1:4f446eb:         }
1:4f446eb:     }
1:05b81ba: 
1:9ca56a0:     public void onCommand(Object o) {
1:f812e34:         final Command command = (Command)o;
1:4f446eb:         if (command instanceof WireFormatInfo) {
1:fc00993:             LOG.info("Got WireFormatInfo: " + command);
1:f812e34:         } else {
1:72b382d:             if (command.isResponseRequired()) {
1:72b382d:                 // lets send a response back...
1:72b382d:                 sendResponse(command);
1:72b382d: 
1:72b382d:             }
1:2f1dcea:             if (large) {
1:fc00993:                 LOG.info("### Received command: " + command.getClass() + " with id: " + command.getCommandId());
1:f812e34:             } else {
1:fc00993:                 LOG.info("### Received command: " + command);
1:2f1dcea:             }
1:4f446eb: 
1:4f446eb:             synchronized (lock) {
1:f3ef1a9:                 if (receivedCommand == null) {
1:f3ef1a9:                     receivedCommand = command;
1:f812e34:                 } else {
1:fc00993:                     LOG.info("Ignoring superfluous command: " + command);
1:f3ef1a9:                 }
1:4f446eb:                 lock.notifyAll();
1:f3ef1a9:             }
1:4f446eb:         }
1:05b81ba:     }
1:05b81ba: 
1:72b382d:     protected void sendResponse(Command command) {
1:f3ef1a9:         Response response = new Response();
1:72b382d:         response.setCorrelationId(command.getCommandId());
1:72b382d:         try {
1:72b382d:             consumer.oneway(response);
1:f812e34:         } catch (IOException e) {
1:fc00993:             LOG.info("Caught: " + e);
1:72b382d:             e.printStackTrace();
1:72b382d:             throw new RuntimeException(e);
1:72b382d:         }
1:72b382d:     }
1:72b382d: 
1:05b81ba:     public void onException(IOException error) {
1:fc00993:         LOG.info("### Received error: " + error);
1:f3ef1a9:         error.printStackTrace();
1:72b382d:     }
1:05b81ba: 
1:05b81ba:     public void transportInterupted() {
1:fc00993:         LOG.info("### Transport interrupted");
1:05b81ba:     }
1:05b81ba: 
1:05b81ba:     public void transportResumed() {
1:fc00993:         LOG.info("### Transport resumed");
1:05b81ba:     }
1:05b81ba: 
1:05b81ba:     protected Command assertCommandReceived() throws InterruptedException {
1:05b81ba:         Command answer = null;
2:05b81ba:         synchronized (lock) {
1:2f1dcea:             answer = receivedCommand;
1:2f1dcea:             if (answer == null) {
1:f3ef1a9:                 lock.wait(waitForCommandTimeout);
1:2f1dcea:             }
1:05b81ba:             answer = receivedCommand;
1:05b81ba:         }
1:4f446eb: 
1:05b81ba:         assertNotNull("Should have received a Command by now!", answer);
1:05b81ba:         return answer;
1:05b81ba:     }
1:05b81ba: 
1:4f446eb:     protected abstract Transport createConsumer() throws Exception;
1:4f446eb: 
1:4f446eb:     protected abstract Transport createProducer() throws Exception;
1:4f446eb: 
1:4f446eb:     protected TransportServer createServer() throws Exception {
1:4f446eb:         return null;
1:4f446eb:     }
1:4f446eb: 
1:05b81ba: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8163b0b
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 producer.stop();
1:             } catch (Exception e) {
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(UdpTestSupport.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("About to send: " + expected);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Caught: " + e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("About to send message of type: " + expected.getClass());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received text message with: " + actual.getText().length() + " character(s)");
1:             LOG.info("Caught: " + e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Producer received: " + command);
1:                 LOG.info("Producer exception: " + error);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Got WireFormatInfo: " + command);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("### Received command: " + command.getClass() + " with id: " + command.getCommandId());
1:                 LOG.info("### Received command: " + command);
1:                     LOG.info("Ignoring superfluous command: " + command);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Caught: " + e);
1:         LOG.info("### Received error: " + error);
1:         LOG.info("### Transport interrupted");
1:         LOG.info("### Transport resumed");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ConsumerInfo actual = (ConsumerInfo)received;
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:     protected void assertSendTextMessage(ActiveMQDestination destination, String text) throws MessageNotWriteableException {
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Should have received a ActiveMQTextMessage but was: " + received, received instanceof ActiveMQTextMessage);
1:             ActiveMQTextMessage actual = (ActiveMQTextMessage)received;
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:                     } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         final Command command = (Command)o;
1:         } else {
0:                 log.info("### Received command: " + command.getClass() + " with id: " + command.getCommandId());
1:             } else {
1:                 } else {
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
1:     public void onCommand(Object o) {
0:     	final Command command = (Command) o;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
1: import javax.jms.MessageNotWriteableException;
1: 
1: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(UdpTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:             log.info("About to send: " + expected);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught: " + e);
/////////////////////////////////////////////////////////////////////////
0:             log.info("About to send message of type: " + expected.getClass());
/////////////////////////////////////////////////////////////////////////
0:             log.info("Received text message with: " + actual.getText().length() + " character(s)");
0:             log.info("Caught: " + e);
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Producer received: " + command);
0:                 log.info("Producer exception: " + error);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Got WireFormatInfo: " + command);
/////////////////////////////////////////////////////////////////////////
0:                 log.info("### Received command: " + command.getClass() + " with id: "
0:                 log.info("### Received command: " + command);
/////////////////////////////////////////////////////////////////////////
0:                     log.info("Ignoring superfluous command: " + command);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught: " + e);
0:         log.info("### Received error: " + error);
0:         log.info("### Transport interrupted");
0:         log.info("### Transport resumed");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(UdpTestSupport.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.KeepAliveInfo;
1: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
1:     // You might want to set this to massive number if debugging
1:     protected int waitForCommandTimeout = 40000;
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected void assertSendTextMessage(ActiveMQDestination destination, String text)
0:             throws MessageNotWriteableException {
/////////////////////////////////////////////////////////////////////////
1:             // lets send a dummy command to ensure things don't block if we
1:             // discard the last one
1:             // keepalive does not have a commandId...
1:             // producer.oneway(new KeepAliveInfo());
1:             producer.oneway(new ProducerInfo());
1:             producer.oneway(new ProducerInfo());
1: 
0:             assertTrue("Should have received a ActiveMQTextMessage but was: " + received,
0:                     received instanceof ActiveMQTextMessage);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 error.printStackTrace();
/////////////////////////////////////////////////////////////////////////
0:                 System.out.println("### Received command: " + command.getClass() + " with id: "
0:                         + command.getCommandId());
1:                 if (receivedCommand == null) {
1:                     receivedCommand = command;
1:                 }
0:                 else {
0:                     System.out.println("Ignoring superfluous command: " + command);
1:                 }
1:         Response response = new Response();
/////////////////////////////////////////////////////////////////////////
1:         error.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:                 lock.wait(waitForCommandTimeout);
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
commit:364337b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:72b382d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
1:             if (command.isResponseRequired()) {
1:                 // lets send a response back...
1:                 sendResponse(command);
1: 
1:             }
/////////////////////////////////////////////////////////////////////////
1:     protected void sendResponse(Command command) {
0:         Response response = new Response();                
1:         response.setCorrelationId(command.getCommandId());
1:         try {
1:             consumer.oneway(response);
1:         }
0:         catch (IOException e) {
0:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
0:                 System.out.println("Producer received: " + command);
0:                 System.out.println("Producer exception: " + error);
commit:8704338
/////////////////////////////////////////////////////////////////////////
0:                 lock.wait(5000);
commit:2f1dcea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageNotWriteableException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected TransportServer server;
1:     protected boolean large;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testSendingMediumMessage() throws Exception {
1:         String text = createMessageBodyText(4 * 105);
1:         ActiveMQDestination destination = new ActiveMQQueue("Foo.Bar.Medium");
1:         assertSendTextMessage(destination, text);
1:     }
1: 
1:     public void testSendingLargeMessage() throws Exception {
1:         String text = createMessageBodyText(4 * 1024);
1:         ActiveMQDestination destination = new ActiveMQQueue("Foo.Bar.Large");
1:         assertSendTextMessage(destination, text);
1:     }
1: 
0:     protected void assertSendTextMessage(ActiveMQDestination destination, String text) throws MessageNotWriteableException {
1:         large = true;
1: 
1:         ActiveMQTextMessage expected = new ActiveMQTextMessage();
1: 
1:         expected.setText(text);
1:         expected.setDestination(destination);
1: 
1:         try {
0:             System.out.println("About to send message of type: " + expected.getClass());
1:             producer.oneway(expected);
1: 
1:             Command received = assertCommandReceived();
0:             assertTrue("Should have received a ActiveMQTextMessage but was: " + received, received instanceof ActiveMQTextMessage);
0:             ActiveMQTextMessage actual = (ActiveMQTextMessage) received;
1: 
1:             assertEquals("getDestination", expected.getDestination(), actual.getDestination());
1:             assertEquals("getText", expected.getText(), actual.getText());
1:             
0:             System.out.println("Received text message with: " + actual.getText().length() + " character(s)");
1:         }
0:         catch (Exception e) {
0:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:             fail("Failed to send to transport: " + e);
1:         }
1:     }
1: 
1:     protected String createMessageBodyText(int loopSize) {
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i = 0; i < loopSize; i++) {
1:             buffer.append("0123456789");
1:         }
1:         return buffer.toString();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (large) {
0:                 System.out.println("### Received command: " + command.getClass() + " with id: " + command.getCommandId());
1:             }
0:             else {
0:                 System.out.println("### Received command: " + command);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             answer = receivedCommand;
1:             if (answer == null) {
0:                 lock.wait(10000);
1:             }
commit:4446d55
/////////////////////////////////////////////////////////////////////////
0:             lock.wait(1000);
commit:4f446eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.transport.TransportAcceptListener;
0: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
0: import java.net.URI;
1:  * 
1: public abstract class UdpTestSupport extends TestCase implements TransportListener {
0:     private TransportServer server;
1: 
1:         expected.setExclusive(true);
0:         expected.setCommandId((short) 12);
1:         expected.setExclusive(true);
1:         expected.setPrefetchSize(3456);
1:         
0:             System.out.println("About to send: " + expected);
1: 
1:             assertEquals("isExclusive", expected.isExclusive(), actual.isExclusive());
0:             assertEquals("getCommandId", expected.getCommandId(), actual.getCommandId());
1:             assertEquals("getPrefetchSize", expected.getPrefetchSize(), actual.getPrefetchSize());
/////////////////////////////////////////////////////////////////////////
1:         server = createServer();
1:         if (server != null) {
1:             server.setAcceptListener(new TransportAcceptListener() {
1: 
1:                 public void onAccept(Transport transport) {
1:                     consumer = transport;
1:                     consumer.setTransportListener(UdpTestSupport.this);
1:                     try {
1:                         consumer.start();
1:                     }
0:                     catch (Exception e) {
1:                         throw new RuntimeException(e);
1:                     }
1:                 }
1: 
1:                 public void onAcceptError(Exception error) {
1:                 }
1:             });
1:             server.start();
1:         }
1: 
1:         if (consumer != null) {
1:             consumer.setTransportListener(this);
1:             consumer.start();
1:         }
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (server != null) {
1:             server.stop();
1:         }
1:         if (command instanceof WireFormatInfo) {
0:             System.out.println("Got WireFormatInfo: " + command);
1:         }
0:         else {
0:             System.out.println("### Received command: " + command);
1: 
1:             synchronized (lock) {
0:                 receivedCommand = command;
1:                 lock.notifyAll();
1:             }
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected abstract Transport createConsumer() throws Exception;
1: 
1:     protected abstract Transport createProducer() throws Exception;
1: 
1:     protected TransportServer createServer() throws Exception {
1:         return null;
1:     }
1: 
commit:05b81ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportListener;
1: 
0: import java.io.IOException;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  *
0:  * @version $Revision$
1:  */
0: public abstract class UdpTestSupport extends TestCase implements TransportListener  {
1: 
0:     protected abstract Transport createConsumer() throws Exception;
1: 
0:     protected abstract Transport createProducer() throws Exception;
1: 
1:     protected Transport producer;
1:     protected Transport consumer;
1: 
1:     protected Object lock = new Object();
1:     protected Command receivedCommand;
1:     
1:     public void testSendingSmallMessage() throws Exception {
1:         ConsumerInfo expected = new ConsumerInfo();
1:         expected.setSelector("Cheese");
1:         try {
1:             producer.oneway(expected);
1:             
1:             Command received = assertCommandReceived();
1:             assertTrue("Should have received a ConsumerInfo but was: " + received, received instanceof ConsumerInfo);
0:             ConsumerInfo actual = (ConsumerInfo) received;
1:             assertEquals("Selector", expected.getSelector(), actual.getSelector());
1:         }
0:         catch (Exception e) {
0:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:             fail("Failed to send to transport: " + e);
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         consumer = createConsumer();
1:         producer = createProducer();
1:     
0:         consumer.setTransportListener(this);
1:         producer.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
1:             }
1:     
1:             public void onException(IOException error) {
1:             }
1:     
1:             public void transportInterupted() {
1:             }
1:     
1:             public void transportResumed() {
1:             }
1:         });
1:     
0:         consumer.start();
1:         producer.start();
1:     
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (producer != null) {
0:             producer.stop();
1:         }
1:         if (consumer != null) {
1:             consumer.stop();
1:         }
1:     }
1: 
0:     public void onCommand(Command command) {
0:         System.out.println("### Received command: " + command);
1:         
1:         synchronized (lock) {
0:             receivedCommand = command;
0:             lock.notifyAll();
1:         }
1:     }
1: 
1:     public void onException(IOException error) {
0:         System.out.println("### Received error: " + error);
1:     }
1: 
1:     public void transportInterupted() {
0:         System.out.println("### Transport interrupted");
1:     }
1: 
1:     public void transportResumed() {
0:         System.out.println("### Transport resumed");
1:     }
1: 
1: 
1:     protected Command assertCommandReceived() throws InterruptedException {
1:         Command answer = null;
1:         synchronized (lock) {
0:             lock.wait(5000);
1:             answer = receivedCommand;
1:         }
1:         
1:         assertNotNull("Should have received a Command by now!", answer);
1:         return answer;
1:     }
1: 
1: }
============================================================================