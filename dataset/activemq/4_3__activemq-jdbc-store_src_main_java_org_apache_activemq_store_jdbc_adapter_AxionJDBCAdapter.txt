1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.jdbc.adapter;
5:d29ca2a: 
1:4843dd4: import org.apache.activemq.store.jdbc.Statements;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Axion specific Adapter.
1:d29ca2a:  * 
1:d29ca2a:  * Axion does not seem to support ALTER statements or sub-selects.  This means:
1:d29ca2a:  * - We cannot auto upgrade the schema was we roll out new versions of ActiveMQ
1:d29ca2a:  * - We cannot delete durable sub messages that have be acknowledged by all consumers.
1:d29ca2a:  * 
1:4843dd4:  * @org.apache.xbean.XBean element="axionJDBCAdapter"
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class AxionJDBCAdapter extends StreamJDBCAdapter {
1:d29ca2a: 
1:adc45e8:     @Override
1:4843dd4:     public void setStatements(Statements statements) {
1:4843dd4:         
1:74a7a8b:         String[] createStatements = new String[]{
1:74a7a8b:             "CREATE TABLE " + statements.getFullMessageTableName() + "("
1:74a7a8b:                 + "ID " + statements.getSequenceDataType() + " NOT NULL"
1:74a7a8b:                 + ", CONTAINER " + statements.getContainerNameDataType()
1:74a7a8b:                 + ", MSGID_PROD " + statements.getMsgIdDataType()
1:74a7a8b:                 + ", MSGID_SEQ " + statements.getSequenceDataType()
1:74a7a8b:                 + ", EXPIRATION " + statements.getLongDataType()
1:74a7a8b:                 + ", MSG " + (statements.isUseExternalMessageReferences() ? statements.getStringIdDataType() : statements.getBinaryDataType())
1:74a7a8b:                 + ", PRIMARY KEY ( ID ) )",                          
1:74a7a8b:             "CREATE INDEX " + statements.getFullMessageTableName() + "_MIDX ON " + statements.getFullMessageTableName() + " (MSGID_PROD,MSGID_SEQ)",
1:74a7a8b:             "CREATE INDEX " + statements.getFullMessageTableName() + "_CIDX ON " + statements.getFullMessageTableName() + " (CONTAINER)",                                       
1:74a7a8b:             "CREATE INDEX " + statements.getFullMessageTableName() + "_EIDX ON " + statements.getFullMessageTableName() + " (EXPIRATION)",                 
1:74a7a8b:             "CREATE TABLE " + statements.getFullAckTableName() + "("
1:74a7a8b:                 + "CONTAINER " + statements.getContainerNameDataType() + " NOT NULL"
1:74a7a8b:                 + ", SUB_DEST " + statements.getContainerNameDataType()
1:74a7a8b:                 + ", CLIENT_ID " + statements.getStringIdDataType() + " NOT NULL"
1:74a7a8b:                 + ", SUB_NAME " + statements.getStringIdDataType() + " NOT NULL"
1:74a7a8b:                 + ", SELECTOR " + statements.getStringIdDataType()
1:74a7a8b:                 + ", LAST_ACKED_ID " + statements.getSequenceDataType()
1:74a7a8b:                 + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))"
1:ecf89a6:         };
1:74a7a8b:         statements.setCreateSchemaStatements(createStatements);
1:4843dd4:         statements.setLongDataType("LONG");
1:78e7221:         statements.setSequenceDataType("LONG");
1:4843dd4:         
1:4843dd4:         super.setStatements(statements);
1:4843dd4:     }
1:d29ca2a:     
6:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         };
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         String[] createStatements = new String[]{
1:             "CREATE TABLE " + statements.getFullMessageTableName() + "("
1:                 + "ID " + statements.getSequenceDataType() + " NOT NULL"
1:                 + ", CONTAINER " + statements.getContainerNameDataType()
1:                 + ", MSGID_PROD " + statements.getMsgIdDataType()
1:                 + ", MSGID_SEQ " + statements.getSequenceDataType()
1:                 + ", EXPIRATION " + statements.getLongDataType()
1:                 + ", MSG " + (statements.isUseExternalMessageReferences() ? statements.getStringIdDataType() : statements.getBinaryDataType())
1:                 + ", PRIMARY KEY ( ID ) )",                          
1:             "CREATE INDEX " + statements.getFullMessageTableName() + "_MIDX ON " + statements.getFullMessageTableName() + " (MSGID_PROD,MSGID_SEQ)",
1:             "CREATE INDEX " + statements.getFullMessageTableName() + "_CIDX ON " + statements.getFullMessageTableName() + " (CONTAINER)",                                       
1:             "CREATE INDEX " + statements.getFullMessageTableName() + "_EIDX ON " + statements.getFullMessageTableName() + " (EXPIRATION)",                 
1:             "CREATE TABLE " + statements.getFullAckTableName() + "("
1:                 + "CONTAINER " + statements.getContainerNameDataType() + " NOT NULL"
1:                 + ", SUB_DEST " + statements.getContainerNameDataType()
1:                 + ", CLIENT_ID " + statements.getStringIdDataType() + " NOT NULL"
1:                 + ", SUB_NAME " + statements.getStringIdDataType() + " NOT NULL"
1:                 + ", SELECTOR " + statements.getStringIdDataType()
1:                 + ", LAST_ACKED_ID " + statements.getSequenceDataType()
1:                 + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))"
0:             };
1:         statements.setCreateSchemaStatements(createStatements);
0:         statements.setDeleteOldMessagesStatement("DELETE FROM " + statements.getFullMessageTableName() + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:                                +", SUB_DEST " + statements.getContainerNameDataType()
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.Statements;
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="axionJDBCAdapter"
1:     public void setStatements(Statements statements) {
1:         
0:         statements.setCreateSchemaStatements(
0:                 new String[]{
0:                         "CREATE TABLE "+statements.getFullMessageTableName()+"("
0:                                +"ID "+statements.getSequenceDataType()+" NOT NULL"
0:                                +", CONTAINER "+statements.getContainerNameDataType()
0:                                +", MSGID_PROD "+statements.getMsgIdDataType()
0:                                +", MSGID_SEQ "+statements.getSequenceDataType()
0:                                +", EXPIRATION "+statements.getLongDataType()
0:                                +", MSG "+(statements.isUseExternalMessageReferences() ? statements.getStringIdDataType() : statements.getBinaryDataType())
0:                                +", PRIMARY KEY ( ID ) )",                          
0:                          "CREATE INDEX "+statements.getFullMessageTableName()+"_MIDX ON "+statements.getFullMessageTableName()+" (MSGID_PROD,MSGID_SEQ)",
0:                          "CREATE INDEX "+statements.getFullMessageTableName()+"_CIDX ON "+statements.getFullMessageTableName()+" (CONTAINER)",                                       
0:                          "CREATE INDEX "+statements.getFullMessageTableName()+"_EIDX ON "+statements.getFullMessageTableName()+" (EXPIRATION)",                 
0:                          "CREATE TABLE "+statements.getFullAckTableName()+"("
0:                                +"CONTAINER "+statements.getContainerNameDataType()+" NOT NULL"
0:                                +", CLIENT_ID "+statements.getStringIdDataType()+" NOT NULL"
0:                                +", SUB_NAME "+statements.getStringIdDataType()+" NOT NULL"
0:                                +", SELECTOR "+statements.getStringIdDataType()
0:                                +", LAST_ACKED_ID "+statements.getSequenceDataType()
0:                                +", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))",
1:                     }
0:         );
0:         statements.setDeleteOldMessagesStatement("DELETE FROM "+statements.getFullMessageTableName()+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
1:         statements.setLongDataType("LONG");
1:         
1:         super.setStatements(statements);
commit:11d0df6
/////////////////////////////////////////////////////////////////////////
0:                      "CREATE INDEX "+getFullMessageTableName()+"_EIDX ON "+getFullMessageTableName()+" (EXPIRATION)",                 
commit:c0edaf0
/////////////////////////////////////////////////////////////////////////
0:                     "CREATE TABLE "+getTablePrefix()+messageTableName+"("
/////////////////////////////////////////////////////////////////////////
0:                      "CREATE INDEX "+getTablePrefix()+messageTableName+"_MIDX ON "+getTablePrefix()+messageTableName+" (MSGID_PROD,MSGID_SEQ)",
0:                      "CREATE INDEX "+getTablePrefix()+messageTableName+"_CIDX ON "+getTablePrefix()+messageTableName+" (CONTAINER)",                                       
0:                      "CREATE TABLE "+getTablePrefix()+durableSubAcksTableName+"("
/////////////////////////////////////////////////////////////////////////
0:                 return "DELETE FROM "+getTablePrefix()+messageTableName+
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc.adapter;
1: 
0: import org.apache.activemq.store.jdbc.StatementProvider;
1: 
1: /**
1:  * Axion specific Adapter.
1:  * 
1:  * Axion does not seem to support ALTER statements or sub-selects.  This means:
1:  * - We cannot auto upgrade the schema was we roll out new versions of ActiveMQ
1:  * - We cannot delete durable sub messages that have be acknowledged by all consumers.
1:  * 
0:  * @version $Revision: 1.4 $
1:  */
1: public class AxionJDBCAdapter extends StreamJDBCAdapter {
1: 
0:     public static StatementProvider createStatementProvider() {
0:         DefaultStatementProvider answer = new DefaultStatementProvider() {
0:             public String [] getCreateSchemaStatments() {
0:                 return new String[]{
0:                     "CREATE TABLE "+tablePrefix+messageTableName+"("
0:                            +"ID "+sequenceDataType+" NOT NULL"
0:                            +", CONTAINER "+containerNameDataType
0:                            +", MSGID_PROD "+msgIdDataType
0:                            +", MSGID_SEQ "+sequenceDataType
0:                            +", EXPIRATION "+longDataType
0:                            +", MSG "+(useExternalMessageReferences ? stringIdDataType : binaryDataType)
0:                            +", PRIMARY KEY ( ID ) )",                          
0:                      "CREATE INDEX "+tablePrefix+messageTableName+"_MIDX ON "+tablePrefix+messageTableName+" (MSGID_PROD,MSGID_SEQ)",
0:                      "CREATE INDEX "+tablePrefix+messageTableName+"_CIDX ON "+tablePrefix+messageTableName+" (CONTAINER)",                                       
0:                      "CREATE TABLE "+tablePrefix+durableSubAcksTableName+"("
0:                            +"CONTAINER "+containerNameDataType+" NOT NULL"
0:                            +", CLIENT_ID "+stringIdDataType+" NOT NULL"
0:                            +", SUB_NAME "+stringIdDataType+" NOT NULL"
0:                            +", SELECTOR "+stringIdDataType
0:                            +", LAST_ACKED_ID "+sequenceDataType
0:                            +", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))",
1:                         
0:                 };
1:             }
1:             
0:             public String getDeleteOldMessagesStatment() {
0:                 return "DELETE FROM "+tablePrefix+messageTableName+
0:                     " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)";
1:             }
1: 
0:         };
0:         answer.setLongDataType("LONG");
0:         return answer;
1:     }
1:     
0:     public AxionJDBCAdapter() {
0:         this(createStatementProvider());
1:     }
1: 
0:     public AxionJDBCAdapter(StatementProvider provider) {
0:         super(provider);        
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:adc45e8
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:fe31092
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:78e7221
/////////////////////////////////////////////////////////////////////////
1:         statements.setSequenceDataType("LONG");
============================================================================