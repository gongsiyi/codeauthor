1:f206a1b: /**
1:f206a1b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f206a1b:  * contributor license agreements.  See the NOTICE file distributed with
1:f206a1b:  * this work for additional information regarding copyright ownership.
1:f206a1b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f206a1b:  * (the "License"); you may not use this file except in compliance with
1:f206a1b:  * the License.  You may obtain a copy of the License at
1:f206a1b:  *
1:f206a1b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f206a1b:  *
1:f206a1b:  * Unless required by applicable law or agreed to in writing, software
1:f206a1b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f206a1b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f206a1b:  * See the License for the specific language governing permissions and
1:f206a1b:  * limitations under the License.
1:f206a1b:  */
1:f206a1b: package org.apache.activemq.bugs;
1:f206a1b: 
1:f206a1b: import junit.framework.Test;
1:f206a1b: import org.apache.activemq.ActiveMQConnectionFactory;
1:f206a1b: import org.apache.activemq.ActiveMQPrefetchPolicy;      
1:f206a1b: import org.apache.activemq.TestSupport;
1:f206a1b: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f206a1b: 
1:f206a1b: import javax.jms.ConnectionFactory;
1:f206a1b: import javax.jms.JMSException;
1:f206a1b: import javax.jms.MessageConsumer;
1:f206a1b: import javax.jms.MessageProducer;
1:f206a1b: import javax.jms.Session;
1:f206a1b: import javax.jms.TextMessage;
1:f206a1b: import javax.jms.Topic;
1:f206a1b: import javax.jms.TopicConnection;
1:f206a1b: import javax.jms.TopicSession;
1:f206a1b: 
1:f206a1b: public class AMQ2580Test extends TestSupport {
1:f206a1b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2580Test.class);
1:f206a1b: 
1:f206a1b:     private static final String TOPIC_NAME = "topicName";
1:f206a1b:     private static final String CLIENT_ID = "client_id";
1:f206a1b:     private static final String textOfSelectedMsg = "good_message";
1:f206a1b: 
1:f206a1b:     protected TopicConnection connection;
1:f206a1b: 
1:f206a1b:     private Topic topic;
1:f206a1b:     private Session session;
1:f206a1b:     private MessageProducer producer;
1:f206a1b:     private ConnectionFactory connectionFactory;
1:f206a1b:     private BrokerService service;
1:f206a1b: 
1:f206a1b:     public static Test suite() {
1:f206a1b:         return suite(AMQ2580Test.class);
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     protected void setUp() throws Exception {
1:f206a1b:         super.setUp();
1:f206a1b:         initDurableBroker();
1:f206a1b:         initConnectionFactory();
1:f206a1b:         initTopic();
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     protected void tearDown() throws Exception {
1:f206a1b:         shutdownClient();
1:f206a1b:         service.stop();
1:f206a1b:         super.tearDown();
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void initConnection() throws JMSException {
1:f206a1b:         if (connection == null) {
1:f206a1b:             LOG.info("Initializing connection");
1:f206a1b: 
1:f206a1b:             connection = (TopicConnection) connectionFactory.createConnection();
1:f206a1b:             connection.start();
1:f206a1b:         }
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     public void initCombosForTestTopicIsDurableSmokeTest() throws Exception {
1:f206a1b:         addCombinationValues("defaultPersistenceAdapter", PersistenceAdapterChoice.values());
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     public void testTopicIsDurableSmokeTest() throws Exception {
1:f206a1b: 
1:f206a1b:         initClient();
1:f206a1b:         MessageConsumer consumer = createMessageConsumer();
1:f206a1b:         LOG.info("Consuming message");
1:f206a1b:         assertNull(consumer.receive(1));
1:f206a1b:         shutdownClient();
1:f206a1b:         consumer.close();
1:f206a1b: 
1:f206a1b:         sendMessages();
1:f206a1b:         shutdownClient();
1:f206a1b: 
1:f206a1b:         initClient();
1:f206a1b:         consumer = createMessageConsumer();
1:f206a1b: 
1:f206a1b:         LOG.info("Consuming message");
1:f206a1b:         TextMessage answer1 = (TextMessage) consumer.receive(1000);
1:f206a1b:         assertNotNull("we got our message", answer1);
1:f206a1b: 
1:f206a1b:         consumer.close();
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private MessageConsumer createMessageConsumer() throws JMSException {
1:f206a1b:         LOG.info("creating durable subscriber");
1:f206a1b:         return session.createDurableSubscriber(topic,
1:f206a1b:                 TOPIC_NAME,
1:f206a1b:                 "name='value'",
1:f206a1b:                 false);
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void initClient() throws JMSException {
1:f206a1b:         LOG.info("Initializing client");
1:f206a1b: 
1:f206a1b:         initConnection();
1:f206a1b:         initSession();
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void shutdownClient()
1:f206a1b:             throws JMSException {
1:f206a1b:         LOG.info("Closing session and connection");
1:f206a1b:         session.close();
1:f206a1b:         connection.close();
1:f206a1b:         session = null;
1:f206a1b:         connection = null;
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void sendMessages()
1:f206a1b:             throws JMSException {
1:f206a1b:         initConnection();
1:f206a1b: 
1:f206a1b:         initSession();
1:f206a1b: 
1:f206a1b:         LOG.info("Creating producer");
1:f206a1b:         producer = session.createProducer(topic);
1:f206a1b: 
1:f206a1b:         sendMessageThatFailsSelection();
1:f206a1b: 
1:f206a1b:         sendMessage(textOfSelectedMsg, "value");
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void initSession() throws JMSException {
1:f206a1b:         LOG.info("Initializing session");
1:f206a1b:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void sendMessageThatFailsSelection() throws JMSException {
1:f206a1b:         for (int i = 0; i < 5; i++) {
1:f206a1b:             String textOfNotSelectedMsg = "Msg_" + i;
1:f206a1b:             sendMessage(textOfNotSelectedMsg, "not_value");
1:f206a1b:             LOG.info("#");
1:f206a1b:         }
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void sendMessage(
1:f206a1b:             String msgText,
1:f206a1b:             String propertyValue) throws JMSException {
1:f206a1b:         LOG.info("Creating message: " + msgText);
1:f206a1b:         TextMessage messageToSelect = session.createTextMessage(msgText);
1:f206a1b:         messageToSelect.setStringProperty("name", propertyValue);
1:f206a1b:         LOG.info("Sending message");
1:f206a1b:         producer.send(messageToSelect);
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     protected void initConnectionFactory() throws Exception {
1:f206a1b:         ActiveMQConnectionFactory activeMqConnectionFactory = createActiveMqConnectionFactory();
1:f206a1b:         connectionFactory = activeMqConnectionFactory;
1:f206a1b:     }
1:f206a1b: 
1:f206a1b: 
1:f206a1b:     private ActiveMQConnectionFactory createActiveMqConnectionFactory() throws Exception {
1:f206a1b:         ActiveMQConnectionFactory activeMqConnectionFactory = new ActiveMQConnectionFactory(
1:f206a1b:                 "failover:" + service.getTransportConnectors().get(0).getConnectUri().toString());
1:f206a1b:         activeMqConnectionFactory.setWatchTopicAdvisories(false);
1:f206a1b:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:f206a1b:         prefetchPolicy.setDurableTopicPrefetch(2);
1:f206a1b:         prefetchPolicy.setOptimizeDurableTopicPrefetch(2);
1:f206a1b:         activeMqConnectionFactory.setPrefetchPolicy(prefetchPolicy);
1:f206a1b:         activeMqConnectionFactory.setClientID(CLIENT_ID);
1:f206a1b:         return activeMqConnectionFactory;
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void initDurableBroker() throws Exception {
1:f206a1b:         service = new BrokerService();
1:f206a1b:         setDefaultPersistenceAdapter(service);
1:f206a1b:         service.setDeleteAllMessagesOnStartup(true);
1:f206a1b:         service.setAdvisorySupport(false);
1:f206a1b:         service.setTransportConnectorURIs(new String[]{"tcp://localhost:0"});
1:f206a1b:         service.setPersistent(true);
1:f206a1b:         service.setUseJmx(false);
1:f206a1b:         service.start();
1:f206a1b: 
1:f206a1b:     }
1:f206a1b: 
1:f206a1b:     private void initTopic() throws JMSException {
1:33cdefa:         initConnection();
1:33cdefa:         TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:f206a1b:         topic = topicSession.createTopic(TOPIC_NAME);
1:f206a1b:     }
1:f206a1b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:33cdefa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         initConnection();
1:         TopicSession topicSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
commit:f206a1b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;      
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: 
1: public class AMQ2580Test extends TestSupport {
1: 
0:     private static final Log LOG = LogFactory.getLog(AMQ2580Test.class);
1: 
1:     private static final String TOPIC_NAME = "topicName";
1:     private static final String CLIENT_ID = "client_id";
1:     private static final String textOfSelectedMsg = "good_message";
1: 
1:     protected TopicConnection connection;
1: 
1:     private Topic topic;
1:     private Session session;
1:     private MessageProducer producer;
1:     private ConnectionFactory connectionFactory;
0:     private TopicConnection topicConnection;
1:     private BrokerService service;
1: 
1:     public static Test suite() {
1:         return suite(AMQ2580Test.class);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         initDurableBroker();
1:         initConnectionFactory();
1:         initTopic();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         shutdownClient();
1:         service.stop();
1:         super.tearDown();
1:     }
1: 
1:     private void initConnection() throws JMSException {
1:         if (connection == null) {
1:             LOG.info("Initializing connection");
1: 
1:             connection = (TopicConnection) connectionFactory.createConnection();
1:             connection.start();
1:         }
1:     }
1: 
1:     public void initCombosForTestTopicIsDurableSmokeTest() throws Exception {
1:         addCombinationValues("defaultPersistenceAdapter", PersistenceAdapterChoice.values());
1:     }
1: 
1:     public void testTopicIsDurableSmokeTest() throws Exception {
1: 
1:         initClient();
1:         MessageConsumer consumer = createMessageConsumer();
1:         LOG.info("Consuming message");
1:         assertNull(consumer.receive(1));
1:         shutdownClient();
1:         consumer.close();
1: 
1:         sendMessages();
1:         shutdownClient();
1: 
1:         initClient();
1:         consumer = createMessageConsumer();
1: 
1:         LOG.info("Consuming message");
1:         TextMessage answer1 = (TextMessage) consumer.receive(1000);
1:         assertNotNull("we got our message", answer1);
1: 
1:         consumer.close();
1:     }
1: 
1:     private MessageConsumer createMessageConsumer() throws JMSException {
1:         LOG.info("creating durable subscriber");
1:         return session.createDurableSubscriber(topic,
1:                 TOPIC_NAME,
1:                 "name='value'",
1:                 false);
1:     }
1: 
1:     private void initClient() throws JMSException {
1:         LOG.info("Initializing client");
1: 
1:         initConnection();
1:         initSession();
1:     }
1: 
1:     private void shutdownClient()
1:             throws JMSException {
1:         LOG.info("Closing session and connection");
1:         session.close();
1:         connection.close();
1:         session = null;
1:         connection = null;
1:     }
1: 
1:     private void sendMessages()
1:             throws JMSException {
1:         initConnection();
1: 
1:         initSession();
1: 
1:         LOG.info("Creating producer");
1:         producer = session.createProducer(topic);
1: 
1:         sendMessageThatFailsSelection();
1: 
1:         sendMessage(textOfSelectedMsg, "value");
1:     }
1: 
1:     private void initSession() throws JMSException {
1:         LOG.info("Initializing session");
1:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     private void sendMessageThatFailsSelection() throws JMSException {
1:         for (int i = 0; i < 5; i++) {
1:             String textOfNotSelectedMsg = "Msg_" + i;
1:             sendMessage(textOfNotSelectedMsg, "not_value");
1:             LOG.info("#");
1:         }
1:     }
1: 
1:     private void sendMessage(
1:             String msgText,
1:             String propertyValue) throws JMSException {
1:         LOG.info("Creating message: " + msgText);
1:         TextMessage messageToSelect = session.createTextMessage(msgText);
1:         messageToSelect.setStringProperty("name", propertyValue);
1:         LOG.info("Sending message");
1:         producer.send(messageToSelect);
1:     }
1: 
1:     protected void initConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory activeMqConnectionFactory = createActiveMqConnectionFactory();
1:         connectionFactory = activeMqConnectionFactory;
1:     }
1: 
1: 
1:     private ActiveMQConnectionFactory createActiveMqConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory activeMqConnectionFactory = new ActiveMQConnectionFactory(
1:                 "failover:" + service.getTransportConnectors().get(0).getConnectUri().toString());
1:         activeMqConnectionFactory.setWatchTopicAdvisories(false);
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setDurableTopicPrefetch(2);
1:         prefetchPolicy.setOptimizeDurableTopicPrefetch(2);
1:         activeMqConnectionFactory.setPrefetchPolicy(prefetchPolicy);
1:         activeMqConnectionFactory.setClientID(CLIENT_ID);
1:         return activeMqConnectionFactory;
1:     }
1: 
1:     private void initDurableBroker() throws Exception {
1:         service = new BrokerService();
1:         setDefaultPersistenceAdapter(service);
1:         service.setDeleteAllMessagesOnStartup(true);
1:         service.setAdvisorySupport(false);
1:         service.setTransportConnectorURIs(new String[]{"tcp://localhost:0"});
1:         service.setPersistent(true);
1:         service.setUseJmx(false);
1:         service.start();
1: 
1:     }
1: 
1:     private void initTopic() throws JMSException {
0:         topicConnection = (TopicConnection) connectionFactory.createConnection();
0:         TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = topicSession.createTopic(TOPIC_NAME);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2580Test.class);
============================================================================