1:c752230: /**
1:c752230:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c752230:  * contributor license agreements.  See the NOTICE file distributed with
1:c752230:  * this work for additional information regarding copyright ownership.
1:c752230:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c752230:  * (the "License"); you may not use this file except in compliance with
1:c752230:  * the License.  You may obtain a copy of the License at
1:c752230:  *
1:c752230:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c752230:  *
1:c752230:  * Unless required by applicable law or agreed to in writing, software
1:c752230:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c752230:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c752230:  * See the License for the specific language governing permissions and
1:c752230:  * limitations under the License.
1:c752230:  */
1:c752230: package org.apache.activemq.usecases;
1:c752230: 
1:c752230: import java.net.URI;
1:c752230: import java.util.Collection;
1:c752230: import java.util.Iterator;
1:c752230: import java.util.List;
1:c752230: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:c752230: import org.apache.activemq.broker.BrokerService;
1:c752230: import org.apache.activemq.broker.TransportConnector;
1:c752230: import org.apache.activemq.broker.region.RegionBroker;
1:c752230: import org.apache.activemq.command.BrokerInfo;
1:c752230: import org.apache.activemq.network.NetworkConnector;
1:c752230: import org.apache.activemq.util.ThreadTracker;
1:54ff0ce: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c752230: 
1:c752230: public class NetworkOfTwentyBrokersTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NetworkOfTwentyBrokersTest.class);
1:c752230: 
1:c752230:     // This will interconnect all brokers using multicast
1:c752230:     protected void bridgeAllBrokers() throws Exception {
1:c752230:         bridgeAllBrokers("TwentyBrokersTest", 1, false, false);
1:c752230:     }
1:c752230: 
1:c752230:     protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs) throws Exception {
1:c752230:         bridgeAllBrokers(groupName, ttl, suppressduplicateQueueSubs, false);
1:c752230:     }
1:c752230: 
1:c752230:     protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs, boolean decreasePriority) throws Exception {
1:c752230:         Collection<BrokerItem> brokerList = brokers.values();
1:c752230:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:c752230:             BrokerService broker = i.next().broker;
1:c752230:             List<TransportConnector> transportConnectors = broker.getTransportConnectors();
1:c752230: 
1:c752230:             if (transportConnectors.isEmpty()) {
1:c752230:                 broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:c752230:                 transportConnectors = broker.getTransportConnectors();
1:c752230:             }
1:c752230: 
1:c752230:             TransportConnector transport = transportConnectors.get(0);
1:c752230:             if (transport.getDiscoveryUri() == null) {
1:c752230:                 transport.setDiscoveryUri(new URI("multicast://default?group=" + groupName));
1:c752230:             }
1:c752230: 
1:c752230:             List<NetworkConnector> networkConnectors = broker.getNetworkConnectors();
1:c752230:             if (networkConnectors.isEmpty()) {
1:c752230:                 broker.addNetworkConnector("multicast://default?group=" + groupName);
1:c752230:                 networkConnectors = broker.getNetworkConnectors();
1:c752230:             }
1:c752230: 
1:c752230:             NetworkConnector nc = networkConnectors.get(0);
1:c752230:             nc.setNetworkTTL(ttl);
1:c752230:             nc.setSuppressDuplicateQueueSubscriptions(suppressduplicateQueueSubs);
1:c752230:             nc.setDecreaseNetworkConsumerPriority(decreasePriority);
1:c752230:         }
1:c752230: 
1:c752230:         // Multicasting may take longer to setup
1:c752230:         maxSetupTime = 8000;
1:c752230:     }
1:c752230: 
1:c752230:     protected BrokerService createBroker(String brokerName) throws Exception {
1:c752230:         BrokerService broker = new BrokerService();
1:c752230:         broker.setPersistent(false);
1:c752230:         broker.setUseJmx(false);
1:c752230:         broker.setBrokerName(brokerName);
1:c752230:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:c752230:         brokers.put(brokerName, new BrokerItem(broker));
1:c752230: 
1:c752230:         return broker;
1:c752230:     }
1:c752230: 
1:c752230:     /* AMQ-3077 Bug */
1:c752230:     public void testBrokers() throws Exception {
1:c752230:         int X = 20;
1:c752230:         int i;
1:c752230: 
1:c752230:         LOG.info("Creating X Brokers");
1:c752230:         for (i = 0; i < X; i++) {
1:c752230:             createBroker("Broker" + i);
1:c752230:         }
1:c752230: 
1:c752230:         bridgeAllBrokers();
1:c752230:         startAllBrokers();
1:c752230:         waitForBridgeFormation(X-1);
1:c752230: 
1:a204c79:         LOG.info("Waiting for complete formation");
1:a204c79:         try {
1:5c199c3:             Thread.sleep(20000);
1:a204c79:         } catch (Exception e) {
1:a204c79:         }
1:a204c79: 
1:c752230:         verifyPeerBrokerInfos(X-1);
1:c752230: 
1:c752230:         LOG.info("Stopping half the brokers");
1:c752230:         for (i = 0; i < X/2; i++) {
1:c752230:             destroyBroker("Broker" + i);
1:c752230:         }
1:c752230: 
1:c752230:         LOG.info("Waiting for complete stop");
1:c752230:         try {
1:5c199c3:             Thread.sleep(20000);
1:c752230:         } catch (Exception e) {
1:c752230:         }
1:c752230: 
1:5c199c3:         verifyPeerBrokerInfos((X/2) - 1);
1:c752230: 
1:c752230:         LOG.info("Recreating first half");
1:c752230:         for (i = 0; i < X/2; i++) {
1:c752230:             createBroker("Broker" + i);
1:c752230:         }
1:c752230: 
1:c752230:         bridgeAllBrokers();
1:c752230:         startAllBrokers();
1:c752230:         waitForBridgeFormation(X-1);
1:c752230: 
1:237f835:         LOG.info("Waiting for complete reformation");
1:237f835:         try {
1:5c199c3:             Thread.sleep(20000);
1:237f835:         } catch (Exception e) {
1:237f835:         }
1:237f835: 
1:c752230:         verifyPeerBrokerInfos(X-1);
1:c752230:     }
1:c752230: 
1:c752230:     public void testPeerBrokerCountHalfPeer() throws Exception {
1:c752230:         createBroker("A");
1:c752230:         createBroker("B");
1:c752230:         bridgeBrokers("A", "B");
1:c752230:         startAllBrokers();
1:c752230:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:c752230:         verifyPeerBrokerInfo(brokers.get("B"), 0);
1:c752230:     }
1:c752230: 
1:c752230:     public void testPeerBrokerCountHalfPeerTwice() throws Exception {
1:c752230:         createBroker("A");
1:c752230:         createBroker("B");
1:c752230:         bridgeBrokers("A", "B");
1:c752230:         bridgeBrokers("A", "B");
1:c752230:         startAllBrokers();
1:c752230:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:c752230:         verifyPeerBrokerInfo(brokers.get("B"), 0);
1:c752230:     }
1:c752230: 
1:c752230:     public void testPeerBrokerCountFullPeer() throws Exception {
1:c752230:         createBroker("A");
1:c752230:         createBroker("B");
1:c752230:         bridgeBrokers("A", "B");
1:c752230:         bridgeBrokers("B", "A");
1:c752230:         startAllBrokers();
1:c752230:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:c752230:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1:c752230:     }
1:c752230: 
1:c752230:     public void testPeerBrokerCountFullPeerDuplex() throws Exception {
1:c752230:         createBroker("A");
1:c752230:         createBroker("B");
1:c752230:         NetworkConnector nc = bridgeBrokers("A", "B");
1:c752230:         nc.setDuplex(true);
1:c752230:         startAllBrokers();
1:c752230:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:c752230:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1:c752230:     }
1:c752230: 
1:c752230: 
1:54ff0ce:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:54ff0ce:         final BrokerService broker = brokerItem.broker;
1:54ff0ce:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:54ff0ce:         Wait.waitFor(new Wait.Condition() {
1:54ff0ce:             @Override
1:54ff0ce:             public boolean isSatisified() throws Exception {
1:54ff0ce:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:54ff0ce:                 return max == regionBroker.getPeerBrokerInfos().length;
1:54ff0ce:             }
1:5c199c3:          }, 120 * 1000);
1:c752230:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:c752230:         for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:c752230:             LOG.info(info.getBrokerName());
1:c752230:         }
1:c752230:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:c752230:     }
1:c752230: 
1:54ff0ce:     private void verifyPeerBrokerInfos(final int max) throws Exception {
1:c752230:         Collection<BrokerItem> brokerList = brokers.values();
1:c752230:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:c752230:             verifyPeerBrokerInfo(i.next(), max);
1:c752230:         }
1:c752230:     }
1:c752230: 
1:c752230:     @Override
1:c752230:     public void setUp() throws Exception {
1:c752230:         super.setAutoFail(true);
1:c752230:         super.setUp();
1:c752230:     }
1:c752230: 
1:c752230:     @Override
1:c752230:     public void tearDown() throws Exception {
1:c752230:         super.tearDown();
1:c752230:         ThreadTracker.result();
1:c752230:     }
1:c752230: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5c199c3
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(20000);
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(20000);
1:         verifyPeerBrokerInfos((X/2) - 1);
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(20000);
/////////////////////////////////////////////////////////////////////////
1:          }, 120 * 1000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:54ff0ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception {
1:         final BrokerService broker = brokerItem.broker;
1:         final RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:                 return max == regionBroker.getPeerBrokerInfos().length;
1:             }
0:          });
/////////////////////////////////////////////////////////////////////////
1:     private void verifyPeerBrokerInfos(final int max) throws Exception {
commit:237f835
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for complete reformation");
1:         try {
0:             Thread.sleep(10000);
1:         } catch (Exception e) {
1:         }
1: 
commit:a204c79
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for complete formation");
1:         try {
0:             Thread.sleep(10000);
1:         } catch (Exception e) {
1:         }
1: 
commit:c752230
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.ThreadTracker;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class NetworkOfTwentyBrokersTest extends JmsMultipleBrokersTestSupport {
0:     private static final Log LOG = LogFactory.getLog(NetworkOfTwentyBrokersTest.class);
1: 
1:     // This will interconnect all brokers using multicast
1:     protected void bridgeAllBrokers() throws Exception {
1:         bridgeAllBrokers("TwentyBrokersTest", 1, false, false);
1:     }
1: 
1:     protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs) throws Exception {
1:         bridgeAllBrokers(groupName, ttl, suppressduplicateQueueSubs, false);
1:     }
1: 
1:     protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs, boolean decreasePriority) throws Exception {
1:         Collection<BrokerItem> brokerList = brokers.values();
1:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:             BrokerService broker = i.next().broker;
1:             List<TransportConnector> transportConnectors = broker.getTransportConnectors();
1: 
1:             if (transportConnectors.isEmpty()) {
1:                 broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:                 transportConnectors = broker.getTransportConnectors();
1:             }
1: 
1:             TransportConnector transport = transportConnectors.get(0);
1:             if (transport.getDiscoveryUri() == null) {
1:                 transport.setDiscoveryUri(new URI("multicast://default?group=" + groupName));
1:             }
1: 
1:             List<NetworkConnector> networkConnectors = broker.getNetworkConnectors();
1:             if (networkConnectors.isEmpty()) {
1:                 broker.addNetworkConnector("multicast://default?group=" + groupName);
1:                 networkConnectors = broker.getNetworkConnectors();
1:             }
1: 
1:             NetworkConnector nc = networkConnectors.get(0);
1:             nc.setNetworkTTL(ttl);
1:             nc.setSuppressDuplicateQueueSubscriptions(suppressduplicateQueueSubs);
1:             nc.setDecreaseNetworkConsumerPriority(decreasePriority);
1:         }
1: 
1:         // Multicasting may take longer to setup
1:         maxSetupTime = 8000;
1:     }
1: 
1:     protected BrokerService createBroker(String brokerName) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.setBrokerName(brokerName);
1:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:         brokers.put(brokerName, new BrokerItem(broker));
1: 
1:         return broker;
1:     }
1: 
1:     /* AMQ-3077 Bug */
1:     public void testBrokers() throws Exception {
1:         int X = 20;
1:         int i;
1: 
1:         LOG.info("Creating X Brokers");
1:         for (i = 0; i < X; i++) {
1:             createBroker("Broker" + i);
1:         }
1: 
1:         bridgeAllBrokers();
1:         startAllBrokers();
1:         waitForBridgeFormation(X-1);
1: 
1:         verifyPeerBrokerInfos(X-1);
1: 
1:         LOG.info("Stopping half the brokers");
1:         for (i = 0; i < X/2; i++) {
1:             destroyBroker("Broker" + i);
1:         }
1: 
1:         LOG.info("Waiting for complete stop");
1:         try {
0:             Thread.sleep(10000);
1:         } catch (Exception e) {
1:         }
1: 
0:         verifyPeerBrokerInfos((X/2) -1);
1: 
1:         LOG.info("Recreating first half");
1:         for (i = 0; i < X/2; i++) {
1:             createBroker("Broker" + i);
1:         }
1: 
1:         bridgeAllBrokers();
1:         startAllBrokers();
1:         waitForBridgeFormation(X-1);
1: 
1:         verifyPeerBrokerInfos(X-1);
1:     }
1: 
1:     public void testPeerBrokerCountHalfPeer() throws Exception {
1:         createBroker("A");
1:         createBroker("B");
1:         bridgeBrokers("A", "B");
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:         verifyPeerBrokerInfo(brokers.get("B"), 0);
1:     }
1: 
1:     public void testPeerBrokerCountHalfPeerTwice() throws Exception {
1:         createBroker("A");
1:         createBroker("B");
1:         bridgeBrokers("A", "B");
1:         bridgeBrokers("A", "B");
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:         verifyPeerBrokerInfo(brokers.get("B"), 0);
1:     }
1: 
1:     public void testPeerBrokerCountFullPeer() throws Exception {
1:         createBroker("A");
1:         createBroker("B");
1:         bridgeBrokers("A", "B");
1:         bridgeBrokers("B", "A");
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1:     }
1: 
1:     public void testPeerBrokerCountFullPeerDuplex() throws Exception {
1:         createBroker("A");
1:         createBroker("B");
1:         NetworkConnector nc = bridgeBrokers("A", "B");
1:         nc.setDuplex(true);
1:         startAllBrokers();
1:         verifyPeerBrokerInfo(brokers.get("A"), 1);
1:         verifyPeerBrokerInfo(brokers.get("B"), 1);
1:     }
1: 
1: 
0:     private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) {
0:         BrokerService broker = brokerItem.broker;
0:         RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         LOG.info("verify infos " + broker.getBrokerName() + ", len: " + regionBroker.getPeerBrokerInfos().length);
1:         for (BrokerInfo info : regionBroker.getPeerBrokerInfos()) {
1:             LOG.info(info.getBrokerName());
1:         }
1:         assertEquals(broker.getBrokerName(), max, regionBroker.getPeerBrokerInfos().length);
1:     }
1: 
0:     private void verifyPeerBrokerInfos(final int max) {
1:         Collection<BrokerItem> brokerList = brokers.values();
1:         for (Iterator<BrokerItem> i = brokerList.iterator(); i.hasNext();) {
1:             verifyPeerBrokerInfo(i.next(), max);
1:         }
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         ThreadTracker.result();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkOfTwentyBrokersTest.class);
============================================================================