1:10dae9c: /**
1:10dae9c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:10dae9c:  * contributor license agreements.  See the NOTICE file distributed with
1:10dae9c:  * this work for additional information regarding copyright ownership.
1:10dae9c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:10dae9c:  * (the "License"); you may not use this file except in compliance with
1:10dae9c:  * the License.  You may obtain a copy of the License at
1:10dae9c:  *
1:10dae9c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:10dae9c:  *
1:10dae9c:  * Unless required by applicable law or agreed to in writing, software
1:10dae9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:10dae9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:10dae9c:  * See the License for the specific language governing permissions and
1:10dae9c:  * limitations under the License.
1:10dae9c:  */
1:10dae9c: package org.apache.activemq.usecases;
1:ea82d5d: 
1:10dae9c: import java.net.URI;
1:2bdddc2: import java.util.Arrays;
1:10dae9c: import java.util.Enumeration;
1:2bdddc2: 
1:10dae9c: import javax.jms.Destination;
1:10dae9c: import javax.jms.MessageConsumer;
1:10dae9c: import javax.jms.QueueBrowser;
1:ea82d5d: 
1:10dae9c: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:49718ed: import org.apache.activemq.broker.BrokerService;
1:10dae9c: import org.apache.activemq.broker.region.QueueSubscription;
1:2bdddc2: import org.apache.activemq.command.ActiveMQDestination;
1:2bdddc2: import org.apache.activemq.command.ActiveMQTextMessage;
1:2bdddc2: import org.apache.activemq.network.NetworkConnector;
1:10dae9c: import org.apache.activemq.util.MessageIdList;
1:49718ed: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ea82d5d: import org.springframework.core.io.ClassPathResource;
1:ea82d5d: 
1:10dae9c: public class BrowseOverNetworkTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueueSubscription.class);
1:10dae9c:     protected static final int MESSAGE_COUNT = 10;
1:ea82d5d: 
1:10dae9c:     public void testBrowse() throws Exception {
1:ea82d5d:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:ea82d5d:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:ea82d5d: 
1:10dae9c:         bridgeBrokers("BrokerA", "BrokerB");
1:ea82d5d: 
1:ea82d5d: 
1:ea82d5d:         startAllBrokers();
1:ea82d5d: 
1:10dae9c:         Destination dest = createDestination("TEST.FOO", false);
1:ea82d5d: 
1:10dae9c:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:ea82d5d: 
1:3e8abcc:         Thread.sleep(1000);
1:3e8abcc: 
1:34f1929:         int browsed = browseMessages("BrokerB", dest);
1:34f1929: 
1:3e8abcc:         Thread.sleep(1000);
1:2bdddc2: 
1:10dae9c:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:10dae9c:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:10dae9c:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:2bdddc2: 
1:34f1929:         Thread.sleep(1000);
1:10dae9c:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:10dae9c:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:10dae9c:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:2bdddc2: 
1:10dae9c:         LOG.info("A+B: " + msgsA.getMessageCount() + "+"
2:10dae9c:                 + msgsB.getMessageCount());
1:34f1929:         assertEquals("Consumer on Broker A, should've consumed all messages", MESSAGE_COUNT, msgsA.getMessageCount());
1:34f1929:         assertEquals("Broker B shouldn't get any messages", 0, browsed);
3:10dae9c:     }
1:2bdddc2: 
1:2bdddc2:     public void testConsumerInfo() throws Exception {
1:ea82d5d:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1.xml"));
1:ea82d5d:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2.xml"));
1:2bdddc2: 
1:2bdddc2:         startAllBrokers();
1:2bdddc2: 
1:ea82d5d:         brokers.get("broker1").broker.waitUntilStarted();
1:2bdddc2: 
1:2bdddc2: 
1:ea82d5d:         Destination dest = createDestination("QUEUE.A,QUEUE.B", false);
1:2bdddc2: 
1:2bdddc2: 
1:ea82d5d:         int broker1 = browseMessages("broker1", dest);
1:ea82d5d:         assertEquals("Browsed a message on an empty queue", 0, broker1);
1:34f1929:         Thread.sleep(1000);
1:ea82d5d:         int broker2 = browseMessages("broker2", dest);
1:ea82d5d:         assertEquals("Browsed a message on an empty queue", 0, broker2);
1:2bdddc2: 
1:ea82d5d:     }
1:2bdddc2: 
1:2bdddc2:     public class Browser extends Thread {
1:2bdddc2: 
1:2bdddc2:         String broker;
1:2bdddc2:         Destination dest;
1:2bdddc2:         int totalCount;
1:49718ed:         final int expect;
1:2bdddc2:         QueueBrowser browser = null;
1:2bdddc2:         MessageConsumer consumer = null;
1:2bdddc2:         boolean consume = false;
1:2bdddc2: 
1:49718ed:         public Browser(String broker, Destination dest, int expect) {
1:2bdddc2:             this.broker = broker;
1:2bdddc2:             this.dest = dest;
1:49718ed:             this.expect = expect;
1:2bdddc2:         }
1:2bdddc2: 
1:4743a20:         @Override
1:2bdddc2:         public void run() {
1:2bdddc2:             int retries = 0;
1:49718ed:             while (retries++ < 20 && totalCount != expect) {
1:2bdddc2:                 try {
1:2bdddc2:                     QueueBrowser browser = createBrowser(broker, dest);
1:2bdddc2:                     int count  = browseMessages(browser, broker);
1:2bdddc2:                     if (consume) {
1:2bdddc2:                         if (count != 0) {
1:2bdddc2:                             MessageConsumer consumer = createSyncConsumer(broker, dest);
1:2bdddc2:                             totalCount += count;
1:2bdddc2:                             for (int i = 0; i < count; i++) {
1:2bdddc2:                                 ActiveMQTextMessage message = (ActiveMQTextMessage)consumer.receive(1000);
1:2bdddc2:                                 if (message == null) break;
1:4743a20:                                 LOG.info(broker + " consumer: " + message.getText() + " " + message.getDestination() +  " " + message.getMessageId() + " " + Arrays.toString(message.getBrokerPath()));
1:2bdddc2:                             }
1:2bdddc2:                         }
1:2bdddc2:                     } else {
1:2bdddc2:                         totalCount = count;
1:2bdddc2:                     }
1:7983abf:                     LOG.info("browser '" + broker + "' browsed " + totalCount);
1:2bdddc2: 
1:34f1929:                     Thread.sleep(1000);
1:2bdddc2:                 } catch (Exception e) {
1:2bdddc2:                     LOG.info("Exception browsing " + e, e);
1:2bdddc2:                 } finally {
1:2bdddc2:                     try {
1:2bdddc2:                         if (browser != null) {
1:2bdddc2:                             browser.close();
1:2bdddc2:                         }
1:2bdddc2:                         if (consumer != null) {
1:2bdddc2:                             consumer.close();
1:2bdddc2:                         }
1:2bdddc2:                     } catch (Exception e) {
1:2bdddc2:                         LOG.info("Exception closing browser " + e, e);
1:2bdddc2:                     }
1:2bdddc2:                 }
1:2bdddc2:             }
1:2bdddc2:         }
1:2bdddc2: 
1:2bdddc2:         public int getTotalCount() {
1:2bdddc2:             return totalCount;
1:2bdddc2:         }
1:2bdddc2:     }
1:2bdddc2: 
1:2bdddc2:     protected NetworkConnector bridgeBrokersWithIncludedDestination(String localBrokerName, String remoteBrokerName, ActiveMQDestination included, ActiveMQDestination excluded) throws Exception {
1:2bdddc2:         NetworkConnector nc = bridgeBrokers(localBrokerName, remoteBrokerName, false, 4, true);
1:2bdddc2:         nc.addStaticallyIncludedDestination(included);
1:2bdddc2:         if (excluded != null) {
1:2bdddc2:             nc.addExcludedDestination(excluded);
1:2bdddc2:         }
1:2bdddc2:         nc.setPrefetchSize(1);
1:2bdddc2:         return nc;
1:2bdddc2:     }
1:2bdddc2: 
1:7983abf:     public void testAMQ3020() throws Exception {
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1A.xml"));
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1B.xml"));
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2A.xml"));
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2B.xml"));
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker3A.xml"));
1:7983abf:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker3B.xml"));
1:7983abf: 
1:7983abf:         brokers.get("broker-1A").broker.waitUntilStarted();
1:7983abf:         brokers.get("broker-2A").broker.waitUntilStarted();
1:7983abf:         brokers.get("broker-3A").broker.waitUntilStarted();
1:7983abf: 
1:49718ed:          for (BrokerItem brokerItem : brokers.values()) {
1:49718ed:             final BrokerService broker = brokerItem.broker;
1:49718ed:             waitForBridgeFormation(broker, 1, 0);
1:49718ed:             waitForBridgeFormation(broker, 1, 1);
1:49718ed:             waitForBridgeFormation(broker, 1, 2);
1:49718ed:             waitForBridgeFormation(broker, 1, 3);
1:49718ed:             waitForBridgeFormation(broker, 1, 4);
1:49718ed:          }
1:49718ed: 
1:7983abf:         Destination composite = createDestination("PROD.FUSESOURCE.3.A,PROD.FUSESOURCE.3.B", false);
1:7983abf: 
1:49718ed:         final Browser browser1 = new Browser("broker-3A", composite, MESSAGE_COUNT);
1:7983abf:         browser1.start();
1:7983abf: 
1:49718ed:         final Browser browser2 = new Browser("broker-3B", composite, MESSAGE_COUNT);
1:7983abf:         browser2.start();
1:3e8abcc: 
1:49718ed:         LOG.info("Sending messages to broker-1A");
1:7983abf:         sendMessages("broker-1A", composite, MESSAGE_COUNT);
1:49718ed:         LOG.info("Message sent to broker-1A");
1:49718ed: 
1:49718ed:         Wait.waitFor(new Wait.Condition() {
1:49718ed:             @Override
1:49718ed:             public boolean isSatisified() throws Exception {
1:49718ed:                 return browser1.getTotalCount() == MESSAGE_COUNT;
1:49718ed:             }
1:49718ed:         });
1:49718ed:         Wait.waitFor(new Wait.Condition() {
1:49718ed:             @Override
1:49718ed:             public boolean isSatisified() throws Exception {
1:49718ed:                 return browser2.getTotalCount() == MESSAGE_COUNT;
1:49718ed:             }
1:49718ed:         });
1:7983abf: 
1:7983abf:         browser1.join();
1:7983abf:         browser2.join();
1:7983abf: 
1:7983abf: 
1:7983abf:         LOG.info("broker-3A browsed " + browser1.getTotalCount());
1:7983abf:         LOG.info("broker-3B browsed " + browser2.getTotalCount());
1:4743a20: 
1:7983abf:         assertEquals(MESSAGE_COUNT * 2, browser1.getTotalCount() + browser2.getTotalCount() );
1:7983abf: 
1:4743a20:     }
1:7983abf: 
1:2bdddc2:     protected int browseMessages(QueueBrowser browser, String name) throws Exception {
1:4743a20:         Enumeration<?> msgs = browser.getEnumeration();
1:10dae9c:         int browsedMessage = 0;
1:10dae9c:         while (msgs.hasMoreElements()) {
1:10dae9c:             browsedMessage++;
1:2bdddc2:             ActiveMQTextMessage message = (ActiveMQTextMessage)msgs.nextElement();
1:2bdddc2:             LOG.info(name + " browsed: " + message.getText() + " " + message.getDestination() +  " " + message.getMessageId() + " " + Arrays.toString(message.getBrokerPath()));
1:7983abf:         }
1:ea82d5d:         return browsedMessage;
1:2bdddc2:     }
1:7983abf: 
1:7983abf: 
1:2bdddc2:     protected int browseMessages(String broker, Destination dest) throws Exception {
1:2bdddc2:         QueueBrowser browser = createBrowser(broker, dest);
1:2bdddc2:         int browsedMessage = browseMessages(browser, "browser");
1:2bdddc2:         browser.close();
1:2bdddc2:         return browsedMessage;
1:2bdddc2:     }
1:2bdddc2: 
1:4743a20:     @Override
1:10dae9c:     public void setUp() throws Exception {
1:10dae9c:         super.setAutoFail(true);
1:10dae9c:         super.setUp();
1:10dae9c:     }
1:2bdddc2: 
1:10dae9c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:                                 LOG.info(broker + " consumer: " + message.getText() + " " + message.getDestination() +  " " + message.getMessageId() + " " + Arrays.toString(message.getBrokerPath()));
/////////////////////////////////////////////////////////////////////////
1: 
1:     }
1:         Enumeration<?> msgs = browser.getEnumeration();
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:49718ed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final int expect;
1:         public Browser(String broker, Destination dest, int expect) {
1:             this.expect = expect;
1:             while (retries++ < 20 && totalCount != expect) {
/////////////////////////////////////////////////////////////////////////
1:          for (BrokerItem brokerItem : brokers.values()) {
1:             final BrokerService broker = brokerItem.broker;
1:             waitForBridgeFormation(broker, 1, 0);
1:             waitForBridgeFormation(broker, 1, 1);
1:             waitForBridgeFormation(broker, 1, 2);
1:             waitForBridgeFormation(broker, 1, 3);
1:             waitForBridgeFormation(broker, 1, 4);
1:          }
1: 
1:         final Browser browser1 = new Browser("broker-3A", composite, MESSAGE_COUNT);
1:         final Browser browser2 = new Browser("broker-3B", composite, MESSAGE_COUNT);
1:         LOG.info("Sending messages to broker-1A");
1:         LOG.info("Message sent to broker-1A");
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return browser1.getTotalCount() == MESSAGE_COUNT;
1:             }
1:         });
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return browser2.getTotalCount() == MESSAGE_COUNT;
1:             }
1:         });
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueSubscription.class);
commit:3e8abcc
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1000);
1: 
1:         Thread.sleep(1000);
1: 
commit:a23bb30
/////////////////////////////////////////////////////////////////////////
commit:34f1929
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1000);
1:         int browsed = browseMessages("BrokerB", dest);
1: 
1:         Thread.sleep(1000);
1:         Thread.sleep(1000);
1:         assertEquals("Consumer on Broker A, should've consumed all messages", MESSAGE_COUNT, msgsA.getMessageCount());
1:         assertEquals("Broker B shouldn't get any messages", 0, browsed);
/////////////////////////////////////////////////////////////////////////
0:         brokers.get("BrokerB").broker.waitUntilStarted();
commit:7983abf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("browser '" + broker + "' browsed " + totalCount);
/////////////////////////////////////////////////////////////////////////
1:     public void testAMQ3020() throws Exception {
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1A.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1B.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2A.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2B.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker3A.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker3B.xml"));
1: 
1:         brokers.get("broker-1A").broker.waitUntilStarted();
1:         brokers.get("broker-2A").broker.waitUntilStarted();
1:         brokers.get("broker-3A").broker.waitUntilStarted();
1: 
1:         Destination composite = createDestination("PROD.FUSESOURCE.3.A,PROD.FUSESOURCE.3.B", false);
1: 
0:         Browser browser1 = new Browser("broker-3A", composite);
1:         browser1.start();
1: 
0:         Browser browser2 = new Browser("broker-3B", composite);
1:         browser2.start();
1: 
1:         sendMessages("broker-1A", composite, MESSAGE_COUNT);
1: 
1:         browser1.join();
1:         browser2.join();
1: 
1: 
1:         LOG.info("broker-3A browsed " + browser1.getTotalCount());
1:         LOG.info("broker-3B browsed " + browser2.getTotalCount());
1:         
1:         assertEquals(MESSAGE_COUNT * 2, browser1.getTotalCount() + browser2.getTotalCount() );
1: 
1:     }    
1: 
commit:2bdddc2
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
0: import javax.jms.Message;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerInfo() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public class Browser extends Thread {
1: 
1:         String broker;
1:         Destination dest;
1:         int totalCount;
1:         QueueBrowser browser = null;
1:         MessageConsumer consumer = null;
1:         boolean consume = false;
1: 
0:         public Browser(String broker, Destination dest) {
1:             this.broker = broker;
1:             this.dest = dest;
1:         }
1: 
1:         public void run() {
1:             int retries = 0;
0:             while (retries++ < 5) {
1:                 try {
1:                     QueueBrowser browser = createBrowser(broker, dest);
1:                     int count  = browseMessages(browser, broker);
0:                     LOG.info("browser '" + broker + "' browsed " + totalCount);
1:                     if (consume) {
1:                         if (count != 0) {
1:                             MessageConsumer consumer = createSyncConsumer(broker, dest);
1:                             totalCount += count;
1:                             for (int i = 0; i < count; i++) {
1:                                 ActiveMQTextMessage message = (ActiveMQTextMessage)consumer.receive(1000);
0:                                 LOG.info(broker + " consumer: " + message.getText() + " " + message.getDestination() +  " " + message.getMessageId() + " " + Arrays.toString(message.getBrokerPath()));
1:                                 if (message == null) break;
1:                             }
1:                         }
1:                     } else {
1:                         totalCount = count;
1:                     }
1: 
0:                     Thread.sleep(1000);
1:                 } catch (Exception e) {
1:                     LOG.info("Exception browsing " + e, e);
1:                 } finally {
1:                     try {
1:                         if (browser != null) {
1:                             browser.close();
1:                         }
1:                         if (consumer != null) {
1:                             consumer.close();
1:                         }
1:                     } catch (Exception e) {
1:                         LOG.info("Exception closing browser " + e, e);
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         public int getTotalCount() {
1:             return totalCount;
1:         }
1:     }
1: 
1:     protected NetworkConnector bridgeBrokersWithIncludedDestination(String localBrokerName, String remoteBrokerName, ActiveMQDestination included, ActiveMQDestination excluded) throws Exception {
1:         NetworkConnector nc = bridgeBrokers(localBrokerName, remoteBrokerName, false, 4, true);
1:         nc.addStaticallyIncludedDestination(included);
1:         if (excluded != null) {
1:             nc.addExcludedDestination(excluded);
1:         }
1:         nc.setPrefetchSize(1);
1:         return nc;
1:     }
1: 
1: 
0:     public void testMultipleBrowsers() throws Exception {
0:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false&brokerId=BrokerA"));
0:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false&brokerId=BrokerB"));
0:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC?persistent=false&useJmx=false&brokerId=BrokerC"));
0:         createBroker(new URI("broker:(tcp://localhost:61619)/BrokerD?persistent=false&useJmx=false&brokerId=BrokerD"));
1: 
0:         Destination composite = createDestination("TEST.FOO,TEST.BAR", false);
0:         Destination dest1 = createDestination("TEST.FOO", false);
0:         Destination dest2 = createDestination("TEST.BAR", false);
1: 
0:         bridgeBrokersWithIncludedDestination("BrokerA", "BrokerC", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerA", "BrokerB", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerA", "BrokerD", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerB", "BrokerA", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerB", "BrokerC", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerB", "BrokerD", (ActiveMQDestination)composite, null);
0:         bridgeBrokersWithIncludedDestination("BrokerC", "BrokerA", (ActiveMQDestination)dest2, (ActiveMQDestination)dest1);
0:         bridgeBrokersWithIncludedDestination("BrokerC", "BrokerB", (ActiveMQDestination)dest2, (ActiveMQDestination)dest1);
0:         bridgeBrokersWithIncludedDestination("BrokerC", "BrokerD", (ActiveMQDestination)dest2, (ActiveMQDestination)dest1);
0:         bridgeBrokersWithIncludedDestination("BrokerD", "BrokerA", (ActiveMQDestination)dest1, (ActiveMQDestination)dest2);
0:         bridgeBrokersWithIncludedDestination("BrokerD", "BrokerB", (ActiveMQDestination)dest1, (ActiveMQDestination)dest2);
0:         bridgeBrokersWithIncludedDestination("BrokerD", "BrokerC", (ActiveMQDestination)dest1, (ActiveMQDestination)dest2);
1: 
1:         startAllBrokers();
1: 
0:         brokers.get("BrokerA").broker.waitUntilStarted();
0:         brokers.get("BrokerC").broker.waitUntilStarted();
0:         brokers.get("BrokerD").broker.waitUntilStarted();
1: 
0:         Browser browser1 = new Browser("BrokerC", composite);
0:         browser1.start();
1: 
0:         Browser browser2 = new Browser("BrokerD", composite);
0:         browser2.start();
1: 
0:         sendMessages("BrokerA", composite, MESSAGE_COUNT);
1: 
0:         browser1.join();
0:         browser2.join();
1: 
0:         assertEquals(MESSAGE_COUNT * 2, browser1.getTotalCount() + browser2.getTotalCount() );
1: 
1:     }
1: 
1:     protected int browseMessages(QueueBrowser browser, String name) throws Exception {
1:             ActiveMQTextMessage message = (ActiveMQTextMessage)msgs.nextElement();
1:             LOG.info(name + " browsed: " + message.getText() + " " + message.getDestination() +  " " + message.getMessageId() + " " + Arrays.toString(message.getBrokerPath()));
1: 
1:     protected int browseMessages(String broker, Destination dest) throws Exception {
1:         QueueBrowser browser = createBrowser(broker, dest);
1:         int browsedMessage = browseMessages(browser, "browser");
1:         browser.close();
1:         return browsedMessage;
1:     }
1: 
commit:ea82d5d
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.core.io.ClassPathResource;
1:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1: 
1: 
0:         browseMessages("BrokerB", dest);
/////////////////////////////////////////////////////////////////////////
0:     public void testconsumerInfo() throws Exception {
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker1.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/browse-broker2.xml"));
1: 
1:         startAllBrokers();
1: 
1:         brokers.get("broker1").broker.waitUntilStarted();
1: 
1:         
1:         Destination dest = createDestination("QUEUE.A,QUEUE.B", false);
1: 
1: 
1:         int broker1 = browseMessages("broker1", dest);
1:         assertEquals("Browsed a message on an empty queue", 0, broker1);
0:         Thread.sleep(1000);
1:         int broker2 = browseMessages("broker2", dest);
1:         assertEquals("Browsed a message on an empty queue", 0, broker2);
1: 
1:     }
1: 
0:     protected int browseMessages(String broker, Destination dest) throws Exception {
0:         QueueBrowser browser = createBrowser(broker, dest);
1:         return browsedMessage;
commit:be01a5b
/////////////////////////////////////////////////////////////////////////
commit:10dae9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
0: 
1: import java.net.URI;
1: import java.util.Enumeration;
0: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.QueueBrowser;
0: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.region.QueueSubscription;
1: import org.apache.activemq.util.MessageIdList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
1: public class BrowseOverNetworkTest extends JmsMultipleBrokersTestSupport {
0:     private static final Log LOG = LogFactory.getLog(QueueSubscription.class);
1:     protected static final int MESSAGE_COUNT = 10;
0: 
1:     public void testBrowse() throws Exception {
1:         bridgeBrokers("BrokerA", "BrokerB");
0: 
0:         startAllBrokers();
0: 
1:         Destination dest = createDestination("TEST.FOO", false);
0: 
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
0: 
0:         browseMessages(dest);
0: 
0:         Thread.sleep(2000);
0: 
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
0: 
0:         Thread.sleep(2000);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
0: 
1:         LOG.info("A+B: " + msgsA.getMessageCount() + "+"
1:                 + msgsB.getMessageCount());
0:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount()
1:                 + msgsB.getMessageCount());
1:     }
0: 
0:     protected void browseMessages(Destination dest) throws Exception {
0:         QueueBrowser browser = createBrowser("BrokerB", dest);
0:         Enumeration msgs = browser.getEnumeration();
1:         int browsedMessage = 0;
1:         while (msgs.hasMoreElements()) {
1:             browsedMessage++;
0:             msgs.nextElement();
1:         }
0:         System.out.println(browsedMessage);
1:     }
0: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         createBroker(new URI(
0:                 "broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
0:         createBroker(new URI(
0:                 "broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:     }
0: 
1: }
============================================================================