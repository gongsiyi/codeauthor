1:db71b43: /*
1:f56ea45:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f56ea45:  * contributor license agreements.  See the NOTICE file distributed with
1:f56ea45:  * this work for additional information regarding copyright ownership.
1:f56ea45:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f56ea45:  * (the "License"); you may not use this file except in compliance with
1:f56ea45:  * the License.  You may obtain a copy of the License at
1:f56ea45:  *
1:f56ea45:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f56ea45:  *
1:f56ea45:  * Unless required by applicable law or agreed to in writing, software
1:f56ea45:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f56ea45:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f56ea45:  * See the License for the specific language governing permissions and
1:f56ea45:  * limitations under the License.
1:f56ea45:  */
1:f56ea45: package org.apache.activemq.transport.amqp.interop;
1:f56ea45: 
1:f56ea45: import static org.junit.Assert.assertEquals;
1:11da37b: import static org.junit.Assert.assertFalse;
1:351d4b9: import static org.junit.Assert.assertNotNull;
1:d74c087: import static org.junit.Assert.assertNull;
1:11da37b: import static org.junit.Assert.assertTrue;
1:351d4b9: 
1:6402898: import java.util.ArrayList;
1:88daeec: import java.util.LinkedList;
1:6402898: import java.util.List;
1:88daeec: import java.util.concurrent.CountDownLatch;
1:88daeec: import java.util.concurrent.ExecutorService;
1:88daeec: import java.util.concurrent.Executors;
1:f56ea45: import java.util.concurrent.TimeUnit;
1:e050519: import java.util.concurrent.atomic.AtomicBoolean;
1:f56ea45: 
1:ee271af: import javax.jms.Queue;
1:ee271af: import javax.jms.Topic;
1:ee271af: 
1:2fdc260: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:f56ea45: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:db71b43: import org.apache.activemq.junit.ActiveMQTestRunner;
1:db71b43: import org.apache.activemq.junit.Repeat;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:f56ea45: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:2fdc260: import org.apache.activemq.util.Wait;
1:f56ea45: import org.junit.Test;
1:db71b43: import org.junit.runner.RunWith;
1:db71b43: import org.slf4j.Logger;
1:db71b43: import org.slf4j.LoggerFactory;
1:f56ea45: 
2:f56ea45: /**
1:ee271af:  * Test basic send and receive scenarios using only AMQP sender and receiver
1:ee271af:  * links.
1:f56ea45:  */
1:db71b43: @RunWith(ActiveMQTestRunner.class)
1:f56ea45: public class AmqpSendReceiveTest extends AmqpClientTestSupport {
1:f56ea45: 
1:db71b43:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpSendReceiveTest.class);
1:db71b43: 
1:db71b43:     @Test(timeout = 60000)
1:e050519:     public void testSimpleSendOneReceiveOneToQueue() throws Exception {
1:e050519:         doTestSimpleSendOneReceiveOne(Queue.class);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testSimpleSendOneReceiveOneToTopic() throws Exception {
1:e050519:         doTestSimpleSendOneReceiveOne(Topic.class);
1:e050519:     }
1:e050519: 
1:e050519:     public void doTestSimpleSendOneReceiveOne(Class<?> destType) throws Exception {
1:e050519: 
1:e050519:         final String address;
1:e050519:         if (Queue.class.equals(destType)) {
1:e050519:             address = "queue://" + getTestName();
1:e050519:         } else {
1:e050519:             address = "topic://" + getTestName();
1:e050519:         }
1:ee271af: 
1:ee271af:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:ee271af:         AmqpSession session = connection.createSession();
1:ee271af: 
1:e050519:         AmqpSender sender = session.createSender(address);
1:e050519:         AmqpReceiver receiver = session.createReceiver(address);
1:ee271af: 
1:ee271af:         AmqpMessage message = new AmqpMessage();
1:ee271af: 
1:ee271af:         message.setMessageId("msg" + 1);
1:ee271af:         message.setMessageAnnotation("serialNo", 1);
1:ee271af:         message.setText("Test-Message");
1:ee271af: 
1:ee271af:         sender.send(message);
1:ee271af:         sender.close();
1:ee271af: 
1:ee271af:         LOG.info("Attempting to read message with receiver");
1:ee271af:         receiver.flow(2);
1:ee271af:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:ee271af:         assertNotNull("Should have read message", received);
1:ee271af:         assertEquals("msg1", received.getMessageId());
1:ee271af:         received.accept();
1:ee271af: 
1:ee271af:         receiver.close();
1:ee271af: 
1:ee271af:         connection.close();
1:6402898:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:f56ea45:     public void testCloseBusyReceiver() throws Exception {
1:f56ea45:         final int MSG_COUNT = 20;
1:e050519: 
1:da9fede:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:da9fede:         AmqpSession session = connection.createSession();
1:da9fede: 
1:ee271af:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:da9fede: 
1:f56ea45:         for (int i = 0; i < MSG_COUNT; i++) {
1:351d4b9:             AmqpMessage message = new AmqpMessage();
1:da9fede: 
1:f56ea45:             message.setMessageId("msg" + i);
1:f56ea45:             message.setMessageAnnotation("serialNo", i);
1:f56ea45:             message.setText("Test-Message");
1:da9fede: 
1:351d4b9:             sender.send(message);
1:ee271af:         }
1:6402898: 
1:6402898:         sender.close();
1:ee271af: 
1:f56ea45:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:f56ea45:         assertEquals(20, queue.getQueueSize());
1:534dbee: 
1:f56ea45:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:f56ea45:         receiver1.flow(MSG_COUNT);
1:f56ea45:         AmqpMessage received = receiver1.receive(5, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have got a message", received);
1:f56ea45:         assertEquals("msg0", received.getMessageId());
1:f56ea45:         receiver1.close();
1:351d4b9: 
1:f56ea45:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:f56ea45:         receiver2.flow(200);
1:f56ea45:         for (int i = 0; i < MSG_COUNT; ++i) {
1:af13292:             received = receiver2.receive(5, TimeUnit.SECONDS);
1:33e27a4:             assertNotNull("Should have got a message", received);
1:f56ea45:             assertEquals("msg" + i, received.getMessageId());
1:f56ea45:         }
1:351d4b9: 
1:f56ea45:         receiver2.close();
1:db71b43:         connection.close();
1:db71b43:     }
1:db71b43: 
1:da9fede:     @Test(timeout = 60000)
1:351d4b9:     public void testReceiveWithJMSSelectorFilter() throws Exception {
1:351d4b9:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:351d4b9:         AmqpSession session = connection.createSession();
1:db71b43: 
1:d74c087:         AmqpMessage message1 = new AmqpMessage();
1:d74c087:         message1.setGroupId("abcdefg");
1:d74c087:         message1.setApplicationProperty("sn", 100);
1:db71b43: 
1:d74c087:         AmqpMessage message2 = new AmqpMessage();
1:d74c087:         message2.setGroupId("hijklm");
1:d74c087:         message2.setApplicationProperty("sn", 200);
1:11da37b: 
1:351d4b9:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:d74c087:         sender.send(message1);
1:d74c087:         sender.send(message2);
1:351d4b9:         sender.close();
1:11da37b: 
1:351d4b9:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName(), "sn = 100");
1:d74c087:         receiver.flow(2);
1:351d4b9:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have read a message", received);
1:351d4b9:         assertEquals(100, received.getApplicationProperty("sn"));
1:351d4b9:         assertEquals("abcdefg", received.getGroupId());
1:351d4b9:         received.accept();
1:351d4b9: 
1:d74c087:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:351d4b9: 
1:351d4b9:         receiver.close();
1:db71b43:         connection.close();
1:351d4b9:     }
1:351d4b9: 
1:6402898:     @Test(timeout = 60000)
1:db71b43:     @Repeat(repetitions = 1)
1:351d4b9:     public void testAdvancedLinkFlowControl() throws Exception {
1:db71b43:         final int MSG_COUNT = 20;
1:db71b43: 
1:db71b43:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:db71b43:         AmqpSession session = connection.createSession();
1:db71b43: 
1:db71b43:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:db71b43: 
1:db71b43:         for (int i = 0; i < MSG_COUNT; i++) {
1:db71b43:             AmqpMessage message = new AmqpMessage();
1:db71b43: 
1:db71b43:             message.setMessageId("msg" + i);
1:db71b43:             message.setMessageAnnotation("serialNo", i);
1:db71b43:             message.setText("Test-Message");
1:db71b43: 
1:db71b43:             sender.send(message);
1:db71b43:         }
1:db71b43: 
1:db71b43:         sender.close();
1:db71b43: 
1:db71b43:         LOG.info("Attempting to read first two messages with receiver #1");
1:db71b43:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:351d4b9:         receiver1.flow(2);
1:db71b43:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:db71b43:         AmqpMessage message2 = receiver1.receive(10, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have read message 1", message1);
1:33e27a4:         assertNotNull("Should have read message 2", message2);
1:351d4b9:         assertEquals("msg0", message1.getMessageId());
1:351d4b9:         assertEquals("msg1", message2.getMessageId());
1:351d4b9:         message1.accept();
1:351d4b9:         message2.accept();
1:da9fede: 
1:db71b43:         LOG.info("Attempting to read next two messages with receiver #2");
1:db71b43:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:351d4b9:         receiver2.flow(2);
1:db71b43:         AmqpMessage message3 = receiver2.receive(10, TimeUnit.SECONDS);
1:db71b43:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have read message 3", message3);
1:33e27a4:         assertNotNull("Should have read message 4", message4);
1:351d4b9:         assertEquals("msg2", message3.getMessageId());
1:351d4b9:         assertEquals("msg3", message4.getMessageId());
1:351d4b9:         message3.accept();
1:351d4b9:         message4.accept();
1:da9fede: 
1:db71b43:         LOG.info("Attempting to read remaining messages with receiver #1");
1:351d4b9:         receiver1.flow(MSG_COUNT - 4);
1:ee271af:         for (int i = 4; i < MSG_COUNT; i++) {
1:db71b43:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
2:db71b43:             assertNotNull("Should have read a message", message);
1:351d4b9:             assertEquals("msg" + i, message.getMessageId());
1:351d4b9:             message.accept();
1:351d4b9:         }
1:351d4b9: 
1:351d4b9:         receiver1.close();
1:351d4b9:         receiver2.close();
1:351d4b9: 
1:f56ea45:         connection.close();
1:351d4b9:     }
1:351d4b9: 
1:ee271af:     @Test(timeout = 60000)
1:db71b43:     @Repeat(repetitions = 1)
1:db71b43:     public void testDispatchOrderWithPrefetchOfOne() throws Exception {
1:351d4b9:         final int MSG_COUNT = 20;
1:351d4b9: 
1:351d4b9:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:351d4b9:         AmqpSession session = connection.createSession();
1:351d4b9: 
1:351d4b9:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:351d4b9: 
1:351d4b9:         for (int i = 0; i < MSG_COUNT; i++) {
1:351d4b9:             AmqpMessage message = new AmqpMessage();
1:351d4b9: 
1:351d4b9:             message.setMessageId("msg" + i);
1:351d4b9:             message.setMessageAnnotation("serialNo", i);
1:351d4b9:             message.setText("Test-Message");
1:351d4b9: 
1:351d4b9:             sender.send(message);
1:f56ea45:         }
1:f56ea45: 
1:351d4b9:         sender.close();
1:f56ea45: 
1:351d4b9:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:db71b43:         receiver1.flow(1);
1:f56ea45: 
1:351d4b9:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:db71b43:         receiver2.flow(1);
1:db71b43: 
1:db71b43:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:db71b43:         AmqpMessage message2 = receiver2.receive(10, TimeUnit.SECONDS);
1:db71b43:         assertNotNull("Should have read message 1", message1);
1:db71b43:         assertNotNull("Should have read message 2", message2);
1:db71b43:         assertEquals("msg0", message1.getMessageId());
1:db71b43:         assertEquals("msg1", message2.getMessageId());
1:db71b43:         message1.accept();
1:db71b43:         message2.accept();
1:db71b43: 
1:db71b43:         receiver1.flow(1);
1:db71b43:         AmqpMessage message3 = receiver1.receive(10, TimeUnit.SECONDS);
1:db71b43:         receiver2.flow(1);
1:db71b43:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
1:db71b43:         assertNotNull("Should have read message 3", message3);
1:db71b43:         assertNotNull("Should have read message 4", message4);
1:db71b43:         assertEquals("msg2", message3.getMessageId());
1:db71b43:         assertEquals("msg3", message4.getMessageId());
1:db71b43:         message3.accept();
1:db71b43:         message4.accept();
1:db71b43: 
1:ee271af:         LOG.info("*** Attempting to read remaining messages with both receivers");
1:db71b43:         int splitCredit = (MSG_COUNT - 4) / 2;
1:db71b43: 
1:da9fede:         LOG.info("**** Receiver #1 granting creadit[{}] for its block of messages", splitCredit);
1:db71b43:         receiver1.flow(splitCredit);
1:ee271af:         for (int i = 0; i < splitCredit; i++) {
1:db71b43:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
1:ee271af:             assertNotNull("Receiver #1 should have read a message", message);
1:ee271af:             LOG.info("Receiver #1 read message: {}", message.getMessageId());
1:db71b43:             message.accept();
1:db71b43:         }
1:db71b43: 
1:da9fede:         LOG.info("**** Receiver #2 granting creadit[{}] for its block of messages", splitCredit);
1:db71b43:         receiver2.flow(splitCredit);
1:ee271af:         for (int i = 0; i < splitCredit; i++) {
1:db71b43:             AmqpMessage message = receiver2.receive(10, TimeUnit.SECONDS);
1:ffee8b4:             assertNotNull("Receiver #2 should have read message[" + i + "]", message);
1:ee271af:             LOG.info("Receiver #2 read message: {}", message.getMessageId());
1:db71b43:             message.accept();
1:db71b43:         }
1:db71b43: 
1:db71b43:         receiver1.close();
1:db71b43:         receiver2.close();
1:db71b43: 
1:db71b43:         connection.close();
1:f56ea45:     }
1:f56ea45: 
1:534dbee:     @Test(timeout = 60000)
1:ee271af:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnQueue() throws Exception {
1:ee271af:         doTestReceiveMessageAndRefillCreditBeforeAccept(Queue.class);
1:ee271af:     }
1:ee271af: 
1:ee271af:     @Test(timeout = 60000)
1:ee271af:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnTopic() throws Exception {
1:ee271af:         doTestReceiveMessageAndRefillCreditBeforeAccept(Topic.class);
1:ee271af:     }
1:ee271af: 
1:ee271af:     private void doTestReceiveMessageAndRefillCreditBeforeAccept(Class<?> destType) throws Exception {
1:ee271af: 
1:ee271af:         AmqpClient client = createAmqpClient();
1:ee271af: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:ee271af:         AmqpSession session = connection.createSession();
1:ee271af: 
1:ee271af:         final String address;
1:ee271af:         if (Queue.class.equals(destType)) {
1:ee271af:             address = "queue://" + getTestName();
1:ee271af:         } else {
1:ee271af:             address = "topic://" + getTestName();
1:ee271af:         }
1:ee271af: 
1:ee271af:         AmqpReceiver receiver = session.createReceiver(address);
1:ee271af:         AmqpSender sender = session.createSender(address);
1:ee271af: 
1:ee271af:         for (int i = 0; i < 2; i++) {
1:ee271af:             AmqpMessage message = new AmqpMessage();
1:ee271af:             message.setMessageId("msg" + i);
1:ee271af:             sender.send(message);
1:ee271af:         }
1:ee271af:         sender.close();
1:ee271af: 
1:ee271af:         receiver.flow(1);
1:ee271af:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:ee271af:         assertNotNull(received);
1:ee271af: 
1:ee271af:         receiver.flow(1);
1:ee271af:         received.accept();
1:ee271af: 
1:ee271af:         received = receiver.receive(10, TimeUnit.SECONDS);
1:ee271af:         assertNotNull(received);
1:ee271af:         received.accept();
1:ee271af: 
1:ee271af:         receiver.close();
1:ee271af:         connection.close();
1:ee271af:     }
1:ee271af: 
1:ee271af:     @Test(timeout = 60000)
1:ee271af:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnQueueAsync() throws Exception {
1:ee271af:         doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Queue.class);
1:ee271af:     }
1:ee271af: 
1:ee271af:     @Test(timeout = 60000)
1:ee271af:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync() throws Exception {
1:ee271af:         doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Topic.class);
1:ee271af:     }
1:ee271af: 
1:ee271af:     private void doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Class<?> destType) throws Exception {
1:ee271af:         final AmqpClient client = createAmqpClient();
1:e050519:         final LinkedList<Throwable> errors = new LinkedList<>();
1:ee271af:         final CountDownLatch receiverReady = new CountDownLatch(1);
1:ee271af:         ExecutorService executorService = Executors.newCachedThreadPool();
1:ee271af: 
1:ee271af:         final String address;
1:ee271af:         if (Queue.class.equals(destType)) {
1:ee271af:             address = "queue://" + getTestName();
1:ee271af:         } else {
1:ee271af:             address = "topic://" + getTestName();
1:ee271af:         }
1:ee271af: 
1:ee271af:         executorService.submit(new Runnable() {
1:ee271af:             @Override
1:ee271af:             public void run() {
1:ee271af:                 try {
1:ee271af:                     LOG.info("Starting consumer connection");
1:1ac8954:                     AmqpConnection connection = trackConnection(client.connect());
1:ee271af:                     AmqpSession session = connection.createSession();
1:ee271af:                     AmqpReceiver receiver = session.createReceiver(address);
1:ee271af:                     receiver.flow(1);
1:ee271af:                     receiverReady.countDown();
1:ee271af:                     AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:ee271af:                     assertNotNull(received);
1:ee271af: 
1:ee271af:                     receiver.flow(1);
1:ee271af:                     received.accept();
1:ee271af: 
1:ee271af:                     received = receiver.receive(5, TimeUnit.SECONDS);
1:ee271af:                     assertNotNull(received);
1:ee271af:                     received.accept();
1:ee271af: 
1:ee271af:                     receiver.close();
1:ee271af:                     connection.close();
1:ee271af: 
1:ee271af:                 } catch (Exception error) {
1:ee271af:                     errors.add(error);
1:ee271af:                 }
1:ee271af:             }
1:ee271af:         });
1:ee271af: 
1:ee271af:         // producer
1:ee271af:         executorService.submit(new Runnable() {
1:ee271af:             @Override
1:ee271af:             public void run() {
1:ee271af:                 try {
1:ee271af:                     receiverReady.await(20, TimeUnit.SECONDS);
1:1ac8954:                     AmqpConnection connection = trackConnection(client.connect());
1:ee271af:                     AmqpSession session = connection.createSession();
1:ee271af: 
1:ee271af:                     AmqpSender sender = session.createSender(address);
1:ee271af:                     for (int i = 0; i < 2; i++) {
1:ee271af:                         AmqpMessage message = new AmqpMessage();
1:ee271af:                         message.setMessageId("msg" + i);
1:ee271af:                         sender.send(message);
1:ee271af:                     }
1:ee271af:                     sender.close();
1:ee271af:                     connection.close();
1:ee271af:                 } catch (Exception ignored) {
1:ee271af:                     ignored.printStackTrace();
1:ee271af:                 }
1:ee271af:             }
1:ee271af:         });
1:ee271af: 
1:ee271af:         executorService.shutdown();
1:ee271af:         executorService.awaitTermination(20, TimeUnit.SECONDS);
1:ee271af:         assertTrue("no errors: " + errors, errors.isEmpty());
1:ee271af:     }
1:ee271af: 
1:ee271af:     @Test(timeout = 60000)
1:11da37b:     public void testMessageDurabliltyFollowsSpec() throws Exception {
1:11da37b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:11da37b:         AmqpSession session = connection.createSession();
1:d74c087: 
1:11da37b:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:11da37b:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:11da37b: 
1:11da37b:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:11da37b: 
1:11da37b:         // Create default message that should be sent as non-durable
1:11da37b:         AmqpMessage message1 = new AmqpMessage();
1:11da37b:         message1.setText("Test-Message -> non-durable");
1:11da37b:         message1.setDurable(false);
1:11da37b:         message1.setMessageId("ID:Message:1");
1:11da37b:         sender.send(message1);
1:11da37b: 
1:11da37b:         assertEquals(1, queue.getQueueSize());
1:11da37b:         receiver1.flow(1);
1:11da37b:         message1 = receiver1.receive(50, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have read a message", message1);
1:11da37b:         assertFalse("First message sent should not be durable", message1.isDurable());
1:11da37b:         message1.accept();
1:11da37b: 
1:11da37b:         // Create default message that should be sent as non-durable
1:11da37b:         AmqpMessage message2 = new AmqpMessage();
1:11da37b:         message2.setText("Test-Message -> durable");
1:11da37b:         message2.setDurable(true);
1:11da37b:         message2.setMessageId("ID:Message:2");
1:11da37b:         sender.send(message2);
1:11da37b: 
1:11da37b:         assertEquals(1, queue.getQueueSize());
1:11da37b:         receiver1.flow(1);
1:11da37b:         message2 = receiver1.receive(50, TimeUnit.SECONDS);
1:33e27a4:         assertNotNull("Should have read a message", message2);
1:11da37b:         assertTrue("Second message sent should be durable", message2.isDurable());
1:11da37b:         message2.accept();
1:11da37b: 
1:11da37b:         sender.close();
1:11da37b:         connection.close();
1:11da37b:     }
1:351d4b9: 
1:db71b43:     @Test(timeout = 60000)
1:a2d92ef:     public void testMessageWithNoHeaderNotMarkedDurable() throws Exception {
1:a2d92ef:         AmqpClient client = createAmqpClient();
1:a2d92ef:         AmqpConnection connection = trackConnection(client.connect());
1:a2d92ef:         AmqpSession session = connection.createSession();
1:a2d92ef: 
1:a2d92ef:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:a2d92ef:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:a2d92ef: 
1:a2d92ef:         // Create default message that should be sent as non-durable
1:a2d92ef:         AmqpMessage message1 = new AmqpMessage();
1:a2d92ef:         message1.setText("Test-Message -> non-durable");
1:a2d92ef:         message1.setMessageId("ID:Message:1");
1:a2d92ef:         sender.send(message1);
1:a2d92ef: 
1:a2d92ef:         receiver1.flow(1);
1:a2d92ef:         AmqpMessage message2 = receiver1.receive(50, TimeUnit.SECONDS);
1:a2d92ef:         assertNotNull("Should have read a message", message2);
1:a2d92ef:         assertFalse("Second message sent should not be durable", message2.isDurable());
1:a2d92ef:         message2.accept();
1:a2d92ef: 
1:a2d92ef:         sender.close();
1:a2d92ef:         connection.close();
1:a2d92ef:     }
1:a2d92ef: 
1:a2d92ef:     @Test(timeout = 60000)
1:534dbee:     public void testSendMessageToQueueNoPrefixReceiveWithPrefix() throws Exception {
1:534dbee:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:534dbee:         AmqpSession session = connection.createSession();
1:534dbee: 
1:534dbee:         AmqpSender sender = session.createSender(getTestName());
1:534dbee:         AmqpMessage message = new AmqpMessage();
1:534dbee: 
1:534dbee:         message.setText("Test-Message");
1:534dbee: 
1:534dbee:         sender.send(message);
1:534dbee: 
1:534dbee:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:534dbee:         assertEquals(1, queueView.getQueueSize());
1:534dbee:         sender.close();
1:534dbee: 
1:ee271af:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:534dbee: 
1:534dbee:         assertEquals(1, queueView.getQueueSize());
1:534dbee:         assertEquals(0, queueView.getDispatchCount());
1:534dbee: 
1:534dbee:         receiver.flow(1);
1:534dbee:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:534dbee:         assertNotNull(received);
1:534dbee:         received.accept();
1:534dbee:         receiver.close();
1:534dbee: 
1:534dbee:         assertEquals(0, queueView.getQueueSize());
1:534dbee: 
1:534dbee:         connection.close();
1:534dbee:     }
1:534dbee: 
1:534dbee:     @Test(timeout = 60000)
1:534dbee:     public void testSendMessageToQueueWithPrefixReceiveWithNoPrefix() throws Exception {
1:534dbee:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:534dbee:         AmqpSession session = connection.createSession();
1:534dbee: 
1:534dbee:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:534dbee:         AmqpMessage message = new AmqpMessage();
1:534dbee: 
1:534dbee:         message.setText("Test-Message");
1:534dbee: 
1:534dbee:         sender.send(message);
1:534dbee: 
1:534dbee:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:534dbee:         assertEquals(1, queueView.getQueueSize());
1:534dbee:         sender.close();
1:534dbee: 
1:534dbee:         AmqpReceiver receiver = session.createReceiver(getTestName());
1:534dbee: 
1:534dbee:         assertEquals(1, queueView.getQueueSize());
1:534dbee:         assertEquals(0, queueView.getDispatchCount());
1:534dbee: 
1:534dbee:         receiver.flow(1);
1:534dbee:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:534dbee:         assertNotNull(received);
1:534dbee:         received.accept();
1:534dbee:         receiver.close();
1:534dbee: 
1:534dbee:         assertEquals(0, queueView.getQueueSize());
1:534dbee: 
1:534dbee:         connection.close();
1:534dbee:     }
1:351d4b9: 
1:11da37b:     @Test(timeout = 60000)
1:6402898:     public void testReceiveMessageBeyondAckedAmountQueue() throws Exception {
1:6402898:         doTestReceiveMessageBeyondAckedAmount(Queue.class);
1:6402898:     }
1:6402898: 
1:6402898:     @Test(timeout = 60000)
1:6402898:     public void testReceiveMessageBeyondAckedAmountTopic() throws Exception {
1:6402898:         doTestReceiveMessageBeyondAckedAmount(Topic.class);
1:6402898:     }
1:6402898: 
1:6402898:     private void doTestReceiveMessageBeyondAckedAmount(Class<?> destType) throws Exception {
1:6402898:         final int MSG_COUNT = 50;
1:6402898: 
1:6402898:         AmqpClient client = createAmqpClient();
1:6402898: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:6402898:         AmqpSession session = connection.createSession();
1:6402898: 
1:6402898:         final String address;
1:6402898:         if (Queue.class.equals(destType)) {
1:6402898:             address = "queue://" + getTestName();
1:6402898:         } else {
1:6402898:             address = "topic://" + getTestName();
1:6402898:         }
1:6402898: 
1:6402898:         AmqpReceiver receiver = session.createReceiver(address);
1:6402898:         AmqpSender sender = session.createSender(address);
1:6402898: 
1:2fdc260:         final DestinationViewMBean destinationView;
1:2fdc260:         if (Queue.class.equals(destType)) {
1:2fdc260:             destinationView = getProxyToQueue(getTestName());
1:2fdc260:         } else {
1:2fdc260:             destinationView = getProxyToTopic(getTestName());
1:2fdc260:         }
1:2fdc260: 
1:6402898:         for (int i = 0; i < MSG_COUNT; i++) {
1:6402898:             AmqpMessage message = new AmqpMessage();
1:6402898:             message.setMessageId("msg" + i);
1:6402898:             sender.send(message);
1:6402898:         }
1:6402898: 
1:e050519:         List<AmqpMessage> pendingAcks = new ArrayList<>();
1:6402898: 
1:6402898:         for (int i = 0; i < MSG_COUNT; i++) {
1:6402898:             receiver.flow(1);
1:6402898:             AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:6402898:             assertNotNull(received);
1:2fdc260:             pendingAcks.add(received);
1:351d4b9:         }
1:6402898: 
1:2fdc260:         // Send one more to check in-flight stays at zero with no credit and all
1:2fdc260:         // pending messages settled.
1:2fdc260:         AmqpMessage message = new AmqpMessage();
1:2fdc260:         message.setMessageId("msg-final");
1:2fdc260:         sender.send(message);
1:2fdc260: 
1:6402898:         for (AmqpMessage pendingAck : pendingAcks) {
1:6402898:             pendingAck.accept();
1:6402898:         }
1:6402898: 
1:2fdc260:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:2fdc260: 
1:2fdc260:             @Override
1:2fdc260:             public boolean isSatisified() throws Exception {
1:2fdc260:                 return destinationView.getInFlightCount() == 0;
1:2fdc260:             }
1:2fdc260:         }));
1:2fdc260: 
1:2fdc260:         sender.close();
1:6402898:         receiver.close();
1:6402898:         connection.close();
1:6402898:     }
1:351d4b9: 
1:351d4b9:     @Test(timeout = 60000)
1:da9fede:     public void testTwoPresettledReceiversReceiveAllMessages() throws Exception {
1:da9fede:         final int MSG_COUNT = 100;
1:f56ea45: 
1:f56ea45:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:f56ea45:         AmqpSession session = connection.createSession();
1:f56ea45: 
1:da9fede:         final String address = "queue://" + getTestName();
1:da9fede: 
1:da9fede:         AmqpSender sender = session.createSender(address);
1:da9fede:         AmqpReceiver receiver1 = session.createReceiver(address, null, false, true);
1:da9fede:         AmqpReceiver receiver2 = session.createReceiver(address, null, false, true);
1:da9fede: 
1:da9fede:         for (int i = 0; i < MSG_COUNT; i++) {
1:da9fede:             AmqpMessage message = new AmqpMessage();
1:da9fede:             message.setMessageId("msg" + i);
1:da9fede:             sender.send(message);
1:da9fede:         }
1:da9fede: 
1:da9fede:         final DestinationViewMBean destinationView = getProxyToQueue(getTestName());
1:da9fede: 
1:da9fede:         LOG.info("Attempting to read first two messages with receiver #1");
1:da9fede:         receiver1.flow(2);
1:da9fede:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:da9fede:         AmqpMessage message2 = receiver1.receive(10, TimeUnit.SECONDS);
1:da9fede:         assertNotNull("Should have read message 1", message1);
1:da9fede:         assertNotNull("Should have read message 2", message2);
1:da9fede:         assertEquals("msg0", message1.getMessageId());
1:da9fede:         assertEquals("msg1", message2.getMessageId());
1:da9fede:         message1.accept();
1:da9fede:         message2.accept();
1:da9fede: 
1:da9fede:         LOG.info("Attempting to read next two messages with receiver #2");
1:da9fede:         receiver2.flow(2);
1:da9fede:         AmqpMessage message3 = receiver2.receive(10, TimeUnit.SECONDS);
1:da9fede:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
1:da9fede:         assertNotNull("Should have read message 3", message3);
1:da9fede:         assertNotNull("Should have read message 4", message4);
1:da9fede:         assertEquals("msg2", message3.getMessageId());
1:da9fede:         assertEquals("msg3", message4.getMessageId());
1:da9fede:         message3.accept();
1:da9fede:         message4.accept();
1:da9fede: 
1:da9fede:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:da9fede: 
1:da9fede:             @Override
1:da9fede:             public boolean isSatisified() throws Exception {
1:da9fede:                 return destinationView.getInFlightCount() == 0;
1:da9fede:             }
1:da9fede:         }));
1:da9fede: 
1:da9fede:         LOG.info("*** Attempting to read remaining messages with both receivers");
1:da9fede:         int splitCredit = (MSG_COUNT - 4) / 2;
1:da9fede: 
1:ffee8b4:         LOG.info("**** Receiver #1 granting credit[{}] for its block of messages", splitCredit);
1:da9fede:         receiver1.flow(splitCredit);
1:da9fede:         for (int i = 0; i < splitCredit; i++) {
1:da9fede:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
1:da9fede:             assertNotNull("Receiver #1 should have read a message", message);
1:da9fede:             LOG.info("Receiver #1 read message: {}", message.getMessageId());
1:da9fede:             message.accept();
1:da9fede:         }
1:f56ea45: 
1:ffee8b4:         LOG.info("**** Receiver #2 granting credit[{}] for its block of messages", splitCredit);
1:da9fede:         receiver2.flow(splitCredit);
1:da9fede:         for (int i = 0; i < splitCredit; i++) {
1:da9fede:             AmqpMessage message = receiver2.receive(10, TimeUnit.SECONDS);
1:ffee8b4:             assertNotNull("Receiver #2 should have read a message[" + i + "]", message);
1:da9fede:             LOG.info("Receiver #2 read message: {}", message.getMessageId());
1:da9fede:             message.accept();
1:da9fede:         }
1:f56ea45: 
1:da9fede:         receiver1.close();
1:da9fede:         receiver2.close();
1:f56ea45: 
1:da9fede:         connection.close();
1:da9fede:     }
1:f56ea45: 
1:f56ea45:     @Test(timeout = 60000)
1:e050519:     public void testSendReceiveLotsOfDurableMessagesOnQueue() throws Exception {
1:e050519:         doTestSendReceiveLotsOfDurableMessages(Queue.class);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testSendReceiveLotsOfDurableMessagesOnTopic() throws Exception {
1:e050519:         doTestSendReceiveLotsOfDurableMessages(Topic.class);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestSendReceiveLotsOfDurableMessages(Class<?> destType) throws Exception {
1:e050519:         final int MSG_COUNT = 1000;
1:e050519: 
1:e050519:         AmqpClient client = createAmqpClient();
1:e050519: 
1:e050519:         AmqpConnection connection = trackConnection(client.connect());
1:e050519:         AmqpSession session = connection.createSession();
1:e050519: 
1:e050519:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1:e050519:         final AtomicBoolean error = new AtomicBoolean(false);
1:e050519:         final ExecutorService executor = Executors.newSingleThreadExecutor();
1:e050519: 
1:e050519:         final String address;
1:e050519:         if (Queue.class.equals(destType)) {
1:e050519:             address = "queue://" + getTestName();
1:e050519:         } else {
1:e050519:             address = "topic://" + getTestName();
1:e050519:         }
1:e050519: 
1:e050519:         final AmqpReceiver receiver = session.createReceiver(address);
1:e050519:         receiver.flow(MSG_COUNT);
1:e050519: 
1:e050519:         AmqpSender sender = session.createSender(address);
1:e050519: 
1:e050519:         final DestinationViewMBean destinationView;
1:e050519:         if (Queue.class.equals(destType)) {
1:e050519:             destinationView = getProxyToQueue(getTestName());
1:e050519:         } else {
1:e050519:             destinationView = getProxyToTopic(getTestName());
1:e050519:         }
1:e050519: 
1:e050519:         executor.execute(new Runnable() {
1:e050519: 
1:e050519:             @Override
1:e050519:             public void run() {
1:e050519:                 for (int i = 0; i < MSG_COUNT; i++) {
1:e050519:                     try {
1:e050519:                         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:e050519:                         received.accept();
1:e050519:                         done.countDown();
1:e050519:                     } catch (Exception ex) {
1:e050519:                         LOG.info("Caught error: {}", ex.getClass().getSimpleName());
1:e050519:                         error.set(true);
1:e050519:                     }
1:e050519:                 }
1:e050519:             }
1:e050519:         });
1:e050519: 
1:e050519:         for (int i = 0; i < MSG_COUNT; i++) {
1:e050519:             AmqpMessage message = new AmqpMessage();
1:e050519:             message.setMessageId("msg" + i);
1:e050519:             sender.send(message);
1:e050519:         }
1:e050519: 
1:e050519:         assertTrue("did not read all messages, waiting on: " + done.getCount(), done.await(10, TimeUnit.SECONDS));
1:e050519:         assertFalse("should not be any errors on receive", error.get());
1:e050519: 
1:e050519:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1:e050519: 
1:e050519:             @Override
1:e050519:             public boolean isSatisified() throws Exception {
1:e050519:                 return destinationView.getInFlightCount() == 0;
1:e050519:             }
1:e050519:         }));
1:f56ea45: 
1:e050519:         sender.close();
1:e050519:         receiver.close();
1:e050519:         connection.close();
1:e050519:     }
1:f56ea45: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e050519
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     public void testSimpleSendOneReceiveOneToQueue() throws Exception {
1:         doTestSimpleSendOneReceiveOne(Queue.class);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSimpleSendOneReceiveOneToTopic() throws Exception {
1:         doTestSimpleSendOneReceiveOne(Topic.class);
1:     }
1: 
1:     public void doTestSimpleSendOneReceiveOne(Class<?> destType) throws Exception {
1: 
1:         final String address;
1:         if (Queue.class.equals(destType)) {
1:             address = "queue://" + getTestName();
1:         } else {
1:             address = "topic://" + getTestName();
1:         }
1:         AmqpSender sender = session.createSender(address);
1:         AmqpReceiver receiver = session.createReceiver(address);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final LinkedList<Throwable> errors = new LinkedList<>();
/////////////////////////////////////////////////////////////////////////
1:         List<AmqpMessage> pendingAcks = new ArrayList<>();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testSendReceiveLotsOfDurableMessagesOnQueue() throws Exception {
1:         doTestSendReceiveLotsOfDurableMessages(Queue.class);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendReceiveLotsOfDurableMessagesOnTopic() throws Exception {
1:         doTestSendReceiveLotsOfDurableMessages(Topic.class);
1:     }
1: 
1:     private void doTestSendReceiveLotsOfDurableMessages(Class<?> destType) throws Exception {
1:         final int MSG_COUNT = 1000;
1: 
1:         AmqpClient client = createAmqpClient();
1: 
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         final CountDownLatch done = new CountDownLatch(MSG_COUNT);
1:         final AtomicBoolean error = new AtomicBoolean(false);
1:         final ExecutorService executor = Executors.newSingleThreadExecutor();
1: 
1:         final String address;
1:         if (Queue.class.equals(destType)) {
1:             address = "queue://" + getTestName();
1:         } else {
1:             address = "topic://" + getTestName();
1:         }
1: 
1:         final AmqpReceiver receiver = session.createReceiver(address);
1:         receiver.flow(MSG_COUNT);
1: 
1:         AmqpSender sender = session.createSender(address);
1: 
1:         final DestinationViewMBean destinationView;
1:         if (Queue.class.equals(destType)) {
1:             destinationView = getProxyToQueue(getTestName());
1:         } else {
1:             destinationView = getProxyToTopic(getTestName());
1:         }
1: 
1:         executor.execute(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 for (int i = 0; i < MSG_COUNT; i++) {
1:                     try {
1:                         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:                         received.accept();
1:                         done.countDown();
1:                     } catch (Exception ex) {
1:                         LOG.info("Caught error: {}", ex.getClass().getSimpleName());
1:                         error.set(true);
1:                     }
1:                 }
1:             }
1:         });
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setMessageId("msg" + i);
1:             sender.send(message);
1:         }
1: 
1:         assertTrue("did not read all messages, waiting on: " + done.getCount(), done.await(10, TimeUnit.SECONDS));
1:         assertFalse("should not be any errors on receive", error.get());
1: 
1:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         sender.close();
1:         receiver.close();
1:         connection.close();
1:     }
commit:a2d92ef
/////////////////////////////////////////////////////////////////////////
1:     public void testMessageWithNoHeaderNotMarkedDurable() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1: 
1:         // Create default message that should be sent as non-durable
1:         AmqpMessage message1 = new AmqpMessage();
1:         message1.setText("Test-Message -> non-durable");
1:         message1.setMessageId("ID:Message:1");
1:         sender.send(message1);
1: 
1:         receiver1.flow(1);
1:         AmqpMessage message2 = receiver1.receive(50, TimeUnit.SECONDS);
1:         assertNotNull("Should have read a message", message2);
1:         assertFalse("Second message sent should not be durable", message2.isDurable());
1:         message2.accept();
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:                     AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:                     AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:da9fede
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testTwoPresettledReceiversReceiveAllMessages() throws Exception {
1:         final int MSG_COUNT = 100;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         final String address = "queue://" + getTestName();
1: 
1:         AmqpSender sender = session.createSender(address);
1:         AmqpReceiver receiver1 = session.createReceiver(address, null, false, true);
1:         AmqpReceiver receiver2 = session.createReceiver(address, null, false, true);
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setMessageId("msg" + i);
1:             sender.send(message);
1:         }
1: 
1:         final DestinationViewMBean destinationView = getProxyToQueue(getTestName());
1: 
1:         LOG.info("Attempting to read first two messages with receiver #1");
1:         receiver1.flow(2);
1:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver1.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message 1", message1);
1:         assertNotNull("Should have read message 2", message2);
1:         assertEquals("msg0", message1.getMessageId());
1:         assertEquals("msg1", message2.getMessageId());
1:         message1.accept();
1:         message2.accept();
1: 
1:         LOG.info("Attempting to read next two messages with receiver #2");
1:         receiver2.flow(2);
1:         AmqpMessage message3 = receiver2.receive(10, TimeUnit.SECONDS);
1:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message 3", message3);
1:         assertNotNull("Should have read message 4", message4);
1:         assertEquals("msg2", message3.getMessageId());
1:         assertEquals("msg3", message4.getMessageId());
1:         message3.accept();
1:         message4.accept();
1: 
1:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         LOG.info("*** Attempting to read remaining messages with both receivers");
1:         int splitCredit = (MSG_COUNT - 4) / 2;
1: 
1:         LOG.info("**** Receiver #1 granting creadit[{}] for its block of messages", splitCredit);
1:         receiver1.flow(splitCredit);
1:         for (int i = 0; i < splitCredit; i++) {
1:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
1:             assertNotNull("Receiver #1 should have read a message", message);
1:             LOG.info("Receiver #1 read message: {}", message.getMessageId());
1:             message.accept();
1:         }
1: 
1:         LOG.info("**** Receiver #2 granting creadit[{}] for its block of messages", splitCredit);
1:         receiver2.flow(splitCredit);
1:         for (int i = 0; i < splitCredit; i++) {
1:             AmqpMessage message = receiver2.receive(10, TimeUnit.SECONDS);
0:             assertNotNull("Receiver #2 should have read a message", message);
1:             LOG.info("Receiver #2 read message: {}", message.getMessageId());
1:             message.accept();
1:         }
1: 
1:         receiver1.close();
1:         receiver2.close();
1: 
1:         connection.close();
1:     }
commit:2fdc260
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final DestinationViewMBean destinationView;
1:         if (Queue.class.equals(destType)) {
1:             destinationView = getProxyToQueue(getTestName());
1:         } else {
1:             destinationView = getProxyToTopic(getTestName());
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:             pendingAcks.add(received);
1:         // Send one more to check in-flight stays at zero with no credit and all
1:         // pending messages settled.
1:         AmqpMessage message = new AmqpMessage();
1:         message.setMessageId("msg-final");
1:         sender.send(message);
1: 
1:         assertTrue("Should be no inflight messages: " + destinationView.getInFlightCount(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationView.getInFlightCount() == 0;
1:             }
1:         }));
1: 
1:         sender.close();
commit:6402898
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageBeyondAckedAmountQueue() throws Exception {
1:         doTestReceiveMessageBeyondAckedAmount(Queue.class);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageBeyondAckedAmountTopic() throws Exception {
1:         doTestReceiveMessageBeyondAckedAmount(Topic.class);
1:     }
1: 
1:     private void doTestReceiveMessageBeyondAckedAmount(Class<?> destType) throws Exception {
1:         final int MSG_COUNT = 50;
1: 
1:         AmqpClient client = createAmqpClient();
1: 
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         final String address;
1:         if (Queue.class.equals(destType)) {
1:             address = "queue://" + getTestName();
1:         } else {
1:             address = "topic://" + getTestName();
1:         }
1: 
1:         AmqpReceiver receiver = session.createReceiver(address);
1:         AmqpSender sender = session.createSender(address);
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setMessageId("msg" + i);
1:             sender.send(message);
1:         }
1:         sender.close();
1: 
0:         List<AmqpMessage> pendingAcks = new ArrayList<AmqpMessage>();
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             receiver.flow(1);
1:             AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(received);
1:         }
1: 
1:         for (AmqpMessage pendingAck : pendingAcks) {
1:             pendingAck.accept();
1:         }
1: 
1:         receiver.close();
1:         connection.close();
1:     }
commit:ee271af
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
1: import javax.jms.Topic;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * Test basic send and receive scenarios using only AMQP sender and receiver
1:  * links.
/////////////////////////////////////////////////////////////////////////
0:     public void testSimpleSendOneReceiveOne() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setMessageId("msg" + 1);
1:         message.setMessageAnnotation("serialNo", 1);
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1:         sender.close();
1: 
1:         LOG.info("Attempting to read message with receiver");
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(2);
1:         AmqpMessage received = receiver.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message", received);
1:         assertEquals("msg1", received.getMessageId());
1:         received.accept();
1: 
1:         receiver.close();
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 4; i < MSG_COUNT; i++) {
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("*** Attempting to read remaining messages with both receivers");
0:         LOG.info("**** Receiver #1 granting creadit[{}] for its block of messages", splitCredit);
1:         for (int i = 0; i < splitCredit; i++) {
1:             assertNotNull("Receiver #1 should have read a message", message);
1:             LOG.info("Receiver #1 read message: {}", message.getMessageId());
0:         LOG.info("**** Receiver #2 granting creadit[{}] for its block of messages", splitCredit);
1:         for (int i = 0; i < splitCredit; i++) {
0:             assertNotNull("Receiver #2 should have read a message", message);
1:             LOG.info("Receiver #2 read message: {}", message.getMessageId());
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnQueue() throws Exception {
1:         doTestReceiveMessageAndRefillCreditBeforeAccept(Queue.class);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnTopic() throws Exception {
1:         doTestReceiveMessageAndRefillCreditBeforeAccept(Topic.class);
1:     }
1: 
1:     private void doTestReceiveMessageAndRefillCreditBeforeAccept(Class<?> destType) throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
1: 
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         final String address;
1:         if (Queue.class.equals(destType)) {
1:             address = "queue://" + getTestName();
1:         } else {
1:             address = "topic://" + getTestName();
1:         }
1: 
1:         AmqpReceiver receiver = session.createReceiver(address);
1:         AmqpSender sender = session.createSender(address);
1: 
1:         for (int i = 0; i < 2; i++) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setMessageId("msg" + i);
1:             sender.send(message);
1:         }
1:         sender.close();
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1: 
1:         receiver.flow(1);
1:         received.accept();
1: 
1:         received = receiver.receive(10, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         receiver.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnQueueAsync() throws Exception {
1:         doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Queue.class);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync() throws Exception {
1:         doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Topic.class);
1:     }
1: 
1:     private void doTestReceiveMessageAndRefillCreditBeforeAcceptOnTopicAsync(Class<?> destType) throws Exception {
1:         final AmqpClient client = createAmqpClient();
0:         final LinkedList<Throwable> errors = new LinkedList<Throwable>();
1:         final CountDownLatch receiverReady = new CountDownLatch(1);
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1: 
1:         final String address;
1:         if (Queue.class.equals(destType)) {
1:             address = "queue://" + getTestName();
1:         } else {
1:             address = "topic://" + getTestName();
1:         }
1: 
1:         executorService.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     LOG.info("Starting consumer connection");
0:                     AmqpConnection connection = client.connect();
1:                     AmqpSession session = connection.createSession();
1:                     AmqpReceiver receiver = session.createReceiver(address);
1:                     receiver.flow(1);
1:                     receiverReady.countDown();
1:                     AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:                     assertNotNull(received);
1: 
1:                     receiver.flow(1);
1:                     received.accept();
1: 
1:                     received = receiver.receive(5, TimeUnit.SECONDS);
1:                     assertNotNull(received);
1:                     received.accept();
1: 
1:                     receiver.close();
1:                     connection.close();
1: 
1:                 } catch (Exception error) {
1:                     errors.add(error);
1:                 }
1:             }
1:         });
1: 
1:         // producer
1:         executorService.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     receiverReady.await(20, TimeUnit.SECONDS);
0:                     AmqpConnection connection = client.connect();
1:                     AmqpSession session = connection.createSession();
1: 
1:                     AmqpSender sender = session.createSender(address);
1:                     for (int i = 0; i < 2; i++) {
1:                         AmqpMessage message = new AmqpMessage();
1:                         message.setMessageId("msg" + i);
1:                         sender.send(message);
1:                     }
1:                     sender.close();
1:                     connection.close();
1:                 } catch (Exception ignored) {
1:                     ignored.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(20, TimeUnit.SECONDS);
1:         assertTrue("no errors: " + errors, errors.isEmpty());
1:     }
1: 
1:     @Test(timeout = 60000)
commit:534dbee
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToQueueNoPrefixReceiveWithPrefix() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender(getTestName());
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertEquals(1, queueView.getQueueSize());
1:         sender.close();
1: 
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         assertEquals(1, queueView.getQueueSize());
1:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1:         receiver.close();
1: 
1:         assertEquals(0, queueView.getQueueSize());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToQueueWithPrefixReceiveWithNoPrefix() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertEquals(1, queueView.getQueueSize());
1:         sender.close();
1: 
1:         AmqpReceiver receiver = session.createReceiver(getTestName());
1: 
1:         assertEquals(1, queueView.getQueueSize());
1:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1:         receiver.close();
1: 
1:         assertEquals(0, queueView.getQueueSize());
1: 
1:         connection.close();
1:     }
commit:db71b43
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.junit.ActiveMQTestRunner;
1: import org.apache.activemq.junit.Repeat;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: @RunWith(ActiveMQTestRunner.class)
1:     protected static final Logger LOG = LoggerFactory.getLogger(AmqpSendReceiveTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:     @Test(timeout = 60000)
1:     @Repeat(repetitions = 1)
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting to read first two messages with receiver #1");
1:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver1.receive(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting to read next two messages with receiver #2");
1:         AmqpMessage message3 = receiver2.receive(10, TimeUnit.SECONDS);
1:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting to read remaining messages with receiver #1");
1:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     @Repeat(repetitions = 1)
1:     public void testDispatchOrderWithPrefetchOfOne() throws Exception {
1:         final int MSG_COUNT = 20;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             AmqpMessage message = new AmqpMessage();
1: 
1:             message.setMessageId("msg" + i);
1:             message.setMessageAnnotation("serialNo", i);
1:             message.setText("Test-Message");
1: 
1:             sender.send(message);
1:         }
1: 
1:         sender.close();
1: 
1:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:         receiver1.flow(1);
1: 
1:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:         receiver2.flow(1);
1: 
1:         AmqpMessage message1 = receiver1.receive(10, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver2.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message 1", message1);
1:         assertNotNull("Should have read message 2", message2);
1:         assertEquals("msg0", message1.getMessageId());
1:         assertEquals("msg1", message2.getMessageId());
1:         message1.accept();
1:         message2.accept();
1: 
1:         receiver1.flow(1);
1:         AmqpMessage message3 = receiver1.receive(10, TimeUnit.SECONDS);
1:         receiver2.flow(1);
1:         AmqpMessage message4 = receiver2.receive(10, TimeUnit.SECONDS);
1:         assertNotNull("Should have read message 3", message3);
1:         assertNotNull("Should have read message 4", message4);
1:         assertEquals("msg2", message3.getMessageId());
1:         assertEquals("msg3", message4.getMessageId());
1:         message3.accept();
1:         message4.accept();
1: 
0:         LOG.info("Attempting to read remaining messages with both receivers");
1:         int splitCredit = (MSG_COUNT - 4) / 2;
1: 
1:         receiver1.flow(splitCredit);
0:         for (int i = 4; i < splitCredit; i++) {
1:             AmqpMessage message = receiver1.receive(10, TimeUnit.SECONDS);
1:             assertNotNull("Should have read a message", message);
1:             message.accept();
1:         }
1: 
1:         receiver2.flow(splitCredit);
0:         for (int i = 4; i < splitCredit; i++) {
1:             AmqpMessage message = receiver2.receive(10, TimeUnit.SECONDS);
1:             assertNotNull("Should have read a message", message);
1:             message.accept();
1:         }
1: 
1:         receiver1.close();
1:         receiver2.close();
1: 
1:         connection.close();
commit:33e27a4
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have got a message", received);
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("Should have got a message", received);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have read a message", received);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have read message 1", message1);
1:         assertNotNull("Should have read message 2", message2);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have read message 3", message3);
1:         assertNotNull("Should have read message 4", message4);
/////////////////////////////////////////////////////////////////////////
0:             assertNotNull("Should have read a message", message);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have read a message", message1);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull("Should have read a message", message2);
commit:d74c087
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1:         AmqpMessage message1 = new AmqpMessage();
1:         message1.setGroupId("abcdefg");
1:         message1.setApplicationProperty("sn", 100);
1:         AmqpMessage message2 = new AmqpMessage();
1:         message2.setGroupId("hijklm");
1:         message2.setApplicationProperty("sn", 200);
1:         sender.send(message1);
1:         sender.send(message2);
1:         receiver.flow(2);
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
commit:11da37b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testMessageDurabliltyFollowsSpec() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         // Create default message that should be sent as non-durable
1:         AmqpMessage message1 = new AmqpMessage();
1:         message1.setText("Test-Message -> non-durable");
1:         message1.setDurable(false);
1:         message1.setMessageId("ID:Message:1");
1:         sender.send(message1);
1: 
1:         assertEquals(1, queue.getQueueSize());
1:         receiver1.flow(1);
1:         message1 = receiver1.receive(50, TimeUnit.SECONDS);
1:         assertFalse("First message sent should not be durable", message1.isDurable());
1:         message1.accept();
1: 
1:         // Create default message that should be sent as non-durable
1:         AmqpMessage message2 = new AmqpMessage();
1:         message2.setText("Test-Message -> durable");
1:         message2.setDurable(true);
1:         message2.setMessageId("ID:Message:2");
1:         sender.send(message2);
1: 
1:         assertEquals(1, queue.getQueueSize());
1:         receiver1.flow(1);
1:         message2 = receiver1.receive(50, TimeUnit.SECONDS);
1:         assertTrue("Second message sent should be durable", message2.isDurable());
1:         message2.accept();
1: 
1:         sender.close();
1:         connection.close();
1:     }
commit:351d4b9
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveWithJMSSelectorFilter() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
0:         message.setGroupId("abcdefg");
0:         message.setApplicationProperty("sn", 100);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         sender.send(message);
1:         sender.close();
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName(), "sn = 100");
0:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
0:         assertNotNull(received);
1:         assertEquals(100, received.getApplicationProperty("sn"));
1:         assertEquals("abcdefg", received.getGroupId());
1:         received.accept();
1: 
1:         receiver.close();
1:     }
1: 
0:     @Test(timeout = 30000)
1:     public void testAdvancedLinkFlowControl() throws Exception {
1:         final int MSG_COUNT = 20;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             AmqpMessage message = new AmqpMessage();
1: 
1:             message.setMessageId("msg" + i);
1:             message.setMessageAnnotation("serialNo", i);
1:             message.setText("Test-Message");
1: 
1:             sender.send(message);
1:         }
1: 
1:         sender.close();
1: 
1:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:         receiver1.flow(2);
0:         AmqpMessage message1 = receiver1.receive(5, TimeUnit.SECONDS);
0:         AmqpMessage message2 = receiver1.receive(5, TimeUnit.SECONDS);
1:         assertEquals("msg0", message1.getMessageId());
1:         assertEquals("msg1", message2.getMessageId());
1:         message1.accept();
1:         message2.accept();
1: 
1:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:         receiver2.flow(2);
0:         AmqpMessage message3 = receiver2.receive(5, TimeUnit.SECONDS);
0:         AmqpMessage message4 = receiver2.receive(5, TimeUnit.SECONDS);
1:         assertEquals("msg2", message3.getMessageId());
1:         assertEquals("msg3", message4.getMessageId());
1:         message3.accept();
1:         message4.accept();
1: 
1:         receiver1.flow(MSG_COUNT - 4);
0:         for (int i = 4; i < MSG_COUNT - 4; i++) {
0:             AmqpMessage message = receiver1.receive(5, TimeUnit.SECONDS);
1:             assertEquals("msg" + i, message.getMessageId());
1:             message.accept();
1:         }
1: 
1:         receiver1.close();
1:         receiver2.close();
1:     }
commit:af13292
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             received = receiver2.receive(5, TimeUnit.SECONDS);
commit:f56ea45
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: /**
0:  * Test basic send and receive scenarios using only AMQP sender and receiver links.
1:  */
1: public class AmqpSendReceiveTest extends AmqpClientTestSupport {
1: 
0:     @Ignore("Test fails when JMS transformer is in play")
1:     @Test(timeout = 60000)
1:     public void testCloseBusyReceiver() throws Exception {
1:         final int MSG_COUNT = 20;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
0:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
0:             AmqpMessage message = new AmqpMessage();
1: 
1:             message.setMessageId("msg" + i);
1:             message.setMessageAnnotation("serialNo", i);
1:             message.setText("Test-Message");
1: 
0:             sender.send(message);
1:         }
1: 
0:         sender.close();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(20, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver1 = session.createReceiver("queue://" + getTestName());
1:         receiver1.flow(MSG_COUNT);
1:         AmqpMessage received = receiver1.receive(5, TimeUnit.SECONDS);
1:         assertEquals("msg0", received.getMessageId());
1:         receiver1.close();
1: 
1:         AmqpReceiver receiver2 = session.createReceiver("queue://" + getTestName());
1:         receiver2.flow(200);
1:         for (int i = 0; i < MSG_COUNT; ++i) {
0:             received = receiver1.receive(5, TimeUnit.SECONDS);
1:             assertEquals("msg" + i, received.getMessageId());
1:         }
1: 
1:         receiver2.close();
1:         connection.close();
1:     }
1: }
author:gtully
-------------------------------------------------------------------------------
commit:ffee8b4
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("Receiver #2 should have read message[" + i + "]", message);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("**** Receiver #1 granting credit[{}] for its block of messages", splitCredit);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("**** Receiver #2 granting credit[{}] for its block of messages", splitCredit);
1:             assertNotNull("Receiver #2 should have read a message[" + i + "]", message);
commit:88daeec
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
/////////////////////////////////////////////////////////////////////////
0:     public void testReceiveFlowDispositionSingleCredit() throws Exception {
0:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
0:         AmqpSession session = connection.createSession();
0: 
0:         AmqpSender sender = session.createSender("queue://" + getTestName());
0:         for (int i=0;i<2; i++) {
0:             AmqpMessage message = new AmqpMessage();
0:             message.setMessageId("msg" + i);
0:             sender.send(message);
0:         }
0:         sender.close();
0:         connection.close();
0: 
0:         LOG.info("Starting consumer connection");
0:         connection = client.connect();
0:         session = connection.createSession();
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
0:         receiver.flow(1);
0:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
0:         assertNotNull(received);
0: 
0:         receiver.flow(1);
0:         received.accept();
0: 
0:         received = receiver.receive(5, TimeUnit.SECONDS);
0:         assertNotNull(received);
0:         received.accept();
0: 
0:         receiver.close();
0:         connection.close();
0:     }
0: 
0:     @Test(timeout = 60000)
0:     public void testReceiveFlowDispositionSingleCreditTopic() throws Exception {
0:         final AmqpClient client = createAmqpClient();
0:         final LinkedList<Throwable> errors = new LinkedList<Throwable>();
0:         final CountDownLatch receiverReady = new CountDownLatch(1);
0:         ExecutorService executorService = Executors.newCachedThreadPool();
0: 
0:         executorService.submit(new Runnable() {
0:             @Override
0:             public void run() {
0:                 try {
0:                     LOG.info("Starting consumer connection");
0:                     AmqpConnection connection = client.connect();
0:                     AmqpSession session = connection.createSession();
0:                     AmqpReceiver receiver = session.createReceiver("topic://" + getTestName());
0:                     receiver.flow(1);
0:                     receiverReady.countDown();
0:                     AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
0:                     assertNotNull(received);
0: 
0:                     receiver.flow(1);
0:                     received.accept();
0: 
0:                     received = receiver.receive(5, TimeUnit.SECONDS);
0:                     assertNotNull(received);
0:                     received.accept();
0: 
0:                     receiver.close();
0:                     connection.close();
0: 
0:                 } catch (Exception error) {
0:                     errors.add(error);
0:                 }
0: 
0:             }
0:         });
0: 
0:         // producer
0:         executorService.submit(new Runnable() {
0:             @Override
0:             public void run() {
0:                 try {
0: 
0:                     receiverReady.await(20, TimeUnit.SECONDS);
0:                     AmqpConnection connection = client.connect();
0:                     AmqpSession session = connection.createSession();
0: 
0:                     AmqpSender sender = session.createSender("topic://" + getTestName());
0:                     for (int i = 0; i < 2; i++) {
0:                         AmqpMessage message = new AmqpMessage();
0:                         message.setMessageId("msg" + i);
0:                         sender.send(message);
0:                     }
0:                     sender.close();
0:                     connection.close();
0:                 } catch (Exception ignored) {
0:                     ignored.printStackTrace();
0:                 }
0: 
0:             }
0:         });
0: 
0:         executorService.shutdown();
0:         executorService.awaitTermination(20, TimeUnit.SECONDS);
0:         assertTrue("no errors: " + errors, errors.isEmpty());
0:     }
0: 
0: 
0:     @Test(timeout = 60000)
============================================================================