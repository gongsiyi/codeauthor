1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:2b0a194: import java.util.Map;
1:2b0a194: import java.util.Map.Entry;
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:74a7a8b: 
1:74a7a8b: import junit.framework.TestCase;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:d29ca2a: /**
1:230a86c:  * Enforces a test case to run for only an allotted time to prevent them from
1:230a86c:  * hanging and breaking the whole testing.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: 
1:ca067a6: public abstract class AutoFailTestSupport extends TestCase {
1:d29ca2a:     public static final int EXIT_SUCCESS = 0;
1:230a86c:     public static final int EXIT_ERROR = 1;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AutoFailTestSupport.class);
1:d29ca2a: 
1:230a86c:     private long maxTestTime = 5 * 60 * 1000; // 5 mins by default
1:230a86c:     private Thread autoFailThread;
1:d29ca2a: 
1:230a86c:     private boolean verbose = true;
1:230a86c:     private boolean useAutoFail; // Disable auto fail by default
1:6285f96:     private AtomicBoolean isTestSuccess;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         // Runs the auto fail thread before performing any setup
1:d29ca2a:         if (isAutoFail()) {
1:d29ca2a:             startAutoFailThread();
1:d29ca2a:         }
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a: 
1:d29ca2a:         // Stops the auto fail thread only after performing any clean up
1:d29ca2a:         stopAutoFailThread();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Manually start the auto fail thread. To start it automatically, just set
1:230a86c:      * the auto fail to true before calling any setup methods. As a rule, this
1:230a86c:      * method is used only when you are not sure, if the setUp and tearDown
1:230a86c:      * method is propagated correctly.
1:d29ca2a:      */
1:d29ca2a:     public void startAutoFailThread() {
1:d29ca2a:         setAutoFail(true);
1:6285f96:         isTestSuccess = new AtomicBoolean(false);
1:d29ca2a:         autoFailThread = new Thread(new Runnable() {
1:d29ca2a:             public void run() {
1:d29ca2a:                 try {
1:d29ca2a:                     // Wait for test to finish succesfully
1:d29ca2a:                     Thread.sleep(getMaxTestTime());
1:d29ca2a:                 } catch (InterruptedException e) {
1:d29ca2a:                     // This usually means the test was successful
1:d29ca2a:                 } finally {
1:230a86c:                     // Check if the test was able to tear down succesfully,
1:230a86c:                     // which usually means, it has finished its run.
1:d29ca2a:                     if (!isTestSuccess.get()) {
1:230a86c:                         LOG.error("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
1:2b0a194:                         dumpAllThreads(getName());
1:785faa0:                         if (System.getProperty("org.apache.activemq.AutoFailTestSupport.disableSystemExit") == null) {
1:785faa0:                             System.exit(EXIT_ERROR);
1:785faa0:                         } else {
1:785faa0:                             LOG.error("No system.exit as it kills surefire - forkedProcessTimeoutInSeconds (surefire.timeout) will kick in eventually see pom.xml surefire plugin config");
1:785faa0:                         }
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }, "AutoFailThread");
1:d29ca2a: 
1:d29ca2a:         if (verbose) {
1:230a86c:             LOG.info("Starting auto fail thread...");
1:d29ca2a:         }
1:d29ca2a: 
1:230a86c:         LOG.info("Starting auto fail thread...");
1:d29ca2a:         autoFailThread.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Manually stops the auto fail thread. As a rule, this method is used only
1:230a86c:      * when you are not sure, if the setUp and tearDown method is propagated
1:230a86c:      * correctly.
1:d29ca2a:      */
1:d29ca2a:     public void stopAutoFailThread() {
1:d29ca2a:         if (isAutoFail() && autoFailThread != null && autoFailThread.isAlive()) {
1:d29ca2a:             isTestSuccess.set(true);
1:d29ca2a: 
1:d29ca2a:             if (verbose) {
1:230a86c:                 LOG.info("Stopping auto fail thread...");
1:d29ca2a:             }
1:d29ca2a: 
1:230a86c:             LOG.info("Stopping auto fail thread...");
1:d29ca2a:             autoFailThread.interrupt();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Sets the auto fail value. As a rule, this should be used only before any
1:230a86c:      * setup methods is called to automatically enable the auto fail thread in
1:230a86c:      * the setup method of the test case.
1:230a86c:      * 
1:d29ca2a:      * @param val
1:d29ca2a:      */
1:d29ca2a:     public void setAutoFail(boolean val) {
1:d29ca2a:         this.useAutoFail = val;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isAutoFail() {
1:d29ca2a:         return this.useAutoFail;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * The assigned value will only be reflected when the auto fail thread has
1:230a86c:      * started its run. Value is in milliseconds.
1:230a86c:      * 
1:d29ca2a:      * @param val
1:d29ca2a:      */
1:d29ca2a:     public void setMaxTestTime(long val) {
1:d29ca2a:         this.maxTestTime = val;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public long getMaxTestTime() {
1:d29ca2a:         return this.maxTestTime;
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     
1:2b0a194:     public static void dumpAllThreads(String prefix) {
1:2b0a194:         Map<Thread, StackTraceElement[]> stacks = Thread.getAllStackTraces();
1:2b0a194:         for (Entry<Thread, StackTraceElement[]> stackEntry : stacks.entrySet()) {
1:2b0a194:             System.err.println(prefix + " " + stackEntry.getKey());
1:2b0a194:             for(StackTraceElement element : stackEntry.getValue()) {
1:2b0a194:                 System.err.println("     " + element);
1:d29ca2a:             }
1:2b0a194:         }
1:2b0a194:     }
1:2b0a194: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:785faa0
/////////////////////////////////////////////////////////////////////////
1:                         if (System.getProperty("org.apache.activemq.AutoFailTestSupport.disableSystemExit") == null) {
1:                             System.exit(EXIT_ERROR);
1:                         } else {
1:                             LOG.error("No system.exit as it kills surefire - forkedProcessTimeoutInSeconds (surefire.timeout) will kick in eventually see pom.xml surefire plugin config");
1:                         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:a68916d
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AutoFailTestSupport.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AutoFailTestSupport.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: import junit.framework.TestCase;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:  * Enforces a test case to run for only an allotted time to prevent them from
1:  * hanging and breaking the whole testing.
0:     protected static final Log LOG = LogFactory.getLog(AutoFailTestSupport.class);
1:     public static final int EXIT_ERROR = 1;
1:     private long maxTestTime = 5 * 60 * 1000; // 5 mins by default
1:     private Thread autoFailThread;
1:     private boolean verbose = true;
1:     private boolean useAutoFail; // Disable auto fail by default
/////////////////////////////////////////////////////////////////////////
1:      * Manually start the auto fail thread. To start it automatically, just set
1:      * the auto fail to true before calling any setup methods. As a rule, this
1:      * method is used only when you are not sure, if the setUp and tearDown
1:      * method is propagated correctly.
/////////////////////////////////////////////////////////////////////////
1:                     // Check if the test was able to tear down succesfully,
1:                     // which usually means, it has finished its run.
1:                         LOG.error("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
0:                         LOG.fatal("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Starting auto fail thread...");
1:         LOG.info("Starting auto fail thread...");
1:      * Manually stops the auto fail thread. As a rule, this method is used only
1:      * when you are not sure, if the setUp and tearDown method is propagated
1:      * correctly.
1:                 LOG.info("Stopping auto fail thread...");
1:             LOG.info("Stopping auto fail thread...");
1:      * Sets the auto fail value. As a rule, this should be used only before any
1:      * setup methods is called to automatically enable the auto fail thread in
1:      * the setup method of the test case.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * The assigned value will only be reflected when the auto fail thread has
1:      * started its run. Value is in milliseconds.
1:      * 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(AutoFailTestSupport.class);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Starting auto fail thread...");
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Stopping auto fail thread...");
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import junit.framework.TestCase;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: /**
0:  * Enforces a test case to run for only an allotted time to prevent them from hanging
0:  * and breaking the whole testing.
1:  * 
0:  * @version $Revision: 1.0 $
1:  */
1: 
0: public class AutoFailTestSupport extends TestCase {
0:      private static final Log log = LogFactory.getLog(AutoFailTestSupport.class);
1: 
1:     public static final int EXIT_SUCCESS = 0;
0:     public static final int EXIT_ERROR   = 1;
1: 
0:     private long          maxTestTime = 5 * 60 * 1000; // 5 mins by default
0:     private Thread        autoFailThread;
1: 
0:     private boolean       verbose     = true;
0:     private boolean       useAutoFail = false; // Disable auto fail by default
0:     private AtomicBoolean isTestSuccess = new AtomicBoolean(false);
1: 
1:     protected void setUp() throws Exception {
1:         // Runs the auto fail thread before performing any setup
1:         if (isAutoFail()) {
1:             startAutoFailThread();
1:         }
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
1:         // Stops the auto fail thread only after performing any clean up
1:         stopAutoFailThread();
1:     }
1: 
1:     /**
0:      * Manually start the auto fail thread. To start it automatically, just set the auto fail to true before calling
0:      * any setup methods. As a rule, this method is used only when you are not sure, if the setUp and tearDown method
0:      * is propagated correctly.
1:      */
1:     public void startAutoFailThread() {
1:         setAutoFail(true);
1:         autoFailThread = new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     // Wait for test to finish succesfully
1:                     Thread.sleep(getMaxTestTime());
1:                 } catch (InterruptedException e) {
1:                     // This usually means the test was successful
1:                 } finally {
0:                     // Check if the test was able to tear down succesfully, which usually means, it has finished its run.
1:                     if (!isTestSuccess.get()) {
0:                         System.err.println("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
0:                         log.fatal("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
0:                         System.exit(EXIT_ERROR);
1:                     }
1:                 }
1:             }
1:         }, "AutoFailThread");
1: 
1:         if (verbose) {
0:             System.out.println("Starting auto fail thread...");
1:         }
1: 
0:         log.info("Starting auto fail thread...");
1:         autoFailThread.start();
1:     }
1: 
1:     /**
0:      * Manually stops the auto fail thread. As a rule, this method is used only when you are not sure, if the
0:      * setUp and tearDown method is propagated correctly.
1:      */
1:     public void stopAutoFailThread() {
1:         if (isAutoFail() && autoFailThread != null && autoFailThread.isAlive()) {
1:             isTestSuccess.set(true);
1: 
1:             if (verbose) {
0:                 System.out.println("Stopping auto fail thread...");
1:             }
1: 
0:             log.info("Stopping auto fail thread...");
1:             autoFailThread.interrupt();
1:         }
1:     }
1: 
1:     /**
0:      * Sets the auto fail value. As a rule, this should be used only before any setup methods is called to automatically
0:      * enable the auto fail thread in the setup method of the test case.
1:      * @param val
1:      */
1:     public void setAutoFail(boolean val) {
1:         this.useAutoFail = val;
1:     }
1: 
1:     public boolean isAutoFail() {
1:         return this.useAutoFail;
1:     }
1: 
1:     /**
0:      * The assigned value will only be reflected when the auto fail thread has started its run. Value is in milliseconds.
1:      * @param val
1:      */
1:     public void setMaxTestTime(long val) {
1:         this.maxTestTime = val;
1:     }
1: 
1:     public long getMaxTestTime() {
1:         return this.maxTestTime;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AutoFailTestSupport.class);
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:2b0a194
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1:                         dumpAllThreads(getName());
/////////////////////////////////////////////////////////////////////////
0:     
0:     
1:     public static void dumpAllThreads(String prefix) {
1:         Map<Thread, StackTraceElement[]> stacks = Thread.getAllStackTraces();
1:         for (Entry<Thread, StackTraceElement[]> stackEntry : stacks.entrySet()) {
1:             System.err.println(prefix + " " + stackEntry.getKey());
1:             for(StackTraceElement element : stackEntry.getValue()) {
1:                 System.err.println("     " + element);
1:             }
1:         }
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:b19f17c
/////////////////////////////////////////////////////////////////////////
0:                         log.error("Test case has exceeded the maximum allotted time to run of: " + getMaxTestTime() + " ms.");
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: public abstract class AutoFailTestSupport extends TestCase {
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:6285f96
/////////////////////////////////////////////////////////////////////////
1:     private AtomicBoolean isTestSuccess;
/////////////////////////////////////////////////////////////////////////
1:         isTestSuccess = new AtomicBoolean(false);
============================================================================