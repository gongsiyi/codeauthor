1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: import javax.jms.TextMessage;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsQueueWildcardSendReceiveTest extends JmsTopicSendReceiveTest {
1:d29ca2a: 
1:f812e34:     private String destination1String = "TEST.ONE.ONE";
1:f812e34:     private String destination2String = "TEST.ONE.ONE.ONE";
1:f812e34:     private String destination3String = "TEST.ONE.TWO";
1:f812e34:     private String destination4String = "TEST.TWO.ONE";
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Sets a test to have a queue destination and non-persistent delivery mode.
1:d29ca2a:      * 
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         topic = false;
1:d29ca2a:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the consumer subject.
1:d29ca2a:      * 
1:d29ca2a:      * @return String - consumer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:d29ca2a:      */
1:f812e34:     protected String getConsumerSubject() {
1:d29ca2a:         return "FOO.>";
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the producer subject.
1:d29ca2a:      * 
1:d29ca2a:      * @return String - producer subject
1:d29ca2a:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:d29ca2a:      */
1:f812e34:     protected String getProducerSubject() {
1:d29ca2a:         return "FOO.BAR.HUMBUG";
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testReceiveWildcardQueueEndAsterisk() throws Exception {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:f812e34:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:f812e34:         ActiveMQDestination destination3 = (ActiveMQDestination)session.createQueue(destination3String);
1:d29ca2a: 
1:d29ca2a:         Message m = null;
1:d29ca2a:         MessageConsumer consumer = null;
1:d29ca2a:         String text = null;
1:d29ca2a: 
1:f812e34:         sendMessage(session, destination1, destination1String);
1:f812e34:         sendMessage(session, destination3, destination3String);
1:f812e34:         ActiveMQDestination destination6 = (ActiveMQDestination)session.createQueue("TEST.ONE.*");
1:d29ca2a:         consumer = session.createConsumer(destination6);
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         text = ((TextMessage)m).getText();
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination3String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         text = ((TextMessage)m).getText();
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination3String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testReceiveWildcardQueueEndGreaterThan() throws Exception {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:f812e34:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:f812e34:         ActiveMQDestination destination2 = (ActiveMQDestination)session.createQueue(destination2String);
1:f812e34:         ActiveMQDestination destination3 = (ActiveMQDestination)session.createQueue(destination3String);
1:d29ca2a: 
1:d29ca2a:         Message m = null;
1:d29ca2a:         MessageConsumer consumer = null;
1:d29ca2a:         String text = null;
1:d29ca2a: 
1:f812e34:         sendMessage(session, destination1, destination1String);
1:f812e34:         sendMessage(session, destination2, destination2String);
1:f812e34:         sendMessage(session, destination3, destination3String);
1:f812e34:         ActiveMQDestination destination7 = (ActiveMQDestination)session.createQueue("TEST.ONE.>");
1:d29ca2a:         consumer = session.createConsumer(destination7);
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         text = ((TextMessage)m).getText();
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testReceiveWildcardQueueMidAsterisk() throws Exception {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:f812e34:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:f812e34:         ActiveMQDestination destination4 = (ActiveMQDestination)session.createQueue(destination4String);
1:d29ca2a: 
1:d29ca2a:         Message m = null;
1:d29ca2a:         MessageConsumer consumer = null;
1:d29ca2a:         String text = null;
1:d29ca2a: 
1:f812e34:         sendMessage(session, destination1, destination1String);
1:f812e34:         sendMessage(session, destination4, destination4String);
1:f812e34:         ActiveMQDestination destination8 = (ActiveMQDestination)session.createQueue("TEST.*.ONE");
1:d29ca2a:         consumer = session.createConsumer(destination8);
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         text = ((TextMessage)m).getText();
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination4String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         m = consumer.receive(1000);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         text = ((TextMessage)m).getText();
1:f812e34:         if (!(text.equals(destination1String) || text.equals(destination4String))) {
1:d29ca2a:             fail("unexpected message:" + text);
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void sendMessage(Session session, Destination destination, String text) throws JMSException {
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a:         producer.send(session.createTextMessage(text));
1:d29ca2a:         producer.close();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     private String destination1String = "TEST.ONE.ONE";
1:     private String destination2String = "TEST.ONE.ONE.ONE";
1:     private String destination3String = "TEST.ONE.TWO";
1:     private String destination4String = "TEST.TWO.ONE";
1:      * Sets a test to have a queue destination and non-persistent delivery mode.
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String getConsumerSubject() {
1: 
1:     protected String getProducerSubject() {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:         ActiveMQDestination destination3 = (ActiveMQDestination)session.createQueue(destination3String);
1:         sendMessage(session, destination1, destination1String);
1:         sendMessage(session, destination3, destination3String);
1:         ActiveMQDestination destination6 = (ActiveMQDestination)session.createQueue("TEST.ONE.*");
1:         if (!(text.equals(destination1String) || text.equals(destination3String))) {
1:         if (!(text.equals(destination1String) || text.equals(destination3String))) {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:         ActiveMQDestination destination2 = (ActiveMQDestination)session.createQueue(destination2String);
1:         ActiveMQDestination destination3 = (ActiveMQDestination)session.createQueue(destination3String);
1:         sendMessage(session, destination1, destination1String);
1:         sendMessage(session, destination2, destination2String);
1:         sendMessage(session, destination3, destination3String);
1:         ActiveMQDestination destination7 = (ActiveMQDestination)session.createQueue("TEST.ONE.>");
1:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:         if (!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination1 = (ActiveMQDestination)session.createQueue(destination1String);
1:         ActiveMQDestination destination4 = (ActiveMQDestination)session.createQueue(destination4String);
1:         sendMessage(session, destination1, destination1String);
1:         sendMessage(session, destination4, destination4String);
1:         ActiveMQDestination destination8 = (ActiveMQDestination)session.createQueue("TEST.*.ONE");
1:         if (!(text.equals(destination1String) || text.equals(destination4String))) {
1:         if (!(text.equals(destination1String) || text.equals(destination4String))) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiveWildcardQueueEndAsterisk() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiveWildcardQueueEndGreaterThan() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiveWildcardQueueMidAsterisk() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.DeliveryMode;
0: import javax.jms.Session;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.TextMessage;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1: 
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class JmsQueueWildcardSendReceiveTest extends JmsTopicSendReceiveTest {
1: 
0:     private String destination1String = "TEST.ONE.ONE" ;
0:     private String destination2String = "TEST.ONE.ONE.ONE" ;
0:     private String destination3String = "TEST.ONE.TWO" ;
0:     private String destination4String = "TEST.TWO.ONE" ;
1: 
1:     /**
0:      * Sets a test to have a queue destination and non-persistent delivery mode. 
1:      * 
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         topic = false;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         super.setUp();
1:     }
1:     
1:     /**
1:      * Returns the consumer subject.
1:      * 
1:      * @return String - consumer subject
1:      * @see org.apache.activemq.test.TestSupport#getConsumerSubject()
1:      */
0:     protected String getConsumerSubject(){
1:         return "FOO.>";
1:     }
1:     
1:     /**
1:      * Returns the producer subject.
1:      * 
1:      * @return String - producer subject
1:      * @see org.apache.activemq.test.TestSupport#getProducerSubject()
1:      */
0:     protected String getProducerSubject(){
1:         return "FOO.BAR.HUMBUG";
1:     }
1: 
0:     public void testReceiveWildcardQueueEndAsterisk() throws Throwable {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         ActiveMQDestination destination1 = (ActiveMQDestination) session.createQueue(destination1String);
0:         ActiveMQDestination destination3 = (ActiveMQDestination) session.createQueue(destination3String);
1: 
1:         Message m = null;
1:         MessageConsumer consumer = null;
1:         String text = null;
1: 
0:         sendMessage(session,destination1,destination1String);
0:         sendMessage(session,destination3,destination3String);
0:         ActiveMQDestination destination6 = (ActiveMQDestination) session.createQueue("TEST.ONE.*");
1:         consumer = session.createConsumer(destination6);
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
1:         text = ((TextMessage)m).getText();
0:         if(!(text.equals(destination1String) || text.equals(destination3String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
1:         text = ((TextMessage)m).getText();
0:         if(!(text.equals(destination1String) || text.equals(destination3String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
0:     public void testReceiveWildcardQueueEndGreaterThan() throws Throwable {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         ActiveMQDestination destination1 = (ActiveMQDestination) session.createQueue(destination1String);
0:         ActiveMQDestination destination2 = (ActiveMQDestination) session.createQueue(destination2String);
0:         ActiveMQDestination destination3 = (ActiveMQDestination) session.createQueue(destination3String);
1: 
1:         Message m = null;
1:         MessageConsumer consumer = null;
1:         String text = null;
1: 
0:         sendMessage(session,destination1,destination1String);
0:         sendMessage(session,destination2,destination2String);
0:         sendMessage(session,destination3,destination3String);
0:         ActiveMQDestination destination7 = (ActiveMQDestination) session.createQueue("TEST.ONE.>");
1:         consumer = session.createConsumer(destination7);
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
1:         text = ((TextMessage)m).getText();
0:         if(!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
0:         if(!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
0:         if(!(text.equals(destination1String) || text.equals(destination2String) || text.equals(destination3String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
0:     public void testReceiveWildcardQueueMidAsterisk() throws Throwable {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         ActiveMQDestination destination1 = (ActiveMQDestination) session.createQueue(destination1String);
0:         ActiveMQDestination destination4 = (ActiveMQDestination) session.createQueue(destination4String);
1: 
1:         Message m = null;
1:         MessageConsumer consumer = null;
1:         String text = null;
1: 
0:         sendMessage(session,destination1,destination1String);
0:         sendMessage(session,destination4,destination4String);
0:         ActiveMQDestination destination8 = (ActiveMQDestination) session.createQueue("TEST.*.ONE");
1:         consumer = session.createConsumer(destination8);
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
1:         text = ((TextMessage)m).getText();
0:         if(!(text.equals(destination1String) || text.equals(destination4String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         m = consumer.receive(1000);
1:         assertNotNull(m);
1:         text = ((TextMessage)m).getText();
0:         if(!(text.equals(destination1String) || text.equals(destination4String))) {
1:             fail("unexpected message:" + text);
1:         }
1:         assertNull(consumer.receiveNoWait());
1: 
1:     }
1: 
1:     private void sendMessage(Session session, Destination destination, String text) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage(text));
1:         producer.close();
1:     }
1: }
============================================================================