1:a812131: /**
1:a812131:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a812131:  * contributor license agreements.  See the NOTICE file distributed with
1:a812131:  * this work for additional information regarding copyright ownership.
1:a812131:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a812131:  * (the "License"); you may not use this file except in compliance with
1:a812131:  * the License.  You may obtain a copy of the License at
1:a812131:  *
1:a812131:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a812131:  *
1:a812131:  * Unless required by applicable law or agreed to in writing, software
1:a812131:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a812131:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a812131:  * See the License for the specific language governing permissions and
1:a812131:  * limitations under the License.
1:a812131:  */
1:a812131: package org.apache.activemq.transport.amqp.interop;
13:a812131: 
1:a812131: import static org.junit.Assert.assertEquals;
1:a812131: import static org.junit.Assert.assertNotNull;
1:a812131: import static org.junit.Assert.fail;
1:a812131: 
1:a812131: import java.util.ArrayList;
1:a812131: import java.util.Arrays;
1:a812131: import java.util.Collection;
1:a812131: import java.util.List;
1:a812131: 
1:a812131: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:a812131: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:a812131: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:a812131: import org.junit.Test;
1:a812131: import org.junit.runner.RunWith;
1:a812131: import org.junit.runners.Parameterized;
1:a812131: import org.junit.runners.Parameterized.Parameters;
1:a812131: 
1:a812131: /**
1:a812131:  * Test for the transportConnector maximumConnections URI option.
1:a812131:  */
1:a812131: @RunWith(Parameterized.class)
1:a812131: public class AmqpConfiguredMaxConnectionsTest extends AmqpClientTestSupport {
1:a812131: 
1:a812131:     private static final int MAX_CONNECTIONS = 10;
1:a812131: 
1:a812131:     @Parameters(name="{0}")
1:a812131:     public static Collection<Object[]> data() {
1:a812131:         return Arrays.asList(new Object[][] {
1:a812131:                 {"amqp", false},
1:a812131:                 {"amqp+nio", false},
1:a812131:             });
11:a812131:     }
1:a812131: 
1:a812131:     public AmqpConfiguredMaxConnectionsTest(String connectorScheme, boolean useSSL) {
1:7c41ebc:         super(connectorScheme, useSSL);
1:a812131:     }
1:a812131: 
1:a812131:     @Test(timeout = 60000)
1:a812131:     public void testMaxConnectionsSettingIsHonored() throws Exception {
1:a812131:         AmqpClient client = createAmqpClient();
1:a812131:         assertNotNull(client);
1:a812131: 
1:a812131:         List<AmqpConnection> connections = new ArrayList<AmqpConnection>();
1:a812131: 
1:a812131:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:a812131:             AmqpConnection connection = client.connect();
1:a812131:             assertNotNull(connection);
1:a812131: 
1:a812131:             connections.add(connection);
1:a812131:         }
1:a812131: 
1:a812131:         assertEquals(MAX_CONNECTIONS, getProxyToBroker().getCurrentConnectionsCount());
1:a812131: 
2:a812131:         try {
1:1ac8954:             AmqpConnection connection = trackConnection(client.createConnection());
1:a812131:             connection.setConnectTimeout(3000);
1:a812131:             connection.connect();
1:a812131:             fail("Should not be able to create one more connection");
1:a812131:         } catch (Exception ex) {
1:a812131:         }
1:a812131: 
1:a812131:         assertEquals(MAX_CONNECTIONS, getProxyToBroker().getCurrentConnectionsCount());
1:a812131: 
1:a812131:         for (AmqpConnection connection : connections) {
1:a812131:             connection.close();
1:a812131:         }
1:a812131: 
1:a812131:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:a812131:     }
1:a812131: 
5:a812131:     @Override
1:a812131:     protected String getAdditionalConfig() {
1:a812131:         return "&maximumConnections=" + MAX_CONNECTIONS;
1:a812131:     }
1:a812131: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:             AmqpConnection connection = trackConnection(client.createConnection());
commit:7c41ebc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super(connectorScheme, useSSL);
/////////////////////////////////////////////////////////////////////////
commit:a812131
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
0: import java.io.IOException;
0: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test for the transportConnector maximumConnections URI option.
1:  */
1: @RunWith(Parameterized.class)
1: public class AmqpConfiguredMaxConnectionsTest extends AmqpClientTestSupport {
1: 
1:     private static final int MAX_CONNECTIONS = 10;
1: 
0:     protected boolean useSSL;
0:     protected String connectorScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"amqp", false},
1:                 {"amqp+nio", false},
1:             });
1:     }
1: 
1:     public AmqpConfiguredMaxConnectionsTest(String connectorScheme, boolean useSSL) {
0:         this.connectorScheme = connectorScheme;
0:         this.useSSL = useSSL;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMaxConnectionsSettingIsHonored() throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         assertNotNull(client);
1: 
1:         List<AmqpConnection> connections = new ArrayList<AmqpConnection>();
1: 
1:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:             AmqpConnection connection = client.connect();
1:             assertNotNull(connection);
1: 
1:             connections.add(connection);
1:         }
1: 
1:         assertEquals(MAX_CONNECTIONS, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         try {
0:             AmqpConnection connection = client.createConnection();
1:             connection.setConnectTimeout(3000);
1:             connection.connect();
1:             fail("Should not be able to create one more connection");
1:         } catch (Exception ex) {
1:         }
1: 
1:         assertEquals(MAX_CONNECTIONS, getProxyToBroker().getCurrentConnectionsCount());
1: 
1:         for (AmqpConnection connection : connections) {
1:             connection.close();
1:         }
1: 
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1: 
0:     protected String getConnectorScheme() {
0:         return connectorScheme;
1:     }
1: 
0:     protected boolean isUseSSL() {
0:         return useSSL;
1:     }
1: 
1:     @Override
0:     protected boolean isUseSslConnector() {
0:         return isUseSSL();
1:     }
1: 
1:     @Override
0:     protected boolean isUseNioConnector() {
0:         return true;
1:     }
1: 
1:     @Override
0:     protected boolean isUseNioPlusSslConnector() {
0:         return isUseSSL();
1:     }
1: 
1:     @Override
0:     public URI getBrokerAmqpConnectionURI() {
1:         try {
0:             int port = 0;
0:             switch (connectorScheme) {
0:                 case "amqp":
0:                     port = this.amqpPort;
0:                     break;
0:                 case "amqp+ssl":
0:                     port = this.amqpSslPort;
0:                     break;
0:                 case "amqp+nio":
0:                     port = this.amqpNioPort;
0:                     break;
0:                 case "amqp+nio+ssl":
0:                     port = this.amqpNioPlusSslPort;
0:                     break;
0:                 default:
0:                     throw new IOException("Invalid AMQP connector scheme passed to test.");
1:             }
1: 
0:             String uri = null;
1: 
0:             if (isUseSSL()) {
0:                 uri = "ssl://127.0.0.1:" + port;
0:             } else {
0:                 uri = "tcp://127.0.0.1:" + port;
1:             }
1: 
0:             if (!getAmqpConnectionURIOptions().isEmpty()) {
0:                 uri = uri + "?" + getAmqpConnectionURIOptions();
1:             }
1: 
0:             return new URI(uri);
0:         } catch (Exception e) {
0:             throw new RuntimeException();
1:         }
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "&maximumConnections=" + MAX_CONNECTIONS;
1:     }
1: }
============================================================================