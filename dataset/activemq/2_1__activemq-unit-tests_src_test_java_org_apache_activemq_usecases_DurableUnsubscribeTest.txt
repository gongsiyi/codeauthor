1:9444a79: /**
1:9444a79:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9444a79:  * contributor license agreements.  See the NOTICE file distributed with
1:9444a79:  * this work for additional information regarding copyright ownership.
1:9444a79:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9444a79:  * (the "License"); you may not use this file except in compliance with
1:9444a79:  * the License.  You may obtain a copy of the License at
1:9444a79:  *
1:9444a79:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9444a79:  *
1:9444a79:  * Unless required by applicable law or agreed to in writing, software
1:9444a79:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9444a79:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9444a79:  * See the License for the specific language governing permissions and
1:9444a79:  * limitations under the License.
1:9444a79:  */
1:9444a79: package org.apache.activemq.usecases;
1:9444a79: 
1:9444a79: import java.lang.management.ManagementFactory;
1:9444a79: 
1:9444a79: import javax.jms.Connection;
1:40ae055: import javax.jms.MessageProducer;
1:9444a79: import javax.jms.Session;
1:9444a79: import javax.management.MBeanServer;
1:9444a79: import javax.management.ObjectName;
1:9444a79: 
1:9444a79: import org.apache.activemq.ActiveMQConnectionFactory;
1:9444a79: import org.apache.activemq.broker.BrokerFactory;
1:9444a79: import org.apache.activemq.broker.BrokerService;
1:9444a79: import org.apache.activemq.broker.region.Destination;
1:9444a79: import org.apache.activemq.command.ActiveMQTopic;
1:9444a79: 
1:9444a79: public class DurableUnsubscribeTest extends org.apache.activemq.TestSupport {
1:9444a79: 
1:9444a79:     private BrokerService broker;
1:9444a79:     private Connection connection;
1:9444a79:     private ActiveMQTopic topic;
1:9444a79: 
1:9444a79:     public void testUnsubscribe() throws Exception {
1:9444a79:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9444a79:         session.createDurableSubscriber(topic, "SubsId");
1:9444a79:         session.close();
1:9444a79: 
1:9444a79:         Destination d = broker.getDestination(topic);
1:9444a79:         assertEquals("Subscription is missing.", 1, d.getConsumers().size());
1:40ae055: 
1:9444a79: 
1:9444a79:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:40ae055:         MessageProducer producer = session.createProducer(topic);
1:40ae055:         for (int i = 0; i < 1000; i++) {
1:40ae055:             producer.send(session.createTextMessage("text"));
1:40ae055:         }
1:40ae055: 
1:40ae055:         Thread.sleep(1000);
1:40ae055: 
1:9444a79:         session.unsubscribe("SubsId");
1:9444a79:         session.close();
1:9444a79: 
1:9444a79:         assertEquals("Subscription exists.", 0, d.getConsumers().size());
1:9444a79:     }
1:9444a79: 
1:9444a79:     public void testDestroy() throws Exception {
1:9444a79:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9444a79:         session.createDurableSubscriber(topic, "SubsId2");
1:9444a79:         session.close();
1:9444a79: 
1:9444a79:         connection.close();
1:9444a79:         connection = null;
1:9444a79:         Thread.sleep(1000);
1:9444a79: 
1:9444a79:         Destination d = broker.getDestination(topic);
1:9444a79:         assertEquals("Subscription is missing.", 1, d.getConsumers().size());
1:9444a79: 
1:9444a79:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
1:4fc1712:         ObjectName[] subNames = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:9444a79:         mbs.invoke(subNames[0], "destroy", new Object[0], new String[0]);
1:9444a79: 
1:9444a79:         assertEquals("Subscription exists.", 0, d.getConsumers().size());
1:9444a79:     }
1:9444a79: 
1:9444a79:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:9444a79:         return new ActiveMQConnectionFactory("vm://" + getName());
1:9444a79:     }
1:9444a79: 
1:9444a79:     protected Connection createConnection() throws Exception {
1:9444a79:         Connection rc = super.createConnection();
1:9444a79:         rc.setClientID(getName());
1:9444a79:         return rc;
1:9444a79:     }
1:9444a79: 
1:9444a79:     protected void setUp() throws Exception {
1:9444a79:         topic = (ActiveMQTopic) createDestination();
1:9444a79:         createBroker();
1:9444a79:         super.setUp();
1:9444a79:     }
1:9444a79: 
1:9444a79:     protected void tearDown() throws Exception {
1:9444a79:         super.tearDown();
1:9444a79:         destroyBroker();
1:9444a79:     }
1:9444a79: 
1:9444a79:     private void createBroker() throws Exception {
1:9444a79:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:40ae055:         //broker.setPersistent(false);
1:9444a79:         broker.setUseJmx(true);
1:9444a79:         broker.setBrokerName(getName());
1:6994ecb:         broker.deleteAllMessages();
1:9444a79:         broker.start();
1:9444a79: 
1:9444a79:         connection = createConnection();
1:9444a79:     }
1:9444a79: 
1:9444a79:     private void destroyBroker() throws Exception {
1:9444a79:         if (connection != null)
1:9444a79:             connection.close();
1:9444a79:         if (broker != null)
1:9444a79:             broker.stop();
1:9444a79:     }
1:9444a79: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6994ecb
/////////////////////////////////////////////////////////////////////////
1:         broker.deleteAllMessages();
commit:40ae055
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageProducer;
/////////////////////////////////////////////////////////////////////////
1: 
1:         MessageProducer producer = session.createProducer(topic);
1:         for (int i = 0; i < 1000; i++) {
1:             producer.send(session.createTextMessage("text"));
1:         }
1: 
1:         Thread.sleep(1000);
1: 
/////////////////////////////////////////////////////////////////////////
1:         //broker.setPersistent(false);
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1:         ObjectName[] subNames = broker.getAdminView().getInactiveDurableTopicSubscribers();
commit:9444a79
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.lang.management.ManagementFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: public class DurableUnsubscribeTest extends org.apache.activemq.TestSupport {
1: 
1:     private BrokerService broker;
1:     private Connection connection;
1:     private ActiveMQTopic topic;
1: 
1:     public void testUnsubscribe() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1:         session.close();
1: 
1:         Destination d = broker.getDestination(topic);
1:         assertEquals("Subscription is missing.", 1, d.getConsumers().size());
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.unsubscribe("SubsId");
1:         session.close();
1: 
1:         assertEquals("Subscription exists.", 0, d.getConsumers().size());
1:     }
1: 
1:     public void testDestroy() throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId2");
1:         session.close();
1: 
1:         connection.close();
1:         connection = null;
1:         Thread.sleep(1000);
1: 
1:         Destination d = broker.getDestination(topic);
1:         assertEquals("Subscription is missing.", 1, d.getConsumers().size());
1: 
1:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:         ObjectName[] subNames = broker.getAdminView().getDurableTopicSubscribers();
1:         mbs.invoke(subNames[0], "destroy", new Object[0], new String[0]);
1: 
1:         assertEquals("Subscription exists.", 0, d.getConsumers().size());
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName());
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         Connection rc = super.createConnection();
1:         rc.setClientID(getName());
1:         return rc;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         topic = (ActiveMQTopic) createDestination();
1:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
0:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setBrokerName(getName());
1:         broker.start();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (connection != null)
1:             connection.close();
1:         if (broker != null)
1:             broker.stop();
1:     }
1: }
============================================================================