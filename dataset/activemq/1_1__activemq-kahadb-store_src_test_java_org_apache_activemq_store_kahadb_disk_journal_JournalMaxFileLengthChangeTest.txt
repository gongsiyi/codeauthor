1:0ad62f7: /**
1:0ad62f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0ad62f7:  * contributor license agreements.  See the NOTICE file distributed with
1:0ad62f7:  * this work for additional information regarding copyright ownership.
1:0ad62f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0ad62f7:  * (the "License"); you may not use this file except in compliance with
1:0ad62f7:  * the License.  You may obtain a copy of the License at
1:0ad62f7:  *
1:0ad62f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0ad62f7:  *
1:0ad62f7:  * Unless required by applicable law or agreed to in writing, software
1:0ad62f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0ad62f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0ad62f7:  * See the License for the specific language governing permissions and
1:0ad62f7:  * limitations under the License.
1:0ad62f7:  */
1:0ad62f7: package org.apache.activemq.store.kahadb.disk.journal;
1:0ad62f7: 
1:0ad62f7: import static org.junit.Assert.assertEquals;
1:0ad62f7: import static org.junit.Assert.assertNotNull;
1:0ad62f7: 
1:0ad62f7: import java.io.File;
1:0ad62f7: import java.util.concurrent.TimeUnit;
1:0ad62f7: 
1:0ad62f7: import org.apache.activemq.broker.ConnectionContext;
1:0ad62f7: import org.apache.activemq.command.ActiveMQQueue;
1:0ad62f7: import org.apache.activemq.command.ActiveMQTextMessage;
1:0ad62f7: import org.apache.activemq.command.MessageId;
1:0ad62f7: import org.apache.activemq.store.MessageStore;
1:0ad62f7: import org.apache.activemq.store.kahadb.KahaDBStore;
1:0ad62f7: import org.junit.After;
1:0ad62f7: import org.junit.Rule;
1:0ad62f7: import org.junit.Test;
1:0ad62f7: import org.junit.rules.TemporaryFolder;
1:0ad62f7: import org.junit.rules.Timeout;
1:0ad62f7: import org.slf4j.Logger;
1:0ad62f7: import org.slf4j.LoggerFactory;
1:0ad62f7: 
1:0ad62f7: public class JournalMaxFileLengthChangeTest {
1:0ad62f7: 
1:0ad62f7:     private static final Logger LOG = LoggerFactory.getLogger(JournalMaxFileLengthChangeTest.class);
1:0ad62f7: 
1:0ad62f7:     private static int ONE_MB = 1024*1024;
1:0ad62f7: 
1:0ad62f7:     @Rule
1:0ad62f7:     public TemporaryFolder dataDir = new TemporaryFolder();
1:0ad62f7: 
1:0ad62f7:     @Rule
1:0ad62f7:     public Timeout globalTimeout= new Timeout(20, TimeUnit.SECONDS);
1:0ad62f7: 
1:0ad62f7:     private KahaDBStore store;
1:0ad62f7: 
1:0ad62f7:     @After
1:0ad62f7:     public void after() throws Exception {
1:0ad62f7:         if (store != null) {
1:0ad62f7:             store.stop();
1:0ad62f7:         }
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     /**
1:0ad62f7:      * Test that reported size is correct if the maxFileLength grows
1:0ad62f7:      * in between journal restarts.  Verify all messages still received.
1:0ad62f7:      */
1:0ad62f7:     @Test
1:0ad62f7:     public void testMaxFileLengthGrow() throws Exception {
1:0ad62f7:         MessageStore messageStore = createStore(8 * ONE_MB);
1:0ad62f7:         addMessages(messageStore, 4);
1:0ad62f7: 
1:0ad62f7:         long sizeBeforeChange = store.getJournal().getDiskSize();
1:0ad62f7:         LOG.info("Journal size before: " + sizeBeforeChange);
1:0ad62f7: 
1:0ad62f7:         store.stop();
1:0ad62f7:         messageStore = createStore(6 * ONE_MB);
1:0ad62f7:         verifyMessages(messageStore, 4);
1:0ad62f7: 
1:0ad62f7:         long sizeAfterChange = store.getJournal().getDiskSize();
1:0ad62f7:         LOG.info("Journal size after: " + sizeAfterChange);
1:0ad62f7: 
1:0ad62f7:         //verify the size is the same - will be slightly different as checkpoint journal
1:0ad62f7:         //commands are written but should be close
1:0ad62f7:         assertEquals(sizeBeforeChange, sizeAfterChange, 4096);
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     /**
1:0ad62f7:      * Test that reported size is correct if the maxFileLength shrinks
1:0ad62f7:      * in between journal restarts.  Verify all messages still received.
1:0ad62f7:      */
1:0ad62f7:     @Test
1:0ad62f7:     public void testMaxFileLengthShrink() throws Exception {
1:0ad62f7:         MessageStore messageStore = createStore(8 * ONE_MB);
1:0ad62f7:         addMessages(messageStore, 4);
1:0ad62f7: 
1:0ad62f7:         long sizeBeforeChange = store.getJournal().getDiskSize();
1:0ad62f7:         LOG.info("Journal size before: " + sizeBeforeChange);
1:0ad62f7: 
1:0ad62f7:         store.stop();
1:0ad62f7:         messageStore = createStore(2 * ONE_MB);
1:0ad62f7:         verifyMessages(messageStore, 4);
1:0ad62f7: 
1:0ad62f7:         long sizeAfterChange = store.getJournal().getDiskSize();
1:0ad62f7:         LOG.info("Journal size after: " + sizeAfterChange);
1:0ad62f7: 
1:0ad62f7:         //verify the size is the same - will be slightly different as checkpoint journal
1:0ad62f7:         //commands are written but should be close
1:0ad62f7:         assertEquals(sizeBeforeChange, sizeAfterChange, 4096);
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     private void addMessages(MessageStore messageStore, int num) throws Exception {
1:0ad62f7:         String text = getString(ONE_MB);
1:0ad62f7: 
1:0ad62f7:         for (int i=0; i < num; i++) {
1:0ad62f7:             ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:0ad62f7:             textMessage.setMessageId(new MessageId("1:2:3:" + i));
1:0ad62f7:             textMessage.setText(text);
1:0ad62f7:             messageStore.addMessage(new ConnectionContext(), textMessage);
1:0ad62f7:         }
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     private void verifyMessages(MessageStore messageStore, int num) throws Exception {
1:0ad62f7:         for (int i=0; i < num; i++) {
1:0ad62f7:             assertNotNull(messageStore.getMessage(new MessageId("1:2:3:" + i)));
1:0ad62f7:         }
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     private String getString(int size) {
1:0ad62f7:         StringBuilder builder = new StringBuilder();
1:0ad62f7: 
1:0ad62f7:         for (int i = 0; i < size; i++) {
1:0ad62f7:             builder.append("a");
1:0ad62f7:         }
1:0ad62f7:         return builder.toString();
1:0ad62f7:     }
1:0ad62f7: 
1:0ad62f7:     private MessageStore createStore(int length) throws Exception {
1:0ad62f7:         File dataDirectory = dataDir.getRoot();
1:0ad62f7:         store = new KahaDBStore();
1:0ad62f7:         store.setJournalMaxFileLength(length);
1:0ad62f7:         store.setDirectory(dataDirectory);
1:0ad62f7:         store.setForceRecoverIndex(true);
1:0ad62f7:         store.start();
1:0ad62f7:         return store.createQueueMessageStore(new ActiveMQQueue("test"));
1:0ad62f7:     }
1:0ad62f7: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0ad62f7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.junit.After;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.junit.rules.Timeout;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JournalMaxFileLengthChangeTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JournalMaxFileLengthChangeTest.class);
1: 
1:     private static int ONE_MB = 1024*1024;
1: 
1:     @Rule
1:     public TemporaryFolder dataDir = new TemporaryFolder();
1: 
1:     @Rule
1:     public Timeout globalTimeout= new Timeout(20, TimeUnit.SECONDS);
1: 
1:     private KahaDBStore store;
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (store != null) {
1:             store.stop();
1:         }
1:     }
1: 
1:     /**
1:      * Test that reported size is correct if the maxFileLength grows
1:      * in between journal restarts.  Verify all messages still received.
1:      */
1:     @Test
1:     public void testMaxFileLengthGrow() throws Exception {
1:         MessageStore messageStore = createStore(8 * ONE_MB);
1:         addMessages(messageStore, 4);
1: 
1:         long sizeBeforeChange = store.getJournal().getDiskSize();
1:         LOG.info("Journal size before: " + sizeBeforeChange);
1: 
1:         store.stop();
1:         messageStore = createStore(6 * ONE_MB);
1:         verifyMessages(messageStore, 4);
1: 
1:         long sizeAfterChange = store.getJournal().getDiskSize();
1:         LOG.info("Journal size after: " + sizeAfterChange);
1: 
1:         //verify the size is the same - will be slightly different as checkpoint journal
1:         //commands are written but should be close
1:         assertEquals(sizeBeforeChange, sizeAfterChange, 4096);
1:     }
1: 
1:     /**
1:      * Test that reported size is correct if the maxFileLength shrinks
1:      * in between journal restarts.  Verify all messages still received.
1:      */
1:     @Test
1:     public void testMaxFileLengthShrink() throws Exception {
1:         MessageStore messageStore = createStore(8 * ONE_MB);
1:         addMessages(messageStore, 4);
1: 
1:         long sizeBeforeChange = store.getJournal().getDiskSize();
1:         LOG.info("Journal size before: " + sizeBeforeChange);
1: 
1:         store.stop();
1:         messageStore = createStore(2 * ONE_MB);
1:         verifyMessages(messageStore, 4);
1: 
1:         long sizeAfterChange = store.getJournal().getDiskSize();
1:         LOG.info("Journal size after: " + sizeAfterChange);
1: 
1:         //verify the size is the same - will be slightly different as checkpoint journal
1:         //commands are written but should be close
1:         assertEquals(sizeBeforeChange, sizeAfterChange, 4096);
1:     }
1: 
1:     private void addMessages(MessageStore messageStore, int num) throws Exception {
1:         String text = getString(ONE_MB);
1: 
1:         for (int i=0; i < num; i++) {
1:             ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:             textMessage.setMessageId(new MessageId("1:2:3:" + i));
1:             textMessage.setText(text);
1:             messageStore.addMessage(new ConnectionContext(), textMessage);
1:         }
1:     }
1: 
1:     private void verifyMessages(MessageStore messageStore, int num) throws Exception {
1:         for (int i=0; i < num; i++) {
1:             assertNotNull(messageStore.getMessage(new MessageId("1:2:3:" + i)));
1:         }
1:     }
1: 
1:     private String getString(int size) {
1:         StringBuilder builder = new StringBuilder();
1: 
1:         for (int i = 0; i < size; i++) {
1:             builder.append("a");
1:         }
1:         return builder.toString();
1:     }
1: 
1:     private MessageStore createStore(int length) throws Exception {
1:         File dataDirectory = dataDir.getRoot();
1:         store = new KahaDBStore();
1:         store.setJournalMaxFileLength(length);
1:         store.setDirectory(dataDirectory);
1:         store.setForceRecoverIndex(true);
1:         store.start();
1:         return store.createQueueMessageStore(new ActiveMQQueue("test"));
1:     }
1: }
============================================================================