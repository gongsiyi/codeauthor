2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:63f1473:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74a7a8b:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.spring;
4:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.List;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageListener;
1:fc00993: 
1:4743a20: import org.junit.Assert;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:8f8fddc: public class ConsumerBean extends Assert implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerBean.class);
1:7d4b446:     private final List<Message> messages = new ArrayList<Message>();
1:8f8fddc:     private boolean verbose;
1:770a73e:     private String id = null;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Constructor.
1:d29ca2a:      */
1:d29ca2a:     public ConsumerBean() {
1:d29ca2a:     }
1:7d4b446: 
1:770a73e:     public ConsumerBean(String id) {
1:770a73e:         this.id = id;
1:770a73e:     }
1:770a73e: 
1:d29ca2a:     /**
1:d29ca2a:      * @return all the messages on the list so far, clearing the buffer
1:d29ca2a:      */
1:7d4b446:     public List<Message> flushMessages() {
1:7d4b446:         List<Message> answer = null;
1:7d4b446:         synchronized(messages) {
1:7d4b446:         answer = new ArrayList<Message>(messages);
1:d29ca2a:         messages.clear();
1:7d4b446:         }
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Method implemented from MessageListener interface.
1:63f1473:      *
1:d29ca2a:      * @param message
1:d29ca2a:      */
1:4743a20:     @Override
1:7d4b446:     public void onMessage(Message message) {
1:7d4b446:         synchronized (messages) {
1:7d4b446:             messages.add(message);
1:7d4b446:             if (verbose) {
1:770a73e:                 LOG.info("" + id + "Received: " + message);
1:7d4b446:             }
1:7d4b446:             messages.notifyAll();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Use to wait for a single message to arrive.
1:d29ca2a:      */
1:d29ca2a:     public void waitForMessageToArrive() {
1:fc00993:         LOG.info("Waiting for message to arrive");
1:d29ca2a: 
1:d29ca2a:         long start = System.currentTimeMillis();
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             if (hasReceivedMessage()) {
1:7d4b446:                 synchronized (messages) {
1:7d4b446:                     messages.wait(4000);
1:d29ca2a:                 }
1:d29ca2a:             }
1:74a7a8b:         } catch (InterruptedException e) {
1:fc00993:             LOG.info("Caught: " + e);
1:d29ca2a:         }
1:d29ca2a:         long end = System.currentTimeMillis() - start;
1:d29ca2a: 
1:fc00993:         LOG.info("End of wait for " + end + " millis");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Used to wait for a message to arrive given a particular message count.
1:63f1473:      *
1:d29ca2a:      * @param messageCount
1:d29ca2a:      */
1:1b9f5f6: 
1:1b9f5f6:     public void waitForMessagesToArrive(int messageCount){
1:1b9f5f6:         waitForMessagesToArrive(messageCount,120 * 1000);
1:1b9f5f6:     }
1:1b9f5f6:     public void waitForMessagesToArrive(int messageCount,long maxWaitTime) {
1:7d4b446:         long maxRemainingMessageCount = Math.max(0, messageCount - messages.size());
1:7d4b446:         LOG.info("Waiting for (" + maxRemainingMessageCount + ") message(s) to arrive");
1:d29ca2a:         long start = System.currentTimeMillis();
1:1b9f5f6:         long endTime = start + maxWaitTime;
1:7d4b446:         while (maxRemainingMessageCount > 0) {
1:d29ca2a:             try {
1:7d4b446:                 synchronized (messages) {
1:7d4b446:                     messages.wait(1000);
1:d29ca2a:                 }
1:1b9f5f6:                 if (hasReceivedMessages(messageCount) || System.currentTimeMillis() > endTime) {
1:63f1473:                     break;
1:63f1473:                 }
1:74a7a8b:             } catch (InterruptedException e) {
1:fc00993:                 LOG.info("Caught: " + e);
1:d29ca2a:             }
1:7d4b446:             maxRemainingMessageCount = Math.max(0, messageCount - messages.size());
1:d29ca2a:         }
1:d29ca2a:         long end = System.currentTimeMillis() - start;
1:fc00993:         LOG.info("End of wait for " + end + " millis");
1:d29ca2a:     }
1:d29ca2a: 
1:8f8fddc:     public void assertMessagesArrived(int total) {
1:8f8fddc:         waitForMessagesToArrive(total);
1:7d4b446:         synchronized (messages) {
1:8f8fddc:             int count = messages.size();
1:d29ca2a: 
1:8f8fddc:             assertEquals("Messages received", total, count);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:1b9f5f6:     public void assertMessagesArrived(int total, long maxWaitTime) {
1:1b9f5f6:         waitForMessagesToArrive(total,maxWaitTime);
1:1b9f5f6:         synchronized (messages) {
1:1b9f5f6:             int count = messages.size();
1:1b9f5f6: 
1:1b9f5f6:             assertEquals("Messages received", total, count);
1:1b9f5f6:         }
1:1b9f5f6:     }
1:1b9f5f6: 
1:8f8fddc:     public boolean isVerbose() {
1:8f8fddc:         return verbose;
1:d29ca2a:     }
1:d29ca2a: 
1:8f8fddc:     public void setVerbose(boolean verbose) {
1:8f8fddc:         this.verbose = verbose;
1:d29ca2a:     }
1:d29ca2a: 
1:1ccd177:     public List<Message> getMessages() {
1:1ccd177:         return messages;
1:1ccd177:     }
1:1ccd177: 
1:d29ca2a:     /**
1:d29ca2a:      * Identifies if the message is empty.
1:63f1473:      *
1:d29ca2a:      * @return
1:d29ca2a:      */
1:d29ca2a:     protected boolean hasReceivedMessage() {
1:d29ca2a:         return messages.isEmpty();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Identifies if the message count has reached the total size of message.
1:63f1473:      *
1:d29ca2a:      * @param messageCount
1:d29ca2a:      * @return
1:d29ca2a:      */
1:7d4b446:     protected boolean hasReceivedMessages(int messageCount) {
1:7d4b446:         synchronized (messages) {
1:7d4b446:             return messages.size() >= messageCount;
1:7d4b446:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:770a73e
/////////////////////////////////////////////////////////////////////////
1:     private String id = null;
/////////////////////////////////////////////////////////////////////////
1:     public ConsumerBean(String id) {
1:         this.id = id;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("" + id + "Received: " + message);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:1ccd177
/////////////////////////////////////////////////////////////////////////
1:     public List<Message> getMessages() {
1:         return messages;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Assert;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:1b9f5f6
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void waitForMessagesToArrive(int messageCount){
1:         waitForMessagesToArrive(messageCount,120 * 1000);
1:     }
1:     public void waitForMessagesToArrive(int messageCount,long maxWaitTime) {
1:         long endTime = start + maxWaitTime;
1:                 if (hasReceivedMessages(messageCount) || System.currentTimeMillis() > endTime) {
/////////////////////////////////////////////////////////////////////////
1:     public void assertMessagesArrived(int total, long maxWaitTime) {
1:         waitForMessagesToArrive(total,maxWaitTime);
1:         synchronized (messages) {
1:             int count = messages.size();
1: 
1:             assertEquals("Messages received", total, count);
1:         }
1:     }
1: 
commit:7d4b446
/////////////////////////////////////////////////////////////////////////
1:     private final List<Message> messages = new ArrayList<Message>();
1:     
1:     public List<Message> flushMessages() {
1:         List<Message> answer = null;
1:         synchronized(messages) {
1:         answer = new ArrayList<Message>(messages);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void onMessage(Message message) {
1:         synchronized (messages) {
1:             messages.add(message);
1:             if (verbose) {
0:                 LOG.info("Received: " + message);
1:             }
1:             messages.notifyAll();
/////////////////////////////////////////////////////////////////////////
1:                 synchronized (messages) {
1:                     messages.wait(4000);
/////////////////////////////////////////////////////////////////////////
1:         long maxRemainingMessageCount = Math.max(0, messageCount - messages.size());
1:         LOG.info("Waiting for (" + maxRemainingMessageCount + ") message(s) to arrive");
0:         long maxWaitTime = start + 120 * 1000;
1:         while (maxRemainingMessageCount > 0) {
1:                 synchronized (messages) {
1:                     messages.wait(1000);
0:                 if (hasReceivedMessages(messageCount) || System.currentTimeMillis() > maxWaitTime) {
1:             maxRemainingMessageCount = Math.max(0, messageCount - messages.size());
1:         synchronized (messages) {
/////////////////////////////////////////////////////////////////////////
1:     protected boolean hasReceivedMessages(int messageCount) {
1:         synchronized (messages) {
1:             return messages.size() >= messageCount;
1:         }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerBean.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:5f2abc1
/////////////////////////////////////////////////////////////////////////
0:         final long maxRemainingMessageCount = Math.max(0, messageCount - messages.size());
0:         LOG.info("Waiting for (" + maxRemainingMessageCount + ") message(s) to arrive");     
0:         for (int i = 0; i < maxRemainingMessageCount; i++) {
commit:63f1473
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:                 if (hasReceivedMessages(messageCount)) {
1:                     break;
1:                 }
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private List<Message> messages = new ArrayList<Message>();
/////////////////////////////////////////////////////////////////////////
0:     public synchronized List<Message> flushMessages() {
0:         List<Message> answer = new ArrayList<Message>(messages);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Assert;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(ConsumerBean.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Received: " + message);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for message to arrive");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Caught: " + e);
1:         LOG.info("End of wait for " + end + " millis");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Waiting for message to arrive");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Caught: " + e);
1:         LOG.info("End of wait for " + end + " millis");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: 
0: import junit.framework.Assert;
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ConsumerBean.class);
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:         } catch (InterruptedException e) {
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:             } catch (InterruptedException e) {
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
0: import javax.jms.Message;
0: import javax.jms.MessageListener;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
0: public class ConsumerBean implements MessageListener {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(ConsumerBean.class);
1:     
0:     private List messages = new ArrayList();
0:     private Object semaphore;
1: 
1:     /**
1:      * Constructor.
1:      */
1:     public ConsumerBean() {
0:         this(new Object());
1:     }
1: 
1:     /**
0:      * Constructor, initialized semaphore object.
0:      * @param semaphore
1:      */
0:     public ConsumerBean(Object semaphore) {
0:         this.semaphore = semaphore;
1:     }
1: 
1:     /**
1:      * @return all the messages on the list so far, clearing the buffer
1:      */
0:     public synchronized List flushMessages() {
0:         List answer = new ArrayList(messages);
1:         messages.clear();
1:         return answer;
1:     }
1: 
1:     /**
1:      * Method implemented from MessageListener interface.
1:      * @param message
1:      */
0:     public synchronized void onMessage(Message message) {
0:         messages.add(message);
0:         synchronized (semaphore) {
0:             semaphore.notifyAll();
1:         }
1:     }
1: 
1:     /**
1:      * Use to wait for a single message to arrive.
1:      */
1:     public void waitForMessageToArrive() {
0:         log.info("Waiting for message to arrive");
1: 
1:         long start = System.currentTimeMillis();
1: 
1:         try {
1:             if (hasReceivedMessage()) {
0:                 synchronized (semaphore) {
0:                     semaphore.wait(4000);
1:                 }
1:             }
1:         }
0:         catch (InterruptedException e) {
0:             log.info("Caught: " + e);
1:         }
1:         long end = System.currentTimeMillis() - start;
1: 
0:         log.info("End of wait for " + end + " millis");
1:     }
1: 
1:     /**
1:      * Used to wait for a message to arrive given a particular message count.
1:      * @param messageCount
1:      */
0:     public void waitForMessagesToArrive(int messageCount) {
0:         log.info("Waiting for message to arrive");
1: 
1:         long start = System.currentTimeMillis();
1: 
0:         for (int i = 0; i < 10; i++) {
1:             try {
0:                 if (hasReceivedMessages(messageCount)) {
0:                     break;
1:                 }
0:                 synchronized (semaphore) {
0:                     semaphore.wait(1000);
1:                 }
1:             }
0:             catch (InterruptedException e) {
0:                 log.info("Caught: " + e);
1:             }
1:         }
1:         long end = System.currentTimeMillis() - start;
1: 
0:         log.info("End of wait for " + end + " millis");
1:     }
1: 
1:     /**
1:      * Identifies if the message is empty.
1:      * @return
1:      */
1:     protected boolean hasReceivedMessage() {
1:         return messages.isEmpty();
1:     }
1: 
1:     /**
1:      * Identifies if the message count has reached the total size of message.
1:      * @param messageCount
1:      * @return
1:      */
0:     protected synchronized boolean hasReceivedMessages(int messageCount) {
0:         return messages.size() >= messageCount;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:67310ad
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Assert;
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
commit:8f8fddc
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.Assert;
0: 
1: public class ConsumerBean extends Assert implements MessageListener {
0: 
1:     private boolean verbose;
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
0:         if (verbose) {
0:             log.info("Received: " + message);
0:         }
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:     public void assertMessagesArrived(int total) {
1:         waitForMessagesToArrive(total);
0:         synchronized (this) {
1:             int count = messages.size();
0: 
1:             assertEquals("Messages received", total, count);
0:         }
0:     }
0: 
1:     public boolean isVerbose() {
1:         return verbose;
0:     }
0: 
1:     public void setVerbose(boolean verbose) {
1:         this.verbose = verbose;
0:     }
0: 
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
============================================================================