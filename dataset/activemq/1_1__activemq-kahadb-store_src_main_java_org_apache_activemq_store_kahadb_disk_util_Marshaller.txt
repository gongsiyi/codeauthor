1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
2:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
2:456a2ba: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: 
1:456a2ba: /**
1:0bbc0ac:  * 
1:456a2ba:  */
1:456a2ba: public interface Marshaller<T> {
1:456a2ba:     
1:456a2ba:     /**
1:e22a37a:      * Write the payload of the object to the DataOutput stream.
1:e22a37a:      * 
1:456a2ba:      * @param object 
1:456a2ba:      * @param dataOut
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     void writePayload(T object, DataOutput dataOut) throws IOException;
1:456a2ba:     
1:456a2ba:     
1:456a2ba:     /**
1:e22a37a:      * Read the payload of the object from the DataInput stream.
1:e22a37a:      * 
1:456a2ba:      * @param dataIn 
1:456a2ba:      * @return unmarshalled object
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     T readPayload(DataInput dataIn) throws IOException;
1:456a2ba: 
1:e22a37a:     /** 
1:e22a37a:      * @return -1 if the object do not always marshall to a fixed size, otherwise return that fixed size.
1:e22a37a:      */
1:e22a37a:     int getFixedSize();
1:e22a37a:     
1:e22a37a:     /**
1:e22a37a:      * 
1:e22a37a:      * @return true if the {@link #deepCopy(Object)} operations is supported.
1:e22a37a:      */
1:e22a37a:     boolean isDeepCopySupported();
1:e22a37a: 
1:e22a37a:     /**
1:e22a37a:      * @return a deep copy of the source object.
1:e22a37a:      */
1:e22a37a:     T deepCopy(T source);
1:456a2ba:    
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:e22a37a
/////////////////////////////////////////////////////////////////////////
1:      * Write the payload of the object to the DataOutput stream.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Read the payload of the object from the DataInput stream.
1:      * 
1:     /** 
1:      * @return -1 if the object do not always marshall to a fixed size, otherwise return that fixed size.
1:      */
1:     int getFixedSize();
1:     
1:     /**
1:      * 
1:      * @return true if the {@link #deepCopy(Object)} operations is supported.
1:      */
1:     boolean isDeepCopySupported();
1: 
1:     /**
1:      * @return a deep copy of the source object.
1:      */
1:     T deepCopy(T source);
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: /**
0:  * Marshaller for marshalling in/out objects to a RawContainer
1:  * 
0:  * @version $Revision$
1:  */
1: public interface Marshaller<T> {
1:     
0:     Class<T> getType();
1:        
1:     /**
0:      * Write the payload of this entry to the RawContainer
1:      * @param object 
1:      * @param dataOut
1:      * @throws IOException
1:      */
1:     void writePayload(T object, DataOutput dataOut) throws IOException;
1:     
1:     
1:     /**
0:      * Read the entry from the RawContainer
1:      * @param dataIn 
1:      * @return unmarshalled object
1:      * @throws IOException
1:      */
1:     T readPayload(DataInput dataIn) throws IOException;
1: 
1:    
1: }
============================================================================