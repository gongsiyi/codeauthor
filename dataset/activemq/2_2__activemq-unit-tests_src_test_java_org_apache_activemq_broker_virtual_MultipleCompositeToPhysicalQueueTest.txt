1:35b7ac2: /**
1:35b7ac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:35b7ac2:  * contributor license agreements.  See the NOTICE file distributed with
1:35b7ac2:  * this work for additional information regarding copyright ownership.
1:35b7ac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:35b7ac2:  * (the "License"); you may not use this file except in compliance with
1:35b7ac2:  * the License.  You may obtain a copy of the License at
1:35b7ac2:  *
1:35b7ac2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:35b7ac2:  *
1:35b7ac2:  * Unless required by applicable law or agreed to in writing, software
1:35b7ac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:35b7ac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:35b7ac2:  * See the License for the specific language governing permissions and
1:35b7ac2:  * limitations under the License.
1:35b7ac2:  */
1:35b7ac2: package org.apache.activemq.broker.virtual;
1:35b7ac2: 
1:35b7ac2: import static org.junit.Assert.assertEquals;
1:35b7ac2: 
1:35b7ac2: import java.net.URI;
1:35b7ac2: import java.util.Collections;
1:35b7ac2: 
1:35b7ac2: import javax.jms.Connection;
1:35b7ac2: import javax.jms.DeliveryMode;
1:35b7ac2: import javax.jms.Destination;
1:35b7ac2: import javax.jms.JMSException;
1:1ccd177: import javax.jms.Message;
1:35b7ac2: import javax.jms.MessageConsumer;
1:35b7ac2: import javax.jms.MessageListener;
1:35b7ac2: import javax.jms.MessageProducer;
1:35b7ac2: import javax.jms.Session;
1:35b7ac2: import javax.jms.TextMessage;
1:35b7ac2: 
1:35b7ac2: import org.apache.activemq.ActiveMQConnectionFactory;
1:35b7ac2: import org.apache.activemq.broker.BrokerService;
1:35b7ac2: import org.apache.activemq.broker.TransportConnector;
1:35b7ac2: import org.apache.activemq.broker.region.DestinationInterceptor;
1:35b7ac2: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1:35b7ac2: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:35b7ac2: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:35b7ac2: import org.apache.activemq.command.ActiveMQDestination;
1:1ccd177: import org.apache.activemq.command.ActiveMQMessage;
1:35b7ac2: import org.apache.activemq.command.ActiveMQQueue;
1:35b7ac2: import org.junit.After;
1:35b7ac2: import org.junit.Before;
1:35b7ac2: import org.junit.Test;
1:35b7ac2: 
1:35b7ac2: /**
1:35b7ac2:  *  https://issues.apache.org/jira/browse/AMQ-5898
1:35b7ac2:  */
1:35b7ac2: public class MultipleCompositeToPhysicalQueueTest {
1:35b7ac2: 
1:35b7ac2:     private final ActiveMQQueue SUB1 = new ActiveMQQueue("SUB1");
1:35b7ac2:     private final CompositeQueue PUB_BROADCAST = newCompositeQueue("PUB.ALL", SUB1);
1:35b7ac2:     private final CompositeQueue PUB_INDIVIDUAL = newCompositeQueue("PUB.SUB1", SUB1);
1:35b7ac2:     private String url;;
1:35b7ac2: 
1:35b7ac2:     private BrokerService broker;
1:35b7ac2: 
1:35b7ac2:     @Before
1:35b7ac2:     public void before() throws Exception {
1:35b7ac2:         broker = createBroker(false);
1:35b7ac2:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:35b7ac2:         virtualDestinationInterceptor.setVirtualDestinations(
1:35b7ac2:                 new VirtualDestination[]{
1:35b7ac2:                         PUB_BROADCAST,
1:35b7ac2:                         PUB_INDIVIDUAL
1:35b7ac2:                 }
1:35b7ac2:         );
1:35b7ac2:         broker.setDestinationInterceptors(new DestinationInterceptor[]{virtualDestinationInterceptor});
1:35b7ac2:         broker.start();
1:35b7ac2:         broker.waitUntilStarted();
1:35b7ac2:         url = broker.getConnectorByName("tcp").getConnectUri().toString();
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     @After
1:35b7ac2:     public void after() throws Exception {
1:35b7ac2:         broker.stop();
1:35b7ac2:         broker.waitUntilStopped();
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     @Test(timeout = 60000)
1:35b7ac2:     public void testManyToOne() throws Exception {
1:35b7ac2: 
1:35b7ac2:         Session consumerSession = buildSession("Consumer", url);
1:35b7ac2: 
1:35b7ac2:         MessageConsumer consumer = createSubscriber(consumerSession, SUB1, null);
1:35b7ac2: 
1:35b7ac2:         // Producer
1:35b7ac2:         Session publisherSession = buildSession("Producer", url);
1:35b7ac2: 
1:35b7ac2:         createPublisher(publisherSession, PUB_BROADCAST.getVirtualDestination()).send(publisherSession.createTextMessage("BROADCAST"));
1:1ccd177:         ActiveMQMessage broadcastMessage = (ActiveMQMessage) consumer.receive();
1:1ccd177:         ActiveMQDestination originalDestination = broadcastMessage.getOriginalDestination();
1:1ccd177: 
1:1ccd177:         assertEquals("BROADCAST", ((TextMessage) broadcastMessage).getText());
1:1ccd177:         assertEquals( PUB_BROADCAST.getName(), broadcastMessage.getOriginalDestination().getPhysicalName());
1:35b7ac2: 
1:35b7ac2:         createPublisher(publisherSession, PUB_INDIVIDUAL.getVirtualDestination()).send(publisherSession.createTextMessage("INDIVIDUAL"));
1:1ccd177:         ActiveMQMessage individualMessage = (ActiveMQMessage)consumer.receive();
1:1ccd177: 
1:1ccd177:         assertEquals("INDIVIDUAL", ((TextMessage)individualMessage).getText());
1:1ccd177:         assertEquals( PUB_INDIVIDUAL.getName(), individualMessage.getOriginalDestination().getPhysicalName());
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     private BrokerService createBroker(boolean persistent) throws Exception {
1:35b7ac2:         BrokerService broker = new BrokerService();
1:35b7ac2:         broker.setBrokerName("TestBroker");
1:35b7ac2:         broker.setPersistent(persistent);
1:35b7ac2:         TransportConnector connector = new TransportConnector();
1:35b7ac2:         connector.setUri(new URI("tcp://localhost:0"));
1:35b7ac2:         connector.setName("tcp");;
1:35b7ac2:         broker.addConnector(connector);
1:35b7ac2: 
1:35b7ac2:         return broker;
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     private MessageConsumer createSubscriber(Session session, Destination destination, MessageListener messageListener) throws JMSException {
1:35b7ac2:         MessageConsumer consumer = session.createConsumer(destination);
1:35b7ac2:         consumer.setMessageListener(messageListener);
1:35b7ac2:         return consumer;
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     private MessageProducer createPublisher(Session session, Destination destination) throws JMSException {
1:35b7ac2:         MessageProducer producer = session.createProducer(destination);
1:35b7ac2:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:35b7ac2:         return producer;
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     private Session buildSession(String clientId, String url) throws JMSException {
1:35b7ac2:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1:35b7ac2: 
1:35b7ac2:         connectionFactory.setClientIDPrefix(clientId);
1:35b7ac2:         Connection connection = connectionFactory.createConnection();
1:35b7ac2:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:35b7ac2:         connection.start();
1:35b7ac2: 
1:35b7ac2:         return session;
1:35b7ac2:     }
1:35b7ac2: 
1:35b7ac2:     private CompositeQueue newCompositeQueue(String name, ActiveMQDestination forwardTo) {
1:35b7ac2:         CompositeQueue queue = new CompositeQueue();
1:35b7ac2:         queue.setName(name);
1:35b7ac2:         queue.setForwardTo(Collections.singleton(forwardTo));
1:35b7ac2:         return queue;
1:35b7ac2:     }
1:35b7ac2: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:1ccd177
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage broadcastMessage = (ActiveMQMessage) consumer.receive();
1:         ActiveMQDestination originalDestination = broadcastMessage.getOriginalDestination();
1: 
1:         assertEquals("BROADCAST", ((TextMessage) broadcastMessage).getText());
1:         assertEquals( PUB_BROADCAST.getName(), broadcastMessage.getOriginalDestination().getPhysicalName());
1:         ActiveMQMessage individualMessage = (ActiveMQMessage)consumer.receive();
1: 
1:         assertEquals("INDIVIDUAL", ((TextMessage)individualMessage).getText());
1:         assertEquals( PUB_INDIVIDUAL.getName(), individualMessage.getOriginalDestination().getPhysicalName());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:35b7ac2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: import java.util.Collections;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  *  https://issues.apache.org/jira/browse/AMQ-5898
1:  */
1: public class MultipleCompositeToPhysicalQueueTest {
1: 
1:     private final ActiveMQQueue SUB1 = new ActiveMQQueue("SUB1");
1:     private final CompositeQueue PUB_BROADCAST = newCompositeQueue("PUB.ALL", SUB1);
1:     private final CompositeQueue PUB_INDIVIDUAL = newCompositeQueue("PUB.SUB1", SUB1);
1:     private String url;;
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         broker = createBroker(false);
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(
1:                 new VirtualDestination[]{
1:                         PUB_BROADCAST,
1:                         PUB_INDIVIDUAL
1:                 }
1:         );
1:         broker.setDestinationInterceptors(new DestinationInterceptor[]{virtualDestinationInterceptor});
1:         broker.start();
1:         broker.waitUntilStarted();
1:         url = broker.getConnectorByName("tcp").getConnectUri().toString();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testManyToOne() throws Exception {
1: 
1:         Session consumerSession = buildSession("Consumer", url);
1: 
1:         MessageConsumer consumer = createSubscriber(consumerSession, SUB1, null);
1: 
1:         // Producer
1:         Session publisherSession = buildSession("Producer", url);
1: 
1:         createPublisher(publisherSession, PUB_BROADCAST.getVirtualDestination()).send(publisherSession.createTextMessage("BROADCAST"));
0:         assertEquals("BROADCAST", ((TextMessage) consumer.receive()).getText());
1: 
1:         createPublisher(publisherSession, PUB_INDIVIDUAL.getVirtualDestination()).send(publisherSession.createTextMessage("INDIVIDUAL"));
0:         assertEquals("INDIVIDUAL", ((TextMessage) consumer.receive()).getText());
1:     }
1: 
1:     private BrokerService createBroker(boolean persistent) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("TestBroker");
1:         broker.setPersistent(persistent);
1:         TransportConnector connector = new TransportConnector();
1:         connector.setUri(new URI("tcp://localhost:0"));
1:         connector.setName("tcp");;
1:         broker.addConnector(connector);
1: 
1:         return broker;
1:     }
1: 
1:     private MessageConsumer createSubscriber(Session session, Destination destination, MessageListener messageListener) throws JMSException {
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         consumer.setMessageListener(messageListener);
1:         return consumer;
1:     }
1: 
1:     private MessageProducer createPublisher(Session session, Destination destination) throws JMSException {
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         return producer;
1:     }
1: 
1:     private Session buildSession(String clientId, String url) throws JMSException {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
1: 
1:         connectionFactory.setClientIDPrefix(clientId);
1:         Connection connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         return session;
1:     }
1: 
1:     private CompositeQueue newCompositeQueue(String name, ActiveMQDestination forwardTo) {
1:         CompositeQueue queue = new CompositeQueue();
1:         queue.setName(name);
1:         queue.setForwardTo(Collections.singleton(forwardTo));
1:         return queue;
1:     }
1: }
============================================================================