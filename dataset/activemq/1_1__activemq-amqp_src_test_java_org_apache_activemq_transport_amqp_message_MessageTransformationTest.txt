1:b1a9a93: /*
1:b1a9a93:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b1a9a93:  * contributor license agreements.  See the NOTICE file distributed with
1:b1a9a93:  * this work for additional information regarding copyright ownership.
1:b1a9a93:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b1a9a93:  * (the "License"); you may not use this file except in compliance with
1:b1a9a93:  * the License.  You may obtain a copy of the License at
1:b1a9a93:  *
1:b1a9a93:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b1a9a93:  *
1:b1a9a93:  * Unless required by applicable law or agreed to in writing, software
1:b1a9a93:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b1a9a93:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b1a9a93:  * See the License for the specific language governing permissions and
1:b1a9a93:  * limitations under the License.
1:b1a9a93:  */
1:b1a9a93: package org.apache.activemq.transport.amqp.message;
1:b1a9a93: 
1:b1a9a93: import static org.junit.Assert.assertEquals;
1:b1a9a93: import static org.junit.Assert.assertNotNull;
1:b1a9a93: import static org.junit.Assert.assertNull;
1:b1a9a93: import static org.junit.Assert.assertTrue;
1:b1a9a93: 
1:b1a9a93: import java.nio.ByteBuffer;
1:b1a9a93: import java.nio.charset.StandardCharsets;
1:b1a9a93: import java.util.Arrays;
1:b1a9a93: import java.util.Collection;
1:b1a9a93: import java.util.HashMap;
1:b1a9a93: import java.util.Map;
1:b1a9a93: 
1:b1a9a93: import org.apache.activemq.command.ActiveMQMessage;
1:b1a9a93: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
1:b1a9a93: import org.apache.qpid.proton.Proton;
1:b1a9a93: import org.apache.qpid.proton.amqp.Symbol;
1:b1a9a93: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:b1a9a93: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
1:b1a9a93: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:ee9f316: import org.apache.qpid.proton.amqp.messaging.Section;
1:b1a9a93: import org.apache.qpid.proton.codec.CompositeWritableBuffer;
1:b1a9a93: import org.apache.qpid.proton.codec.DroppingWritableBuffer;
1:b1a9a93: import org.apache.qpid.proton.codec.WritableBuffer;
1:b1a9a93: import org.apache.qpid.proton.message.Message;
1:b1a9a93: import org.apache.qpid.proton.message.ProtonJMessage;
1:b1a9a93: import org.junit.Rule;
1:b1a9a93: import org.junit.Test;
1:b1a9a93: import org.junit.rules.TestName;
1:b1a9a93: import org.junit.runner.RunWith;
1:b1a9a93: import org.junit.runners.Parameterized;
1:b1a9a93: import org.junit.runners.Parameterized.Parameters;
1:b1a9a93: import org.slf4j.Logger;
1:b1a9a93: import org.slf4j.LoggerFactory;
1:b1a9a93: 
1:b1a9a93: /**
1:b1a9a93:  * Tests some basic encode / decode functionality on the transformers.
1:b1a9a93:  */
1:b1a9a93: @RunWith(Parameterized.class)
1:b1a9a93: public class MessageTransformationTest {
1:b1a9a93: 
1:b1a9a93:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1:b1a9a93: 
1:b1a9a93:     @Rule
1:b1a9a93:     public TestName test = new TestName();
1:b1a9a93: 
1:b1a9a93:     private final String transformer;
1:b1a9a93: 
1:b1a9a93:     public MessageTransformationTest(String transformer) {
1:b1a9a93:         this.transformer = transformer;
2:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Parameters(name="Transformer->{0}")
1:b1a9a93:     public static Collection<Object[]> data() {
1:b1a9a93:         return Arrays.asList(new Object[][] {
1:b1a9a93:                 {"jms"},
1:b1a9a93:                 {"native"},
1:b1a9a93:                 {"raw"},
1:b1a9a93:             });
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     private InboundTransformer getInboundTransformer() {
2:b1a9a93:         switch (transformer) {
2:b1a9a93:             case "raw":
1:b1a9a93:                 return new AMQPRawInboundTransformer();
2:b1a9a93:             case "native":
1:b1a9a93:                 return new AMQPNativeInboundTransformer();
2:b1a9a93:             default:
1:b1a9a93:                 return new JMSMappingInboundTransformer();
1:b1a9a93:         }
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     private OutboundTransformer getOutboundTransformer() {
1:ee9f316:         return new AutoOutboundTransformer();
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Test
1:b1a9a93:     public void testEncodeDecodeFidelity() throws Exception {
1:b1a9a93:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:b1a9a93:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1:ee9f316: 
1:b1a9a93:         applicationProperties.put("property-1", "string");
1:b1a9a93:         applicationProperties.put("property-2", 512);
1:b1a9a93:         applicationProperties.put("property-3", true);
1:b1a9a93: 
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1:b1a9a93: 
1:b1a9a93:         Message incomingMessage = Proton.message();
1:b1a9a93: 
1:b1a9a93:         incomingMessage.setAddress("queue://test-queue");
1:b1a9a93:         incomingMessage.setDeliveryCount(1);
1:b1a9a93:         incomingMessage.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:b1a9a93:         incomingMessage.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:b1a9a93:         incomingMessage.setCreationTime(System.currentTimeMillis());
1:b1a9a93:         incomingMessage.setContentType("text/plain");
1:b1a9a93:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:b1a9a93: 
1:b1a9a93:         EncodedMessage encoded = encode(incomingMessage);
1:b1a9a93:         InboundTransformer inboundTransformer = getInboundTransformer();
1:b1a9a93:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:b1a9a93: 
1:b1a9a93:         ActiveMQMessage outbound = inboundTransformer.transform(encoded);
1:b1a9a93:         outbound.onSend();
1:b1a9a93:         Message outboudMessage = outboundTransformer.transform(outbound).decode();
1:b1a9a93: 
1:b1a9a93:         // Test that message details are equal
1:b1a9a93:         assertEquals(incomingMessage.getAddress(), outboudMessage.getAddress());
1:b1a9a93:         assertEquals(incomingMessage.getDeliveryCount(), outboudMessage.getDeliveryCount());
1:b1a9a93:         assertEquals(incomingMessage.getCreationTime(), outboudMessage.getCreationTime());
1:b1a9a93:         assertEquals(incomingMessage.getContentType(), outboudMessage.getContentType());
1:b1a9a93: 
1:b1a9a93:         // Test Message annotations
1:b1a9a93:         ApplicationProperties incomingApplicationProperties = incomingMessage.getApplicationProperties();
1:b1a9a93:         ApplicationProperties outgoingApplicationProperties = outboudMessage.getApplicationProperties();
1:b1a9a93: 
1:b1a9a93:         assertEquals(incomingApplicationProperties.getValue(), outgoingApplicationProperties.getValue());
1:b1a9a93: 
1:b1a9a93:         // Test Message properties
1:b1a9a93:         MessageAnnotations incomingMessageAnnotations = incomingMessage.getMessageAnnotations();
1:b1a9a93:         MessageAnnotations outgoingMessageAnnotations = outboudMessage.getMessageAnnotations();
1:b1a9a93: 
1:b1a9a93:         assertEquals(incomingMessageAnnotations.getValue(), outgoingMessageAnnotations.getValue());
1:b1a9a93: 
1:b1a9a93:         // Test that bodies are equal
1:b1a9a93:         assertTrue(incomingMessage.getBody() instanceof AmqpValue);
1:b1a9a93:         assertTrue(outboudMessage.getBody() instanceof AmqpValue);
1:b1a9a93: 
1:b1a9a93:         AmqpValue incomingBody = (AmqpValue) incomingMessage.getBody();
1:b1a9a93:         AmqpValue outgoingBody = (AmqpValue) outboudMessage.getBody();
1:b1a9a93: 
1:b1a9a93:         assertTrue(incomingBody.getValue() instanceof String);
1:b1a9a93:         assertTrue(outgoingBody.getValue() instanceof String);
1:b1a9a93: 
1:b1a9a93:         assertEquals(incomingBody.getValue(), outgoingBody.getValue());
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Test
1:b1a9a93:     public void testBodyOnlyEncodeDecode() throws Exception {
1:b1a9a93: 
1:b1a9a93:         Message incomingMessage = Proton.message();
1:b1a9a93: 
1:b1a9a93:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:b1a9a93: 
1:b1a9a93:         EncodedMessage encoded = encode(incomingMessage);
1:b1a9a93:         InboundTransformer inboundTransformer = getInboundTransformer();
1:b1a9a93:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:b1a9a93: 
1:b1a9a93:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:b1a9a93:         intermediate.onSend();
1:b1a9a93:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1:b1a9a93: 
1:b1a9a93:         assertNull(outboudMessage.getHeader());
1:b1a9a93:         assertNull(outboudMessage.getProperties());
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Test
1:b1a9a93:     public void testPropertiesButNoHeadersEncodeDecode() throws Exception {
1:b1a9a93: 
1:b1a9a93:         Message incomingMessage = Proton.message();
1:b1a9a93: 
1:b1a9a93:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:b1a9a93:         incomingMessage.setMessageId("ID:SomeQualifier:0:0:1");
1:b1a9a93: 
1:b1a9a93:         EncodedMessage encoded = encode(incomingMessage);
1:b1a9a93:         InboundTransformer inboundTransformer = getInboundTransformer();
1:b1a9a93:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:b1a9a93: 
1:b1a9a93:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:b1a9a93:         intermediate.onSend();
1:b1a9a93:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1:b1a9a93: 
1:b1a9a93:         assertNull(outboudMessage.getHeader());
1:b1a9a93:         assertNotNull(outboudMessage.getProperties());
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Test
1:b1a9a93:     public void testHeaderButNoPropertiesEncodeDecode() throws Exception {
1:b1a9a93: 
1:b1a9a93:         Message incomingMessage = Proton.message();
1:b1a9a93: 
1:b1a9a93:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:b1a9a93:         incomingMessage.setDurable(true);
1:b1a9a93: 
1:b1a9a93:         EncodedMessage encoded = encode(incomingMessage);
1:b1a9a93:         InboundTransformer inboundTransformer = getInboundTransformer();
1:b1a9a93:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:b1a9a93: 
1:b1a9a93:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:b1a9a93:         intermediate.onSend();
1:b1a9a93:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1:b1a9a93: 
1:b1a9a93:         assertNotNull(outboudMessage.getHeader());
1:b1a9a93:         assertNull(outboudMessage.getProperties());
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     @Test
1:ee9f316:     public void testMessageWithAmqpValueThatFailsJMSConversion() throws Exception {
1:ee9f316: 
1:ee9f316:         Message incomingMessage = Proton.message();
1:ee9f316: 
1:ee9f316:         incomingMessage.setBody(new AmqpValue(new Boolean(true)));
1:ee9f316: 
1:ee9f316:         EncodedMessage encoded = encode(incomingMessage);
1:ee9f316:         InboundTransformer inboundTransformer = getInboundTransformer();
1:ee9f316:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:ee9f316: 
1:ee9f316:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:ee9f316:         intermediate.onSend();
1:ee9f316:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1:b1a9a93: 
1:ee9f316:         Section section = outboudMessage.getBody();
1:ee9f316:         assertNotNull(section);
1:ee9f316:         assertTrue(section instanceof AmqpValue);
1:ee9f316:         AmqpValue amqpValue = (AmqpValue) section;
1:ee9f316:         assertNotNull(amqpValue.getValue());
1:ee9f316:         assertTrue(amqpValue.getValue() instanceof Boolean);
1:ee9f316:         assertEquals(true, amqpValue.getValue());
1:ee9f316:     }
1:ee9f316: 
1:ee9f316:     @Test
1:b1a9a93:     public void testComplexQpidJMSMessageEncodeDecode() throws Exception {
1:b1a9a93: 
1:b1a9a93:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:b1a9a93:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1:b1a9a93: 
1:b1a9a93:         applicationProperties.put("property-1", "string-1");
1:b1a9a93:         applicationProperties.put("property-2", 512);
1:b1a9a93:         applicationProperties.put("property-3", true);
1:b1a9a93:         applicationProperties.put("property-4", "string-2");
1:b1a9a93:         applicationProperties.put("property-5", 512);
1:b1a9a93:         applicationProperties.put("property-6", true);
1:b1a9a93:         applicationProperties.put("property-7", "string-3");
1:b1a9a93:         applicationProperties.put("property-8", 512);
1:b1a9a93:         applicationProperties.put("property-9", true);
1:b1a9a93: 
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-reply-to"), 0);
1:b1a9a93:         messageAnnotations.put(Symbol.valueOf("x-opt-delivery-delay"), 2000);
1:b1a9a93: 
1:b1a9a93:         Message message = Proton.message();
1:b1a9a93: 
1:b1a9a93:         // Header Values
1:b1a9a93:         message.setPriority((short) 9);
1:b1a9a93:         message.setDurable(true);
1:b1a9a93:         message.setDeliveryCount(2);
1:b1a9a93:         message.setTtl(5000);
1:b1a9a93: 
1:b1a9a93:         // Properties
1:b1a9a93:         message.setMessageId("ID:SomeQualifier:0:0:1");
1:b1a9a93:         message.setGroupId("Group-ID-1");
1:b1a9a93:         message.setGroupSequence(15);
1:b1a9a93:         message.setAddress("queue://test-queue");
1:b1a9a93:         message.setReplyTo("queue://reply-queue");
1:b1a9a93:         message.setCreationTime(System.currentTimeMillis());
1:b1a9a93:         message.setContentType("text/plain");
1:b1a9a93:         message.setCorrelationId("ID:SomeQualifier:0:7:9");
1:b1a9a93:         message.setUserId("username".getBytes(StandardCharsets.UTF_8));
1:b1a9a93: 
1:b1a9a93:         // Application Properties / Message Annotations / Body
1:b1a9a93:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:b1a9a93:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:b1a9a93:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:b1a9a93: 
1:b1a9a93:         EncodedMessage encoded = encode(message);
1:b1a9a93:         InboundTransformer inboundTransformer = getInboundTransformer();
1:b1a9a93:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:b1a9a93: 
1:b1a9a93:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:b1a9a93:         intermediate.onSend();
1:b1a9a93:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1:b1a9a93: 
1:b1a9a93:         assertNotNull(outboudMessage.getHeader());
1:b1a9a93:         assertNotNull(outboudMessage.getProperties());
1:b1a9a93:         assertNotNull(outboudMessage.getMessageAnnotations());
1:b1a9a93:         assertNotNull(outboudMessage.getApplicationProperties());
1:b1a9a93:         assertNull(outboudMessage.getDeliveryAnnotations());
1:b1a9a93:         assertNull(outboudMessage.getFooter());
1:b1a9a93: 
1:b1a9a93:         assertEquals(9, outboudMessage.getApplicationProperties().getValue().size());
1:b1a9a93:         assertEquals(4, outboudMessage.getMessageAnnotations().getValue().size());
1:b1a9a93:     }
1:b1a9a93: 
1:b1a9a93:     private EncodedMessage encode(Message message) {
1:b1a9a93:         ProtonJMessage amqp = (ProtonJMessage) message;
1:b1a9a93: 
1:b1a9a93:         ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
1:b1a9a93:         final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
1:b1a9a93:         int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
1:b1a9a93:         if (overflow.position() > 0) {
1:b1a9a93:             buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
1:b1a9a93:             c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
1:b1a9a93:         }
1:b1a9a93: 
1:b1a9a93:         return new EncodedMessage(1, buffer.array(), 0, c);
1:b1a9a93:     }
1:b1a9a93: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ee9f316
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.messaging.Section;
/////////////////////////////////////////////////////////////////////////
1:         return new AutoOutboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:     public void testMessageWithAmqpValueThatFailsJMSConversion() throws Exception {
1: 
1:         Message incomingMessage = Proton.message();
1: 
1:         incomingMessage.setBody(new AmqpValue(new Boolean(true)));
1: 
1:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
1:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
1:         Section section = outboudMessage.getBody();
1:         assertNotNull(section);
1:         assertTrue(section instanceof AmqpValue);
1:         AmqpValue amqpValue = (AmqpValue) section;
1:         assertNotNull(amqpValue.getValue());
1:         assertTrue(amqpValue.getValue() instanceof Boolean);
1:         assertEquals(true, amqpValue.getValue());
1:     }
1: 
1:     @Test
commit:b1a9a93
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.nio.ByteBuffer;
1: import java.nio.charset.StandardCharsets;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
1: import org.apache.qpid.proton.Proton;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.codec.CompositeWritableBuffer;
1: import org.apache.qpid.proton.codec.DroppingWritableBuffer;
1: import org.apache.qpid.proton.codec.WritableBuffer;
1: import org.apache.qpid.proton.message.Message;
1: import org.apache.qpid.proton.message.ProtonJMessage;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests some basic encode / decode functionality on the transformers.
1:  */
1: @RunWith(Parameterized.class)
1: public class MessageTransformationTest {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1: 
1:     @Rule
1:     public TestName test = new TestName();
1: 
1:     private final String transformer;
1: 
1:     public MessageTransformationTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Parameters(name="Transformer->{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"jms"},
1:                 {"native"},
1:                 {"raw"},
1:             });
1:     }
1: 
1:     private InboundTransformer getInboundTransformer() {
1:         switch (transformer) {
1:             case "raw":
1:                 return new AMQPRawInboundTransformer();
1:             case "native":
1:                 return new AMQPNativeInboundTransformer();
1:             default:
1:                 return new JMSMappingInboundTransformer();
1:         }
1:     }
1: 
1:     private OutboundTransformer getOutboundTransformer() {
1:         switch (transformer) {
1:             case "raw":
1:             case "native":
0:                 return new AMQPNativeOutboundTransformer();
1:             default:
0:                 return new JMSMappingOutboundTransformer();
1:         }
1:     }
1: 
1:     @Test
1:     public void testEncodeDecodeFidelity() throws Exception {
1:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
1:         applicationProperties.put("property-1", "string");
1:         applicationProperties.put("property-2", 512);
1:         applicationProperties.put("property-3", true);
1: 
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1: 
1:         Message incomingMessage = Proton.message();
1: 
1:         incomingMessage.setAddress("queue://test-queue");
1:         incomingMessage.setDeliveryCount(1);
1:         incomingMessage.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:         incomingMessage.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         incomingMessage.setCreationTime(System.currentTimeMillis());
1:         incomingMessage.setContentType("text/plain");
1:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage outbound = inboundTransformer.transform(encoded);
1:         outbound.onSend();
1:         Message outboudMessage = outboundTransformer.transform(outbound).decode();
1: 
1:         // Test that message details are equal
1:         assertEquals(incomingMessage.getAddress(), outboudMessage.getAddress());
1:         assertEquals(incomingMessage.getDeliveryCount(), outboudMessage.getDeliveryCount());
1:         assertEquals(incomingMessage.getCreationTime(), outboudMessage.getCreationTime());
1:         assertEquals(incomingMessage.getContentType(), outboudMessage.getContentType());
1: 
1:         // Test Message annotations
1:         ApplicationProperties incomingApplicationProperties = incomingMessage.getApplicationProperties();
1:         ApplicationProperties outgoingApplicationProperties = outboudMessage.getApplicationProperties();
1: 
1:         assertEquals(incomingApplicationProperties.getValue(), outgoingApplicationProperties.getValue());
1: 
1:         // Test Message properties
1:         MessageAnnotations incomingMessageAnnotations = incomingMessage.getMessageAnnotations();
1:         MessageAnnotations outgoingMessageAnnotations = outboudMessage.getMessageAnnotations();
1: 
1:         assertEquals(incomingMessageAnnotations.getValue(), outgoingMessageAnnotations.getValue());
1: 
1:         // Test that bodies are equal
1:         assertTrue(incomingMessage.getBody() instanceof AmqpValue);
1:         assertTrue(outboudMessage.getBody() instanceof AmqpValue);
1: 
1:         AmqpValue incomingBody = (AmqpValue) incomingMessage.getBody();
1:         AmqpValue outgoingBody = (AmqpValue) outboudMessage.getBody();
1: 
1:         assertTrue(incomingBody.getValue() instanceof String);
1:         assertTrue(outgoingBody.getValue() instanceof String);
1: 
1:         assertEquals(incomingBody.getValue(), outgoingBody.getValue());
1:     }
1: 
1:     @Test
1:     public void testBodyOnlyEncodeDecode() throws Exception {
1: 
1:         Message incomingMessage = Proton.message();
1: 
1:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
1:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
1:         assertNull(outboudMessage.getHeader());
1:         assertNull(outboudMessage.getProperties());
1:     }
1: 
1:     @Test
1:     public void testPropertiesButNoHeadersEncodeDecode() throws Exception {
1: 
1:         Message incomingMessage = Proton.message();
1: 
1:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:         incomingMessage.setMessageId("ID:SomeQualifier:0:0:1");
1: 
1:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
1:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
1:         assertNull(outboudMessage.getHeader());
1:         assertNotNull(outboudMessage.getProperties());
1:     }
1: 
1:     @Test
1:     public void testHeaderButNoPropertiesEncodeDecode() throws Exception {
1: 
1:         Message incomingMessage = Proton.message();
1: 
1:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:         incomingMessage.setDurable(true);
1: 
1:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
1:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
1:         assertNotNull(outboudMessage.getHeader());
1:         assertNull(outboudMessage.getProperties());
1:     }
1: 
1:     @Test
1:     public void testComplexQpidJMSMessageEncodeDecode() throws Exception {
1: 
1:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
1:         applicationProperties.put("property-1", "string-1");
1:         applicationProperties.put("property-2", 512);
1:         applicationProperties.put("property-3", true);
1:         applicationProperties.put("property-4", "string-2");
1:         applicationProperties.put("property-5", 512);
1:         applicationProperties.put("property-6", true);
1:         applicationProperties.put("property-7", "string-3");
1:         applicationProperties.put("property-8", 512);
1:         applicationProperties.put("property-9", true);
1: 
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-reply-to"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-delivery-delay"), 2000);
1: 
1:         Message message = Proton.message();
1: 
1:         // Header Values
1:         message.setPriority((short) 9);
1:         message.setDurable(true);
1:         message.setDeliveryCount(2);
1:         message.setTtl(5000);
1: 
1:         // Properties
1:         message.setMessageId("ID:SomeQualifier:0:0:1");
1:         message.setGroupId("Group-ID-1");
1:         message.setGroupSequence(15);
1:         message.setAddress("queue://test-queue");
1:         message.setReplyTo("queue://reply-queue");
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setCorrelationId("ID:SomeQualifier:0:7:9");
1:         message.setUserId("username".getBytes(StandardCharsets.UTF_8));
1: 
1:         // Application Properties / Message Annotations / Body
1:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
1:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
1:         assertNotNull(outboudMessage.getHeader());
1:         assertNotNull(outboudMessage.getProperties());
1:         assertNotNull(outboudMessage.getMessageAnnotations());
1:         assertNotNull(outboudMessage.getApplicationProperties());
1:         assertNull(outboudMessage.getDeliveryAnnotations());
1:         assertNull(outboudMessage.getFooter());
1: 
1:         assertEquals(9, outboudMessage.getApplicationProperties().getValue().size());
1:         assertEquals(4, outboudMessage.getMessageAnnotations().getValue().size());
1:     }
1: 
1:     private EncodedMessage encode(Message message) {
1:         ProtonJMessage amqp = (ProtonJMessage) message;
1: 
1:         ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
1:         final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
1:         int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
1:         if (overflow.position() > 0) {
1:             buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
1:             c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
1:         }
1: 
1:         return new EncodedMessage(1, buffer.array(), 0, c);
1:     }
1: }
============================================================================