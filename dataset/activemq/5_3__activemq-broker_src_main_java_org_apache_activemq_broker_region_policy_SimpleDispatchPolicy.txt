1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
1:230a86c: 
1:4759253: import java.util.List;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:d29ca2a: import org.apache.activemq.broker.region.Subscription;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
4:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * Simple dispatch policy that sends a message to every subscription that
1:d29ca2a:  * matches the message.
1:d29ca2a:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class SimpleDispatchPolicy implements DispatchPolicy {
1:d29ca2a: 
1:6a5030b:     public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers)
1:8d11f07:             throws Exception {
1:d29ca2a: 
1:d29ca2a:         int count = 0;
1:6a5030b:         for (Subscription sub : consumers) {
1:d29ca2a:             // Don't deliver to browsers
1:ecf89a6:             if (sub.getConsumerInfo().isBrowser()) {
1:d29ca2a:                 continue;
1:ecf89a6:             }
1:d29ca2a:             // Only dispatch to interested subscriptions
1:ecf89a6:             if (!sub.matches(node, msgContext)) {
1:306f8a0:                 sub.unmatched(node);
1:d29ca2a:                 continue;
1:ecf89a6:             }
1:230a86c: 
1:d29ca2a:             sub.add(node);
1:d29ca2a:             count++;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         return count > 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             if (sub.getConsumerInfo().isBrowser()) {
1:             }
1:             if (!sub.matches(node, msgContext)) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * Simple dispatch policy that sends a message to every subscription that
/////////////////////////////////////////////////////////////////////////
0:             Subscription sub = (Subscription)iter.next();
1: 
0:             if (sub.getConsumerInfo().isBrowser())
0:             if (!sub.matches(node, msgContext))
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public boolean dispatch(ConnectionContext context, MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception {
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:4759253
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     public boolean dispatch(ConnectionContext context, MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Throwable {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
0: import java.util.Iterator;
1: 
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
1: /**
0:  * Simple dispatch policy that sends a message to every subscription that 
1:  * matches the message.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleDispatchPolicy implements DispatchPolicy {
1: 
0:     public boolean dispatch(ConnectionContext context, MessageReference node, MessageEvaluationContext msgContext, CopyOnWriteArrayList consumers) throws Throwable {
1:         int count = 0;
0:         for (Iterator iter = consumers.iterator(); iter.hasNext();) {
0:             Subscription sub = (Subscription) iter.next();
1:             
1:             // Don't deliver to browsers
0:             if( sub.getConsumerInfo().isBrowser() )
1:                 continue;
1:             // Only dispatch to interested subscriptions
0:             if (!sub.matches(node, msgContext)) 
1:                 continue;
1:             
1:             sub.add(node);
1:             count++;
1:         }
1:         return count > 0;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:306f8a0
/////////////////////////////////////////////////////////////////////////
1:                 sub.unmatched(node);
author:Robert Davies
-------------------------------------------------------------------------------
commit:6a5030b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers)
1:         for (Subscription sub : consumers) {
0:             // Don't deliver to browsers
0:             if (sub.getConsumerInfo().isBrowser()) {
0:                 continue;
0:             // Only dispatch to interested subscriptions
0:             if (!sub.matches(node, msgContext)) {
0:                 continue;
0:             }
0: 
0:             sub.add(node);
0:             count++;
0: 
commit:8d11f07
/////////////////////////////////////////////////////////////////////////
0:     public boolean dispatch(MessageReference node,MessageEvaluationContext msgContext, List<Subscription> consumers)
1:             throws Exception {
0: 
0:         synchronized (consumers) {
0:             for (Subscription sub:consumers) {
0:                 // Don't deliver to browsers
0:                 if (sub.getConsumerInfo().isBrowser()) {
0:                     continue;
0:                 }
0:                 // Only dispatch to interested subscriptions
0:                 if (!sub.matches(node, msgContext)) {
0:                     continue;
0:                 }
0:                 sub.add(node);
0:                 count++;
commit:6895d00
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception {
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
0: import java.util.Iterator;
============================================================================