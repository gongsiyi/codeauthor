1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:b9fd189: 
1:d29ca2a: import java.io.IOException;
1:947659c: import java.util.List;
1:f92d45b: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:4569d7d: import org.apache.activemq.broker.ProducerBrokerExchange;
1:88203ae: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:0d85869: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:383d12e: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:f9d5449: import org.apache.activemq.command.MessageDispatchNotification;
1:634da7a: import org.apache.activemq.command.ProducerInfo;
1:2728ccb: import org.apache.activemq.store.MessageStore;
1:2a328ed: import org.apache.activemq.thread.Task;
1:6d8e2c5: import org.apache.activemq.usage.MemoryUsage;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:d29ca2a: 
1:d29ca2a: /**
1:b5a1916:  *
1:d29ca2a:  */
1:9a8f6e4: public interface Destination extends Service, Task, Message.MessageDestination {
1:d29ca2a: 
1:0d85869:     public static final DeadLetterStrategy DEFAULT_DEAD_LETTER_STRATEGY = new SharedDeadLetterStrategy();
1:48764be:     public static final long DEFAULT_BLOCKED_PRODUCER_WARNING_INTERVAL = 30000;
1:d29ca2a: 
1:7f5213b:     void addSubscription(ConnectionContext context, Subscription sub) throws Exception;
1:f812e34: 
1:3b08860:     void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception;
1:f812e34: 
1:634da7a:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:f812e34: 
1:634da7a:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:d29ca2a: 
1:4569d7d:     void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception;
1:f812e34: 
1:d29ca2a:     void acknowledge(ConnectionContext context, Subscription sub, final MessageAck ack, final MessageReference node) throws IOException;
1:17995e6: 
1:b9fd189:     long getInactiveTimeoutBeforeGC();
1:f812e34: 
1:17995e6:     void markForGC(long timeStamp);
1:17995e6: 
1:17995e6:     boolean canGC();
1:17995e6: 
1:d29ca2a:     void gc();
1:f812e34: 
1:d29ca2a:     ActiveMQDestination getActiveMQDestination();
1:f812e34: 
1:b9fd189:     @Override
1:83c3dca:     MemoryUsage getMemoryUsage();
1:d29ca2a: 
1:1898869:     void setMemoryUsage(MemoryUsage memoryUsage);
1:1898869: 
1:d29ca2a:     void dispose(ConnectionContext context) throws IOException;
1:f812e34: 
1:b5a1916:     boolean isDisposed();
1:b5a1916: 
1:d29ca2a:     DestinationStatistics getDestinationStatistics();
1:f812e34: 
1:88203ae:     DeadLetterStrategy getDeadLetterStrategy();
1:f812e34: 
1:fc00993:     Message[] browse();
1:f812e34: 
1:fc00993:     String getName();
1:f812e34: 
1:fc00993:     MessageStore getMessageStore();
1:d29ca2a: 
1:0da68b4:     boolean isProducerFlowControl();
1:d29ca2a: 
1:0da68b4:     void setProducerFlowControl(boolean value);
1:17995e6: 
1:fe63c29:     boolean isAlwaysRetroactive();
1:17995e6: 
1:fe63c29:     void setAlwaysRetroactive(boolean value);
1:d29ca2a: 
1:48764be:     /**
1:48764be:      * Set's the interval at which warnings about producers being blocked by
1:48764be:      * resource usage will be triggered. Values of 0 or less will disable
1:48764be:      * warnings
1:b5a1916:      *
1:48764be:      * @param blockedProducerWarningInterval the interval at which warning about
1:48764be:      *            blocked producers will be triggered.
1:48764be:      */
1:48764be:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval);
1:d29ca2a: 
1:48764be:     /**
1:b5a1916:      *
1:48764be:      * @return the interval at which warning about blocked producers will be
1:48764be:      *         triggered.
1:48764be:      */
1:48764be:     public long getBlockedProducerWarningInterval();
1:fe63c29: 
1:83c3dca:     int getMaxProducersToAudit();
1:fe63c29: 
1:83c3dca:     void setMaxProducersToAudit(int maxProducersToAudit);
1:00879cf: 
1:83c3dca:     int getMaxAuditDepth();
1:0d85869: 
1:83c3dca:     void setMaxAuditDepth(int maxAuditDepth);
8:83c3dca: 
1:83c3dca:     boolean isEnableAudit();
1:83c3dca: 
1:83c3dca:     void setEnableAudit(boolean enableAudit);
1:d0f3d4d: 
1:071b4b1:     boolean isActive();
1:d0f3d4d: 
1:d0f3d4d:     int getMaxPageSize();
1:6d0c552: 
1:d0f3d4d:     public void setMaxPageSize(int maxPageSize);
1:6d0c552: 
1:47cfa55:     public int getMaxBrowsePageSize();
1:47cfa55: 
1:47cfa55:     public void setMaxBrowsePageSize(int maxPageSize);
1:47cfa55: 
1:6d0c552:     public boolean isUseCache();
1:6d0c552: 
1:6d0c552:     public void setUseCache(boolean useCache);
1:6d0c552: 
1:b9fd189:     @Override
1:6d0c552:     public int getMinimumMessageSize();
1:044c07d: 
1:6d0c552:     public void setMinimumMessageSize(int minimumMessageSize);
1:044c07d: 
1:785454a:     public int getCursorMemoryHighWaterMark();
1:785454a: 
1:785454a:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
1:785454a: 
1:044c07d:     /**
1:48764be:      * optionally called by a Subscriber - to inform the Destination its ready
1:48764be:      * for more messages
1:044c07d:      */
1:044c07d:     public void wakeup();
1:044c07d: 
1:044c07d:     /**
1:044c07d:      * @return true if lazyDispatch is enabled
1:044c07d:      */
1:044c07d:     public boolean isLazyDispatch();
1:044c07d: 
1:044c07d:     /**
1:044c07d:      * set the lazy dispatch - default is false
1:b5a1916:      *
1:044c07d:      * @param value
1:044c07d:      */
1:044c07d:     public void setLazyDispatch(boolean value);
1:a9ba595: 
1:0d85869:     /**
1:0d85869:      * Inform the Destination a message has expired
1:b5a1916:      *
1:0d85869:      * @param context
1:0d85869:      * @param subs
1:0d85869:      * @param node
1:0d85869:      */
1:48764be:     void messageExpired(ConnectionContext context, Subscription subs, MessageReference node);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:cdc2fd3:      * called when message is consumed
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param messageReference
1:cdc2fd3:      */
1:cdc2fd3:     void messageConsumed(ConnectionContext context, MessageReference messageReference);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when message is delivered to the broker
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param messageReference
1:cdc2fd3:      */
1:cdc2fd3:     void messageDelivered(ConnectionContext context, MessageReference messageReference);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:48764be:      * Called when a message is discarded - e.g. running low on memory This will
1:48764be:      * happen only if the policy is enabled - e.g. non durable topics
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param messageReference
1:b5a1916:      * @param sub
1:cdc2fd3:      */
1:3e4fc0a:     void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when there is a slow consumer
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param subs
1:cdc2fd3:      */
1:cdc2fd3:     void slowConsumer(ConnectionContext context, Subscription subs);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called to notify a producer is too fast
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param producerInfo
1:cdc2fd3:      */
1:48764be:     void fastProducer(ConnectionContext context, ProducerInfo producerInfo);
1:cdc2fd3: 
1:cdc2fd3:     /**
1:cdc2fd3:      * Called when a Usage reaches a limit
1:b5a1916:      *
1:cdc2fd3:      * @param context
1:cdc2fd3:      * @param usage
1:cdc2fd3:      */
1:17995e6:     void isFull(ConnectionContext context, Usage<?> usage);
1:cdc2fd3: 
1:947659c:     List<Subscription> getConsumers();
1:f9d5449: 
1:f9d5449:     /**
1:48764be:      * called on Queues in slave mode to allow dispatch to follow subscription
1:48764be:      * choice of master
1:b5a1916:      *
1:f9d5449:      * @param messageDispatchNotification
1:f9d5449:      * @throws Exception
1:f9d5449:      */
1:48764be:     void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception;
1:b5a1916: 
1:00879cf:     boolean isPrioritizedMessages();
1:383d12e: 
1:383d12e:     SlowConsumerStrategy getSlowConsumerStrategy();
1:f4d4c3b: 
1:f4d4c3b:     boolean isDoOptimzeMessageStorage();
1:f4d4c3b:     void setDoOptimzeMessageStorage(boolean doOptimzeMessageStorage);
1:e1f170d: 
1:ea70e82:     public void clearPendingMessages(int pendingAdditionsCount);
1:64f3492: 
1:f92d45b:     void duplicateFromStore(Message message, Subscription subscription);
1:86cbdfd: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1:     public void clearPendingMessages(int pendingAdditionsCount);
commit:be919fb
/////////////////////////////////////////////////////////////////////////
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
1: 
1:     void duplicateFromStore(Message message, Subscription subscription);
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b9fd189
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     long getInactiveTimeoutBeforeGC();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isDLQ();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1898869
/////////////////////////////////////////////////////////////////////////
1:     void setMemoryUsage(MemoryUsage memoryUsage);
1: 
commit:17995e6
/////////////////////////////////////////////////////////////////////////
0:     long getInactiveTimoutBeforeGC();
1: 
1:     void markForGC(long timeStamp);
1: 
1:     boolean canGC();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     void isFull(ConnectionContext context, Usage<?> usage);
commit:b5a1916
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     boolean isDisposed();
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param sub
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: public interface Destination extends Service, Task, Message.MessageDestination {
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2a328ed
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.Task;
0: public interface Destination extends Service, Task {
commit:a9ba595
/////////////////////////////////////////////////////////////////////////
1: 
0:     void messageExpired(ConnectionContext context, PrefetchSubscription prefetchSubscription, MessageReference node);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Message[] browse();
1:     String getName();
1:     MessageStore getMessageStore();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
0:     public MessageStore getMessageStore();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.TopicMessageStore;
/////////////////////////////////////////////////////////////////////////
0: 	public MessageStore getMessageStore();
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:     void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception;
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:44b00e9
/////////////////////////////////////////////////////////////////////////
0:     boolean lock(MessageReference node, LockOwner lockOwner);
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     void addSubscription(ConnectionContext context, Subscription sub) throws Exception;
0:     void removeSubscription(ConnectionContext context, Subscription sub) throws Exception;
0:     void send(ConnectionContext context, Message messageSend) throws Exception;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.store.MessageStore;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.12 $
1:  */
0: public interface Destination extends Service {
1: 
0:     void addSubscription(ConnectionContext context, Subscription sub) throws Throwable;
0:     void removeSubscription(ConnectionContext context, Subscription sub) throws Throwable;
1:     
0:     void send(ConnectionContext context, Message messageSend) throws Throwable;
0:     boolean lock(MessageReference node, Subscription subscription);
1:     void acknowledge(ConnectionContext context, Subscription sub, final MessageAck ack, final MessageReference node) throws IOException;
1:     
1:     void gc();
0:     Message loadMessage(MessageId messageId) throws IOException;
1:  
1:     ActiveMQDestination getActiveMQDestination();
0:     UsageManager getUsageManager();
1: 
1:     void dispose(ConnectionContext context) throws IOException;
1:     
1:     DestinationStatistics getDestinationStatistics();
0:     MessageStore getMessageStore();
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void clearPendingMessages();
commit:fe63c29
/////////////////////////////////////////////////////////////////////////
1:     
1:     boolean isAlwaysRetroactive();
1:     
1:     void setAlwaysRetroactive(boolean value);
commit:383d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
/////////////////////////////////////////////////////////////////////////
1: 
1:     SlowConsumerStrategy getSlowConsumerStrategy();
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
0:      * @param sub 
1:     void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference);
commit:f9d5449
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * called on Queues in slave mode to allow dispatch to follow subscription choice of master
1:      * @param messageDispatchNotification
1:      * @throws Exception
1:      */
0:     void processDispatchNotification(
0:             MessageDispatchNotification messageDispatchNotification) throws Exception;
commit:3b08860
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ConsumerInfo;
/////////////////////////////////////////////////////////////////////////
1:     void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception;
author:Robert Davies
-------------------------------------------------------------------------------
commit:f4d4c3b
/////////////////////////////////////////////////////////////////////////
1: 
1:     boolean isDoOptimzeMessageStorage();
1:     void setDoOptimzeMessageStorage(boolean doOptimzeMessageStorage);
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     boolean isPrioritizedMessages();
commit:785454a
/////////////////////////////////////////////////////////////////////////
1:     public int getCursorMemoryHighWaterMark();
1: 
1: 	public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
1:     
commit:47cfa55
/////////////////////////////////////////////////////////////////////////
1:     public int getMaxBrowsePageSize();
1: 
1:     public void setMaxBrowsePageSize(int maxPageSize);
1:     
commit:0d85869
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
/////////////////////////////////////////////////////////////////////////
1:     public static final DeadLetterStrategy DEFAULT_DEAD_LETTER_STRATEGY = new SharedDeadLetterStrategy();
/////////////////////////////////////////////////////////////////////////
1:         
1:     /**
1:      * Inform the Destination a message has expired
1:      * @param context
1:      * @param subs 
1:      * @param node
1:      */
0:     void messageExpired(ConnectionContext context, Subscription subs,MessageReference node);
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * called when message is consumed
1:      * @param context
1:      * @param messageReference
1:      */
1:      void messageConsumed(ConnectionContext context, MessageReference messageReference);
1:     
1:     /**
1:      * Called when message is delivered to the broker
1:      * @param context
1:      * @param messageReference
1:      */
1:      void messageDelivered(ConnectionContext context, MessageReference messageReference);
1:     
1:     /**
0:      * Called when a message is discarded - e.g. running low on memory
0:      * This will happen only if the policy is enabled - e.g. non durable topics
1:      * @param context
1:      * @param messageReference
1:      */
0:      void messageDiscarded(ConnectionContext context, MessageReference messageReference);
1:     
1:     /**
1:      * Called when there is a slow consumer
1:      * @param context
1:      * @param subs
1:      */
1:      void slowConsumer(ConnectionContext context, Subscription subs);
1:     
1:     /**
1:      * Called to notify a producer is too fast
1:      * @param context
1:      * @param producerInfo
1:      */
0:      void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
1:     
1:     /**
1:      * Called when a Usage reaches a limit
1:      * @param context
1:      * @param usage
1:      */
0:      void isFull(ConnectionContext context,Usage usage);
1: 
commit:044c07d
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * optionally called by a Subscriber - to inform the Destination its
0:      * ready for more messages
1:      */
1:     public void wakeup();
1:     
1:     /**
1:      * @return true if lazyDispatch is enabled
1:      */
1:     public boolean isLazyDispatch();
1:     
1:     
1:     /**
1:      * set the lazy dispatch - default is false
1:      * @param value
1:      */
1:     public void setLazyDispatch(boolean value);
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6d0c552
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isUseCache();
1:     
1:     public void setUseCache(boolean useCache);
1:     
1:     public int getMinimumMessageSize();
1: 
1:     public void setMinimumMessageSize(int minimumMessageSize);
commit:d0f3d4d
/////////////////////////////////////////////////////////////////////////
1:     
1:     int getMaxPageSize();
1:     
1:     public void setMaxPageSize(int maxPageSize);
commit:071b4b1
/////////////////////////////////////////////////////////////////////////
1:     boolean isActive();   
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:     MemoryUsage getMemoryUsage();
/////////////////////////////////////////////////////////////////////////
1:     
1:     int getMaxProducersToAudit();
1:     
1:     void setMaxProducersToAudit(int maxProducersToAudit);
1:    
1:     int getMaxAuditDepth();
1:    
1:     void setMaxAuditDepth(int maxAuditDepth);
1:   
1:     boolean isEnableAudit();
1:     
1:     void setEnableAudit(boolean enableAudit);
1:     
0:     boolean isActive();
1:     
1:     
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
0:     
1:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
0: 
1:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
commit:0da68b4
/////////////////////////////////////////////////////////////////////////
0:     
1:     boolean isProducerFlowControl();
0:     
1:     void setProducerFlowControl(boolean value);
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     MemoryUsage getBrokerMemoryUsage();
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Message[] browse();
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:48764be
/////////////////////////////////////////////////////////////////////////
1:     public static final long DEFAULT_BLOCKED_PRODUCER_WARNING_INTERVAL = 30000;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
1:     /**
1:      * Set's the interval at which warnings about producers being blocked by
1:      * resource usage will be triggered. Values of 0 or less will disable
1:      * warnings
0:      * 
1:      * @param blockedProducerWarningInterval the interval at which warning about
1:      *            blocked producers will be triggered.
1:      */
1:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval);
0: 
1:     /**
0:      * 
1:      * @return the interval at which warning about blocked producers will be
1:      *         triggered.
1:      */
1:     public long getBlockedProducerWarningInterval();
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:     boolean isActive();
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:     public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark);
0: 
1:      * optionally called by a Subscriber - to inform the Destination its ready
1:      * for more messages
0: 
0: 
0:      * 
0:      * 
0:      * @param subs
1:     void messageExpired(ConnectionContext context, Subscription subs, MessageReference node);
0:      * 
0:     void messageConsumed(ConnectionContext context, MessageReference messageReference);
0: 
0:      * 
0:     void messageDelivered(ConnectionContext context, MessageReference messageReference);
0: 
1:      * Called when a message is discarded - e.g. running low on memory This will
1:      * happen only if the policy is enabled - e.g. non durable topics
0:      * 
0:     void messageDiscarded(ConnectionContext context, MessageReference messageReference);
0: 
0:      * 
0:     void slowConsumer(ConnectionContext context, Subscription subs);
0: 
0:      * 
1:     void fastProducer(ConnectionContext context, ProducerInfo producerInfo);
0: 
0:      * 
0:     void isFull(ConnectionContext context, Usage usage);
1:      * called on Queues in slave mode to allow dispatch to follow subscription
1:      * choice of master
0:      * 
1:     void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception;
author:James Strachan
-------------------------------------------------------------------------------
commit:947659c
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     List<Subscription> getConsumers();
commit:44493e4
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void resetStatistics();
0:     public String getName();
0:     public long getEnqueueCount();
0:     public long getDequeueCount();
0:     public long getConsumerCount();
0:     public long getQueueSize();
0:     public long getMessagesCached();
0:     public int getMemoryPercentageUsed();
0:     public long getMemoryLimit();
0:     public void setMemoryLimit(long limit);
commit:88203ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
/////////////////////////////////////////////////////////////////////////
1:     DeadLetterStrategy getDeadLetterStrategy();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:36de58b
/////////////////////////////////////////////////////////////////////////
============================================================================