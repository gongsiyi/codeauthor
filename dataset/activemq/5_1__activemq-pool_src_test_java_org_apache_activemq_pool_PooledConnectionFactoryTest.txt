1:b432173: /**
1:b432173:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b432173:  * contributor license agreements.  See the NOTICE file distributed with
1:b432173:  * this work for additional information regarding copyright ownership.
1:b432173:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b432173:  * (the "License"); you may not use this file except in compliance with
1:b432173:  * the License.  You may obtain a copy of the License at
1:b432173:  *
1:b432173:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b432173:  *
1:b432173:  * Unless required by applicable law or agreed to in writing, software
1:b432173:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b432173:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b432173:  * See the License for the specific language governing permissions and
1:b432173:  * limitations under the License.
1:b432173:  */
1:b432173: package org.apache.activemq.pool;
1:b432173: 
1:b432173: import static org.junit.Assert.assertNotNull;
1:b432173: 
1:b432173: import javax.naming.Reference;
1:b432173: 
1:b432173: import org.junit.Test;
1:b432173: import org.slf4j.Logger;
1:b432173: import org.slf4j.LoggerFactory;
1:b432173: 
1:b432173: /**
1:b432173:  * Test JNDI
1:b432173:  */
1:b432173: public class PooledConnectionFactoryTest {
1:b432173: 
1:b432173:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionFactoryTest.class);
1:b432173: 
1:b432173:     @Test(timeout=240000)
1:b432173:     public void testGetReference() throws Exception {
1:b432173:         PooledConnectionFactory factory = createPooledConnectionFactory();
1:b432173:         Reference ref = factory.getReference();
1:b432173:         assertNotNull(ref);
1:b432173:     }
1:b432173: 
1:b432173:     protected PooledConnectionFactory createPooledConnectionFactory() {
1:b432173:         PooledConnectionFactory cf = new PooledConnectionFactory(
1:b432173:             "vm://localhost?broker.persistent=false");
1:b432173:         LOG.debug("ConnectionFactory initialized.");
1:b432173:         return cf;
1:b432173:     }
1:b432173: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b432173
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import javax.naming.Reference;
1: 
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test JNDI
1:  */
1: public class PooledConnectionFactoryTest {
1: 
1:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionFactoryTest.class);
1: 
1:     @Test(timeout=240000)
1:     public void testGetReference() throws Exception {
1:         PooledConnectionFactory factory = createPooledConnectionFactory();
1:         Reference ref = factory.getReference();
1:         assertNotNull(ref);
1:     }
1: 
1:     protected PooledConnectionFactory createPooledConnectionFactory() {
1:         PooledConnectionFactory cf = new PooledConnectionFactory(
1:             "vm://localhost?broker.persistent=false");
1:         LOG.debug("ConnectionFactory initialized.");
1:         return cf;
1:     }
1: }
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Future<Boolean> result = executor.submit(new TestRunner());
0:             PooledConnectionFactoryTest.LOG.error("2nd call to createSession() " +
0:                                                   "is blocking but should have returned an error instead.");
0:             fail("SessionPool inside PooledConnectionFactory is blocking if " +
0:                  "limit is exceeded but should return an exception instead.");
/////////////////////////////////////////////////////////////////////////
0:         @Override
/////////////////////////////////////////////////////////////////////////
0:                     fail("seconds call to Connection.createSession() was supposed" +
0:                          "to raise an JMSException as internal session pool" +
0:                          "is exhausted. This did not happen and indiates a problem");
/////////////////////////////////////////////////////////////////////////
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ConcurrentLinkedQueue;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
0: import java.util.concurrent.TimeUnit;
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestCase;
0: import junit.framework.TestSuite;
0: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.util.Wait;
0: import org.apache.log4j.Logger;
0:  * Checks the behavior of the PooledConnectionFactory when the maximum amount of
0:  * sessions is being reached.
0:  * Older versions simply block in the call to Connection.getSession(), which
0:  * isn't good. An exception being returned is the better option, so JMS clients
0:  * don't block. This test succeeds if an exception is returned and fails if the
0:  * call to getSession() blocks.
0: public class PooledConnectionFactoryTest extends TestCase {
0:     public final static Logger LOG = Logger.getLogger(PooledConnectionFactoryTest.class);
0:      * @param testName
0:      *            name of the test case
0:     public PooledConnectionFactoryTest(String testName) {
0:         super(testName);
0:     public static Test suite() {
0:         return new TestSuite(PooledConnectionFactoryTest.class);
0:     }
0: 
0:     public void testClearAllConnections() throws Exception {
0: 
0:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:         cf.setMaxConnections(3);
0: 
0:         PooledConnection conn1 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn2 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn3 = (PooledConnection) cf.createConnection();
0: 
0:         assertNotSame(conn1.getConnection(), conn2.getConnection());
0:         assertNotSame(conn1.getConnection(), conn3.getConnection());
0:         assertNotSame(conn2.getConnection(), conn3.getConnection());
0: 
0:         assertEquals(3, cf.getNumConnections());
0: 
0:         cf.clear();
0: 
0:         assertEquals(0, cf.getNumConnections());
0: 
0:         conn1 = (PooledConnection) cf.createConnection();
0:         conn2 = (PooledConnection) cf.createConnection();
0:         conn3 = (PooledConnection) cf.createConnection();
0: 
0:         assertNotSame(conn1.getConnection(), conn2.getConnection());
0:         assertNotSame(conn1.getConnection(), conn3.getConnection());
0:         assertNotSame(conn2.getConnection(), conn3.getConnection());
0:     }
0: 
0:     public void testMaxConnectionsAreCreated() throws Exception {
0: 
0:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:         cf.setMaxConnections(3);
0: 
0:         PooledConnection conn1 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn2 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn3 = (PooledConnection) cf.createConnection();
0: 
0:         assertNotSame(conn1.getConnection(), conn2.getConnection());
0:         assertNotSame(conn1.getConnection(), conn3.getConnection());
0:         assertNotSame(conn2.getConnection(), conn3.getConnection());
0: 
0:         assertEquals(3, cf.getNumConnections());
0:     }
0: 
0:     public void testConnectionsAreRotated() throws Exception {
0: 
0:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:         cf.setMaxConnections(10);
0: 
0:         ActiveMQConnection previous = null;
0: 
0:         // Front load the pool.
0:         for (int i = 0; i < 10; ++i) {
0:             cf.createConnection();
0:         }
0: 
0:         for (int i = 0; i < 100; ++i) {
0:             ActiveMQConnection current = ((PooledConnection) cf.createConnection()).getConnection();
0:             assertNotSame(previous, current);
0:             previous = current;
0:         }
0:     }
0: 
0:     public void testConnectionsArePooled() throws Exception {
0: 
0:         ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:         cf.setMaxConnections(1);
0: 
0:         PooledConnection conn1 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn2 = (PooledConnection) cf.createConnection();
0:         PooledConnection conn3 = (PooledConnection) cf.createConnection();
0: 
0:         assertSame(conn1.getConnection(), conn2.getConnection());
0:         assertSame(conn1.getConnection(), conn3.getConnection());
0:         assertSame(conn2.getConnection(), conn3.getConnection());
0: 
0:         assertEquals(1, cf.getNumConnections());
0:     }
0: 
0:     public void testConnectionsArePooledAsyncCreate() throws Exception {
0: 
0:         final ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:         final PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:         cf.setMaxConnections(1);
0: 
0:         final ConcurrentLinkedQueue<PooledConnection> connections = new ConcurrentLinkedQueue<PooledConnection>();
0: 
0:         final PooledConnection primary = (PooledConnection) cf.createConnection();
0:         final ExecutorService executor = Executors.newFixedThreadPool(10);
0:         final int numConnections = 100;
0: 
0:         for (int i = 0; i < numConnections; ++i) {
0:             executor.execute(new Runnable() {
0: 
0:                 @Override
0:                 public void run() {
0:                     try {
0:                         connections.add((PooledConnection) cf.createConnection());
0:                     } catch (JMSException e) {
0:                     }
0:                 }
0:             });
0:         }
0: 
0:         assertTrue("", Wait.waitFor(new Wait.Condition() {
0: 
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return connections.size() == numConnections;
0:             }
0:         }));
0: 
0:         executor.shutdown();
0:         assertTrue(executor.awaitTermination(5, TimeUnit.SECONDS));
0: 
0:         for(PooledConnection connection : connections) {
0:             assertSame(primary.getConnection(), connection.getConnection());
0:         }
0: 
0:         connections.clear();
0:      * Tests the behavior of the sessionPool of the PooledConnectionFactory when
0:      * maximum number of sessions are reached.
0:     public void testApp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(5 * 1000);
0:             PooledConnectionFactoryTest.LOG.error("2nd call to createSession()" + " is blocking but should have returned an error instead.");
0:             Assert.fail("SessionPool inside PooledConnectionFactory is blocking if " + "limit is exceeded but should return an exception instead.");
0:     static class TestRunner implements Callable<Boolean> {
0:         public final static Logger LOG = Logger.getLogger(TestRunner.class);
0:         /**
0:          * @return true if test succeeded, false otherwise
0:          */
0:         public Boolean call() {
0:             Connection conn = null;
0:             Session one = null;
0:             // wait at most 5 seconds for the call to createSession
0:                 ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:                 PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:                 cf.setMaxConnections(3);
0:                 cf.setMaximumActiveSessionPerConnection(1);
0:                 cf.setBlockIfSessionPoolIsFull(false);
0:                 conn = cf.createConnection();
0:                 one = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
0:                 Session two = null;
0:                 try {
0:                     // this should raise an exception as we called
0:                     // setMaximumActive(1)
0:                     two = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                     two.close();
0: 
0:                     LOG.error("Expected JMSException wasn't thrown.");
0:                     Assert.fail("seconds call to Connection.createSession() was supposed" + "to raise an JMSException as internal session pool"
0:                             + "is exhausted. This did not happen and indiates a problem");
0:                 } catch (JMSException ex) {
0:                     if (ex.getCause().getClass() == java.util.NoSuchElementException.class) {
0:                         // expected, ignore but log
0:                         LOG.info("Caught expected " + ex);
0:                     } else {
0:                         LOG.error(ex);
0:                         return new Boolean(false);
0:                     }
0:                 } finally {
0:                     if (one != null)
0:                         one.close();
0:                     if (conn != null)
0:                         conn.close();
0:             } catch (Exception ex) {
0:                 LOG.error(ex.getMessage());
0:                 return new Boolean(false);
0:             // all good, test succeeded
0:             return new Boolean(true);
0:         }
0: 
0: 
commit:5ac1540
/////////////////////////////////////////////////////////////////////////
0:  * of sessions is being reached.
0:  * This test succeeds if an exception is returned and fails if the call to getSession()
0:  *
0:     public final static Logger LOG = Logger.getLogger(PooledConnectionFactoryTest.class);
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:      * Tests the behavior of the sessionPool of the PooledConnectionFactory
0:      * when maximum number of sessions are reached.
0:     {
0:         // using separate thread for testing so that we can interrupt the test
0:         // if the call to get a new session blocks.
0:         // start test runner thread
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         Future<Boolean> result = (Future<Boolean>) executor.submit(new TestRunner());
0:         // test should not take > 5secs, so test fails i
0:         Thread.sleep(5*1000);
0: 
0:         if (!result.isDone() || !result.get().booleanValue()) {
0:             PooledConnectionFactoryTest.LOG.error("2nd call to createSession()" +
0:             " is blocking but should have returned an error instead.");
0: 
0:             executor.shutdownNow();
0: 
0:             Assert.fail("SessionPool inside PooledConnectionFactory is blocking if " +
0:             "limit is exceeded but should return an exception instead.");
0:         }
0: 
0:     public final static Logger LOG = Logger.getLogger(TestRunner.class);
0: 
0:     /**
0:      * @return true if test succeeded, false otherwise
0:      */
0:     public Boolean call() {
0: 
0:         Connection conn = null;
0:         Session one = null;
0: 
0:         // wait at most 5 seconds for the call to createSession
0:         try {
0:             ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0:             PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0:             cf.setMaxConnections(3);
0:             cf.setMaximumActive(1);
0:             cf.setBlockIfSessionPoolIsFull(false);
0: 
0:             conn = cf.createConnection();
0:             one = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
0:             Session two = null;
0:             try {
0:                 // this should raise an exception as we called setMaximumActive(1)
0:                 two = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 two.close();
0: 
0:                 LOG.error("Expected JMSException wasn't thrown.");
0:                 Assert.fail("seconds call to Connection.createSession() was supposed" +
0:                         "to raise an JMSException as internal session pool" +
0:                         "is exhausted. This did not happen and indiates a problem");
0:                 return new Boolean(false);
0:             } catch (JMSException ex) {
0:                 if (ex.getCause().getClass() == java.util.NoSuchElementException.class) {
0:                     //expected, ignore but log
0:                     LOG.info("Caught expected " + ex);
0:                 } else {
0:                     LOG.error(ex);
0:                     return new Boolean(false);
0:                 }
0:             } finally {
0:                 if (one != null)
0:                     one.close();
0:                 if (conn != null)
0:                     conn.close();
0:             }
0:         } catch (Exception ex) {
0:             LOG.error(ex.getMessage());
0:             return new Boolean(false);
0:         }
0: 
0:         // all good, test succeeded
0:         return new Boolean(true);
0:     }
commit:cf914d1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.pool;
0: 
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
0: 
0: import junit.framework.Assert;
0: import junit.framework.Test;
0: import junit.framework.TestCase;
0: import junit.framework.TestSuite;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.Session;
0: 
0: import org.apache.activemq.pool.PooledConnectionFactory;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: 
0: import org.apache.log4j.Logger;
0: 
0: 
0: /**
0:  * Checks the behavior of the PooledConnectionFactory when the maximum amount
0:  * of sessions is being reached. 
0:  * Older versions simply block in the call to Connection.getSession(), which isn't good.
0:  * An exception being returned is the better option, so JMS clients don't block.
0:  * This test succeeds if an exception is returned and fails if the call to getSession() 
0:  * blocks.
0:  * 
0:  */
0: public class PooledConnectionFactoryTest extends TestCase
0: {
0: 	public final static Logger LOG = Logger.getLogger(PooledConnectionFactoryTest.class);
0: 	
0: 	
0:     /**
0:      * Create the test case
0:      *
0:      * @param testName name of the test case
0:      */
0:     public PooledConnectionFactoryTest( String testName )
0:     {
0:         super( testName );
0:     }
0: 
0:     /**
0:      * @return the suite of tests being tested
0:      */
0:     public static Test suite()
0:     {
0:         return new TestSuite( PooledConnectionFactoryTest.class );
0:     }
0: 
0:     /**
0:      * Tests the behavior of the sessionPool of the PooledConnectionFactory 
0:      * when maximum number of sessions are reached. In older versions the call to
0:      * Connection.createSession() would simply block indefinitely if the maximum
0:      * number of sessions got reached (controled by 
0:      * PooledConnectionFactory.setMaximumActive()).
0:      * Rather than blocking the entire thread, it should raise an exception 
0:      * instead.
0:      */
0:     public void testApp() throws Exception
0:     {	
0:     	// using separate thread for testing so that we can interrupt the test
0:     	// if the call to get a new session blocks.
0:     	
0:     	// start test runner thread
0:     	ExecutorService executor = Executors.newSingleThreadExecutor();
0:     	Future<Boolean> result = (Future<Boolean>) executor.submit(new TestRunner());
0:     	
0:     	// test should not take > 5secs, so test fails i
0:     	Thread.sleep(5*1000);
0:     	
0:     	if (!result.isDone() || !result.get().booleanValue()) {
0:     		PooledConnectionFactoryTest.LOG.error("2nd call to createSession()" +
0: 			" is blocking but should have returned an error instead.");
0: 
0:     		executor.shutdownNow();
0: 
0:     		Assert.fail("SessionPool inside PooledConnectionFactory is blocking if " +
0: 			"limit is exceeded but should return an exception instead.");		
0:     	}
0:     }
0: }
0: 
0: class TestRunner implements Callable<Boolean> {
0: 	
0: 	public final static Logger LOG = Logger.getLogger(TestRunner.class);
0: 	
0: 	/**
0: 	 * @return true if test succeeded, false otherwise
0: 	 */
0: 	public Boolean call() {
0: 		
0: 		Connection conn = null;
0: 		Session one = null;
0: 		
0: 		// wait at most 5 seconds for the call to createSession
0: 		try {
0: 			ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory("vm://broker1?marshal=false&broker.persistent=false");
0: 	        PooledConnectionFactory cf = new PooledConnectionFactory(amq);
0: 	        cf.setMaxConnections(3);
0: 	        cf.setMaximumActive(1);
0: 	        
0: 	        // default should be false already but lets make sure a change to the default
0: 	        // setting does not make this test fail.
0: 	        cf.setBlockIfSessionPoolIsFull(false);
0: 	        
0: 	        conn = cf.createConnection();
0: 	        one = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 	    	
0: 	        Session two = null;
0: 	        try {
0: 	        	// this should raise an exception as we called setMaximumActive(1)
0: 	        	two = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 	        	two.close();
0: 	        	
0: 	        	LOG.error("Expected JMSException wasn't thrown.");
0: 	        	Assert.fail("seconds call to Connection.createSession() was supposed" +
0: 	        			"to raise an JMSException as internal session pool" +
0: 	        			"is exhausted. This did not happen and indiates a problem");
0: 	        	return new Boolean(false);
0: 	        } catch (JMSException ex) {
0: 	        	if (ex.getCause().getClass() == java.util.NoSuchElementException.class) {
0: 		        	//expected, ignore but log
0: 		        	LOG.info("Caught expected " + ex);
0: 	        	} else {
0: 	        		LOG.error(ex);
0: 	        		return new Boolean(false);
0: 	        	}
0: 	        } finally {
0: 	        	if (one != null)
0: 	        		one.close();
0: 	        	if (conn != null)
0: 	        		conn.close();
0: 	        } 
0: 		} catch (Exception ex) {
0: 			LOG.error(ex.getMessage());
0: 			return new Boolean(false);
0: 		} 
0: 		
0: 		// all good, test succeeded
0: 		return new Boolean(true);
0: 	}
0: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:dd2556b
/////////////////////////////////////////////////////////////////////////
0:             cf.setMaximumActiveSessionPerConnection(1);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:974f689
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.log4j.Logger;
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
============================================================================