1:078f39f: /**
1:078f39f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:078f39f:  * contributor license agreements.  See the NOTICE file distributed with
1:078f39f:  * this work for additional information regarding copyright ownership.
1:078f39f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:078f39f:  * (the "License"); you may not use this file except in compliance with
1:078f39f:  * the License.  You may obtain a copy of the License at
1:078f39f:  *
1:078f39f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:078f39f:  *
1:078f39f:  * Unless required by applicable law or agreed to in writing, software
1:078f39f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:078f39f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:078f39f:  * See the License for the specific language governing permissions and
1:078f39f:  * limitations under the License.
1:078f39f:  */
1:078f39f: package org.apache.activemq.usecases;
1:078f39f: 
1:078f39f: import java.util.Arrays;
1:078f39f: import java.util.concurrent.atomic.AtomicInteger;
1:078f39f: import java.util.concurrent.atomic.AtomicLong;
1:078f39f: import javax.jms.Connection;
1:078f39f: import javax.jms.Destination;
1:078f39f: import javax.jms.Message;
1:078f39f: import javax.jms.MessageListener;
1:078f39f: import javax.jms.MessageProducer;
1:078f39f: import javax.jms.Session;
1:078f39f: import junit.framework.TestCase;
1:078f39f: import org.apache.activemq.ActiveMQConnectionFactory;
1:078f39f: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:078f39f: import org.apache.activemq.advisory.AdvisorySupport;
1:078f39f: import org.apache.activemq.broker.BrokerService;
1:078f39f: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:078f39f: import org.apache.activemq.broker.region.policy.PolicyMap;
1:078f39f: import org.apache.activemq.command.ActiveMQTopic;
1:078f39f: import org.apache.activemq.util.Wait;
1:078f39f: import org.slf4j.Logger;
1:078f39f: import org.slf4j.LoggerFactory;
1:078f39f: 
1:078f39f: public class TopicProducerToSubFileCursorTest extends TestCase implements MessageListener {
1:078f39f:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerToSubFileCursorTest.class);
1:078f39f:     private static final String brokerName = "testBroker";
1:078f39f:     private static final String brokerUrl = "vm://" + brokerName;
1:078f39f:     protected static final int destinationMemLimit = 2097152; // 2MB
1:078f39f:     private static final AtomicLong produced = new AtomicLong();
1:078f39f:     private static final AtomicLong consumed = new AtomicLong();
1:078f39f:     private static final int numMessagesToSend = 20000;
1:078f39f: 
1:078f39f:     private BrokerService broker;
1:078f39f: 
1:078f39f:     protected void setUp() throws Exception {
1:078f39f:         // Setup and start the broker
1:078f39f:         broker = new BrokerService();
1:078f39f:         broker.setBrokerName(brokerName);
1:078f39f:         broker.setPersistent(true);
1:078f39f:         broker.setDeleteAllMessagesOnStartup(true);
1:078f39f:         broker.setSchedulerSupport(false);
1:078f39f:         broker.setUseJmx(false);
1:078f39f:         broker.setUseShutdownHook(false);
1:078f39f:         broker.addConnector(brokerUrl);
1:078f39f: 
1:078f39f:         // Setup the destination policy
1:078f39f:         PolicyMap pm = new PolicyMap();
1:078f39f: 
1:078f39f:         // Setup the topic destination policy
1:078f39f:         PolicyEntry tpe = new PolicyEntry();
1:078f39f:         tpe.setTopic(">");
1:078f39f:         tpe.setMemoryLimit(destinationMemLimit);
1:078f39f:         tpe.setCursorMemoryHighWaterMark(2); // 2% of global usage will match destMemLimit
1:078f39f:         tpe.setProducerFlowControl(true);
1:078f39f:         tpe.setAdvisoryWhenFull(true);
1:078f39f: 
1:078f39f: 
1:078f39f:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
1:078f39f: 
1:078f39f:         setDestinationPolicy(broker, pm);
1:078f39f: 
1:078f39f:         broker.getSystemUsage().getMemoryUsage().setLimit(100*1024*1024);
1:078f39f: 
1:078f39f:         // Start the broker
1:078f39f:         broker.start();
1:078f39f:         broker.waitUntilStarted();
1:078f39f:     }
1:078f39f: 
1:078f39f:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:078f39f:         broker.setDestinationPolicy(pm);
1:078f39f:     }
1:078f39f: 
1:078f39f:     protected void tearDown() throws Exception {
1:078f39f:         broker.stop();
1:078f39f:         broker.waitUntilStopped();
1:078f39f:     }
1:078f39f: 
1:078f39f:     public void testTopicProducerFlowControlNotUsedWhenSubSpoolsToDiskOnTwoPercentSystemUsage() throws Exception {
1:078f39f: 
1:078f39f:         // Create the connection factory
1:078f39f:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:078f39f:         connectionFactory.setAlwaysSyncSend(true);
1:078f39f:         connectionFactory.setProducerWindowSize(1024);
1:078f39f: 
1:078f39f:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:078f39f:         prefetchPolicy.setAll(5000);
1:078f39f:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:078f39f:         // Start the test destination listener
1:078f39f:         Connection c = connectionFactory.createConnection();
1:078f39f:         c.start();
1:078f39f:         Session listenerSession = c.createSession(false, 1);
1:078f39f:         Destination destination = createDestination(listenerSession);
1:078f39f: 
1:078f39f:         listenerSession.createConsumer(destination).setMessageListener(new TopicProducerToSubFileCursorTest());
1:078f39f:         final AtomicInteger blockedCounter = new AtomicInteger(0);
1:078f39f:         listenerSession.createConsumer(new ActiveMQTopic(AdvisorySupport.FULL_TOPIC_PREFIX + ">")).setMessageListener(new MessageListener() {
1:078f39f:             @Override
1:078f39f:             public void onMessage(Message message) {
1:078f39f:                 try {
1:078f39f:                     LOG.error("Got full advisory, usageName: " +
1:078f39f:                             message.getStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME) +
1:078f39f:                             ", usageCount: " +
1:078f39f:                             message.getLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT)
1:078f39f:                             + ", blockedCounter: " + blockedCounter.get());
1:078f39f: 
1:078f39f:                     blockedCounter.incrementAndGet();
1:078f39f: 
1:078f39f:                 } catch (Exception error) {
1:078f39f:                     error.printStackTrace();
1:078f39f:                     LOG.error("missing advisory property", error);
1:078f39f:                 }
1:078f39f:             }
1:078f39f:         });
1:078f39f: 
1:078f39f:         // Start producing the test messages
1:078f39f:         final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:078f39f:         final MessageProducer producer = session.createProducer(destination);
1:078f39f: 
1:078f39f:         Thread producingThread = new Thread("Producing Thread") {
1:078f39f:             public void run() {
1:078f39f:                 try {
1:078f39f:                     for (long i = 0; i < numMessagesToSend; i++) {
1:078f39f:                         producer.send(session.createTextMessage("test"));
1:078f39f: 
1:078f39f:                         long count = produced.incrementAndGet();
1:078f39f:                         if (count % 10000 == 0) {
1:078f39f:                             LOG.info("Produced " + count + " messages");
1:078f39f:                         }
1:078f39f:                     }
1:078f39f:                 } catch (Throwable ex) {
1:078f39f:                     ex.printStackTrace();
1:078f39f:                 } finally {
1:078f39f:                     try {
1:078f39f:                         producer.close();
1:078f39f:                         session.close();
1:078f39f:                     } catch (Exception e) {
1:078f39f:                     }
1:078f39f:                 }
1:078f39f:             }
1:078f39f:         };
1:078f39f: 
1:078f39f:         producingThread.start();
1:078f39f: 
1:078f39f:         Wait.waitFor(new Wait.Condition() {
1:078f39f:             public boolean isSatisified() throws Exception {
1:078f39f:                 return consumed.get() == numMessagesToSend;
1:078f39f:             }
1:078f39f:         }, 5 * 60 * 1000); // give it plenty of time before failing
1:078f39f: 
1:078f39f:         assertEquals("Didn't produce all messages", numMessagesToSend, produced.get());
1:078f39f:         assertEquals("Didn't consume all messages", numMessagesToSend, consumed.get());
1:078f39f: 
1:078f39f:          assertTrue("Producer did not get blocked", Wait.waitFor(new Wait.Condition() {
1:078f39f:              public boolean isSatisified() throws Exception {
1:078f39f:                  return blockedCounter.get() == 0;
1:078f39f:              }
1:078f39f:          }, 5 * 1000));
1:078f39f:     }
1:078f39f: 
1:078f39f:     protected Destination createDestination(Session listenerSession) throws Exception {
1:078f39f:         return new ActiveMQTopic("test");
1:078f39f:     }
1:078f39f: 
1:078f39f:     @Override
1:078f39f:     public void onMessage(Message message) {
1:078f39f:         long count = consumed.incrementAndGet();
1:078f39f:         if (count % 100 == 0) {
1:078f39f:             try {
1:078f39f:                 Thread.sleep(100);
1:078f39f:             } catch (InterruptedException e) {
1:078f39f:             }
1:078f39f:         }
1:078f39f:         if (count % 10000 == 0) {
1:078f39f:             LOG.info("\tConsumed " + count + " messages");
1:078f39f:         }
1:078f39f: 
1:078f39f:     }
1:078f39f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:078f39f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.Arrays;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TopicProducerToSubFileCursorTest extends TestCase implements MessageListener {
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicProducerToSubFileCursorTest.class);
1:     private static final String brokerName = "testBroker";
1:     private static final String brokerUrl = "vm://" + brokerName;
1:     protected static final int destinationMemLimit = 2097152; // 2MB
1:     private static final AtomicLong produced = new AtomicLong();
1:     private static final AtomicLong consumed = new AtomicLong();
1:     private static final int numMessagesToSend = 20000;
1: 
1:     private BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         // Setup and start the broker
1:         broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setSchedulerSupport(false);
1:         broker.setUseJmx(false);
1:         broker.setUseShutdownHook(false);
1:         broker.addConnector(brokerUrl);
1: 
1:         // Setup the destination policy
1:         PolicyMap pm = new PolicyMap();
1: 
1:         // Setup the topic destination policy
1:         PolicyEntry tpe = new PolicyEntry();
1:         tpe.setTopic(">");
1:         tpe.setMemoryLimit(destinationMemLimit);
1:         tpe.setCursorMemoryHighWaterMark(2); // 2% of global usage will match destMemLimit
1:         tpe.setProducerFlowControl(true);
1:         tpe.setAdvisoryWhenFull(true);
1: 
1: 
1:         pm.setPolicyEntries(Arrays.asList(new PolicyEntry[]{tpe}));
1: 
1:         setDestinationPolicy(broker, pm);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(100*1024*1024);
1: 
1:         // Start the broker
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) {
1:         broker.setDestinationPolicy(pm);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     public void testTopicProducerFlowControlNotUsedWhenSubSpoolsToDiskOnTwoPercentSystemUsage() throws Exception {
1: 
1:         // Create the connection factory
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:         connectionFactory.setAlwaysSyncSend(true);
1:         connectionFactory.setProducerWindowSize(1024);
1: 
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(5000);
1:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:         // Start the test destination listener
1:         Connection c = connectionFactory.createConnection();
1:         c.start();
1:         Session listenerSession = c.createSession(false, 1);
1:         Destination destination = createDestination(listenerSession);
1: 
1:         listenerSession.createConsumer(destination).setMessageListener(new TopicProducerToSubFileCursorTest());
1:         final AtomicInteger blockedCounter = new AtomicInteger(0);
1:         listenerSession.createConsumer(new ActiveMQTopic(AdvisorySupport.FULL_TOPIC_PREFIX + ">")).setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.error("Got full advisory, usageName: " +
1:                             message.getStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME) +
1:                             ", usageCount: " +
1:                             message.getLongProperty(AdvisorySupport.MSG_PROPERTY_USAGE_COUNT)
1:                             + ", blockedCounter: " + blockedCounter.get());
1: 
1:                     blockedCounter.incrementAndGet();
1: 
1:                 } catch (Exception error) {
1:                     error.printStackTrace();
1:                     LOG.error("missing advisory property", error);
1:                 }
1:             }
1:         });
1: 
1:         // Start producing the test messages
1:         final Session session = connectionFactory.createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(destination);
1: 
1:         Thread producingThread = new Thread("Producing Thread") {
1:             public void run() {
1:                 try {
1:                     for (long i = 0; i < numMessagesToSend; i++) {
1:                         producer.send(session.createTextMessage("test"));
1: 
1:                         long count = produced.incrementAndGet();
1:                         if (count % 10000 == 0) {
1:                             LOG.info("Produced " + count + " messages");
1:                         }
1:                     }
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 } finally {
1:                     try {
1:                         producer.close();
1:                         session.close();
1:                     } catch (Exception e) {
1:                     }
1:                 }
1:             }
1:         };
1: 
1:         producingThread.start();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return consumed.get() == numMessagesToSend;
1:             }
1:         }, 5 * 60 * 1000); // give it plenty of time before failing
1: 
1:         assertEquals("Didn't produce all messages", numMessagesToSend, produced.get());
1:         assertEquals("Didn't consume all messages", numMessagesToSend, consumed.get());
1: 
1:          assertTrue("Producer did not get blocked", Wait.waitFor(new Wait.Condition() {
1:              public boolean isSatisified() throws Exception {
1:                  return blockedCounter.get() == 0;
1:              }
1:          }, 5 * 1000));
1:     }
1: 
1:     protected Destination createDestination(Session listenerSession) throws Exception {
1:         return new ActiveMQTopic("test");
1:     }
1: 
1:     @Override
1:     public void onMessage(Message message) {
1:         long count = consumed.incrementAndGet();
1:         if (count % 100 == 0) {
1:             try {
1:                 Thread.sleep(100);
1:             } catch (InterruptedException e) {
1:             }
1:         }
1:         if (count % 10000 == 0) {
1:             LOG.info("\tConsumed " + count + " messages");
1:         }
1: 
1:     }
1: }
============================================================================