1:8d98247: /**
1:8d98247:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d98247:  * contributor license agreements.  See the NOTICE file distributed with
1:8d98247:  * this work for additional information regarding copyright ownership.
1:8d98247:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d98247:  * (the "License"); you may not use this file except in compliance with
1:8d98247:  * the License.  You may obtain a copy of the License at
1:8d98247:  *
1:8d98247:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d98247:  *
1:8d98247:  * Unless required by applicable law or agreed to in writing, software
1:8d98247:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d98247:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d98247:  * See the License for the specific language governing permissions and
1:8d98247:  * limitations under the License.
1:8d98247:  */
1:8d98247: package org.apache.activemq.transport.failover;
2:8d98247: 
1:8d98247: import java.util.concurrent.CountDownLatch;
1:8d98247: import java.util.concurrent.ExecutorService;
1:8d98247: import java.util.concurrent.Executors;
1:8d98247: import java.util.concurrent.TimeUnit;
1:8d98247: import java.util.concurrent.atomic.AtomicBoolean;
1:8d98247: import java.util.concurrent.atomic.AtomicInteger;
1:8d98247: import javax.jms.DeliveryMode;
1:8d98247: import javax.jms.JMSException;
1:8d98247: import javax.jms.Message;
1:8d98247: import javax.jms.MessageConsumer;
1:8d98247: import javax.jms.MessageListener;
1:8d98247: import javax.jms.MessageProducer;
1:8d98247: import javax.jms.Queue;
1:8d98247: import javax.jms.Session;
1:8d98247: import javax.jms.TextMessage;
1:8d98247: import org.apache.activemq.ActiveMQConnection;
1:8d98247: import org.apache.activemq.ActiveMQConnectionFactory;
1:8d98247: import org.apache.activemq.ActiveMQSession;
1:8d98247: import org.apache.activemq.broker.BrokerPlugin;
1:8d98247: import org.apache.activemq.broker.BrokerPluginSupport;
1:8d98247: import org.apache.activemq.broker.BrokerService;
1:8d98247: import org.apache.activemq.broker.ProducerBrokerExchange;
1:8d98247: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8d98247: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8d98247: import org.apache.activemq.transaction.Synchronization;
1:8d98247: import org.apache.activemq.util.Wait;
1:8d98247: import org.junit.After;
1:8d98247: import org.junit.Test;
1:8d98247: import org.slf4j.Logger;
1:8d98247: import org.slf4j.LoggerFactory;
1:8d98247: 
1:8d98247: 
1:8d98247: import static org.junit.Assert.*;
1:8d98247: 
1:8d98247: public class FailoverTxSlowAckTest {
1:8d98247: 
1:8d98247:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTxSlowAckTest.class);
1:8d98247:     private static final String QUEUE_IN = "IN";
1:8d98247:     private static final String QUEUE_OUT = "OUT";
1:8d98247: 
1:8d98247:     private static final String MESSAGE_TEXT = "Test message ";
1:92e1f60:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:8d98247:     private String url;
1:8d98247:     final int prefetch = 1;
1:8d98247:     BrokerService broker;
1:8d98247: 
1:8d98247:     @After
1:8d98247:     public void stopBroker() throws Exception {
1:8d98247:         if (broker != null) {
1:8d98247:             broker.stop();
1:8d98247:         }
1:8d98247:     }
1:8d98247: 
1:8d98247:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:8d98247:         broker = createBroker(deleteAllMessagesOnStartup);
1:8d98247:         broker.start();
1:8d98247:     }
1:8d98247: 
1:8d98247:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:8d98247:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:8d98247:     }
1:8d98247: 
1:8d98247:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:8d98247:         broker = new BrokerService();
1:8d98247:         broker.addConnector(bindAddress);
1:8d98247:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:8d98247:         PolicyMap policyMap = new PolicyMap();
1:8d98247:         PolicyEntry defaultEntry = new PolicyEntry();
1:8d98247:         defaultEntry.setOptimizedDispatch(true);
1:8d98247:         policyMap.setDefaultEntry(defaultEntry);
1:8d98247:         broker.setDestinationPolicy(policyMap);
1:8d98247: 
1:8d98247:         return broker;
1:8d98247:     }
1:8d98247: 
1:8d98247:     @Test
1:8d98247:     public void testFailoverDuringAckRollsback() throws Exception {
1:8d98247:         broker = createBroker(true);
1:8d98247: 
1:8d98247:         final ExecutorService executorService = Executors.newFixedThreadPool(2);
1:8d98247:         broker.setPlugins(new BrokerPlugin[] {
1:8d98247:                 new BrokerPluginSupport() {
1:8d98247:                     int sendCount = 0;
1:8d98247:                     @Override
1:8d98247:                     public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:8d98247:                         super.send(producerExchange, messageSend);
1:8d98247:                         sendCount++;
1:8d98247:                         if (sendCount > 1) {
1:8d98247:                             // need new thread b/c we have the service write lock
1:8d98247:                             executorService.execute(new Runnable() {
1:de5d0d9:                                 @Override
1:8d98247:                                 public void run() {
1:8d98247:                                     LOG.info("Stopping broker before commit...");
1:8d98247:                                     try {
1:8d98247:                                         broker.stop();
1:8d98247:                                     } catch (Exception e) {
1:8d98247:                                         e.printStackTrace();
1:8d98247:                                     }
1:8d98247:                                 }
1:8d98247:                             });
1:8d98247:                         }
1:8d98247:                     }}});
1:8d98247: 
1:8d98247:         broker.start();
1:92e1f60:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:8d98247: 
1:92e1f60:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:8d98247:         cf.setWatchTopicAdvisories(false);
1:8d98247:         cf.setDispatchAsync(false);
1:8d98247: 
1:8d98247:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:8d98247:         connection.start();
1:8d98247: 
1:8d98247:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8d98247:         final Queue in = producerSession.createQueue(QUEUE_IN + "?consumer.prefetchSize=" + prefetch);
1:8d98247: 
1:8d98247:         final Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:8d98247:         final Queue out = consumerSession.createQueue(QUEUE_OUT);
1:8d98247:         final MessageProducer consumerProducer = consumerSession.createProducer(out);
1:8d98247: 
1:8d98247: 
1:8d98247:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
1:8d98247:         final CountDownLatch messagesReceived = new CountDownLatch(1);
1:de5d0d9:         final CountDownLatch brokerDisconnectedLatch = new CountDownLatch(1);
1:8d98247:         final AtomicInteger receivedCount = new AtomicInteger();
1:8d98247: 
1:8d98247:         final AtomicBoolean gotDisconnect = new AtomicBoolean();
1:8d98247:         final AtomicBoolean gotReconnected = new AtomicBoolean();
1:8d98247: 
1:8d98247:         final MessageConsumer testConsumer = consumerSession.createConsumer(in);
1:8d98247:         testConsumer.setMessageListener(new MessageListener() {
1:8d98247: 
1:de5d0d9:             @Override
1:8d98247:             public void onMessage(Message message) {
1:8d98247:                 LOG.info("consume one and commit");
1:8d98247: 
1:8d98247:                 assertNotNull("got message", message);
1:8d98247:                 receivedCount.incrementAndGet();
1:8d98247:                 messagesReceived.countDown();
1:8d98247: 
1:8d98247: 
1:8d98247:                 try {
1:8d98247:                     // ensure message expires broker side so it won't get redelivered
1:8d98247:                     TimeUnit.SECONDS.sleep(1);
1:8d98247: 
1:8d98247:                     consumerProducer.send(message);
1:8d98247: 
1:8d98247:                     // hack to block the transaction completion
1:8d98247:                     // ensure session does not get to send commit message before failover reconnect
1:8d98247:                     // if the commit message is in progress during failover we get rollback via the state
1:8d98247:                     // tracker
1:8d98247:                     ((ActiveMQSession) consumerSession).getTransactionContext().addSynchronization(new Synchronization() {
1:8d98247: 
1:de5d0d9:                         @Override
1:8d98247:                         public void beforeEnd() throws Exception {
1:8d98247: 
1:8d98247:                             LOG.info("waiting for failover reconnect");
1:8d98247: 
1:8d98247:                             gotDisconnect.set(Wait.waitFor(new Wait.Condition() {
1:8d98247:                                 @Override
1:8d98247:                                 public boolean isSatisified() throws Exception {
1:8d98247:                                     return !((ActiveMQSession) consumerSession).getConnection().getTransport().isConnected();
1:8d98247:                                 }
1:8d98247:                             }));
1:8d98247: 
1:de5d0d9:                             //connect down to trigger reconnect
1:de5d0d9:                             brokerDisconnectedLatch.countDown();
1:de5d0d9: 
1:8d98247:                             LOG.info("got disconnect");
1:8d98247:                             gotReconnected.set(Wait.waitFor(new Wait.Condition() {
1:8d98247:                                 @Override
1:8d98247:                                 public boolean isSatisified() throws Exception {
1:8d98247:                                     return ((ActiveMQSession) consumerSession).getConnection().getTransport().isConnected();
1:8d98247:                                 }
1:8d98247:                             }));
1:8d98247: 
1:8d98247:                             LOG.info("got failover reconnect");
1:8d98247: 
1:8d98247:                         }
1:8d98247:                     });
1:8d98247: 
1:8d98247: 
1:8d98247:                     consumerSession.commit();
1:8d98247:                     LOG.info("done commit");
1:8d98247: 
1:8d98247:                 } catch (Exception e) {
1:8d98247:                     e.printStackTrace();
1:8d98247:                 } finally {
1:8d98247:                     commitDoneLatch.countDown();
1:8d98247:                 }
1:8d98247:             }
1:8d98247:         });
1:8d98247: 
1:8d98247:         executorService.execute(new Runnable() {
1:8d98247:             @Override
1:8d98247:             public void run() {
1:8d98247:                 LOG.info("producer started");
1:8d98247:                 try {
1:8d98247:                     produceMessage(producerSession, in, 1);
1:8d98247:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
1:8d98247:                 } catch (JMSException e) {
1:8d98247:                     e.printStackTrace();
1:8d98247:                     fail("unexpceted ex on producer: " + e);
1:8d98247:                 }
1:8d98247:                 LOG.info("producer done");
1:8d98247:             }
1:8d98247:         });
1:8d98247: 
1:8d98247:         // will be stopped by the plugin on TX ack
1:8d98247:         broker.waitUntilStopped();
1:de5d0d9:         //await for listener to detect disconnect
1:de5d0d9:         brokerDisconnectedLatch.await();
1:8d98247:         broker = createBroker(false, url);
1:8d98247:         broker.start();
1:8d98247: 
1:8d98247:         assertTrue("message was recieved ", messagesReceived.await(20, TimeUnit.SECONDS));
1:92e1f60:         assertTrue("tx complete through failover", commitDoneLatch.await(40, TimeUnit.SECONDS));
1:8d98247:         assertEquals("one delivery", 1, receivedCount.get());
1:8d98247: 
1:8d98247:         assertTrue("got disconnect/reconnect", gotDisconnect.get());
1:8d98247:         assertTrue("got reconnect", gotReconnected.get());
1:8d98247: 
1:8d98247:         assertNull("No message produced", receiveMessage(cf, out));
1:8d98247:     }
1:8d98247: 
1:8d98247: 
1:8d98247:     private Message receiveMessage(ActiveMQConnectionFactory cf,
1:8d98247:             Queue destination) throws Exception {
1:8d98247:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:8d98247:         connection.start();
1:8d98247:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8d98247:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:8d98247:         Message msg = consumer.receive(4000);
1:8d98247:         consumerSession.commit();
1:8d98247:         connection.close();
1:8d98247:         return msg;
1:8d98247:     }
1:8d98247: 
1:8d98247:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:8d98247:         throws JMSException {
1:8d98247:         MessageProducer producer = producerSession.createProducer(destination);
1:8d98247:         for (int i=0; i<count; i++) {
1:8d98247:             TextMessage message = producerSession.createTextMessage(MESSAGE_TEXT + i);
1:8d98247:             // have it expire so it will only be delivered once
1:8d98247:             producer.send(message, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, 500);
1:8d98247:         }
1:8d98247:         producer.close();
1:8d98247:     }
1:8d98247: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:de5d0d9
/////////////////////////////////////////////////////////////////////////
1:                                 @Override
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch brokerDisconnectedLatch = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                             //connect down to trigger reconnect
1:                             brokerDisconnectedLatch.countDown();
1: 
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         //await for listener to detect disconnect
1:         brokerDisconnectedLatch.await();
author:gtully
-------------------------------------------------------------------------------
commit:92e1f60
/////////////////////////////////////////////////////////////////////////
1:     private static final String TRANSPORT_URI = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("tx complete through failover", commitDoneLatch.await(40, TimeUnit.SECONDS));
commit:8d98247
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.transaction.Synchronization;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.*;
1: 
1: public class FailoverTxSlowAckTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTxSlowAckTest.class);
1:     private static final String QUEUE_IN = "IN";
1:     private static final String QUEUE_OUT = "OUT";
1: 
1:     private static final String MESSAGE_TEXT = "Test message ";
0:     private static final String TRANSPORT_URI = "tcp://localhost:0?transport.useKeepAlive=false&wireFormat.maxInactivityDuration=10000";
1:     private String url;
1:     final int prefetch = 1;
1:     BrokerService broker;
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup);
1:         broker.start();
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker = new BrokerService();
1:         broker.addConnector(bindAddress);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setOptimizedDispatch(true);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
0:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1: 
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testFailoverDuringAckRollsback() throws Exception {
1:         broker = createBroker(true);
1: 
1:         final ExecutorService executorService = Executors.newFixedThreadPool(2);
1:         broker.setPlugins(new BrokerPlugin[] {
1:                 new BrokerPluginSupport() {
1:                     int sendCount = 0;
1:                     @Override
1:                     public void send(ProducerBrokerExchange producerExchange, org.apache.activemq.command.Message messageSend) throws Exception {
1:                         super.send(producerExchange, messageSend);
1:                         sendCount++;
1:                         if (sendCount > 1) {
1:                             // need new thread b/c we have the service write lock
1:                             executorService.execute(new Runnable() {
1:                                 public void run() {
1:                                     LOG.info("Stopping broker before commit...");
1:                                     try {
1:                                         broker.stop();
1:                                     } catch (Exception e) {
1:                                         e.printStackTrace();
1:                                     }
1:                                 }
1:                             });
1:                         }
1:                     }}});
1: 
1:         broker.start();
1: 
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + "?useKeepAlive=false&wireFormat.maxInactivityDuration=10000)");
1:         cf.setWatchTopicAdvisories(false);
1:         cf.setDispatchAsync(false);
1: 
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue in = producerSession.createQueue(QUEUE_IN + "?consumer.prefetchSize=" + prefetch);
1: 
1:         final Session consumerSession = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         final Queue out = consumerSession.createQueue(QUEUE_OUT);
1:         final MessageProducer consumerProducer = consumerSession.createProducer(out);
1: 
1: 
1:         final CountDownLatch commitDoneLatch = new CountDownLatch(1);
1:         final CountDownLatch messagesReceived = new CountDownLatch(1);
1:         final AtomicInteger receivedCount = new AtomicInteger();
1: 
1:         final AtomicBoolean gotDisconnect = new AtomicBoolean();
1:         final AtomicBoolean gotReconnected = new AtomicBoolean();
1: 
1:         final MessageConsumer testConsumer = consumerSession.createConsumer(in);
1:         testConsumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 LOG.info("consume one and commit");
1: 
1:                 assertNotNull("got message", message);
1:                 receivedCount.incrementAndGet();
1:                 messagesReceived.countDown();
1: 
1: 
1:                 try {
1:                     // ensure message expires broker side so it won't get redelivered
1:                     TimeUnit.SECONDS.sleep(1);
1: 
1:                     consumerProducer.send(message);
1: 
1:                     // hack to block the transaction completion
1:                     // ensure session does not get to send commit message before failover reconnect
1:                     // if the commit message is in progress during failover we get rollback via the state
1:                     // tracker
1:                     ((ActiveMQSession) consumerSession).getTransactionContext().addSynchronization(new Synchronization() {
1: 
1:                         @Override
1:                         public void beforeEnd() throws Exception {
1: 
1:                             LOG.info("waiting for failover reconnect");
1: 
1:                             gotDisconnect.set(Wait.waitFor(new Wait.Condition() {
1:                                 @Override
1:                                 public boolean isSatisified() throws Exception {
1:                                     return !((ActiveMQSession) consumerSession).getConnection().getTransport().isConnected();
1:                                 }
1:                             }));
1: 
1:                             LOG.info("got disconnect");
1:                             gotReconnected.set(Wait.waitFor(new Wait.Condition() {
1:                                 @Override
1:                                 public boolean isSatisified() throws Exception {
1:                                     return ((ActiveMQSession) consumerSession).getConnection().getTransport().isConnected();
1:                                 }
1:                             }));
1: 
1:                             LOG.info("got failover reconnect");
1: 
1:                         }
1:                     });
1: 
1: 
1:                     consumerSession.commit();
1:                     LOG.info("done commit");
1: 
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 } finally {
1:                     commitDoneLatch.countDown();
1:                 }
1:             }
1:         });
1: 
1:         executorService.execute(new Runnable() {
1:             public void run() {
1:                 LOG.info("producer started");
1:                 try {
1:                     produceMessage(producerSession, in, 1);
1:                 } catch (javax.jms.IllegalStateException SessionClosedExpectedOnShutdown) {
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     fail("unexpceted ex on producer: " + e);
1:                 }
1:                 LOG.info("producer done");
1:             }
1:         });
1: 
1:         // will be stopped by the plugin on TX ack
1:         broker.waitUntilStopped();
1:         broker = createBroker(false, url);
1:         broker.start();
1: 
1:         assertTrue("message was recieved ", messagesReceived.await(20, TimeUnit.SECONDS));
0:         assertTrue("tx complete through failover", commitDoneLatch.await(20, TimeUnit.SECONDS));
1:         assertEquals("one delivery", 1, receivedCount.get());
1: 
1:         assertTrue("got disconnect/reconnect", gotDisconnect.get());
1:         assertTrue("got reconnect", gotReconnected.get());
1: 
1:         assertNull("No message produced", receiveMessage(cf, out));
1:     }
1: 
1: 
1:     private Message receiveMessage(ActiveMQConnectionFactory cf,
1:             Queue destination) throws Exception {
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Message msg = consumer.receive(4000);
1:         consumerSession.commit();
1:         connection.close();
1:         return msg;
1:     }
1: 
1:     private void produceMessage(final Session producerSession, Queue destination, long count)
1:         throws JMSException {
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         for (int i=0; i<count; i++) {
1:             TextMessage message = producerSession.createTextMessage(MESSAGE_TEXT + i);
1:             // have it expire so it will only be delivered once
1:             producer.send(message, DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, 500);
1:         }
1:         producer.close();
1:     }
1: }
============================================================================