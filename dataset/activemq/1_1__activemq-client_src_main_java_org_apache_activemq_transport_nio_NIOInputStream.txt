1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
2:885c379: 
1:885c379: import java.io.IOException;
1:885c379: import java.io.InputStream;
1:885c379: import java.nio.BufferUnderflowException;
1:885c379: import java.nio.ByteBuffer;
1:f812e34: 
1:885c379: /**
1:885c379:  * An optimized buffered input stream for Tcp
1:b0c2a40:  * 
1:885c379:  * 
1:885c379:  */
1:885c379: public class NIOInputStream extends InputStream {
1:f812e34: 
1:885c379:     protected int count;
1:885c379:     protected int position;
1:f812e34:     private final ByteBuffer in;
1:885c379: 
1:f812e34:     public NIOInputStream(ByteBuffer in) {
1:f812e34:         this.in = in;
3:885c379:     }
1:885c379: 
1:885c379:     public int read() throws IOException {
1:f812e34:         try {
1:f812e34:             int rc = in.get() & 0xff;
1:f812e34:             return rc;
1:f812e34:         } catch (BufferUnderflowException e) {
1:f812e34:             return -1;
1:f812e34:         }
1:885c379:     }
1:885c379: 
1:f812e34:     public int read(byte b[], int off, int len) throws IOException {
1:f812e34:         if (in.hasRemaining()) {
1:f812e34:             int rc = Math.min(len, in.remaining());
1:f812e34:             in.get(b, off, rc);
1:f812e34:             return rc;
1:f812e34:         } else {
1:f812e34:             return len == 0 ? 0 : -1;
1:f812e34:         }
1:885c379:     }
1:885c379: 
1:f812e34:     public long skip(long n) throws IOException {
1:f812e34:         int rc = Math.min((int)n, in.remaining());
1:f812e34:         in.position(in.position() + rc);
3:885c379:         return rc;
1:885c379:     }
1:885c379: 
1:f812e34:     public int available() throws IOException {
1:885c379:         return in.remaining();
1:885c379:     }
1:885c379: 
1:f812e34:     public boolean markSupported() {
1:885c379:         return false;
1:885c379:     }
1:885c379: 
1:f812e34:     public void close() throws IOException {
1:885c379:     }
1:885c379: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private final ByteBuffer in;
1:     public NIOInputStream(ByteBuffer in) {
1:         this.in = in;
1:         try {
1:             int rc = in.get() & 0xff;
1:             return rc;
1:         } catch (BufferUnderflowException e) {
1:             return -1;
1:         }
1:     public int read(byte b[], int off, int len) throws IOException {
1:         if (in.hasRemaining()) {
1:             int rc = Math.min(len, in.remaining());
1:             in.get(b, off, rc);
1:             return rc;
1:         } else {
1:             return len == 0 ? 0 : -1;
1:         }
1:     public long skip(long n) throws IOException {
1:         int rc = Math.min((int)n, in.remaining());
1:         in.position(in.position() + rc);
1:     public int available() throws IOException {
1:     public boolean markSupported() {
1:     public void close() throws IOException {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.nio.BufferUnderflowException;
1: import java.nio.ByteBuffer;
1: /**
1:  * An optimized buffered input stream for Tcp
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class NIOInputStream extends InputStream {
1: 	
1:     protected int count;
1:     protected int position;
0: 	private final ByteBuffer in;
1: 
0:     public NIOInputStream(ByteBuffer in){
0: 		this.in = in;
1:     }
1: 
1:     public int read() throws IOException {
0:     	try {
0:     		int rc = in.get()& 0xff; 
1:     		return rc;
0:     	} catch ( BufferUnderflowException e ) {
0:     		return -1;
1:     	}
1:     }
1: 
0:     public int read(byte b[],int off,int len) throws IOException{
0:     	if( in.hasRemaining() ) {
0: 	    	int rc = Math.min(len, in.remaining());
0: 	    	in.get(b, off, rc);
1: 	    	return rc;
0:     	} else {
0:     		return len == 0 ? 0 : -1; 
1:     	}
1:     }
1: 
0:     public long skip(long n) throws IOException{
0:     	int rc = Math.min((int)n, in.remaining());
0:     	in.position(in.position()+rc);
1:         return rc;
1:     }
1: 
0:     public int available() throws IOException{
1:         return in.remaining();
1:     }
1: 
0:     public boolean markSupported(){
1:         return false;
1:     }
1: 
0:     public void close() throws IOException{
1:     }
1: }
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.nio.BufferUnderflowException;
0: import java.nio.ByteBuffer;
0: /**
0:  * An optimized buffered input stream for Tcp
0:  * 
0:  * @version $Revision: 1.1.1.1 $
0:  */
0: public class NIOInputStream extends InputStream {
0: 	
0:     protected int count;
0:     protected int position;
0: 	private final ByteBuffer in;
0: 
0:     public NIOInputStream(ByteBuffer in){
0: 		this.in = in;
0:     }
0: 
0:     public int read() throws IOException {
0:     	try {
0:     		int rc = in.get()& 0xff; 
0:     		return rc;
0:     	} catch ( BufferUnderflowException e ) {
0:     		return -1;
0:     	}
0:     }
0: 
0:     public int read(byte b[],int off,int len) throws IOException{
0:     	if( in.hasRemaining() ) {
0: 	    	int rc = Math.min(len, in.remaining());
0: 	    	in.get(b, off, rc);
0: 	    	return rc;
0:     	} else {
0:     		return len == 0 ? 0 : -1; 
0:     	}
0:     }
0: 
0:     public long skip(long n) throws IOException{
0:     	int rc = Math.min((int)n, in.remaining());
0:     	in.position(in.position()+rc);
0:         return rc;
0:     }
0: 
0:     public int available() throws IOException{
0:         return in.remaining();
0:     }
0: 
0:     public boolean markSupported(){
0:         return false;
0:     }
0: 
0:     public void close() throws IOException{
0:     }
0: }
============================================================================