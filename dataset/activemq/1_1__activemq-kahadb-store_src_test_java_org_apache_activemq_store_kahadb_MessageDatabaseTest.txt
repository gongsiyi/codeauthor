1:8c3ef6c: /**
1:8c3ef6c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c3ef6c:  * contributor license agreements.  See the NOTICE file distributed with
1:8c3ef6c:  * this work for additional information regarding copyright ownership.
1:8c3ef6c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c3ef6c:  * (the "License"); you may not use this file except in compliance with
1:8c3ef6c:  * the License.  You may obtain a copy of the License at
1:8c3ef6c:  *
1:8c3ef6c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8c3ef6c:  *
1:8c3ef6c:  * Unless required by applicable law or agreed to in writing, software
1:8c3ef6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c3ef6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c3ef6c:  * See the License for the specific language governing permissions and
1:8c3ef6c:  * limitations under the License.
1:8c3ef6c:  */
1:8c3ef6c: 
1:8c3ef6c: package org.apache.activemq.store.kahadb;
1:8c3ef6c: 
1:f989992: import org.apache.activemq.ActiveMQMessageAuditNoSync;
1:8c3ef6c: import org.apache.activemq.broker.BrokerService;
1:8c3ef6c: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:f989992: import org.apache.activemq.util.ByteSequence;
1:8c3ef6c: import org.junit.Rule;
1:8c3ef6c: import org.junit.Test;
1:8c3ef6c: import org.junit.rules.TemporaryFolder;
1:8c3ef6c: 
1:8c3ef6c: import java.io.File;
1:8c3ef6c: import java.io.IOException;
1:8c3ef6c: import java.util.concurrent.CountDownLatch;
1:8c3ef6c: import java.util.concurrent.TimeUnit;
1:8c3ef6c: 
1:f989992: import static org.apache.activemq.store.kahadb.disk.journal.Journal.DEFAULT_MAX_WRITE_BATCH_SIZE;
1:8c3ef6c: import static org.junit.Assert.*;
1:8c3ef6c: 
1:8c3ef6c: public class MessageDatabaseTest {
1:8c3ef6c: 
1:8c3ef6c:     @Rule
1:8c3ef6c:     public TemporaryFolder temporaryFolder = new TemporaryFolder();
1:8c3ef6c: 
1:8c3ef6c:     @Test
1:8c3ef6c:     public void testCheckPointCleanupErrorBubblesUp() throws Exception {
1:8c3ef6c: 
1:8c3ef6c:         CountDownLatch traceCommandComplete = new CountDownLatch(1);
1:8c3ef6c:         KahaDBStore kaha = new KahaDBStore() {
1:8c3ef6c:             public Journal createJournal() {
1:8c3ef6c:                 Journal journal = new Journal() {
1:8c3ef6c:                     public boolean isChecksum() {
1:8c3ef6c:                         // allow trace command on start
1:8c3ef6c: 
1:8c3ef6c:                         if (traceCommandComplete.getCount() > 0) {
1:8c3ef6c:                             traceCommandComplete.countDown();
1:8c3ef6c:                             return false;
1:8c3ef6c:                         }
1:8c3ef6c: 
1:8c3ef6c:                         // called from processQ, we can throw here to error out the async write
1:8c3ef6c:                         throw new RuntimeException("Fail with error on processQ");
1:8c3ef6c:                     }
1:8c3ef6c:                 };
1:8c3ef6c:                 journal.setDirectory(directory);
1:8c3ef6c:                 return journal;
1:8c3ef6c:             }
1:8c3ef6c:         };
1:8c3ef6c:         kaha.setDirectory(new File(temporaryFolder.getRoot(), "kaha"));
1:8c3ef6c:         kaha.setCheckpointInterval(0l); // disable periodic checkpoint
1:8c3ef6c:         kaha.setBrokerService(new BrokerService() {
1:8c3ef6c:             public void handleIOException(IOException exception) {
1:8c3ef6c:                 exception.printStackTrace();
1:8c3ef6c:             }
1:8c3ef6c:         });
1:8c3ef6c:         kaha.start();
1:8c3ef6c: 
1:8c3ef6c:         assertTrue(traceCommandComplete.await(5, TimeUnit.SECONDS));
1:8c3ef6c: 
1:8c3ef6c:         try {
1:8c3ef6c:             kaha.checkpoint(false);
1:8c3ef6c:             fail("expect error on first store from checkpoint");
1:8c3ef6c:         } catch (Exception expected) {
1:8c3ef6c:         }
1:8c3ef6c: 
1:8c3ef6c:         assertNull("audit location should be null", kaha.getMetadata().producerSequenceIdTrackerLocation);
1:8c3ef6c:     }
1:8c3ef6c: 
1:f989992:     @Test
1:f989992:     public void testRecoverCheckOnBatchBoundary() throws Exception {
1:f989992: 
1:f989992:         KahaDBStore kaha = new KahaDBStore();
1:f989992:         kaha.setDirectory(new File(temporaryFolder.getRoot(), "kaha2"));
1:f989992:         kaha.setCheckpointInterval(0l); // disable periodic checkpoint
1:f989992:         kaha.setCheckForCorruptJournalFiles(true);
1:f989992:         kaha.setChecksumJournalFiles(true);
1:f989992:         kaha.setMaxFailoverProducersToTrack(10);
1:f989992:         kaha.setBrokerService(new BrokerService() {
1:f989992:             public void handleIOException(IOException exception) {
1:f989992:                 exception.printStackTrace();
1:f989992:             }
1:f989992:         });
1:f989992:         kaha.start();
1:f989992: 
1:f989992:         // track original metadata reference to ensure it is read from the journal on recovery
1:f989992:         ActiveMQMessageAuditNoSync auditToVerify = kaha.getMetadata().producerSequenceIdTracker;
1:f989992:         final String messsageId = "1:1:1:1";
1:f989992:         auditToVerify.isDuplicate(messsageId);
1:f989992: 
1:f989992:         ByteSequence byteSequence = new ByteSequence(new byte[DEFAULT_MAX_WRITE_BATCH_SIZE - 110]);
1:f989992:         kaha.getJournal().write(byteSequence, false);
1:f989992:         kaha.getJournal().write(byteSequence, false);
1:f989992: 
1:f989992:         kaha.stop();
1:f989992:         try {
1:f989992:             kaha.start();
1:f989992:             assertTrue("Value from journal recovered ok", kaha.getMetadata().producerSequenceIdTracker.isDuplicate(messsageId));
1:f989992:         } finally {
1:f989992:             kaha.stop();
1:f989992:         }
1:f989992:     }
1:8c3ef6c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f989992
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageAuditNoSync;
1: import org.apache.activemq.util.ByteSequence;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.store.kahadb.disk.journal.Journal.DEFAULT_MAX_WRITE_BATCH_SIZE;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testRecoverCheckOnBatchBoundary() throws Exception {
1: 
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File(temporaryFolder.getRoot(), "kaha2"));
1:         kaha.setCheckpointInterval(0l); // disable periodic checkpoint
1:         kaha.setCheckForCorruptJournalFiles(true);
1:         kaha.setChecksumJournalFiles(true);
1:         kaha.setMaxFailoverProducersToTrack(10);
1:         kaha.setBrokerService(new BrokerService() {
1:             public void handleIOException(IOException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1:         kaha.start();
1: 
1:         // track original metadata reference to ensure it is read from the journal on recovery
1:         ActiveMQMessageAuditNoSync auditToVerify = kaha.getMetadata().producerSequenceIdTracker;
1:         final String messsageId = "1:1:1:1";
1:         auditToVerify.isDuplicate(messsageId);
1: 
1:         ByteSequence byteSequence = new ByteSequence(new byte[DEFAULT_MAX_WRITE_BATCH_SIZE - 110]);
1:         kaha.getJournal().write(byteSequence, false);
1:         kaha.getJournal().write(byteSequence, false);
1: 
1:         kaha.stop();
1:         try {
1:             kaha.start();
1:             assertTrue("Value from journal recovered ok", kaha.getMetadata().producerSequenceIdTracker.isDuplicate(messsageId));
1:         } finally {
1:             kaha.stop();
1:         }
1:     }
commit:8c3ef6c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class MessageDatabaseTest {
1: 
1:     @Rule
1:     public TemporaryFolder temporaryFolder = new TemporaryFolder();
1: 
1:     @Test
1:     public void testCheckPointCleanupErrorBubblesUp() throws Exception {
1: 
1:         CountDownLatch traceCommandComplete = new CountDownLatch(1);
1:         KahaDBStore kaha = new KahaDBStore() {
1:             public Journal createJournal() {
1:                 Journal journal = new Journal() {
1:                     public boolean isChecksum() {
1:                         // allow trace command on start
1: 
1:                         if (traceCommandComplete.getCount() > 0) {
1:                             traceCommandComplete.countDown();
1:                             return false;
1:                         }
1: 
1:                         // called from processQ, we can throw here to error out the async write
1:                         throw new RuntimeException("Fail with error on processQ");
1:                     }
1:                 };
1:                 journal.setDirectory(directory);
1:                 return journal;
1:             }
1:         };
1:         kaha.setDirectory(new File(temporaryFolder.getRoot(), "kaha"));
1:         kaha.setCheckpointInterval(0l); // disable periodic checkpoint
1:         kaha.setBrokerService(new BrokerService() {
1:             public void handleIOException(IOException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1:         kaha.start();
1: 
1:         assertTrue(traceCommandComplete.await(5, TimeUnit.SECONDS));
1: 
1:         try {
1:             kaha.checkpoint(false);
1:             fail("expect error on first store from checkpoint");
1:         } catch (Exception expected) {
1:         }
1: 
1:         assertNull("audit location should be null", kaha.getMetadata().producerSequenceIdTrackerLocation);
1:     }
1: 
1: }
============================================================================