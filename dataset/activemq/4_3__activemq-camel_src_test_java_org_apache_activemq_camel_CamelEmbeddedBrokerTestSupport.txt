1:a28ccae: /**
2:a28ccae:  *
1:a28ccae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a28ccae:  * contributor license agreements.  See the NOTICE file distributed with
1:a28ccae:  * this work for additional information regarding copyright ownership.
1:a28ccae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a28ccae:  * (the "License"); you may not use this file except in compliance with
1:a28ccae:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:a28ccae:  * http://www.apache.org/licenses/LICENSE-2.0
1:a28ccae:  *
1:a28ccae:  * Unless required by applicable law or agreed to in writing, software
1:a28ccae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a28ccae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a28ccae:  * See the License for the specific language governing permissions and
1:a28ccae:  * limitations under the License.
1:a28ccae:  */
1:a28ccae: package org.apache.activemq.camel;
7:a28ccae: 
1:a28ccae: import java.util.Hashtable;
1:a28ccae: 
1:a28ccae: import javax.naming.Context;
1:a28ccae: 
1:a28ccae: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:a28ccae: import org.apache.camel.CamelContext;
1:a28ccae: import org.apache.camel.Endpoint;
1:d4da85f: import org.apache.camel.ProducerTemplate;
1:a28ccae: import org.apache.camel.component.mock.MockEndpoint;
1:a28ccae: import org.apache.camel.impl.DefaultCamelContext;
1:a28ccae: import org.apache.camel.util.jndi.JndiContext;
1:a28ccae: 
1:a28ccae: /**
1:d4da85f:  * A helper class for test cases which use an embedded broker and use Camel to
1:d4da85f:  * do the routing
1:a28ccae:  *
1:a28ccae:  */
1:a28ccae: public abstract class CamelEmbeddedBrokerTestSupport extends EmbeddedBrokerTestSupport {
1:a28ccae:     protected CamelContext camelContext;
1:e24a791:     protected ProducerTemplate template;
1:d4da85f: 
1:a28ccae:     @Override
1:a28ccae:     protected void setUp() throws Exception {
1:a28ccae:         bindAddress = "tcp://localhost:61616";
1:a28ccae:         super.setUp();
1:a28ccae:         camelContext = createCamelContext();
1:a28ccae:         addCamelRoutes(camelContext);
1:a28ccae:         assertValidContext(camelContext);
1:a28ccae:         camelContext.start();
1:e24a791:         template = camelContext.createProducerTemplate();
1:a28ccae:         template.start();
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     @Override
1:a28ccae:     protected void tearDown() throws Exception {
1:a28ccae:         super.tearDown();
1:a28ccae: 
1:a28ccae:         if (template != null) {
1:a28ccae:             template.stop();
1:a28ccae:         }
1:a28ccae:         if (camelContext != null) {
1:a28ccae:             camelContext.stop();
1:a28ccae:         }
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     protected CamelContext createCamelContext() throws Exception {
1:a28ccae:         return new DefaultCamelContext(createJndiContext());
1:a28ccae:     }
1:a28ccae: 
1:d4da85f:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:a28ccae:     protected Context createJndiContext() throws Exception {
1:a28ccae:         return new JndiContext(new Hashtable());
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     protected void addCamelRoutes(CamelContext camelContext) throws Exception {
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:a28ccae:      * Resolves a mandatory endpoint for the given URI or an exception is thrown
1:a28ccae:      *
1:d4da85f:      * @param uri
1:d4da85f:      *            the Camel <a href="">URI</a> to use to create or resolve an
1:d4da85f:      *            endpoint
1:a28ccae:      * @return the endpoint
1:a28ccae:      */
1:a28ccae:     protected Endpoint resolveMandatoryEndpoint(String uri) {
1:a28ccae:         return resolveMandatoryEndpoint(camelContext, uri);
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:d4da85f:      * Resolves a mandatory endpoint for the given URI and expected type or an
1:d4da85f:      * exception is thrown
1:a28ccae:      *
1:d4da85f:      * @param uri
1:d4da85f:      *            the Camel <a href="">URI</a> to use to create or resolve an
1:d4da85f:      *            endpoint
1:a28ccae:      * @return the endpoint
1:a28ccae:      */
1:a28ccae:     protected <T extends Endpoint> T resolveMandatoryEndpoint(String uri, Class<T> endpointType) {
1:a28ccae:         return resolveMandatoryEndpoint(camelContext, uri, endpointType);
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:a28ccae:      * Resolves an endpoint and asserts that it is found
1:a28ccae:      */
1:a28ccae:     protected Endpoint resolveMandatoryEndpoint(CamelContext context, String uri) {
1:a28ccae:         Endpoint endpoint = context.getEndpoint(uri);
1:a28ccae: 
1:a28ccae:         assertNotNull("No endpoint found for URI: " + uri, endpoint);
1:a28ccae: 
1:a28ccae:         return endpoint;
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:a28ccae:      * Resolves an endpoint and asserts that it is found
1:a28ccae:      */
1:d4da85f:     protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri, Class<T> endpointType) {
1:a28ccae:         T endpoint = context.getEndpoint(uri, endpointType);
1:a28ccae: 
1:a28ccae:         assertNotNull("No endpoint found for URI: " + uri, endpoint);
1:a28ccae: 
1:a28ccae:         return endpoint;
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:d4da85f:      * Resolves the mandatory Mock endpoint using a URI of the form
1:d4da85f:      * <code>mock:someName</code>
1:a28ccae:      *
1:d4da85f:      * @param uri
1:d4da85f:      *            the URI which typically starts with "mock:" and has some name
1:d4da85f:      * @return the mandatory mock endpoint or an exception is thrown if it could
1:d4da85f:      *         not be resolved
1:a28ccae:      */
1:a28ccae:     protected MockEndpoint getMockEndpoint(String uri) {
1:a28ccae:         return resolveMandatoryEndpoint(uri, MockEndpoint.class);
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     /**
1:a28ccae:      * Asserts that all the expectations of the Mock endpoints are valid
1:a28ccae:      */
1:a28ccae:     protected void assertMockEndpointsSatisifed() throws InterruptedException {
1:a28ccae:         MockEndpoint.assertIsSatisfied(camelContext);
1:a28ccae:     }
1:a28ccae: 
1:a28ccae:     protected void assertValidContext(CamelContext context) {
1:a28ccae:         assertNotNull("No context found!", context);
1:a28ccae:     }
1:a28ccae: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.ProducerTemplate;
1:  * A helper class for test cases which use an embedded broker and use Camel to
1:  * do the routing
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "unchecked", "rawtypes" })
/////////////////////////////////////////////////////////////////////////
1:      * @param uri
1:      *            the Camel <a href="">URI</a> to use to create or resolve an
1:      *            endpoint
/////////////////////////////////////////////////////////////////////////
1:      * Resolves a mandatory endpoint for the given URI and expected type or an
1:      * exception is thrown
1:      * @param uri
1:      *            the Camel <a href="">URI</a> to use to create or resolve an
1:      *            endpoint
/////////////////////////////////////////////////////////////////////////
1:     protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri, Class<T> endpointType) {
/////////////////////////////////////////////////////////////////////////
1:      * Resolves the mandatory Mock endpoint using a URI of the form
1:      * <code>mock:someName</code>
1:      * @param uri
1:      *            the URI which typically starts with "mock:" and has some name
1:      * @return the mandatory mock endpoint or an exception is thrown if it could
1:      *         not be resolved
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:1dc4b25
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.CamelTemplate;
commit:ec80f28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.Exchange;
0: import org.apache.camel.impl.CamelTemplate;
author:James Strachan
-------------------------------------------------------------------------------
commit:e24a791
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.ProducerTemplate;
/////////////////////////////////////////////////////////////////////////
1:     protected ProducerTemplate template;
/////////////////////////////////////////////////////////////////////////
1:         template = camelContext.createProducerTemplate();
commit:a28ccae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.camel.CamelContext;
0: import org.apache.camel.CamelTemplate;
0: import org.apache.camel.Exchange;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.component.mock.MockEndpoint;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.apache.camel.util.jndi.JndiContext;
1: 
1: /**
0:  * A helper class for test cases which use an embedded broker and use Camel to do the routing
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public abstract class CamelEmbeddedBrokerTestSupport extends EmbeddedBrokerTestSupport {
1:     protected CamelContext camelContext;
0:     protected CamelTemplate<Exchange> template;
1:                            
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:61616";
1:         super.setUp();
1:         camelContext = createCamelContext();
1:         addCamelRoutes(camelContext);
1:         assertValidContext(camelContext);
1:         camelContext.start();
0:         template = new CamelTemplate<Exchange>(camelContext);
1:         template.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1: 
1:         if (template != null) {
1:             template.stop();
1:         }
1:         if (camelContext != null) {
1:             camelContext.stop();
1:         }
1:     }
1: 
1: 
1:     protected CamelContext createCamelContext() throws Exception {
1:         return new DefaultCamelContext(createJndiContext());
1:     }
1: 
1:     protected Context createJndiContext() throws Exception {
1:         return new JndiContext(new Hashtable());
1:     }
1: 
1:     protected void addCamelRoutes(CamelContext camelContext) throws Exception {
1:     }
1: 
1: 
1: 
1:     /**
1:      * Resolves a mandatory endpoint for the given URI or an exception is thrown
1:      *
0:      * @param uri the Camel <a href="">URI</a> to use to create or resolve an endpoint
1:      * @return the endpoint
1:      */
1:     protected Endpoint resolveMandatoryEndpoint(String uri) {
1:         return resolveMandatoryEndpoint(camelContext, uri);
1:     }
1: 
1:     /**
0:      * Resolves a mandatory endpoint for the given URI and expected type or an exception is thrown
1:      *
0:      * @param uri the Camel <a href="">URI</a> to use to create or resolve an endpoint
1:      * @return the endpoint
1:      */
1:     protected <T extends Endpoint> T resolveMandatoryEndpoint(String uri, Class<T> endpointType) {
1:         return resolveMandatoryEndpoint(camelContext, uri, endpointType);
1:     }
1: 
1: 
1:     /**
1:      * Resolves an endpoint and asserts that it is found
1:      */
1:     protected Endpoint resolveMandatoryEndpoint(CamelContext context, String uri) {
1:         Endpoint endpoint = context.getEndpoint(uri);
1: 
1:         assertNotNull("No endpoint found for URI: " + uri, endpoint);
1: 
1:         return endpoint;
1:     }
1: 
1:     /**
1:      * Resolves an endpoint and asserts that it is found
1:      */
0:     protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri,
0:                                                               Class<T> endpointType) {
1:         T endpoint = context.getEndpoint(uri, endpointType);
1: 
1:         assertNotNull("No endpoint found for URI: " + uri, endpoint);
1: 
1:         return endpoint;
1:     }
1: 
1:     /**
0:      * Resolves the mandatory Mock endpoint using a URI of the form <code>mock:someName</code>
1:      *
0:      * @param uri the URI which typically starts with "mock:" and has some name
0:      * @return the mandatory mock endpoint or an exception is thrown if it could not be resolved
1:      */
1:     protected MockEndpoint getMockEndpoint(String uri) {
1:         return resolveMandatoryEndpoint(uri, MockEndpoint.class);
1:     }
1: 
1: 
1:     /**
1:      * Asserts that all the expectations of the Mock endpoints are valid
1:      */
1:     protected void assertMockEndpointsSatisifed() throws InterruptedException {
1:         MockEndpoint.assertIsSatisfied(camelContext);
1:     }
1: 
1:     protected void assertValidContext(CamelContext context) {
1:         assertNotNull("No context found!", context);
1:     }
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
============================================================================