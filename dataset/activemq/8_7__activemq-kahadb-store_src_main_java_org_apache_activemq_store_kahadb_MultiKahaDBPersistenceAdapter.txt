1:1595378: /**
1:1595378:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1595378:  * contributor license agreements.  See the NOTICE file distributed with
1:1595378:  * this work for additional information regarding copyright ownership.
1:1595378:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1595378:  * (the "License"); you may not use this file except in compliance with
1:1595378:  * the License.  You may obtain a copy of the License at
1:1595378:  *
1:1595378:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1595378:  *
1:1595378:  * Unless required by applicable law or agreed to in writing, software
1:1595378:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1595378:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1595378:  * See the License for the specific language governing permissions and
1:1595378:  * limitations under the License.
1:1595378:  */
1:1595378: package org.apache.activemq.store.kahadb;
1:1595378: 
1:74846bb: import java.io.File;
1:74846bb: import java.io.FileFilter;
1:74846bb: import java.io.IOException;
1:74846bb: import java.nio.charset.Charset;
1:2b17fd8: import java.util.Collections;
1:2b17fd8: import java.util.HashMap;
1:2b17fd8: import java.util.HashSet;
1:2b17fd8: import java.util.List;
1:2b17fd8: import java.util.Map;
1:2b17fd8: import java.util.Set;
1:2b17fd8: import java.util.concurrent.CopyOnWriteArrayList;
1:74846bb: 
1:74846bb: import javax.transaction.xa.Xid;
1:74846bb: 
1:74846bb: import org.apache.activemq.broker.BrokerService;
1:74846bb: import org.apache.activemq.broker.BrokerServiceAware;
1:74846bb: import org.apache.activemq.broker.ConnectionContext;
1:74846bb: import org.apache.activemq.broker.Lockable;
1:0f90695: import org.apache.activemq.broker.LockableServiceSupport;
1:0f90695: import org.apache.activemq.broker.Locker;
1:74846bb: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:74846bb: import org.apache.activemq.command.ActiveMQDestination;
1:74846bb: import org.apache.activemq.command.ActiveMQQueue;
1:74846bb: import org.apache.activemq.command.ActiveMQTopic;
1:74846bb: import org.apache.activemq.command.LocalTransactionId;
1:74846bb: import org.apache.activemq.command.ProducerId;
1:74846bb: import org.apache.activemq.command.TransactionId;
1:74846bb: import org.apache.activemq.command.XATransactionId;
1:1595378: import org.apache.activemq.filter.AnyDestination;
1:1595378: import org.apache.activemq.filter.DestinationMap;
1:0f90695: import org.apache.activemq.filter.DestinationMapEntry;
1:74846bb: import org.apache.activemq.store.MessageStore;
1:18571ce: import org.apache.activemq.store.NoLocalSubscriptionAware;
1:74846bb: import org.apache.activemq.store.PersistenceAdapter;
1:0f90695: import org.apache.activemq.store.SharedFileLocker;
1:74846bb: import org.apache.activemq.store.TopicMessageStore;
1:74846bb: import org.apache.activemq.store.TransactionIdTransformer;
1:74846bb: import org.apache.activemq.store.TransactionIdTransformerAware;
1:74846bb: import org.apache.activemq.store.TransactionStore;
1:74846bb: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:0ae90c0: import org.apache.activemq.usage.StoreUsage;
1:1595378: import org.apache.activemq.usage.SystemUsage;
1:21fe8ca: import org.apache.activemq.util.IOExceptionSupport;
1:1595378: import org.apache.activemq.util.IOHelper;
1:221da8b: import org.apache.activemq.util.IntrospectionSupport;
1:0f90695: import org.apache.activemq.util.ServiceStopper;
1:1595378: import org.slf4j.Logger;
1:1595378: import org.slf4j.LoggerFactory;
1:21fe8ca: 
1:0a29533: import static org.apache.activemq.store.kahadb.MessageDatabase.DEFAULT_DIRECTORY;
1:0a29533: 
1:1595378: /**
1:1595378:  * An implementation of {@link org.apache.activemq.store.PersistenceAdapter}  that supports
1:1595378:  * distribution of destinations across multiple kahaDB persistence adapters
1:1595378:  *
1:1595378:  * @org.apache.xbean.XBean element="mKahaDB"
1:1595378:  */
1:18571ce: public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter,
1:18571ce:     BrokerServiceAware, NoLocalSubscriptionAware {
1:18571ce: 
1:1595378:     static final Logger LOG = LoggerFactory.getLogger(MultiKahaDBPersistenceAdapter.class);
1:1595378: 
1:1595378:     final static ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")});
1:1595378:     final int LOCAL_FORMAT_ID_MAGIC = Integer.valueOf(System.getProperty("org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore.localXaFormatId", "61616"));
1:1595378: 
1:0f90695:     final class DelegateDestinationMap extends DestinationMap {
1:74846bb:         @Override
1:0f90695:         public void setEntries(List<DestinationMapEntry>  entries) {
1:0f90695:             super.setEntries(entries);
1:0f90695:         }
1:0f90695:     };
1:0f90695:     final DelegateDestinationMap destinationMap = new DelegateDestinationMap();
1:0f90695: 
1:2b17fd8:     List<PersistenceAdapter> adapters = new CopyOnWriteArrayList<PersistenceAdapter>();
1:1595378:     private File directory = new File(IOHelper.getDefaultDataDirectory() + File.separator + "mKahaDB");
1:1595378: 
1:1595378:     MultiKahaDBTransactionStore transactionStore = new MultiKahaDBTransactionStore(this);
1:1595378: 
1:1595378:     // all local store transactions are XA, 2pc if more than one adapter involved
1:1595378:     TransactionIdTransformer transactionIdTransformer = new TransactionIdTransformer() {
1:74846bb:         @Override
1:21fe8ca:         public TransactionId transform(TransactionId txid) {
1:1595378:             if (txid == null) {
1:1595378:                 return null;
1:1595378:             }
1:1595378:             if (txid.isLocalTransaction()) {
1:21fe8ca:                 final LocalTransactionId t = (LocalTransactionId) txid;
1:21fe8ca:                 return new XATransactionId(new Xid() {
1:21fe8ca:                     @Override
1:21fe8ca:                     public int getFormatId() {
1:21fe8ca:                         return LOCAL_FORMAT_ID_MAGIC;
1:21fe8ca:                     }
1:21fe8ca: 
1:21fe8ca:                     @Override
1:21fe8ca:                     public byte[] getGlobalTransactionId() {
1:21fe8ca:                         return t.getConnectionId().getValue().getBytes(Charset.forName("utf-8"));
1:21fe8ca:                     }
1:21fe8ca: 
1:21fe8ca:                     @Override
1:21fe8ca:                     public byte[] getBranchQualifier() {
1:21fe8ca:                         return Long.toString(t.getValue()).getBytes(Charset.forName("utf-8"));
1:21fe8ca:                     }
1:21fe8ca:                 });
1:1595378:             } else {
1:21fe8ca:                 return txid;
1:1595378:             }
1:1595378:         }
1:1595378:     };
1:1595378: 
1:1595378:     /**
1:1595378:      * Sets the  FilteredKahaDBPersistenceAdapter entries
1:1595378:      *
1:1595378:      * @org.apache.xbean.ElementType class="org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter"
1:1595378:      */
1:02f63c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:1595378:     public void setFilteredPersistenceAdapters(List entries) {
1:1595378:         for (Object entry : entries) {
1:1595378:             FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) entry;
1:21fe8ca:             PersistenceAdapter adapter = filteredAdapter.getPersistenceAdapter();
1:1595378:             if (filteredAdapter.getDestination() == null) {
1:1595378:                 filteredAdapter.setDestination(matchAll);
1:85edfb3:             }
1:221da8b: 
1:221da8b:             if (filteredAdapter.isPerDestination()) {
1:221da8b:                 configureDirectory(adapter, null);
1:221da8b:                 // per destination adapters will be created on demand or during recovery
1:221da8b:                 continue;
1:221da8b:             } else {
1:221da8b:                 configureDirectory(adapter, nameFromDestinationFilter(filteredAdapter.getDestination()));
1:1595378:             }
1:1595378: 
1:221da8b:             configureAdapter(adapter);
1:1595378:             adapters.add(adapter);
1:1595378:         }
1:0f90695:         destinationMap.setEntries(entries);
1:1595378:     }
1:1595378: 
1:0a29533:     public static String nameFromDestinationFilter(ActiveMQDestination destination) {
1:05fb2bb:         if (destination.getQualifiedName().length() > IOHelper.getMaxFileNameLength()) {
1:05fb2bb:             LOG.warn("Destination name is longer than 'MaximumFileNameLength' system property, " +
1:05fb2bb:                      "potential problem with recovery can result from name truncation.");
1:05fb2bb:         }
1:1595378: 
1:1595378:         return IOHelper.toFileSystemSafeName(destination.getQualifiedName());
1:1595378:     }
1:1595378: 
1:1595378:     public boolean isLocalXid(TransactionId xid) {
1:1595378:         return xid instanceof XATransactionId &&
1:1595378:                 ((XATransactionId)xid).getFormatId() == LOCAL_FORMAT_ID_MAGIC;
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     public void beginTransaction(ConnectionContext context) throws IOException {
1:1595378:         throw new IllegalStateException();
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void checkpoint(final boolean sync) throws IOException {
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             persistenceAdapter.checkpoint(sync);
1:1595378:         }
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void commitTransaction(ConnectionContext context) throws IOException {
1:1595378:         throw new IllegalStateException();
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
1:1595378:         PersistenceAdapter persistenceAdapter = getMatchingPersistenceAdapter(destination);
1:1595378:         return transactionStore.proxy(persistenceAdapter.createTransactionStore(), persistenceAdapter.createQueueMessageStore(destination));
1:1595378:     }
1:1595378: 
1:21fe8ca:     private PersistenceAdapter getMatchingPersistenceAdapter(ActiveMQDestination destination) throws IOException {
1:0f90695:         Object result = destinationMap.chooseValue(destination);
1:1595378:         if (result == null) {
1:1595378:             throw new RuntimeException("No matching persistence adapter configured for destination: " + destination + ", options:" + adapters);
1:1595378:         }
1:221da8b:         FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) result;
1:221da8b:         if (filteredAdapter.getDestination() == matchAll && filteredAdapter.isPerDestination()) {
1:ed6c472:             filteredAdapter = addAdapter(filteredAdapter, destination);
1:221da8b:             if (LOG.isTraceEnabled()) {
1:221da8b:                 LOG.info("created per destination adapter for: " + destination  + ", " + result);
1:221da8b:             }
1:221da8b:         }
1:ed6c472:         startAdapter(filteredAdapter.getPersistenceAdapter(), destination.getQualifiedName());
1:ff593bf:         LOG.debug("destination {} matched persistence adapter {}", new Object[]{destination.getQualifiedName(), filteredAdapter.getPersistenceAdapter()});
1:ed6c472:         return filteredAdapter.getPersistenceAdapter();
1:1595378:     }
1:1595378: 
1:21fe8ca:     private void startAdapter(PersistenceAdapter kahaDBPersistenceAdapter, String destination) {
1:221da8b:         try {
1:221da8b:             kahaDBPersistenceAdapter.start();
1:221da8b:         } catch (Exception e) {
1:221da8b:             RuntimeException detail = new RuntimeException("Failed to start per destination persistence adapter for destination: " + destination + ", options:" + adapters, e);
1:221da8b:             LOG.error(detail.toString(), e);
1:221da8b:             throw detail;
1:221da8b:         }
1:221da8b:     }
1:221da8b: 
1:21fe8ca:     private void stopAdapter(PersistenceAdapter kahaDBPersistenceAdapter, String destination) {
1:bed24fa:         try {
1:bed24fa:             kahaDBPersistenceAdapter.stop();
1:bed24fa:         } catch (Exception e) {
1:bed24fa:             RuntimeException detail = new RuntimeException("Failed to stop per destination persistence adapter for destination: " + destination + ", options:" + adapters, e);
1:bed24fa:             LOG.error(detail.toString(), e);
1:bed24fa:             throw detail;
1:bed24fa:         }
1:bed24fa:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:1595378:         PersistenceAdapter persistenceAdapter = getMatchingPersistenceAdapter(destination);
1:1595378:         return transactionStore.proxy(persistenceAdapter.createTransactionStore(), persistenceAdapter.createTopicMessageStore(destination));
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public TransactionStore createTransactionStore() throws IOException {
1:1595378:         return transactionStore;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void deleteAllMessages() throws IOException {
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             persistenceAdapter.deleteAllMessages();
1:1595378:         }
1:1595378:         transactionStore.deleteAllMessages();
1:221da8b:         IOHelper.deleteChildren(getDirectory());
1:0a29533:         for (Object o : destinationMap.get(new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")}))) {
1:0a29533:             if (o instanceof FilteredKahaDBPersistenceAdapter) {
1:0a29533:                 FilteredKahaDBPersistenceAdapter filteredKahaDBPersistenceAdapter = (FilteredKahaDBPersistenceAdapter) o;
1:0a29533:                 if (filteredKahaDBPersistenceAdapter.getPersistenceAdapter().getDirectory() != DEFAULT_DIRECTORY) {
1:0a29533:                     IOHelper.deleteChildren(filteredKahaDBPersistenceAdapter.getPersistenceAdapter().getDirectory());
1:0a29533:                 }
1:0a29533:                 if (filteredKahaDBPersistenceAdapter.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1:0a29533:                     KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) filteredKahaDBPersistenceAdapter.getPersistenceAdapter();
1:0a29533:                     if (kahaDBPersistenceAdapter.getIndexDirectory() != null) {
1:0a29533:                         IOHelper.deleteChildren(kahaDBPersistenceAdapter.getIndexDirectory());
1:0a29533:                     }
1:0a29533:                 }
1:0a29533:             }
1:0a29533:         }
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public Set<ActiveMQDestination> getDestinations() {
1:1595378:         Set<ActiveMQDestination> results = new HashSet<ActiveMQDestination>();
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             results.addAll(persistenceAdapter.getDestinations());
1:1595378:         }
1:1595378:         return results;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public long getLastMessageBrokerSequenceId() throws IOException {
1:1595378:         long maxId = -1;
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             maxId = Math.max(maxId, persistenceAdapter.getLastMessageBrokerSequenceId());
1:1595378:         }
1:1595378:         return maxId;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public long getLastProducerSequenceId(ProducerId id) throws IOException {
1:1595378:         long maxId = -1;
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             maxId = Math.max(maxId, persistenceAdapter.getLastProducerSequenceId(id));
1:1595378:         }
1:1595378:         return maxId;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:b07821a:     public void allowIOResumption() {
1:b07821a:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:b07821a:             persistenceAdapter.allowIOResumption();
1:b07821a:         }
1:b07821a:     }
1:b07821a: 
1:b07821a:     @Override
1:1595378:     public void removeQueueMessageStore(ActiveMQQueue destination) {
1:21fe8ca:         PersistenceAdapter adapter = null;
1:21fe8ca:         try {
1:21fe8ca:             adapter = getMatchingPersistenceAdapter(destination);
1:21fe8ca:         } catch (IOException e) {
1:21fe8ca:             throw new RuntimeException(e);
1:21fe8ca:         }
1:73d1bcd:         if (adapter instanceof PersistenceAdapter && adapter.getDestinations().isEmpty()) {
2:bed24fa:             adapter.removeQueueMessageStore(destination);
1:74846bb:             removeMessageStore(adapter, destination);
1:4c972d9:             destinationMap.remove(destination, adapter);
1:1595378:         }
3:bed24fa:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void removeTopicMessageStore(ActiveMQTopic destination) {
1:21fe8ca:         PersistenceAdapter adapter = null;
1:21fe8ca:         try {
1:21fe8ca:             adapter = getMatchingPersistenceAdapter(destination);
1:21fe8ca:         } catch (IOException e) {
1:21fe8ca:             throw new RuntimeException(e);
1:21fe8ca:         }
1:73d1bcd:         if (adapter instanceof PersistenceAdapter && adapter.getDestinations().isEmpty()) {
1:bed24fa:             adapter.removeTopicMessageStore(destination);
1:74846bb:             removeMessageStore(adapter, destination);
1:4c972d9:             destinationMap.remove(destination, adapter);
1:1595378:         }
1:bed24fa:     }
1:1595378: 
1:21fe8ca:     private void removeMessageStore(PersistenceAdapter adapter, ActiveMQDestination destination) {
1:73d1bcd:         stopAdapter(adapter, destination.toString());
1:73d1bcd:         File adapterDir = adapter.getDirectory();
1:73d1bcd:         if (adapterDir != null) {
1:73d1bcd:             if (IOHelper.deleteFile(adapterDir)) {
1:73d1bcd:                 if (LOG.isTraceEnabled()) {
1:73d1bcd:                     LOG.info("deleted per destination adapter directory for: " + destination);
1:73d1bcd:                 }
1:73d1bcd:             } else {
1:73d1bcd:                 if (LOG.isTraceEnabled()) {
1:73d1bcd:                     LOG.info("failed to deleted per destination adapter directory for: " + destination);
1:bed24fa:                 }
1:bed24fa:             }
1:bed24fa:         }
1:bed24fa:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void rollbackTransaction(ConnectionContext context) throws IOException {
1:1595378:         throw new IllegalStateException();
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void setBrokerName(String brokerName) {
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             persistenceAdapter.setBrokerName(brokerName);
1:1595378:         }
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public void setUsageManager(SystemUsage usageManager) {
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             persistenceAdapter.setUsageManager(usageManager);
1:1595378:         }
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public long size() {
1:1595378:         long size = 0;
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             size += persistenceAdapter.size();
1:1595378:         }
1:1595378:         return size;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:0f90695:     public void doStart() throws Exception {
1:0f90695:         Object result = destinationMap.chooseValue(matchAll);
1:221da8b:         if (result != null) {
1:221da8b:             FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) result;
1:221da8b:             if (filteredAdapter.getDestination() == matchAll && filteredAdapter.isPerDestination()) {
1:221da8b:                 findAndRegisterExistingAdapters(filteredAdapter);
1:221da8b:             }
1:221da8b:         }
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:1595378:             persistenceAdapter.start();
1:1595378:         }
1:1595378:     }
1:1595378: 
1:21fe8ca:     private void findAndRegisterExistingAdapters(FilteredKahaDBPersistenceAdapter template) throws IOException {
1:221da8b:         FileFilter destinationNames = new FileFilter() {
1:221da8b:             @Override
1:221da8b:             public boolean accept(File file) {
1:221da8b:                 return file.getName().startsWith("queue#") || file.getName().startsWith("topic#");
1:221da8b:             }
1:221da8b:         };
1:221da8b:         File[] candidates = template.getPersistenceAdapter().getDirectory().listFiles(destinationNames);
1:221da8b:         if (candidates != null) {
1:221da8b:             for (File candidate : candidates) {
1:221da8b:                 registerExistingAdapter(template, candidate);
1:221da8b:             }
1:221da8b:         }
1:221da8b:     }
1:221da8b: 
1:21fe8ca:     private void registerExistingAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, File candidate) throws IOException {
1:0ae90c0:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter, candidate.getName());
1:221da8b:         startAdapter(adapter, candidate.getName());
1:30f677e:         Set<ActiveMQDestination> destinations = adapter.getDestinations();
1:30f677e:         if (destinations.size() != 0) {
1:0ae90c0:             registerAdapter(filteredAdapter, adapter, destinations.toArray(new ActiveMQDestination[]{})[0]);
1:bed24fa:         } else {
1:bed24fa:             stopAdapter(adapter, candidate.getName());
1:221da8b:         }
1:221da8b:     }
1:221da8b: 
1:21fe8ca:     private FilteredKahaDBPersistenceAdapter addAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, ActiveMQDestination destination) throws IOException {
1:0ae90c0:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter, nameFromDestinationFilter(destination));
1:0ae90c0:         return registerAdapter(filteredAdapter, adapter, destination);
1:1595378:     }
1:221da8b: 
1:0ae90c0:     private PersistenceAdapter adapterFromTemplate(FilteredKahaDBPersistenceAdapter template, String destinationName) throws IOException {
1:0ae90c0:         PersistenceAdapter adapter = kahaDBFromTemplate(template.getPersistenceAdapter());
1:221da8b:         configureAdapter(adapter);
1:221da8b:         configureDirectory(adapter, destinationName);
1:0ae90c0:         configureIndexDirectory(adapter, template.getPersistenceAdapter(), destinationName);
2:221da8b:         return adapter;
1:221da8b:     }
1:221da8b: 
1:0a29533:     private void configureIndexDirectory(PersistenceAdapter adapter, PersistenceAdapter template, String destinationName) {
1:0a29533:         if (template instanceof KahaDBPersistenceAdapter) {
1:0a29533:             KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) template;
1:0a29533:             if (kahaDBPersistenceAdapter.getIndexDirectory() != null) {
1:0a29533:                 if (adapter instanceof KahaDBPersistenceAdapter) {
1:0a29533:                     File directory = kahaDBPersistenceAdapter.getIndexDirectory();
1:0a29533:                     if (destinationName != null) {
1:0a29533:                         directory = new File(directory, destinationName);
1:0a29533:                     }
1:0a29533:                     ((KahaDBPersistenceAdapter)adapter).setIndexDirectory(directory);
1:0a29533:                 }
1:0a29533:             }
1:0a29533:         }
1:0a29533:     }
1:0a29533: 
1:21fe8ca:     private void configureDirectory(PersistenceAdapter adapter, String fileName) {
1:221da8b:         File directory = null;
1:0a29533:         File defaultDir = DEFAULT_DIRECTORY;
1:28163a4:         try {
1:28163a4:             defaultDir = adapter.getClass().newInstance().getDirectory();
1:28163a4:         } catch (Exception e) {
1:28163a4:         }
1:28163a4:         if (defaultDir.equals(adapter.getDirectory())) {
1:221da8b:             // not set so inherit from mkahadb
1:221da8b:             directory = getDirectory();
1:221da8b:         } else {
1:221da8b:             directory = adapter.getDirectory();
1:221da8b:         }
1:28163a4: 
1:221da8b:         if (fileName != null) {
1:221da8b:             directory = new File(directory, fileName);
1:221da8b:         }
1:221da8b:         adapter.setDirectory(directory);
1:221da8b:     }
1:221da8b: 
1:0ae90c0:     private FilteredKahaDBPersistenceAdapter registerAdapter(FilteredKahaDBPersistenceAdapter template, PersistenceAdapter adapter, ActiveMQDestination destination) {
1:221da8b:         adapters.add(adapter);
1:0ae90c0:         FilteredKahaDBPersistenceAdapter result = new FilteredKahaDBPersistenceAdapter(template, destination, adapter);
1:0f90695:         destinationMap.put(destination, result);
1:221da8b:         return result;
1:221da8b:     }
1:221da8b: 
1:21fe8ca:     private void configureAdapter(PersistenceAdapter adapter) {
1:221da8b:         // need a per store factory that will put the store in the branch qualifier to disiambiguate xid mbeans
1:21fe8ca:         ((TransactionIdTransformerAware)adapter).setTransactionIdTransformer(transactionIdTransformer);
1:0f90695:         if (isUseLock()) {
1:21fe8ca:             if( adapter instanceof Lockable ) {
1:21fe8ca:                 ((Lockable)adapter).setUseLock(false);
1:0f90695:             }
1:21fe8ca:         }
1:21fe8ca:         if( adapter instanceof BrokerServiceAware ) {
1:21fe8ca:             ((BrokerServiceAware)adapter).setBrokerService(getBrokerService());
1:21fe8ca:         }
1:221da8b:     }
1:221da8b: 
1:21fe8ca:     private PersistenceAdapter kahaDBFromTemplate(PersistenceAdapter template) throws IOException {
1:21fe8ca:         try {
1:21fe8ca:             Map<String, Object> configuration = new HashMap<String, Object>();
1:21fe8ca:             IntrospectionSupport.getProperties(template, configuration, null);
1:21fe8ca:             PersistenceAdapter adapter = template.getClass().newInstance();
1:21fe8ca:             IntrospectionSupport.setProperties(adapter, configuration);
1:21fe8ca:             return adapter;
1:21fe8ca:         } catch (Exception e) {
1:21fe8ca:             throw IOExceptionSupport.create(e);
1:21fe8ca:         }
1:221da8b:     }
1:221da8b: 
1:05fb2bb:     @Override
1:0f90695:     protected void doStop(ServiceStopper stopper) throws Exception {
1:1595378:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:0f90695:             stopper.stop(persistenceAdapter);
1:1595378:         }
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:1595378:     public File getDirectory() {
1:1595378:         return this.directory;
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:02f63c9:     public void setDirectory(File directory) {
1:1595378:         this.directory = directory;
1:1595378:     }
1:1595378: 
1:05fb2bb:     @Override
1:0f90695:     public void init() throws Exception {
1:0f90695:     }
1:0f90695: 
1:0f90695:     @Override
1:1595378:     public void setBrokerService(BrokerService brokerService) {
1:fd0f71a:         super.setBrokerService(brokerService);
1:21fe8ca:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:21fe8ca:             if( persistenceAdapter instanceof BrokerServiceAware ) {
1:21fe8ca:                 ((BrokerServiceAware)persistenceAdapter).setBrokerService(getBrokerService());
1:21fe8ca:             }
1:1595378:         }
1:1595378:     }
1:1595378: 
1:1595378:     public void setTransactionStore(MultiKahaDBTransactionStore transactionStore) {
1:1595378:         this.transactionStore = transactionStore;
1:1595378:     }
1:1595378: 
1:1595378:     /**
1:1595378:      * Set the max file length of the transaction journal
1:1595378:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:1595378:      * be used
1:1595378:      *
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:1595378:      */
1:1595378:     public void setJournalMaxFileLength(int maxFileLength) {
1:1595378:         transactionStore.setJournalMaxFileLength(maxFileLength);
1:1595378:     }
1:1595378: 
1:1595378:     public int getJournalMaxFileLength() {
1:1595378:         return transactionStore.getJournalMaxFileLength();
1:1595378:     }
1:1595378: 
1:1595378:     /**
1:1595378:      * Set the max write batch size of  the transaction journal
1:1595378:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:1595378:      * be used
1:1595378:      *
1:1595378:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:1595378:      */
1:1595378:     public void setJournalWriteBatchSize(int journalWriteBatchSize) {
1:1595378:         transactionStore.setJournalMaxWriteBatchSize(journalWriteBatchSize);
1:1595378:     }
1:1595378: 
1:221da8b:     public int getJournalWriteBatchSize() {
1:1595378:         return transactionStore.getJournalMaxWriteBatchSize();
1:1595378:     }
1:1595378: 
1:802e527:     public List<PersistenceAdapter> getAdapters() {
1:802e527:         return Collections.unmodifiableList(adapters);
1:802e527:     }
1:802e527: 
1:1595378:     @Override
1:1595378:     public String toString() {
1:1595378:         String path = getDirectory() != null ? getDirectory().getAbsolutePath() : "DIRECTORY_NOT_SET";
1:1595378:         return "MultiKahaDBPersistenceAdapter[" + path + "]" + adapters;
1:1595378:     }
1:0f90695: 
1:0f90695:     @Override
1:0f90695:     public Locker createDefaultLocker() throws IOException {
1:0f90695:         SharedFileLocker locker = new SharedFileLocker();
1:0f90695:         locker.configure(this);
1:0f90695:         return locker;
1:0f90695:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:74846bb:         return new JobSchedulerStoreImpl();
1:74846bb:     }
1:18571ce: 
1:18571ce:     /* (non-Javadoc)
1:18571ce:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:18571ce:      */
1:18571ce:     @Override
1:18571ce:     public boolean isPersistNoLocal() {
1:18571ce:         // Prior to v11 the broker did not store the noLocal value for durable subs.
1:18571ce:         return brokerService.getStoreOpenWireVersion() >= 11;
1:18571ce:     }
1:1595378: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4c972d9
/////////////////////////////////////////////////////////////////////////
1:             destinationMap.remove(destination, adapter);
/////////////////////////////////////////////////////////////////////////
1:             destinationMap.remove(destination, adapter);
commit:b07821a
/////////////////////////////////////////////////////////////////////////
1:     public void allowIOResumption() {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.allowIOResumption();
1:         }
1:     }
1: 
1:     @Override
commit:0ae90c0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.StoreUsage;
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter, candidate.getName());
1:             registerAdapter(filteredAdapter, adapter, destinations.toArray(new ActiveMQDestination[]{})[0]);
1:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter, nameFromDestinationFilter(destination));
1:         return registerAdapter(filteredAdapter, adapter, destination);
1:     private PersistenceAdapter adapterFromTemplate(FilteredKahaDBPersistenceAdapter template, String destinationName) throws IOException {
1:         PersistenceAdapter adapter = kahaDBFromTemplate(template.getPersistenceAdapter());
1:         configureIndexDirectory(adapter, template.getPersistenceAdapter(), destinationName);
/////////////////////////////////////////////////////////////////////////
1:     private FilteredKahaDBPersistenceAdapter registerAdapter(FilteredKahaDBPersistenceAdapter template, PersistenceAdapter adapter, ActiveMQDestination destination) {
1:         FilteredKahaDBPersistenceAdapter result = new FilteredKahaDBPersistenceAdapter(template, destination, adapter);
commit:0a29533
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.store.kahadb.MessageDatabase.DEFAULT_DIRECTORY;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public static String nameFromDestinationFilter(ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
1:         for (Object o : destinationMap.get(new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")}))) {
1:             if (o instanceof FilteredKahaDBPersistenceAdapter) {
1:                 FilteredKahaDBPersistenceAdapter filteredKahaDBPersistenceAdapter = (FilteredKahaDBPersistenceAdapter) o;
1:                 if (filteredKahaDBPersistenceAdapter.getPersistenceAdapter().getDirectory() != DEFAULT_DIRECTORY) {
1:                     IOHelper.deleteChildren(filteredKahaDBPersistenceAdapter.getPersistenceAdapter().getDirectory());
1:                 }
1:                 if (filteredKahaDBPersistenceAdapter.getPersistenceAdapter() instanceof KahaDBPersistenceAdapter) {
1:                     KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) filteredKahaDBPersistenceAdapter.getPersistenceAdapter();
1:                     if (kahaDBPersistenceAdapter.getIndexDirectory() != null) {
1:                         IOHelper.deleteChildren(kahaDBPersistenceAdapter.getIndexDirectory());
1:                     }
1:                 }
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:         configureIndexDirectory(adapter, template, destinationName);
1:     private void configureIndexDirectory(PersistenceAdapter adapter, PersistenceAdapter template, String destinationName) {
1:         if (template instanceof KahaDBPersistenceAdapter) {
1:             KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) template;
1:             if (kahaDBPersistenceAdapter.getIndexDirectory() != null) {
1:                 if (adapter instanceof KahaDBPersistenceAdapter) {
1:                     File directory = kahaDBPersistenceAdapter.getIndexDirectory();
1:                     if (destinationName != null) {
1:                         directory = new File(directory, destinationName);
1:                     }
1:                     ((KahaDBPersistenceAdapter)adapter).setIndexDirectory(directory);
1:                 }
1:             }
1:         }
1:     }
1: 
1:         File defaultDir = DEFAULT_DIRECTORY;
commit:fd0f71a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         super.setBrokerService(brokerService);
/////////////////////////////////////////////////////////////////////////
commit:ff593bf
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("destination {} matched persistence adapter {}", new Object[]{destination.getQualifiedName(), filteredAdapter.getPersistenceAdapter()});
commit:0f90695
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.LockableServiceSupport;
1: import org.apache.activemq.broker.Locker;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.store.SharedFileLocker;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
0: public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter {
1:     final class DelegateDestinationMap extends DestinationMap {
1:         public void setEntries(List<DestinationMapEntry>  entries) {
1:             super.setEntries(entries);
1:         }
1:     };
1:     final DelegateDestinationMap destinationMap = new DelegateDestinationMap();
1: 
/////////////////////////////////////////////////////////////////////////
1:         destinationMap.setEntries(entries);
/////////////////////////////////////////////////////////////////////////
1:         Object result = destinationMap.chooseValue(destination);
/////////////////////////////////////////////////////////////////////////
0:             destinationMap.removeAll(destination);
/////////////////////////////////////////////////////////////////////////
0:             destinationMap.removeAll(destination);
/////////////////////////////////////////////////////////////////////////
1:     public void doStart() throws Exception {
1:         Object result = destinationMap.chooseValue(matchAll);
/////////////////////////////////////////////////////////////////////////
1:         destinationMap.put(destination, result);
1:         if (isUseLock()) {
0:             adapter.setUseLock(false);
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:             stopper.stop(persistenceAdapter);
/////////////////////////////////////////////////////////////////////////
1:     public void init() throws Exception {
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public Locker createDefaultLocker() throws IOException {
1:         SharedFileLocker locker = new SharedFileLocker();
1:         locker.configure(this);
1:         return locker;
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:18571ce
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.NoLocalSubscriptionAware;
/////////////////////////////////////////////////////////////////////////
1: public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter,
1:     BrokerServiceAware, NoLocalSubscriptionAware {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.NoLocalSubscriptionAware#isPersistNoLocal()
1:      */
1:     @Override
1:     public boolean isPersistNoLocal() {
1:         // Prior to v11 the broker did not store the noLocal value for durable subs.
1:         return brokerService.getStoreOpenWireVersion() >= 11;
1:     }
commit:73d1bcd
/////////////////////////////////////////////////////////////////////////
1:         if (adapter instanceof PersistenceAdapter && adapter.getDestinations().isEmpty()) {
/////////////////////////////////////////////////////////////////////////
1:         if (adapter instanceof PersistenceAdapter && adapter.getDestinations().isEmpty()) {
/////////////////////////////////////////////////////////////////////////
1:         stopAdapter(adapter, destination.toString());
1:         File adapterDir = adapter.getDirectory();
1:         if (adapterDir != null) {
1:             if (IOHelper.deleteFile(adapterDir)) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.info("deleted per destination adapter directory for: " + destination);
1:                 }
1:             } else {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.info("failed to deleted per destination adapter directory for: " + destination);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2b17fd8
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
1:     List<PersistenceAdapter> adapters = new CopyOnWriteArrayList<PersistenceAdapter>();
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.IOException;
1: import java.nio.charset.Charset;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.LinkedList;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
1: 
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.Lockable;
0: import org.apache.activemq.broker.LockableServiceSupport;
0: import org.apache.activemq.broker.Locker;
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.SharedFileLocker;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.store.TransactionIdTransformer;
1: import org.apache.activemq.store.TransactionIdTransformerAware;
1: import org.apache.activemq.store.TransactionStore;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:             removeMessageStore(adapter, destination);
/////////////////////////////////////////////////////////////////////////
1:             removeMessageStore(adapter, destination);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException {
1:         return new JobSchedulerStoreImpl();
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:802e527
/////////////////////////////////////////////////////////////////////////
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:     public List<PersistenceAdapter> getAdapters() {
1:         return Collections.unmodifiableList(adapters);
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:28163a4
/////////////////////////////////////////////////////////////////////////
0:         File defaultDir = MessageDatabase.DEFAULT_DIRECTORY;
1:         try {
1:             defaultDir = adapter.getClass().newInstance().getDirectory();
1:         } catch (Exception e) {
1:         }
1:         if (defaultDir.equals(adapter.getDirectory())) {
1: 
commit:70c698f
/////////////////////////////////////////////////////////////////////////
0: public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {
/////////////////////////////////////////////////////////////////////////
0:         this.brokerService = brokerService;
commit:21fe8ca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.*;
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.store.*;
1: import org.apache.activemq.util.IOExceptionSupport;
0: import javax.transaction.xa.Xid;
0: import java.io.File;
0: import java.io.FileFilter;
0: import java.io.IOException;
0: import java.nio.charset.Charset;
0: import java.util.*;
1: 
/////////////////////////////////////////////////////////////////////////
0:     List<PersistenceAdapter> adapters = new LinkedList<PersistenceAdapter>();
/////////////////////////////////////////////////////////////////////////
1:         public TransactionId transform(TransactionId txid) {
1:                 final LocalTransactionId t = (LocalTransactionId) txid;
1:                 return new XATransactionId(new Xid() {
1:                     @Override
1:                     public int getFormatId() {
1:                         return LOCAL_FORMAT_ID_MAGIC;
1:                     }
1: 
1:                     @Override
1:                     public byte[] getGlobalTransactionId() {
1:                         return t.getConnectionId().getValue().getBytes(Charset.forName("utf-8"));
1:                     }
1: 
1:                     @Override
1:                     public byte[] getBranchQualifier() {
1:                         return Long.toString(t.getValue()).getBytes(Charset.forName("utf-8"));
1:                     }
1:                 });
1:                 return txid;
/////////////////////////////////////////////////////////////////////////
1:             PersistenceAdapter adapter = filteredAdapter.getPersistenceAdapter();
/////////////////////////////////////////////////////////////////////////
1:     private PersistenceAdapter getMatchingPersistenceAdapter(ActiveMQDestination destination) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     private void startAdapter(PersistenceAdapter kahaDBPersistenceAdapter, String destination) {
/////////////////////////////////////////////////////////////////////////
1:     private void stopAdapter(PersistenceAdapter kahaDBPersistenceAdapter, String destination) {
/////////////////////////////////////////////////////////////////////////
1:         PersistenceAdapter adapter = null;
1:         try {
1:             adapter = getMatchingPersistenceAdapter(destination);
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
0:         if (adapter instanceof PersistenceAdapter) {
0:             removeMessageStore((PersistenceAdapter)adapter, destination);
1:         PersistenceAdapter adapter = null;
1:         try {
1:             adapter = getMatchingPersistenceAdapter(destination);
1:         } catch (IOException e) {
1:             throw new RuntimeException(e);
1:         }
0:         if (adapter instanceof PersistenceAdapter) {
0:             removeMessageStore((PersistenceAdapter)adapter, destination);
1:     private void removeMessageStore(PersistenceAdapter adapter, ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
1:     private void findAndRegisterExistingAdapters(FilteredKahaDBPersistenceAdapter template) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     private void registerExistingAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, File candidate) throws IOException {
0:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter.getPersistenceAdapter(), candidate.getName());
/////////////////////////////////////////////////////////////////////////
1:     private FilteredKahaDBPersistenceAdapter addAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, ActiveMQDestination destination) throws IOException {
0:         PersistenceAdapter adapter = adapterFromTemplate(filteredAdapter.getPersistenceAdapter(), nameFromDestinationFilter(destination));
0:     private PersistenceAdapter adapterFromTemplate(PersistenceAdapter template, String destinationName) throws IOException {
0:         PersistenceAdapter adapter = kahaDBFromTemplate(template);
1:     private void configureDirectory(PersistenceAdapter adapter, String fileName) {
/////////////////////////////////////////////////////////////////////////
0:     private FilteredKahaDBPersistenceAdapter registerAdapter(PersistenceAdapter adapter, ActiveMQDestination destination) {
1:     private void configureAdapter(PersistenceAdapter adapter) {
1:         ((TransactionIdTransformerAware)adapter).setTransactionIdTransformer(transactionIdTransformer);
1:             if( adapter instanceof Lockable ) {
1:                 ((Lockable)adapter).setUseLock(false);
1:             }
1:         if( adapter instanceof BrokerServiceAware ) {
1:             ((BrokerServiceAware)adapter).setBrokerService(getBrokerService());
1:         }
1:     private PersistenceAdapter kahaDBFromTemplate(PersistenceAdapter template) throws IOException {
1:         try {
1:             Map<String, Object> configuration = new HashMap<String, Object>();
1:             IntrospectionSupport.getProperties(template, configuration, null);
1:             PersistenceAdapter adapter = template.getClass().newInstance();
1:             IntrospectionSupport.setProperties(adapter, configuration);
1:             return adapter;
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             if( persistenceAdapter instanceof BrokerServiceAware ) {
1:                 ((BrokerServiceAware)persistenceAdapter).setBrokerService(getBrokerService());
1:             }
author:Gary Tully
-------------------------------------------------------------------------------
commit:ed6c472
/////////////////////////////////////////////////////////////////////////
1:             filteredAdapter = addAdapter(filteredAdapter, destination);
1:         startAdapter(filteredAdapter.getPersistenceAdapter(), destination.getQualifiedName());
1:         return filteredAdapter.getPersistenceAdapter();
commit:221da8b
/////////////////////////////////////////////////////////////////////////
0: import java.io.FileFilter;
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (filteredAdapter.isPerDestination()) {
1:                 configureDirectory(adapter, null);
1:                 // per destination adapters will be created on demand or during recovery
1:                 continue;
1:             } else {
1:                 configureDirectory(adapter, nameFromDestinationFilter(filteredAdapter.getDestination()));
1:             configureAdapter(adapter);
/////////////////////////////////////////////////////////////////////////
1:         FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) result;
1:         if (filteredAdapter.getDestination() == matchAll && filteredAdapter.isPerDestination()) {
0:             result = addAdapter(filteredAdapter, destination);
0:             startAdapter(((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter(), destination.getQualifiedName());
1:             if (LOG.isTraceEnabled()) {
1:                 LOG.info("created per destination adapter for: " + destination  + ", " + result);
1:             }
1:         }
0:     private void startAdapter(KahaDBPersistenceAdapter kahaDBPersistenceAdapter, String destination) {
1:         try {
1:             kahaDBPersistenceAdapter.start();
1:         } catch (Exception e) {
1:             RuntimeException detail = new RuntimeException("Failed to start per destination persistence adapter for destination: " + destination + ", options:" + adapters, e);
1:             LOG.error(detail.toString(), e);
1:             throw detail;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.deleteChildren(getDirectory());
/////////////////////////////////////////////////////////////////////////
0:         Object result = this.chooseValue(matchAll);
1:         if (result != null) {
1:             FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) result;
1:             if (filteredAdapter.getDestination() == matchAll && filteredAdapter.isPerDestination()) {
1:                 findAndRegisterExistingAdapters(filteredAdapter);
1:             }
1:         }
0:     private void findAndRegisterExistingAdapters(FilteredKahaDBPersistenceAdapter template) {
1:         FileFilter destinationNames = new FileFilter() {
1:             @Override
1:             public boolean accept(File file) {
1:                 return file.getName().startsWith("queue#") || file.getName().startsWith("topic#");
1:             }
1:         };
1:         File[] candidates = template.getPersistenceAdapter().getDirectory().listFiles(destinationNames);
1:         if (candidates != null) {
1:             for (File candidate : candidates) {
1:                 registerExistingAdapter(template, candidate);
1:             }
1:         }
1:     }
1: 
0:     private void registerExistingAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, File candidate) {
0:         KahaDBPersistenceAdapter adapter = adapterFromTemplate(filteredAdapter.getPersistenceAdapter(), candidate.getName());
1:         startAdapter(adapter, candidate.getName());
0:         registerAdapter(adapter, adapter.getDestinations().toArray(new ActiveMQDestination[]{})[0]);
1:     }
1: 
0:     private FilteredKahaDBPersistenceAdapter addAdapter(FilteredKahaDBPersistenceAdapter filteredAdapter, ActiveMQDestination destination) {
0:         KahaDBPersistenceAdapter adapter = adapterFromTemplate(filteredAdapter.getPersistenceAdapter(), nameFromDestinationFilter(destination));
0:         return registerAdapter(adapter, destination);
1:     }
1: 
0:     private KahaDBPersistenceAdapter adapterFromTemplate(KahaDBPersistenceAdapter template, String destinationName) {
0:         KahaDBPersistenceAdapter adapter = kahaDBFromTemplate(template);
1:         configureAdapter(adapter);
1:         configureDirectory(adapter, destinationName);
1:         return adapter;
1:     }
1: 
0:     private void configureDirectory(KahaDBPersistenceAdapter adapter, String fileName) {
1:         File directory = null;
0:         if (MessageDatabase.DEFAULT_DIRECTORY.equals(adapter.getDirectory())) {
1:             // not set so inherit from mkahadb
1:             directory = getDirectory();
1:         } else {
1:             directory = adapter.getDirectory();
1:         }
1:         if (fileName != null) {
1:             directory = new File(directory, fileName);
1:         }
1:         adapter.setDirectory(directory);
1:     }
1: 
0:     private FilteredKahaDBPersistenceAdapter registerAdapter(KahaDBPersistenceAdapter adapter, ActiveMQDestination destination) {
1:         adapters.add(adapter);
0:         FilteredKahaDBPersistenceAdapter result = new FilteredKahaDBPersistenceAdapter(destination, adapter);
0:         put(destination, result);
1:         return result;
1:     }
1: 
0:     private void configureAdapter(KahaDBPersistenceAdapter adapter) {
1:         // need a per store factory that will put the store in the branch qualifier to disiambiguate xid mbeans
0:         adapter.getStore().setTransactionIdTransformer(transactionIdTransformer);
0:         adapter.setBrokerService(getBrokerService());
1:     }
1: 
0:     private KahaDBPersistenceAdapter kahaDBFromTemplate(KahaDBPersistenceAdapter template) {
0:         Map<String, Object> configuration = new HashMap<String, Object>();
0:         IntrospectionSupport.getProperties(template, configuration, null);
0:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
0:         IntrospectionSupport.setProperties(adapter, configuration);
1:         return adapter;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public int getJournalWriteBatchSize() {
commit:85edfb3
/////////////////////////////////////////////////////////////////////////
0:             if (MessageDatabase.DEFAULT_DIRECTORY.equals(adapter.getDirectory())) {
0:                 adapter.setDirectory(new File(getDirectory(), nameFromDestinationFilter(filteredAdapter.getDestination())));
1:             }
commit:1595378
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.nio.charset.Charset;
0: import java.util.HashSet;
0: import java.util.LinkedList;
0: import java.util.List;
0: import java.util.Set;
0: import javax.xml.bind.annotation.XmlAnyAttribute;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
0: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.LocalTransactionId;
0: import org.apache.activemq.command.ProducerId;
0: import org.apache.activemq.command.TransactionId;
0: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.filter.AnyDestination;
1: import org.apache.activemq.filter.DestinationMap;
0: import org.apache.activemq.protobuf.Buffer;
0: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.PersistenceAdapter;
0: import org.apache.activemq.store.TopicMessageStore;
0: import org.apache.activemq.store.TransactionStore;
0: import org.apache.activemq.store.kahadb.data.KahaTransactionInfo;
0: import org.apache.activemq.store.kahadb.data.KahaXATransactionId;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * An implementation of {@link org.apache.activemq.store.PersistenceAdapter}  that supports
1:  * distribution of destinations across multiple kahaDB persistence adapters
1:  *
1:  * @org.apache.xbean.XBean element="mKahaDB"
1:  */
0: public class MultiKahaDBPersistenceAdapter extends DestinationMap implements PersistenceAdapter, BrokerServiceAware {
1:     static final Logger LOG = LoggerFactory.getLogger(MultiKahaDBPersistenceAdapter.class);
1: 
1:     final static ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(">"), new ActiveMQTopic(">")});
1:     final int LOCAL_FORMAT_ID_MAGIC = Integer.valueOf(System.getProperty("org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore.localXaFormatId", "61616"));
1: 
0:     BrokerService brokerService;
0:     List<KahaDBPersistenceAdapter> adapters = new LinkedList<KahaDBPersistenceAdapter>();
1:     private File directory = new File(IOHelper.getDefaultDataDirectory() + File.separator + "mKahaDB");
1: 
1:     MultiKahaDBTransactionStore transactionStore = new MultiKahaDBTransactionStore(this);
1: 
1:     // all local store transactions are XA, 2pc if more than one adapter involved
1:     TransactionIdTransformer transactionIdTransformer = new TransactionIdTransformer() {
1:         @Override
0:         public KahaTransactionInfo transform(TransactionId txid) {
1:             if (txid == null) {
1:                 return null;
1:             }
0:             KahaTransactionInfo rc = new KahaTransactionInfo();
0:             KahaXATransactionId kahaTxId = new KahaXATransactionId();
1:             if (txid.isLocalTransaction()) {
0:                 LocalTransactionId t = (LocalTransactionId) txid;
0:                 kahaTxId.setBranchQualifier(new Buffer(Long.toString(t.getValue()).getBytes(Charset.forName("utf-8"))));
0:                 kahaTxId.setGlobalTransactionId(new Buffer(t.getConnectionId().getValue().getBytes(Charset.forName("utf-8"))));
0:                 kahaTxId.setFormatId(LOCAL_FORMAT_ID_MAGIC);
1:             } else {
0:                 XATransactionId t = (XATransactionId) txid;
0:                 kahaTxId.setBranchQualifier(new Buffer(t.getBranchQualifier()));
0:                 kahaTxId.setGlobalTransactionId(new Buffer(t.getGlobalTransactionId()));
0:                 kahaTxId.setFormatId(t.getFormatId());
1:             }
0:             rc.setXaTransacitonId(kahaTxId);
0:             return rc;
1:         }
1:     };
1: 
1:     /**
1:      * Sets the  FilteredKahaDBPersistenceAdapter entries
1:      *
1:      * @org.apache.xbean.ElementType class="org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter"
1:      */
1:     public void setFilteredPersistenceAdapters(List entries) {
1:         for (Object entry : entries) {
1:             FilteredKahaDBPersistenceAdapter filteredAdapter = (FilteredKahaDBPersistenceAdapter) entry;
0:             KahaDBPersistenceAdapter adapter = filteredAdapter.getPersistenceAdapter();
1:             if (filteredAdapter.getDestination() == null) {
1:                 filteredAdapter.setDestination(matchAll);
1:             }
0:             adapter.setDirectory(new File(getDirectory(), nameFromDestinationFilter(filteredAdapter.getDestination())));
1: 
0:             // need a per store factory that will put the store in the branch qualifier to disiambiguate xid mbeans
0:             adapter.getStore().setTransactionIdTransformer(transactionIdTransformer);
1:             adapters.add(adapter);
1:         }
0:         super.setEntries(entries);
1:     }
1: 
0:     private String nameFromDestinationFilter(ActiveMQDestination destination) {
1:         return IOHelper.toFileSystemSafeName(destination.getQualifiedName());
1:     }
1: 
1:     public boolean isLocalXid(TransactionId xid) {
1:         return xid instanceof XATransactionId &&
1:                 ((XATransactionId)xid).getFormatId() == LOCAL_FORMAT_ID_MAGIC;
1:     }
1: 
1:     public void beginTransaction(ConnectionContext context) throws IOException {
1:         throw new IllegalStateException();
1:     }
1: 
1:     public void checkpoint(final boolean sync) throws IOException {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.checkpoint(sync);
1:         }
1:     }
1: 
1:     public void commitTransaction(ConnectionContext context) throws IOException {
1:         throw new IllegalStateException();
1:     }
1: 
1:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException {
1:         PersistenceAdapter persistenceAdapter = getMatchingPersistenceAdapter(destination);
1:         return transactionStore.proxy(persistenceAdapter.createTransactionStore(), persistenceAdapter.createQueueMessageStore(destination));
1:     }
1: 
0:     private PersistenceAdapter getMatchingPersistenceAdapter(ActiveMQDestination destination) {
0:         Object result = this.chooseValue(destination);
1:         if (result == null) {
1:             throw new RuntimeException("No matching persistence adapter configured for destination: " + destination + ", options:" + adapters);
1:         }
0:         return ((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter();
1:     }
1: 
1:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException {
1:         PersistenceAdapter persistenceAdapter = getMatchingPersistenceAdapter(destination);
1:         return transactionStore.proxy(persistenceAdapter.createTransactionStore(), persistenceAdapter.createTopicMessageStore(destination));
1:     }
1: 
1:     public TransactionStore createTransactionStore() throws IOException {
1:         return transactionStore;
1:     }
1: 
1:     public void deleteAllMessages() throws IOException {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.deleteAllMessages();
1:         }
1:         transactionStore.deleteAllMessages();
1:     }
1: 
1:     public Set<ActiveMQDestination> getDestinations() {
1:         Set<ActiveMQDestination> results = new HashSet<ActiveMQDestination>();
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             results.addAll(persistenceAdapter.getDestinations());
1:         }
1:         return results;
1:     }
1: 
1:     public long getLastMessageBrokerSequenceId() throws IOException {
1:         long maxId = -1;
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             maxId = Math.max(maxId, persistenceAdapter.getLastMessageBrokerSequenceId());
1:         }
1:         return maxId;
1:     }
1: 
1:     public long getLastProducerSequenceId(ProducerId id) throws IOException {
1:         long maxId = -1;
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             maxId = Math.max(maxId, persistenceAdapter.getLastProducerSequenceId(id));
1:         }
1:         return maxId;
1:     }
1: 
1:     public void removeQueueMessageStore(ActiveMQQueue destination) {
0:         getMatchingPersistenceAdapter(destination).removeQueueMessageStore(destination);
1:     }
1: 
1:     public void removeTopicMessageStore(ActiveMQTopic destination) {
0:         getMatchingPersistenceAdapter(destination).removeTopicMessageStore(destination);
1:     }
1: 
1:     public void rollbackTransaction(ConnectionContext context) throws IOException {
1:         throw new IllegalStateException();
1:     }
1: 
1:     public void setBrokerName(String brokerName) {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.setBrokerName(brokerName);
1:         }
1:     }
1: 
1:     public void setUsageManager(SystemUsage usageManager) {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.setUsageManager(usageManager);
1:         }
1:     }
1: 
1:     public long size() {
1:         long size = 0;
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             size += persistenceAdapter.size();
1:         }
1:         return size;
1:     }
1: 
0:     public void start() throws Exception {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
1:             persistenceAdapter.start();
1:         }
1:     }
1: 
0:     public void stop() throws Exception {
1:         for (PersistenceAdapter persistenceAdapter : adapters) {
0:             persistenceAdapter.stop();
1:         }
1:     }
1: 
1:     public File getDirectory() {
1:         return this.directory;
1:     }
1: 
1:     @Override
0:     public void setDirectory(File dir) {
1:         this.directory = directory;
1:     }
1: 
1:     public void setBrokerService(BrokerService brokerService) {
0:         for (KahaDBPersistenceAdapter persistenceAdapter : adapters) {
0:             persistenceAdapter.setBrokerService(brokerService);
1:         }
0:         this.brokerService = brokerService;
1:     }
1: 
0:     public BrokerService getBrokerService() {
0:         return brokerService;
1:     }
1: 
1:     public void setTransactionStore(MultiKahaDBTransactionStore transactionStore) {
1:         this.transactionStore = transactionStore;
1:     }
1: 
1:     /**
1:      * Set the max file length of the transaction journal
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:      * be used
1:      *
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:      */
1:     public void setJournalMaxFileLength(int maxFileLength) {
1:         transactionStore.setJournalMaxFileLength(maxFileLength);
1:     }
1: 
1:     public int getJournalMaxFileLength() {
1:         return transactionStore.getJournalMaxFileLength();
1:     }
1: 
1:     /**
1:      * Set the max write batch size of  the transaction journal
1:      * When set using Xbean, values of the form "20 Mb", "1024kb", and "1g" can
1:      * be used
1:      *
1:      * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryIntPropertyEditor"
1:      */
1:     public void setJournalWriteBatchSize(int journalWriteBatchSize) {
1:         transactionStore.setJournalMaxWriteBatchSize(journalWriteBatchSize);
1:     }
1: 
0:     public int getJournalMaxWriteBatchSize() {
1:         return transactionStore.getJournalMaxWriteBatchSize();
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         String path = getDirectory() != null ? getDirectory().getAbsolutePath() : "DIRECTORY_NOT_SET";
1:         return "MultiKahaDBPersistenceAdapter[" + path + "]" + adapters;
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a1a973c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             removeAll(destination);
/////////////////////////////////////////////////////////////////////////
0:             removeAll(destination);
/////////////////////////////////////////////////////////////////////////
commit:05fb2bb
/////////////////////////////////////////////////////////////////////////
0: 
1:         if (destination.getQualifiedName().length() > IOHelper.getMaxFileNameLength()) {
1:             LOG.warn("Destination name is longer than 'MaximumFileNameLength' system property, " +
1:                      "potential problem with recovery can result from name truncation.");
1:         }
0: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
commit:6b203be
/////////////////////////////////////////////////////////////////////////
0:             rc.setXaTransactionId(kahaTxId);
commit:30f677e
/////////////////////////////////////////////////////////////////////////
1:         Set<ActiveMQDestination> destinations = adapter.getDestinations();
1:         if (destinations.size() != 0) {
0:             registerAdapter(adapter, destinations.toArray(new ActiveMQDestination[]{})[0]);
commit:bed24fa
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     private void stopAdapter(KahaDBPersistenceAdapter kahaDBPersistenceAdapter, String destination) {
1:         try {
1:             kahaDBPersistenceAdapter.stop();
1:         } catch (Exception e) {
1:             RuntimeException detail = new RuntimeException("Failed to stop per destination persistence adapter for destination: " + destination + ", options:" + adapters, e);
1:             LOG.error(detail.toString(), e);
1:             throw detail;
1:         }
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         PersistenceAdapter adapter = getMatchingPersistenceAdapter(destination);
1:         adapter.removeQueueMessageStore(destination);
0:         if (adapter instanceof KahaDBPersistenceAdapter) {
1:             adapter.removeQueueMessageStore(destination);
0:             removeMessageStore((KahaDBPersistenceAdapter)adapter, destination);
1:         }
0:         PersistenceAdapter adapter = getMatchingPersistenceAdapter(destination);
0:         if (adapter instanceof KahaDBPersistenceAdapter) {
1:             adapter.removeTopicMessageStore(destination);
0:             removeMessageStore((KahaDBPersistenceAdapter)adapter, destination);
1:         }
1:     }
0: 
0:     private void removeMessageStore(KahaDBPersistenceAdapter adapter, ActiveMQDestination destination) {
0:         if (adapter.getDestinations().isEmpty()) {
0:             stopAdapter(adapter, destination.toString());
0:             File adapterDir = adapter.getDirectory();
0:             if (adapterDir != null) {
0:                 if (IOHelper.deleteFile(adapterDir)) {
0:                     if (LOG.isTraceEnabled()) {
0:                         LOG.info("deleted per destination adapter directory for: " + destination);
1:                     }
1:                 } else {
0:                     if (LOG.isTraceEnabled()) {
0:                         LOG.info("failed to deleted per destination adapter directory for: " + destination);
1:                     }
1:                 }
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (adapter.getDestinations().size() != 0) {
0:             registerAdapter(adapter, adapter.getDestinations().toArray(new ActiveMQDestination[]{})[0]);
0:         } else {
1:             stopAdapter(adapter, candidate.getName());
0:         }
commit:02f63c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:     public void setDirectory(File directory) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
============================================================================