1:da076f4: /**
1:da076f4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:da076f4:  * contributor license agreements.  See the NOTICE file distributed with
1:da076f4:  * this work for additional information regarding copyright ownership.
1:da076f4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:da076f4:  * (the "License"); you may not use this file except in compliance with
1:da076f4:  * the License.  You may obtain a copy of the License at
1:da076f4:  * <p/>
1:da076f4:  * http://www.apache.org/licenses/LICENSE-2.0
1:da076f4:  * <p/>
1:da076f4:  * Unless required by applicable law or agreed to in writing, software
1:da076f4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da076f4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da076f4:  * See the License for the specific language governing permissions and
1:da076f4:  * limitations under the License.
1:da076f4:  */
1:da076f4: package org.apache.activemq.usecases;
1:da076f4: 
1:da076f4: import java.io.ObjectInputStream;
1:da076f4: import java.util.HashMap;
1:da076f4: import java.util.Set;
1:da076f4: import java.util.concurrent.CountDownLatch;
1:da076f4: import java.util.concurrent.ExecutorService;
1:da076f4: import java.util.concurrent.Executors;
1:da076f4: import java.util.concurrent.TimeUnit;
1:35df815: import java.util.concurrent.atomic.AtomicBoolean;
1:35df815: import java.util.concurrent.atomic.AtomicReference;
1:da076f4: import javax.management.Attribute;
1:da076f4: import javax.management.AttributeList;
1:da076f4: import javax.management.AttributeNotFoundException;
1:da076f4: import javax.management.InstanceAlreadyExistsException;
1:da076f4: import javax.management.InstanceNotFoundException;
1:da076f4: import javax.management.IntrospectionException;
1:da076f4: import javax.management.InvalidAttributeValueException;
1:da076f4: import javax.management.ListenerNotFoundException;
1:da076f4: import javax.management.MBeanException;
1:da076f4: import javax.management.MBeanInfo;
1:da076f4: import javax.management.MBeanRegistrationException;
1:da076f4: import javax.management.MBeanServer;
1:da076f4: import javax.management.NotCompliantMBeanException;
1:da076f4: import javax.management.NotificationFilter;
1:da076f4: import javax.management.NotificationListener;
1:da076f4: import javax.management.ObjectInstance;
1:da076f4: import javax.management.ObjectName;
1:da076f4: import javax.management.OperationsException;
1:da076f4: import javax.management.QueryExp;
1:da076f4: import javax.management.ReflectionException;
1:da076f4: import javax.management.loading.ClassLoaderRepository;
1:455a628: import org.apache.activemq.ConfigurationException;
1:da076f4: import org.apache.activemq.broker.BrokerService;
1:da076f4: import org.apache.activemq.broker.BrokerStoppedException;
1:da076f4: import org.junit.Test;
1:da076f4: import org.slf4j.Logger;
1:da076f4: import org.slf4j.LoggerFactory;
1:da076f4: 
1:da076f4: 
1:35df815: import static org.junit.Assert.assertNull;
1:da076f4: import static org.junit.Assert.assertTrue;
1:da076f4: 
1:da076f4: 
1:da076f4: public class StartAndConcurrentStopBrokerTest {
1:da076f4:     private static final Logger LOG = LoggerFactory.getLogger(StartAndConcurrentStopBrokerTest.class);
1:da076f4: 
1:da076f4: 
1:da076f4:     @Test(timeout = 30000)
1:da076f4:     public void testConcurrentStop() throws Exception {
1:da076f4: 
1:35df815:         final AtomicReference<Throwable> error = new AtomicReference<Throwable>();
1:da076f4:         final CountDownLatch gotBrokerMbean = new CountDownLatch(1);
1:35df815:         final CountDownLatch gotPaMBean = new CountDownLatch(1);
1:35df815:         final AtomicBoolean checkPaMBean = new AtomicBoolean(false);
1:35df815: 
1:da076f4:         final HashMap mbeans = new HashMap();
1:da076f4:         final MBeanServer mBeanServer = new MBeanServer() {
1:da076f4:             @Override
1:da076f4:             public ObjectInstance createMBean(String className, ObjectName name) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInstance registerMBean(Object object, ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
1:da076f4:                 if (mbeans.containsKey(name)) {
1:35df815:                     throw new InstanceAlreadyExistsException("Got one already: " + name);
1:da076f4:                 }
1:da076f4:                 LOG.info("register:" + name);
1:da076f4: 
1:da076f4:                 try {
1:da076f4:                     if (name.compareTo(new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost")) == 0) {
1:da076f4:                         gotBrokerMbean.countDown();
1:da076f4:                     }
1:35df815: 
1:35df815:                     if (checkPaMBean.get()) {
1:35df815:                         if (new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,service=PersistenceAdapter,instanceName=*").apply(name)) {
1:35df815:                             gotPaMBean.countDown();
1:35df815:                         }
1:35df815:                     }
1:35df815: 
1:da076f4:                 } catch (Exception e) {
1:da076f4:                     e.printStackTrace();
1:35df815:                     error.set(e);
1:da076f4:                 }
1:da076f4:                 mbeans.put(name, object);
1:da076f4:                 return new ObjectInstance(name, object.getClass().getName());
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
1:da076f4:                 mbeans.remove(name);
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public boolean isRegistered(ObjectName name) {
1:da076f4:                 return mbeans.containsKey(name);
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Integer getMBeanCount() {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public String getDefaultDomain() {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public String[] getDomains() {
1:da076f4:                 return new String[0];
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException, ListenerNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException, ListenerNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
1:da076f4: 
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {
1:da076f4:                 return false;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object instantiate(String className) throws ReflectionException, MBeanException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object instantiate(String className, ObjectName loaderName) throws ReflectionException, MBeanException, InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object instantiate(String className, Object[] params, String[] signature) throws ReflectionException, MBeanException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, MBeanException, InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInputStream deserialize(ObjectName name, byte[] data) throws InstanceNotFoundException, OperationsException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInputStream deserialize(String className, byte[] data) throws OperationsException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ObjectInputStream deserialize(String className, ObjectName loaderName, byte[] data) throws InstanceNotFoundException, OperationsException, ReflectionException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ClassLoader getClassLoaderFor(ObjectName mbeanName) throws InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ClassLoader getClassLoader(ObjectName loaderName) throws InstanceNotFoundException {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4: 
1:da076f4:             @Override
1:da076f4:             public ClassLoaderRepository getClassLoaderRepository() {
1:da076f4:                 return null;
1:da076f4:             }
1:da076f4:         };
1:da076f4: 
1:da076f4: 
1:da076f4:         final BrokerService broker = new BrokerService();
1:35df815:         broker.setDeleteAllMessagesOnStartup(true);
1:da076f4: 
1:da076f4:         ExecutorService executor = Executors.newFixedThreadPool(4);
1:da076f4:         executor.execute(new Runnable() {
1:da076f4:             @Override
1:da076f4:             public void run() {
1:da076f4:                 try {
1:da076f4:                     broker.getManagementContext().setMBeanServer(mBeanServer);
1:da076f4:                     broker.start();
1:da076f4:                 } catch (BrokerStoppedException expected) {
1:455a628:                 } catch (ConfigurationException expected) {
1:da076f4:                 } catch (Exception e) {
1:da076f4:                     e.printStackTrace();
1:b7787bf:                     // lots of possible errors depending on progress
1:da076f4:                 }
1:da076f4:             }
1:da076f4:         });
1:da076f4: 
1:da076f4: 
1:da076f4:         executor.execute(new Runnable() {
1:da076f4:             @Override
1:da076f4:             public void run() {
1:da076f4:                 try {
1:da076f4:                     assertTrue("broker has registered mbean", gotBrokerMbean.await(10, TimeUnit.SECONDS));
1:da076f4:                     broker.stop();
1:da076f4:                 } catch (Exception e) {
1:da076f4:                     e.printStackTrace();
1:35df815:                     error.set(e);
1:da076f4:                 }
1:da076f4:             }
1:da076f4:         });
1:da076f4: 
1:da076f4:         executor.shutdown();
1:da076f4:         assertTrue("stop tasks done", executor.awaitTermination(20, TimeUnit.SECONDS));
1:da076f4: 
1:35df815:         BrokerService sanityBroker = new BrokerService();
1:35df815:         sanityBroker.getManagementContext().setMBeanServer(mBeanServer);
1:35df815:         sanityBroker.start();
1:35df815:         sanityBroker.stop();
1:35df815: 
1:35df815:         assertNull("No error", error.get());
1:35df815: 
1:35df815:         // again, after Persistence adapter mbean
1:35df815:         final BrokerService brokerTwo = new BrokerService();
1:35df815:         broker.setDeleteAllMessagesOnStartup(true);
1:35df815: 
1:35df815:         checkPaMBean.set(true);
1:35df815:         executor = Executors.newFixedThreadPool(4);
1:35df815:         executor.execute(new Runnable() {
1:35df815:             @Override
1:35df815:             public void run() {
1:35df815:                 try {
1:35df815:                     brokerTwo.getManagementContext().setMBeanServer(mBeanServer);
1:35df815:                     brokerTwo.start();
1:35df815:                 } catch (BrokerStoppedException expected) {
1:455a628:                 } catch (ConfigurationException expected) {
1:35df815:                 } catch (Exception e) {
1:35df815:                     e.printStackTrace();
1:b7787bf:                     // lots of possible errors depending on progress
1:35df815:                 }
1:35df815:             }
1:35df815:         });
1:35df815: 
1:35df815:         executor.execute(new Runnable() {
1:35df815:             @Override
1:35df815:             public void run() {
1:35df815:                 try {
1:35df815:                     assertTrue("broker has registered persistence adapter mbean", gotPaMBean.await(10, TimeUnit.SECONDS));
1:35df815:                     brokerTwo.stop();
1:35df815:                 } catch (Exception e) {
1:35df815:                     e.printStackTrace();
1:35df815:                     error.set(e);
1:35df815:                 }
1:35df815:             }
1:35df815:         });
1:35df815: 
1:35df815:         executor.shutdown();
1:35df815:         assertTrue("stop tasks done", executor.awaitTermination(20, TimeUnit.SECONDS));
1:35df815: 
1:35df815:         assertTrue("broker has registered persistence adapter mbean", gotPaMBean.await(0, TimeUnit.SECONDS));
1:35df815: 
1:35df815:         sanityBroker = new BrokerService();
1:35df815:         sanityBroker.getManagementContext().setMBeanServer(mBeanServer);
1:35df815:         sanityBroker.start();
1:35df815:         sanityBroker.stop();
1:35df815: 
1:35df815:         assertNull("No error", error.get());
1:da076f4: 
1:da076f4:     }
1:da076f4: 
1:da076f4: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:b7787bf
/////////////////////////////////////////////////////////////////////////
1:                     // lots of possible errors depending on progress
/////////////////////////////////////////////////////////////////////////
1:                     // lots of possible errors depending on progress
commit:455a628
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:                 } catch (ConfigurationException expected) {
/////////////////////////////////////////////////////////////////////////
1:                 } catch (ConfigurationException expected) {
commit:35df815
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicReference;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1:         final AtomicReference<Throwable> error = new AtomicReference<Throwable>();
1:         final CountDownLatch gotPaMBean = new CountDownLatch(1);
1:         final AtomicBoolean checkPaMBean = new AtomicBoolean(false);
1: 
/////////////////////////////////////////////////////////////////////////
1:                     throw new InstanceAlreadyExistsException("Got one already: " + name);
/////////////////////////////////////////////////////////////////////////
1: 
1:                     if (checkPaMBean.get()) {
1:                         if (new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,service=PersistenceAdapter,instanceName=*").apply(name)) {
1:                             gotPaMBean.countDown();
1:                         }
1:                     }
1: 
1:                     error.set(e);
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1:                     error.set(e);
/////////////////////////////////////////////////////////////////////////
1:                     error.set(e);
/////////////////////////////////////////////////////////////////////////
1:         BrokerService sanityBroker = new BrokerService();
1:         sanityBroker.getManagementContext().setMBeanServer(mBeanServer);
1:         sanityBroker.start();
1:         sanityBroker.stop();
1: 
1:         assertNull("No error", error.get());
1: 
1:         // again, after Persistence adapter mbean
1:         final BrokerService brokerTwo = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         checkPaMBean.set(true);
1:         executor = Executors.newFixedThreadPool(4);
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     brokerTwo.getManagementContext().setMBeanServer(mBeanServer);
1:                     brokerTwo.start();
1:                 } catch (BrokerStoppedException expected) {
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
0:                     error.set(e);
1:                 }
1:             }
1:         });
1: 
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     assertTrue("broker has registered persistence adapter mbean", gotPaMBean.await(10, TimeUnit.SECONDS));
1:                     brokerTwo.stop();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
0:                     error.set(e);
1:                 }
1:             }
1:         });
1: 
1:         executor.shutdown();
1:         assertTrue("stop tasks done", executor.awaitTermination(20, TimeUnit.SECONDS));
1: 
1:         assertTrue("broker has registered persistence adapter mbean", gotPaMBean.await(0, TimeUnit.SECONDS));
1: 
1:         sanityBroker = new BrokerService();
1:         sanityBroker.getManagementContext().setMBeanServer(mBeanServer);
1:         sanityBroker.start();
1:         sanityBroker.stop();
1: 
1:         assertNull("No error", error.get());
commit:da076f4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.ObjectInputStream;
1: import java.util.HashMap;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1: import javax.management.AttributeNotFoundException;
1: import javax.management.InstanceAlreadyExistsException;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.IntrospectionException;
1: import javax.management.InvalidAttributeValueException;
1: import javax.management.ListenerNotFoundException;
1: import javax.management.MBeanException;
1: import javax.management.MBeanInfo;
1: import javax.management.MBeanRegistrationException;
1: import javax.management.MBeanServer;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.NotificationFilter;
1: import javax.management.NotificationListener;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import javax.management.OperationsException;
1: import javax.management.QueryExp;
1: import javax.management.ReflectionException;
1: import javax.management.loading.ClassLoaderRepository;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerStoppedException;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: public class StartAndConcurrentStopBrokerTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(StartAndConcurrentStopBrokerTest.class);
1: 
1: 
1:     @Test(timeout = 30000)
1:     public void testConcurrentStop() throws Exception {
1: 
1:         final CountDownLatch gotBrokerMbean = new CountDownLatch(1);
1:         final HashMap mbeans = new HashMap();
1:         final MBeanServer mBeanServer = new MBeanServer() {
1:             @Override
1:             public ObjectInstance createMBean(String className, ObjectName name) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInstance registerMBean(Object object, ObjectName name) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
1:                 if (mbeans.containsKey(name)) {
0:                     throw new InstanceAlreadyExistsException("Got one already");
1:                 }
1:                 LOG.info("register:" + name);
1: 
1:                 try {
1:                     if (name.compareTo(new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost")) == 0) {
1:                         gotBrokerMbean.countDown();
1:                     }
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:                 mbeans.put(name, object);
1:                 return new ObjectInstance(name, object.getClass().getName());
1: 
1:             }
1: 
1:             @Override
1:             public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {
1:                 mbeans.remove(name);
1:             }
1: 
1:             @Override
1:             public ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Set<ObjectName> queryNames(ObjectName name, QueryExp query) {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public boolean isRegistered(ObjectName name) {
1:                 return mbeans.containsKey(name);
1:             }
1: 
1:             @Override
1:             public Integer getMBeanCount() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Object getAttribute(ObjectName name, String attribute) throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public AttributeList getAttributes(ObjectName name, String[] attributes) throws InstanceNotFoundException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void setAttribute(ObjectName name, Attribute attribute) throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {
1: 
1:             }
1: 
1:             @Override
1:             public AttributeList setAttributes(ObjectName name, AttributeList attributes) throws InstanceNotFoundException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature) throws InstanceNotFoundException, MBeanException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public String getDefaultDomain() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public String[] getDomains() {
1:                 return new String[0];
1:             }
1: 
1:             @Override
1:             public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public void removeNotificationListener(ObjectName name, ObjectName listener) throws InstanceNotFoundException, ListenerNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException, ListenerNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback) throws InstanceNotFoundException, ListenerNotFoundException {
1: 
1:             }
1: 
1:             @Override
1:             public MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IntrospectionException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public Object instantiate(String className) throws ReflectionException, MBeanException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Object instantiate(String className, ObjectName loaderName) throws ReflectionException, MBeanException, InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Object instantiate(String className, Object[] params, String[] signature) throws ReflectionException, MBeanException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature) throws ReflectionException, MBeanException, InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInputStream deserialize(ObjectName name, byte[] data) throws InstanceNotFoundException, OperationsException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInputStream deserialize(String className, byte[] data) throws OperationsException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ObjectInputStream deserialize(String className, ObjectName loaderName, byte[] data) throws InstanceNotFoundException, OperationsException, ReflectionException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ClassLoader getClassLoaderFor(ObjectName mbeanName) throws InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ClassLoader getClassLoader(ObjectName loaderName) throws InstanceNotFoundException {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public ClassLoaderRepository getClassLoaderRepository() {
1:                 return null;
1:             }
1:         };
1: 
1: 
1:         final BrokerService broker = new BrokerService();
1: 
1:         ExecutorService executor = Executors.newFixedThreadPool(4);
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     broker.getManagementContext().setMBeanServer(mBeanServer);
1:                     broker.start();
1:                 } catch (BrokerStoppedException expected) {
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1: 
1:         executor.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     assertTrue("broker has registered mbean", gotBrokerMbean.await(10, TimeUnit.SECONDS));
1:                     broker.stop();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         executor.shutdown();
1:         assertTrue("stop tasks done", executor.awaitTermination(20, TimeUnit.SECONDS));
1: 
0:         BrokerService second = new BrokerService();
0:         second.getManagementContext().setMBeanServer(mBeanServer);
0:         second.start();
0:         second.stop();
1: 
1:     }
1: 
1: }
============================================================================