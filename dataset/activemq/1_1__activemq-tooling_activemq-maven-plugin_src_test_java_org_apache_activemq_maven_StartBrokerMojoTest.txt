1:c0eae1b: /**
1:c0eae1b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0eae1b:  * contributor license agreements.  See the NOTICE file distributed with
1:c0eae1b:  * this work for additional information regarding copyright ownership.
1:c0eae1b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0eae1b:  * (the "License"); you may not use this file except in compliance with
1:c0eae1b:  * the License.  You may obtain a copy of the License at
1:c0eae1b:  *
1:c0eae1b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0eae1b:  *
1:c0eae1b:  * Unless required by applicable law or agreed to in writing, software
1:c0eae1b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0eae1b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0eae1b:  * See the License for the specific language governing permissions and
1:c0eae1b:  * limitations under the License.
1:c0eae1b:  */
1:c0eae1b: package org.apache.activemq.maven;
1:c0eae1b: 
1:c0eae1b: import org.apache.activemq.broker.BrokerService;
1:c0eae1b: import org.apache.activemq.broker.TransportConnector;
1:c0eae1b: import org.apache.maven.model.Build;
1:c0eae1b: import org.apache.maven.plugin.logging.Log;
1:c0eae1b: import org.apache.maven.project.MavenProject;
1:c0eae1b: import org.junit.Before;
1:c0eae1b: import org.junit.Test;
1:c0eae1b: import org.mockito.Mockito;
1:c0eae1b: 
1:c0eae1b: import java.util.LinkedList;
1:c0eae1b: import java.util.List;
1:c0eae1b: import java.util.Properties;
1:c0eae1b: 
1:c0eae1b: import static org.junit.Assert.*;
1:c0eae1b: 
1:c0eae1b: public class StartBrokerMojoTest {
1:c0eae1b:     /**
1:c0eae1b:      * Main object-under-test; configured with mocks and defaults.
1:c0eae1b:      */
1:c0eae1b:     private StartBrokerMojo             startBrokerMojo;
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Secondary object-under-test primarily for setter/getter testing; available for all tests without any
1:c0eae1b:      * configuration (i.e. raw).
1:c0eae1b:      */
1:c0eae1b:     private StartBrokerMojo             startBrokerMojoRaw;
1:c0eae1b: 
1:c0eae1b:     ////
1:c0eae1b:     // MOCKS
1:c0eae1b:     ////
1:c0eae1b:     private MavenProject                mockMavenProject;
1:c0eae1b:     private Build                       mockBuild;
1:c0eae1b:     private Properties                  mockMavenProperties;
1:c0eae1b:     private MavenBrokerManager          mockBrokerManager;
1:c0eae1b:     private XBeanFileResolver           mockXbeanFileResolver;
1:c0eae1b:     private BrokerService               mockBrokerService;
1:c0eae1b:     private Log                         mockMavenLog;
1:c0eae1b: 
1:c0eae1b:     ////
1:c0eae1b:     // Test Objects
1:c0eae1b:     ////
1:c0eae1b:     private Properties                  systemProperties;
1:c0eae1b:     private List<TransportConnector>    transportConnectorList;
1:c0eae1b:     private Exception                   testException;
1:c0eae1b: 
1:c0eae1b:     @Before
1:c0eae1b:     public void setupTest () {
1:c0eae1b:         //
1:c0eae1b:         // Create the objects-under-test
1:c0eae1b:         //
1:c0eae1b:         this.startBrokerMojo    = new StartBrokerMojo();
1:c0eae1b:         this.startBrokerMojoRaw = new StartBrokerMojo();
1:c0eae1b: 
1:c0eae1b:         //
1:c0eae1b:         // Create mocks
1:c0eae1b:         //
1:c0eae1b:         this.mockMavenProject       = Mockito.mock(MavenProject.class);
1:c0eae1b:         this.mockBuild              = Mockito.mock(Build.class);
1:c0eae1b:         this.mockMavenProperties    = Mockito.mock(Properties.class);
1:c0eae1b:         this.mockBrokerManager      = Mockito.mock(MavenBrokerManager.class);
1:c0eae1b:         this.mockXbeanFileResolver  = Mockito.mock(XBeanFileResolver.class);
1:c0eae1b:         this.mockBrokerService      = Mockito.mock(BrokerService.class);
1:c0eae1b:         this.mockMavenLog           = Mockito.mock(Log.class);
1:c0eae1b: 
1:c0eae1b:         //
1:c0eae1b:         // Prepare other test objects and configure the object-under-test.
1:c0eae1b:         //
1:c0eae1b:         this.transportConnectorList = new LinkedList<TransportConnector>();
1:c0eae1b:         this.systemProperties       = new Properties();
1:c0eae1b:         this.testException          = new Exception("x-test-exc-x");
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojo.setBrokerManager(this.mockBrokerManager);
1:c0eae1b:         this.startBrokerMojo.setxBeanFileResolver(this.mockXbeanFileResolver);
1:c0eae1b:         this.startBrokerMojo.setProject(this.mockMavenProject);
1:c0eae1b:         this.startBrokerMojo.setConnectorPropertyNameFormat("x-name-%s");
1:c0eae1b:         this.startBrokerMojo.setConfigUri("x-config-uri-x");
1:c0eae1b:         this.startBrokerMojo.setFork(false);
1:c0eae1b:         this.startBrokerMojo.setSystemProperties(this.systemProperties);
1:c0eae1b:         this.startBrokerMojo.setLog(this.mockMavenLog);
1:c0eae1b: 
1:c0eae1b:         //
1:c0eae1b:         // Define standard mock interactions.
1:c0eae1b:         //
1:c0eae1b:         Mockito.when(this.mockBrokerManager.getBroker()).thenReturn(this.mockBrokerService);
1:c0eae1b:         Mockito.when(this.mockMavenProject.getProperties()).thenReturn(this.mockMavenProperties);
1:c0eae1b:         Mockito.when(this.mockMavenProject.getBuild()).thenReturn(this.mockBuild);
1:c0eae1b:         Mockito.when(this.mockBuild.getDirectory()).thenReturn("x-proj-dir-x");
1:c0eae1b:         Mockito.when(this.mockBrokerService.getTransportConnectors()).thenReturn(transportConnectorList);
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for propertyNameFormat.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetConnectorPropertyNameFormat () {
1:c0eae1b:         assertEquals(StartBrokerMojo.DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT,
1:c0eae1b:                      this.startBrokerMojoRaw.getConnectorPropertyNameFormat());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setConnectorPropertyNameFormat("x-name-format-x");
1:c0eae1b:         assertEquals("x-name-format-x", this.startBrokerMojoRaw.getConnectorPropertyNameFormat());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for configUri.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetConfigUri () {
1:c0eae1b:         assertNull(this.startBrokerMojoRaw.getConfigUri());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setConfigUri("x-config-uri-x");
1:c0eae1b:         assertEquals("x-config-uri-x", this.startBrokerMojoRaw.getConfigUri());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for mavenProject.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetMavenProject () {
1:c0eae1b:         assertNull(this.startBrokerMojoRaw.getProject());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setProject(this.mockMavenProject);
1:c0eae1b:         assertSame(this.mockMavenProject, this.startBrokerMojoRaw.getProject());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for fork.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetFork () {
1:c0eae1b:         assertFalse(this.startBrokerMojoRaw.isFork());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setFork(true);
1:c0eae1b:         assertTrue(this.startBrokerMojoRaw.isFork());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for skip.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetSkip () {
1:c0eae1b:         assertFalse(this.startBrokerMojoRaw.isSkip());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setSkip(true);
1:c0eae1b:         assertTrue(this.startBrokerMojoRaw.isSkip());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for systemProperties.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetSystemProperties () {
1:c0eae1b:         assertNull(this.startBrokerMojoRaw.getSystemProperties());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setSystemProperties(this.systemProperties);
1:c0eae1b:         assertSame(this.systemProperties, this.startBrokerMojoRaw.getSystemProperties());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for brokerManager.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetBrokerManager () {
1:c0eae1b:         assertNull(this.startBrokerMojoRaw.getBrokerManager());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setBrokerManager(this.mockBrokerManager);
1:c0eae1b:         assertSame(this.mockBrokerManager, this.startBrokerMojoRaw.getBrokerManager());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the setter and getter for xbeanFileResolver.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSetGetXbeanFileResolver () {
1:c0eae1b:         assertTrue(this.startBrokerMojoRaw.getxBeanFileResolver() instanceof XBeanFileResolver);
1:c0eae1b:         assertNotSame(this.mockXbeanFileResolver, this.startBrokerMojoRaw.getxBeanFileResolver());
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojoRaw.setxBeanFileResolver(this.mockXbeanFileResolver);
1:c0eae1b:         assertSame(this.mockXbeanFileResolver, this.startBrokerMojoRaw.getxBeanFileResolver());
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test normal execution of the mojo leads to startup of the broker.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testExecute () throws Exception {
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockBrokerManager).start(false, "x-config-uri-x");
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the registration of a single transport connector URI when a broker with only one connector is started.
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testExecuteRegistersTransportConnectorOneUri () throws Exception {
1:c0eae1b:         this.startBrokerMojo.setProject(this.mockMavenProject);
1:c0eae1b: 
1:c0eae1b:         this.createTestTransportConnectors("openwire-client");
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-openwire-client", "x-pub-addr-for-openwire-client");
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test the registration of multiple transport connector URIs when a broker with multiple connectors is started.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testExecuteRegistersTransportConnectorMultiUri () throws Exception {
1:c0eae1b:         this.createTestTransportConnectors("connector1", "connector2", "connector3");
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector1", "x-pub-addr-for-connector1");
1:c0eae1b:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector2", "x-pub-addr-for-connector2");
1:c0eae1b:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector3", "x-pub-addr-for-connector3");
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test handling when TransportConnector.getPublishableConnectString() throws an exception.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testExceptionOnGetPublishableConnectString () throws Exception {
1:c0eae1b:         TransportConnector mockTransportConnector = Mockito.mock(TransportConnector.class);
1:c0eae1b: 
1:c0eae1b:         Mockito.when(mockTransportConnector.toString()).thenReturn("x-conn-x");
1:c0eae1b:         Mockito.when(mockTransportConnector.getPublishableConnectString()).thenThrow(testException);
1:c0eae1b: 
1:c0eae1b:         this.transportConnectorList.add(mockTransportConnector);
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenLog).warn("error on obtaining broker connector uri; connector=x-conn-x",
1:c0eae1b:                 this.testException);
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test that an xbean configuration file URI is transformed on use.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testUseXbeanConfigFile () throws Exception {
1:c0eae1b:         Mockito.when(this.mockXbeanFileResolver.isXBeanFile("x-config-uri-x")).thenReturn(true);
1:c0eae1b:         Mockito.when(this.mockXbeanFileResolver.toUrlCompliantAbsolutePath("x-config-uri-x"))
1:c0eae1b:                 .thenReturn("x-transformed-uri-x");
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenLog).debug("configUri before transformation: x-config-uri-x");
1:c0eae1b:         Mockito.verify(this.mockMavenLog).debug("configUri after transformation: x-transformed-uri-x");
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test that a URI that does not represent an xbean configuration file is not translated.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testDoNotUseXbeanConfigFile () throws Exception {
1:c0eae1b:         Mockito.when(this.mockXbeanFileResolver.isXBeanFile("x-config-uri-x")).thenReturn(false);
1:c0eae1b: 
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenLog, Mockito.times(0)).debug("configUri before transformation: x-config-uri-x");
1:c0eae1b:         Mockito.verify(this.mockMavenLog, Mockito.times(0))
1:c0eae1b:                 .debug("configUri after transformation: x-transformed-uri-x");
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Test that execution of the mojo is skipped if so configured.
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     @Test
1:c0eae1b:     public void testSkip () throws Exception {
1:c0eae1b:         this.startBrokerMojo.setSkip(true);
1:c0eae1b:         this.startBrokerMojo.execute();
1:c0eae1b: 
1:c0eae1b:         Mockito.verify(this.mockMavenLog).info("Skipped execution of ActiveMQ Broker");
1:c0eae1b:         Mockito.verifyNoMoreInteractions(this.mockBrokerManager);
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Add mock, test transport connectors with the given names.
1:c0eae1b:      *
1:c0eae1b:      * @param connectorNames names of the mock connectors to add for the test.
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     protected void createTestTransportConnectors(String... connectorNames) throws Exception {
1:c0eae1b:         for ( String oneConnectorName : connectorNames ) {
1:c0eae1b:             //
1:c0eae1b:             // Mock the connector
1:c0eae1b:             //
1:c0eae1b:             TransportConnector mockConnector = Mockito.mock(TransportConnector.class);
1:c0eae1b: 
1:c0eae1b:             //
1:c0eae1b:             // Return the connector name on getName() and a unique string on getPublishableConnectString().
1:c0eae1b:             //
1:c0eae1b:             Mockito.when(mockConnector.getName()).thenReturn(oneConnectorName);
1:c0eae1b:             Mockito.when(mockConnector.getPublishableConnectString()).thenReturn("x-pub-addr-for-" + oneConnectorName);
1:c0eae1b: 
1:c0eae1b:             //
1:c0eae1b:             // Add to the test connector list.
1:c0eae1b:             //
1:c0eae1b:             this.transportConnectorList.add(mockConnector);
1:c0eae1b:         }
1:c0eae1b:     }
1:c0eae1b: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.maven.model.Build;
1: import org.apache.maven.plugin.logging.Log;
1: import org.apache.maven.project.MavenProject;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class StartBrokerMojoTest {
1:     /**
1:      * Main object-under-test; configured with mocks and defaults.
1:      */
1:     private StartBrokerMojo             startBrokerMojo;
1: 
1:     /**
1:      * Secondary object-under-test primarily for setter/getter testing; available for all tests without any
1:      * configuration (i.e. raw).
1:      */
1:     private StartBrokerMojo             startBrokerMojoRaw;
1: 
1:     ////
1:     // MOCKS
1:     ////
1:     private MavenProject                mockMavenProject;
1:     private Build                       mockBuild;
1:     private Properties                  mockMavenProperties;
1:     private MavenBrokerManager          mockBrokerManager;
1:     private XBeanFileResolver           mockXbeanFileResolver;
1:     private BrokerService               mockBrokerService;
1:     private Log                         mockMavenLog;
1: 
1:     ////
1:     // Test Objects
1:     ////
1:     private Properties                  systemProperties;
1:     private List<TransportConnector>    transportConnectorList;
1:     private Exception                   testException;
1: 
1:     @Before
1:     public void setupTest () {
1:         //
1:         // Create the objects-under-test
1:         //
1:         this.startBrokerMojo    = new StartBrokerMojo();
1:         this.startBrokerMojoRaw = new StartBrokerMojo();
1: 
1:         //
1:         // Create mocks
1:         //
1:         this.mockMavenProject       = Mockito.mock(MavenProject.class);
1:         this.mockBuild              = Mockito.mock(Build.class);
1:         this.mockMavenProperties    = Mockito.mock(Properties.class);
1:         this.mockBrokerManager      = Mockito.mock(MavenBrokerManager.class);
1:         this.mockXbeanFileResolver  = Mockito.mock(XBeanFileResolver.class);
1:         this.mockBrokerService      = Mockito.mock(BrokerService.class);
1:         this.mockMavenLog           = Mockito.mock(Log.class);
1: 
1:         //
1:         // Prepare other test objects and configure the object-under-test.
1:         //
1:         this.transportConnectorList = new LinkedList<TransportConnector>();
1:         this.systemProperties       = new Properties();
1:         this.testException          = new Exception("x-test-exc-x");
1: 
1:         this.startBrokerMojo.setBrokerManager(this.mockBrokerManager);
1:         this.startBrokerMojo.setxBeanFileResolver(this.mockXbeanFileResolver);
1:         this.startBrokerMojo.setProject(this.mockMavenProject);
1:         this.startBrokerMojo.setConnectorPropertyNameFormat("x-name-%s");
1:         this.startBrokerMojo.setConfigUri("x-config-uri-x");
1:         this.startBrokerMojo.setFork(false);
1:         this.startBrokerMojo.setSystemProperties(this.systemProperties);
1:         this.startBrokerMojo.setLog(this.mockMavenLog);
1: 
1:         //
1:         // Define standard mock interactions.
1:         //
1:         Mockito.when(this.mockBrokerManager.getBroker()).thenReturn(this.mockBrokerService);
1:         Mockito.when(this.mockMavenProject.getProperties()).thenReturn(this.mockMavenProperties);
1:         Mockito.when(this.mockMavenProject.getBuild()).thenReturn(this.mockBuild);
1:         Mockito.when(this.mockBuild.getDirectory()).thenReturn("x-proj-dir-x");
1:         Mockito.when(this.mockBrokerService.getTransportConnectors()).thenReturn(transportConnectorList);
1:     }
1: 
1:     /**
1:      * Test the setter and getter for propertyNameFormat.
1:      */
1:     @Test
1:     public void testSetGetConnectorPropertyNameFormat () {
1:         assertEquals(StartBrokerMojo.DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT,
1:                      this.startBrokerMojoRaw.getConnectorPropertyNameFormat());
1: 
1:         this.startBrokerMojoRaw.setConnectorPropertyNameFormat("x-name-format-x");
1:         assertEquals("x-name-format-x", this.startBrokerMojoRaw.getConnectorPropertyNameFormat());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for configUri.
1:      */
1:     @Test
1:     public void testSetGetConfigUri () {
1:         assertNull(this.startBrokerMojoRaw.getConfigUri());
1: 
1:         this.startBrokerMojoRaw.setConfigUri("x-config-uri-x");
1:         assertEquals("x-config-uri-x", this.startBrokerMojoRaw.getConfigUri());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for mavenProject.
1:      */
1:     @Test
1:     public void testSetGetMavenProject () {
1:         assertNull(this.startBrokerMojoRaw.getProject());
1: 
1:         this.startBrokerMojoRaw.setProject(this.mockMavenProject);
1:         assertSame(this.mockMavenProject, this.startBrokerMojoRaw.getProject());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for fork.
1:      */
1:     @Test
1:     public void testSetGetFork () {
1:         assertFalse(this.startBrokerMojoRaw.isFork());
1: 
1:         this.startBrokerMojoRaw.setFork(true);
1:         assertTrue(this.startBrokerMojoRaw.isFork());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for skip.
1:      */
1:     @Test
1:     public void testSetGetSkip () {
1:         assertFalse(this.startBrokerMojoRaw.isSkip());
1: 
1:         this.startBrokerMojoRaw.setSkip(true);
1:         assertTrue(this.startBrokerMojoRaw.isSkip());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for systemProperties.
1:      */
1:     @Test
1:     public void testSetGetSystemProperties () {
1:         assertNull(this.startBrokerMojoRaw.getSystemProperties());
1: 
1:         this.startBrokerMojoRaw.setSystemProperties(this.systemProperties);
1:         assertSame(this.systemProperties, this.startBrokerMojoRaw.getSystemProperties());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for brokerManager.
1:      */
1:     @Test
1:     public void testSetGetBrokerManager () {
1:         assertNull(this.startBrokerMojoRaw.getBrokerManager());
1: 
1:         this.startBrokerMojoRaw.setBrokerManager(this.mockBrokerManager);
1:         assertSame(this.mockBrokerManager, this.startBrokerMojoRaw.getBrokerManager());
1:     }
1: 
1:     /**
1:      * Test the setter and getter for xbeanFileResolver.
1:      */
1:     @Test
1:     public void testSetGetXbeanFileResolver () {
1:         assertTrue(this.startBrokerMojoRaw.getxBeanFileResolver() instanceof XBeanFileResolver);
1:         assertNotSame(this.mockXbeanFileResolver, this.startBrokerMojoRaw.getxBeanFileResolver());
1: 
1:         this.startBrokerMojoRaw.setxBeanFileResolver(this.mockXbeanFileResolver);
1:         assertSame(this.mockXbeanFileResolver, this.startBrokerMojoRaw.getxBeanFileResolver());
1:     }
1: 
1:     /**
1:      * Test normal execution of the mojo leads to startup of the broker.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testExecute () throws Exception {
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockBrokerManager).start(false, "x-config-uri-x");
1:     }
1: 
1:     /**
1:      * Test the registration of a single transport connector URI when a broker with only one connector is started.
1:      */
1:     @Test
1:     public void testExecuteRegistersTransportConnectorOneUri () throws Exception {
1:         this.startBrokerMojo.setProject(this.mockMavenProject);
1: 
1:         this.createTestTransportConnectors("openwire-client");
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-openwire-client", "x-pub-addr-for-openwire-client");
1:     }
1: 
1:     /**
1:      * Test the registration of multiple transport connector URIs when a broker with multiple connectors is started.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testExecuteRegistersTransportConnectorMultiUri () throws Exception {
1:         this.createTestTransportConnectors("connector1", "connector2", "connector3");
1: 
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector1", "x-pub-addr-for-connector1");
1:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector2", "x-pub-addr-for-connector2");
1:         Mockito.verify(this.mockMavenProperties).setProperty("x-name-connector3", "x-pub-addr-for-connector3");
1:     }
1: 
1:     /**
1:      * Test handling when TransportConnector.getPublishableConnectString() throws an exception.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testExceptionOnGetPublishableConnectString () throws Exception {
1:         TransportConnector mockTransportConnector = Mockito.mock(TransportConnector.class);
1: 
1:         Mockito.when(mockTransportConnector.toString()).thenReturn("x-conn-x");
1:         Mockito.when(mockTransportConnector.getPublishableConnectString()).thenThrow(testException);
1: 
1:         this.transportConnectorList.add(mockTransportConnector);
1: 
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenLog).warn("error on obtaining broker connector uri; connector=x-conn-x",
1:                 this.testException);
1:     }
1: 
1:     /**
1:      * Test that an xbean configuration file URI is transformed on use.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testUseXbeanConfigFile () throws Exception {
1:         Mockito.when(this.mockXbeanFileResolver.isXBeanFile("x-config-uri-x")).thenReturn(true);
1:         Mockito.when(this.mockXbeanFileResolver.toUrlCompliantAbsolutePath("x-config-uri-x"))
1:                 .thenReturn("x-transformed-uri-x");
1: 
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenLog).debug("configUri before transformation: x-config-uri-x");
1:         Mockito.verify(this.mockMavenLog).debug("configUri after transformation: x-transformed-uri-x");
1:     }
1: 
1:     /**
1:      * Test that a URI that does not represent an xbean configuration file is not translated.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testDoNotUseXbeanConfigFile () throws Exception {
1:         Mockito.when(this.mockXbeanFileResolver.isXBeanFile("x-config-uri-x")).thenReturn(false);
1: 
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenLog, Mockito.times(0)).debug("configUri before transformation: x-config-uri-x");
1:         Mockito.verify(this.mockMavenLog, Mockito.times(0))
1:                 .debug("configUri after transformation: x-transformed-uri-x");
1:     }
1: 
1:     /**
1:      * Test that execution of the mojo is skipped if so configured.
1:      *
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testSkip () throws Exception {
1:         this.startBrokerMojo.setSkip(true);
1:         this.startBrokerMojo.execute();
1: 
1:         Mockito.verify(this.mockMavenLog).info("Skipped execution of ActiveMQ Broker");
1:         Mockito.verifyNoMoreInteractions(this.mockBrokerManager);
1:     }
1: 
1:     /**
1:      * Add mock, test transport connectors with the given names.
1:      *
1:      * @param connectorNames names of the mock connectors to add for the test.
1:      * @throws Exception
1:      */
1:     protected void createTestTransportConnectors(String... connectorNames) throws Exception {
1:         for ( String oneConnectorName : connectorNames ) {
1:             //
1:             // Mock the connector
1:             //
1:             TransportConnector mockConnector = Mockito.mock(TransportConnector.class);
1: 
1:             //
1:             // Return the connector name on getName() and a unique string on getPublishableConnectString().
1:             //
1:             Mockito.when(mockConnector.getName()).thenReturn(oneConnectorName);
1:             Mockito.when(mockConnector.getPublishableConnectString()).thenReturn("x-pub-addr-for-" + oneConnectorName);
1: 
1:             //
1:             // Add to the test connector list.
1:             //
1:             this.transportConnectorList.add(mockConnector);
1:         }
1:     }
1: }
============================================================================