1:2cb8ed2: /**
1:2cb8ed2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2cb8ed2:  * contributor license agreements.  See the NOTICE file distributed with
1:2cb8ed2:  * this work for additional information regarding copyright ownership.
1:2cb8ed2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2cb8ed2:  * (the "License"); you may not use this file except in compliance with
1:2cb8ed2:  * the License.  You may obtain a copy of the License at
1:2cb8ed2:  *
1:2cb8ed2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2cb8ed2:  *
1:2cb8ed2:  * Unless required by applicable law or agreed to in writing, software
1:2cb8ed2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2cb8ed2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2cb8ed2:  * See the License for the specific language governing permissions and
1:2cb8ed2:  * limitations under the License.
1:2cb8ed2:  */
1:2cb8ed2: package org.apache.activemq.transport.udp;
1:2cb8ed2: 
1:2cb8ed2: import org.apache.activemq.ActiveMQConnectionFactory;
1:2cb8ed2: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:2cb8ed2: 
1:2cb8ed2: import javax.jms.Connection;
1:2cb8ed2: import javax.jms.JMSException;
1:2cb8ed2: 
1:2cb8ed2: public class UpdTransportBindTest extends EmbeddedBrokerTestSupport{
1:2cb8ed2:     final String addr = "udp://localhost:61625";
1:2cb8ed2: 
1:2cb8ed2:     protected void setUp() throws Exception {
1:2cb8ed2:         bindAddress = addr + "?soTimeout=1000";
1:2cb8ed2:         super.setUp();
1:2cb8ed2:     }
1:2cb8ed2: 
1:2cb8ed2:     public void testConnect() throws Exception {
1:2cb8ed2:         try {
1:2cb8ed2:             Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:2cb8ed2:             connection.start();
1:2cb8ed2:         } catch (JMSException e) {
1:2cb8ed2:             fail("Could not start the connection for a UDP Transport. " +
1:2cb8ed2:                  "Check that the port and connector are available.");
1:2cb8ed2:         }
1:2cb8ed2:     }
1:2cb8ed2: 
1:2cb8ed2: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:2cb8ed2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
1: public class UpdTransportBindTest extends EmbeddedBrokerTestSupport{
1:     final String addr = "udp://localhost:61625";
1: 
1:     protected void setUp() throws Exception {
1:         bindAddress = addr + "?soTimeout=1000";
1:         super.setUp();
1:     }
1: 
1:     public void testConnect() throws Exception {
1:         try {
1:             Connection connection = new ActiveMQConnectionFactory(addr).createConnection();
1:             connection.start();
1:         } catch (JMSException e) {
1:             fail("Could not start the connection for a UDP Transport. " +
1:                  "Check that the port and connector are available.");
1:         }
1:     }
1: 
1: }
============================================================================