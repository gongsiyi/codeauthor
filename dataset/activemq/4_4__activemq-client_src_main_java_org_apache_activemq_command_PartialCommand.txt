1:8704338: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:8704338:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:8704338:  * Unless required by applicable law or agreed to in writing, software
1:8704338:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8704338:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8704338:  * See the License for the specific language governing permissions and
1:8704338:  * limitations under the License.
1:8704338:  */
1:8704338: package org.apache.activemq.command;
4:8704338: 
1:8704338: import org.apache.activemq.state.CommandVisitor;
1:8704338: 
1:8704338: /**
1:8704338:  * Represents a partial command; a large command that has been split up into
1:8704338:  * pieces.
1:25c99a6:  *
1:8704338:  * @openwire:marshaller code="60"
1:25c99a6:  *
1:8704338:  */
1:c2fc820: public class PartialCommand implements Command {
1:8704338: 
1:8704338:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PARTIAL_COMMAND;
1:8704338: 
1:c2fc820:     private int commandId;
1:8704338:     private byte[] data;
1:8704338: 
1:c2fc820:     private transient Endpoint from;
1:c2fc820:     private transient Endpoint to;
1:c2fc820: 
1:8704338:     public PartialCommand() {
3:8704338:     }
1:8704338: 
1:25c99a6:     @Override
1:8704338:     public byte getDataStructureType() {
1:8704338:         return DATA_STRUCTURE_TYPE;
1:89d6fd0:     }
1:8704338: 
1:8704338:     /**
1:c2fc820:      * @openwire:property version=1
1:c2fc820:      */
1:25c99a6:     @Override
1:c2fc820:     public int getCommandId() {
1:c2fc820:         return commandId;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public void setCommandId(int commandId) {
1:c2fc820:         this.commandId = commandId;
1:c2fc820:     }
1:c2fc820: 
1:c2fc820:     /**
1:8704338:      * The data for this part of the command
1:25c99a6:      *
1:8704338:      * @openwire:property version=1 mandatory=true
1:8704338:      */
1:8704338:     public byte[] getData() {
1:8704338:         return data;
1:8704338:     }
1:8704338: 
1:8704338:     public void setData(byte[] data) {
1:8704338:         this.data = data;
1:8704338:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public Endpoint getFrom() {
1:c2fc820:         return from;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public void setFrom(Endpoint from) {
1:c2fc820:         this.from = from;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public Endpoint getTo() {
1:c2fc820:         return to;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public void setTo(Endpoint to) {
1:c2fc820:         this.to = to;
1:8704338:     }
1:c2fc820: 
1:25c99a6:     @Override
1:8704338:     public Response visit(CommandVisitor visitor) throws Exception {
1:8704338:         throw new IllegalStateException("The transport layer should filter out PartialCommand instances but received: " + this);
1:8704338:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isResponseRequired() {
1:c2fc820:         return false;
1:c2fc820:     }
1:f392884: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isResponse() {
1:c2fc820:         return false;
1:c2fc820:     }
1:72b382d: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isBrokerInfo() {
1:c2fc820:         return false;
1:c2fc820:     }
1:72b382d: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isMessageDispatch() {
1:c2fc820:         return false;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isMessage() {
1:c2fc820:         return false;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isMessageAck() {
1:c2fc820:         return false;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isMessageDispatchNotification() {
1:c2fc820:         return false;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isShutdownInfo() {
1:c2fc820:         return false;
1:c2fc820:     }
1:25c99a6: 
1:25c99a6:     @Override
1:f392884:     public boolean isConnectionControl() {
1:f392884:         return false;
1:f392884:     }
1:c2fc820: 
1:25c99a6:     @Override
1:25c99a6:     public boolean isConsumerControl() {
1:25c99a6:         return false;
1:25c99a6:     }
1:25c99a6: 
1:25c99a6:     @Override
1:c2fc820:     public void setResponseRequired(boolean responseRequired) {
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isWireFormatInfo() {
1:c2fc820:         return false;
1:c2fc820:     }
1:c2fc820: 
1:25c99a6:     @Override
1:c2fc820:     public boolean isMarshallAware() {
1:c2fc820:         return false;
1:72b382d:     }
1:72b382d: 
1:25c99a6:     @Override
1:72b382d:     public String toString() {
1:89d6fd0:         int size = 0;
1:89d6fd0:         if (data != null) {
1:89d6fd0:             size = data.length;
1:f392884:         }
1:25c99a6: 
1:89d6fd0:         return "PartialCommand[id: " + commandId + " data: " + size + " byte(s)]";
1:25c99a6:     }
1:c2fc820: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1:     public boolean isConsumerControl() {
1:         return false;
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isConnectionControl() {
1:         return false;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     }   
author:James Strachan
-------------------------------------------------------------------------------
commit:89d6fd0
/////////////////////////////////////////////////////////////////////////
1:         int size = 0;
1:         if (data != null) {
1:             size = data.length;
1:         }
1:         return "PartialCommand[id: " + commandId + " data: " + size + " byte(s)]";
commit:72b382d
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString() {
0:         return "PartialCommand[id: " + commandId + " data: " + data.length + " byte(s)]";
1:     }
1:     
1:     
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
1: public class PartialCommand implements Command {
1:     private int commandId;
1:     private transient Endpoint from;
1:     private transient Endpoint to;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @openwire:property version=1
1:      */
1:     public int getCommandId() {
1:         return commandId;
1:     }
1: 
1:     public void setCommandId(int commandId) {
1:         this.commandId = commandId;
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:     public Endpoint getFrom() {
1:         return from;
1:     }
1: 
1:     public void setFrom(Endpoint from) {
1:         this.from = from;
1:     }
1: 
1:     public Endpoint getTo() {
1:         return to;
1:     }
1: 
1:     public void setTo(Endpoint to) {
1:         this.to = to;
1:     public boolean isResponseRequired() {
1:         return false;
1:     }
1: 
1:     public boolean isResponse() {
1:         return false;
1:     }
1: 
1:     public boolean isBrokerInfo() {
1:         return false;
1:     }
1: 
1:     public boolean isMessageDispatch() {
1:         return false;
1:     }
1: 
1:     public boolean isMessage() {
1:         return false;
1:     }
1: 
1:     public boolean isMessageAck() {
1:         return false;
1:     }
1: 
1:     public boolean isMessageDispatchNotification() {
1:         return false;
1:     }
1: 
1:     public boolean isShutdownInfo() {
1:         return false;
1:     }
1: 
1:     public void setResponseRequired(boolean responseRequired) {
1:     }
1: 
1:     public boolean isWireFormatInfo() {
1:         return false;
1:     }
1: 
1:     public boolean isMarshallAware() {
1:         return false;
1:     }
commit:8704338
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * Represents a partial command; a large command that has been split up into
1:  * pieces.
1:  * 
1:  * @openwire:marshaller code="60"
0:  * @version $Revision$
1:  */
0: public class PartialCommand extends BaseCommand {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PARTIAL_COMMAND;
1: 
1:     private byte[] data;
1: 
1:     public PartialCommand() {
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
1:      * The data for this part of the command
1:      * 
1:      * @openwire:property version=1 mandatory=true
1:      */
1:     public byte[] getData() {
1:         return data;
1:     }
1: 
1:     public void setData(byte[] data) {
1:         this.data = data;
1:     }
1: 
0:     public boolean isLastPart() {
0:         return false;
1:     }
1: 
1:     public Response visit(CommandVisitor visitor) throws Exception {
1:         throw new IllegalStateException("The transport layer should filter out PartialCommand instances but received: " + this);
1:     }
1: 
1: }
============================================================================