1:90b66ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:7557f0c:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7557f0c:  *
1:90b66ce:  * Unless required by applicable law or agreed to in writing, software
1:90b66ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b66ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b66ce:  * See the License for the specific language governing permissions and
1:90b66ce:  * limitations under the License.
1:90b66ce:  */
1:90b66ce: package org.apache.activemq.web.controller;
1:540dd5c: 
1:540dd5c: import java.util.Iterator;
1:540dd5c: import java.util.Map;
1:540dd5c: import javax.jms.JMSException;
1:540dd5c: import javax.jms.Message;
1:540dd5c: import javax.servlet.http.HttpServletRequest;
1:540dd5c: import javax.servlet.http.HttpServletResponse;
1:90b66ce: import org.apache.activemq.command.ActiveMQDestination;
1:8a5e197: import org.apache.activemq.web.BrokerFacade;
1:90b66ce: import org.apache.activemq.web.DestinationFacade;
1:90b66ce: import org.apache.activemq.web.WebClient;
1:90b66ce: import org.springframework.web.servlet.ModelAndView;
1:90b66ce: import org.springframework.web.servlet.mvc.Controller;
1:540dd5c: 
1:90b66ce: /**
1:90b66ce:  * Sends a message
1:90b66ce:  */
1:90b66ce: public class SendMessage extends DestinationFacade implements Controller {
8:90b66ce: 
1:540dd5c:     private String jmsText;
1:540dd5c:     private boolean jmsPersistent;
1:540dd5c:     private int jmsPriority;
1:540dd5c:     private int jmsTimeToLive = -1;
1:540dd5c:     private String jmsCorrelationID;
1:540dd5c:     private String jmsReplyTo;
1:540dd5c:     private String jmsType;
1:540dd5c:     private int jmsMessageCount = 1;
1:540dd5c:     private String jmsMessageCountHeader = "JMSXMessageNumber";
1:90b66ce:     private boolean redirectToBrowse;
1:90b66ce: 
1:8a5e197:     public SendMessage(BrokerFacade brokerFacade) {
1:8a5e197:         super(brokerFacade);
5:90b66ce:     }
1:9dc43f3: 
1:90b66ce:     public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
1:90b66ce:         WebClient client = WebClient.getWebClient(request);
1:90b66ce:         ActiveMQDestination dest = createDestination();
1:90b66ce: 
1:90b66ce:         sendMessages(request, client, dest);
1:90b66ce:         if (redirectToBrowse) {
1:90b66ce:             if (isQueue()) {
1:90b66ce:                 return new ModelAndView("redirect:browse.jsp?destination=" + getJMSDestination());
1:90b66ce:             }
1:90b66ce:         }
1:90b66ce:         return redirectToBrowseView();
1:90b66ce:     }
1:90b66ce: 
1:57b16b1:     protected void sendMessages(HttpServletRequest request, WebClient client, ActiveMQDestination dest)
1:57b16b1:             throws JMSException {
1:540dd5c:         if (jmsMessageCount <= 1) {
1:540dd5c:             jmsMessageCount = 1;
1:90b66ce:         }
1:540dd5c:         for (int i = 0; i < jmsMessageCount; i++) {
1:90b66ce:             Message message = createMessage(client, request);
1:90b66ce:             appendHeaders(message, request);
1:540dd5c:             if (jmsMessageCount > 1) {
1:540dd5c:                 message.setIntProperty(jmsMessageCountHeader, i + 1);
1:90b66ce:             }
1:90b66ce: 
1:540dd5c:             client.send(dest, message, jmsPersistent, jmsPriority, jmsTimeToLive);
1:90b66ce:         }
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     // Properties
1:90b66ce:     // -------------------------------------------------------------------------
1:90b66ce: 
1:90b66ce:     public String getJMSCorrelationID() {
1:540dd5c:         return jmsCorrelationID;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSCorrelationID(String correlationID) {
1:7557f0c:         if (correlationID != null) {
1:7557f0c:             correlationID = correlationID.trim();
1:7557f0c:         }
1:540dd5c:         jmsCorrelationID = correlationID;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getJMSReplyTo() {
1:540dd5c:         return jmsReplyTo;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSReplyTo(String replyTo) {
1:7557f0c:         if (replyTo != null) {
1:7557f0c:             replyTo = replyTo.trim();
1:7557f0c:         }
1:540dd5c:         jmsReplyTo = replyTo;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getJMSType() {
1:540dd5c:         return jmsType;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSType(String type) {
1:7557f0c:         if (type != null) {
1:7557f0c:             type = type.trim();
1:7557f0c:         }
1:540dd5c:         jmsType = type;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public boolean isJMSPersistent() {
1:540dd5c:         return jmsPersistent;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSPersistent(boolean persistent) {
1:540dd5c:         this.jmsPersistent = persistent;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public int getJMSPriority() {
1:540dd5c:         return jmsPriority;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSPriority(int priority) {
1:540dd5c:         this.jmsPriority = priority;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public String getJMSText() {
1:540dd5c:         return jmsText;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSText(String text) {
1:540dd5c:         this.jmsText = text;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public int getJMSTimeToLive() {
1:540dd5c:         return jmsTimeToLive;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSTimeToLive(int timeToLive) {
1:540dd5c:         this.jmsTimeToLive = timeToLive;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public int getJMSMessageCount() {
1:540dd5c:         return jmsMessageCount;
1:90b66ce:     }
1:90b66ce: 
1:90b66ce:     public void setJMSMessageCount(int copies) {
1:540dd5c:         jmsMessageCount = copies;
1:90b66ce:     }
1:90b66ce: 
1:09a3830:     public String getJMSMessageCountHeader() {
1:540dd5c:         return jmsMessageCountHeader;
1:09a3830:     }
1:09a3830: 
1:09a3830:     public void setJMSMessageCountHeader(String messageCountHeader) {
1:7557f0c:         if (messageCountHeader != null) {
1:7557f0c:             messageCountHeader = messageCountHeader.trim();
1:7557f0c:         }
1:540dd5c:         jmsMessageCountHeader = messageCountHeader;
1:09a3830:     }
1:09a3830: 
1:90b66ce:     // Implementation methods
1:90b66ce:     // -------------------------------------------------------------------------
1:90b66ce:     protected Message createMessage(WebClient client, HttpServletRequest request) throws JMSException {
1:540dd5c:         if (jmsText != null) {
1:540dd5c:             return client.getSession().createTextMessage(jmsText);
1:90b66ce:         }
1:90b66ce:         // TODO create Bytes message from request body...
1:90b66ce:         return client.getSession().createMessage();
1:90b66ce:     }
1:90b66ce: 
1:7557f0c:     @SuppressWarnings("rawtypes")
1:90b66ce:     protected void appendHeaders(Message message, HttpServletRequest request) throws JMSException {
1:540dd5c:         message.setJMSCorrelationID(jmsCorrelationID);
1:540dd5c:         if (jmsReplyTo != null && jmsReplyTo.trim().length() > 0) {
1:540dd5c:             message.setJMSReplyTo(ActiveMQDestination.createDestination(jmsReplyTo, ActiveMQDestination.QUEUE_TYPE));
1:90b66ce:         }
1:540dd5c:         message.setJMSType(jmsType);
1:90b66ce: 
1:90b66ce:         // now lets add all of the parameters
1:90b66ce:         Map map = request.getParameterMap();
1:90b66ce:         if (map != null) {
1:90b66ce:             for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {
1:57b16b1:                 Map.Entry entry = (Map.Entry) iter.next();
1:57b16b1:                 String name = (String) entry.getKey();
1:2895197:                 if (name.equals("secret")) {
1:7557f0c:                     continue;
1:2895197:                 }
1:90b66ce:                 Object value = entry.getValue();
1:90b66ce:                 if (isValidPropertyName(name)) {
1:90b66ce:                     if (value instanceof String[]) {
1:57b16b1:                         String[] array = (String[]) value;
1:90b66ce:                         if (array.length > 0) {
1:90b66ce:                             value = array[0];
1:540dd5c:                         } else {
1:71669cb:                             value = null;
1:71669cb:                         }
1:90b66ce:                     }
1:57b16b1:                     if ((name.equals("AMQ_SCHEDULED_DELAY") || name.equals("AMQ_SCHEDULED_PERIOD"))) {
1:57b16b1:                         if (value != null) {
1:57b16b1:                             String str = value.toString().trim();
1:57b16b1:                             if (str.length() > 0) {
1:57b16b1:                                 message.setLongProperty(name, Long.parseLong(str));
1:57b16b1:                             }
1:90b66ce:                         }
1:57b16b1:                     } else if (name.equals("AMQ_SCHEDULED_REPEAT")) {
1:57b16b1:                         if (value != null) {
1:57b16b1:                             String str = value.toString().trim();
1:57b16b1:                             if (str.length() > 0) {
1:57b16b1:                                 message.setIntProperty(name, Integer.parseInt(str));
1:57b16b1:                             }
1:57b16b1:                         }
1:57b16b1:                     } else if (name.equals("AMQ_SCHEDULED_CRON")) {
1:57b16b1:                         if (value != null) {
1:57b16b1:                             String str = value.toString().trim();
1:57b16b1:                             if (str.length() > 0) {
1:57b16b1:                                 message.setStringProperty(name, str);
1:57b16b1:                             }
1:57b16b1:                         }
2:57b16b1:                     } else {
1:57b16b1:                         if (value instanceof String) {
1:57b16b1:                             String text = value.toString().trim();
1:57b16b1:                             if (text.length() == 0) {
1:57b16b1:                                 value = null;
1:540dd5c:                             } else {
1:57b16b1:                                 value = text;
1:57b16b1:                             }
1:57b16b1:                         }
1:57b16b1:                         if (value != null) {
1:57b16b1:                             message.setObjectProperty(name, value);
1:57b16b1:                         }
1:71669cb:                     }
1:71669cb:                 }
1:90b66ce:             }
1:90b66ce:         }
1:90b66ce:     }
1:90b66ce:     protected boolean isValidPropertyName(String name) {
1:90b66ce:         // allow JMSX extensions or non JMS properties
1:90b66ce:         return name.startsWith("JMSX") || !name.startsWith("JMS");
1:90b66ce:     }
1:7557f0c: 
1:7557f0c:     public String[] getSupportedHttpMethods() {
1:7557f0c:         return new String[]{"POST"};
1:7557f0c:     }
1:9dc43f3: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:b0bf0a2
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7557f0c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         if (correlationID != null) {
1:             correlationID = correlationID.trim();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (replyTo != null) {
1:             replyTo = replyTo.trim();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (type != null) {
1:             type = type.trim();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (messageCountHeader != null) {
1:             messageCountHeader = messageCountHeader.trim();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:                     continue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String[] getSupportedHttpMethods() {
1:         return new String[]{"POST"};
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private String jmsText;
1:     private boolean jmsPersistent;
1:     private int jmsPriority;
1:     private int jmsTimeToLive = -1;
1:     private String jmsCorrelationID;
1:     private String jmsReplyTo;
1:     private String jmsType;
1:     private int jmsMessageCount = 1;
1:     private String jmsMessageCountHeader = "JMSXMessageNumber";
/////////////////////////////////////////////////////////////////////////
1:         if (jmsMessageCount <= 1) {
1:             jmsMessageCount = 1;
1:         for (int i = 0; i < jmsMessageCount; i++) {
1:             if (jmsMessageCount > 1) {
1:                 message.setIntProperty(jmsMessageCountHeader, i + 1);
1:             client.send(dest, message, jmsPersistent, jmsPriority, jmsTimeToLive);
/////////////////////////////////////////////////////////////////////////
1:         return jmsCorrelationID;
1:         jmsCorrelationID = correlationID;
1:         return jmsReplyTo;
1:         jmsReplyTo = replyTo;
1:         return jmsType;
1:         jmsType = type;
1:         return jmsPersistent;
1:         this.jmsPersistent = persistent;
1:         return jmsPriority;
1:         this.jmsPriority = priority;
1:         return jmsText;
1:         this.jmsText = text;
1:         return jmsTimeToLive;
1:         this.jmsTimeToLive = timeToLive;
1:         return jmsMessageCount;
1:         jmsMessageCount = copies;
1:         return jmsMessageCountHeader;
1:         jmsMessageCountHeader = messageCountHeader;
1:         if (jmsText != null) {
1:             return client.getSession().createTextMessage(jmsText);
1:         message.setJMSCorrelationID(jmsCorrelationID);
1:         if (jmsReplyTo != null && jmsReplyTo.trim().length() > 0) {
1:             message.setJMSReplyTo(ActiveMQDestination.createDestination(jmsReplyTo, ActiveMQDestination.QUEUE_TYPE));
1:         message.setJMSType(jmsType);
0:                 Map.Entry entry = (Map.Entry)iter.next();
0:                 String name = (String)entry.getKey();
0:                         String[] array = (String[])value;
1:                         } else {
/////////////////////////////////////////////////////////////////////////
1:                         } else {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2895197
/////////////////////////////////////////////////////////////////////////
1:                 if (name.equals("secret")) {
0:                 	continue;
1:                 }
commit:9dc43f3
/////////////////////////////////////////////////////////////////////////
1:     
0: 	public String[] getSupportedHttpMethods() {
0: 		return new String[]{"POST"};
1: 	}
author:Robert Davies
-------------------------------------------------------------------------------
commit:57b16b1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected void sendMessages(HttpServletRequest request, WebClient client, ActiveMQDestination dest)
1:             throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:                 Map.Entry entry = (Map.Entry) iter.next();
1:                 String name = (String) entry.getKey();
1:                         String[] array = (String[]) value;
1:                     if ((name.equals("AMQ_SCHEDULED_DELAY") || name.equals("AMQ_SCHEDULED_PERIOD"))) {
1:                         if (value != null) {
1:                             String str = value.toString().trim();
1:                             if (str.length() > 0) {
1:                                 message.setLongProperty(name, Long.parseLong(str));
1:                             }
1:                     } else if (name.equals("AMQ_SCHEDULED_REPEAT")) {
1:                         if (value != null) {
1:                             String str = value.toString().trim();
1:                             if (str.length() > 0) {
1:                                 message.setIntProperty(name, Integer.parseInt(str));
1:                             }
1:                         }
1:                     } else if (name.equals("AMQ_SCHEDULED_CRON")) {
1:                         if (value != null) {
1:                             String str = value.toString().trim();
1:                             if (str.length() > 0) {
1:                                 message.setStringProperty(name, str);
1:                             }
1:                         }
1:                     } else {
1:                         if (value instanceof String) {
1:                             String text = value.toString().trim();
1:                             if (text.length() == 0) {
1:                                 value = null;
1:                             } else {
1:                                 value = text;
1:                             }
1:                         }
1:                         if (value != null) {
1:                             message.setObjectProperty(name, value);
1:                         }
author:James Strachan
-------------------------------------------------------------------------------
commit:87f75b2
/////////////////////////////////////////////////////////////////////////
commit:8a5e197
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.web.BrokerFacade;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public SendMessage(BrokerFacade brokerFacade) {
1:         super(brokerFacade);
commit:71669cb
/////////////////////////////////////////////////////////////////////////
0:         if (JMSReplyTo != null && JMSReplyTo.trim().length() > 0) {
/////////////////////////////////////////////////////////////////////////
0:                     if (value instanceof String) {
0:                         String text = value.toString().trim();
0:                         if (text.length() == 0) {
1:                             value = null;
1:                         }
0:                         else {
0:                             value = text;
1:                         }
1:                     }
commit:09a3830
/////////////////////////////////////////////////////////////////////////
1:     public String getJMSMessageCountHeader() {
0:         return JMSMessageCountHeader;
1:     }
1: 
1:     public void setJMSMessageCountHeader(String messageCountHeader) {
0:         JMSMessageCountHeader = messageCountHeader;
1:     }
1: 
commit:90b66ce
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.controller;
1: 
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.web.DestinationFacade;
1: import org.apache.activemq.web.WebClient;
1: import org.springframework.web.servlet.ModelAndView;
1: import org.springframework.web.servlet.mvc.Controller;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.servlet.http.HttpServletRequest;
0: import javax.servlet.http.HttpServletResponse;
1: 
0: import java.util.Iterator;
0: import java.util.Map;
1: 
1: /**
1:  * Sends a message
0:  * 
0:  * @version $Revision$
1:  */
1: public class SendMessage extends DestinationFacade implements Controller {
1: 
0:     private String JMSText;
0:     private boolean JMSPersistent;
0:     private int JMSPriority;
0:     private int JMSTimeToLive = -1;
0:     private String JMSCorrelationID;
0:     private String JMSReplyTo;
0:     private String JMSType;
0:     private int JMSMessageCount = 1;
0:     private String JMSMessageCountHeader = "JMSXMessageNumber";
1:     private boolean redirectToBrowse;
1: 
0:     public SendMessage(BrokerService brokerService) {
0:         super(brokerService);
1:     }
1: 
1:     public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
1:         WebClient client = WebClient.getWebClient(request);
1:         ActiveMQDestination dest = createDestination();
1: 
1:         sendMessages(request, client, dest);
1:         if (redirectToBrowse) {
1:             if (isQueue()) {
1:                 return new ModelAndView("redirect:browse.jsp?destination=" + getJMSDestination());
1:             }
1:         }
1:         return redirectToBrowseView();
1:     }
1: 
0:     protected void sendMessages(HttpServletRequest request, WebClient client, ActiveMQDestination dest) throws JMSException {
0:         if (JMSMessageCount <= 1) {
0:             JMSMessageCount = 1;
1:         }
0:         for (int i = 0; i < JMSMessageCount; i++) {
1:             Message message = createMessage(client, request);
1:             appendHeaders(message, request);
0:             if (JMSMessageCount > 1) {
0:                 message.setIntProperty(JMSMessageCountHeader, i + 1);
1:             }
1: 
0:             client.send(dest, message, JMSPersistent, JMSPriority, JMSTimeToLive);
1: 
0:             System.out.println("Sent message: " + message);
1:         }
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public String getJMSCorrelationID() {
0:         return JMSCorrelationID;
1:     }
1: 
1:     public void setJMSCorrelationID(String correlationID) {
0:         JMSCorrelationID = correlationID;
1:     }
1: 
1:     public String getJMSReplyTo() {
0:         return JMSReplyTo;
1:     }
1: 
1:     public void setJMSReplyTo(String replyTo) {
0:         JMSReplyTo = replyTo;
1:     }
1: 
1:     public String getJMSType() {
0:         return JMSType;
1:     }
1: 
1:     public void setJMSType(String type) {
0:         JMSType = type;
1:     }
1: 
1:     public boolean isJMSPersistent() {
0:         return JMSPersistent;
1:     }
1: 
1:     public void setJMSPersistent(boolean persistent) {
0:         this.JMSPersistent = persistent;
1:     }
1: 
1:     public int getJMSPriority() {
0:         return JMSPriority;
1:     }
1: 
1:     public void setJMSPriority(int priority) {
0:         this.JMSPriority = priority;
1:     }
1: 
1:     public String getJMSText() {
0:         return JMSText;
1:     }
1: 
1:     public void setJMSText(String text) {
0:         this.JMSText = text;
1:     }
1: 
1:     public int getJMSTimeToLive() {
0:         return JMSTimeToLive;
1:     }
1: 
1:     public void setJMSTimeToLive(int timeToLive) {
0:         this.JMSTimeToLive = timeToLive;
1:     }
1: 
1:     public int getJMSMessageCount() {
0:         return JMSMessageCount;
1:     }
1: 
1:     public void setJMSMessageCount(int copies) {
0:         JMSMessageCount = copies;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected Message createMessage(WebClient client, HttpServletRequest request) throws JMSException {
0:         if (JMSText != null) {
0:             return client.getSession().createTextMessage(JMSText);
1:         }
1:         // TODO create Bytes message from request body...
1:         return client.getSession().createMessage();
1:     }
1: 
1:     protected void appendHeaders(Message message, HttpServletRequest request) throws JMSException {
0:         message.setJMSCorrelationID(JMSCorrelationID);
0:         if (JMSReplyTo != null) {
0:             message.setJMSReplyTo(ActiveMQDestination.createDestination(JMSReplyTo, ActiveMQDestination.QUEUE_TYPE));
1:         }
0:         message.setJMSType(JMSType);
1: 
1:         // now lets add all of the parameters
1:         Map map = request.getParameterMap();
1:         if (map != null) {
1:             for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {
0:                 Map.Entry entry = (Map.Entry) iter.next();
0:                 String name = (String) entry.getKey();
1:                 Object value = entry.getValue();
1:                 if (isValidPropertyName(name)) {
1:                     if (value instanceof String[]) {
0:                         String[] array = (String[]) value;
1:                         if (array.length > 0) {
1:                             value = array[0];
1:                         }
0:                         else {
0:                             value = null;
1:                         }
1:                     }
0:                     if (value != null) {
0:                         message.setObjectProperty(name, value);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected boolean isValidPropertyName(String name) {
1:         // allow JMSX extensions or non JMS properties
1:         return name.startsWith("JMSX") || !name.startsWith("JMS");
1:     }
1: }
============================================================================