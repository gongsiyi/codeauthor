1:fc00993: /**
1:8cf4795:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8cf4795:  * contributor license agreements.  See the NOTICE file distributed with
1:8cf4795:  * this work for additional information regarding copyright ownership.
1:8cf4795:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8cf4795:  * (the "License"); you may not use this file except in compliance with
1:8cf4795:  * the License.  You may obtain a copy of the License at
1:05a8cba:  *
1:8cf4795:  *      http://www.apache.org/licenses/LICENSE-2.0
4:8cf4795:  *
1:8cf4795:  * Unless required by applicable law or agreed to in writing, software
1:8cf4795:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8cf4795:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8cf4795:  * See the License for the specific language governing permissions and
1:8cf4795:  * limitations under the License.
1:8cf4795:  */
1:8cf4795: package org.apache.activemq.command;
4:8cf4795: 
1:8cf4795: import java.io.IOException;
1:8cf4795: import java.io.InputStream;
1:8cf4795: import java.net.MalformedURLException;
1:8cf4795: import java.net.URL;
1:8cf4795: 
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.BlobMessage;
1:b08ae50: import org.apache.activemq.blob.BlobDownloader;
1:74a7a8b: import org.apache.activemq.blob.BlobUploader;
1:74a7a8b: import org.apache.activemq.util.JMSExceptionSupport;
1:74a7a8b: 
1:8cf4795: /**
1:8cf4795:  * An implementation of {@link BlobMessage} for out of band BLOB transfer
1:b0c2a40:  * 
1:74a7a8b:  * 
1:8cf4795:  * @openwire:marshaller code="29"
1:8cf4795:  */
1:8cf4795: public class ActiveMQBlobMessage extends ActiveMQMessage implements BlobMessage {
1:8cf4795:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_BLOB_MESSAGE;
1:8cf4795: 
1:8cf4795:     public static final String BINARY_MIME_TYPE = "application/octet-stream";
1:8cf4795: 
1:8cf4795:     private String remoteBlobUrl;
1:8cf4795:     private String mimeType;
1:05a8cba:     private String name;
1:8cf4795:     private boolean deletedByBroker;
1:8cf4795: 
1:8cf4795:     private transient BlobUploader blobUploader;
1:b08ae50:     private transient BlobDownloader blobDownloader;
1:8cf4795:     private transient URL url;
1:8cf4795: 
1:8cf4795:     public Message copy() {
1:8cf4795:         ActiveMQBlobMessage copy = new ActiveMQBlobMessage();
1:8cf4795:         copy(copy);
1:8cf4795:         return copy;
3:8cf4795:     }
1:af159dd: 
1:8cf4795:     private void copy(ActiveMQBlobMessage copy) {
1:8cf4795:         super.copy(copy);
1:8cf4795:         copy.setRemoteBlobUrl(getRemoteBlobUrl());
1:8cf4795:         copy.setMimeType(getMimeType());
1:8cf4795:         copy.setDeletedByBroker(isDeletedByBroker());
1:3103fa9:         copy.setBlobUploader(getBlobUploader());
1:78a54c9:         copy.setName(getName());
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public byte getDataStructureType() {
1:8cf4795:         return DATA_STRUCTURE_TYPE;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     /**
1:8cf4795:      * @openwire:property version=3 cache=false
1:8cf4795:      */
1:8cf4795:     public String getRemoteBlobUrl() {
1:8cf4795:         return remoteBlobUrl;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void setRemoteBlobUrl(String remoteBlobUrl) {
1:8cf4795:         this.remoteBlobUrl = remoteBlobUrl;
1:8cf4795:         url = null;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     /**
1:74a7a8b:      * The MIME type of the BLOB which can be used to apply different content
1:74a7a8b:      * types to messages.
1:74a7a8b:      * 
1:8cf4795:      * @openwire:property version=3 cache=true
1:8cf4795:      */
1:8cf4795:     public String getMimeType() {
1:8cf4795:         if (mimeType == null) {
1:8cf4795:             return BINARY_MIME_TYPE;
1:8cf4795:         }
1:8cf4795:         return mimeType;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void setMimeType(String mimeType) {
1:8cf4795:         this.mimeType = mimeType;
1:8cf4795:     }
1:8cf4795: 
1:05a8cba:     public String getName() {
1:05a8cba:         return name;
1:05a8cba:     }
1:05a8cba: 
1:05a8cba:     /**
1:74a7a8b:      * The name of the attachment which can be useful information if
1:74a7a8b:      * transmitting files over ActiveMQ
1:74a7a8b:      * 
1:05a8cba:      * @openwire:property version=3 cache=false
1:05a8cba:      */
1:05a8cba:     public void setName(String name) {
1:05a8cba:         this.name = name;
1:05a8cba:     }
1:05a8cba: 
1:8cf4795:     /**
1:8cf4795:      * @openwire:property version=3 cache=false
1:8cf4795:      */
1:8cf4795:     public boolean isDeletedByBroker() {
1:8cf4795:         return deletedByBroker;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void setDeletedByBroker(boolean deletedByBroker) {
1:8cf4795:         this.deletedByBroker = deletedByBroker;
1:8cf4795:     }
1:8cf4795: 
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return getMimeType();
1:05a8cba:     }
1:05a8cba: 
1:8cf4795:     public InputStream getInputStream() throws IOException, JMSException {
1:b08ae50:         if(blobDownloader == null) {
1:8cf4795:             return null;
1:8cf4795:         }
1:b08ae50:         return blobDownloader.getInputStream(this);
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public URL getURL() throws JMSException {
1:8cf4795:         if (url == null && remoteBlobUrl != null) {
1:8cf4795:             try {
1:8cf4795:                 url = new URL(remoteBlobUrl);
1:74a7a8b:             } catch (MalformedURLException e) {
1:8cf4795:                 throw JMSExceptionSupport.create(e);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:         return url;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void setURL(URL url) {
1:8cf4795:         this.url = url;
1:8cf4795:         remoteBlobUrl = url != null ? url.toExternalForm() : null;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public BlobUploader getBlobUploader() {
1:8cf4795:         return blobUploader;
1:8cf4795:     }
1:8cf4795: 
1:8cf4795:     public void setBlobUploader(BlobUploader blobUploader) {
1:8cf4795:         this.blobUploader = blobUploader;
1:8cf4795:     }
1:8cf4795: 
1:b08ae50:     public BlobDownloader getBlobDownloader() {
1:b08ae50:         return blobDownloader;
1:b08ae50:     }
1:b08ae50: 
1:b08ae50:     public void setBlobDownloader(BlobDownloader blobDownloader) {
1:b08ae50:         this.blobDownloader = blobDownloader;
1:b08ae50:     }
1:b08ae50: 
1:8cf4795:     public void onSend() throws JMSException {
1:8cf4795:         super.onSend();
1:8cf4795: 
1:74a7a8b:         // lets ensure we upload the BLOB first out of band before we send the
1:74a7a8b:         // message
1:8cf4795:         if (blobUploader != null) {
1:8cf4795:             try {
1:8cf4795:                 URL value = blobUploader.upload(this);
1:8cf4795:                 setURL(value);
1:74a7a8b:             } catch (IOException e) {
1:8cf4795:                 throw JMSExceptionSupport.create(e);
1:8cf4795:             }
1:8cf4795:         }
1:8cf4795:     }
1:8cf4795:     
1:af159dd:     public void deleteFile() throws IOException, JMSException {
1:af159dd:         blobDownloader.deleteFile(this);
1:af159dd:     }
1:8cf4795: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.BlobMessage;
1: import org.apache.activemq.blob.BlobUploader;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1:  * 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * The MIME type of the BLOB which can be used to apply different content
1:      * types to messages.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * The name of the attachment which can be useful information if
1:      * transmitting files over ActiveMQ
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             } catch (MalformedURLException e) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // lets ensure we upload the BLOB first out of band before we send the
1:         // message
1:             } catch (IOException e) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:78a54c9
/////////////////////////////////////////////////////////////////////////
1:         copy.setName(getName());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void deleteFile() throws IOException, JMSException {
1:         blobDownloader.deleteFile(this);
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.blob.BlobDownloader;
/////////////////////////////////////////////////////////////////////////
1:     private transient BlobDownloader blobDownloader;
/////////////////////////////////////////////////////////////////////////
1:         if(blobDownloader == null) {
1:         return blobDownloader.getInputStream(this);
/////////////////////////////////////////////////////////////////////////
1:     public BlobDownloader getBlobDownloader() {
1:         return blobDownloader;
1:     }
1: 
1:     public void setBlobDownloader(BlobDownloader blobDownloader) {
1:         this.blobDownloader = blobDownloader;
1:     }
1: 
commit:3103fa9
/////////////////////////////////////////////////////////////////////////
1:         copy.setBlobUploader(getBlobUploader());
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
1:     private String name;
/////////////////////////////////////////////////////////////////////////
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     /**
0:      * The name of the attachment which can be useful information if transmitting files over ActiveMQ
1:      *
1:      * @openwire:property version=3 cache=false
1:      */
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getJMSXMimeType() {
1:         return getMimeType();
1:     }
1: 
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import org.apache.activemq.BlobMessage;
0: import org.apache.activemq.blob.BlobUploader;
0: import org.apache.activemq.util.JMSExceptionSupport;
1: 
0: import javax.jms.JMSException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
1: /**
1:  * An implementation of {@link BlobMessage} for out of band BLOB transfer
1:  *
0:  * @version $Revision: $
1:  * @openwire:marshaller code="29"
1:  */
1: public class ActiveMQBlobMessage extends ActiveMQMessage implements BlobMessage {
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_BLOB_MESSAGE;
1: 
1:     public static final String BINARY_MIME_TYPE = "application/octet-stream";
1: 
1:     private String remoteBlobUrl;
1:     private String mimeType;
1:     private boolean deletedByBroker;
1: 
1:     private transient BlobUploader blobUploader;
1:     private transient URL url;
1: 
1: 
1:     public Message copy() {
1:         ActiveMQBlobMessage copy = new ActiveMQBlobMessage();
1:         copy(copy);
1:         return copy;
1:     }
1: 
1:     private void copy(ActiveMQBlobMessage copy) {
1:         super.copy(copy);
1:         copy.setRemoteBlobUrl(getRemoteBlobUrl());
1:         copy.setMimeType(getMimeType());
1:         copy.setDeletedByBroker(isDeletedByBroker());
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
1:      * @openwire:property version=3 cache=false
1:      */
1:     public String getRemoteBlobUrl() {
1:         return remoteBlobUrl;
1:     }
1: 
1:     public void setRemoteBlobUrl(String remoteBlobUrl) {
1:         this.remoteBlobUrl = remoteBlobUrl;
1:         url = null;
1:     }
1: 
1:     /**
0:      * The MIME type of the BLOB which can be used to apply different content types to messages.
1:      *
1:      * @openwire:property version=3 cache=true
1:      */
1:     public String getMimeType() {
1:         if (mimeType == null) {
1:             return BINARY_MIME_TYPE;
1:         }
1:         return mimeType;
1:     }
1: 
1:     public void setMimeType(String mimeType) {
1:         this.mimeType = mimeType;
1:     }
1: 
1:     /**
1:      * @openwire:property version=3 cache=false
1:      */
1:     public boolean isDeletedByBroker() {
1:         return deletedByBroker;
1:     }
1: 
1:     public void setDeletedByBroker(boolean deletedByBroker) {
1:         this.deletedByBroker = deletedByBroker;
1:     }
1: 
1:     public InputStream getInputStream() throws IOException, JMSException {
0:         URL value = getURL();
0:         if (value == null) {
1:             return null;
1:         }
0:         return value.openStream();
1:     }
1: 
1:     public URL getURL() throws JMSException {
1:         if (url == null && remoteBlobUrl != null) {
1:             try {
1:                 url = new URL(remoteBlobUrl);
1:             }
0:             catch (MalformedURLException e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:         return url;
1:     }
1: 
1:     public void setURL(URL url) {
1:         this.url = url;
1:         remoteBlobUrl = url != null ? url.toExternalForm() : null;
1:     }
1: 
1: 
1:     public BlobUploader getBlobUploader() {
1:         return blobUploader;
1:     }
1: 
1:     public void setBlobUploader(BlobUploader blobUploader) {
1:         this.blobUploader = blobUploader;
1:     }
1: 
1:     public void onSend() throws JMSException {
1:         super.onSend();
1: 
0:         // lets ensure we upload the BLOB first out of band before we send the message
1:         if (blobUploader != null) {
1:             try {
1:                 URL value = blobUploader.upload(this);
1:                 setURL(value);
1:             }
0:             catch (IOException e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:     }
1: }
============================================================================