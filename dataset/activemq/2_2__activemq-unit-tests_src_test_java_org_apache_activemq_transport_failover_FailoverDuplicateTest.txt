1:6778a49: /**
1:6778a49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6778a49:  * contributor license agreements.  See the NOTICE file distributed with
1:6778a49:  * this work for additional information regarding copyright ownership.
1:6778a49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6778a49:  * (the "License"); you may not use this file except in compliance with
1:6778a49:  * the License.  You may obtain a copy of the License at
1:6778a49:  *
1:6778a49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6778a49:  *
1:6778a49:  * Unless required by applicable law or agreed to in writing, software
1:6778a49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6778a49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6778a49:  * See the License for the specific language governing permissions and
1:6778a49:  * limitations under the License.
1:6778a49:  */
1:6778a49: package org.apache.activemq.transport.failover;
1:6778a49: 
1:6778a49: import java.util.concurrent.CountDownLatch;
1:6778a49: import java.util.concurrent.Executors;
1:6778a49: import java.util.concurrent.TimeUnit;
1:6778a49: import java.util.concurrent.atomic.AtomicBoolean;
1:6778a49: import java.util.concurrent.atomic.AtomicInteger;
1:6778a49: 
1:6778a49: import javax.jms.Connection;
1:6778a49: import javax.jms.JMSException;
1:6778a49: import javax.jms.Message;
1:6778a49: import javax.jms.MessageConsumer;
1:6778a49: import javax.jms.MessageListener;
1:6778a49: import javax.jms.MessageProducer;
1:6778a49: import javax.jms.Queue;
1:6778a49: import javax.jms.Session;
1:6778a49: import javax.jms.TextMessage;
1:6778a49: 
1:6778a49: import org.apache.activemq.ActiveMQConnectionFactory;
1:6778a49: import org.apache.activemq.TestSupport;
1:6778a49: import org.apache.activemq.broker.BrokerPlugin;
1:6778a49: import org.apache.activemq.broker.BrokerPluginSupport;
1:6778a49: import org.apache.activemq.broker.BrokerService;
1:6778a49: import org.apache.activemq.broker.ProducerBrokerExchange;
1:6778a49: import org.apache.activemq.broker.region.RegionBroker;
1:6778a49: import org.apache.activemq.util.Wait;
1:6778a49: import org.slf4j.Logger;
1:6778a49: import org.slf4j.LoggerFactory;
1:6778a49: 
1:6778a49: public class FailoverDuplicateTest extends TestSupport {
1:6778a49: 
1:6778a49:     private static final Logger LOG = LoggerFactory.getLogger(FailoverDuplicateTest.class);
1:6778a49:     private static final String QUEUE_NAME = "TestQueue";
1:6778a49:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:6778a49:     private String url;
1:6778a49:     BrokerService broker;
1:6778a49: 
1:4743a20:     @Override
1:6778a49:     public void tearDown() throws Exception {
1:6778a49:         stopBroker();
2:6778a49:     }
1:6778a49: 
1:6778a49:     public void stopBroker() throws Exception {
1:6778a49:         if (broker != null) {
1:6778a49:             broker.stop();
1:6778a49:         }
1:6778a49:     }
1:6778a49: 
1:6778a49:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:6778a49:         broker = createBroker(deleteAllMessagesOnStartup);
1:6778a49:         broker.start();
1:6778a49:     }
1:6778a49: 
1:6778a49:     public void startBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:6778a49:         broker = createBroker(deleteAllMessagesOnStartup, bindAddress);
1:6778a49:         broker.start();
1:6778a49:     }
1:6778a49: 
1:6778a49:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:6778a49:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:6778a49:     }
1:6778a49: 
1:6778a49:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:6778a49:         broker = new BrokerService();
1:6778a49:         broker.setUseJmx(false);
1:6778a49:         broker.setAdvisorySupport(false);
1:6778a49:         broker.addConnector(bindAddress);
1:6778a49:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:6778a49: 
1:6778a49:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:6778a49: 
1:6778a49:         return broker;
1:6778a49:     }
1:6778a49: 
1:6778a49:     public void configureConnectionFactory(ActiveMQConnectionFactory factory) {
1:6778a49:         factory.setAuditMaximumProducerNumber(2048);
1:6778a49:         factory.setOptimizeAcknowledge(true);
1:6778a49:     }
1:6778a49: 
1:6778a49:     @SuppressWarnings("unchecked")
1:6778a49:     public void testFailoverSendReplyLost() throws Exception {
1:6778a49: 
1:6778a49:         broker = createBroker(true);
1:6778a49:         setDefaultPersistenceAdapter(broker);
1:6778a49: 
1:6778a49:         final CountDownLatch gotMessageLatch = new CountDownLatch(1);
1:6778a49:         final CountDownLatch producersDone = new CountDownLatch(1);
1:6778a49:         final AtomicBoolean first = new AtomicBoolean(false);
1:6778a49:         broker.setPlugins(new BrokerPlugin[]{
1:6778a49:                 new BrokerPluginSupport() {
1:6778a49:                     @Override
1:6778a49:                     public void send(final ProducerBrokerExchange producerExchange,
1:6778a49:                                      org.apache.activemq.command.Message messageSend)
1:6778a49:                             throws Exception {
1:6778a49:                         // so send will hang as if reply is lost
1:6778a49:                         super.send(producerExchange, messageSend);
1:6778a49:                         if (first.compareAndSet(false, true)) {
1:6778a49:                             producerExchange.getConnectionContext().setDontSendReponse(true);
1:6778a49:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:4743a20:                                 @Override
1:6778a49:                                 public void run() {
1:6778a49:                                     try {
1:6778a49:                                         LOG.info("Waiting for recepit");
1:6778a49:                                         assertTrue("message received on time", gotMessageLatch.await(60, TimeUnit.SECONDS));
1:6778a49:                                         assertTrue("new producers done on time", producersDone.await(120, TimeUnit.SECONDS));
1:6778a49:                                         LOG.info("Stopping connection post send and receive and multiple producers");
1:6778a49:                                         producerExchange.getConnectionContext().getConnection().stop();
1:6778a49:                                     } catch (Exception e) {
1:6778a49:                                         e.printStackTrace();
1:6778a49:                                     }
1:6778a49:                                 }
1:6778a49:                             });
1:6778a49:                         }
1:6778a49:                     }
1:6778a49:                 }
1:6778a49:         });
1:6778a49:         broker.start();
1:6778a49: 
1:6778a49:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")?jms.watchTopicAdvisories=false");
1:6778a49:         configureConnectionFactory(cf);
1:6778a49:         Connection sendConnection = cf.createConnection();
1:6778a49:         sendConnection.start();
1:6778a49: 
1:6778a49:         final Session sendSession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6778a49:         final Queue destination = sendSession.createQueue(QUEUE_NAME);
1:6778a49: 
1:6778a49: 
1:6778a49:         final AtomicInteger receivedCount = new AtomicInteger();
1:6778a49:         MessageListener listener = new MessageListener() {
1:6778a49:             @Override
1:6778a49:             public void onMessage(Message message) {
1:6778a49:                 gotMessageLatch.countDown();
1:6778a49:                 receivedCount.incrementAndGet();
1:6778a49:             }
1:6778a49:         };
1:6778a49:         Connection receiveConnection;
1:6778a49:         Session receiveSession = null;
1:6778a49:         receiveConnection = cf.createConnection();
1:6778a49:         receiveConnection.start();
1:6778a49:         receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6778a49:         receiveSession.createConsumer(destination).setMessageListener(listener);
1:6778a49: 
1:6778a49:         final CountDownLatch sendDoneLatch = new CountDownLatch(1);
1:6778a49:         // broker will die on send reply so this will hang till restart
1:6778a49:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:4743a20:             @Override
1:6778a49:             public void run() {
1:6778a49:                 LOG.info("doing async send...");
1:6778a49:                 try {
1:6778a49:                     produceMessage(sendSession, destination, "will resend", 1);
1:6778a49:                 } catch (JMSException e) {
1:6778a49:                     LOG.error("got send exception: ", e);
1:6778a49:                     fail("got unexpected send exception" + e);
1:6778a49:                 }
1:6778a49:                 sendDoneLatch.countDown();
1:6778a49:                 LOG.info("done async send");
1:6778a49:             }
1:6778a49:         });
1:6778a49: 
1:6778a49: 
1:6778a49:         assertTrue("one message got through on time", gotMessageLatch.await(20, TimeUnit.SECONDS));
1:6778a49:         // send more messages, blow producer audit
1:6778a49:         final int numProducers = 1050;
1:6778a49:         final int numPerProducer = 2;
1:6778a49:         final int totalSent = numPerProducer * numProducers + 1;
1:6778a49:         for (int i=0; i<numProducers; i++) {
1:6778a49:             produceMessage(receiveSession, destination, "new producer " + i, numPerProducer);
1:6778a49:             // release resend when we half done, cursor audit exhausted
1:6778a49:             // and concurrent dispatch with the resend
1:6778a49:             if (i == 1025) {
1:6778a49:                 LOG.info("count down producers done");
1:6778a49:                 producersDone.countDown();
1:6778a49:             }
1:6778a49:         }
1:6778a49: 
1:6778a49:         assertTrue("message sent complete through failover", sendDoneLatch.await(30, TimeUnit.SECONDS));
1:6778a49: 
1:6778a49:         Wait.waitFor(new Wait.Condition() {
1:6778a49:             @Override
1:6778a49:             public boolean isSatisified() throws Exception {
1:6778a49:                 LOG.info("received count:" + receivedCount.get());
1:6778a49:                 return totalSent <= receivedCount.get();
1:6778a49:             }
1:6778a49:         });
1:6778a49:         assertEquals("we got all produced messages", totalSent, receivedCount.get());
1:6778a49:         sendConnection.close();
1:6778a49:         receiveConnection.close();
1:6778a49: 
1:6778a49:         // verify stats
1:82c4ab8:         assertEquals("expect all messages are dequeued with one duplicate to dlq", totalSent + 2, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());
1:6778a49: 
1:6778a49:         Wait.waitFor(new Wait.Condition() {
1:6778a49:             @Override
1:6778a49:             public boolean isSatisified() throws Exception {
1:6778a49:                 LOG.info("dequeues : "   + ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());
1:6778a49:                 return  totalSent + 1 <= ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount();
1:6778a49:             }
1:6778a49:         });
1:82c4ab8:         assertEquals("dequeue correct, including duplicate dispatch poisoned", totalSent  + 1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());
1:6778a49: 
1:6778a49:         // ensure no dangling messages with fresh broker etc
1:6778a49:         broker.stop();
1:6778a49:         broker.waitUntilStopped();
1:6778a49: 
1:6778a49:         LOG.info("Checking for remaining/hung messages with second restart..");
1:6778a49:         broker = createBroker(false, url);
1:6778a49:         setDefaultPersistenceAdapter(broker);
1:6778a49:         broker.start();
1:6778a49: 
1:6778a49:         // after restart, ensure no dangling messages
1:6778a49:         cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:6778a49:         configureConnectionFactory(cf);
1:6778a49:         sendConnection = cf.createConnection();
1:6778a49:         sendConnection.start();
1:6778a49:         Session session2 = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6778a49:         MessageConsumer consumer  = session2.createConsumer(destination);
1:6778a49:         Message msg = consumer.receive(1000);
1:6778a49:         if (msg == null) {
1:6778a49:             msg = consumer.receive(5000);
1:6778a49:         }
1:6778a49:         assertNull("no messges left dangling but got: " + msg, msg);
1:6778a49: 
1:6778a49:         sendConnection.close();
1:6778a49:     }
1:6778a49: 
1:6778a49: 
1:6778a49:     private void produceMessage(final Session producerSession, Queue destination, final String text, final int count)
1:6778a49:             throws JMSException {
1:6778a49:         MessageProducer producer = producerSession.createProducer(destination);
1:6778a49:         for (int i=0; i<count; i++) {
1:6778a49:             TextMessage message = producerSession.createTextMessage(text + ", count:" + i);
1:6778a49:             producer.send(message);
1:6778a49:         }
1:6778a49:         producer.close();
1:6778a49:     }
1:6778a49: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:82c4ab8
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("expect all messages are dequeued with one duplicate to dlq", totalSent + 2, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("dequeue correct, including duplicate dispatch poisoned", totalSent  + 1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());
commit:6778a49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class FailoverDuplicateTest extends TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverDuplicateTest.class);
1:     private static final String QUEUE_NAME = "TestQueue";
1:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:     private String url;
1:     BrokerService broker;
1: 
1: 
1:     public void tearDown() throws Exception {
1:         stopBroker();
1:     }
1: 
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
0:     private void startCleanBroker() throws Exception {
0:         startBroker(true);
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup);
1:         broker.start();
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup, bindAddress);
1:         broker.start();
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector(bindAddress);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1: 
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1: 
1:         return broker;
1:     }
1: 
1:     public void configureConnectionFactory(ActiveMQConnectionFactory factory) {
1:         factory.setAuditMaximumProducerNumber(2048);
1:         factory.setOptimizeAcknowledge(true);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     public void testFailoverSendReplyLost() throws Exception {
1: 
1:         broker = createBroker(true);
1:         setDefaultPersistenceAdapter(broker);
1: 
1:         final CountDownLatch gotMessageLatch = new CountDownLatch(1);
1:         final CountDownLatch producersDone = new CountDownLatch(1);
1:         final AtomicBoolean first = new AtomicBoolean(false);
1:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public void send(final ProducerBrokerExchange producerExchange,
1:                                      org.apache.activemq.command.Message messageSend)
1:                             throws Exception {
1:                         // so send will hang as if reply is lost
1:                         super.send(producerExchange, messageSend);
1:                         if (first.compareAndSet(false, true)) {
1:                             producerExchange.getConnectionContext().setDontSendReponse(true);
1:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                                 public void run() {
1:                                     try {
1:                                         LOG.info("Waiting for recepit");
1:                                         assertTrue("message received on time", gotMessageLatch.await(60, TimeUnit.SECONDS));
1:                                         assertTrue("new producers done on time", producersDone.await(120, TimeUnit.SECONDS));
1:                                         LOG.info("Stopping connection post send and receive and multiple producers");
1:                                         producerExchange.getConnectionContext().getConnection().stop();
1:                                     } catch (Exception e) {
1:                                         e.printStackTrace();
1:                                     }
1:                                 }
1:                             });
1:                         }
1:                     }
1:                 }
1:         });
1:         broker.start();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + url + ")?jms.watchTopicAdvisories=false");
1:         configureConnectionFactory(cf);
1:         Connection sendConnection = cf.createConnection();
1:         sendConnection.start();
1: 
1:         final Session sendSession = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue destination = sendSession.createQueue(QUEUE_NAME);
1: 
1: 
1:         final AtomicInteger receivedCount = new AtomicInteger();
1:         MessageListener listener = new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 gotMessageLatch.countDown();
1:                 receivedCount.incrementAndGet();
1:             }
1:         };
1:         Connection receiveConnection;
1:         Session receiveSession = null;
1:         receiveConnection = cf.createConnection();
1:         receiveConnection.start();
1:         receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         receiveSession.createConsumer(destination).setMessageListener(listener);
1: 
1:         final CountDownLatch sendDoneLatch = new CountDownLatch(1);
1:         // broker will die on send reply so this will hang till restart
1:         Executors.newSingleThreadExecutor().execute(new Runnable() {
1:             public void run() {
1:                 LOG.info("doing async send...");
1:                 try {
1:                     produceMessage(sendSession, destination, "will resend", 1);
1:                 } catch (JMSException e) {
1:                     LOG.error("got send exception: ", e);
1:                     fail("got unexpected send exception" + e);
1:                 }
1:                 sendDoneLatch.countDown();
1:                 LOG.info("done async send");
1:             }
1:         });
1: 
1: 
1:         assertTrue("one message got through on time", gotMessageLatch.await(20, TimeUnit.SECONDS));
1:         // send more messages, blow producer audit
1:         final int numProducers = 1050;
1:         final int numPerProducer = 2;
1:         final int totalSent = numPerProducer * numProducers + 1;
1:         for (int i=0; i<numProducers; i++) {
1:             produceMessage(receiveSession, destination, "new producer " + i, numPerProducer);
1:             // release resend when we half done, cursor audit exhausted
1:             // and concurrent dispatch with the resend
1:             if (i == 1025) {
1:                 LOG.info("count down producers done");
1:                 producersDone.countDown();
1:             }
1:         }
1: 
1:         assertTrue("message sent complete through failover", sendDoneLatch.await(30, TimeUnit.SECONDS));
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("received count:" + receivedCount.get());
1:                 return totalSent <= receivedCount.get();
1:             }
1:         });
1:         assertEquals("we got all produced messages", totalSent, receivedCount.get());
1:         sendConnection.close();
1:         receiveConnection.close();
1: 
1:         // verify stats
0:         assertEquals("expect all messages are dequeued with one duplicate", totalSent +1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getEnqueues().getCount());
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("dequeues : "   + ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());
1:                 return  totalSent + 1 <= ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount();
1:             }
1:         });
0:         assertEquals("dequeue correct, including duplicate dispatch auto acked", totalSent  + 1, ((RegionBroker) broker.getRegionBroker()).getDestinationStatistics().getDequeues().getCount());
1: 
1:         // ensure no dangling messages with fresh broker etc
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         LOG.info("Checking for remaining/hung messages with second restart..");
1:         broker = createBroker(false, url);
1:         setDefaultPersistenceAdapter(broker);
1:         broker.start();
1: 
1:         // after restart, ensure no dangling messages
1:         cf = new ActiveMQConnectionFactory("failover:(" + url + ")");
1:         configureConnectionFactory(cf);
1:         sendConnection = cf.createConnection();
1:         sendConnection.start();
1:         Session session2 = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer  = session2.createConsumer(destination);
1:         Message msg = consumer.receive(1000);
1:         if (msg == null) {
1:             msg = consumer.receive(5000);
1:         }
1:         assertNull("no messges left dangling but got: " + msg, msg);
1: 
1:         sendConnection.close();
1:     }
1: 
1: 
1:     private void produceMessage(final Session producerSession, Queue destination, final String text, final int count)
1:             throws JMSException {
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         for (int i=0; i<count; i++) {
1:             TextMessage message = producerSession.createTextMessage(text + ", count:" + i);
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                                 @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
============================================================================