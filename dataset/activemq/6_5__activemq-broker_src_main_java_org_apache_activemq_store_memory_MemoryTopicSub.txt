1:bb8d32c: /*
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:734fb7d:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:734fb7d:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:b1c94aa:  */
1:b1c94aa: package org.apache.activemq.store.memory;
3:b1c94aa: 
1:bb8d32c: import java.util.ArrayList;
1:b1c94aa: import java.util.Iterator;
1:b1c94aa: import java.util.LinkedHashMap;
1:bb8d32c: import java.util.List;
1:b1c94aa: import java.util.Map;
1:b1c94aa: import java.util.Map.Entry;
1:bb8d32c: 
1:b1c94aa: import org.apache.activemq.command.Message;
1:b1c94aa: import org.apache.activemq.command.MessageId;
1:b1c94aa: import org.apache.activemq.store.MessageRecoveryListener;
1:bb8d32c: import org.apache.activemq.util.SubscriptionKey;
1:b1c94aa: 
2:b1c94aa: /**
1:b1c94aa:  * A holder for a durable subscriber
1:b1c94aa:  */
1:f812e34: class MemoryTopicSub {
1:b1c94aa: 
1:bb8d32c:     private final Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
1:bb8d32c:     private final SubscriptionKey subscriptionKey;
1:bb8d32c: 
1:b1c94aa:     private MessageId lastBatch;
1:b1c94aa: 
1:bb8d32c:     public MemoryTopicSub(SubscriptionKey subscriptionKey) {
1:bb8d32c:         this.subscriptionKey = subscriptionKey;
1:bb8d32c:     }
1:bb8d32c: 
1:ce1d85d:     void addMessage(MessageId id, Message message) {
1:bb8d32c:         synchronized (this) {
1:ce1d85d:             map.put(id, message);
1:ce1d85d:         }
1:ce1d85d:         message.incrementReferenceCount();
1:cd687e3:     }
1:3a5f48d: 
1:ce1d85d:     void removeMessage(MessageId id) {
1:ce1d85d:         Message removed;
1:bb8d32c:         synchronized (this) {
1:ce1d85d:             removed = map.remove(id);
1:ce1d85d:             if ((lastBatch != null && lastBatch.equals(id)) || map.isEmpty()) {
1:ce1d85d:                 resetBatching();
1:ce1d85d:             }
1:ce1d85d:         }
1:bb8d32c:         if (removed != null) {
1:ce1d85d:             removed.decrementReferenceCount();
3:b1c94aa:         }
1:b1c94aa:     }
1:b1c94aa: 
1:bb8d32c:     List<Message> getStoredMessages() {
1:bb8d32c:         synchronized (this) {
1:bb8d32c:             return new ArrayList<Message>(map.values());
1:bb8d32c:         }
1:bb8d32c:     }
1:bb8d32c: 
1:2a153b0:     synchronized int size() {
1:b1c94aa:         return map.size();
1:b1c94aa:     }
1:b1c94aa: 
1:734fb7d:     synchronized long messageSize() {
1:734fb7d:         long messageSize = 0;
1:734fb7d: 
1:734fb7d:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext();) {
1:734fb7d:             Entry<MessageId, Message> entry = iter.next();
1:734fb7d:             messageSize += entry.getValue().getSize();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return messageSize;
1:734fb7d:     }
1:734fb7d: 
1:5628b3e:     synchronized void recoverSubscription(MessageRecoveryListener listener) throws Exception {
1:734fb7d:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext();) {
1:734fb7d:             Entry<MessageId, Message> entry = iter.next();
1:4a937de:             Message msg = entry.getValue();
1:4a937de:             listener.recoverMessage(msg);
1:b1c94aa:         }
1:b1c94aa:     }
1:b1c94aa: 
1:5628b3e:     synchronized void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:f812e34:         boolean pastLackBatch = lastBatch == null;
1:f812e34:         MessageId lastId = null;
1:bb8d32c:         // the message table is a synchronizedMap - so just have to synchronize here
1:f812e34:         int count = 0;
1:734fb7d:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext() && count < maxReturned;) {
1:734fb7d:             Entry<MessageId, Message> entry = iter.next();
1:f812e34:             if (pastLackBatch) {
1:b1c94aa:                 count++;
1:4a937de:                 Message msg = entry.getValue();
1:4a937de:                 lastId = entry.getKey();
1:4a937de:                 listener.recoverMessage(msg);
3:f812e34:             } else {
1:f812e34:                 pastLackBatch = entry.getKey().equals(lastBatch);
1:b1c94aa:             }
1:b1c94aa:         }
1:bb8d32c: 
1:f812e34:         if (lastId != null) {
1:f812e34:             lastBatch = lastId;
1:b1c94aa:         }
1:b1c94aa:     }
1:b1c94aa: 
1:5628b3e:     synchronized void resetBatching() {
2:f812e34:         lastBatch = null;
1:b1c94aa:     }
1:bb8d32c: 
1:bb8d32c:     SubscriptionKey getSubscriptionKey() {
1:bb8d32c:         return subscriptionKey;
1:bb8d32c:     }
1:b1c94aa: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bb8d32c
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.util.SubscriptionKey;
1:     private final Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
1:     private final SubscriptionKey subscriptionKey;
1: 
1:     public MemoryTopicSub(SubscriptionKey subscriptionKey) {
1:         this.subscriptionKey = subscriptionKey;
1:     }
1: 
1:         synchronized (this) {
/////////////////////////////////////////////////////////////////////////
1:         synchronized (this) {
1:         if (removed != null) {
1:     List<Message> getStoredMessages() {
1:         synchronized (this) {
1:             return new ArrayList<Message>(map.values());
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         // the message table is a synchronizedMap - so just have to synchronize here
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     SubscriptionKey getSubscriptionKey() {
1:         return subscriptionKey;
1:     }
author:Marc Breslow
-------------------------------------------------------------------------------
commit:4a937de
/////////////////////////////////////////////////////////////////////////
1:             Message msg = entry.getValue();
1:             listener.recoverMessage(msg);
/////////////////////////////////////////////////////////////////////////
1:                 Message msg = entry.getValue();
1:                 lastId = entry.getKey();
1:                 listener.recoverMessage(msg);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     synchronized long messageSize() {
1:         long messageSize = 0;
1: 
1:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext();) {
1:             Entry<MessageId, Message> entry = iter.next();
1:             messageSize += entry.getValue().getSize();
1:         }
1: 
1:         return messageSize;
1:     }
1: 
1:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext();) {
1:             Entry<MessageId, Message> entry = iter.next();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Entry<MessageId, Message>> iter = map.entrySet().iterator(); iter.hasNext() && count < maxReturned;) {
1:             Entry<MessageId, Message> entry = iter.next();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:ce1d85d
/////////////////////////////////////////////////////////////////////////
1:     void addMessage(MessageId id, Message message) {
0:         synchronized(this) {
1:             map.put(id, message);
1:         }
1:         message.incrementReferenceCount();
1:     void removeMessage(MessageId id) {
1:         Message removed;
0:         synchronized(this) {
1:             removed = map.remove(id);
1:             if ((lastBatch != null && lastBatch.equals(id)) || map.isEmpty()) {
1:                 resetBatching();
1:             }
1:         }
0:         if( removed!=null ) {
1:             removed.decrementReferenceCount();
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: class MemoryTopicSub {
0:     private Map map = new LinkedHashMap();
0:     void addMessage(MessageId id, Message message) {
0:         map.put(id, message);
0:     void removeMessage(MessageId id) {
1:             lastBatch = null;
0:     int size() {
0:     void recoverSubscription(MessageRecoveryListener listener) throws Exception {
0:         for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Entry)iter.next();
0:             Object msg = entry.getValue();
0:             if (msg.getClass() == MessageId.class) {
1:             } else {
0:     void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:         boolean pastLackBatch = lastBatch == null;
1:         MessageId lastId = null;
0:         // the message table is a synchronizedMap - so just have to synchronize
0:         // here
1:         int count = 0;
0:         for (Iterator iter = map.entrySet().iterator(); iter.hasNext() && count < maxReturned;) {
0:             Map.Entry entry = (Entry)iter.next();
1:             if (pastLackBatch) {
0:                 Object msg = entry.getValue();
0:                 lastId = (MessageId)entry.getKey();
0:                 if (msg.getClass() == MessageId.class) {
1:                 } else {
1:             } else {
1:                 pastLackBatch = entry.getKey().equals(lastBatch);
1:         if (lastId != null) {
1:             lastBatch = lastId;
0:     void resetBatching() {
1:         lastBatch = null;
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
0:             if(msg.getClass()==MessageId.class){
0:                 listener.recoverMessageReference((MessageId)msg);
/////////////////////////////////////////////////////////////////////////
0:                 if(msg.getClass()==MessageId.class){
0:                     listener.recoverMessageReference((MessageId)msg);
author:Robert Davies
-------------------------------------------------------------------------------
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
0:         if ((lastBatch != null && lastBatch.equals(id)) || map.isEmpty()) {
0:             resetBatching();
1:     synchronized int size() {
commit:a5a6a2a
/////////////////////////////////////////////////////////////////////////
0:     synchronized void addMessage(MessageId id, Message message) {
commit:5628b3e
/////////////////////////////////////////////////////////////////////////
0:     synchronized void removeMessage(MessageId id) {
/////////////////////////////////////////////////////////////////////////
1:     synchronized void recoverSubscription(MessageRecoveryListener listener) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     synchronized void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     synchronized void resetBatching() {
commit:3a5f48d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
commit:cd687e3
/////////////////////////////////////////////////////////////////////////
0:         if (map.isEmpty()) {
0:             lastBatch=null;
1:         }
commit:b1c94aa
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store.memory;
1: 
1: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: import java.util.Map.Entry;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageRecoveryListener;
1: 
1: /**
1:  * A holder for a durable subscriber
0:  * 
0:  * @version $Revision: 1.7 $
1:  */
0: class MemoryTopicSub{
1: 
0:     private Map map=new LinkedHashMap();
1:     private MessageId lastBatch;
1: 
0:     void addMessage(MessageId id,Message message){
0:         map.put(id,message);
1:     }
1: 
0:     void removeMessage(MessageId id){
0:         map.remove(id);
1:     }
1: 
0:     int size(){
1:         return map.size();
1:     }
1: 
0:     void recoverSubscription(MessageRecoveryListener listener) throws Exception{
0:         for(Iterator iter=map.entrySet().iterator();iter.hasNext();){
0:             Map.Entry entry=(Entry)iter.next();
0:             Object msg=entry.getValue();
0:             if(msg.getClass()==String.class){
0:                 listener.recoverMessageReference((String)msg);
0:             }else{
0:                 listener.recoverMessage((Message)msg);
1:             }
1:         }
0:         listener.finished();
1:     }
1: 
0:     void recoverNextMessages(int maxReturned,MessageRecoveryListener listener) throws Exception{
0:         boolean pastLackBatch=lastBatch==null;
0:         MessageId lastId=null;
0:         // the message table is a synchronizedMap - so just have to synchronize here
0:         int count=0;
0:         for(Iterator iter=map.entrySet().iterator();iter.hasNext()&&count<maxReturned;){
0:             Map.Entry entry=(Entry)iter.next();
0:             if(pastLackBatch){
1:                 count++;
0:                 Object msg=entry.getValue();
0:                 lastId=(MessageId)entry.getKey();
0:                 if(msg.getClass()==String.class){
0:                     listener.recoverMessageReference((String)msg);
0:                 }else{
0:                     listener.recoverMessage((Message)msg);
1:                 }
0:             }else{
0:                 pastLackBatch=entry.getKey().equals(lastBatch);
1:             }
1:         }
0:         if(lastId!=null){
0:             lastBatch=lastId;
1:         }
0:         listener.finished();
1:     }
1: 
0:     void resetBatching(){
0:         lastBatch=null;
1:     }
1: }
============================================================================