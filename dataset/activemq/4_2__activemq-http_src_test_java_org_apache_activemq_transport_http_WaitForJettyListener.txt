1:a21226c: /**
1:a21226c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a21226c:  * contributor license agreements.  See the NOTICE file distributed with
1:a21226c:  * this work for additional information regarding copyright ownership.
1:a21226c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a21226c:  * (the "License"); you may not use this file except in compliance with
1:a21226c:  * the License.  You may obtain a copy of the License at
1:a21226c:  *
1:a21226c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a21226c:  *
1:a21226c:  * Unless required by applicable law or agreed to in writing, software
1:a21226c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a21226c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a21226c:  * See the License for the specific language governing permissions and
1:a21226c:  * limitations under the License.
1:a21226c:  */
1:a21226c: package org.apache.activemq.transport.http;
2:a21226c: 
1:a21226c: import java.net.Socket;
1:a21226c: import java.net.URL;
1:a21226c: import javax.net.SocketFactory;
1:a21226c: 
1:a21226c: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a21226c: 
1:2ebba60: import static org.junit.Assert.assertTrue;
1:a21226c: 
1:a21226c: public class WaitForJettyListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(WaitForJettyListener.class);
1:a21226c:     
1:a21226c:     public static void waitForJettySocketToAccept(String bindLocation) throws Exception {
1:a21226c:         final URL url = new URL(bindLocation);
1:a21226c:         assertTrue("Jetty endpoint is available", Wait.waitFor(new Wait.Condition() {
1:a21226c: 
1:a21226c:             public boolean isSatisified() throws Exception {
1:a21226c:                 boolean canConnect = false;
1:a21226c:                 try {
1:a21226c:                     Socket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());
1:a21226c:                     socket.close();
1:a21226c:                     canConnect = true;
1:a21226c:                 } catch (Exception e) {
1:2b9c59c:                     LOG.warn("verify jetty available, failed to connect to " + url + e);
1:a21226c:                 }
1:a21226c:                 return canConnect;
1:a21226c:             }}, 60 * 1000));
1:a21226c:     }
1:a21226c: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:2ebba60
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
commit:a21226c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
1: import java.net.Socket;
1: import java.net.URL;
1: 
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import static junit.framework.Assert.assertTrue;
1: 
1: public class WaitForJettyListener {
0:     private static final Log LOG = LogFactory.getLog(WaitForJettyListener.class);
1:     
1:     public static void waitForJettySocketToAccept(String bindLocation) throws Exception {
1:         final URL url = new URL(bindLocation);
1:         assertTrue("Jetty endpoint is available", Wait.waitFor(new Wait.Condition() {
1: 
1:             public boolean isSatisified() throws Exception {
1:                 boolean canConnect = false;
1:                 try {
1:                     Socket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());
1:                     socket.close();
1:                     canConnect = true;
1:                 } catch (Exception e) {
0:                     LOG.warn("verify jettty available, failed to connect to " + url + e);
1:                 }
1:                 return canConnect;
1:             }}, 60 * 1000));
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(WaitForJettyListener.class);
commit:2b9c59c
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("verify jetty available, failed to connect to " + url + e);
============================================================================