2:d90b781: /**
1:d90b781:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d90b781:  * contributor license agreements.  See the NOTICE file distributed with
1:d90b781:  * this work for additional information regarding copyright ownership.
1:d90b781:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d90b781:  * (the "License"); you may not use this file except in compliance with
1:d90b781:  * the License.  You may obtain a copy of the License at
2:d90b781:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d90b781:  *
1:d90b781:  * Unless required by applicable law or agreed to in writing, software
1:d90b781:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d90b781:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d90b781:  * See the License for the specific language governing permissions and
1:d90b781:  * limitations under the License.
2:d90b781:  */
1:d90b781: package org.apache.activemq.util;
4:d90b781: 
1:d90b781: import java.io.IOException;
1:d90b781: import java.util.Properties;
1:3c441d0: import javax.jms.Connection;
1:540dd5c: import javax.jms.JMSException;
1:3c441d0: import javax.jms.MessageConsumer;
1:3c441d0: import javax.jms.Session;
1:3c441d0: import javax.jms.TextMessage;
1:d90b781: 
1:540dd5c: import junit.framework.TestCase;
1:540dd5c: import org.apache.activemq.ActiveMQConnectionFactory;
1:540dd5c: import org.apache.activemq.broker.BrokerService;
1:540dd5c: import org.apache.activemq.command.ActiveMQTopic;
1:540dd5c: import org.apache.log4j.Level;
1:540dd5c: import org.apache.log4j.Logger;
1:540dd5c: import org.apache.log4j.PropertyConfigurator;
1:540dd5c: 
1:d90b781: public class JmsLogAppenderTest extends TestCase {
1:3c441d0:     protected BrokerService broker;
1:3c441d0: 
1:3c441d0:     public void testLoggingWithJMS() throws IOException, JMSException {
1:3c441d0:         // Setup the consumers
1:540dd5c:         MessageConsumer info;
1:540dd5c:         MessageConsumer debug;
1:540dd5c:         MessageConsumer warn;
1:be4d64b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
1:3c441d0:         Connection conn = factory.createConnection();
1:3c441d0:         conn.start();
1:d90b781: 
1:540dd5c:         warn = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.WARN"));
1:540dd5c:         info = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.INFO"));
1:3c441d0:         debug = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.DEBUG"));
1:d90b781: 
1:3c441d0:         // lets try configure log4j
1:3c441d0:         Properties properties = new Properties();
1:3c441d0:         properties.load(getClass().getResourceAsStream("test-log4j.properties"));
1:3c441d0:         PropertyConfigurator.configure(properties);
1:d90b781: 
1:540dd5c:         Logger warnLog;
1:540dd5c:         Logger infoLog;
1:540dd5c:         Logger debugLog;
1:d90b781: 
1:3c441d0:         warnLog = Logger.getLogger("MAIN.WARN");
1:3c441d0:         warnLog.setLevel(Level.WARN);
1:3c441d0:         warnLog.warn("Warn Message");
1:3c441d0:         warnLog.info("Info Message");
1:3c441d0:         warnLog.debug("Debug Message");
1:3c441d0: 
1:3c441d0:         infoLog = Logger.getLogger("MAIN.INFO");
1:3c441d0:         infoLog.setLevel(Level.INFO);
1:3c441d0:         infoLog.warn("Warn Message");
1:3c441d0:         infoLog.info("Info Message");
1:3c441d0:         infoLog.debug("Debug Message");
1:3c441d0: 
1:3c441d0:         debugLog = Logger.getLogger("MAIN.DEBUG");
1:3c441d0:         debugLog.setLevel(Level.DEBUG);
1:3c441d0:         debugLog.warn("Warn Message");
1:3c441d0:         debugLog.info("Info Message");
1:3c441d0:         debugLog.debug("Debug Message");
1:3c441d0: 
1:3c441d0:         TextMessage msg;
1:3c441d0: 
1:3c441d0:         // Test warn level
1:3c441d0:         msg = (TextMessage)warn.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:3c441d0:         assertEquals("Warn Message", msg.getText());
1:3c441d0: 
1:3c441d0:         msg = (TextMessage)warn.receive(1000);
1:540dd5c:         assertNull(msg); // We should not receive anymore message because our
1:540dd5c:                             // level is warning only
1:3c441d0: 
1:3c441d0:         // Test info level
1:3c441d0:         msg = (TextMessage)info.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:3c441d0:         assertEquals("Warn Message", msg.getText());
1:3c441d0: 
1:3c441d0:         msg = (TextMessage)info.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:3c441d0:         assertEquals("Info Message", msg.getText());
1:3c441d0: 
1:3c441d0:         msg = (TextMessage)info.receive(1000);
1:3c441d0:         assertNull(msg); // We should not receive the debug message
1:3c441d0: 
1:3c441d0:         // Test debug level
1:3c441d0:         msg = (TextMessage)debug.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:3c441d0:         assertEquals("Warn Message", msg.getText());
1:3c441d0: 
1:3c441d0:         msg = (TextMessage)debug.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:3c441d0:         assertEquals("Info Message", msg.getText());
1:3c441d0: 
1:3c441d0:         msg = (TextMessage)debug.receive(1000);
1:3c441d0:         assertNotNull(msg);
1:d90b781:     }
1:3c441d0: 
1:d90b781: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.PropertyConfigurator;
1: 
1:         MessageConsumer info;
1:         MessageConsumer debug;
1:         MessageConsumer warn;
1:         warn = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.WARN"));
1:         info = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.INFO"));
/////////////////////////////////////////////////////////////////////////
1:         Logger warnLog;
1:         Logger infoLog;
1:         Logger debugLog;
/////////////////////////////////////////////////////////////////////////
1:         assertNull(msg); // We should not receive anymore message because our
1:                             // level is warning only
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:be4d64b
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false&broker.useJmx=false");
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:3c441d0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.Level;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import javax.jms.JMSException;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1:     protected BrokerService broker;
1:     public void testLoggingWithJMS() throws IOException, JMSException {
1:         // Setup the consumers
0:         MessageConsumer info, debug, warn;
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createConnection();
1:         conn.start();
0:         warn  = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.WARN"));
0:         info  = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.INFO"));
1:         debug = conn.createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(new ActiveMQTopic("log4j.MAIN.DEBUG"));
1:         // lets try configure log4j
1:         Properties properties = new Properties();
1:         properties.load(getClass().getResourceAsStream("test-log4j.properties"));
1:         PropertyConfigurator.configure(properties);
0:         Logger warnLog, infoLog, debugLog;
1:         warnLog = Logger.getLogger("MAIN.WARN");
1:         warnLog.setLevel(Level.WARN);
1:         warnLog.warn("Warn Message");
1:         warnLog.info("Info Message");
1:         warnLog.debug("Debug Message");
1: 
1:         infoLog = Logger.getLogger("MAIN.INFO");
1:         infoLog.setLevel(Level.INFO);
1:         infoLog.warn("Warn Message");
1:         infoLog.info("Info Message");
1:         infoLog.debug("Debug Message");
1: 
1:         debugLog = Logger.getLogger("MAIN.DEBUG");
1:         debugLog.setLevel(Level.DEBUG);
1:         debugLog.warn("Warn Message");
1:         debugLog.info("Info Message");
1:         debugLog.debug("Debug Message");
1: 
1:         TextMessage msg;
1: 
1:         // Test warn level
1:         msg = (TextMessage)warn.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals("Warn Message", msg.getText());
1: 
1:         msg = (TextMessage)warn.receive(1000);
0:         assertNull(msg); // We should not receive anymore message because our level is warning only
1: 
1:         // Test info level
1:         msg = (TextMessage)info.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals("Warn Message", msg.getText());
1: 
1:         msg = (TextMessage)info.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals("Info Message", msg.getText());
1: 
1:         msg = (TextMessage)info.receive(1000);
1:         assertNull(msg); // We should not receive the debug message
1: 
1:         // Test debug level
1:         msg = (TextMessage)debug.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals("Warn Message", msg.getText());
1: 
1:         msg = (TextMessage)debug.receive(1000);
1:         assertNotNull(msg);
1:         assertEquals("Info Message", msg.getText());
1: 
1:         msg = (TextMessage)debug.receive(1000);
1:         assertNotNull(msg);
1: 
commit:d90b781
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.io.IOException;
1: import java.util.Properties;
1: 
0: import org.apache.log4j.Logger;
0: import org.apache.log4j.PropertyConfigurator;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class JmsLogAppenderTest extends TestCase {
1: 
1: 
0:     public void testLoggingWithJMS() throws IOException {
1: 
0:          // lets try configure log4j
0:          Properties properties = new Properties();
0:          properties.load(getClass().getResourceAsStream("test-log4j.properties"));
0:          PropertyConfigurator.configure(properties);
1: 
0:          Logger.getLogger("FOO.BAR").info("Hello");
0:          Logger.getLogger("FOO.BAR.WHATNOT").debug("A debug message");
0:          Logger.getLogger("FOO.BAR.WHATNOT.ANOTHER").warn("Some warnings");
1: 
1:     }
1: }
============================================================================