1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:d29ca2a: 
1:a414c20: import java.net.URI;
1:a414c20: import java.util.Map;
1:a414c20: import java.util.Set;
1:1a5ad28: import java.util.concurrent.ThreadPoolExecutor;
1:0bb9013: 
1:d29ca2a: import org.apache.activemq.broker.region.Destination;
1:a414c20: import org.apache.activemq.broker.region.MessageReference;
1:0def1d4: import org.apache.activemq.broker.region.Subscription;
1:cc81680: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.BrokerId;
1:4098942: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:8d3ca90: import org.apache.activemq.command.ConsumerControl;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:a9c49a7: import org.apache.activemq.command.DestinationInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:4098942: import org.apache.activemq.command.MessageDispatch;
1:4098942: import org.apache.activemq.command.MessageDispatchNotification;
1:9d671b7: import org.apache.activemq.command.MessagePull;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:9d671b7: import org.apache.activemq.command.Response;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:d5dd937: import org.apache.activemq.store.PListStore;
1:1a5ad28: import org.apache.activemq.thread.Scheduler;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * Allows you to intercept broker operation so that features such as security
1:230a86c:  * can be implemented as a pluggable filter.
1:0bb9013:  *
1:0bb9013:  *
1:d29ca2a:  */
1:d29ca2a: public class BrokerFilter implements Broker {
1:230a86c: 
1:fc00993:     protected final Broker next;
1:d29ca2a: 
1:230a86c:     public BrokerFilter(Broker next) {
1:230a86c:         this.next = next;
1:d29ca2a:     }
1:d29ca2a: 
1:5076808:     public Broker getNext() {
1:5076808:         return next;
1:5076808:     }
1:5076808: 
1:0bb9013:     @Override
1:5076808:     public Broker getAdaptor(Class<?> type) {
1:5076808:         return type.isInstance(this) ? this : getNext().getAdaptor(type);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:933eb2f:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
1:5076808:         return getNext().getDestinationMap();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:27b3a7c:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination) {
1:5076808:         return getNext().getDestinationMap(destination);
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Override
1:5076808:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
1:5076808:         return getNext().getDestinations(destination);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:5076808:         getNext().acknowledge(consumerExchange, ack);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:5076808:         return getNext().messagePull(context, pull);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:5076808:         getNext().addConnection(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:5076808:         return getNext().addConsumer(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:5076808:         getNext().addProducer(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:5076808:         getNext().commitTransaction(context, xid, onePhase);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:5076808:         getNext().removeSubscription(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
1:5076808:         return getNext().getPreparedTransactions(context);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:5076808:         return getNext().prepareTransaction(context, xid);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:5076808:         getNext().removeConnection(context, info, error);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:5076808:         getNext().removeConsumer(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:5076808:         getNext().removeProducer(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:5076808:         getNext().rollbackTransaction(context, xid);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:5076808:         getNext().send(producerExchange, messageSend);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:5076808:         getNext().beginTransaction(context, xid);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:5076808:         getNext().forgetTransaction(context, transactionId);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public Connection[] getClients() throws Exception {
1:5076808:         return getNext().getClients();
1:a401575:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:204f91f:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean createIfTemporary) throws Exception {
1:5076808:         return getNext().addDestination(context, destination,createIfTemporary);
1:a401575:     }
1:663d5db: 
1:0bb9013:     @Override
1:230a86c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:5076808:         getNext().removeDestination(context, destination, timeout);
1:a401575:     }
1:4ee029e: 
1:0bb9013:     @Override
1:230a86c:     public ActiveMQDestination[] getDestinations() throws Exception {
1:5076808:         return getNext().getDestinations();
1:a414c20:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:230a86c:     public void start() throws Exception {
1:5076808:         getNext().start();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void stop() throws Exception {
1:5076808:         getNext().stop();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:5076808:         getNext().addSession(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:5076808:         getNext().removeSession(context, info);
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public BrokerId getBrokerId() {
1:5076808:         return getNext().getBrokerId();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public String getBrokerName() {
1:5076808:         return getNext().getBrokerName();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void gc() {
1:5076808:         getNext().gc();
1:d29ca2a:     }
1:d29ca2a: 
1:0bb9013:     @Override
1:230a86c:     public void addBroker(Connection connection, BrokerInfo info) {
1:5076808:         getNext().addBroker(connection, info);
1:d29ca2a:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void removeBroker(Connection connection, BrokerInfo info) {
1:5076808:         getNext().removeBroker(connection, info);
1:a414c20:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public BrokerInfo[] getPeerBrokerInfos() {
1:5076808:         return getNext().getPeerBrokerInfos();
1:25a252f:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:5076808:         getNext().preProcessDispatch(messageDispatch);
1:25a252f:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:5076808:         getNext().postProcessDispatch(messageDispatch);
1:4741136:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:5076808:         getNext().processDispatchNotification(messageDispatchNotification);
1:ef0734b:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public boolean isStopped() {
1:5076808:         return getNext().isStopped();
1:a9c49a7:     }
1:a401575: 
1:0bb9013:     @Override
1:933eb2f:     public Set<ActiveMQDestination> getDurableDestinations() {
1:5076808:         return getNext().getDurableDestinations();
1:a9c49a7:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:5076808:         getNext().addDestinationInfo(context, info);
1:debd0cc:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:5076808:         getNext().removeDestinationInfo(context, info);
1:233b604:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public boolean isFaultTolerantConfiguration() {
1:5076808:         return getNext().isFaultTolerantConfiguration();
1:4098942:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public ConnectionContext getAdminConnectionContext() {
1:5076808:         return getNext().getAdminConnectionContext();
1:4098942:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
1:5076808:         getNext().setAdminConnectionContext(adminConnectionContext);
1:3a9299b:     }
1:a414c20: 
1:0bb9013:     @Override
1:ee55abb:     public PListStore getTempDataStore() {
1:5076808:         return getNext().getTempDataStore();
1:3a9299b:     }
1:a414c20: 
1:0bb9013:     @Override
1:230a86c:     public URI getVmConnectorURI() {
1:5076808:         return getNext().getVmConnectorURI();
1:7d1e6bc:     }
1:a414c20: 
1:0bb9013:     @Override
1:230a86c:     public void brokerServiceStarted() {
1:5076808:         getNext().brokerServiceStarted();
1:4098942:     }
1:83a6eff: 
1:0bb9013:     @Override
1:230a86c:     public BrokerService getBrokerService() {
1:5076808:         return getNext().getBrokerService();
1:4098942:     }
1:25a252f: 
1:0bb9013:     @Override
1:230a86c:     public boolean isExpired(MessageReference messageReference) {
1:5076808:         return getNext().isExpired(messageReference);
1:4098942:     }
1:3a9299b: 
1:0bb9013:     @Override
1:27c1719:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
1:5076808:         getNext().messageExpired(context, message, subscription);
1:4098942:     }
1:3a9299b: 
1:0bb9013:     @Override
1:0bb9013:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
1:708be6d:                                          Subscription subscription, Throwable poisonCause) {
1:5076808:         return getNext().sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:4098942:     }
1:3a9299b: 
1:0bb9013:     @Override
1:230a86c:     public Broker getRoot() {
1:5076808:         return getNext().getRoot();
1:a414c20:     }
1:dfcf776: 
1:0bb9013:     @Override
1:dfcf776:     public long getBrokerSequenceId() {
1:5076808:         return getNext().getBrokerSequenceId();
1:cdc2fd3:     }
1:0bb9013: 
1:cdc2fd3: 
1:0bb9013:     @Override
1:db1f6fe:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
1:5076808:         getNext().fastProducer(context, producerInfo, destination);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:5076808:     public void isFull(ConnectionContext context,Destination destination, Usage<?> usage) {
1:5076808:         getNext().isFull(context,destination, usage);
1:dfcf776:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
1:5076808:         getNext().messageConsumed(context, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
1:5076808:         getNext().messageDelivered(context, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:3e4fc0a:     public void messageDiscarded(ConnectionContext context,Subscription sub, MessageReference messageReference) {
1:5076808:         getNext().messageDiscarded(context, sub, messageReference);
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void slowConsumer(ConnectionContext context, Destination destination,Subscription subs) {
1:5076808:         getNext().slowConsumer(context, destination,subs);
1:cdc2fd3:     }
1:0bb9013: 
1:0bb9013:     @Override
1:cc81680:     public void virtualDestinationAdded(ConnectionContext context,
1:cc81680:             VirtualDestination virtualDestination) {
1:5076808:         getNext().virtualDestinationAdded(context, virtualDestination);
1:cc81680:     }
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public void virtualDestinationRemoved(ConnectionContext context,
1:cc81680:             VirtualDestination virtualDestination) {
1:5076808:         getNext().virtualDestinationRemoved(context, virtualDestination);
1:cc81680:     }
1:cc81680: 
1:cc81680:     @Override
1:0bb9013:     public void nowMasterBroker() {
1:5076808:         getNext().nowMasterBroker();
1:4ee029e:     }
1:8d3ca90: 
1:0bb9013:     @Override
1:8d3ca90:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange,
1:8d3ca90:             ConsumerControl control) {
1:5076808:         getNext().processConsumerControl(consumerExchange, control);
1:8d3ca90:     }
1:1a5ad28: 
1:0bb9013:     @Override
1:55da9bc:     public void reapplyInterceptor() {
1:5076808:         getNext().reapplyInterceptor();
1:55da9bc:     }
1:55da9bc: 
1:55da9bc:     @Override
1:1a5ad28:     public Scheduler getScheduler() {
1:5076808:        return getNext().getScheduler();
1:1a5ad28:     }
1:1a5ad28: 
1:0bb9013:     @Override
1:1a5ad28:     public ThreadPoolExecutor getExecutor() {
1:5076808:        return getNext().getExecutor();
1:663d5db:     }
1:663d5db: 
1:0bb9013:     @Override
1:37384a1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
1:5076808:         getNext().networkBridgeStarted(brokerInfo, createdByDuplex, remoteIp);
1:1a5ad28:     }
2:7d1e6bc: 
1:0bb9013:     @Override
1:663d5db:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
1:5076808:         getNext().networkBridgeStopped(brokerInfo);
1:663d5db:     }
1:4098942: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     public Broker getNext() {
1:         return next;
1:     }
1: 
1:     public Broker getAdaptor(Class<?> type) {
1:         return type.isInstance(this) ? this : getNext().getAdaptor(type);
1:         return getNext().getDestinationMap();
1:         return getNext().getDestinationMap(destination);
1:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
1:         return getNext().getDestinations(destination);
1:         getNext().acknowledge(consumerExchange, ack);
1:         return getNext().messagePull(context, pull);
1:         getNext().addConnection(context, info);
1:         return getNext().addConsumer(context, info);
1:         getNext().addProducer(context, info);
1:         getNext().commitTransaction(context, xid, onePhase);
1:         getNext().removeSubscription(context, info);
1:         return getNext().getPreparedTransactions(context);
1:         return getNext().prepareTransaction(context, xid);
1:         getNext().removeConnection(context, info, error);
1:         getNext().removeConsumer(context, info);
1:         getNext().removeProducer(context, info);
1:         getNext().rollbackTransaction(context, xid);
1:         getNext().send(producerExchange, messageSend);
1:         getNext().beginTransaction(context, xid);
1:         getNext().forgetTransaction(context, transactionId);
1:         return getNext().getClients();
1:         return getNext().addDestination(context, destination,createIfTemporary);
1:         getNext().removeDestination(context, destination, timeout);
1:         return getNext().getDestinations();
1:         getNext().start();
1:         getNext().stop();
1:         getNext().addSession(context, info);
1:         getNext().removeSession(context, info);
1:         return getNext().getBrokerId();
1:         return getNext().getBrokerName();
1:         getNext().gc();
1:         getNext().addBroker(connection, info);
1:         getNext().removeBroker(connection, info);
1:         return getNext().getPeerBrokerInfos();
1:         getNext().preProcessDispatch(messageDispatch);
1:         getNext().postProcessDispatch(messageDispatch);
1:         getNext().processDispatchNotification(messageDispatchNotification);
1:         return getNext().isStopped();
1:         return getNext().getDurableDestinations();
1:         getNext().addDestinationInfo(context, info);
1:         getNext().removeDestinationInfo(context, info);
1:         return getNext().isFaultTolerantConfiguration();
1:         return getNext().getAdminConnectionContext();
1:         getNext().setAdminConnectionContext(adminConnectionContext);
1:         return getNext().getTempDataStore();
1:         return getNext().getVmConnectorURI();
1:         getNext().brokerServiceStarted();
1:         return getNext().getBrokerService();
1:         return getNext().isExpired(messageReference);
1:         getNext().messageExpired(context, message, subscription);
1:         return getNext().sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
1:         return getNext().getRoot();
1:         return getNext().getBrokerSequenceId();
1:         getNext().fastProducer(context, producerInfo, destination);
1:     public void isFull(ConnectionContext context,Destination destination, Usage<?> usage) {
1:         getNext().isFull(context,destination, usage);
1:         getNext().messageConsumed(context, messageReference);
1:         getNext().messageDelivered(context, messageReference);
1:         getNext().messageDiscarded(context, sub, messageReference);
1:         getNext().slowConsumer(context, destination,subs);
1:         getNext().virtualDestinationAdded(context, virtualDestination);
1:         getNext().virtualDestinationRemoved(context, virtualDestination);
1:         getNext().nowMasterBroker();
1:         getNext().processConsumerControl(consumerExchange, control);
1:         getNext().reapplyInterceptor();
1:        return getNext().getScheduler();
1:        return getNext().getExecutor();
1:         getNext().networkBridgeStarted(brokerInfo, createdByDuplex, remoteIp);
1:         getNext().networkBridgeStopped(brokerInfo);
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
/////////////////////////////////////////////////////////////////////////
1:     public void virtualDestinationAdded(ConnectionContext context,
1:             VirtualDestination virtualDestination) {
0:         next.virtualDestinationAdded(context, virtualDestination);
1:     }
1: 
1:     @Override
1:     public void virtualDestinationRemoved(ConnectionContext context,
1:             VirtualDestination virtualDestination) {
0:         next.virtualDestinationRemoved(context, virtualDestination);
1:     }
1: 
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
1:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination) {
0:         return next.getDestinationMap(destination);
1:     }
1: 
1:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
1:     public void reapplyInterceptor() {
0:         next.reapplyInterceptor();
1:     }
1: 
1:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:                                          Subscription subscription, Throwable poisonCause) {
0:         return next.sendToDeadLetterQueue(context, messageReference, subscription, poisonCause);
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
0:         next.fastProducer(context, producerInfo, destination);
commit:27c1719
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
0:         next.messageExpired(context, message, subscription);
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                       Subscription subscription) {
0:         next.sendToDeadLetterQueue(context, messageReference, subscription);
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1:     public void messageDiscarded(ConnectionContext context,Subscription sub, MessageReference messageReference) {
0:         next.messageDiscarded(context, sub, messageReference);
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerControl;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange,
1:             ConsumerControl control) {
0:         next.processConsumerControl(consumerExchange, control);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:         return next.sendToDeadLetterQueue(context, messageReference, subscription);
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     public void nowMasterBroker() {
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<ActiveMQDestination> getDurableDestinations() {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected final Broker next;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Allows you to intercept broker operation so that features such as security
1:  * can be implemented as a pluggable filter.
1: 
1:     public BrokerFilter(Broker next) {
1:         this.next = next;
0:     public Broker getAdaptor(Class type) {
0:         if (type.isInstance(this)) {
0:     public Map getDestinationMap() {
0:     public Set getDestinations(ActiveMQDestination destination) {
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
0:         next.acknowledge(consumerExchange, ack);
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:         return next.messagePull(context, pull);
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:         next.addConnection(context, info);
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         return next.addConsumer(context, info);
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:         next.addProducer(context, info);
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
0:         next.commitTransaction(context, xid, onePhase);
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:         next.removeSubscription(context, info);
1:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:         return next.prepareTransaction(context, xid);
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:         next.removeConnection(context, info, error);
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         next.removeConsumer(context, info);
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:         next.removeProducer(context, info);
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:         next.rollbackTransaction(context, xid);
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
0:         next.send(producerExchange, messageSend);
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:         next.beginTransaction(context, xid);
1:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:         next.forgetTransaction(context, transactionId);
1:     public Connection[] getClients() throws Exception {
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         return next.addDestination(context, destination);
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:         next.removeDestination(context, destination, timeout);
1:     public ActiveMQDestination[] getDestinations() throws Exception {
1:     public void start() throws Exception {
1:     public void stop() throws Exception {
1:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
0:         next.addSession(context, info);
1:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
0:         next.removeSession(context, info);
1:     public BrokerId getBrokerId() {
1:     public String getBrokerName() {
1:     public void gc() {
1:     public void addBroker(Connection connection, BrokerInfo info) {
0:         next.addBroker(connection, info);
1:     public void removeBroker(Connection connection, BrokerInfo info) {
0:         next.removeBroker(connection, info);
1:     public BrokerInfo[] getPeerBrokerInfos() {
1:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:     public boolean isStopped() {
0:     public Set getDurableDestinations() {
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:         next.addDestinationInfo(context, info);
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:         next.removeDestinationInfo(context, info);
1:     public boolean isFaultTolerantConfiguration() {
1:     public ConnectionContext getAdminConnectionContext() {
1:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
0:     public Store getTempDataStore() {
1:     public URI getVmConnectorURI() {
1:     public void brokerServiceStarted() {
1:     public BrokerService getBrokerService() {
1:     public boolean isExpired(MessageReference messageReference) {
0:     public void messageExpired(ConnectionContext context, MessageReference message) {
0:         next.messageExpired(context, message);
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference) {
0:         next.sendToDeadLetterQueue(context, messageReference);
1:     public Broker getRoot() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:     public Connection[] getClients() throws Exception {
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0:     public ActiveMQDestination[] getDestinations() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception{
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.TransactionId;
1: 
1: /**
0:  * Allows you to intercept broker operation so that features such as security can be 
0:  * implemented as a pluggable filter.
1:  * 
0:  * @version $Revision: 1.10 $
1:  */
1: public class BrokerFilter implements Broker {
1:     
0:     final protected Broker next;
1: 
0:     public BrokerFilter(Broker next) {
0:         this.next=next;
1:     }
1:     
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Throwable {
0:         next.acknowledge(context, ack);
1:     }
1: 
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable {
0:         next.addConnection(context, info);
1:     }
1: 
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         next.addConsumer(context, info);
1:     }
1: 
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         next.addProducer(context, info);
1:     }
1: 
0:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Throwable {
0:         next.commitTransaction(context, xid, onePhase);
1:     }
1: 
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Throwable {
0:         next.removeSubscription(context, info);
1:     }
1: 
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Throwable {
0:         return next.getPreparedTransactions(context);
1:     }
1: 
0:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         return next.prepareTransaction(context, xid);
1:     }
1: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable {
0:         next.removeConnection(context, info, error);
1:     }
1: 
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
0:         next.removeConsumer(context, info);
1:     }
1: 
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Throwable {
0:         next.removeProducer(context, info);
1:     }
1: 
0:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         next.rollbackTransaction(context, xid);
1:     }
1: 
0:     public void send(ConnectionContext context, Message messageSend) throws Throwable {
0:         next.send(context, messageSend);
1:     }
1: 
0:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Throwable {
0:         next.beginTransaction(context, xid);
1:     }
1: 
0:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Throwable {
0:         next.forgetTransaction(context, transactionId);
1:     }
1: 
0:     public Connection[] getClients() throws Throwable {
0:         return next.getClients();
1:     }
1: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
0:         return next.addDestination(context, destination);
1:     }
1: 
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Throwable {
0:         next.removeDestination(context, destination, timeout);
1:     }
1: 
0:     public ActiveMQDestination[] getDestinations() throws Throwable {
0:         return next.getDestinations();
1:     }
1: 
0:     public void start() throws Exception {
0:         next.start();
1:     }
1: 
0:     public void stop() throws Exception {
0:         next.stop();
1:     }
1: 
0:     public void addSession(ConnectionContext context, SessionInfo info) throws Throwable {
0:         next.addSession(context, info);
1:     }
1: 
0:     public void removeSession(ConnectionContext context, SessionInfo info) throws Throwable {
0:         next.removeSession(context, info);
1:     }
1: 
0:     public BrokerId getBrokerId() {
0:         return next.getBrokerId();
1:     }
1: 
0:     public String getBrokerName() {
0:         return next.getBrokerName();
1:     }
1: 	
0:     public void gc() {
0:         next.gc();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:37384a1
/////////////////////////////////////////////////////////////////////////
1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
0:         next.networkBridgeStarted(brokerInfo, createdByDuplex, remoteIp);
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex) {
0:         next.networkBridgeStarted(brokerInfo, createdByDuplex);
commit:663d5db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.network.NetworkBridge;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void networkBridgeStarted(BrokerInfo brokerInfo) {
0:         next.networkBridgeStarted(brokerInfo);
1:     }
1: 
1:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
0:         next.networkBridgeStopped(brokerInfo);
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Scheduler getScheduler() {
0:        return next.getScheduler();
1:     }
1: 
1:     public ThreadPoolExecutor getExecutor() {
0:        return next.getExecutor();
1:     }
commit:204f91f
/////////////////////////////////////////////////////////////////////////
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean createIfTemporary) throws Exception {
0:         return next.addDestination(context, destination,createIfTemporary);
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
1:     public PListStore getTempDataStore() {
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void nowMasterBroker() {   
0:         next.nowMasterBroker();
1:     }
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
1: 
1:    
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
0:         next.fastProducer(context, producerInfo);
1:     }
1: 
0:     public void isFull(ConnectionContext context,Destination destination, Usage usage) {
0:         next.isFull(context,destination, usage);
1:     }
1: 
1:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
0:         next.messageConsumed(context, messageReference);
1:     }
1: 
1:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
0:         next.messageDelivered(context, messageReference);
1:     }
1: 
0:     public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
0:         next.messageDiscarded(context, messageReference);
1:     }
1: 
1:     public void slowConsumer(ConnectionContext context, Destination destination,Subscription subs) {
0:         next.slowConsumer(context, destination,subs);
1:     }
commit:dfcf776
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getBrokerSequenceId() {
0:         return next.getBrokerSequenceId();
1:     }
commit:5f4db41
/////////////////////////////////////////////////////////////////////////
0:     public Set <Destination>getDestinations(ActiveMQDestination destination) {
commit:a401575
/////////////////////////////////////////////////////////////////////////
0:     public BrokerFilter(Broker next){
1: 
0:         if(type.isInstance(this)){
0:     public Map getDestinationMap(){
0:     public Set getDestinations(ActiveMQDestination destination){
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange,MessageAck ack) throws Exception{
0:         next.acknowledge(consumerExchange,ack);
0:     public Response messagePull(ConnectionContext context,MessagePull pull) throws Exception{
0:         return next.messagePull(context,pull);
0:     public void addConnection(ConnectionContext context,ConnectionInfo info) throws Exception{
0:         next.addConnection(context,info);
0:     public Subscription addConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:         return next.addConsumer(context,info);
0:     public void addProducer(ConnectionContext context,ProducerInfo info) throws Exception{
0:         next.addProducer(context,info);
0:     public void commitTransaction(ConnectionContext context,TransactionId xid,boolean onePhase) throws Exception{
0:         next.commitTransaction(context,xid,onePhase);
0:     public void removeSubscription(ConnectionContext context,RemoveSubscriptionInfo info) throws Exception{
0:         next.removeSubscription(context,info);
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception{
0:     public int prepareTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:         return next.prepareTransaction(context,xid);
0:     public void removeConnection(ConnectionContext context,ConnectionInfo info,Throwable error) throws Exception{
0:         next.removeConnection(context,info,error);
0:     public void removeConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:         next.removeConsumer(context,info);
0:     public void removeProducer(ConnectionContext context,ProducerInfo info) throws Exception{
0:         next.removeProducer(context,info);
0:     public void rollbackTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:         next.rollbackTransaction(context,xid);
0:     public void send(ProducerBrokerExchange producerExchange,Message messageSend) throws Exception{
0:         next.send(producerExchange,messageSend);
0:     public void beginTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:         next.beginTransaction(context,xid);
0:     public void forgetTransaction(ConnectionContext context,TransactionId transactionId) throws Exception{
0:         next.forgetTransaction(context,transactionId);
0:     public Connection[] getClients() throws Exception{
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Exception{
0:         return next.addDestination(context,destination);
0:     public void removeDestination(ConnectionContext context,ActiveMQDestination destination,long timeout)
0:             throws Exception{
0:         next.removeDestination(context,destination,timeout);
0:     public ActiveMQDestination[] getDestinations() throws Exception{
0:     public void start() throws Exception{
0:     public void stop() throws Exception{
0:     public void addSession(ConnectionContext context,SessionInfo info) throws Exception{
0:         next.addSession(context,info);
0:     public void removeSession(ConnectionContext context,SessionInfo info) throws Exception{
0:         next.removeSession(context,info);
0:     public BrokerId getBrokerId(){
0:     public String getBrokerName(){
1: 
0:     public void gc(){
0:         next.addBroker(connection,info);
0:     public void removeBroker(Connection connection,BrokerInfo info){
0:         next.removeBroker(connection,info);
1:     }
1: 
0:     public void preProcessDispatch(MessageDispatch messageDispatch){
0:         next.preProcessDispatch(messageDispatch);
1: 
0:     public void postProcessDispatch(MessageDispatch messageDispatch){
0:         next.postProcessDispatch(messageDispatch);
1:     }
1: 
1: 
1: 
1: 
0:         next.addDestinationInfo(context,info);
0:         next.removeDestinationInfo(context,info);
0:     public ConnectionContext getAdminConnectionContext(){
0:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext){
1: 
0:     public Store getTempDataStore(){
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isExpired(MessageReference messageReference){
0:         return next.isExpired(messageReference);
1:     }
1: 
0:         next.messageExpired(context,message);
0:         next.sendToDeadLetterQueue(context,messageReference);
0:     public Broker getRoot(){
0:         return next.getRoot();
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Map;
1: import java.util.Set;
1: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void messageExpired(ConnectionContext context,MessageReference message){
0:         next.messageExpired(context,message); 
1:     }
1: 
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference){
0:        next.sendToDeadLetterQueue(context,messageReference);       
1:     }
1: 
0:     public Broker getRoot() {
0:        return next.getRoot();
1:     }
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
1:         
commit:25a252f
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void brokerServiceStarted(){
0:         next.brokerServiceStarted();
1:     }
0:     public BrokerService getBrokerService(){
0:         return next.getBrokerService();
1:     }
commit:4741136
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:     public URI getVmConnectorURI(){
0:         return next.getVmConnectorURI();
1:     }
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
0:         next.acknowledge(consumerExchange, ack);
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
0:         next.send(producerExchange, messageSend);
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy() {
0:         return next.getPendingDurableSubscriberPolicy();
1:     }
1:   
0:     public void setPendingDurableSubscriberPolicy(PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy) {
0:         next.setPendingDurableSubscriberPolicy(pendingDurableSubscriberPolicy);
1:     }
1:    
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.kaha.Store;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public Store getTempDataStore() {
0:         return next.getTempDataStore();
1:     }
1:     
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
0: 
0:     public boolean isFaultTolerantConfiguration(){
0:         return next.isFaultTolerantConfiguration();
1:     }
0: 
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void addDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         next.addDestinationInfo(context, info);
0:         
1:     }
0: 
0:     public void removeDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
0:         next.removeDestinationInfo(context, info);
0:         
1:     }
commit:debd0cc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Set getDurableDestinations(){
0:         return next.getDurableDestinations();
1:     }
commit:233b604
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isStopped(){
0:         return next.isStopped();
1:     }
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:    
0:     public Broker getAdaptor(Class type){
0:         if (type.isInstance(this)){
0:             return this;
1:         }
0:         return next.getAdaptor(type);
1:     }
0: 
0:     
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void addBroker(Connection connection,BrokerInfo info){
0:         next.addBroker(connection, info);
1:     }
0:     
0:     public void removeBroker(Connection connection,BrokerInfo info){
0:         next.removeBroker(connection, info);
1:     }
0: 
0: 
0:     public BrokerInfo[] getPeerBrokerInfos(){
0:         return next.getPeerBrokerInfos();
1:     }
0:     
0:     public void processDispatch(MessageDispatch messageDispatch){
0:         next.processDispatch(messageDispatch);
1:     }
0:     
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Throwable{
0:         next.processDispatchNotification(messageDispatchNotification);
1:     }
0:     
0:     public boolean isSlaveBroker(){
0:         return next.isSlaveBroker();
1:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:         return next.messagePull(context, pull);
0:     }
0: 
commit:8abb655
/////////////////////////////////////////////////////////////////////////
0:     public ConnectionContext getAdminConnectionContext() {
0:         return next.getAdminConnectionContext();
0:     }
0: 
0:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
0:         next.setAdminConnectionContext(adminConnectionContext);
0:     }
0:     
commit:06a5829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
0: import java.util.Set;
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public Set getDestinations(ActiveMQDestination destination) {
0:         return next.getDestinations(destination);
0:     }
0: 
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     public Map getDestinationMap() {
0:         return next.getDestinationMap();
0:     }
0: 
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         return next.addConsumer(context, info);
============================================================================