1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
1:2a58f4c: 
1:8a8f41c: import java.io.ByteArrayInputStream;
1:8a8f41c: import java.io.ByteArrayOutputStream;
1:60ca85c: import java.io.IOException;
1:8a8f41c: import java.io.ObjectInputStream;
1:8a8f41c: import java.io.ObjectOutputStream;
1:60ca85c: import java.net.ServerSocket;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:230a86c: 
1:0b34f3c: import javax.jms.ExceptionListener;
1:d29ca2a: import javax.jms.JMSException;
1:9b9766d: import javax.jms.Session;
1:60ca85c: import javax.net.ServerSocketFactory;
1:230a86c: 
1:d29ca2a: import org.apache.activemq.broker.BrokerRegistry;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
4:230a86c: 
1:d29ca2a: public class ActiveMQConnectionFactoryTest extends CombinationTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactoryTest.class);
1:230a86c: 
1:230a86c:     private ActiveMQConnection connection;
1:230a86c:     private BrokerService broker;
1:230a86c: 
1:230a86c:     public void testUseURIToSetUseClientIDPrefixOnConnectionFactory() throws URISyntaxException, JMSException {
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:141ad4c:             "vm://localhost?jms.clientIDPrefix=Cheese&broker.persistent=false");
1:7339c6e:         assertEquals("Cheese", cf.getClientIDPrefix());
1:230a86c: 
1:230a86c:         connection = (ActiveMQConnection)cf.createConnection();
1:3a7c673:         connection.start();
1:230a86c: 
1:3a7c673:         String clientID = connection.getClientID();
1:fc00993:         LOG.info("Got client ID: " + clientID);
1:230a86c: 
1:3a7c673:         assertTrue("should start with Cheese! but was: " + clientID, clientID.startsWith("Cheese"));
1:3a7c673:     }
1:f82dc25: 
1:f6970c7:     @Override
1:141ad4c:     public void setUp() throws Exception {
1:141ad4c:         LOG.info("=========== Start test " + getName());
1:141ad4c:         super.setUp();
1:141ad4c:     }
1:141ad4c: 
1:141ad4c:     @Override
1:f6970c7:     public void tearDown() throws Exception {
1:230a86c:         // Try our best to close any previously opend connection.
1:230a86c:         try {
1:f6970c7:             connection.close();
1:230a86c:         } catch (Throwable ignore) {
1:230a86c:         }
1:230a86c:         // Try our best to stop any previously started broker.
1:230a86c:         try {
1:aa3110e:             broker.stop();
1:230a86c:         } catch (Throwable ignore) {
1:230a86c:         }
1:141ad4c: 
1:141ad4c:         LOG.info("=========== Finished test " + getName());
1:230a86c:     }
1:c7d559f: 
1:d29ca2a:     public void testUseURIToSetOptionsOnConnectionFactory() throws URISyntaxException, JMSException {
1:d29ca2a:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?jms.useAsyncSend=true");
1:d29ca2a:         assertTrue(cf.isUseAsyncSend());
1:d29ca2a:         // the broker url have been adjusted.
1:d29ca2a:         assertEquals("vm://localhost", cf.getBrokerURL());
1:f82dc25: 
1:d29ca2a:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.useAsyncSend=false");
1:d29ca2a:         assertFalse(cf.isUseAsyncSend());
1:d29ca2a:         // the broker url have been adjusted.
1:d29ca2a:         assertEquals("vm://localhost", cf.getBrokerURL());
1:0b34f3c: 
1:d29ca2a:         cf = new ActiveMQConnectionFactory("vm:(broker:()/localhost)?jms.useAsyncSend=true");
1:d29ca2a:         assertTrue(cf.isUseAsyncSend());
1:d29ca2a:         // the broker url have been adjusted.
1:d29ca2a:         assertEquals("vm:(broker:()/localhost)", cf.getBrokerURL());
1:c7d559f: 
1:2a58f4c:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.auditDepth=5000");
1:2a58f4c:         assertEquals(5000, cf.getAuditDepth());
1:3a7c673:     }
1:0b34f3c: 
1:f43c090:     public void testConnectAttemptTimeotOptionIsApplied() throws URISyntaxException, JMSException {
1:f43c090:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:f43c090: 
1:f43c090:         assertEquals(0, cf.getConnectResponseTimeout());
1:f43c090: 
1:f43c090:         // the broker url have been adjusted.
1:f43c090:         assertEquals("vm://localhost", cf.getBrokerURL());
1:f43c090: 
1:f43c090:         ActiveMQConnection connection = (ActiveMQConnection)cf.createConnection();
1:f43c090:         assertEquals(0, connection.getConnectResponseTimeout());
1:f43c090:         connection.close();
1:f43c090: 
1:f43c090:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.connectResponseTimeout=1000");
1:f43c090:         assertEquals(1000, cf.getConnectResponseTimeout());
1:f43c090: 
1:f43c090:         // the broker url have been adjusted.
1:f43c090:         assertEquals("vm://localhost", cf.getBrokerURL());
1:f43c090: 
1:f43c090:         connection = (ActiveMQConnection)cf.createConnection();
1:f43c090:         assertEquals(1000, connection.getConnectResponseTimeout());
1:f43c090:         connection.close();
1:f43c090:     }
1:f43c090: 
1:9b9766d:     public void testUseURIToConfigureRedeliveryPolicy() throws URISyntaxException, JMSException {
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:141ad4c:             "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.redeliveryPolicy.maximumRedeliveries=2");
1:9b9766d:         assertEquals("connection redeliveries", 2, cf.getRedeliveryPolicy().getMaximumRedeliveries());
1:0b34f3c: 
1:230a86c:         ActiveMQConnection connection = (ActiveMQConnection)cf.createConnection();
1:9b9766d:         assertEquals("connection redeliveries", 2, connection.getRedeliveryPolicy().getMaximumRedeliveries());
1:0b34f3c: 
1:9b9766d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)session.createConsumer(session
1:230a86c:             .createQueue("FOO.BAR"));
1:9b9766d:         assertEquals("consumer redeliveries", 2, consumer.getRedeliveryPolicy().getMaximumRedeliveries());
1:230a86c:         connection.close();
1:3a7c673:     }
1:0b34f3c: 
1:d29ca2a:     public void testCreateVMConnectionWithEmbdeddBroker() throws URISyntaxException, JMSException {
1:141ad4c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:141ad4c:             "vm://myBroker2?broker.persistent=false&broker.useJmx=false");
1:230a86c:         // Make sure the broker is not created until the connection is
1:230a86c:         // instantiated.
1:4810be5:         assertNull(BrokerRegistry.getInstance().lookup("myBroker2"));
1:230a86c:         connection = (ActiveMQConnection)cf.createConnection();
1:d29ca2a:         // This should create the connection.
1:d29ca2a:         assertNotNull(connection);
1:d29ca2a:         // Verify the broker was created.
1:4810be5:         assertNotNull(BrokerRegistry.getInstance().lookup("myBroker2"));
1:f6970c7: 
1:3a7c673:         connection.close();
1:230a86c: 
1:d29ca2a:         // Verify the broker was destroyed.
1:4810be5:         assertNull(BrokerRegistry.getInstance().lookup("myBroker2"));
2:d29ca2a:     }
1:230a86c: 
1:e6747ea:     public void testGetBrokerName() throws URISyntaxException, JMSException {
1:141ad4c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:141ad4c:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
1:230a86c:         connection = (ActiveMQConnection)cf.createConnection();
1:7339c6e:         connection.start();
1:230a86c: 
1:e6747ea:         String brokerName = connection.getBrokerName();
1:fc00993:         LOG.info("Got broker name: " + brokerName);
1:230a86c: 
1:e6747ea:         assertNotNull("No broker name available!", brokerName);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void testCreateTcpConnectionUsingAllocatedPort() throws Exception {
1:d29ca2a:         assertCreateConnection("tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true");
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:d29ca2a:         assertCreateConnection("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:d29ca2a:     }
1:230a86c: 
1:aa3110e:     public void testCreateTcpConnectionUsingKnownLocalPort() throws Exception {
1:aa3110e:         broker = new BrokerService();
1:aa3110e:         broker.setPersistent(false);
1:141ad4c:         broker.setUseJmx(false);
1:c7d559f:         broker.addConnector("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:aa3110e:         broker.start();
1:60ca85c:         broker.waitUntilStarted();
1:60ca85c: 
1:60ca85c:         int localPort = getFreePort(51610);
1:aa3110e: 
1:aa3110e:         // This should create the connection.
1:60ca85c:         ActiveMQConnectionFactory cf =
1:60ca85c:             new ActiveMQConnectionFactory("tcp://localhost:61610/localhost:" + localPort);
1:aa3110e:         connection = (ActiveMQConnection)cf.createConnection();
1:aa3110e:         assertNotNull(connection);
1:aa3110e:     }
1:aa3110e: 
1:230a86c:     public void testConnectionFailsToConnectToVMBrokerThatIsNotRunning() throws Exception {
1:230a86c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:230a86c:         try {
1:230a86c:             factory.createConnection();
1:230a86c:             fail("Expected connection failure.");
1:230a86c:         } catch (JMSException e) {
1:230a86c:         }
1:bcca668:     }
1:aa3110e: 
1:230a86c:     public void testFactorySerializable() throws Exception {
1:230a86c:         String clientID = "TestClientID";
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory();
1:8a8f41c:         cf.setClientID(clientID);
1:230a86c:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:230a86c:         ObjectOutputStream objectsOut = new ObjectOutputStream(bytesOut);
1:8a8f41c:         objectsOut.writeObject(cf);
1:8a8f41c:         objectsOut.flush();
1:230a86c:         byte[] data = bytesOut.toByteArray();
1:230a86c:         ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
1:230a86c:         ObjectInputStream objectsIn = new ObjectInputStream(bytesIn);
1:230a86c:         cf = (ActiveMQConnectionFactory)objectsIn.readObject();
1:230a86c:         assertEquals(cf.getClientID(), clientID);
1:0b34f3c:     }
1:c7d559f: 
1:0b34f3c:     public void testSetExceptionListener() throws Exception {
1:0b34f3c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:0b34f3c:         connection = (ActiveMQConnection)cf.createConnection();
1:0b34f3c:         assertNull(connection.getExceptionListener());
1:c7d559f: 
1:0b34f3c:         ExceptionListener exListener = new ExceptionListener() {
1:c7d559f:             @Override
1:c7d559f:             public void onException(JMSException arg0) {
1:c7d559f:             }
1:0b34f3c:         };
1:0b34f3c:         cf.setExceptionListener(exListener);
1:0b09fde:         connection.close();
1:c7d559f: 
1:0b34f3c:         connection = (ActiveMQConnection)cf.createConnection();
1:0b34f3c:         assertNotNull(connection.getExceptionListener());
1:0b34f3c:         assertEquals(exListener, connection.getExceptionListener());
1:0b09fde:         connection.close();
1:c7d559f: 
1:0b34f3c:         connection = (ActiveMQConnection)cf.createConnection();
1:0b34f3c:         assertEquals(exListener, connection.getExceptionListener());
1:c7d559f: 
1:0b34f3c:         assertEquals(exListener, cf.getExceptionListener());
1:0b09fde:         connection.close();
1:0b34f3c:     }
1:c7d559f: 
1:f82dc25:     public void testSetClientInternalExceptionListener() throws Exception {
1:f82dc25:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:f82dc25:         connection = (ActiveMQConnection)cf.createConnection();
1:f82dc25:         assertNull(connection.getClientInternalExceptionListener());
1:c7d559f: 
1:f82dc25:         ClientInternalExceptionListener listener = new ClientInternalExceptionListener() {
1:c7d559f:             @Override
1:f82dc25:             public void onException(Throwable exception) {
1:f82dc25:             }
1:f82dc25:         };
1:f82dc25:         connection.setClientInternalExceptionListener(listener);
1:f82dc25:         cf.setClientInternalExceptionListener(listener);
1:0b09fde:         connection.close();
1:c7d559f: 
1:f82dc25:         connection = (ActiveMQConnection)cf.createConnection();
1:f82dc25:         assertNotNull(connection.getClientInternalExceptionListener());
2:f82dc25:         assertEquals(listener, connection.getClientInternalExceptionListener());
1:0b09fde:         connection.close();
1:c7d559f: 
1:f82dc25:         connection = (ActiveMQConnection)cf.createConnection();
1:c7d559f:         assertEquals(listener, connection.getClientInternalExceptionListener());
1:f82dc25:         assertEquals(listener, cf.getClientInternalExceptionListener());
1:0b09fde:         connection.close();
1:f82dc25:     }
1:c7d559f: 
1:d29ca2a:     protected void assertCreateConnection(String uri) throws Exception {
1:d29ca2a:         // Start up a broker with a tcp connector.
1:3a7c673:         broker = new BrokerService();
1:d29ca2a:         broker.setPersistent(false);
1:6b44c3c:         broker.setUseJmx(false);
1:141ad4c:         broker.setAdvisorySupport(false);
1:141ad4c:         broker.setSchedulerSupport(false);
1:d29ca2a:         TransportConnector connector = broker.addConnector(uri);
1:d29ca2a:         broker.start();
1:f82dc25: 
1:d29ca2a:         URI temp = new URI(uri);
1:230a86c:         // URI connectURI = connector.getServer().getConnectURI();
1:d29ca2a:         // TODO this sometimes fails when using the actual local host name
1:f6970c7:         URI currentURI = new URI(connector.getPublishableConnectString());
1:f82dc25: 
1:d29ca2a:         // sometimes the actual host name doesn't work in this test case
1:230a86c:         // e.g. on OS X so lets use the original details but just use the actual
1:230a86c:         // port
1:230a86c:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(),
1:230a86c:                                  temp.getPath(), temp.getQuery(), temp.getFragment());
1:f82dc25: 
1:fc00993:         LOG.info("connection URI is: " + connectURI);
1:f82dc25: 
1:d29ca2a:         // This should create the connection.
1:d29ca2a:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectURI);
1:230a86c:         connection = (ActiveMQConnection)cf.createConnection();
1:d29ca2a:         assertNotNull(connection);
1:bcca668:     }
1:0b34f3c: 
1:60ca85c:     private int getFreePort(final int fallback) {
1:60ca85c:         int freePort = fallback;
1:60ca85c:         ServerSocket ss = null;
1:60ca85c:         try {
1:60ca85c:             ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:60ca85c:             freePort = ss.getLocalPort();
1:60ca85c:         } catch (IOException e) { // ignore
1:60ca85c:         } finally {
1:60ca85c:             try {
1:60ca85c:                 if (ss != null ) {
1:60ca85c:                     ss.close();
1:60ca85c:                 }
1:60ca85c:             } catch (IOException e) { // ignore
1:60ca85c:             }
1:60ca85c:         }
1:60ca85c: 
1:60ca85c:         return freePort;
1:60ca85c:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f43c090
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectAttemptTimeotOptionIsApplied() throws URISyntaxException, JMSException {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1: 
1:         assertEquals(0, cf.getConnectResponseTimeout());
1: 
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection)cf.createConnection();
1:         assertEquals(0, connection.getConnectResponseTimeout());
1:         connection.close();
1: 
1:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.connectResponseTimeout=1000");
1:         assertEquals(1000, cf.getConnectResponseTimeout());
1: 
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
1: 
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertEquals(1000, connection.getConnectResponseTimeout());
1:         connection.close();
1:     }
1: 
commit:60ca85c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: import javax.net.ServerSocketFactory;
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
1: 
1:         int localPort = getFreePort(51610);
1:         ActiveMQConnectionFactory cf =
1:             new ActiveMQConnectionFactory("tcp://localhost:61610/localhost:" + localPort);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private int getFreePort(final int fallback) {
1:         int freePort = fallback;
1:         ServerSocket ss = null;
1:         try {
1:             ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:             freePort = ss.getLocalPort();
1:         } catch (IOException e) { // ignore
1:         } finally {
1:             try {
1:                 if (ss != null ) {
1:                     ss.close();
1:                 }
1:             } catch (IOException e) { // ignore
1:             }
1:         }
1: 
1:         return freePort;
1:     }
commit:141ad4c
/////////////////////////////////////////////////////////////////////////
1:             "vm://localhost?jms.clientIDPrefix=Cheese&broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:     public void setUp() throws Exception {
1:         LOG.info("=========== Start test " + getName());
1:         super.setUp();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:         LOG.info("=========== Finished test " + getName());
/////////////////////////////////////////////////////////////////////////
1:             "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.redeliveryPolicy.maximumRedeliveries=2");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:             "vm://myBroker2?broker.persistent=false&broker.useJmx=false");
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             @Override
1:             public void onException(JMSException arg0) {
1:             }
1: 
1: 
1: 
1: 
1: 
1: 
1:             @Override
1: 
1: 
1:         assertEquals(listener, connection.getClientInternalExceptionListener());
1: 
commit:0b09fde
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:         connection.close();
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:         connection.close();
1:         connection.close();
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b44c3c
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
commit:f6970c7
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1: 
/////////////////////////////////////////////////////////////////////////
1:         URI currentURI = new URI(connector.getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
commit:aa3110e
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateTcpConnectionUsingKnownLocalPort() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:         broker.start();
1: 
1:         // This should create the connection.
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("tcp://localhost:61610/localhost:51610");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNotNull(connection);
1: 
1:         broker.stop();
1:     }
1: 
commit:f82dc25
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSetClientInternalExceptionListener() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNull(connection.getClientInternalExceptionListener());
1:         
1:         ClientInternalExceptionListener listener = new ClientInternalExceptionListener() {
1:             public void onException(Throwable exception) {
1:             }
1:         };
1:         connection.setClientInternalExceptionListener(listener);
1:         cf.setClientInternalExceptionListener(listener);
1:         
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNotNull(connection.getClientInternalExceptionListener());
1:         assertEquals(listener, connection.getClientInternalExceptionListener());
1:         
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertEquals(listener, connection.getClientInternalExceptionListener());   
1:         assertEquals(listener, cf.getClientInternalExceptionListener());
1:         
1:     }
1: 
commit:0b34f3c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ExceptionListener;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSetExceptionListener() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNull(connection.getExceptionListener());
1:         
1:         ExceptionListener exListener = new ExceptionListener() {
0: 			public void onException(JMSException arg0) {
1: 			}
1:         };
1:         cf.setExceptionListener(exListener);
1:         
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertNotNull(connection.getExceptionListener());
1:         assertEquals(exListener, connection.getExceptionListener());
1:         
1:         connection = (ActiveMQConnection)cf.createConnection();
1:         assertEquals(exListener, connection.getExceptionListener());
1:         
1:         assertEquals(exListener, cf.getExceptionListener());
1:         
1:     }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4810be5
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://myBroker2?broker.persistent=false");
1:         assertNull(BrokerRegistry.getInstance().lookup("myBroker2"));
1:         assertNotNull(BrokerRegistry.getInstance().lookup("myBroker2"));
1:         assertNull(BrokerRegistry.getInstance().lookup("myBroker2"));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQConnectionFactoryTest.class);
commit:2a58f4c
/////////////////////////////////////////////////////////////////////////
1:         
1:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.auditDepth=5000");
1:         assertEquals(5000, cf.getAuditDepth());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.network.DiscoveryNetworkConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ActiveMQConnectionFactoryTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Got client ID: " + clientID);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Got broker name: " + brokerName);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("connection URI is: " + connectURI);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1: 
1:     public void testUseURIToSetUseClientIDPrefixOnConnectionFactory() throws URISyntaxException, JMSException {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
0:                                                                      "vm://localhost?jms.clientIDPrefix=Cheese");
1:         connection = (ActiveMQConnection)cf.createConnection();
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected void tearDown() throws Exception {
1:         // Try our best to close any previously opend connection.
1:         try {
1:             connection.close();
1:         } catch (Throwable ignore) {
1:         }
1:         // Try our best to stop any previously started broker.
1:         try {
0:             broker.stop();
1:         } catch (Throwable ignore) {
1:         }
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
0:                                                                      "vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=2");
1:         ActiveMQConnection connection = (ActiveMQConnection)cf.createConnection();
1: 
1:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)session.createConsumer(session
1:             .createQueue("FOO.BAR"));
1:         // Make sure the broker is not created until the connection is
1:         // instantiated.
0:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));
1:         connection = (ActiveMQConnection)cf.createConnection();
0:         assertNotNull(BrokerRegistry.getInstance().lookup("localhost"));
1: 
1: 
0:         assertNull(BrokerRegistry.getInstance().lookup("localhost"));
1: 
1:         connection = (ActiveMQConnection)cf.createConnection();
1: 
1: 
1: 
1: 
1:     public void testConnectionFailsToConnectToVMBrokerThatIsNotRunning() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         try {
1:             factory.createConnection();
1:             fail("Expected connection failure.");
1:         } catch (JMSException e) {
1:         }
1: 
1:     public void testFactorySerializable() throws Exception {
1:         String clientID = "TestClientID";
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory();
1:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:         ObjectOutputStream objectsOut = new ObjectOutputStream(bytesOut);
1:         byte[] data = bytesOut.toByteArray();
1:         ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
1:         ObjectInputStream objectsIn = new ObjectInputStream(bytesIn);
1:         cf = (ActiveMQConnectionFactory)objectsIn.readObject();
1:         assertEquals(cf.getClientID(), clientID);
/////////////////////////////////////////////////////////////////////////
1: 
1:         // URI connectURI = connector.getServer().getConnectURI();
1:         // e.g. on OS X so lets use the original details but just use the actual
1:         // port
1:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(),
1:                                  temp.getPath(), temp.getQuery(), temp.getFragment());
1: 
1: 
1:         connection = (ActiveMQConnection)cf.createConnection();
1: 
1: 
commit:3a7c673
/////////////////////////////////////////////////////////////////////////
0:     private ActiveMQConnection connection;
0: 	private BrokerService broker;
0: 
0: 	public void testUseURIToSetUseClientIDPrefixOnConnectionFactory() throws URISyntaxException, JMSException {
0:         connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         String clientID = connection.getClientID();
0:         log.info("Got client ID: " + clientID);
1:         assertTrue("should start with Cheese! but was: " + clientID, clientID.startsWith("Cheese"));
0: 	
0: 	protected void tearDown() throws Exception {
0: 		// Try our best to close any previously opend connection.
0: 		try {
1: 			connection.close();
0: 		} catch (Throwable ignore) {			
1: 		}
0: 		// Try our best to stop any previously started broker.
0: 		try {
0: 			broker.stop();
0: 		} catch (Throwable ignore) {			
1: 		}
1: 	}
/////////////////////////////////////////////////////////////////////////
0:         connection = (ActiveMQConnection) cf.createConnection();
0:         
0:         
0:         connection = (ActiveMQConnection) cf.createConnection();
/////////////////////////////////////////////////////////////////////////
1:         broker = new BrokerService();
/////////////////////////////////////////////////////////////////////////
0:         connection = (ActiveMQConnection) cf.createConnection();
commit:bcca668
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void testConnectionFailsToConnectToVMBrokerThatIsNotRunning() throws Exception {    	
0: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
0:     	try {
0:     		factory.createConnection();
0: 			fail("Expected connection failure.");
0: 		} catch (JMSException e) {
1: 		}
1:     }
0: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Got broker name: " + brokerName);
/////////////////////////////////////////////////////////////////////////
0:         log.info("connection URI is: " + connectURI);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
0: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
0: 
0: import javax.jms.Connection;
1: import javax.jms.JMSException;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: 
1: public class ActiveMQConnectionFactoryTest extends CombinationTestSupport {
0:     
1:     public void testUseURIToSetOptionsOnConnectionFactory() throws URISyntaxException, JMSException {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?jms.useAsyncSend=true");
1:         assertTrue(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
0:         
1:         cf = new ActiveMQConnectionFactory("vm://localhost?jms.useAsyncSend=false");
1:         assertFalse(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm://localhost", cf.getBrokerURL());
0: 
1:         cf = new ActiveMQConnectionFactory("vm:(broker:()/localhost)?jms.useAsyncSend=true");
1:         assertTrue(cf.isUseAsyncSend());
1:         // the broker url have been adjusted.
1:         assertEquals("vm:(broker:()/localhost)", cf.getBrokerURL());
1:     }
0: 
1:     public void testCreateVMConnectionWithEmbdeddBroker() throws URISyntaxException, JMSException {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
0:         // Make sure the broker is not created until the connection is instantiated.
0:         assertNull( BrokerRegistry.getInstance().lookup("localhost") );        
0:         Connection connection = cf.createConnection();
1:         // This should create the connection.
1:         assertNotNull(connection);
1:         // Verify the broker was created.
0:         assertNotNull( BrokerRegistry.getInstance().lookup("localhost") );
0:         connection.close();
1:         // Verify the broker was destroyed.
0:         assertNull( BrokerRegistry.getInstance().lookup("localhost") );
1:     }
0:     
1:     public void testCreateTcpConnectionUsingAllocatedPort() throws Exception {
1:         assertCreateConnection("tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true");
1:     }
1:     public void testCreateTcpConnectionUsingKnownPort() throws Exception {
1:         assertCreateConnection("tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true");
1:     }
0:     
1:     protected void assertCreateConnection(String uri) throws Exception {
1:         // Start up a broker with a tcp connector.
0:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         TransportConnector connector = broker.addConnector(uri);
1:         broker.start();
0:         
1:         URI temp = new URI(uri);
0:         //URI connectURI = connector.getServer().getConnectURI();
1:         // TODO this sometimes fails when using the actual local host name
0:         URI currentURI = connector.getServer().getConnectURI();
0: 
1:         // sometimes the actual host name doesn't work in this test case
0:         // e.g. on OS X so lets use the original details but just use the actual port
0:         URI connectURI = new URI(temp.getScheme(), temp.getUserInfo(), temp.getHost(), currentURI.getPort(), temp.getPath(), temp.getQuery(), temp.getFragment());
0:         
0:         
0:         System.out.println("connection URI is: " + connectURI);
0:         
1:         // This should create the connection.
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectURI);
0:         Connection connection = cf.createConnection();
1:         assertNotNull(connection);
0:         connection.close();
0:         
0:         broker.stop();
1:     }
0:     
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:9b9766d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
0: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
1:     public void testUseURIToConfigureRedeliveryPolicy() throws URISyntaxException, JMSException {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?jms.redeliveryPolicy.maximumRedeliveries=2");
1:         assertEquals("connection redeliveries", 2, cf.getRedeliveryPolicy().getMaximumRedeliveries());
0: 
0:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         assertEquals("connection redeliveries", 2, connection.getRedeliveryPolicy().getMaximumRedeliveries());
0:         
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue("FOO.BAR"));
1:         assertEquals("consumer redeliveries", 2, consumer.getRedeliveryPolicy().getMaximumRedeliveries());
0:         connection.close();
0:     }
0: 
commit:7339c6e
/////////////////////////////////////////////////////////////////////////
0:     public void testUseURIToSetUseClientIDPrefixOnConnectionFactory() throws URISyntaxException, JMSException {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?jms.clientIDPrefix=Cheese");
1:         assertEquals("Cheese", cf.getClientIDPrefix());
0: 
0:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
0:         try {
1:             connection.start();
0: 
0:             String clientID = connection.getClientID();
0:             log.info("Got client ID: " + clientID);
0: 
0:             assertTrue("should start with Cheese! but was: " + clientID, clientID.startsWith("Cheese"));
0:         }
0:         finally {
0:             connection.close();
0:         }
0:     }
0:     
commit:e6747ea
/////////////////////////////////////////////////////////////////////////
1:     public void testGetBrokerName() throws URISyntaxException, JMSException {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
0:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
0:         connection.start();
0:         
1:         String brokerName = connection.getBrokerName();
0:         System.out.println("Got broker name: " + brokerName);
0:         
1:         assertNotNull("No broker name available!", brokerName);
0:         connection.close();
0:     }
0:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:8a8f41c
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void testFactorySerializable() throws Exception{
0:         String clientID="TestClientID";
0:         ActiveMQConnectionFactory cf=new ActiveMQConnectionFactory();
1:         cf.setClientID(clientID);
0:         ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
0:         ObjectOutputStream objectsOut=new ObjectOutputStream(bytesOut);
1:         objectsOut.writeObject(cf);
1:         objectsOut.flush();
0:         byte[] data=bytesOut.toByteArray();
0:         ByteArrayInputStream bytesIn=new ByteArrayInputStream(data);
0:         ObjectInputStream objectsIn=new ObjectInputStream(bytesIn);
0:         cf=(ActiveMQConnectionFactory)objectsIn.readObject();
0:         assertEquals(cf.getClientID(),clientID);
0:     }
============================================================================