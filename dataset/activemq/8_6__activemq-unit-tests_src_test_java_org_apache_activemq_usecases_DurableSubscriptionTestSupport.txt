1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
1:230a86c: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: import javax.jms.Topic;
1:a677c21: import javax.jms.TopicSubscriber;
1:230a86c: 
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a88e19e: import org.apache.activemq.ActiveMQSession;
1:a677c21: import org.apache.activemq.TestSupport;
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: import org.apache.activemq.store.PersistenceAdapter;
59:a677c21: 
1:a677c21: /**
1:a88e19e:  *
1:a677c21:  */
1:fc00993: public abstract class DurableSubscriptionTestSupport extends TestSupport {
1:a677c21: 
1:a677c21:     private Connection connection;
1:a677c21:     private Session session;
1:a677c21:     private TopicSubscriber consumer;
1:a677c21:     private MessageProducer producer;
1:a677c21:     private BrokerService broker;
1:230a86c: 
1:a88e19e:     @Override
1:a677c21:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:a677c21:         return new ActiveMQConnectionFactory("vm://durable-broker");
8:a677c21:     }
1:652d551: 
1:a88e19e:     @Override
1:a677c21:     protected Connection createConnection() throws Exception {
1:a677c21:         Connection rc = super.createConnection();
1:a677c21:         rc.setClientID(getName());
1:a677c21:         return rc;
1:a677c21:     }
1:230a86c: 
1:a88e19e:     @Override
1:a677c21:     protected void setUp() throws Exception {
1:a677c21:         createBroker();
1:a677c21:         super.setUp();
1:a677c21:     }
1:230a86c: 
1:a88e19e:     @Override
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         super.tearDown();
1:a677c21:         destroyBroker();
1:a677c21:     }
1:230a86c: 
1:a677c21:     protected void restartBroker() throws Exception {
1:a677c21:         destroyBroker();
1:a677c21:         createRestartedBroker(); // retain stored messages
1:a677c21:     }
1:230a86c: 
1:a677c21:     private void createBroker() throws Exception {
1:952d036:         broker = new BrokerService();
1:952d036:         broker.setBrokerName("durable-broker");
1:952d036:         broker.setDeleteAllMessagesOnStartup(true);
1:952d036:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:952d036:         broker.setPersistent(true);
1:952d036:         broker.start();
1:f344696:         broker.waitUntilStarted();
1:230a86c: 
1:230a86c:         connection = createConnection();
1:a677c21:     }
1:230a86c: 
1:a677c21:     private void createRestartedBroker() throws Exception {
1:952d036:         broker = new BrokerService();
1:952d036:         broker.setBrokerName("durable-broker");
1:952d036:         broker.setDeleteAllMessagesOnStartup(false);
1:952d036:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:952d036:         broker.setPersistent(true);
1:952d036:         broker.start();
1:f344696:         broker.waitUntilStarted();
1:230a86c: 
2:a677c21:         connection = createConnection();
1:a677c21:     }
1:a677c21: 
1:a677c21:     private void destroyBroker() throws Exception {
1:fc00993:         if (connection != null) {
1:a677c21:             connection.close();
1:fc00993:         }
1:fc00993:         if (broker != null) {
1:a677c21:             broker.stop();
1:f344696:             broker.waitUntilStopped();
1:fc00993:         }
1:a677c21:     }
1:230a86c: 
1:fc00993:     protected abstract PersistenceAdapter createPersistenceAdapter() throws Exception;
1:a88e19e: 
1:652d551:     public void testMessageExpire() throws Exception {
1:652d551:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:652d551:         Topic topic = session.createTopic("TestTopic");
1:652d551:         consumer = session.createDurableSubscriber(topic, "sub1");
1:652d551:         producer = session.createProducer(topic);
1:652d551:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:652d551:         producer.setTimeToLive(1000);
1:652d551:         connection.start();
1:652d551: 
1:652d551:         // Make sure it works when the durable sub is active.
1:652d551:         producer.send(session.createTextMessage("Msg:1"));
1:652d551:         assertTextMessageEquals("Msg:1", consumer.receive(1000));
1:a88e19e: 
1:652d551:         consumer.close();
1:a88e19e: 
1:652d551:         producer.send(session.createTextMessage("Msg:2"));
1:652d551:         producer.send(session.createTextMessage("Msg:3"));
1:a88e19e: 
1:652d551:         consumer = session.createDurableSubscriber(topic, "sub1");
1:652d551: 
1:652d551:         // Try to get the message.
1:652d551:         assertTextMessageEquals("Msg:2", consumer.receive(1000));
1:652d551:         Thread.sleep(1000);
1:652d551:         assertNull(consumer.receive(1000));
1:652d551:     }
1:652d551: 
1:b52624e:     public void testUnsubscribeSubscription() throws Exception {
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic("TestTopic");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         connection.start();
1:652d551: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         producer.send(session.createTextMessage("Msg:1"));
2:a677c21:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:652d551: 
1:a677c21:         // Deactivate the sub.
1:230a86c:         consumer.close();
1:a677c21:         // Send a new message.
1:a677c21:         producer.send(session.createTextMessage("Msg:2"));
1:a677c21:         session.unsubscribe("sub1");
1:230a86c: 
1:a677c21:         // Reopen the connection.
1:a677c21:         connection.close();
1:a677c21:         connection = createConnection();
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         connection.start();
1:230a86c: 
1:a677c21:         // Activate the sub.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         producer.send(session.createTextMessage("Msg:3"));
1:230a86c: 
1:a677c21:         // Try to get the message.
1:230a86c:         assertTextMessageEquals("Msg:3", consumer.receive(5000));
1:a677c21:     }
1:230a86c: 
1:b52624e:     public void testInactiveDurableSubscriptionTwoConnections() throws Exception {
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic("TestTopic");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         connection.start();
1:230a86c: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         producer.send(session.createTextMessage("Msg:1"));
1:230a86c:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:230a86c: 
1:a677c21:         // Deactivate the sub.
2:a677c21:         consumer.close();
1:230a86c: 
1:a677c21:         // Send a new message.
1:a677c21:         producer.send(session.createTextMessage("Msg:2"));
1:230a86c: 
1:a677c21:         // Reopen the connection.
1:a677c21:         connection.close();
1:a677c21:         connection = createConnection();
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         connection.start();
1:230a86c: 
1:a677c21:         // Activate the sub.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:230a86c: 
1:a677c21:         // Try to get the message.
1:230a86c:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:230a86c:     }
1:952d036: 
1:b52624e:     public void testInactiveDurableSubscriptionBrokerRestart() throws Exception {
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic("TestTopic");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         connection.start();
1:952d036: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         producer.send(session.createTextMessage("Msg:1"));
1:a677c21:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:230a86c: 
1:a677c21:         // Deactivate the sub.
1:a677c21:         consumer.close();
1:230a86c: 
1:a677c21:         // Send a new message.
1:a677c21:         producer.send(session.createTextMessage("Msg:2"));
1:230a86c: 
1:a677c21:         // Reopen the connection.
1:a677c21:         restartBroker();
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         connection.start();
1:230a86c: 
1:a677c21:         // Activate the sub.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:230a86c: 
1:a677c21:         // Try to get the message.
1:230a86c:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:230a86c:         assertNull(consumer.receive(5000));
1:230a86c:     }
1:a88e19e: 
1:952d036:     public void testDurableSubscriptionBrokerRestart() throws Exception {
1:952d036: 
1:952d036:         // Create the durable sub.
1:952d036:         connection.start();
1:952d036:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:eaac0d2: 
1:952d036:         // Ensure that consumer will receive messages sent before it was created
1:952d036:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:952d036:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a88e19e: 
1:952d036:         producer = session.createProducer(topic);
1:952d036:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:952d036:         producer.send(session.createTextMessage("Msg:1"));
1:952d036:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:a88e19e: 
1:952d036:         // Make sure cleanup kicks in
1:952d036:         Thread.sleep(1000);
1:952d036: 
1:952d036:         // Restart the broker.
1:952d036:         restartBroker();
1:952d036:     }
1:952d036: 
1:a677c21:     public void testDurableSubscriptionPersistsPastBrokerRestart() throws Exception {
1:952d036: 
1:a677c21:         // Create the durable sub.
1:a677c21:         connection.start();
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:230a86c: 
1:a677c21:         // Ensure that consumer will receive messages sent before it was created
1:a677c21:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:230a86c: 
1:a677c21:         // Restart the broker.
1:a677c21:         restartBroker();
1:230a86c: 
1:a677c21:         // Reconnection
1:a677c21:         connection.start();
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:230a86c: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         producer.send(session.createTextMessage("Msg:1"));
1:230a86c: 
1:a677c21:         // Activate the sub.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:230a86c: 
1:a677c21:         // Send a new message.
1:a677c21:         producer.send(session.createTextMessage("Msg:2"));
1:230a86c: 
1:a677c21:         // Try to get the message.
1:a677c21:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:230a86c:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:230a86c: 
1:230a86c:         assertNull(consumer.receive(5000));
1:230a86c:     }
1:230a86c: 
1:eaac0d2:     public void testDurableSubscriptionRetroactive() throws Exception {
1:eaac0d2: 
1:eaac0d2:         // Create the durable sub.
1:eaac0d2:         connection.start();
1:eaac0d2:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:eaac0d2: 
1:eaac0d2:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:eaac0d2:         consumer = session.createDurableSubscriber(topic, "sub1");
1:eaac0d2:         connection.close();
1:eaac0d2: 
1:eaac0d2:         // Produce
1:eaac0d2:         connection = createConnection();
1:eaac0d2:         connection.start();
1:eaac0d2:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:eaac0d2:         producer = session.createProducer(topic);
1:eaac0d2:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:eaac0d2:         producer.send(session.createTextMessage("Msg:1"));
1:eaac0d2: 
1:eaac0d2:         restartBroker();
1:230a86c: 
1:eaac0d2:         // connect second durable to pick up retroactive message
1:eaac0d2:         connection.start();
1:eaac0d2:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:eaac0d2:         consumer = session.createDurableSubscriber(topic, "sub2");
1:eaac0d2: 
1:eaac0d2:         // Try to get the message.
1:eaac0d2:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:eaac0d2:         assertNull(consumer.receive(2000));
1:eaac0d2:     }
1:eaac0d2: 
1:88c1084:     public void testDurableSubscriptionRollbackRedeliver() throws Exception {
1:88c1084: 
1:88c1084:         // Create the durable sub.
1:88c1084:         connection.start();
1:88c1084: 
1:88c1084:         session = connection.createSession(true, javax.jms.Session.SESSION_TRANSACTED);
1:88c1084:         Topic topic = session.createTopic("TestTopic");
1:88c1084:         consumer = session.createDurableSubscriber(topic, "sub1");
1:88c1084: 
1:88c1084:         Session producerSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:88c1084:         producer = producerSession.createProducer(topic);
1:88c1084:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:88c1084: 
1:88c1084:         producer.send(session.createTextMessage("Msg:1"));
1:88c1084: 
1:88c1084:         // receive and rollback
1:88c1084:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:88c1084:         session.rollback();
1:88c1084:         consumer.close();
1:88c1084:         session.close();
1:88c1084: 
1:88c1084:         session = connection.createSession(true, javax.jms.Session.SESSION_TRANSACTED);
1:88c1084: 
1:88c1084:         // Ensure that consumer will receive messages sent and rolled back
1:88c1084:         consumer = session.createDurableSubscriber(topic, "sub1");
1:88c1084: 
1:88c1084:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:88c1084:         session.commit();
1:88c1084: 
1:88c1084:         assertNull(consumer.receive(5000));
1:88c1084:     }
1:88c1084: 
1:fc00993:     public void xtestInactiveDurableSubscriptionOneConnection() throws Exception {
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic("TestTopic");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         connection.start();
1:230a86c: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         producer.send(session.createTextMessage("Msg:1"));
1:a677c21:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:230a86c: 
1:a677c21:         // Deactivate the sub.
1:a677c21:         consumer.close();
1:230a86c: 
1:a677c21:         // Send a new message.
1:a677c21:         producer.send(session.createTextMessage("Msg:2"));
1:230a86c: 
1:a677c21:         // Activate the sub.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21: 
1:a677c21:         // Try to get the message.
4:a677c21:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:a677c21:     }
1:a677c21: 
1:b52624e:     public void testSelectorChange() throws Exception {
1:a677c21:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Topic topic = session.createTopic("TestTopic");
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1", "color='red'", false);
1:a677c21:         producer = session.createProducer(topic);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a677c21:         connection.start();
1:a677c21: 
1:a677c21:         // Make sure it works when the durable sub is active.
1:a677c21:         TextMessage msg = session.createTextMessage();
1:a677c21:         msg.setText("Msg:1");
1:a677c21:         msg.setStringProperty("color", "blue");
1:a677c21:         producer.send(msg);
1:a677c21:         msg.setText("Msg:2");
1:a677c21:         msg.setStringProperty("color", "red");
1:a677c21:         producer.send(msg);
1:230a86c: 
1:a677c21:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:230a86c: 
1:a677c21:         // Change the subscription
1:a677c21:         consumer.close();
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1", "color='blue'", false);
1:230a86c: 
1:a677c21:         // Send a new message.
1:a677c21:         msg.setText("Msg:3");
1:a677c21:         msg.setStringProperty("color", "red");
1:a677c21:         producer.send(msg);
1:a677c21:         msg.setText("Msg:4");
1:a677c21:         msg.setStringProperty("color", "blue");
1:a677c21:         producer.send(msg);
1:230a86c: 
1:a677c21:         // Try to get the message.
1:230a86c:         assertTextMessageEquals("Msg:4", consumer.receive(5000));
1:a677c21:     }
1:230a86c: 
1:b52624e:     public void testDurableSubWorksInNewSession() throws JMSException {
1:a677c21: 
1:a677c21:         // Create the consumer.
1:a677c21:         connection.start();
1:a677c21:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c:         Topic topic = session.createTopic("topic-" + getName());
1:a677c21:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         // Drain any messages that may allready be in the sub
1:74a7a8b:         while (consumer.receive(1000) != null) {
1:74a7a8b:         }
1:a677c21: 
1:a677c21:         // See if the durable sub works in a new session.
1:a677c21:         session.close();
1:a677c21:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:a677c21: 
1:a677c21:         // Send a Message that should be added to the durable sub.
1:a677c21:         MessageProducer producer = createProducer(session, topic);
1:a677c21:         producer.send(session.createTextMessage("Message 1"));
1:a677c21: 
1:230a86c:         // Activate the durable sub now. And receive the message.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         Message msg = consumer.receive(1000);
1:230a86c:         assertNotNull(msg);
1:a88e19e:         assertEquals("Message 1", ((TextMessage) msg).getText());
1:a88e19e:     }
1:230a86c: 
1:b52624e:     public void testDurableSubWorksInNewConnection() throws Exception {
1:230a86c: 
1:a677c21:         // Create the consumer.
1:a677c21:         connection.start();
1:a677c21:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c:         Topic topic = session.createTopic("topic-" + getName());
1:a677c21:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         // Drain any messages that may allready be in the sub
1:74a7a8b:         while (consumer.receive(1000) != null) {
1:74a7a8b:         }
1:a677c21: 
1:a677c21:         // See if the durable sub works in a new connection.
1:a677c21:         // The embeded broker shutsdown when his connections are closed.
1:a677c21:         // So we open the new connection before the old one is closed.
1:a677c21:         connection.close();
1:a677c21:         connection = createConnection();
1:a677c21:         connection.start();
1:a677c21:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:a677c21: 
1:a677c21:         // Send a Message that should be added to the durable sub.
1:a677c21:         MessageProducer producer = createProducer(session, topic);
1:a677c21:         producer.send(session.createTextMessage("Message 1"));
1:a677c21: 
1:230a86c:         // Activate the durable sub now. And receive the message.
1:a677c21:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a677c21:         Message msg = consumer.receive(1000);
1:230a86c:         assertNotNull(msg);
1:a88e19e:         assertEquals("Message 1", ((TextMessage) msg).getText());
1:a677c21:     }
1:a677c21: 
1:a88e19e:     public void testIndividualAckWithDurableSubs() throws Exception {
1:a88e19e:         // Create the consumer.
1:a88e19e:         connection.start();
1:a88e19e: 
1:a88e19e:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:a88e19e:         Topic topic = session.createTopic("topic-" + getName());
1:a88e19e:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:a88e19e:         // Drain any messages that may allready be in the sub
1:a88e19e:         while (consumer.receive(1000) != null) {
1:a88e19e:         }
1:a88e19e:         consumer.close();
1:a88e19e: 
1:a88e19e:         MessageProducer producer = session.createProducer(topic);
1:a88e19e:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:a88e19e:         producer.send(session.createTextMessage("Message 1"));
1:a88e19e:         producer.send(session.createTextMessage("Message 2"));
1:a88e19e:         producer.send(session.createTextMessage("Message 3"));
1:a88e19e:         producer.close();
1:a88e19e: 
1:a88e19e:         connection.close();
1:a88e19e:         connection = createConnection();
1:a88e19e:         connection.start();
1:a88e19e: 
1:a88e19e:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:a88e19e:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a88e19e: 
1:a88e19e:         Message message = null;
1:a88e19e:         for (int i = 0; i < 3; ++i) {
1:a88e19e:             message = consumer.receive(5000);
1:a88e19e:             assertNotNull(message);
1:a88e19e:             assertEquals("Message " + (i + 1), ((TextMessage) message).getText());
1:a88e19e:         }
1:a88e19e: 
1:a88e19e:         message.acknowledge();
1:a88e19e: 
1:a88e19e:         connection.close();
1:a88e19e:         connection = createConnection();
1:a88e19e:         connection.start();
1:a88e19e: 
1:a88e19e:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:a88e19e:         consumer = session.createDurableSubscriber(topic, "sub1");
1:a88e19e: 
1:a88e19e:         for (int i = 0; i < 2; ++i) {
1:a88e19e:             message = consumer.receive(5000);
1:a88e19e:             assertNotNull(message);
1:a88e19e:             assertEquals("Message " + (i + 1), ((TextMessage) message).getText());
1:a88e19e:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     private MessageProducer createProducer(Session session, Destination queue) throws JMSException {
1:a677c21:         MessageProducer producer = session.createProducer(queue);
1:a677c21:         producer.setDeliveryMode(getDeliveryMode());
1:a677c21:         return producer;
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected int getDeliveryMode() {
1:230a86c:         return DeliveryMode.PERSISTENT;
1:230a86c:     }
1:230a86c: 
1:a677c21:     private void assertTextMessageEquals(String string, Message message) throws JMSException {
1:a677c21:         assertNotNull("Message was null", message);
1:a677c21:         assertTrue("Message is not a TextMessage", message instanceof TextMessage);
1:a88e19e:         assertEquals(string, ((TextMessage) message).getText());
1:a677c21:     }
1:230a86c: 
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a88e19e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Message 1", ((TextMessage) msg).getText());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Message 1", ((TextMessage) msg).getText());
1:     }
1:     public void testIndividualAckWithDurableSubs() throws Exception {
1:         // Create the consumer.
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("topic-" + getName());
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:         // Drain any messages that may allready be in the sub
1:         while (consumer.receive(1000) != null) {
1:         }
1:         consumer.close();
1: 
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage("Message 1"));
1:         producer.send(session.createTextMessage("Message 2"));
1:         producer.send(session.createTextMessage("Message 3"));
1:         producer.close();
1: 
1:         connection.close();
1:         connection = createConnection();
1:         connection.start();
1: 
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         Message message = null;
1:         for (int i = 0; i < 3; ++i) {
1:             message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertEquals("Message " + (i + 1), ((TextMessage) message).getText());
1:         }
1: 
1:         message.acknowledge();
1: 
1:         connection.close();
1:         connection = createConnection();
1:         connection.start();
1: 
1:         session = connection.createSession(false, ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         for (int i = 0; i < 2; ++i) {
1:             message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertEquals("Message " + (i + 1), ((TextMessage) message).getText());
1:         }
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(string, ((TextMessage) message).getText());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:eaac0d2
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubscriptionRetroactive() throws Exception {
1: 
1:         // Create the durable sub.
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         connection.close();
1: 
1:         // Produce
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage("Msg:1"));
1: 
1:         restartBroker();
1: 
1:         // connect second durable to pick up retroactive message
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         consumer = session.createDurableSubscriber(topic, "sub2");
1: 
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         assertNull(consumer.receive(2000));
1:     }
1: 
commit:88c1084
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubscriptionRollbackRedeliver() throws Exception {
1: 
1:         // Create the durable sub.
1:         connection.start();
1: 
1:         session = connection.createSession(true, javax.jms.Session.SESSION_TRANSACTED);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         Session producerSession = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         producer = producerSession.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         producer.send(session.createTextMessage("Msg:1"));
1: 
1:         // receive and rollback
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         session.rollback();
1:         consumer.close();
1:         session.close();
1: 
1:         session = connection.createSession(true, javax.jms.Session.SESSION_TRANSACTED);
1: 
1:         // Ensure that consumer will receive messages sent and rolled back
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         session.commit();
1: 
1:         assertNull(consumer.receive(5000));
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f344696
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:             broker.waitUntilStopped();
commit:952d036
/////////////////////////////////////////////////////////////////////////
1:         broker = new BrokerService();
1:         broker.setBrokerName("durable-broker");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:         broker.setPersistent(true);
1:         broker.start();
1:         broker = new BrokerService();
1:         broker.setBrokerName("durable-broker");
1:         broker.setDeleteAllMessagesOnStartup(false);
1:         broker.setPersistenceAdapter(createPersistenceAdapter());
1:         broker.setPersistent(true);
1:         broker.start();
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testDurableSubscriptionBrokerRestart() throws Exception {
1: 
1:         // Create the durable sub.
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         // Ensure that consumer will receive messages sent before it was created
1:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         
1:         // Make sure cleanup kicks in
1:         Thread.sleep(1000);
1: 
1:         // Restart the broker.
1:         restartBroker();
1:     }
commit:652d551
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testMessageExpire() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.setTimeToLive(1000);
1:         connection.start();
1: 
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(1000));
1:         
1:         consumer.close();
1:         
1:         producer.send(session.createTextMessage("Msg:2"));
1:         producer.send(session.createTextMessage("Msg:3"));
1:         
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:2", consumer.receive(1000));
1:         Thread.sleep(1000);
1:         assertNull(consumer.receive(1000));
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class DurableSubscriptionTestSupport extends TestSupport {
/////////////////////////////////////////////////////////////////////////
1:         if (connection != null) {
1:         }
1:         if (broker != null) {
1:         }
1:     protected abstract PersistenceAdapter createPersistenceAdapter() throws Exception;
0:     public void xtestUnsubscribeSubscription() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void xtestInactiveDurableSubscriptionTwoConnections() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void xtestInactiveDurableSubscriptionBrokerRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void xtestInactiveDurableSubscriptionOneConnection() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void xtestSelectorChange() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void xtestDurableSubWorksInNewSession() throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     public void xtestDurableSubWorksInNewConnection() throws Exception {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         while (consumer.receive(1000) != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         while (consumer.receive(1000) != null) {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection = createConnection();
1: 
0:         if (connection != null)
0:         if (broker != null)
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         consumer.close();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTextMessageEquals("Msg:3", consumer.receive(5000));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:         assertNull(consumer.receive(5000));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1: 
1:         assertNull(consumer.receive(5000));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTextMessageEquals("Msg:4", consumer.receive(5000));
1: 
1:         Topic topic = session.createTopic("topic-" + getName());
0:         while (consumer.receive(1000) != null)
/////////////////////////////////////////////////////////////////////////
1:         // Activate the durable sub now. And receive the message.
1:         assertNotNull(msg);
0:         assertEquals("Message 1", ((TextMessage)msg).getText());
1: 
1:         Topic topic = session.createTopic("topic-" + getName());
0:         while (consumer.receive(1000) != null)
/////////////////////////////////////////////////////////////////////////
1:         // Activate the durable sub now. And receive the message.
1:         assertNotNull(msg);
0:         assertEquals("Message 1", ((TextMessage)msg).getText());
1: 
1:     }
1: 
1:     protected int getDeliveryMode() {
1:         return DeliveryMode.PERSISTENT;
1:     }
1: 
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Robert Davies
-------------------------------------------------------------------------------
commit:b52624e
/////////////////////////////////////////////////////////////////////////
1:     public void testUnsubscribeSubscription() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testInactiveDurableSubscriptionTwoConnections() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testInactiveDurableSubscriptionBrokerRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testSelectorChange() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubWorksInNewSession() throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubWorksInNewConnection() throws Exception {
commit:985b4ce
/////////////////////////////////////////////////////////////////////////
0:     public void XtestUnsubscribeSubscription() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestInactiveDurableSubscriptionTwoConnections() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestInactiveDurableSubscriptionBrokerRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestInactiveDurableSubscriptionOneConnection() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestSelectorChange() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestDurableSubWorksInNewSession() throws JMSException {
/////////////////////////////////////////////////////////////////////////
0:     public void XtestDurableSubWorksInNewConnection() throws Exception {
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.PersistenceAdapter;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: abstract public class DurableSubscriptionTestSupport extends TestSupport {
1: 
1:     private Connection connection;
1:     private Session session;
1:     private TopicSubscriber consumer;
1:     private MessageProducer producer;
1:     private BrokerService broker;
1:     
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://durable-broker");
1:     }
1:     
1:     protected Connection createConnection() throws Exception {
1:         Connection rc = super.createConnection();
1:         rc.setClientID(getName());
1:         return rc;
1:     }
1:     
1:     protected void setUp() throws Exception {
1:         createBroker();
1:         super.setUp();
1:     }
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1:     protected void restartBroker() throws Exception {
1:         destroyBroker();
1:         createRestartedBroker(); // retain stored messages
1:     }
1:     private void createBroker() throws Exception {
0:         try {
0:             broker = new BrokerService();
0:             broker.setBrokerName("durable-broker");
0:             broker.setDeleteAllMessagesOnStartup(true);
0:             broker.setPersistenceAdapter(createPersistenceAdapter());
0:             broker.setPersistent(true);
0:             broker.start();
0:         } catch (Exception e) {
0:             e.printStackTrace();
1:         }
1: 
1:         connection = createConnection();
1:     }
1:     
1:     private void createRestartedBroker() throws Exception {
0:         try {
0:             broker = new BrokerService();
0:             broker.setBrokerName("durable-broker");
0:             broker.setDeleteAllMessagesOnStartup(false);
0:             broker.setPersistenceAdapter(createPersistenceAdapter());
0:             broker.setPersistent(true);
0:             broker.start();
1:             
0:         } catch (Exception e) {
0:             e.printStackTrace();
1:         }
1: 
1:         connection = createConnection();        
1:     }
1:     private void destroyBroker() throws Exception {
0:         if( connection != null )
1:             connection.close();
0:         if( broker!=null ) 
1:             broker.stop();
1:     }
1:     
0:     abstract protected PersistenceAdapter createPersistenceAdapter() throws Exception;
1:     
1:     
0:     public void testUnsubscribeSubscription() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         
1:         // Deactivate the sub.
1:         consumer.close();        
1:         // Send a new message.
1:         producer.send(session.createTextMessage("Msg:2"));
1:         session.unsubscribe("sub1");
1:         
1:         // Reopen the connection.
1:         connection.close();
1:         connection = createConnection();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(topic);
1:         connection.start();
1: 
1:         // Activate the sub.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer.send(session.createTextMessage("Msg:3"));
1:         
1:         // Try to get the message.
0:         assertTextMessageEquals("Msg:3", consumer.receive(5000));      
1:     }
1:     
0:     public void testInactiveDurableSubscriptionTwoConnections() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         
1:         // Deactivate the sub.
1:         consumer.close();
1:         
1:         // Send a new message.
1:         producer.send(session.createTextMessage("Msg:2"));
1:         
1:         // Reopen the connection.
1:         connection.close();
1:         connection = createConnection();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         // Activate the sub.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));      
1:     }    
1:     
0:     public void testInactiveDurableSubscriptionBrokerRestart() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         
1:         // Deactivate the sub.
1:         consumer.close();
1:         
1:         // Send a new message.
1:         producer.send(session.createTextMessage("Msg:2"));
1:         
1:         // Reopen the connection.
1:         restartBroker();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         // Activate the sub.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));      
0:         assertNull(consumer.receive(5000));      
1:     }    
1:     
1:     public void testDurableSubscriptionPersistsPastBrokerRestart() throws Exception {
1: 
1:         // Create the durable sub.
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1: 
1:         // Ensure that consumer will receive messages sent before it was created
1:         Topic topic = session.createTopic("TestTopic?consumer.retroactive=true");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1: 
1:         // Restart the broker.
1:         restartBroker();
1: 
1:         // Reconnection
1:         connection.start();
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         
1:         // Activate the sub.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         
1:         // Send a new message.
1:         producer.send(session.createTextMessage("Msg:2"));
1:         
1:         
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));      
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:         
0:         assertNull(consumer.receive(5000));      
1:     }    
1:     
0:     public void testInactiveDurableSubscriptionOneConnection() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         // Make sure it works when the durable sub is active.
1:         producer.send(session.createTextMessage("Msg:1"));
1:         assertTextMessageEquals("Msg:1", consumer.receive(5000));
1:         
1:         // Deactivate the sub.
1:         consumer.close();
1:         
1:         // Send a new message.
1:         producer.send(session.createTextMessage("Msg:2"));
1: 
1:         // Activate the sub.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         
1:         // Try to get the message.
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));      
1:     }
1:     
0:     public void xtestSelectorChange() throws Exception {
1:         session = connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TestTopic");
1:         consumer = session.createDurableSubscriber(topic, "sub1", "color='red'", false);
1:         producer = session.createProducer(topic);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         // Make sure it works when the durable sub is active.
1:         TextMessage msg = session.createTextMessage();
1:         msg.setText("Msg:1");
1:         msg.setStringProperty("color", "blue");
1:         producer.send(msg);
1:         msg.setText("Msg:2");
1:         msg.setStringProperty("color", "red");
1:         producer.send(msg);
1:         
1:         assertTextMessageEquals("Msg:2", consumer.receive(5000));
1:         
1:         // Change the subscription
1:         consumer.close();
1:         consumer = session.createDurableSubscriber(topic, "sub1", "color='blue'", false);
1:         
1:         // Send a new message.
1:         msg.setText("Msg:3");
1:         msg.setStringProperty("color", "red");
1:         producer.send(msg);
1:         msg.setText("Msg:4");
1:         msg.setStringProperty("color", "blue");
1:         producer.send(msg);
1:         
1:         // Try to get the message.
0:         assertTextMessageEquals("Msg:4", consumer.receive(5000));      
1:     }
1:     
1:     
0:     public void testDurableSubWorksInNewSession() throws JMSException {
1: 
1:         // Create the consumer.
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Topic topic = session.createTopic("topic-"+getName());
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:         // Drain any messages that may allready be in the sub
0:         while( consumer.receive(1000)!=null )
0:             ;
1: 
1:         // See if the durable sub works in a new session.
1:         session.close();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         // Send a Message that should be added to the durable sub.
1:         MessageProducer producer = createProducer(session, topic);
1:         producer.send(session.createTextMessage("Message 1"));
1: 
0:         // Activate the durable sub now.  And receive the message.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         Message msg = consumer.receive(1000);
0:         assertNotNull(msg);        
0:         assertEquals( "Message 1", ((TextMessage)msg).getText()  );
1: 
1:     }
1:     
1:     
0:     public void testDurableSubWorksInNewConnection() throws Exception {
1: 
1:         // Create the consumer.
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Topic topic = session.createTopic("topic-"+getName());
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "sub1");
1:         // Drain any messages that may allready be in the sub
0:         while( consumer.receive(1000)!=null )
0:             ;
1: 
1:         // See if the durable sub works in a new connection.
1:         // The embeded broker shutsdown when his connections are closed.
1:         // So we open the new connection before the old one is closed.
1:         connection.close();
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         // Send a Message that should be added to the durable sub.
1:         MessageProducer producer = createProducer(session, topic);
1:         producer.send(session.createTextMessage("Message 1"));
1: 
0:         // Activate the durable sub now.  And receive the message.
1:         consumer = session.createDurableSubscriber(topic, "sub1");
1:         Message msg = consumer.receive(1000);
0:         assertNotNull(msg);        
0:         assertEquals( "Message 1", ((TextMessage)msg).getText()  );
1: 
1:     }
1:     
1:     private MessageProducer createProducer(Session session, Destination queue) throws JMSException {
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.setDeliveryMode(getDeliveryMode());
1:         return producer;
1:    }
1:    
0:    protected int getDeliveryMode() {
0:        return DeliveryMode.PERSISTENT;
1:    }
1:     private void assertTextMessageEquals(String string, Message message) throws JMSException {
1:         assertNotNull("Message was null", message);
1:         assertTrue("Message is not a TextMessage", message instanceof TextMessage);
0:         assertEquals(string, ((TextMessage)message).getText());
1:     }
1:     
1: }
============================================================================