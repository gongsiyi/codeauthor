1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An expression which performs an operation on two expression values.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:fc00993: public abstract class BinaryExpression implements Expression {
1:d29ca2a:     protected Expression left;
1:d29ca2a:     protected Expression right;
1:d29ca2a: 
1:d29ca2a:     public BinaryExpression(Expression left, Expression right) {
1:d29ca2a:         this.left = left;
1:d29ca2a:         this.right = right;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Expression getLeft() {
1:d29ca2a:         return left;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Expression getRight() {
1:d29ca2a:         return right;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#toString()
1:d29ca2a:      */
1:d29ca2a:     public String toString() {
1:d29ca2a:         return "(" + left.toString() + " " + getExpressionSymbol() + " " + right.toString() + ")";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:d29ca2a:      *
1:d29ca2a:      * @see java.lang.Object#hashCode()
1:d29ca2a:      */
1:d29ca2a:     public int hashCode() {
1:d29ca2a:         return toString().hashCode();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * TODO: more efficient hashCode()
1:d29ca2a:      *
1:d29ca2a:      * @see java.lang.Object#equals(java.lang.Object)
1:d29ca2a:      */
1:d29ca2a:     public boolean equals(Object o) {
1:d29ca2a: 
1:d29ca2a:         if (o == null || !this.getClass().equals(o.getClass())) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a:         return toString().equals(o.toString());
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the symbol that represents this binary expression.  For example, addition is
1:d29ca2a:      * represented by "+"
1:d29ca2a:      *
1:d29ca2a:      * @return
1:d29ca2a:      */
1:fc00993:     public abstract String getExpressionSymbol();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param expression
1:d29ca2a:      */
1:d29ca2a:     public void setRight(Expression expression) {
1:d29ca2a:         right = expression;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param expression
1:d29ca2a:      */
1:d29ca2a:     public void setLeft(Expression expression) {
1:d29ca2a:         left = expression;
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class BinaryExpression implements Expression {
/////////////////////////////////////////////////////////////////////////
1:     public abstract String getExpressionSymbol();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: 
1: 
1: /**
1:  * An expression which performs an operation on two expression values.
1:  * 
0:  * @version $Revision: 1.2 $
1:  */
0: abstract public class BinaryExpression implements Expression {
1:     protected Expression left;
1:     protected Expression right;
1: 
1:     public BinaryExpression(Expression left, Expression right) {
1:         this.left = left;
1:         this.right = right;
1:     }
1: 
1:     public Expression getLeft() {
1:         return left;
1:     }
1: 
1:     public Expression getRight() {
1:         return right;
1:     }
1: 
1: 
1:     /**
1:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
1:         return "(" + left.toString() + " " + getExpressionSymbol() + " " + right.toString() + ")";
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
1:      *
1:      * @see java.lang.Object#hashCode()
1:      */
1:     public int hashCode() {
1:         return toString().hashCode();
1:     }
1: 
1:     /**
1:      * TODO: more efficient hashCode()
1:      *
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object o) {
1: 
1:         if (o == null || !this.getClass().equals(o.getClass())) {
1:             return false;
1:         }
1:         return toString().equals(o.toString());
1: 
1:     }
1: 
1:     /**
1:      * Returns the symbol that represents this binary expression.  For example, addition is
1:      * represented by "+"
1:      *
1:      * @return
1:      */
0:     abstract public String getExpressionSymbol();
1: 
1:     /**
1:      * @param expression
1:      */
1:     public void setRight(Expression expression) {
1:         right = expression;
1:     }
1: 
1:     /**
1:      * @param expression
1:      */
1:     public void setLeft(Expression expression) {
1:         left = expression;
1:     }
1:     
1: }
============================================================================