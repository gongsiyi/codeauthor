1:5bf2329: /**
1:5bf2329:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5bf2329:  * contributor license agreements.  See the NOTICE file distributed with
1:5bf2329:  * this work for additional information regarding copyright ownership.
1:5bf2329:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5bf2329:  * (the "License"); you may not use this file except in compliance with
1:5bf2329:  * the License.  You may obtain a copy of the License at
1:5bf2329:  *
1:5bf2329:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5bf2329:  *
1:5bf2329:  * Unless required by applicable law or agreed to in writing, software
1:5bf2329:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5bf2329:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5bf2329:  * See the License for the specific language governing permissions and
1:5bf2329:  * limitations under the License.
1:5bf2329:  */
1:5bf2329: package org.apache.activemq.transport.vm;
5:c89bb7a: 
1:c89bb7a: import java.io.IOException;
1:5bf2329: import java.net.URI;
1:37c46b9: import java.net.URISyntaxException;
1:c89bb7a: import java.util.concurrent.CountDownLatch;
1:b8a20e9: import java.util.concurrent.ExecutorService;
1:b8a20e9: import java.util.concurrent.Executors;
1:c89bb7a: import java.util.concurrent.TimeUnit;
1:37c46b9: import java.util.concurrent.atomic.AtomicReference;
1:5bf2329: import javax.jms.Connection;
1:5bf2329: import org.apache.activemq.ActiveMQConnection;
1:5bf2329: import org.apache.activemq.ActiveMQConnectionFactory;
1:5bf2329: import org.apache.activemq.broker.BrokerRegistry;
1:37c46b9: import org.apache.activemq.broker.PublishedAddressPolicy;
1:37c46b9: import org.apache.activemq.broker.TransportConnector;
1:c89bb7a: import org.apache.activemq.command.BrokerInfo;
1:c89bb7a: import org.apache.activemq.transport.Transport;
1:c89bb7a: import org.apache.activemq.transport.TransportFactory;
1:c89bb7a: import org.apache.activemq.transport.TransportListener;
1:37c46b9: import org.junit.Test;
1:c89bb7a: 
1:b8a20e9: import static org.junit.Assert.assertEquals;
1:b8a20e9: import static org.junit.Assert.assertNotNull;
1:b8a20e9: import static org.junit.Assert.assertTrue;
1:b8a20e9: 
1:b8a20e9: public class VMTransportBrokerNameTest {
1:c89bb7a: 
1:5bf2329:     private static final String MY_BROKER = "myBroker";
1:5bf2329:     final String vmUrl = "vm:(broker:(tcp://localhost:61616)/" + MY_BROKER + "?persistent=false)";
1:c89bb7a: 
1:b8a20e9:     @Test
1:5bf2329:     public void testBrokerName() throws Exception {
1:5bf2329:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(vmUrl));
1:5bf2329:         ActiveMQConnection c1 = (ActiveMQConnection) cf.createConnection();
1:c89bb7a:         assertTrue("Transport has name in it: " + c1.getTransport(), c1.getTransport().toString().contains(MY_BROKER));
1:b8a20e9: 
1:5bf2329:         // verify Broker is there with name
1:5bf2329:         ActiveMQConnectionFactory cfbyName = new ActiveMQConnectionFactory(new URI("vm://" + MY_BROKER + "?create=false"));
1:5bf2329:         Connection c2 = cfbyName.createConnection();
1:b8a20e9: 
1:5bf2329:         assertNotNull(BrokerRegistry.getInstance().lookup(MY_BROKER));
1:5bf2329:         assertEquals(BrokerRegistry.getInstance().findFirst().getBrokerName(), MY_BROKER);
1:5bf2329:         assertEquals(BrokerRegistry.getInstance().getBrokers().size(), 1);
1:b8a20e9: 
1:5bf2329:         c1.close();
1:5bf2329:         c2.close();
2:c89bb7a:     }
1:c89bb7a: 
1:b8a20e9:     @Test
1:37c46b9:     public void testPublishableAddressUri() throws Exception {
1:37c46b9: 
1:37c46b9:         PublishedAddressPolicy publishedAddressPolicy = new PublishedAddressPolicy();
1:37c46b9:         final AtomicReference<URI> uriAtomicReference = new AtomicReference<>();
1:37c46b9: 
1:37c46b9:         TransportConnector dummyTransportConnector = new TransportConnector() {
1:37c46b9:             @Override
1:37c46b9:             public URI getConnectUri() throws IOException, URISyntaxException {
1:37c46b9:                 return uriAtomicReference.get();
1:37c46b9:             }
1:37c46b9:         };
1:37c46b9:         URI ok = new URI("vm://b1");
1:37c46b9:         uriAtomicReference.set(ok);
1:37c46b9:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1:37c46b9: 
1:37c46b9:         ok = new URI("vm://b1?async=false");
1:37c46b9:         uriAtomicReference.set(ok);
1:37c46b9:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1:37c46b9: 
1:37c46b9: 
1:37c46b9:         URI badHost = new URI("vm://b1_11");
1:37c46b9:         uriAtomicReference.set(badHost);
1:37c46b9:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1:37c46b9: 
1:37c46b9:     }
1:37c46b9: 
1:37c46b9:     @Test
1:b8a20e9:     public void testBrokerInfoReceiptClientAsync() throws Exception {
1:c89bb7a: 
1:c89bb7a:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(vmUrl));
1:c89bb7a:         ActiveMQConnection c1 = (ActiveMQConnection) cf.createConnection();
1:c89bb7a: 
1:b8a20e9:         final int numIterations = 400;
1:b8a20e9:         final CountDownLatch successLatch = new CountDownLatch(numIterations);
1:b8a20e9:         ExecutorService executor = Executors.newFixedThreadPool(100);
1:b8a20e9:         for (int i = 0; i < numIterations; i++) {
1:b8a20e9:             executor.submit(new Runnable() {
4:c89bb7a:                 @Override
1:b8a20e9:                 public void run() {
1:b8a20e9:                     try {
1:b8a20e9:                         verifyBrokerInfo(successLatch);
1:b8a20e9:                     } catch (Exception ignored) {
1:b8a20e9:                         ignored.printStackTrace();
1:c89bb7a:                     }
1:c89bb7a:                 }
1:c89bb7a:             });
1:c89bb7a:         }
1:b8a20e9: 
1:b8a20e9:         executor.shutdown();
1:b8a20e9:         executor.awaitTermination(20, TimeUnit.SECONDS);
1:c89bb7a:         c1.close();
1:b8a20e9: 
1:b8a20e9:         assertTrue("all success: " + successLatch.getCount(), successLatch.await(1, TimeUnit.SECONDS));
1:b8a20e9:     }
1:b8a20e9: 
1:b8a20e9:     public void verifyBrokerInfo(CountDownLatch success) throws Exception {
1:b8a20e9:         final CountDownLatch gotBrokerInfo = new CountDownLatch(1);
1:b8a20e9:         Transport transport = TransportFactory.connect(new URI("vm://" + MY_BROKER + "?async=false"));
1:b8a20e9:         transport.setTransportListener(new TransportListener() {
1:b8a20e9:             @Override
1:b8a20e9:             public void onCommand(Object command) {
1:b8a20e9:                 if (command instanceof BrokerInfo) {
1:b8a20e9:                     gotBrokerInfo.countDown();
1:b8a20e9:                 }
1:b8a20e9:             }
1:b8a20e9: 
1:b8a20e9:             @Override
1:b8a20e9:             public void onException(IOException error) {
1:b8a20e9: 
1:b8a20e9:             }
1:b8a20e9: 
1:b8a20e9:             @Override
1:b8a20e9:             public void transportInterupted() {
1:b8a20e9: 
1:b8a20e9:             }
1:b8a20e9: 
1:b8a20e9:             @Override
1:b8a20e9:             public void transportResumed() {
1:b8a20e9: 
1:b8a20e9:             }
1:b8a20e9:         });
1:b8a20e9:         transport.start();
1:b8a20e9:         if (gotBrokerInfo.await(5, TimeUnit.SECONDS)) {
1:b8a20e9:             success.countDown();
1:b8a20e9:         }
1:b8a20e9:         transport.stop();
1:c89bb7a:     }
1:c89bb7a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:37c46b9
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
1: import java.util.concurrent.atomic.AtomicReference;
1: import org.apache.activemq.broker.PublishedAddressPolicy;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     public void testPublishableAddressUri() throws Exception {
1: 
1:         PublishedAddressPolicy publishedAddressPolicy = new PublishedAddressPolicy();
1:         final AtomicReference<URI> uriAtomicReference = new AtomicReference<>();
1: 
1:         TransportConnector dummyTransportConnector = new TransportConnector() {
1:             @Override
1:             public URI getConnectUri() throws IOException, URISyntaxException {
1:                 return uriAtomicReference.get();
1:             }
1:         };
1:         URI ok = new URI("vm://b1");
1:         uriAtomicReference.set(ok);
1:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1: 
1:         ok = new URI("vm://b1?async=false");
1:         uriAtomicReference.set(ok);
1:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1: 
1: 
1:         URI badHost = new URI("vm://b1_11");
1:         uriAtomicReference.set(badHost);
1:         assertEquals(uriAtomicReference.get(), publishedAddressPolicy.getPublishableConnectURI(dummyTransportConnector));
1: 
1:     }
1: 
1:     @Test
commit:b8a20e9
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
0: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class VMTransportBrokerNameTest {
1:     @Test
1: 
1: 
1: 
1:     @Test
1:     public void testBrokerInfoReceiptClientAsync() throws Exception {
1:         final int numIterations = 400;
1:         final CountDownLatch successLatch = new CountDownLatch(numIterations);
1:         ExecutorService executor = Executors.newFixedThreadPool(100);
1:         for (int i = 0; i < numIterations; i++) {
1:             executor.submit(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         verifyBrokerInfo(successLatch);
1:                     } catch (Exception ignored) {
1:                         ignored.printStackTrace();
1: 
1:         executor.shutdown();
1:         executor.awaitTermination(20, TimeUnit.SECONDS);
1: 
1:         assertTrue("all success: " + successLatch.getCount(), successLatch.await(1, TimeUnit.SECONDS));
1:     }
1: 
1:     public void verifyBrokerInfo(CountDownLatch success) throws Exception {
1:         final CountDownLatch gotBrokerInfo = new CountDownLatch(1);
1:         Transport transport = TransportFactory.connect(new URI("vm://" + MY_BROKER + "?async=false"));
1:         transport.setTransportListener(new TransportListener() {
1:             @Override
1:             public void onCommand(Object command) {
1:                 if (command instanceof BrokerInfo) {
1:                     gotBrokerInfo.countDown();
1:                 }
1:             }
1: 
1:             @Override
1:             public void onException(IOException error) {
1: 
1:             }
1: 
1:             @Override
1:             public void transportInterupted() {
1: 
1:             }
1: 
1:             @Override
1:             public void transportResumed() {
1: 
1:             }
1:         });
1:         transport.start();
1:         if (gotBrokerInfo.await(5, TimeUnit.SECONDS)) {
1:             success.countDown();
1:         }
1:         transport.stop();
commit:c89bb7a
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void testBrokerInfoClientAsync() throws Exception {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(vmUrl));
1:         ActiveMQConnection c1 = (ActiveMQConnection) cf.createConnection();
1:         assertTrue("Transport has name in it: " + c1.getTransport(), c1.getTransport().toString().contains(MY_BROKER));
1: 
0:         for (int i=0;i<20; i++) {
0:             final CountDownLatch gotBrokerInfo = new CountDownLatch(1);
0:             Transport transport = TransportFactory.connect(new URI("vm://" + MY_BROKER + "?async=false"));
0:             transport.setTransportListener(new TransportListener() {
1:                 @Override
0:                 public void onCommand(Object command) {
0:                     if (command instanceof BrokerInfo) {
0:                         gotBrokerInfo.countDown();
1:                     }
1:                 }
1: 
1:                 @Override
0:                 public void onException(IOException error) {
1: 
1:                 }
1: 
1:                 @Override
0:                 public void transportInterupted() {
1: 
1:                 }
1: 
1:                 @Override
0:                 public void transportResumed() {
1: 
1:                 }
1:             });
0:             transport.start();
1: 
0:             assertTrue("got broker info on iteration:" + i, gotBrokerInfo.await(5, TimeUnit.SECONDS));
1: 
0:             transport.stop();
1:         }
1:         c1.close();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5bf2329
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.vm;
0: 
1: import java.net.URI;
0: 
1: import javax.jms.Connection;
0: 
0: import junit.framework.TestCase;
0: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerRegistry;
0: 
0: public class VMTransportBrokerNameTest extends TestCase {
0: 
1:     private static final String MY_BROKER = "myBroker";
1:     final String vmUrl = "vm:(broker:(tcp://localhost:61616)/" + MY_BROKER + "?persistent=false)";
0: 
1:     public void testBrokerName() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(vmUrl));
1:         ActiveMQConnection c1 = (ActiveMQConnection) cf.createConnection();
0:         assertTrue("Transport has name in it: " + c1.getTransport(), c1.getTransport().toString().contains(MY_BROKER));
0:         
1:         // verify Broker is there with name
1:         ActiveMQConnectionFactory cfbyName = new ActiveMQConnectionFactory(new URI("vm://" + MY_BROKER + "?create=false"));
1:         Connection c2 = cfbyName.createConnection();
0:         
1:         assertNotNull(BrokerRegistry.getInstance().lookup(MY_BROKER));
1:         assertEquals(BrokerRegistry.getInstance().findFirst().getBrokerName(), MY_BROKER);
1:         assertEquals(BrokerRegistry.getInstance().getBrokers().size(), 1);
0:         
1:         c1.close();
1:         c2.close();
0:     }
0: }
============================================================================