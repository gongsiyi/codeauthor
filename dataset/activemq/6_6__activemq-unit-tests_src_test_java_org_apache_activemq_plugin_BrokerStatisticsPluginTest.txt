1:6fc3744: /**
1:6fc3744:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6fc3744:  * contributor license agreements.  See the NOTICE file distributed with
1:6fc3744:  * this work for additional information regarding copyright ownership.
1:6fc3744:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6fc3744:  * (the "License"); you may not use this file except in compliance with
1:6fc3744:  * the License.  You may obtain a copy of the License at
1:6fc3744:  *
1:6fc3744:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6fc3744:  *
1:6fc3744:  * Unless required by applicable law or agreed to in writing, software
1:6fc3744:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6fc3744:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6fc3744:  * See the License for the specific language governing permissions and
1:6fc3744:  * limitations under the License.
1:6fc3744:  */
1:6fc3744: package org.apache.activemq.plugin;
1:e5c4ffd: 
1:ccf601e: import java.net.URI;
1:e5c4ffd: 
1:6fc3744: import javax.jms.Connection;
1:6fc3744: import javax.jms.ConnectionFactory;
1:6fc3744: import javax.jms.MapMessage;
1:6fc3744: import javax.jms.Message;
1:6fc3744: import javax.jms.MessageConsumer;
1:6fc3744: import javax.jms.MessageProducer;
1:6fc3744: import javax.jms.Queue;
1:6fc3744: import javax.jms.Session;
1:ccf601e: 
1:ccf601e: import junit.framework.TestCase;
1:ccf601e: 
1:ccf601e: import org.apache.activemq.ActiveMQConnectionFactory;
1:ccf601e: import org.apache.activemq.broker.BrokerFactory;
1:ccf601e: import org.apache.activemq.broker.BrokerPlugin;
1:ccf601e: import org.apache.activemq.broker.BrokerService;
1:ccf601e: import org.slf4j.Logger;
1:ccf601e: import org.slf4j.LoggerFactory;
1:e5c4ffd: 
1:6fc3744: /**
1:6fc3744:  * A BrokerStatisticsPluginTest
1:6fc3744:  * A testcase for https://issues.apache.org/activemq/browse/AMQ-2379
1:6fc3744:  *
1:6fc3744:  */
1:6fc3744: public class BrokerStatisticsPluginTest extends TestCase{
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(BrokerStatisticsPluginTest.class);
1:ccf601e: 
1:6fc3744:     private Connection connection;
1:6fc3744:     private BrokerService broker;
1:ccf601e: 
1:6fc3744:     public void testBrokerStats() throws Exception{
1:6fc3744:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6fc3744:         Queue replyTo = session.createTemporaryQueue();
1:6fc3744:         MessageConsumer consumer = session.createConsumer(replyTo);
1:6fc3744:         Queue query = session.createQueue(StatisticsBroker.STATS_BROKER_PREFIX);
1:6fc3744:         MessageProducer producer = session.createProducer(query);
1:6fc3744:         Message msg = session.createMessage();
1:6fc3744:         msg.setJMSReplyTo(replyTo);
1:6fc3744:         producer.send(msg);
1:6fc3744:         MapMessage reply = (MapMessage) consumer.receive(10*1000);
1:6fc3744:         assertNotNull(reply);
1:6fc3744:         assertTrue(reply.getMapNames().hasMoreElements());
1:da37753:         assertTrue(reply.getJMSTimestamp() > 0);
1:da37753:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:6fc3744:         /*
1:6fc3744:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:6fc3744:             String name = e.nextElement().toString();
1:6fc3744:             System.err.println(name+"="+reply.getObject(name));
2:6fc3744:         }
1:6fc3744:         */
1:6fc3744:     }
1:ccf601e: 
1:ccf601e:     public void testBrokerStatsReset() throws Exception{
1:ccf601e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ccf601e:         Queue replyTo = session.createTemporaryQueue();
1:ccf601e:         MessageConsumer consumer = session.createConsumer(replyTo);
1:ccf601e:         Queue testQueue = session.createQueue("Test.Queue");
1:ccf601e:         Queue query = session.createQueue(StatisticsBroker.STATS_BROKER_PREFIX);
1:ccf601e:         MessageProducer producer = session.createProducer(null);
1:ccf601e: 
1:ccf601e:         producer.send(testQueue, session.createMessage());
1:ccf601e: 
1:ccf601e:         Message msg = session.createMessage();
1:ccf601e:         msg.setJMSReplyTo(replyTo);
1:ccf601e:         producer.send(query, msg);
1:ccf601e:         MapMessage reply = (MapMessage) consumer.receive(10*1000);
1:ccf601e:         assertNotNull(reply);
1:ccf601e:         assertTrue(reply.getMapNames().hasMoreElements());
1:ccf601e:         assertTrue(reply.getLong("enqueueCount") >= 1);
1:ccf601e: 
1:ccf601e:         msg = session.createMessage();
1:ccf601e:         msg.setBooleanProperty(StatisticsBroker.STATS_BROKER_RESET_HEADER, true);
1:ccf601e:         msg.setJMSReplyTo(replyTo);
1:ccf601e:         producer.send(query, msg);
1:ccf601e:         reply = (MapMessage) consumer.receive(10*1000);
1:ccf601e:         assertNotNull(reply);
1:ccf601e:         assertTrue(reply.getMapNames().hasMoreElements());
1:ccf601e:         assertEquals(0, reply.getLong("enqueueCount"));
1:da37753:         assertTrue(reply.getJMSTimestamp() > 0);
1:da37753:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:ccf601e:     }
1:ccf601e: 
1:6fc3744:     public void testDestinationStats() throws Exception{
1:6fc3744:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6fc3744:         Queue replyTo = session.createTemporaryQueue();
1:6fc3744:         MessageConsumer consumer = session.createConsumer(replyTo);
1:6fc3744:         Queue testQueue = session.createQueue("Test.Queue");
1:6fc3744:         MessageProducer producer = session.createProducer(null);
1:6fc3744:         Queue query = session.createQueue(StatisticsBroker.STATS_DESTINATION_PREFIX + testQueue.getQueueName());
1:6fc3744:         Message msg = session.createMessage();
1:ccf601e: 
1:6fc3744:         producer.send(testQueue,msg);
1:ccf601e: 
1:6fc3744:         msg.setJMSReplyTo(replyTo);
1:6fc3744:         producer.send(query,msg);
1:4eb5097:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
1:4eb5097:         assertNotNull(reply);
1:4eb5097:         assertTrue(reply.getMapNames().hasMoreElements());
1:4eb5097:         assertTrue(reply.getJMSTimestamp() > 0);
1:4eb5097:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:cfdff4e:         assertTrue(reply.getLong("averageMessageSize") > 0);
1:cfdff4e: 
1:4eb5097:         /*
1:4eb5097:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:4eb5097:             String name = e.nextElement().toString();
1:4eb5097:             System.err.println(name+"="+reply.getObject(name));
1:4eb5097:         }
1:4eb5097:         */
1:4eb5097:     }
1:4eb5097: 
1:4eb5097:     public void testDestinationStatsWithDot() throws Exception{
1:4eb5097:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4eb5097:         Queue replyTo = session.createTemporaryQueue();
1:4eb5097:         MessageConsumer consumer = session.createConsumer(replyTo);
1:4eb5097:         Queue testQueue = session.createQueue("Test.Queue");
1:4eb5097:         MessageProducer producer = session.createProducer(null);
1:4eb5097:         Queue query = session.createQueue(StatisticsBroker.STATS_DESTINATION_PREFIX + "." + testQueue.getQueueName());
1:4eb5097:         Message msg = session.createMessage();
1:4eb5097: 
1:4eb5097:         producer.send(testQueue,msg);
1:4eb5097: 
1:4eb5097:         msg.setJMSReplyTo(replyTo);
1:4eb5097:         producer.send(query,msg);
1:4eb5097:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
1:6fc3744:         assertNotNull(reply);
1:6fc3744:         assertTrue(reply.getMapNames().hasMoreElements());
1:da37753:         assertTrue(reply.getJMSTimestamp() > 0);
1:da37753:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:6fc3744:         /*
1:6fc3744:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:6fc3744:             String name = e.nextElement().toString();
1:6fc3744:             System.err.println(name+"="+reply.getObject(name));
1:6fc3744:         }
1:6fc3744:         */
1:6fc3744:     }
1:e5c4ffd: 
1:ccf601e:     @SuppressWarnings("unused")
1:e5c4ffd:     public void testSubscriptionStats() throws Exception{
1:e5c4ffd:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e5c4ffd:         Queue replyTo = session.createTemporaryQueue();
1:e5c4ffd:         MessageConsumer consumer = session.createConsumer(replyTo);
1:e5c4ffd:         Queue testQueue = session.createQueue("Test.Queue");
1:e5c4ffd:         MessageConsumer testConsumer = session.createConsumer(testQueue);
1:e5c4ffd:         MessageProducer producer = session.createProducer(null);
1:e5c4ffd:         Queue query = session.createQueue(StatisticsBroker.STATS_SUBSCRIPTION_PREFIX);
1:e5c4ffd:         Message msg = session.createMessage();
1:e5c4ffd: 
1:e5c4ffd:         producer.send(testQueue,msg);
1:e5c4ffd: 
1:e5c4ffd:         msg.setJMSReplyTo(replyTo);
1:e5c4ffd:         producer.send(query,msg);
1:4eb5097:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
1:e5c4ffd:         assertNotNull(reply);
1:e5c4ffd:         assertTrue(reply.getMapNames().hasMoreElements());
1:da37753:         assertTrue(reply.getJMSTimestamp() > 0);
1:da37753:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:e5c4ffd: 
1:e5c4ffd:         /*for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:e5c4ffd:             String name = e.nextElement().toString();
1:e5c4ffd:             System.err.println(name+"="+reply.getObject(name));
1:e5c4ffd:         }*/
1:e5c4ffd:     }
1:ccf601e: 
1:da37753:     @Override
1:6fc3744:     protected void setUp() throws Exception {
1:6fc3744:         broker = createBroker();
1:6fc3744:         ConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectorURIsAsMap().get("tcp"));
1:6fc3744:         connection = factory.createConnection();
1:6fc3744:         connection.start();
1:6fc3744:     }
1:ccf601e: 
1:da37753:     @Override
1:6fc3744:     protected void tearDown() throws Exception{
1:6fc3744:         if (this.connection != null) {
1:6fc3744:             this.connection.close();
1:6fc3744:         }
1:6fc3744:         if (this.broker!=null) {
1:6fc3744:             this.broker.stop();
1:6fc3744:         }
1:6fc3744:     }
1:ccf601e: 
1:6fc3744:     protected BrokerService createBroker() throws Exception {
1:6fc3744:         BrokerService answer = new BrokerService();
1:6fc3744:         BrokerPlugin[] plugins = new BrokerPlugin[1];
1:6fc3744:         plugins[0] = new StatisticsBrokerPlugin();
1:6fc3744:         answer.setPlugins(plugins);
1:6fc3744:         answer.setDeleteAllMessagesOnStartup(true);
1:6fc3744:         answer.addConnector("tcp://localhost:0");
1:6fc3744:         answer.start();
1:6fc3744:         return answer;
1:6fc3744:     }
1:ccf601e: 
1:6fc3744:     protected BrokerService createBroker(String uri) throws Exception {
1:6fc3744:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:6fc3744:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:8bf987b:     }
1:6fc3744: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cfdff4e
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(reply.getLong("averageMessageSize") > 0);
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4eb5097
/////////////////////////////////////////////////////////////////////////
1:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1:         assertTrue(reply.getJMSTimestamp() > 0);
1:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
1:         /*
1:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:             String name = e.nextElement().toString();
1:             System.err.println(name+"="+reply.getObject(name));
1:         }
1:         */
1:     }
1: 
1:     public void testDestinationStatsWithDot() throws Exception{
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue replyTo = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(replyTo);
1:         Queue testQueue = session.createQueue("Test.Queue");
1:         MessageProducer producer = session.createProducer(null);
1:         Queue query = session.createQueue(StatisticsBroker.STATS_DESTINATION_PREFIX + "." + testQueue.getQueueName());
1:         Message msg = session.createMessage();
1: 
1:         producer.send(testQueue,msg);
1: 
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(query,msg);
1:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
/////////////////////////////////////////////////////////////////////////
1:         MapMessage reply = (MapMessage) consumer.receive(10 * 1000);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:da37753
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(reply.getJMSTimestamp() > 0);
1:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(reply.getJMSTimestamp() > 0);
1:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(reply.getJMSTimestamp() > 0);
1:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(reply.getJMSTimestamp() > 0);
1:         assertEquals(Message.DEFAULT_PRIORITY, reply.getJMSPriority());
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:ccf601e
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testBrokerStatsReset() throws Exception{
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue replyTo = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(replyTo);
1:         Queue testQueue = session.createQueue("Test.Queue");
1:         Queue query = session.createQueue(StatisticsBroker.STATS_BROKER_PREFIX);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         producer.send(testQueue, session.createMessage());
1: 
1:         Message msg = session.createMessage();
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(query, msg);
1:         MapMessage reply = (MapMessage) consumer.receive(10*1000);
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1:         assertTrue(reply.getLong("enqueueCount") >= 1);
1: 
1:         msg = session.createMessage();
1:         msg.setBooleanProperty(StatisticsBroker.STATS_BROKER_RESET_HEADER, true);
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(query, msg);
1:         reply = (MapMessage) consumer.receive(10*1000);
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1:         assertEquals(0, reply.getLong("enqueueCount"));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e5c4ffd
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSubscriptionStats() throws Exception{
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue replyTo = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(replyTo);
1:         Queue testQueue = session.createQueue("Test.Queue");
1:         MessageConsumer testConsumer = session.createConsumer(testQueue);
1:         MessageProducer producer = session.createProducer(null);
1:         Queue query = session.createQueue(StatisticsBroker.STATS_SUBSCRIPTION_PREFIX);
1:         Message msg = session.createMessage();
1: 
1:         producer.send(testQueue,msg);
1: 
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(query,msg);
0:         MapMessage reply = (MapMessage) consumer.receive();
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1: 
1:         /*for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:             String name = e.nextElement().toString();
1:             System.err.println(name+"="+reply.getObject(name));
1:         }*/
1: 
1: 
1:     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(BrokerStatisticsPluginTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import java.net.URI;
0: import java.util.Enumeration;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
0: import junit.framework.TestCase;
0: 
1: /**
1:  * A BrokerStatisticsPluginTest
1:  * A testcase for https://issues.apache.org/activemq/browse/AMQ-2379
1:  *
1:  */
1: public class BrokerStatisticsPluginTest extends TestCase{
0:     private static final Log LOG = LogFactory.getLog(BrokerStatisticsPluginTest.class);
0:     
1:     private Connection connection;
1:     private BrokerService broker;
0:     
1:     public void testBrokerStats() throws Exception{
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue replyTo = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(replyTo);
1:         Queue query = session.createQueue(StatisticsBroker.STATS_BROKER_PREFIX);
1:         MessageProducer producer = session.createProducer(query);
1:         Message msg = session.createMessage();
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(msg);
1:         MapMessage reply = (MapMessage) consumer.receive(10*1000);
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1:         /*
1:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:             String name = e.nextElement().toString();
1:             System.err.println(name+"="+reply.getObject(name));
1:         }
1:         */
0:         
0:         
1:     }
0:     
1:     public void testDestinationStats() throws Exception{
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue replyTo = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(replyTo);
1:         Queue testQueue = session.createQueue("Test.Queue");
1:         MessageProducer producer = session.createProducer(null);
1:         Queue query = session.createQueue(StatisticsBroker.STATS_DESTINATION_PREFIX + testQueue.getQueueName());
1:         Message msg = session.createMessage();
0:         
1:         producer.send(testQueue,msg);
0:         
1:         msg.setJMSReplyTo(replyTo);
1:         producer.send(query,msg);
0:         MapMessage reply = (MapMessage) consumer.receive();
1:         assertNotNull(reply);
1:         assertTrue(reply.getMapNames().hasMoreElements());
1:         /*
1:         for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
1:             String name = e.nextElement().toString();
1:             System.err.println(name+"="+reply.getObject(name));
1:         }
1:         */
0:         
0:         
1:     }
0:     
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectorURIsAsMap().get("tcp"));
1:         connection = factory.createConnection();
1:         connection.start();
1:     }
0:     
1:     protected void tearDown() throws Exception{
1:         if (this.connection != null) {
1:             this.connection.close();
1:         }
1:         if (this.broker!=null) {
1:             this.broker.stop();
1:         }
1:     }
0:     
1:     protected BrokerService createBroker() throws Exception {
0:         //return createBroker("org/apache/activemq/plugin/statistics-plugin-broker.xml");
1:         BrokerService answer = new BrokerService();
1:         BrokerPlugin[] plugins = new BrokerPlugin[1];
1:         plugins[0] = new StatisticsBrokerPlugin();
1:         answer.setPlugins(plugins);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector("tcp://localhost:0");
1:         answer.start();
1:         return answer;
1:     }
0:     
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: }
============================================================================