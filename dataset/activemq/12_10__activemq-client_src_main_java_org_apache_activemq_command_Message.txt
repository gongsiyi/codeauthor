1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
16:d29ca2a: 
1:a3fa0da: import java.beans.Transient;
1:d29ca2a: import java.io.DataInputStream;
1:d29ca2a: import java.io.DataOutputStream;
1:d29ca2a: import java.io.IOException;
1:41c9366: import java.io.OutputStream;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:6cc2c11: import java.util.concurrent.atomic.AtomicBoolean;
1:41c9366: import java.util.zip.DeflaterOutputStream;
1:230a86c: 
1:cdc2fd3: import javax.jms.JMSException;
1:a0e92d7: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnection;
1:d29ca2a: import org.apache.activemq.advisory.AdvisorySupport;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:9dd11cb: import org.apache.activemq.usage.MemoryUsage;
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:d29ca2a: import org.apache.activemq.util.MarshallingSupport;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:4951a55: import org.fusesource.hawtbuf.UTF8Buffer;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Represents an ActiveMQ message
1:d29ca2a:  *
1:d29ca2a:  * @openwire:marshaller
1:b0c2a40:  *
1:d29ca2a:  */
1:fc00993: public abstract class Message extends BaseCommand implements MarshallAware, MessageReference {
1:9a8f6e4:     public static final String ORIGINAL_EXPIRATION = "originalExpiration";
1:d29ca2a: 
1:6d0c552:     /**
1:6d0c552:      * The default minimum amount of memory a message is assumed to use
1:6d0c552:      */
1:6d0c552:     public static final int DEFAULT_MINIMUM_MESSAGE_SIZE = 1024;
1:d29ca2a: 
1:d29ca2a:     protected MessageId messageId;
1:d29ca2a:     protected ActiveMQDestination originalDestination;
1:d29ca2a:     protected TransactionId originalTransactionId;
1:d29ca2a: 
1:d29ca2a:     protected ProducerId producerId;
1:d29ca2a:     protected ActiveMQDestination destination;
1:d29ca2a:     protected TransactionId transactionId;
1:230a86c: 
1:d29ca2a:     protected long expiration;
1:d29ca2a:     protected long timestamp;
1:d29ca2a:     protected long arrival;
1:a401575:     protected long brokerInTime;
1:a401575:     protected long brokerOutTime;
1:d29ca2a:     protected String correlationId;
1:d29ca2a:     protected ActiveMQDestination replyTo;
1:d29ca2a:     protected boolean persistent;
1:d29ca2a:     protected String type;
1:d29ca2a:     protected byte priority;
1:d29ca2a:     protected String groupID;
1:d29ca2a:     protected int groupSequence;
1:d29ca2a:     protected ConsumerId targetConsumerId;
1:230a86c:     protected boolean compressed;
1:d29ca2a:     protected String userID;
1:d29ca2a: 
1:d29ca2a:     protected ByteSequence content;
1:d29ca2a:     protected ByteSequence marshalledProperties;
1:d29ca2a:     protected DataStructure dataStructure;
1:d29ca2a:     protected int redeliveryCounter;
1:d29ca2a: 
1:15101c7:     protected int size;
1:ecf89a6:     protected Map<String, Object> properties;
1:230a86c:     protected boolean readOnlyProperties;
1:230a86c:     protected boolean readOnlyBody;
1:230a86c:     protected transient boolean recievedByDFBridge;
1:ecf89a6:     protected boolean droppable;
1:dd91e85:     protected boolean jmsXGroupFirstForConsumer;
1:d29ca2a: 
1:d29ca2a:     private transient short referenceCount;
1:d29ca2a:     private transient ActiveMQConnection connection;
1:9a8f6e4:     transient MessageDestination regionDestination;
1:9a8f6e4:     transient MemoryUsage memoryUsage;
1:6cc2c11:     transient AtomicBoolean processAsExpired = new AtomicBoolean(false);
1:d29ca2a: 
1:230a86c:     private BrokerId[] brokerPath;
1:230a86c:     private BrokerId[] cluster;
1:230a86c: 
1:9a8f6e4:     public static interface MessageDestination {
1:9a8f6e4:         int getMinimumMessageSize();
1:9a8f6e4:         MemoryUsage getMemoryUsage();
1:9a8f6e4:     }
1:9a8f6e4: 
1:fc00993:     public abstract Message copy();
1:cdc2fd3:     public abstract void clearBody() throws JMSException;
1:41c9366:     public abstract void storeContent();
1:3003895:     public abstract void storeContentAndClear();
1:230a86c: 
1:7c3bb40:     /**
1:7c3bb40:      * @deprecated - This method name is misnamed
1:7c3bb40:      * @throws JMSException
1:7c3bb40:      */
1:c1da3ac:     public void clearMarshalledState() throws JMSException {
1:7c3bb40:         clearUnMarshalledState();
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40:     // useful to reduce the memory footprint of a persisted message
1:7c3bb40:     public void clearUnMarshalledState() throws JMSException {
1:c1da3ac:         properties = null;
1:d29ca2a:     }
1:230a86c: 
1:7c3bb40:     public boolean isMarshalled() {
1:f82993d:         return isContentMarshalled() && isPropertiesMarshalled();
1:f82993d:     }
1:f82993d: 
1:f82993d:     protected boolean isPropertiesMarshalled() {
1:f82993d:         return marshalledProperties != null || properties == null;
1:f82993d:     }
1:f82993d: 
1:f82993d:     protected boolean isContentMarshalled() {
1:f82993d:         return content != null;
1:7c3bb40:     }
1:7c3bb40: 
1:d29ca2a:     protected void copy(Message copy) {
1:d29ca2a:         super.copy(copy);
1:d29ca2a:         copy.producerId = producerId;
1:d29ca2a:         copy.transactionId = transactionId;
1:d29ca2a:         copy.destination = destination;
1:230a86c:         copy.messageId = messageId != null ? messageId.copy() : null;
1:d29ca2a:         copy.originalDestination = originalDestination;
1:d29ca2a:         copy.originalTransactionId = originalTransactionId;
1:d29ca2a:         copy.expiration = expiration;
1:d29ca2a:         copy.timestamp = timestamp;
1:d29ca2a:         copy.correlationId = correlationId;
1:d29ca2a:         copy.replyTo = replyTo;
1:d29ca2a:         copy.persistent = persistent;
1:d29ca2a:         copy.redeliveryCounter = redeliveryCounter;
1:d29ca2a:         copy.type = type;
1:d29ca2a:         copy.priority = priority;
1:d29ca2a:         copy.size = size;
1:d29ca2a:         copy.groupID = groupID;
1:d29ca2a:         copy.userID = userID;
1:d29ca2a:         copy.groupSequence = groupSequence;
1:d29ca2a: 
1:fc00993:         if (properties != null) {
1:ecf89a6:             copy.properties = new HashMap<String, Object>(properties);
1:d29ca2a: 
1:a5fc6dd:             // The new message hasn't expired, so remove this feild.
1:9a8f6e4:             copy.properties.remove(ORIGINAL_EXPIRATION);
1:fc00993:         } else {
1:d29ca2a:             copy.properties = properties;
1:fc00993:         }
1:d29ca2a: 
1:e69c2cb:         copy.content = copyByteSequence(content);
1:e69c2cb:         copy.marshalledProperties = copyByteSequence(marshalledProperties);
1:d29ca2a:         copy.dataStructure = dataStructure;
1:d29ca2a:         copy.readOnlyProperties = readOnlyProperties;
1:d29ca2a:         copy.readOnlyBody = readOnlyBody;
1:d29ca2a:         copy.compressed = compressed;
1:d29ca2a:         copy.recievedByDFBridge = recievedByDFBridge;
1:230a86c: 
1:c36ea1a:         copy.arrival = arrival;
1:c36ea1a:         copy.connection = connection;
1:c36ea1a:         copy.regionDestination = regionDestination;
1:230a86c:         copy.brokerInTime = brokerInTime;
1:230a86c:         copy.brokerOutTime = brokerOutTime;
1:9dd11cb:         copy.memoryUsage=this.memoryUsage;
1:8b33c1c:         copy.brokerPath = brokerPath;
1:dd91e85:         copy.jmsXGroupFirstForConsumer = jmsXGroupFirstForConsumer;
1:d29ca2a: 
1:c36ea1a:         // lets not copy the following fields
1:230a86c:         // copy.targetConsumerId = targetConsumerId;
1:230a86c:         // copy.referenceCount = referenceCount;
1:d29ca2a:     }
1:230a86c: 
1:e69c2cb:     private ByteSequence copyByteSequence(ByteSequence content) {
1:e69c2cb:         if (content != null) {
1:e69c2cb:             return new ByteSequence(content.getData(), content.getOffset(), content.getLength());
1:e69c2cb:         }
1:e69c2cb:         return null;
1:e69c2cb:     }
1:e69c2cb: 
1:d29ca2a:     public Object getProperty(String name) throws IOException {
1:230a86c:         if (properties == null) {
1:ecf89a6:             if (marshalledProperties == null) {
2:d29ca2a:                 return null;
1:ecf89a6:             }
1:d29ca2a:             properties = unmarsallProperties(marshalledProperties);
1:d29ca2a:         }
1:4951a55:         Object result = properties.get(name);
1:4951a55:         if (result instanceof UTF8Buffer) {
1:4951a55:             result = result.toString();
1:d29ca2a:         }
1:230a86c: 
1:4951a55:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     @SuppressWarnings("unchecked")
1:ecf89a6:     public Map<String, Object> getProperties() throws IOException {
1:230a86c:         if (properties == null) {
1:ecf89a6:             if (marshalledProperties == null) {
1:d29ca2a:                 return Collections.EMPTY_MAP;
1:ecf89a6:             }
1:d29ca2a:             properties = unmarsallProperties(marshalledProperties);
1:d29ca2a:         }
1:d29ca2a:         return Collections.unmodifiableMap(properties);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void clearProperties() {
1:d29ca2a:         marshalledProperties = null;
1:230a86c:         properties = null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setProperty(String name, Object value) throws IOException {
1:d29ca2a:         lazyCreateProperties();
1:d29ca2a:         properties.put(name, value);
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     public void removeProperty(String name) throws IOException {
1:d29ca2a:         lazyCreateProperties();
1:7ae2055:         properties.remove(name);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void lazyCreateProperties() throws IOException {
1:230a86c:         if (properties == null) {
1:230a86c:             if (marshalledProperties == null) {
1:ecf89a6:                 properties = new HashMap<String, Object>();
1:c07514f:             } else {
1:d29ca2a:                 properties = unmarsallProperties(marshalledProperties);
1:c07514f:                 marshalledProperties = null;
1:d29ca2a:             }
1:d29ca2a:         } else {
1:d29ca2a:             marshalledProperties = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     private Map<String, Object> unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
1:d29ca2a:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)));
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:         // Need to marshal the properties.
1:230a86c:         if (marshalledProperties == null && properties != null) {
1:d29ca2a:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:d29ca2a:             DataOutputStream os = new DataOutputStream(baos);
1:d29ca2a:             MarshallingSupport.marshalPrimitiveMap(properties, os);
1:d29ca2a:             os.close();
1:d29ca2a:             marshalledProperties = baos.toByteSequence();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public void afterMarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public void beforeUnmarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public void afterUnmarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     // /////////////////////////////////////////////////////////////////
1:d29ca2a:     //
1:d29ca2a:     // Simple Field accessors
1:d29ca2a:     //
1:230a86c:     // /////////////////////////////////////////////////////////////////
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ProducerId getProducerId() {
1:d29ca2a:         return producerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setProducerId(ProducerId producerId) {
1:d29ca2a:         this.producerId = producerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public TransactionId getTransactionId() {
1:d29ca2a:         return transactionId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setTransactionId(TransactionId transactionId) {
1:d29ca2a:         this.transactionId = transactionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isInTransaction() {
1:230a86c:         return transactionId != null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getOriginalDestination() {
1:d29ca2a:         return originalDestination;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setOriginalDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.originalDestination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public MessageId getMessageId() {
1:d29ca2a:         return messageId;
1:230a86c:     }
1:230a86c: 
1:d29ca2a:     public void setMessageId(MessageId messageId) {
1:d29ca2a:         this.messageId = messageId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public TransactionId getOriginalTransactionId() {
1:d29ca2a:         return originalTransactionId;
1:230a86c:     }
1:230a86c: 
1:d29ca2a:     public void setOriginalTransactionId(TransactionId transactionId) {
1:d29ca2a:         this.originalTransactionId = transactionId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public String getGroupID() {
1:d29ca2a:         return groupID;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setGroupID(String groupID) {
1:d29ca2a:         this.groupID = groupID;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public int getGroupSequence() {
1:d29ca2a:         return groupSequence;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setGroupSequence(int groupSequence) {
1:d29ca2a:         this.groupSequence = groupSequence;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getCorrelationId() {
1:d29ca2a:         return correlationId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setCorrelationId(String correlationId) {
1:d29ca2a:         this.correlationId = correlationId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public boolean isPersistent() {
1:d29ca2a:         return persistent;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setPersistent(boolean deliveryMode) {
1:d29ca2a:         this.persistent = deliveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public long getExpiration() {
1:d29ca2a:         return expiration;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setExpiration(long expiration) {
1:d29ca2a:         this.expiration = expiration;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte getPriority() {
1:d29ca2a:         return priority;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setPriority(byte priority) {
1:6519c3e:         if (priority < 0) {
1:6519c3e:             this.priority = 0;
1:6519c3e:         } else if (priority > 9) {
1:6519c3e:             this.priority = 9;
1:6519c3e:         } else {
1:d29ca2a:             this.priority = priority;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getReplyTo() {
1:d29ca2a:         return replyTo;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setReplyTo(ActiveMQDestination replyTo) {
1:d29ca2a:         this.replyTo = replyTo;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public long getTimestamp() {
1:d29ca2a:         return timestamp;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setTimestamp(long timestamp) {
1:d29ca2a:         this.timestamp = timestamp;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getType() {
1:d29ca2a:         return type;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setType(String type) {
1:d29ca2a:         this.type = type;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public ByteSequence getContent() {
1:d29ca2a:         return content;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setContent(ByteSequence content) {
1:d29ca2a:         this.content = content;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public ByteSequence getMarshalledProperties() {
1:d29ca2a:         return marshalledProperties;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setMarshalledProperties(ByteSequence marshalledProperties) {
1:d29ca2a:         this.marshalledProperties = marshalledProperties;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public DataStructure getDataStructure() {
1:d29ca2a:         return dataStructure;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setDataStructure(DataStructure data) {
1:d29ca2a:         this.dataStructure = data;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Can be used to route the message to a specific consumer. Should be null
1:230a86c:      * to allow the broker use normal JMS routing semantics. If the target
1:230a86c:      * consumer id is an active consumer on the broker, the message is dropped.
1:230a86c:      * Used by the AdvisoryBroker to replay advisory messages to a specific
1:230a86c:      * consumer.
1:d29ca2a:      *
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public ConsumerId getTargetConsumerId() {
1:d29ca2a:         return targetConsumerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setTargetConsumerId(ConsumerId targetConsumerId) {
1:d29ca2a:         this.targetConsumerId = targetConsumerId;
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public boolean isExpired() {
1:a58d36b:         long expireTime = getExpiration();
1:a1bd85e:         return expireTime > 0 && System.currentTimeMillis() > expireTime;
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:230a86c: 	public boolean isAdvisory() {
1:d29ca2a:         return type != null && type.equals(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public boolean isCompressed() {
1:d29ca2a:         return compressed;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setCompressed(boolean compressed) {
1:d29ca2a:         this.compressed = compressed;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isRedelivered() {
1:230a86c:         return redeliveryCounter > 0;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setRedelivered(boolean redelivered) {
1:230a86c:         if (redelivered) {
1:230a86c:             if (!isRedelivered()) {
1:d29ca2a:                 setRedeliveryCounter(1);
1:230a86c:             }
1:d29ca2a:         } else {
1:230a86c:             if (isRedelivered()) {
1:d29ca2a:                 setRedeliveryCounter(0);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public void incrementRedeliveryCounter() {
1:d29ca2a:         redeliveryCounter++;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:4951a55:     @Override
1:d29ca2a: 	public int getRedeliveryCounter() {
1:d29ca2a:         return redeliveryCounter;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setRedeliveryCounter(int deliveryCounter) {
1:d29ca2a:         this.redeliveryCounter = deliveryCounter;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * The route of brokers the command has moved through.
1:d29ca2a:      *
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public BrokerId[] getBrokerPath() {
1:d29ca2a:         return brokerPath;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setBrokerPath(BrokerId[] brokerPath) {
1:d29ca2a:         this.brokerPath = brokerPath;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isReadOnlyProperties() {
1:d29ca2a:         return readOnlyProperties;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setReadOnlyProperties(boolean readOnlyProperties) {
1:d29ca2a:         this.readOnlyProperties = readOnlyProperties;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isReadOnlyBody() {
1:d29ca2a:         return readOnlyBody;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setReadOnlyBody(boolean readOnlyBody) {
1:d29ca2a:         this.readOnlyBody = readOnlyBody;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ActiveMQConnection getConnection() {
1:d29ca2a:         return this.connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setConnection(ActiveMQConnection connection) {
1:d29ca2a:         this.connection = connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Used to schedule the arrival time of a message to a broker. The broker
1:230a86c:      * will not dispatch a message to a consumer until it's arrival time has
1:230a86c:      * elapsed.
1:230a86c:      *
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public long getArrival() {
1:d29ca2a:         return arrival;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setArrival(long arrival) {
1:d29ca2a:         this.arrival = arrival;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Only set by the broker and defines the userID of the producer connection
1:230a86c:      * who sent this message. This is an optional field, it needs to be enabled
1:230a86c:      * on the broker to have this field populated.
1:230a86c:      *
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public String getUserID() {
1:d29ca2a:         return userID;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setUserID(String jmsxUserID) {
1:d29ca2a:         this.userID = jmsxUserID;
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public int getReferenceCount() {
1:d29ca2a:         return referenceCount;
1:d29ca2a:     }
1:230a86c: 
1:4951a55:     @Override
1:d29ca2a: 	public Message getMessageHardRef() {
1:d29ca2a:         return this;
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:4951a55: 	public Message getMessage() {
1:d29ca2a:         return this;
1:d29ca2a:     }
1:d29ca2a: 
1:9a8f6e4:     public void setRegionDestination(MessageDestination destination) {
1:d29ca2a:         this.regionDestination = destination;
1:9dd11cb:         if(this.memoryUsage==null) {
1:9a8f6e4:             this.memoryUsage=destination.getMemoryUsage();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:a3fa0da:     @Transient
1:9a8f6e4: 	public MessageDestination getRegionDestination() {
1:9a8f6e4:         return regionDestination;
1:9a8f6e4:     }
1:9a8f6e4: 
1:9dd11cb:     public MemoryUsage getMemoryUsage() {
1:9dd11cb:         return this.memoryUsage;
1:d29ca2a:     }
1:d29ca2a: 
1:9dd11cb:     public void setMemoryUsage(MemoryUsage usage) {
1:9dd11cb:         this.memoryUsage=usage;
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d29ca2a:     public boolean isMarshallAware() {
1:a58d36b:         return true;
1:a58d36b:     }
1:230a86c: 
1:4951a55:     @Override
1:d29ca2a: 	public int incrementReferenceCount() {
1:d29ca2a:         int rc;
1:d29ca2a:         int size;
2:d29ca2a:         synchronized (this) {
1:d29ca2a:             rc = ++referenceCount;
1:d29ca2a:             size = getSize();
1:ecf89a6:         }
1:230a86c: 
1:9dd11cb:         if (rc == 1 && getMemoryUsage() != null) {
1:9dd11cb:             getMemoryUsage().increaseUsage(size);
1:27262c8:             //System.err.println("INCREASE USAGE " + System.identityHashCode(getMemoryUsage()) + " PERCENT = " + getMemoryUsage().getPercentUsage());
1:230a86c: 
1:ecf89a6:         }
1:d29ca2a: 
1:9dd11cb:         //System.out.println(" + "+getMemoryUsage().getName()+" :::: "+getMessageId()+"rc="+rc);
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:230a86c: 
1:4951a55:     @Override
1:4951a55: 	public int decrementReferenceCount() {
1:d29ca2a:         int rc;
1:d29ca2a:         int size;
1:d29ca2a:         synchronized (this) {
1:d29ca2a:             rc = --referenceCount;
1:d29ca2a:             size = getSize();
1:d29ca2a:         }
1:230a86c: 
1:9dd11cb:         if (rc == 0 && getMemoryUsage() != null) {
1:9dd11cb:             getMemoryUsage().decreaseUsage(size);
1:27262c8:             //Thread.dumpStack();
1:27262c8:             //System.err.println("DECREADED USAGE " + System.identityHashCode(getMemoryUsage()) + " PERCENT = " + getMemoryUsage().getPercentUsage());
1:d29ca2a:         }
1:230a86c: 
1:9dd11cb:         //System.out.println(" - "+getMemoryUsage().getName()+" :::: "+getMessageId()+"rc="+rc);
1:d29ca2a: 
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:d29ca2a: 
1:4951a55:     @Override
1:d29ca2a: 	public int getSize() {
1:6d0c552:         int minimumMessageSize = getMinimumMessageSize();
1:f94406a:         if (size < minimumMessageSize || size == 0) {
1:6d0c552:             size = minimumMessageSize;
1:ecf89a6:             if (marshalledProperties != null) {
1:d29ca2a:                 size += marshalledProperties.getLength();
1:ecf89a6:             }
1:ecf89a6:             if (content != null) {
1:d29ca2a:                 size += content.getLength();
1:ecf89a6:             }
1:d29ca2a:         }
1:d29ca2a:         return size;
1:d29ca2a:     }
1:d29ca2a: 
1:6d0c552:     protected int getMinimumMessageSize() {
1:6d0c552:         int result = DEFAULT_MINIMUM_MESSAGE_SIZE;
1:6d0c552:         //let destination override
1:9a8f6e4:         MessageDestination dest = regionDestination;
1:6d0c552:         if (dest != null) {
1:6d0c552:             result=dest.getMinimumMessageSize();
1:d29ca2a:         }
1:6d0c552:         return result;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      * @return Returns the recievedByDFBridge.
1:d29ca2a:      */
1:230a86c:     public boolean isRecievedByDFBridge() {
1:d29ca2a:         return recievedByDFBridge;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param recievedByDFBridge The recievedByDFBridge to set.
1:d29ca2a:      */
1:230a86c:     public void setRecievedByDFBridge(boolean recievedByDFBridge) {
1:230a86c:         this.recievedByDFBridge = recievedByDFBridge;
1:d29ca2a:     }
1:d29ca2a: 
1:d9b9427:     public void onMessageRolledBack() {
1:d9b9427:         incrementRedeliveryCounter();
1:d29ca2a:     }
1:39ef238: 
1:39ef238:     /**
1:39ef238:      * @openwire:property version=2 cache=true
1:39ef238:      */
1:230a86c:     public boolean isDroppable() {
1:230a86c:         return droppable;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void setDroppable(boolean droppable) {
1:230a86c:         this.droppable = droppable;
1:230a86c:     }
1:8ec100f: 
1:8ec100f:     /**
1:230a86c:      * If a message is stored in multiple nodes on a cluster, all the cluster
1:230a86c:      * members will be listed here. Otherwise, it will be null.
1:8ec100f:      *
1:8ec100f:      * @openwire:property version=3 cache=true
1:8ec100f:      */
1:230a86c:     public BrokerId[] getCluster() {
1:230a86c:         return cluster;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void setCluster(BrokerId[] cluster) {
1:230a86c:         this.cluster = cluster;
1:230a86c:     }
1:230a86c: 
1:7ae2055:     @Override
1:50c6d9c:     public boolean isMessage() {
1:d29ca2a:         return true;
1:8ec100f:     }
1:d29ca2a: 
1:a401575:     /**
1:a401575:      * @openwire:property version=3
1:a401575:      */
1:230a86c:     public long getBrokerInTime() {
1:a401575:         return this.brokerInTime;
1:8ec100f:     }
1:d29ca2a: 
1:230a86c:     public void setBrokerInTime(long brokerInTime) {
1:230a86c:         this.brokerInTime = brokerInTime;
1:39ef238:     }
1:d29ca2a: 
1:a401575:     /**
1:a401575:      * @openwire:property version=3
1:a401575:      */
1:230a86c:     public long getBrokerOutTime() {
1:a401575:         return this.brokerOutTime;
1:39ef238:     }
1:d29ca2a: 
1:230a86c:     public void setBrokerOutTime(long brokerOutTime) {
1:230a86c:         this.brokerOutTime = brokerOutTime;
1:d29ca2a:     }
1:b732d3d: 
1:4951a55:     @Override
1:b732d3d: 	public boolean isDropped() {
1:b732d3d:         return false;
1:b732d3d:     }
1:d29ca2a: 
1:dd91e85:     /**
1:dd91e85:      * @openwire:property version=10
1:dd91e85:      */
1:dd91e85:     public boolean isJMSXGroupFirstForConsumer() {
1:dd91e85:         return jmsXGroupFirstForConsumer;
1:dd91e85:     }
1:dd91e85: 
1:dd91e85:     public void setJMSXGroupFirstForConsumer(boolean val) {
1:dd91e85:         jmsXGroupFirstForConsumer = val;
1:dd91e85:     }
1:dd91e85: 
1:41c9366:     public void compress() throws IOException {
1:41c9366:         if (!isCompressed()) {
1:41c9366:             storeContent();
1:41c9366:             if (!isCompressed() && getContent() != null) {
1:41c9366:                 doCompress();
1:d29ca2a:             }
1:d29ca2a:         }
1:4951a55:     }
1:d29ca2a: 
1:41c9366:     protected void doCompress() throws IOException {
1:41c9366:         compressed = true;
1:41c9366:         ByteSequence bytes = getContent();
1:41c9366:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:41c9366:         OutputStream os = new DeflaterOutputStream(bytesOut);
1:41c9366:         os.write(bytes.data, bytes.offset, bytes.length);
1:41c9366:         os.close();
1:41c9366:         setContent(bytesOut.toByteSequence());
1:41c9366:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d33adc9:     public String toString() {
1:1f01c94:         return toString(null);
1:41c9366:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:1f01c94:     public String toString(Map<String, Object>overrideFields) {
1:d33adc9:         try {
1:d33adc9:             getProperties();
1:d33adc9:         } catch (IOException e) {
1:41c9366:         }
1:1f01c94:         return super.toString(overrideFields);
1:41c9366:     }
1:6cc2c11: 
1:6cc2c11:     @Override
1:6cc2c11:     public boolean canProcessAsExpired() {
1:6cc2c11:         return processAsExpired.compareAndSet(false, true);
1:6cc2c11:     }
1:a5fc6dd: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1:         return isContentMarshalled() && isPropertiesMarshalled();
1:     }
1: 
1:     protected boolean isPropertiesMarshalled() {
1:         return marshalledProperties != null || properties == null;
1:     }
1: 
1:     protected boolean isContentMarshalled() {
1:         return content != null;
commit:0a80165
/////////////////////////////////////////////////////////////////////////
0:         return content != null && (marshalledProperties != null || properties == null);
commit:7c3bb40
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @deprecated - This method name is misnamed
1:      * @throws JMSException
1:      */
1:         clearUnMarshalledState();
1:     }
1: 
1:     // useful to reduce the memory footprint of a persisted message
1:     public void clearUnMarshalledState() throws JMSException {
1:     public boolean isMarshalled() {
0:         return content != null && (marshalledProperties != null ||
0:                 (marshalledProperties == null && properties == null));
1:     }
1: 
commit:e69c2cb
/////////////////////////////////////////////////////////////////////////
1:         copy.content = copyByteSequence(content);
1:         copy.marshalledProperties = copyByteSequence(marshalledProperties);
/////////////////////////////////////////////////////////////////////////
1:     private ByteSequence copyByteSequence(ByteSequence content) {
1:         if (content != null) {
1:             return new ByteSequence(content.getData(), content.getOffset(), content.getLength());
1:         }
1:         return null;
1:     }
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     transient AtomicBoolean processAsExpired = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean canProcessAsExpired() {
1:         return processAsExpired.compareAndSet(false, true);
1:     }
commit:c07514f
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             marshalledProperties = null;
commit:dd91e85
/////////////////////////////////////////////////////////////////////////
1:     protected boolean jmsXGroupFirstForConsumer;
/////////////////////////////////////////////////////////////////////////
1:         copy.jmsXGroupFirstForConsumer = jmsXGroupFirstForConsumer;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=10
1:      */
1:     public boolean isJMSXGroupFirstForConsumer() {
1:         return jmsXGroupFirstForConsumer;
1:     }
1: 
1:     public void setJMSXGroupFirstForConsumer(boolean val) {
1:         jmsXGroupFirstForConsumer = val;
1:     }
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a3fa0da
/////////////////////////////////////////////////////////////////////////
1: import java.beans.Transient;
/////////////////////////////////////////////////////////////////////////
1:     @Transient
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3003895
/////////////////////////////////////////////////////////////////////////
1:     public abstract void storeContentAndClear();
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final String ORIGINAL_EXPIRATION = "originalExpiration";
/////////////////////////////////////////////////////////////////////////
1:     transient MessageDestination regionDestination;
1:     transient MemoryUsage memoryUsage;
1:     public static interface MessageDestination {
1:         int getMinimumMessageSize();
1:         MemoryUsage getMemoryUsage();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             copy.properties.remove(ORIGINAL_EXPIRATION);
/////////////////////////////////////////////////////////////////////////
1:     public void setRegionDestination(MessageDestination destination) {
1:             this.memoryUsage=destination.getMemoryUsage();
1:     public MessageDestination getRegionDestination() {
1:         return regionDestination;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         MessageDestination dest = regionDestination;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:b732d3d
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isDropped() {
1:         return false;
1:     }
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     protected Map<String, Object> properties;
1:     protected boolean droppable;
/////////////////////////////////////////////////////////////////////////
1:             copy.properties = new HashMap<String, Object>(properties);
/////////////////////////////////////////////////////////////////////////
1:             if (marshalledProperties == null) {
1:             }
1:     @SuppressWarnings("unchecked")
1:     public Map<String, Object> getProperties() throws IOException {
1:             if (marshalledProperties == null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 properties = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Object> unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:         if (rc == 1 && regionDestination != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (rc == 0 && regionDestination != null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:             if (marshalledProperties != null) {
1:             }
1:             if (content != null) {
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class Message extends BaseCommand implements MarshallAware, MessageReference {
/////////////////////////////////////////////////////////////////////////
1:     public abstract Message copy();
/////////////////////////////////////////////////////////////////////////
1:         if (properties != null) {
1:         } else {
1:         }
/////////////////////////////////////////////////////////////////////////
0:     public synchronized int decrementReferenceCount() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean compressed;
/////////////////////////////////////////////////////////////////////////
1:     protected boolean readOnlyProperties;
1:     protected boolean readOnlyBody;
1:     protected transient boolean recievedByDFBridge;
1:     private BrokerId[] brokerPath;
0:     protected boolean droppable;
1:     private BrokerId[] cluster;
1: 
1:         copy.messageId = messageId != null ? messageId.copy() : null;
/////////////////////////////////////////////////////////////////////////
0:         if (properties != null)
/////////////////////////////////////////////////////////////////////////
1: 
1:         copy.brokerInTime = brokerInTime;
1:         copy.brokerOutTime = brokerOutTime;
0:         // copying the broker path breaks networks - if a consumer re-uses a
0:         // consumed
0:         // message and forwards it on
0:         // copy.brokerPath = brokerPath;
1:         // copy.targetConsumerId = targetConsumerId;
1:         // copy.referenceCount = referenceCount;
1: 
1:         if (properties == null) {
0:             if (marshalledProperties == null)
1: 
1:         if (properties == null) {
0:             if (marshalledProperties == null)
1: 
1:         properties = null;
1:         if (properties == null) {
1:             if (marshalledProperties == null) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (marshalledProperties == null && properties != null) {
/////////////////////////////////////////////////////////////////////////
1:     // /////////////////////////////////////////////////////////////////
1:     // /////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         return transactionId != null;
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1: 
1:     }
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Can be used to route the message to a specific consumer. Should be null
1:      * to allow the broker use normal JMS routing semantics. If the target
1:      * consumer id is an active consumer on the broker, the message is dropped.
1:      * Used by the AdvisoryBroker to replay advisory messages to a specific
1:      * consumer.
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isAdvisory() {
1: 
1: 
1: 
1:         return redeliveryCounter > 0;
1: 
1:         if (redelivered) {
1:             if (!isRedelivered()) {
1:             }
1:             if (isRedelivered()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:      * The route of brokers the command has moved through.
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Used to schedule the arrival time of a message to a broker. The broker
1:      * will not dispatch a message to a consumer until it's arrival time has
1:      * elapsed.
1:      * 
1: 
1:      * Only set by the broker and defines the userID of the producer connection
1:      * who sent this message. This is an optional field, it needs to be enabled
1:      * on the broker to have this field populated.
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (rc == 1 && regionDestination != null)
1: 
0:         // System.out.println(" + "+getDestination()+" :::: "+getMessageId()+"
0:         // "+rc);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (rc == 0 && regionDestination != null)
0:         // System.out.println(" - "+getDestination()+" :::: "+getMessageId()+"
0:         // "+rc);
1: 
0:         if (size <= AVERAGE_MESSAGE_SIZE_OVERHEAD) {
0:             if (marshalledProperties != null)
0:             if (content != null)
/////////////////////////////////////////////////////////////////////////
1:     public boolean isRecievedByDFBridge() {
1:     public void setRecievedByDFBridge(boolean recievedByDFBridge) {
1:         this.recievedByDFBridge = recievedByDFBridge;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDroppable() {
1:         return droppable;
1:     }
1: 
1:     public void setDroppable(boolean droppable) {
1:         this.droppable = droppable;
1:     }
1:      * If a message is stored in multiple nodes on a cluster, all the cluster
1:      * members will be listed here. Otherwise, it will be null.
1:     public BrokerId[] getCluster() {
1:         return cluster;
1:     }
1: 
1:     public void setCluster(BrokerId[] cluster) {
1:         this.cluster = cluster;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public long getBrokerInTime() {
1:     public void setBrokerInTime(long brokerInTime) {
1:         this.brokerInTime = brokerInTime;
1:     public long getBrokerOutTime() {
1:     public void setBrokerOutTime(long brokerOutTime) {
1:         this.brokerOutTime = brokerOutTime;
commit:8ec100f
/////////////////////////////////////////////////////////////////////////
0:     private BrokerId [] cluster;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * If a message is stored in multiple nodes on a cluster,
0:      * all the cluster members will be listed here.  
0:      * Otherwise, it will be null.
1:      * 
1:      * @openwire:property version=3 cache=true
1:      */
0: 	public BrokerId[] getCluster() {
0: 		return cluster;
1: 	}
0: 	public void setCluster(BrokerId[] cluster) {
0: 		this.cluster = cluster;
1: 	}
commit:a0e92d7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println(" + "+getDestination()+" :::: "+getMessageId()+" "+rc);
/////////////////////////////////////////////////////////////////////////
1: 
0: //        System.out.println(" - "+getDestination()+" :::: "+getMessageId()+" "+rc);
/////////////////////////////////////////////////////////////////////////
commit:a58d36b
/////////////////////////////////////////////////////////////////////////
1:         long expireTime = getExpiration();
0:         if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
1:             return true;
1:         }
commit:39ef238
/////////////////////////////////////////////////////////////////////////
0:     protected boolean droppable = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @openwire:property version=2 cache=true
1:      */
0: 	public boolean isDroppable() {
0: 		return droppable;
1: 	}
0: 	public void setDroppable(boolean droppable) {
0: 		this.droppable = droppable;
1: 	}
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.activeio.command.WireFormat;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.util.MarshallingSupport;
1: 
1: /**
1:  * Represents an ActiveMQ message
1:  * 
1:  * @openwire:marshaller
0:  * @version $Revision$
1:  */
0: abstract public class Message extends BaseCommand implements MarshallAware, MessageReference {
1: 
0:     public static final int AVERAGE_MESSAGE_SIZE_OVERHEAD = 300;
1:     
1:     protected MessageId messageId;
1:     protected ActiveMQDestination originalDestination;
1:     protected TransactionId originalTransactionId;
1: 
1:     protected ProducerId producerId;    
1:     protected ActiveMQDestination destination;    
1:     protected TransactionId transactionId;    
1:     
1:     protected long expiration;
1:     protected long timestamp;
1:     protected long arrival;
1:     protected String correlationId;
1:     protected ActiveMQDestination replyTo;
1:     protected boolean persistent;
1:     protected String type;
1:     protected byte priority;
1:     protected String groupID;
1:     protected int groupSequence;
1:     protected ConsumerId targetConsumerId;
0:     protected boolean compressed = false;
1:     protected String userID;
1: 
1:     protected ByteSequence content;
1:     protected ByteSequence marshalledProperties;
1:     protected DataStructure dataStructure;
1:     protected int redeliveryCounter;
1:     
0:     protected transient int size;    
0:     protected transient HashMap properties;
0:     protected transient boolean readOnlyProperties = false;
0:     protected transient boolean readOnlyBody = false;
0:     protected transient boolean recievedByDFBridge = false;
1: 
0:     private BrokerId [] brokerPath;
1:     private transient short referenceCount;
1:     private transient ActiveMQConnection connection;
0:     private transient org.apache.activemq.broker.region.Destination regionDestination;
0:     private WireFormat cachedWireFormat;
0:     private ByteSequence cachedWireFormatData;
1:     
0:     abstract public Message copy();
1:     
1:     protected void copy(Message copy) {
1:         super.copy(copy);
1:         copy.producerId = producerId;
1:         copy.transactionId = transactionId;
1:         copy.destination = destination;
0:         copy.messageId = messageId;
1:         copy.originalDestination = originalDestination;
1:         copy.originalTransactionId = originalTransactionId;
1:         copy.expiration = expiration;
1:         copy.timestamp = timestamp;
1:         copy.correlationId = correlationId;
1:         copy.replyTo = replyTo;
1:         copy.persistent = persistent;
1:         copy.redeliveryCounter = redeliveryCounter;
1:         copy.type = type;
1:         copy.priority = priority;
1:         copy.size = size;
1:         copy.groupID = groupID;
1:         copy.userID = userID;
1:         copy.groupSequence = groupSequence;
0:         if( properties!=null )
0:             copy.properties = new HashMap(properties);
0:         else
1:             copy.properties = properties;
0:         copy.content = content;
0:         copy.marshalledProperties = marshalledProperties;
1:         copy.dataStructure = dataStructure;
1:         copy.readOnlyProperties = readOnlyProperties;
1:         copy.readOnlyBody = readOnlyBody;
1:         copy.compressed = compressed;
1:         copy.recievedByDFBridge = recievedByDFBridge;
1:     }
1:         
1:     public Object getProperty(String name) throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties ==null )
1:                 return null;
1:             properties = unmarsallProperties(marshalledProperties);
1:         }
0:         return properties.get(name);
1:     }
1:     
0:     public Map getProperties() throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties==null )
1:                 return Collections.EMPTY_MAP;
1:             properties = unmarsallProperties(marshalledProperties);
1:         }
1:         return Collections.unmodifiableMap(properties);
1:     }
1:     
1:     public void clearProperties() {
1:         marshalledProperties = null;
0:         properties=null;
1:     }
1: 
0:     public void setProperties(Map properties) throws IOException {
1:         lazyCreateProperties();
0:         properties.putAll(properties);
1:     }
1:     
1:     public void setProperty(String name, Object value) throws IOException {
1:         lazyCreateProperties();
1:         properties.put(name, value);
1:     }
1: 
1:     protected void lazyCreateProperties() throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties == null ) {
0:                 properties = new HashMap();
1:             } else {
1:                 properties = unmarsallProperties(marshalledProperties);
1:                 marshalledProperties = null;
1:             }
1:         }
1:     }
1:     
0:     private HashMap unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
1:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)));
1:     }
1: 
1:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:         // Need to marshal the properties.
0:         if( marshalledProperties==null && properties!=null ) {
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:             DataOutputStream os = new DataOutputStream(baos);
1:             MarshallingSupport.marshalPrimitiveMap(properties, os);
1:             os.close();
1:             marshalledProperties = baos.toByteSequence();
1:         }
1:     }
1: 
1:     public void afterMarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
1:     public void beforeUnmarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
1:     public void afterUnmarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
1: 
0:     ///////////////////////////////////////////////////////////////////
1:     //
1:     // Simple Field accessors
1:     //
0:     ///////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ProducerId getProducerId() {
1:         return producerId;
1:     }
1:     public void setProducerId(ProducerId producerId) {
1:         this.producerId = producerId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public TransactionId getTransactionId() {
1:         return transactionId;
1:     }
1:     public void setTransactionId(TransactionId transactionId) {
1:         this.transactionId = transactionId;
1:     }
1: 
1:     public boolean isInTransaction() {
0:         return transactionId!=null;
1:     }
1: 
1:      
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getOriginalDestination() {
1:         return originalDestination;
1:     }
1:     public void setOriginalDestination(ActiveMQDestination destination) {
1:         this.originalDestination = destination;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public MessageId getMessageId() {
1:         return messageId;
1:     }    
1:        
1:     public void setMessageId(MessageId messageId) {
1:         this.messageId = messageId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public TransactionId getOriginalTransactionId() {
1:         return originalTransactionId;
1:     }    
1:     public void setOriginalTransactionId(TransactionId transactionId) {
1:         this.originalTransactionId = transactionId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getGroupID() {
1:         return groupID;
1:     }
1:     public void setGroupID(String groupID) {
1:         this.groupID = groupID;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public int getGroupSequence() {
1:         return groupSequence;
1:     }
1:     public void setGroupSequence(int groupSequence) {
1:         this.groupSequence = groupSequence;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getCorrelationId() {
1:         return correlationId;
1:     }
1:     public void setCorrelationId(String correlationId) {
1:         this.correlationId = correlationId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public boolean isPersistent() {
1:         return persistent;
1:     }
1:     public void setPersistent(boolean deliveryMode) {
1:         this.persistent = deliveryMode;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getExpiration() {
1:         return expiration;
1:     }
1:     public void setExpiration(long expiration) {
1:         this.expiration = expiration;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte getPriority() {
1:         return priority;
1:     }
1:     public void setPriority(byte priority) {
1:         this.priority = priority;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public ActiveMQDestination getReplyTo() {
1:         return replyTo;
1:     }
1:     public void setReplyTo(ActiveMQDestination replyTo) {
1:         this.replyTo = replyTo;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getTimestamp() {
1:         return timestamp;
1:     }
1:     public void setTimestamp(long timestamp) {
1:         this.timestamp = timestamp;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public String getType() {
1:         return type;
1:     }
1:     public void setType(String type) {
1:         this.type = type;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public ByteSequence getContent() {
1:         return content;
1:     }
1:     public void setContent(ByteSequence content) {
1:         this.content = content;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public ByteSequence getMarshalledProperties() {
1:         return marshalledProperties;
1:     }
1:     public void setMarshalledProperties(ByteSequence marshalledProperties) {
1:         this.marshalledProperties = marshalledProperties;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public DataStructure getDataStructure() {
1:         return dataStructure;
1:     }
1:     public void setDataStructure(DataStructure data) {
1:         this.dataStructure = data;
1:     }
1: 
1:     /**
0:      * Can be used to route the message to a specific consumer.  Should
0:      * be null to allow the broker use normal JMS routing semantics.  If 
0:      * the target consumer id is an active consumer on the broker, the message 
0:      * is dropped.  Used by the AdvisoryBroker to replay advisory messages
0:      * to a specific consumer. 
1:      * 
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ConsumerId getTargetConsumerId() {
1:         return targetConsumerId;
1:     }
1:     public void setTargetConsumerId(ConsumerId targetConsumerId) {
1:         this.targetConsumerId = targetConsumerId;
1:     }
1: 
1:     public boolean isExpired() {
0:         // TODO: need to be implemented. 
0:         return false;
1:     }
1:     
0:     public boolean isAdvisory(){
1:         return type != null && type.equals(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
1:     }
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public boolean isCompressed() {
1:         return compressed;
1:     }
1:     public void setCompressed(boolean compressed) {
1:         this.compressed = compressed;
1:     }
1:     
1:     public boolean isRedelivered() {
0:         return redeliveryCounter>0;
1:     }
1:     
1:     public void setRedelivered(boolean redelivered) {
0:         if( redelivered ) {
0:             if( !isRedelivered() ) {
1:                 setRedeliveryCounter(1);
1:             }                
1:         } else {
0:             if( isRedelivered() ) {
1:                 setRedeliveryCounter(0);
1:             }
1:         }
1:     }
1: 
1:     public void incrementRedeliveryCounter() {
1:         redeliveryCounter++;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public int getRedeliveryCounter() {
1:         return redeliveryCounter;
1:     }
1:     public void setRedeliveryCounter(int deliveryCounter) {
1:         this.redeliveryCounter = deliveryCounter;
1:     }
1: 
1:     /**
0:      * The route of brokers the command has moved through. 
1:      * 
1:      * @openwire:property version=1 cache=true
1:      */
1:     public BrokerId[] getBrokerPath() {
1:         return brokerPath;
1:     }
1:     public void setBrokerPath(BrokerId[] brokerPath) {
1:         this.brokerPath = brokerPath;
1:     }
1:     
1:     public boolean isReadOnlyProperties() {
1:         return readOnlyProperties;
1:     }
1:     public void setReadOnlyProperties(boolean readOnlyProperties) {
1:         this.readOnlyProperties = readOnlyProperties;
1:     }
1:     public boolean isReadOnlyBody() {
1:         return readOnlyBody;
1:     }
1:     public void setReadOnlyBody(boolean readOnlyBody) {
1:         this.readOnlyBody = readOnlyBody;
1:     }
1: 
1:     public ActiveMQConnection getConnection() {
1:         return this.connection;
1:     }
1:     public void setConnection(ActiveMQConnection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     /**
0:      * Used to schedule the arrival time of a message to a broker.  The broker will 
0:      * not dispatch a message to a consumer until it's arrival time has elapsed. 
1:      *  
1:      * @openwire:property version=1
1:      */
1:     public long getArrival() {
1:         return arrival;
1:     }
1:     public void setArrival(long arrival) {
1:         this.arrival = arrival;
1:     }
1: 
1:     
1:     /**
0:      * Only set by the broker and defines the userID of the producer connection who
0:      * sent this message. This is an optional field, it needs to be enabled on the
0:      * broker to have this field populated.
1:      *  
1:      * @openwire:property version=1
1:      */
1:     public String getUserID() {
1:         return userID;
1:     }
1: 
1:     public void setUserID(String jmsxUserID) {
1:         this.userID = jmsxUserID;
1:     }
1: 
1:     public int getReferenceCount() {
1:         return referenceCount;
1:     }
1:     
1:     public Message getMessageHardRef() {
1:         return this;
1:     }
1: 
0:     public Message getMessage() throws IOException {
1:         return this;
1:     }
1: 
0:     public org.apache.activemq.broker.region.Destination getRegionDestination() {
0:         return regionDestination;
1:     }
1: 
0:     public void setRegionDestination(org.apache.activemq.broker.region.Destination destination) {
1:         this.regionDestination = destination;
1:     }
1: 
1:     public boolean isMarshallAware() {
1:         return true;
1:     }
1: 
0:     synchronized public ByteSequence getCachedMarshalledForm(WireFormat wireFormat) {
0:         if( cachedWireFormat == null || !cachedWireFormat.equals(wireFormat) ) {
1:             return null;
1:         }
0:         return cachedWireFormatData;
1:     }
1:     
0:     synchronized public void evictMarshlledForm() {
0:         cachedWireFormat = null;
0:         cachedWireFormatData = null;
1:     }
1: 
0:     synchronized public void setCachedMarshalledForm(WireFormat wireFormat, ByteSequence data) {
0:         cachedWireFormat = wireFormat;
0:         cachedWireFormatData = data;
1: 
0:         int sizeChange=0;
1:         synchronized (this) {
0:             if( referenceCount > 0 ) {
0:                 sizeChange = getSize();
0:                 this.size=0;
0:                 sizeChange -= getSize();
1:             }
1:         }
1:         
0:         if( sizeChange!=0 && regionDestination!=null )
0:             regionDestination.getUsageManager().decreaseUsage(sizeChange);
1:         
1:     }
1:         
1:     public int incrementReferenceCount() {
1:         int rc;
1:         int size;
1:         synchronized (this) {
1:             rc = ++referenceCount;
1:             size = getSize();
1:         }
1:         
0:         if( rc==1 && regionDestination!=null )
0:             regionDestination.getUsageManager().increaseUsage(size);
1:         
1:         return rc;
1:     }
1:     
0:     synchronized public int decrementReferenceCount() {
1:         int rc;
1:         int size;
1:         synchronized (this) {
1:             rc = --referenceCount;
1:             size = getSize();
1:         }
1:         
0:         if( rc==0 && regionDestination!=null )
0:             regionDestination.getUsageManager().decreaseUsage(size);
1:         
1:         return rc;
1:     }
1: 
1:     public int getSize() {
0:         if( size == 0 ) {
0:             size = AVERAGE_MESSAGE_SIZE_OVERHEAD;
0:             if( marshalledProperties!=null )
1:                 size += marshalledProperties.getLength();
0:             if( content!=null )
1:                 size += content.getLength();
0:             if( cachedWireFormatData !=null )
0:                 size += cachedWireFormatData.getLength() + 12;
0:             else 
0:                 size *= 2; // Estimate what the cached data will add.   
1:         }
1:         return size;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      * @return Returns the recievedByDFBridge.
1:      */
0:     public boolean isRecievedByDFBridge(){
1:         return recievedByDFBridge;
1:     }
1: 
1:     /**
1:      * @param recievedByDFBridge The recievedByDFBridge to set.
1:      */
0:     public void setRecievedByDFBridge(boolean recievedByDFBridge){
0:         this.recievedByDFBridge=recievedByDFBridge;
1:     }
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4951a55
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.UTF8Buffer;
/////////////////////////////////////////////////////////////////////////
1:         Object result = properties.get(name);
1:         if (result instanceof UTF8Buffer) {
1:             result = result.toString();
1:         }
0: 
1:         return result;
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public void beforeMarshall(WireFormat wireFormat) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public void afterMarshall(WireFormat wireFormat) throws IOException {
1:     @Override
0: 	public void beforeUnmarshall(WireFormat wireFormat) throws IOException {
1:     @Override
0: 	public void afterUnmarshall(WireFormat wireFormat) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public MessageId getMessageId() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public String getGroupID() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public int getGroupSequence() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public boolean isPersistent() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public long getExpiration() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public ConsumerId getTargetConsumerId() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public boolean isExpired() {
1:     @Override
0: 	public boolean isAdvisory() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public void incrementRedeliveryCounter() {
1:     @Override
0: 	public int getRedeliveryCounter() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public int getReferenceCount() {
1:     @Override
0: 	public Message getMessageHardRef() {
1:     @Override
1: 	public Message getMessage() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public MessageDestination getRegionDestination() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public int incrementReferenceCount() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 	public int decrementReferenceCount() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public int getSize() {
/////////////////////////////////////////////////////////////////////////
1:     @Override
0: 	public boolean isDropped() {
commit:41c9366
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
1: import java.util.zip.DeflaterOutputStream;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:     public abstract void storeContent();
/////////////////////////////////////////////////////////////////////////
1:     public void compress() throws IOException {
1:         if (!isCompressed()) {
1:             storeContent();
1:             if (!isCompressed() && getContent() != null) {
1:                 doCompress();
1:             }
1:         }
1:     }
0: 
1:     protected void doCompress() throws IOException {
1:         compressed = true;
1:         ByteSequence bytes = getContent();
1:         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:         OutputStream os = new DeflaterOutputStream(bytesOut);
1:         os.write(bytes.data, bytes.offset, bytes.length);
1:         os.close();
1:         setContent(bytesOut.toByteSequence());
1:     }
0: 
commit:a5fc6dd
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.RegionBroker;
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
1:             // The new message hasn't expired, so remove this feild.
0:             copy.properties.remove(RegionBroker.ORIGINAL_EXPIRATION);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:6519c3e
/////////////////////////////////////////////////////////////////////////
1:         if (priority < 0) {
1:             this.priority = 0;
1:         } else if (priority > 9) {
1:             this.priority = 9;
1:         } else {
0:             this.priority = priority;
0:         }
commit:c1da3ac
/////////////////////////////////////////////////////////////////////////
0:     // useful to reduce the memory footprint of a persisted message
1:     public void clearMarshalledState() throws JMSException {
1:         properties = null;
0:     }
0: 
commit:a1bd85e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         long expireTime = getExpiration();
1:         return expireTime > 0 && System.currentTimeMillis() > expireTime;
commit:ca242f4
/////////////////////////////////////////////////////////////////////////
0:     private transient boolean expired;
/////////////////////////////////////////////////////////////////////////
0:         if (this.expiration > 0) {
0:             expired = false;
0:         }
/////////////////////////////////////////////////////////////////////////
0:         if (!expired) {
0:             long expireTime = getExpiration();
0:             if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
0:                 expired = true;
0:             }
0:         return expired;
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
0:     public Message getMessage() {
commit:27262c8
/////////////////////////////////////////////////////////////////////////
1:             //System.err.println("INCREASE USAGE " + System.identityHashCode(getMemoryUsage()) + " PERCENT = " + getMemoryUsage().getPercentUsage());
0:            
/////////////////////////////////////////////////////////////////////////
1:             //Thread.dumpStack();
1:             //System.err.println("DECREADED USAGE " + System.identityHashCode(getMemoryUsage()) + " PERCENT = " + getMemoryUsage().getPercentUsage());
0:        
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void removeProperty(String name) throws IOException {
0:         lazyCreateProperties();
1:         properties.remove(name);
0:     }
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     public abstract void clearBody() throws JMSException;
commit:8b33c1c
/////////////////////////////////////////////////////////////////////////
1:         copy.brokerPath = brokerPath;
commit:f94406a
/////////////////////////////////////////////////////////////////////////
1:         if (size < minimumMessageSize || size == 0) {
commit:6d0c552
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The default minimum amount of memory a message is assumed to use
1:      */
1:     public static final int DEFAULT_MINIMUM_MESSAGE_SIZE = 1024;
/////////////////////////////////////////////////////////////////////////
1:         int minimumMessageSize = getMinimumMessageSize();
0:         if (size < minimumMessageSize) {
1:             size = minimumMessageSize;
/////////////////////////////////////////////////////////////////////////
0:     
1:     protected int getMinimumMessageSize() {
1:         int result = DEFAULT_MINIMUM_MESSAGE_SIZE;
1:         //let destination override
0:         Destination dest = regionDestination;
1:         if (dest != null) {
1:             result=dest.getMinimumMessageSize();
0:         }
1:         return result;
0:     }
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
0:             this.memoryUsage=regionDestination.getMemoryUsage();
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
/////////////////////////////////////////////////////////////////////////
0:     private transient MemoryUsage memoryUsage;
/////////////////////////////////////////////////////////////////////////
1:         copy.memoryUsage=this.memoryUsage;
/////////////////////////////////////////////////////////////////////////
1:         if(this.memoryUsage==null) {
0:             this.memoryUsage=regionDestination.getBrokerMemoryUsage();
0:         }
0:     }
0:     
1:     public MemoryUsage getMemoryUsage() {
1:         return this.memoryUsage;
0:     }
0:     
1:     public void setMemoryUsage(MemoryUsage usage) {
1:         this.memoryUsage=usage;
/////////////////////////////////////////////////////////////////////////
1:         if (rc == 1 && getMemoryUsage() != null) {
1:             getMemoryUsage().increaseUsage(size);
1:         //System.out.println(" + "+getMemoryUsage().getName()+" :::: "+getMessageId()+"rc="+rc);
0:     public int decrementReferenceCount() {
/////////////////////////////////////////////////////////////////////////
1:         if (rc == 0 && getMemoryUsage() != null) {
1:             getMemoryUsage().decreaseUsage(size);
1:         //System.out.println(" - "+getMemoryUsage().getName()+" :::: "+getMessageId()+"rc="+rc);
commit:805a0cc
/////////////////////////////////////////////////////////////////////////
0:     public static final int AVERAGE_MESSAGE_SIZE_OVERHEAD = 8 * 1024;
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
0:             regionDestination.getBrokerMemoryUsage().increaseUsage(size);
/////////////////////////////////////////////////////////////////////////
0:             regionDestination.getBrokerMemoryUsage().decreaseUsage(size);
commit:a401575
/////////////////////////////////////////////////////////////////////////
1:     protected long brokerInTime;
1:     protected long brokerOutTime;
/////////////////////////////////////////////////////////////////////////
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:         copy.brokerInTime=brokerInTime;
0:         copy.brokerOutTime=brokerOutTime;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * @openwire:property version=3
1:      */
0:     public long getBrokerInTime(){
1:         return this.brokerInTime;
0:     }
0: 
0:     public void setBrokerInTime(long brokerInTime){
0:         this.brokerInTime=brokerInTime;
0:     }
0: 
1:     /**
1:      * @openwire:property version=3
1:      */
0:     public long getBrokerOutTime(){
1:         return this.brokerOutTime;
0:     }
0: 
0:     public void setBrokerOutTime(long brokerOutTime){
0:         this.brokerOutTime=brokerOutTime;
0:     }
commit:50c6d9c
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isMessage() {
0:         return true;
0:     }
commit:1b8148c
/////////////////////////////////////////////////////////////////////////
0:     public static final int AVERAGE_MESSAGE_SIZE_OVERHEAD = 500;
/////////////////////////////////////////////////////////////////////////
0:         if( size <=AVERAGE_MESSAGE_SIZE_OVERHEAD ) {
commit:41b9089
/////////////////////////////////////////////////////////////////////////
0:         copy.messageId =  messageId != null ? messageId.copy() : null;
commit:51829f5
/////////////////////////////////////////////////////////////////////////
0:         //copying the broker path breaks networks - if a consumer re-uses a consumed
0:         //message and forwards it on
0:         //copy.brokerPath = brokerPath;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f01c94
/////////////////////////////////////////////////////////////////////////
1:         return toString(null);
0:     }
0:     
1:     public String toString(Map<String, Object>overrideFields) {
1:         return super.toString(overrideFields);
commit:d33adc9
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String toString() {
1:         try {
1:             getProperties();
1:         } catch (IOException e) {
0:         }
0:         return super.toString();
0:     }    
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:7dde85b
/////////////////////////////////////////////////////////////////////////
0:         copy.messageId = messageId.copy();
author:James Strachan
-------------------------------------------------------------------------------
commit:c36ea1a
/////////////////////////////////////////////////////////////////////////
0:         
1:         copy.arrival = arrival;
1:         copy.connection = connection;
1:         copy.regionDestination = regionDestination;
0:         copy.cachedWireFormat = cachedWireFormat;
0:         copy.cachedWireFormatData = cachedWireFormatData;
0:         copy.brokerPath = brokerPath;
0: 
1:         // lets not copy the following fields
0:         //copy.targetConsumerId = targetConsumerId;
0:         //copy.referenceCount = referenceCount;
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
0:     protected Map properties;
/////////////////////////////////////////////////////////////////////////
0:     private Map unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
commit:d9b9427
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void onMessageRolledBack() {
1:         incrementRedeliveryCounter();
0:     }
commit:b5bba09
/////////////////////////////////////////////////////////////////////////
0: 
commit:c4c5895
/////////////////////////////////////////////////////////////////////////
0:         this.properties.putAll(properties);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:15101c7
/////////////////////////////////////////////////////////////////////////
0:     protected ProducerId producerId;
0:     protected ActiveMQDestination destination;
0:     protected TransactionId transactionId;
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected int size;
0:     protected HashMap properties;
0:     protected boolean readOnlyProperties = false;
0:     protected boolean readOnlyBody = false;
0:     private transient WireFormat cachedWireFormat;
0:     private transient ByteSequence cachedWireFormatData;
0: 
0:     private BrokerId [] brokerPath;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
============================================================================