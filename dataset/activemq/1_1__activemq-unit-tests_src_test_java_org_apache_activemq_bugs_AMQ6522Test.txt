1:dad629e: /**
1:dad629e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dad629e:  * contributor license agreements.  See the NOTICE file distributed with
1:dad629e:  * this work for additional information regarding copyright ownership.
1:dad629e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dad629e:  * (the "License"); you may not use this file except in compliance with
1:dad629e:  * the License.  You may obtain a copy of the License at
1:dad629e:  *
1:dad629e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dad629e:  *
1:dad629e:  * Unless required by applicable law or agreed to in writing, software
1:dad629e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dad629e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dad629e:  * See the License for the specific language governing permissions and
1:dad629e:  * limitations under the License.
1:dad629e:  */
1:dad629e: package org.apache.activemq.bugs;
1:dad629e: 
1:dad629e: import org.apache.activemq.ActiveMQConnectionFactory;
1:dad629e: import org.apache.activemq.broker.BrokerService;
1:dad629e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:dad629e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:dad629e: import org.apache.activemq.command.ActiveMQQueue;
1:dad629e: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:dad629e: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:dad629e: import org.junit.After;
1:dad629e: import org.junit.Before;
1:dad629e: import org.junit.Test;
1:dad629e: import org.slf4j.Logger;
1:dad629e: import org.slf4j.LoggerFactory;
1:dad629e: 
1:dad629e: import javax.jms.BytesMessage;
1:dad629e: import javax.jms.Connection;
1:dad629e: import javax.jms.Destination;
1:dad629e: import javax.jms.MessageConsumer;
1:dad629e: import javax.jms.MessageProducer;
1:dad629e: import javax.jms.Session;
1:dad629e: 
1:dad629e: import static org.junit.Assert.assertNotNull;
1:dad629e: 
1:dad629e: public class AMQ6522Test {
1:dad629e: 
1:dad629e:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6522Test.class);
1:dad629e: 
1:dad629e:     private BrokerService broker;
1:dad629e:     private ActiveMQConnectionFactory connectionFactory;
1:dad629e:     private final Destination destination = new ActiveMQQueue("large_message_queue");
1:dad629e:     private String connectionUri;
1:dad629e: 
1:dad629e:     @Before
1:dad629e:     public void setUp() throws Exception {
1:dad629e:         initBroker(true);
1:dad629e:     }
1:dad629e: 
1:dad629e:     public void initBroker(Boolean deleteAllMessages) throws Exception {
1:dad629e:         broker = createBroker();
1:dad629e:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:dad629e:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:dad629e:         broker.start();
1:dad629e:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:dad629e:     }
1:dad629e: 
1:dad629e:     @After
1:dad629e:     public void tearDown() throws Exception {
1:dad629e:         broker.stop();
1:dad629e:         broker.waitUntilStopped();
1:dad629e:     }
1:dad629e: 
1:dad629e:     protected BrokerService createBroker() throws Exception {
1:dad629e:         BrokerService broker = new BrokerService();
1:dad629e: 
1:dad629e:         PolicyEntry policy = new PolicyEntry();
1:dad629e:         policy.setUseCache(false);
1:dad629e:         broker.setDestinationPolicy(new PolicyMap());
1:dad629e:         broker.getDestinationPolicy().setDefaultEntry(policy);
1:dad629e: 
1:dad629e:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:dad629e:         kahadb.setCheckForCorruptJournalFiles(true);
1:dad629e:         kahadb.setPreallocationScope(Journal.PreallocationScope.NONE.name());
1:dad629e: 
1:dad629e:         broker.setPersistenceAdapter(kahadb);
1:dad629e:         broker.setUseJmx(false);
1:dad629e: 
1:dad629e:         return broker;
1:dad629e:     }
1:dad629e: 
1:dad629e: 
1:dad629e:     @Test
1:dad629e:     public void verifyMessageExceedsJournalRestartRecoveryCheck() throws Exception {
1:dad629e:         Connection connection = connectionFactory.createConnection();
1:dad629e:         connection.start();
1:dad629e:         try {
1:dad629e:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:dad629e: 
1:dad629e:             MessageProducer producer = session.createProducer(destination);
1:dad629e:             BytesMessage message = session.createBytesMessage();
1:dad629e:             message.writeBytes(new byte[33*1024*1024]);
1:dad629e:             producer.send(message);
1:dad629e: 
1:dad629e:         } finally {
1:dad629e:             connection.close();
1:dad629e:         }
1:dad629e: 
1:dad629e:         tearDown();
1:dad629e:         initBroker(false);
1:dad629e: 
1:dad629e:         connection = connectionFactory.createConnection();
1:dad629e:         connection.start();
1:dad629e:         try {
1:dad629e:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:dad629e:             MessageConsumer consumer = session.createConsumer(destination);
1:dad629e:             assertNotNull("Got message after restart", consumer.receive(20000));
1:dad629e:         } finally {
1:dad629e:             connection.close();
1:dad629e:         }
1:dad629e:     }
1:dad629e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:dad629e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class AMQ6522Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6522Test.class);
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private final Destination destination = new ActiveMQQueue("large_message_queue");
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         initBroker(true);
1:     }
1: 
1:     public void initBroker(Boolean deleteAllMessages) throws Exception {
1:         broker = createBroker();
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         broker.start();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setUseCache(false);
1:         broker.setDestinationPolicy(new PolicyMap());
1:         broker.getDestinationPolicy().setDefaultEntry(policy);
1: 
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:         kahadb.setCheckForCorruptJournalFiles(true);
1:         kahadb.setPreallocationScope(Journal.PreallocationScope.NONE.name());
1: 
1:         broker.setPersistenceAdapter(kahadb);
1:         broker.setUseJmx(false);
1: 
1:         return broker;
1:     }
1: 
1: 
1:     @Test
1:     public void verifyMessageExceedsJournalRestartRecoveryCheck() throws Exception {
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             MessageProducer producer = session.createProducer(destination);
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(new byte[33*1024*1024]);
1:             producer.send(message);
1: 
1:         } finally {
1:             connection.close();
1:         }
1: 
1:         tearDown();
1:         initBroker(false);
1: 
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             assertNotNull("Got message after restart", consumer.receive(20000));
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: }
============================================================================