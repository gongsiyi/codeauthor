1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
2:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.util;
12:88acb0e: 
1:88acb0e: import java.io.IOException;
1:88acb0e: 
1:88acb0e: /**
1:88acb0e:  * Used to write and read primitives to and from a ByteSequence.
1:88acb0e:  */
1:fc00993: public final class ByteSequenceData {
1:f812e34: 
1:933eb2f:     private ByteSequenceData() {    
1:933eb2f:     }
1:933eb2f:     
1:88acb0e:     public static byte[] toByteArray(ByteSequence packet) {
1:fc00993:         if (packet.offset == 0 && packet.length == packet.data.length) {
1:f812e34:             return packet.data;
1:fc00993:         }
1:f812e34: 
1:f812e34:         byte rc[] = new byte[packet.length];
1:88acb0e:         System.arraycopy(packet.data, packet.offset, rc, 0, packet.length);
1:88acb0e:         return rc;
1:f812e34:     }
1:88acb0e: 
1:88acb0e:     private static void spaceNeeded(ByteSequence packet, int i) {
1:f812e34:         assert packet.offset + i <= packet.length;
1:f812e34:     }
1:88acb0e: 
1:f812e34:     public static int remaining(ByteSequence packet) {
1:f812e34:         return packet.length - packet.offset;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public static int read(ByteSequence packet) {
1:f812e34:         return packet.data[packet.offset++] & 0xff;
1:f812e34:     }
1:88acb0e: 
1:88acb0e:     public static void readFully(ByteSequence packet, byte[] b) throws IOException {
1:88acb0e:         readFully(packet, b, 0, b.length);
7:88acb0e:     }
1:88acb0e: 
1:f812e34:     public static void readFully(ByteSequence packet, byte[] b, int off, int len) throws IOException {
1:f812e34:         spaceNeeded(packet, len);
1:88acb0e:         System.arraycopy(packet.data, packet.offset, b, off, len);
1:88acb0e:         packet.offset += len;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static int skipBytes(ByteSequence packet, int n) throws IOException {
1:88acb0e:         int rc = Math.min(n, remaining(packet));
1:88acb0e:         packet.offset += rc;
1:88acb0e:         return rc;
1:88acb0e:     }
1:88acb0e: 
1:f812e34:     public static boolean readBoolean(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:88acb0e:         return read(packet) != 0;
1:88acb0e:     }
1:88acb0e: 
1:f812e34:     public static byte readByte(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:f812e34:         return (byte)read(packet);
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static int readUnsignedByte(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:88acb0e:         return read(packet);
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static short readShortBig(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         return (short)((read(packet) << 8) + (read(packet) << 0));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static short readShortLittle(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         return (short)((read(packet) << 0) + (read(packet) << 8));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static int readUnsignedShortBig(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:ecf89a6:         return (read(packet) << 8) + (read(packet) << 0);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static int readUnsignedShortLittle(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:ecf89a6:         return (read(packet) << 0) + (read(packet) << 8);
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static char readCharBig(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         return (char)((read(packet) << 8) + (read(packet) << 0));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static char readCharLittle(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         return (char)((read(packet) << 0) + (read(packet) << 8));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static int readIntBig(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 4);
1:ecf89a6:         return (read(packet) << 24) + (read(packet) << 16) + (read(packet) << 8) + (read(packet) << 0);
1:f812e34:     }
1:f812e34: 
1:88acb0e:     public static int readIntLittle(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 4);
1:ecf89a6:         return (read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + (read(packet) << 24);
1:f812e34:     }
1:f812e34: 
1:88acb0e:     public static long readLongBig(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 8);
1:ecf89a6:         return ((long)read(packet) << 56) + ((long)read(packet) << 48) + ((long)read(packet) << 40) + ((long)read(packet) << 32) + ((long)read(packet) << 24)
1:ecf89a6:                 + ((read(packet)) << 16) + ((read(packet)) << 8) + ((read(packet)) << 0);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static long readLongLittle(ByteSequence packet) throws IOException {
1:88acb0e:         spaceNeeded(packet, 8);
1:ecf89a6:         return (read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + ((long)read(packet) << 24) + ((long)read(packet) << 32) + ((long)read(packet) << 40)
1:ecf89a6:                 + ((long)read(packet) << 48) + ((long)read(packet) << 56);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static double readDoubleBig(ByteSequence packet) throws IOException {
1:88acb0e:         return Double.longBitsToDouble(readLongBig(packet));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static double readDoubleLittle(ByteSequence packet) throws IOException {
1:88acb0e:         return Double.longBitsToDouble(readLongLittle(packet));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static float readFloatBig(ByteSequence packet) throws IOException {
1:88acb0e:         return Float.intBitsToFloat(readIntBig(packet));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static float readFloatLittle(ByteSequence packet) throws IOException {
1:88acb0e:         return Float.intBitsToFloat(readIntLittle(packet));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static void write(ByteSequence packet, int b) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:f812e34:         packet.data[packet.offset++] = (byte)b;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void write(ByteSequence packet, byte[] b) throws IOException {
1:88acb0e:         write(packet, b, 0, b.length);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void write(ByteSequence packet, byte[] b, int off, int len) throws IOException {
2:88acb0e:         spaceNeeded(packet, len);
1:88acb0e:         System.arraycopy(b, off, packet.data, packet.offset, len);
1:88acb0e:         packet.offset += len;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeBoolean(ByteSequence packet, boolean v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:f812e34:         write(packet, v ? 1 : 0);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeByte(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 1);
1:f812e34:         write(packet, v);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeShortBig(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeShortLittle(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeCharBig(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeCharLittle(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 2);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeIntBig(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 4);
1:f812e34:         write(packet, (v >>> 24) & 0xFF);
1:f812e34:         write(packet, (v >>> 16) & 0xFF);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeIntLittle(ByteSequence packet, int v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 4);
1:f812e34:         write(packet, (v >>> 0) & 0xFF);
1:f812e34:         write(packet, (v >>> 8) & 0xFF);
1:f812e34:         write(packet, (v >>> 16) & 0xFF);
1:f812e34:         write(packet, (v >>> 24) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeLongBig(ByteSequence packet, long v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 8);
1:f812e34:         write(packet, (int)(v >>> 56) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 48) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 40) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 32) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 24) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 16) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 8) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 0) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeLongLittle(ByteSequence packet, long v) throws IOException {
1:88acb0e:         spaceNeeded(packet, 8);
1:f812e34:         write(packet, (int)(v >>> 0) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 8) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 16) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 24) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 32) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 40) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 48) & 0xFF);
1:f812e34:         write(packet, (int)(v >>> 56) & 0xFF);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeDoubleBig(ByteSequence packet, double v) throws IOException {
1:88acb0e:         writeLongBig(packet, Double.doubleToLongBits(v));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeDoubleLittle(ByteSequence packet, double v) throws IOException {
1:88acb0e:         writeLongLittle(packet, Double.doubleToLongBits(v));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static void writeFloatBig(ByteSequence packet, float v) throws IOException {
1:88acb0e:         writeIntBig(packet, Float.floatToIntBits(v));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeFloatLittle(ByteSequence packet, float v) throws IOException {
1:88acb0e:         writeIntLittle(packet, Float.floatToIntBits(v));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeRawDoubleBig(ByteSequence packet, double v) throws IOException {
1:88acb0e:         writeLongBig(packet, Double.doubleToRawLongBits(v));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeRawDoubleLittle(ByteSequence packet, double v) throws IOException {
1:88acb0e:         writeLongLittle(packet, Double.doubleToRawLongBits(v));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public static void writeRawFloatBig(ByteSequence packet, float v) throws IOException {
1:88acb0e:         writeIntBig(packet, Float.floatToRawIntBits(v));
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public static void writeRawFloatLittle(ByteSequence packet, float v) throws IOException {
1:88acb0e:         writeIntLittle(packet, Float.floatToRawIntBits(v));
1:88acb0e:     }
1:88acb0e: 
1:88acb0e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private ByteSequenceData() {    
1:     }
1:     
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         return (read(packet) << 8) + (read(packet) << 0);
1:         return (read(packet) << 0) + (read(packet) << 8);
/////////////////////////////////////////////////////////////////////////
1:         return (read(packet) << 24) + (read(packet) << 16) + (read(packet) << 8) + (read(packet) << 0);
1:         return (read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + (read(packet) << 24);
1:         return ((long)read(packet) << 56) + ((long)read(packet) << 48) + ((long)read(packet) << 40) + ((long)read(packet) << 32) + ((long)read(packet) << 24)
1:                 + ((read(packet)) << 16) + ((read(packet)) << 8) + ((read(packet)) << 0);
1:         return (read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + ((long)read(packet) << 24) + ((long)read(packet) << 32) + ((long)read(packet) << 40)
1:                 + ((long)read(packet) << 48) + ((long)read(packet) << 56);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public final class ByteSequenceData {
1:         if (packet.offset == 0 && packet.length == packet.data.length) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (packet.offset == 0 && packet.length == packet.data.length)
1:             return packet.data;
1: 
1:         byte rc[] = new byte[packet.length];
1:     }
1:         assert packet.offset + i <= packet.length;
1:     }
1:     public static int remaining(ByteSequence packet) {
1:         return packet.length - packet.offset;
1:     }
1: 
1:     public static int read(ByteSequence packet) {
1:         return packet.data[packet.offset++] & 0xff;
1:     }
1:     public static void readFully(ByteSequence packet, byte[] b, int off, int len) throws IOException {
1:         spaceNeeded(packet, len);
/////////////////////////////////////////////////////////////////////////
1:     public static boolean readBoolean(ByteSequence packet) throws IOException {
1:     public static byte readByte(ByteSequence packet) throws IOException {
1:         return (byte)read(packet);
/////////////////////////////////////////////////////////////////////////
1:         return (short)((read(packet) << 8) + (read(packet) << 0));
1: 
1:         return (short)((read(packet) << 0) + (read(packet) << 8));
1: 
0:         return ((read(packet) << 0) + (read(packet) << 8));
1:         return (char)((read(packet) << 8) + (read(packet) << 0));
1: 
1:         return (char)((read(packet) << 0) + (read(packet) << 8));
0:         return ((read(packet) << 24) + (read(packet) << 16) + (read(packet) << 8) + (read(packet) << 0));
1:     }
1: 
0:         return ((read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + (read(packet) << 24));
1:     }
1: 
0:         return (((long)read(packet) << 56) + ((long)read(packet) << 48) + ((long)read(packet) << 40) + ((long)read(packet) << 32) + ((long)read(packet) << 24)
0:                 + ((read(packet)) << 16) + ((read(packet)) << 8) + ((read(packet)) << 0));
1: 
0:         return ((read(packet) << 0) + (read(packet) << 8) + (read(packet) << 16) + ((long)read(packet) << 24) + ((long)read(packet) << 32) + ((long)read(packet) << 40)
0:                 + ((long)read(packet) << 48) + ((long)read(packet) << 56));
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         packet.data[packet.offset++] = (byte)b;
1: 
1: 
1: 
1:         write(packet, v ? 1 : 0);
1: 
1:         write(packet, v);
1: 
1:         write(packet, (v >>> 8) & 0xFF);
1:         write(packet, (v >>> 0) & 0xFF);
1: 
1:         write(packet, (v >>> 0) & 0xFF);
1:         write(packet, (v >>> 8) & 0xFF);
1: 
1:         write(packet, (v >>> 8) & 0xFF);
1:         write(packet, (v >>> 0) & 0xFF);
1: 
1:         write(packet, (v >>> 0) & 0xFF);
1:         write(packet, (v >>> 8) & 0xFF);
1: 
1:         write(packet, (v >>> 24) & 0xFF);
1:         write(packet, (v >>> 16) & 0xFF);
1:         write(packet, (v >>> 8) & 0xFF);
1:         write(packet, (v >>> 0) & 0xFF);
1: 
1:         write(packet, (v >>> 0) & 0xFF);
1:         write(packet, (v >>> 8) & 0xFF);
1:         write(packet, (v >>> 16) & 0xFF);
1:         write(packet, (v >>> 24) & 0xFF);
1: 
1:         write(packet, (int)(v >>> 56) & 0xFF);
1:         write(packet, (int)(v >>> 48) & 0xFF);
1:         write(packet, (int)(v >>> 40) & 0xFF);
1:         write(packet, (int)(v >>> 32) & 0xFF);
1:         write(packet, (int)(v >>> 24) & 0xFF);
1:         write(packet, (int)(v >>> 16) & 0xFF);
1:         write(packet, (int)(v >>> 8) & 0xFF);
1:         write(packet, (int)(v >>> 0) & 0xFF);
1: 
1:         write(packet, (int)(v >>> 0) & 0xFF);
1:         write(packet, (int)(v >>> 8) & 0xFF);
1:         write(packet, (int)(v >>> 16) & 0xFF);
1:         write(packet, (int)(v >>> 24) & 0xFF);
1:         write(packet, (int)(v >>> 32) & 0xFF);
1:         write(packet, (int)(v >>> 40) & 0xFF);
1:         write(packet, (int)(v >>> 48) & 0xFF);
1:         write(packet, (int)(v >>> 56) & 0xFF);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: 
1: 
1: /**
1:  * Used to write and read primitives to and from a ByteSequence.
1:  */
0: final public class ByteSequenceData {
1: 	
1: 	
1:     public static byte[] toByteArray(ByteSequence packet) {
0:     	if( packet.offset==0 && packet.length == packet.data.length )
0:     		return packet.data;
1:     	
0:     	byte rc[] = new byte[packet.length];
1:         System.arraycopy(packet.data, packet.offset, rc, 0, packet.length);
1:         return rc;
1: 	}
1: 
1:     private static void spaceNeeded(ByteSequence packet, int i) {
0: 		assert packet.offset+i <= packet.length;
1: 	}
1:     
0:     public static int remaining(ByteSequence packet) {
0: 		return packet.length - packet.offset;
1: 	}
1:     
0: 	public static int read(ByteSequence packet) {
0: 		return packet.data[packet.offset++] & 0xff;
1: 	}
1: 
1: 
1:     public static void readFully(ByteSequence packet, byte[] b) throws IOException {
1:         readFully(packet, b, 0, b.length);
1:     }
1: 
0:     public static void readFully(ByteSequence packet, byte[] b, int off, int len) throws IOException {    	
1:     	spaceNeeded(packet, len);        
1:         System.arraycopy(packet.data, packet.offset, b, off, len);
1:         packet.offset += len;
1:     }
1: 
1:     public static int skipBytes(ByteSequence packet, int n) throws IOException {
1:         int rc = Math.min(n, remaining(packet));
1:         packet.offset += rc;
1:         return rc;
1:     }
1: 
0: 	public static boolean readBoolean(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 1);
1:         return read(packet) != 0;
1:     }
1: 
0: 	public static byte readByte(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 1);
0:         return (byte) read(packet);
1:     }
1: 
1:     public static int readUnsignedByte(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 1);
1:         return read(packet);
1:     }
1: 
1:     public static short readShortBig(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return (short) ((read(packet) << 8) + (read(packet) << 0));
1:     }
1:     public static short readShortLittle(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return (short) ((read(packet) << 0) + (read(packet) << 8) );
1:     }
1: 
1:     public static int readUnsignedShortBig(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return ((read(packet) << 8) + (read(packet) << 0));
1:     }
1:     public static int readUnsignedShortLittle(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return ((read(packet) << 0) + (read(packet) << 8) );
1:     }
1: 
1:     public static char readCharBig(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return (char) ((read(packet) << 8) + (read(packet) << 0));
1:     }
1:     public static char readCharLittle(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 2);
0:         return (char) ((read(packet) << 0) + (read(packet) << 8) );
1:     }
1: 
1:     public static int readIntBig(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 4);
0:         return ((read(packet) << 24) + 
0:                 (read(packet) << 16) + 
0:                 (read(packet) << 8) + 
0:                 (read(packet) << 0));
1:     }    
1:     public static int readIntLittle(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 4);
0:         return ((read(packet) << 0) +
0:                 (read(packet) << 8) + 
0:                 (read(packet) << 16) + 
0:                 (read(packet) << 24));
1:     }    
1:     
1:     public static long readLongBig(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 8);
0:         return (((long) read(packet) << 56) + 
0:                 ((long) read(packet) << 48) + 
0:                 ((long) read(packet) << 40) + 
0:                 ((long) read(packet) << 32) + 
0:                 ((long) read(packet) << 24) + 
0:                 ((read(packet)) << 16) + 
0:                 ((read(packet)) << 8) + 
0:                 ((read(packet)) << 0));
1:     }
1:     public static long readLongLittle(ByteSequence packet) throws IOException {
1:         spaceNeeded(packet, 8);
0:         return ((read(packet) << 0) +
0:                 (read(packet) << 8) + 
0:                 (read(packet) << 16) + 
0:                 ((long) read(packet) << 24) +
0:                 ((long) read(packet) << 32) + 
0:                 ((long) read(packet) << 40) + 
0:                 ((long) read(packet) << 48) + 
0:                 ((long) read(packet) << 56));                  
1:     }
1:     
1:     public static double readDoubleBig(ByteSequence packet) throws IOException {
1:         return Double.longBitsToDouble(readLongBig(packet));
1:     }
1:     public static double readDoubleLittle(ByteSequence packet) throws IOException {
1:         return Double.longBitsToDouble(readLongLittle(packet));
1:     }
1: 
1:     public static float readFloatBig(ByteSequence packet) throws IOException {
1:         return Float.intBitsToFloat(readIntBig(packet));
1:     }
1:     public static float readFloatLittle(ByteSequence packet) throws IOException {
1:         return Float.intBitsToFloat(readIntLittle(packet));
1:     }
1: 
1:     public static void write(ByteSequence packet, int b) throws IOException {
1:         spaceNeeded(packet, 1);
0: 		packet.data[packet.offset++] = (byte) b;		
1:     }
1:     
1:     public static void write(ByteSequence packet, byte[] b) throws IOException {
1:         write(packet, b, 0, b.length);
1:     }
1:     public static void write(ByteSequence packet, byte[] b, int off, int len) throws IOException {
1:         spaceNeeded(packet, len);
1:         System.arraycopy(b, off, packet.data, packet.offset, len);
1:         packet.offset += len;
1:     }
1:     public static void writeBoolean(ByteSequence packet, boolean v) throws IOException {
1:         spaceNeeded(packet, 1);
0:         write(packet,v ? 1 : 0);
1:     }
1:     public static void writeByte(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 1);
0:         write(packet,v);
1:     }
1:     public static void writeShortBig(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 2);
0:         write(packet,(v >>> 8) & 0xFF);
0:         write(packet,(v >>> 0) & 0xFF);
1:     }
1:     public static void writeShortLittle(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 2);
0:         write(packet,(v >>> 0) & 0xFF);
0:         write(packet,(v >>> 8) & 0xFF);
1:     }
1:     public static void writeCharBig(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 2);
0:         write(packet,(v >>> 8) & 0xFF);
0:         write(packet,(v >>> 0) & 0xFF);
1:     }
1:     public static void writeCharLittle(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 2);
0:         write(packet,(v >>> 0) & 0xFF);
0:         write(packet,(v >>> 8) & 0xFF);
1:     }
1:     public static void writeIntBig(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 4);
0:         write(packet,(v >>> 24) & 0xFF);
0:         write(packet,(v >>> 16) & 0xFF);
0:         write(packet,(v >>> 8) & 0xFF);
0:         write(packet,(v >>> 0) & 0xFF);
1:     }
1:     public static void writeIntLittle(ByteSequence packet, int v) throws IOException {
1:         spaceNeeded(packet, 4);
0:         write(packet,(v >>> 0) & 0xFF);
0:         write(packet,(v >>> 8) & 0xFF);
0:         write(packet,(v >>> 16) & 0xFF);
0:         write(packet,(v >>> 24) & 0xFF);
1:     }
1:     public static void writeLongBig(ByteSequence packet, long v) throws IOException {
1:         spaceNeeded(packet, 8);
0:         write(packet,(int) (v >>> 56) & 0xFF);
0:         write(packet,(int) (v >>> 48) & 0xFF);
0:         write(packet,(int) (v >>> 40) & 0xFF);
0:         write(packet,(int) (v >>> 32) & 0xFF);
0:         write(packet,(int) (v >>> 24) & 0xFF);
0:         write(packet,(int) (v >>> 16) & 0xFF);
0:         write(packet,(int) (v >>> 8) & 0xFF);
0:         write(packet,(int) (v >>> 0) & 0xFF);
1:     }
1:     public static void writeLongLittle(ByteSequence packet, long v) throws IOException {
1:         spaceNeeded(packet, 8);
0:         write(packet,(int) (v >>> 0) & 0xFF);
0:         write(packet,(int) (v >>> 8) & 0xFF);
0:         write(packet,(int) (v >>> 16) & 0xFF);
0:         write(packet,(int) (v >>> 24) & 0xFF);
0:         write(packet,(int) (v >>> 32) & 0xFF);
0:         write(packet,(int) (v >>> 40) & 0xFF);
0:         write(packet,(int) (v >>> 48) & 0xFF);
0:         write(packet,(int) (v >>> 56) & 0xFF);
1:     }
1:     
1:     public static void writeDoubleBig(ByteSequence packet, double v) throws IOException {
1:         writeLongBig(packet, Double.doubleToLongBits(v));
1:     }
1:     public static void writeDoubleLittle(ByteSequence packet, double v) throws IOException {
1:         writeLongLittle(packet, Double.doubleToLongBits(v));
1:     }
1: 
1:     public static void writeFloatBig(ByteSequence packet, float v) throws IOException {
1:         writeIntBig(packet, Float.floatToIntBits(v));
1:     }
1:     public static void writeFloatLittle(ByteSequence packet, float v) throws IOException {
1:         writeIntLittle(packet, Float.floatToIntBits(v));
1:     }
1:     
1:     public static void writeRawDoubleBig(ByteSequence packet, double v) throws IOException {
1:         writeLongBig(packet, Double.doubleToRawLongBits(v));
1:     }
1:     public static void writeRawDoubleLittle(ByteSequence packet, double v) throws IOException {
1:         writeLongLittle(packet, Double.doubleToRawLongBits(v));
1:     }
1: 
1:     public static void writeRawFloatBig(ByteSequence packet, float v) throws IOException {
1:         writeIntBig(packet, Float.floatToRawIntBits(v));
1:     }
1:     public static void writeRawFloatLittle(ByteSequence packet, float v) throws IOException {
1:         writeIntLittle(packet, Float.floatToRawIntBits(v));
1:     }
1: 
1: }
============================================================================