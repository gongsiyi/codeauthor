1:99ef19a: /**
1:99ef19a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:99ef19a:  * contributor license agreements.  See the NOTICE file distributed with
1:99ef19a:  * this work for additional information regarding copyright ownership.
1:99ef19a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:99ef19a:  * (the "License"); you may not use this file except in compliance with
1:99ef19a:  * the License.  You may obtain a copy of the License at
1:99ef19a:  *
1:99ef19a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:99ef19a:  *
1:99ef19a:  * Unless required by applicable law or agreed to in writing, software
1:99ef19a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:99ef19a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:99ef19a:  * See the License for the specific language governing permissions and
1:99ef19a:  * limitations under the License.
1:99ef19a:  */
1:99ef19a: package org.apache.activemq.usecases;
2:99ef19a: 
1:99ef19a: import javax.jms.Destination;
1:99ef19a: import javax.jms.MessageConsumer;
1:99ef19a: 
1:99ef19a: import junit.framework.Test;
1:99ef19a: 
1:99ef19a: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:99ef19a: import org.apache.activemq.command.ActiveMQQueue;
1:99ef19a: import org.apache.activemq.command.ActiveMQTopic;
1:99ef19a: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:99ef19a: import org.springframework.core.io.ClassPathResource;
1:99ef19a: 
1:99ef19a: public class MessageReroutingTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(MessageReroutingTest.class);
1:99ef19a:     
1:99ef19a:     
1:99ef19a:     public Destination dest;
1:99ef19a:     public static final int MESSAGE_COUNT = 50;
1:99ef19a: 
1:99ef19a:     protected void setUp() throws Exception {
1:99ef19a:         super.setAutoFail(true);
1:99ef19a:         super.setUp();
1:99ef19a:         
1:99ef19a:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-D.xml"));
1:99ef19a:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-C.xml"));
1:99ef19a:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-B.xml"));
1:99ef19a:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-A.xml"));
1:2b456dd: 
1:99ef19a:         brokers.get("broker-A").broker.waitUntilStarted();
1:99ef19a:     }
1:99ef19a:     
1:99ef19a:     public void initCombos() {
1:99ef19a:         addCombinationValues("dest", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:99ef19a:     }
1:99ef19a:     
1:99ef19a:     public void testMessageRerouting() throws Exception {
1:99ef19a:         MessageConsumer consumer = createConsumer("broker-D", dest);
1:99ef19a:         
1:99ef19a:         MessageIdList received = getConsumerMessages("broker-D", consumer);
1:99ef19a:         
1:99ef19a:         Thread.sleep(2000); //wait for subs to propagate
1:99ef19a: 
1:99ef19a:         // send/receive messages
1:99ef19a:         sendMessages("broker-A", dest, MESSAGE_COUNT);
1:99ef19a:         received.waitForMessagesToArrive(MESSAGE_COUNT);
1:99ef19a:         LOG.info("received " +  received.getMessageCount() + " messages");
1:99ef19a:         assertEquals(MESSAGE_COUNT, received.getMessageCount());
1:99ef19a:         
1:99ef19a:         brokers.get("broker-B").broker.stop();
1:99ef19a:         brokers.get("broker-B").broker.waitUntilStopped();
1:99ef19a:         Thread.sleep(2000);
1:99ef19a:         
1:99ef19a:         // ensure send/receive still works
1:99ef19a:         sendMessages("broker-A", dest, MESSAGE_COUNT);
1:99ef19a:         received.waitForMessagesToArrive(MESSAGE_COUNT);
1:99ef19a:         LOG.info("received " +  received.getMessageCount() + " messages");
1:99ef19a:         assertTrue("Didn't receive any more messages " + received.getMessageCount(), received.getMessageCount() > MESSAGE_COUNT);
1:99ef19a:         
1:99ef19a:         
1:99ef19a:     }
1:99ef19a: 
1:99ef19a:     
1:99ef19a:     public static Test suite() {
1:99ef19a:         return suite(MessageReroutingTest.class);
1:99ef19a:     }
1:99ef19a:     
1:99ef19a:     
1:99ef19a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2b456dd
/////////////////////////////////////////////////////////////////////////
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(MessageReroutingTest.class);
commit:99ef19a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.MessageIdList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: public class MessageReroutingTest extends JmsMultipleBrokersTestSupport {
0:     private static final transient Log LOG = LogFactory.getLog(MessageReroutingTest.class);
1:     
1:     
1:     public Destination dest;
1:     public static final int MESSAGE_COUNT = 50;
1: 
1:     protected void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-D.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-C.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-B.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rerouting-activemq-A.xml"));
1:         
1:         brokers.get("broker-A").broker.waitUntilStarted();
1:     }
1:     
1:     public void initCombos() {
1:         addCombinationValues("dest", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:     }
1:     
1:     public void testMessageRerouting() throws Exception {
1:         MessageConsumer consumer = createConsumer("broker-D", dest);
1:         
1:         MessageIdList received = getConsumerMessages("broker-D", consumer);
1:         
1:         Thread.sleep(2000); //wait for subs to propagate
1: 
1:         // send/receive messages
1:         sendMessages("broker-A", dest, MESSAGE_COUNT);
1:         received.waitForMessagesToArrive(MESSAGE_COUNT);
1:         LOG.info("received " +  received.getMessageCount() + " messages");
1:         assertEquals(MESSAGE_COUNT, received.getMessageCount());
1:         
1:         brokers.get("broker-B").broker.stop();
1:         brokers.get("broker-B").broker.waitUntilStopped();
1:         Thread.sleep(2000);
1:         
1:         // ensure send/receive still works
1:         sendMessages("broker-A", dest, MESSAGE_COUNT);
1:         received.waitForMessagesToArrive(MESSAGE_COUNT);
1:         LOG.info("received " +  received.getMessageCount() + " messages");
1:         assertTrue("Didn't receive any more messages " + received.getMessageCount(), received.getMessageCount() > MESSAGE_COUNT);
1:         
1:         
1:     }
1: 
1:     
1:     public static Test suite() {
1:         return suite(MessageReroutingTest.class);
1:     }
1:     
1:     
1: }
============================================================================