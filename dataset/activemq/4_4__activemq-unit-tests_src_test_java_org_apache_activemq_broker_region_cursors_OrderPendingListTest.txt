1:fd37e8c: /**
1:fd37e8c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd37e8c:  * contributor license agreements.  See the NOTICE file distributed with
1:fd37e8c:  * this work for additional information regarding copyright ownership.
1:fd37e8c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd37e8c:  * (the "License"); you may not use this file except in compliance with
1:fd37e8c:  * the License.  You may obtain a copy of the License at
1:fd37e8c:  *
1:fd37e8c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd37e8c:  *
1:fd37e8c:  * Unless required by applicable law or agreed to in writing, software
1:fd37e8c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd37e8c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd37e8c:  * See the License for the specific language governing permissions and
1:fd37e8c:  * limitations under the License.
1:fd37e8c:  */
1:fd37e8c: package org.apache.activemq.broker.region.cursors;
3:fd37e8c: 
1:fd37e8c: import static org.junit.Assert.assertEquals;
1:fd37e8c: import static org.junit.Assert.assertFalse;
1:fd37e8c: import static org.junit.Assert.assertTrue;
1:fd37e8c: 
1:fd37e8c: import java.util.Collection;
1:fd37e8c: import java.util.Iterator;
1:fd37e8c: import java.util.LinkedList;
1:f47b370: import java.util.List;
1:fd37e8c: 
1:fd37e8c: import org.apache.activemq.broker.region.Destination;
1:fd37e8c: import org.apache.activemq.broker.region.MessageReference;
1:fd37e8c: import org.apache.activemq.command.ConsumerId;
1:fd37e8c: import org.apache.activemq.command.Message;
1:fd37e8c: import org.apache.activemq.command.MessageId;
1:fd37e8c: import org.apache.activemq.util.IdGenerator;
1:fd37e8c: import org.junit.Test;
1:fd37e8c: 
1:fd37e8c: public class OrderPendingListTest {
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testAddMessageFirst() throws Exception {
1:fd37e8c: 
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = list.size();
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
2:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testAddMessageLast() throws Exception {
1:fd37e8c: 
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(new TestMessageReference(1));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(3));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(4));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = 1;
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId++, iter.next().getMessageId().getProducerSequenceId());
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testClear() throws Exception {
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         list.clear();
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c:         assertEquals(0, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testIsEmpty() throws Exception {
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         list.clear();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testSize() {
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         assertTrue(list.size() == 1);
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         assertTrue(list.size() == 2);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         assertTrue(list.size() == 3);
1:fd37e8c:         list.addMessageLast(new TestMessageReference(4));
1:fd37e8c:         assertTrue(list.size() == 4);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         list.clear();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testRemove() throws Exception {
1:fd37e8c: 
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         TestMessageReference toRemove = new TestMessageReference(6);
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(toRemove);
1:fd37e8c:         list.remove(toRemove);
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         list.remove(toRemove);
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = list.size();
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         list.remove(null);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testContains() throws Exception {
1:fd37e8c: 
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         TestMessageReference toRemove = new TestMessageReference(6);
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.contains(toRemove));
1:fd37e8c:         assertFalse(list.contains(null));
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(toRemove);
1:fd37e8c:         assertTrue(list.size() == 6);
1:fd37e8c:         assertTrue(list.contains(toRemove));
1:fd37e8c:         list.remove(toRemove);
1:fd37e8c:         assertFalse(list.contains(toRemove));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:         assertEquals(5, list.getAsList().size());
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testValues() throws Exception {
1:fd37e8c: 
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c: 
1:fd37e8c:         TestMessageReference toRemove = new TestMessageReference(6);
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.contains(toRemove));
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         Collection<MessageReference> values = list.values();
1:fd37e8c:         assertEquals(5, values.size());
1:fd37e8c: 
1:fd37e8c:         for (MessageReference msg : values) {
1:fd37e8c:             assertTrue(values.contains(msg));
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         assertFalse(values.contains(toRemove));
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(toRemove);
1:fd37e8c:         values = list.values();
1:fd37e8c:         assertEquals(6, values.size());
1:fd37e8c:         for (MessageReference msg : values) {
1:fd37e8c:             assertTrue(values.contains(msg));
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         assertTrue(values.contains(toRemove));
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testAddAll() throws Exception {
1:fd37e8c:         OrderedPendingList list = new OrderedPendingList();
1:fd37e8c:         TestPendingList source = new TestPendingList();
1:fd37e8c: 
1:fd37e8c:         source.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         source.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         source.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         source.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         source.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:         assertEquals(5, source.size());
1:fd37e8c:         list.addAll(source);
1:fd37e8c:         assertEquals(5, list.size());
1:fd37e8c: 
1:fd37e8c:         for (MessageReference message : source) {
1:fd37e8c:             assertTrue(list.contains(message));
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         list.addAll(null);
1:fd37e8c:     }
1:fd37e8c: 
1:f47b370:     @Test
1:f47b370:     public void testInsertAtHead() throws Exception {
1:f47b370:         OrderedPendingList underTest = new OrderedPendingList();
1:f47b370: 
1:f47b370:         TestPendingList source = new TestPendingList();
1:f47b370:         source.addMessageLast(new TestMessageReference(1));
1:f47b370:         source.addMessageLast(new TestMessageReference(2));
1:f47b370:         source.addMessageLast(new TestMessageReference(3));
1:f47b370:         source.addMessageLast(new TestMessageReference(4));
1:f47b370:         source.addMessageLast(new TestMessageReference(5));
1:f47b370: 
1:f47b370:         assertTrue(underTest.isEmpty());
1:f47b370:         assertEquals(5, source.size());
1:f47b370: 
1:f47b370:         LinkedList linkedList = new LinkedList();
1:f47b370:         linkedList.addAll(source.values());
1:f47b370:         underTest.insertAtHead(linkedList);
1:f47b370:         assertEquals(5, underTest.size());
1:f47b370: 
1:f47b370:         underTest.insertAtHead(null);
1:f47b370: 
1:f47b370:         linkedList.clear();
1:f47b370: 
1:f47b370:         Iterator<MessageReference> iterator = underTest.iterator();
1:f47b370:         for (int i=0; i < 2 && iterator.hasNext(); i++ ) {
1:f47b370:             MessageReference ref = iterator.next();
1:f47b370:             linkedList.addLast(ref);
1:f47b370:             iterator.remove();
1:f47b370:             assertEquals(ref.getMessageId().getProducerSequenceId(), i + 1);
1:f47b370:         }
1:f47b370: 
1:f47b370:         assertEquals(3, underTest.size());
1:f47b370: 
1:f47b370:         underTest.insertAtHead(linkedList);
1:f47b370:         assertEquals(5, underTest.size());
1:f47b370: 
1:f47b370:         iterator = underTest.iterator();
1:f47b370:         for (int i=0; iterator.hasNext(); i++ ) {
1:f47b370:             MessageReference ref = iterator.next();
1:f47b370:             linkedList.addLast(ref);
1:f47b370:             iterator.remove();
1:f47b370:             assertEquals(ref.getMessageId().getProducerSequenceId(), i + 1);
1:f47b370:         }
1:f47b370:         assertEquals(0, underTest.size());
1:f47b370: 
1:f47b370:     }
1:f47b370: 
1:fd37e8c:     static class TestPendingList implements PendingList {
1:fd37e8c: 
1:fd37e8c:         private final LinkedList<MessageReference> theList = new LinkedList<MessageReference>();
1:fd37e8c: 
2:fd37e8c:         @Override
1:fd37e8c:         public boolean isEmpty() {
1:fd37e8c:             return theList.isEmpty();
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public void clear() {
1:fd37e8c:             theList.clear();
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public PendingNode addMessageFirst(MessageReference message) {
1:fd37e8c:             theList.addFirst(message);
1:fd37e8c:             return new PendingNode(null, message);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public PendingNode addMessageLast(MessageReference message) {
1:fd37e8c:             theList.addLast(message);
1:fd37e8c:             return new PendingNode(null, message);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public PendingNode remove(MessageReference message) {
1:fd37e8c:             if (theList.remove(message)) {
1:fd37e8c:                 return new PendingNode(null, message);
1:fd37e8c:             } else {
1:fd37e8c:                 return null;
1:f47b370:             }
1:fd37e8c:         }
1:f47b370: 
1:f47b370:         @Override
1:fd37e8c:         public int size() {
1:fd37e8c:             return theList.size();
1:fd37e8c:         }
1:f47b370: 
1:fd37e8c:         @Override
1:734fb7d:         public long messageSize() {
1:734fb7d:             long size = 0;
1:734fb7d:             Iterator<MessageReference> i = theList.iterator();
1:734fb7d:             while (i.hasNext()) {
1:734fb7d:                 size += i.next().getMessage().getSize();
1:734fb7d:             }
1:734fb7d:             return size;
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         @Override
1:fd37e8c:         public Iterator<MessageReference> iterator() {
1:fd37e8c:             return theList.iterator();
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean contains(MessageReference message) {
1:fd37e8c:             return theList.contains(message);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Collection<MessageReference> values() {
1:fd37e8c:             return theList;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public void addAll(PendingList pendingList) {
1:fd37e8c:             for(MessageReference messageReference : pendingList) {
1:fd37e8c:                 theList.add(messageReference);
1:fd37e8c:             }
1:fd37e8c:         }
1:e947927: 
1:e947927:         @Override
1:e947927:         public MessageReference get(MessageId messageId) {
1:e947927:             for(MessageReference messageReference : theList) {
1:e947927:                 if (messageReference.getMessageId().equals(messageId)) {
1:e947927:                     return messageReference;
1:e947927:                 }
1:e947927:             }
1:e947927:             return null;
1:e947927:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     static class TestMessageReference implements MessageReference {
1:fd37e8c: 
1:fd37e8c:         private static final IdGenerator id = new IdGenerator();
1:fd37e8c: 
1:fd37e8c:         private MessageId messageId;
1:fd37e8c:         private int referenceCount = 0;
1:fd37e8c: 
1:fd37e8c:         public TestMessageReference(int sequenceId) {
1:fd37e8c:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public MessageId getMessageId() {
1:fd37e8c:             return messageId;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Message getMessageHardRef() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Message getMessage() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isPersistent() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Destination getRegionDestination() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getRedeliveryCounter() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public void incrementRedeliveryCounter() {
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getReferenceCount() {
1:fd37e8c:             return this.referenceCount;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int incrementReferenceCount() {
1:fd37e8c:             return this.referenceCount++;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int decrementReferenceCount() {
1:fd37e8c:             return this.referenceCount--;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public ConsumerId getTargetConsumerId() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getSize() {
1:fd37e8c:             return 1;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public long getExpiration() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public String getGroupID() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getGroupSequence() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isExpired() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isDropped() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isAdvisory() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:6cc2c11: 
1:6cc2c11:         @Override
1:6cc2c11:         public boolean canProcessAsExpired() {
1:6cc2c11:             return false;
1:6cc2c11:         }
1:fd37e8c:     }
1:fd37e8c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public boolean canProcessAsExpired() {
1:             return false;
1:         }
commit:604f707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:f47b370
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Arrays;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testInsertAtHead() throws Exception {
1:         OrderedPendingList underTest = new OrderedPendingList();
1: 
1:         TestPendingList source = new TestPendingList();
1:         source.addMessageLast(new TestMessageReference(1));
1:         source.addMessageLast(new TestMessageReference(2));
1:         source.addMessageLast(new TestMessageReference(3));
1:         source.addMessageLast(new TestMessageReference(4));
1:         source.addMessageLast(new TestMessageReference(5));
1: 
1:         assertTrue(underTest.isEmpty());
1:         assertEquals(5, source.size());
1: 
1:         LinkedList linkedList = new LinkedList();
1:         linkedList.addAll(source.values());
1:         underTest.insertAtHead(linkedList);
1:         assertEquals(5, underTest.size());
1: 
1:         underTest.insertAtHead(null);
1: 
1:         linkedList.clear();
1: 
1:         Iterator<MessageReference> iterator = underTest.iterator();
1:         for (int i=0; i < 2 && iterator.hasNext(); i++ ) {
1:             MessageReference ref = iterator.next();
1:             linkedList.addLast(ref);
1:             iterator.remove();
1:             assertEquals(ref.getMessageId().getProducerSequenceId(), i + 1);
1:         }
1: 
1:         assertEquals(3, underTest.size());
1: 
1:         underTest.insertAtHead(linkedList);
1:         assertEquals(5, underTest.size());
1: 
1:         iterator = underTest.iterator();
1:         for (int i=0; iterator.hasNext(); i++ ) {
1:             MessageReference ref = iterator.next();
1:             linkedList.addLast(ref);
1:             iterator.remove();
1:             assertEquals(ref.getMessageId().getProducerSequenceId(), i + 1);
1:         }
1:         assertEquals(0, underTest.size());
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
0:         public void insertAtHead(List<MessageReference> list) {
0:             theList.addAll(list);
1: 
1:         }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:         public long messageSize() {
1:             long size = 0;
1:             Iterator<MessageReference> i = theList.iterator();
1:             while (i.hasNext()) {
1:                 size += i.next().getMessage().getSize();
1:             }
1:             return size;
1:         }
1: 
1:         @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e947927
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public MessageReference get(MessageId messageId) {
1:             for(MessageReference messageReference : theList) {
1:                 if (messageReference.getMessageId().equals(messageId)) {
1:                     return messageReference;
1:                 }
1:             }
1:             return null;
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:fd37e8c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.util.IdGenerator;
1: import org.junit.Test;
1: 
1: public class OrderPendingListTest {
1: 
1:     @Test
1:     public void testAddMessageFirst() throws Exception {
1: 
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
1:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:         }
1:     }
1: 
1:     @Test
1:     public void testAddMessageLast() throws Exception {
1: 
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         list.addMessageLast(new TestMessageReference(1));
1:         list.addMessageLast(new TestMessageReference(2));
1:         list.addMessageLast(new TestMessageReference(3));
1:         list.addMessageLast(new TestMessageReference(4));
1:         list.addMessageLast(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = 1;
1:         while (iter.hasNext()) {
1:             assertEquals(lastId++, iter.next().getMessageId().getProducerSequenceId());
1:         }
1:     }
1: 
1:     @Test
1:     public void testClear() throws Exception {
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         list.clear();
1: 
1:         assertTrue(list.isEmpty());
1:         assertTrue(list.size() == 0);
1:         assertEquals(0, list.getAsList().size());
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageLast(new TestMessageReference(2));
1:         list.addMessageLast(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageLast(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1:     }
1: 
1:     @Test
1:     public void testIsEmpty() throws Exception {
1:         OrderedPendingList list = new OrderedPendingList();
1:         assertTrue(list.isEmpty());
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         list.clear();
1:         assertTrue(list.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testSize() {
1:         OrderedPendingList list = new OrderedPendingList();
1:         assertTrue(list.isEmpty());
1: 
1:         assertTrue(list.size() == 0);
1:         list.addMessageFirst(new TestMessageReference(1));
1:         assertTrue(list.size() == 1);
1:         list.addMessageLast(new TestMessageReference(2));
1:         assertTrue(list.size() == 2);
1:         list.addMessageFirst(new TestMessageReference(3));
1:         assertTrue(list.size() == 3);
1:         list.addMessageLast(new TestMessageReference(4));
1:         assertTrue(list.size() == 4);
1:         list.addMessageFirst(new TestMessageReference(5));
1:         assertTrue(list.size() == 5);
1: 
1:         assertFalse(list.isEmpty());
1:         list.clear();
1:         assertTrue(list.isEmpty());
1:         assertTrue(list.size() == 0);
1:     }
1: 
1:     @Test
1:     public void testRemove() throws Exception {
1: 
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         TestMessageReference toRemove = new TestMessageReference(6);
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         list.addMessageLast(toRemove);
1:         list.remove(toRemove);
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         list.remove(toRemove);
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
1:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:         }
1: 
1:         list.remove(null);
1:     }
1: 
1:     @Test
1:     public void testContains() throws Exception {
1: 
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         TestMessageReference toRemove = new TestMessageReference(6);
1: 
1:         assertFalse(list.contains(toRemove));
1:         assertFalse(list.contains(null));
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1: 
1:         list.addMessageLast(toRemove);
1:         assertTrue(list.size() == 6);
1:         assertTrue(list.contains(toRemove));
1:         list.remove(toRemove);
1:         assertFalse(list.contains(toRemove));
1: 
1:         assertTrue(list.size() == 5);
1:         assertEquals(5, list.getAsList().size());
1:     }
1: 
1:     @Test
1:     public void testValues() throws Exception {
1: 
1:         OrderedPendingList list = new OrderedPendingList();
1: 
1:         TestMessageReference toRemove = new TestMessageReference(6);
1: 
1:         assertFalse(list.contains(toRemove));
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         Collection<MessageReference> values = list.values();
1:         assertEquals(5, values.size());
1: 
1:         for (MessageReference msg : values) {
1:             assertTrue(values.contains(msg));
1:         }
1: 
1:         assertFalse(values.contains(toRemove));
1: 
1:         list.addMessageLast(toRemove);
1:         values = list.values();
1:         assertEquals(6, values.size());
1:         for (MessageReference msg : values) {
1:             assertTrue(values.contains(msg));
1:         }
1: 
1:         assertTrue(values.contains(toRemove));
1:     }
1: 
1:     @Test
1:     public void testAddAll() throws Exception {
1:         OrderedPendingList list = new OrderedPendingList();
1:         TestPendingList source = new TestPendingList();
1: 
1:         source.addMessageFirst(new TestMessageReference(1));
1:         source.addMessageFirst(new TestMessageReference(2));
1:         source.addMessageFirst(new TestMessageReference(3));
1:         source.addMessageFirst(new TestMessageReference(4));
1:         source.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.isEmpty());
1:         assertEquals(5, source.size());
1:         list.addAll(source);
1:         assertEquals(5, list.size());
1: 
1:         for (MessageReference message : source) {
1:             assertTrue(list.contains(message));
1:         }
1: 
1:         list.addAll(null);
1:     }
1: 
1:     static class TestPendingList implements PendingList {
1: 
1:         private final LinkedList<MessageReference> theList = new LinkedList<MessageReference>();
1: 
1:         @Override
1:         public boolean isEmpty() {
1:             return theList.isEmpty();
1:         }
1: 
1:         @Override
1:         public void clear() {
1:             theList.clear();
1:         }
1: 
1:         @Override
1:         public PendingNode addMessageFirst(MessageReference message) {
1:             theList.addFirst(message);
1:             return new PendingNode(null, message);
1:         }
1: 
1:         @Override
1:         public PendingNode addMessageLast(MessageReference message) {
1:             theList.addLast(message);
1:             return new PendingNode(null, message);
1:         }
1: 
1:         @Override
1:         public PendingNode remove(MessageReference message) {
1:             if (theList.remove(message)) {
1:                 return new PendingNode(null, message);
1:             } else {
1:                 return null;
1:             }
1:         }
1: 
1:         @Override
1:         public int size() {
1:             return theList.size();
1:         }
1: 
1:         @Override
1:         public Iterator<MessageReference> iterator() {
1:             return theList.iterator();
1:         }
1: 
1:         @Override
1:         public boolean contains(MessageReference message) {
1:             return theList.contains(message);
1:         }
1: 
1:         @Override
1:         public Collection<MessageReference> values() {
1:             return theList;
1:         }
1: 
1:         @Override
1:         public void addAll(PendingList pendingList) {
1:             for(MessageReference messageReference : pendingList) {
1:                 theList.add(messageReference);
1:             }
1:         }
1:     }
1: 
1:     static class TestMessageReference implements MessageReference {
1: 
1:         private static final IdGenerator id = new IdGenerator();
1: 
1:         private MessageId messageId;
1:         private int referenceCount = 0;
1: 
1:         public TestMessageReference(int sequenceId) {
1:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:         }
1: 
1:         @Override
1:         public MessageId getMessageId() {
1:             return messageId;
1:         }
1: 
1:         @Override
1:         public Message getMessageHardRef() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public Message getMessage() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public boolean isPersistent() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public Destination getRegionDestination() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getRedeliveryCounter() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public void incrementRedeliveryCounter() {
1:         }
1: 
1:         @Override
1:         public int getReferenceCount() {
1:             return this.referenceCount;
1:         }
1: 
1:         @Override
1:         public int incrementReferenceCount() {
1:             return this.referenceCount++;
1:         }
1: 
1:         @Override
1:         public int decrementReferenceCount() {
1:             return this.referenceCount--;
1:         }
1: 
1:         @Override
1:         public ConsumerId getTargetConsumerId() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getSize() {
1:             return 1;
1:         }
1: 
1:         @Override
1:         public long getExpiration() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public String getGroupID() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getGroupSequence() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public boolean isExpired() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean isDropped() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean isAdvisory() {
1:             return false;
1:         }
1:     }
1: }
============================================================================