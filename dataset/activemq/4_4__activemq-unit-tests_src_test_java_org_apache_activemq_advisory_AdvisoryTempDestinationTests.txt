1:789789f: /**
1:789789f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:789789f:  * contributor license agreements.  See the NOTICE file distributed with
1:789789f:  * this work for additional information regarding copyright ownership.
1:789789f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:789789f:  * (the "License"); you may not use this file except in compliance with
1:789789f:  * the License.  You may obtain a copy of the License at
1:789789f:  *
1:789789f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:789789f:  *
1:789789f:  * Unless required by applicable law or agreed to in writing, software
1:789789f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:789789f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:789789f:  * See the License for the specific language governing permissions and
1:789789f:  * limitations under the License.
1:789789f:  */
1:789789f: package org.apache.activemq.advisory;
4:789789f: 
1:c10e6fa: import static org.junit.Assert.assertEquals;
1:c10e6fa: import static org.junit.Assert.assertNotNull;
1:c10e6fa: import static org.junit.Assert.assertNull;
1:c10e6fa: 
1:c7d559f: import java.util.ArrayList;
1:c7d559f: import java.util.List;
1:c7d559f: 
1:c7d559f: import javax.jms.BytesMessage;
1:c7d559f: import javax.jms.Connection;
1:c7d559f: import javax.jms.ConnectionFactory;
1:c7d559f: import javax.jms.Message;
1:c7d559f: import javax.jms.MessageConsumer;
1:c7d559f: import javax.jms.MessageListener;
1:c7d559f: import javax.jms.MessageProducer;
1:c7d559f: import javax.jms.Queue;
1:c7d559f: import javax.jms.Session;
1:c7d559f: import javax.jms.TemporaryQueue;
1:c7d559f: import javax.jms.Topic;
1:c7d559f: 
1:789789f: import org.apache.activemq.ActiveMQConnectionFactory;
1:789789f: import org.apache.activemq.broker.BrokerService;
1:789789f: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:789789f: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:789789f: import org.apache.activemq.broker.region.policy.PolicyMap;
1:789789f: import org.apache.activemq.command.ActiveMQDestination;
1:789789f: import org.apache.activemq.command.ActiveMQMessage;
1:c10e6fa: import org.junit.After;
1:c10e6fa: import org.junit.Before;
1:c10e6fa: import org.junit.Test;
1:c7d559f: 
1:c10e6fa: public class AdvisoryTempDestinationTests {
1:789789f: 
1:789789f:     protected static final int MESSAGE_COUNT = 2000;
1:c10e6fa:     protected static final int EXPIRE_MESSAGE_PERIOD = 10000;
1:c10e6fa: 
1:789789f:     protected BrokerService broker;
1:789789f:     protected Connection connection;
1:d1e2b76:     protected String connectionURI;
1:789789f:     protected int topicCount;
1:789789f: 
1:c10e6fa:     @Test(timeout = 60000)
1:789789f:     public void testNoSlowConsumerAdvisory() throws Exception {
1:789789f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         TemporaryQueue queue = s.createTemporaryQueue();
1:789789f:         MessageConsumer consumer = s.createConsumer(queue);
1:789789f:         consumer.setMessageListener(new MessageListener() {
1:c7d559f:             @Override
1:789789f:             public void onMessage(Message message) {
2:789789f:             }
1:789789f:         });
1:c10e6fa: 
1:c10e6fa:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:789789f:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:789789f:         // start throwing messages at the consumer
1:789789f:         MessageProducer producer = s.createProducer(queue);
1:789789f:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:789789f:             BytesMessage m = s.createBytesMessage();
1:789789f:             m.writeBytes(new byte[1024]);
1:789789f:             producer.send(m);
1:789789f:         }
1:789789f:         Message msg = advisoryConsumer.receive(1000);
1:789789f:         assertNull(msg);
1:789789f:     }
1:789789f: 
1:c10e6fa:     @Test(timeout = 60000)
1:789789f:     public void testSlowConsumerAdvisory() throws Exception {
1:789789f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         TemporaryQueue queue = s.createTemporaryQueue();
1:789789f:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:789789f: 
1:c10e6fa:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:789789f:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:789789f:         // start throwing messages at the consumer
1:789789f:         MessageProducer producer = s.createProducer(queue);
1:789789f:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:789789f:             BytesMessage m = s.createBytesMessage();
1:789789f:             m.writeBytes(new byte[1024]);
1:789789f:             producer.send(m);
1:789789f:         }
1:789789f:         Message msg = advisoryConsumer.receive(1000);
1:789789f:         assertNotNull(msg);
1:789789f:     }
1:789789f: 
1:c10e6fa:     @Test(timeout = 60000)
1:789789f:     public void testMessageDeliveryAdvisory() throws Exception {
1:789789f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         TemporaryQueue queue = s.createTemporaryQueue();
1:789789f:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:789789f: 
1:789789f:         Topic advisoryTopic = AdvisorySupport.getMessageDeliveredAdvisoryTopic((ActiveMQDestination) queue);
1:789789f:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:789789f:         MessageProducer producer = s.createProducer(queue);
1:789789f: 
1:789789f:         BytesMessage m = s.createBytesMessage();
1:789789f:         m.writeBytes(new byte[1024]);
1:789789f:         producer.send(m);
1:789789f: 
1:789789f:         Message msg = advisoryConsumer.receive(1000);
1:789789f:         assertNotNull(msg);
1:789789f:     }
1:789789f: 
1:c10e6fa:     @Test(timeout = 60000)
1:789789f:     public void testTempMessageConsumedAdvisory() throws Exception {
1:789789f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         TemporaryQueue queue = s.createTemporaryQueue();
1:789789f:         MessageConsumer consumer = s.createConsumer(queue);
1:789789f: 
1:789789f:         Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1:789789f:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:789789f:         MessageProducer producer = s.createProducer(queue);
1:789789f: 
1:789789f:         BytesMessage m = s.createBytesMessage();
1:789789f:         m.writeBytes(new byte[1024]);
1:789789f:         producer.send(m);
1:789789f:         String id = m.getJMSMessageID();
1:789789f:         Message msg = consumer.receive(1000);
1:789789f:         assertNotNull(msg);
1:789789f: 
1:789789f:         msg = advisoryConsumer.receive(1000);
1:789789f:         assertNotNull(msg);
1:789789f: 
1:789789f:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:789789f:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:789789f:         String originalId = payload.getJMSMessageID();
1:789789f:         assertEquals(originalId, id);
1:789789f:     }
1:789789f: 
1:c10e6fa:     @Test(timeout = 60000)
1:789789f:     public void testMessageExpiredAdvisory() throws Exception {
1:789789f:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:789789f:         Queue queue = s.createQueue(getClass().getName());
1:789789f:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:789789f: 
1:789789f:         Topic advisoryTopic = AdvisorySupport.getExpiredMessageTopic((ActiveMQDestination) queue);
1:789789f:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:789789f:         MessageProducer producer = s.createProducer(queue);
1:789789f:         producer.setTimeToLive(1);
1:789789f:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:789789f:             BytesMessage m = s.createBytesMessage();
1:789789f:             m.writeBytes(new byte[1024]);
1:789789f:             producer.send(m);
1:789789f:         }
1:789789f: 
1:c10e6fa:         Message msg = advisoryConsumer.receive(EXPIRE_MESSAGE_PERIOD);
1:789789f:         assertNotNull(msg);
1:789789f:     }
1:789789f: 
1:c10e6fa:     @Before
1:c10e6fa:     public void setUp() throws Exception {
1:d1e2b76:         broker = createBroker();
1:d1e2b76:         connectionURI = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:789789f:         ConnectionFactory factory = createConnectionFactory();
1:789789f:         connection = factory.createConnection();
1:789789f:         connection.start();
1:789789f:     }
1:789789f: 
1:c10e6fa:     @After
1:c10e6fa:     public void tearDown() throws Exception {
1:789789f:         connection.close();
1:789789f:         if (broker != null) {
1:789789f:             broker.stop();
1:789789f:         }
1:789789f:     }
1:789789f: 
1:c10e6fa:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d1e2b76:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
1:789789f:         return cf;
1:789789f:     }
1:789789f: 
1:789789f:     protected BrokerService createBroker() throws Exception {
1:789789f:         BrokerService answer = new BrokerService();
1:789789f:         configureBroker(answer);
1:789789f:         answer.start();
1:789789f:         return answer;
1:789789f:     }
1:789789f: 
1:789789f:     protected void configureBroker(BrokerService answer) throws Exception {
1:789789f:         answer.setPersistent(false);
1:789789f:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
1:789789f:         strategy.setLimit(10);
1:789789f:         PolicyEntry tempQueueEntry = createPolicyEntry(strategy);
1:789789f:         tempQueueEntry.setTempQueue(true);
1:789789f:         PolicyEntry tempTopicEntry = createPolicyEntry(strategy);
1:789789f:         tempTopicEntry.setTempTopic(true);
1:789789f: 
1:789789f:         PolicyMap pMap = new PolicyMap();
1:789789f:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:789789f:         policyEntries.add(tempQueueEntry);
1:789789f:         policyEntries.add(tempTopicEntry);
1:789789f:         pMap.setPolicyEntries(policyEntries);
1:789789f: 
1:789789f:         answer.setDestinationPolicy(pMap);
1:d1e2b76:         answer.addConnector("tcp://0.0.0.0:0");
1:789789f:         answer.setDeleteAllMessagesOnStartup(true);
1:789789f:     }
1:789789f: 
1:789789f:     private PolicyEntry createPolicyEntry(ConstantPendingMessageLimitStrategy strategy) {
1:789789f:         PolicyEntry policy = new PolicyEntry();
1:c10e6fa:         policy.setExpireMessagesPeriod(EXPIRE_MESSAGE_PERIOD);
1:db1f6fe:         policy.setAdvisoryForFastProducers(true);
1:789789f:         policy.setAdvisoryForConsumed(true);
1:789789f:         policy.setAdvisoryForDelivery(true);
1:789789f:         policy.setAdvisoryForDiscardingMessages(true);
1:789789f:         policy.setAdvisoryForSlowConsumers(true);
1:789789f:         policy.setAdvisoryWhenFull(true);
1:789789f:         policy.setProducerFlowControl(false);
1:789789f:         policy.setPendingMessageLimitStrategy(strategy);
1:789789f: 
1:789789f:         return policy;
1:789789f:     }
1:789789f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d1e2b76
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected String connectionURI;
/////////////////////////////////////////////////////////////////////////
1:         broker = createBroker();
1:         connectionURI = broker.getTransportConnectors().get(0).getPublishableConnectString();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(connectionURI);
/////////////////////////////////////////////////////////////////////////
1:         answer.addConnector("tcp://0.0.0.0:0");
commit:c10e6fa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class AdvisoryTempDestinationTests {
1:     protected static final int EXPIRE_MESSAGE_PERIOD = 10000;
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:         Message msg = advisoryConsumer.receive(EXPIRE_MESSAGE_PERIOD);
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(ActiveMQConnection.DEFAULT_BROKER_URL);
/////////////////////////////////////////////////////////////////////////
1:         policy.setExpireMessagesPeriod(EXPIRE_MESSAGE_PERIOD);
commit:6c703ac
/////////////////////////////////////////////////////////////////////////
0:         Message msg = advisoryConsumer.receive(5000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.Topic;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer);
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:         policy.setAdvisoryForFastProducers(true);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:789789f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: 
0: import javax.jms.*;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
0: public class AdvisoryTempDestinationTests extends TestCase {
1: 
1:     protected static final int MESSAGE_COUNT = 2000;
1:     protected BrokerService broker;
1:     protected Connection connection;
0:     protected String bindAddress = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:     protected int topicCount;
1: 
1: 
1:     public void testNoSlowConsumerAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue queue = s.createTemporaryQueue();
1:         MessageConsumer consumer = s.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:             }
1:         });
0:         Topic advisoryTopic = AdvisorySupport
0:                 .getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:         // start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNull(msg);
1:     }
1: 
1:     public void testSlowConsumerAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue queue = s.createTemporaryQueue();
1:         MessageConsumer consumer = s.createConsumer(queue);
1: 
0:         Topic advisoryTopic = AdvisorySupport
0:                 .getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:         // start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:     public void testMessageDeliveryAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue queue = s.createTemporaryQueue();
1:         MessageConsumer consumer = s.createConsumer(queue);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getMessageDeliveredAdvisoryTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1: 
1:         BytesMessage m = s.createBytesMessage();
1:         m.writeBytes(new byte[1024]);
1:         producer.send(m);
1: 
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:     public void testTempMessageConsumedAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue queue = s.createTemporaryQueue();
1:         MessageConsumer consumer = s.createConsumer(queue);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1: 
1:         BytesMessage m = s.createBytesMessage();
1:         m.writeBytes(new byte[1024]);
1:         producer.send(m);
1:         String id = m.getJMSMessageID();
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1: 
1:         msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1: 
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         String originalId = payload.getJMSMessageID();
1:         assertEquals(originalId, id);
1:     }
1: 
1:     public void testMessageExpiredAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1: 
1:         Topic advisoryTopic = AdvisorySupport.getExpiredMessageTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         producer.setTimeToLive(1);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1: 
0:         Message msg = advisoryConsumer.receive(2000);
1:         assertNotNull(msg);
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         if (broker == null) {
0:             broker = createBroker();
1:         }
1:         ConnectionFactory factory = createConnectionFactory();
1:         connection = factory.createConnection();
1:         connection.start();
0:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:         connection.close();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory()
0:             throws Exception {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
0:                 ActiveMQConnection.DEFAULT_BROKER_URL);
1:         return cf;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         answer.setPersistent(false);
1:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
1:         strategy.setLimit(10);
1:         PolicyEntry tempQueueEntry = createPolicyEntry(strategy);
1:         tempQueueEntry.setTempQueue(true);
1:         PolicyEntry tempTopicEntry = createPolicyEntry(strategy);
1:         tempTopicEntry.setTempTopic(true);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         policyEntries.add(tempQueueEntry);
1:         policyEntries.add(tempTopicEntry);
1:         pMap.setPolicyEntries(policyEntries);
1: 
1:         answer.setDestinationPolicy(pMap);
0:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: 
1:     private PolicyEntry createPolicyEntry(ConstantPendingMessageLimitStrategy strategy) {
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setAdvisdoryForFastProducers(true);
1:         policy.setAdvisoryForConsumed(true);
1:         policy.setAdvisoryForDelivery(true);
1:         policy.setAdvisoryForDiscardingMessages(true);
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setAdvisoryWhenFull(true);
1:         policy.setProducerFlowControl(false);
1:         policy.setPendingMessageLimitStrategy(strategy);
1: 
1:         return policy;
1:     }
1: }
============================================================================