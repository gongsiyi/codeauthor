1:bc78238: /**
1:bc78238:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc78238:  * contributor license agreements.  See the NOTICE file distributed with
1:bc78238:  * this work for additional information regarding copyright ownership.
1:bc78238:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc78238:  * (the "License"); you may not use this file except in compliance with
1:bc78238:  * the License.  You may obtain a copy of the License at
1:bc78238:  *
1:bc78238:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc78238:  *
1:bc78238:  * Unless required by applicable law or agreed to in writing, software
1:bc78238:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc78238:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc78238:  * See the License for the specific language governing permissions and
1:bc78238:  * limitations under the License.
1:bc78238:  */
1:bc78238: 
1:bc78238: package org.apache.activemq.network.jms;
1:bc78238: 
1:bc78238: /**
1:bc78238:  * A policy object that defines how a {@link JmsConnector} deals with
1:bc78238:  * reconnection of the local and foreign connections.
1:bc78238:  *
1:bc78238:  * @org.apache.xbean.XBean element="reconnectionPolicy"
1:bc78238:  */
1:bc78238: public class ReconnectionPolicy {
1:bc78238: 
1:1b49374:     public static final int INFINITE = -1;
1:1b49374: 
1:bc78238:     private int maxSendRetries = 10;
1:bc78238:     private long sendRetryDelay = 1000L;
1:bc78238: 
1:1b49374:     private int maxReconnectAttempts = INFINITE;
1:1b49374:     private int maxInitialConnectAttempts = INFINITE;
1:bc78238:     private long maximumReconnectDelay = 30000;
1:bc78238:     private long initialReconnectDelay = 1000L;
1:bc78238:     private boolean useExponentialBackOff = false;
1:bc78238:     private double backOffMultiplier = 2.0;
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the maximum number of a times a Message send should be retried before
1:bc78238:      * a JMSExeception is thrown indicating that the operation failed.
1:bc78238:      *
1:bc78238:      * @return number of send retries that will be performed.
1:bc78238:      */
1:bc78238:     public int getMaxSendRetries() {
1:bc78238:         return maxSendRetries;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Sets the maximum number of a times a Message send should be retried before
1:bc78238:      * a JMSExeception is thrown indicating that the operation failed.
1:bc78238:      *
1:5e05df1:      * @param maxSendRetries
1:bc78238:      * 			number of send retries that will be performed.
1:bc78238:      */
1:bc78238:     public void setMaxSendRetries(int maxSendRetries) {
1:bc78238:         this.maxSendRetries = maxSendRetries;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Get the amount of time the DestionationBridge will wait between attempts
1:bc78238:      * to forward a message.
1:bc78238:      *
1:bc78238:      * @return time in milliseconds to wait between send attempts.
1:bc78238:      */
1:bc78238:     public long getSendRetryDelay() {
1:bc78238:         return this.sendRetryDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Set the amount of time the DestionationBridge will wait between attempts
1:bc78238:      * to forward a message.  The default policy limits the minimum time between
1:bc78238:      * send attempt to one second.
1:bc78238:      *
1:bc78238:      * @param sendRetryDelay
1:bc78238:      * 		Time in milliseconds to wait before attempting another send.
1:bc78238:      */
1:bc78238:     public void setSendRetyDelay(long sendRetryDelay) {
1:bc78238:         if (sendRetryDelay < 1000L) {
1:bc78238:             this.sendRetryDelay = 1000L;
1:bc78238:         }
1:bc78238: 
1:bc78238:         this.sendRetryDelay = sendRetryDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the number of time that {@link JmsConnector} will attempt to connect
1:bc78238:      * or reconnect before giving up.  By default the policy sets this value to
1:bc78238:      * a negative value meaning try forever.
1:bc78238:      *
1:bc78238:      * @return the number of attempts to connect before giving up.
1:bc78238:      */
1:bc78238:     public int getMaxReconnectAttempts() {
1:bc78238:         return maxReconnectAttempts;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Sets the number of time that {@link JmsConnector} will attempt to connect
1:bc78238:      * or reconnect before giving up.  By default the policy sets this value to
1:bc78238:      * a negative value meaning try forever, set to a positive value to retry a
1:bc78238:      * fixed number of times, or zero to never try and reconnect.
1:bc78238:      *
1:bc78238:      * @param maxReconnectAttempts
1:bc78238:      */
1:bc78238:     public void setMaxReconnectAttempts(int maxReconnectAttempts) {
1:bc78238:         this.maxReconnectAttempts = maxReconnectAttempts;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the maximum number of times that the {@link JmsConnector} will try
1:bc78238:      * to connect on startup to before it marks itself as failed and does not
1:bc78238:      * try any further connections.
1:bc78238:      *
1:bc78238:      * @returns the max number of times a connection attempt is made before failing.
1:bc78238:      */
1:bc78238:     public int getMaxInitialConnectAttempts() {
1:bc78238:         return this.maxInitialConnectAttempts;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Sets the maximum number of times that the {@link JmsConnector} will try
1:bc78238:      * to connect on startup to before it marks itself as failed and does not
1:bc78238:      * try any further connections.
1:bc78238:      *
1:bc78238:      * @param maxAttempts
1:bc78238:      * 		The max number of times a connection attempt is made before failing.
1:bc78238:      */
1:bc78238:     public void setMaxInitialConnectAttempts(int maxAttempts) {
1:bc78238:         this.maxInitialConnectAttempts = maxAttempts;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the maximum delay that is inserted between each attempt to connect
1:bc78238:      * before another attempt is made.  The default setting for this value is
1:bc78238:      * 30 seconds.
1:bc78238:      *
1:bc78238:      * @return the max delay between connection attempts in milliseconds.
1:bc78238:      */
1:bc78238:     public long getMaximumReconnectDelay() {
1:bc78238:         return maximumReconnectDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Sets the maximum delay that is inserted between each attempt to connect
1:bc78238:      * before another attempt is made.
1:bc78238:      *
1:bc78238:      * @param maximumReconnectDelay
1:bc78238:      * 		The maximum delay between connection attempts in milliseconds.
1:bc78238:      */
1:bc78238:     public void setMaximumReconnectDelay(long maximumReconnectDelay) {
1:bc78238:         this.maximumReconnectDelay = maximumReconnectDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the initial delay value used before a reconnection attempt is made.  If the
1:bc78238:      * use exponential back-off value is set to false then this will be the fixed time
1:bc78238:      * between connection attempts.  By default this value is set to one second.
1:bc78238:      *
1:bc78238:      * @return time in milliseconds that will be used between connection retries.
1:bc78238:      */
1:bc78238:     public long getInitialReconnectDelay() {
1:bc78238:         return initialReconnectDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the initial delay value used before a reconnection attempt is made.  If the
1:bc78238:      * use exponential back-off value is set to false then this will be the fixed time
1:bc78238:      * between connection attempts.  By default this value is set to one second.
1:bc78238: 
1:bc78238:      * @param initialReconnectDelay
1:bc78238:      * 		Time in milliseconds to wait before the first reconnection attempt.
1:bc78238:      */
1:bc78238:     public void setInitialReconnectDelay(long initialReconnectDelay) {
1:bc78238:         this.initialReconnectDelay = initialReconnectDelay;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets whether the policy uses the set back-off multiplier to grow the time between
1:bc78238:      * connection attempts.
1:bc78238:      *
1:bc78238:      * @return true if the policy will grow the time between connection attempts.
1:bc78238:      */
1:bc78238:     public boolean isUseExponentialBackOff() {
1:bc78238:         return useExponentialBackOff;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Sets whether the policy uses the set back-off multiplier to grow the time between
1:bc78238:      * connection attempts.
1:bc78238:      *
1:bc78238:      * @param useExponentialBackOff
1:bc78238:      */
1:bc78238:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:bc78238:         this.useExponentialBackOff = useExponentialBackOff;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the multiplier used to grow the delay between connection attempts from the initial
1:bc78238:      * time to the max set time.  By default this value is set to 2.0.
1:bc78238:      *
1:bc78238:      * @return the currently configured connection delay multiplier.
1:bc78238:      */
1:bc78238:     public double getBackOffMultiplier() {
1:bc78238:         return backOffMultiplier;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Gets the multiplier used to grow the delay between connection attempts from the initial
1:bc78238:      * time to the max set time.  By default this value is set to 2.0.
1:bc78238:      *
1:bc78238:      * @param backOffMultiplier
1:bc78238:      * 		The multiplier value used to grow the reconnection delay.
1:bc78238:      */
1:bc78238:     public void setBackOffMultiplier(double backOffMultiplier) {
1:bc78238:         this.backOffMultiplier = backOffMultiplier;
1:bc78238:     }
1:bc78238: 
1:bc78238:     /**
1:bc78238:      * Returns the next computed delay value that the connection controller should use to
1:bc78238:      * wait before attempting another connection for the {@link JmsConnector}.
1:bc78238:      *
1:bc78238:      * @param attempt
1:bc78238:      * 		The current connection attempt.
1:bc78238:      *
1:bc78238:      * @return the next delay amount in milliseconds.
1:bc78238:      */
1:bc78238:     public long getNextDelay(int attempt) {
1:bc78238: 
1:bc78238:         if (attempt == 0) {
1:bc78238:             return 0;
1:bc78238:         }
1:bc78238: 
1:bc78238:         long nextDelay = initialReconnectDelay;
1:bc78238: 
1:bc78238:         if (useExponentialBackOff) {
1:e05db7c:             nextDelay = Math.max(initialReconnectDelay, nextDelay * (long)((attempt - 1) * backOffMultiplier));
1:bc78238:         }
1:bc78238: 
1:bc78238:         if (maximumReconnectDelay > 0 && nextDelay > maximumReconnectDelay) {
1:bc78238:             nextDelay = maximumReconnectDelay;
1:bc78238:         }
1:bc78238: 
1:bc78238:         return nextDelay;
1:bc78238:     }
1:bc78238: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e05db7c
/////////////////////////////////////////////////////////////////////////
1:             nextDelay = Math.max(initialReconnectDelay, nextDelay * (long)((attempt - 1) * backOffMultiplier));
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * @param maxSendRetries
commit:1b49374
/////////////////////////////////////////////////////////////////////////
1:     public static final int INFINITE = -1;
1: 
1:     private int maxReconnectAttempts = INFINITE;
1:     private int maxInitialConnectAttempts = INFINITE;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.network.jms;
1: 
1: /**
1:  * A policy object that defines how a {@link JmsConnector} deals with
1:  * reconnection of the local and foreign connections.
1:  *
1:  * @org.apache.xbean.XBean element="reconnectionPolicy"
1:  */
1: public class ReconnectionPolicy {
1: 
1:     private int maxSendRetries = 10;
1:     private long sendRetryDelay = 1000L;
1: 
0:     private int maxReconnectAttempts = -1;
0:     private int maxInitialConnectAttempts = -1;
1:     private long maximumReconnectDelay = 30000;
1:     private long initialReconnectDelay = 1000L;
1:     private boolean useExponentialBackOff = false;
1:     private double backOffMultiplier = 2.0;
1: 
1:     /**
1:      * Gets the maximum number of a times a Message send should be retried before
1:      * a JMSExeception is thrown indicating that the operation failed.
1:      *
1:      * @return number of send retries that will be performed.
1:      */
1:     public int getMaxSendRetries() {
1:         return maxSendRetries;
1:     }
1: 
1:     /**
1:      * Sets the maximum number of a times a Message send should be retried before
1:      * a JMSExeception is thrown indicating that the operation failed.
1:      *
0:      * @param maxRetries
1:      * 			number of send retries that will be performed.
1:      */
1:     public void setMaxSendRetries(int maxSendRetries) {
1:         this.maxSendRetries = maxSendRetries;
1:     }
1: 
1:     /**
1:      * Get the amount of time the DestionationBridge will wait between attempts
1:      * to forward a message.
1:      *
1:      * @return time in milliseconds to wait between send attempts.
1:      */
1:     public long getSendRetryDelay() {
1:         return this.sendRetryDelay;
1:     }
1: 
1:     /**
1:      * Set the amount of time the DestionationBridge will wait between attempts
1:      * to forward a message.  The default policy limits the minimum time between
1:      * send attempt to one second.
1:      *
1:      * @param sendRetryDelay
1:      * 		Time in milliseconds to wait before attempting another send.
1:      */
1:     public void setSendRetyDelay(long sendRetryDelay) {
1:         if (sendRetryDelay < 1000L) {
1:             this.sendRetryDelay = 1000L;
1:         }
1: 
1:         this.sendRetryDelay = sendRetryDelay;
1:     }
1: 
1:     /**
1:      * Gets the number of time that {@link JmsConnector} will attempt to connect
1:      * or reconnect before giving up.  By default the policy sets this value to
1:      * a negative value meaning try forever.
1:      *
1:      * @return the number of attempts to connect before giving up.
1:      */
1:     public int getMaxReconnectAttempts() {
1:         return maxReconnectAttempts;
1:     }
1: 
1:     /**
1:      * Sets the number of time that {@link JmsConnector} will attempt to connect
1:      * or reconnect before giving up.  By default the policy sets this value to
1:      * a negative value meaning try forever, set to a positive value to retry a
1:      * fixed number of times, or zero to never try and reconnect.
1:      *
1:      * @param maxReconnectAttempts
1:      */
1:     public void setMaxReconnectAttempts(int maxReconnectAttempts) {
1:         this.maxReconnectAttempts = maxReconnectAttempts;
1:     }
1: 
1:     /**
1:      * Gets the maximum number of times that the {@link JmsConnector} will try
1:      * to connect on startup to before it marks itself as failed and does not
1:      * try any further connections.
1:      *
1:      * @returns the max number of times a connection attempt is made before failing.
1:      */
1:     public int getMaxInitialConnectAttempts() {
1:         return this.maxInitialConnectAttempts;
1:     }
1: 
1:     /**
1:      * Sets the maximum number of times that the {@link JmsConnector} will try
1:      * to connect on startup to before it marks itself as failed and does not
1:      * try any further connections.
1:      *
1:      * @param maxAttempts
1:      * 		The max number of times a connection attempt is made before failing.
1:      */
1:     public void setMaxInitialConnectAttempts(int maxAttempts) {
1:         this.maxInitialConnectAttempts = maxAttempts;
1:     }
1: 
1:     /**
1:      * Gets the maximum delay that is inserted between each attempt to connect
1:      * before another attempt is made.  The default setting for this value is
1:      * 30 seconds.
1:      *
1:      * @return the max delay between connection attempts in milliseconds.
1:      */
1:     public long getMaximumReconnectDelay() {
1:         return maximumReconnectDelay;
1:     }
1: 
1:     /**
1:      * Sets the maximum delay that is inserted between each attempt to connect
1:      * before another attempt is made.
1:      *
1:      * @param maximumReconnectDelay
1:      * 		The maximum delay between connection attempts in milliseconds.
1:      */
1:     public void setMaximumReconnectDelay(long maximumReconnectDelay) {
1:         this.maximumReconnectDelay = maximumReconnectDelay;
1:     }
1: 
1:     /**
1:      * Gets the initial delay value used before a reconnection attempt is made.  If the
1:      * use exponential back-off value is set to false then this will be the fixed time
1:      * between connection attempts.  By default this value is set to one second.
1:      *
1:      * @return time in milliseconds that will be used between connection retries.
1:      */
1:     public long getInitialReconnectDelay() {
1:         return initialReconnectDelay;
1:     }
1: 
1:     /**
1:      * Gets the initial delay value used before a reconnection attempt is made.  If the
1:      * use exponential back-off value is set to false then this will be the fixed time
1:      * between connection attempts.  By default this value is set to one second.
1: 
1:      * @param initialReconnectDelay
1:      * 		Time in milliseconds to wait before the first reconnection attempt.
1:      */
1:     public void setInitialReconnectDelay(long initialReconnectDelay) {
1:         this.initialReconnectDelay = initialReconnectDelay;
1:     }
1: 
1:     /**
1:      * Gets whether the policy uses the set back-off multiplier to grow the time between
1:      * connection attempts.
1:      *
1:      * @return true if the policy will grow the time between connection attempts.
1:      */
1:     public boolean isUseExponentialBackOff() {
1:         return useExponentialBackOff;
1:     }
1: 
1:     /**
1:      * Sets whether the policy uses the set back-off multiplier to grow the time between
1:      * connection attempts.
1:      *
1:      * @param useExponentialBackOff
1:      */
1:     public void setUseExponentialBackOff(boolean useExponentialBackOff) {
1:         this.useExponentialBackOff = useExponentialBackOff;
1:     }
1: 
1:     /**
1:      * Gets the multiplier used to grow the delay between connection attempts from the initial
1:      * time to the max set time.  By default this value is set to 2.0.
1:      *
1:      * @return the currently configured connection delay multiplier.
1:      */
1:     public double getBackOffMultiplier() {
1:         return backOffMultiplier;
1:     }
1: 
1:     /**
1:      * Gets the multiplier used to grow the delay between connection attempts from the initial
1:      * time to the max set time.  By default this value is set to 2.0.
1:      *
1:      * @param backOffMultiplier
1:      * 		The multiplier value used to grow the reconnection delay.
1:      */
1:     public void setBackOffMultiplier(double backOffMultiplier) {
1:         this.backOffMultiplier = backOffMultiplier;
1:     }
1: 
1:     /**
1:      * Returns the next computed delay value that the connection controller should use to
1:      * wait before attempting another connection for the {@link JmsConnector}.
1:      *
1:      * @param attempt
1:      * 		The current connection attempt.
1:      *
1:      * @return the next delay amount in milliseconds.
1:      */
1:     public long getNextDelay(int attempt) {
1: 
1:         if (attempt == 0) {
1:             return 0;
1:         }
1: 
1:         long nextDelay = initialReconnectDelay;
1: 
1:         if (useExponentialBackOff) {
0:             nextDelay = nextDelay * (long)(attempt * backOffMultiplier);
1:         }
1: 
1:         if (maximumReconnectDelay > 0 && nextDelay > maximumReconnectDelay) {
1:             nextDelay = maximumReconnectDelay;
1:         }
1: 
1:         return nextDelay;
1:     }
1: }
============================================================================