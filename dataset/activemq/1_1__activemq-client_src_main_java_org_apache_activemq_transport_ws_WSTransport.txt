1:31c55f7: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
1:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
1:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.ws;
1:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.nio.ByteBuffer;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.transport.Transport;
1:31c55f7: 
1:31c55f7: /**
1:31c55f7:  * Interface for a WebSocket Transport which provide hooks that a servlet can
1:31c55f7:  * use to pass along WebSocket data and events.
1:31c55f7:  */
1:31c55f7: public interface WSTransport extends Transport {
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * WS Transport output sink, used to give the WS Transport implementation
1:31c55f7:      * a way to produce output back to the WS connection without coupling it
1:31c55f7:      * to the implementation.
1:31c55f7:      */
1:31c55f7:     public interface WSTransportSink {
1:31c55f7: 
1:31c55f7:         /**
1:31c55f7:          * Called from the Transport when new outgoing String data is ready.
1:31c55f7:          *
1:31c55f7:          * @param data
1:31c55f7:          *      The newly prepared outgoing string data.
1:31c55f7:          *
1:31c55f7:          * @throws IOException if an error occurs or the socket doesn't support text data.
1:31c55f7:          */
1:31c55f7:         void onSocketOutboundText(String data) throws IOException;
1:31c55f7: 
1:31c55f7:         /**
1:31c55f7:          * Called from the Transport when new outgoing String data is ready.
1:31c55f7:          *
1:31c55f7:          * @param data
1:31c55f7:          *      The newly prepared outgoing string data.
1:31c55f7:          *
1:31c55f7:          * @throws IOException if an error occurs or the socket doesn't support text data.
1:31c55f7:          */
1:31c55f7:         void onSocketOutboundBinary(ByteBuffer data) throws IOException;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:2e2d5dd:      * @return the maximum frame size allowed for this WS Transport.
1:2e2d5dd:      */
1:2e2d5dd:     int getMaxFrameSize();
1:2e2d5dd: 
1:2e2d5dd:     /**
1:31c55f7:      * @return the WS sub-protocol that this transport is supplying.
1:31c55f7:      */
1:31c55f7:     String getSubProtocol();
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Called to provide the WS with the output data sink.
1:31c55f7:      */
1:31c55f7:     void setTransportSink(WSTransportSink outputSink);
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Called from the WebSocket framework when new incoming String data is received.
1:31c55f7:      *
1:31c55f7:      * @param data
1:31c55f7:      *      The newly received incoming data.
1:31c55f7:      *
1:31c55f7:      * @throws IOException if an error occurs or the socket doesn't support text data.
1:31c55f7:      */
1:31c55f7:     void onWebSocketText(String data) throws IOException;
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Called from the WebSocket framework when new incoming Binary data is received.
1:31c55f7:      *
1:31c55f7:      * @param data
1:31c55f7:      *      The newly received incoming data.
1:31c55f7:      *
1:31c55f7:      * @throws IOException if an error occurs or the socket doesn't support binary data.
1:31c55f7:      */
1:31c55f7:     void onWebSocketBinary(ByteBuffer data) throws IOException;
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Called from the WebSocket framework when the socket has been closed unexpectedly.
1:31c55f7:      *
1:31c55f7:      * @throws IOException if an error while processing the close.
1:31c55f7:      */
1:31c55f7:     void onWebSocketClosed() throws IOException;
1:31c55f7: 
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:      * @return the maximum frame size allowed for this WS Transport.
1:      */
1:     int getMaxFrameSize();
1: 
1:     /**
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.activemq.transport.Transport;
1: 
1: /**
1:  * Interface for a WebSocket Transport which provide hooks that a servlet can
1:  * use to pass along WebSocket data and events.
1:  */
1: public interface WSTransport extends Transport {
1: 
1:     /**
1:      * WS Transport output sink, used to give the WS Transport implementation
1:      * a way to produce output back to the WS connection without coupling it
1:      * to the implementation.
1:      */
1:     public interface WSTransportSink {
1: 
1:         /**
1:          * Called from the Transport when new outgoing String data is ready.
1:          *
1:          * @param data
1:          *      The newly prepared outgoing string data.
1:          *
1:          * @throws IOException if an error occurs or the socket doesn't support text data.
1:          */
1:         void onSocketOutboundText(String data) throws IOException;
1: 
1:         /**
1:          * Called from the Transport when new outgoing String data is ready.
1:          *
1:          * @param data
1:          *      The newly prepared outgoing string data.
1:          *
1:          * @throws IOException if an error occurs or the socket doesn't support text data.
1:          */
1:         void onSocketOutboundBinary(ByteBuffer data) throws IOException;
1:     }
1: 
1:     /**
1:      * @return the WS sub-protocol that this transport is supplying.
1:      */
1:     String getSubProtocol();
1: 
1:     /**
1:      * Called to provide the WS with the output data sink.
1:      */
1:     void setTransportSink(WSTransportSink outputSink);
1: 
1:     /**
1:      * Called from the WebSocket framework when new incoming String data is received.
1:      *
1:      * @param data
1:      *      The newly received incoming data.
1:      *
1:      * @throws IOException if an error occurs or the socket doesn't support text data.
1:      */
1:     void onWebSocketText(String data) throws IOException;
1: 
1:     /**
1:      * Called from the WebSocket framework when new incoming Binary data is received.
1:      *
1:      * @param data
1:      *      The newly received incoming data.
1:      *
1:      * @throws IOException if an error occurs or the socket doesn't support binary data.
1:      */
1:     void onWebSocketBinary(ByteBuffer data) throws IOException;
1: 
1:     /**
1:      * Called from the WebSocket framework when the socket has been closed unexpectedly.
1:      *
1:      * @throws IOException if an error while processing the close.
1:      */
1:     void onWebSocketClosed() throws IOException;
1: 
1: }
============================================================================