1:413e484: /**
1:413e484:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:413e484:  * contributor license agreements.  See the NOTICE file distributed with
1:413e484:  * this work for additional information regarding copyright ownership.
1:413e484:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:413e484:  * (the "License"); you may not use this file except in compliance with
1:413e484:  * the License.  You may obtain a copy of the License at
1:413e484:  *
1:413e484:  *      http://www.apache.org/licenses/LICENSE-2.0
1:413e484:  *
1:413e484:  * Unless required by applicable law or agreed to in writing, software
1:413e484:  * distributed under the License is distributed on an "AS IS" BASIS,
1:413e484:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:413e484:  * See the License for the specific language governing permissions and
1:413e484:  * limitations under the License.
1:413e484:  */
1:413e484: package org.apache.activemq.transport.mqtt.strategy;
3:413e484: 
1:413e484: import static org.apache.activemq.transport.mqtt.MQTTProtocolSupport.convertActiveMQToMQTT;
1:413e484: import static org.apache.activemq.transport.mqtt.MQTTProtocolSupport.convertMQTTToActiveMQ;
1:413e484: 
1:413e484: import java.io.IOException;
1:fd2805f: import java.util.ArrayList;
1:413e484: import java.util.Collections;
1:413e484: import java.util.HashSet;
1:413e484: import java.util.List;
1:413e484: import java.util.Set;
1:413e484: import java.util.StringTokenizer;
1:413e484: 
1:d547025: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:fd2805f: import org.apache.activemq.broker.region.QueueRegion;
1:fd2805f: import org.apache.activemq.broker.region.RegionBroker;
1:413e484: import org.apache.activemq.command.ActiveMQDestination;
1:413e484: import org.apache.activemq.command.ActiveMQQueue;
1:413e484: import org.apache.activemq.command.ActiveMQTopic;
1:413e484: import org.apache.activemq.command.ConsumerInfo;
1:413e484: import org.apache.activemq.command.DestinationInfo;
1:af999fe: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:413e484: import org.apache.activemq.command.Response;
1:af999fe: import org.apache.activemq.command.SubscriptionInfo;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1:af999fe: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1:413e484: import org.apache.activemq.transport.mqtt.ResponseHandler;
1:413e484: import org.fusesource.mqtt.client.QoS;
1:413e484: import org.fusesource.mqtt.codec.CONNECT;
1:413e484: import org.slf4j.Logger;
1:413e484: import org.slf4j.LoggerFactory;
1:413e484: 
1:413e484: /**
1:413e484:  * Subscription strategy that converts all MQTT subscribes that would be durable to
1:413e484:  * Virtual Topic Queue subscriptions.  Also maps all publish requests to be prefixed
1:413e484:  * with the VirtualTopic. prefix unless already present.
1:413e484:  */
1:413e484: public class MQTTVirtualTopicSubscriptionStrategy extends AbstractMQTTSubscriptionStrategy {
1:413e484: 
1:413e484:     private static final String VIRTUALTOPIC_PREFIX = "VirtualTopic.";
1:413e484:     private static final String VIRTUALTOPIC_CONSUMER_PREFIX = "Consumer.";
1:413e484: 
1:413e484:     private static final Logger LOG = LoggerFactory.getLogger(MQTTVirtualTopicSubscriptionStrategy.class);
1:413e484: 
1:413e484:     private final Set<ActiveMQQueue> restoredQueues = Collections.synchronizedSet(new HashSet<ActiveMQQueue>());
1:413e484: 
3:413e484:     @Override
1:413e484:     public void onConnect(CONNECT connect) throws MQTTProtocolException {
1:fd2805f:         List<ActiveMQQueue> queues = lookupQueues(protocol.getClientId());
1:af999fe:         List<SubscriptionInfo> subs = lookupSubscription(protocol.getClientId());
1:af999fe: 
1:af999fe:         // When clean session is true we must purge all of the client's old Queue subscriptions
1:af999fe:         // and any durable subscriptions created on the VirtualTopic instance as well.
1:413e484: 
1:413e484:         if (connect.cleanSession()) {
1:413e484:             deleteDurableQueues(queues);
1:af999fe:             deleteDurableSubs(subs);
1:413e484:         } else {
1:413e484:             restoreDurableQueue(queues);
1:af999fe:             restoreDurableSubs(subs);
5:413e484:         }
1:413e484:     }
1:af999fe: 
1:413e484:     @Override
1:413e484:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException {
1:413e484:         ActiveMQDestination destination = null;
1:af999fe:         int prefetch = ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH;
1:d547025:         ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:aa743cb:         String converted = convertMQTTToActiveMQ(topicName);
1:413e484:         if (!protocol.isCleanSession() && protocol.getClientId() != null && requestedQoS.ordinal() >= QoS.AT_LEAST_ONCE.ordinal()) {
1:aa743cb: 
1:af999fe:             if (converted.startsWith(VIRTUALTOPIC_PREFIX)) {
1:af999fe:                 destination = new ActiveMQTopic(converted);
1:af999fe:                 prefetch = ActiveMQPrefetchPolicy.DEFAULT_DURABLE_TOPIC_PREFETCH;
1:af999fe:                 consumerInfo.setSubscriptionName(requestedQoS + ":" + topicName);
1:af999fe:             } else {
1:af999fe:                 converted = VIRTUALTOPIC_CONSUMER_PREFIX +
1:aa743cb:                             convertMQTTToActiveMQ(protocol.getClientId()) + ":" + requestedQoS + "." +
1:af999fe:                             VIRTUALTOPIC_PREFIX + converted;
1:af999fe:                 destination = new ActiveMQQueue(converted);
1:af999fe:                 prefetch = ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH;
1:af999fe:             }
1:413e484:         } else {
1:413e484:             if (!converted.startsWith(VIRTUALTOPIC_PREFIX)) {
1:af999fe:                 converted = VIRTUALTOPIC_PREFIX + converted;
1:413e484:             }
1:413e484:             destination = new ActiveMQTopic(converted);
1:af999fe:             prefetch = ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH;
1:413e484:         }
1:fd2805f: 
1:413e484:         consumerInfo.setDestination(destination);
1:d547025:         if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
1:d547025:             consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:af999fe:         } else {
1:af999fe:             consumerInfo.setPrefetchSize(prefetch);
1:d547025:         }
1:413e484:         consumerInfo.setRetroactive(true);
1:413e484:         consumerInfo.setDispatchAsync(true);
1:413e484: 
1:ec049a0:         return doSubscribe(consumerInfo, topicName, requestedQoS);
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1:413e484: 
1:413e484:         ActiveMQDestination destination = mqttSubscription.getDestination();
1:413e484: 
1:af999fe:         // check whether the Queue has been recovered in restoreDurableQueue
1:af999fe:         // mark subscription available for recovery for duplicate subscription
1:af999fe:         if (destination.isQueue() && restoredQueues.remove(destination)) {
1:af999fe:             return;
1:af999fe:         }
1:af999fe: 
1:413e484:         // check whether the Topic has been recovered in restoreDurableSubs
1:413e484:         // mark subscription available for recovery for duplicate subscription
1:af999fe:         if (destination.isTopic() && restoredDurableSubs.remove(destination.getPhysicalName())) {
1:413e484:             return;
1:413e484:         }
1:413e484: 
1:413e484:         if (mqttSubscription.getDestination().isTopic()) {
1:413e484:             super.onReSubscribe(mqttSubscription);
1:413e484:         } else {
1:ec049a0:             doUnSubscribe(mqttSubscription);
1:413e484:             ConsumerInfo consumerInfo = mqttSubscription.getConsumerInfo();
1:ec049a0:             consumerInfo.setConsumerId(getNextConsumerId());
1:ec049a0:             doSubscribe(consumerInfo, mqttSubscription.getTopicName(), mqttSubscription.getQoS());
1:413e484:         }
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:ec049a0:     public void onUnSubscribe(String topicName) throws MQTTProtocolException {
1:ec049a0:         MQTTSubscription subscription = mqttSubscriptionByTopic.remove(topicName);
1:ec049a0:         if (subscription != null) {
1:ec049a0:             doUnSubscribe(subscription);
1:ec049a0:             if (subscription.getDestination().isQueue()) {
1:ec049a0:                 DestinationInfo remove = new DestinationInfo();
1:ec049a0:                 remove.setConnectionId(protocol.getConnectionId());
1:ec049a0:                 remove.setDestination(subscription.getDestination());
1:ec049a0:                 remove.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:413e484: 
1:ec049a0:                 protocol.sendToActiveMQ(remove, new ResponseHandler() {
1:ec049a0:                     @Override
1:ec049a0:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:ec049a0:                         // ignore failures..
1:ec049a0:                     }
1:ec049a0:                 });
1:af999fe:             } else if (subscription.getConsumerInfo().getSubscriptionName() != null) {
1:af999fe:                 // also remove it from restored durable subscriptions set
1:af999fe:                 restoredDurableSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
1:af999fe: 
1:af999fe:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:af999fe:                 rsi.setConnectionId(protocol.getConnectionId());
1:af999fe:                 rsi.setSubscriptionName(subscription.getConsumerInfo().getSubscriptionName());
1:af999fe:                 rsi.setClientId(protocol.getClientId());
1:af999fe:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:af999fe:                     @Override
1:af999fe:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:af999fe:                         // ignore failures..
1:af999fe:                     }
1:af999fe:                 });
1:ec049a0:             }
1:413e484:         }
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public ActiveMQDestination onSend(String topicName) {
1:6d20cba:         ActiveMQTopic topic = new ActiveMQTopic(topicName);
1:6d20cba:         if (topic.isComposite()) {
1:6d20cba:            ActiveMQDestination[] composites = topic.getCompositeDestinations();
1:6d20cba:            for (ActiveMQDestination composite : composites) {
1:6d20cba:                 composite.setPhysicalName(prefix(composite.getPhysicalName()));
1:6d20cba:            }
1:6d20cba:            ActiveMQTopic result = new ActiveMQTopic();
1:6d20cba:            result.setCompositeDestinations(composites);
1:6d20cba:            return result;
1:413e484:         } else {
1:6d20cba:           return new ActiveMQTopic(prefix(topicName));
1:6d20cba:         }
1:6d20cba:     }
1:6d20cba: 
1:6d20cba:     private String prefix(String topicName) {
1:6d20cba:         if (!topicName.startsWith(VIRTUALTOPIC_PREFIX)) {
1:6d20cba:             return VIRTUALTOPIC_PREFIX + topicName;
1:6d20cba:         } else {
1:6d20cba:             return topicName;
1:413e484:         }
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public String onSend(ActiveMQDestination destination) {
1:6885ff0:         String destinationName = destination.getPhysicalName();
1:6885ff0:         int position = destinationName.indexOf(VIRTUALTOPIC_PREFIX);
1:6885ff0:         if (position >= 0) {
1:af999fe:             destinationName = destinationName.substring(position + VIRTUALTOPIC_PREFIX.length()).substring(0);
1:413e484:         }
1:6885ff0:         return destinationName;
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public boolean isControlTopic(ActiveMQDestination destination) {
1:413e484:         String destinationName = destination.getPhysicalName();
1:413e484:         if (destinationName.startsWith("$") || destinationName.startsWith(VIRTUALTOPIC_PREFIX + "$")) {
2:413e484:             return true;
1:413e484:         }
2:413e484:         return false;
1:413e484:     }
1:413e484: 
1:413e484:     private void deleteDurableQueues(List<ActiveMQQueue> queues) {
2:413e484:         try {
1:413e484:             for (ActiveMQQueue queue : queues) {
1:af999fe:                 LOG.debug("Removing queue subscription for {} ",queue.getPhysicalName());
1:413e484:                 DestinationInfo removeAction = new DestinationInfo();
1:413e484:                 removeAction.setConnectionId(protocol.getConnectionId());
1:413e484:                 removeAction.setDestination(queue);
1:413e484:                 removeAction.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:413e484: 
1:413e484:                 protocol.sendToActiveMQ(removeAction, new ResponseHandler() {
1:413e484:                     @Override
2:413e484:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
2:413e484:                         // ignore failures..
1:413e484:                     }
3:413e484:                 });
1:413e484:             }
1:413e484:         } catch (Throwable e) {
1:4a8fec4:             LOG.warn("Could not delete the MQTT queue subscriptions.", e);
1:413e484:         }
1:413e484:     }
1:413e484: 
1:413e484:     private void restoreDurableQueue(List<ActiveMQQueue> queues) {
1:413e484:         try {
1:413e484:             for (ActiveMQQueue queue : queues) {
1:413e484:                 String name = queue.getPhysicalName().substring(VIRTUALTOPIC_CONSUMER_PREFIX.length());
1:413e484:                 StringTokenizer tokenizer = new StringTokenizer(name);
1:413e484:                 tokenizer.nextToken(":.");
1:413e484:                 String qosString = tokenizer.nextToken();
1:413e484:                 tokenizer.nextToken();
1:413e484:                 String topicName = convertActiveMQToMQTT(tokenizer.nextToken("").substring(1));
1:413e484:                 QoS qoS = QoS.valueOf(qosString);
1:af999fe:                 LOG.trace("Restoring queue subscription: {}:{}", topicName, qoS);
1:413e484: 
1:ec049a0:                 ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:413e484:                 consumerInfo.setDestination(queue);
1:d547025:                 consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH);
1:d547025:                 if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
1:d547025:                     consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:d547025:                 }
1:413e484:                 consumerInfo.setRetroactive(true);
1:413e484:                 consumerInfo.setDispatchAsync(true);
1:413e484: 
1:ec049a0:                 doSubscribe(consumerInfo, topicName, qoS);
1:413e484: 
1:413e484:                 // mark this durable subscription as restored by Broker
1:413e484:                 restoredQueues.add(queue);
1:413e484:             }
2:413e484:         } catch (IOException e) {
1:af999fe:             LOG.warn("Could not restore the MQTT queue subscriptions.", e);
1:413e484:         }
1:413e484:     }
1:413e484: 
1:fd2805f:     List<ActiveMQQueue> lookupQueues(String clientId) throws MQTTProtocolException {
1:fd2805f:         List<ActiveMQQueue> result = new ArrayList<ActiveMQQueue>();
1:fd2805f:         RegionBroker regionBroker;
1:fd2805f: 
1:fd2805f:         try {
1:fd2805f:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:fd2805f:         } catch (Exception e) {
1:fd2805f:             throw new MQTTProtocolException("Error recovering queues: " + e.getMessage(), false, e);
1:fd2805f:         }
1:fd2805f: 
1:fd2805f:         final QueueRegion queueRegion = (QueueRegion) regionBroker.getQueueRegion();
1:fd2805f:         for (ActiveMQDestination destination : queueRegion.getDestinationMap().keySet()) {
1:fd2805f:             if (destination.isQueue() && !destination.isTemporary()) {
1:4a8fec4:                 if (destination.getPhysicalName().startsWith("Consumer." + clientId + ":")) {
1:fd2805f:                     LOG.debug("Recovered client sub: {} on connect", destination.getPhysicalName());
1:fd2805f:                     result.add((ActiveMQQueue) destination);
1:fd2805f:                 }
1:fd2805f:             }
1:fd2805f:         }
1:fd2805f: 
1:fd2805f:         return result;
1:fd2805f:     }
1:413e484: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:6d20cba
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTopic topic = new ActiveMQTopic(topicName);
1:         if (topic.isComposite()) {
1:            ActiveMQDestination[] composites = topic.getCompositeDestinations();
1:            for (ActiveMQDestination composite : composites) {
1:                 composite.setPhysicalName(prefix(composite.getPhysicalName()));
1:            }
1:            ActiveMQTopic result = new ActiveMQTopic();
1:            result.setCompositeDestinations(composites);
1:            return result;
1:           return new ActiveMQTopic(prefix(topicName));
1:         }
1:     }
1: 
1:     private String prefix(String topicName) {
1:         if (!topicName.startsWith(VIRTUALTOPIC_PREFIX)) {
1:             return VIRTUALTOPIC_PREFIX + topicName;
1:         } else {
1:             return topicName;
commit:aa743cb
/////////////////////////////////////////////////////////////////////////
1:         String converted = convertMQTTToActiveMQ(topicName);
1: 
1:                             convertMQTTToActiveMQ(protocol.getClientId()) + ":" + requestedQoS + "." +
commit:4a8fec4
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Could not delete the MQTT queue subscriptions.", e);
/////////////////////////////////////////////////////////////////////////
1:                 if (destination.getPhysicalName().startsWith("Consumer." + clientId + ":")) {
commit:d547025
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
1:         ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:             consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH);
0:             consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH);
1:         if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
1:             consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:         }
/////////////////////////////////////////////////////////////////////////
0:                 consumerInfo.setPrefetchSize(ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH);
1:                 if (protocol.getActiveMQSubscriptionPrefetch() > 0) {
1:                     consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:                 }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:af999fe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.SubscriptionInfo;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
/////////////////////////////////////////////////////////////////////////
1:         List<SubscriptionInfo> subs = lookupSubscription(protocol.getClientId());
1: 
1:         // When clean session is true we must purge all of the client's old Queue subscriptions
1:         // and any durable subscriptions created on the VirtualTopic instance as well.
1:             deleteDurableSubs(subs);
1:             restoreDurableSubs(subs);
1:         int prefetch = ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH;
1: 
0:             String converted = convertMQTTToActiveMQ(topicName);
1:             if (converted.startsWith(VIRTUALTOPIC_PREFIX)) {
1:                 destination = new ActiveMQTopic(converted);
1:                 prefetch = ActiveMQPrefetchPolicy.DEFAULT_DURABLE_TOPIC_PREFETCH;
1:                 consumerInfo.setSubscriptionName(requestedQoS + ":" + topicName);
1:             } else {
1:                 converted = VIRTUALTOPIC_CONSUMER_PREFIX +
0:                             protocol.getClientId() + ":" + requestedQoS + "." +
1:                             VIRTUALTOPIC_PREFIX + converted;
1:                 destination = new ActiveMQQueue(converted);
1:                 prefetch = ActiveMQPrefetchPolicy.DEFAULT_QUEUE_PREFETCH;
1:             }
1:                 converted = VIRTUALTOPIC_PREFIX + converted;
1:             prefetch = ActiveMQPrefetchPolicy.DEFAULT_TOPIC_PREFETCH;
1:         } else {
1:             consumerInfo.setPrefetchSize(prefetch);
/////////////////////////////////////////////////////////////////////////
1:         // check whether the Queue has been recovered in restoreDurableQueue
1:         // mark subscription available for recovery for duplicate subscription
1:         if (destination.isQueue() && restoredQueues.remove(destination)) {
1:             return;
1:         }
1: 
1:         if (destination.isTopic() && restoredDurableSubs.remove(destination.getPhysicalName())) {
/////////////////////////////////////////////////////////////////////////
1:             } else if (subscription.getConsumerInfo().getSubscriptionName() != null) {
1:                 // also remove it from restored durable subscriptions set
1:                 restoredDurableSubs.remove(MQTTProtocolSupport.convertMQTTToActiveMQ(subscription.getTopicName()));
1: 
1:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:                 rsi.setConnectionId(protocol.getConnectionId());
1:                 rsi.setSubscriptionName(subscription.getConsumerInfo().getSubscriptionName());
1:                 rsi.setClientId(protocol.getClientId());
1:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:                     @Override
1:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                         // ignore failures..
1:                     }
1:                 });
/////////////////////////////////////////////////////////////////////////
1:             destinationName = destinationName.substring(position + VIRTUALTOPIC_PREFIX.length()).substring(0);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Removing queue subscription for {} ",queue.getPhysicalName());
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("Could not delete the MQTT queue subsscriptions.", e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Restoring queue subscription: {}:{}", topicName, qoS);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Could not restore the MQTT queue subscriptions.", e);
commit:fd2805f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.QueueRegion;
1: import org.apache.activemq.broker.region.RegionBroker;
/////////////////////////////////////////////////////////////////////////
1:         List<ActiveMQQueue> queues = lookupQueues(protocol.getClientId());
/////////////////////////////////////////////////////////////////////////
1: 
1:     List<ActiveMQQueue> lookupQueues(String clientId) throws MQTTProtocolException {
1:         List<ActiveMQQueue> result = new ArrayList<ActiveMQQueue>();
1:         RegionBroker regionBroker;
1: 
1:         try {
1:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:         } catch (Exception e) {
1:             throw new MQTTProtocolException("Error recovering queues: " + e.getMessage(), false, e);
1:         }
1: 
1:         final QueueRegion queueRegion = (QueueRegion) regionBroker.getQueueRegion();
1:         for (ActiveMQDestination destination : queueRegion.getDestinationMap().keySet()) {
1:             if (destination.isQueue() && !destination.isTemporary()) {
0:                 if (destination.getPhysicalName().startsWith("Consumer." + clientId)) {
1:                     LOG.debug("Recovered client sub: {} on connect", destination.getPhysicalName());
1:                     result.add((ActiveMQQueue) destination);
1:                 }
1:             }
1:         }
1: 
1:         return result;
1:     }
commit:6885ff0
/////////////////////////////////////////////////////////////////////////
1:         String destinationName = destination.getPhysicalName();
1:         int position = destinationName.indexOf(VIRTUALTOPIC_PREFIX);
1:         if (position >= 0) {
0:             destinationName = destinationName.substring(position+VIRTUALTOPIC_PREFIX.length()).substring(0);
1:         return destinationName;
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("Removing subscription for {} ",queue.getPhysicalName());
commit:ec049a0
/////////////////////////////////////////////////////////////////////////
1:         ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:         return doSubscribe(consumerInfo, topicName, requestedQoS);
/////////////////////////////////////////////////////////////////////////
1:             doUnSubscribe(mqttSubscription);
1:             consumerInfo.setConsumerId(getNextConsumerId());
1:             doSubscribe(consumerInfo, mqttSubscription.getTopicName(), mqttSubscription.getQoS());
1:     public void onUnSubscribe(String topicName) throws MQTTProtocolException {
1:         MQTTSubscription subscription = mqttSubscriptionByTopic.remove(topicName);
1:         if (subscription != null) {
1:             doUnSubscribe(subscription);
1:             if (subscription.getDestination().isQueue()) {
1:                 DestinationInfo remove = new DestinationInfo();
1:                 remove.setConnectionId(protocol.getConnectionId());
1:                 remove.setDestination(subscription.getDestination());
1:                 remove.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1:                 protocol.sendToActiveMQ(remove, new ResponseHandler() {
1:                     @Override
1:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                         // ignore failures..
1:                     }
1:                 });
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 ConsumerInfo consumerInfo = new ConsumerInfo(getNextConsumerId());
1:                 doSubscribe(consumerInfo, topicName, qoS);
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt.strategy;
1: 
1: import static org.apache.activemq.transport.mqtt.MQTTProtocolSupport.convertActiveMQToMQTT;
1: import static org.apache.activemq.transport.mqtt.MQTTProtocolSupport.convertMQTTToActiveMQ;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.StringTokenizer;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.Response;
0: import org.apache.activemq.store.PersistenceAdapterSupport;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1: import org.apache.activemq.transport.mqtt.ResponseHandler;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Subscription strategy that converts all MQTT subscribes that would be durable to
1:  * Virtual Topic Queue subscriptions.  Also maps all publish requests to be prefixed
1:  * with the VirtualTopic. prefix unless already present.
1:  */
1: public class MQTTVirtualTopicSubscriptionStrategy extends AbstractMQTTSubscriptionStrategy {
1: 
1:     private static final String VIRTUALTOPIC_PREFIX = "VirtualTopic.";
1:     private static final String VIRTUALTOPIC_CONSUMER_PREFIX = "Consumer.";
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTVirtualTopicSubscriptionStrategy.class);
1: 
1:     private final Set<ActiveMQQueue> restoredQueues = Collections.synchronizedSet(new HashSet<ActiveMQQueue>());
1: 
1:     @Override
1:     public void onConnect(CONNECT connect) throws MQTTProtocolException {
0:         List<ActiveMQQueue> queues;
1:         try {
0:             queues = PersistenceAdapterSupport.listQueues(brokerService.getPersistenceAdapter(), new PersistenceAdapterSupport.DestinationMatcher() {
1: 
1:                 @Override
0:                 public boolean matches(ActiveMQDestination destination) {
0:                     if (destination.getPhysicalName().startsWith("Consumer." + protocol.getClientId())) {
0:                         LOG.debug("Recovered client sub: {}", destination.getPhysicalName());
1:                         return true;
1:                     }
1:                     return false;
1:                 }
1:             });
1:         } catch (IOException e) {
0:             throw new MQTTProtocolException("Error restoring durable subscriptions", true, e);
1:         }
1: 
1:         if (connect.cleanSession()) {
1:             deleteDurableQueues(queues);
1:         } else {
1:             restoreDurableQueue(queues);
1:         }
1:     }
1: 
1:     @Override
1:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException {
1:         ActiveMQDestination destination = null;
1:         if (!protocol.isCleanSession() && protocol.getClientId() != null && requestedQoS.ordinal() >= QoS.AT_LEAST_ONCE.ordinal()) {
0:             String converted = VIRTUALTOPIC_CONSUMER_PREFIX + protocol.getClientId() + ":" + requestedQoS + "." +
0:                                VIRTUALTOPIC_PREFIX + convertMQTTToActiveMQ(topicName);
0:             destination = new ActiveMQQueue(converted);
1:         } else {
0:             String converted = convertMQTTToActiveMQ(topicName);
1:             if (!converted.startsWith(VIRTUALTOPIC_PREFIX)) {
0:                 converted = VIRTUALTOPIC_PREFIX + convertMQTTToActiveMQ(topicName);
1:             }
1:             destination = new ActiveMQTopic(converted);
1:         }
1: 
0:         ConsumerInfo consumerInfo = new ConsumerInfo(protocol.getNextConsumerId());
1:         consumerInfo.setDestination(destination);
0:         consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:         consumerInfo.setRetroactive(true);
1:         consumerInfo.setDispatchAsync(true);
1: 
0:         return protocol.doSubscribe(consumerInfo, topicName, requestedQoS);
1:     }
1: 
1:     @Override
1:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1: 
1:         ActiveMQDestination destination = mqttSubscription.getDestination();
1: 
1:         // check whether the Topic has been recovered in restoreDurableSubs
1:         // mark subscription available for recovery for duplicate subscription
0:         if (restoredQueues.remove(destination)) {
1:             return;
1:         }
1: 
1:         if (mqttSubscription.getDestination().isTopic()) {
1:             super.onReSubscribe(mqttSubscription);
1:         } else {
0:             protocol.doUnSubscribe(mqttSubscription);
1:             ConsumerInfo consumerInfo = mqttSubscription.getConsumerInfo();
0:             consumerInfo.setConsumerId(protocol.getNextConsumerId());
0:             protocol.doSubscribe(consumerInfo, mqttSubscription.getTopicName(), mqttSubscription.getQoS());
1:         }
1:     }
1: 
1:     @Override
0:     public void onUnSubscribe(MQTTSubscription subscription) throws MQTTProtocolException {
0:         if (subscription.getDestination().isQueue()) {
0:             DestinationInfo remove = new DestinationInfo();
0:             remove.setConnectionId(protocol.getConnectionId());
0:             remove.setDestination(subscription.getDestination());
0:             remove.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1: 
0:             protocol.sendToActiveMQ(remove, new ResponseHandler() {
1:                 @Override
1:                 public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                     // ignore failures..
1:                 }
1:             });
1:         }
1:     }
1: 
1:     @Override
1:     public ActiveMQDestination onSend(String topicName) {
0:         if (!topicName.startsWith(VIRTUALTOPIC_PREFIX)) {
0:             return new ActiveMQTopic(VIRTUALTOPIC_PREFIX + topicName);
1:         } else {
0:             return new ActiveMQTopic(topicName);
1:         }
1:     }
1: 
1:     @Override
1:     public String onSend(ActiveMQDestination destination) {
0:         String amqTopicName = destination.getPhysicalName();
0:         if (amqTopicName.startsWith(VIRTUALTOPIC_PREFIX)) {
0:             amqTopicName = amqTopicName.substring(VIRTUALTOPIC_PREFIX.length());
1:         }
0:         return amqTopicName;
1:     }
1: 
1:     @Override
1:     public boolean isControlTopic(ActiveMQDestination destination) {
1:         String destinationName = destination.getPhysicalName();
1:         if (destinationName.startsWith("$") || destinationName.startsWith(VIRTUALTOPIC_PREFIX + "$")) {
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1:     private void deleteDurableQueues(List<ActiveMQQueue> queues) {
1:         try {
1:             for (ActiveMQQueue queue : queues) {
1:                 DestinationInfo removeAction = new DestinationInfo();
1:                 removeAction.setConnectionId(protocol.getConnectionId());
1:                 removeAction.setDestination(queue);
1:                 removeAction.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
1: 
1:                 protocol.sendToActiveMQ(removeAction, new ResponseHandler() {
1:                     @Override
1:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                         // ignore failures..
1:                     }
1:                 });
1:             }
1:         } catch (Throwable e) {
0:             LOG.warn("Could not delete the MQTT durable subs.", e);
1:         }
1:     }
1: 
1:     private void restoreDurableQueue(List<ActiveMQQueue> queues) {
1:         try {
1:             for (ActiveMQQueue queue : queues) {
1:                 String name = queue.getPhysicalName().substring(VIRTUALTOPIC_CONSUMER_PREFIX.length());
1:                 StringTokenizer tokenizer = new StringTokenizer(name);
1:                 tokenizer.nextToken(":.");
1:                 String qosString = tokenizer.nextToken();
1:                 tokenizer.nextToken();
1:                 String topicName = convertActiveMQToMQTT(tokenizer.nextToken("").substring(1));
1:                 QoS qoS = QoS.valueOf(qosString);
0:                 LOG.trace("Restoring subscription: {}:{}", topicName, qoS);
1: 
0:                 ConsumerInfo consumerInfo = new ConsumerInfo(protocol.getNextConsumerId());
1:                 consumerInfo.setDestination(queue);
0:                 consumerInfo.setPrefetchSize(protocol.getActiveMQSubscriptionPrefetch());
1:                 consumerInfo.setRetroactive(true);
1:                 consumerInfo.setDispatchAsync(true);
1: 
0:                 protocol.doSubscribe(consumerInfo, topicName, qoS);
1: 
1:                 // mark this durable subscription as restored by Broker
1:                 restoredQueues.add(queue);
1:             }
1:         } catch (IOException e) {
0:             LOG.warn("Could not restore the MQTT durable subs.", e);
1:         }
1:     }
1: }
============================================================================