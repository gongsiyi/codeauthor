1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
2:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsDurableTopicSendReceiveTest extends JmsTopicSendReceiveTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsDurableTopicSendReceiveTest.class);
1:f812e34: 
1:d29ca2a:     protected Connection connection2;
1:d29ca2a:     protected Session session2;
1:d29ca2a:     protected Session consumeSession2;
1:d29ca2a:     protected MessageConsumer consumer2;
1:d29ca2a:     protected MessageProducer producer2;
1:d29ca2a:     protected Destination consumerDestination2;
1:d29ca2a:     protected Destination producerDestination2;
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Set up a durable suscriber test.
1:f812e34:      * 
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         this.durable = true;
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Test if all the messages sent are being received.
1:f812e34:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendWhileClosed() throws Exception {
1:d29ca2a:         connection2 = createConnection();
1:d29ca2a:         connection2.setClientID("test");
1:d29ca2a:         connection2.start();
1:d29ca2a:         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         producer2 = session2.createProducer(null);
1:d29ca2a:         producer2.setDeliveryMode(deliveryMode);
1:f812e34:         producerDestination2 = session2.createTopic(getProducerSubject() + "2");
1:d29ca2a:         Thread.sleep(1000);
1:d29ca2a: 
1:d29ca2a:         consumeSession2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f812e34:         consumerDestination2 = session2.createTopic(getConsumerSubject() + "2");
1:d29ca2a:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1:d29ca2a:         Thread.sleep(1000);
1:d29ca2a:         consumer2.close();
1:d29ca2a:         TextMessage message = session2.createTextMessage("test");
1:f812e34:         message.setStringProperty("test", "test");
1:d29ca2a:         message.setJMSType("test");
1:d29ca2a:         producer2.send(producerDestination2, message);
1:fc00993:         LOG.info("Creating durable consumer");
1:d29ca2a:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1:d29ca2a:         Message msg = consumer2.receive(1000);
1:d29ca2a:         assertNotNull(msg);
1:f812e34:         assertEquals(((TextMessage)msg).getText(), "test");
1:d29ca2a:         assertEquals(msg.getJMSType(), "test");
1:d29ca2a:         assertEquals(msg.getStringProperty("test"), "test");
1:d29ca2a:         connection2.stop();
1:d29ca2a:         connection2.close();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(JmsDurableTopicSendReceiveTest.class);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JmsDurableTopicSendReceiveTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Creating durable consumer");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(JmsDurableTopicSendReceiveTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         producerDestination2 = session2.createTopic(getProducerSubject() + "2");
1:         consumerDestination2 = session2.createTopic(getConsumerSubject() + "2");
1:         message.setStringProperty("test", "test");
1:         assertEquals(((TextMessage)msg).getText(), "test");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.test.JmsTopicSendReceiveTest;
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
1: public class JmsDurableTopicSendReceiveTest extends JmsTopicSendReceiveTest {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsDurableTopicSendReceiveTest.class);
1:     
1:     protected Connection connection2;
1:     protected Session session2;
1:     protected Session consumeSession2;
1:     protected MessageConsumer consumer2;
1:     protected MessageProducer producer2;
1:     protected Destination consumerDestination2;
1:     protected Destination producerDestination2;
1:     /**
1:      * Set up a durable suscriber test.
1:      *
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         this.durable = true;
1:         super.setUp();
1:     }
1: 
1:     /**
1:      * Test if all the messages sent are being received.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSendWhileClosed() throws Exception {
1:         connection2 = createConnection();
1:         connection2.setClientID("test");
1:         connection2.start();
1:         session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer2 = session2.createProducer(null);
1:         producer2.setDeliveryMode(deliveryMode);
0:         producerDestination2 = session2.createTopic(getProducerSubject()+"2");
1:         Thread.sleep(1000);
1: 
1:         consumeSession2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         consumerDestination2 = session2.createTopic(getConsumerSubject()+"2");
1:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1:         Thread.sleep(1000);
1:         consumer2.close();
1:         TextMessage message = session2.createTextMessage("test");
0:         message.setStringProperty("test","test");
1:         message.setJMSType("test");
1:         producer2.send(producerDestination2, message);
0:         log.info("Creating durable consumer");
1:         consumer2 = consumeSession2.createDurableSubscriber((Topic)consumerDestination2, getName());
1:         Message msg = consumer2.receive(1000);
1:         assertNotNull(msg);
0:         assertEquals(((TextMessage) msg).getText(), "test");
1:         assertEquals(msg.getJMSType(), "test");
1:         assertEquals(msg.getStringProperty("test"), "test");
1:         connection2.stop();
1:         connection2.close();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsDurableTopicSendReceiveTest.class);
============================================================================