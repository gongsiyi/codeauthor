1:4686ec5: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:4686ec5:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4686ec5:  *
1:4686ec5:  * Unless required by applicable law or agreed to in writing, software
1:4686ec5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4686ec5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4686ec5:  * See the License for the specific language governing permissions and
1:4686ec5:  * limitations under the License.
1:4686ec5:  */
1:4686ec5: package org.apache.activemq.security;
9:4686ec5: 
1:74a7a8b: import java.util.Set;
1:74a7a8b: 
1:9f59397: import org.apache.activemq.command.ActiveMQDestination;
1:4686ec5: import org.apache.activemq.filter.DestinationMap;
1:9f59397: 
1:4686ec5: /**
1:9f59397:  * An AuthorizationMap which is configured with individual DestinationMaps for
1:9f59397:  * each operation.
1:4686ec5:  * 
1:9f59397:  * @org.apache.xbean.XBean
1:0bbc0ac:  * 
1:9f59397:  * 
1:4686ec5:  */
1:9f59397: public class SimpleAuthorizationMap implements AuthorizationMap {
1:9f59397: 
1:4686ec5:     private DestinationMap writeACLs;
1:4686ec5:     private DestinationMap readACLs;
1:4686ec5:     private DestinationMap adminACLs;
1:e78e72f: 
1:e78e72f:     private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry;
1:f812e34: 
1:9f59397:     public SimpleAuthorizationMap() {
1:e78e72f:     }
1:e78e72f: 
1:9f59397:     public SimpleAuthorizationMap(DestinationMap writeACLs, DestinationMap readACLs, DestinationMap adminACLs) {
1:9f59397:         this.writeACLs = writeACLs;
1:9f59397:         this.readACLs = readACLs;
1:9f59397:         this.adminACLs = adminACLs;
1:e78e72f:     }
1:e78e72f: 
1:e78e72f:     /*
1:f812e34:      * Need to think how to retrieve the ACLs for temporary destinations since
1:f812e34:      * they are not map to a specific destination. For now we'll just retrieve
1:f812e34:      * it from a TempDestinationAuthorizationEntry same way as the
1:f812e34:      * DefaultAuthorizationMap. The ACLs retrieved here will be map to all temp
1:f812e34:      * destinations
1:e78e72f:      */
1:f812e34: 
1:f812e34:     public void setTempDestinationAuthorizationEntry(
1:f812e34:                                                      TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:e78e72f:         this.tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry;
1:f812e34:     }
1:f812e34: 
1:e78e72f:     public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() {
1:e78e72f:         return this.tempDestinationAuthorizationEntry;
1:f812e34:     }
1:e78e72f: 
1:933eb2f:     public Set<Object> getTempDestinationAdminACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:f812e34:             return tempDestinationAuthorizationEntry.getAdminACLs();
1:fc00993:         } else {
1:f812e34:             return null;
1:fc00993:         }
1:e78e72f:     }
1:f812e34: 
1:933eb2f:     public Set<Object> getTempDestinationReadACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:f812e34:             return tempDestinationAuthorizationEntry.getReadACLs();
1:fc00993:         } else {
1:f812e34:             return null;
1:fc00993:         }
1:e78e72f:     }
1:f812e34: 
1:933eb2f:     public Set<Object> getTempDestinationWriteACLs() {
1:fc00993:         if (tempDestinationAuthorizationEntry != null) {
1:f812e34:             return tempDestinationAuthorizationEntry.getWriteACLs();
1:fc00993:         } else {
1:f812e34:             return null;
1:fc00993:         }
1:f812e34:     }
1:f812e34: 
1:933eb2f:     @SuppressWarnings("unchecked")
1:933eb2f:     public Set<Object> getAdminACLs(ActiveMQDestination destination) {
1:9f59397:         return adminACLs.get(destination);
1:e78e72f:     }
1:e78e72f: 
1:933eb2f:     @SuppressWarnings("unchecked")
1:933eb2f:     public Set<Object> getReadACLs(ActiveMQDestination destination) {
1:9f59397:         return readACLs.get(destination);
1:9f59397:     }
1:e78e72f: 
1:933eb2f:     @SuppressWarnings("unchecked")
1:933eb2f:     public Set<Object> getWriteACLs(ActiveMQDestination destination) {
1:9f59397:         return writeACLs.get(destination);
1:9f59397:     }
1:e78e72f: 
1:4686ec5:     public DestinationMap getAdminACLs() {
1:4686ec5:         return adminACLs;
1:9f59397:     }
1:e78e72f: 
1:4686ec5:     public void setAdminACLs(DestinationMap adminACLs) {
1:4686ec5:         this.adminACLs = adminACLs;
1:9f59397:     }
1:9f59397: 
1:4686ec5:     public DestinationMap getReadACLs() {
1:4686ec5:         return readACLs;
4:4686ec5:     }
1:9f59397: 
1:4686ec5:     public void setReadACLs(DestinationMap readACLs) {
1:4686ec5:         this.readACLs = readACLs;
1:4686ec5:     }
1:9f59397: 
1:4686ec5:     public DestinationMap getWriteACLs() {
1:4686ec5:         return writeACLs;
1:4686ec5:     }
1:4686ec5: 
1:4686ec5:     public void setWriteACLs(DestinationMap writeACLs) {
1:4686ec5:         this.writeACLs = writeACLs;
1:4686ec5:     }
1:4686ec5: 
1:4686ec5: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationAdminACLs() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationReadACLs() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<Object> getTempDestinationWriteACLs() {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     public Set<Object> getAdminACLs(ActiveMQDestination destination) {
1:     @SuppressWarnings("unchecked")
1:     public Set<Object> getReadACLs(ActiveMQDestination destination) {
1:     @SuppressWarnings("unchecked")
1:     public Set<Object> getWriteACLs(ActiveMQDestination destination) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
1:         if (tempDestinationAuthorizationEntry != null) {
1:         } else {
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Need to think how to retrieve the ACLs for temporary destinations since
1:      * they are not map to a specific destination. For now we'll just retrieve
1:      * it from a TempDestinationAuthorizationEntry same way as the
1:      * DefaultAuthorizationMap. The ACLs retrieved here will be map to all temp
1:      * destinations
1: 
1:     public void setTempDestinationAuthorizationEntry(
1:                                                      TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:     }
1: 
1:     }
0:         if (tempDestinationAuthorizationEntry != null)
1:             return tempDestinationAuthorizationEntry.getAdminACLs();
1:             return null;
1: 
0:         if (tempDestinationAuthorizationEntry != null)
1:             return tempDestinationAuthorizationEntry.getReadACLs();
0:         else
1:             return null;
1: 
0:         if (tempDestinationAuthorizationEntry != null)
1:             return tempDestinationAuthorizationEntry.getWriteACLs();
0:         else
1:             return null;
1:     }
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:e78e72f
/////////////////////////////////////////////////////////////////////////
1:     private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry;
1:     
/////////////////////////////////////////////////////////////////////////
1:     /*
0:      * Need to think how to retrieve the ACLs for temporary destinations since they are not map 
0:      * to a specific destination. For now we'll just retrieve it from a TempDestinationAuthorizationEntry 
0:      * same way as the DefaultAuthorizationMap. The ACLs retrieved here will be map to all temp destinations
1:      */
1:     
0:     public void setTempDestinationAuthorizationEntry(TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) {
1:         this.tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry;
1:     }    
1:     
1:     public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() {
1:         return this.tempDestinationAuthorizationEntry;
1:     }    
1: 
1:     
0:     public Set getTempDestinationAdminACLs() {
0:         if(tempDestinationAuthorizationEntry != null)    
0:         	return tempDestinationAuthorizationEntry.getAdminACLs();
0:         else
0:         	return null;
1:     }
1:     
0:     public Set getTempDestinationReadACLs() {
0:     	if(tempDestinationAuthorizationEntry != null)  
0:            	return tempDestinationAuthorizationEntry.getReadACLs();
0:     	else
0:     		return null;
1:     }
1:     
0:     public Set getTempDestinationWriteACLs() {
0:     	if(tempDestinationAuthorizationEntry != null)
0:            	return tempDestinationAuthorizationEntry.getWriteACLs();
0:     	else
0:     		return null;
1:     }       
1:         
author:James Strachan
-------------------------------------------------------------------------------
commit:9f59397
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
0: import java.util.Set;
1: 
1:  * An AuthorizationMap which is configured with individual DestinationMaps for
1:  * each operation.
1:  * @org.apache.xbean.XBean
1:  * 
1: public class SimpleAuthorizationMap implements AuthorizationMap {
1:     public SimpleAuthorizationMap() {
1:     }
1: 
1:     public SimpleAuthorizationMap(DestinationMap writeACLs, DestinationMap readACLs, DestinationMap adminACLs) {
1:         this.writeACLs = writeACLs;
1:         this.readACLs = readACLs;
1:         this.adminACLs = adminACLs;
1:     }
1: 
0:     public Set getAdminACLs(ActiveMQDestination destination) {
1:         return adminACLs.get(destination);
1:     }
1: 
0:     public Set getReadACLs(ActiveMQDestination destination) {
1:         return readACLs.get(destination);
1:     }
1: 
0:     public Set getWriteACLs(ActiveMQDestination destination) {
1:         return writeACLs.get(destination);
commit:4686ec5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.filter.DestinationMap;
1: 
1: /**
0:  * A simple authorization plugin
1:  * 
0:  * @org.apache.xbean.XBean element="simpleAuthorizationPlugin" description="Provides a simple authorization
0:  * plugin where each ACL is a destination map of destinations to role names"
1:  *
0:  * @version $Revision$
1:  */
0: public class SimpleAuthorizationPlugin implements BrokerPlugin {
1: 
1:     private DestinationMap writeACLs;
1:     private DestinationMap readACLs;
1:     private DestinationMap adminACLs;
1: 
0:     public Broker installPlugin(Broker broker) {
0:         return new SimpleAuthorizationBroker(broker, writeACLs, readACLs, adminACLs);
1:     }
1: 
1:     public DestinationMap getAdminACLs() {
1:         return adminACLs;
1:     }
1: 
1:     public void setAdminACLs(DestinationMap adminACLs) {
1:         this.adminACLs = adminACLs;
1:     }
1: 
1:     public DestinationMap getReadACLs() {
1:         return readACLs;
1:     }
1: 
1:     public void setReadACLs(DestinationMap readACLs) {
1:         this.readACLs = readACLs;
1:     }
1: 
1:     public DestinationMap getWriteACLs() {
1:         return writeACLs;
1:     }
1: 
1:     public void setWriteACLs(DestinationMap writeACLs) {
1:         this.writeACLs = writeACLs;
1:     }
1: 
1: }
============================================================================