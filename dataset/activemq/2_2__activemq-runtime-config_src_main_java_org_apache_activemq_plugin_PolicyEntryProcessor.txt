1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
3:bbc039f: 
1:bbc039f: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:bbc039f: import org.apache.activemq.broker.region.policy.PolicyMap;
1:9e7fae0: import org.apache.activemq.plugin.util.PolicyEntryUtil;
1:bbc039f: 
1:bbc039f: public class PolicyEntryProcessor extends DefaultConfigurationProcessor {
1:bbc039f: 
1:9e7fae0:     public PolicyEntryProcessor(RuntimeConfigurationBroker plugin, Class<?> configurationClass) {
1:bbc039f:         super(plugin, configurationClass);
4:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void addNew(Object o) {
1:bbc039f:         PolicyEntry addition = fromDto(o, new PolicyEntry());
2:bbc039f:         PolicyMap existingMap = plugin.getBrokerService().getDestinationPolicy();
1:bbc039f:         existingMap.put(addition.getDestination(), addition);
1:bbc039f:         applyRetrospectively(addition);
1:bbc039f:         plugin.info("added policy for: " + addition.getDestination());
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void modify(Object existing, Object candidate) {
1:bbc039f:         PolicyEntry updatedEntry = fromDto(candidate, new PolicyEntry());
1:bbc039f: 
1:9e7fae0:         //Look up an existing entry that matches the candidate
1:9e7fae0:         //First just look up by the destination type to see if anything matches
1:9e7fae0:         PolicyEntry existingEntry = PolicyEntryUtil.findEntryByDestination(plugin, updatedEntry);
1:9e7fae0:         if (existingEntry != null) {
1:9e7fae0:             //if found, update the policy and apply the updates to existing destinations
1:9e7fae0:             updatedEntry = fromDto(candidate, existingEntry);
1:bbc039f:             applyRetrospectively(updatedEntry);
1:bbc039f:             plugin.info("updated policy for: " + updatedEntry.getDestination());
1:bbc039f:         } else {
1:9e7fae0:             plugin.info("cannot find policy entry candidate to update: " + updatedEntry + ", destination:" + updatedEntry.getDestination());
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected void applyRetrospectively(PolicyEntry updatedEntry) {
1:9e7fae0:         PolicyEntryUtil.applyRetrospectively(plugin, updatedEntry);
1:bbc039f:     }
1:bbc039f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9e7fae0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.plugin.util.PolicyEntryUtil;
1:     public PolicyEntryProcessor(RuntimeConfigurationBroker plugin, Class<?> configurationClass) {
/////////////////////////////////////////////////////////////////////////
1:         //Look up an existing entry that matches the candidate
1:         //First just look up by the destination type to see if anything matches
1:         PolicyEntry existingEntry = PolicyEntryUtil.findEntryByDestination(plugin, updatedEntry);
1:         if (existingEntry != null) {
1:             //if found, update the policy and apply the updates to existing destinations
1:             updatedEntry = fromDto(candidate, existingEntry);
1:             plugin.info("cannot find policy entry candidate to update: " + updatedEntry + ", destination:" + updatedEntry.getDestination());
1:         PolicyEntryUtil.applyRetrospectively(plugin, updatedEntry);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
0: import org.apache.activemq.broker.region.*;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: 
0: import java.util.Set;
1: 
1: public class PolicyEntryProcessor extends DefaultConfigurationProcessor {
1: 
0:     public PolicyEntryProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         super(plugin, configurationClass);
1:     }
1: 
1:     @Override
1:     public void addNew(Object o) {
1:         PolicyEntry addition = fromDto(o, new PolicyEntry());
1:         PolicyMap existingMap = plugin.getBrokerService().getDestinationPolicy();
1:         existingMap.put(addition.getDestination(), addition);
1:         applyRetrospectively(addition);
1:         plugin.info("added policy for: " + addition.getDestination());
1:     }
1: 
1:     @Override
1:     public void modify(Object existing, Object candidate) {
1:         PolicyMap existingMap = plugin.getBrokerService().getDestinationPolicy();
1: 
1:         PolicyEntry updatedEntry = fromDto(candidate, new PolicyEntry());
1: 
0:         Set existingEntry = existingMap.get(updatedEntry.getDestination());
0:         if (existingEntry.size() == 1) {
0:             updatedEntry = fromDto(candidate, (PolicyEntry) existingEntry.iterator().next());
1:             applyRetrospectively(updatedEntry);
1:             plugin.info("updated policy for: " + updatedEntry.getDestination());
1:         } else {
0:             plugin.info("cannot modify policy matching multiple destinations: " + existingEntry + ", destination:" + updatedEntry.getDestination());
1:         }
1:     }
1: 
1:     protected void applyRetrospectively(PolicyEntry updatedEntry) {
0:         RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService().getRegionBroker();
0:         for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
0:             Destination target = destination;
0:             if (destination instanceof DestinationFilter) {
0:                 target = ((DestinationFilter)destination).getNext();
1:             }
0:             if (target.getActiveMQDestination().isQueue()) {
0:                 updatedEntry.update((Queue) target);
0:             } else if (target.getActiveMQDestination().isTopic()) {
0:                 updatedEntry.update((Topic) target);
1:             }
0:             plugin.debug("applied update to:" + target);
1:         }
1:     }
1: }
============================================================================