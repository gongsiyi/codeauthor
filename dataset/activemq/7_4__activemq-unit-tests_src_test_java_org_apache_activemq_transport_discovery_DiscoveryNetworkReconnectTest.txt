1:39e63c0: /**
1:39e63c0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39e63c0:  * contributor license agreements.  See the NOTICE file distributed with
1:39e63c0:  * this work for additional information regarding copyright ownership.
1:39e63c0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39e63c0:  * (the "License"); you may not use this file except in compliance with
1:39e63c0:  * the License.  You may obtain a copy of the License at
1:39e63c0:  *
1:39e63c0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39e63c0:  *
1:39e63c0:  * Unless required by applicable law or agreed to in writing, software
1:39e63c0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39e63c0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39e63c0:  * See the License for the specific language governing permissions and
1:39e63c0:  * limitations under the License.
1:39e63c0:  */
1:39e63c0: package org.apache.activemq.transport.discovery;
1:5d42b72: 
1:b0e3570: import static org.junit.Assert.assertTrue;
1:b0e3570: 
1:39e63c0: import java.net.URI;
1:b0e3570: import java.util.concurrent.Semaphore;
1:b0e3570: import java.util.concurrent.TimeUnit;
1:b0e3570: 
1:b0e3570: import javax.management.ObjectInstance;
1:39e63c0: import javax.management.ObjectName;
1:b0e3570: 
1:39e63c0: import org.apache.activemq.broker.BrokerService;
1:39e63c0: import org.apache.activemq.broker.jmx.ManagementContext;
1:39e63c0: import org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgentFactory;
1:39e63c0: import org.apache.activemq.util.SocketProxy;
1:39e63c0: import org.apache.activemq.util.Wait;
1:26d147a: import org.hamcrest.BaseMatcher;
1:26d147a: import org.hamcrest.Description;
1:39e63c0: import org.jmock.Expectations;
1:39e63c0: import org.jmock.Mockery;
1:b0e3570: import org.jmock.api.Invocation;
1:39e63c0: import org.jmock.integration.junit4.JMock;
1:39e63c0: import org.jmock.integration.junit4.JUnit4Mockery;
1:b0e3570: import org.jmock.lib.action.CustomAction;
1:39e63c0: import org.jmock.lib.legacy.ClassImposteriser;
1:5d42b72: import org.junit.After;
1:39e63c0: import org.junit.Before;
1:39e63c0: import org.junit.Test;
1:39e63c0: import org.junit.runner.RunWith;
1:5a8ca0b: import org.slf4j.Logger;
1:5a8ca0b: import org.slf4j.LoggerFactory;
1:b0e3570: 
13:5d42b72: 
1:39e63c0: @RunWith(JMock.class)
1:39e63c0: public class DiscoveryNetworkReconnectTest {
1:5d42b72: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryNetworkReconnectTest.class);
1:58e9c66:     final int maxReconnects = 2;
1:39e63c0:     final String groupName = "GroupID-" + "DiscoveryNetworkReconnectTest";
1:5d42b72:     final String discoveryAddress = "multicast://default?group=" + groupName + "&initialReconnectDelay=1000";
1:b0e3570:     final Semaphore mbeanRegistered = new Semaphore(0);
1:b0e3570:     final Semaphore mbeanUnregistered = new Semaphore(0);
1:26d147a:     BrokerService brokerA, brokerB;
1:26d147a:     Mockery context;
1:26d147a:     ManagementContext managementContext;
1:26d147a:     DiscoveryAgent agent;
1:5d42b72:     SocketProxy proxy;
1:5a8ca0b: 
1:26d147a:     // ignore the hostname resolution component as this is machine dependent
1:26d147a:     class NetworkBridgeObjectNameMatcher<T> extends BaseMatcher<T> {
1:26d147a:         T name;
1:26d147a:         NetworkBridgeObjectNameMatcher(T o) {
1:26d147a:             name = o;
1:26d147a:         }
1:5a8ca0b: 
1:5a8ca0b:         @Override
1:26d147a:         public boolean matches(Object arg0) {
1:26d147a:             ObjectName other = (ObjectName) arg0;
1:26d147a:             ObjectName mine = (ObjectName) name;
1:58e9c66:             LOG.info("Match: " + mine + " vs: " + other);
1:5a8ca0b: 
1:e3626e1:             if (!"networkConnectors".equals(other.getKeyProperty("connector"))) {
1:5a8ca0b:                 return false;
1:5a8ca0b:             }
1:e3626e1:             return other.getKeyProperty("connector").equals(mine.getKeyProperty("connector")) &&
1:e3626e1:                    other.getKeyProperty("networkBridge") != null && mine.getKeyProperty("networkBridge") != null;
1:26d147a:         }
1:5a8ca0b: 
1:5a8ca0b:         @Override
1:26d147a:         public void describeTo(Description arg0) {
1:26d147a:             arg0.appendText(this.getClass().getName());
1:5a8ca0b:         }
1:26d147a:     }
1:5a8ca0b: 
1:39e63c0:     @Before
1:39e63c0:     public void setUp() throws Exception {
1:39e63c0:         context = new JUnit4Mockery() {{
1:39e63c0:             setImposteriser(ClassImposteriser.INSTANCE);
1:39e63c0:         }};
1:39e63c0:         brokerA = new BrokerService();
1:39e63c0:         brokerA.setBrokerName("BrokerA");
1:39e63c0:         configure(brokerA);
1:39e63c0:         brokerA.addConnector("tcp://localhost:0");
1:39e63c0:         brokerA.start();
1:2ac5e7a:         brokerA.waitUntilStarted();
1:5a8ca0b: 
1:5d42b72:         proxy = new SocketProxy(brokerA.getTransportConnectors().get(0).getConnectUri());
1:39e63c0:         managementContext = context.mock(ManagementContext.class);
1:5a8ca0b: 
1:39e63c0:         context.checking(new Expectations(){{
1:5a8ca0b:             allowing(managementContext).getJmxDomainName(); will (returnValue("Test"));
1:5a8ca0b:             allowing(managementContext).setBrokerName("BrokerNC");
1:5a8ca0b:             allowing(managementContext).start();
1:5a8ca0b:             allowing(managementContext).isCreateConnector();
1:5a8ca0b:             allowing(managementContext).stop();
1:5a8ca0b:             allowing(managementContext).isConnectorStarted();
1:5a8ca0b: 
1:39e63c0:             // expected MBeans
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Health"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:0709c2c:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Log4JConfiguration"))));
1:0709c2c:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.Connection"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.NetworkBridge"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.MasterBroker"))));
1:5a8ca0b:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=jobScheduler,jobSchedulerName=JMS"))));
1:2809bef:             allowing(managementContext).getObjectInstance(with(equal(
1:2809bef:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1:2809bef: 
1:5a8ca0b: 
1:26d147a:             atLeast(maxReconnects - 1).of (managementContext).registerMBean(with(any(Object.class)), with(new NetworkBridgeObjectNameMatcher<ObjectName>(
1:e3626e1:                         new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC,networkBridge=localhost/127.0.0.1_"
1:b0e3570:                             + proxy.getUrl().getPort())))); will(new CustomAction("signal register network mbean") {
1:5a8ca0b:                                 @Override
1:b0e3570:                                 public Object invoke(Invocation invocation) throws Throwable {
1:b0e3570:                                     LOG.info("Mbean Registered: " + invocation.getParameter(0));
1:b0e3570:                                     mbeanRegistered.release();
1:e3626e1:                                     return new ObjectInstance((ObjectName)invocation.getParameter(1), "discription");
1:26d147a:                                 }
1:b0e3570:                             });
1:26d147a:             atLeast(maxReconnects - 1).of (managementContext).unregisterMBean(with(new NetworkBridgeObjectNameMatcher<ObjectName>(
1:e3626e1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC,networkBridge=localhost/127.0.0.1_"
1:b0e3570:                             + proxy.getUrl().getPort())))); will(new CustomAction("signal unregister network mbean") {
1:5a8ca0b:                                 @Override
1:b0e3570:                                 public Object invoke(Invocation invocation) throws Throwable {
1:b0e3570:                                     LOG.info("Mbean Unregistered: " + invocation.getParameter(0));
1:b0e3570:                                     mbeanUnregistered.release();
1:b0e3570:                                     return null;
1:b0e3570:                                 }
1:b0e3570:                             });
1:5a8ca0b: 
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC"))));
1:0709c2c:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Health"))));
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:0709c2c:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Log4JConfiguration"))));
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.Connection"))));
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.NetworkBridge"))));
1:5a8ca0b:             allowing(managementContext).unregisterMBean(with(equal(
1:5a8ca0b:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.MasterBroker"))));
1:39e63c0:         }});
1:5a8ca0b: 
1:39e63c0:         brokerB = new BrokerService();
1:39e63c0:         brokerB.setManagementContext(managementContext);
1:39e63c0:         brokerB.setBrokerName("BrokerNC");
1:5d42b72:         configure(brokerB);
1:b0e3570:     }
1:26d147a: 
1:5d42b72:     @After
1:5d42b72:     public void tearDown() throws Exception {
1:5d42b72:         brokerA.stop();
1:2ac5e7a:         brokerA.waitUntilStopped();
1:39e63c0:         brokerB.stop();
1:2ac5e7a:         brokerB.waitUntilStopped();
1:b0e3570:         proxy.close();
1:5d42b72:     }
1:5a8ca0b: 
1:5d42b72:     private void configure(BrokerService broker) {
1:5d42b72:         broker.setPersistent(false);
1:5a8ca0b:         broker.setUseJmx(true);
1:5d42b72:     }
1:5a8ca0b: 
1:5d42b72:     @Test
1:5a8ca0b:     public void testMulicastReconnect() throws Exception {
1:5a8ca0b: 
1:e3626e1:         brokerB.addNetworkConnector(discoveryAddress + "&discovered.trace=true&discovered.wireFormat.maxInactivityDuration=1000&discovered.wireFormat.maxInactivityDurationInitalDelay=1000");
1:e3626e1:         brokerB.start();
1:e3626e1:         brokerB.waitUntilStarted();
1:e3626e1: 
1:5d42b72:         // control multicast advertise agent to inject proxy
1:5d42b72:         agent = MulticastDiscoveryAgentFactory.createDiscoveryAgent(new URI(discoveryAddress));
1:5d42b72:         agent.registerService(proxy.getUrl().toString());
1:5d42b72:         agent.start();
1:814c49f: 
1:5d42b72:         doReconnect();
1:5d42b72:     }
1:26d147a: 
1:5d42b72:     @Test
1:5d42b72:     public void testSimpleReconnect() throws Exception {
1:5a8ca0b:         brokerB.addNetworkConnector("simple://(" + proxy.getUrl()
1:e3626e1:                 + ")?useExponentialBackOff=false&initialReconnectDelay=500&discovered.wireFormat.maxInactivityDuration=1000&discovered.wireFormat.maxInactivityDurationInitalDelay=1000");
1:5a8ca0b:         brokerB.start();
1:2ac5e7a:         brokerB.waitUntilStarted();
1:5d42b72:         doReconnect();
1:5d42b72:     }
1:26d147a: 
1:5d42b72:     private void doReconnect() throws Exception {
1:5a8ca0b: 
1:5d42b72:         for (int i=0; i<maxReconnects; i++) {
1:5d42b72:             // Wait for connection
1:5d42b72:             assertTrue("we got a network connection in a timely manner", Wait.waitFor(new Wait.Condition() {
1:5a8ca0b:                 @Override
1:5d42b72:                 public boolean isSatisified() throws Exception {
1:b0e3570:                    return proxy.connections.size() >= 1;
1:5d42b72:                 }
1:5d42b72:             }));
1:5a8ca0b: 
1:b0e3570:             // wait for network connector
1:abf7adc:             assertTrue("network connector mbean registered within 1 minute", mbeanRegistered.tryAcquire(60, TimeUnit.SECONDS));
1:5a8ca0b: 
1:b0e3570:             // force an inactivity timeout via the proxy
1:5d42b72:             proxy.pause();
1:5a8ca0b: 
1:b0e3570:             // wait for the inactivity timeout and network shutdown
1:abf7adc:             assertTrue("network connector mbean unregistered within 1 minute", mbeanUnregistered.tryAcquire(60, TimeUnit.SECONDS));
1:5a8ca0b: 
1:814c49f:             // whack all connections
1:814c49f:             proxy.close();
1:5a8ca0b: 
1:5d42b72:             // let a reconnect succeed
1:5a8ca0b:             proxy.reopen();
1:5d42b72:         }
1:5d42b72:     }
6:39e63c0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2809bef
/////////////////////////////////////////////////////////////////////////
1:             allowing(managementContext).getObjectInstance(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1: 
commit:0709c2c
/////////////////////////////////////////////////////////////////////////
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Log4JConfiguration"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
/////////////////////////////////////////////////////////////////////////
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Log4JConfiguration"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5a8ca0b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         @Override
1: 
0:             if (other.getKeyProperty("service") == null) {
1:                 return false;
1:             }
1: 
0:             return other.getKeyProperty("service").equals(mine.getKeyProperty("service")) &&
0:                 other.getKeyProperty("networkConnectorName").equals(mine.getKeyProperty("networkConnectorName"));
1:         @Override
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             allowing(managementContext).getJmxDomainName(); will (returnValue("Test"));
1:             allowing(managementContext).setBrokerName("BrokerNC");
1:             allowing(managementContext).start();
1:             allowing(managementContext).isCreateConnector();
1:             allowing(managementContext).stop();
1:             allowing(managementContext).isConnectorStarted();
1: 
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Health"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.Connection"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.NetworkBridge"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.MasterBroker"))));
1:             allowing(managementContext).registerMBean(with(any(Object.class)), with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=jobScheduler,jobSchedulerName=JMS"))));
1: 
0:                         new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=NetworkBridge,networkConnectorName=NC,networkBridgeName=localhost/127.0.0.1_"
1:                                 @Override
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=NetworkBridge,networkConnectorName=NC,networkBridgeName=localhost/127.0.0.1_"
1:                                 @Override
1: 
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,service=Health"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.Connection"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.NetworkBridge"))));
1:             allowing(managementContext).unregisterMBean(with(equal(
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,destinationType=Topic,destinationName=ActiveMQ.Advisory.MasterBroker"))));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         broker.setUseJmx(true);
1: 
1:     public void testMulicastReconnect() throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1:         brokerB.addNetworkConnector("simple://(" + proxy.getUrl()
1:         brokerB.start();
1: 
1:                 @Override
1: 
1: 
1: 
1: 
1: 
1:             proxy.reopen();
author:Gary Tully
-------------------------------------------------------------------------------
commit:e3626e1
/////////////////////////////////////////////////////////////////////////
1:             if (!"networkConnectors".equals(other.getKeyProperty("connector"))) {
1:             return other.getKeyProperty("connector").equals(mine.getKeyProperty("connector")) &&
1:                    other.getKeyProperty("networkBridge") != null && mine.getKeyProperty("networkBridge") != null;
/////////////////////////////////////////////////////////////////////////
1:                         new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC,networkBridge=localhost/127.0.0.1_"
1:                                     return new ObjectInstance((ObjectName)invocation.getParameter(1), "discription");
1:                     new ObjectName("Test:type=Broker,brokerName=BrokerNC,connector=networkConnectors,networkConnectorName=NC,networkBridge=localhost/127.0.0.1_"
/////////////////////////////////////////////////////////////////////////
1:         brokerB.addNetworkConnector(discoveryAddress + "&discovered.trace=true&discovered.wireFormat.maxInactivityDuration=1000&discovered.wireFormat.maxInactivityDurationInitalDelay=1000");
1:         brokerB.start();
1:         brokerB.waitUntilStarted();
1: 
1:                 + ")?useExponentialBackOff=false&initialReconnectDelay=500&discovered.wireFormat.maxInactivityDuration=1000&discovered.wireFormat.maxInactivityDurationInitalDelay=1000");
commit:abf7adc
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Health"))));
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Health"))));
0:             allowing (managementContext).unregisterMBean(with(equal(
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("network connector mbean registered within 1 minute", mbeanRegistered.tryAcquire(60, TimeUnit.SECONDS));
1:             assertTrue("network connector mbean unregistered within 1 minute", mbeanUnregistered.tryAcquire(60, TimeUnit.SECONDS));
commit:58e9c66
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.AnnotatedMBean;
/////////////////////////////////////////////////////////////////////////
1:     final int maxReconnects = 2;
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Match: " + mine + " vs: " + other);
/////////////////////////////////////////////////////////////////////////
0:                                     return new ObjectInstance((ObjectName)invocation.getParameter(1), "dscription");
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkConnector,NetworkConnectorName=NC"))));
/////////////////////////////////////////////////////////////////////////
0:                         new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkBridge,NetworkConnectorName=NC,Name=localhost/127.0.0.1_" 
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkBridge,NetworkConnectorName=NC,Name=localhost/127.0.0.1_" 
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkConnector,NetworkConnectorName=NC"))));
commit:2803b18
/////////////////////////////////////////////////////////////////////////
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Topic,Destination=ActiveMQ.Advisory.NetworkBridge"))));
/////////////////////////////////////////////////////////////////////////
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Topic,Destination=ActiveMQ.Advisory.Connection"))));
0:             allowing (managementContext).unregisterMBean(with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Topic,Destination=ActiveMQ.Advisory.NetworkBridge"))));
commit:7799ed7
/////////////////////////////////////////////////////////////////////////
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(            
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=jobScheduler,jobSchedulerName=JMS"))));
commit:3536b1e
/////////////////////////////////////////////////////////////////////////
0:             allowing (managementContext).stop();
0:             allowing (managementContext).isConnectorStarted();
commit:814c49f
/////////////////////////////////////////////////////////////////////////
1:             // whack all connections
1:             proxy.close();
1:             
0:             proxy.reopen();       
commit:26d147a
/////////////////////////////////////////////////////////////////////////
1: import org.hamcrest.BaseMatcher;
1: import org.hamcrest.Description;
/////////////////////////////////////////////////////////////////////////
1:     BrokerService brokerA, brokerB;
1:     Mockery context;
1:     ManagementContext managementContext;
1:     DiscoveryAgent agent;
1:     // ignore the hostname resolution component as this is machine dependent
1:     class NetworkBridgeObjectNameMatcher<T> extends BaseMatcher<T> {
1:         T name;
1:         NetworkBridgeObjectNameMatcher(T o) {
1:             name = o;
1:         }
1:         
1:         public boolean matches(Object arg0) {
1:             ObjectName other = (ObjectName) arg0;
1:             ObjectName mine = (ObjectName) name;
0:             return other.getKeyProperty("Type").equals(mine.getKeyProperty("Type")) &&
0:                 other.getKeyProperty("NetworkConnectorName").equals(mine.getKeyProperty("NetworkConnectorName"));
1:         }
1: 
1:         public void describeTo(Description arg0) {
1:             arg0.appendText(this.getClass().getName());
1:         }       
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:             atLeast(maxReconnects - 1).of (managementContext).registerMBean(with(any(Object.class)), with(new NetworkBridgeObjectNameMatcher<ObjectName>(
/////////////////////////////////////////////////////////////////////////
1:             atLeast(maxReconnects - 1).of (managementContext).unregisterMBean(with(new NetworkBridgeObjectNameMatcher<ObjectName>(
commit:b0e3570
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.TimeUnit;
1: import javax.management.ObjectInstance;
/////////////////////////////////////////////////////////////////////////
1: import org.jmock.api.Invocation;
1: import org.jmock.lib.action.CustomAction;
/////////////////////////////////////////////////////////////////////////
1:     final Semaphore mbeanRegistered = new Semaphore(0);
1:     final Semaphore mbeanUnregistered = new Semaphore(0);
1:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkBridge,NetworkConnectorName=localhost,Name=localhost/127.0.0.1_" 
1:                             + proxy.getUrl().getPort())))); will(new CustomAction("signal register network mbean") {
1:                                 public Object invoke(Invocation invocation) throws Throwable {
1:                                     LOG.info("Mbean Registered: " + invocation.getParameter(0));
1:                                     mbeanRegistered.release();
0:                                     return new ObjectInstance((ObjectName)invocation.getParameter(0), "dscription");
1:                                 }
1:                             });
0:             atLeast(maxReconnects - 1).of (managementContext).unregisterMBean(with(equal(
1:                             + proxy.getUrl().getPort())))); will(new CustomAction("signal unregister network mbean") {
1:                                 public Object invoke(Invocation invocation) throws Throwable {
1:                                     LOG.info("Mbean Unregistered: " + invocation.getParameter(0));
1:                                     mbeanUnregistered.release();
1:                                     return null;
1:                                 }
1:                             });
1:            
0:             allowing (managementContext).unregisterMBean(with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Broker"))));
0:             allowing (managementContext).unregisterMBean(with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkConnector,NetworkConnectorName=localhost"))));
0:             allowing (managementContext).unregisterMBean(with(equal(            
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Topic,Destination=ActiveMQ.Advisory.Connection"))));        
/////////////////////////////////////////////////////////////////////////
1:         proxy.close();
/////////////////////////////////////////////////////////////////////////
1:                    return proxy.connections.size() >= 1;
1:             // wait for network connector
0:             assertTrue("network connector mbean registered within 1 minute", mbeanRegistered.tryAcquire(60, TimeUnit.SECONDS));
1:             
1:             // force an inactivity timeout via the proxy
1:             // wait for the inactivity timeout and network shutdown
0:             assertTrue("network connector mbean unregistered within 1 minute", mbeanUnregistered.tryAcquire(60, TimeUnit.SECONDS));
1:             
commit:bf32e4f
/////////////////////////////////////////////////////////////////////////
0:             Thread.sleep(3000);
0:             Thread.sleep(6000);
commit:5d42b72
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
0:     final int maxReconnects = 5;
1:     final String discoveryAddress = "multicast://default?group=" + groupName + "&initialReconnectDelay=1000";
1:     SocketProxy proxy;
1:     
/////////////////////////////////////////////////////////////////////////
1:         
1:         proxy = new SocketProxy(brokerA.getTransportConnectors().get(0).getConnectUri());
0:         //new SocketProxy(new URI("tcp://localhost:61617"));
/////////////////////////////////////////////////////////////////////////
0:             atLeast(maxReconnects - 1).of (managementContext).registerMBean(with(any(Object.class)), with(equal(
1:         
1:         configure(brokerB);
1:     }
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerA.stop();
1:     }
1:     
1:     private void configure(BrokerService broker) {
1:         broker.setPersistent(false);
0:         broker.setUseJmx(true);      
1:     }
1:     
1:     @Test
0:     public void testMulicastReconnect() throws Exception {     
1:         
1:         // control multicast advertise agent to inject proxy
1:         agent = MulticastDiscoveryAgentFactory.createDiscoveryAgent(new URI(discoveryAddress));
1:         agent.registerService(proxy.getUrl().toString());
1:         agent.start();
1: 
0:         brokerB.addNetworkConnector(discoveryAddress + "&wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
0:         brokerB.start();
1:         doReconnect();
1:     }
1:     
1:     
1: 
1:     @Test
1:     public void testSimpleReconnect() throws Exception {
0:         brokerB.addNetworkConnector("simple://(" + proxy.getUrl() 
0:                 + ")?useExponentialBackOff=false&initialReconnectDelay=500&wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000");
0:         brokerB.start();       
1:         doReconnect();
1:     }
1: 
1:     private void doReconnect() throws Exception {
1:         
1:         for (int i=0; i<maxReconnects; i++) {
1:             // Wait for connection
1:             assertTrue("we got a network connection in a timely manner", Wait.waitFor(new Wait.Condition() {
1:                 public boolean isSatisified() throws Exception {
0:                    return proxy.connections.size() == 1;
1:                 }
1:             }));
0:             Thread.sleep(1000);
1:             
0:             // force an inactivity timeout timeout
1:             proxy.pause();
1:         
0:             // wait for the inactivity timeout
0:             Thread.sleep(3000);
1:         
1:             // let a reconnect succeed
0:             proxy.goOn();       
1:         }
commit:39e63c0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
0: 
0: import static org.junit.Assert.*;
0: 
1: import java.net.URI;
0: 
1: import javax.management.ObjectName;
0: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgentFactory;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.integration.junit4.JMock;
1: import org.jmock.integration.junit4.JUnit4Mockery;
1: import org.jmock.lib.legacy.ClassImposteriser;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: 
0: 
1: @RunWith(JMock.class)
1: public class DiscoveryNetworkReconnectTest {
0: 
0:     private static final Log LOG = LogFactory.getLog(DiscoveryNetworkReconnectTest.class);
0: 
0:     BrokerService brokerA, brokerB;
0:     Mockery context;
0:     ManagementContext managementContext;
0:     
1:     final String groupName = "GroupID-" + "DiscoveryNetworkReconnectTest";
0:     final String discoveryAddress = "multicast://default?group=" + groupName + "&initialReconnectDelay=600";
0: 
0:     private DiscoveryAgent agent;
0: 
1:     @Before
1:     public void setUp() throws Exception {
1:         context = new JUnit4Mockery() {{
1:             setImposteriser(ClassImposteriser.INSTANCE);
1:         }};
0:             
1:         brokerA = new BrokerService();
1:         brokerA.setBrokerName("BrokerA");
1:         configure(brokerA);
1:         brokerA.addConnector("tcp://localhost:0");
1:         brokerA.start();
1:     }
0: 
0:     private void configure(BrokerService broker) {
0:         broker.setPersistent(false);
0:         broker.setUseJmx(true);      
1:     }
0:     
0:     @Test
0:     public void testReconnect() throws Exception {
0:         final SocketProxy proxy = new SocketProxy(brokerA.getTransportConnectors().get(0).getConnectUri());
0:         
0:         // control multicast publish advertise agent to inject proxy
0:         agent = MulticastDiscoveryAgentFactory.createDiscoveryAgent(new URI(discoveryAddress));
0:         agent.registerService(proxy.getUrl().toString());
0:         agent.start();
0:         
1:         managementContext = context.mock(ManagementContext.class);
0:         
1:         context.checking(new Expectations(){{
0:             allowing (managementContext).getJmxDomainName(); will (returnValue("Test"));
0:             allowing (managementContext).start();
0:             allowing (managementContext).stop();            
0:             allowing (managementContext).unregisterMBean(with(any(ObjectName.class)));
0:             
1:             // expected MBeans
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Broker"))));
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkConnector,NetworkConnectorName=localhost"))));
0:             allowing (managementContext).registerMBean(with(any(Object.class)), with(equal(            
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=Topic,Destination=ActiveMQ.Advisory.Connection"))));
0:             
0:             // due to reconnect we get two registrations
0:             atLeast(2).of (managementContext).registerMBean(with(any(Object.class)), with(equal(
0:                     new ObjectName("Test:BrokerName=BrokerNC,Type=NetworkBridge,NetworkConnectorName=localhost,Name=localhost/127.0.0.1_" 
0:                             + proxy.getUrl().getPort()))));
1:         }});
0: 
1:         brokerB = new BrokerService();
1:         brokerB.setManagementContext(managementContext);
1:         brokerB.setBrokerName("BrokerNC");
0:         configure(brokerB);       
0:         brokerB.addNetworkConnector(discoveryAddress + "&wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000&trace=true");
0:         brokerB.start();
0: 
0:         Wait.waitFor(new Wait.Condition() {
0:             public boolean isSatisified() throws Exception {
0:                return proxy.connections.size() == 1;
1:             }
0:         });
0:        
0:         // force an inactivity timeout timeout
0:         proxy.pause();
0:         
0:         // wait for the inactivity timeout
0:         Thread.sleep(2000);
0:         
0:         // let a reconnect succeed
0:         proxy.goOn();
0:         
0:         assertTrue("got a reconnect", Wait.waitFor(new Wait.Condition() {
0:             public boolean isSatisified() throws Exception {
0:                return proxy.connections.size() == 1;
1:             }
0:         }));
0:         
1:         brokerB.stop();
0:         // let mockery validate minimal duplicate mbean registrations
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:83eb011
/////////////////////////////////////////////////////////////////////////
0:             allowing (managementContext).setBrokerName("BrokerNC");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryNetworkReconnectTest.class);
commit:a770a00
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("network connector mbean registered within 3 minute", mbeanRegistered.tryAcquire(180, TimeUnit.SECONDS));
0:             assertTrue("network connector mbean unregistered within 3 minute", mbeanUnregistered.tryAcquire(180, TimeUnit.SECONDS));
commit:27186c5
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("network connector mbean unregistered within 2 minute", mbeanUnregistered.tryAcquire(120, TimeUnit.SECONDS));
commit:2ac5e7a
/////////////////////////////////////////////////////////////////////////
1:         brokerA.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         brokerA.waitUntilStopped();
1:         brokerB.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:         brokerB.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
0:         brokerB.start();   
0:         brokerB.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("network connector mbean registered within 2 minute", mbeanRegistered.tryAcquire(120, TimeUnit.SECONDS));
commit:6e1ba4a
/////////////////////////////////////////////////////////////////////////
0:             allowing (managementContext).isCreateConnector();
============================================================================