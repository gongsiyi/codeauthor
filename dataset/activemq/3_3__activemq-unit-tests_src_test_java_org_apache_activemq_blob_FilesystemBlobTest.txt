1:8bf987b: /**
1:8bf987b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8bf987b:  * contributor license agreements.  See the NOTICE file distributed with
1:8bf987b:  * this work for additional information regarding copyright ownership.
1:8bf987b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8bf987b:  * (the "License"); you may not use this file except in compliance with
1:8bf987b:  * the License.  You may obtain a copy of the License at
1:8bf987b:  *
1:8bf987b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8bf987b:  *
1:8bf987b:  * Unless required by applicable law or agreed to in writing, software
1:8bf987b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8bf987b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8bf987b:  * See the License for the specific language governing permissions and
1:8bf987b:  * limitations under the License.
1:8bf987b:  */
1:8bf987b: package org.apache.activemq.blob;
8:8bf987b: 
1:8bf987b: import java.io.BufferedWriter;
1:8bf987b: import java.io.File;
1:8bf987b: import java.io.FileWriter;
1:8bf987b: import java.io.InputStream;
1:8bf987b: 
1:8bf987b: import javax.jms.Connection;
1:8bf987b: import javax.jms.Message;
1:8bf987b: import javax.jms.MessageConsumer;
1:8bf987b: import javax.jms.MessageProducer;
1:8bf987b: import javax.jms.Session;
1:8bf987b: 
1:8bf987b: import org.apache.activemq.ActiveMQSession;
1:8bf987b: import org.apache.activemq.BlobMessage;
1:8bf987b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:8bf987b: import org.apache.activemq.command.ActiveMQBlobMessage;
1:8bf987b: import org.apache.activemq.util.IOHelper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8bf987b: 
1:8bf987b: 
1:8bf987b: public class FilesystemBlobTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FilesystemBlobTest.class);
1:c7d559f: 
1:8bf987b:     private Connection connection;
1:c7d559f:     private final String tmpDir =  System.getProperty("user.dir") + "/target/FilesystemBlobTest";
1:c7d559f:     @Override
1:c7d559f:     public void setUp() throws Exception {
1:8bf987b:         super.setUp();
1:8bf987b:         // replace \ with / to let it work on windows too
1:8bf987b:         String fileUrl = "file:///" +tmpDir.replaceAll("\\\\", "/");
1:8bf987b:         LOG.info("Using file: " + fileUrl);
1:8bf987b:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + fileUrl;
1:c7d559f: 
1:8bf987b:         connectionFactory = createConnectionFactory();
1:c7d559f: 
1:8bf987b:         connection = createConnection();
1:c7d559f:         connection.start();
1:8bf987b:     }
1:c7d559f: 
1:8bf987b:     public void testBlobFile() throws Exception {
1:8bf987b:         // first create Message
1:8bf987b:         File file = File.createTempFile("amq-data-file-", ".dat");
1:8bf987b:         // lets write some data
1:8bf987b:         String content = "hello world " + System.currentTimeMillis();
1:8bf987b:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:8bf987b:         writer.append(content);
1:8bf987b:         writer.close();
1:8bf987b: 
1:8bf987b:         ActiveMQSession session = (ActiveMQSession) connection.createSession(
1:8bf987b:                 false, Session.AUTO_ACKNOWLEDGE);
1:8bf987b:         MessageProducer producer = session.createProducer(destination);
1:8bf987b:         MessageConsumer consumer = session.createConsumer(destination);
1:8bf987b:         BlobMessage message = session.createBlobMessage(file);
1:8bf987b: 
1:8bf987b:         producer.send(message);
1:8bf987b:         Thread.sleep(1000);
1:8bf987b: 
1:8bf987b:         // check message send
1:8bf987b:         Message msg = consumer.receive(1000);
1:c7d559f:         assertTrue(msg instanceof ActiveMQBlobMessage);
1:8bf987b: 
1:8bf987b:         InputStream input = ((ActiveMQBlobMessage) msg).getInputStream();
1:8bf987b:         StringBuilder b = new StringBuilder();
1:8bf987b:         int i = input.read();
1:8bf987b:         while (i != -1) {
1:8bf987b:             b.append((char) i);
1:8bf987b:             i = input.read();
1:8bf987b:         }
1:8bf987b:         input.close();
1:c7d559f:         File uploaded = new File(tmpDir, msg.getJMSMessageID().toString().replace(":", "_"));
1:c7d559f:         assertEquals(content, b.toString());
1:8bf987b:         assertTrue(uploaded.exists());
1:8bf987b:         ((ActiveMQBlobMessage)msg).deleteFile();
1:8bf987b:         assertFalse(uploaded.exists());
1:8bf987b:     }
1:8bf987b: 
1:c7d559f:     @Override
1:8bf987b:     protected void tearDown() throws Exception {
1:8bf987b:         if (connection != null) {
1:9f5fff7:             connection.close();
1:8bf987b:         }
1:8bf987b:         super.tearDown();
1:c7d559f: 
1:8bf987b:         IOHelper.deleteFile(new File(tmpDir));
1:8bf987b:     }
1:8bf987b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9f5fff7
/////////////////////////////////////////////////////////////////////////
1:             connection.close();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final String tmpDir =  System.getProperty("user.dir") + "/target/FilesystemBlobTest";
1:     @Override
1:     public void setUp() throws Exception {
1: 
1: 
1:         connection.start();
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(msg instanceof ActiveMQBlobMessage);
/////////////////////////////////////////////////////////////////////////
1:         File uploaded = new File(tmpDir, msg.getJMSMessageID().toString().replace(":", "_"));
1:         assertEquals(content, b.toString());
1:     @Override
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.InputStream;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.BlobMessage;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class FilesystemBlobTest extends EmbeddedBrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(FilesystemBlobTest.class);
1:     
1:     private Connection connection;
0:     private String tmpDir =  System.getProperty("user.dir") + "/target/FilesystemBlobTest";
0: 	public void setUp() throws Exception {
1:         super.setUp();
1:         // replace \ with / to let it work on windows too
1:         String fileUrl = "file:///" +tmpDir.replaceAll("\\\\", "/");
1:         LOG.info("Using file: " + fileUrl);
1:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + fileUrl;
1:         
1:         connectionFactory = createConnectionFactory();
1:         
1:         connection = createConnection();
0:         connection.start();        
1:     }
1:     
1:     
1:     public void testBlobFile() throws Exception {
1:         // first create Message
1:         File file = File.createTempFile("amq-data-file-", ".dat");
1:         // lets write some data
1:         String content = "hello world " + System.currentTimeMillis();
1:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:         writer.append(content);
1:         writer.close();
1: 
1:         ActiveMQSession session = (ActiveMQSession) connection.createSession(
1:                 false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         BlobMessage message = session.createBlobMessage(file);
1: 
1:         producer.send(message);
1:         Thread.sleep(1000);
1: 
1:         // check message send
1:         Message msg = consumer.receive(1000);
0:         Assert.assertTrue(msg instanceof ActiveMQBlobMessage);
1: 
1:         InputStream input = ((ActiveMQBlobMessage) msg).getInputStream();
1:         StringBuilder b = new StringBuilder();
1:         int i = input.read();
1:         while (i != -1) {
1:             b.append((char) i);
1:             i = input.read();
1:         }
1:         input.close();
0:         File uploaded = new File(tmpDir, msg.getJMSMessageID().toString().replace(":", "_")); 
0:         Assert.assertEquals(content, b.toString());
1:         assertTrue(uploaded.exists());
1:         ((ActiveMQBlobMessage)msg).deleteFile();
1:         assertFalse(uploaded.exists());
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
0:             connection.stop();
1:         }
1:         super.tearDown();
1:        
1:         IOHelper.deleteFile(new File(tmpDir));
1:     }
1: }
commit:11d7974
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(FilesystemBlobTest.class);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Using file: " + fileUrl);
commit:9d4f30c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.blob;
0: 
0: import java.io.BufferedWriter;
0: import java.io.File;
0: import java.io.FileWriter;
0: import java.io.InputStream;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: 
0: import junit.framework.Assert;
0: 
0: import org.apache.activemq.ActiveMQSession;
0: import org.apache.activemq.BlobMessage;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.command.ActiveMQBlobMessage;
0: import org.apache.activemq.util.IOHelper;
0: 
0: 
0: public class FilesystemBlobTest extends EmbeddedBrokerTestSupport {
0: 
0:     
0:     private Connection connection;
0:     private String tmpDir =  System.getProperty("user.dir") + "/target/FilesystemBlobTest";
0: 	public void setUp() throws Exception {
0:         super.setUp();
0:         // replace \ with / to let it work on windows too
0:         String fileUrl = "file:///" +tmpDir.replaceAll("\\\\", "/");
0:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + fileUrl;
0:         
0:         connectionFactory = createConnectionFactory();
0:         
0:         connection = createConnection();
0:         connection.start();        
0:     }
0:     
0:     
0:     public void testBlobFile() throws Exception {
0:         // first create Message
0:         File file = File.createTempFile("amq-data-file-", ".dat");
0:         // lets write some data
0:         String content = "hello world " + System.currentTimeMillis();
0:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
0:         writer.append(content);
0:         writer.close();
0: 
0:         ActiveMQSession session = (ActiveMQSession) connection.createSession(
0:                 false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(destination);
0:         MessageConsumer consumer = session.createConsumer(destination);
0:         BlobMessage message = session.createBlobMessage(file);
0: 
0:         producer.send(message);
0:         Thread.sleep(1000);
0: 
0:         // check message send
0:         Message msg = consumer.receive(1000);
0:         Assert.assertTrue(msg instanceof ActiveMQBlobMessage);
0: 
0:         InputStream input = ((ActiveMQBlobMessage) msg).getInputStream();
0:         StringBuilder b = new StringBuilder();
0:         int i = input.read();
0:         while (i != -1) {
0:             b.append((char) i);
0:             i = input.read();
0:         }
0:         input.close();
0:         File uploaded = new File(tmpDir, msg.getJMSMessageID().toString().replace(":", "_")); 
0:         Assert.assertEquals(content, b.toString());
0:         assertTrue(uploaded.exists());
0:         ((ActiveMQBlobMessage)msg).deleteFile();
0:         assertFalse(uploaded.exists());
0:     }
0: 
0:     protected void tearDown() throws Exception {
0:         if (connection != null) {
0:             connection.stop();
0:         }
0:         super.tearDown();
0:        
0:         IOHelper.deleteFile(new File(tmpDir));
0:     }
0: }
============================================================================