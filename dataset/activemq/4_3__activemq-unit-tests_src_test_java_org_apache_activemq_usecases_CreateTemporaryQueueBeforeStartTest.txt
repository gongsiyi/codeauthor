1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
4:a677c21: 
1:a677c21: package org.apache.activemq.usecases;
1:230a86c: 
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Queue;
1:a677c21: import javax.jms.QueueConnection;
1:a677c21: import javax.jms.QueueSession;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.Topic;
1:a677c21: 
1:a677c21: import junit.framework.TestCase;
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:a677c21: 
1:a677c21: /**
1:a677c21:  * @author Peter Henning
1:4553ff1:  *
1:a677c21:  */
1:a677c21: public class CreateTemporaryQueueBeforeStartTest extends TestCase {
1:4553ff1:     private final String bindAddress = "tcp://localhost:0";
1:4553ff1:     private String connectionUri;
1:a677c21:     private Connection connection;
1:a677c21:     private BrokerService broker = new BrokerService();
1:a677c21: 
1:a677c21:     public void testCreateTemporaryQueue() throws Exception {
1:a677c21:         connection = createConnection();
1:a677c21:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         Queue queue = session.createTemporaryQueue();
1:a677c21:         assertTrue("No queue created!", queue != null);
1:a677c21:         Topic topic = session.createTemporaryTopic();
1:a677c21:         assertTrue("No topic created!", topic != null);
4:a677c21:     }
1:a677c21: 
1:a677c21:     public void testTryToReproduceNullPointerBug() throws Exception {
1:4553ff1:         String url = connectionUri;
1:a677c21:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:a677c21:         QueueConnection queueConnection = factory.createQueueConnection();
1:a677c21:         this.connection = queueConnection;
1:a677c21:         QueueSession session = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:933eb2f:         session.createSender(null); // Unidentified
1:a677c21:         Queue receiverQueue = session.createTemporaryQueue();
1:933eb2f:         session.createReceiver(receiverQueue);
1:a677c21:         queueConnection.start();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testTemporaryQueueConsumer() throws Exception {
1:fc00993:         final int number = 20;
1:a677c21:         final AtomicInteger count = new AtomicInteger(0);
1:fc00993:         for (int i = 0; i < number; i++) {
1:a677c21:             Thread thread = new Thread(new Runnable() {
1:a677c21:                 public void run() {
1:a677c21:                     try {
1:a677c21:                         QueueConnection connection = createConnection();
1:a677c21:                         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:                         Queue queue = session.createTemporaryQueue();
1:933eb2f:                         session.createReceiver(queue);
1:a677c21:                         connection.start();
1:230a86c: 
1:fc00993:                         if (count.incrementAndGet() >= number) {
1:230a86c:                             synchronized (count) {
1:a677c21:                                 count.notify();
1:a677c21:                             }
1:a677c21:                         }
1:230a86c:                     } catch (Exception ex) {
1:a677c21:                         ex.printStackTrace();
1:a677c21:                     }
1:a677c21:                 }
1:a677c21:             });
1:a677c21:             thread.start();
1:a677c21:         }
1:a677c21:         int maxWaitTime = 20000;
1:a677c21:         synchronized (count) {
1:a677c21:             long waitTime = maxWaitTime;
1:a677c21:             long start = System.currentTimeMillis();
1:fc00993:             while (count.get() < number) {
1:a677c21:                 if (waitTime <= 0) {
1:a677c21:                     break;
1:230a86c:                 } else {
1:a677c21:                     count.wait(waitTime);
1:a677c21:                     waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:a677c21:                 }
1:a677c21:             }
1:a677c21:         }
1:fc00993:         assertTrue("Unexpected count: " + count, count.get() == number);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected QueueConnection createConnection() throws Exception {
1:a677c21:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:a677c21:         return factory.createQueueConnection();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:4553ff1:         return new ActiveMQConnectionFactory(connectionUri);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void setUp() throws Exception {
1:4553ff1:         broker.setUseJmx(false);
1:a677c21:         broker.setPersistent(false);
1:4553ff1:         connectionUri = broker.addConnector(bindAddress).getPublishableConnectString();
1:a677c21:         broker.start();
1:4553ff1:         broker.waitUntilStarted();
1:4553ff1: 
1:a677c21:         super.setUp();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         if (connection != null) {
1:a677c21:             connection.close();
1:a677c21:         }
1:a677c21:         broker.stop();
1:a677c21:         super.tearDown();
1:86cbdfd:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:4553ff1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private final String bindAddress = "tcp://localhost:0";
1:     private String connectionUri;
/////////////////////////////////////////////////////////////////////////
1:         String url = connectionUri;
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory(connectionUri);
1:         broker.setUseJmx(false);
1:         connectionUri = broker.addConnector(bindAddress).getPublishableConnectString();
1:         broker.waitUntilStarted();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         session.createSender(null); // Unidentified
1:         session.createReceiver(receiverQueue);
/////////////////////////////////////////////////////////////////////////
1:                         session.createReceiver(queue);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         final int number = 20;
1:         for (int i = 0; i < number; i++) {
/////////////////////////////////////////////////////////////////////////
1:                         if (count.incrementAndGet() >= number) {
/////////////////////////////////////////////////////////////////////////
1:             while (count.get() < number) {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Unexpected count: " + count, count.get() == number);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         QueueSender sender = session.createSender(null); // Unidentified
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < NUMBER; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
0:                         if (count.incrementAndGet() >= NUMBER) {
1:                             synchronized (count) {
1:                     } catch (Exception ex) {
/////////////////////////////////////////////////////////////////////////
1:                 } else {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
0: import javax.jms.QueueReceiver;
0: import javax.jms.QueueSender;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * @author Peter Henning
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class CreateTemporaryQueueBeforeStartTest extends TestCase {
0:     protected String bindAddress = "tcp://localhost:61621";
1:     private Connection connection;
1:     private BrokerService broker = new BrokerService();
1: 
1:     public void testCreateTemporaryQueue() throws Exception {
1:         connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createTemporaryQueue();
1:         assertTrue("No queue created!", queue != null);
1:         Topic topic = session.createTemporaryTopic();
1:         assertTrue("No topic created!", topic != null);
1:     }
1: 
1:     public void testTryToReproduceNullPointerBug() throws Exception {
0:         String url = bindAddress;
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         QueueConnection queueConnection = factory.createQueueConnection();
1:         this.connection = queueConnection;
1:         QueueSession session = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
0:         QueueSender sender = session.createSender(null); //Unidentified
1:         Queue receiverQueue = session.createTemporaryQueue();
0:         QueueReceiver receiver = session.createReceiver(receiverQueue);
1:         queueConnection.start();
1:     }
1: 
1:     public void testTemporaryQueueConsumer() throws Exception {
0:         final int NUMBER = 20;
1:         final AtomicInteger count = new AtomicInteger(0);
0:         for (int i = 0;i < NUMBER;i++) {
1:             Thread thread = new Thread(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         QueueConnection connection = createConnection();
1:                         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Queue queue = session.createTemporaryQueue();
0:                         QueueReceiver consumer = session.createReceiver(queue);
1:                         connection.start();
1:                         
1:                         
0:                         if (count.incrementAndGet() >= NUMBER){
0:                             synchronized(count){
1:                                 count.notify();
1:                             }
1:                         }
1:                     }
0:                     catch (Exception ex) {
1:                         ex.printStackTrace();
1:                     }
1:                 }
1:             });
1:             thread.start();
1:         }
1:         int maxWaitTime = 20000;
1:         synchronized (count) {
1:             long waitTime = maxWaitTime;
1:             long start = System.currentTimeMillis();
0:             while (count.get() < NUMBER) {
1:                 if (waitTime <= 0) {
1:                     break;
1:                 }
0:                 else {
1:                     count.wait(waitTime);
1:                     waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:                 }
1:             }
1:         }
0:         assertTrue("Unexpected count: " + count, count.get() == NUMBER);
1:     }
1: 
1:     protected QueueConnection createConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:         return factory.createQueueConnection();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory(bindAddress);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         broker.setPersistent(false);
0:         broker.addConnector(bindAddress);
1:         broker.start();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         broker.stop();
1:         super.tearDown();
1:     }
1: }
============================================================================