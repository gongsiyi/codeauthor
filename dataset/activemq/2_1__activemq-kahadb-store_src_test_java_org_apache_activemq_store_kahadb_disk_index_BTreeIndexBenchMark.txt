1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
1:456a2ba: 
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.text.NumberFormat;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.LongMarshaller;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
1:456a2ba: 
1:456a2ba: public class BTreeIndexBenchMark extends IndexBenchmark {
1:456a2ba: 
1:456a2ba:     private NumberFormat nf;
1:456a2ba: 
1:456a2ba:     @Override
1:456a2ba:     public void setUp() throws Exception {
1:456a2ba:         super.setUp();
1:456a2ba:         nf = NumberFormat.getIntegerInstance();
1:456a2ba:         nf.setMinimumIntegerDigits(10);
1:456a2ba:         nf.setGroupingUsed(false);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     @Override
1:456a2ba:     protected Index<String, Long> createIndex() throws Exception {
1:456a2ba: 
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         long id = tx.allocate().getPageId();
1:456a2ba:         tx.commit();
1:456a2ba: 
1:456a2ba:         BTreeIndex<String, Long> index = new BTreeIndex<String, Long>(pf, id);
1:456a2ba:         index.setKeyMarshaller(StringMarshaller.INSTANCE);
1:456a2ba:         index.setValueMarshaller(LongMarshaller.INSTANCE);
1:456a2ba:         
1:456a2ba:         return index;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     @Override
1:456a2ba:     protected void dumpIndex(Index<String, Long> index) throws IOException {
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         ((BTreeIndex)index).printStructure(tx, System.out);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Overriding so that this generates keys that are the worst case for the BTree. Keys that
1:456a2ba:      * always insert to the end of the BTree.  
1:456a2ba:      */
1:456a2ba:     @Override
1:456a2ba:     protected String key(long i) {
1:456a2ba:         return "a-long-message-id-like-key:"+nf.format(i);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6010bd3
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.LongMarshaller;
1: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.IOException;
1: import java.text.NumberFormat;
1: 
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.util.LongMarshaller;
0: import org.apache.kahadb.util.StringMarshaller;
1: 
1: public class BTreeIndexBenchMark extends IndexBenchmark {
1: 
1:     private NumberFormat nf;
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         nf = NumberFormat.getIntegerInstance();
1:         nf.setMinimumIntegerDigits(10);
1:         nf.setGroupingUsed(false);
1:     }
1:     
1:     @Override
1:     protected Index<String, Long> createIndex() throws Exception {
1: 
1:         Transaction tx = pf.tx();
1:         long id = tx.allocate().getPageId();
1:         tx.commit();
1: 
1:         BTreeIndex<String, Long> index = new BTreeIndex<String, Long>(pf, id);
1:         index.setKeyMarshaller(StringMarshaller.INSTANCE);
1:         index.setValueMarshaller(LongMarshaller.INSTANCE);
1:         
1:         return index;
1:     }
1:     
1:     @Override
1:     protected void dumpIndex(Index<String, Long> index) throws IOException {
1:         Transaction tx = pf.tx();
1:         ((BTreeIndex)index).printStructure(tx, System.out);
1:     }
1: 
1:     /**
1:      * Overriding so that this generates keys that are the worst case for the BTree. Keys that
1:      * always insert to the end of the BTree.  
1:      */
1:     @Override
1:     protected String key(long i) {
1:         return "a-long-message-id-like-key:"+nf.format(i);
1:     }
1: 
1: }
============================================================================