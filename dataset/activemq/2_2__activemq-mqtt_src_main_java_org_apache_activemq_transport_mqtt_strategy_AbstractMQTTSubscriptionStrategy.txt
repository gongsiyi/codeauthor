1:413e484: /**
1:413e484:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:413e484:  * contributor license agreements.  See the NOTICE file distributed with
1:413e484:  * this work for additional information regarding copyright ownership.
1:413e484:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:413e484:  * (the "License"); you may not use this file except in compliance with
1:413e484:  * the License.  You may obtain a copy of the License at
1:413e484:  *
1:413e484:  *      http://www.apache.org/licenses/LICENSE-2.0
1:413e484:  *
1:413e484:  * Unless required by applicable law or agreed to in writing, software
1:413e484:  * distributed under the License is distributed on an "AS IS" BASIS,
1:413e484:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:413e484:  * See the License for the specific language governing permissions and
1:413e484:  * limitations under the License.
1:413e484:  */
1:413e484: package org.apache.activemq.transport.mqtt.strategy;
1:413e484: 
1:ec049a0: import java.io.IOException;
1:af999fe: import java.util.ArrayList;
1:af999fe: import java.util.Collections;
1:af999fe: import java.util.HashSet;
1:af999fe: import java.util.List;
1:413e484: import java.util.Set;
1:ec049a0: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:413e484: 
1:413e484: import org.apache.activemq.broker.BrokerService;
1:413e484: import org.apache.activemq.broker.BrokerServiceAware;
1:413e484: import org.apache.activemq.broker.ConnectionContext;
1:af999fe: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:413e484: import org.apache.activemq.broker.region.PrefetchSubscription;
1:413e484: import org.apache.activemq.broker.region.RegionBroker;
1:413e484: import org.apache.activemq.broker.region.Subscription;
1:413e484: import org.apache.activemq.broker.region.TopicRegion;
1:413e484: import org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor;
1:413e484: import org.apache.activemq.command.ActiveMQDestination;
1:413e484: import org.apache.activemq.command.ActiveMQTopic;
1:413e484: import org.apache.activemq.command.ConsumerId;
1:413e484: import org.apache.activemq.command.ConsumerInfo;
1:ec049a0: import org.apache.activemq.command.ExceptionResponse;
1:ec049a0: import org.apache.activemq.command.RemoveInfo;
1:af999fe: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:ec049a0: import org.apache.activemq.command.Response;
1:af999fe: import org.apache.activemq.command.SubscriptionInfo;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1:af999fe: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1:ec049a0: import org.apache.activemq.transport.mqtt.ResponseHandler;
1:ec049a0: import org.apache.activemq.util.LongSequenceGenerator;
1:ec049a0: import org.fusesource.mqtt.client.QoS;
1:ec049a0: import org.fusesource.mqtt.client.Topic;
1:ec049a0: import org.slf4j.Logger;
1:ec049a0: import org.slf4j.LoggerFactory;
1:413e484: 
1:413e484: /**
1:413e484:  * Abstract implementation of the {@link MQTTSubscriptionStrategy} interface providing
1:413e484:  * the base functionality that is common to most implementations.
1:413e484:  */
1:413e484: public abstract class AbstractMQTTSubscriptionStrategy implements MQTTSubscriptionStrategy, BrokerServiceAware {
1:413e484: 
1:ec049a0:     private static final Logger LOG = LoggerFactory.getLogger(AbstractMQTTSubscriptionStrategy.class);
1:ec049a0: 
1:ec049a0:     private static final byte SUBSCRIBE_ERROR = (byte) 0x80;
1:ec049a0: 
1:413e484:     protected MQTTProtocolConverter protocol;
1:413e484:     protected BrokerService brokerService;
1:ec049a0: 
1:9ef4259:     protected final ConcurrentMap<ConsumerId, MQTTSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, MQTTSubscription>();
1:9ef4259:     protected final ConcurrentMap<String, MQTTSubscription> mqttSubscriptionByTopic = new ConcurrentHashMap<String, MQTTSubscription>();
1:af999fe:     protected final Set<String> restoredDurableSubs = Collections.synchronizedSet(new HashSet<String>());
1:413e484: 
1:ec049a0:     protected final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();
1:ec049a0: 
1:413e484:     @Override
1:413e484:     public void initialize(MQTTProtocolConverter protocol) throws MQTTProtocolException {
1:413e484:         setProtocolConverter(protocol);
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public void setBrokerService(BrokerService brokerService) {
1:413e484:         this.brokerService = brokerService;
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public void setProtocolConverter(MQTTProtocolConverter parent) {
1:413e484:         this.protocol = parent;
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public MQTTProtocolConverter getProtocolConverter() {
1:413e484:         return protocol;
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:ec049a0:     public byte onSubscribe(final Topic topic) throws MQTTProtocolException {
1:ec049a0: 
1:ec049a0:         final String destinationName = topic.name().toString();
1:ec049a0:         final QoS requestedQoS = topic.qos();
1:ec049a0: 
1:ec049a0:         final MQTTSubscription mqttSubscription = mqttSubscriptionByTopic.get(destinationName);
1:ec049a0:         if (mqttSubscription != null) {
1:ec049a0:             if (requestedQoS != mqttSubscription.getQoS()) {
1:ec049a0:                 // remove old subscription as the QoS has changed
1:ec049a0:                 onUnSubscribe(destinationName);
1:ec049a0:             } else {
1:ec049a0:                 try {
1:ec049a0:                     onReSubscribe(mqttSubscription);
1:ec049a0:                 } catch (IOException e) {
1:ec049a0:                     throw new MQTTProtocolException("Failed to find subscription strategy", true, e);
1:ec049a0:                 }
1:ec049a0:                 return (byte) requestedQoS.ordinal();
1:ec049a0:             }
1:ec049a0:         }
1:ec049a0: 
1:ec049a0:         try {
1:ec049a0:             return onSubscribe(destinationName, requestedQoS);
1:ec049a0:         } catch (IOException e) {
1:ec049a0:             throw new MQTTProtocolException("Failed while intercepting subscribe", true, e);
1:ec049a0:         }
1:ec049a0:     }
1:ec049a0: 
1:ec049a0:     @Override
1:413e484:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1:413e484:         String topicName = mqttSubscription.getTopicName();
1:413e484: 
1:413e484:         // get TopicRegion
1:413e484:         RegionBroker regionBroker;
1:413e484:         try {
1:413e484:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:413e484:         } catch (Exception e) {
1:413e484:             throw new MQTTProtocolException("Error subscribing to " + topicName + ": " + e.getMessage(), false, e);
1:413e484:         }
1:413e484:         final TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:413e484: 
1:413e484:         final ConsumerInfo consumerInfo = mqttSubscription.getConsumerInfo();
1:413e484:         final ConsumerId consumerId = consumerInfo.getConsumerId();
1:413e484: 
1:413e484:         // use actual client id used to create connection to lookup connection
1:413e484:         // context
1:7948d69:         String connectionInfoClientId = protocol.getClientId();
1:7948d69:         // for zero-byte client ids we used connection id
1:7948d69:         if (connectionInfoClientId == null || connectionInfoClientId.isEmpty()) {
1:7948d69:             connectionInfoClientId = protocol.getConnectionId().toString();
1:7948d69:         }
1:413e484:         final ConnectionContext connectionContext = regionBroker.getConnectionContext(connectionInfoClientId);
1:413e484: 
1:413e484:         // get all matching Topics
1:413e484:         final Set<org.apache.activemq.broker.region.Destination> matchingDestinations =
1:413e484:             topicRegion.getDestinations(mqttSubscription.getDestination());
1:413e484:         for (org.apache.activemq.broker.region.Destination dest : matchingDestinations) {
1:413e484: 
1:413e484:             // recover retroactive messages for matching subscription
1:413e484:             for (Subscription subscription : dest.getConsumers()) {
1:413e484:                 if (subscription.getConsumerInfo().getConsumerId().equals(consumerId)) {
1:413e484:                     try {
1:413e484:                         if (dest instanceof org.apache.activemq.broker.region.Topic) {
1:413e484:                             ((org.apache.activemq.broker.region.Topic) dest).recoverRetroactiveMessages(connectionContext, subscription);
1:413e484:                         } else if (dest instanceof VirtualTopicInterceptor) {
1:413e484:                             ((VirtualTopicInterceptor) dest).getTopic().recoverRetroactiveMessages(connectionContext, subscription);
1:413e484:                         }
1:413e484:                         if (subscription instanceof PrefetchSubscription) {
1:413e484:                             // request dispatch for prefetch subs
1:413e484:                             PrefetchSubscription prefetchSubscription = (PrefetchSubscription) subscription;
1:413e484:                             prefetchSubscription.dispatchPending();
1:413e484:                         }
1:413e484:                     } catch (Exception e) {
1:413e484:                         throw new MQTTProtocolException("Error recovering retained messages for " + dest.getName() + ": " + e.getMessage(), false, e);
1:413e484:                     }
1:413e484:                     break;
1:413e484:                 }
1:413e484:             }
1:413e484:         }
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public ActiveMQDestination onSend(String topicName) {
1:413e484:         return new ActiveMQTopic(topicName);
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public String onSend(ActiveMQDestination destination) {
1:413e484:         return destination.getPhysicalName();
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:413e484:     public boolean isControlTopic(ActiveMQDestination destination) {
1:413e484:         return destination.getPhysicalName().startsWith("$");
1:413e484:     }
1:ec049a0: 
1:ec049a0:     @Override
1:ec049a0:     public MQTTSubscription getSubscription(ConsumerId consumerId) {
1:ec049a0:         return subscriptionsByConsumerId.get(consumerId);
1:ec049a0:     }
1:ec049a0: 
1:ec049a0:     protected ConsumerId getNextConsumerId() {
1:ec049a0:         return new ConsumerId(protocol.getSessionId(), consumerIdGenerator.getNextSequenceId());
1:ec049a0:     }
1:ec049a0: 
1:ec049a0:     protected byte doSubscribe(ConsumerInfo consumerInfo, final String topicName, final QoS qoS) throws MQTTProtocolException {
1:ec049a0: 
1:ec049a0:         MQTTSubscription mqttSubscription = new MQTTSubscription(protocol, topicName, qoS, consumerInfo);
1:ec049a0: 
1:ec049a0:         // optimistic add to local maps first to be able to handle commands in onActiveMQCommand
1:ec049a0:         subscriptionsByConsumerId.put(consumerInfo.getConsumerId(), mqttSubscription);
1:ec049a0:         mqttSubscriptionByTopic.put(topicName, mqttSubscription);
1:ec049a0: 
1:ec049a0:         final byte[] qos = {-1};
1:ec049a0:         protocol.sendToActiveMQ(consumerInfo, new ResponseHandler() {
1:ec049a0:             @Override
1:ec049a0:             public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:ec049a0:                 // validate subscription request
1:ec049a0:                 if (response.isException()) {
1:ec049a0:                     final Throwable throwable = ((ExceptionResponse) response).getException();
1:ec049a0:                     LOG.warn("Error subscribing to {}", topicName, throwable);
1:a4fbe70:                     // version 3.1 don't supports silent fail
1:a4fbe70:                     // version 3.1.1 send "error" qos
1:fd2805f:                     if (protocol.version == MQTTProtocolConverter.V3_1_1) {
1:ec049a0:                         qos[0] = SUBSCRIBE_ERROR;
1:ec049a0:                     } else {
1:ec049a0:                         qos[0] = (byte) qoS.ordinal();
1:ec049a0:                     }
1:a4fbe70:                 } else {
1:a4fbe70:                     qos[0] = (byte) qoS.ordinal();
1:ec049a0:                 }
1:413e484:             }
1:ec049a0:         });
1:af999fe: 
1:ec049a0:         if (qos[0] == SUBSCRIBE_ERROR) {
1:ec049a0:             // remove from local maps if subscribe failed
1:ec049a0:             subscriptionsByConsumerId.remove(consumerInfo.getConsumerId());
1:ec049a0:             mqttSubscriptionByTopic.remove(topicName);
1:ec049a0:         }
1:ec049a0: 
1:ec049a0:         return qos[0];
1:ec049a0:     }
1:ec049a0: 
1:ec049a0:     public void doUnSubscribe(MQTTSubscription subscription) {
1:ec049a0:         mqttSubscriptionByTopic.remove(subscription.getTopicName());
1:ec049a0:         ConsumerInfo info = subscription.getConsumerInfo();
1:ec049a0:         if (info != null) {
1:ec049a0:             subscriptionsByConsumerId.remove(info.getConsumerId());
1:ec049a0: 
1:ec049a0:             RemoveInfo removeInfo = info.createRemoveCommand();
1:ec049a0:             protocol.sendToActiveMQ(removeInfo, new ResponseHandler() {
1:ec049a0:                 @Override
1:ec049a0:                 public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:ec049a0:                     // ignore failures..
1:ec049a0:                 }
1:ec049a0:             });
1:ec049a0:         }
1:ec049a0:     }
1:ec049a0: 
1:af999fe:     //----- Durable Subscription management methods --------------------------//
1:af999fe: 
1:af999fe:     protected void deleteDurableSubs(List<SubscriptionInfo> subs) {
1:af999fe:         try {
1:af999fe:             for (SubscriptionInfo sub : subs) {
1:af999fe:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:af999fe:                 rsi.setConnectionId(protocol.getConnectionId());
1:af999fe:                 rsi.setSubscriptionName(sub.getSubcriptionName());
1:af999fe:                 rsi.setClientId(sub.getClientId());
1:af999fe:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:af999fe:                     @Override
1:af999fe:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:af999fe:                         // ignore failures..
1:af999fe:                     }
1:af999fe:                 });
1:af999fe:             }
1:af999fe:         } catch (Throwable e) {
1:af999fe:             LOG.warn("Could not delete the MQTT durable subs.", e);
1:af999fe:         }
1:af999fe:     }
1:af999fe: 
1:af999fe:     protected void restoreDurableSubs(List<SubscriptionInfo> subs) {
1:af999fe:         try {
1:af999fe:             for (SubscriptionInfo sub : subs) {
1:af999fe:                 String name = sub.getSubcriptionName();
1:af999fe:                 String[] split = name.split(":", 2);
1:af999fe:                 QoS qoS = QoS.valueOf(split[0]);
1:af999fe:                 onSubscribe(new Topic(split[1], qoS));
1:af999fe:                 // mark this durable subscription as restored by Broker
1:af999fe:                 restoredDurableSubs.add(MQTTProtocolSupport.convertMQTTToActiveMQ(split[1]));
1:af999fe:             }
1:af999fe:         } catch (IOException e) {
1:af999fe:             LOG.warn("Could not restore the MQTT durable subs.", e);
1:af999fe:         }
1:af999fe:     }
1:af999fe: 
1:af999fe:     protected List<SubscriptionInfo> lookupSubscription(String clientId) throws MQTTProtocolException {
1:af999fe:         List<SubscriptionInfo> result = new ArrayList<SubscriptionInfo>();
1:af999fe:         RegionBroker regionBroker;
1:af999fe: 
1:af999fe:         try {
1:af999fe:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:af999fe:         } catch (Exception e) {
1:af999fe:             throw new MQTTProtocolException("Error recovering durable subscriptions: " + e.getMessage(), false, e);
1:af999fe:         }
1:af999fe: 
1:af999fe:         final TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:af999fe:         List<DurableTopicSubscription> subscriptions = topicRegion.lookupSubscriptions(clientId);
1:af999fe:         if (subscriptions != null) {
1:af999fe:             for (DurableTopicSubscription subscription : subscriptions) {
1:af999fe:                 LOG.debug("Recovered durable sub:{} on connect", subscription);
1:af999fe: 
1:af999fe:                 SubscriptionInfo info = new SubscriptionInfo();
1:af999fe: 
1:af999fe:                 info.setDestination(subscription.getActiveMQDestination());
1:af999fe:                 info.setSubcriptionName(subscription.getSubscriptionKey().getSubscriptionName());
1:af999fe:                 info.setClientId(clientId);
1:af999fe: 
1:af999fe:                 result.add(info);
1:af999fe:             }
1:af999fe:         }
1:af999fe: 
1:af999fe:         return result;
1:af999fe:     }
1:a4fbe70: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:af999fe
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.SubscriptionInfo;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolSupport;
/////////////////////////////////////////////////////////////////////////
1:     protected final Set<String> restoredDurableSubs = Collections.synchronizedSet(new HashSet<String>());
/////////////////////////////////////////////////////////////////////////
1: 
1:     //----- Durable Subscription management methods --------------------------//
1: 
1:     protected void deleteDurableSubs(List<SubscriptionInfo> subs) {
1:         try {
1:             for (SubscriptionInfo sub : subs) {
1:                 RemoveSubscriptionInfo rsi = new RemoveSubscriptionInfo();
1:                 rsi.setConnectionId(protocol.getConnectionId());
1:                 rsi.setSubscriptionName(sub.getSubcriptionName());
1:                 rsi.setClientId(sub.getClientId());
1:                 protocol.sendToActiveMQ(rsi, new ResponseHandler() {
1:                     @Override
1:                     public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                         // ignore failures..
1:                     }
1:                 });
1:             }
1:         } catch (Throwable e) {
1:             LOG.warn("Could not delete the MQTT durable subs.", e);
1:         }
1:     }
1: 
1:     protected void restoreDurableSubs(List<SubscriptionInfo> subs) {
1:         try {
1:             for (SubscriptionInfo sub : subs) {
1:                 String name = sub.getSubcriptionName();
1:                 String[] split = name.split(":", 2);
1:                 QoS qoS = QoS.valueOf(split[0]);
1:                 onSubscribe(new Topic(split[1], qoS));
1:                 // mark this durable subscription as restored by Broker
1:                 restoredDurableSubs.add(MQTTProtocolSupport.convertMQTTToActiveMQ(split[1]));
1:             }
1:         } catch (IOException e) {
1:             LOG.warn("Could not restore the MQTT durable subs.", e);
1:         }
1:     }
1: 
1:     protected List<SubscriptionInfo> lookupSubscription(String clientId) throws MQTTProtocolException {
1:         List<SubscriptionInfo> result = new ArrayList<SubscriptionInfo>();
1:         RegionBroker regionBroker;
1: 
1:         try {
1:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:         } catch (Exception e) {
1:             throw new MQTTProtocolException("Error recovering durable subscriptions: " + e.getMessage(), false, e);
1:         }
1: 
1:         final TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:         List<DurableTopicSubscription> subscriptions = topicRegion.lookupSubscriptions(clientId);
1:         if (subscriptions != null) {
1:             for (DurableTopicSubscription subscription : subscriptions) {
1:                 LOG.debug("Recovered durable sub:{} on connect", subscription);
1: 
1:                 SubscriptionInfo info = new SubscriptionInfo();
1: 
1:                 info.setDestination(subscription.getActiveMQDestination());
1:                 info.setSubcriptionName(subscription.getSubscriptionKey().getSubscriptionName());
1:                 info.setClientId(clientId);
1: 
1:                 result.add(info);
1:             }
1:         }
1: 
1:         return result;
1:     }
commit:fd2805f
/////////////////////////////////////////////////////////////////////////
1:                     if (protocol.version == MQTTProtocolConverter.V3_1_1) {
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     protected final ConcurrentMap<ConsumerId, MQTTSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, MQTTSubscription>();
1:     protected final ConcurrentMap<String, MQTTSubscription> mqttSubscriptionByTopic = new ConcurrentHashMap<String, MQTTSubscription>();
commit:ec049a0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ExceptionResponse;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.transport.mqtt.ResponseHandler;
1: import org.apache.activemq.util.LongSequenceGenerator;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractMQTTSubscriptionStrategy.class);
1: 
1:     private static final byte SUBSCRIBE_ERROR = (byte) 0x80;
1: 
0:     protected final ConcurrentHashMap<ConsumerId, MQTTSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, MQTTSubscription>();
0:     protected final ConcurrentHashMap<String, MQTTSubscription> mqttSubscriptionByTopic = new ConcurrentHashMap<String, MQTTSubscription>();
1: 
1:     protected final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public byte onSubscribe(final Topic topic) throws MQTTProtocolException {
1: 
1:         final String destinationName = topic.name().toString();
1:         final QoS requestedQoS = topic.qos();
1: 
1:         final MQTTSubscription mqttSubscription = mqttSubscriptionByTopic.get(destinationName);
1:         if (mqttSubscription != null) {
1:             if (requestedQoS != mqttSubscription.getQoS()) {
1:                 // remove old subscription as the QoS has changed
1:                 onUnSubscribe(destinationName);
1:             } else {
1:                 try {
1:                     onReSubscribe(mqttSubscription);
1:                 } catch (IOException e) {
1:                     throw new MQTTProtocolException("Failed to find subscription strategy", true, e);
1:                 }
1:                 return (byte) requestedQoS.ordinal();
1:             }
1:         }
1: 
1:         try {
1:             return onSubscribe(destinationName, requestedQoS);
1:         } catch (IOException e) {
1:             throw new MQTTProtocolException("Failed while intercepting subscribe", true, e);
1:         }
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public MQTTSubscription getSubscription(ConsumerId consumerId) {
1:         return subscriptionsByConsumerId.get(consumerId);
1:     }
1: 
1:     protected ConsumerId getNextConsumerId() {
1:         return new ConsumerId(protocol.getSessionId(), consumerIdGenerator.getNextSequenceId());
1:     }
1: 
1:     protected byte doSubscribe(ConsumerInfo consumerInfo, final String topicName, final QoS qoS) throws MQTTProtocolException {
1: 
1:         MQTTSubscription mqttSubscription = new MQTTSubscription(protocol, topicName, qoS, consumerInfo);
1: 
1:         // optimistic add to local maps first to be able to handle commands in onActiveMQCommand
1:         subscriptionsByConsumerId.put(consumerInfo.getConsumerId(), mqttSubscription);
1:         mqttSubscriptionByTopic.put(topicName, mqttSubscription);
1: 
1:         final byte[] qos = {-1};
1:         protocol.sendToActiveMQ(consumerInfo, new ResponseHandler() {
1:             @Override
1:             public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                 // validate subscription request
1:                 if (response.isException()) {
1:                     final Throwable throwable = ((ExceptionResponse) response).getException();
1:                     LOG.warn("Error subscribing to {}", topicName, throwable);
1:                     qos[0] = SUBSCRIBE_ERROR;
1:                 } else {
1:                     qos[0] = (byte) qoS.ordinal();
1:                 }
1:             }
1:         });
1: 
1:         if (qos[0] == SUBSCRIBE_ERROR) {
1:             // remove from local maps if subscribe failed
1:             subscriptionsByConsumerId.remove(consumerInfo.getConsumerId());
1:             mqttSubscriptionByTopic.remove(topicName);
1:         }
1: 
1:         return qos[0];
1:     }
1: 
1:     public void doUnSubscribe(MQTTSubscription subscription) {
1:         mqttSubscriptionByTopic.remove(subscription.getTopicName());
1:         ConsumerInfo info = subscription.getConsumerInfo();
1:         if (info != null) {
1:             subscriptionsByConsumerId.remove(info.getConsumerId());
1: 
1:             RemoveInfo removeInfo = info.createRemoveCommand();
1:             protocol.sendToActiveMQ(removeInfo, new ResponseHandler() {
1:                 @Override
1:                 public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
1:                     // ignore failures..
1:                 }
1:             });
1:         }
1:     }
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt.strategy;
1: 
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.PrefetchSubscription;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicRegion;
1: import org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1: 
1: /**
1:  * Abstract implementation of the {@link MQTTSubscriptionStrategy} interface providing
1:  * the base functionality that is common to most implementations.
1:  */
1: public abstract class AbstractMQTTSubscriptionStrategy implements MQTTSubscriptionStrategy, BrokerServiceAware {
1: 
1:     protected MQTTProtocolConverter protocol;
1:     protected BrokerService brokerService;
1: 
1:     @Override
1:     public void initialize(MQTTProtocolConverter protocol) throws MQTTProtocolException {
1:         setProtocolConverter(protocol);
1:     }
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: 
1:     @Override
1:     public void setProtocolConverter(MQTTProtocolConverter parent) {
1:         this.protocol = parent;
1:     }
1: 
1:     @Override
1:     public MQTTProtocolConverter getProtocolConverter() {
1:         return protocol;
1:     }
1: 
1:     @Override
1:     public void onReSubscribe(MQTTSubscription mqttSubscription) throws MQTTProtocolException {
1:         String topicName = mqttSubscription.getTopicName();
1: 
1:         // get TopicRegion
1:         RegionBroker regionBroker;
1:         try {
1:             regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:         } catch (Exception e) {
1:             throw new MQTTProtocolException("Error subscribing to " + topicName + ": " + e.getMessage(), false, e);
1:         }
1:         final TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1: 
1:         final ConsumerInfo consumerInfo = mqttSubscription.getConsumerInfo();
1:         final ConsumerId consumerId = consumerInfo.getConsumerId();
1: 
1:         // use actual client id used to create connection to lookup connection
1:         // context
0:         final String connectionInfoClientId = protocol.getClientId();
1:         final ConnectionContext connectionContext = regionBroker.getConnectionContext(connectionInfoClientId);
1: 
1:         // get all matching Topics
1:         final Set<org.apache.activemq.broker.region.Destination> matchingDestinations =
1:             topicRegion.getDestinations(mqttSubscription.getDestination());
1:         for (org.apache.activemq.broker.region.Destination dest : matchingDestinations) {
1: 
1:             // recover retroactive messages for matching subscription
1:             for (Subscription subscription : dest.getConsumers()) {
1:                 if (subscription.getConsumerInfo().getConsumerId().equals(consumerId)) {
1:                     try {
1:                         if (dest instanceof org.apache.activemq.broker.region.Topic) {
1:                             ((org.apache.activemq.broker.region.Topic) dest).recoverRetroactiveMessages(connectionContext, subscription);
1:                         } else if (dest instanceof VirtualTopicInterceptor) {
1:                             ((VirtualTopicInterceptor) dest).getTopic().recoverRetroactiveMessages(connectionContext, subscription);
1:                         }
1:                         if (subscription instanceof PrefetchSubscription) {
1:                             // request dispatch for prefetch subs
1:                             PrefetchSubscription prefetchSubscription = (PrefetchSubscription) subscription;
1:                             prefetchSubscription.dispatchPending();
1:                         }
1:                     } catch (Exception e) {
1:                         throw new MQTTProtocolException("Error recovering retained messages for " + dest.getName() + ": " + e.getMessage(), false, e);
1:                     }
1:                     break;
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public ActiveMQDestination onSend(String topicName) {
1:         return new ActiveMQTopic(topicName);
1:     }
1: 
1:     @Override
1:     public String onSend(ActiveMQDestination destination) {
1:         return destination.getPhysicalName();
1:     }
1: 
1:     @Override
1:     public boolean isControlTopic(ActiveMQDestination destination) {
1:         return destination.getPhysicalName().startsWith("$");
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a4fbe70
/////////////////////////////////////////////////////////////////////////
1:                     // version 3.1 don't supports silent fail
1:                     // version 3.1.1 send "error" qos
0:                     if (protocol.version == protocol.V3_1_1) {
0:                         qos[0] = SUBSCRIBE_ERROR;
1:                     } else {
1:                         qos[0] = (byte) qoS.ordinal();
1:                     }
commit:7948d69
/////////////////////////////////////////////////////////////////////////
1:         String connectionInfoClientId = protocol.getClientId();
1:         // for zero-byte client ids we used connection id
1:         if (connectionInfoClientId == null || connectionInfoClientId.isEmpty()) {
1:             connectionInfoClientId = protocol.getConnectionId().toString();
1:         }
============================================================================