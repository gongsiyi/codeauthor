1:60ad053: /**
1:60ad053:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:60ad053:  * contributor license agreements.  See the NOTICE file distributed with
1:60ad053:  * this work for additional information regarding copyright ownership.
1:60ad053:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:60ad053:  * (the "License"); you may not use this file except in compliance with
1:60ad053:  * the License.  You may obtain a copy of the License at
1:60ad053:  *
1:60ad053:  *      http://www.apache.org/licenses/LICENSE-2.0
1:60ad053:  *
1:60ad053:  * Unless required by applicable law or agreed to in writing, software
1:60ad053:  * distributed under the License is distributed on an "AS IS" BASIS,
1:60ad053:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:60ad053:  * See the License for the specific language governing permissions and
1:60ad053:  * limitations under the License.
1:60ad053:  */
1:60ad053: package org.apache.activemq.usecases;
4:60ad053: 
1:60ad053: import java.util.ArrayList;
1:d25c52c: import java.util.Arrays;
1:60ad053: import java.util.Random;
1:60ad053: import java.util.concurrent.ExecutorService;
1:60ad053: import java.util.concurrent.Executors;
1:60ad053: import java.util.concurrent.TimeUnit;
1:60ad053: import java.util.concurrent.atomic.AtomicLong;
1:60ad053: import javax.jms.Connection;
1:60ad053: import javax.jms.Destination;
1:60ad053: import javax.jms.JMSException;
1:60ad053: import javax.jms.Message;
1:60ad053: import javax.jms.MessageConsumer;
1:60ad053: import javax.jms.MessageProducer;
1:60ad053: import javax.jms.Session;
1:60ad053: import javax.jms.TextMessage;
1:60ad053: import org.apache.activemq.ActiveMQConnectionFactory;
1:60ad053: import org.apache.activemq.broker.BrokerService;
1:60ad053: import org.apache.activemq.broker.TransportConnector;
1:60ad053: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:60ad053: import org.apache.activemq.broker.region.policy.PolicyMap;
1:60ad053: import org.apache.activemq.command.ActiveMQQueue;
1:60ad053: import org.junit.After;
1:60ad053: import org.junit.Before;
1:60ad053: import org.junit.Test;
1:60ad053: import org.junit.runner.RunWith;
1:d25c52c: import org.junit.runners.Parameterized;
1:60ad053: import org.slf4j.Logger;
1:60ad053: import org.slf4j.LoggerFactory;
1:60ad053: 
1:60ad053: 
1:60ad053: import static org.junit.Assert.assertEquals;
1:60ad053: import static org.junit.Assert.assertTrue;
1:60ad053: 
1:d25c52c: @RunWith(Parameterized.class)
1:60ad053: public class MessageGroupReconnectDistributionTest {
1:60ad053:     public static final Logger LOG = LoggerFactory.getLogger(MessageGroupReconnectDistributionTest.class);
1:a876a34:     final Random random = new Random();
1:60ad053:     protected Connection connection;
1:60ad053:     protected Session session;
1:60ad053:     protected MessageProducer producer;
1:d25c52c:     protected ActiveMQQueue destination = new ActiveMQQueue("GroupQ");
1:60ad053:     protected TransportConnector connector;
1:d25c52c:     ActiveMQConnectionFactory connFactory;
1:a876a34:     BrokerService broker;
1:d25c52c:     int numMessages = 10000;
1:d25c52c:     int groupSize = 10;
1:d25c52c:     int batchSize = 20;
1:d25c52c: 
1:d25c52c:     @Parameterized.Parameter(0)
1:d25c52c:     public int numConsumers = 4;
1:d25c52c: 
1:d25c52c:     @Parameterized.Parameter(1)
1:d25c52c:     public boolean consumerPriority = true;
1:d25c52c: 
1:d25c52c:     @Parameterized.Parameters(name="numConsumers={0},consumerPriority={1}")
1:d25c52c:     public static Iterable<Object[]> combinations() {
1:d25c52c:         return Arrays.asList(new Object[][]{{4, true}, {10, true}});
1:d25c52c:     }
1:60ad053: 
1:60ad053:     @Before
1:60ad053:     public void setUp() throws Exception {
1:60ad053:         broker = createBroker();
1:60ad053:         broker.start();
1:d25c52c:         connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=200");
1:d25c52c:         connFactory.setWatchTopicAdvisories(false);
1:60ad053:         connection = connFactory.createConnection();
1:60ad053:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:60ad053:         producer = session.createProducer(destination);
1:60ad053:         connection.start();
2:60ad053:     }
1:60ad053: 
1:60ad053:     protected BrokerService createBroker() throws Exception {
1:60ad053:         BrokerService service = new BrokerService();
1:d25c52c:         service.setAdvisorySupport(false);
1:60ad053:         service.setPersistent(false);
1:60ad053:         service.setUseJmx(true);
1:60ad053: 
1:60ad053:         PolicyMap policyMap = new PolicyMap();
1:60ad053:         PolicyEntry policy = new PolicyEntry();
1:d25c52c:         policy.setUseConsumerPriority(consumerPriority);
1:d25c52c:         policy.setMessageGroupMapFactoryType("cached?cacheSize=" + (numConsumers - 1));
1:60ad053:         policyMap.setDefaultEntry(policy);
1:60ad053:         service.setDestinationPolicy(policyMap);
1:60ad053: 
1:60ad053:         connector = service.addConnector("tcp://localhost:0");
1:60ad053:         return service;
1:60ad053:     }
1:60ad053: 
1:60ad053:     @After
1:60ad053:     public void tearDown() throws Exception {
1:60ad053:         producer.close();
1:60ad053:         session.close();
1:60ad053:         connection.close();
1:60ad053:         broker.stop();
1:60ad053:     }
1:60ad053: 
1:a876a34:     @Test(timeout = 5 * 60 * 1000)
1:60ad053:     public void testReconnect() throws Exception {
1:60ad053: 
1:60ad053:         final AtomicLong totalConsumed = new AtomicLong(0);
1:60ad053: 
1:d25c52c:         ExecutorService executorService = Executors.newFixedThreadPool(numConsumers);
1:60ad053:         final ArrayList<AtomicLong> consumedCounters = new ArrayList<AtomicLong>(numConsumers);
1:d25c52c:         final ArrayList<AtomicLong> batchCounters = new ArrayList<AtomicLong>(numConsumers);
1:d25c52c: 
1:a876a34:         for (int i = 0; i < numConsumers; i++) {
1:60ad053:             consumedCounters.add(new AtomicLong(0l));
1:d25c52c:             batchCounters.add(new AtomicLong(0l));
1:d25c52c: 
1:60ad053:             final int id = i;
1:60ad053:             executorService.submit(new Runnable() {
1:d25c52c:                 int getBatchSize() {
1:d25c52c:                     return (id + 1) * batchSize;
1:d25c52c:                 }
1:60ad053: 
1:60ad053:                 @Override
1:60ad053:                 public void run() {
1:60ad053:                     try {
1:d25c52c:                         Session connectionSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d25c52c:                         int batchSize = getBatchSize();
1:d25c52c:                         MessageConsumer messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:60ad053: 
1:60ad053:                         Message message;
1:60ad053:                         AtomicLong consumed = consumedCounters.get(id);
1:d25c52c:                         AtomicLong batches = batchCounters.get(id);
1:60ad053: 
1:60ad053:                         LOG.info("Consumer: " + id + ", batchSize:" + batchSize + ", totalConsumed:" + totalConsumed.get() + ", consumed:" + consumed.get());
1:60ad053: 
1:60ad053:                         while (totalConsumed.get() < numMessages) {
1:60ad053: 
1:60ad053:                             message = messageConsumer.receive(10000);
1:60ad053: 
1:60ad053:                             if (message == null) {
1:60ad053:                                 LOG.info("Consumer: " + id + ", batchSize:" + batchSize + ", null message (totalConsumed:" + totalConsumed.get() + ") consumed:" + consumed.get());
1:60ad053:                                 messageConsumer.close();
1:60ad053: 
1:60ad053:                                 if (totalConsumed.get() == numMessages) {
1:60ad053:                                     break;
1:60ad053:                                 } else {
1:d25c52c:                                     batchSize = getBatchSize();
1:d25c52c:                                     messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:d25c52c:                                     batches.incrementAndGet();
1:60ad053:                                     continue;
1:60ad053:                                 }
1:60ad053:                             }
1:60ad053: 
1:60ad053:                             consumed.incrementAndGet();
1:60ad053:                             totalConsumed.incrementAndGet();
1:60ad053: 
1:d25c52c:                             if (consumed.get() > 0 && consumed.intValue() % batchSize == 0) {
1:60ad053:                                 messageConsumer.close();
1:d25c52c:                                 batchSize = getBatchSize();
1:d25c52c:                                 messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:d25c52c:                                 batches.incrementAndGet();
1:60ad053:                             }
1:60ad053:                         }
1:60ad053:                     } catch (Exception e) {
1:60ad053:                         e.printStackTrace();
1:60ad053:                     }
1:60ad053:                 }
1:60ad053:             });
1:d25c52c:             TimeUnit.MILLISECONDS.sleep(200);
1:60ad053:         }
1:60ad053: 
1:d25c52c:         TimeUnit.SECONDS.sleep(1);
1:d25c52c:         produceMessages(numMessages);
1:d25c52c: 
1:60ad053:         executorService.shutdown();
1:60ad053:         assertTrue("threads done on time", executorService.awaitTermination(10, TimeUnit.MINUTES));
1:60ad053: 
1:60ad053:         assertEquals("All consumed", numMessages, totalConsumed.intValue());
1:60ad053: 
1:60ad053:         LOG.info("Distribution: " + consumedCounters);
1:d25c52c:         LOG.info("Batches: " + batchCounters);
1:60ad053: 
1:60ad053:         double max = consumedCounters.get(0).longValue() * 1.5;
1:60ad053:         double min = consumedCounters.get(0).longValue() * 0.5;
1:60ad053: 
1:60ad053:         for (AtomicLong l : consumedCounters) {
1:60ad053:             assertTrue("Even +/- 50% distribution on consumed:" + consumedCounters + ", outlier:" + l.get(),
1:60ad053:                     l.longValue() < max && l.longValue() > min);
1:60ad053:         }
1:60ad053:     }
1:60ad053: 
1:d25c52c:     private Destination destWithPrefetch(ActiveMQQueue destination) throws Exception {
1:d25c52c:         return destination;
1:d25c52c:     }
1:d25c52c: 
1:60ad053:     private void produceMessages(int numMessages) throws JMSException {
1:919099b:         int groupID=0;
1:60ad053:         for (int i = 0; i < numMessages; i++) {
1:d25c52c:             if (i>0 && i%groupSize==0) {
1:919099b:                 groupID++;
1:919099b:             }
1:a876a34:             TextMessage msga = session.createTextMessage("hello " + i);
1:919099b:             msga.setStringProperty("JMSXGroupID", "Group-"+groupID);
1:60ad053:             producer.send(msga);
1:60ad053:         }
1:60ad053:     }
1:60ad053: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d25c52c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runners.Parameterized;
/////////////////////////////////////////////////////////////////////////
1: @RunWith(Parameterized.class)
1:     protected ActiveMQQueue destination = new ActiveMQQueue("GroupQ");
1:     ActiveMQConnectionFactory connFactory;
1:     int numMessages = 10000;
1:     int groupSize = 10;
1:     int batchSize = 20;
1: 
1:     @Parameterized.Parameter(0)
1:     public int numConsumers = 4;
1: 
1:     @Parameterized.Parameter(1)
1:     public boolean consumerPriority = true;
1: 
1:     @Parameterized.Parameters(name="numConsumers={0},consumerPriority={1}")
1:     public static Iterable<Object[]> combinations() {
1:         return Arrays.asList(new Object[][]{{4, true}, {10, true}});
1:     }
1:         connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=200");
1:         connFactory.setWatchTopicAdvisories(false);
1:         service.setAdvisorySupport(false);
1:         policy.setUseConsumerPriority(consumerPriority);
1:         policy.setMessageGroupMapFactoryType("cached?cacheSize=" + (numConsumers - 1));
/////////////////////////////////////////////////////////////////////////
1:         ExecutorService executorService = Executors.newFixedThreadPool(numConsumers);
1:         final ArrayList<AtomicLong> batchCounters = new ArrayList<AtomicLong>(numConsumers);
1: 
1:             batchCounters.add(new AtomicLong(0l));
1: 
1:                 int getBatchSize() {
1:                     return (id + 1) * batchSize;
1:                 }
1:                         Session connectionSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         int batchSize = getBatchSize();
1:                         MessageConsumer messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:                         AtomicLong batches = batchCounters.get(id);
/////////////////////////////////////////////////////////////////////////
1:                                     batchSize = getBatchSize();
1:                                     messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:                                     batches.incrementAndGet();
1:                             if (consumed.get() > 0 && consumed.intValue() % batchSize == 0) {
1:                                 batchSize = getBatchSize();
1:                                 messageConsumer = connectionSession.createConsumer(destWithPrefetch(destination));
1:                                 batches.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1:             TimeUnit.MILLISECONDS.sleep(200);
1:         TimeUnit.SECONDS.sleep(1);
1:         produceMessages(numMessages);
1: 
1:         LOG.info("Batches: " + batchCounters);
/////////////////////////////////////////////////////////////////////////
1:     private Destination destWithPrefetch(ActiveMQQueue destination) throws Exception {
1:         return destination;
1:     }
1: 
1:             if (i>0 && i%groupSize==0) {
commit:919099b
/////////////////////////////////////////////////////////////////////////
1:         int groupID=0;
0:             // groups of 10
0:             if (i>0 && i%10==0) {
1:                 groupID++;
1:             }
1:             msga.setStringProperty("JMSXGroupID", "Group-"+groupID);
commit:a876a34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     final Random random = new Random();
1:     BrokerService broker;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 5 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numConsumers; i++) {
/////////////////////////////////////////////////////////////////////////
1:             TextMessage msga = session.createTextMessage("hello " + i);
commit:60ad053
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
1: import java.util.Random;
0: import java.util.Set;
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
0: @RunWith(BlockJUnit4ClassRunner.class)
1: public class MessageGroupReconnectDistributionTest {
1:     public static final Logger LOG = LoggerFactory.getLogger(MessageGroupReconnectDistributionTest.class);
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageProducer producer;
0:     protected Destination destination;
1: 
0:     BrokerService broker;
1:     protected TransportConnector connector;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
0:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector.getConnectUri() + "?jms.prefetchPolicy.all=30");
1:         connection = connFactory.createConnection();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         destination = new ActiveMQQueue("GroupQ");
1:         producer = session.createProducer(destination);
1:         connection.start();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setUseConsumerPriority(true);
0:         policy.setMessageGroupMapFactoryType("cached");
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         producer.close();
1:         session.close();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
0:     final Random random = new Random();
0:     public int getBatchSize(int bound) throws Exception {
0:         return bound + random.nextInt(bound);
1:     }
1: 
0:     @Test(timeout = 20 * 60 * 1000)
1:     public void testReconnect() throws Exception {
1: 
0:         final int numMessages = 50000;
0:         final int numConsumers = 10;
1:         final AtomicLong totalConsumed = new AtomicLong(0);
1: 
0:         produceMessages(numMessages);
1: 
0:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         final ArrayList<AtomicLong> consumedCounters = new ArrayList<AtomicLong>(numConsumers);
0:         for (int i=0;i<numConsumers; i++) {
1:             consumedCounters.add(new AtomicLong(0l));
1:             final int id = i;
1:             executorService.submit(new Runnable() {
0:                 Session connectionSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:                 @Override
1:                 public void run() {
1:                     try {
0:                         MessageConsumer messageConsumer = connectionSession.createConsumer(destination);
1: 
0:                         long batchSize = getBatchSize(numConsumers);
1:                         Message message;
1:                         AtomicLong consumed = consumedCounters.get(id);
1: 
1:                         LOG.info("Consumer: " + id + ", batchSize:" + batchSize + ", totalConsumed:" + totalConsumed.get() + ", consumed:" + consumed.get());
1: 
1:                         while (totalConsumed.get() < numMessages) {
1: 
1:                             message = messageConsumer.receive(10000);
1: 
1:                             if (message == null) {
1:                                 LOG.info("Consumer: " + id + ", batchSize:" + batchSize + ", null message (totalConsumed:" + totalConsumed.get() + ") consumed:" + consumed.get());
1:                                 messageConsumer.close();
1: 
1:                                 if (totalConsumed.get() == numMessages) {
1:                                     break;
1:                                 } else {
0:                                     messageConsumer = connectionSession.createConsumer(destination);
1:                                     continue;
1:                                 }
1:                             }
1: 
0:                             message.acknowledge();
1:                             consumed.incrementAndGet();
1:                             totalConsumed.incrementAndGet();
1: 
0:                             if (consumed.get() > 0 && consumed.longValue() % batchSize == 0) {
1:                                 messageConsumer.close();
0:                                 messageConsumer = connectionSession.createConsumer(destination);
0:                                 batchSize = getBatchSize(numConsumers);
1:                             }
1:                         }
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("threads done on time", executorService.awaitTermination(10, TimeUnit.MINUTES));
1: 
1:         assertEquals("All consumed", numMessages, totalConsumed.intValue());
1: 
1:         LOG.info("Distribution: " + consumedCounters);
1: 
1:         double max = consumedCounters.get(0).longValue() * 1.5;
1:         double min = consumedCounters.get(0).longValue() * 0.5;
1: 
1:         for (AtomicLong l : consumedCounters) {
1:             assertTrue("Even +/- 50% distribution on consumed:" + consumedCounters + ", outlier:" + l.get(),
1:                     l.longValue() < max && l.longValue() > min);
1:         }
1:     }
1: 
1:     private void produceMessages(int numMessages) throws JMSException {
1:         for (int i = 0; i < numMessages; i++) {
0:             TextMessage msga = session.createTextMessage("hello " +i);
0:             msga.setStringProperty("JMSXGroupID", msga.getText());
1:             producer.send(msga);
1:         }
1:     }
1: }
============================================================================