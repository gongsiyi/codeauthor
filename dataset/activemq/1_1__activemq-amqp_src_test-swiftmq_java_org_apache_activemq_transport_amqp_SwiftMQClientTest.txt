1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
2:cdd5150: 
1:cdd5150: import com.swiftmq.amqp.AMQPContext;
1:cdd5150: import com.swiftmq.amqp.v100.client.*;
1:cdd5150: import com.swiftmq.amqp.v100.generated.messaging.message_format.AmqpValue;
1:cdd5150: import com.swiftmq.amqp.v100.messaging.AMQPMessage;
1:cdd5150: import com.swiftmq.amqp.v100.types.AMQPString;
1:cdd5150: import com.swiftmq.amqp.v100.types.AMQPType;
1:cdd5150: import org.junit.Test;
1:e7137b7: import static org.junit.Assert.*;
1:cdd5150: 
1:cdd5150: /**
1:cdd5150:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:cdd5150:  */
1:7fe30bc: public class SwiftMQClientTest extends AmqpTestSupport {
1:cdd5150: 
1:cdd5150:     @Test
1:cdd5150:     public void testSendReceive() throws Exception {
1:cdd5150: 
1:cdd5150:         String queue = "testqueue";
1:72d72ab:         int nMsgs = 100;
1:72d72ab:         final String dataFormat = "%01024d";
1:72d72ab: 
1:cdd5150:         int qos = QoS.AT_MOST_ONCE;
1:cdd5150:         AMQPContext ctx = new AMQPContext(AMQPContext.CLIENT);
1:cdd5150: 
1:cdd5150:         try {
1:cdd5150: 
1:cdd5150:             Connection connection = new Connection(ctx, "127.0.0.1", port, false);
1:cdd5150:             connection.setContainerId("client");
1:cdd5150:             connection.setIdleTimeout(-1);
1:cdd5150:             connection.setMaxFrameSize(1024 * 4);
1:cdd5150:             connection.setExceptionListener(new ExceptionListener() {
1:cdd5150:                 public void onException(Exception e) {
1:cdd5150:                     e.printStackTrace();
1:cdd5150:                 }
1:cdd5150:             });
1:cdd5150:             connection.connect();
1:cdd5150:             {
1:cdd5150: 
1:cdd5150:                 Session session = connection.createSession(10, 10);
1:cdd5150:                 Producer p = session.createProducer(queue, qos);
1:e7137b7:                 for (int i = 0; i < nMsgs; i++) {
1:cdd5150:                     AMQPMessage msg = new AMQPMessage();
1:e7137b7:                     System.out.println("Sending " + i);
1:72d72ab:                     msg.setAmqpValue(new AmqpValue(new AMQPString(String.format(dataFormat, i))));
1:cdd5150:                     p.send(msg);
1:cdd5150:                 }
1:cdd5150:                 p.close();
1:cdd5150:                 session.close();
1:cdd5150:             }
1:72d72ab:             System.out.println("=======================================================================================");
1:72d72ab:             System.out.println(" receiving ");
1:72d72ab:             System.out.println("=======================================================================================");
1:e7137b7:             {
1:e7137b7:                 Session session = connection.createSession(10, 10);
1:e7137b7:                 Consumer c = session.createConsumer(queue, 100, qos, true, null);
1:e7137b7: 
1:e7137b7:                 // Receive messages non-transacted
1:72d72ab:                 int i = 0;
1:72d72ab:                 while ( i < nMsgs) {
1:e7137b7:                     AMQPMessage msg = c.receive();
1:72d72ab:                     if( msg!=null ) {
1:72d72ab:                         final AMQPType value = msg.getAmqpValue().getValue();
1:72d72ab:                         if (value instanceof AMQPString) {
1:72d72ab:                             String s = ((AMQPString) value).getValue();
1:72d72ab:                             assertEquals(String.format(dataFormat, i), s);
1:72d72ab:                             System.out.println("Received: " + i);
1:72d72ab:                         }
1:72d72ab:                         if (!msg.isSettled())
1:72d72ab:                             msg.accept();
1:72d72ab:                         i++;
1:e7137b7:                     }
1:e7137b7:                 }
1:e7137b7:                 c.close();
1:e7137b7:                 session.close();
1:e7137b7:             }
1:cdd5150:             connection.close();
1:cdd5150:         } catch (Exception e) {
1:cdd5150:             e.printStackTrace();
1:cdd5150:         }
1:7fe30bc: 
1:cdd5150:     }
1:cdd5150: 
1:cdd5150: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:536e782
commit:72d72ab
/////////////////////////////////////////////////////////////////////////
1:         int nMsgs = 100;
1:         final String dataFormat = "%01024d";
1: 
/////////////////////////////////////////////////////////////////////////
1:                     msg.setAmqpValue(new AmqpValue(new AMQPString(String.format(dataFormat, i))));
1:             System.out.println("=======================================================================================");
1:             System.out.println(" receiving ");
1:             System.out.println("=======================================================================================");
1:                 int i = 0;
1:                 while ( i < nMsgs) {
1:                     if( msg!=null ) {
1:                         final AMQPType value = msg.getAmqpValue().getValue();
1:                         if (value instanceof AMQPString) {
1:                             String s = ((AMQPString) value).getValue();
1:                             assertEquals(String.format(dataFormat, i), s);
1:                             System.out.println("Received: " + i);
1:                         }
1:                         if (!msg.isSettled())
1:                             msg.accept();
1:                         i++;
commit:e7137b7
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1:                     System.out.println("Sending " + i);
0:                     msg.setAmqpValue(new AmqpValue(new AMQPString(String.format("%010d", i))));
1:             {
1:                 Session session = connection.createSession(10, 10);
1:                 Consumer c = session.createConsumer(queue, 100, qos, true, null);
1: 
1:                 // Receive messages non-transacted
1:                 for (int i = 0; i < nMsgs; i++) {
1:                     AMQPMessage msg = c.receive();
0:                     final AMQPType value = msg.getAmqpValue().getValue();
0:                     if (value instanceof AMQPString) {
0:                         String s = ((AMQPString) value).getValue();
0:                         assertEquals(String.format("%010d", i), s);
0:                         System.out.println("Received: " + i);
1:                     }
0:                     if (!msg.isSettled())
0:                         msg.accept();
1:                 }
1:                 c.close();
1:                 session.close();
1:             }
commit:7fe30bc
/////////////////////////////////////////////////////////////////////////
1: public class SwiftMQClientTest extends AmqpTestSupport {
/////////////////////////////////////////////////////////////////////////
1: 
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import com.swiftmq.amqp.AMQPContext;
1: import com.swiftmq.amqp.v100.client.*;
1: import com.swiftmq.amqp.v100.generated.messaging.message_format.AmqpValue;
1: import com.swiftmq.amqp.v100.messaging.AMQPMessage;
1: import com.swiftmq.amqp.v100.types.AMQPString;
1: import com.swiftmq.amqp.v100.types.AMQPType;
1: import org.junit.Test;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
0: public class SwiftMQClientTest extends AmqpTest {
1: 
1:     @Test
1:     public void testSendReceive() throws Exception {
1: 
1:         String queue = "testqueue";
0:         int nMsgs = 1;
1:         int qos = QoS.AT_MOST_ONCE;
1:         AMQPContext ctx = new AMQPContext(AMQPContext.CLIENT);
1: 
1:         try {
1: 
1:             Connection connection = new Connection(ctx, "127.0.0.1", port, false);
1:             connection.setContainerId("client");
1:             connection.setIdleTimeout(-1);
1:             connection.setMaxFrameSize(1024 * 4);
1:             connection.setExceptionListener(new ExceptionListener() {
1:                 public void onException(Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             });
1:             connection.connect();
1:             {
0:                 String data = String.format("%010d", 0);
1: 
1:                 Session session = connection.createSession(10, 10);
1:                 Producer p = session.createProducer(queue, qos);
0:                 for (int i = 0; i < nMsgs; i++) {
1:                     AMQPMessage msg = new AMQPMessage();
0:                     String s = "Message #" + (i + 1);
0:                     System.out.println("Sending " + s);
0:                     msg.setAmqpValue(new AmqpValue(new AMQPString(s + ", data: " + data)));
1:                     p.send(msg);
1:                 }
1:                 p.close();
1:                 session.close();
1:             }
0: //            {
0: //                Session session = connection.createSession(10, 10);
0: //                Consumer c = session.createConsumer(queue, 100, qos, true, null);
0: //
0: //                // Receive messages non-transacted
0: //                for (int i = 0; i < nMsgs; i++) {
0: //                    AMQPMessage msg = c.receive();
0: //                    final AMQPType value = msg.getAmqpValue().getValue();
0: //                    if (value instanceof AMQPString) {
0: //                        AMQPString s = (AMQPString) value;
0: //                        System.out.println("Received: " + s.getValue());
0: //                    }
0: //                    if (!msg.isSettled())
0: //                        msg.accept();
0: //                }
0: //                c.close();
0: //                session.close();
0: //            }
1:             connection.close();
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1: 
1:     }
1: 
1: }
============================================================================