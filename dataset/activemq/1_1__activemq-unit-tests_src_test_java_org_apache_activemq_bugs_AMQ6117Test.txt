1:5b73ffa: /*
1:5b73ffa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5b73ffa:  * contributor license agreements.  See the NOTICE file distributed with
1:5b73ffa:  * this work for additional information regarding copyright ownership.
1:5b73ffa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5b73ffa:  * (the "License"); you may not use this file except in compliance with
1:5b73ffa:  * the License.  You may obtain a copy of the License at
1:5b73ffa:  *
1:5b73ffa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5b73ffa:  *
1:5b73ffa:  * Unless required by applicable law or agreed to in writing, software
1:5b73ffa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5b73ffa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5b73ffa:  * See the License for the specific language governing permissions and
1:5b73ffa:  * limitations under the License.
1:5b73ffa:  */
1:5b73ffa: package org.apache.activemq.bugs;
1:5b73ffa: 
1:5b73ffa: import static org.junit.Assert.assertEquals;
1:5b73ffa: import static org.junit.Assert.assertFalse;
1:5b73ffa: import static org.junit.Assert.assertTrue;
1:5b73ffa: 
1:5b73ffa: import java.util.ArrayList;
1:5b73ffa: import java.util.Deque;
1:5b73ffa: import java.util.LinkedList;
1:5b73ffa: import java.util.List;
1:5b73ffa: 
1:5b73ffa: import javax.jms.Connection;
1:5b73ffa: import javax.jms.DeliveryMode;
1:5b73ffa: import javax.jms.JMSException;
1:5b73ffa: import javax.jms.Message;
1:5b73ffa: import javax.jms.MessageProducer;
1:5b73ffa: import javax.jms.Queue;
1:5b73ffa: import javax.jms.Session;
1:5b73ffa: import javax.management.MalformedObjectNameException;
1:5b73ffa: import javax.management.ObjectName;
1:5b73ffa: import javax.management.openmbean.CompositeData;
1:5b73ffa: 
1:5b73ffa: import org.apache.activemq.ActiveMQConnectionFactory;
1:5b73ffa: import org.apache.activemq.broker.BrokerService;
1:5b73ffa: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:5b73ffa: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:5b73ffa: import org.apache.activemq.broker.region.policy.PolicyMap;
1:5b73ffa: import org.apache.activemq.util.Wait;
1:5b73ffa: import org.junit.After;
1:5b73ffa: import org.junit.Before;
1:5b73ffa: import org.junit.Test;
1:5b73ffa: import org.slf4j.Logger;
1:5b73ffa: import org.slf4j.LoggerFactory;
1:5b73ffa: 
1:5b73ffa: /**
1:5b73ffa:  *
1:5b73ffa:  */
1:5b73ffa: public class AMQ6117Test {
1:5b73ffa: 
1:5b73ffa:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6117Test.class);
1:5b73ffa: 
1:5b73ffa:     private BrokerService broker;
1:5b73ffa: 
1:5b73ffa:     @Test
1:5b73ffa:     public void testViewIsStale() throws Exception {
1:5b73ffa: 
1:5b73ffa:         final int MSG_COUNT = 10;
1:5b73ffa: 
1:5b73ffa:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:5b73ffa:         Connection connection = cf.createConnection();
1:5b73ffa:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5b73ffa:         Queue queue = session.createQueue("Test-Queue");
1:5b73ffa:         Queue dlq = session.createQueue("ActiveMQ.DLQ");
1:5b73ffa: 
1:5b73ffa:         MessageProducer producer = session.createProducer(queue);
1:5b73ffa: 
1:5b73ffa:         // Ensure there is a DLQ in existence to start.
1:5b73ffa:         session.createProducer(dlq);
1:5b73ffa: 
1:5b73ffa:         for (int i = 0; i < MSG_COUNT; ++i) {
1:5b73ffa:             producer.send(session.createMessage(), DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, 1000);
1:5b73ffa:         }
1:5b73ffa: 
1:5b73ffa:         final QueueViewMBean queueView = getProxyToQueue(dlq.getQueueName());
1:5b73ffa: 
1:5b73ffa:         assertTrue("Message should be DLQ'd", Wait.waitFor(new Wait.Condition() {
1:5b73ffa: 
1:5b73ffa:             @Override
1:5b73ffa:             public boolean isSatisified() throws Exception {
1:5b73ffa:                 return queueView.getQueueSize() == MSG_COUNT;
1:5b73ffa:             }
1:5b73ffa:         }));
1:5b73ffa: 
1:5b73ffa:         LOG.info("DLQ has captured all expired messages");
1:5b73ffa: 
1:5b73ffa:         Deque<String> browsed = new LinkedList<String>();
1:5b73ffa:         CompositeData[] elements = queueView.browse();
1:5b73ffa:         assertEquals(MSG_COUNT, elements.length);
1:5b73ffa: 
1:5b73ffa:         for (CompositeData element : elements) {
1:5b73ffa:             String messageID = (String) element.get("JMSMessageID");
1:5b73ffa:             LOG.debug("MessageID: {}", messageID);
1:5b73ffa:             browsed.add(messageID);
1:5b73ffa:         }
1:5b73ffa: 
1:5b73ffa:         String removedMsgId = browsed.removeFirst();
1:5b73ffa:         assertTrue(queueView.removeMessage(removedMsgId));
1:5b73ffa:         assertEquals(MSG_COUNT - 1, queueView.getQueueSize());
1:5b73ffa:         elements = queueView.browse();
1:5b73ffa:         assertEquals(MSG_COUNT - 1, elements.length);
1:5b73ffa: 
1:5b73ffa:         for (CompositeData element : elements) {
1:5b73ffa:             String messageID = (String) element.get("JMSMessageID");
1:5b73ffa:             LOG.debug("MessageID: {}", messageID);
1:5b73ffa:             assertFalse(messageID.equals(removedMsgId));
1:5b73ffa:         }
1:5b73ffa:     }
1:5b73ffa: 
1:5b73ffa:     @Before
1:5b73ffa:     public void setup() throws Exception {
1:5b73ffa: 
1:5b73ffa:         PolicyMap policyMap = new PolicyMap();
1:5b73ffa:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:5b73ffa: 
1:5b73ffa:         PolicyEntry pe = new PolicyEntry();
1:5b73ffa:         pe.setExpireMessagesPeriod(1500);
1:5b73ffa:         pe.setQueue(">");
1:5b73ffa:         entries.add(pe);
1:5b73ffa: 
1:5b73ffa:         policyMap.setPolicyEntries(entries);
1:5b73ffa: 
1:5b73ffa:         broker = new BrokerService();
1:5b73ffa:         broker.setDeleteAllMessagesOnStartup(true);
1:5b73ffa:         broker.setPersistent(true);
1:5b73ffa:         broker.setUseJmx(true);
1:5b73ffa:         broker.setDestinationPolicy(policyMap);
1:5b73ffa:         broker.start();
1:5b73ffa:         broker.waitUntilStarted();
1:5b73ffa:     }
1:5b73ffa: 
1:5b73ffa:     @After
1:5b73ffa:     public void tearDown() throws Exception {
1:5b73ffa:         broker.stop();
1:5b73ffa:     }
1:5b73ffa: 
1:5b73ffa:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:5b73ffa:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:5b73ffa:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:5b73ffa:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:5b73ffa:         return proxy;
1:5b73ffa:     }
1:5b73ffa: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5b73ffa
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Deque;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
1: public class AMQ6117Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6117Test.class);
1: 
1:     private BrokerService broker;
1: 
1:     @Test
1:     public void testViewIsStale() throws Exception {
1: 
1:         final int MSG_COUNT = 10;
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("Test-Queue");
1:         Queue dlq = session.createQueue("ActiveMQ.DLQ");
1: 
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         // Ensure there is a DLQ in existence to start.
1:         session.createProducer(dlq);
1: 
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             producer.send(session.createMessage(), DeliveryMode.PERSISTENT, Message.DEFAULT_PRIORITY, 1000);
1:         }
1: 
1:         final QueueViewMBean queueView = getProxyToQueue(dlq.getQueueName());
1: 
1:         assertTrue("Message should be DLQ'd", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getQueueSize() == MSG_COUNT;
1:             }
1:         }));
1: 
1:         LOG.info("DLQ has captured all expired messages");
1: 
1:         Deque<String> browsed = new LinkedList<String>();
1:         CompositeData[] elements = queueView.browse();
1:         assertEquals(MSG_COUNT, elements.length);
1: 
1:         for (CompositeData element : elements) {
1:             String messageID = (String) element.get("JMSMessageID");
1:             LOG.debug("MessageID: {}", messageID);
1:             browsed.add(messageID);
1:         }
1: 
1:         String removedMsgId = browsed.removeFirst();
1:         assertTrue(queueView.removeMessage(removedMsgId));
1:         assertEquals(MSG_COUNT - 1, queueView.getQueueSize());
1:         elements = queueView.browse();
1:         assertEquals(MSG_COUNT - 1, elements.length);
1: 
1:         for (CompositeData element : elements) {
1:             String messageID = (String) element.get("JMSMessageID");
1:             LOG.debug("MessageID: {}", messageID);
1:             assertFalse(messageID.equals(removedMsgId));
1:         }
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1: 
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setExpireMessagesPeriod(1500);
1:         pe.setQueue(">");
1:         entries.add(pe);
1: 
1:         policyMap.setPolicyEntries(entries);
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================