1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.DeliveryMode;
1:afcefa0: import javax.jms.Destination;
1:afcefa0: import javax.jms.JMSException;
1:afcefa0: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * @version
1:d29ca2a:  */
1:d29ca2a: public class JmsTopicSendReceiveWithTwoConnectionsTest extends JmsSendReceiveTestSupport {
1:230a86c: 
1:fc00993:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
1:230a86c:         .getLog(JmsTopicSendReceiveWithTwoConnectionsTest.class);
1:d29ca2a: 
1:d29ca2a:     protected Connection sendConnection;
1:d29ca2a:     protected Connection receiveConnection;
1:d29ca2a:     protected Session receiveSession;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a: 
1:d29ca2a:         connectionFactory = createConnectionFactory();
1:d29ca2a: 
1:d29ca2a:         sendConnection = createSendConnection();
1:d29ca2a:         sendConnection.start();
1:d29ca2a: 
1:d29ca2a:         receiveConnection = createReceiveConnection();
1:d29ca2a:         receiveConnection.start();
1:d29ca2a: 
1:fc00993:         LOG.info("Created sendConnection: " + sendConnection);
1:fc00993:         LOG.info("Created receiveConnection: " + receiveConnection);
1:d29ca2a: 
1:4150650:         session = createSendSession(sendConnection);
1:4150650:         receiveSession = createReceiveSession(receiveConnection);
1:d29ca2a: 
1:fc00993:         LOG.info("Created sendSession: " + session);
1:fc00993:         LOG.info("Created receiveSession: " + receiveSession);
1:d29ca2a: 
1:d29ca2a:         producer = session.createProducer(null);
1:d29ca2a:         producer.setDeliveryMode(deliveryMode);
1:d29ca2a: 
1:fc00993:         LOG.info("Created producer: " + producer + " delivery mode = "
1:230a86c:                  + (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
1:d29ca2a: 
1:d29ca2a:         if (topic) {
1:d29ca2a:             consumerDestination = session.createTopic(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createTopic(getProducerSubject());
1:230a86c:         } else {
1:d29ca2a:             consumerDestination = session.createQueue(getConsumerSubject());
1:d29ca2a:             producerDestination = session.createQueue(getProducerSubject());
2:d29ca2a:         }
1:d29ca2a: 
1:fc00993:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: "
1:230a86c:                  + consumerDestination.getClass());
1:fc00993:         LOG.info("Created  producer destination: " + producerDestination + " of type: "
1:230a86c:                  + producerDestination.getClass());
1:d29ca2a: 
1:230a86c:         consumer = createConsumer(receiveSession, consumerDestination);
1:d29ca2a:         consumer.setMessageListener(this);
1:d29ca2a: 
1:fc00993:         LOG.info("Started connections");
1:d29ca2a:     }
1:d29ca2a: 
1:4150650:     protected Session createReceiveSession(Connection receiveConnection) throws Exception {
1:4150650:         return receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4150650:     }
1:4150650: 
1:4150650:     protected Session createSendSession(Connection sendConnection) throws Exception {
1:4150650:         return sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4150650:     }
1:4150650: 
1:d29ca2a:     protected Connection createReceiveConnection() throws Exception {
1:d29ca2a:         return createConnection();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Connection createSendConnection() throws Exception {
1:d29ca2a:         return createConnection();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected MessageConsumer createConsumer(Session session, Destination dest) throws JMSException {
1:afcefa0:         return session.createConsumer(dest);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         session.close();
1:d29ca2a:         receiveSession.close();
1:d29ca2a:         sendConnection.close();
1:d29ca2a:         receiveConnection.close();
1:86cbdfd:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:4150650
/////////////////////////////////////////////////////////////////////////
1:         session = createSendSession(sendConnection);
1:         receiveSession = createReceiveSession(receiveConnection);
/////////////////////////////////////////////////////////////////////////
1:     protected Session createReceiveSession(Connection receiveConnection) throws Exception {
1:         return receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected Session createSendSession(Connection sendConnection) throws Exception {
1:         return sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created sendConnection: " + sendConnection);
1:         LOG.info("Created receiveConnection: " + receiveConnection);
1:         LOG.info("Created sendSession: " + session);
1:         LOG.info("Created receiveSession: " + receiveSession);
1:         LOG.info("Created producer: " + producer + " delivery mode = "
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Created  consumer destination: " + consumerDestination + " of type: "
1:         LOG.info("Created  producer destination: " + producerDestination + " of type: "
1:         LOG.info("Started connections");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:         .getLog(JmsTopicSendReceiveWithTwoConnectionsTest.class);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Created producer: " + producer + " delivery mode = "
1:                  + (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
1:         } else {
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: "
1:                  + consumerDestination.getClass());
0:         log.info("Created  producer destination: " + producerDestination + " of type: "
1:                  + producerDestination.getClass());
1:         consumer = createConsumer(receiveSession, consumerDestination);
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected MessageConsumer createConsumer(Session session, Destination dest) throws JMSException {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Session;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
1:  * @version
1:  */
1: public class JmsTopicSendReceiveWithTwoConnectionsTest extends JmsSendReceiveTestSupport {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsTopicSendReceiveWithTwoConnectionsTest.class);
1: 
1:     protected Connection sendConnection;
1:     protected Connection receiveConnection;
1:     protected Session receiveSession;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connectionFactory = createConnectionFactory();
1: 
1:         sendConnection = createSendConnection();
1:         sendConnection.start();
1: 
1:         receiveConnection = createReceiveConnection();
1:         receiveConnection.start();
1: 
0:         log.info("Created sendConnection: " + sendConnection);
0:         log.info("Created receiveConnection: " + receiveConnection);
1: 
0:         session = sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         receiveSession = receiveConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         log.info("Created sendSession: " + session);
0:         log.info("Created receiveSession: " + receiveSession);
1: 
1:         producer = session.createProducer(null);
1:         producer.setDeliveryMode(deliveryMode);
1: 
0:         log.info("Created producer: " + producer + " delivery mode = " +
0:                 (deliveryMode == DeliveryMode.PERSISTENT ? "PERSISTENT" : "NON_PERSISTENT"));
1: 
1:         if (topic) {
1:             consumerDestination = session.createTopic(getConsumerSubject());
1:             producerDestination = session.createTopic(getProducerSubject());
1:         }
0:         else {
1:             consumerDestination = session.createQueue(getConsumerSubject());
1:             producerDestination = session.createQueue(getProducerSubject());
1:         }
1: 
0:         log.info("Created  consumer destination: " + consumerDestination + " of type: " + consumerDestination.getClass());
0:         log.info("Created  producer destination: " + producerDestination + " of type: " + producerDestination.getClass());
1: 
0:         consumer = receiveSession.createConsumer(consumerDestination);
1:         consumer.setMessageListener(this);
1: 
1: 
0:         log.info("Started connections");
1:     }
1: 
1:     protected Connection createReceiveConnection() throws Exception {
1:         return createConnection();
1:     }
1: 
1:     protected Connection createSendConnection() throws Exception {
1:         return createConnection();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         session.close();
1:         receiveSession.close();
1:         sendConnection.close();
1:         receiveConnection.close();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:afcefa0
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
0:         consumer = createConsumer(receiveSession,consumerDestination);
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected MessageConsumer createConsumer(Session session, Destination dest) throws JMSException{
1:         return session.createConsumer(dest);
0:     }
============================================================================