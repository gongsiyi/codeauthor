1:afddc1a: /**
1:afddc1a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:afddc1a:  * contributor license agreements.  See the NOTICE file distributed with
1:afddc1a:  * this work for additional information regarding copyright ownership.
1:afddc1a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:afddc1a:  * (the "License"); you may not use this file except in compliance with
1:afddc1a:  * the License.  You may obtain a copy of the License at
1:afddc1a:  *
1:afddc1a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:afddc1a:  *
1:afddc1a:  * Unless required by applicable law or agreed to in writing, software
1:afddc1a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:afddc1a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:afddc1a:  * See the License for the specific language governing permissions and
1:afddc1a:  * limitations under the License.
1:afddc1a:  */
1:afddc1a: package org.apache.activemq.transport.mqtt;
1:afddc1a: 
1:afddc1a: import java.util.Map;
1:afddc1a: import java.util.concurrent.ConcurrentHashMap;
1:afddc1a: 
1:afddc1a: import org.apache.activemq.Service;
1:afddc1a: import org.apache.activemq.broker.BrokerService;
1:afddc1a: import org.apache.activemq.command.ActiveMQMessage;
1:afddc1a: import org.apache.activemq.util.LRUCache;
1:afddc1a: import org.apache.activemq.util.ServiceStopper;
1:afddc1a: import org.apache.activemq.util.ServiceSupport;
1:afddc1a: import org.fusesource.mqtt.codec.PUBLISH;
1:afddc1a: import org.slf4j.Logger;
1:afddc1a: import org.slf4j.LoggerFactory;
1:afddc1a: 
1:afddc1a: /**
1:afddc1a:  * Manages PUBLISH packet ids for clients.
1:afddc1a:  *
1:afddc1a:  * @author Dhiraj Bokde
1:afddc1a:  */
1:afddc1a: public class MQTTPacketIdGenerator extends ServiceSupport {
1:afddc1a: 
1:afddc1a:     private static final Logger LOG = LoggerFactory.getLogger(MQTTPacketIdGenerator.class);
1:afddc1a:     private static final Object LOCK = new Object();
1:afddc1a: 
1:afddc1a:     Map<String, PacketIdMaps> clientIdMap = new ConcurrentHashMap<String, PacketIdMaps>();
1:afddc1a: 
1:afddc1a:     private final NonZeroSequenceGenerator messageIdGenerator = new NonZeroSequenceGenerator();
1:afddc1a: 
1:afddc1a:     private MQTTPacketIdGenerator() {
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     @Override
1:afddc1a:     protected void doStop(ServiceStopper stopper) throws Exception {
1:afddc1a:         synchronized (this) {
1:afddc1a:             clientIdMap = new ConcurrentHashMap<String, PacketIdMaps>();
1:afddc1a:         }
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     @Override
1:afddc1a:     protected void doStart() throws Exception {
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public void startClientSession(String clientId) {
1:afddc1a:         if (!clientIdMap.containsKey(clientId)) {
1:afddc1a:             clientIdMap.put(clientId, new PacketIdMaps());
1:afddc1a:         }
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public boolean stopClientSession(String clientId) {
1:afddc1a:         return clientIdMap.remove(clientId) != null;
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public short setPacketId(String clientId, MQTTSubscription subscription, ActiveMQMessage message, PUBLISH publish) {
1:afddc1a:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:afddc1a:         if (idMaps == null) {
1:afddc1a:             // maybe its a cleansession=true client id, use session less message id
1:afddc1a:             final short id = messageIdGenerator.getNextSequenceId();
1:afddc1a:             publish.messageId(id);
1:afddc1a:             return id;
1:afddc1a:         } else {
1:afddc1a:             return idMaps.setPacketId(subscription, message, publish);
1:afddc1a:         }
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public void ackPacketId(String clientId, short packetId) {
1:afddc1a:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:afddc1a:         if (idMaps != null) {
1:afddc1a:             idMaps.ackPacketId(packetId);
1:afddc1a:         }
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public short getNextSequenceId(String clientId) {
1:afddc1a:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:afddc1a:         return idMaps != null ? idMaps.getNextSequenceId(): messageIdGenerator.getNextSequenceId();
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     public static MQTTPacketIdGenerator getMQTTPacketIdGenerator(BrokerService broker) {
1:afddc1a:         MQTTPacketIdGenerator result = null;
1:afddc1a:         if (broker != null) {
1:afddc1a:             synchronized (LOCK) {
1:afddc1a:                 Service[] services = broker.getServices();
1:afddc1a:                 if (services != null) {
1:afddc1a:                     for (Service service : services) {
1:afddc1a:                         if (service instanceof MQTTPacketIdGenerator) {
1:afddc1a:                             return (MQTTPacketIdGenerator) service;
1:afddc1a:                         }
1:afddc1a:                     }
1:afddc1a:                 }
1:afddc1a:                 result = new MQTTPacketIdGenerator();
1:afddc1a:                 broker.addService(result);
1:afddc1a:                 if (broker.isStarted()) {
1:afddc1a:                     try {
1:afddc1a:                         result.start();
1:afddc1a:                     } catch (Exception e) {
1:afddc1a:                         LOG.warn("Couldn't start MQTTPacketIdGenerator");
1:afddc1a:                     }
1:afddc1a:                 }
1:afddc1a:             }
1:afddc1a:         }
1:afddc1a: 
1:afddc1a: 
1:afddc1a:         return result;
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     private class PacketIdMaps {
1:afddc1a: 
1:afddc1a:         private final NonZeroSequenceGenerator messageIdGenerator = new NonZeroSequenceGenerator();
1:afddc1a:         final Map<String, Short> activemqToPacketIds = new LRUCache<String, Short>(MQTTProtocolConverter.DEFAULT_CACHE_SIZE);
1:afddc1a:         final Map<Short, String> packetIdsToActivemq = new LRUCache<Short, String>(MQTTProtocolConverter.DEFAULT_CACHE_SIZE);
1:afddc1a: 
1:afddc1a:         short setPacketId(MQTTSubscription subscription, ActiveMQMessage message, PUBLISH publish) {
1:afddc1a:             // subscription key
1:afddc1a:             final StringBuilder subscriptionKey = new StringBuilder();
1:afddc1a:             subscriptionKey.append(subscription.getConsumerInfo().getDestination().getPhysicalName())
1:afddc1a:                 .append(':').append(message.getJMSMessageID());
1:afddc1a:             final String keyStr = subscriptionKey.toString();
1:afddc1a:             Short packetId;
1:afddc1a:             synchronized (activemqToPacketIds) {
1:afddc1a:                 packetId = activemqToPacketIds.get(keyStr);
1:afddc1a:                 if (packetId == null) {
1:afddc1a:                     packetId = getNextSequenceId();
1:afddc1a:                     activemqToPacketIds.put(keyStr, packetId);
1:afddc1a:                     packetIdsToActivemq.put(packetId, keyStr);
1:afddc1a:                 } else {
1:afddc1a:                     // mark publish as duplicate!
1:afddc1a:                     publish.dup(true);
1:afddc1a:                 }
1:afddc1a:             }
1:afddc1a:             publish.messageId(packetId);
1:afddc1a:             return packetId;
1:afddc1a:         }
1:afddc1a: 
1:afddc1a:         void ackPacketId(short packetId) {
1:afddc1a:             synchronized (activemqToPacketIds) {
1:afddc1a:                 final String subscriptionKey = packetIdsToActivemq.remove(packetId);
1:afddc1a:                 if (subscriptionKey != null) {
1:afddc1a:                     activemqToPacketIds.remove(subscriptionKey);
1:afddc1a:                 }
1:afddc1a:             }
1:afddc1a:         }
1:afddc1a: 
1:afddc1a:         short getNextSequenceId() {
1:afddc1a:             return messageIdGenerator.getNextSequenceId();
1:afddc1a:         }
1:afddc1a: 
1:afddc1a:     }
1:afddc1a: 
1:afddc1a:     private class NonZeroSequenceGenerator {
1:afddc1a: 
1:afddc1a:         private short lastSequenceId;
1:afddc1a: 
1:afddc1a:         public synchronized short getNextSequenceId() {
1:afddc1a:             final short val = ++lastSequenceId;
1:afddc1a:             return val != 0 ? val : ++lastSequenceId;
1:afddc1a:         }
1:afddc1a: 
1:afddc1a:     }
1:afddc1a: 
1:afddc1a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:afddc1a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.util.LRUCache;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Manages PUBLISH packet ids for clients.
1:  *
1:  * @author Dhiraj Bokde
1:  */
1: public class MQTTPacketIdGenerator extends ServiceSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTPacketIdGenerator.class);
1:     private static final Object LOCK = new Object();
1: 
1:     Map<String, PacketIdMaps> clientIdMap = new ConcurrentHashMap<String, PacketIdMaps>();
1: 
1:     private final NonZeroSequenceGenerator messageIdGenerator = new NonZeroSequenceGenerator();
1: 
1:     private MQTTPacketIdGenerator() {
1:     }
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         synchronized (this) {
1:             clientIdMap = new ConcurrentHashMap<String, PacketIdMaps>();
1:         }
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:     }
1: 
1:     public void startClientSession(String clientId) {
1:         if (!clientIdMap.containsKey(clientId)) {
1:             clientIdMap.put(clientId, new PacketIdMaps());
1:         }
1:     }
1: 
1:     public boolean stopClientSession(String clientId) {
1:         return clientIdMap.remove(clientId) != null;
1:     }
1: 
1:     public short setPacketId(String clientId, MQTTSubscription subscription, ActiveMQMessage message, PUBLISH publish) {
1:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:         if (idMaps == null) {
1:             // maybe its a cleansession=true client id, use session less message id
1:             final short id = messageIdGenerator.getNextSequenceId();
1:             publish.messageId(id);
1:             return id;
1:         } else {
1:             return idMaps.setPacketId(subscription, message, publish);
1:         }
1:     }
1: 
1:     public void ackPacketId(String clientId, short packetId) {
1:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:         if (idMaps != null) {
1:             idMaps.ackPacketId(packetId);
1:         }
1:     }
1: 
1:     public short getNextSequenceId(String clientId) {
1:         final PacketIdMaps idMaps = clientIdMap.get(clientId);
1:         return idMaps != null ? idMaps.getNextSequenceId(): messageIdGenerator.getNextSequenceId();
1:     }
1: 
1:     public static MQTTPacketIdGenerator getMQTTPacketIdGenerator(BrokerService broker) {
1:         MQTTPacketIdGenerator result = null;
1:         if (broker != null) {
1:             synchronized (LOCK) {
1:                 Service[] services = broker.getServices();
1:                 if (services != null) {
1:                     for (Service service : services) {
1:                         if (service instanceof MQTTPacketIdGenerator) {
1:                             return (MQTTPacketIdGenerator) service;
1:                         }
1:                     }
1:                 }
1:                 result = new MQTTPacketIdGenerator();
1:                 broker.addService(result);
1:                 if (broker.isStarted()) {
1:                     try {
1:                         result.start();
1:                     } catch (Exception e) {
1:                         LOG.warn("Couldn't start MQTTPacketIdGenerator");
1:                     }
1:                 }
1:             }
1:         }
1: 
1: 
1:         return result;
1:     }
1: 
1:     private class PacketIdMaps {
1: 
1:         private final NonZeroSequenceGenerator messageIdGenerator = new NonZeroSequenceGenerator();
1:         final Map<String, Short> activemqToPacketIds = new LRUCache<String, Short>(MQTTProtocolConverter.DEFAULT_CACHE_SIZE);
1:         final Map<Short, String> packetIdsToActivemq = new LRUCache<Short, String>(MQTTProtocolConverter.DEFAULT_CACHE_SIZE);
1: 
1:         short setPacketId(MQTTSubscription subscription, ActiveMQMessage message, PUBLISH publish) {
1:             // subscription key
1:             final StringBuilder subscriptionKey = new StringBuilder();
1:             subscriptionKey.append(subscription.getConsumerInfo().getDestination().getPhysicalName())
1:                 .append(':').append(message.getJMSMessageID());
1:             final String keyStr = subscriptionKey.toString();
1:             Short packetId;
1:             synchronized (activemqToPacketIds) {
1:                 packetId = activemqToPacketIds.get(keyStr);
1:                 if (packetId == null) {
1:                     packetId = getNextSequenceId();
1:                     activemqToPacketIds.put(keyStr, packetId);
1:                     packetIdsToActivemq.put(packetId, keyStr);
1:                 } else {
1:                     // mark publish as duplicate!
1:                     publish.dup(true);
1:                 }
1:             }
1:             publish.messageId(packetId);
1:             return packetId;
1:         }
1: 
1:         void ackPacketId(short packetId) {
1:             synchronized (activemqToPacketIds) {
1:                 final String subscriptionKey = packetIdsToActivemq.remove(packetId);
1:                 if (subscriptionKey != null) {
1:                     activemqToPacketIds.remove(subscriptionKey);
1:                 }
1:             }
1:         }
1: 
1:         short getNextSequenceId() {
1:             return messageIdGenerator.getNextSequenceId();
1:         }
1: 
1:     }
1: 
1:     private class NonZeroSequenceGenerator {
1: 
1:         private short lastSequenceId;
1: 
1:         public synchronized short getNextSequenceId() {
1:             final short val = ++lastSequenceId;
1:             return val != 0 ? val : ++lastSequenceId;
1:         }
1: 
1:     }
1: 
1: }
============================================================================