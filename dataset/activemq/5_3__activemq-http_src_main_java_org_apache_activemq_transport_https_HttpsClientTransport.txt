2:e54a126: /**
1:14678e1:  *
1:14678e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:14678e1:  * contributor license agreements.  See the NOTICE file distributed with
1:14678e1:  * this work for additional information regarding copyright ownership.
1:14678e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:14678e1:  * (the "License"); you may not use this file except in compliance with
1:14678e1:  * the License.  You may obtain a copy of the License at
1:14678e1:  *
1:14678e1:  * http://www.apache.org/licenses/LICENSE-2.0
1:14678e1:  *
1:14678e1:  * Unless required by applicable law or agreed to in writing, software
1:14678e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14678e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14678e1:  * See the License for the specific language governing permissions and
1:14678e1:  * limitations under the License.
1:14678e1:  */
1:e54a126: package org.apache.activemq.transport.https;
5:e54a126: 
1:14678e1: import java.io.IOException;
1:14678e1: import java.net.URI;
1:14678e1: 
1:14678e1: import org.apache.activemq.broker.SslContext;
1:e54a126: import org.apache.activemq.transport.http.HttpClientTransport;
1:e54a126: import org.apache.activemq.transport.util.TextWireFormat;
1:14678e1: import org.apache.activemq.util.IOExceptionSupport;
1:571d452: import org.apache.http.conn.ClientConnectionManager;
1:571d452: import org.apache.http.conn.scheme.Scheme;
1:571d452: import org.apache.http.conn.scheme.SchemeRegistry;
1:571d452: import org.apache.http.conn.ssl.SSLSocketFactory;
1:571d452: import org.apache.http.impl.conn.PoolingClientConnectionManager;
1:571d452: 
1:e54a126: public class HttpsClientTransport extends HttpClientTransport {
1:571d452: 
1:14678e1:     public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) {
1:14678e1:         super(wireFormat, remoteUrl);
1:14678e1:     }
1:571d452: 
1:571d452:     @Override
1:571d452:     protected ClientConnectionManager createClientConnectionManager() {
1:571d452:         PoolingClientConnectionManager connectionManager = new PoolingClientConnectionManager(createSchemeRegistry());
1:571d452:         return connectionManager;
1:571d452:     }
1:571d452: 
1:571d452:     private SchemeRegistry createSchemeRegistry() {
1:571d452: 
1:571d452:         SchemeRegistry schemeRegistry = new SchemeRegistry();
1:571d452:         try {
1:14678e1:             SSLSocketFactory sslSocketFactory = new SSLSocketFactory(createSocketFactory(),
1:571d452:                     SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
1:571d452:             schemeRegistry.register(new Scheme("https", getRemoteUrl().getPort(), sslSocketFactory));
1:571d452:             return schemeRegistry;
1:571d452:         } catch (Exception e) {
1:571d452:             throw new IllegalStateException("Failure trying to create scheme registry", e);
1:571d452:         }
1:571d452:     }
1:14678e1: 
1:14678e1:     /**
1:14678e1:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:14678e1:      * key and trust managers (if the user provided them).
1:14678e1:      *
1:14678e1:      * @return Newly created (Ssl)SocketFactory.
1:14678e1:      * @throws IOException
1:14678e1:      */
1:14678e1:     protected javax.net.ssl.SSLSocketFactory createSocketFactory() throws IOException {
1:14678e1:         if (SslContext.getCurrentSslContext() != null) {
1:14678e1:             SslContext ctx = SslContext.getCurrentSslContext();
1:14678e1:             try {
1:14678e1:                 return ctx.getSSLContext().getSocketFactory();
1:14678e1:             } catch (Exception e) {
1:14678e1:                 throw IOExceptionSupport.create(e);
1:14678e1:             }
1:14678e1:         } else {
1:14678e1:             return (javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault();
1:14678e1:         }
1:14678e1: 
1:14678e1:     }
2:e54a126: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:14678e1
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.util.IOExceptionSupport;
1:     public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) {
1:         super(wireFormat, remoteUrl);
1:     }
/////////////////////////////////////////////////////////////////////////
1:             SSLSocketFactory sslSocketFactory = new SSLSocketFactory(createSocketFactory(),
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Creates a new SSL SocketFactory. The given factory will use user-provided
1:      * key and trust managers (if the user provided them).
1:      *
1:      * @return Newly created (Ssl)SocketFactory.
1:      * @throws IOException
1:      */
1:     protected javax.net.ssl.SSLSocketFactory createSocketFactory() throws IOException {
1:         if (SslContext.getCurrentSslContext() != null) {
1:             SslContext ctx = SslContext.getCurrentSslContext();
1:             try {
1:                 return ctx.getSSLContext().getSocketFactory();
1:             } catch (Exception e) {
1:                 throw IOExceptionSupport.create(e);
1:             }
1:         } else {
1:             return (javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault();
1:         }
1: 
1:     }
author:Christian Posta
-------------------------------------------------------------------------------
commit:571d452
/////////////////////////////////////////////////////////////////////////
1: import org.apache.http.conn.ClientConnectionManager;
1: import org.apache.http.conn.scheme.Scheme;
1: import org.apache.http.conn.scheme.SchemeRegistry;
1: import org.apache.http.conn.ssl.SSLSocketFactory;
1: import org.apache.http.impl.conn.PoolingClientConnectionManager;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.FileInputStream;
0: import java.io.InputStream;
0: import java.net.URI;
0: import java.security.KeyStore;
1: 
1: 
1:     @Override
1:     protected ClientConnectionManager createClientConnectionManager() {
1:         PoolingClientConnectionManager connectionManager = new PoolingClientConnectionManager(createSchemeRegistry());
1:         return connectionManager;
1:     }
1: 
1:     private SchemeRegistry createSchemeRegistry() {
1: 
1:         SchemeRegistry schemeRegistry = new SchemeRegistry();
1:         try {
0:             // register the default socket factory so that it looks at the javax.net.ssl.keyStore,
0:             // javax.net.ssl.trustStore, etc, properties by default
0:             SSLSocketFactory sslSocketFactory =
0:                     new SSLSocketFactory((javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault(),
1:                     SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
1:             schemeRegistry.register(new Scheme("https", getRemoteUrl().getPort(), sslSocketFactory));
1:             return schemeRegistry;
1:         } catch (Exception e) {
1:             throw new IllegalStateException("Failure trying to create scheme registry", e);
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:e54a126
/////////////////////////////////////////////////////////////////////////
1: /**
0: *
0: * Licensed to the Apache Software Foundation (ASF) under one or more
0: * contributor license agreements.  See the NOTICE file distributed with
0: * this work for additional information regarding copyright ownership.
0: * The ASF licenses this file to You under the Apache License, Version 2.0
0: * (the "License"); you may not use this file except in compliance with
0: * the License.  You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: */
1: package org.apache.activemq.transport.https;
1: 
0: import java.net.URI;
1: 
1: import org.apache.activemq.transport.http.HttpClientTransport;
1: import org.apache.activemq.transport.util.TextWireFormat;
1: 
1: /**
0:  * @author john.silva
0:  */
1: 
1: public class HttpsClientTransport extends HttpClientTransport {
1:   
0:   public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) {
0:     super(wireFormat, remoteUrl);
1:   }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:d4ee73f
/////////////////////////////////////////////////////////////////////////
============================================================================