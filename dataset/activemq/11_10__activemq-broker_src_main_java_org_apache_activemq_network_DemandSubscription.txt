6:068c646: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:a80acbb:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:068c646:  * Unless required by applicable law or agreed to in writing, software
1:068c646:  * distributed under the License is distributed on an "AS IS" BASIS,
1:068c646:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:068c646:  * See the License for the specific language governing permissions and
1:068c646:  * limitations under the License.
6:068c646:  */
1:068c646: package org.apache.activemq.network;
1:414a646: 
1:41211c7: import java.util.Map;
1:74a7a8b: import java.util.Set;
1:41211c7: import java.util.concurrent.ConcurrentHashMap;
1:86cbdfd: import java.util.concurrent.CopyOnWriteArraySet;
1:3ded22d: import java.util.concurrent.TimeUnit;
1:8e59e24: import java.util.concurrent.atomic.AtomicBoolean;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:b2ad8fa: 
1:068c646: import org.apache.activemq.command.ConsumerId;
1:068c646: import org.apache.activemq.command.ConsumerInfo;
1:af1b232: import org.apache.activemq.command.NetworkBridgeFilter;
1:620523a: import org.apache.activemq.command.SubscriptionInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:b2ad8fa: 
1:068c646: /**
1:068c646:  * Represents a network bridge interface
1:068c646:  */
1:f812e34: public class DemandSubscription {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DemandSubscription.class);
1:8e59e24: 
1:730aef4:     private final ConsumerInfo remoteInfo;
1:730aef4:     private final ConsumerInfo localInfo;
1:a80acbb:     private final Set<ConsumerId> remoteSubsIds = new CopyOnWriteArraySet<ConsumerId>();
1:a80acbb:     private final AtomicInteger dispatched = new AtomicInteger(0);
1:a80acbb:     private final AtomicBoolean activeWaiter = new AtomicBoolean();
1:620523a:     private final Set<SubscriptionInfo> durableRemoteSubs = new CopyOnWriteArraySet<SubscriptionInfo>();
1:e73ab34:     private final Set<ConsumerId> forcedDurableConsumers = new CopyOnWriteArraySet<ConsumerId>();
1:620523a:     private SubscriptionInfo localDurableSubscriber;
1:f812e34: 
1:af1b232:     private NetworkBridgeFilter networkBridgeFilter;
1:a80a185:     private boolean staticallyIncluded;
1:414a646: 
1:f812e34:     DemandSubscription(ConsumerInfo info) {
1:f812e34:         remoteInfo = info;
1:f812e34:         localInfo = info.copy();
1:8fd4189:         localInfo.setNetworkSubscription(true);
1:414a646:         remoteSubsIds.add(info.getConsumerId());
1:8e59e24:     }
1:f812e34: 
1:a95c6db:     @Override
1:a95c6db:     public String toString() {
1:a95c6db:         return "DemandSub{" + localInfo.getConsumerId() + ",remotes:" + remoteSubsIds + "}";
1:a95c6db:     }
1:a95c6db: 
1:068c646:     /**
1:068c646:      * Increment the consumers associated with this subscription
1:f812e34:      *
1:068c646:      * @param id
2:068c646:      * @return true if added
1:068c646:      */
1:e48ff70:     public boolean add(ConsumerId id) {
1:068c646:         return remoteSubsIds.add(id);
1:8b0bb33:     }
1:f812e34: 
1:068c646:     /**
1:068c646:      * Increment the consumers associated with this subscription
1:f812e34:      *
1:068c646:      * @param id
1:8fd4189:      * @return true if removed
1:068c646:      */
1:f812e34:     public boolean remove(ConsumerId id) {
1:068c646:         return remoteSubsIds.remove(id);
1:f812e34:     }
1:f812e34: 
1:620523a:     public Set<SubscriptionInfo> getDurableRemoteSubs() {
1:620523a:         return durableRemoteSubs;
1:41211c7:     }
1:41211c7: 
1:068c646:     /**
1:068c646:      * @return true if there are no interested consumers
1:068c646:      */
1:f812e34:     public boolean isEmpty() {
1:068c646:         return remoteSubsIds.isEmpty();
1:620523a:     }
1:620523a: 
1:8d0cf31:     public int size() {
1:8d0cf31:         return remoteSubsIds.size();
1:8d0cf31:     }
1:068c646:     /**
1:068c646:      * @return Returns the localInfo.
1:068c646:      */
1:f812e34:     public ConsumerInfo getLocalInfo() {
1:068c646:         return localInfo;
1:8fd4189:     }
1:f812e34: 
1:068c646:     /**
1:068c646:      * @return Returns the remoteInfo.
1:068c646:      */
1:f812e34:     public ConsumerInfo getRemoteInfo() {
1:068c646:         return remoteInfo;
1:8e59e24:     }
1:8e59e24: 
1:e73ab34:     public boolean addForcedDurableConsumer(ConsumerId id) {
1:e73ab34:         return forcedDurableConsumers.add(id);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     public boolean removeForcedDurableConsumer(ConsumerId id) {
1:e73ab34:         return forcedDurableConsumers.remove(id);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     public int getForcedDurableConsumersSize() {
1:e73ab34:         return forcedDurableConsumers.size();
1:e73ab34:     }
1:e73ab34: 
1:8e59e24:     public void waitForCompletion() {
1:8e59e24:         if (dispatched.get() > 0) {
1:e1bbde7:             LOG.debug("Waiting for completion for sub: {}, dispatched: {}", localInfo.getConsumerId(), this.dispatched.get());
1:8e59e24:             activeWaiter.set(true);
1:8e59e24:             if (dispatched.get() > 0) {
1:8e59e24:                 synchronized (activeWaiter) {
1:8e59e24:                     try {
1:3ded22d:                         activeWaiter.wait(TimeUnit.SECONDS.toMillis(30));
1:8e59e24:                     } catch (InterruptedException ignored) {
1:8e59e24:                     }
1:8e59e24:                 }
1:8e59e24:                 if (this.dispatched.get() > 0) {
1:e1bbde7:                     LOG.warn("demand sub interrupted or timedout while waiting for outstanding responses, expect potentially {} duplicate forwards", this.dispatched.get());
1:8e59e24:                 }
1:8e59e24:             }
1:8e59e24:         }
1:8e59e24:     }
1:8e59e24: 
1:8e59e24:     public void decrementOutstandingResponses() {
1:8e59e24:         if (dispatched.decrementAndGet() == 0 && activeWaiter.get()) {
1:414a646:             synchronized (activeWaiter) {
1:8e59e24:                 activeWaiter.notifyAll();
1:8e59e24:             }
1:8e59e24:         }
1:8e59e24:     }
1:8e59e24: 
1:414a646:     public boolean incrementOutstandingResponses() {
1:8e59e24:         dispatched.incrementAndGet();
1:414a646:         if (activeWaiter.get()) {
1:414a646:             decrementOutstandingResponses();
1:414a646:             return false;
1:8e59e24:         }
1:414a646:         return true;
1:414a646:     }
1:af1b232: 
1:af1b232:     public NetworkBridgeFilter getNetworkBridgeFilter() {
1:af1b232:         return networkBridgeFilter;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public void setNetworkBridgeFilter(NetworkBridgeFilter networkBridgeFilter) {
1:af1b232:         this.networkBridgeFilter = networkBridgeFilter;
1:af1b232:     }
1:620523a: 
1:620523a:     public SubscriptionInfo getLocalDurableSubscriber() {
1:620523a:         return localDurableSubscriber;
1:620523a:     }
1:620523a: 
1:620523a:     public void setLocalDurableSubscriber(SubscriptionInfo localDurableSubscriber) {
1:620523a:         this.localDurableSubscriber = localDurableSubscriber;
1:620523a:     }
1:a80a185: 
1:a80a185:     public boolean isStaticallyIncluded() {
1:a80a185:         return staticallyIncluded;
1:a80a185:     }
1:a80a185: 
1:a80a185:     public void setStaticallyIncluded(boolean staticallyIncluded) {
1:a80a185:         this.staticallyIncluded = staticallyIncluded;
1:a80a185:     }
1:730aef4: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:6013441
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
1:     private final Set<ConsumerId> forcedDurableConsumers = new CopyOnWriteArraySet<ConsumerId>();
/////////////////////////////////////////////////////////////////////////
1:     public boolean addForcedDurableConsumer(ConsumerId id) {
1:         return forcedDurableConsumers.add(id);
1:     }
1: 
1:     public boolean removeForcedDurableConsumer(ConsumerId id) {
1:         return forcedDurableConsumers.remove(id);
1:     }
1: 
1:     public int getForcedDurableConsumersSize() {
1:         return forcedDurableConsumers.size();
1:     }
1: 
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:41211c7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
0:     //Used for proxy network consumers
0:     private final Map<SubscriptionInfo, AtomicInteger> networkDemandConsumerMap = new ConcurrentHashMap<>();
/////////////////////////////////////////////////////////////////////////
0:     public Map<SubscriptionInfo, AtomicInteger> getNetworkDemandConsumerMap() {
0:         return networkDemandConsumerMap;
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:a80a185
/////////////////////////////////////////////////////////////////////////
1:     private boolean staticallyIncluded;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isStaticallyIncluded() {
1:         return staticallyIncluded;
1:     }
1: 
1:     public void setStaticallyIncluded(boolean staticallyIncluded) {
1:         this.staticallyIncluded = staticallyIncluded;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Waiting for completion for sub: {}, dispatched: {}", localInfo.getConsumerId(), this.dispatched.get());
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("demand sub interrupted or timedout while waiting for outstanding responses, expect potentially {} duplicate forwards", this.dispatched.get());
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return "DemandSub{" + localInfo.getConsumerId() + ",remotes:" + remoteSubsIds + "}";
1:     }
1: 
commit:3ded22d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:                         activeWaiter.wait(TimeUnit.SECONDS.toMillis(30));
0:                              "expect potentially " + this.dispatched.get() + " duplicate forwards");
commit:8d0cf31
/////////////////////////////////////////////////////////////////////////
1:     public int size() {
1:         return remoteSubsIds.size();
1:     }
commit:af1b232
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.NetworkBridgeFilter;
/////////////////////////////////////////////////////////////////////////
1:     private NetworkBridgeFilter networkBridgeFilter;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public NetworkBridgeFilter getNetworkBridgeFilter() {
1:         return networkBridgeFilter;
1:     }
1: 
1:     public void setNetworkBridgeFilter(NetworkBridgeFilter networkBridgeFilter) {
1:         this.networkBridgeFilter = networkBridgeFilter;
1:     }
commit:8e59e24
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DemandSubscription.class);
1:     
0:     private AtomicBoolean activeWaiter = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public void waitForCompletion() {
1:         if (dispatched.get() > 0) {
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("Waiting for completion for sub: " + localInfo.getConsumerId() + ", dispatched: " + this.dispatched.get());
1:             }
1:             activeWaiter.set(true);
1:             if (dispatched.get() > 0) {
1:                 synchronized (activeWaiter) {
1:                     try {
0:                         activeWaiter.wait();
1:                     } catch (InterruptedException ignored) {
1:                     }
1:                 }
1:                 if (this.dispatched.get() > 0) {
0:                     LOG.warn("demand sub interrupted or timedout while waiting for outstanding responses, expect potentially " + this.dispatched.get() + " duplicate deliveried");
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public void decrementOutstandingResponses() {
1:         if (dispatched.decrementAndGet() == 0 && activeWaiter.get()) {
0:             synchronized(activeWaiter) {
1:                 activeWaiter.notifyAll();
1:             }
1:         }
1:     }
1: 
0:     public void incrementOutstandingResponses() {
1:         dispatched.incrementAndGet(); 
1:     }
commit:e48ff70
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public boolean add(ConsumerId id) {
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:620523a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.SubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
1:     private final Set<SubscriptionInfo> durableRemoteSubs = new CopyOnWriteArraySet<SubscriptionInfo>();
1:     private SubscriptionInfo localDurableSubscriber;
/////////////////////////////////////////////////////////////////////////
1:     public Set<SubscriptionInfo> getDurableRemoteSubs() {
1:         return durableRemoteSubs;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public SubscriptionInfo getLocalDurableSubscriber() {
1:         return localDurableSubscriber;
1:     }
1: 
1:     public void setLocalDurableSubscriber(SubscriptionInfo localDurableSubscriber) {
1:         this.localDurableSubscriber = localDurableSubscriber;
1:     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DemandSubscription.class);
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
1:     }
commit:b2148c5
/////////////////////////////////////////////////////////////////////////
0:         localInfo.setSelector(info.getSelector());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private Set<ConsumerId> remoteSubsIds = new CopyOnWriteArraySet<ConsumerId>();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class DemandSubscription {
1:     DemandSubscription(ConsumerInfo info) {
1:         remoteInfo = info;
1:         localInfo = info.copy();
1:     }
1:      * 
0:     public boolean add(ConsumerId id) {
1: 
1:      * 
1:     public boolean remove(ConsumerId id) {
1: 
1:     public boolean isEmpty() {
1: 
0:     public int getDispatched() {
0:     public void setDispatched(int dispatched) {
1: 
0:     public int incrementDispatched() {
1:     public ConsumerInfo getLocalInfo() {
0:     public void setLocalInfo(ConsumerInfo localInfo) {
0:         this.localInfo = localInfo;
1:     public ConsumerInfo getRemoteInfo() {
0:     public void setRemoteInfo(ConsumerInfo remoteInfo) {
0:         this.remoteInfo = remoteInfo;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArraySet;
1: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:b2ad8fa
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
1:     private final Set<ConsumerId> remoteSubsIds = new CopyOnWriteArraySet<ConsumerId>();
1:     private final AtomicInteger dispatched = new AtomicInteger(0);
1:     private final AtomicBoolean activeWaiter = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:                     LOG.warn("demand sub interrupted or timedout while waiting for outstanding responses, " +
0:                              "expect potentially " + this.dispatched.get() + " duplicate deliveried");
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:414a646
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         remoteSubsIds.add(info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             synchronized (activeWaiter) {
1:     public boolean incrementOutstandingResponses() {
0:         dispatched.incrementAndGet();
1:         if (activeWaiter.get()) {
1:             decrementOutstandingResponses();
1:             return false;
1:         }
1:         return true;
author:Robert Davies
-------------------------------------------------------------------------------
commit:730aef4
/////////////////////////////////////////////////////////////////////////
1:     private final ConsumerInfo remoteInfo;
1:     private final ConsumerInfo localInfo;
/////////////////////////////////////////////////////////////////////////
0:     
1:     }    
commit:a61e5bc
/////////////////////////////////////////////////////////////////////////
0:         localInfo.setSelector(null);
commit:8fd4189
/////////////////////////////////////////////////////////////////////////
1:         localInfo.setNetworkSubscription(true);
0:         remoteSubsIds.add(info.getConsumerId());    
1:      }
/////////////////////////////////////////////////////////////////////////
0:     public boolean add(ConsumerId id) {   
0:         if (localInfo != null) {
0:             localInfo.addNetworkConsumerId(id);
0:         }
/////////////////////////////////////////////////////////////////////////
1:      * @return true if removed
0:         if (localInfo != null) {
0:             localInfo.removeNetworkConsumerId(id);
0:         }
commit:b593aca
/////////////////////////////////////////////////////////////////////////
commit:068c646
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import java.util.Set;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArraySet;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: 
0: 
0: 
1: /**
1:  * Represents a network bridge interface
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class DemandSubscription{
0:     private ConsumerInfo remoteInfo;
0:     private ConsumerInfo localInfo;
0:     private Set remoteSubsIds = new CopyOnWriteArraySet();
0:     private AtomicInteger dispatched = new AtomicInteger(0);
0: 
0:     DemandSubscription(ConsumerInfo info){
0:         remoteInfo=info;
0:         localInfo=info.copy();
0:         localInfo.setBrokerPath(info.getBrokerPath());
0:         localInfo.setNetworkSubscription(true);
0:         remoteSubsIds.add(info.getConsumerId());
0:     } 
0: 
1:     /**
1:      * Increment the consumers associated with this subscription
1:      * @param id
1:      * @return true if added
1:      */
0:     public boolean add(ConsumerId id){
1:         return remoteSubsIds.add(id);
0:     }
0:     
1:     /**
1:      * Increment the consumers associated with this subscription
1:      * @param id
1:      * @return true if added
1:      */
0:     public boolean remove(ConsumerId id){
1:         return remoteSubsIds.remove(id);
0:     }
0:     
1:     /**
1:      * @return true if there are no interested consumers
1:      */
0:     public boolean isEmpty(){
1:         return remoteSubsIds.isEmpty();
0:     }
0:     
0:     
1:     /**
0:      * @return Returns the dispatched.
1:      */
0:     public int getDispatched(){
0:         return dispatched.get();
0:     }
0: 
1:     /**
0:      * @param dispatched The dispatched to set.
1:      */
0:     public void setDispatched(int dispatched){
0:         this.dispatched.set(dispatched);
0:     }
0:     
1:     /**
0:      * @return dispatched count after incremented
1:      */
0:     public int incrementDispatched(){
0:         return dispatched.incrementAndGet();
0:     }
0: 
1:     /**
1:      * @return Returns the localInfo.
1:      */
0:     public ConsumerInfo getLocalInfo(){
1:         return localInfo;
0:     }
0: 
1:     /**
0:      * @param localInfo The localInfo to set.
1:      */
0:     public void setLocalInfo(ConsumerInfo localInfo){
0:         this.localInfo=localInfo;
0:     }
0: 
1:     /**
1:      * @return Returns the remoteInfo.
1:      */
0:     public ConsumerInfo getRemoteInfo(){
1:         return remoteInfo;
0:     }
0: 
1:     /**
0:      * @param remoteInfo The remoteInfo to set.
1:      */
0:     public void setRemoteInfo(ConsumerInfo remoteInfo){
0:         this.remoteInfo=remoteInfo;
0:     }
0:     
0: }
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArraySet;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: import java.util.Set;
============================================================================