1:b2fca26: /**
1:b2fca26:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b2fca26:  * contributor license agreements.  See the NOTICE file distributed with
1:b2fca26:  * this work for additional information regarding copyright ownership.
1:b2fca26:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b2fca26:  * (the "License"); you may not use this file except in compliance with
1:b2fca26:  * the License.  You may obtain a copy of the License at
1:b2fca26:  *
1:b2fca26:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b2fca26:  *
1:b2fca26:  * Unless required by applicable law or agreed to in writing, software
1:b2fca26:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b2fca26:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b2fca26:  * See the License for the specific language governing permissions and
1:b2fca26:  * limitations under the License.
1:b2fca26:  */
1:b2fca26: package org.apache.activemq.leveldb;
1:b2fca26: 
1:b2fca26: import org.apache.activemq.store.PersistenceAdapter;
1:b2fca26: import org.apache.activemq.store.PersistenceAdapterFactory;
1:b2fca26: 
1:b2fca26: import java.io.File;
1:b2fca26: import java.io.IOException;
1:b2fca26: 
1:b2fca26: /**
1:b2fca26:  * A factory which can create configured LevelDBStore objects.
1:b2fca26:  */
1:b2fca26: public class LevelDBStoreFactory implements PersistenceAdapterFactory {
1:b2fca26: 
1:b2fca26:     private int asyncBufferSize = 1024*1024*4;
1:b2fca26:     private File directory = new File("LevelDB");
1:b2fca26:     private int flushDelay = 1000*5;
1:b2fca26:     private int indexBlockRestartInterval = 16;
1:b2fca26:     private int indexBlockSize = 4 * 1024;
1:b2fca26:     private long indexCacheSize = 1024 * 1024 * 256L;
1:b2fca26:     private String indexCompression = "snappy";
1:b2fca26:     private String indexFactory = "org.fusesource.leveldbjni.JniDBFactory, org.iq80.leveldb.impl.Iq80DBFactory";
1:b2fca26:     private int indexMaxOpenFiles = 1000;
1:b2fca26:     private int indexWriteBufferSize = 1024*1024*6;
1:b2fca26:     private String logCompression = "none";
1:b2fca26:     private File logDirectory;
1:b2fca26:     private long logSize = 1024 * 1024 * 100;
1:b2fca26:     private boolean monitorStats;
1:b2fca26:     private boolean paranoidChecks;
1:b2fca26:     private boolean sync = true;
1:b2fca26:     private boolean verifyChecksums;
1:b2fca26: 
1:b2fca26: 
1:b2fca26:     @Override
1:b2fca26:     public PersistenceAdapter createPersistenceAdapter() throws IOException {
1:b2fca26:         LevelDBStore store = new LevelDBStore();
1:b2fca26:         store.setVerifyChecksums(verifyChecksums);
1:b2fca26:         store.setAsyncBufferSize(asyncBufferSize);
1:b2fca26:         store.setDirectory(directory);
1:b2fca26:         store.setFlushDelay(flushDelay);
1:b2fca26:         store.setIndexBlockRestartInterval(indexBlockRestartInterval);
1:b2fca26:         store.setIndexBlockSize(indexBlockSize);
1:b2fca26:         store.setIndexCacheSize(indexCacheSize);
1:b2fca26:         store.setIndexCompression(indexCompression);
1:b2fca26:         store.setIndexFactory(indexFactory);
1:b2fca26:         store.setIndexMaxOpenFiles(indexMaxOpenFiles);
1:b2fca26:         store.setIndexWriteBufferSize(indexWriteBufferSize);
1:b2fca26:         store.setLogCompression(logCompression);
1:b2fca26:         store.setLogDirectory(logDirectory);
1:b2fca26:         store.setLogSize(logSize);
1:b2fca26:         store.setMonitorStats(monitorStats);
1:b2fca26:         store.setParanoidChecks(paranoidChecks);
1:b2fca26:         store.setSync(sync);
1:b2fca26:         return store;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getAsyncBufferSize() {
1:b2fca26:         return asyncBufferSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setAsyncBufferSize(int asyncBufferSize) {
1:b2fca26:         this.asyncBufferSize = asyncBufferSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public File getDirectory() {
1:b2fca26:         return directory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setDirectory(File directory) {
1:b2fca26:         this.directory = directory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getFlushDelay() {
1:b2fca26:         return flushDelay;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setFlushDelay(int flushDelay) {
1:b2fca26:         this.flushDelay = flushDelay;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getIndexBlockRestartInterval() {
1:b2fca26:         return indexBlockRestartInterval;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexBlockRestartInterval(int indexBlockRestartInterval) {
1:b2fca26:         this.indexBlockRestartInterval = indexBlockRestartInterval;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getIndexBlockSize() {
1:b2fca26:         return indexBlockSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexBlockSize(int indexBlockSize) {
1:b2fca26:         this.indexBlockSize = indexBlockSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public long getIndexCacheSize() {
1:b2fca26:         return indexCacheSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexCacheSize(long indexCacheSize) {
1:b2fca26:         this.indexCacheSize = indexCacheSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public String getIndexCompression() {
1:b2fca26:         return indexCompression;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexCompression(String indexCompression) {
1:b2fca26:         this.indexCompression = indexCompression;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public String getIndexFactory() {
1:b2fca26:         return indexFactory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexFactory(String indexFactory) {
1:b2fca26:         this.indexFactory = indexFactory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getIndexMaxOpenFiles() {
1:b2fca26:         return indexMaxOpenFiles;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexMaxOpenFiles(int indexMaxOpenFiles) {
1:b2fca26:         this.indexMaxOpenFiles = indexMaxOpenFiles;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public int getIndexWriteBufferSize() {
1:b2fca26:         return indexWriteBufferSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setIndexWriteBufferSize(int indexWriteBufferSize) {
1:b2fca26:         this.indexWriteBufferSize = indexWriteBufferSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public String getLogCompression() {
1:b2fca26:         return logCompression;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setLogCompression(String logCompression) {
1:b2fca26:         this.logCompression = logCompression;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public File getLogDirectory() {
1:b2fca26:         return logDirectory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setLogDirectory(File logDirectory) {
1:b2fca26:         this.logDirectory = logDirectory;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public long getLogSize() {
1:b2fca26:         return logSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setLogSize(long logSize) {
1:b2fca26:         this.logSize = logSize;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public boolean isMonitorStats() {
1:b2fca26:         return monitorStats;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setMonitorStats(boolean monitorStats) {
1:b2fca26:         this.monitorStats = monitorStats;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public boolean isParanoidChecks() {
1:b2fca26:         return paranoidChecks;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setParanoidChecks(boolean paranoidChecks) {
1:b2fca26:         this.paranoidChecks = paranoidChecks;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public boolean isSync() {
1:b2fca26:         return sync;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setSync(boolean sync) {
1:b2fca26:         this.sync = sync;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public boolean isVerifyChecksums() {
1:b2fca26:         return verifyChecksums;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26:     public void setVerifyChecksums(boolean verifyChecksums) {
1:b2fca26:         this.verifyChecksums = verifyChecksums;
1:b2fca26:     }
1:b2fca26: 
1:b2fca26: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb;
1: 
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.PersistenceAdapterFactory;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
1: /**
1:  * A factory which can create configured LevelDBStore objects.
1:  */
1: public class LevelDBStoreFactory implements PersistenceAdapterFactory {
1: 
1:     private int asyncBufferSize = 1024*1024*4;
1:     private File directory = new File("LevelDB");
1:     private int flushDelay = 1000*5;
1:     private int indexBlockRestartInterval = 16;
1:     private int indexBlockSize = 4 * 1024;
1:     private long indexCacheSize = 1024 * 1024 * 256L;
1:     private String indexCompression = "snappy";
1:     private String indexFactory = "org.fusesource.leveldbjni.JniDBFactory, org.iq80.leveldb.impl.Iq80DBFactory";
1:     private int indexMaxOpenFiles = 1000;
1:     private int indexWriteBufferSize = 1024*1024*6;
1:     private String logCompression = "none";
1:     private File logDirectory;
1:     private long logSize = 1024 * 1024 * 100;
1:     private boolean monitorStats;
1:     private boolean paranoidChecks;
1:     private boolean sync = true;
1:     private boolean verifyChecksums;
1: 
1: 
1:     @Override
1:     public PersistenceAdapter createPersistenceAdapter() throws IOException {
1:         LevelDBStore store = new LevelDBStore();
1:         store.setVerifyChecksums(verifyChecksums);
1:         store.setAsyncBufferSize(asyncBufferSize);
1:         store.setDirectory(directory);
1:         store.setFlushDelay(flushDelay);
1:         store.setIndexBlockRestartInterval(indexBlockRestartInterval);
1:         store.setIndexBlockSize(indexBlockSize);
1:         store.setIndexCacheSize(indexCacheSize);
1:         store.setIndexCompression(indexCompression);
1:         store.setIndexFactory(indexFactory);
1:         store.setIndexMaxOpenFiles(indexMaxOpenFiles);
1:         store.setIndexWriteBufferSize(indexWriteBufferSize);
1:         store.setLogCompression(logCompression);
1:         store.setLogDirectory(logDirectory);
1:         store.setLogSize(logSize);
1:         store.setMonitorStats(monitorStats);
1:         store.setParanoidChecks(paranoidChecks);
1:         store.setSync(sync);
1:         return store;
1:     }
1: 
1:     public int getAsyncBufferSize() {
1:         return asyncBufferSize;
1:     }
1: 
1:     public void setAsyncBufferSize(int asyncBufferSize) {
1:         this.asyncBufferSize = asyncBufferSize;
1:     }
1: 
1:     public File getDirectory() {
1:         return directory;
1:     }
1: 
1:     public void setDirectory(File directory) {
1:         this.directory = directory;
1:     }
1: 
1:     public int getFlushDelay() {
1:         return flushDelay;
1:     }
1: 
1:     public void setFlushDelay(int flushDelay) {
1:         this.flushDelay = flushDelay;
1:     }
1: 
1:     public int getIndexBlockRestartInterval() {
1:         return indexBlockRestartInterval;
1:     }
1: 
1:     public void setIndexBlockRestartInterval(int indexBlockRestartInterval) {
1:         this.indexBlockRestartInterval = indexBlockRestartInterval;
1:     }
1: 
1:     public int getIndexBlockSize() {
1:         return indexBlockSize;
1:     }
1: 
1:     public void setIndexBlockSize(int indexBlockSize) {
1:         this.indexBlockSize = indexBlockSize;
1:     }
1: 
1:     public long getIndexCacheSize() {
1:         return indexCacheSize;
1:     }
1: 
1:     public void setIndexCacheSize(long indexCacheSize) {
1:         this.indexCacheSize = indexCacheSize;
1:     }
1: 
1:     public String getIndexCompression() {
1:         return indexCompression;
1:     }
1: 
1:     public void setIndexCompression(String indexCompression) {
1:         this.indexCompression = indexCompression;
1:     }
1: 
1:     public String getIndexFactory() {
1:         return indexFactory;
1:     }
1: 
1:     public void setIndexFactory(String indexFactory) {
1:         this.indexFactory = indexFactory;
1:     }
1: 
1:     public int getIndexMaxOpenFiles() {
1:         return indexMaxOpenFiles;
1:     }
1: 
1:     public void setIndexMaxOpenFiles(int indexMaxOpenFiles) {
1:         this.indexMaxOpenFiles = indexMaxOpenFiles;
1:     }
1: 
1:     public int getIndexWriteBufferSize() {
1:         return indexWriteBufferSize;
1:     }
1: 
1:     public void setIndexWriteBufferSize(int indexWriteBufferSize) {
1:         this.indexWriteBufferSize = indexWriteBufferSize;
1:     }
1: 
1:     public String getLogCompression() {
1:         return logCompression;
1:     }
1: 
1:     public void setLogCompression(String logCompression) {
1:         this.logCompression = logCompression;
1:     }
1: 
1:     public File getLogDirectory() {
1:         return logDirectory;
1:     }
1: 
1:     public void setLogDirectory(File logDirectory) {
1:         this.logDirectory = logDirectory;
1:     }
1: 
1:     public long getLogSize() {
1:         return logSize;
1:     }
1: 
1:     public void setLogSize(long logSize) {
1:         this.logSize = logSize;
1:     }
1: 
1:     public boolean isMonitorStats() {
1:         return monitorStats;
1:     }
1: 
1:     public void setMonitorStats(boolean monitorStats) {
1:         this.monitorStats = monitorStats;
1:     }
1: 
1:     public boolean isParanoidChecks() {
1:         return paranoidChecks;
1:     }
1: 
1:     public void setParanoidChecks(boolean paranoidChecks) {
1:         this.paranoidChecks = paranoidChecks;
1:     }
1: 
1:     public boolean isSync() {
1:         return sync;
1:     }
1: 
1:     public void setSync(boolean sync) {
1:         this.sync = sync;
1:     }
1: 
1:     public boolean isVerifyChecksums() {
1:         return verifyChecksums;
1:     }
1: 
1:     public void setVerifyChecksums(boolean verifyChecksums) {
1:         this.verifyChecksums = verifyChecksums;
1:     }
1: 
1: }
============================================================================