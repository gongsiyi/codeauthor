1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to create and destroy destinations on the broker.
1:d29ca2a:  * 
1:4afa5d6:  * @openwire:marshaller code="8"
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class DestinationInfo extends BaseCommand {
1:d29ca2a: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.DESTINATION_INFO;
1:d29ca2a: 
1:230a86c:     public static final byte ADD_OPERATION_TYPE = 0;
1:230a86c:     public static final byte REMOVE_OPERATION_TYPE = 1;
1:230a86c: 
1:d29ca2a:     protected ConnectionId connectionId;
1:d29ca2a:     protected ActiveMQDestination destination;
1:d29ca2a:     protected byte operationType;
1:d29ca2a:     protected long timeout;
1:d29ca2a:     protected BrokerId[] brokerPath;
1:230a86c: 
1:d29ca2a:     public DestinationInfo() {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public DestinationInfo(ConnectionId connectionId, byte operationType, ActiveMQDestination destination) {
1:230a86c:         this.connectionId = connectionId;
1:230a86c:         this.operationType = operationType;
1:230a86c:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isAddOperation() {
1:d29ca2a:         return operationType == ADD_OPERATION_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isRemoveOperation() {
1:d29ca2a:         return operationType == REMOVE_OPERATION_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ConnectionId getConnectionId() {
1:d29ca2a:         return connectionId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setConnectionId(ConnectionId connectionId) {
1:d29ca2a:         this.connectionId = connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte getOperationType() {
1:d29ca2a:         return operationType;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setOperationType(byte operationType) {
1:d29ca2a:         this.operationType = operationType;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public long getTimeout() {
1:d29ca2a:         return timeout;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setTimeout(long timeout) {
1:d29ca2a:         this.timeout = timeout;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * The route of brokers the command has moved through.
1:d29ca2a:      * 
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public BrokerId[] getBrokerPath() {
1:d29ca2a:         return brokerPath;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setBrokerPath(BrokerId[] brokerPath) {
1:d29ca2a:         this.brokerPath = brokerPath;
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:230a86c:         if (isAddOperation()) {
1:230a86c:             return visitor.processAddDestination(this);
1:230a86c:         } else if (isRemoveOperation()) {
1:230a86c:             return visitor.processRemoveDestination(this);
1:d29ca2a:         }
1:230a86c:         throw new IOException("Unknown operation type: " + getOperationType());
1:d29ca2a:     }
1:230a86c: 
1:d4ccc50:     public DestinationInfo copy() {
1:d4ccc50:         DestinationInfo result = new DestinationInfo();
1:d4ccc50:         super.copy(result);
1:d4ccc50:         result.connectionId = connectionId;
1:d4ccc50:         result.destination = destination;
1:d4ccc50:         result.operationType = operationType;
1:d4ccc50:         result.brokerPath = brokerPath;
1:d4ccc50:         return result;
1:d29ca2a:     }
1:d4ccc50: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.DESTINATION_INFO;
1:     public static final byte ADD_OPERATION_TYPE = 0;
1:     public static final byte REMOVE_OPERATION_TYPE = 1;
1: 
1: 
1:         this.connectionId = connectionId;
1:         this.operationType = operationType;
1:         this.destination = destination;
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * The route of brokers the command has moved through.
1: 
1:         if (isAddOperation()) {
1:             return visitor.processAddDestination(this);
1:         } else if (isRemoveOperation()) {
1:             return visitor.processRemoveDestination(this);
1:         throw new IOException("Unknown operation type: " + getOperationType());
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * Used to create and destroy destinations on the broker.
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.9 $
1:  */
1: public class DestinationInfo extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.DESTINATION_INFO;
1: 
0:     public static final byte ADD_OPERATION_TYPE=0;
0:     public static final byte REMOVE_OPERATION_TYPE=1;
1:     
1:     protected ConnectionId connectionId;
1:     protected ActiveMQDestination destination;
1:     protected byte operationType;
1:     protected long timeout;
1:     protected BrokerId[] brokerPath;
1:     
1:     public DestinationInfo() {
1:     }
1: 
1:     public DestinationInfo(ConnectionId connectionId, byte operationType, ActiveMQDestination destination) {
0:         this.connectionId=connectionId;
0:         this.operationType=operationType;
0:         this.destination=destination;
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     public boolean isAddOperation() {
1:         return operationType == ADD_OPERATION_TYPE;
1:     }
1:     
1:     public boolean isRemoveOperation() {
1:         return operationType == REMOVE_OPERATION_TYPE;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ConnectionId getConnectionId() {
1:         return connectionId;
1:     }
1:     public void setConnectionId(ConnectionId connectionId) {
1:         this.connectionId = connectionId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte getOperationType() {
1:         return operationType;
1:     }
1: 
1:     public void setOperationType(byte operationType) {
1:         this.operationType = operationType;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getTimeout() {
1:         return timeout;
1:     }
1: 
1:     public void setTimeout(long timeout) {
1:         this.timeout = timeout;
1:     }
1:     
1:     /**
0:      * The route of brokers the command has moved through. 
1:      * 
1:      * @openwire:property version=1 cache=true
1:      */
1:     public BrokerId[] getBrokerPath() {
1:         return brokerPath;
1:     }
1:     public void setBrokerPath(BrokerId[] brokerPath) {
1:         this.brokerPath = brokerPath;
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         if( isAddOperation() ) {
0:             return visitor.processAddDestination( this );
0:         } else if( isRemoveOperation() ) {
0:             return visitor.processRemoveDestination( this );
1:         }
0:         throw new IOException("Unknown operation type: "+getOperationType());
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:d4ccc50
/////////////////////////////////////////////////////////////////////////
1:     public DestinationInfo copy() {
1:         DestinationInfo result = new DestinationInfo();
1:         super.copy(result);
1:         result.connectionId = connectionId;
1:         result.destination = destination;
1:         result.operationType = operationType;
1:         result.brokerPath = brokerPath;
1:         return result;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="8"
============================================================================