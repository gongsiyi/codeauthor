1:90b66ce: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
5:90b66ce:  *
1:90b66ce:  * Unless required by applicable law or agreed to in writing, software
1:90b66ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90b66ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90b66ce:  * See the License for the specific language governing permissions and
1:90b66ce:  * limitations under the License.
1:90b66ce:  */
1:90b66ce: package org.apache.activemq.web.handler;
1:9dc43f3: 
1:9dc43f3: import java.util.Arrays;
1:9dc43f3: 
1:540dd5c: import javax.servlet.http.HttpServletRequest;
1:540dd5c: 
1:9dc43f3: import org.apache.activemq.web.DestinationFacade;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8a5e197: import org.springframework.web.bind.ServletRequestDataBinder;
1:508128e: import org.springframework.web.servlet.HandlerExecutionChain;
1:67252fe: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
1:9dc43f3: 
1:90b66ce: /**
1:67252fe:  *
1:90b66ce:  */
1:90b66ce: public class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(BindingBeanNameUrlHandlerMapping.class);
1:9dc43f3: 
1:67252fe:     @Override
1:90b66ce:     protected Object getHandlerInternal(HttpServletRequest request) throws Exception {
1:90b66ce:         Object object = super.getHandlerInternal(request);
1:9dc43f3: 
1:90b66ce:         if (object instanceof String) {
1:508128e:             String handlerName = (String) object;
1:90b66ce:             object = getApplicationContext().getBean(handlerName);
1:b1ed273:         }
1:508128e:         if (object instanceof HandlerExecutionChain) {
1:508128e:             HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object;
1:508128e:             object = handlerExecutionChain.getHandler();
1:508128e:         }
1:67252fe: 
1:508128e:         if (object != null) {
1:67252fe:             // prevent CSRF attacks
1:67252fe:             if (object instanceof DestinationFacade) {
1:67252fe:                 // check supported methods
1:67252fe:                 if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
1:67252fe:                     throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
1:67252fe:                 }
1:67252fe:                 // check the 'secret'
1:67252fe:                 if (request.getSession().getAttribute("secret") == null ||
1:67252fe:                     !request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
1:67252fe:                     throw new UnsupportedOperationException("Possible CSRF attack");
1:67252fe:                 }
1:67252fe:             }
1:67252fe: 
1:508128e:             ServletRequestDataBinder binder = new ServletRequestDataBinder(object, "request");
1:508128e:             try {
1:508128e:                 binder.bind(request);
1:508128e:                 binder.setIgnoreUnknownFields(true);
1:540dd5c:                 if (LOG.isDebugEnabled()) {
1:540dd5c:                     LOG.debug("Bound POJO is now: " + object);
1:9dc43f3:                 }
1:9dc43f3:             }
1:508128e:             catch (Exception e) {
1:508128e:                 LOG.warn("Caught: " + e, e);
1:508128e:                 throw e;
1:9dc43f3:             }
1:508128e:         }
1:67252fe: 
1:90b66ce:         return object;
1:508128e:     }
1:508128e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:67252fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
1:  *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:             // prevent CSRF attacks
1:             if (object instanceof DestinationFacade) {
1:                 // check supported methods
1:                 if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
1:                     throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
1:                 }
1:                 // check the 'secret'
1:                 if (request.getSession().getAttribute("secret") == null ||
1:                     !request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
1:                     throw new UnsupportedOperationException("Possible CSRF attack");
1:                 }
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.servlet.http.HttpServletRequest;
1: 
0:     private static final transient Log LOG = LogFactory.getLog(BindingBeanNameUrlHandlerMapping.class);
0:             String handlerName = (String)object;
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Bound POJO is now: " + object);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(BindingBeanNameUrlHandlerMapping.class);
commit:9dc43f3
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
0: import java.util.UUID;
1: 
1: import org.apache.activemq.web.DestinationFacade;
/////////////////////////////////////////////////////////////////////////
1:         
0:         	// prevent CSRF attacks
0:         	if (object instanceof DestinationFacade) {
0:         		// check supported methods
0:         		if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
0:         			throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
1:         		}
0:         		// check the 'secret'
0:         		if (!request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
0:         			throw new UnsupportedOperationException("Possible CSRF attack");
1:         		}
1:         	}
1:         	
1:         	
/////////////////////////////////////////////////////////////////////////
1:         
author:James Strachan
-------------------------------------------------------------------------------
commit:508128e
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.web.servlet.HandlerExecutionChain;
/////////////////////////////////////////////////////////////////////////
1:             String handlerName = (String) object;
1:         if (object instanceof HandlerExecutionChain) {
1:             HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object;
1:             object = handlerExecutionChain.getHandler();
1:         }
1:         if (object != null) {
1:             ServletRequestDataBinder binder = new ServletRequestDataBinder(object, "request");
1:             try {
1:                 binder.bind(request);
1:                 binder.setIgnoreUnknownFields(true);
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Bound POJO is now: " + object);
1:                 }
1:             }
1:             catch (Exception e) {
1:                 LOG.warn("Caught: " + e, e);
1:                 throw e;
1:             }
commit:8a5e197
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.web.bind.ServletRequestDataBinder;
0: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
commit:b1ed273
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(BindingBeanNameUrlHandlerMapping.class);
/////////////////////////////////////////////////////////////////////////
0:         ServletRequestDataBinder binder = new ServletRequestDataBinder(object, "request");
0:         binder.setIgnoreUnknownFields(true);
0:         if (log.isDebugEnabled()) {
0:             log.debug("Bound POJO is now: " + object);
1:         }
commit:90b66ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.handler;
0: 
0: import org.springframework.web.bind.ServletRequestDataBinder;
0: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
0: 
0: import javax.servlet.http.HttpServletRequest;
0: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping {
0: 
1:     protected Object getHandlerInternal(HttpServletRequest request) throws Exception {
1:         Object object = super.getHandlerInternal(request);
0: 
1:         if (object instanceof String) {
0:             String handlerName = (String) object;
1:             object = getApplicationContext().getBean(handlerName);
0:         }
0: 
0:         ServletRequestDataBinder binder = new ServletRequestDataBinder(object, null);
0:         binder.bind(request);
0:         System.out.println("Bound POJO is now: " + object);
1:         return object;
0:     }
0: 
0: }
============================================================================