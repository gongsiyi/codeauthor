1:3125cae: /**
1:3125cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3125cae:  * contributor license agreements.  See the NOTICE file distributed with
1:3125cae:  * this work for additional information regarding copyright ownership.
1:3125cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3125cae:  * (the "License"); you may not use this file except in compliance with
1:3125cae:  * the License.  You may obtain a copy of the License at
1:3125cae:  *
1:3125cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3125cae:  *
1:3125cae:  * Unless required by applicable law or agreed to in writing, software
1:3125cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3125cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3125cae:  * See the License for the specific language governing permissions and
1:3125cae:  * limitations under the License.
1:3125cae:  */
1:3125cae: package org.apache.activemq.openwire;
6:3125cae: 
1:3125cae: import static org.junit.Assert.assertTrue;
1:3125cae: 
1:3125cae: import java.io.File;
1:3125cae: import java.io.IOException;
1:3125cae: import java.net.Socket;
1:3125cae: import java.util.Arrays;
1:3125cae: import java.util.Collection;
1:3125cae: import java.util.Vector;
1:3125cae: import java.util.concurrent.TimeUnit;
1:3125cae: 
1:3125cae: import javax.net.ssl.SSLSocketFactory;
1:3125cae: 
1:3125cae: import org.apache.activemq.broker.BrokerService;
1:3125cae: import org.apache.activemq.broker.TransportConnector;
1:3125cae: import org.apache.activemq.spring.SpringSslContext;
1:ed0e786: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:3125cae: import org.apache.activemq.util.Wait;
1:3125cae: import org.junit.After;
1:3125cae: import org.junit.Before;
1:3125cae: import org.junit.Rule;
1:3125cae: import org.junit.Test;
1:3125cae: import org.junit.rules.TestName;
1:3125cae: import org.junit.runner.RunWith;
1:3125cae: import org.junit.runners.Parameterized;
1:3125cae: import org.junit.runners.Parameterized.Parameters;
1:3125cae: import org.slf4j.Logger;
1:3125cae: import org.slf4j.LoggerFactory;
1:3125cae: 
1:3125cae: /**
1:3125cae:  * Test that connection attempts that don't send the WireFormatInfo performative
1:3125cae:  * get cleaned up by the inactivity monitor.
1:3125cae:  */
1:3125cae: @RunWith(Parameterized.class)
1:3125cae: public class OpenWireConnectionTimeoutTest {
1:3125cae: 
1:3125cae:     private static final Logger LOG = LoggerFactory.getLogger(OpenWireConnectionTimeoutTest.class);
1:3125cae: 
1:3125cae:     @Rule public TestName name = new TestName();
1:3125cae: 
1:e57de54:     public static final String KEYSTORE_TYPE = "jks";
1:e57de54:     public static final String PASSWORD = "password";
1:e57de54:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:e57de54:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:e57de54: 
1:3125cae:     private Socket connection;
1:3125cae:     protected String connectorScheme;
1:3125cae:     protected int port;
1:3125cae:     protected BrokerService brokerService;
1:3125cae:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1:3125cae: 
1:e57de54:     static {
1:e57de54:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:e57de54:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:e57de54:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:e57de54:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:e57de54:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:e57de54:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:e57de54:     }
1:e57de54: 
1:3125cae:     @Parameters(name="{0}")
1:3125cae:     public static Collection<Object[]> data() {
1:3125cae:         return Arrays.asList(new Object[][] {
1:3125cae:                 {"tcp"},
1:3125cae:                 {"ssl"},
1:3125cae:                 {"nio"},
1:ed0e786:                 {"nio+ssl"},
1:ed0e786:                 {"auto"},
1:ed0e786:                 {"auto+ssl"},
1:ed0e786:                 {"auto+nio"},
1:ed0e786:                 {"auto+nio+ssl"}
1:3125cae:             });
5:3125cae:     }
1:3125cae: 
1:3125cae:     public OpenWireConnectionTimeoutTest(String connectorScheme) {
1:3125cae:         this.connectorScheme = connectorScheme;
1:3125cae:     }
1:3125cae: 
1:3125cae:     protected String getConnectorScheme() {
1:3125cae:         return connectorScheme;
1:3125cae:     }
1:3125cae: 
1:3125cae:     public String getTestName() {
1:3125cae:         return name.getMethodName();
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Before
1:3125cae:     public void setUp() throws Exception {
1:3125cae:         LOG.info("========== start " + getTestName() + " ==========");
1:3125cae: 
1:3125cae:         startBroker();
1:3125cae:     }
1:3125cae: 
1:3125cae:     @After
1:3125cae:     public void tearDown() throws Exception {
1:3125cae:         if (connection != null) {
1:3125cae:             try {
1:3125cae:                 connection.close();
1:3125cae:             } catch (Throwable e) {}
1:3125cae:             connection = null;
1:3125cae:         }
1:3125cae: 
1:3125cae:         stopBroker();
1:3125cae: 
1:3125cae:         LOG.info("========== start " + getTestName() + " ==========");
1:3125cae:     }
1:3125cae: 
1:3125cae:     public String getAdditionalConfig() {
1:ed0e786:         return "?transport.connectAttemptTimeout=1200&protocolDetectionTimeOut=1200";
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Test(timeout = 90000)
1:3125cae:     public void testInactivityMonitor() throws Exception {
1:3125cae: 
1:3125cae:         Thread t1 = new Thread() {
1:3125cae: 
4:3125cae:             @Override
1:3125cae:             public void run() {
1:3125cae:                 try {
1:3125cae:                     connection = createConnection();
1:3125cae:                     connection.getOutputStream().write('A');
1:3125cae:                     connection.getOutputStream().flush();
1:3125cae:                 } catch (Exception ex) {
1:3125cae:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:3125cae:                     exceptions.add(ex);
1:3125cae:                 }
1:3125cae:             }
1:3125cae:         };
1:3125cae: 
1:3125cae:         t1.start();
1:3125cae: 
1:3125cae:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:3125cae:              @Override
1:3125cae:              public boolean isSatisified() throws Exception {
1:ed0e786:                  TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:ed0e786:                  return 1 == server.getCurrentTransportCount().get();
1:3125cae:              }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:3125cae: 
1:3125cae:         // and it should be closed due to inactivity
1:3125cae:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:3125cae:             @Override
1:3125cae:             public boolean isSatisified() throws Exception {
1:ed0e786:                 TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:ed0e786:                 return 0 == server.getCurrentTransportCount().get();
1:3125cae:             }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1:3125cae: 
1:3125cae:         assertTrue("no exceptions", exceptions.isEmpty());
1:3125cae:     }
1:3125cae: 
1:3125cae:     protected Socket createConnection() throws IOException {
1:3125cae:         boolean useSsl = false;
1:3125cae: 
1:3125cae:         switch (connectorScheme) {
1:3125cae:             case "tcp":
1:ed0e786:             case "auto":
1:3125cae:             case "nio":
1:ed0e786:             case "auto+nio":
1:3125cae:                 break;
1:3125cae:             case "ssl":
1:ed0e786:             case "auto+ssl":
1:3125cae:             case "nio+ssl":
1:ed0e786:             case "auto+nio+ssl":
1:2a0b785:                 useSsl = true;
1:3125cae:                 break;
1:3125cae:             default:
1:3125cae:                 throw new IOException("Invalid OpenWire connector scheme passed to test.");
1:3125cae:         }
1:3125cae: 
1:3125cae:         if (useSsl) {
1:3125cae:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:3125cae:         } else {
1:3125cae:             return new Socket("localhost", port);
1:3125cae:         }
1:3125cae:     }
1:3125cae: 
1:3125cae:     protected void startBroker() throws Exception {
1:3125cae:         brokerService = new BrokerService();
1:3125cae:         brokerService.setPersistent(false);
1:3125cae:         brokerService.setSchedulerSupport(false);
1:3125cae:         brokerService.setAdvisorySupport(false);
1:3125cae:         brokerService.setUseJmx(false);
1:3125cae:         brokerService.getManagementContext().setCreateConnector(false);
1:3125cae: 
1:3125cae:         // Setup SSL context...
1:3125cae:         final File classesDir = new File(OpenWireConnectionTimeoutTest.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:3125cae:         File keystore = new File(classesDir, "../../src/test/resources/server.keystore");
1:3125cae:         final SpringSslContext sslContext = new SpringSslContext();
1:3125cae:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:3125cae:         sslContext.setKeyStorePassword("password");
1:3125cae:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:3125cae:         sslContext.setTrustStorePassword("password");
1:3125cae:         sslContext.afterPropertiesSet();
1:3125cae:         brokerService.setSslContext(sslContext);
1:3125cae: 
1:3125cae:         System.setProperty("javax.net.ssl.trustStore", keystore.getCanonicalPath());
1:3125cae:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:3125cae:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:3125cae:         System.setProperty("javax.net.ssl.keyStore", keystore.getCanonicalPath());
1:3125cae:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:3125cae:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:3125cae: 
1:3125cae:         TransportConnector connector = null;
1:3125cae: 
1:3125cae:         switch (connectorScheme) {
1:3125cae:             case "tcp":
1:3125cae:                 connector = brokerService.addConnector("tcp://0.0.0.0:0" + getAdditionalConfig());
1:3125cae:                 break;
1:3125cae:             case "nio":
1:3125cae:                 connector = brokerService.addConnector("nio://0.0.0.0:0" + getAdditionalConfig());
1:3125cae:                 break;
1:3125cae:             case "ssl":
1:3125cae:                 connector = brokerService.addConnector("ssl://0.0.0.0:0" + getAdditionalConfig());
1:3125cae:                 break;
1:3125cae:             case "nio+ssl":
1:3125cae:                 connector = brokerService.addConnector("nio+ssl://0.0.0.0:0" + getAdditionalConfig());
1:3125cae:                 break;
1:ed0e786:             case "auto":
1:ed0e786:                 connector = brokerService.addConnector("auto://0.0.0.0:0" + getAdditionalConfig());
1:ed0e786:                 break;
1:ed0e786:             case "auto+nio":
1:ed0e786:                 connector = brokerService.addConnector("auto+nio://0.0.0.0:0" + getAdditionalConfig());
1:ed0e786:                 break;
1:ed0e786:             case "auto+ssl":
1:ed0e786:                 connector = brokerService.addConnector("auto+ssl://0.0.0.0:0" + getAdditionalConfig());
1:ed0e786:                 break;
1:ed0e786:             case "auto+nio+ssl":
1:ed0e786:                 connector = brokerService.addConnector("auto+nio+ssl://0.0.0.0:0" + getAdditionalConfig());
1:ed0e786:                 break;
1:3125cae:             default:
1:3125cae:                 throw new IOException("Invalid OpenWire connector scheme passed to test.");
1:3125cae:         }
1:3125cae: 
1:3125cae:         brokerService.start();
1:3125cae:         brokerService.waitUntilStarted();
1:3125cae: 
1:3125cae:         port = connector.getPublishableConnectURI().getPort();
1:3125cae:     }
1:3125cae: 
1:3125cae:     public void stopBroker() throws Exception {
1:3125cae:         if (brokerService != null) {
1:3125cae:             brokerService.stop();
1:3125cae:             brokerService.waitUntilStopped();
1:3125cae:             brokerService = null;
1:3125cae:         }
1:3125cae:     }
1:3125cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2a0b785
/////////////////////////////////////////////////////////////////////////
1:                 useSsl = true;
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
/////////////////////////////////////////////////////////////////////////
1:                 {"nio+ssl"},
1:                 {"auto"},
1:                 {"auto+ssl"},
1:                 {"auto+nio"},
1:                 {"auto+nio+ssl"}
/////////////////////////////////////////////////////////////////////////
1:         return "?transport.connectAttemptTimeout=1200&protocolDetectionTimeOut=1200";
/////////////////////////////////////////////////////////////////////////
1:                  TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:                  return 1 == server.getCurrentTransportCount().get();
/////////////////////////////////////////////////////////////////////////
1:                 TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:                 return 0 == server.getCurrentTransportCount().get();
/////////////////////////////////////////////////////////////////////////
1:             case "auto":
1:             case "auto+nio":
1:             case "auto+ssl":
1:             case "auto+nio+ssl":
/////////////////////////////////////////////////////////////////////////
1:             case "auto":
1:                 connector = brokerService.addConnector("auto://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "auto+nio":
1:                 connector = brokerService.addConnector("auto+nio://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "auto+ssl":
1:                 connector = brokerService.addConnector("auto+ssl://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "auto+nio+ssl":
1:                 connector = brokerService.addConnector("auto+nio+ssl://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
commit:e57de54
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.Socket;
0: import java.security.SecureRandom;
0: import java.security.cert.CertificateException;
0: import java.security.cert.X509Certificate;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Vector;
1: import java.util.concurrent.TimeUnit;
1: 
0: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLSocketFactory;
0: import javax.net.ssl.TrustManager;
0: import javax.net.ssl.X509TrustManager;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that connection attempts that don't send the WireFormatInfo performative
1:  * get cleaned up by the inactivity monitor.
1:  */
1: @RunWith(Parameterized.class)
1: public class OpenWireConnectionTimeoutTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(OpenWireConnectionTimeoutTest.class);
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private Socket connection;
1:     protected String connectorScheme;
1:     protected int port;
1:     protected BrokerService brokerService;
1:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"tcp"},
1:                 {"ssl"},
1:                 {"nio"},
0:                 {"nio+ssl"}
1:             });
1:     }
1: 
1:     public OpenWireConnectionTimeoutTest(String connectorScheme) {
1:         this.connectorScheme = connectorScheme;
1:     }
1: 
1:     protected String getConnectorScheme() {
1:         return connectorScheme;
1:     }
1: 
1:     public String getTestName() {
1:         return name.getMethodName();
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("========== start " + getTestName() + " ==========");
1: 
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {}
1:             connection = null;
1:         }
1: 
1:         stopBroker();
1: 
1:         LOG.info("========== start " + getTestName() + " ==========");
1:     }
1: 
1:     public String getAdditionalConfig() {
0:         return "?transport.connectAttemptTimeout=1200";
1:     }
1: 
1:     @Test(timeout = 90000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         Thread t1 = new Thread() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = createConnection();
1:                     connection.getOutputStream().write('A');
1:                     connection.getOutputStream().flush();
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
1:         t1.start();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
0:                  return 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:              }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     protected Socket createConnection() throws IOException {
1:         boolean useSsl = false;
1: 
1:         switch (connectorScheme) {
1:             case "tcp":
1:             case "nio":
1:                 break;
1:             case "ssl":
1:             case "nio+ssl":
0:                 useSsl = true;;
1:                 break;
1:             default:
1:                 throw new IOException("Invalid OpenWire connector scheme passed to test.");
1:         }
1: 
1:         if (useSsl) {
1:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:         } else {
1:             return new Socket("localhost", port);
1:         }
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.getManagementContext().setCreateConnector(false);
1: 
0:         SSLContext ctx = SSLContext.getInstance("TLS");
0:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
0:         SSLContext.setDefault(ctx);
1: 
1:         // Setup SSL context...
1:         final File classesDir = new File(OpenWireConnectionTimeoutTest.class.getProtectionDomain().getCodeSource().getLocation().getFile());
1:         File keystore = new File(classesDir, "../../src/test/resources/server.keystore");
1:         final SpringSslContext sslContext = new SpringSslContext();
1:         sslContext.setKeyStore(keystore.getCanonicalPath());
1:         sslContext.setKeyStorePassword("password");
1:         sslContext.setTrustStore(keystore.getCanonicalPath());
1:         sslContext.setTrustStorePassword("password");
1:         sslContext.afterPropertiesSet();
1:         brokerService.setSslContext(sslContext);
1: 
1:         System.setProperty("javax.net.ssl.trustStore", keystore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", keystore.getCanonicalPath());
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         TransportConnector connector = null;
1: 
1:         switch (connectorScheme) {
1:             case "tcp":
1:                 connector = brokerService.addConnector("tcp://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "nio":
1:                 connector = brokerService.addConnector("nio://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "ssl":
1:                 connector = brokerService.addConnector("ssl://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             case "nio+ssl":
1:                 connector = brokerService.addConnector("nio+ssl://0.0.0.0:0" + getAdditionalConfig());
1:                 break;
1:             default:
1:                 throw new IOException("Invalid OpenWire connector scheme passed to test.");
1:         }
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         port = connector.getPublishableConnectURI().getPort();
1:     }
1: 
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
0:     public class DefaultTrustManager implements X509TrustManager {
1: 
1:         @Override
0:         public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:         }
1: 
1:         @Override
0:         public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
1:         }
1: 
1:         @Override
0:         public X509Certificate[] getAcceptedIssuers() {
0:             return new X509Certificate[0];
1:         }
1:     }
1: }
============================================================================