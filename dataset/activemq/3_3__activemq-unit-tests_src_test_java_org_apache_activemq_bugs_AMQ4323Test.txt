1:65bc9f3: /**
1:65bc9f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:65bc9f3:  * contributor license agreements.  See the NOTICE file distributed with
1:65bc9f3:  * this work for additional information regarding copyright ownership.
1:65bc9f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:65bc9f3:  * (the "License"); you may not use this file except in compliance with
1:65bc9f3:  * the License.  You may obtain a copy of the License at
1:65bc9f3:  *
1:65bc9f3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:65bc9f3:  *
1:65bc9f3:  * Unless required by applicable law or agreed to in writing, software
1:65bc9f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:65bc9f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:65bc9f3:  * See the License for the specific language governing permissions and
1:65bc9f3:  * limitations under the License.
1:65bc9f3:  */
1:65bc9f3: package org.apache.activemq.bugs;
1:65bc9f3: 
1:65bc9f3: import java.io.File;
1:65bc9f3: import javax.jms.Connection;
1:65bc9f3: import javax.jms.Destination;
1:65bc9f3: import javax.jms.Message;
1:65bc9f3: import javax.jms.Session;
1:65bc9f3: import org.apache.activemq.ActiveMQConnectionFactory;
1:65bc9f3: import org.apache.activemq.broker.BrokerService;
1:65bc9f3: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:65bc9f3: import org.apache.activemq.broker.region.policy.PolicyMap;
1:65bc9f3: import org.apache.activemq.command.ActiveMQQueue;
1:65bc9f3: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:65cef69: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:65bc9f3: import org.apache.activemq.util.ConsumerThread;
1:65bc9f3: import org.apache.activemq.util.ProducerThread;
1:65bc9f3: import org.apache.activemq.util.Wait;
1:65bc9f3: import org.junit.Test;
1:65bc9f3: import org.slf4j.Logger;
1:65bc9f3: import org.slf4j.LoggerFactory;
1:65bc9f3: 
1:65bc9f3: 
1:65bc9f3: import static org.junit.Assert.assertEquals;
1:65bc9f3: import static org.junit.Assert.assertTrue;
1:65bc9f3: 
1:65bc9f3: public class AMQ4323Test {
1:65bc9f3: 
1:65bc9f3:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4323Test.class);
1:65bc9f3: 
1:65bc9f3:     BrokerService broker = null;
1:65bc9f3:     File kahaDbDir = null;
1:65bc9f3:     private final Destination destination = new ActiveMQQueue("q");
1:65bc9f3:     final String payload = new String(new byte[1024]);
1:65bc9f3: 
1:65bc9f3:     protected void startBroker(boolean delete) throws Exception {
1:65bc9f3:         broker = new BrokerService();
1:65bc9f3: 
1:65bc9f3:         //Start with a clean directory
1:65bc9f3:         kahaDbDir = new File(broker.getBrokerDataDirectory(), "KahaDB");
1:65bc9f3:         deleteDir(kahaDbDir);
1:65bc9f3: 
1:65bc9f3:         broker.setSchedulerSupport(false);
1:65bc9f3:         broker.setDeleteAllMessagesOnStartup(delete);
1:65bc9f3:         broker.setPersistent(true);
1:65bc9f3:         broker.setUseJmx(false);
1:65bc9f3:         broker.addConnector("tcp://localhost:0");
1:65bc9f3: 
1:65bc9f3:         PolicyMap map = new PolicyMap();
1:65bc9f3:         PolicyEntry entry = new PolicyEntry();
1:65bc9f3:         entry.setUseCache(false);
1:65bc9f3:         map.setDefaultEntry(entry);
1:65bc9f3:         broker.setDestinationPolicy(map);
1:65bc9f3: 
1:65bc9f3:         configurePersistence(broker, delete);
1:65bc9f3: 
1:65bc9f3:         broker.start();
1:65bc9f3:         LOG.info("Starting broker..");
1:65bc9f3:     }
1:65bc9f3: 
1:65bc9f3:     protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception {
1:65bc9f3:         KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1:65bc9f3: 
1:65bc9f3:         // ensure there are a bunch of data files but multiple entries in each
1:65bc9f3:         adapter.setJournalMaxFileLength(1024 * 20);
1:65bc9f3: 
1:65bc9f3:         // speed up the test case, checkpoint an cleanup early and often
1:65bc9f3:         adapter.setCheckpointInterval(500);
1:65bc9f3:         adapter.setCleanupInterval(500);
1:65cef69:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
1:65bc9f3: 
1:65bc9f3:         if (!deleteAllOnStart) {
1:65bc9f3:             adapter.setForceRecoverIndex(true);
1:65bc9f3:         }
1:65bc9f3: 
1:65bc9f3:     }
1:65bc9f3: 
1:65bc9f3:     private boolean deleteDir(File dir) {
1:65bc9f3:         if (dir.isDirectory()) {
1:65bc9f3:             String[] children = dir.list();
1:65bc9f3:             for (int i = 0; i < children.length; i++) {
1:65bc9f3:                 boolean success = deleteDir(new File(dir, children[i]));
1:65bc9f3:                 if (!success) {
1:65bc9f3:                     return false;
1:65bc9f3:                 }
1:65bc9f3:             }
1:65bc9f3:         }
1:65bc9f3: 
1:65bc9f3:         return dir.delete();
1:65bc9f3:     }
1:65bc9f3: 
1:65bc9f3:     private int getFileCount(File dir){
1:65bc9f3:         if (dir.isDirectory()) {
1:65bc9f3:             String[] children = dir.list();
1:65bc9f3:             return children.length;
1:65bc9f3:         }
1:65bc9f3: 
1:65bc9f3:         return 0;
1:65bc9f3:     }
1:65bc9f3: 
1:65bc9f3:     @Test
1:65bc9f3:     public void testCleanupOfFiles() throws Exception {
1:65bc9f3:         final int messageCount = 500;
1:65bc9f3:         startBroker(true);
1:65bc9f3:         int fileCount = getFileCount(kahaDbDir);
1:65cef69:         assertEquals(4, fileCount);
1:65bc9f3: 
1:65bc9f3:         Connection connection = new ActiveMQConnectionFactory(
1:65bc9f3:                 broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:65bc9f3:         connection.start();
1:65bc9f3:         Session producerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:65bc9f3:         Session consumerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:65bc9f3: 
1:65bc9f3:         ProducerThread producer = new ProducerThread(producerSess, destination) {
1:65bc9f3:             @Override
1:65bc9f3:             protected Message createMessage(int i) throws Exception {
1:9f0ab46:                 return session.createTextMessage(payload + "::" + i);
1:65bc9f3:             }
1:65bc9f3:         };
1:65bc9f3:         producer.setMessageCount(messageCount);
1:65bc9f3:         ConsumerThread consumer = new ConsumerThread(consumerSess, destination);
1:65bc9f3:         consumer.setBreakOnNull(false);
1:65bc9f3:         consumer.setMessageCount(messageCount);
1:65bc9f3: 
1:65bc9f3:         producer.start();
1:65bc9f3:         producer.join();
1:65bc9f3: 
1:65bc9f3:         consumer.start();
1:65bc9f3:         consumer.join();
1:65bc9f3: 
1:65bc9f3:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
1:65bc9f3: 
1:65bc9f3:         // verify cleanup
1:65bc9f3:         assertTrue("gc worked", Wait.waitFor(new Wait.Condition() {
1:65bc9f3:             @Override
1:65bc9f3:             public boolean isSatisified() throws Exception {
1:65bc9f3:                 int fileCount = getFileCount(kahaDbDir);
1:65bc9f3:                 LOG.info("current filecount:" + fileCount);
1:65cef69:                 return 4 == fileCount;
1:65bc9f3:             }
1:65bc9f3:         }));
1:65bc9f3: 
1:65bc9f3:         broker.stop();
1:65bc9f3:         broker.waitUntilStopped();
1:65bc9f3: 
1:65bc9f3:     }
1:65bc9f3: 
1:65bc9f3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:65cef69
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
/////////////////////////////////////////////////////////////////////////
1:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(4, fileCount);
/////////////////////////////////////////////////////////////////////////
1:                 return 4 == fileCount;
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(5, fileCount);
/////////////////////////////////////////////////////////////////////////
0:                 return 5 == fileCount;
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1:                 return session.createTextMessage(payload + "::" + i);
author:Gary Tully
-------------------------------------------------------------------------------
commit:65bc9f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.apache.activemq.util.ProducerThread;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ4323Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4323Test.class);
1: 
1:     BrokerService broker = null;
1:     File kahaDbDir = null;
1:     private final Destination destination = new ActiveMQQueue("q");
1:     final String payload = new String(new byte[1024]);
1: 
1:     protected void startBroker(boolean delete) throws Exception {
1:         broker = new BrokerService();
1: 
1:         //Start with a clean directory
1:         kahaDbDir = new File(broker.getBrokerDataDirectory(), "KahaDB");
1:         deleteDir(kahaDbDir);
1: 
1:         broker.setSchedulerSupport(false);
1:         broker.setDeleteAllMessagesOnStartup(delete);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:0");
1: 
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setUseCache(false);
1:         map.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(map);
1: 
1:         configurePersistence(broker, delete);
1: 
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
1: 
1:     protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception {
1:         KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1: 
1:         // ensure there are a bunch of data files but multiple entries in each
1:         adapter.setJournalMaxFileLength(1024 * 20);
1: 
1:         // speed up the test case, checkpoint an cleanup early and often
1:         adapter.setCheckpointInterval(500);
1:         adapter.setCleanupInterval(500);
1: 
1:         if (!deleteAllOnStart) {
1:             adapter.setForceRecoverIndex(true);
1:         }
1: 
1:     }
1: 
1:     private boolean deleteDir(File dir) {
1:         if (dir.isDirectory()) {
1:             String[] children = dir.list();
1:             for (int i = 0; i < children.length; i++) {
1:                 boolean success = deleteDir(new File(dir, children[i]));
1:                 if (!success) {
1:                     return false;
1:                 }
1:             }
1:         }
1: 
1:         return dir.delete();
1:     }
1: 
1:     private int getFileCount(File dir){
1:         if (dir.isDirectory()) {
1:             String[] children = dir.list();
1:             return children.length;
1:         }
1: 
1:         return 0;
1:     }
1: 
1:     @Test
1:     public void testCleanupOfFiles() throws Exception {
1:         final int messageCount = 500;
1:         startBroker(true);
1:         int fileCount = getFileCount(kahaDbDir);
0:         assertEquals(4, fileCount);
1: 
1:         Connection connection = new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:         connection.start();
1:         Session producerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session consumerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ProducerThread producer = new ProducerThread(producerSess, destination) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
0:                 return sess.createTextMessage(payload + "::" + i);
1:             }
1:         };
1:         producer.setMessageCount(messageCount);
1:         ConsumerThread consumer = new ConsumerThread(consumerSess, destination);
1:         consumer.setBreakOnNull(false);
1:         consumer.setMessageCount(messageCount);
1: 
1:         producer.start();
1:         producer.join();
1: 
1:         consumer.start();
1:         consumer.join();
1: 
1:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
1: 
1:         // verify cleanup
1:         assertTrue("gc worked", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 int fileCount = getFileCount(kahaDbDir);
1:                 LOG.info("current filecount:" + fileCount);
0:                 return 4 == fileCount;
1:             }
1:         }));
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:     }
1: 
1: }
============================================================================