1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
4:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.lang.reflect.InvocationTargetException;
1:d29ca2a: import java.lang.reflect.Method;
1:d29ca2a: import java.util.Arrays;
1:d29ca2a: 
1:d29ca2a: import junit.framework.AssertionFailedError;
1:d29ca2a: import junit.framework.TestCase;
1:f451ad0: import org.apache.activemq.CombinationTestSupport;
1:f451ad0: import org.apache.activemq.openwire.OpenWireFormat;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:f451ad0: 
1:ca067a6: public abstract class DataStructureTestSupport extends CombinationTestSupport {
1:d29ca2a:     public boolean cacheEnabled;
1:d29ca2a:     public WireFormat wireFormat;
1:d29ca2a: 
1:d29ca2a:     public void assertBeanMarshalls(Object original) throws IOException {
1:d29ca2a:         Object o = marshalAndUnmarshall(original, wireFormat);
1:d29ca2a:         assertNotNull(o);
1:d29ca2a:         assertEquals(original, o);
1:d29ca2a:         // assertEquals(original.getClass(), o.getClass());
1:d29ca2a:         //        
1:d29ca2a:         // Method[] methods = original.getClass().getMethods();
1:d29ca2a:         // for (int i = 0; i < methods.length; i++) {
1:d29ca2a:         // Method method = methods[i];
1:d29ca2a:         // if( ( method.getName().startsWith("get")
1:d29ca2a:         // || method.getName().startsWith("is")
1:d29ca2a:         // )
1:d29ca2a:         // && method.getParameterTypes().length==0
1:d29ca2a:         // && method.getReturnType()!=null
1:d29ca2a:         // ) {
1:d29ca2a:         // try {
1:d29ca2a:         // Object expect = method.invoke(original, null);
1:d29ca2a:         // Object was = method.invoke(o, null);
1:d29ca2a:         // assertEquals(expect, was);
1:d29ca2a:         // } catch (IllegalArgumentException e) {
1:d29ca2a:         // } catch (IllegalAccessException e) {
1:d29ca2a:         // } catch (InvocationTargetException e) {
1:d29ca2a:         // }
1:d29ca2a:         // }
1:d29ca2a:         // }
9:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     public static void assertEquals(Object expect, Object was) {
1:fc00993:         if (expect == null ^ was == null) {
1:d29ca2a:             throw new AssertionFailedError("Not equals, expected: " + expect + ", was: " + was);
1:fc00993:         }
1:fc00993:         if (expect == null) {
1:d29ca2a:             return;
1:fc00993:         }
1:fc00993:         if (expect.getClass() != was.getClass()) {
1:d29ca2a:             throw new AssertionFailedError("Not equals, classes don't match. expected: " + expect.getClass() + ", was: " + was.getClass());
1:fc00993:         }
1:d29ca2a:         if (expect.getClass().isArray()) {
1:d29ca2a:             Class componentType = expect.getClass().getComponentType();
1:d29ca2a:             if (componentType.isPrimitive()) {
1:d29ca2a:                 boolean ok = false;
1:d29ca2a:                 if (componentType == byte.class) {
1:74a7a8b:                     ok = Arrays.equals((byte[])expect, (byte[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == char.class) {
1:74a7a8b:                     ok = Arrays.equals((char[])expect, (char[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == short.class) {
1:74a7a8b:                     ok = Arrays.equals((short[])expect, (short[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == int.class) {
1:74a7a8b:                     ok = Arrays.equals((int[])expect, (int[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == long.class) {
1:74a7a8b:                     ok = Arrays.equals((long[])expect, (long[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == double.class) {
1:74a7a8b:                     ok = Arrays.equals((double[])expect, (double[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (componentType == float.class) {
1:74a7a8b:                     ok = Arrays.equals((float[])expect, (float[])was);
1:d29ca2a:                 }
1:d29ca2a:                 if (!ok) {
1:d29ca2a:                     throw new AssertionFailedError("Arrays not equal");
1:d29ca2a:                 }
1:74a7a8b:             } else {
1:74a7a8b:                 Object expectArray[] = (Object[])expect;
1:74a7a8b:                 Object wasArray[] = (Object[])was;
1:fc00993:                 if (expectArray.length != wasArray.length) {
1:d29ca2a:                     throw new AssertionFailedError("Not equals, array lengths don't match. expected: " + expectArray.length + ", was: " + wasArray.length);
1:fc00993:                 }
1:d29ca2a:                 for (int i = 0; i < wasArray.length; i++) {
1:d29ca2a:                     assertEquals(expectArray[i], wasArray[i]);
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:             }
1:74a7a8b:         } else if (expect instanceof Command) {
1:d29ca2a:             assertEquals(expect.getClass(), was.getClass());
1:d29ca2a:             Method[] methods = expect.getClass().getMethods();
1:d29ca2a:             for (int i = 0; i < methods.length; i++) {
1:d29ca2a:                 Method method = methods[i];
1:74a7a8b:                 if ((method.getName().startsWith("get") || method.getName().startsWith("is")) && method.getParameterTypes().length == 0 && method.getReturnType() != null) {
1:d29ca2a: 
1:d29ca2a:                     // Check to see if there is a setter for the method.
1:d29ca2a:                     try {
1:d29ca2a:                         if (method.getName().startsWith("get")) {
1:74a7a8b:                             expect.getClass().getMethod(method.getName().replaceFirst("get", "set"), new Class[] {method.getReturnType()});
1:74a7a8b:                         } else {
1:74a7a8b:                             expect.getClass().getMethod(method.getName().replaceFirst("is", "set"), new Class[] {method.getReturnType()});
1:d29ca2a:                         }
1:74a7a8b:                     } catch (Throwable ignore) {
1:d29ca2a:                         continue;
1:d29ca2a:                     }
1:d29ca2a: 
1:d29ca2a:                     try {
1:0479a4e:                         assertEquals(method.invoke(expect, (Object)null), method.invoke(was, (Object)null));
1:74a7a8b:                     } catch (IllegalArgumentException e) {
1:74a7a8b:                     } catch (IllegalAccessException e) {
1:74a7a8b:                     } catch (InvocationTargetException e) {
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
1:74a7a8b:         } else {
1:d29ca2a:             TestCase.assertEquals(expect, was);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         wireFormat = createWireFormat();
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:74a7a8b: 
1:d29ca2a:     protected WireFormat createWireFormat() {
1:d29ca2a:         OpenWireFormat answer = new OpenWireFormat();
1:d29ca2a:         answer.setCacheEnabled(cacheEnabled);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Object marshalAndUnmarshall(Object original, WireFormat wireFormat) throws IOException {
1:88acb0e:         ByteSequence packet = wireFormat.marshal(original);
1:d29ca2a:         return wireFormat.unmarshal(packet);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0479a4e
/////////////////////////////////////////////////////////////////////////
1:                         assertEquals(method.invoke(expect, (Object)null), method.invoke(was, (Object)null));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public static void assertEquals(Object expect, Object was) {
1:         if (expect == null ^ was == null) {
1:         }
1:         if (expect == null) {
1:         }
1:         if (expect.getClass() != was.getClass()) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 if (expectArray.length != wasArray.length) {
1:                 }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     ok = Arrays.equals((byte[])expect, (byte[])was);
1:                     ok = Arrays.equals((char[])expect, (char[])was);
1:                     ok = Arrays.equals((short[])expect, (short[])was);
1:                     ok = Arrays.equals((int[])expect, (int[])was);
1:                     ok = Arrays.equals((long[])expect, (long[])was);
1:                     ok = Arrays.equals((double[])expect, (double[])was);
1:                     ok = Arrays.equals((float[])expect, (float[])was);
1:             } else {
1:                 Object expectArray[] = (Object[])expect;
1:                 Object wasArray[] = (Object[])was;
/////////////////////////////////////////////////////////////////////////
1:         } else if (expect instanceof Command) {
1:                 if ((method.getName().startsWith("get") || method.getName().startsWith("is")) && method.getParameterTypes().length == 0 && method.getReturnType() != null) {
1:                             expect.getClass().getMethod(method.getName().replaceFirst("get", "set"), new Class[] {method.getReturnType()});
1:                         } else {
1:                             expect.getClass().getMethod(method.getName().replaceFirst("is", "set"), new Class[] {method.getReturnType()});
1:                     } catch (Throwable ignore) {
1:                     } catch (IllegalArgumentException e) {
1:                     } catch (IllegalAccessException e) {
1:                     } catch (InvocationTargetException e) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1:         ByteSequence packet = wireFormat.marshal(original);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.Packet;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import org.activeio.Packet;
0: import org.activeio.command.WireFormat;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.openwire.OpenWireFormat;
1: 
1: import java.io.IOException;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.util.Arrays;
1: 
1: import junit.framework.AssertionFailedError;
1: import junit.framework.TestCase;
1: 
0: public class DataStructureTestSupport extends CombinationTestSupport {
1:     public boolean cacheEnabled;
1:     public WireFormat wireFormat;
1: 
1:     public void assertBeanMarshalls(Object original) throws IOException {
1:         Object o = marshalAndUnmarshall(original, wireFormat);
1:         assertNotNull(o);
1:         assertEquals(original, o);
1:         // assertEquals(original.getClass(), o.getClass());
1:         //        
1:         // Method[] methods = original.getClass().getMethods();
1:         // for (int i = 0; i < methods.length; i++) {
1:         // Method method = methods[i];
1:         // if( ( method.getName().startsWith("get")
1:         // || method.getName().startsWith("is")
1:         // )
1:         // && method.getParameterTypes().length==0
1:         // && method.getReturnType()!=null
1:         // ) {
1:         // try {
1:         // Object expect = method.invoke(original, null);
1:         // Object was = method.invoke(o, null);
1:         // assertEquals(expect, was);
1:         // } catch (IllegalArgumentException e) {
1:         // } catch (IllegalAccessException e) {
1:         // } catch (InvocationTargetException e) {
1:         // }
1:         // }
1:         // }
1:     }
1: 
0:     static public void assertEquals(Object expect, Object was) {
0:         if (expect == null ^ was == null)
1:             throw new AssertionFailedError("Not equals, expected: " + expect + ", was: " + was);
0:         if (expect == null)
1:             return;
0:         if (expect.getClass() != was.getClass())
1:             throw new AssertionFailedError("Not equals, classes don't match. expected: " + expect.getClass() + ", was: " + was.getClass());
1:         if (expect.getClass().isArray()) {
1:             Class componentType = expect.getClass().getComponentType();
1:             if (componentType.isPrimitive()) {
1:                 boolean ok = false;
1:                 if (componentType == byte.class) {
0:                     ok = Arrays.equals((byte[]) expect, (byte[]) was);
1:                 }
1:                 if (componentType == char.class) {
0:                     ok = Arrays.equals((char[]) expect, (char[]) was);
1:                 }
1:                 if (componentType == short.class) {
0:                     ok = Arrays.equals((short[]) expect, (short[]) was);
1:                 }
1:                 if (componentType == int.class) {
0:                     ok = Arrays.equals((int[]) expect, (int[]) was);
1:                 }
1:                 if (componentType == long.class) {
0:                     ok = Arrays.equals((long[]) expect, (long[]) was);
1:                 }
1:                 if (componentType == double.class) {
0:                     ok = Arrays.equals((double[]) expect, (double[]) was);
1:                 }
1:                 if (componentType == float.class) {
0:                     ok = Arrays.equals((float[]) expect, (float[]) was);
1:                 }
1:                 if (!ok) {
1:                     throw new AssertionFailedError("Arrays not equal");
1:                 }
1:             }
0:             else {
0:                 Object expectArray[] = (Object[]) expect;
0:                 Object wasArray[] = (Object[]) was;
0:                 if (expectArray.length != wasArray.length)
1:                     throw new AssertionFailedError("Not equals, array lengths don't match. expected: " + expectArray.length + ", was: " + wasArray.length);
1:                 for (int i = 0; i < wasArray.length; i++) {
1:                     assertEquals(expectArray[i], wasArray[i]);
1:                 }
1: 
1:             }
1:         }
0:         else if (expect instanceof Command) {
1:             assertEquals(expect.getClass(), was.getClass());
1:             Method[] methods = expect.getClass().getMethods();
1:             for (int i = 0; i < methods.length; i++) {
1:                 Method method = methods[i];
0:                 if ((method.getName().startsWith("get") || method.getName().startsWith("is")) && method.getParameterTypes().length == 0
0:                         && method.getReturnType() != null) {
1: 
1:                     // Check to see if there is a setter for the method.
1:                     try {
1:                         if (method.getName().startsWith("get")) {
0:                             expect.getClass().getMethod(method.getName().replaceFirst("get", "set"), new Class[] { method.getReturnType() });
1:                         }
0:                         else {
0:                             expect.getClass().getMethod(method.getName().replaceFirst("is", "set"), new Class[] { method.getReturnType() });
1:                         }
1:                     }
0:                     catch (Throwable ignore) {
1:                         continue;
1:                     }
1: 
1:                     try {
0:                         assertEquals(method.invoke(expect, null), method.invoke(was, null));
1:                     }
0:                     catch (IllegalArgumentException e) {
1:                     }
0:                     catch (IllegalAccessException e) {
1:                     }
0:                     catch (InvocationTargetException e) {
1:                     }
1:                 }
1:             }
1:         }
0:         else {
1:             TestCase.assertEquals(expect, was);
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         wireFormat = createWireFormat();
1:         super.setUp();
1:     }
1:     
1:     protected WireFormat createWireFormat() {
1:         OpenWireFormat answer = new OpenWireFormat();
1:         answer.setCacheEnabled(cacheEnabled);
1:         return answer;
1:     }
1: 
1:     protected Object marshalAndUnmarshall(Object original, WireFormat wireFormat) throws IOException {
0:         Packet packet = wireFormat.marshal(original);
1:         return wireFormat.unmarshal(packet);
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: public abstract class DataStructureTestSupport extends CombinationTestSupport {
============================================================================