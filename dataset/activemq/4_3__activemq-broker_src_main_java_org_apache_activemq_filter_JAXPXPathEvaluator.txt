1:06a365f: /**
1:06a365f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:06a365f:  * contributor license agreements.  See the NOTICE file distributed with
1:06a365f:  * this work for additional information regarding copyright ownership.
1:06a365f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:06a365f:  * (the "License"); you may not use this file except in compliance with
1:06a365f:  * the License.  You may obtain a copy of the License at
2:06a365f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:06a365f:  *
1:06a365f:  * Unless required by applicable law or agreed to in writing, software
1:06a365f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:06a365f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:06a365f:  * See the License for the specific language governing permissions and
1:06a365f:  * limitations under the License.
1:06a365f:  */
1:06a365f: package org.apache.activemq.filter;
7:06a365f: 
1:b9696ac: import org.apache.activemq.command.Message;
1:b9696ac: import org.apache.activemq.util.ByteArrayInputStream;
1:b9696ac: import org.w3c.dom.Document;
1:b9696ac: import org.xml.sax.InputSource;
1:b9696ac: 
1:06a365f: import javax.jms.BytesMessage;
1:06a365f: import javax.jms.JMSException;
1:06a365f: import javax.jms.TextMessage;
1:b9696ac: import javax.xml.parsers.DocumentBuilder;
1:06a365f: import javax.xml.xpath.XPath;
1:06a365f: import javax.xml.xpath.XPathConstants;
1:06a365f: import javax.xml.xpath.XPathFactory;
1:b9696ac: import java.io.StringReader;
1:540dd5c: 
1:06a365f: public class JAXPXPathEvaluator implements XPathExpression.XPathEvaluator {
1:540dd5c: 
1:540dd5c:     private static final XPathFactory FACTORY = XPathFactory.newInstance();
1:a6c14b4:     private final String xpathExpression;
1:b9696ac:     private final DocumentBuilder builder;
1:b9696ac:     private final XPath xpath = FACTORY.newXPath();
1:540dd5c: 
1:b9696ac:     public JAXPXPathEvaluator(String xpathExpression, DocumentBuilder builder) throws Exception {
1:a6c14b4:         this.xpathExpression = xpathExpression;
1:b9696ac:         if (builder != null) {
1:b9696ac:             this.builder = builder;
1:b9696ac:         } else {
1:b9696ac:             throw new RuntimeException("No document builder available");
2:06a365f:         }
1:06a365f:     }
1:540dd5c: 
1:06a365f:     public boolean evaluate(Message message) throws JMSException {
1:540dd5c:         if (message instanceof TextMessage) {
1:06a365f:             String text = ((TextMessage)message).getText();
1:540dd5c:             return evaluate(text);
1:540dd5c:         } else if (message instanceof BytesMessage) {
1:540dd5c:             BytesMessage bm = (BytesMessage)message;
1:540dd5c:             byte data[] = new byte[(int)bm.getBodyLength()];
1:06a365f:             bm.readBytes(data);
1:06a365f:             return evaluate(data);
1:06a365f:         }
1:06a365f:         return false;
1:06a365f:     }
1:a6c14b4: 
1:06a365f:     private boolean evaluate(byte[] data) {
2:06a365f:         try {
1:06a365f:             InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
1:b9696ac:             Document inputDocument = builder.parse(inputSource);
1:b9696ac:             return ((Boolean)xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:b9696ac:         } catch (Exception e) {
1:06a365f:             return false;
1:540dd5c:         }
1:06a365f:     }
1:06a365f: 
1:06a365f:     private boolean evaluate(String text) {
1:06a365f:         try {
1:06a365f:             InputSource inputSource = new InputSource(new StringReader(text));
1:b9696ac:             Document inputDocument = builder.parse(inputSource);
1:b9696ac:             return ((Boolean)xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:b9696ac:         } catch (Exception e) {
1:06a365f:             return false;
1:06a365f:         }
1:06a365f:     }
1:06a365f: 
1:a6c14b4:     @Override
1:a6c14b4:     public String toString() {
1:a6c14b4:         return xpathExpression;
1:a6c14b4:     }
1:06a365f: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:b9696ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.w3c.dom.Document;
1: import org.xml.sax.InputSource;
1: 
1: import javax.xml.parsers.DocumentBuilder;
1: import java.io.StringReader;
1:     private final DocumentBuilder builder;
1:     private final XPath xpath = FACTORY.newXPath();
1:     public JAXPXPathEvaluator(String xpathExpression, DocumentBuilder builder) throws Exception {
1:         if (builder != null) {
1:             this.builder = builder;
1:         } else {
1:             throw new RuntimeException("No document builder available");
/////////////////////////////////////////////////////////////////////////
1:             Document inputDocument = builder.parse(inputSource);
1:             return ((Boolean)xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             Document inputDocument = builder.parse(inputSource);
1:             return ((Boolean)xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:         } catch (Exception e) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:a6c14b4
/////////////////////////////////////////////////////////////////////////
0:     private final javax.xml.xpath.XPathExpression expression;
1:     private final String xpathExpression;
1:         this.xpathExpression = xpathExpression;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return xpathExpression;
1:     }
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.xml.sax.InputSource;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f9b11c
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.util.ByteArrayInputStream;
1: 
1: 
1:     private static final XPathFactory FACTORY = XPathFactory.newInstance();
1: 
0:             XPath xpath = FACTORY.newXPath();
0:             expression = xpath.compile(xpathExpression);
0:             throw new RuntimeException("Invalid XPath expression: " + xpathExpression);
1: 
1:         if (message instanceof TextMessage) {
1:             return evaluate(text);
1:         } else if (message instanceof BytesMessage) {
1:             BytesMessage bm = (BytesMessage)message;
1:             byte data[] = new byte[(int)bm.getBodyLength()];
1:         }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:06a365f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
0: import java.io.StringReader;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
1: import javax.jms.TextMessage;
1: import javax.xml.xpath.XPath;
1: import javax.xml.xpath.XPathConstants;
0: import javax.xml.xpath.XPathExpressionException;
1: import javax.xml.xpath.XPathFactory;
1: 
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.util.ByteArrayInputStream;
0: import org.xml.sax.InputSource;
1: 
1: public class JAXPXPathEvaluator implements XPathExpression.XPathEvaluator {
1:     
0:     private static final XPathFactory factory = XPathFactory.newInstance();
0:     private javax.xml.xpath.XPathExpression expression;
1:     
0:     public JAXPXPathEvaluator(String xpathExpression) {
1:         try {
0:             XPath xpath = factory.newXPath();
0:             expression = xpath.compile(xpathExpression);            
0:         } catch (XPathExpressionException e) {
0:             throw new RuntimeException("Invalid XPath expression: "+xpathExpression);
1:         }
1:     }
1:     
1:     public boolean evaluate(Message message) throws JMSException {
0:         if( message instanceof TextMessage ) {
1:             String text = ((TextMessage)message).getText();
0:             return evaluate(text);                
0:         } else if ( message instanceof BytesMessage ) {
0:             BytesMessage bm = (BytesMessage) message;
0:             byte data[] = new byte[(int) bm.getBodyLength()];
1:             bm.readBytes(data);
1:             return evaluate(data);
1:         }            
1:         return false;
1:     }
1: 
1:     private boolean evaluate(byte[] data) {
1:         try {
1:             InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
1:             return false;
1:         }
1:     }
1: 
1:     private boolean evaluate(String text) {
1:         try {
1:             InputSource inputSource = new InputSource(new StringReader(text));
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
1:             return false;
1:         }
1:     }
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteArrayInputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.util.ByteArrayInputStream;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.filter;
0: 
0: import java.io.StringReader;
0: 
0: import javax.jms.BytesMessage;
0: import javax.jms.JMSException;
0: import javax.jms.TextMessage;
0: import javax.xml.xpath.XPath;
0: import javax.xml.xpath.XPathConstants;
0: import javax.xml.xpath.XPathExpressionException;
0: import javax.xml.xpath.XPathFactory;
0: 
0: import org.activeio.ByteArrayInputStream;
0: import org.apache.activemq.command.Message;
0: import org.xml.sax.InputSource;
0: 
0: public class JAXPXPathEvaluator implements XPathExpression.XPathEvaluator {
0:     
0:     private static final XPathFactory factory = XPathFactory.newInstance();
0:     private javax.xml.xpath.XPathExpression expression;
0:     
0:     public JAXPXPathEvaluator(String xpathExpression) {
0:         try {
0:             XPath xpath = factory.newXPath();
0:             expression = xpath.compile(xpathExpression);            
0:         } catch (XPathExpressionException e) {
0:             throw new RuntimeException("Invalid XPath expression: "+xpathExpression);
0:         }
0:     }
0:     
0:     public boolean evaluate(Message message) throws JMSException {
0:         if( message instanceof TextMessage ) {
0:             String text = ((TextMessage)message).getText();
0:             return evaluate(text);                
0:         } else if ( message instanceof BytesMessage ) {
0:             BytesMessage bm = (BytesMessage) message;
0:             byte data[] = new byte[(int) bm.getBodyLength()];
0:             bm.readBytes(data);
0:             return evaluate(data);
0:         }            
0:         return false;
0:     }
0: 
0:     private boolean evaluate(byte[] data) {
0:         try {
0:             InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
0:             return false;
0:         }
0:     }
0: 
0:     private boolean evaluate(String text) {
0:         try {
0:             InputSource inputSource = new InputSource(new StringReader(text));
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
0:             return false;
0:         }
0:     }
0: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:2b11b8c
/////////////////////////////////////////////////////////////////////////
============================================================================