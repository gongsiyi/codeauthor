1:9ac5f83: /*
2:cc47ab6:  * Licensed to the Apache Software Foundation (ASF) under one or more
2:cc47ab6:  * contributor license agreements.  See the NOTICE file distributed with
2:cc47ab6:  * this work for additional information regarding copyright ownership.
2:cc47ab6:  * The ASF licenses this file to You under the Apache License, Version 2.0
2:cc47ab6:  * (the "License"); you may not use this file except in compliance with
2:cc47ab6:  * the License.  You may obtain a copy of the License at
3:cc47ab6:  *
2:cc47ab6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cc47ab6:  *
2:cc47ab6:  * Unless required by applicable law or agreed to in writing, software
2:cc47ab6:  * distributed under the License is distributed on an "AS IS" BASIS,
2:cc47ab6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
2:cc47ab6:  * See the License for the specific language governing permissions and
2:cc47ab6:  * limitations under the License.
2:cc47ab6:  */
1:cc47ab6: package org.apache.activemq.broker.region;
8:cc47ab6: 
1:9ac5f83: import static org.junit.Assert.assertEquals;
1:9ac5f83: import static org.junit.Assert.assertTrue;
1:9ac5f83: import static org.junit.Assert.fail;
1:9ac5f83: 
1:cc47ab6: import java.io.IOException;
1:cc47ab6: import java.util.ArrayList;
1:cc47ab6: import java.util.List;
1:9ac5f83: import java.util.concurrent.CopyOnWriteArrayList;
1:cc47ab6: import java.util.concurrent.ExecutorService;
1:cc47ab6: import java.util.concurrent.Executors;
1:cc47ab6: import java.util.concurrent.Future;
1:cc47ab6: import java.util.concurrent.atomic.AtomicInteger;
1:9ac5f83: 
1:cc47ab6: import javax.jms.InvalidSelectorException;
1:cc47ab6: import javax.management.ObjectName;
1:94b404d: 
1:cc47ab6: import org.apache.activemq.broker.BrokerService;
1:cc47ab6: import org.apache.activemq.broker.ConnectionContext;
1:cc47ab6: import org.apache.activemq.broker.ProducerBrokerExchange;
1:cc47ab6: import org.apache.activemq.command.ActiveMQDestination;
1:cc47ab6: import org.apache.activemq.command.ActiveMQMessage;
1:cc47ab6: import org.apache.activemq.command.ActiveMQQueue;
1:cc47ab6: import org.apache.activemq.command.ConsumerInfo;
1:cc47ab6: import org.apache.activemq.command.Message;
1:cc47ab6: import org.apache.activemq.command.MessageAck;
1:cc47ab6: import org.apache.activemq.command.MessageDispatchNotification;
1:cc47ab6: import org.apache.activemq.command.MessageId;
1:cc47ab6: import org.apache.activemq.command.MessagePull;
1:cc47ab6: import org.apache.activemq.command.ProducerInfo;
1:cc47ab6: import org.apache.activemq.command.Response;
1:cc47ab6: import org.apache.activemq.filter.MessageEvaluationContext;
1:cc47ab6: import org.apache.activemq.state.ProducerState;
1:cc47ab6: import org.apache.activemq.store.MessageStore;
1:cc47ab6: import org.apache.activemq.thread.TaskRunnerFactory;
1:9ac5f83: import org.apache.activemq.util.Wait;
1:9ac5f83: import org.junit.After;
1:9ac5f83: import org.junit.Before;
1:9ac5f83: import org.junit.Test;
1:cc47ab6: 
1:9ac5f83: public class SubscriptionAddRemoveQueueTest {
1:cc47ab6: 
1:9ac5f83:     private BrokerService brokerService;
1:9ac5f83:     private Queue queue;
1:9ac5f83:     private ConsumerInfo info = new ConsumerInfo();
1:9ac5f83:     private List<SimpleImmediateDispatchSubscription> subs = new ArrayList<SimpleImmediateDispatchSubscription>();
1:9ac5f83:     private ConnectionContext context = new ConnectionContext();
1:9ac5f83:     private ProducerBrokerExchange producerBrokerExchange = new ProducerBrokerExchange();
1:9ac5f83:     private ProducerInfo producerInfo = new ProducerInfo();
1:9ac5f83:     private ProducerState producerState = new ProducerState(producerInfo);
1:9ac5f83:     private ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:9ac5f83:     private int numSubscriptions = 1000;
1:9ac5f83:     private boolean working = true;
1:9ac5f83:     private int senders = 20;
1:cc47ab6: 
1:9ac5f83:     @Before
1:cc47ab6:     public void setUp() throws Exception {
1:9ac5f83:         brokerService = new BrokerService();
1:cc47ab6:         brokerService.start();
1:9ac5f83: 
1:cc47ab6:         DestinationStatistics parentStats = new DestinationStatistics();
1:cc47ab6:         parentStats.setEnabled(true);
1:cc47ab6: 
1:cc47ab6:         TaskRunnerFactory taskFactory = new TaskRunnerFactory();
1:cc47ab6:         MessageStore store = null;
1:cc47ab6: 
1:cc47ab6:         info.setDestination(destination);
1:cc47ab6:         info.setPrefetchSize(100);
1:cc47ab6: 
1:cc47ab6:         producerBrokerExchange.setProducerState(producerState);
1:cc47ab6:         producerBrokerExchange.setConnectionContext(context);
1:cc47ab6: 
1:cc47ab6:         queue = new Queue(brokerService, destination, store, parentStats, taskFactory);
1:cc47ab6:         queue.initialize();
5:cc47ab6:     }
1:cc47ab6: 
1:9ac5f83:     @After
1:9ac5f83:     public void tearDown() throws Exception {
1:9ac5f83:         if (brokerService != null) {
1:9ac5f83:             brokerService.stop();
1:9ac5f83:             brokerService.waitUntilStopped();
1:9ac5f83:         }
1:9ac5f83:     }
1:9ac5f83: 
1:9ac5f83:     @Test(timeout = 120000)
1:cc47ab6:     public void testNoDispatchToRemovedConsumers() throws Exception {
1:cc47ab6:         final AtomicInteger producerId = new AtomicInteger();
1:cc47ab6:         Runnable sender = new Runnable() {
1:734fb7d:             @Override
1:cc47ab6:             public void run() {
1:cc47ab6:                 AtomicInteger id = new AtomicInteger();
1:cc47ab6:                 int producerIdAndIncrement = producerId.getAndIncrement();
1:cc47ab6:                 while (working) {
1:cc47ab6:                     try {
1:cc47ab6:                         Message msg = new ActiveMQMessage();
1:cc47ab6:                         msg.setDestination(destination);
1:cc47ab6:                         msg.setMessageId(new MessageId(producerIdAndIncrement + ":0:" + id.getAndIncrement()));
1:cc47ab6:                         queue.send(producerBrokerExchange, msg);
1:cc47ab6:                     } catch (Exception e) {
1:cc47ab6:                         e.printStackTrace();
1:cc47ab6:                         fail("unexpected exception in sendMessage, ex:" + e);
1:cc47ab6:                     }
1:cc47ab6:                 }
1:cc47ab6:             }
1:cc47ab6:         };
1:cc47ab6: 
1:cc47ab6:         Runnable subRemover = new Runnable() {
1:734fb7d:             @Override
1:cc47ab6:             public void run() {
1:cc47ab6:                 for (Subscription sub : subs) {
1:cc47ab6:                     try {
1:cc47ab6:                         queue.removeSubscription(context, sub, 0);
1:cc47ab6:                     } catch (Exception e) {
1:cc47ab6:                         e.printStackTrace();
1:cc47ab6:                         fail("unexpected exception in removeSubscription, ex:" + e);
1:cc47ab6:                     }
1:cc47ab6:                 }
1:cc47ab6:             }
1:cc47ab6:         };
1:cc47ab6: 
1:9ac5f83:         for (int i = 0; i < numSubscriptions; i++) {
1:cc47ab6:             SimpleImmediateDispatchSubscription sub = new SimpleImmediateDispatchSubscription();
1:cc47ab6:             subs.add(sub);
1:cc47ab6:             queue.addSubscription(context, sub);
1:cc47ab6:         }
1:9ac5f83: 
1:cc47ab6:         assertEquals("there are X subscriptions", numSubscriptions, queue.getDestinationStatistics().getConsumers().getCount());
1:cc47ab6:         ExecutorService executor = Executors.newCachedThreadPool();
1:9ac5f83:         for (int i = 0; i < senders; i++) {
1:cc47ab6:             executor.submit(sender);
1:cc47ab6:         }
1:cc47ab6: 
1:9ac5f83:         assertTrue("All subs should have some locks", Wait.waitFor(new Wait.Condition() {
1:9ac5f83: 
1:9ac5f83:             @Override
1:9ac5f83:             public boolean isSatisified() throws Exception {
1:9ac5f83:                 boolean allHaveLocks = true;
1:9ac5f83: 
1:9ac5f83:                 for (SimpleImmediateDispatchSubscription sub : subs) {
1:9ac5f83:                     if (!hasSomeLocks(sub.dispatched)) {
1:9ac5f83:                         allHaveLocks = false;
1:9ac5f83:                         break;
1:9ac5f83:                     }
1:9ac5f83:                 }
1:9ac5f83: 
1:9ac5f83:                 return allHaveLocks;
1:9ac5f83:             }
1:9ac5f83:         }));
1:cc47ab6: 
1:cc47ab6:         Future<?> result = executor.submit(subRemover);
1:cc47ab6:         result.get();
1:cc47ab6:         working = false;
1:cc47ab6:         assertEquals("there are no subscriptions", 0, queue.getDestinationStatistics().getConsumers().getCount());
1:cc47ab6: 
2:cc47ab6:         for (SimpleImmediateDispatchSubscription sub : subs) {
1:cc47ab6:             assertTrue("There are no locked messages in any removed subscriptions", !hasSomeLocks(sub.dispatched));
1:cc47ab6:         }
1:cc47ab6:     }
1:cc47ab6: 
1:cc47ab6:     private boolean hasSomeLocks(List<MessageReference> dispatched) {
1:cc47ab6:         boolean hasLock = false;
1:9ac5f83:         for (MessageReference mr : dispatched) {
1:cc47ab6:             QueueMessageReference qmr = (QueueMessageReference) mr;
1:cc47ab6:             if (qmr.getLockOwner() != null) {
1:cc47ab6:                 hasLock = true;
1:cc47ab6:                 break;
1:cc47ab6:             }
1:cc47ab6:         }
1:cc47ab6:         return hasLock;
1:cc47ab6:     }
1:cc47ab6: 
1:9ac5f83:     private class SimpleImmediateDispatchSubscription implements Subscription, LockOwner {
1:cc47ab6: 
1:eece576:         private SubscriptionStatistics subscriptionStatistics = new SubscriptionStatistics();
1:9ac5f83:         List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void add(MessageReference node) throws Exception {
1:cc47ab6:             // immediate dispatch
1:9ac5f83:             QueueMessageReference qmr = (QueueMessageReference) node;
1:cc47ab6:             qmr.lock(this);
1:cc47ab6:             dispatched.add(qmr);
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public ConnectionContext getContext() {
1:cc47ab6:             return null;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getCursorMemoryHighWaterMark() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:4605503:         @Override
1:cc47ab6:         public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
1:cc47ab6:         }
1:cc47ab6: 
1:94b404d:         @Override
1:cc47ab6:         public boolean isSlowConsumer() {
2:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void unmatched(MessageReference node) throws IOException {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public long getTimeOfLastMessageAck() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
2:cc47ab6:         @Override
1:cc47ab6:         public long getConsumedCount() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:cc47ab6:         @Override
1:cc47ab6:         public void incrementConsumedCount() {
1:cc47ab6:         }
1:cc47ab6: 
1:cc47ab6:         @Override
1:cc47ab6:         public void resetConsumedCount() {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public void add(ConnectionContext context, Destination destination) throws Exception {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void destroy() {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void gc() {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public ConsumerInfo getConsumerInfo() {
1:cc47ab6:             return info;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public long getDequeueCounter() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public long getDispatchedCounter() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getDispatchedQueueSize() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public long getEnqueueCounter() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getInFlightSize() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getInFlightUsage() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public ObjectName getObjectName() {
1:cc47ab6:             return null;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getPendingQueueSize() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:734fb7d:         public long getPendingMessageSize() {
1:734fb7d:             return 0;
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         @Override
1:cc47ab6:         public int getPrefetchSize() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public String getSelector() {
1:cc47ab6:             return null;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isBrowser() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isFull() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isHighWaterMark() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isLowWaterMark() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isRecoveryRequired() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:cc47ab6:         @Override
1:9ac5f83:         public boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException {
1:cc47ab6:             return true;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean matches(ActiveMQDestination destination) {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public void processMessageDispatchNotification(MessageDispatchNotification mdn) throws Exception {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
1:cc47ab6:             return null;
1:cc47ab6:         }
1:cc47ab6: 
1:cc47ab6:         @Override
1:94b404d:         public boolean isWildcard() {
1:94b404d:             return false;
1:94b404d:         }
1:94b404d: 
1:cc47ab6:         @Override
1:9ac5f83:         public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
1:cc47ab6:             return new ArrayList<MessageReference>(dispatched);
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void setObjectName(ObjectName objectName) {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public void updateConsumerPrefetch(int newPrefetch) {
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:9ac5f83:         public boolean addRecoveredMessage(ConnectionContext context, MessageReference message) throws Exception {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public ActiveMQDestination getActiveMQDestination() {
1:cc47ab6:             return null;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public int getLockPriority() {
1:cc47ab6:             return 0;
1:cc47ab6:         }
1:cc47ab6: 
1:734fb7d:         @Override
1:cc47ab6:         public boolean isLockExclusive() {
1:cc47ab6:             return false;
1:cc47ab6:         }
1:cc47ab6: 
1:cc47ab6:         @Override
1:cc47ab6:         public int countBeforeFull() {
1:cc47ab6:             return 10;
1:cc47ab6:         }
1:eece576: 
1:eece576:         @Override
1:eece576:         public SubscriptionStatistics getSubscriptionStatistics() {
1:eece576:             return subscriptionStatistics;
1:eece576:         }
1:4605503: 
1:cc47ab6:         @Override
1:4605503:         public long getInFlightMessageSize() {
1:4605503:             return subscriptionStatistics.getInflightMessageSize().getTotalSize();
1:4605503:         }
1:cc47ab6:     }
1:cc47ab6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ac5f83
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class SubscriptionAddRemoveQueueTest {
1:     private BrokerService brokerService;
1:     private Queue queue;
1:     private ConsumerInfo info = new ConsumerInfo();
1:     private List<SimpleImmediateDispatchSubscription> subs = new ArrayList<SimpleImmediateDispatchSubscription>();
1:     private ConnectionContext context = new ConnectionContext();
1:     private ProducerBrokerExchange producerBrokerExchange = new ProducerBrokerExchange();
1:     private ProducerInfo producerInfo = new ProducerInfo();
1:     private ProducerState producerState = new ProducerState(producerInfo);
1:     private ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:     private int numSubscriptions = 1000;
1:     private boolean working = true;
1:     private int senders = 20;
1:     @Before
1:         brokerService = new BrokerService();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 120000)
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numSubscriptions; i++) {
1: 
1:         for (int i = 0; i < senders; i++) {
1:         assertTrue("All subs should have some locks", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 boolean allHaveLocks = true;
1: 
1:                 for (SimpleImmediateDispatchSubscription sub : subs) {
1:                     if (!hasSomeLocks(sub.dispatched)) {
1:                         allHaveLocks = false;
1:                         break;
1:                     }
1:                 }
1: 
1:                 return allHaveLocks;
1:             }
1:         }));
/////////////////////////////////////////////////////////////////////////
1:         for (MessageReference mr : dispatched) {
/////////////////////////////////////////////////////////////////////////
1:     private class SimpleImmediateDispatchSubscription implements Subscription, LockOwner {
1:         List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
1:         public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
1:             QueueMessageReference qmr = (QueueMessageReference) node;
/////////////////////////////////////////////////////////////////////////
1:         public void add(ConnectionContext context, Destination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         public boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         public void processMessageDispatchNotification(MessageDispatchNotification mdn) throws Exception {
1:         public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         public void setSelector(String selector) throws InvalidSelectorException, UnsupportedOperationException {
/////////////////////////////////////////////////////////////////////////
1:         public boolean addRecoveredMessage(ConnectionContext context, MessageReference message) throws Exception {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         public long getPendingMessageSize() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:4605503
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public long getInFlightMessageSize() {
1:             return subscriptionStatistics.getInflightMessageSize().getTotalSize();
1:         }
1: 
commit:eece576
/////////////////////////////////////////////////////////////////////////
1:         private SubscriptionStatistics subscriptionStatistics = new SubscriptionStatistics();
0:                 Collections.synchronizedList(new ArrayList<MessageReference>());
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public SubscriptionStatistics getSubscriptionStatistics() {
1:             return subscriptionStatistics;
1:         }
1: 
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         public boolean isWildcard() {
1:             return false;
1:         }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:cc47ab6
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
0: import java.util.Collections;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.InvalidSelectorException;
1: import javax.management.ObjectName;
0: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatchNotification;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.state.ProducerState;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
0: public class SubscriptionAddRemoveQueueTest extends TestCase {
1: 
0:     Queue queue;
1: 
0:     ConsumerInfo info = new ConsumerInfo();
0:     List<SimpleImmediateDispatchSubscription> subs = new ArrayList<SimpleImmediateDispatchSubscription>();
0:     ConnectionContext context = new ConnectionContext();
0:     ProducerBrokerExchange producerBrokerExchange = new ProducerBrokerExchange();
0:     ProducerInfo producerInfo = new ProducerInfo();
0:     ProducerState producerState = new ProducerState(producerInfo);
0:     ActiveMQDestination destination = new ActiveMQQueue("TEST");
0:     int numSubscriptions = 1000;
0:     boolean working = true;
0:     int senders = 20;
1: 
1: 
1:     @Override
1:     public void setUp() throws Exception {
0:         BrokerService brokerService = new BrokerService();
1:         brokerService.start();
1:         DestinationStatistics parentStats = new DestinationStatistics();
1:         parentStats.setEnabled(true);
1: 
1:         TaskRunnerFactory taskFactory = new TaskRunnerFactory();
1:         MessageStore store = null;
1: 
1:         info.setDestination(destination);
1:         info.setPrefetchSize(100);
1: 
1:         producerBrokerExchange.setProducerState(producerState);
1:         producerBrokerExchange.setConnectionContext(context);
1: 
1:         queue = new Queue(brokerService, destination, store, parentStats, taskFactory);
1:         queue.initialize();
1:     }
1: 
1:     public void testNoDispatchToRemovedConsumers() throws Exception {
1:         final AtomicInteger producerId = new AtomicInteger();
1:         Runnable sender = new Runnable() {
1:             public void run() {
1:                 AtomicInteger id = new AtomicInteger();
1:                 int producerIdAndIncrement = producerId.getAndIncrement();
1:                 while (working) {
1:                     try {
1:                         Message msg = new ActiveMQMessage();
1:                         msg.setDestination(destination);
1:                         msg.setMessageId(new MessageId(producerIdAndIncrement + ":0:" + id.getAndIncrement()));
1:                         queue.send(producerBrokerExchange, msg);
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                         fail("unexpected exception in sendMessage, ex:" + e);
1:                     }
1:                 }
1:             }
1:         };
1: 
1:         Runnable subRemover = new Runnable() {
1:             public void run() {
1:                 for (Subscription sub : subs) {
1:                     try {
1:                         queue.removeSubscription(context, sub, 0);
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                         fail("unexpected exception in removeSubscription, ex:" + e);
1:                     }
1:                 }
1:             }
1:         };
1: 
0:         for (int i=0;i<numSubscriptions; i++) {
1:             SimpleImmediateDispatchSubscription sub = new SimpleImmediateDispatchSubscription();
1:             subs.add(sub);
1:             queue.addSubscription(context, sub);
1:         }
1:         assertEquals("there are X subscriptions", numSubscriptions, queue.getDestinationStatistics().getConsumers().getCount());
1:         ExecutorService executor = Executors.newCachedThreadPool();
0:         for (int i=0; i<senders ; i++) {
1:             executor.submit(sender);
1:         }
1: 
0:         Thread.sleep(1000);
1:         for (SimpleImmediateDispatchSubscription sub : subs) {
0:             assertTrue("There are some locked messages in the subscription", hasSomeLocks(sub.dispatched));
1:         }
1: 
1:         Future<?> result = executor.submit(subRemover);
1:         result.get();
1:         working = false;
1:         assertEquals("there are no subscriptions", 0, queue.getDestinationStatistics().getConsumers().getCount());
1: 
1:         for (SimpleImmediateDispatchSubscription sub : subs) {
1:             assertTrue("There are no locked messages in any removed subscriptions", !hasSomeLocks(sub.dispatched));
1:         }
1: 
1:     }
1: 
1:     private boolean hasSomeLocks(List<MessageReference> dispatched) {
1:         boolean hasLock = false;
0:         for (MessageReference mr: dispatched) {
1:             QueueMessageReference qmr = (QueueMessageReference) mr;
1:             if (qmr.getLockOwner() != null) {
1:                 hasLock = true;
1:                 break;
1:             }
1:         }
1:         return hasLock;
1:     }
1: 
0:     public class SimpleImmediateDispatchSubscription implements Subscription, LockOwner {
1: 
0:         List<MessageReference> dispatched =
0:             Collections.synchronizedList(new ArrayList<MessageReference>());
1: 
0:         public void acknowledge(ConnectionContext context, MessageAck ack)
0:                 throws Exception {
1:         }
1: 
1:         public void add(MessageReference node) throws Exception {
1:             // immediate dispatch
0:             QueueMessageReference  qmr = (QueueMessageReference)node;
1:             qmr.lock(this);
1:             dispatched.add(qmr);
1:         }
1: 
1:         public ConnectionContext getContext() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getCursorMemoryHighWaterMark() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark) {
1:         }
1: 
1:         @Override
1:         public boolean isSlowConsumer() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public void unmatched(MessageReference node) throws IOException {
1:         }
1: 
1:         @Override
1:         public long getTimeOfLastMessageAck() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public long getConsumedCount() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public void incrementConsumedCount() {
1:         }
1: 
1:         @Override
1:         public void resetConsumedCount() {
1:         }
1: 
0:         public void add(ConnectionContext context, Destination destination)
0:                 throws Exception {
1:         }
1: 
1:         public void destroy() {
1:         }
1: 
1:         public void gc() {
1:         }
1: 
1:         public ConsumerInfo getConsumerInfo() {
1:             return info;
1:         }
1: 
1:         public long getDequeueCounter() {
1:             return 0;
1:         }
1: 
1:         public long getDispatchedCounter() {
1:             return 0;
1:         }
1: 
1:         public int getDispatchedQueueSize() {
1:             return 0;
1:         }
1: 
1:         public long getEnqueueCounter() {
1:             return 0;
1:         }
1: 
1:         public int getInFlightSize() {
1:             return 0;
1:         }
1: 
1:         public int getInFlightUsage() {
1:             return 0;
1:         }
1: 
1:         public ObjectName getObjectName() {
1:             return null;
1:         }
1: 
1:         public int getPendingQueueSize() {
1:             return 0;
1:         }
1: 
1:         public int getPrefetchSize() {
1:             return 0;
1:         }
1: 
1:         public String getSelector() {
1:             return null;
1:         }
1: 
1:         public boolean isBrowser() {
1:             return false;
1:         }
1: 
1:         public boolean isFull() {
1:             return false;
1:         }
1: 
1:         public boolean isHighWaterMark() {
1:             return false;
1:         }
1: 
1:         public boolean isLowWaterMark() {
1:             return false;
1:         }
1: 
1:         public boolean isRecoveryRequired() {
1:             return false;
1:         }
1: 
0:         public boolean isSlave() {
1:             return false;
1:         }
1: 
0:         public boolean matches(MessageReference node,
0:                 MessageEvaluationContext context) throws IOException {
1:             return true;
1:         }
1: 
1:         public boolean matches(ActiveMQDestination destination) {
1:             return false;
1:         }
1: 
0:         public void processMessageDispatchNotification(
0:                 MessageDispatchNotification mdn) throws Exception {
1:         }
1: 
0:         public Response pullMessage(ConnectionContext context, MessagePull pull)
0:                 throws Exception {
1:             return null;
1:         }
1: 
0:         public List<MessageReference> remove(ConnectionContext context,
0:                 Destination destination) throws Exception {
1:             return new ArrayList<MessageReference>(dispatched);
1:         }
1: 
1:         public void setObjectName(ObjectName objectName) {
1:         }
1: 
0:         public void setSelector(String selector)
0:                 throws InvalidSelectorException, UnsupportedOperationException {
1:         }
1: 
1:         public void updateConsumerPrefetch(int newPrefetch) {
1:         }
1: 
0:         public boolean addRecoveredMessage(ConnectionContext context,
0:                 MessageReference message) throws Exception {
1:             return false;
1:         }
1: 
1:         public ActiveMQDestination getActiveMQDestination() {
1:             return null;
1:         }
1: 
1:         public int getLockPriority() {
1:             return 0;
1:         }
1: 
1:         public boolean isLockExclusive() {
1:             return false;
1:         }
1: 
0:         public void addDestination(Destination destination) {
1:         }
1: 
0:         public void removeDestination(Destination destination) {
1:         }
1: 
1:         public int countBeforeFull() {
1:             return 10;
1:         }
1: 
1:     }
1: }
============================================================================