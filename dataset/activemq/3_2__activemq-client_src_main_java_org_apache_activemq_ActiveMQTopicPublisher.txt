1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
2:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicPublisher;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A client uses a <CODE>TopicPublisher</CODE> object to publish messages on
1:d29ca2a:  * a topic. A <CODE>TopicPublisher</CODE> object is the publish-subscribe
1:d29ca2a:  * form of a message producer.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Normally, the <CODE>Topic</CODE> is specified when a <CODE>TopicPublisher
1:d29ca2a:  * </CODE> is created. In this case, an attempt to use the <CODE>publish
1:d29ca2a:  * </CODE> methods for an unidentified <CODE>TopicPublisher</CODE> will throw
1:d29ca2a:  * a <CODE>java.lang.UnsupportedOperationException</CODE>.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * If the <CODE>TopicPublisher</CODE> is created with an unidentified <CODE>
1:d29ca2a:  * Topic</CODE>, an attempt to use the <CODE>publish</CODE> methods that
1:d29ca2a:  * assume that the <CODE>Topic</CODE> has been identified will throw a <CODE>
1:d29ca2a:  * java.lang.UnsupportedOperationException</CODE>.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * During the execution of its <CODE>publish</CODE> method, a message must
1:d29ca2a:  * not be changed by other threads within the client. If the message is
1:d29ca2a:  * modified, the result of the <CODE>publish</CODE> is undefined.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * After publishing a message, a client may retain and modify it without
1:d29ca2a:  * affecting the message that has been published. The same message object may
1:d29ca2a:  * be published multiple times.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * The following message headers are set as part of publishing a message:
1:d29ca2a:  * <code>JMSDestination</code>,<code>JMSDeliveryMode</code>,<code>JMSExpiration</code>,
1:d29ca2a:  * <code>JMSPriority</code>,<code>JMSMessageID</code> and <code>JMSTimeStamp</code>.
1:d29ca2a:  * When the message is published, the values of these headers are ignored.
1:d29ca2a:  * After completion of the <CODE>publish</CODE>, the headers hold the values
1:d29ca2a:  * specified by the method publishing the message. It is possible for the
1:d29ca2a:  * <CODE>publish</CODE> method not to set <code>JMSMessageID</code> and
1:d29ca2a:  * <code>JMSTimeStamp</code> if the setting of these headers is explicitly
1:d29ca2a:  * disabled by the <code>MessageProducer.setDisableMessageID</code> or <code>MessageProducer.setDisableMessageTimestamp</code>
1:d29ca2a:  * method.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Creating a <CODE>MessageProducer</CODE> provides the same features as
1:d29ca2a:  * creating a <CODE>TopicPublisher</CODE>. A <CODE>MessageProducer</CODE>
1:d29ca2a:  * object is recommended when creating new code. The <CODE>TopicPublisher
1:d29ca2a:  * </CODE> is provided to support existing code.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Because <CODE>TopicPublisher</CODE> inherits from <CODE>MessageProducer
1:d29ca2a:  * </CODE>, it inherits the <CODE>send</CODE> methods that are a part of the
1:d29ca2a:  * <CODE>MessageProducer</CODE> interface. Using the <CODE>send</CODE>
1:d29ca2a:  * methods will have the same effect as using the <CODE>publish</CODE>
1:d29ca2a:  * methods: they are functionally the same.
1:d29ca2a:  *
1:d29ca2a:  * @see Session#createProducer(Destination)
1:d29ca2a:  * @see TopicSession#createPublisher(Topic)
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: public class ActiveMQTopicPublisher extends ActiveMQMessageProducer implements
1:d29ca2a:         TopicPublisher {
1:d29ca2a: 
1:d29ca2a:     protected ActiveMQTopicPublisher(ActiveMQSession session,
1:114a923:                                      ActiveMQDestination destination, int sendTimeout) throws JMSException {
1:114a923:         super(session, session.getNextProducerId(), destination,sendTimeout);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the topic associated with this <CODE>TopicPublisher</CODE>.
1:d29ca2a:      *
1:d29ca2a:      * @return this publisher's topic
1:d29ca2a:      * @throws JMSException if the JMS provider fails to get the topic for this
1:d29ca2a:      *                      <CODE>TopicPublisher</CODE> due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public Topic getTopic() throws JMSException {
1:d29ca2a:         return (Topic) super.getDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Publishes a message to the topic. Uses the <CODE>TopicPublisher</CODE>'s
1:d29ca2a:      * default delivery mode, priority, and time to live.
1:d29ca2a:      *
1:d29ca2a:      * @param message the message to publish
1:d29ca2a:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:d29ca2a:      *                                     some internal error.
1:d29ca2a:      * @throws MessageFormatException      if an invalid message is specified.
1:d29ca2a:      * @throws InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:d29ca2a:      *                                     </CODE> with an invalid topic.
1:d29ca2a:      * @throws java.lang.UnsupportedOperationException
1:d29ca2a:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:d29ca2a:      *                                     </CODE> that did not specify a topic at creation time.
1:d29ca2a:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:d29ca2a:      * @see javax.jms.MessageProducer#getTimeToLive()
1:d29ca2a:      * @see javax.jms.MessageProducer#getPriority()
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void publish(Message message) throws JMSException {
1:d29ca2a:         super.send(message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Publishes a message to the topic, specifying delivery mode, priority,
1:d29ca2a:      * and time to live.
1:d29ca2a:      *
1:d29ca2a:      * @param message      the message to publish
1:d29ca2a:      * @param deliveryMode the delivery mode to use
1:d29ca2a:      * @param priority     the priority for this message
1:d29ca2a:      * @param timeToLive   the message's lifetime (in milliseconds)
1:d29ca2a:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:d29ca2a:      *                                     some internal error.
1:d29ca2a:      * @throws MessageFormatException      if an invalid message is specified.
1:d29ca2a:      * @throws InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:d29ca2a:      *                                     </CODE> with an invalid topic.
1:d29ca2a:      * @throws java.lang.UnsupportedOperationException
1:d29ca2a:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:d29ca2a:      *                                     </CODE> that did not specify a topic at creation time.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void publish(Message message, int deliveryMode, int priority,
1:d29ca2a:                         long timeToLive) throws JMSException {
1:d29ca2a:         super.send(message, deliveryMode, priority, timeToLive);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Publishes a message to a topic for an unidentified message producer.
1:d29ca2a:      * Uses the <CODE>TopicPublisher</CODE>'s default delivery mode,
1:d29ca2a:      * priority, and time to live.
1:d29ca2a:      * <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Typically, a message producer is assigned a topic at creation time;
1:d29ca2a:      * however, the JMS API also supports unidentified message producers, which
1:d29ca2a:      * require that the topic be supplied every time a message is published.
1:d29ca2a:      *
1:d29ca2a:      * @param topic   the topic to publish this message to
1:d29ca2a:      * @param message the message to publish
1:d29ca2a:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:d29ca2a:      *                                     some internal error.
1:d29ca2a:      * @throws MessageFormatException      if an invalid message is specified.
1:d29ca2a:      * @throws InvalidDestinationException if a client uses this method with an invalid topic.
1:d29ca2a:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:d29ca2a:      * @see javax.jms.MessageProducer#getTimeToLive()
1:d29ca2a:      * @see javax.jms.MessageProducer#getPriority()
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void publish(Topic topic, Message message) throws JMSException {
1:d29ca2a:         super.send(topic, message);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Publishes a message to a topic for an unidentified message producer,
1:d29ca2a:      * specifying delivery mode, priority and time to live.
1:d29ca2a:      * <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Typically, a message producer is assigned a topic at creation time;
1:d29ca2a:      * however, the JMS API also supports unidentified message producers, which
1:d29ca2a:      * require that the topic be supplied every time a message is published.
1:d29ca2a:      *
1:d29ca2a:      * @param topic        the topic to publish this message to
1:d29ca2a:      * @param message      the message to publish
1:d29ca2a:      * @param deliveryMode the delivery mode to use
1:d29ca2a:      * @param priority     the priority for this message
1:d29ca2a:      * @param timeToLive   the message's lifetime (in milliseconds)
1:d29ca2a:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:d29ca2a:      *                                     some internal error.
1:d29ca2a:      * @throws MessageFormatException      if an invalid message is specified.
1:d29ca2a:      * @throws InvalidDestinationException if a client uses this method with an invalid topic.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void publish(Topic topic, Message message, int deliveryMode,
1:d29ca2a:                         int priority, long timeToLive) throws JMSException {
1:d29ca2a:         super.send(topic, message, deliveryMode, priority, timeToLive);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
1: 
0: import javax.jms.Destination;
0: import javax.jms.InvalidDestinationException;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
0: import javax.jms.MessageFormatException;
0: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicPublisher;
0: import javax.jms.TopicSession;
1: 
1: /**
1:  * A client uses a <CODE>TopicPublisher</CODE> object to publish messages on
1:  * a topic. A <CODE>TopicPublisher</CODE> object is the publish-subscribe
1:  * form of a message producer.
1:  * <p/>
1:  * <P>
1:  * Normally, the <CODE>Topic</CODE> is specified when a <CODE>TopicPublisher
1:  * </CODE> is created. In this case, an attempt to use the <CODE>publish
1:  * </CODE> methods for an unidentified <CODE>TopicPublisher</CODE> will throw
1:  * a <CODE>java.lang.UnsupportedOperationException</CODE>.
1:  * <p/>
1:  * <P>
1:  * If the <CODE>TopicPublisher</CODE> is created with an unidentified <CODE>
1:  * Topic</CODE>, an attempt to use the <CODE>publish</CODE> methods that
1:  * assume that the <CODE>Topic</CODE> has been identified will throw a <CODE>
1:  * java.lang.UnsupportedOperationException</CODE>.
1:  * <p/>
1:  * <P>
1:  * During the execution of its <CODE>publish</CODE> method, a message must
1:  * not be changed by other threads within the client. If the message is
1:  * modified, the result of the <CODE>publish</CODE> is undefined.
1:  * <p/>
1:  * <P>
1:  * After publishing a message, a client may retain and modify it without
1:  * affecting the message that has been published. The same message object may
1:  * be published multiple times.
1:  * <p/>
1:  * <P>
1:  * The following message headers are set as part of publishing a message:
1:  * <code>JMSDestination</code>,<code>JMSDeliveryMode</code>,<code>JMSExpiration</code>,
1:  * <code>JMSPriority</code>,<code>JMSMessageID</code> and <code>JMSTimeStamp</code>.
1:  * When the message is published, the values of these headers are ignored.
1:  * After completion of the <CODE>publish</CODE>, the headers hold the values
1:  * specified by the method publishing the message. It is possible for the
1:  * <CODE>publish</CODE> method not to set <code>JMSMessageID</code> and
1:  * <code>JMSTimeStamp</code> if the setting of these headers is explicitly
1:  * disabled by the <code>MessageProducer.setDisableMessageID</code> or <code>MessageProducer.setDisableMessageTimestamp</code>
1:  * method.
1:  * <p/>
1:  * <P>
1:  * Creating a <CODE>MessageProducer</CODE> provides the same features as
1:  * creating a <CODE>TopicPublisher</CODE>. A <CODE>MessageProducer</CODE>
1:  * object is recommended when creating new code. The <CODE>TopicPublisher
1:  * </CODE> is provided to support existing code.
1:  * <p/>
1:  * <p/>
1:  * <P>
1:  * Because <CODE>TopicPublisher</CODE> inherits from <CODE>MessageProducer
1:  * </CODE>, it inherits the <CODE>send</CODE> methods that are a part of the
1:  * <CODE>MessageProducer</CODE> interface. Using the <CODE>send</CODE>
1:  * methods will have the same effect as using the <CODE>publish</CODE>
1:  * methods: they are functionally the same.
1:  *
1:  * @see Session#createProducer(Destination)
1:  * @see TopicSession#createPublisher(Topic)
1:  */
1: 
1: public class ActiveMQTopicPublisher extends ActiveMQMessageProducer implements
1:         TopicPublisher {
1: 
1:     protected ActiveMQTopicPublisher(ActiveMQSession session,
0:                                      ActiveMQDestination destination) throws JMSException {
0:         super(session, session.getNextProducerId(), destination);
1:     }
1: 
1:     /**
1:      * Gets the topic associated with this <CODE>TopicPublisher</CODE>.
1:      *
1:      * @return this publisher's topic
1:      * @throws JMSException if the JMS provider fails to get the topic for this
1:      *                      <CODE>TopicPublisher</CODE> due to some internal error.
1:      */
1: 
1:     public Topic getTopic() throws JMSException {
1:         return (Topic) super.getDestination();
1:     }
1: 
1:     /**
1:      * Publishes a message to the topic. Uses the <CODE>TopicPublisher</CODE>'s
1:      * default delivery mode, priority, and time to live.
1:      *
1:      * @param message the message to publish
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws MessageFormatException      if an invalid message is specified.
1:      * @throws InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> with an invalid topic.
1:      * @throws java.lang.UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> that did not specify a topic at creation time.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void publish(Message message) throws JMSException {
1:         super.send(message);
1:     }
1: 
1:     /**
1:      * Publishes a message to the topic, specifying delivery mode, priority,
1:      * and time to live.
1:      *
1:      * @param message      the message to publish
1:      * @param deliveryMode the delivery mode to use
1:      * @param priority     the priority for this message
1:      * @param timeToLive   the message's lifetime (in milliseconds)
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws MessageFormatException      if an invalid message is specified.
1:      * @throws InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> with an invalid topic.
1:      * @throws java.lang.UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> that did not specify a topic at creation time.
1:      */
1: 
1:     public void publish(Message message, int deliveryMode, int priority,
1:                         long timeToLive) throws JMSException {
1:         super.send(message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     /**
1:      * Publishes a message to a topic for an unidentified message producer.
1:      * Uses the <CODE>TopicPublisher</CODE>'s default delivery mode,
1:      * priority, and time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a topic at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the topic be supplied every time a message is published.
1:      *
1:      * @param topic   the topic to publish this message to
1:      * @param message the message to publish
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws MessageFormatException      if an invalid message is specified.
1:      * @throws InvalidDestinationException if a client uses this method with an invalid topic.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void publish(Topic topic, Message message) throws JMSException {
1:         super.send(topic, message);
1:     }
1: 
1:     /**
1:      * Publishes a message to a topic for an unidentified message producer,
1:      * specifying delivery mode, priority and time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a topic at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the topic be supplied every time a message is published.
1:      *
1:      * @param topic        the topic to publish this message to
1:      * @param message      the message to publish
1:      * @param deliveryMode the delivery mode to use
1:      * @param priority     the priority for this message
1:      * @param timeToLive   the message's lifetime (in milliseconds)
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws MessageFormatException      if an invalid message is specified.
1:      * @throws InvalidDestinationException if a client uses this method with an invalid topic.
1:      */
1: 
1:     public void publish(Topic topic, Message message, int deliveryMode,
1:                         int priority, long timeToLive) throws JMSException {
1:         super.send(topic, message, deliveryMode, priority, timeToLive);
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:114a923
/////////////////////////////////////////////////////////////////////////
1:                                      ActiveMQDestination destination, int sendTimeout) throws JMSException {
1:         super(session, session.getNextProducerId(), destination,sendTimeout);
============================================================================