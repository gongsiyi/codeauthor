1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
5:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A useful base class for a transport implementation which has a background
1:d29ca2a:  * reading thread.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public abstract class TransportThreadSupport extends TransportSupport implements Runnable {
1:d29ca2a: 
1:933eb2f:     private boolean daemon;
1:d29ca2a:     private Thread runner;
1:f812e34:     // should be a multiple of 128k
1:933eb2f:     private long stackSize;
1:d29ca2a: 
1:d29ca2a:     public boolean isDaemon() {
1:d29ca2a:         return daemon;
6:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDaemon(boolean daemon) {
1:d29ca2a:         this.daemon = daemon;
1:d29ca2a:     }
1:d29ca2a: 
1:fa430aa:     protected void doStart() throws Exception {
1:f812e34:         runner = new Thread(null, this, "ActiveMQ Transport: " + toString(), stackSize);
1:d29ca2a:         runner.setDaemon(daemon);
1:d29ca2a:         runner.start();
1:d29ca2a:     }
1:d29ca2a: 
1:2ca08ce:     /**
1:2ca08ce:      * @return the stackSize
1:2ca08ce:      */
1:f812e34:     public long getStackSize() {
1:2ca08ce:         return this.stackSize;
1:d29ca2a:     }
1:d29ca2a: 
1:2ca08ce:     /**
1:2ca08ce:      * @param stackSize the stackSize to set
1:2ca08ce:      */
1:f812e34:     public void setStackSize(long stackSize) {
1:f812e34:         this.stackSize = stackSize;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private boolean daemon;
1:     private long stackSize;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     // should be a multiple of 128k
0:     private long stackSize = 0;
/////////////////////////////////////////////////////////////////////////
1:         runner = new Thread(null, this, "ActiveMQ Transport: " + toString(), stackSize);
1:     public long getStackSize() {
1:     public void setStackSize(long stackSize) {
1:         this.stackSize = stackSize;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
0:         runner = new Thread(this, "ActiveMQ Transport: "+toString());
commit:ead505d
/////////////////////////////////////////////////////////////////////////
0:     protected void checkStarted(Command command) throws IOException {
0:                 throw new IOException("The transport " + this + " of type: " + getClass().getName() + " is not running.");
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import org.apache.activemq.util.ServiceStopper;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: /**
1:  * A useful base class for a transport implementation which has a background
1:  * reading thread.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public abstract class TransportThreadSupport extends TransportSupport implements Runnable {
1: 
0:     private AtomicBoolean closed = new AtomicBoolean(false);
0:     private AtomicBoolean started = new AtomicBoolean(false);
0:     private boolean daemon = false;
1:     private Thread runner;
1: 
0:     public void start() throws Exception {
0:         if (started.compareAndSet(false, true)) {
0:             runner = new Thread(this, toString());
1:             runner.setDaemon(daemon);
1:             runner.start();
1:         }
1:     }
1: 
0:     public void stop() throws Exception {
0:         if (closed.compareAndSet(false, true)) {
0:             started.set(false);
0:             ServiceStopper stopper = new ServiceStopper();
0:             try {
0:                 doStop(stopper);
1:             }
0:             catch (Exception e) {
0:                 stopper.onException(this, e);
1:             }
0:             stopper.throwFirstException();
1:         }
0:         closed.set(true);
1:     }
1: 
0:     public boolean isStarted() {
0:         return started.get();
1:     }
1: 
0:     public boolean isClosed() {
0:         return closed.get();
1:     }
1: 
1:     public boolean isDaemon() {
1:         return daemon;
1:     }
1: 
1:     public void setDaemon(boolean daemon) {
1:         this.daemon = daemon;
1:     }
1: 
0:     protected abstract void doStop(ServiceStopper stopper) throws Exception;
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:2ca08ce
/////////////////////////////////////////////////////////////////////////
0:     private long stackSize=0;//should be a multiple of 128k
/////////////////////////////////////////////////////////////////////////
0:         runner = new Thread(null,this, "ActiveMQ Transport: "+toString(),stackSize);
0: 
0:     
1:     /**
1:      * @return the stackSize
1:      */
0:     public long getStackSize(){
1:         return this.stackSize;
0:     }
0: 
0:     
1:     /**
1:      * @param stackSize the stackSize to set
1:      */
0:     public void setStackSize(long stackSize){
0:         this.stackSize=stackSize;
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:436fe42
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:11be076
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:534ea69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.RemoveInfo;
/////////////////////////////////////////////////////////////////////////
0:             if (!(command instanceof ShutdownInfo || command instanceof RemoveInfo)) {
commit:3d96abc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ShutdownInfo;
/////////////////////////////////////////////////////////////////////////
0:     protected void checkStarted(Command command) {
0:             // we might try to shut down the transport before it was ever started in some test cases
0:             if (!(command instanceof ShutdownInfo)) {
0:                 throw new IllegalStateException("The transport " + this + " of type: " + getClass().getName() + " has not been started yet!");
0:             }
commit:204e940
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected void checkStarted() {
0:         if (!isStarted()) {
0:             throw new IllegalStateException("The transport " + this + " of type: " + getClass().getName() + " has not been started yet!");
0:         }
0:     }
commit:fa430aa
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
0:             doStart();
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void doStart() throws Exception {
0:         runner = new Thread(this, toString());
0:         runner.setDaemon(daemon);
0:         runner.start();
0:     }
0: 
============================================================================