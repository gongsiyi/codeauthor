1:77f1ed2: /**
1:77f1ed2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:77f1ed2:  * contributor license agreements.  See the NOTICE file distributed with
1:77f1ed2:  * this work for additional information regarding copyright ownership.
1:77f1ed2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:77f1ed2:  * (the "License"); you may not use this file except in compliance with
1:77f1ed2:  * the License.  You may obtain a copy of the License at
2:77f1ed2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:77f1ed2:  *
1:77f1ed2:  * Unless required by applicable law or agreed to in writing, software
1:77f1ed2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:77f1ed2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77f1ed2:  * See the License for the specific language governing permissions and
1:77f1ed2:  * limitations under the License.
1:77f1ed2:  */
1:77f1ed2: 
1:77f1ed2: package org.apache.activemq.openwire.v2;
1:77f1ed2: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:77f1ed2: import java.io.IOException;
1:77f1ed2: 
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.command.MessageAck;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:77f1ed2: 
1:77f1ed2: 
1:77f1ed2: 
1:77f1ed2: /**
1:77f1ed2:  * Marshalling code for Open Wire Format for MessageAckMarshaller
1:77f1ed2:  *
1:77f1ed2:  *
1:77f1ed2:  * NOTE!: This file is auto generated - do not modify!
1:77f1ed2:  *        if you need to make a change, please see the modify the groovy scripts in the
1:77f1ed2:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:77f1ed2:  *        this file.
1:b0c2a40:  *
1:77f1ed2:  * 
1:77f1ed2:  */
1:77f1ed2: public class MessageAckMarshaller extends BaseCommandMarshaller {
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Return the type of Data Structure we marshal
1:77f1ed2:      * @return short representation of the type data structure
1:77f1ed2:      */
1:77f1ed2:     public byte getDataStructureType() {
1:77f1ed2:         return MessageAck.DATA_STRUCTURE_TYPE;
1:77f1ed2:     }
1:77f1ed2:     
1:77f1ed2:     /**
1:77f1ed2:      * @return a new object instance
1:77f1ed2:      */
1:77f1ed2:     public DataStructure createObject() {
1:77f1ed2:         return new MessageAck();
1:77f1ed2:     }
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Un-marshal an object instance from the data input stream
1:77f1ed2:      *
1:77f1ed2:      * @param o the object to un-marshal
1:77f1ed2:      * @param dataIn the data input stream to build the object from
1:77f1ed2:      * @throws IOException
1:77f1ed2:      */
1:4821b9d:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:77f1ed2:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:77f1ed2: 
1:77f1ed2:         MessageAck info = (MessageAck)o;
1:77f1ed2:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:77f1ed2:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:77f1ed2:         info.setConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:77f1ed2:         info.setAckType(dataIn.readByte());
1:77f1ed2:         info.setFirstMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:77f1ed2:         info.setLastMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:77f1ed2:         info.setMessageCount(dataIn.readInt());
1:77f1ed2: 
1:77f1ed2:     }
1:77f1ed2: 
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Write the booleans that this object uses to a BooleanStream
1:77f1ed2:      */
1:77f1ed2:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:77f1ed2: 
1:77f1ed2:         MessageAck info = (MessageAck)o;
1:77f1ed2: 
1:77f1ed2:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:77f1ed2:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:77f1ed2:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:77f1ed2:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
1:77f1ed2:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getFirstMessageId(), bs);
1:77f1ed2:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getLastMessageId(), bs);
1:77f1ed2: 
1:77f1ed2:         return rc + 5;
1:77f1ed2:     }
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Write a object instance to data output stream
1:77f1ed2:      *
1:77f1ed2:      * @param o the instance to be marshaled
1:77f1ed2:      * @param dataOut the output stream
1:77f1ed2:      * @throws IOException thrown if an error occurs
1:77f1ed2:      */
1:4821b9d:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:77f1ed2:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:77f1ed2: 
1:77f1ed2:         MessageAck info = (MessageAck)o;
1:77f1ed2:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:77f1ed2:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:77f1ed2:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);
1:77f1ed2:         dataOut.writeByte(info.getAckType());
1:77f1ed2:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getFirstMessageId(), dataOut, bs);
1:77f1ed2:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getLastMessageId(), dataOut, bs);
1:77f1ed2:         dataOut.writeInt(info.getMessageCount());
1:77f1ed2: 
1:77f1ed2:     }
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Un-marshal an object instance from the data input stream
1:77f1ed2:      *
1:77f1ed2:      * @param o the object to un-marshal
1:77f1ed2:      * @param dataIn the data input stream to build the object from
1:77f1ed2:      * @throws IOException
1:77f1ed2:      */
1:4821b9d:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:77f1ed2:         super.looseUnmarshal(wireFormat, o, dataIn);
1:77f1ed2: 
1:77f1ed2:         MessageAck info = (MessageAck)o;
1:77f1ed2:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:77f1ed2:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:77f1ed2:         info.setConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:77f1ed2:         info.setAckType(dataIn.readByte());
1:77f1ed2:         info.setFirstMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:77f1ed2:         info.setLastMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:77f1ed2:         info.setMessageCount(dataIn.readInt());
1:77f1ed2: 
1:77f1ed2:     }
1:77f1ed2: 
1:77f1ed2: 
1:77f1ed2:     /**
1:77f1ed2:      * Write the booleans that this object uses to a BooleanStream
1:77f1ed2:      */
1:4821b9d:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:77f1ed2: 
1:77f1ed2:         MessageAck info = (MessageAck)o;
1:77f1ed2: 
1:77f1ed2:         super.looseMarshal(wireFormat, o, dataOut);
1:77f1ed2:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:77f1ed2:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:77f1ed2:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);
1:77f1ed2:         dataOut.writeByte(info.getAckType());
1:77f1ed2:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getFirstMessageId(), dataOut);
1:77f1ed2:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getLastMessageId(), dataOut);
1:77f1ed2:         dataOut.writeInt(info.getMessageCount());
1:77f1ed2: 
1:77f1ed2:     }
1:77f1ed2: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9c39f4e
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:77f1ed2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v2;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for MessageAckMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public class MessageAckMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return MessageAck.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new MessageAck();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         MessageAck info = (MessageAck)o;
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setAckType(dataIn.readByte());
1:         info.setFirstMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setLastMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setMessageCount(dataIn.readInt());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         MessageAck info = (MessageAck)o;
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getFirstMessageId(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getLastMessageId(), bs);
1: 
1:         return rc + 5;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         MessageAck info = (MessageAck)o;
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);
1:         dataOut.writeByte(info.getAckType());
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getFirstMessageId(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getLastMessageId(), dataOut, bs);
1:         dataOut.writeInt(info.getMessageCount());
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         MessageAck info = (MessageAck)o;
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setAckType(dataIn.readByte());
1:         info.setFirstMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setLastMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setMessageCount(dataIn.readInt());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
1: 
1:         MessageAck info = (MessageAck)o;
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);
1:         dataOut.writeByte(info.getAckType());
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getFirstMessageId(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getLastMessageId(), dataOut);
1:         dataOut.writeInt(info.getMessageCount());
1: 
1:     }
1: }
commit:c26d8a9
/////////////////////////////////////////////////////////////////////////
0: /**
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
============================================================================