1:d0c9514: /**
1:d0c9514:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d0c9514:  * contributor license agreements.  See the NOTICE file distributed with
1:d0c9514:  * this work for additional information regarding copyright ownership.
1:d0c9514:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d0c9514:  * (the "License"); you may not use this file except in compliance with
1:d0c9514:  * the License.  You may obtain a copy of the License at
1:d0c9514:  *
1:d0c9514:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d0c9514:  *
1:d0c9514:  * Unless required by applicable law or agreed to in writing, software
1:d0c9514:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d0c9514:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d0c9514:  * See the License for the specific language governing permissions and
1:d0c9514:  * limitations under the License.
1:d0c9514:  */
1:d0c9514: package org.apache.activemq.bugs;
1:d0c9514: 
1:d0c9514: import static org.junit.Assert.assertEquals;
1:d0c9514: 
1:d0c9514: import javax.jms.Connection;
1:d0c9514: import javax.jms.JMSException;
1:d0c9514: import javax.jms.MessageConsumer;
1:d0c9514: import javax.jms.MessageProducer;
1:d0c9514: import javax.jms.Session;
1:d0c9514: import javax.jms.TextMessage;
1:d0c9514: 
1:d0c9514: import org.apache.activemq.ActiveMQConnectionFactory;
1:d0c9514: import org.apache.activemq.ActiveMQSession;
1:d0c9514: import org.apache.activemq.TestSupport;
1:d0c9514: import org.apache.activemq.broker.BrokerService;
1:d0c9514: import org.apache.activemq.broker.TransportConnector;
1:d0c9514: import org.apache.activemq.broker.region.Destination;
1:d0c9514: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:d0c9514: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d0c9514: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d0c9514: import org.apache.activemq.command.ActiveMQTopic;
1:d0c9514: import org.junit.After;
1:d0c9514: import org.junit.Before;
1:d0c9514: import org.junit.Test;
1:d0c9514: 
1:d0c9514: public class AMQ6579Test {
1:d0c9514: 
1:d0c9514:     protected BrokerService brokerService;
1:d0c9514:     protected Connection connection;
1:d0c9514:     protected Session session;
1:d0c9514:     protected ActiveMQTopic topic;
1:d0c9514:     protected Destination amqDestination;
1:d0c9514:     protected MessageConsumer consumer;
1:d0c9514: 
1:d0c9514:     @Before
1:d0c9514:     public void setUp() throws Exception {
1:d0c9514:         brokerService = new BrokerService();
1:d0c9514:         brokerService.setPersistent(false);
1:d0c9514: 
1:d0c9514:         PolicyEntry policy = new PolicyEntry();
1:d0c9514:         policy.setTopicPrefetch(5);
1:d0c9514:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:d0c9514:         pendingMessageLimitStrategy.setLimit(5);
1:d0c9514:         policy.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1:d0c9514:         PolicyMap pMap = new PolicyMap();
1:d0c9514:         pMap.setDefaultEntry(policy);
1:d0c9514:         brokerService.setDestinationPolicy(pMap);
1:d0c9514: 
1:d0c9514:         TransportConnector tcp = brokerService.addConnector("tcp://localhost:0");
1:d0c9514:         brokerService.start();
1:d0c9514:         connection = new ActiveMQConnectionFactory(tcp.getPublishableConnectString()).createConnection();
1:d0c9514:         connection.start();
1:d0c9514:         session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:d0c9514:         topic = new ActiveMQTopic("test.topic");
1:d0c9514:         consumer = session.createConsumer(topic);
1:d0c9514:         amqDestination = TestSupport.getDestination(brokerService, topic);
1:d0c9514:     }
1:d0c9514: 
1:d0c9514:     @After
1:d0c9514:     public void tearDown() throws Exception {
1:d0c9514:         if (connection != null) {
1:d0c9514:             connection.close();
1:d0c9514:         }
1:d0c9514:         brokerService.stop();
1:d0c9514:     }
1:d0c9514: 
1:d0c9514:     /**
1:d0c9514:      * Test that messages are expired properly on a topic subscription when a
1:d0c9514:      * constant pending limit strategy is set and that future messages are
1:d0c9514:      * dispatched properly so that the consumer isn't blocked
1:d0c9514:      *
1:d0c9514:      * @throws Exception
1:d0c9514:      */
1:d0c9514:     @Test(timeout = 10000)
1:d0c9514:     public void testExpireWithPendingLimitStrategy() throws Exception {
1:d0c9514: 
1:d0c9514:         //Send 5 messages that are not expired to fill up prefetch
1:d0c9514:         //followed by 5 messages that can be expired
1:d0c9514:         //then another 5 messages that won't expire
1:d0c9514:         //Make sure 10 messages are received
1:d0c9514:         sendMessages(5, 0);
1:d0c9514:         sendMessages(5, 1);
1:d0c9514:         sendMessages(5, 0);
1:d0c9514: 
1:d0c9514:         //should get 10 messages as the middle 5 should expire
1:d0c9514:         assertEquals(10, receiveMessages());
1:d0c9514:     }
1:d0c9514: 
1:d0c9514:     /**
1:d0c9514:      * This method will generate random sized messages up to 150000 bytes.
1:d0c9514:      *
1:d0c9514:      * @param count
1:d0c9514:      * @throws JMSException
1:d0c9514:      */
1:d0c9514:     protected void sendMessages(int count, int expire) throws JMSException {
1:d0c9514:         MessageProducer producer = session.createProducer(topic);
1:d0c9514:         producer.setTimeToLive(expire);
1:d0c9514:         for (int i = 0; i < count; i++) {
1:d0c9514:             TextMessage textMessage = session.createTextMessage("test");
1:d0c9514:             producer.send(textMessage);
1:d0c9514:         }
1:d0c9514:     }
1:d0c9514: 
1:d0c9514:     protected int receiveMessages() throws JMSException {
1:d0c9514:         int count = 0;
1:d0c9514:         while (consumer.receive(500) != null) {
1:d0c9514:             count++;
1:d0c9514:         }
1:d0c9514:         return count;
1:d0c9514:     }
1:d0c9514: 
1:d0c9514: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d0c9514
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ6579Test {
1: 
1:     protected BrokerService brokerService;
1:     protected Connection connection;
1:     protected Session session;
1:     protected ActiveMQTopic topic;
1:     protected Destination amqDestination;
1:     protected MessageConsumer consumer;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setTopicPrefetch(5);
1:         ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy();
1:         pendingMessageLimitStrategy.setLimit(5);
1:         policy.setPendingMessageLimitStrategy(pendingMessageLimitStrategy);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         brokerService.setDestinationPolicy(pMap);
1: 
1:         TransportConnector tcp = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         connection = new ActiveMQConnectionFactory(tcp.getPublishableConnectString()).createConnection();
1:         connection.start();
1:         session = connection.createSession(false, ActiveMQSession.AUTO_ACKNOWLEDGE);
1:         topic = new ActiveMQTopic("test.topic");
1:         consumer = session.createConsumer(topic);
1:         amqDestination = TestSupport.getDestination(brokerService, topic);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         brokerService.stop();
1:     }
1: 
1:     /**
1:      * Test that messages are expired properly on a topic subscription when a
1:      * constant pending limit strategy is set and that future messages are
1:      * dispatched properly so that the consumer isn't blocked
1:      *
1:      * @throws Exception
1:      */
1:     @Test(timeout = 10000)
1:     public void testExpireWithPendingLimitStrategy() throws Exception {
1: 
1:         //Send 5 messages that are not expired to fill up prefetch
1:         //followed by 5 messages that can be expired
1:         //then another 5 messages that won't expire
1:         //Make sure 10 messages are received
1:         sendMessages(5, 0);
1:         sendMessages(5, 1);
1:         sendMessages(5, 0);
1: 
1:         //should get 10 messages as the middle 5 should expire
1:         assertEquals(10, receiveMessages());
1:     }
1: 
1:     /**
1:      * This method will generate random sized messages up to 150000 bytes.
1:      *
1:      * @param count
1:      * @throws JMSException
1:      */
1:     protected void sendMessages(int count, int expire) throws JMSException {
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setTimeToLive(expire);
1:         for (int i = 0; i < count; i++) {
1:             TextMessage textMessage = session.createTextMessage("test");
1:             producer.send(textMessage);
1:         }
1:     }
1: 
1:     protected int receiveMessages() throws JMSException {
1:         int count = 0;
1:         while (consumer.receive(500) != null) {
1:             count++;
1:         }
1:         return count;
1:     }
1: 
1: }
============================================================================