1:9703219: /**
1:9703219:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9703219:  * contributor license agreements.  See the NOTICE file distributed with
1:9703219:  * this work for additional information regarding copyright ownership.
1:9703219:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9703219:  * (the "License"); you may not use this file except in compliance with
1:9703219:  * the License.  You may obtain a copy of the License at
1:9703219:  *
1:9703219:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9703219:  *
1:9703219:  * Unless required by applicable law or agreed to in writing, software
1:9703219:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9703219:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9703219:  * See the License for the specific language governing permissions and
1:9703219:  * limitations under the License.
1:9703219:  */
1:9703219: package org.apache.activemq.usecases;
13:9703219: 
1:9703219: import java.io.File;
1:9703219: import java.io.IOException;
1:9703219: import java.net.URI;
1:9703219: import java.util.List;
1:9703219: 
1:9703219: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:9703219: import org.apache.activemq.broker.BrokerService;
1:9703219: import org.apache.activemq.broker.TransportConnector;
1:9703219: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:9703219: import org.apache.activemq.network.NetworkConnector;
1:9703219: import org.apache.activemq.store.kahadb.KahaDBStore;
1:9703219: import org.apache.activemq.transport.stomp.Stomp;
1:9703219: import org.apache.activemq.transport.stomp.StompConnection;
1:9703219: import org.apache.activemq.transport.stomp.StompFrame;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9703219: 
1:9703219: 
1:9703219: public class ThreeBrokerStompTemporaryQueueTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerStompTemporaryQueueTest.class);
1:9703219:     private StompConnection stompConnection;
1:9703219: 
1:4743a20:     @Override
1:9041c3f:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
1:9703219:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:9703219:         URI remoteURI;
1:9703219:         if (!transportConnectors.isEmpty()) {
1:9703219:             remoteURI = transportConnectors.get(0).getConnectUri();
1:9703219:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:" + remoteURI));
1:9703219:             connector.setName(localBroker.getBrokerName() + remoteBroker.getBrokerName());
1:9703219:             localBroker.addNetworkConnector(connector);
1:9703219:             maxSetupTime = 2000;
1:9703219:             return connector;
1:9703219:         } else {
1:9703219:             throw new Exception("Remote broker has no registered connectors.");
2:9703219:         }
1:9703219:     }
1:9703219: 
1:9703219:     public void testStompTemporaryQueue() throws Exception {
1:9703219:         // Setup broker networks
1:9703219:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:9703219:         bridgeAndConfigureBrokers("BrokerA", "BrokerC");
1:9703219:         bridgeAndConfigureBrokers("BrokerB", "BrokerA");
1:9703219:         bridgeAndConfigureBrokers("BrokerB", "BrokerC");
1:9703219:         bridgeAndConfigureBrokers("BrokerC", "BrokerA");
1:9703219:         bridgeAndConfigureBrokers("BrokerC", "BrokerB");
1:9703219: 
1:9703219:         startAllBrokers();
1:9703219:         waitForBridgeFormation();
1:9703219: 
1:9703219:         Thread.sleep(1000);
1:9703219: 
1:9703219:         stompConnection = new StompConnection();
1:9703219:         stompConnection.open("localhost", 61614);
1:9703219:         // Creating a temp queue
1:956724e:         stompConnection.sendFrame("CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL);
1:9703219: 
1:9703219:         StompFrame frame = stompConnection.receive();
1:9703219:         assertTrue(frame.toString().startsWith("CONNECTED"));
1:9703219: 
1:9703219:         stompConnection.subscribe("/temp-queue/meaningless", "auto");
1:9703219:         stompConnection.send("/temp-queue/meaningless", "Hello World");
1:9703219: 
1:9703219:         frame = stompConnection.receive(3000);
1:9703219:         assertEquals("Hello World", frame.getBody());
1:9703219: 
1:9703219:         Thread.sleep(1000);
1:9703219: 
1:9703219:         assertEquals("Destination", 1, brokers.get("BrokerA").broker.getAdminView().getTemporaryQueues().length);
1:9703219:         assertEquals("Destination", 1, brokers.get("BrokerB").broker.getAdminView().getTemporaryQueues().length);
1:9703219:         assertEquals("Destination", 1, brokers.get("BrokerC").broker.getAdminView().getTemporaryQueues().length);
1:9703219: 
1:9703219:         int advisoryTopicsForTempQueues;
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1:9703219: 
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1:9703219: 
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1:9703219: 
1:9703219:         stompConnection.disconnect();
1:956724e: 
1:9703219:         Thread.sleep(1000);
1:956724e: 
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
2:9703219:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:956724e:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:956724e: 
1:9703219:         LOG.info("Restarting brokerA");
1:9703219:         BrokerItem brokerItem = brokers.remove("BrokerA");
1:9703219:         if (brokerItem != null) {
1:9703219:             brokerItem.destroy();
1:9703219:         }
1:956724e: 
1:9703219:         BrokerService restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616,stomp://localhost:61613)/BrokerA"));
1:9703219:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:9703219:         bridgeAndConfigureBrokers("BrokerA", "BrokerC");
1:9703219:         restartedBroker.start();
1:9703219:         waitForBridgeFormation();
1:956724e: 
1:9703219:         Thread.sleep(3000);
1:9703219: 
1:9703219:         assertEquals("Destination", 0, brokers.get("BrokerA").broker.getAdminView().getTemporaryQueues().length);
1:9703219:         assertEquals("Destination", 0, brokers.get("BrokerB").broker.getAdminView().getTemporaryQueues().length);
1:9703219:         assertEquals("Destination", 0, brokers.get("BrokerC").broker.getAdminView().getTemporaryQueues().length);
1:9703219: 
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:9703219:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:9703219:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:9703219:     }
1:9703219: 
1:9703219:     private int countTopicsByName(String broker, String name)
1:9703219:             throws Exception {
1:9703219:         int advisoryTopicsForTempQueues = 0;
1:9703219:         for(int i=0; i<brokers.get(broker).broker.getAdminView().getTopics().length; i++){
1:9703219:             if(brokers.get(broker).broker.getAdminView().getTopics()[i].toString().contains(name)){
1:9703219:                 advisoryTopicsForTempQueues++;
1:9703219:             }
1:9703219:         }
1:9703219:         return advisoryTopicsForTempQueues;
1:9703219:     }
1:9703219: 
1:9703219:     private void bridgeAndConfigureBrokers(String local, String remote) throws Exception {
1:9703219:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:4743a20:         assertNotNull(bridge);
1:9703219:     }
1:9703219: 
1:4743a20:     @Override
1:9703219:     public void setUp() throws Exception {
1:9703219:         super.setAutoFail(true);
1:9703219:         super.setUp();
1:9703219:         String options = new String("?deleteAllMessagesOnStartup=true");
1:9703219:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616,stomp://localhost:61613)/BrokerA" + options));
1:9703219:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617,stomp://localhost:61614)/BrokerB" + options));
1:9703219:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61618,stomp://localhost:61615)/BrokerC" + options));
1:9703219:     }
1:9703219: 
1:9703219:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:9703219:         BrokerService broker = createBroker(uri);
1:9703219:         configurePersistenceAdapter(broker);
1:9703219:         return broker;
1:9703219:     }
1:9703219: 
1:9703219:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:9703219:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:9703219:         KahaDBStore kaha = new KahaDBStore();
1:9703219:         kaha.setDirectory(dataFileDir);
1:9703219:         broker.setPersistenceAdapter(kaha);
1:8bf987b:     }
1:9703219: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(bridge);
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
commit:956724e
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame("CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1: 
1: 
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ThreeBrokerStompTemporaryQueueTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:9041c3f
/////////////////////////////////////////////////////////////////////////
1:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
commit:9703219
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.List;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.transport.stomp.StompFrame;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class ThreeBrokerStompTemporaryQueueTest extends JmsMultipleBrokersTestSupport {
0:     private static final Log LOG = LogFactory.getLog(ThreeBrokerStompTemporaryQueueTest.class);
1:     private StompConnection stompConnection;
1: 
0:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit) throws Exception {
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI;
1:         if (!transportConnectors.isEmpty()) {
1:             remoteURI = transportConnectors.get(0).getConnectUri();
1:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:" + remoteURI));
1:             connector.setName(localBroker.getBrokerName() + remoteBroker.getBrokerName());
1:             localBroker.addNetworkConnector(connector);
1:             maxSetupTime = 2000;
1:             return connector;
1:         } else {
1:             throw new Exception("Remote broker has no registered connectors.");
1:         }
1:     }
1: 
1:     public void testStompTemporaryQueue() throws Exception {
1:         // Setup broker networks
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerC");
1:         bridgeAndConfigureBrokers("BrokerB", "BrokerA");
1:         bridgeAndConfigureBrokers("BrokerB", "BrokerC");
1:         bridgeAndConfigureBrokers("BrokerC", "BrokerA");
1:         bridgeAndConfigureBrokers("BrokerC", "BrokerB");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         Thread.sleep(1000);
1: 
1:         stompConnection = new StompConnection();
1:         stompConnection.open("localhost", 61614);
1:         // Creating a temp queue
0:         stompConnection.sendFrame("CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL);
1: 
1:         StompFrame frame = stompConnection.receive();
1:         assertTrue(frame.toString().startsWith("CONNECTED"));
1: 
1:         stompConnection.subscribe("/temp-queue/meaningless", "auto");
1:         stompConnection.send("/temp-queue/meaningless", "Hello World");
1: 
1:         frame = stompConnection.receive(3000);
1:         assertEquals("Hello World", frame.getBody());
1: 
1:         Thread.sleep(1000);
1: 
1:         assertEquals("Destination", 1, brokers.get("BrokerA").broker.getAdminView().getTemporaryQueues().length);
1:         assertEquals("Destination", 1, brokers.get("BrokerB").broker.getAdminView().getTemporaryQueues().length);
1:         assertEquals("Destination", 1, brokers.get("BrokerC").broker.getAdminView().getTemporaryQueues().length);
1: 
1:         int advisoryTopicsForTempQueues;
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1: 
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1: 
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should be present", 1, advisoryTopicsForTempQueues);
1: 
1:         stompConnection.disconnect();
1:         
1:         Thread.sleep(1000);
1:         
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);  
1:         
1: 
1:         LOG.info("Restarting brokerA");
1:         BrokerItem brokerItem = brokers.remove("BrokerA");
1:         if (brokerItem != null) {
1:             brokerItem.destroy();
1:         }
1:         
1:         BrokerService restartedBroker = createAndConfigureBroker(new URI("broker:(tcp://localhost:61616,stomp://localhost:61613)/BrokerA"));
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerB");
1:         bridgeAndConfigureBrokers("BrokerA", "BrokerC");
1:         restartedBroker.start();
1:         waitForBridgeFormation();
1:         
1:         Thread.sleep(3000);
1: 
1:         assertEquals("Destination", 0, brokers.get("BrokerA").broker.getAdminView().getTemporaryQueues().length);
1:         assertEquals("Destination", 0, brokers.get("BrokerB").broker.getAdminView().getTemporaryQueues().length);
1:         assertEquals("Destination", 0, brokers.get("BrokerC").broker.getAdminView().getTemporaryQueues().length);
1: 
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerA", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerB", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1:         advisoryTopicsForTempQueues = countTopicsByName("BrokerC", "ActiveMQ.Advisory.Consumer.Queue.ID");
1:         assertEquals("Advisory topic should have been deleted", 0, advisoryTopicsForTempQueues);
1: 
1:     }
1: 
1:     private int countTopicsByName(String broker, String name)
1:             throws Exception {
1:         int advisoryTopicsForTempQueues = 0;
1:         for(int i=0; i<brokers.get(broker).broker.getAdminView().getTopics().length; i++){
1:             if(brokers.get(broker).broker.getAdminView().getTopics()[i].toString().contains(name)){
1:                 advisoryTopicsForTempQueues++;
1:             }
1:         }
1:         return advisoryTopicsForTempQueues;
1:     }
1: 
1: 
1:     private void bridgeAndConfigureBrokers(String local, String remote) throws Exception {
1:         NetworkConnector bridge = bridgeBrokers(local, remote);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         String options = new String("?deleteAllMessagesOnStartup=true");
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616,stomp://localhost:61613)/BrokerA" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61617,stomp://localhost:61614)/BrokerB" + options));
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61618,stomp://localhost:61615)/BrokerC" + options));
1: 
1:     }
1: 
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
1: 
1:         configurePersistenceAdapter(broker);
1: 
1:         return broker;
1:     }
1: 
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1: 
1: }
============================================================================