1:9583b5f: /**
1:9583b5f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9583b5f:  * contributor license agreements.  See the NOTICE file distributed with
1:9583b5f:  * this work for additional information regarding copyright ownership.
1:9583b5f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9583b5f:  * (the "License"); you may not use this file except in compliance with
1:9583b5f:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a153b0:  *
1:9583b5f:  * Unless required by applicable law or agreed to in writing, software
1:9583b5f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9583b5f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9583b5f:  * See the License for the specific language governing permissions and
1:9583b5f:  * limitations under the License.
1:9583b5f:  */
1:9583b5f: package org.apache.activemq.util;
1:0a52fe7: 
1:05fb2bb: import java.io.File;
1:05fb2bb: import java.io.FileInputStream;
1:05fb2bb: import java.io.FileOutputStream;
1:05fb2bb: import java.io.FilenameFilter;
1:05fb2bb: import java.io.IOException;
1:05fb2bb: import java.io.InputStream;
1:05fb2bb: import java.io.OutputStream;
1:938aa62: import java.nio.file.Files;
1:938aa62: import java.nio.file.Path;
1:938aa62: import java.nio.file.StandardCopyOption;
1:0004917: import java.util.ArrayList;
1:0004917: import java.util.List;
1:1aab71b: import java.util.Stack;
1:933eb2f: 
1:9583b5f: /**
1:938aa62:  * Collection of File and Folder utility methods.
1:9583b5f:  */
1:933eb2f: public final class IOHelper {
1:05fb2bb: 
1:2a153b0:     protected static final int MAX_DIR_NAME_LENGTH;
1:f472000:     protected static final int MAX_FILE_NAME_LENGTH;
1:d8b407b:     private static final int DEFAULT_BUFFER_SIZE = 4096;
1:05fb2bb: 
1:933eb2f:     private IOHelper() {
1:933eb2f:     }
1:05fb2bb: 
1:9583b5f:     public static String getDefaultDataDirectory() {
1:9583b5f:         return getDefaultDirectoryPrefix() + "activemq-data";
1:0004917:     }
1:05fb2bb: 
1:9583b5f:     public static String getDefaultStoreDirectory() {
1:9583b5f:         return getDefaultDirectoryPrefix() + "amqstore";
1:28296e6:     }
1:05fb2bb: 
1:9583b5f:     /**
1:74a7a8b:      * Allows a system property to be used to overload the default data
1:74a7a8b:      * directory which can be useful for forcing the test cases to use a target/
1:74a7a8b:      * prefix
1:9583b5f:      */
1:9583b5f:     public static String getDefaultDirectoryPrefix() {
1:9583b5f:         try {
1:9583b5f:             return System.getProperty("org.apache.activemq.default.directory.prefix", "");
1:74a7a8b:         } catch (Exception e) {
1:9583b5f:             return "";
1:28296e6:         }
6:9583b5f:     }
1:1aab71b: 
1:0a52fe7:     /**
1:74846bb:      * Converts any string into a string that is safe to use as a file name. The
1:74846bb:      * result will only include ascii characters and numbers, and the "-","_",
1:74846bb:      * and "." characters.
1:05fb2bb:      *
1:0a52fe7:      * @param name
1:5e05df1:      * @return safe name of the directory
1:0a52fe7:      */
1:2a153b0:     public static String toFileSystemDirectorySafeName(String name) {
1:2a153b0:         return toFileSystemSafeName(name, true, MAX_DIR_NAME_LENGTH);
1:2a153b0:     }
1:05fb2bb: 
1:28296e6:     public static String toFileSystemSafeName(String name) {
1:2a153b0:         return toFileSystemSafeName(name, false, MAX_FILE_NAME_LENGTH);
1:2a153b0:     }
1:05fb2bb: 
1:2a153b0:     /**
1:74846bb:      * Converts any string into a string that is safe to use as a file name. The
1:74846bb:      * result will only include ascii characters and numbers, and the "-","_",
1:74846bb:      * and "." characters.
1:0a52fe7:      *
1:2a153b0:      * @param name
1:05fb2bb:      * @param dirSeparators
1:05fb2bb:      * @param maxFileLength
1:5e05df1:      * @return file system safe name
1:2a153b0:      */
1:74846bb:     public static String toFileSystemSafeName(String name, boolean dirSeparators, int maxFileLength) {
1:0a52fe7:         int size = name.length();
1:28296e6:         StringBuffer rc = new StringBuffer(size * 2);
1:0a52fe7:         for (int i = 0; i < size; i++) {
1:0a52fe7:             char c = name.charAt(i);
1:0a52fe7:             boolean valid = c >= 'a' && c <= 'z';
1:0a52fe7:             valid = valid || (c >= 'A' && c <= 'Z');
1:0a52fe7:             valid = valid || (c >= '0' && c <= '9');
1:74846bb:             valid = valid || (c == '_') || (c == '-') || (c == '.') || (c == '#') || (dirSeparators && ((c == '/') || (c == '\\')));
1:fd184fb: 
1:28296e6:             if (valid) {
1:0a52fe7:                 rc.append(c);
1:0a52fe7:             } else {
1:0a52fe7:                 // Encode the character using hex notation
1:0a52fe7:                 rc.append('#');
1:0a52fe7:                 rc.append(HexSupport.toHexFromInt(c, true));
1:0a52fe7:             }
1:0a52fe7:         }
1:f472000:         String result = rc.toString();
1:2a153b0:         if (result.length() > maxFileLength) {
1:74846bb:             result = result.substring(result.length() - maxFileLength, result.length());
1:0a52fe7:         }
1:2a153b0:         return result;
1:0004917:     }
1:05fb2bb: 
1:1aab71b:     public static boolean delete(File top) {
1:1aab71b:         boolean result = true;
1:1aab71b:         Stack<File> files = new Stack<File>();
1:1aab71b:         // Add file to the stack to be processed...
1:1aab71b:         files.push(top);
1:1aab71b:         // Process all files until none remain...
1:1aab71b:         while (!files.isEmpty()) {
1:1aab71b:             File file = files.pop();
1:1aab71b:             if (file.isDirectory()) {
1:1aab71b:                 File list[] = file.listFiles();
1:1aab71b:                 if (list == null || list.length == 0) {
1:1aab71b:                     // The current directory contains no entries...
1:1aab71b:                     // delete directory and continue...
1:1aab71b:                     result &= file.delete();
1:1aab71b:                 } else {
1:1aab71b:                     // Add back the directory since it is not empty....
1:1aab71b:                     // and when we process it again it will be empty and can be
1:1aab71b:                     // deleted safely...
1:1aab71b:                     files.push(file);
1:1aab71b:                     for (File dirFile : list) {
1:1aab71b:                         if (dirFile.isDirectory()) {
1:1aab71b:                             // Place the directory on the stack...
1:1aab71b:                             files.push(dirFile);
1:1aab71b:                         } else {
1:1aab71b:                             // This is a simple file, delete it...
1:1aab71b:                             result &= dirFile.delete();
1:1aab71b:                         }
1:1aab71b:                     }
1:1aab71b:                 }
1:1aab71b:             } else {
1:1aab71b:                 // This is a simple file, delete it...
1:1aab71b:                 result &= file.delete();
1:1aab71b:             }
1:1aab71b:         }
1:1aab71b:         return result;
1:1aab71b:     }
1:05fb2bb: 
1:28296e6:     public static boolean deleteFile(File fileToDelete) {
1:28296e6:         if (fileToDelete == null || !fileToDelete.exists()) {
1:28296e6:             return true;
1:f472000:         }
1:28296e6:         boolean result = deleteChildren(fileToDelete);
1:28296e6:         result &= fileToDelete.delete();
1:28296e6:         return result;
1:28296e6:     }
1:05fb2bb: 
1:28296e6:     public static boolean deleteChildren(File parent) {
1:28296e6:         if (parent == null || !parent.exists()) {
1:28296e6:             return false;
1:28296e6:         }
1:28296e6:         boolean result = true;
1:28296e6:         if (parent.isDirectory()) {
1:28296e6:             File[] files = parent.listFiles();
1:28296e6:             if (files == null) {
1:28296e6:                 result = false;
2:28296e6:             } else {
1:28296e6:                 for (int i = 0; i < files.length; i++) {
1:28296e6:                     File file = files[i];
1:74846bb:                     if (file.getName().equals(".") || file.getName().equals("..")) {
1:28296e6:                         continue;
1:28296e6:                     }
1:28296e6:                     if (file.isDirectory()) {
1:28296e6:                         result &= deleteFile(file);
1:28296e6:                     } else {
1:28296e6:                         result &= file.delete();
1:28296e6:                     }
1:28296e6:                 }
1:28296e6:             }
1:28296e6:         }
1:1aab71b: 
1:28296e6:         return result;
1:28296e6:     }
1:fd184fb: 
1:28296e6:     public static void moveFile(File src, File targetDirectory) throws IOException {
1:28296e6:         if (!src.renameTo(new File(targetDirectory, src.getName()))) {
1:938aa62: 
1:938aa62:             // If rename fails we must do a true deep copy instead.
1:938aa62:             Path sourcePath = src.toPath();
1:938aa62:             Path targetDirPath = targetDirectory.toPath();
1:938aa62: 
1:938aa62:             try {
1:938aa62:                 Files.move(sourcePath, targetDirPath.resolve(sourcePath.getFileName()), StandardCopyOption.REPLACE_EXISTING);
1:938aa62:             } catch (IOException ex) {
1:938aa62:                 throw new IOException("Failed to move " + src + " to " + targetDirectory + " - " + ex.getMessage());
1:938aa62:             }
1:28296e6:         }
1:28296e6:     }
1:05fb2bb: 
1:74846bb:     public static void moveFiles(File srcDirectory, File targetDirectory, FilenameFilter filter) throws IOException {
1:74846bb:         if (!srcDirectory.isDirectory()) {
1:74846bb:             throw new IOException("source is not a directory");
1:74846bb:         }
1:74846bb: 
1:74846bb:         if (targetDirectory.exists() && !targetDirectory.isDirectory()) {
1:74846bb:             throw new IOException("target exists and is not a directory");
1:74846bb:         } else {
1:74846bb:             mkdirs(targetDirectory);
1:74846bb:         }
1:74846bb: 
1:74846bb:         List<File> filesToMove = new ArrayList<File>();
1:74846bb:         getFiles(srcDirectory, filesToMove, filter);
1:74846bb: 
1:74846bb:         for (File file : filesToMove) {
1:74846bb:             if (!file.isDirectory()) {
1:74846bb:                 moveFile(file, targetDirectory);
1:74846bb:             }
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:d8b407b:     public static void copyFile(File src, File dest) throws IOException {
1:1aab71b:         copyFile(src, dest, null);
1:0004917:     }
1:05fb2bb: 
1:cca20b8:     public static void copyFile(File src, File dest, FilenameFilter filter) throws IOException {
1:0004917:         if (src.getCanonicalPath().equals(dest.getCanonicalPath()) == false) {
1:0004917:             if (src.isDirectory()) {
1:0a52fe7: 
1:cca20b8:                 mkdirs(dest);
1:cca20b8:                 List<File> list = getFiles(src, filter);
1:cca20b8:                 for (File f : list) {
1:cca20b8:                     if (f.isFile()) {
1:cca20b8:                         File target = new File(getCopyParent(src, dest, f), f.getName());
1:cca20b8:                         copySingleFile(f, target);
1:cca20b8:                     }
1:0004917:                 }
1:cca20b8: 
1:0004917:             } else if (dest.isDirectory()) {
2:0004917:                 mkdirs(dest);
1:0004917:                 File target = new File(dest, src.getName());
1:0004917:                 copySingleFile(src, target);
1:0004917:             } else {
1:0004917:                 copySingleFile(src, dest);
1:0004917:             }
1:0004917:         }
1:0004917:     }
4:0004917: 
1:0004917:     static File getCopyParent(File from, File to, File src) {
1:0004917:         File result = null;
1:0004917:         File parent = src.getParentFile();
1:0004917:         String fromPath = from.getAbsolutePath();
1:0004917:         if (parent.getAbsolutePath().equals(fromPath)) {
1:74846bb:             // one level down
1:0004917:             result = to;
1:74846bb:         } else {
1:0004917:             String parentPath = parent.getAbsolutePath();
1:0004917:             String path = parentPath.substring(fromPath.length());
1:74846bb:             result = new File(to.getAbsolutePath() + File.separator + path);
1:0004917:         }
1:0004917:         return result;
1:0004917:     }
1:0004917: 
1:74846bb:     static List<File> getFiles(File dir, FilenameFilter filter) {
1:0004917:         List<File> result = new ArrayList<File>();
1:74846bb:         getFiles(dir, result, filter);
1:0004917:         return result;
1:0004917:     }
1:05fb2bb: 
1:74846bb:     static void getFiles(File dir, List<File> list, FilenameFilter filter) {
1:0004917:         if (!list.contains(dir)) {
1:0004917:             list.add(dir);
1:74846bb:             String[] fileNames = dir.list(filter);
1:74846bb:             for (int i = 0; i < fileNames.length; i++) {
1:74846bb:                 File f = new File(dir, fileNames[i]);
2:0004917:                 if (f.isFile()) {
1:0004917:                     list.add(f);
1:74846bb:                 } else {
1:74846bb:                     getFiles(dir, list, filter);
1:0004917:                 }
1:0004917:             }
1:0004917:         }
1:0004917:     }
1:0004917: 
1:0004917:     public static void copySingleFile(File src, File dest) throws IOException {
1:d8b407b:         FileInputStream fileSrc = new FileInputStream(src);
1:d8b407b:         FileOutputStream fileDest = new FileOutputStream(dest);
1:d8b407b:         copyInputStream(fileSrc, fileDest);
1:d8b407b:     }
1:05fb2bb: 
1:d8b407b:     public static void copyInputStream(InputStream in, OutputStream out) throws IOException {
1:12b26b6:         try {
1:12b26b6:             byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
1:12b26b6:             int len = in.read(buffer);
1:12b26b6:             while (len >= 0) {
1:12b26b6:                 out.write(buffer, 0, len);
1:12b26b6:                 len = in.read(buffer);
1:12b26b6:             }
1:12b26b6:         } finally {
1:12b26b6:             in.close();
1:12b26b6:             out.close();
1:d8b407b:         }
1:d8b407b:     }
1:05fb2bb: 
1:f472000:     static {
1:05fb2bb:         MAX_DIR_NAME_LENGTH = Integer.getInteger("MaximumDirNameLength", 200);
1:05fb2bb:         MAX_FILE_NAME_LENGTH = Integer.getInteger("MaximumFileNameLength", 64);
1:f472000:     }
1:0004917: 
1:05fb2bb:     public static int getMaxDirNameLength() {
1:05fb2bb:         return MAX_DIR_NAME_LENGTH;
1:05fb2bb:     }
1:05fb2bb: 
1:05fb2bb:     public static int getMaxFileNameLength() {
1:05fb2bb:         return MAX_FILE_NAME_LENGTH;
1:05fb2bb:     }
1:05fb2bb: 
1:fd184fb:     public static void mkdirs(File dir) throws IOException {
1:fd184fb:         if (dir.exists()) {
1:fd184fb:             if (!dir.isDirectory()) {
1:74846bb:                 throw new IOException("Failed to create directory '" + dir +
1:74846bb:                                       "', regular file already existed with that name");
1:fd184fb:             }
1:05fb2bb: 
1:fd184fb:         } else {
1:fd184fb:             if (!dir.mkdirs()) {
1:74846bb:                 throw new IOException("Failed to create directory '" + dir + "'");
1:fd184fb:             }
1:fd184fb:         }
1:fd184fb:     }
1:28296e6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:938aa62
/////////////////////////////////////////////////////////////////////////
1: import java.nio.file.Files;
1: import java.nio.file.Path;
1: import java.nio.file.StandardCopyOption;
1:  * Collection of File and Folder utility methods.
/////////////////////////////////////////////////////////////////////////
1: 
1:             // If rename fails we must do a true deep copy instead.
1:             Path sourcePath = src.toPath();
1:             Path targetDirPath = targetDirectory.toPath();
1: 
1:             try {
1:                 Files.move(sourcePath, targetDirPath.resolve(sourcePath.getFileName()), StandardCopyOption.REPLACE_EXISTING);
1:             } catch (IOException ex) {
1:                 throw new IOException("Failed to move " + src + " to " + targetDirectory + " - " + ex.getMessage());
1:             }
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * @return safe name of the directory
/////////////////////////////////////////////////////////////////////////
1:      * @return file system safe name
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1:      * Converts any string into a string that is safe to use as a file name. The
1:      * result will only include ascii characters and numbers, and the "-","_",
1:      * and "." characters.
/////////////////////////////////////////////////////////////////////////
1:      * Converts any string into a string that is safe to use as a file name. The
1:      * result will only include ascii characters and numbers, and the "-","_",
1:      * and "." characters.
1:     public static String toFileSystemSafeName(String name, boolean dirSeparators, int maxFileLength) {
/////////////////////////////////////////////////////////////////////////
1:             valid = valid || (c == '_') || (c == '-') || (c == '.') || (c == '#') || (dirSeparators && ((c == '/') || (c == '\\')));
/////////////////////////////////////////////////////////////////////////
1:             result = result.substring(result.length() - maxFileLength, result.length());
/////////////////////////////////////////////////////////////////////////
1:                     if (file.getName().equals(".") || file.getName().equals("..")) {
/////////////////////////////////////////////////////////////////////////
1:     public static void moveFiles(File srcDirectory, File targetDirectory, FilenameFilter filter) throws IOException {
1:         if (!srcDirectory.isDirectory()) {
1:             throw new IOException("source is not a directory");
1:         }
1: 
1:         if (targetDirectory.exists() && !targetDirectory.isDirectory()) {
1:             throw new IOException("target exists and is not a directory");
1:         } else {
1:             mkdirs(targetDirectory);
1:         }
1: 
1:         List<File> filesToMove = new ArrayList<File>();
1:         getFiles(srcDirectory, filesToMove, filter);
1: 
1:         for (File file : filesToMove) {
1:             if (!file.isDirectory()) {
1:                 moveFile(file, targetDirectory);
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             // one level down
1:         } else {
1:             result = new File(to.getAbsolutePath() + File.separator + path);
1:     static List<File> getFiles(File dir, FilenameFilter filter) {
1:         getFiles(dir, result, filter);
1:     static void getFiles(File dir, List<File> list, FilenameFilter filter) {
1:             String[] fileNames = dir.list(filter);
1:             for (int i = 0; i < fileNames.length; i++) {
1:                 File f = new File(dir, fileNames[i]);
1:                 } else {
1:                     getFiles(dir, list, filter);
/////////////////////////////////////////////////////////////////////////
1:                 throw new IOException("Failed to create directory '" + dir +
1:                                       "', regular file already existed with that name");
1:                 throw new IOException("Failed to create directory '" + dir + "'");
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
1:             int len = in.read(buffer);
1:             while (len >= 0) {
1:                 out.write(buffer, 0, len);
1:                 len = in.read(buffer);
1:             }
1:         } finally {
1:             in.close();
1:             out.close();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:05fb2bb
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1:  *
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      * @param dirSeparators
1:      * @param maxFileLength
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         MAX_DIR_NAME_LENGTH = Integer.getInteger("MaximumDirNameLength", 200);
1:         MAX_FILE_NAME_LENGTH = Integer.getInteger("MaximumFileNameLength", 64);
1:     public static int getMaxDirNameLength() {
1:         return MAX_DIR_NAME_LENGTH;
1:     }
1: 
1:     public static int getMaxFileNameLength() {
1:         return MAX_FILE_NAME_LENGTH;
1:     }
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
0: import java.io.*;
1: import java.util.Stack;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean delete(File top) {
1:         boolean result = true;
1:         Stack<File> files = new Stack<File>();
1:         // Add file to the stack to be processed...
1:         files.push(top);
1:         // Process all files until none remain...
1:         while (!files.isEmpty()) {
1:             File file = files.pop();
1:             if (file.isDirectory()) {
1:                 File list[] = file.listFiles();
1:                 if (list == null || list.length == 0) {
1:                     // The current directory contains no entries...
1:                     // delete directory and continue...
1:                     result &= file.delete();
1:                 } else {
1:                     // Add back the directory since it is not empty....
1:                     // and when we process it again it will be empty and can be
1:                     // deleted safely...
1:                     files.push(file);
1:                     for (File dirFile : list) {
1:                         if (dirFile.isDirectory()) {
1:                             // Place the directory on the stack...
1:                             files.push(dirFile);
1:                         } else {
1:                             // This is a simple file, delete it...
1:                             result &= dirFile.delete();
1:                         }
1:                     }
1:                 }
1:             } else {
1:                 // This is a simple file, delete it...
1:                 result &= file.delete();
1:             }
1:         }
1:         return result;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         copyFile(src, dest, null);
/////////////////////////////////////////////////////////////////////////
0:         MAX_DIR_NAME_LENGTH = Integer.getInteger("MaximumDirNameLength",200);
0:         MAX_FILE_NAME_LENGTH = Integer.getInteger("MaximumFileNameLength",64);
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fd184fb
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static void mkdirs(File dir) throws IOException {
1:         if (dir.exists()) {
1:             if (!dir.isDirectory()) {
0:                 throw new IOException("Failed to create directory '" + dir +"', regular file already existed with that name");
1:             }
1:             
1:         } else {
1:             if (!dir.mkdirs()) {
0:                 throw new IOException("Failed to create directory '" + dir+"'");
1:             }
1:         }
1:     }
commit:0a52fe7
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Converts any string into a string that is safe to use as a file name.
0:      * The result will only include ascii characters and numbers, and the "-","_", and "." characters.
1:      *
1:      * @param name
0:      * @return
1:      */
0:     public static String toFileSystemSafeName( String name ) {
1:     	int size = name.length();
0:     	StringBuffer rc = new StringBuffer(size*2);
1:     	for (int i = 0; i < size; i++) {
1: 			char c = name.charAt(i);
1: 			boolean valid = c >= 'a' && c <= 'z';
1: 			valid = valid || (c >= 'A' && c <= 'Z');
1: 			valid = valid || (c >= '0' && c <= '9');
0: 			valid = valid || (c == '_') || (c == '-') || (c == '.') || (c == '/') || (c == '\\');
1: 			
0: 			if(  valid ) {
1: 				rc.append(c);
1: 			} else {
1: 				// Encode the character using hex notation
1: 				rc.append('#');
1: 				rc.append(HexSupport.toHexFromInt(c, true));
1: 			}
1: 		}
0:     	return rc.toString();
1:     }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class IOHelper {
1: 
1:     private IOHelper() {
1:     }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:      * Allows a system property to be used to overload the default data
1:      * directory which can be useful for forcing the test cases to use a target/
1:      * prefix
1:         } catch (Exception e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Robert Davies
-------------------------------------------------------------------------------
commit:cca20b8
/////////////////////////////////////////////////////////////////////////
1:     public static void copyFile(File src, File dest, FilenameFilter filter) throws IOException {
1:                 mkdirs(dest);
1:                 List<File> list = getFiles(src, filter);
1:                 for (File f : list) {
1:                     if (f.isFile()) {
1:                         File target = new File(getCopyParent(src, dest, f), f.getName());
1:                         copySingleFile(f, target);
1:                     }
1: 
commit:0004917
/////////////////////////////////////////////////////////////////////////
0: import java.io.FilenameFilter;
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         copyFile(src,dest,null);
1:     }
1:     
0:     public static void copyFile(File src, File dest,FilenameFilter filter) throws IOException {
1:         if (src.getCanonicalPath().equals(dest.getCanonicalPath()) == false) {
1:             if (src.isDirectory()) {
0:                 if (dest.isDirectory()) {
1:                     mkdirs(dest);
0:                     List<File> list = getFiles(src,filter);
0:                     for (File f : list) {
1:                         if (f.isFile()) {
0:                             File target = new File(getCopyParent(src, dest, f), f.getName());
0:                             copySingleFile(f, target);
1:                         }
1:                     }
1: 
1:                 }
1:             } else if (dest.isDirectory()) {
1:                 mkdirs(dest);
1:                 File target = new File(dest, src.getName());
1:                 copySingleFile(src, target);
1:             } else {
1:                 copySingleFile(src, dest);
1:             }
1:         }
1:     }
1:     
1:     static File getCopyParent(File from, File to, File src) {
1:         File result = null;
1:         File parent = src.getParentFile();
1:         String fromPath = from.getAbsolutePath();
1:         if (parent.getAbsolutePath().equals(fromPath)) {
0:             //one level down
1:             result = to;
0:         }else {
1:             String parentPath = parent.getAbsolutePath();
1:             String path = parentPath.substring(fromPath.length());
0:             result = new File(to.getAbsolutePath()+File.separator+path);
1:         }
1:         return result;
1:     }
1:     
0:     static List<File> getFiles(File dir,FilenameFilter filter){
1:         List<File> result = new ArrayList<File>();
0:         getFiles(dir,result,filter);
1:         return result;
1:     }
1:     
0:     static void getFiles(File dir,List<File> list,FilenameFilter filter) {
1:         if (!list.contains(dir)) {
1:             list.add(dir);
0:             String[] fileNames=dir.list(filter);
0:             for (int i =0; i < fileNames.length;i++) {
0:                 File f = new File(dir,fileNames[i]);
1:                 if (f.isFile()) {
1:                     list.add(f);
0:                 }else {
0:                     getFiles(dir,list,filter);
1:                 }
1:             }
1:         }
1:     }
1:     
1:     
1:     public static void copySingleFile(File src, File dest) throws IOException {
commit:d8b407b
/////////////////////////////////////////////////////////////////////////
0: import java.io.FileInputStream;
0: import java.io.FileNotFoundException;
0: import java.io.FileOutputStream;
0: import java.io.InputStream;
0: import java.io.OutputStream;
/////////////////////////////////////////////////////////////////////////
1:     private static final int DEFAULT_BUFFER_SIZE = 4096;
/////////////////////////////////////////////////////////////////////////
1:     public static void copyFile(File src, File dest) throws IOException {
1:         FileInputStream fileSrc = new FileInputStream(src);
1:         FileOutputStream fileDest = new FileOutputStream(dest);
1:         copyInputStream(fileSrc, fileDest);
1:     }
0:     
1:     public static void copyInputStream(InputStream in, OutputStream out) throws IOException {
0:         byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
0:         int len = in.read(buffer);
0:         while (len >= 0) {
0:             out.write(buffer, 0, len);
0:             len = in.read(buffer);
1:         }
0:         in.close();
0:         out.close();
1:     }
0:     
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MAX_DIR_NAME_LENGTH;
/////////////////////////////////////////////////////////////////////////
1:     public static String toFileSystemDirectorySafeName(String name) {
1:         return toFileSystemSafeName(name, true, MAX_DIR_NAME_LENGTH);
1:     }
0:     
1:         return toFileSystemSafeName(name, false, MAX_FILE_NAME_LENGTH);
1:     }
0:     
1:     /**
0:      * Converts any string into a string that is safe to use as a file name.
0:      * The result will only include ascii characters and numbers, and the "-","_", and "." characters.
1:      *
1:      * @param name
0:      * @param dirSeparators 
0:      * @param maxFileLength 
0:      * @return
1:      */
0:     public static String toFileSystemSafeName(String name,boolean dirSeparators,int maxFileLength) {
/////////////////////////////////////////////////////////////////////////
0:             valid = valid || (c == '_') || (c == '-') || (c == '.') || (c=='#')
0:                     ||(dirSeparators && ( (c == '/') || (c == '\\')));
/////////////////////////////////////////////////////////////////////////
1:         if (result.length() > maxFileLength) {
0:             result = result.substring(result.length()-maxFileLength,result.length());
1:         return result;
0:     
/////////////////////////////////////////////////////////////////////////
0:         MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();  
0:         MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();             
commit:f472000
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MAX_FILE_NAME_LENGTH;
/////////////////////////////////////////////////////////////////////////
1:         String result = rc.toString();
0:         if (result.length() > MAX_FILE_NAME_LENGTH) {
0:             result = result.substring(0,MAX_FILE_NAME_LENGTH);
1:         }
/////////////////////////////////////////////////////////////////////////
0:     
1:     static {
0:         MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","200")).intValue();             
1:     }
commit:28296e6
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public static String toFileSystemSafeName(String name) {
0:         int size = name.length();
1:         StringBuffer rc = new StringBuffer(size * 2);
0:         for (int i = 0; i < size; i++) {
0:             char c = name.charAt(i);
0:             boolean valid = c >= 'a' && c <= 'z';
0:             valid = valid || (c >= 'A' && c <= 'Z');
0:             valid = valid || (c >= '0' && c <= '9');
0:             valid = valid || (c == '_') || (c == '-') || (c == '.')
0:                     || (c == '/') || (c == '\\');
0: 
1:             if (valid) {
0:                 rc.append(c);
1:             } else {
0:                 // Encode the character using hex notation
0:                 rc.append('#');
0:                 rc.append(HexSupport.toHexFromInt(c, true));
1:             }
1:         }
0:         return rc.toString();
0: 
1:     public static boolean deleteFile(File fileToDelete) {
1:         if (fileToDelete == null || !fileToDelete.exists()) {
1:             return true;
1:         }
1:         boolean result = deleteChildren(fileToDelete);
1:         result &= fileToDelete.delete();
1:         return result;
1:     }
0:     
1:     public static boolean deleteChildren(File parent) {
1:         if (parent == null || !parent.exists()) {
1:             return false;
1:         }
1:         boolean result = true;
1:         if (parent.isDirectory()) {
1:             File[] files = parent.listFiles();
1:             if (files == null) {
1:                 result = false;
1:             } else {
1:                 for (int i = 0; i < files.length; i++) {
1:                     File file = files[i];
0:                     if (file.getName().equals(".")
0:                             || file.getName().equals("..")) {
1:                         continue;
1:                     }
1:                     if (file.isDirectory()) {
1:                         result &= deleteFile(file);
1:                     } else {
1:                         result &= file.delete();
1:                     }
1:                 }
1:             }
1:         }
0:        
1:         return result;
1:     }
0:     
0:     
1:     public static void moveFile(File src, File targetDirectory) throws IOException {
1:         if (!src.renameTo(new File(targetDirectory, src.getName()))) {
0:             throw new IOException("Failed to move " + src + " to " + targetDirectory);
1:         }
1:     }
0: 
0:    
author:James Strachan
-------------------------------------------------------------------------------
commit:9583b5f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
0: 
1: /**
0:  * @version $Revision$
1:  */
0: public class IOHelper {
0: 
1:     public static String getDefaultDataDirectory() {
1:         return getDefaultDirectoryPrefix() + "activemq-data";
1:     }
0: 
1:     public static String getDefaultStoreDirectory() {
1:         return getDefaultDirectoryPrefix() + "amqstore";
1:     }
0: 
1:     /**
0:      * Allows a system property to be used to overload the default data directory
0:      * which can be useful for forcing the test cases to use a target/ prefix
1:      */
1:     public static String getDefaultDirectoryPrefix() {
1:         try {
1:             return System.getProperty("org.apache.activemq.default.directory.prefix", "");
1:         }
0:         catch (Exception e) {
1:             return "";
1:         }
1:     }
1: }
============================================================================