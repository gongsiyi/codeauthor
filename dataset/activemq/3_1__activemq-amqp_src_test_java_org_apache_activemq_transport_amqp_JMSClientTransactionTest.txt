1:32f21ff: /**
1:32f21ff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:32f21ff:  * contributor license agreements.  See the NOTICE file distributed with
1:32f21ff:  * this work for additional information regarding copyright ownership.
1:32f21ff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:32f21ff:  * (the "License"); you may not use this file except in compliance with
1:32f21ff:  * the License.  You may obtain a copy of the License at
1:32f21ff:  *
1:32f21ff:  *      http://www.apache.org/licenses/LICENSE-2.0
1:32f21ff:  *
1:32f21ff:  * Unless required by applicable law or agreed to in writing, software
1:32f21ff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:32f21ff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:32f21ff:  * See the License for the specific language governing permissions and
1:32f21ff:  * limitations under the License.
1:32f21ff:  */
1:32f21ff: package org.apache.activemq.transport.amqp;
1:32f21ff: 
1:32f21ff: import static org.junit.Assert.assertEquals;
1:5e7b70f: import static org.junit.Assert.assertNotNull;
1:5e7b70f: import static org.junit.Assert.assertTrue;
1:32f21ff: 
1:8448cf1: import java.util.concurrent.atomic.AtomicInteger;
1:8448cf1: 
1:94ca703: import javax.jms.Connection;
1:32f21ff: import javax.jms.DeliveryMode;
1:32f21ff: import javax.jms.Destination;
1:8448cf1: import javax.jms.JMSException;
1:8448cf1: import javax.jms.Message;
1:32f21ff: import javax.jms.MessageConsumer;
1:8448cf1: import javax.jms.MessageListener;
1:32f21ff: import javax.jms.MessageProducer;
1:5e7b70f: import javax.jms.Queue;
1:32f21ff: import javax.jms.Session;
1:32f21ff: import javax.jms.TextMessage;
1:32f21ff: 
1:32f21ff: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:5e7b70f: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1:8448cf1: import org.apache.activemq.util.Wait;
1:32f21ff: import org.junit.Test;
1:32f21ff: import org.slf4j.Logger;
1:32f21ff: import org.slf4j.LoggerFactory;
1:32f21ff: 
1:32f21ff: /**
1:32f21ff:  * Tests for transaction behaviors using the JMS client.
1:32f21ff:  */
1:32f21ff: public class JMSClientTransactionTest extends JMSClientTestSupport {
1:32f21ff: 
1:32f21ff:     protected static final Logger LOG = LoggerFactory.getLogger(JMSClientTransactionTest.class);
1:32f21ff: 
1:32f21ff:     private final int MSG_COUNT = 1000;
1:32f21ff: 
1:32f21ff:     @Test(timeout = 60000)
1:ed26683:     public void testProduceOneConsumeOneInTx() throws Exception {
1:ed26683:         connection = createConnection();
1:ed26683:         connection.start();
1:ed26683: 
1:ed26683:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:ed26683:         Destination queue = session.createQueue(getTestName());
1:ed26683:         MessageProducer messageProducer = session.createProducer(queue);
1:ed26683: 
1:ed26683:         messageProducer.send(session.createMessage());
1:ed26683:         session.rollback();
1:ed26683: 
1:ed26683:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:ed26683:         assertEquals(0, queueView.getQueueSize());
1:ed26683: 
1:ed26683:         messageProducer.send(session.createMessage());
1:ed26683:         session.commit();
1:ed26683: 
1:ed26683:         assertEquals(1, queueView.getQueueSize());
1:ed26683: 
1:ed26683:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:ed26683:         assertNotNull(messageConsumer.receive(5000));
1:ed26683:         session.rollback();
1:ed26683: 
1:ed26683:         assertEquals(1, queueView.getQueueSize());
1:ed26683: 
1:ed26683:         assertNotNull(messageConsumer.receive(5000));
1:ed26683:         session.commit();
1:ed26683: 
1:ed26683:         assertEquals(0, queueView.getQueueSize());
1:ed26683:     }
1:ed26683: 
1:ed26683:     @Test(timeout = 60000)
1:32f21ff:     public void testSingleConsumedMessagePerTxCase() throws Exception {
1:32f21ff:         connection = createConnection();
1:32f21ff:         connection.start();
1:32f21ff: 
1:32f21ff:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:32f21ff:         Destination queue = session.createQueue(getTestName());
1:32f21ff:         MessageProducer messageProducer = session.createProducer(queue);
1:32f21ff:         for (int i = 0; i < MSG_COUNT; i++) {
1:32f21ff:             TextMessage message = session.createTextMessage();
1:32f21ff:             message.setText("test" + i);
1:32f21ff:             messageProducer.send(message, DeliveryMode.PERSISTENT, javax.jms.Message.DEFAULT_PRIORITY, javax.jms.Message.DEFAULT_TIME_TO_LIVE);
1:32f21ff:         }
1:32f21ff: 
1:32f21ff:         session.close();
1:5e7b70f: 
1:32f21ff:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:32f21ff:         assertEquals(1000, queueView.getQueueSize());
1:32f21ff: 
1:32f21ff:         int counter = 0;
1:32f21ff:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:32f21ff:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:32f21ff:         do {
1:32f21ff:             TextMessage message = (TextMessage) messageConsumer.receive(1000);
1:32f21ff:             if (message != null) {
1:32f21ff:                 counter++;
1:94ca703:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter, message.getText());
1:32f21ff:                 session.commit();
1:32f21ff:                 LOG.info("Transaction has been committed.");
1:32f21ff:             }
1:32f21ff:         } while (counter < MSG_COUNT);
1:32f21ff: 
1:32f21ff:         assertEquals(0, queueView.getQueueSize());
1:32f21ff: 
1:32f21ff:         session.close();
1:32f21ff:     }
1:32f21ff: 
1:5e7b70f:     @Test(timeout = 60000)
1:32f21ff:     public void testConsumeAllMessagesInSingleTxCase() throws Exception {
1:32f21ff:         connection = createConnection();
1:32f21ff:         connection.start();
1:32f21ff: 
1:32f21ff:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:32f21ff:         Destination queue = session.createQueue(getTestName());
1:32f21ff:         MessageProducer messageProducer = session.createProducer(queue);
1:32f21ff:         for (int i = 0; i < MSG_COUNT; i++) {
1:32f21ff:             TextMessage message = session.createTextMessage();
1:32f21ff:             message.setText("test" + i);
1:32f21ff:             messageProducer.send(message, DeliveryMode.PERSISTENT, javax.jms.Message.DEFAULT_PRIORITY, javax.jms.Message.DEFAULT_TIME_TO_LIVE);
1:32f21ff:         }
1:32f21ff: 
1:32f21ff:         session.close();
1:32f21ff: 
1:32f21ff:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:32f21ff:         assertEquals(1000, queueView.getQueueSize());
1:32f21ff: 
1:32f21ff:         int counter = 0;
1:32f21ff:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:32f21ff:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:32f21ff:         do {
1:32f21ff:             TextMessage message = (TextMessage) messageConsumer.receive(1000);
1:32f21ff:             if (message != null) {
1:32f21ff:                 counter++;
1:94ca703:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter, message.getText());
1:32f21ff:             }
1:32f21ff:         } while (counter < MSG_COUNT);
1:32f21ff: 
1:32f21ff:         LOG.info("Transaction has been committed.");
1:32f21ff:         session.commit();
1:32f21ff: 
1:32f21ff:         assertEquals(0, queueView.getQueueSize());
1:32f21ff: 
1:32f21ff:         session.close();
1:32f21ff:     }
1:32f21ff: 
1:32f21ff:     @Test(timeout = 60000)
1:5e7b70f:     public void testQueueTXRollbackAndCommit() throws Exception {
1:5e7b70f:         final int MSG_COUNT = 3;
1:5e7b70f: 
1:5e7b70f:         connection = createConnection();
1:5e7b70f:         connection.start();
1:5e7b70f: 
1:5e7b70f:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:5e7b70f:         Queue destination = session.createQueue(getDestinationName());
1:5e7b70f: 
1:5e7b70f:         MessageProducer producer = session.createProducer(destination);
1:5e7b70f:         MessageConsumer consumer = session.createConsumer(destination);
1:5e7b70f: 
1:5e7b70f:         for (int i = 1; i <= MSG_COUNT; i++) {
1:5e7b70f:             LOG.info("Sending message: {} to rollback", i);
1:5e7b70f:             TextMessage message = session.createTextMessage("Rolled back Message: " + i);
1:5e7b70f:             message.setIntProperty("MessageSequence", i);
1:5e7b70f:             producer.send(message);
1:5e7b70f:         }
1:5e7b70f: 
1:5e7b70f:         session.rollback();
1:5e7b70f: 
1:5e7b70f:         assertEquals(0, getProxyToQueue(getDestinationName()).getQueueSize());
1:5e7b70f: 
1:5e7b70f:         for (int i = 1; i <= MSG_COUNT; i++) {
1:5e7b70f:             LOG.info("Sending message: {} to commit", i);
1:5e7b70f:             TextMessage message = session.createTextMessage("Commit Message: " + i);
1:5e7b70f:             message.setIntProperty("MessageSequence", i);
1:5e7b70f:             producer.send(message);
1:5e7b70f:         }
1:5e7b70f: 
1:5e7b70f:         session.commit();
1:5e7b70f: 
1:5e7b70f:         assertEquals(MSG_COUNT, getProxyToQueue(getDestinationName()).getQueueSize());
1:5e7b70f:         SubscriptionViewMBean subscription = getProxyToQueueSubscriber(getDestinationName());
1:5e7b70f:         assertNotNull(subscription);
1:8448cf1: 
1:5e7b70f:         for (int i = 1; i <= MSG_COUNT; i++) {
1:5e7b70f:             LOG.info("Trying to receive message: {}", i);
1:5e7b70f:             TextMessage message = (TextMessage) consumer.receive(1000);
1:8448cf1:             assertNotNull("Message " + i + " should be available", message);
1:94ca703:             assertEquals("Should get message: " + i, i, message.getIntProperty("MessageSequence"));
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         session.commit();
1:5e7b70f:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:8448cf1:     public void testQueueTXRollbackAndCommitAsyncConsumer() throws Exception {
1:8448cf1:         final int MSG_COUNT = 3;
1:8448cf1: 
1:8448cf1:         final AtomicInteger counter = new AtomicInteger();
1:8448cf1: 
1:8448cf1:         connection = createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8448cf1:         Queue destination = session.createQueue(getDestinationName());
1:8448cf1: 
1:8448cf1:         MessageProducer producer = session.createProducer(destination);
1:8448cf1:         MessageConsumer consumer = session.createConsumer(destination);
1:8448cf1: 
1:8448cf1:         consumer.setMessageListener(new MessageListener() {
1:8448cf1: 
1:8448cf1:             @Override
1:8448cf1:             public void onMessage(Message message) {
1:8448cf1:                 try {
1:8448cf1:                     LOG.info("Received Message {}", message.getJMSMessageID());
1:8448cf1:                 } catch (JMSException e) {
1:8448cf1:                 }
1:8448cf1:                 counter.incrementAndGet();
1:8448cf1:             }
1:8448cf1:         });
1:8448cf1: 
1:8448cf1:         int msgIndex = 0;
1:8448cf1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:8448cf1:             LOG.info("Sending message: {} to rollback", msgIndex++);
1:8448cf1:             TextMessage message = session.createTextMessage("Rolled back Message: " + msgIndex);
1:8448cf1:             message.setIntProperty("MessageSequence", msgIndex);
1:8448cf1:             producer.send(message);
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         LOG.info("ROLLBACK of sent message here:");
1:8448cf1:         session.rollback();
1:8448cf1: 
1:8448cf1:         assertEquals(0, getProxyToQueue(getDestinationName()).getQueueSize());
1:8448cf1: 
1:8448cf1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:8448cf1:             LOG.info("Sending message: {} to commit", msgIndex++);
1:8448cf1:             TextMessage message = session.createTextMessage("Commit Message: " + msgIndex);
1:8448cf1:             message.setIntProperty("MessageSequence", msgIndex);
1:8448cf1:             producer.send(message);
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         LOG.info("COMMIT of sent message here:");
1:8448cf1:         session.commit();
1:8448cf1: 
1:8448cf1:         assertEquals(MSG_COUNT, getProxyToQueue(getDestinationName()).getQueueSize());
1:8448cf1:         SubscriptionViewMBean subscription = getProxyToQueueSubscriber(getDestinationName());
1:8448cf1:         assertNotNull(subscription);
1:8448cf1: 
1:8448cf1:         assertTrue("Should read all " + MSG_COUNT + " messages.", Wait.waitFor(new Wait.Condition() {
1:8448cf1: 
1:8448cf1:             @Override
1:8448cf1:             public boolean isSatisified() throws Exception {
1:8448cf1:                 return counter.get() == MSG_COUNT;
1:8448cf1:             }
1:8448cf1:         }));
1:94ca703: 
1:8448cf1:         LOG.info("COMMIT of first received batch here:");
1:8448cf1:         session.commit();
1:94ca703: 
1:8448cf1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:8448cf1:             LOG.info("Sending message: {} to commit", msgIndex++);
1:8448cf1:             TextMessage message = session.createTextMessage("Commit Message: " + msgIndex);
1:8448cf1:             message.setIntProperty("MessageSequence", msgIndex);
1:8448cf1:             producer.send(message);
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         LOG.info("COMMIT of next sent message batch here:");
1:8448cf1:         session.commit();
1:8448cf1: 
1:8448cf1:         LOG.info("WAITING -> for next three messages to arrive:");
1:8448cf1: 
1:8448cf1:         assertTrue("Should read all " + MSG_COUNT + " messages.", Wait.waitFor(new Wait.Condition() {
1:8448cf1: 
1:8448cf1:             @Override
1:8448cf1:             public boolean isSatisified() throws Exception {
1:8448cf1:                 LOG.info("Read {} messages so far", counter.get());
1:8448cf1:                 return counter.get() == MSG_COUNT * 2;
1:8448cf1:             }
1:8448cf1:         }));
1:5e7b70f:     }
1:8448cf1: 
1:94ca703:     @Test
1:94ca703:     public void testMessageOrderAfterRollback() throws Exception {
1:94ca703:         sendMessages(5);
1:94ca703: 
1:94ca703:         int counter = 0;
1:94ca703:         while (counter++ < 10) {
1:94ca703:             connection = createConnection();
1:94ca703:             connection.start();
1:94ca703: 
1:94ca703:             Session session = connection.createSession(true, -1);
1:94ca703:             Queue queue = session.createQueue(getDestinationName());
1:94ca703:             MessageConsumer consumer = session.createConsumer(queue);
1:94ca703: 
1:94ca703:             Message message = consumer.receive(5000);
1:94ca703:             assertNotNull(message);
1:94ca703:             assertTrue(message instanceof TextMessage);
1:94ca703: 
1:94ca703:             int sequenceID = message.getIntProperty("sequenceID");
1:94ca703:             assertEquals(0, sequenceID);
1:94ca703: 
1:94ca703:             LOG.info("Read message = {}", ((TextMessage) message).getText());
1:94ca703:             session.rollback();
1:94ca703:             session.close();
1:94ca703:             connection.close();
1:94ca703:         }
1:94ca703:     }
1:94ca703: 
1:94ca703:     public void sendMessages(int messageCount) throws JMSException {
1:94ca703:         Connection connection = null;
1:94ca703:         try {
1:94ca703:             connection = createConnection();
1:94ca703:             connection.start();
1:94ca703: 
1:94ca703:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:94ca703:             Queue queue = session.createQueue(getDestinationName());
1:5e7b70f: 
1:94ca703:             for (int i = 0; i < messageCount; ++i) {
1:94ca703:                 MessageProducer messageProducer = session.createProducer(queue);
1:94ca703:                 TextMessage message = session.createTextMessage("(" + i + ")");
1:94ca703:                 message.setIntProperty("sequenceID", i);
1:94ca703:                 messageProducer.send(message);
1:94ca703:                 LOG.info("Sent message = {}", message.getText());
1:94ca703:             }
1:94ca703: 
1:94ca703:         } catch (Exception exp) {
1:94ca703:             exp.printStackTrace(System.out);
1:94ca703:         } finally {
1:94ca703:             if (connection != null) {
1:94ca703:                 connection.close();
1:94ca703:             }
1:94ca703:         }
1:94ca703:     }
1:32f21ff: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ffee8b4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:94ca703
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter, message.getText());
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter, message.getText());
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Should get message: " + i, i, message.getIntProperty("MessageSequence"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testMessageOrderAfterRollback() throws Exception {
1:         sendMessages(5);
1: 
1:         int counter = 0;
1:         while (counter++ < 10) {
1:             connection = createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(true, -1);
1:             Queue queue = session.createQueue(getDestinationName());
1:             MessageConsumer consumer = session.createConsumer(queue);
1: 
1:             Message message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertTrue(message instanceof TextMessage);
1: 
1:             int sequenceID = message.getIntProperty("sequenceID");
1:             assertEquals(0, sequenceID);
1: 
1:             LOG.info("Read message = {}", ((TextMessage) message).getText());
1:             session.rollback();
1:             session.close();
1:             connection.close();
1:         }
1:     }
1: 
1:     public void sendMessages(int messageCount) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue queue = session.createQueue(getDestinationName());
1: 
1:             for (int i = 0; i < messageCount; ++i) {
1:                 MessageProducer messageProducer = session.createProducer(queue);
1:                 TextMessage message = session.createTextMessage("(" + i + ")");
1:                 message.setIntProperty("sequenceID", i);
1:                 messageProducer.send(message);
1:                 LOG.info("Sent message = {}", message.getText());
1:             }
1: 
1:         } catch (Exception exp) {
1:             exp.printStackTrace(System.out);
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Subscription[{}]: prefetch size after rollback = {}", subscription.getSubscriptionId(), subscription.getPrefetchSize());
1:             assertNotNull("Message " + i + " should be available", message);
1: 
1:         session.commit();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testQueueTXRollbackAndCommitAsyncConsumer() throws Exception {
1:         final int MSG_COUNT = 3;
1: 
1:         final AtomicInteger counter = new AtomicInteger();
1: 
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Queue destination = session.createQueue(getDestinationName());
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.info("Received Message {}", message.getJMSMessageID());
1:                 } catch (JMSException e) {
1:                 }
1:                 counter.incrementAndGet();
1:             }
1:         });
1: 
1:         int msgIndex = 0;
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Sending message: {} to rollback", msgIndex++);
1:             TextMessage message = session.createTextMessage("Rolled back Message: " + msgIndex);
1:             message.setIntProperty("MessageSequence", msgIndex);
1:             producer.send(message);
1:         }
1: 
1:         LOG.info("ROLLBACK of sent message here:");
1:         session.rollback();
1: 
1:         assertEquals(0, getProxyToQueue(getDestinationName()).getQueueSize());
1: 
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Sending message: {} to commit", msgIndex++);
1:             TextMessage message = session.createTextMessage("Commit Message: " + msgIndex);
1:             message.setIntProperty("MessageSequence", msgIndex);
1:             producer.send(message);
1:         }
1: 
1:         LOG.info("COMMIT of sent message here:");
1:         session.commit();
1: 
1:         assertEquals(MSG_COUNT, getProxyToQueue(getDestinationName()).getQueueSize());
1:         SubscriptionViewMBean subscription = getProxyToQueueSubscriber(getDestinationName());
1:         assertNotNull(subscription);
0:         LOG.info("Subscription[{}]: prefetch size after rollback = {}", subscription.getSubscriptionId(), subscription.getPrefetchSize());
0:         assertTrue(subscription.getPrefetchSize() > 0);
1: 
1:         assertTrue("Should read all " + MSG_COUNT + " messages.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return counter.get() == MSG_COUNT;
1:             }
1:         }));
1: 
1:         LOG.info("COMMIT of first received batch here:");
1:         session.commit();
1: 
0:         assertTrue(subscription.getPrefetchSize() > 0);
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Sending message: {} to commit", msgIndex++);
1:             TextMessage message = session.createTextMessage("Commit Message: " + msgIndex);
1:             message.setIntProperty("MessageSequence", msgIndex);
1:             producer.send(message);
1:         }
1: 
1:         LOG.info("COMMIT of next sent message batch here:");
1:         session.commit();
1: 
1:         LOG.info("WAITING -> for next three messages to arrive:");
1: 
0:         assertTrue(subscription.getPrefetchSize() > 0);
1:         assertTrue("Should read all " + MSG_COUNT + " messages.", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Read {} messages so far", counter.get());
1:                 return counter.get() == MSG_COUNT * 2;
1:             }
1:         }));
commit:ed26683
/////////////////////////////////////////////////////////////////////////
1:     public void testProduceOneConsumeOneInTx() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Destination queue = session.createQueue(getTestName());
1:         MessageProducer messageProducer = session.createProducer(queue);
1: 
1:         messageProducer.send(session.createMessage());
1:         session.rollback();
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertEquals(0, queueView.getQueueSize());
1: 
1:         messageProducer.send(session.createMessage());
1:         session.commit();
1: 
1:         assertEquals(1, queueView.getQueueSize());
1: 
1:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:         assertNotNull(messageConsumer.receive(5000));
1:         session.rollback();
1: 
1:         assertEquals(1, queueView.getQueueSize());
1: 
1:         assertNotNull(messageConsumer.receive(5000));
1:         session.commit();
1: 
1:         assertEquals(0, queueView.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
commit:5e7b70f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import javax.jms.Queue;
1: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testQueueTXRollbackAndCommit() throws Exception {
1:         final int MSG_COUNT = 3;
1: 
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         Queue destination = session.createQueue(getDestinationName());
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Sending message: {} to rollback", i);
1:             TextMessage message = session.createTextMessage("Rolled back Message: " + i);
1:             message.setIntProperty("MessageSequence", i);
1:             producer.send(message);
1:         }
1: 
1:         session.rollback();
1: 
1:         assertEquals(0, getProxyToQueue(getDestinationName()).getQueueSize());
1: 
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Sending message: {} to commit", i);
1:             TextMessage message = session.createTextMessage("Commit Message: " + i);
1:             message.setIntProperty("MessageSequence", i);
1:             producer.send(message);
1:         }
1: 
1:         session.commit();
1: 
1:         assertEquals(MSG_COUNT, getProxyToQueue(getDestinationName()).getQueueSize());
1:         SubscriptionViewMBean subscription = getProxyToQueueSubscriber(getDestinationName());
1:         assertNotNull(subscription);
0:         assertTrue(subscription.getPrefetchSize() > 0);
1: 
1:         for (int i = 1; i <= MSG_COUNT; i++) {
1:             LOG.info("Trying to receive message: {}", i);
1:             TextMessage message = (TextMessage) consumer.receive(1000);
0:             assertNotNull("Message " + i + "should be available", message);
0:             assertEquals("Should get message: " + i, i , message.getIntProperty("MessageSequence"));
1:         }
1:     }
commit:32f21ff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests for transaction behaviors using the JMS client.
1:  */
1: public class JMSClientTransactionTest extends JMSClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSClientTransactionTest.class);
1: 
1:     private final int MSG_COUNT = 1000;
1: 
0:     @Ignore("Fails currently")
1:     @Test(timeout = 60000)
1:     public void testSingleConsumedMessagePerTxCase() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue(getTestName());
1:         MessageProducer messageProducer = session.createProducer(queue);
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             TextMessage message = session.createTextMessage();
1:             message.setText("test" + i);
1:             messageProducer.send(message, DeliveryMode.PERSISTENT, javax.jms.Message.DEFAULT_PRIORITY, javax.jms.Message.DEFAULT_TIME_TO_LIVE);
1:         }
1: 
1:         session.close();
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertEquals(1000, queueView.getQueueSize());
1: 
1:         int counter = 0;
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:         do {
1:             TextMessage message = (TextMessage) messageConsumer.receive(1000);
1:             if (message != null) {
1:                 counter++;
0:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter,message.getText());
1:                 session.commit();
1:                 LOG.info("Transaction has been committed.");
1:             }
1:         } while (counter < MSG_COUNT);
1: 
1:         assertEquals(0, queueView.getQueueSize());
1: 
1:         session.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConsumeAllMessagesInSingleTxCase() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue(getTestName());
1:         MessageProducer messageProducer = session.createProducer(queue);
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             TextMessage message = session.createTextMessage();
1:             message.setText("test" + i);
1:             messageProducer.send(message, DeliveryMode.PERSISTENT, javax.jms.Message.DEFAULT_PRIORITY, javax.jms.Message.DEFAULT_TIME_TO_LIVE);
1:         }
1: 
1:         session.close();
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertEquals(1000, queueView.getQueueSize());
1: 
1:         int counter = 0;
1:         session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = session.createConsumer(queue);
1:         do {
1:             TextMessage message = (TextMessage) messageConsumer.receive(1000);
1:             if (message != null) {
1:                 counter++;
0:                 LOG.info("Message n. {} with content '{}' has been recieved.", counter,message.getText());
1:             }
1:         } while (counter < MSG_COUNT);
1: 
1:         LOG.info("Transaction has been committed.");
1:         session.commit();
1: 
1:         assertEquals(0, queueView.getQueueSize());
1: 
1:         session.close();
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:fa81c1f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================