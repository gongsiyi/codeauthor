1:8340dec: /**
1:8340dec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8340dec:  * contributor license agreements.  See the NOTICE file distributed with
1:8340dec:  * this work for additional information regarding copyright ownership.
1:8340dec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8340dec:  * (the "License"); you may not use this file except in compliance with
1:8340dec:  * the License.  You may obtain a copy of the License at
1:8340dec:  *
1:8340dec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8340dec:  *
1:8340dec:  * Unless required by applicable law or agreed to in writing, software
1:8340dec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8340dec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8340dec:  * See the License for the specific language governing permissions and
1:8340dec:  * limitations under the License.
1:8340dec:  */
1:8340dec: package org.apache.activemq.broker.util;
1:8340dec: 
1:8340dec: import javax.jms.Connection;
1:8340dec: import javax.jms.DeliveryMode;
1:8340dec: import javax.jms.Destination;
1:8340dec: import javax.jms.Message;
1:8340dec: import javax.jms.MessageConsumer;
1:8340dec: import javax.jms.MessageProducer;
1:8340dec: import javax.jms.Session;
1:8340dec: import junit.framework.TestCase;
1:8340dec: import org.apache.activemq.ActiveMQConnectionFactory;
1:8340dec: import org.apache.activemq.broker.BrokerPlugin;
1:8340dec: import org.apache.activemq.broker.BrokerService;
1:8340dec: import org.apache.activemq.broker.TransportConnector;
1:8340dec: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:8340dec: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:8340dec: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:8340dec: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8340dec: import org.junit.After;
1:8340dec: import org.junit.Before;
1:8340dec: import org.junit.Test;
1:8340dec: 
1:8340dec: public class TimeStampingBrokerPluginTest extends TestCase {
1:8340dec: 
1:8340dec: 	BrokerService broker;
1:8340dec: 	TransportConnector tcpConnector;
1:8340dec: 	MessageProducer producer;
1:8340dec: 	MessageConsumer consumer;
1:8340dec: 	Connection connection;
1:8340dec: 	Session session;
1:8340dec: 	Destination destination;
1:8340dec: 	String queue = "TEST.FOO";
1:8340dec: 	long expiry = 500;
1:8340dec: 	
1:8340dec: 	@Before
1:8340dec: 	public void setUp() throws Exception {
1:8340dec: 		TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();
1:8340dec:     	tsbp.setZeroExpirationOverride(expiry);
1:8340dec:     	tsbp.setTtlCeiling(expiry);
1:8340dec:     	
1:8340dec:         broker = new BrokerService();
1:8340dec:         broker.setPersistent(false);
1:8340dec:         broker.setUseJmx(true);
1:8340dec:         broker.setPlugins(new BrokerPlugin[] {tsbp});
1:8340dec:         tcpConnector = broker.addConnector("tcp://localhost:0");
1:8340dec:         
1:8340dec:         // Add policy and individual DLQ strategy
1:8340dec:         PolicyEntry policy = new PolicyEntry();
1:8340dec:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:8340dec:         strategy.setProcessExpired(true);
1:8340dec:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:8340dec:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:8340dec:         strategy.setProcessNonPersistent(true);
1:8340dec:         policy.setDeadLetterStrategy(strategy);
1:8340dec: 
1:8340dec:         PolicyMap pMap = new PolicyMap();
1:8340dec:         pMap.setDefaultEntry(policy);
1:8340dec: 
1:8340dec:         broker.setDestinationPolicy(pMap);
1:8340dec:         
1:8340dec:         broker.start();
1:8340dec:         // Create a ConnectionFactory
1:8340dec:         ActiveMQConnectionFactory connectionFactory =
1:8340dec:             new ActiveMQConnectionFactory(tcpConnector.getConnectUri());
1:8340dec: 
1:8340dec:         // Create a Connection
1:8340dec:         connection = connectionFactory.createConnection();
1:8340dec:         connection.start();
1:8340dec: 
1:8340dec:         // Create a Session
1:8340dec:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8340dec: 
1:8340dec:         // Create the destination Queue
1:8340dec:         destination = session.createQueue(queue);
1:8340dec: 
1:8340dec:         // Create a MessageProducer from the Session to the Topic or Queue
1:8340dec:         producer = session.createProducer(destination);
1:8340dec:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:8340dec: 	}
1:8340dec: 	
1:8340dec: 	@After
1:8340dec: 	public void tearDown() throws Exception {
1:8340dec: 	     // Clean up
1:8340dec:         producer.close();
1:8340dec:         consumer.close();
1:8340dec:         session.close();
1:8340dec:         connection.close();
1:8340dec:         broker.stop();
1:8340dec: 	}
1:8340dec: 	@Test
1:8340dec:     public void testExpirationSet() throws Exception {
1:8340dec:     	
1:8340dec:         // Create a messages
1:8340dec:         Message sentMessage = session.createMessage();
1:8340dec: 
1:8340dec:         // Tell the producer to send the message
1:8340dec:         long beforeSend = System.currentTimeMillis();
1:8340dec:         producer.send(sentMessage);
1:8340dec: 
1:8340dec:         // Create a MessageConsumer from the Session to the Topic or Queue
1:8340dec:         consumer = session.createConsumer(destination);
1:8340dec: 
1:8340dec:         // Wait for a message
1:8340dec:         Message receivedMessage = consumer.receive(1000);
1:8340dec: 
1:8340dec:         // assert we got the same message ID we sent
1:8340dec:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:8340dec:         
1:8340dec:         // assert message timestamp is in window
1:8340dec:         assertTrue("Expiration should be not null" + receivedMessage.getJMSExpiration() + "\n", Long.valueOf(receivedMessage.getJMSExpiration()) != null);
1:8340dec: 
1:8340dec:         // assert message expiration is in window
1:8340dec:         assertTrue("Before send: " + beforeSend + " Msg ts: " + receivedMessage.getJMSTimestamp() + " Msg Expiry: " + receivedMessage.getJMSExpiration(), beforeSend <= receivedMessage.getJMSExpiration() && receivedMessage.getJMSExpiration() <= (receivedMessage.getJMSTimestamp() + expiry));
1:8340dec:     }
1:8340dec:     @Test
1:8340dec:     public void testExpirationCelingSet() throws Exception {
1:8340dec:     	
1:8340dec:         // Create a messages
1:8340dec:         Message sentMessage = session.createMessage();
1:8340dec:         // Tell the producer to send the message
1:8340dec:         long beforeSend = System.currentTimeMillis();
1:8340dec:         long sendExpiry =  beforeSend + (expiry*22);
1:8340dec:         sentMessage.setJMSExpiration(sendExpiry);
1:8340dec: 
1:8340dec:         producer.send(sentMessage);
1:8340dec: 
1:8340dec:         // Create a MessageConsumer from the Session to the Topic or Queue
1:8340dec:         consumer = session.createConsumer(destination);
1:8340dec: 
1:8340dec:         // Wait for a message
1:8340dec:         Message receivedMessage = consumer.receive(1000);
1:8340dec: 
1:8340dec:         // assert we got the same message ID we sent
1:8340dec:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:8340dec:         
1:8340dec:         // assert message timestamp is in window
1:8340dec:         assertTrue("Expiration should be not null" + receivedMessage.getJMSExpiration() + "\n", Long.valueOf(receivedMessage.getJMSExpiration()) != null);
1:8340dec: 
1:8340dec:         // assert message expiration is in window
1:8340dec:         assertTrue("Sent expiry: " + sendExpiry + " Recv ts: " + receivedMessage.getJMSTimestamp() + " Recv expiry: " + receivedMessage.getJMSExpiration(), beforeSend <= receivedMessage.getJMSExpiration() && receivedMessage.getJMSExpiration() <= (receivedMessage.getJMSTimestamp() + expiry));
1:8340dec:     }
1:8340dec:     
1:8340dec:     @Test
1:8340dec:     public void testExpirationDLQ() throws Exception {
1:8340dec:     	
1:8340dec:         // Create a messages
1:8340dec:         Message sentMessage = session.createMessage();
1:8340dec:         // Tell the producer to send the message
1:8340dec:         long beforeSend = System.currentTimeMillis();
1:8340dec:         long sendExpiry =  beforeSend + expiry;
1:8340dec:         sentMessage.setJMSExpiration(sendExpiry);
1:8340dec: 
1:8340dec:         producer.send(sentMessage);
1:8340dec: 
1:8340dec:         // Create a MessageConsumer from the Session to the Topic or Queue
1:8340dec:         consumer = session.createConsumer(destination);
1:8340dec: 
1:8340dec:         Thread.sleep(expiry+250);
1:8340dec:         
1:8340dec:         // Wait for a message
1:8340dec:         Message receivedMessage = consumer.receive(1000);
1:8340dec: 
1:8340dec:         // Message should roll to DLQ
1:8340dec:         assertNull(receivedMessage);
1:8340dec:                 
1:8340dec:         // Close old consumer, setup DLQ listener
1:8340dec:         consumer.close();
1:8340dec:         consumer = session.createConsumer(session.createQueue("DLQ."+queue));
1:8340dec:         
1:8340dec:         // Get mesage from DLQ
1:8340dec:         receivedMessage = consumer.receive(1000);
1:8340dec: 
1:8340dec:         // assert we got the same message ID we sent
1:8340dec:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:8340dec:         
1:8340dec:         // assert message timestamp is in window
1:8340dec:         //System.out.println("Recv: " + receivedMessage.getJMSExpiration());
1:8340dec:         assertEquals("Expiration should be zero" + receivedMessage.getJMSExpiration() + "\n", receivedMessage.getJMSExpiration(), 0);
1:8340dec:         
1:8340dec:     }
1:8340dec: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:8340dec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class TimeStampingBrokerPluginTest extends TestCase {
1: 
1: 	BrokerService broker;
1: 	TransportConnector tcpConnector;
1: 	MessageProducer producer;
1: 	MessageConsumer consumer;
1: 	Connection connection;
1: 	Session session;
1: 	Destination destination;
1: 	String queue = "TEST.FOO";
1: 	long expiry = 500;
1: 	
1: 	@Before
1: 	public void setUp() throws Exception {
1: 		TimeStampingBrokerPlugin tsbp = new TimeStampingBrokerPlugin();
1:     	tsbp.setZeroExpirationOverride(expiry);
1:     	tsbp.setTtlCeiling(expiry);
1:     	
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setPlugins(new BrokerPlugin[] {tsbp});
1:         tcpConnector = broker.addConnector("tcp://localhost:0");
1:         
1:         // Add policy and individual DLQ strategy
1:         PolicyEntry policy = new PolicyEntry();
1:         DeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setProcessExpired(true);
1:         ((IndividualDeadLetterStrategy)strategy).setUseQueueForQueueMessages(true);
1:         ((IndividualDeadLetterStrategy)strategy).setQueuePrefix("DLQ.");
1:         strategy.setProcessNonPersistent(true);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1:         
1:         broker.start();
1:         // Create a ConnectionFactory
1:         ActiveMQConnectionFactory connectionFactory =
1:             new ActiveMQConnectionFactory(tcpConnector.getConnectUri());
1: 
1:         // Create a Connection
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         // Create a Session
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // Create the destination Queue
1:         destination = session.createQueue(queue);
1: 
1:         // Create a MessageProducer from the Session to the Topic or Queue
1:         producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 	}
1: 	
1: 	@After
1: 	public void tearDown() throws Exception {
1: 	     // Clean up
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:         broker.stop();
1: 	}
1: 	@Test
1:     public void testExpirationSet() throws Exception {
1:     	
1:         // Create a messages
1:         Message sentMessage = session.createMessage();
1: 
1:         // Tell the producer to send the message
1:         long beforeSend = System.currentTimeMillis();
1:         producer.send(sentMessage);
1: 
1:         // Create a MessageConsumer from the Session to the Topic or Queue
1:         consumer = session.createConsumer(destination);
1: 
1:         // Wait for a message
1:         Message receivedMessage = consumer.receive(1000);
1: 
1:         // assert we got the same message ID we sent
1:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:         
1:         // assert message timestamp is in window
1:         assertTrue("Expiration should be not null" + receivedMessage.getJMSExpiration() + "\n", Long.valueOf(receivedMessage.getJMSExpiration()) != null);
1: 
1:         // assert message expiration is in window
1:         assertTrue("Before send: " + beforeSend + " Msg ts: " + receivedMessage.getJMSTimestamp() + " Msg Expiry: " + receivedMessage.getJMSExpiration(), beforeSend <= receivedMessage.getJMSExpiration() && receivedMessage.getJMSExpiration() <= (receivedMessage.getJMSTimestamp() + expiry));
1:     }
1:     @Test
1:     public void testExpirationCelingSet() throws Exception {
1:     	
1:         // Create a messages
1:         Message sentMessage = session.createMessage();
1:         // Tell the producer to send the message
1:         long beforeSend = System.currentTimeMillis();
1:         long sendExpiry =  beforeSend + (expiry*22);
1:         sentMessage.setJMSExpiration(sendExpiry);
1: 
1:         producer.send(sentMessage);
1: 
1:         // Create a MessageConsumer from the Session to the Topic or Queue
1:         consumer = session.createConsumer(destination);
1: 
1:         // Wait for a message
1:         Message receivedMessage = consumer.receive(1000);
1: 
1:         // assert we got the same message ID we sent
1:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:         
1:         // assert message timestamp is in window
1:         assertTrue("Expiration should be not null" + receivedMessage.getJMSExpiration() + "\n", Long.valueOf(receivedMessage.getJMSExpiration()) != null);
1: 
1:         // assert message expiration is in window
1:         assertTrue("Sent expiry: " + sendExpiry + " Recv ts: " + receivedMessage.getJMSTimestamp() + " Recv expiry: " + receivedMessage.getJMSExpiration(), beforeSend <= receivedMessage.getJMSExpiration() && receivedMessage.getJMSExpiration() <= (receivedMessage.getJMSTimestamp() + expiry));
1:     }
1:     
1:     @Test
1:     public void testExpirationDLQ() throws Exception {
1:     	
1:         // Create a messages
1:         Message sentMessage = session.createMessage();
1:         // Tell the producer to send the message
1:         long beforeSend = System.currentTimeMillis();
1:         long sendExpiry =  beforeSend + expiry;
1:         sentMessage.setJMSExpiration(sendExpiry);
1: 
1:         producer.send(sentMessage);
1: 
1:         // Create a MessageConsumer from the Session to the Topic or Queue
1:         consumer = session.createConsumer(destination);
1: 
1:         Thread.sleep(expiry+250);
1:         
1:         // Wait for a message
1:         Message receivedMessage = consumer.receive(1000);
1: 
1:         // Message should roll to DLQ
1:         assertNull(receivedMessage);
1:                 
1:         // Close old consumer, setup DLQ listener
1:         consumer.close();
1:         consumer = session.createConsumer(session.createQueue("DLQ."+queue));
1:         
1:         // Get mesage from DLQ
1:         receivedMessage = consumer.receive(1000);
1: 
1:         // assert we got the same message ID we sent
1:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:         
1:         // assert message timestamp is in window
1:         //System.out.println("Recv: " + receivedMessage.getJMSExpiration());
1:         assertEquals("Expiration should be zero" + receivedMessage.getJMSExpiration() + "\n", receivedMessage.getJMSExpiration(), 0);
1:         
1:     }
1: }
============================================================================