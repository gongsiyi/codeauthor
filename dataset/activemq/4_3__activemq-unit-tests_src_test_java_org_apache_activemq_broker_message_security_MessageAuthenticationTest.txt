1:a28ccae: /**
1:a28ccae:  *
1:a28ccae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a28ccae:  * contributor license agreements.  See the NOTICE file distributed with
1:a28ccae:  * this work for additional information regarding copyright ownership.
1:a28ccae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a28ccae:  * (the "License"); you may not use this file except in compliance with
1:a28ccae:  * the License.  You may obtain a copy of the License at
1:a28ccae:  *
1:a28ccae:  * http://www.apache.org/licenses/LICENSE-2.0
1:a28ccae:  *
1:a28ccae:  * Unless required by applicable law or agreed to in writing, software
1:a28ccae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a28ccae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a28ccae:  * See the License for the specific language governing permissions and
1:a28ccae:  * limitations under the License.
1:a28ccae:  */
1:a28ccae: package org.apache.activemq.broker.message.security;
1:a28ccae: 
1:a28ccae: import java.io.IOException;
1:a28ccae: 
1:702e2a0: import javax.jms.Connection;
1:702e2a0: import javax.jms.Session;
1:702e2a0: import javax.jms.Destination;
1:702e2a0: import javax.jms.MessageConsumer;
1:702e2a0: import javax.jms.MessageProducer;
1:702e2a0: import javax.jms.TextMessage;
1:702e2a0: import javax.jms.JMSException;
1:702e2a0: 
1:a28ccae: import org.apache.activemq.broker.BrokerService;
1:a28ccae: import org.apache.activemq.broker.ConnectionContext;
1:a28ccae: import org.apache.activemq.command.Message;
1:702e2a0: import org.apache.activemq.command.ActiveMQQueue;
1:a28ccae: import org.apache.activemq.security.MessageAuthorizationPolicy;
1:702e2a0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:702e2a0: import org.apache.activemq.spring.ConsumerBean;
1:a28ccae: 
1:a28ccae: /**
1:b0c2a40:  * 
1:a28ccae:  */
1:702e2a0: public class MessageAuthenticationTest extends EmbeddedBrokerTestSupport {
1:702e2a0: 
1:702e2a0:     private Connection connection;
1:702e2a0: 
1:a28ccae:     public void testSendInvalidMessage() throws Exception {
1:702e2a0:         if (connection == null) {
1:702e2a0:             connection = createConnection();
1:702e2a0:         }
1:702e2a0:         connection.start();
1:a28ccae: 
1:702e2a0:         ConsumerBean messageList = new ConsumerBean();
1:702e2a0:         messageList.setVerbose(true);
1:a28ccae: 
1:702e2a0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:702e2a0: 
1:702e2a0:         Destination destination = new ActiveMQQueue("MyQueue");
1:702e2a0: 
1:702e2a0:         MessageConsumer c1 = session.createConsumer(destination);
1:702e2a0: 
1:702e2a0:         c1.setMessageListener(messageList);
1:702e2a0: 
1:702e2a0:         MessageProducer producer = session.createProducer(destination);
1:702e2a0:         assertNotNull(producer);
1:702e2a0: 
1:702e2a0:         producer.send(createMessage(session, "invalidBody", "myHeader", "xyz"));
1:702e2a0:         producer.send(createMessage(session, "validBody", "myHeader", "abc"));
1:702e2a0: 
1:702e2a0:         messageList.assertMessagesArrived(1);
1:702e2a0:         assertEquals("validBody", ((TextMessage) messageList.flushMessages().get(0)).getText());
1:702e2a0:     }
1:702e2a0: 
1:702e2a0:     private javax.jms.Message createMessage(Session session, String body, String header, String value) throws JMSException {
1:702e2a0:         TextMessage msg = session.createTextMessage(body);
1:702e2a0:         msg.setStringProperty(header, value);
1:702e2a0:         return msg;
3:a28ccae:     }
1:a28ccae: 
2:a28ccae:     @Override
1:a28ccae:     protected BrokerService createBroker() throws Exception {
1:a28ccae:         BrokerService answer = new BrokerService();
1:a28ccae:         answer.setPersistent(false);
1:a28ccae:         answer.setMessageAuthorizationPolicy(new MessageAuthorizationPolicy() {
1:a28ccae:             public boolean isAllowedToConsume(ConnectionContext context, Message message) {
1:a28ccae:                 try {
1:a28ccae:                     Object value = message.getProperty("myHeader");
1:a28ccae:                     return "abc".equals(value);
1:a28ccae:                 }
1:a28ccae:                 catch (IOException e) {
1:a28ccae:                     System.out.println("Caught: " + e);
1:a28ccae:                     e.printStackTrace();
1:a28ccae:                     return false;
1:a28ccae:                 }
1:a28ccae:             }
2:a28ccae:         });
1:a28ccae:         answer.addConnector(bindAddress);
1:a28ccae:         return answer;
1:a28ccae:     }
1:a28ccae: 
1:a28ccae: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.spring.ConsumerBean;
1: public class MessageAuthenticationTest extends EmbeddedBrokerTestSupport {
1: 
1:     private Connection connection;
1: 
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination destination = new ActiveMQQueue("MyQueue");
1: 
1:         MessageConsumer c1 = session.createConsumer(destination);
1: 
1:         c1.setMessageListener(messageList);
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         assertNotNull(producer);
1: 
1:         producer.send(createMessage(session, "invalidBody", "myHeader", "xyz"));
1:         producer.send(createMessage(session, "validBody", "myHeader", "abc"));
1: 
1:         messageList.assertMessagesArrived(1);
1:         assertEquals("validBody", ((TextMessage) messageList.flushMessages().get(0)).getText());
1:     }
1: 
1:     private javax.jms.Message createMessage(Session session, String body, String header, String value) throws JMSException {
1:         TextMessage msg = session.createTextMessage(body);
1:         msg.setStringProperty(header, value);
1:         return msg;
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:a28ccae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.message.security;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.camel.CamelEmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.security.MessageAuthorizationPolicy;
0: import org.apache.camel.component.mock.MockEndpoint;
0: import org.apache.camel.CamelContext;
0: import org.apache.camel.builder.RouteBuilder;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
0: public class MessageAuthenticationTest extends CamelEmbeddedBrokerTestSupport {
1:     public void testSendInvalidMessage() throws Exception {
0:         MockEndpoint results = getMockEndpoint("mock:results");
0:         results.expectedBodiesReceived("validBody");
1: 
0:         template.sendBodyAndHeader("activemq:MyQueue", "invalidBody", "myHeader", "xyz");
0:         template.sendBodyAndHeader("activemq:MyQueue", "validBody", "myHeader", "abc");
1: 
0:         assertMockEndpointsSatisifed();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setMessageAuthorizationPolicy(new MessageAuthorizationPolicy() {
1:             public boolean isAllowedToConsume(ConnectionContext context, Message message) {
1:                 try {
1:                     Object value = message.getProperty("myHeader");
1:                     return "abc".equals(value);
1:                 }
1:                 catch (IOException e) {
1:                     System.out.println("Caught: " + e);
1:                     e.printStackTrace();
1:                     return false;
1:                 }
1:             }
1:         });
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     @Override
0:     protected void addCamelRoutes(CamelContext camelContext) throws Exception {
0:         camelContext.addRoutes(new RouteBuilder() {
0:             public void configure() throws Exception {
0:                 from("activemq:MyQueue").to("mock:results");
1:             }
1:         });
1:     }
1: }
============================================================================