1:5f96839: /**
1:5f96839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f96839:  * contributor license agreements.  See the NOTICE file distributed with
1:5f96839:  * this work for additional information regarding copyright ownership.
1:5f96839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f96839:  * (the "License"); you may not use this file except in compliance with
1:5f96839:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:5f96839:  *      http://www.apache.org/licenses/LICENSE-2.0
2:5f96839:  *
1:5f96839:  * Unless required by applicable law or agreed to in writing, software
1:5f96839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f96839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f96839:  * See the License for the specific language governing permissions and
1:5f96839:  * limitations under the License.
1:5f96839:  */
1:5f96839: package org.apache.activemq.camel.component;
1:5f96839: 
1:53c9bab: import java.lang.reflect.Constructor;
1:5f96839: import javax.jms.ConnectionFactory;
1:5f96839: 
1:75a32e4: import org.apache.activemq.Service;
1:5f96839: import org.apache.activemq.spring.ActiveMQConnectionFactory;
1:5f96839: import org.apache.camel.component.jms.JmsConfiguration;
1:b616748: import org.springframework.jms.connection.JmsTransactionManager;
1:3ef8f49: import org.springframework.jms.connection.SingleConnectionFactory;
1:53c9bab: import org.springframework.jms.core.JmsTemplate;
1:b616748: import org.springframework.transaction.PlatformTransactionManager;
1:5f96839: 
1:5f96839: /**
1:3ef8f49:  *
1:5f96839:  */
1:5f96839: public class ActiveMQConfiguration extends JmsConfiguration {
1:df868fe:     private ActiveMQComponent activeMQComponent;
1:5f96839:     private String brokerURL = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1:53756f3:     private boolean useSingleConnection = false;
1:53756f3:     private boolean usePooledConnection = true;
1:40ecf22:     private boolean trustAllPackages;
1:5f96839: 
1:5f96839:     public ActiveMQConfiguration() {
1:5f96839:     }
1:5f96839: 
1:5f96839:     public String getBrokerURL() {
1:5f96839:         return brokerURL;
1:5f96839:     }
1:5f96839: 
1:5f96839:     /**
1:5f96839:      * Sets the broker URL to use to connect to ActiveMQ using the
1:5f96839:      * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ URI format</a>
1:5f96839:      *
1:5f96839:      * @param brokerURL the URL of the broker.
1:5f96839:      */
1:5f96839:     public void setBrokerURL(String brokerURL) {
1:5f96839:         this.brokerURL = brokerURL;
1:5f96839:     }
1:5f96839: 
1:53c9bab:     public boolean isUseSingleConnection() {
1:53c9bab:         return useSingleConnection;
1:5f96839:     }
1:75a32e4: 
1:395a48d:     /**
1:395a48d:      * @deprecated - use JmsConfiguration#getUsername()
1:395a48d:      * @see JmsConfiguration#getUsername()
1:395a48d:      */
1:395a48d:     @Deprecated
1:b616748:     public String getUserName() {
1:395a48d:         return getUsername();
1:5f96839:     }
1:b616748: 
1:b616748:     /**
1:395a48d:      * @deprecated - use JmsConfiguration#setUsername(String)
1:395a48d:      * @see JmsConfiguration#setUsername(String)
1:b616748:      */
1:395a48d:     @Deprecated
1:b616748:     public void setUserName(String userName) {
1:395a48d:         setUsername(userName);
1:75a32e4:     }
1:b616748: 
1:b616748:     /**
1:53c9bab:      * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when
1:53c9bab:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:53c9bab:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:53c9bab:      * for each message then close them all down again.
1:53c9bab:      * <p/>
1:3ef8f49:      * The default value is false and a pooled connection is used by default.
1:b616748:      */
1:53c9bab:     public void setUseSingleConnection(boolean useSingleConnection) {
1:53c9bab:         this.useSingleConnection = useSingleConnection;
1:b616748:     }
1:b616748: 
1:53c9bab:     public boolean isUsePooledConnection() {
1:53c9bab:         return usePooledConnection;
1:b616748:     }
1:b616748: 
1:b616748:     /**
1:53c9bab:      * Enables or disables whether a PooledConnectionFactory will be used so that when
1:53c9bab:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:53c9bab:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:53c9bab:      * for each message then close them all down again.
1:53c9bab:      * <p/>
1:6d6ed4e:      * The default value is true. Note that this requires an extra dependency on commons-pool2.
2:53c9bab:      */
1:53c9bab:     public void setUsePooledConnection(boolean usePooledConnection) {
1:53c9bab:         this.usePooledConnection = usePooledConnection;
1:b616748:     }
1:b616748: 
1:40ecf22:     public boolean isTrustAllPackages() {
1:40ecf22:         return trustAllPackages;
1:40ecf22:     }
1:40ecf22: 
1:40ecf22:     /**
1:40ecf22:      * ObjectMessage objects depend on Java serialization of marshal/unmarshal object payload.
1:40ecf22:      * This process is generally considered unsafe as malicious payload can exploit the host system.
1:40ecf22:      * That's why starting with versions 5.12.2 and 5.13.0, ActiveMQ enforces users to explicitly whitelist packages
1:40ecf22:      * that can be exchanged using ObjectMessages.
1:40ecf22:      * <br/>
1:40ecf22:      * This option can be set to <tt>true</tt> to trust all packages (eg whitelist is *).
1:40ecf22:      * <p/>
1:40ecf22:      * See more details at: http://activemq.apache.org/objectmessage.html
1:40ecf22:      */
1:40ecf22:     public void setTrustAllPackages(boolean trustAllPackages) {
1:40ecf22:         this.trustAllPackages = trustAllPackages;
1:40ecf22:     }
1:40ecf22: 
2:53c9bab:     /**
1:b616748:      * Factory method to create a default transaction manager if one is not specified
1:b616748:      */
1:3ef8f49:     @Override
1:b616748:     protected PlatformTransactionManager createTransactionManager() {
1:b616748:         JmsTransactionManager answer = new JmsTransactionManager(getConnectionFactory());
1:b616748:         answer.afterPropertiesSet();
2:b616748:         return answer;
1:5f96839:     }
1:5f96839: 
1:75a32e4:     protected void setActiveMQComponent(ActiveMQComponent activeMQComponent) {
1:75a32e4:         this.activeMQComponent = activeMQComponent;
1:5f96839:     }
1:5f96839: 
4:5f96839:     @Override
1:696b34a:     protected ConnectionFactory createConnectionFactory() {
1:5f96839:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
1:40ecf22:         answer.setTrustAllPackages(trustAllPackages);
1:395a48d:         if (getUsername() != null) {
1:395a48d:             answer.setUserName(getUsername());
1:b616748:         }
1:395a48d:         if (getPassword() != null) {
1:395a48d:             answer.setPassword(getPassword());
1:b616748:         }
1:696b34a:         if (answer.getBeanName() == null) {
1:696b34a:             answer.setBeanName("Camel");
1:b616748:         }
1:5f96839:         answer.setBrokerURL(getBrokerURL());
1:53756f3:         if (isUseSingleConnection()) {
1:75a32e4:             SingleConnectionFactory scf = new SingleConnectionFactory(answer);
1:75a32e4:             if (activeMQComponent != null) {
1:75a32e4:                 activeMQComponent.addSingleConnectionFactory(scf);
1:75a32e4:             }
1:75a32e4:             return scf;
1:b616748:         }
1:53756f3:         else if (isUsePooledConnection()) {
1:75a32e4:             ConnectionFactory pcf = createPooledConnectionFactory(answer);
1:75a32e4:             if (activeMQComponent != null) {
1:75a32e4:                 activeMQComponent.addPooledConnectionFactoryService((Service) pcf);
1:75a32e4:             }
1:75a32e4:             return pcf;
1:b616748:         }
1:5f96839:         else {
1:5f96839:             return answer;
1:5f96839:         }
1:5f96839:     }
1:5f96839: 
1:53c9bab:     protected ConnectionFactory createPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
1:6d6ed4e:         // lets not use classes directly to avoid a runtime dependency on commons-pool2
1:53c9bab:         // for folks not using this option
1:53c9bab:         try {
1:53c9bab:             Class type = loadClass("org.apache.activemq.pool.PooledConnectionFactory", getClass().getClassLoader());
1:80722e4:             Constructor constructor = type.getConstructor(org.apache.activemq.ActiveMQConnectionFactory.class);
1:53c9bab:             return (ConnectionFactory) constructor.newInstance(connectionFactory);
1:5f96839:         }
1:53c9bab:         catch (Exception e) {
1:53c9bab:             throw new RuntimeException("Failed to instantiate PooledConnectionFactory: " + e, e);
1:b616748:         }
1:53756f3:     }
1:b616748: 
1:53c9bab:     public static Class<?> loadClass(String name, ClassLoader loader) throws ClassNotFoundException {
1:53c9bab:         ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
1:53c9bab:         if (contextClassLoader != null) {
1:53c9bab:             try {
1:53c9bab:                 return contextClassLoader.loadClass(name);
1:53c9bab:             }
1:53c9bab:             catch (ClassNotFoundException e) {
1:53c9bab:                 try {
1:53c9bab:                     return loader.loadClass(name);
1:53c9bab:                 }
1:53c9bab:                 catch (ClassNotFoundException e1) {
1:53c9bab:                     throw e1;
1:53c9bab:                 }
1:53c9bab:             }
1:361bbeb:         } else {
1:361bbeb:             return loader.loadClass(name);
1:de9a2dd:         }
1:361bbeb:     }
12:53c9bab: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:395a48d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @deprecated - use JmsConfiguration#getUsername()
1:      * @see JmsConfiguration#getUsername()
1:      */
1:     @Deprecated
1:         return getUsername();
1:      * @deprecated - use JmsConfiguration#setUsername(String)
1:      * @see JmsConfiguration#setUsername(String)
1:     @Deprecated
1:         setUsername(userName);
/////////////////////////////////////////////////////////////////////////
1:         if (getUsername() != null) {
1:             answer.setUserName(getUsername());
1:         if (getPassword() != null) {
1:             answer.setPassword(getPassword());
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:40ecf22
/////////////////////////////////////////////////////////////////////////
1:     private boolean trustAllPackages;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isTrustAllPackages() {
1:         return trustAllPackages;
1:     }
1: 
1:     /**
1:      * ObjectMessage objects depend on Java serialization of marshal/unmarshal object payload.
1:      * This process is generally considered unsafe as malicious payload can exploit the host system.
1:      * That's why starting with versions 5.12.2 and 5.13.0, ActiveMQ enforces users to explicitly whitelist packages
1:      * that can be exchanged using ObjectMessages.
1:      * <br/>
1:      * This option can be set to <tt>true</tt> to trust all packages (eg whitelist is *).
1:      * <p/>
1:      * See more details at: http://activemq.apache.org/objectmessage.html
1:      */
1:     public void setTrustAllPackages(boolean trustAllPackages) {
1:         this.trustAllPackages = trustAllPackages;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         answer.setTrustAllPackages(trustAllPackages);
commit:df868fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQComponent activeMQComponent;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:5cbddda
/////////////////////////////////////////////////////////////////////////
author:Jeff Genender
-------------------------------------------------------------------------------
commit:6d6ed4e
/////////////////////////////////////////////////////////////////////////
1:      * The default value is true. Note that this requires an extra dependency on commons-pool2.
/////////////////////////////////////////////////////////////////////////
1:         // lets not use classes directly to avoid a runtime dependency on commons-pool2
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3ef8f49
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.jms.connection.SingleConnectionFactory;
1:  *
/////////////////////////////////////////////////////////////////////////
1:      * The default value is false and a pooled connection is used by default.
/////////////////////////////////////////////////////////////////////////
0:      * The default value is true. Note that this requires an extra dependency on commons-pool.
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5f96839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
0: import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.apache.activemq.spring.ActiveMQConnectionFactory;
1: import org.apache.camel.component.jms.JmsConfiguration;
1: 
1: import javax.jms.ConnectionFactory;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQConfiguration extends JmsConfiguration {
1:     private String brokerURL = ActiveMQConnectionFactory.DEFAULT_BROKER_URL;
1: 
1:     public ActiveMQConfiguration() {
1:     }
1: 
1:     public String getBrokerURL() {
1:         return brokerURL;
1:     }
1: 
1:     /**
1:      * Sets the broker URL to use to connect to ActiveMQ using the
1:      * <a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ URI format</a>
1:      *
1:      * @param brokerURL the URL of the broker.
1:      */
1:     public void setBrokerURL(String brokerURL) {
1:         this.brokerURL = brokerURL;
1:     }
1: 
1:     @Override
0:     public ActiveMQConnectionFactory getListenerConnectionFactory() {
0:         return (ActiveMQConnectionFactory) super.getListenerConnectionFactory();
1:     }
1: 
1:     @Override
0:     public void setListenerConnectionFactory(ConnectionFactory listenerConnectionFactory) {
0:         if (listenerConnectionFactory instanceof ActiveMQConnectionFactory) {
0:             super.setListenerConnectionFactory(listenerConnectionFactory);
1:         }
1:         else {
0:             throw new IllegalArgumentException("ConnectionFactory " + listenerConnectionFactory
0:                     + " is not an instanceof " + ActiveMQConnectionFactory.class.getName());
1:         }
1:     }
1: 
1:     @Override
0:     protected ConnectionFactory createListenerConnectionFactory() {
1:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
1:         answer.setBrokerURL(getBrokerURL());
1:         return answer;
1:     }
1: 
1:     @Override
0:     protected ConnectionFactory createTemplateConnectionFactory() {
0:         return new PooledConnectionFactory(getListenerConnectionFactory());
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:75a32e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
/////////////////////////////////////////////////////////////////////////
0:     private ActiveMQComponent activeMQComponent;
/////////////////////////////////////////////////////////////////////////
1:     protected void setActiveMQComponent(ActiveMQComponent activeMQComponent) {
1:         this.activeMQComponent = activeMQComponent;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             SingleConnectionFactory scf = new SingleConnectionFactory(answer);
1:             if (activeMQComponent != null) {
1:                 activeMQComponent.addSingleConnectionFactory(scf);
1:             }
1:             return scf;
1:             ConnectionFactory pcf = createPooledConnectionFactory(answer);
1:             if (activeMQComponent != null) {
1:                 activeMQComponent.addPooledConnectionFactoryService((Service) pcf);
1:             }
1:             return pcf;
commit:de9a2dd
/////////////////////////////////////////////////////////////////////////
1:         }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:361bbeb
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             return loader.loadClass(name);
1: }
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:b616748
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.jms.connection.JmsTransactionManager;
1: import org.springframework.transaction.PlatformTransactionManager;
/////////////////////////////////////////////////////////////////////////
0:     private String userName;
0:     private String password;
/////////////////////////////////////////////////////////////////////////
1:     public String getUserName() {
0:         return userName;
1:     }
1: 
1:     /**
0:      * Sets the username to be used to login to ActiveMQ
0:      * @param userName
1:      */
1:     public void setUserName(String userName) {
0:         this.userName = userName;
1:     }
1: 
0:     public String getPassword() {
0:         return password;
1:     }
1: 
1:     /**
0:      * Sets the password/passcode used to login to ActiveMQ
0:      *
0:      * @param password
1:      */
0:     public void setPassword(String password) {
0:         this.password = password;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public PlatformTransactionManager getTransactionManager() {
0:         PlatformTransactionManager answer = super.getTransactionManager();
0:         if (isTransacted() && answer == null) {
0:             // lets auto-default the transaction manager if its not specified
0:             answer = createTransactionManager();
0:             setTransactionManager(answer);
0:             answer = getTransactionManager();
1:         }
1:         return answer;
1:     }
1: 
1:     /**
1:      * Factory method to create a default transaction manager if one is not specified
1:      */
1:     protected PlatformTransactionManager createTransactionManager() {
1:         JmsTransactionManager answer = new JmsTransactionManager(getConnectionFactory());
1:         answer.afterPropertiesSet();
1:         return answer;
1:     }
1: 
0:     @Override
0:         if (userName != null) {
0:             answer.setUserName(userName);
1:         }
0:         if (password != null) {
0:             answer.setPassword(password);
1:         }
commit:53756f3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private boolean useSingleConnection = false;
1:     private boolean usePooledConnection = true;
/////////////////////////////////////////////////////////////////////////
1:         if (isUseSingleConnection()) {
1:         else if (isUsePooledConnection()) {
0:             return createPooledConnectionFactory(answer);
1:         }
commit:80722e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             Constructor constructor = type.getConstructor(org.apache.activemq.ActiveMQConnectionFactory.class);
commit:53c9bab
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Constructor;
0: import java.lang.reflect.InvocationTargetException;
0: import org.apache.activemq.spring.ActiveMQConnectionFactory;
0: import org.apache.camel.component.jms.JmsConfiguration;
0: import org.springframework.jms.connection.SingleConnectionFactory;
1: import org.springframework.jms.core.JmsTemplate;
0: 
0:     private boolean useSingleConnection = true;
0:     private boolean usePooledConnection = false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseSingleConnection() {
1:         return useSingleConnection;
1:     }
0: 
1:     /**
1:      * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when
1:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:      * for each message then close them all down again.
1:      * <p/>
0:      * The default value is true so that a single connection is used by default.
0:      *
0:      * @param useSingleConnection
1:      */
1:     public void setUseSingleConnection(boolean useSingleConnection) {
1:         this.useSingleConnection = useSingleConnection;
1:     }
0: 
1:     public boolean isUsePooledConnection() {
1:         return usePooledConnection;
1:     }
0: 
1:     /**
1:      * Enables or disables whether a PooledConnectionFactory will be used so that when
1:      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather
1:      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer
1:      * for each message then close them all down again.
1:      * <p/>
0:      * The default value is false by default as it requires an extra dependency on commons-pool.
1:      */
1:     public void setUsePooledConnection(boolean usePooledConnection) {
1:         this.usePooledConnection = usePooledConnection;
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         if (isUsePooledConnection()) {
0:             return createPooledConnectionFactory(answer);
1:         }
0:         else if (isUseSingleConnection()) {
0:             return new SingleConnectionFactory(answer);
0:             //return new PooledConnectionFactory(answer);
1:         }
0:         else {
0:             return answer;
1:         }
1:     }
0: 
1:     protected ConnectionFactory createPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         // lets not use classes directly to avoid a runtime dependency on commons-pool
1:         // for folks not using this option
1:         try {
1:             Class type = loadClass("org.apache.activemq.pool.PooledConnectionFactory", getClass().getClassLoader());
0:             Constructor constructor = type.getConstructor(ActiveMQConnectionFactory.class);
1:             return (ConnectionFactory) constructor.newInstance(connectionFactory);
1:         }
1:         catch (Exception e) {
1:             throw new RuntimeException("Failed to instantiate PooledConnectionFactory: " + e, e);
1:         }
1:     }
0: 
1:     public static Class<?> loadClass(String name, ClassLoader loader) throws ClassNotFoundException {
1:         ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
1:         if (contextClassLoader != null) {
1:             try {
1:                 return contextClassLoader.loadClass(name);
1:             }
1:             catch (ClassNotFoundException e) {
1:                 try {
1:                     return loader.loadClass(name);
1:                 }
1:                 catch (ClassNotFoundException e1) {
1:                     throw e1;
1:                 }
1:             }
1:         }
0:         return null;
commit:696b34a
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionFactory createConnectionFactory() {
1:         if (answer.getBeanName() == null) {
1:             answer.setBeanName("Camel");
0:         }
============================================================================