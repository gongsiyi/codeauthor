1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f812e34:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.util;
1:f812e34: 
1:975b781: import java.io.IOException;
1:d29ca2a: import java.net.ServerSocket;
1:54bce47: import java.util.concurrent.atomic.AtomicLong;
1:5807370: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
14:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Generator for Globally unique Strings.
1:d29ca2a:  */
1:f812e34: public class IdGenerator {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(IdGenerator.class);
1:f812e34:     private static final String UNIQUE_STUB;
1:f812e34:     private static int instanceCount;
1:d29ca2a:     private static String hostName;
1:f812e34:     private String seed;
1:04c6d9d:     private final AtomicLong sequence = new AtomicLong(1);
1:54bce47:     private int length;
1:e25a6aa:     public static final String PROPERTY_IDGENERATOR_HOSTNAME ="activemq.idgenerator.hostname";
1:e25a6aa:     public static final String PROPERTY_IDGENERATOR_LOCALPORT ="activemq.idgenerator.localport";
1:b3e58a5:     public static final String PROPERTY_IDGENERATOR_PORT ="activemq.idgenerator.port";
1:f812e34: 
1:f812e34:     static {
1:f812e34:         String stub = "";
1:f812e34:         boolean canAccessSystemProps = true;
1:f812e34:         try {
1:f812e34:             SecurityManager sm = System.getSecurityManager();
1:f812e34:             if (sm != null) {
1:f812e34:                 sm.checkPropertiesAccess();
1:f812e34:             }
1:f812e34:         } catch (SecurityException se) {
1:f812e34:             canAccessSystemProps = false;
1:f812e34:         }
1:f812e34: 
1:f812e34:         if (canAccessSystemProps) {
1:e25a6aa: 
1:e25a6aa:             hostName = System.getProperty(PROPERTY_IDGENERATOR_HOSTNAME);
1:e25a6aa:             int localPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_LOCALPORT, "0"));
1:e25a6aa: 
1:975b781:             int idGeneratorPort = 0;
1:975b781:             ServerSocket ss = null;
1:f812e34:             try {
1:638c1e4:                 if( hostName==null ) {
1:e25a6aa:                     hostName = InetAddressUtil.getLocalHostName();
1:e25a6aa:                 }
1:e25a6aa:                 if( localPort==0 ) {
1:e25a6aa:                     idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
1:e25a6aa:                     LOG.trace("Using port {}", idGeneratorPort);
1:e25a6aa:                     ss = new ServerSocket(idGeneratorPort);
1:e25a6aa:                     localPort = ss.getLocalPort();
1:e25a6aa:                     stub = "-" + localPort + "-" + System.currentTimeMillis() + "-";
1:e25a6aa:                     Thread.sleep(100);
1:e25a6aa:                 } else {
1:e25a6aa:                     stub = "-" + localPort + "-" + System.currentTimeMillis() + "-";
1:e25a6aa:                 }
1:04c6d9d:             } catch (Exception e) {
1:b3e58a5:                 if (LOG.isTraceEnabled()) {
1:04c6d9d:                     LOG.trace("could not generate unique stub by using DNS and binding to local port", e);
1:b3e58a5:                 } else {
1:04c6d9d:                     LOG.warn("could not generate unique stub by using DNS and binding to local port: {} {}", e.getClass().getCanonicalName(), e.getMessage());
1:04c6d9d:                 }
1:04c6d9d: 
1:04c6d9d:                 // Restore interrupted state so higher level code can deal with it.
1:04c6d9d:                 if (e instanceof InterruptedException) {
1:04c6d9d:                     Thread.currentThread().interrupt();
1:d29ca2a:                 }
1:975b781:             } finally {
1:975b781:                 if (ss != null) {
1:975b781:                     try {
1:975b781:                         // TODO: replace the following line with IOHelper.close(ss) when Java 6 support is dropped
1:975b781:                         ss.close();
1:975b781:                     } catch (IOException ioe) {
1:975b781:                         if (LOG.isTraceEnabled()) {
1:975b781:                             LOG.trace("Closing the server socket failed", ioe);
1:975b781:                         } else {
1:975b781:                             LOG.warn("Closing the server socket failed" + " due " + ioe.getMessage());
1:975b781:                         }
1:975b781:                     }
1:975b781:                 }
1:b3e58a5:             }
1:f812e34:         }
1:a2fc5bc:         // fallback
1:a2fc5bc:         if (hostName == null) {
1:f812e34:             hostName = "localhost";
1:f812e34:         }
1:6ed8f43:         hostName = sanitizeHostName(hostName);
1:6ed8f43: 
1:a2fc5bc:         if (stub.length() == 0) {
1:f812e34:             stub = "-1-" + System.currentTimeMillis() + "-";
1:f812e34:         }
1:f812e34:         UNIQUE_STUB = stub;
1:f812e34:     }
1:f812e34: 
1:f812e34:     /**
1:933eb2f:      * Construct an IdGenerator
1:933eb2f:      */
1:933eb2f:     public IdGenerator(String prefix) {
1:933eb2f:         synchronized (UNIQUE_STUB) {
1:933eb2f:             this.seed = prefix + UNIQUE_STUB + (instanceCount++) + ":";
1:54bce47:             this.length = this.seed.length() + ("" + Long.MAX_VALUE).length();
1:933eb2f:         }
1:933eb2f:     }
1:933eb2f: 
1:933eb2f:     public IdGenerator() {
1:933eb2f:         this("ID:" + hostName);
1:933eb2f:     }
1:933eb2f: 
1:933eb2f:     /**
1:f812e34:      * As we have to find the hostname as a side-affect of generating a unique
1:6ed8f43:      * stub, we allow it's easy retrieval here
1:54bce47:      *
1:d29ca2a:      * @return the local host name
1:d29ca2a:      */
1:f812e34:     public static String getHostName() {
1:d29ca2a:         return hostName;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     /**
1:6ed8f43:      * Generate a unique id
1:54bce47:      *
2:d29ca2a:      * @return a unique id
1:f812e34:      */
1:f812e34:     public synchronized String generateId() {
1:54bce47:         StringBuilder sb = new StringBuilder(length);
1:54bce47:         sb.append(seed);
1:54bce47:         sb.append(sequence.getAndIncrement());
1:54bce47:         return sb.toString();
1:f812e34:     }
1:f812e34: 
1:6ed8f43:     public static String sanitizeHostName(String hostName) {
1:6ed8f43:         boolean changed = false;
1:6ed8f43: 
1:6ed8f43:         StringBuilder sb = new StringBuilder();
1:6ed8f43:         for (char ch : hostName.toCharArray()) {
1:6ed8f43:             // only include ASCII chars
1:6ed8f43:             if (ch < 127) {
1:6ed8f43:                 sb.append(ch);
1:6ed8f43:             } else {
1:6ed8f43:                 changed = true;
1:6ed8f43:             }
1:6ed8f43:         }
1:6ed8f43: 
1:6ed8f43:         if (changed) {
1:6ed8f43:             String newHost = sb.toString();
1:6ed8f43:             LOG.info("Sanitized hostname from: {} to: {}", hostName, newHost);
1:6ed8f43:             return newHost;
1:6ed8f43:         } else {
1:6ed8f43:             return hostName;
1:6ed8f43:         }
1:6ed8f43:     }
1:6ed8f43: 
1:f812e34:     /**
1:f812e34:      * Generate a unique ID - that is friendly for a URL or file system
1:54bce47:      *
1:f812e34:      * @return a unique id
1:f812e34:      */
1:f812e34:     public String generateSanitizedId() {
1:d29ca2a:         String result = generateId();
1:d29ca2a:         result = result.replace(':', '-');
1:d29ca2a:         result = result.replace('_', '-');
1:d29ca2a:         result = result.replace('.', '-');
1:d29ca2a:         return result;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:dd1d660:      * From a generated id - return the seed (i.e. minus the count)
1:54bce47:      *
1:dd1d660:      * @param id the generated identifer
1:dd1d660:      * @return the seed
1:d29ca2a:      */
1:dd1d660:     public static String getSeedFromId(String id) {
1:dd1d660:         String result = id;
1:dd1d660:         if (id != null) {
1:dd1d660:             int index = id.lastIndexOf(':');
1:dd1d660:             if (index > 0 && (index + 1) < id.length()) {
1:14755a1:                 result = id.substring(0, index);
1:d29ca2a:             }
1:d29ca2a:         }
1:dd1d660:         return result;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:dd1d660:      * From a generated id - return the generator count
1:54bce47:      *
1:dd1d660:      * @param id
1:dd1d660:      * @return the count
1:d29ca2a:      */
1:dd1d660:     public static long getSequenceFromId(String id) {
1:dd1d660:         long result = -1;
1:dd1d660:         if (id != null) {
1:dd1d660:             int index = id.lastIndexOf(':');
1:f812e34: 
1:dd1d660:             if (index > 0 && (index + 1) < id.length()) {
1:dd1d660:                 String numStr = id.substring(index + 1, id.length());
1:dd1d660:                 result = Long.parseLong(numStr);
1:d29ca2a:             }
1:d29ca2a:         }
1:dd1d660:         return result;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:dd1d660:      * Does a proper compare on the ids
1:54bce47:      *
1:dd1d660:      * @param id1
1:dd1d660:      * @param id2
1:dd1d660:      * @return 0 if equal else a positive if id1 is > id2 ...
1:d29ca2a:      */
1:dd1d660:     public static int compare(String id1, String id2) {
1:dd1d660:         int result = -1;
1:dd1d660:         String seed1 = IdGenerator.getSeedFromId(id1);
1:dd1d660:         String seed2 = IdGenerator.getSeedFromId(id2);
1:dd1d660:         if (seed1 != null && seed2 != null) {
1:dd1d660:             result = seed1.compareTo(seed2);
1:dd1d660:             if (result == 0) {
1:dd1d660:                 long count1 = IdGenerator.getSequenceFromId(id1);
1:dd1d660:                 long count2 = IdGenerator.getSequenceFromId(id2);
1:f812e34:                 result = (int)(count1 - count2);
1:d29ca2a:             }
1:d29ca2a:         }
1:dd1d660:         return result;
1:f812e34: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:638c1e4
/////////////////////////////////////////////////////////////////////////
1:                 if( hostName==null ) {
commit:e25a6aa
/////////////////////////////////////////////////////////////////////////
1:     public static final String PROPERTY_IDGENERATOR_HOSTNAME ="activemq.idgenerator.hostname";
1:     public static final String PROPERTY_IDGENERATOR_LOCALPORT ="activemq.idgenerator.localport";
/////////////////////////////////////////////////////////////////////////
1: 
1:             hostName = System.getProperty(PROPERTY_IDGENERATOR_HOSTNAME);
1:             int localPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_LOCALPORT, "0"));
1: 
0:                 if( hostName!=null ) {
1:                     hostName = InetAddressUtil.getLocalHostName();
1:                 }
1:                 if( localPort==0 ) {
1:                     idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
1:                     LOG.trace("Using port {}", idGeneratorPort);
1:                     ss = new ServerSocket(idGeneratorPort);
1:                     localPort = ss.getLocalPort();
1:                     stub = "-" + localPort + "-" + System.currentTimeMillis() + "-";
1:                     Thread.sleep(100);
1:                 } else {
1:                     stub = "-" + localPort + "-" + System.currentTimeMillis() + "-";
1:                 }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:04c6d9d
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicLong sequence = new AtomicLong(1);
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
1:                     LOG.trace("could not generate unique stub by using DNS and binding to local port", e);
1:                     LOG.warn("could not generate unique stub by using DNS and binding to local port: {} {}", e.getClass().getCanonicalName(), e.getMessage());
1:                 }
1: 
1:                 // Restore interrupted state so higher level code can deal with it.
1:                 if (e instanceof InterruptedException) {
1:                     Thread.currentThread().interrupt();
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:6ed8f43
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         hostName = sanitizeHostName(hostName);
1: 
/////////////////////////////////////////////////////////////////////////
1:      * stub, we allow it's easy retrieval here
1:      * Generate a unique id
/////////////////////////////////////////////////////////////////////////
1:     public static String sanitizeHostName(String hostName) {
1:         boolean changed = false;
1: 
1:         StringBuilder sb = new StringBuilder();
1:         for (char ch : hostName.toCharArray()) {
1:             // only include ASCII chars
1:             if (ch < 127) {
1:                 sb.append(ch);
1:             } else {
1:                 changed = true;
1:             }
1:         }
1: 
1:         if (changed) {
1:             String newHost = sb.toString();
1:             LOG.info("Sanitized hostname from: {} to: {}", hostName, newHost);
1:             return newHost;
1:         } else {
1:             return hostName;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:975b781
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:             int idGeneratorPort = 0;
1:             ServerSocket ss = null;
0:                 idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
0:                 ss = new ServerSocket(idGeneratorPort);
1:             } finally {
1:                 if (ss != null) {
1:                     try {
1:                         // TODO: replace the following line with IOHelper.close(ss) when Java 6 support is dropped
1:                         ss.close();
1:                     } catch (IOException ioe) {
1:                         if (LOG.isTraceEnabled()) {
1:                             LOG.trace("Closing the server socket failed", ioe);
1:                         } else {
1:                             LOG.warn("Closing the server socket failed" + " due " + ioe.getMessage());
1:                         }
1:                     }
1:                 }
commit:14755a1
/////////////////////////////////////////////////////////////////////////
1:                 result = id.substring(0, index);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(IdGenerator.class);
commit:5807370
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(IdGenerator.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("could not generate unique stub", ioe);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b3e58a5
/////////////////////////////////////////////////////////////////////////
1:     public static final String PROPERTY_IDGENERATOR_PORT ="activemq.idgenerator.port";
/////////////////////////////////////////////////////////////////////////
0:                 int idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
0:                 LOG.trace("Using port {}", idGeneratorPort);
0:                 ServerSocket ss = new ServerSocket(idGeneratorPort);
1:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("could not generate unique stub by using DNS and binding to local port", ioe);
1:                 } else {
0:                     LOG.warn("could not generate unique stub by using DNS and binding to local port: {} {}", ioe.getClass().getCanonicalName(), ioe.getMessage());
1:                 }
commit:54bce47
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
0:     private AtomicLong sequence = new AtomicLong(1);
1:     private int length;
/////////////////////////////////////////////////////////////////////////
1:             this.length = this.seed.length() + ("" + Long.MAX_VALUE).length();
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:         StringBuilder sb = new StringBuilder(length);
1:         sb.append(seed);
1:         sb.append(sequence.getAndIncrement());
1:         return sb.toString();
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:      * Construct an IdGenerator
1:      */
1:     public IdGenerator(String prefix) {
1:         synchronized (UNIQUE_STUB) {
1:             this.seed = prefix + UNIQUE_STUB + (instanceCount++) + ":";
1:         }
1:     }
1: 
1:     public IdGenerator() {
1:         this("ID:" + hostName);
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = Logger.getLogger(IdGenerator.class.getName());
/////////////////////////////////////////////////////////////////////////
0:                 LOG.log(Level.WARNING, "could not generate unique stub", ioe);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: public class IdGenerator {
0:     private static final Logger log = Logger.getLogger(IdGenerator.class.getName());
1:     private static final String UNIQUE_STUB;
1:     private static int instanceCount;
1:     private String seed;
0:     private long sequence;
1: 
1:     static {
1:         String stub = "";
1:         boolean canAccessSystemProps = true;
1:         try {
1:             SecurityManager sm = System.getSecurityManager();
1:             if (sm != null) {
1:                 sm.checkPropertiesAccess();
1:             }
1:         } catch (SecurityException se) {
1:             canAccessSystemProps = false;
1:         }
1: 
1:         if (canAccessSystemProps) {
1:             try {
0:                 hostName = InetAddress.getLocalHost().getHostName();
0:                 ServerSocket ss = new ServerSocket(0);
0:                 stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
0:                 Thread.sleep(100);
0:                 ss.close();
0:             } catch (Exception ioe) {
0:                 log.log(Level.WARNING, "could not generate unique stub", ioe);
1:             }
0:         } else {
1:             hostName = "localhost";
1:             stub = "-1-" + System.currentTimeMillis() + "-";
1:         }
1:         UNIQUE_STUB = stub;
1:     }
1: 
1:      * As we have to find the hostname as a side-affect of generating a unique
0:      * stub, we allow it's easy retrevial here
1:      * 
1: 
1:     public static String getHostName() {
1: 
1:     /**
0:      * Construct an IdGenerator
1:      */
1: 
0:     public IdGenerator(String prefix) {
0:         synchronized (UNIQUE_STUB) {
0:             this.seed = prefix + UNIQUE_STUB + (instanceCount++) + ":";
1:         }
1:     }
1: 
0:     public IdGenerator() {
1: 
0:      * Generate a unqiue id
1:      * 
1: 
1:     public synchronized String generateId() {
0:         return this.seed + (this.sequence++);
1:     }
1: 
1:     /**
1:      * Generate a unique ID - that is friendly for a URL or file system
1:      * 
1:      * @return a unique id
1:      */
1:     public String generateSanitizedId() {
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:                 result = (int)(count1 - count2);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: 
1: package org.apache.activemq.util;
0: import java.net.InetAddress;
1: import java.net.ServerSocket;
0: import java.util.logging.Level;
0: import java.util.logging.Logger;
1: 
1: /**
1:  * Generator for Globally unique Strings.
1:  */
1: 
0: public class IdGenerator{
1: 
0: 	private static final Logger log = Logger.getLogger(IdGenerator.class.getName());
0: 	private static final String UNIQUE_STUB;
0: 	private static int instanceCount;
1:     private static String hostName;
0: 	private String seed;
0: 	private long sequence;
1: 	
0: 	static {
0: 		String stub = "";
0: 		boolean canAccessSystemProps = true;
0: 		try{
0: 			SecurityManager sm = System.getSecurityManager();
0: 			if(sm != null){
0: 				sm.checkPropertiesAccess();
1: 			}
0: 		}catch(SecurityException se){
0: 			canAccessSystemProps = false;
1: 		}
1: 		
0: 		if ( canAccessSystemProps) {
0: 			try {
0: 				hostName = InetAddress.getLocalHost().getHostName();
0: 				ServerSocket ss = new ServerSocket(0);
0: 				stub=hostName + "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
0: 				Thread.sleep(100);
0: 				ss.close();
0: 			}catch(Exception ioe){
0: 				log.log(Level.WARNING, "could not generate unique stub",ioe);
1: 			}
0: 		}else{
0:             hostName="localhost";
0: 			stub = hostName + "-1-" +System.currentTimeMillis() +"-";
1: 		}
0: 		UNIQUE_STUB = stub;
1: 	}
1:     
1:     /**
0:      * As we have to find the hostname as a side-affect of generating
0:      * a unique stub, we allow it's easy retrevial here
1:      * @return the local host name
1:      */
1:     
0:     public static String getHostName(){
1:         return hostName;
1:     }
1: 	
1: 	/**
0: 	 * Construct an IdGenerator
0: 	 *
1: 	 */
1: 	
0: 	public IdGenerator(String prefix){
0: 		synchronized(UNIQUE_STUB){
0: 			this.seed = prefix + UNIQUE_STUB +(instanceCount++) +":";
1: 		}
1: 	}
1:     
0:     public IdGenerator(){
0:         this("ID:");
1:     }
1: 	
1: 	/**
0: 	 * Generate a unqiue id
1: 	 * @return a unique id
1: 	 */
1: 	
0: 	public synchronized String generateId(){
0: 		return this.seed + (this.sequence++);
1: 	}
1:     
1:     /**
0:      * Generate a unique ID - that is friendly for a URL or file system
1:      * @return a unique id
1:      */
0:     public String generateSanitizedId(){
1:         String result = generateId();
1:         result = result.replace(':', '-');
1:         result = result.replace('_', '-');
1:         result = result.replace('.', '-');
1:         return result;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:a2fc5bc
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("could not generate unique stub by using DNS and binding to local port", ioe);
0:         }
1:         // fallback
1:         if (hostName == null) {
0:         }
1:         if (stub.length() == 0) {
author:Bruce Snyder
-------------------------------------------------------------------------------
commit:8a1f994
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 hostName = InetAddressUtil.getLocalHostName();
author:Robert Davies
-------------------------------------------------------------------------------
commit:dd1d660
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * From a generated id - return the seed (i.e. minus the count)
0:      *
1:      * @param id the generated identifer
1:      * @return the seed
0:      */
1:     public static String getSeedFromId(String id) {
1:         String result = id;
1:         if (id != null) {
1:             int index = id.lastIndexOf(':');
1:             if (index > 0 && (index + 1) < id.length()) {
0:                 result = id.substring(0, index + 1);
0:             }
0:         }
1:         return result;
0:     }
0: 
0:     /**
1:      * From a generated id - return the generator count
0:      *
1:      * @param id
1:      * @return the count
0:      */
1:     public static long getSequenceFromId(String id) {
1:         long result = -1;
1:         if (id != null) {
1:             int index = id.lastIndexOf(':');
0: 
1:             if (index > 0 && (index + 1) < id.length()) {
1:                 String numStr = id.substring(index + 1, id.length());
1:                 result = Long.parseLong(numStr);
0:             }
0:         }
1:         return result;
0:     }
0: 
0:     /**
1:      * Does a proper compare on the ids
0:      *
1:      * @param id1
1:      * @param id2
1:      * @return 0 if equal else a positive if id1 is > id2 ...
0:      */
0: 
1:     public static int compare(String id1, String id2) {
1:         int result = -1;
1:         String seed1 = IdGenerator.getSeedFromId(id1);
1:         String seed2 = IdGenerator.getSeedFromId(id2);
1:         if (seed1 != null && seed2 != null) {
1:             result = seed1.compareTo(seed2);
1:             if (result == 0) {
1:                 long count1 = IdGenerator.getSequenceFromId(id1);
1:                 long count2 = IdGenerator.getSequenceFromId(id2);
0:                 result = (int) (count1 - count2);
0:             }
0:         }
1:         return result;
0: 
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:7339c6e
/////////////////////////////////////////////////////////////////////////
0: 				stub="-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
/////////////////////////////////////////////////////////////////////////
0: 			stub = "-1-" +System.currentTimeMillis() +"-";
/////////////////////////////////////////////////////////////////////////
0:         this("ID:" + hostName);
============================================================================