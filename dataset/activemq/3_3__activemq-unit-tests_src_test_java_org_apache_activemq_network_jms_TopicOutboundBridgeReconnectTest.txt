1:bc78238: /**
1:bc78238:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc78238:  * contributor license agreements.  See the NOTICE file distributed with
1:bc78238:  * this work for additional information regarding copyright ownership.
1:bc78238:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc78238:  * (the "License"); you may not use this file except in compliance with
1:bc78238:  * the License.  You may obtain a copy of the License at
1:bc78238:  *
1:bc78238:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc78238:  *
1:bc78238:  * Unless required by applicable law or agreed to in writing, software
1:bc78238:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc78238:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc78238:  * See the License for the specific language governing permissions and
1:bc78238:  * limitations under the License.
1:bc78238:  */
1:bc78238: package org.apache.activemq.network.jms;
4:bc78238: 
1:c7d559f: import static org.junit.Assert.assertEquals;
1:c7d559f: import static org.junit.Assert.assertNotNull;
1:c7d559f: import static org.junit.Assert.assertNull;
1:c7d559f: import static org.junit.Assert.assertTrue;
1:c7d559f: 
1:c7d559f: import java.util.ArrayList;
1:c7d559f: import java.util.Iterator;
1:c7d559f: import java.util.concurrent.TimeUnit;
1:c7d559f: 
1:c7d559f: import javax.jms.Connection;
1:c7d559f: import javax.jms.Destination;
1:c7d559f: import javax.jms.JMSException;
1:c7d559f: import javax.jms.Message;
1:c7d559f: import javax.jms.MessageConsumer;
1:c7d559f: import javax.jms.MessageProducer;
1:c7d559f: import javax.jms.Session;
1:c7d559f: import javax.jms.TextMessage;
1:cf750d5: import javax.management.ObjectName;
1:bc78238: 
1:bc78238: import org.apache.activemq.ActiveMQConnectionFactory;
1:bc78238: import org.apache.activemq.broker.BrokerService;
1:cf750d5: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:bc78238: import org.apache.activemq.command.ActiveMQTopic;
1:bc78238: import org.apache.activemq.util.Wait;
1:bc78238: import org.junit.After;
1:bc78238: import org.junit.Before;
1:bc78238: import org.junit.Test;
1:bc78238: 
1:bc78238: /**
1:bc78238:  * These test cases are used to verify that queue outbound bridge connections get
1:bc78238:  * re-established in all broker restart scenarios. This is possible when the
1:bc78238:  * outbound bridge is configured using the failover URI with a timeout.
1:bc78238:  */
1:bc78238: public class TopicOutboundBridgeReconnectTest {
1:bc78238: 
1:bc78238:     private BrokerService producerBroker;
1:bc78238:     private BrokerService consumerBroker;
1:bc78238:     private ActiveMQConnectionFactory producerConnectionFactory;
1:bc78238:     private ActiveMQConnectionFactory consumerConnectionFactory;
1:bc78238:     private Destination destination;
1:c7d559f:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testMultipleProducerBrokerRestarts() throws Exception {
1:bc78238:         for (int i = 0; i < 10; i++) {
1:bc78238:             testWithProducerBrokerRestart();
1:bc78238:             disposeConsumerConnections();
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithoutRestartsConsumerFirst() throws Exception {
1:bc78238:         startConsumerBroker();
1:bc78238:         startProducerBroker();
1:bc78238: 
1:bc78238:         MessageConsumer consumer = createConsumer();
1:bc78238: 
1:bc78238:         sendMessage("test123");
1:bc78238:         sendMessage("test456");
1:bc78238:         Message message = consumer.receive(2000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage)message).getText());
1:bc78238: 
1:bc78238:         message = consumer.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test456", ((TextMessage)message).getText());
1:bc78238: 
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithoutRestartsProducerFirst() throws Exception {
1:bc78238:         startProducerBroker();
1:bc78238:         sendMessage("test123");
1:bc78238: 
1:bc78238:         startConsumerBroker();
1:bc78238: 
1:bc78238:         // unless using a failover URI, the first attempt of this send will likely fail, so increase the timeout below
1:bc78238:         // to give the bridge time to recover
1:bc78238:         sendMessage("test456");
1:bc78238: 
1:bc78238:         MessageConsumer consumer = createConsumer();
1:bc78238:         Message message = consumer.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage) message).getText());
1:bc78238: 
1:bc78238:         message = consumer.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test456", ((TextMessage) message).getText());
1:bc78238: 
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithProducerBrokerRestart() throws Exception {
1:bc78238:         startProducerBroker();
1:bc78238:         startConsumerBroker();
1:bc78238: 
1:bc78238:         MessageConsumer consumer = createConsumer();
1:bc78238: 
1:cf750d5:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1:cf750d5: 
1:cf750d5:             @Override
1:cf750d5:             public boolean isSatisified() throws Exception {
1:cf750d5:                 return getProxyToProducerBroker().getTopicSubscribers().length > 0;
1:cf750d5:             }
1:cf750d5:         }));
1:cf750d5: 
1:bc78238:         sendMessage("test123");
1:bc78238:         Message message = consumer.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage)message).getText());
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238: 
1:bc78238:         // Restart the first broker...
1:bc78238:         stopProducerBroker();
1:bc78238:         startProducerBroker();
1:cf750d5: 
1:cf750d5:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1:cf750d5: 
1:cf750d5:             @Override
1:cf750d5:             public boolean isSatisified() throws Exception {
1:cf750d5:                 return getProxyToProducerBroker().getTopicSubscribers().length > 0;
1:cf750d5:             }
1:cf750d5:         }));
1:bc78238: 
1:bc78238:         sendMessage("test123");
1:bc78238:         message = consumer.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage)message).getText());
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithConsumerBrokerRestart() throws Exception {
1:bc78238:         startProducerBroker();
1:bc78238:         startConsumerBroker();
1:bc78238: 
1:bc78238:         final MessageConsumer consumer1 = createConsumer();
1:bc78238: 
1:bc78238:         sendMessage("test123");
1:bc78238:         Message message = consumer1.receive(5000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage)message).getText());
1:bc78238:         assertNull(consumer1.receiveNoWait());
1:bc78238:         consumer1.close();
1:bc78238: 
1:bc78238:         // Restart the first broker...
1:bc78238:         stopConsumerBroker();
1:bc78238:         startConsumerBroker();
1:bc78238: 
1:bc78238:         // unless using a failover URI, the first attempt of this send will likely fail, so increase the timeout below
1:bc78238:         // to give the bridge time to recover
1:bc78238:         sendMessage("test123");
1:bc78238: 
1:bc78238:         final MessageConsumer consumer2 = createConsumer();
1:bc78238:         assertTrue("Expected recover and delivery failed", Wait.waitFor(new Wait.Condition() {
1:bc78238: 
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = consumer2.receiveNoWait();
1:bc78238:                 if (message == null || !((TextMessage)message).getText().equals("test123")) {
1:bc78238:                     return false;
1:bc78238:                 }
1:bc78238:                 return true;
1:bc78238:             }
1:bc78238:         }));
1:bc78238:         assertNull(consumer2.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithConsumerBrokerStartDelay() throws Exception {
1:bc78238:         startConsumerBroker();
1:bc78238:         final MessageConsumer consumer = createConsumer();
1:bc78238: 
1:bc78238:         TimeUnit.SECONDS.sleep(5);
1:bc78238: 
1:bc78238:         startProducerBroker();
1:bc78238: 
1:bc78238:         sendMessage("test123");
1:bc78238:         assertTrue("Expected recover and delivery failed", Wait.waitFor(new Wait.Condition() {
1:bc78238: 
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = consumer.receiveNoWait();
1:bc78238:                 if (message == null || !((TextMessage)message).getText().equals("test123")) {
1:bc78238:                     return false;
1:bc78238:                 }
1:bc78238:                 return true;
1:bc78238:             }
1:bc78238:         }));
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testWithProducerBrokerStartDelay() throws Exception {
1:bc78238:         startProducerBroker();
1:bc78238: 
1:bc78238:         TimeUnit.SECONDS.sleep(5);
1:bc78238: 
1:bc78238:         startConsumerBroker();
1:bc78238:         MessageConsumer consumer = createConsumer();
1:bc78238: 
1:cf750d5:         final BrokerViewMBean producerBrokerView = getProxyToProducerBroker();
1:cf750d5:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1:cf750d5: 
1:cf750d5:             @Override
1:cf750d5:             public boolean isSatisified() throws Exception {
1:cf750d5:                 return producerBrokerView.getTopicSubscribers().length > 0;
1:cf750d5:             }
1:cf750d5:         }));
1:cf750d5: 
1:bc78238:         sendMessage("test123");
1:bc78238:         Message message = consumer.receive(2000);
1:bc78238:         assertNotNull(message);
1:bc78238:         assertEquals("test123", ((TextMessage)message).getText());
1:bc78238:         assertNull(consumer.receiveNoWait());
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Before
1:bc78238:     public void setUp() throws Exception {
1:bc78238:         producerConnectionFactory = createProducerConnectionFactory();
1:bc78238:         consumerConnectionFactory = createConsumerConnectionFactory();
1:bc78238:         destination = new ActiveMQTopic("RECONNECT.TEST.TOPIC");
1:bc78238:     }
1:bc78238: 
1:bc78238:     @After
1:bc78238:     public void tearDown() throws Exception {
1:bc78238:         disposeConsumerConnections();
1:bc78238:         try {
1:bc78238:             stopProducerBroker();
1:bc78238:         } catch (Throwable e) {
1:bc78238:         }
1:bc78238:         try {
1:bc78238:             stopConsumerBroker();
1:bc78238:         } catch (Throwable e) {
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void disposeConsumerConnections() {
1:bc78238:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:bc78238:             Connection connection = iter.next();
1:bc78238:             try {
1:bc78238:                 connection.close();
1:bc78238:             } catch (Throwable ignore) {
1:bc78238:             }
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void startProducerBroker() throws Exception {
1:bc78238:         if (producerBroker == null) {
1:bc78238:             producerBroker = createFirstBroker();
1:bc78238:             producerBroker.start();
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void stopProducerBroker() throws Exception {
1:bc78238:         if (producerBroker != null) {
1:bc78238:             producerBroker.stop();
1:bc78238:             producerBroker = null;
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void startConsumerBroker() throws Exception {
1:bc78238:         if (consumerBroker == null) {
1:bc78238:             consumerBroker = createSecondBroker();
1:bc78238:             consumerBroker.start();
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void stopConsumerBroker() throws Exception {
1:bc78238:         if (consumerBroker != null) {
1:bc78238:             consumerBroker.stop();
1:bc78238:             consumerBroker = null;
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:cf750d5:     protected BrokerViewMBean getProxyToProducerBroker() throws Exception {
1:cf750d5:         if (producerBroker == null) {
1:cf750d5:             throw new IllegalStateException("Producer broker is not running.");
1:cf750d5:         }
1:cf750d5: 
1:cf750d5:         ObjectName brokerViewMBean = new ObjectName(
1:cf750d5:             "org.apache.activemq:type=Broker,brokerName=" + producerBroker.getBrokerName());
1:cf750d5:         BrokerViewMBean proxy = (BrokerViewMBean) producerBroker.getManagementContext()
1:cf750d5:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:cf750d5:         return proxy;
1:cf750d5:     }
1:cf750d5: 
1:cf750d5:     protected BrokerViewMBean getProxyToConsumerBroker() throws Exception {
1:cf750d5:         if (producerBroker == null) {
1:cf750d5:             throw new IllegalStateException("Consumer broker is not running.");
1:cf750d5:         }
1:cf750d5: 
1:cf750d5:         ObjectName brokerViewMBean = new ObjectName(
1:cf750d5:             "org.apache.activemq:type=Broker,brokerName=" + consumerBroker.getBrokerName());
1:cf750d5:         BrokerViewMBean proxy = (BrokerViewMBean) consumerBroker.getManagementContext()
1:cf750d5:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:cf750d5:         return proxy;
1:cf750d5:     }
1:cf750d5: 
1:bc78238:     protected BrokerService createFirstBroker() throws Exception {
1:bc78238:         BrokerService broker = new BrokerService();
1:bc78238:         broker.setBrokerName("broker1");
1:bc78238:         broker.setPersistent(false);
1:cf750d5:         broker.setUseJmx(true);
1:cf750d5:         broker.getManagementContext().setCreateConnector(false);
1:bc78238:         broker.addConnector("tcp://localhost:61616");
1:bc78238:         broker.addConnector("vm://broker1");
1:bc78238: 
1:7c9fec6:         SimpleJmsTopicConnector jmsTopicConnector = new SimpleJmsTopicConnector();
1:bc78238:         jmsTopicConnector.setOutboundTopicBridges(
1:bc78238:             new OutboundTopicBridge[] {new OutboundTopicBridge("RECONNECT.TEST.TOPIC")});
1:bc78238:         jmsTopicConnector.setOutboundTopicConnectionFactory(
1:bc78238:             new ActiveMQConnectionFactory("tcp://localhost:61617"));
1:bc78238: 
1:bc78238:         broker.setJmsBridgeConnectors(new JmsConnector[]{jmsTopicConnector});
1:bc78238: 
1:bc78238:         return broker;
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected BrokerService createSecondBroker() throws Exception {
1:bc78238:         BrokerService broker = new BrokerService();
1:bc78238:         broker.setBrokerName("broker2");
1:bc78238:         broker.setPersistent(false);
1:cf750d5:         broker.setUseJmx(true);
1:cf750d5:         broker.getManagementContext().setCreateConnector(false);
1:bc78238:         broker.addConnector("tcp://localhost:61617");
1:bc78238:         broker.addConnector("vm://broker2");
1:bc78238: 
1:bc78238:         return broker;
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected ActiveMQConnectionFactory createProducerConnectionFactory() {
1:bc78238:         return new ActiveMQConnectionFactory("vm://broker1");
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
1:bc78238:         return new ActiveMQConnectionFactory("vm://broker2");
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void sendMessage(String text) throws JMSException {
1:bc78238:         Connection connection = null;
1:bc78238:         try {
1:bc78238:             connection = producerConnectionFactory.createConnection();
1:bc78238:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:             MessageProducer producer = session.createProducer(destination);
1:bc78238:             TextMessage message = session.createTextMessage();
1:bc78238:             message.setText(text);
1:bc78238:             producer.send(message);
1:bc78238:         } finally {
1:bc78238:             try {
1:bc78238:                 connection.close();
1:bc78238:             } catch (Throwable ignore) {
1:bc78238:             }
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected MessageConsumer createConsumer() throws JMSException {
1:bc78238:         Connection connection = consumerConnectionFactory.createConnection();
1:bc78238:         connections.add(connection);
1:bc78238:         connection.start();
1:bc78238: 
1:bc78238:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:         return session.createConsumer(destination);
1:bc78238:     }
1:bc78238: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:cf750d5
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToProducerBroker().getTopicSubscribers().length > 0;
1:             }
1:         }));
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToProducerBroker().getTopicSubscribers().length > 0;
1:             }
1:         }));
1: 
/////////////////////////////////////////////////////////////////////////
1:         final BrokerViewMBean producerBrokerView = getProxyToProducerBroker();
1:         assertTrue("Should have a bridge to the topic", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return producerBrokerView.getTopicSubscribers().length > 0;
1:             }
1:         }));
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerViewMBean getProxyToProducerBroker() throws Exception {
1:         if (producerBroker == null) {
1:             throw new IllegalStateException("Producer broker is not running.");
1:         }
1: 
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=" + producerBroker.getBrokerName());
1:         BrokerViewMBean proxy = (BrokerViewMBean) producerBroker.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected BrokerViewMBean getProxyToConsumerBroker() throws Exception {
1:         if (producerBroker == null) {
1:             throw new IllegalStateException("Consumer broker is not running.");
1:         }
1: 
1:         ObjectName brokerViewMBean = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=" + consumerBroker.getBrokerName());
1:         BrokerViewMBean proxy = (BrokerViewMBean) consumerBroker.getManagementContext()
1:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
commit:ef24cc9
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
0: import static org.junit.Assert.*;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
1: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * These test cases are used to verify that queue outbound bridge connections get
1:  * re-established in all broker restart scenarios. This is possible when the
1:  * outbound bridge is configured using the failover URI with a timeout.
1:  */
1: public class TopicOutboundBridgeReconnectTest {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(TopicOutboundBridgeReconnectTest.class);
1: 
1:     private BrokerService producerBroker;
1:     private BrokerService consumerBroker;
1:     private ActiveMQConnectionFactory producerConnectionFactory;
1:     private ActiveMQConnectionFactory consumerConnectionFactory;
1:     private Destination destination;
0:     private ArrayList<Connection> connections = new ArrayList<Connection>();
1: 
1:     @Test
1:     public void testMultipleProducerBrokerRestarts() throws Exception {
1:         for (int i = 0; i < 10; i++) {
1:             testWithProducerBrokerRestart();
1:             disposeConsumerConnections();
1:         }
1:     }
1: 
1:     @Test
1:     public void testWithoutRestartsConsumerFirst() throws Exception {
1:         startConsumerBroker();
1:         startProducerBroker();
1: 
1:         MessageConsumer consumer = createConsumer();
1: 
1:         sendMessage("test123");
1:         sendMessage("test456");
1:         Message message = consumer.receive(2000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage)message).getText());
1: 
1:         message = consumer.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test456", ((TextMessage)message).getText());
1: 
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testWithoutRestartsProducerFirst() throws Exception {
1:         startProducerBroker();
1:         sendMessage("test123");
1: 
1:         startConsumerBroker();
1: 
1:         // unless using a failover URI, the first attempt of this send will likely fail, so increase the timeout below
1:         // to give the bridge time to recover
1:         sendMessage("test456");
1: 
1:         MessageConsumer consumer = createConsumer();
1:         Message message = consumer.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage) message).getText());
1: 
1:         message = consumer.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test456", ((TextMessage) message).getText());
1: 
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testWithProducerBrokerRestart() throws Exception {
1:         startProducerBroker();
1:         startConsumerBroker();
1: 
1:         MessageConsumer consumer = createConsumer();
1: 
1:         sendMessage("test123");
1:         Message message = consumer.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage)message).getText());
1:         assertNull(consumer.receiveNoWait());
1: 
1:         // Restart the first broker...
1:         stopProducerBroker();
1:         startProducerBroker();
1: 
1:         sendMessage("test123");
1:         message = consumer.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage)message).getText());
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testWithConsumerBrokerRestart() throws Exception {
1:         startProducerBroker();
1:         startConsumerBroker();
1: 
1:         final MessageConsumer consumer1 = createConsumer();
1: 
1:         sendMessage("test123");
1:         Message message = consumer1.receive(5000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage)message).getText());
1:         assertNull(consumer1.receiveNoWait());
1:         consumer1.close();
1: 
1:         // Restart the first broker...
1:         stopConsumerBroker();
1:         startConsumerBroker();
1: 
1:         // unless using a failover URI, the first attempt of this send will likely fail, so increase the timeout below
1:         // to give the bridge time to recover
1:         sendMessage("test123");
1: 
1:         final MessageConsumer consumer2 = createConsumer();
1:         assertTrue("Expected recover and delivery failed", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = consumer2.receiveNoWait();
1:                 if (message == null || !((TextMessage)message).getText().equals("test123")) {
1:                     return false;
1:                 }
1:                 return true;
1:             }
1:         }));
1:         assertNull(consumer2.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testWithConsumerBrokerStartDelay() throws Exception {
1:         startConsumerBroker();
1:         final MessageConsumer consumer = createConsumer();
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         startProducerBroker();
1: 
1:         sendMessage("test123");
1:         assertTrue("Expected recover and delivery failed", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = consumer.receiveNoWait();
1:                 if (message == null || !((TextMessage)message).getText().equals("test123")) {
1:                     return false;
1:                 }
1:                 return true;
1:             }
1:         }));
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Test
1:     public void testWithProducerBrokerStartDelay() throws Exception {
1:         startProducerBroker();
1: 
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         startConsumerBroker();
1:         MessageConsumer consumer = createConsumer();
1: 
1:         sendMessage("test123");
1:         Message message = consumer.receive(2000);
1:         assertNotNull(message);
1:         assertEquals("test123", ((TextMessage)message).getText());
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         producerConnectionFactory = createProducerConnectionFactory();
1:         consumerConnectionFactory = createConsumerConnectionFactory();
1:         destination = new ActiveMQTopic("RECONNECT.TEST.TOPIC");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         disposeConsumerConnections();
1:         try {
1:             stopProducerBroker();
1:         } catch (Throwable e) {
1:         }
1:         try {
1:             stopConsumerBroker();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void disposeConsumerConnections() {
1:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:             Connection connection = iter.next();
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected void startProducerBroker() throws Exception {
1:         if (producerBroker == null) {
1:             producerBroker = createFirstBroker();
1:             producerBroker.start();
1:         }
1:     }
1: 
1:     protected void stopProducerBroker() throws Exception {
1:         if (producerBroker != null) {
1:             producerBroker.stop();
1:             producerBroker = null;
1:         }
1:     }
1: 
1:     protected void startConsumerBroker() throws Exception {
1:         if (consumerBroker == null) {
1:             consumerBroker = createSecondBroker();
1:             consumerBroker.start();
1:         }
1:     }
1: 
1:     protected void stopConsumerBroker() throws Exception {
1:         if (consumerBroker != null) {
1:             consumerBroker.stop();
1:             consumerBroker = null;
1:         }
1:     }
1: 
1:     protected BrokerService createFirstBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("broker1");
1:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:61616");
1:         broker.addConnector("vm://broker1");
1: 
0:         JmsTopicConnector jmsTopicConnector = new JmsTopicConnector();
1:         jmsTopicConnector.setOutboundTopicBridges(
1:             new OutboundTopicBridge[] {new OutboundTopicBridge("RECONNECT.TEST.TOPIC")});
1:         jmsTopicConnector.setOutboundTopicConnectionFactory(
1:             new ActiveMQConnectionFactory("tcp://localhost:61617"));
1: 
1:         broker.setJmsBridgeConnectors(new JmsConnector[]{jmsTopicConnector});
1: 
1:         return broker;
1:     }
1: 
1:     protected BrokerService createSecondBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("broker2");
1:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:61617");
1:         broker.addConnector("vm://broker2");
1: 
1:         return broker;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createProducerConnectionFactory() {
1:         return new ActiveMQConnectionFactory("vm://broker1");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConsumerConnectionFactory() {
1:         return new ActiveMQConnectionFactory("vm://broker2");
1:     }
1: 
1:     protected void sendMessage(String text) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = producerConnectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             TextMessage message = session.createTextMessage();
1:             message.setText(text);
1:             producer.send(message);
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected MessageConsumer createConsumer() throws JMSException {
1:         Connection connection = consumerConnectionFactory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session.createConsumer(destination);
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
/////////////////////////////////////////////////////////////////////////
1:         SimpleJmsTopicConnector jmsTopicConnector = new SimpleJmsTopicConnector();
============================================================================