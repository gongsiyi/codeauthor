1:59cd018: /**
1:59cd018:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:59cd018:  * contributor license agreements.  See the NOTICE file distributed with
1:59cd018:  * this work for additional information regarding copyright ownership.
1:59cd018:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:59cd018:  * (the "License"); you may not use this file except in compliance with
1:59cd018:  * the License.  You may obtain a copy of the License at
1:59cd018:  *
1:59cd018:  *      http://www.apache.org/licenses/LICENSE-2.0
1:59cd018:  *
1:59cd018:  * Unless required by applicable law or agreed to in writing, software
1:59cd018:  * distributed under the License is distributed on an "AS IS" BASIS,
1:59cd018:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:59cd018:  * See the License for the specific language governing permissions and
1:59cd018:  * limitations under the License.
1:59cd018:  */
1:59cd018: 
1:59cd018: package org.apache.activemq.security;
1:59cd018: 
1:59cd018: import java.net.URL;
1:59cd018: import java.security.cert.X509Certificate;
1:59cd018: import java.util.HashMap;
1:59cd018: import javax.management.remote.JMXPrincipal;
1:59cd018: import javax.security.auth.Subject;
1:59cd018: import javax.security.auth.login.LoginException;
1:59cd018: import org.apache.activemq.jaas.CertificateLoginModule;
1:59cd018: import org.apache.activemq.jaas.JaasCertificateCallbackHandler;
1:59cd018: import org.apache.activemq.jaas.PropertiesLoader;
1:59cd018: import org.apache.activemq.jaas.TextFileCertificateLoginModule;
1:59cd018: import org.apache.activemq.transport.tcp.StubX509Certificate;
1:59cd018: import org.junit.After;
1:59cd018: import org.junit.Before;
1:59cd018: import org.junit.Test;
1:59cd018: import org.slf4j.Logger;
1:59cd018: import org.slf4j.LoggerFactory;
1:59cd018: 
1:59cd018: public class TextFileCertificateLoginModuleTest {
1:59cd018: 
1:59cd018:     private static final String CERT_USERS_FILE_SMALL = "cert-users-SMALL.properties";
1:59cd018:     private static final String CERT_USERS_FILE_LARGE = "cert-users-LARGE.properties";
1:59cd018:     private static final String CERT_GROUPS_FILE = "cert-groups.properties";
1:59cd018: 
1:59cd018:     private static final Logger LOG = LoggerFactory.getLogger(TextFileCertificateLoginModuleTest.class);
1:59cd018:     private static final int NUMBER_SUBJECTS = 10;
1:59cd018: 
1:59cd018:     static {
1:59cd018:         String path = System.getProperty("java.security.auth.login.config");
1:59cd018:         if (path == null) {
1:59cd018:             URL resource = TextFileCertificateLoginModuleTest.class.getClassLoader().getResource("login.config");
1:59cd018:             if (resource != null) {
1:59cd018:                 path = resource.getFile();
1:59cd018:                 System.setProperty("java.security.auth.login.config", path);
1:59cd018:             }
1:59cd018:         }
1:59cd018:     }
1:59cd018: 
1:59cd018:     private CertificateLoginModule loginModule;
1:59cd018: 
1:59cd018:     @Before
1:59cd018:     public void setUp() throws Exception {
1:59cd018:         loginModule = new TextFileCertificateLoginModule();
1:59cd018:     }
1:59cd018: 
1:59cd018:     @After
1:59cd018:     public void tearDown() throws Exception {
1:59cd018:         PropertiesLoader.resetUsersAndGroupsCache();
1:59cd018:     }
1:59cd018: 
1:59cd018:     @Test
1:59cd018:     public void testLoginWithSMALLUsersFile() throws Exception {
1:59cd018:         loginTest(CERT_USERS_FILE_SMALL, CERT_GROUPS_FILE);
1:59cd018:     }
1:59cd018: 
1:59cd018:     @Test
1:59cd018:     public void testLoginWithLARGEUsersFile() throws Exception {
1:59cd018:         loginTest(CERT_USERS_FILE_LARGE, CERT_GROUPS_FILE);
1:59cd018:     }
1:59cd018: 
1:59cd018:     private void loginTest(String usersFiles, String groupsFile) throws LoginException {
1:59cd018: 
1:59cd018:         HashMap options = new HashMap<String, String>();
1:59cd018:         options.put("org.apache.activemq.jaas.textfiledn.user", usersFiles);
1:59cd018:         options.put("org.apache.activemq.jaas.textfiledn.group", groupsFile);
1:59cd018:         options.put("reload", "true");
1:59cd018: 
1:59cd018:         JaasCertificateCallbackHandler[] callbackHandlers = new JaasCertificateCallbackHandler[NUMBER_SUBJECTS];
1:59cd018:         Subject[] subjects = new Subject[NUMBER_SUBJECTS];
1:59cd018: 
1:59cd018:         for (int i = 0; i < callbackHandlers.length; i++) {
1:59cd018:             callbackHandlers[i] = getJaasCertificateCallbackHandler("DN=TEST_USER_" + (i + 1));
1:59cd018:         }
1:59cd018: 
1:59cd018:         long startTime = System.currentTimeMillis();
1:59cd018: 
1:59cd018:         for (int outer=0; outer<500;outer++) {
1:59cd018:             for (int i = 0; i < NUMBER_SUBJECTS; i++) {
1:59cd018:                 Subject subject = doAuthenticate(options, callbackHandlers[i]);
1:59cd018:                 subjects[i] = subject;
1:59cd018:             }
1:59cd018:         }
1:59cd018: 
1:59cd018:         long endTime = System.currentTimeMillis();
1:59cd018:         long timeTaken = endTime - startTime;
1:59cd018: 
1:59cd018: 
1:59cd018:         for (int i = 0; i < NUMBER_SUBJECTS; i++) {
1:59cd018:             LOG.info("subject is: " + subjects[i].getPrincipals().toString());
1:59cd018:         }
1:59cd018: 
1:59cd018:         LOG.info(usersFiles + ": Time taken is " + timeTaken);
1:59cd018: 
1:59cd018:     }
1:59cd018: 
1:59cd018:     private JaasCertificateCallbackHandler getJaasCertificateCallbackHandler(String user) {
1:59cd018:         JMXPrincipal principal = new JMXPrincipal(user);
1:59cd018:         X509Certificate cert = new StubX509Certificate(principal);
1:59cd018:         return new JaasCertificateCallbackHandler(new X509Certificate[]{cert});
1:59cd018:     }
1:59cd018: 
1:59cd018:     private Subject doAuthenticate(HashMap options, JaasCertificateCallbackHandler callbackHandler) throws LoginException {
1:59cd018:         Subject mySubject = new Subject();
1:59cd018:         loginModule.initialize(mySubject, callbackHandler, null, options);
1:59cd018:         loginModule.login();
1:59cd018:         loginModule.commit();
1:59cd018:         return mySubject;
1:59cd018: 
1:59cd018:     }
1:59cd018: 
1:59cd018: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
1: import java.net.URL;
1: import java.security.cert.X509Certificate;
1: import java.util.HashMap;
1: import javax.management.remote.JMXPrincipal;
1: import javax.security.auth.Subject;
1: import javax.security.auth.login.LoginException;
1: import org.apache.activemq.jaas.CertificateLoginModule;
1: import org.apache.activemq.jaas.JaasCertificateCallbackHandler;
1: import org.apache.activemq.jaas.PropertiesLoader;
1: import org.apache.activemq.jaas.TextFileCertificateLoginModule;
1: import org.apache.activemq.transport.tcp.StubX509Certificate;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class TextFileCertificateLoginModuleTest {
1: 
1:     private static final String CERT_USERS_FILE_SMALL = "cert-users-SMALL.properties";
1:     private static final String CERT_USERS_FILE_LARGE = "cert-users-LARGE.properties";
1:     private static final String CERT_GROUPS_FILE = "cert-groups.properties";
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(TextFileCertificateLoginModuleTest.class);
1:     private static final int NUMBER_SUBJECTS = 10;
1: 
1:     static {
1:         String path = System.getProperty("java.security.auth.login.config");
1:         if (path == null) {
1:             URL resource = TextFileCertificateLoginModuleTest.class.getClassLoader().getResource("login.config");
1:             if (resource != null) {
1:                 path = resource.getFile();
1:                 System.setProperty("java.security.auth.login.config", path);
1:             }
1:         }
1:     }
1: 
1:     private CertificateLoginModule loginModule;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         loginModule = new TextFileCertificateLoginModule();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         PropertiesLoader.resetUsersAndGroupsCache();
1:     }
1: 
1:     @Test
1:     public void testLoginWithSMALLUsersFile() throws Exception {
1:         loginTest(CERT_USERS_FILE_SMALL, CERT_GROUPS_FILE);
1:     }
1: 
1:     @Test
1:     public void testLoginWithLARGEUsersFile() throws Exception {
1:         loginTest(CERT_USERS_FILE_LARGE, CERT_GROUPS_FILE);
1:     }
1: 
1:     private void loginTest(String usersFiles, String groupsFile) throws LoginException {
1: 
1:         HashMap options = new HashMap<String, String>();
1:         options.put("org.apache.activemq.jaas.textfiledn.user", usersFiles);
1:         options.put("org.apache.activemq.jaas.textfiledn.group", groupsFile);
1:         options.put("reload", "true");
1: 
1:         JaasCertificateCallbackHandler[] callbackHandlers = new JaasCertificateCallbackHandler[NUMBER_SUBJECTS];
1:         Subject[] subjects = new Subject[NUMBER_SUBJECTS];
1: 
1:         for (int i = 0; i < callbackHandlers.length; i++) {
1:             callbackHandlers[i] = getJaasCertificateCallbackHandler("DN=TEST_USER_" + (i + 1));
1:         }
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         for (int outer=0; outer<500;outer++) {
1:             for (int i = 0; i < NUMBER_SUBJECTS; i++) {
1:                 Subject subject = doAuthenticate(options, callbackHandlers[i]);
1:                 subjects[i] = subject;
1:             }
1:         }
1: 
1:         long endTime = System.currentTimeMillis();
1:         long timeTaken = endTime - startTime;
1: 
1: 
1:         for (int i = 0; i < NUMBER_SUBJECTS; i++) {
1:             LOG.info("subject is: " + subjects[i].getPrincipals().toString());
1:         }
1: 
1:         LOG.info(usersFiles + ": Time taken is " + timeTaken);
1: 
1:     }
1: 
1:     private JaasCertificateCallbackHandler getJaasCertificateCallbackHandler(String user) {
1:         JMXPrincipal principal = new JMXPrincipal(user);
1:         X509Certificate cert = new StubX509Certificate(principal);
1:         return new JaasCertificateCallbackHandler(new X509Certificate[]{cert});
1:     }
1: 
1:     private Subject doAuthenticate(HashMap options, JaasCertificateCallbackHandler callbackHandler) throws LoginException {
1:         Subject mySubject = new Subject();
1:         loginModule.initialize(mySubject, callbackHandler, null, options);
1:         loginModule.login();
1:         loginModule.commit();
1:         return mySubject;
1: 
1:     }
1: 
1: }
============================================================================