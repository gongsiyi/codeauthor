1:d3d58fe: /**
1:d3d58fe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d3d58fe:  * contributor license agreements.  See the NOTICE file distributed with
1:d3d58fe:  * this work for additional information regarding copyright ownership.
1:d3d58fe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d3d58fe:  * (the "License"); you may not use this file except in compliance with
1:d3d58fe:  * the License.  You may obtain a copy of the License at
1:d3d58fe:  *
1:d3d58fe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d3d58fe:  *
1:d3d58fe:  * Unless required by applicable law or agreed to in writing, software
1:d3d58fe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d3d58fe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d3d58fe:  * See the License for the specific language governing permissions and
1:d3d58fe:  * limitations under the License.
1:d3d58fe:  */
1:d3d58fe: package org.apache.activemq.transport.discovery;
1:9ecc679: 
1:bd1b10c: import java.net.URI;
1:9ecc679: import java.util.Map;
1:bd1b10c: import java.util.Vector;
1:9ecc679: 
1:d3d58fe: import javax.jms.Connection;
1:d3d58fe: import javax.jms.JMSException;
1:9ecc679: 
1:d3d58fe: import org.apache.activemq.ActiveMQConnectionFactory;
1:d3d58fe: import org.apache.activemq.CombinationTestSupport;
1:bd1b10c: import org.apache.activemq.broker.BrokerService;
1:bd1b10c: import org.apache.activemq.broker.TransportConnector;
1:9ecc679: import org.apache.activemq.command.DiscoveryEvent;
1:9ecc679: import org.apache.activemq.transport.StubCompositeTransport;
1:9ecc679: import org.apache.activemq.util.URISupport;
1:9ecc679: import org.apache.activemq.util.URISupport.CompositeData;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:9ecc679: 
1:d3d58fe: public class DiscoveryTransportNoBrokerTest extends CombinationTestSupport {
1:9ecc679: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransportNoBrokerTest.class);
1:9ecc679: 
1:fa62da8:     @Override
1:fa62da8:     public void setUp() throws Exception {
1:fa62da8:         setAutoFail(true);
1:fa62da8:         super.setUp();
1:fa62da8:     }
1:fa62da8: 
1:bd1b10c:     public void testNoExtraThreads() throws Exception {
1:bd1b10c:         BrokerService broker = new BrokerService();
1:bd1b10c:         TransportConnector tcp = broker.addConnector("tcp://localhost:0?transport.closeAsync=false");
1:bd1b10c:         String group = "GR-" +  System.currentTimeMillis();
1:bd1b10c:         URI discoveryUri = new URI("multicast://default?group=" + group);
1:bd1b10c:         tcp.setDiscoveryUri(discoveryUri);
1:bd1b10c:         broker.start();
1:bd1b10c:         broker.waitUntilStarted();
1:fa62da8: 
1:bd1b10c:         Vector<String> existingNames = new Vector<String>();
1:bd1b10c:         Thread[] threads = getThreads();
1:bd1b10c:         for (Thread t : threads) {
1:bd1b10c:             existingNames.add(t.getName());
1:bd1b10c:         }
1:bd1b10c:         final int idleThreadCount = threads.length;
1:bd1b10c:         LOG.info("Broker started - thread Count:" + idleThreadCount);
1:fa62da8: 
1:bd1b10c:        final int noConnectionToCreate = 10;
1:bd1b10c:         for (int i=0; i<10;i++) {
1:fa62da8:             ActiveMQConnectionFactory factory =
1:f38cb58:                 new ActiveMQConnectionFactory("discovery:(multicast://239.255.2.3:6155?group=" + group +")?closeAsync=false&startupMaxReconnectAttempts=10&initialReconnectDelay=1000");
1:bd1b10c:             LOG.info("Connecting.");
1:bd1b10c:             Connection connection = factory.createConnection();
1:fa62da8:             connection.setClientID("test");
1:bd1b10c:             connection.close();
1:bd1b10c:         }
1:bd1b10c:         Thread.sleep(2000);
1:bd1b10c:         threads = getThreads();
1:bd1b10c:         for (Thread t : threads) {
1:bd1b10c:             if (!existingNames.contains(t.getName())) {
1:bd1b10c:                 LOG.info("Remaining thread:" + t);
1:bd1b10c:             }
1:bd1b10c:         }
1:bd1b10c:         assertTrue("no extra threads per connection", Thread.activeCount() - idleThreadCount < noConnectionToCreate);
1:bd1b10c:     }
1:fa62da8: 
1:fa62da8: 
1:bd1b10c:     private Thread[] getThreads() {
1:bd1b10c:         Thread[] threads = new Thread[Thread.activeCount()];
1:bd1b10c:         Thread.enumerate(threads);
1:bd1b10c:         return threads;
1:bd1b10c:     }
1:4fb190e: 
1:9ecc679: 
1:d3d58fe:     public void testMaxReconnectAttempts() throws JMSException {
1:d3d58fe:         try {
1:8469d75:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://doesNOTexist)");
1:8469d75:             LOG.info("Connecting.");
1:d3d58fe:             Connection connection = factory.createConnection();
1:bd1b10c:             connection.setClientID("test");
1:d3d58fe:             fail("Did not fail to connect as expected.");
1:9dec1b1:         }
1:c808beb:         catch ( JMSException expected ) {
1:9dec1b1:             assertTrue("reason is java.io.IOException, was: " + expected.getCause(), expected.getCause() instanceof java.io.IOException);
1:9dec1b1:         }
1:9dec1b1:     }
1:fa62da8: 
1:9dec1b1:     public void testInitialConnectDelayWithNoBroker() throws Exception {
1:9dec1b1:         // the initialReconnectDelay only kicks in once a set of connect URL have
1:9dec1b1:         // been returned from the discovery agent.
1:9dec1b1:         // Up to that point the reconnectDelay is used which has a default value of 10
1:9dec1b1:         //
1:9dec1b1:         long initialReconnectDelay = 4000;
1:9dec1b1:         long startT = System.currentTimeMillis();
1:9dec1b1:         String groupId = "WillNotMatch" + startT;
1:9dec1b1:         try {
1:fa62da8:             String urlStr = "discovery:(multicast://default?group=" + groupId +
1:986ed14:                 ")?useExponentialBackOff=false&maxReconnectAttempts=2&reconnectDelay=" + initialReconnectDelay;
1:9dec1b1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(urlStr);
1:9dec1b1:             LOG.info("Connecting.");
1:9dec1b1:             Connection connection = factory.createConnection();
1:9dec1b1:             connection.setClientID("test");
1:9dec1b1:             fail("Did not fail to connect as expected.");
1:c808beb:         } catch ( JMSException expected ) {
1:0bfb28a:             assertTrue("reason is java.io.IOException, was: " + expected.getCause(), expected.getCause() instanceof java.io.IOException);
1:9dec1b1:             long duration = System.currentTimeMillis() - startT;
1:c808beb:             assertTrue("took at least initialReconnectDelay time: " + duration + " e:" + expected, duration >= initialReconnectDelay);
1:d3d58fe:         }
1:d3d58fe:     }
1:fa62da8: 
1:9ecc679:     public void testSetDiscoveredBrokerProperties() throws Exception {
1:9ecc679:         final String extraParameterName = "connectionTimeout";
1:9ecc679:         final String extraParameterValue = "3000";
1:986ed14:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&"
1:986ed14:                 + DiscoveryListener.DISCOVERED_OPTION_PREFIX + extraParameterName + "=" + extraParameterValue);
1:9ecc679:         CompositeData compositeData = URISupport.parseComposite(uri);
1:fa62da8: 
1:fa62da8:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1:330c9a8:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
1:fa62da8: 
1:fa62da8:         discoveryTransport.onServiceAdd(new DiscoveryEvent("tcp://localhost:61616"));
1:9ecc679:         assertEquals("expected added URI after discovery event", compositeTransport.getTransportURIs().length, 1);
1:fa62da8: 
1:9ecc679:         URI discoveredServiceURI = compositeTransport.getTransportURIs()[0];
1:784b93d:         Map<String, String> parameters = URISupport.parseParameters(discoveredServiceURI);
1:9ecc679:         assertTrue("unable to add parameter to discovered service", parameters.containsKey(extraParameterName));
1:9ecc679:         assertEquals("incorrect value for parameter added to discovered service", parameters.get(extraParameterName), extraParameterValue);
1:9ecc679:     }
1:fa62da8: 
1:4fb190e:     public void testSetDiscoveredStaticBrokerProperties() throws Exception {
1:4fb190e:         final String extraParameterName = "connectionTimeout";
1:4fb190e:         final String extraParameterValue = "3000";
1:4fb190e:         final URI uri = new URI("discovery:(static:tcp://localhost:61616)?initialReconnectDelay=100&"
1:4fb190e:                 + DiscoveryListener.DISCOVERED_OPTION_PREFIX + extraParameterName + "=" + extraParameterValue);
1:4fb190e:         CompositeData compositeData = URISupport.parseComposite(uri);
1:4fb190e: 
1:4fb190e:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1:4fb190e:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
1:4fb190e: 
1:4fb190e:         discoveryTransport.start();
1:4fb190e:         assertEquals("expected added URI after discovery event", 1, compositeTransport.getTransportURIs().length);
1:4fb190e: 
1:4fb190e:         URI discoveredServiceURI = compositeTransport.getTransportURIs()[0];
1:4fb190e:         Map<String, String> parameters = URISupport.parseParameters(discoveredServiceURI);
1:4fb190e:         assertTrue("unable to add parameter to discovered service", parameters.containsKey(extraParameterName));
1:4fb190e:         assertEquals("incorrect value for parameter added to discovered service", parameters.get(extraParameterName), extraParameterValue);
1:4fb190e:     }
1:4fb190e: 
1:9ecc679:     public void testAddRemoveDiscoveredBroker() throws Exception {
1:fa62da8:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&connectionTimeout=3000");
1:9ecc679:         CompositeData compositeData = URISupport.parseComposite(uri);
1:fa62da8: 
1:fa62da8:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1:330c9a8:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
1:9ecc679: 
1:9ecc679:         final String serviceName = "tcp://localhost:61616";
1:fa62da8:         discoveryTransport.onServiceAdd(new DiscoveryEvent(serviceName));
1:9ecc679:         assertEquals("expected added URI after discovery event", 1, compositeTransport.getTransportURIs().length);
1:fa62da8: 
1:fa62da8:         discoveryTransport.onServiceRemove(new DiscoveryEvent(serviceName));
1:9ecc679:         assertEquals("expected URI removed after discovery event", 0, compositeTransport.getTransportURIs().length);
1:9ecc679:     }
1:d3d58fe: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f38cb58
/////////////////////////////////////////////////////////////////////////
1:                 new ActiveMQConnectionFactory("discovery:(multicast://239.255.2.3:6155?group=" + group +")?closeAsync=false&startupMaxReconnectAttempts=10&initialReconnectDelay=1000");
commit:c9c1f58
/////////////////////////////////////////////////////////////////////////
0:                 new ActiveMQConnectionFactory("discovery:(multicast://239.255.2.3:6155?group=" + group +")?closeAsync=false&startupMaxReconnectAttempts=5");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:fa62da8
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             ActiveMQConnectionFactory factory =
1:             connection.setClientID("test");
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             String urlStr = "discovery:(multicast://default?group=" + groupId +
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1: 
1:         discoveryTransport.onServiceAdd(new DiscoveryEvent("tcp://localhost:61616"));
1: 
/////////////////////////////////////////////////////////////////////////
1:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&connectionTimeout=3000");
1: 
1:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1: 
1:         discoveryTransport.onServiceAdd(new DiscoveryEvent(serviceName));
1: 
1:         discoveryTransport.onServiceRemove(new DiscoveryEvent(serviceName));
author:Gary Tully
-------------------------------------------------------------------------------
commit:4fb190e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSetDiscoveredStaticBrokerProperties() throws Exception {
1:         final String extraParameterName = "connectionTimeout";
1:         final String extraParameterValue = "3000";
1:         final URI uri = new URI("discovery:(static:tcp://localhost:61616)?initialReconnectDelay=100&"
1:                 + DiscoveryListener.DISCOVERED_OPTION_PREFIX + extraParameterName + "=" + extraParameterValue);
1:         CompositeData compositeData = URISupport.parseComposite(uri);
1: 
1:         StubCompositeTransport compositeTransport = new StubCompositeTransport();
1:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
1: 
1:         discoveryTransport.start();
1:         assertEquals("expected added URI after discovery event", 1, compositeTransport.getTransportURIs().length);
1: 
1:         URI discoveredServiceURI = compositeTransport.getTransportURIs()[0];
1:         Map<String, String> parameters = URISupport.parseParameters(discoveredServiceURI);
1:         assertTrue("unable to add parameter to discovered service", parameters.containsKey(extraParameterName));
1:         assertEquals("incorrect value for parameter added to discovered service", parameters.get(extraParameterName), extraParameterValue);
1:     }
1: 
commit:986ed14
/////////////////////////////////////////////////////////////////////////
1:                 ")?useExponentialBackOff=false&maxReconnectAttempts=2&reconnectDelay=" + initialReconnectDelay;
/////////////////////////////////////////////////////////////////////////
1:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&"
1:                 + DiscoveryListener.DISCOVERED_OPTION_PREFIX + extraParameterName + "=" + extraParameterValue);
commit:9ecc679
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.StubCompositeTransport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.util.URISupport.CompositeData;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSetDiscoveredBrokerProperties() throws Exception {
1:         final String extraParameterName = "connectionTimeout";
1:         final String extraParameterValue = "3000";
0:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&" + extraParameterName + "=" + extraParameterValue);        
1:         CompositeData compositeData = URISupport.parseComposite(uri);
1:         
0:         StubCompositeTransport compositeTransport = new StubCompositeTransport();      
0:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData);
1:         
0:         discoveryTransport.onServiceAdd(new DiscoveryEvent("tcp://localhost:61616"));        
1:         assertEquals("expected added URI after discovery event", compositeTransport.getTransportURIs().length, 1);
1:         
1:         URI discoveredServiceURI = compositeTransport.getTransportURIs()[0];
0:         Map<String, String> parameters = URISupport.parseParamters(discoveredServiceURI);
1:         assertTrue("unable to add parameter to discovered service", parameters.containsKey(extraParameterName));
1:         assertEquals("incorrect value for parameter added to discovered service", parameters.get(extraParameterName), extraParameterValue);
1:     }
1:     
1:     public void testAddRemoveDiscoveredBroker() throws Exception {
0:         final URI uri = new URI("discovery:(multicast://default)?initialReconnectDelay=100&connectionTimeout=3000");        
1:         CompositeData compositeData = URISupport.parseComposite(uri);
1:         
0:         StubCompositeTransport compositeTransport = new StubCompositeTransport();      
0:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData);
1:         
1:         final String serviceName = "tcp://localhost:61616";
0:         discoveryTransport.onServiceAdd(new DiscoveryEvent(serviceName));        
1:         assertEquals("expected added URI after discovery event", 1, compositeTransport.getTransportURIs().length);
1:         
0:         discoveryTransport.onServiceRemove(new DiscoveryEvent(serviceName));        
1:         assertEquals("expected URI removed after discovery event", 0, compositeTransport.getTransportURIs().length);
1:     }
commit:c808beb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         catch ( JMSException expected ) {
/////////////////////////////////////////////////////////////////////////
1:         } catch ( JMSException expected ) {
1:             assertTrue("took at least initialReconnectDelay time: " + duration + " e:" + expected, duration >= initialReconnectDelay);
commit:bd1b10c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Vector;
0: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void testNoExtraThreads() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         TransportConnector tcp = broker.addConnector("tcp://localhost:0?transport.closeAsync=false");
1:         String group = "GR-" +  System.currentTimeMillis();
1:         URI discoveryUri = new URI("multicast://default?group=" + group);
1:         tcp.setDiscoveryUri(discoveryUri);
1:         broker.start();
1:         broker.waitUntilStarted();
0:         
1:         Vector<String> existingNames = new Vector<String>();
1:         Thread[] threads = getThreads();
1:         for (Thread t : threads) {
1:             existingNames.add(t.getName());
1:         }
1:         final int idleThreadCount = threads.length;
1:         LOG.info("Broker started - thread Count:" + idleThreadCount);
0:         
1:        final int noConnectionToCreate = 10;
1:         for (int i=0; i<10;i++) {
0:             ActiveMQConnectionFactory factory = 
0:                 new ActiveMQConnectionFactory("discovery:(multicast://239.255.2.3:6155?group=" + group +")?closeAsync=false");
1:             LOG.info("Connecting.");
1:             Connection connection = factory.createConnection();
1:             connection.setClientID("test");  
1:             connection.close();
1:         }
1:         Thread.sleep(2000);
1:         threads = getThreads();
1:         for (Thread t : threads) {
1:             if (!existingNames.contains(t.getName())) {
1:                 LOG.info("Remaining thread:" + t);
1:             }
1:         }
1:         assertTrue("no extra threads per connection", Thread.activeCount() - idleThreadCount < noConnectionToCreate);
1:     }
0:    
0:     
1:     private Thread[] getThreads() {
1:         Thread[] threads = new Thread[Thread.activeCount()];
1:         Thread.enumerate(threads);
1:         return threads;
1:     }
0: 
0: 
commit:9dec1b1
/////////////////////////////////////////////////////////////////////////
1:         }
0:         catch ( JMSException expected ) { 
1:             assertTrue("reason is java.io.IOException, was: " + expected.getCause(), expected.getCause() instanceof java.io.IOException);
1:         }
1:     }
0:     
1:     public void testInitialConnectDelayWithNoBroker() throws Exception {
1:         // the initialReconnectDelay only kicks in once a set of connect URL have
1:         // been returned from the discovery agent.
1:         // Up to that point the reconnectDelay is used which has a default value of 10
1:         //
1:         long initialReconnectDelay = 4000;
1:         long startT = System.currentTimeMillis();
1:         String groupId = "WillNotMatch" + startT;
1:         try {
0:             String urlStr = "discovery:(multicast://default?group=" + groupId + 
0:                 ")?useExponentialBackOff=false&maxReconnectAttempts=2&reconnectDelay=" + initialReconnectDelay;          
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(urlStr);
1:             LOG.info("Connecting.");
1:             Connection connection = factory.createConnection();
1:             connection.setClientID("test");
1:             fail("Did not fail to connect as expected.");
1:             long duration = System.currentTimeMillis() - startT;
0:             assertTrue("took at least initialReconnectDelay time: " + duration, duration >= initialReconnectDelay);
commit:0bfb28a
/////////////////////////////////////////////////////////////////////////
0:         } catch ( JMSException expected ) { 
1:             assertTrue("reason is java.io.IOException, was: " + expected.getCause(), expected.getCause() instanceof java.io.IOException);
commit:8469d75
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(DiscoveryTransportNoBrokerTest.class);
0:     
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://doesNOTexist)");
1:             LOG.info("Connecting.");
0:         } catch ( JMSException expected ) {  
0:             assertTrue("reason is  java.net.UnknownHostException", expected.getCause() instanceof  java.net.UnknownHostException);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:330c9a8
/////////////////////////////////////////////////////////////////////////
1:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
/////////////////////////////////////////////////////////////////////////
1:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(compositeTransport, compositeData, compositeData.getParameters());
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscoveryTransportNoBrokerTest.class);
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> parameters = URISupport.parseParameters(discoveredServiceURI);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d3d58fe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
0: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
0: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
0: 
1: public class DiscoveryTransportNoBrokerTest extends CombinationTestSupport {
0: 
1:     public void testMaxReconnectAttempts() throws JMSException {
0:         long start = System.currentTimeMillis();
1:         try {
0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("discovery:(multicast://doesNOTexist)?maxReconnectAttempts=1");
0:             System.out.println("Connecting.");
1:             Connection connection = factory.createConnection();
0:             connection.setClientID("test");
1:             fail("Did not fail to connect as expected.");
0:         } catch ( JMSException expected ) {       
0:             long duration = System.currentTimeMillis() - start;
0:             // Should have failed fairly quickly since we are only giving it 1 reconnect attempt.
0:             assertTrue(duration < 1000*5 );
1:         }
1:     }
0: 
1: }
============================================================================