1:3306467: /**
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
1:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
1:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
1:3306467: 
1:3306467: import java.util.ArrayList;
1:3306467: import java.util.List;
1:3306467: 
1:3306467: import org.apache.activemq.command.Command;
1:3306467: import org.apache.activemq.transport.amqp.ResponseHandler;
1:3306467: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:3306467: import org.apache.qpid.proton.engine.Link;
1:3306467: import org.apache.qpid.proton.engine.Sender;
1:3306467: 
1:3306467: /**
1:3306467:  * Abstract AmqpLink implementation that provide basic Link services.
1:3306467:  */
1:3306467: public abstract class AmqpAbstractLink<LINK_TYPE extends Link> implements AmqpLink {
1:3306467: 
1:3306467:     protected final AmqpSession session;
1:3306467:     protected final LINK_TYPE endpoint;
1:3306467: 
1:3306467:     protected boolean closed;
1:3306467:     protected boolean opened;
1:3306467:     protected List<Runnable> closeActions = new ArrayList<Runnable>();
1:3306467: 
1:3306467:     /**
1:3306467:      * Creates a new AmqpLink type.
1:3306467:      *
1:3306467:      * @param session
1:3306467:      *        the AmqpSession that servers as the parent of this Link.
1:3306467:      * @param endpoint
1:3306467:      *        the link endpoint this object represents.
1:3306467:      */
1:3306467:     public AmqpAbstractLink(AmqpSession session, LINK_TYPE endpoint) {
1:3306467:         this.session = session;
1:3306467:         this.endpoint = endpoint;
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void open() {
1:3306467:         if (!opened) {
1:3306467:             getEndpoint().setContext(this);
1:3306467:             getEndpoint().open();
1:3306467: 
1:3306467:             opened = true;
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void detach() {
1:3306467:         if (!closed) {
1:3306467:             if (getEndpoint() != null) {
1:3306467:                 getEndpoint().setContext(null);
1:3306467:                 getEndpoint().detach();
1:3306467:                 getEndpoint().free();
1:3306467:             }
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void close(ErrorCondition error) {
1:3306467:         if (!closed) {
1:3306467: 
1:3306467:             if (getEndpoint() != null) {
1:3306467:                 if (getEndpoint() instanceof Sender) {
1:3306467:                     getEndpoint().setSource(null);
1:3306467:                 } else {
1:3306467:                     getEndpoint().setTarget(null);
1:3306467:                 }
1:3306467:                 getEndpoint().setCondition(error);
1:3306467:             }
1:3306467: 
1:3306467:             close();
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void close() {
1:3306467:         if (!closed) {
1:3306467: 
1:3306467:             if (getEndpoint() != null) {
1:3306467:                 getEndpoint().setContext(null);
1:3306467:                 getEndpoint().close();
1:3306467:                 getEndpoint().free();
1:3306467:             }
1:3306467: 
1:3306467:             for (Runnable action : closeActions) {
1:3306467:                 action.run();
1:3306467:             }
1:3306467: 
1:3306467:             closeActions.clear();
1:3306467:             opened = false;
1:3306467:             closed = true;
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * @return true if this link has already been opened.
1:3306467:      */
1:3306467:     public boolean isOpened() {
1:3306467:         return opened;
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * @return true if this link has already been closed.
1:3306467:      */
1:3306467:     public boolean isClosed() {
1:3306467:         return closed;
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * @return the Proton Link type this link represents.
1:3306467:      */
1:3306467:     public LINK_TYPE getEndpoint() {
1:3306467:         return endpoint;
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * @return the parent AmqpSession for this Link instance.
1:3306467:      */
1:3306467:     public AmqpSession getSession() {
1:3306467:         return session;
1:3306467:     }
1:3306467: 
1:3306467:     @Override
1:3306467:     public void addCloseAction(Runnable action) {
1:3306467:         closeActions.add(action);
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:8448cf1:      * Shortcut method to hand off an ActiveMQ Command to the broker and assign
1:3306467:      * a ResponseHandler to deal with any reply from the broker.
1:3306467:      *
1:3306467:      * @param command
1:3306467:      *        the Command object to send to the Broker.
1:3306467:      */
1:3306467:     protected void sendToActiveMQ(Command command) {
1:3306467:         session.getConnection().sendToActiveMQ(command, null);
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:8448cf1:      * Shortcut method to hand off an ActiveMQ Command to the broker and assign
1:3306467:      * a ResponseHandler to deal with any reply from the broker.
1:3306467:      *
1:3306467:      * @param command
1:3306467:      *        the Command object to send to the Broker.
1:3306467:      * @param handler
1:3306467:      *        the ResponseHandler that will handle the Broker's response.
1:3306467:      */
1:3306467:     protected void sendToActiveMQ(Command command, ResponseHandler handler) {
1:3306467:         session.getConnection().sendToActiveMQ(command, handler);
1:3306467:     }
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1:      * Shortcut method to hand off an ActiveMQ Command to the broker and assign
/////////////////////////////////////////////////////////////////////////
1:      * Shortcut method to hand off an ActiveMQ Command to the broker and assign
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.amqp.ResponseHandler;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Link;
1: import org.apache.qpid.proton.engine.Sender;
1: 
1: /**
1:  * Abstract AmqpLink implementation that provide basic Link services.
1:  */
1: public abstract class AmqpAbstractLink<LINK_TYPE extends Link> implements AmqpLink {
1: 
1:     protected final AmqpSession session;
1:     protected final LINK_TYPE endpoint;
1: 
1:     protected boolean closed;
1:     protected boolean opened;
1:     protected List<Runnable> closeActions = new ArrayList<Runnable>();
1: 
1:     /**
1:      * Creates a new AmqpLink type.
1:      *
1:      * @param session
1:      *        the AmqpSession that servers as the parent of this Link.
1:      * @param endpoint
1:      *        the link endpoint this object represents.
1:      */
1:     public AmqpAbstractLink(AmqpSession session, LINK_TYPE endpoint) {
1:         this.session = session;
1:         this.endpoint = endpoint;
1:     }
1: 
1:     @Override
1:     public void open() {
1:         if (!opened) {
1:             getEndpoint().setContext(this);
1:             getEndpoint().open();
1: 
1:             opened = true;
1:         }
1:     }
1: 
1:     @Override
1:     public void detach() {
1:         if (!closed) {
1:             if (getEndpoint() != null) {
1:                 getEndpoint().setContext(null);
1:                 getEndpoint().detach();
1:                 getEndpoint().free();
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void close(ErrorCondition error) {
1:         if (!closed) {
1: 
1:             if (getEndpoint() != null) {
1:                 if (getEndpoint() instanceof Sender) {
1:                     getEndpoint().setSource(null);
1:                 } else {
1:                     getEndpoint().setTarget(null);
1:                 }
1:                 getEndpoint().setCondition(error);
1:             }
1: 
1:             close();
1:         }
1:     }
1: 
1:     @Override
1:     public void close() {
1:         if (!closed) {
1: 
1:             if (getEndpoint() != null) {
1:                 getEndpoint().setContext(null);
1:                 getEndpoint().close();
1:                 getEndpoint().free();
1:             }
1: 
1:             for (Runnable action : closeActions) {
1:                 action.run();
1:             }
1: 
1:             closeActions.clear();
1:             opened = false;
1:             closed = true;
1:         }
1:     }
1: 
1:     /**
1:      * @return true if this link has already been opened.
1:      */
1:     public boolean isOpened() {
1:         return opened;
1:     }
1: 
1:     /**
1:      * @return true if this link has already been closed.
1:      */
1:     public boolean isClosed() {
1:         return closed;
1:     }
1: 
1:     /**
1:      * @return the Proton Link type this link represents.
1:      */
1:     public LINK_TYPE getEndpoint() {
1:         return endpoint;
1:     }
1: 
1:     /**
1:      * @return the parent AmqpSession for this Link instance.
1:      */
1:     public AmqpSession getSession() {
1:         return session;
1:     }
1: 
1:     @Override
1:     public void addCloseAction(Runnable action) {
1:         closeActions.add(action);
1:     }
1: 
1:     /**
0:      * Shorcut method to hand off an ActiveMQ Command to the broker and assign
1:      * a ResponseHandler to deal with any reply from the broker.
1:      *
1:      * @param command
1:      *        the Command object to send to the Broker.
1:      */
1:     protected void sendToActiveMQ(Command command) {
1:         session.getConnection().sendToActiveMQ(command, null);
1:     }
1: 
1:     /**
0:      * Shorcut method to hand off an ActiveMQ Command to the broker and assign
1:      * a ResponseHandler to deal with any reply from the broker.
1:      *
1:      * @param command
1:      *        the Command object to send to the Broker.
1:      * @param handler
1:      *        the ResponseHandler that will handle the Broker's response.
1:      */
1:     protected void sendToActiveMQ(Command command, ResponseHandler handler) {
1:         session.getConnection().sendToActiveMQ(command, handler);
1:     }
1: }
============================================================================