1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
3:cdd5150: 
1:0fffe21: import java.io.IOException;
1:0fffe21: import java.net.Socket;
1:0fffe21: import java.net.URI;
1:0fffe21: import java.net.URISyntaxException;
1:0fffe21: import java.net.UnknownHostException;
1:04ee70a: import java.nio.ByteBuffer;
1:0fffe21: 
1:0fffe21: import javax.net.ServerSocketFactory;
1:0fffe21: import javax.net.SocketFactory;
1:0fffe21: import javax.net.ssl.SSLContext;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:0fffe21: 
1:cdd5150: import org.apache.activemq.broker.SslContext;
1:cdd5150: import org.apache.activemq.transport.Transport;
1:cdd5150: import org.apache.activemq.transport.TransportServer;
1:cdd5150: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:cdd5150: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:cdd5150: import org.apache.activemq.wireformat.WireFormat;
1:cdd5150: 
1:cdd5150: public class AmqpNioSslTransportFactory extends AmqpNioTransportFactory {
1:cdd5150: 
1:f2653e6:     protected SSLContext context;
1:cdd5150: 
1:cdd5150:     @Override
1:cdd5150:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:cdd5150:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:f2653e6:             @Override
1:cdd5150:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:cdd5150:                 AmqpNioSslTransport transport = new AmqpNioSslTransport(format, socket);
1:cdd5150:                 if (context != null) {
1:cdd5150:                     transport.setSslContext(context);
1:cdd5150:                 }
1:cdd5150:                 return transport;
1:cdd5150:             }
1:0fffe21: 
1:0fffe21:             @Override
1:0fffe21:             public boolean isSslServer() {
1:0fffe21:                 return true;
1:0fffe21:             }
1:cdd5150:         };
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     @Override
1:cdd5150:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:cdd5150:         return new AmqpNioSslTransport(wf, socketFactory, location, localLocation);
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:04ee70a:             throws IOException {
1:04ee70a:         return new AmqpNioSslTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:cdd5150:     public TransportServer doBind(URI location) throws IOException {
1:cdd5150:         if (SslContext.getCurrentSslContext() != null) {
1:cdd5150:             try {
1:cdd5150:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:cdd5150:             } catch (Exception e) {
1:cdd5150:                 throw new IOException(e);
1:cdd5150:             }
1:cdd5150:         }
1:cdd5150:         return super.doBind(location);
1:cdd5150:     }
1:cdd5150: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import javax.net.ssl.SSLEngine;
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             SSLEngine engine, InitBuffer initBuffer, ByteBuffer inputBuffer)
1:             throws IOException {
1:         return new AmqpNioSslTransport(wireFormat, socket, engine, initBuffer, inputBuffer);
1:     }
1: 
1:     @Override
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1:     protected SSLContext context;
1:             @Override
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
1:             public boolean isSslServer() {
1:                 return true;
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
0: import javax.net.ServerSocketFactory;
0: import javax.net.SocketFactory;
0: import javax.net.ssl.SSLContext;
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: 
1: public class AmqpNioSslTransportFactory extends AmqpNioTransportFactory {
1: 
0:     SSLContext context;
1: 
1:     @Override
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 AmqpNioSslTransport transport = new AmqpNioSslTransport(format, socket);
1:                 if (context != null) {
1:                     transport.setSslContext(context);
1:                 }
1:                 return transport;
1:             }
1:         };
1:     }
1: 
1:     @Override
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new AmqpNioSslTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:     @Override
1:     public TransportServer doBind(URI location) throws IOException {
1:         if (SslContext.getCurrentSslContext() != null) {
1:             try {
1:                 context = SslContext.getCurrentSslContext().getSSLContext();
1:             } catch (Exception e) {
1:                 throw new IOException(e);
1:             }
1:         }
1:         return super.doBind(location);
1:     }
1: 
1: }
============================================================================