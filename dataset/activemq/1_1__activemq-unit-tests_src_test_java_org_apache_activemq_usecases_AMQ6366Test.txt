1:39184e2: /**
1:39184e2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39184e2:  * contributor license agreements.  See the NOTICE file distributed with
1:39184e2:  * this work for additional information regarding copyright ownership.
1:39184e2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39184e2:  * (the "License"); you may not use this file except in compliance with
1:39184e2:  * the License.  You may obtain a copy of the License at
1:39184e2:  *
1:39184e2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39184e2:  *
1:39184e2:  * Unless required by applicable law or agreed to in writing, software
1:39184e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39184e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39184e2:  * See the License for the specific language governing permissions and
1:39184e2:  * limitations under the License.
1:39184e2:  */
1:39184e2: package org.apache.activemq.usecases;
1:39184e2: 
1:39184e2: import java.io.File;
1:39184e2: import java.net.URI;
1:39184e2: import java.util.HashSet;
1:39184e2: import java.util.List;
1:39184e2: import java.util.Set;
1:39184e2: 
1:39184e2: import javax.jms.MessageConsumer;
1:39184e2: 
1:39184e2: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:39184e2: import org.apache.activemq.broker.BrokerService;
1:39184e2: import org.apache.activemq.broker.TransportConnector;
1:39184e2: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:39184e2: import org.apache.activemq.broker.region.Topic;
1:39184e2: import org.apache.activemq.command.ActiveMQDestination;
1:39184e2: import org.apache.activemq.command.ActiveMQTopic;
1:39184e2: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:39184e2: import org.apache.activemq.network.NetworkConnector;
1:39184e2: import org.apache.activemq.util.IOHelper;
1:39184e2: import org.slf4j.Logger;
1:39184e2: import org.slf4j.LoggerFactory;
1:39184e2: 
1:39184e2: /**
1:39184e2:  * Show that both directions of a duplex bridge will properly restart the
1:39184e2:  * network durable consumers if dynamicOnly is false.
1:39184e2:  */
1:39184e2: public class AMQ6366Test extends JmsMultipleBrokersTestSupport {
1:39184e2:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ6366Test.class);
1:39184e2:     final ActiveMQTopic dest = new ActiveMQTopic("TEST.FOO");
1:39184e2: 
1:39184e2: 
1:39184e2:     /**
1:39184e2:      * This test works even before AMQ6366
1:39184e2:      * @throws Exception
1:39184e2:      */
1:39184e2:     public void testDuplexDurableSubRestarted() throws Exception {
1:39184e2:         testNonDurableReceiveThrougRestart("BrokerA", "BrokerB");
1:39184e2:     }
1:39184e2: 
1:39184e2:     /**
1:39184e2:      * This test failed before AMQ6366 because the NC durable consumer was
1:39184e2:      * never properly activated.
1:39184e2:      *
1:39184e2:      * @throws Exception
1:39184e2:      */
1:39184e2:     public void testDuplexDurableSubRestartedReverse() throws Exception {
1:39184e2:         testNonDurableReceiveThrougRestart("BrokerB", "BrokerA");
1:39184e2:     }
1:39184e2: 
1:39184e2:     protected void testNonDurableReceiveThrougRestart(String pubBroker, String conBroker) throws Exception {
1:39184e2:         NetworkConnector networkConnector = bridgeBrokerPair("BrokerA", "BrokerB");
1:39184e2: 
1:39184e2:         startAllBrokers();
1:39184e2:         waitForBridgeFormation();
1:39184e2: 
1:39184e2:         MessageConsumer client = createDurableSubscriber(conBroker, dest, "sub1");
1:39184e2:         client.close();
1:39184e2: 
1:39184e2:         Thread.sleep(1000);
1:39184e2:         networkConnector.stop();
1:39184e2:         Thread.sleep(1000);
1:39184e2: 
1:39184e2:         Set<ActiveMQDestination> durableDests = new HashSet<>();
1:39184e2:         durableDests.add(dest);
1:39184e2:         //Normally set on broker start from the persistence layer but
1:39184e2:         //simulate here since we just stopped and started the network connector
1:39184e2:         //without a restart
1:39184e2:         networkConnector.setDurableDestinations(durableDests);
1:39184e2:         networkConnector.start();
1:39184e2:         waitForBridgeFormation();
1:39184e2: 
1:39184e2:         // Send messages
1:39184e2:         sendMessages(pubBroker, dest, 1);
1:39184e2:         Thread.sleep(1000);
1:39184e2: 
1:39184e2:         Topic destination = (Topic) brokers.get(conBroker).broker.getDestination(dest);
1:39184e2:         DurableTopicSubscription sub = destination.getDurableTopicSubs().
1:39184e2:                 values().toArray(new DurableTopicSubscription[0])[0];
1:39184e2: 
1:39184e2:         //Assert that the message made it to the other broker
1:39184e2:         assertEquals(1, sub.getSubscriptionStatistics().getEnqueues().getCount());
1:39184e2:     }
1:39184e2: 
1:39184e2:     @Override
1:39184e2:     protected void configureBroker(BrokerService broker) {
1:39184e2:         broker.getManagementContext().setCreateConnector(false);
1:39184e2:         broker.setAdvisorySupport(true);
1:39184e2:     }
1:39184e2: 
1:39184e2:     protected NetworkConnector bridgeBrokerPair(String localBrokerName, String remoteBrokerName) throws Exception {
1:39184e2:         BrokerService localBroker = brokers.get(localBrokerName).broker;
1:39184e2:         BrokerService remoteBroker = brokers.get(remoteBrokerName).broker;
1:39184e2: 
1:39184e2:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:39184e2:         URI remoteURI;
1:39184e2:         if (!transportConnectors.isEmpty()) {
1:39184e2:             remoteURI = transportConnectors.get(0).getConnectUri();
1:39184e2:             String uri = "static:(" + remoteURI + ")";
1:39184e2:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:39184e2:             connector.setDynamicOnly(false); // so matching durable subs are loaded on start
1:39184e2:             connector.setStaticBridge(false);
1:39184e2:             connector.setDuplex(true);
1:39184e2:             connector.addDynamicallyIncludedDestination(dest);
1:39184e2:             localBroker.addNetworkConnector(connector);
1:39184e2:             return connector;
1:39184e2:         } else {
1:39184e2:             throw new Exception("Remote broker has no registered connectors.");
1:39184e2:         }
1:39184e2:     }
1:39184e2: 
1:39184e2:     @Override
1:39184e2:     public void setUp() throws Exception {
1:39184e2:         File dataDir = new File(IOHelper.getDefaultDataDirectory());
1:39184e2:         LOG.info("Delete dataDir.." + dataDir.getCanonicalPath());
1:39184e2:         org.apache.activemq.TestSupport.recursiveDelete(dataDir);
1:39184e2:         super.setAutoFail(true);
1:39184e2:         super.setUp();
1:39184e2:         createBroker(new URI(
1:39184e2:                 "broker:(tcp://0.0.0.0:0)/BrokerA"));
1:39184e2:         createBroker(new URI(
1:39184e2:                 "broker:(tcp://0.0.0.0:0)/BrokerB"));
1:39184e2: 
1:39184e2:     }
1:39184e2: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:39184e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.net.URI;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Show that both directions of a duplex bridge will properly restart the
1:  * network durable consumers if dynamicOnly is false.
1:  */
1: public class AMQ6366Test extends JmsMultipleBrokersTestSupport {
1:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ6366Test.class);
1:     final ActiveMQTopic dest = new ActiveMQTopic("TEST.FOO");
1: 
1: 
1:     /**
1:      * This test works even before AMQ6366
1:      * @throws Exception
1:      */
1:     public void testDuplexDurableSubRestarted() throws Exception {
1:         testNonDurableReceiveThrougRestart("BrokerA", "BrokerB");
1:     }
1: 
1:     /**
1:      * This test failed before AMQ6366 because the NC durable consumer was
1:      * never properly activated.
1:      *
1:      * @throws Exception
1:      */
1:     public void testDuplexDurableSubRestartedReverse() throws Exception {
1:         testNonDurableReceiveThrougRestart("BrokerB", "BrokerA");
1:     }
1: 
1:     protected void testNonDurableReceiveThrougRestart(String pubBroker, String conBroker) throws Exception {
1:         NetworkConnector networkConnector = bridgeBrokerPair("BrokerA", "BrokerB");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         MessageConsumer client = createDurableSubscriber(conBroker, dest, "sub1");
1:         client.close();
1: 
1:         Thread.sleep(1000);
1:         networkConnector.stop();
1:         Thread.sleep(1000);
1: 
1:         Set<ActiveMQDestination> durableDests = new HashSet<>();
1:         durableDests.add(dest);
1:         //Normally set on broker start from the persistence layer but
1:         //simulate here since we just stopped and started the network connector
1:         //without a restart
1:         networkConnector.setDurableDestinations(durableDests);
1:         networkConnector.start();
1:         waitForBridgeFormation();
1: 
1:         // Send messages
1:         sendMessages(pubBroker, dest, 1);
1:         Thread.sleep(1000);
1: 
1:         Topic destination = (Topic) brokers.get(conBroker).broker.getDestination(dest);
1:         DurableTopicSubscription sub = destination.getDurableTopicSubs().
1:                 values().toArray(new DurableTopicSubscription[0])[0];
1: 
1:         //Assert that the message made it to the other broker
1:         assertEquals(1, sub.getSubscriptionStatistics().getEnqueues().getCount());
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) {
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(true);
1:     }
1: 
1:     protected NetworkConnector bridgeBrokerPair(String localBrokerName, String remoteBrokerName) throws Exception {
1:         BrokerService localBroker = brokers.get(localBrokerName).broker;
1:         BrokerService remoteBroker = brokers.get(remoteBrokerName).broker;
1: 
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI;
1:         if (!transportConnectors.isEmpty()) {
1:             remoteURI = transportConnectors.get(0).getConnectUri();
1:             String uri = "static:(" + remoteURI + ")";
1:             NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:             connector.setDynamicOnly(false); // so matching durable subs are loaded on start
1:             connector.setStaticBridge(false);
1:             connector.setDuplex(true);
1:             connector.addDynamicallyIncludedDestination(dest);
1:             localBroker.addNetworkConnector(connector);
1:             return connector;
1:         } else {
1:             throw new Exception("Remote broker has no registered connectors.");
1:         }
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         File dataDir = new File(IOHelper.getDefaultDataDirectory());
1:         LOG.info("Delete dataDir.." + dataDir.getCanonicalPath());
1:         org.apache.activemq.TestSupport.recursiveDelete(dataDir);
1:         super.setAutoFail(true);
1:         super.setUp();
1:         createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:0)/BrokerA"));
1:         createBroker(new URI(
1:                 "broker:(tcp://0.0.0.0:0)/BrokerB"));
1: 
1:     }
1: }
============================================================================