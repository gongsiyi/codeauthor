1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8f8fddc:  *
1:8f8fddc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8f8fddc:  *
1:8f8fddc:  * Unless required by applicable law or agreed to in writing, software
1:8f8fddc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8f8fddc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8f8fddc:  * See the License for the specific language governing permissions and
1:8f8fddc:  * limitations under the License.
1:8f8fddc:  */
1:370734c: package org.apache.activemq.broker.virtual;
9:8f8fddc: 
1:63f1473: import java.util.Vector;
1:63f1473: 
1:8f8fddc: import javax.jms.Connection;
1:b97dbff: import javax.jms.JMSException;
1:b97dbff: import javax.jms.Message;
1:8f8fddc: import javax.jms.MessageConsumer;
1:8f8fddc: import javax.jms.MessageProducer;
1:8f8fddc: import javax.jms.Session;
1:8f8fddc: 
1:b97dbff: import junit.framework.Test;
1:b97dbff: 
1:74a7a8b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:74a7a8b: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: import org.apache.activemq.command.ActiveMQTopic;
1:74a7a8b: import org.apache.activemq.spring.ConsumerBean;
1:74a7a8b: 
1:8f8fddc: /**
1:b0c2a40:  *
1:63f1473:  * 
1:8f8fddc:  */
1:8f8fddc: public class VirtualTopicPubSubTest extends EmbeddedBrokerTestSupport {
1:8f8fddc: 
1:63f1473:     private Vector<Connection> connections = new Vector<Connection>();
1:b97dbff:     public int ackMode = Session.AUTO_ACKNOWLEDGE;
1:b97dbff: 
1:b97dbff:     public static Test suite() {
1:b97dbff:         return suite(VirtualTopicPubSubTest.class);
1:b97dbff:     }
1:63f1473: 
1:b97dbff:     public void initCombosForTestVirtualTopicCreation() {
1:b97dbff:         addCombinationValues("ackMode", new Object[] {new Integer(Session.AUTO_ACKNOWLEDGE), new Integer(Session.CLIENT_ACKNOWLEDGE) });
1:b97dbff:     }
1:63f1473: 
1:63f1473:     private boolean doneTwice = false;
1:63f1473: 
1:63f1473: 	public void testVirtualTopicCreation() throws Exception {
1:63f1473: 	  doTestVirtualTopicCreation(10);
1:63f1473: 	}
1:63f1473: 
1:63f1473: 	public void doTestVirtualTopicCreation(int total) throws Exception {
1:b97dbff: 
1:b97dbff:         ConsumerBean messageList = new ConsumerBean() {
1:b97dbff:             public synchronized void onMessage(Message message) {
1:b97dbff:                 super.onMessage(message);
1:b97dbff:                 if (ackMode == Session.CLIENT_ACKNOWLEDGE) {
1:b97dbff:                     try {
1:b97dbff:                         message.acknowledge();
1:b97dbff:                     } catch (JMSException e) {
1:b97dbff:                         e.printStackTrace();
1:b97dbff:                     }
1:b97dbff:                 }
1:63f1473: 
1:b97dbff:             }
1:b97dbff:         };
1:8f8fddc:         messageList.setVerbose(true);
1:63f1473: 
1:370734c:         String queueAName = getVirtualTopicConsumerName();
1:8f8fddc:         // create consumer 'cluster'
1:8f8fddc:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:8f8fddc:         ActiveMQQueue queue2 = new ActiveMQQueue(queueAName);
1:63f1473:   
1:63f1473:         Session session = createStartAndTrackConnection().createSession(false, ackMode);
1:8f8fddc:         MessageConsumer c1 = session.createConsumer(queue1);
1:63f1473:          
1:63f1473:         session = createStartAndTrackConnection().createSession(false, ackMode);
1:8f8fddc:         MessageConsumer c2 = session.createConsumer(queue2);
1:370734c: 
1:8f8fddc:         c1.setMessageListener(messageList);
1:8f8fddc:         c2.setMessageListener(messageList);
1:8f8fddc: 
1:8f8fddc:         // create topic producer
1:63f1473:         Session producerSession = createStartAndTrackConnection().createSession(false, ackMode);
1:63f1473:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic(getVirtualTopicName()));
1:8f8fddc:         assertNotNull(producer);
1:8f8fddc: 
1:8f8fddc:         for (int i = 0; i < total; i++) {
1:63f1473:             producer.send(producerSession.createTextMessage("message: " + i));
3:8f8fddc:         }
1:63f1473: 
1:8f8fddc:         messageList.assertMessagesArrived(total);
1:63f1473: 
1:63f1473:         // do twice so we confirm messages do not get redelivered after client acknowledgement
1:63f1473:         if( doneTwice == false ) {
1:63f1473:             doneTwice = true;
1:63f1473:             doTestVirtualTopicCreation(0);
1:63f1473: 		}
1:8f8fddc:     }
1:8f8fddc: 
1:63f1473:     private Connection createStartAndTrackConnection() throws Exception {
1:63f1473:         Connection connection = createConnection();
1:63f1473:         connection.start();
1:63f1473:         connections.add(connection);
1:63f1473:         return connection;
1:63f1473:     }
1:b97dbff: 
1:370734c:     protected String getVirtualTopicName() {
1:370734c:         return "VirtualTopic.TEST";
1:370734c:     }
1:370734c: 
1:370734c:     protected String getVirtualTopicConsumerName() {
1:370734c:         return "Consumer.A.VirtualTopic.TEST";
1:370734c:     }
1:370734c: 
1:370734c: 
1:8f8fddc:     protected void tearDown() throws Exception {
1:63f1473:         for (Connection connection: connections) {
1:8f8fddc:             connection.close();
1:8f8fddc:         }
1:8f8fddc:         super.tearDown();
1:86cbdfd:     }
1:8f8fddc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:63f1473
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private Vector<Connection> connections = new Vector<Connection>();
1: 
1: 
1:     private boolean doneTwice = false;
1: 
1: 	public void testVirtualTopicCreation() throws Exception {
1: 	  doTestVirtualTopicCreation(10);
1: 	}
1: 
1: 	public void doTestVirtualTopicCreation(int total) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:   
1:         Session session = createStartAndTrackConnection().createSession(false, ackMode);
1:          
1:         session = createStartAndTrackConnection().createSession(false, ackMode);
1:         Session producerSession = createStartAndTrackConnection().createSession(false, ackMode);
1:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic(getVirtualTopicName()));
1:             producer.send(producerSession.createTextMessage("message: " + i));
1: 
1: 
1:         // do twice so we confirm messages do not get redelivered after client acknowledgement
1:         if( doneTwice == false ) {
1:             doneTwice = true;
1:             doTestVirtualTopicCreation(0);
1: 		}
1:     private Connection createStartAndTrackConnection() throws Exception {
1:         Connection connection = createConnection();
1:         connection.start();
1:         connections.add(connection);
1:         return connection;
1:     }
1:         for (Connection connection: connections) {
commit:b97dbff
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import junit.framework.Test;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public int ackMode = Session.AUTO_ACKNOWLEDGE;
1:     public static Test suite() {
1:         return suite(VirtualTopicPubSubTest.class);
1:     }
1:     
1:     public void initCombosForTestVirtualTopicCreation() {
1:         addCombinationValues("ackMode", new Object[] {new Integer(Session.AUTO_ACKNOWLEDGE), new Integer(Session.CLIENT_ACKNOWLEDGE) });
1:     }
1:     
1:         ConsumerBean messageList = new ConsumerBean() {
1:             public synchronized void onMessage(Message message) {
1:                 super.onMessage(message);
1:                 if (ackMode == Session.CLIENT_ACKNOWLEDGE) {
1:                     try {
1:                         message.acknowledge();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:                 
1:             }
1:         };
/////////////////////////////////////////////////////////////////////////
0:         Session session = connection.createSession(false, ackMode);
author:James Strachan
-------------------------------------------------------------------------------
commit:370734c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.virtual;
/////////////////////////////////////////////////////////////////////////
1:         String queueAName = getVirtualTopicConsumerName();
/////////////////////////////////////////////////////////////////////////
0:         MessageProducer producer = session.createProducer(new ActiveMQTopic(getVirtualTopicName()));
/////////////////////////////////////////////////////////////////////////
1:     protected String getVirtualTopicName() {
1:         return "VirtualTopic.TEST";
1:     }
1: 
1: 
1:     protected String getVirtualTopicConsumerName() {
1:         return "Consumer.A.VirtualTopic.TEST";
1:     }
1: 
1: 
commit:da67a38
/////////////////////////////////////////////////////////////////////////
0:         String queueAName = "Consumer.A.VirtualTopic.TEST";
/////////////////////////////////////////////////////////////////////////
0:         MessageProducer producer = session.createProducer(new ActiveMQTopic("VirtualTopic.TEST"));
commit:8f8fddc
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.spring.ConsumerBean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class VirtualTopicPubSubTest extends EmbeddedBrokerTestSupport {
1: 
0:     private Connection connection;
1: 
0:     public void testVirtualTopicCreation() throws Exception {
0:         if (connection == null) {
0:             connection = createConnection();
1:         }
0:         connection.start();
1: 
0:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1:         
0:         String queueAName = "ActiveMQ.Virtual.A.TEST";
1:         // create consumer 'cluster'
1:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:         ActiveMQQueue queue2 = new ActiveMQQueue(queueAName);
1: 
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer c1 = session.createConsumer(queue1);
1:         MessageConsumer c2 = session.createConsumer(queue2);
1: 
1:         c1.setMessageListener(messageList);
1:         c2.setMessageListener(messageList);
1: 
1:         // create topic producer
0:         MessageProducer producer = session.createProducer(new ActiveMQTopic("TEST"));
1:         assertNotNull(producer);
1: 
0:         int total = 10;
1:         for (int i = 0; i < total; i++) {
0:             producer.send(session.createTextMessage("message: " + i));
1:         }
1:         
1:         messageList.assertMessagesArrived(total);
1:     }
1: 
1: 
1:     protected void tearDown() throws Exception {
0:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: }
============================================================================