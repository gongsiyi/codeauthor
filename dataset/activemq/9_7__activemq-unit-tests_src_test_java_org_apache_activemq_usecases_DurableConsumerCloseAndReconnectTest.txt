1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
11:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:c12d7bf: import javax.jms.TextMessage;
1:a677c21: import javax.jms.Topic;
1:a677c21: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:bcb768c: import org.apache.activemq.broker.BrokerService;
1:bcb768c: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:bcb768c: import org.apache.activemq.store.kahadb.KahaDBStore;
1:74a7a8b: import org.apache.activemq.test.TestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:bcb768c: import java.io.IOException;
1:bcb768c: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class DurableConsumerCloseAndReconnectTest extends TestSupport {
1:a677c21:     protected static final long RECEIVE_TIMEOUT = 5000L;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DurableConsumerCloseAndReconnectTest.class);
1:a677c21: 
1:bcb768c:     BrokerService brokerService;
1:bcb768c: 
1:dee584b:     protected Connection connection;
1:a677c21:     private Session session;
1:a677c21:     private MessageConsumer consumer;
1:a677c21:     private MessageProducer producer;
1:a677c21:     private Destination destination;
1:230a86c:     private int messageCount;
1:74a7a8b: 
1:bcb768c:     private String vmConnectorURI;
1:bcb768c: 
1:3271401:     
1:3271401:     @Override
1:3271401:     protected void setUp() throws Exception {
1:bcb768c:         createBroker();
1:3271401:         super.setUp();
1:3271401:     }
1:3271401: 
1:3271401:     @Override
1:3271401:     protected void tearDown() throws Exception {
1:bcb768c:         stopBroker();
1:3271401:         super.tearDown();
1:3271401:     }
1:3271401: 
1:a677c21:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:bcb768c:         return new ActiveMQConnectionFactory(vmConnectorURI);
1:bcb768c:     }
1:bcb768c: 
1:bcb768c:     protected void createBroker() throws Exception {
1:bcb768c:         brokerService = new BrokerService();
1:bcb768c:         brokerService.setUseJmx(false);
1:bcb768c:         brokerService.setPersistent(false);
1:bcb768c:         KahaDBPersistenceAdapter store = new KahaDBPersistenceAdapter();
1:bcb768c:         brokerService.setPersistenceAdapter(store);
1:bcb768c:         brokerService.start();
1:bcb768c:         brokerService.waitUntilStarted();
1:bcb768c:         vmConnectorURI = brokerService.getVmConnectorURI().toString();
1:bcb768c:     }
1:bcb768c: 
1:bcb768c:     protected void stopBroker() throws Exception {
1:bcb768c:         brokerService.stop();
1:bcb768c:         brokerService.waitUntilStopped();
1:bcb768c:     }
1:bcb768c: 
1:bcb768c:     public void testDurableSubscriberReconnectMultipleTimes() throws Exception {
1:bcb768c:         Connection dummyConnection = createConnection();
1:bcb768c:         dummyConnection.start();
1:bcb768c: 
1:bcb768c:         makeConsumer(Session.AUTO_ACKNOWLEDGE);
1:bcb768c:         closeConsumer();
1:bcb768c: 
1:bcb768c:         publish(30);
1:bcb768c: 
1:bcb768c:         int counter = 1;
1:bcb768c:         for (int i = 0; i < 15; i++) {
1:bcb768c:             makeConsumer(Session.AUTO_ACKNOWLEDGE);
1:bcb768c:             Message message = consumer.receive(RECEIVE_TIMEOUT);
1:bcb768c:             assertTrue("Should have received a message!", message != null);
1:bcb768c:             LOG.info("Received message " + counter++);
1:bcb768c:             message = consumer.receive(RECEIVE_TIMEOUT);
1:bcb768c:             assertTrue("Should have received a message!", message != null);
1:bcb768c:             LOG.info("Received message " + counter++);
1:bcb768c:             closeConsumer();
1:bcb768c:         }
1:bcb768c: 
1:bcb768c:         dummyConnection.close();
1:3271401:     }
1:3271401: 
1:a677c21:     public void testCreateDurableConsumerCloseThenReconnect() throws Exception {
1:a677c21:         // force the server to stay up across both connection tests
1:a677c21:         Connection dummyConnection = createConnection();
1:3271401:         dummyConnection.start();
1:a677c21: 
2:a677c21:         consumeMessagesDeliveredWhileConsumerClosed();
1:a677c21: 
1:3271401:         dummyConnection.close();
1:a677c21: 
1:a677c21:         // now lets try again without one connection open
1:3271401:         consumeMessagesDeliveredWhileConsumerClosed();       
4:a677c21:     }
1:a677c21: 
1:a677c21:     protected void consumeMessagesDeliveredWhileConsumerClosed() throws Exception {
1:bcb768c:         // default to client ack for consumer
1:a677c21:         makeConsumer();
1:a677c21:         closeConsumer();
1:a677c21: 
1:bcb768c:         publish(1);
1:a677c21: 
1:a677c21:         // wait a few moments for the close to really occur
1:a677c21:         Thread.sleep(1000);
1:a677c21: 
1:a677c21:         makeConsumer();
1:a677c21: 
1:a677c21:         Message message = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue("Should have received a message!", message != null);
1:a677c21: 
1:a677c21:         closeConsumer();
1:a677c21: 
1:fc00993:         LOG.info("Now lets create the consumer again and because we didn't ack, we should get it again");
1:a677c21:         makeConsumer();
1:a677c21: 
1:a677c21:         message = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue("Should have received a message!", message != null);
1:a677c21:         message.acknowledge();
1:74a7a8b: 
1:a677c21:         closeConsumer();
1:74a7a8b: 
1:4286731:         LOG.info("Now lets create the consumer again and because we did ack, we should not get it again");
1:a677c21:         makeConsumer();
1:c12d7bf: 
1:a677c21:         message = consumer.receive(2000);
1:a677c21:         assertTrue("Should have no more messages left!", message == null);
1:c12d7bf: 
1:a677c21:         closeConsumer();
1:a677c21: 
1:fc00993:         LOG.info("Lets publish one more message now");
1:bcb768c:         publish(1);
1:a677c21: 
1:a677c21:         makeConsumer();
1:a677c21:         message = consumer.receive(RECEIVE_TIMEOUT);
1:a677c21:         assertTrue("Should have received a message!", message != null);
1:a677c21:         message.acknowledge();
1:a677c21: 
1:a677c21:         closeConsumer();
1:a677c21:     }
1:a677c21: 
1:bcb768c:     protected void publish(int numMessages) throws Exception {
1:a677c21:         connection = createConnection();
1:a677c21:         connection.start();
1:a677c21: 
2:a677c21:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:a677c21:         destination = createDestination();
1:a677c21: 
1:a677c21:         producer = session.createProducer(destination);
1:a677c21:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:bcb768c:         for (int i = 0; i < numMessages; i++) {
1:bcb768c:             TextMessage msg = session.createTextMessage("This is a test: " + messageCount++);
1:bcb768c:             producer.send(msg);
1:bcb768c:         }
1:74a7a8b: 
1:a677c21:         producer.close();
1:a677c21:         producer = null;
1:a677c21:         closeSession();
1:a677c21:     }
1:c12d7bf: 
1:a677c21:     protected Destination createDestination() throws JMSException {
1:a677c21:         if (isTopic()) {
1:a677c21:             return session.createTopic(getSubject());
1:74a7a8b:         } else {
1:a677c21:             return session.createQueue(getSubject());
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected boolean isTopic() {
1:a677c21:         return true;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void closeConsumer() throws JMSException {
1:bcb768c:         LOG.info("Closing the consumer");
1:a677c21:         consumer.close();
1:a677c21:         consumer = null;
1:a677c21:         closeSession();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void closeSession() throws JMSException {
1:a677c21:         session.close();
1:a677c21:         session = null;
1:a677c21:         connection.close();
1:a677c21:         connection = null;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void makeConsumer() throws Exception {
1:bcb768c:         makeConsumer(Session.CLIENT_ACKNOWLEDGE);
1:bcb768c:     }
1:bcb768c: 
1:bcb768c:     protected void makeConsumer(int ackMode) throws Exception {
1:a677c21:         String durableName = getName();
1:a677c21:         String clientID = getSubject();
1:bcb768c:         LOG.info("Creating a durable subscriber for clientID: " + clientID + " and durable name: " + durableName);
1:bcb768c:         createSession(clientID, ackMode);
1:a677c21:         consumer = createConsumer(durableName);
1:a677c21:     }
1:a677c21: 
1:a677c21:     private MessageConsumer createConsumer(String durableName) throws JMSException {
1:a677c21:         if (destination instanceof Topic) {
1:74a7a8b:             return session.createDurableSubscriber((Topic)destination, durableName);
1:74a7a8b:         } else {
1:a677c21:             return session.createConsumer(destination);
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:bcb768c:     protected void createSession(String clientID, int ackMode) throws Exception {
1:a677c21:         connection = createConnection();
1:a677c21:         connection.setClientID(clientID);
1:a677c21:         connection.start();
1:a677c21: 
1:bcb768c:         session = connection.createSession(false, ackMode);
1:a677c21:         destination = createDestination();
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Christian Posta
-------------------------------------------------------------------------------
commit:bcb768c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     BrokerService brokerService;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private String vmConnectorURI;
1: 
1:         createBroker();
1:         stopBroker();
1:         return new ActiveMQConnectionFactory(vmConnectorURI);
1:     }
1: 
1:     protected void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:         KahaDBPersistenceAdapter store = new KahaDBPersistenceAdapter();
1:         brokerService.setPersistenceAdapter(store);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:         vmConnectorURI = brokerService.getVmConnectorURI().toString();
1:     }
1: 
1:     protected void stopBroker() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     public void testDurableSubscriberReconnectMultipleTimes() throws Exception {
1:         Connection dummyConnection = createConnection();
1:         dummyConnection.start();
1: 
1:         makeConsumer(Session.AUTO_ACKNOWLEDGE);
1:         closeConsumer();
1: 
1:         publish(30);
1: 
1:         int counter = 1;
1:         for (int i = 0; i < 15; i++) {
1:             makeConsumer(Session.AUTO_ACKNOWLEDGE);
1:             Message message = consumer.receive(RECEIVE_TIMEOUT);
1:             assertTrue("Should have received a message!", message != null);
1:             LOG.info("Received message " + counter++);
1:             message = consumer.receive(RECEIVE_TIMEOUT);
1:             assertTrue("Should have received a message!", message != null);
1:             LOG.info("Received message " + counter++);
1:             closeConsumer();
1:         }
1: 
1:         dummyConnection.close();
/////////////////////////////////////////////////////////////////////////
1:         // default to client ack for consumer
1:         publish(1);
/////////////////////////////////////////////////////////////////////////
1:         publish(1);
/////////////////////////////////////////////////////////////////////////
1:     protected void publish(int numMessages) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < numMessages; i++) {
1:             TextMessage msg = session.createTextMessage("This is a test: " + messageCount++);
1:             producer.send(msg);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Closing the consumer");
/////////////////////////////////////////////////////////////////////////
1:         makeConsumer(Session.CLIENT_ACKNOWLEDGE);
1:     }
1: 
1:     protected void makeConsumer(int ackMode) throws Exception {
1:         LOG.info("Creating a durable subscriber for clientID: " + clientID + " and durable name: " + durableName);
1:         createSession(clientID, ackMode);
/////////////////////////////////////////////////////////////////////////
1:     protected void createSession(String clientID, int ackMode) throws Exception {
1:         session = connection.createSession(false, ackMode);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(DurableConsumerCloseAndReconnectTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Now lets create the consumer again and because we didn't ack, we should get it again");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Now lets create the consumer again and because we didn't ack, we should get it again");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Lets publish one more message now");
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Creating a durable subscribe for clientID: " + clientID + " and durable name: " + durableName);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.test.TestSupport;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         // now delete the db
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             return session.createDurableSubscriber((Topic)destination, durableName);
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     private int messageCount;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableConsumerCloseAndReconnectTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:3271401
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         deleteAllMessages();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
0:         deleteAllMessages();
1:     }
1: 
0:     private void deleteAllMessages() throws Exception {
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("vm://localhost?broker.deleteAllMessagesOnStartup=true");
0:         Connection dummyConnection = fac.createConnection();
1:         dummyConnection.start();
1:         dummyConnection.close();
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         consumeMessagesDeliveredWhileConsumerClosed();       
commit:dee584b
/////////////////////////////////////////////////////////////////////////
1:     protected Connection connection;
author:David Jencks
-------------------------------------------------------------------------------
commit:4286731
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Now lets create the consumer again and because we did ack, we should not get it again");
author:Robert Davies
-------------------------------------------------------------------------------
commit:c12d7bf
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
0:     private int messageCount=0;
0:         return new ActiveMQConnectionFactory("vm://localhost?broker.deleteAllMessagesOnStartup=false");
0:         dummyConnection.start();
/////////////////////////////////////////////////////////////////////////
0:         //now delete the db
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory("vm://localhost?broker.deleteAllMessagesOnStartup=true");
0:         dummyConnection = fac.createConnection();
0:         dummyConnection.start();
0:         dummyConnection.close();
/////////////////////////////////////////////////////////////////////////
1:        
/////////////////////////////////////////////////////////////////////////
1:        
/////////////////////////////////////////////////////////////////////////
0:         TextMessage msg = session.createTextMessage("This is a test: " + messageCount++);
0:         producer.send(msg);
1:       
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.test.TestSupport;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class DurableConsumerCloseAndReconnectTest extends TestSupport {
1:     protected static final long RECEIVE_TIMEOUT = 5000L;
1: 
0:     private Connection connection;
1:     private Session session;
1:     private MessageConsumer consumer;
1:     private MessageProducer producer;
1:     private Destination destination;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=true");
1:     }
1: 
1:     public void testCreateDurableConsumerCloseThenReconnect() throws Exception {
1:         // force the server to stay up across both connection tests
1:         Connection dummyConnection = createConnection();
1: 
1:         consumeMessagesDeliveredWhileConsumerClosed();
1: 
0:         dummyConnection.close();
1: 
1:         // now lets try again without one connection open
1:         consumeMessagesDeliveredWhileConsumerClosed();
1:     }
1: 
1:     protected void consumeMessagesDeliveredWhileConsumerClosed() throws Exception {
1:         makeConsumer();
1:         closeConsumer();
1: 
0:         publish();
1: 
1:         // wait a few moments for the close to really occur
1:         Thread.sleep(1000);
1: 
1:         makeConsumer();
1: 
1:         Message message = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue("Should have received a message!", message != null);
1: 
1:         closeConsumer();
1: 
0:         log.info("Now lets create the consumer again and because we didn't ack, we should get it again");
1:         makeConsumer();
1: 
1:         message = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue("Should have received a message!", message != null);
1:         message.acknowledge();
1: 
1:         closeConsumer();
1: 
0:         log.info("Now lets create the consumer again and because we didn't ack, we should get it again");
1:         makeConsumer();
1: 
1:         message = consumer.receive(2000);
1:         assertTrue("Should have no more messages left!", message == null);
1: 
1:         closeConsumer();
1: 
0:         log.info("Lets publish one more message now");
0:         publish();
1: 
1:         makeConsumer();
1:         message = consumer.receive(RECEIVE_TIMEOUT);
1:         assertTrue("Should have received a message!", message != null);
1:         message.acknowledge();
1: 
1:         closeConsumer();
1:     }
1: 
0:     protected void publish() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         destination = createDestination();
1: 
1:         producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
0:         producer.send(session.createTextMessage("This is a test"));
1: 
1:         producer.close();
1:         producer = null;
1:         closeSession();
1:     }
1: 
1:     protected Destination createDestination() throws JMSException {
1:         if (isTopic()) {
1:             return session.createTopic(getSubject());
1:         }
0:         else {
1:             return session.createQueue(getSubject());
1:         }
1:     }
1: 
1:     protected boolean isTopic() {
1:         return true;
1:     }
1: 
1:     protected void closeConsumer() throws JMSException {
1:         consumer.close();
1:         consumer = null;
1:         closeSession();
1:     }
1: 
1:     protected void closeSession() throws JMSException {
1:         session.close();
1:         session = null;
1:         connection.close();
1:         connection = null;
1:     }
1: 
1:     protected void makeConsumer() throws Exception {
1:         String durableName = getName();
1:         String clientID = getSubject();
0:         log.info("Creating a durable subscribe for clientID: " + clientID + " and durable name: " + durableName);
0:         createSession(clientID);
1:         consumer = createConsumer(durableName);
1:     }
1: 
1:     private MessageConsumer createConsumer(String durableName) throws JMSException {
1:         if (destination instanceof Topic) {
0:             return session.createDurableSubscriber((Topic) destination, durableName);
1:         }
0:         else {
1:             return session.createConsumer(destination);
1:         }
1:     }
1: 
0:     protected void createSession(String clientID) throws Exception {
1:         connection = createConnection();
1:         connection.setClientID(clientID);
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         destination = createDestination();
1:     }
1: }
============================================================================