1:92860ae: /**
1:92860ae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:92860ae:  * contributor license agreements.  See the NOTICE file distributed with
1:92860ae:  * this work for additional information regarding copyright ownership.
1:92860ae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:92860ae:  * (the "License"); you may not use this file except in compliance with
1:92860ae:  * the License.  You may obtain a copy of the License at
1:92860ae:  *
1:92860ae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92860ae:  *
1:92860ae:  * Unless required by applicable law or agreed to in writing, software
1:92860ae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92860ae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92860ae:  * See the License for the specific language governing permissions and
1:92860ae:  * limitations under the License.
1:92860ae:  */
1:92860ae: package org.apache.activemq;
22:92860ae: 
1:43c3cae: import static org.junit.Assert.assertEquals;
1:43c3cae: import static org.junit.Assert.assertSame;
1:43c3cae: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:1fdc2c4: import java.util.concurrent.TimeUnit;
1:43c3cae: 
1:92860ae: import org.apache.activemq.broker.region.DestinationInterceptor;
1:92860ae: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:92860ae: import org.apache.activemq.util.Wait;
1:92860ae: import org.junit.Test;
1:92860ae: 
1:43c3cae: public class VirtualDestTest extends AbstractVirtualDestTest {
1:92860ae: 
1:92860ae:     String configurationSeed = "virtualDestTest";
1:92860ae: 
1:92860ae:     @Test
1:92860ae:     public void testNew() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-new-no-vd-broker";
1:8b8e726:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:92860ae:         startBroker(brokerConfig);
1:92860ae:         assertTrue("broker alive", brokerService.isStarted());
1:55da9bc: 
1:92860ae:         // default config has support for VirtualTopic.>
1:92860ae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("one interceptor", 1, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:92860ae: 
1:92860ae:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:92860ae:         assertEquals("default names in place", "VirtualTopic.>",
1:92860ae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:92860ae: 
1:92860ae:         exerciseVirtualTopic("VirtualTopic.Default");
1:92860ae: 
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1:92860ae: 
1:92860ae:         assertEquals("one interceptor", 1, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:92860ae: 
1:92860ae:         // update will happen on addDestination
1:92860ae:         exerciseVirtualTopic("A.Default");
1:92860ae: 
1:92860ae:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:92860ae:         assertEquals("new names in place", "A.>",
1:92860ae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:92860ae: 
1:92860ae:         // apply again - ensure no change
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:8d480b4:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:4109b79:     }
1:4a603a9: 
1:4109b79:     @Test
1:4109b79:     public void testNewComposite() throws Exception {
1:4109b79:         final String brokerConfig = configurationSeed + "-new-composite-vd-broker";
1:4109b79:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:4109b79:         startBroker(brokerConfig);
1:4109b79:         assertTrue("broker alive", brokerService.isStarted());
1:4a603a9: 
1:4109b79:         applyNewConfig(brokerConfig, configurationSeed + "-add-composite-vd", SLEEP);
1:4a603a9: 
1:4109b79:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:4a603a9:     }
1:4a603a9: 
1:92860ae:     @Test
1:55da9bc:     public void testModComposite() throws Exception {
1:55da9bc:         final String brokerConfig = configurationSeed + "-mod-composite-vd-broker";
1:55da9bc:         applyNewConfig(brokerConfig, configurationSeed + "-add-composite-vd");
1:55da9bc:         startBroker(brokerConfig);
1:55da9bc:         assertTrue("broker alive", brokerService.isStarted());
1:55da9bc:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:4a603a9: 
1:55da9bc:         applyNewConfig(brokerConfig, configurationSeed + "-mod-composite-vd", SLEEP);
1:55da9bc:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:4a603a9: 
1:55da9bc:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.CompositeQueue");
1:4a603a9:     }
1:4a603a9: 
1:55da9bc:     @Test
1:92860ae:     public void testNewNoDefaultVirtualTopicSupport() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-no-vd-vt-broker";
1:8b8e726:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:92860ae:         brokerService = createBroker(brokerConfig);
1:92860ae:         brokerService.setUseVirtualTopics(false);
2:92860ae:         brokerService.start();
2:92860ae:         brokerService.waitUntilStarted();
1:4a603a9: 
1:1fdc2c4:         TimeUnit.SECONDS.sleep(SLEEP);
1:4109b79: 
1:92860ae:         assertTrue("broker alive", brokerService.isStarted());
1:4109b79: 
1:92860ae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("one interceptor", 0, interceptors.length);
1:4109b79: 
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1:4109b79: 
1:92860ae:         // update will happen on addDestination
1:92860ae:         exerciseVirtualTopic("A.Default");
1:4109b79: 
1:92860ae:         interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("one interceptor", 1, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:4109b79: 
1:92860ae:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:1fdc2c4: 
1:92860ae:         // apply again - ensure no change
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:8d480b4:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:4a603a9:     }
1:1fdc2c4: 
1:92860ae:     @Test
1:92860ae:     public void testNewWithMirrorQueueSupport() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-no-vd-mq-broker";
1:8b8e726:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:92860ae:         brokerService = createBroker(brokerConfig);
1:92860ae:         brokerService.setUseMirroredQueues(true);
1:92860ae:         brokerService.start();
1:92860ae:         brokerService.waitUntilStarted();
1:1fdc2c4: 
1:1fdc2c4:         TimeUnit.SECONDS.sleep(SLEEP);
1:55da9bc: 
1:92860ae:         assertTrue("broker alive", brokerService.isStarted());
1:55da9bc: 
1:92860ae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("expected interceptor", 2, interceptors.length);
1:92860ae: 
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1:92860ae: 
1:92860ae:         // update will happen on addDestination
1:92860ae:         exerciseVirtualTopic("A.Default");
1:92860ae: 
1:92860ae:         interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("expected interceptor", 2, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:92860ae: 
1:92860ae:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:92860ae: 
1:92860ae:         // apply again - ensure no change
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:8d480b4:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:4a603a9:     }
1:92860ae: 
1:92860ae:     @Test
1:92860ae:     public void testRemove() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-one-vd-rm-broker";
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:92860ae:         startBroker(brokerConfig);
1:92860ae:         assertTrue("broker alive", brokerService.isStarted());
1:92860ae: 
1:92860ae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("one interceptor", 1, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:92860ae: 
1:92860ae:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:92860ae:         assertEquals("configured names in place", "A.>",
1:92860ae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:92860ae: 
1:92860ae:         exerciseVirtualTopic("A.Default");
1:92860ae: 
1:8b8e726:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG, SLEEP);
1:92860ae: 
1:92860ae:         // update will happen on addDestination
1:92860ae:         forceAddDestination("AnyDest");
1:92860ae: 
1:92860ae:         assertTrue("getDestinationInterceptors empty on time", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:92860ae:             public boolean isSatisified() {
1:92860ae:                 return 0 == brokerService.getDestinationInterceptors().length;
1:4a603a9:             }
1:92860ae:         }));
1:92860ae: 
1:92860ae:         // reverse the remove, add again
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1:92860ae: 
1:92860ae:         // update will happen on addDestination
1:92860ae:         exerciseVirtualTopic("A.NewOne");
1:92860ae: 
1:92860ae:         interceptors  = brokerService.getDestinationInterceptors();
1:92860ae:         assertEquals("expected interceptor", 1, interceptors.length);
1:92860ae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:4a603a9:     }
1:92860ae: 
1:92860ae:     @Test
1:92860ae:     public void testMod() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-one-vd-mod-broker";
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:92860ae:         startBroker(brokerConfig);
1:92860ae:         assertTrue("broker alive", brokerService.isStarted());
1:92860ae: 
1:92860ae:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:92860ae:         exerciseVirtualTopic("A.Default");
1:92860ae: 
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-vd", SLEEP);
1:92860ae:         exerciseVirtualTopic("B.Default");
1:92860ae: 
1:92860ae:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:4a603a9:     }
1:43c3cae: 
1:4a603a9: 
1:4a603a9:     @Test
1:92860ae:     public void testModWithMirroredQueue() throws Exception {
1:8b8e726:         final String brokerConfig = configurationSeed + "-one-vd-mq-mod-broker";
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:92860ae:         brokerService = createBroker(brokerConfig);
1:92860ae:         brokerService.setUseMirroredQueues(true);
1:92860ae:         brokerService.start();
1:92860ae:         brokerService.waitUntilStarted();
1:92860ae: 
1:1fdc2c4:         TimeUnit.SECONDS.sleep(SLEEP);
1:92860ae: 
1:92860ae:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:92860ae:         exerciseVirtualTopic("A.Default");
1:92860ae: 
1:92860ae:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-vd", SLEEP);
1:92860ae:         exerciseVirtualTopic("B.Default");
1:92860ae: 
1:92860ae:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:4109b79:     }
1:92860ae: 
1:92860ae:     @Test
1:4a603a9:     public void testNewFilteredComposite() throws Exception {
1:4a603a9:         final String brokerConfig = configurationSeed + "-new-filtered-composite-vd-broker";
1:4a603a9:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:4a603a9:         startBroker(brokerConfig);
1:4a603a9:         assertTrue("broker alive", brokerService.isStarted());
1:92860ae: 
1:4a603a9:         applyNewConfig(brokerConfig, configurationSeed + "-add-filtered-composite-vd", SLEEP);
1:4a603a9: 
1:4a603a9:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:43c3cae:     }
1:4a603a9: 
1:4a603a9:     @Test
1:4a603a9:     public void testModFilteredComposite() throws Exception {
1:4a603a9:         final String brokerConfig = configurationSeed + "-mod-filtered-composite-vd-broker";
1:4a603a9:         applyNewConfig(brokerConfig, configurationSeed + "-add-filtered-composite-vd");
1:4a603a9:         startBroker(brokerConfig);
1:4a603a9:         assertTrue("broker alive", brokerService.isStarted());
1:4a603a9:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:4a603a9: 
1:4a603a9:         applyNewConfig(brokerConfig, configurationSeed + "-mod-filtered-composite-vd", SLEEP);
1:4a603a9:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:4a603a9:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:4a603a9:     }
1:4a603a9: 
1:92860ae: 
1:92860ae: 
1:92860ae: 
2:4109b79: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: public class VirtualDestTest extends AbstractVirtualDestTest {
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:4a603a9
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Test
1:     public void testNewFilteredComposite() throws Exception {
1:         final String brokerConfig = configurationSeed + "-new-filtered-composite-vd-broker";
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         applyNewConfig(brokerConfig, configurationSeed + "-add-filtered-composite-vd", SLEEP);
1: 
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:     }  
1: 
1:     @Test
1:     public void testModFilteredComposite() throws Exception {
1:         final String brokerConfig = configurationSeed + "-mod-filtered-composite-vd-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-add-filtered-composite-vd");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-filtered-composite-vd", SLEEP);
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:     }   
1:     
/////////////////////////////////////////////////////////////////////////
0:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
/////////////////////////////////////////////////////////////////////////
0:         Message message = sendAndReceiveMessage(session, consumer, producer, body);
1:     
0:     private void exerciseFilteredCompositeQueue(String dest, String consumerDestination, String acceptedHeaderValue) throws Exception {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
0:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerDestination));
0:         LOG.info("new consumer for: " + consumer.getDestination());
0:         MessageProducer producer = session.createProducer(session.createQueue(dest));
0:         // positive test
0:         String body = "To filtered cq:" + dest;
1: 
0:         Message message = sendAndReceiveMessage(session, consumer, producer, body, Collections.singletonMap("odd", acceptedHeaderValue));
0:         assertNotNull("The message did not reach the destination even though it should pass through the filter.", message);
0:         assertEquals("Did not get expected message", body, ((TextMessage) message).getText());
1: 
0:         // negative test
0:         message = sendAndReceiveMessage(session, consumer, producer, "Not to filtered cq:" + dest, Collections.singletonMap("odd", "somethingElse"));
0:         assertNull("The message reached the destination, but it should have been removed by the filter.", message);
1: 
0:         connection.close();
1:     }
1: 
0:     private Message sendAndReceiveMessage(Session session,
0:                                           ActiveMQMessageConsumer consumer, MessageProducer producer,
0:                                           final String messageBody) throws Exception {
0:         return sendAndReceiveMessage(session, consumer, producer, messageBody, null);
1:     }
1: 
0:     private Message sendAndReceiveMessage(Session session,
0:                                           ActiveMQMessageConsumer consumer, MessageProducer producer,
0:                                           final String messageBody, Map<String, String> propertiesMap)
0:             throws Exception {
0:         TextMessage messageToSend = session.createTextMessage(messageBody);
0:         if (propertiesMap != null) {
0:             for (String headerKey : propertiesMap.keySet()) {
0:                 messageToSend.setStringProperty(headerKey, propertiesMap.get(headerKey));
1:             }
1:         }
0:         producer.send(messageToSend);
0:         LOG.info("sent to: " + producer.getDestination());
1: 
0:         Message message = null;
0:         for (int i = 0; i < 10 && message == null; i++) {
0:             message = consumer.receive(1000);
1:         }
0:         return message;
1:     }
commit:4109b79
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testNewComposite() throws Exception {
1:         final String brokerConfig = configurationSeed + "-new-composite-vd-broker";
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-add-composite-vd", SLEEP);
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:     }
/////////////////////////////////////////////////////////////////////////
0:         exerciseVirtualTopic("Consumer.A.", topic);
1:     }
1: 
0:     private void exerciseVirtualTopic(String prefix, String topic) throws Exception {
0:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(prefix + topic));
/////////////////////////////////////////////////////////////////////////
0:     private void exerciseCompositeQueue(String dest, String consumerQ) throws Exception {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue(consumerQ));
0:         LOG.info("new consumer for: " + consumer.getDestination());
0:         MessageProducer producer = session.createProducer(session.createQueue(dest));
0:         final String body = "To cq:" + dest;
0:         producer.send(session.createTextMessage(body));
0:         LOG.info("sent to: " + producer.getDestination());
1: 
0:         Message message = null;
0:         for (int i=0; i<10 && message == null; i++) {
0:             message = consumer.receive(1000);
1:         }
0:         assertNotNull("got message", message);
0:         assertEquals("got expected message", body, ((TextMessage) message).getText());
0:         connection.close();
1:     }
1: 
commit:1fdc2c4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
1:     public void testModComposite() throws Exception {
1:         final String brokerConfig = configurationSeed + "-mod-composite-vd-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-add-composite-vd");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-composite-vd", SLEEP);
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.CompositeQueue");
0:     }
1: 
1:     @Test
author:Gary Tully
-------------------------------------------------------------------------------
commit:8d480b4
/////////////////////////////////////////////////////////////////////////
1:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
/////////////////////////////////////////////////////////////////////////
1:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
/////////////////////////////////////////////////////////////////////////
1:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(session.createQueue("Consumer.A." + topic));
0:         LOG.info("new consumer for: " + consumer.getDestination());
0:         LOG.info("sent to: " + producer.getDestination());
0:         for (int i=0; i<10 && message == null; i++) {
commit:8b8e726
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: public class VirtualDestTest extends RuntimeConfigTestSupport {
1:         final String brokerConfig = configurationSeed + "-new-no-vd-broker";
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
/////////////////////////////////////////////////////////////////////////
1:         final String brokerConfig = configurationSeed + "-no-vd-vt-broker";
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
/////////////////////////////////////////////////////////////////////////
1:         final String brokerConfig = configurationSeed + "-no-vd-mq-broker";
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG);
/////////////////////////////////////////////////////////////////////////
1:         final String brokerConfig = configurationSeed + "-one-vd-rm-broker";
/////////////////////////////////////////////////////////////////////////
1:         applyNewConfig(brokerConfig, RuntimeConfigTestSupport.EMPTY_UPDATABLE_CONFIG, SLEEP);
/////////////////////////////////////////////////////////////////////////
1:         final String brokerConfig = configurationSeed + "-one-vd-mod-broker";
/////////////////////////////////////////////////////////////////////////
1:         final String brokerConfig = configurationSeed + "-one-vd-mq-mod-broker";
/////////////////////////////////////////////////////////////////////////
commit:92860ae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.FileOutputStream;
0: import java.util.concurrent.TimeUnit;
0: import javax.jms.*;
0: import javax.jms.Message;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
0: import org.apache.activemq.spring.Utils;
1: import org.apache.activemq.util.Wait;
0: import org.junit.After;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: import org.springframework.core.io.Resource;
1: 
1: 
0: import static org.junit.Assert.*;
1: 
0: public class VirtualDestTest {
1: 
0:     public static final Logger LOG = LoggerFactory.getLogger(VirtualDestTest.class);
0:     public static final int SLEEP = 4; // seconds
1:     String configurationSeed = "virtualDestTest";
0:     BrokerService brokerService;
1: 
0:     public void startBroker(String configFileName) throws Exception {
0:         brokerService = createBroker(configFileName);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
0:     }
1: 
0:     public BrokerService createBroker(String configFileName) throws Exception {
0:         brokerService = new BrokerService();
0:         return BrokerFactory.createBroker("xbean:org/apache/activemq/" + configFileName + ".xml");
0:     }
1: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         brokerService.stop();
0:     }
1: 
1:     @Test
1:     public void testNew() throws Exception {
0:         final String brokerConfig = configurationSeed + "-no-vd-broker";
0:         applyNewConfig(brokerConfig, NetworkConnectorTest.EMPTY_UPDATABLE_CONFIG);
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         // default config has support for VirtualTopic.>
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("default names in place", "VirtualTopic.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         exerciseVirtualTopic("VirtualTopic.Default");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1: 
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("new names in place", "A.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         // apply again - ensure no change
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
0:         assertSame("same instance", newValue, (((VirtualDestinationInterceptor) brokerService.getDestinationInterceptors()[0])));
0:     }
1: 
1: 
1:     @Test
1:     public void testNewNoDefaultVirtualTopicSupport() throws Exception {
0:         final String brokerConfig = configurationSeed + "-no-vd-broker";
0:         applyNewConfig(brokerConfig, NetworkConnectorTest.EMPTY_UPDATABLE_CONFIG);
1:         brokerService = createBroker(brokerConfig);
1:         brokerService.setUseVirtualTopics(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 0, interceptors.length);
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1: 
1:         // apply again - ensure no change
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
0:         assertSame("same instance", newValue, (((VirtualDestinationInterceptor) brokerService.getDestinationInterceptors()[0])));
0:     }
1: 
1:     @Test
1:     public void testNewWithMirrorQueueSupport() throws Exception {
0:         final String brokerConfig = configurationSeed + "-no-vd-broker";
0:         applyNewConfig(brokerConfig, NetworkConnectorTest.EMPTY_UPDATABLE_CONFIG);
1:         brokerService = createBroker(brokerConfig);
1:         brokerService.setUseMirroredQueues(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 2, interceptors.length);
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 2, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1: 
1:         // apply again - ensure no change
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
0:         assertSame("same instance", newValue, (((VirtualDestinationInterceptor) brokerService.getDestinationInterceptors()[0])));
0:     }
1: 
1:     @Test
1:     public void testRemove() throws Exception {
0:         final String brokerConfig = configurationSeed + "-one-vd-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("configured names in place", "A.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         exerciseVirtualTopic("A.Default");
1: 
0:         applyNewConfig(brokerConfig, NetworkConnectorTest.EMPTY_UPDATABLE_CONFIG, SLEEP);
1: 
1:         // update will happen on addDestination
1:         forceAddDestination("AnyDest");
1: 
1:         assertTrue("getDestinationInterceptors empty on time", Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() {
1:                 return 0 == brokerService.getDestinationInterceptors().length;
0:             }
1:         }));
1: 
1:         // reverse the remove, add again
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd", SLEEP);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.NewOne");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
0:     }
1: 
1:     @Test
1:     public void testMod() throws Exception {
0:         final String brokerConfig = configurationSeed + "-one-vd-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:         exerciseVirtualTopic("A.Default");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-vd", SLEEP);
1:         exerciseVirtualTopic("B.Default");
1: 
1:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
0:     }
1: 
1: 
1:     @Test
1:     public void testModWithMirroredQueue() throws Exception {
0:         final String brokerConfig = configurationSeed + "-one-vd-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-one-vd");
1:         brokerService = createBroker(brokerConfig);
1:         brokerService.setUseMirroredQueues(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:         exerciseVirtualTopic("A.Default");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-mod-one-vd", SLEEP);
1:         exerciseVirtualTopic("B.Default");
1: 
1:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
0:     }
1: 
0:     private void forceAddDestination(String dest) throws Exception {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createConsumer(session.createQueue("Consumer.A." + dest));
0:         connection.close();
0:     }
1: 
0:     private void exerciseVirtualTopic(String topic) throws Exception {
0:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0:         MessageConsumer consumer = session.createConsumer(session.createQueue("Consumer.A." + topic));
0:         MessageProducer producer = session.createProducer(session.createTopic(topic));
0:         final String body = "To vt:" + topic;
0:         producer.send(session.createTextMessage(body));
1: 
0:         Message message = null;
0:         for (int i=0; i<5 && message == null; i++) {
0:             message = consumer.receive(1000);
0:         }
0:         assertNotNull("got message", message);
0:         assertEquals("got expected message", body, ((TextMessage) message).getText());
0:         connection.close();
0:     }
1: 
0:     private void applyNewConfig(String configName, String newConfigName) throws Exception {
0:         applyNewConfig(configName, newConfigName, 0l);
0:     }
1: 
0:     private void applyNewConfig(String configName, String newConfigName, long sleep) throws Exception {
0:         Resource resource = Utils.resourceFromString("org/apache/activemq");
0:         FileOutputStream current = new FileOutputStream(new File(resource.getFile(), configName + ".xml"));
0:         FileInputStream modifications = new FileInputStream(new File(resource.getFile(), newConfigName + ".xml"));
0:         modifications.getChannel().transferTo(0, Long.MAX_VALUE, current.getChannel());
0:         current.flush();
0:         LOG.info("Updated: " + current.getChannel());
1: 
0:         if (sleep > 0) {
0:             // wait for mods to kick in
0:             TimeUnit.SECONDS.sleep(sleep);
0:         }
0:     }
0: }
============================================================================