1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
8:1a88ac6: 
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:1a88ac6: 
1:1a88ac6: import java.security.Principal;
1:1a88ac6: import java.security.cert.Certificate;
1:1a88ac6: import java.security.cert.X509Certificate;
1:1a88ac6: 
1:1a88ac6: import javax.net.ssl.SSLPeerUnverifiedException;
1:1a88ac6: import javax.net.ssl.SSLSession;
1:1a88ac6: import javax.net.ssl.SSLSessionContext;
1:1a88ac6: 
1:1a88ac6: class StubSSLSession implements SSLSession {
1:230a86c: 
1:1a88ac6:     X509Certificate cert;
1:230a86c:     boolean isVerified;
1:230a86c: 
1:1a88ac6:     public StubSSLSession(X509Certificate cert) {
1:230a86c:         if (cert != null) {
1:1a88ac6:             this.isVerified = true;
1:1a88ac6:             this.cert = cert;
1:1a88ac6:         } else {
1:1a88ac6:             this.isVerified = false;
1:1a88ac6:             this.cert = null;
1:1a88ac6:         }
1:1a88ac6:     }
1:230a86c: 
1:230a86c:     public void setIsVerified(boolean verified) {
1:1a88ac6:         this.isVerified = verified;
1:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     public Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException {
1:fc00993:         if (this.isVerified) {
1:230a86c:             return new X509Certificate[] {this.cert};
1:fc00993:         } else {
1:1a88ac6:             throw new SSLPeerUnverifiedException("Socket is unverified.");
1:fc00993:         }
1:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     // --- Stubbed methods ---
1:230a86c: 
1:1a88ac6:     public byte[] getId() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public SSLSessionContext getSessionContext() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public long getCreationTime() {
1:1a88ac6:         return 0;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public long getLastAccessedTime() {
1:1a88ac6:         return 0;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void invalidate() {
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public boolean isValid() {
1:1a88ac6:         return false;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void putValue(String arg0, Object arg1) {
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public Object getValue(String arg0) {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void removeValue(String arg0) {
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public String[] getValueNames() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public Certificate[] getLocalCertificates() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:230a86c:     public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public Principal getLocalPrincipal() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public String getCipherSuite() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public String getProtocol() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public String getPeerHost() {
1:1a88ac6:         return null;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public int getPeerPort() {
1:1a88ac6:         return 0;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public int getPacketBufferSize() {
1:1a88ac6:         return 0;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public int getApplicationBufferSize() {
1:1a88ac6:         return 0;
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (this.isVerified) {
1:         } else {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:     boolean isVerified;
1: 
1:         if (cert != null) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setIsVerified(boolean verified) {
1: 
0:         if (this.isVerified)
1:             return new X509Certificate[] {this.cert};
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException {
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.security.Principal;
1: import java.security.cert.Certificate;
1: import java.security.cert.X509Certificate;
1: 
1: import javax.net.ssl.SSLPeerUnverifiedException;
1: import javax.net.ssl.SSLSession;
1: import javax.net.ssl.SSLSessionContext;
1: 
1: class StubSSLSession implements SSLSession {
1:     
1:     X509Certificate cert;
0:     boolean isVerified = false;
1:     
1:     public StubSSLSession(X509Certificate cert) {
0:         if ( cert != null ) {
1:             this.isVerified = true;
1:             this.cert = cert;
1:         } else {
1:             this.isVerified = false;
1:             this.cert = null;
1:         }
1:     }
1:     
0:     public void setIsVerified( boolean verified ) {
1:         this.isVerified = verified;
1:     }
1:     
1:     public Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException {
0:         if ( this.isVerified )
0:             return new X509Certificate[] { this.cert };
0:         else
1:             throw new SSLPeerUnverifiedException("Socket is unverified.");
1:     }
1:     
1:     
1:     // --- Stubbed methods ---
1:     
1:     public byte[] getId() {
1:         return null;
1:     }
1: 
1:     public SSLSessionContext getSessionContext() {
1:         return null;
1:     }
1: 
1:     public long getCreationTime() {
1:         return 0;
1:     }
1: 
1:     public long getLastAccessedTime() {
1:         return 0;
1:     }
1: 
1:     public void invalidate() {
1:     }
1: 
1:     public boolean isValid() {
1:         return false;
1:     }
1: 
1:     public void putValue(String arg0, Object arg1) {
1:     }
1: 
1:     public Object getValue(String arg0) {
1:         return null;
1:     }
1: 
1:     public void removeValue(String arg0) {
1:     }
1: 
1:     public String[] getValueNames() {
1:         return null;
1:     }
1: 
1:     public Certificate[] getLocalCertificates() {
1:         return null;
1:     }
1: 
0:     public javax.security.cert.X509Certificate[] getPeerCertificateChain()
0:             throws SSLPeerUnverifiedException {
1:         return null;
1:     }
1: 
1:     public Principal getPeerPrincipal() throws SSLPeerUnverifiedException {
1:         return null;
1:     }
1: 
1:     public Principal getLocalPrincipal() {
1:         return null;
1:     }
1: 
1:     public String getCipherSuite() {
1:         return null;
1:     }
1: 
1:     public String getProtocol() {
1:         return null;
1:     }
1: 
1:     public String getPeerHost() {
1:         return null;
1:     }
1: 
1:     public int getPeerPort() {
1:         return 0;
1:     }
1: 
1:     public int getPacketBufferSize() {
1:         return 0;
1:     }
1: 
1:     public int getApplicationBufferSize() {
1:         return 0;
1:     }
1: }
============================================================================