1:38a6bed: /**
1:38a6bed:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:38a6bed:  * contributor license agreements.  See the NOTICE file distributed with
1:38a6bed:  * this work for additional information regarding copyright ownership.
1:38a6bed:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:38a6bed:  * (the "License"); you may not use this file except in compliance with
1:38a6bed:  * the License.  You may obtain a copy of the License at
1:38a6bed:  *
1:38a6bed:  *      http://www.apache.org/licenses/LICENSE-2.0
1:38a6bed:  *
1:38a6bed:  * Unless required by applicable law or agreed to in writing, software
1:38a6bed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:38a6bed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:38a6bed:  * See the License for the specific language governing permissions and
1:38a6bed:  * limitations under the License.
1:38a6bed:  */
1:38a6bed: package org.apache.activemq.jaas;
1:38a6bed: 
1:38a6bed: import java.util.Map;
1:38a6bed: 
1:38a6bed: import javax.security.auth.Subject;
1:38a6bed: import javax.security.auth.callback.CallbackHandler;
1:38a6bed: 
1:38a6bed: import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
1:38a6bed: import org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig;
1:38a6bed: import org.jasypt.properties.EncryptableProperties;
1:38a6bed: 
1:38a6bed: /**
1:38a6bed:  * LDAPLoginModule that supports encryption
1:38a6bed:  */
1:38a6bed: public class EncryptableLDAPLoginModule extends LDAPLoginModule {
1:38a6bed: 
1:38a6bed:     private static final String ENCRYPTION_PASSWORD = "encryptionPassword";
1:38a6bed:     private static final String PASSWORD_ENV_NAME = "passwordEnvName";
1:38a6bed:     private static final String PASSWORD_ALGORITHM = "encryptionAlgorithm";
1:38a6bed:     private static final String DEFAULT_PASSWORD_ENV_NAME = "ACTIVEMQ_ENCRYPTION_PASSWORD";
1:38a6bed:     private static final String DEFAULT_PASSWORD_ALGORITHM = "PBEWithMD5AndDES";
1:38a6bed:     private final StandardPBEStringEncryptor configurationEncryptor = new StandardPBEStringEncryptor();
1:38a6bed: 
1:38a6bed:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:38a6bed:     @Override
1:38a6bed:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:38a6bed: 
1:38a6bed:         String encryptionPassword = (String)options.get(ENCRYPTION_PASSWORD);
1:38a6bed:         String passwordEnvName = options.get(PASSWORD_ENV_NAME) != null ?
1:38a6bed:                 (String)options.get(PASSWORD_ENV_NAME) : DEFAULT_PASSWORD_ENV_NAME;
1:38a6bed:         String passwordAlgorithm = options.get(PASSWORD_ALGORITHM) != null ?
1:38a6bed:                 (String)options.get(PASSWORD_ALGORITHM) : DEFAULT_PASSWORD_ALGORITHM;
1:38a6bed: 
1:38a6bed:         EnvironmentStringPBEConfig envConfig = new EnvironmentStringPBEConfig();
1:38a6bed:         envConfig.setAlgorithm(passwordAlgorithm);
1:38a6bed: 
1:38a6bed:         //If the password was set, use it
1:38a6bed:         //else look up the password from the environment
1:38a6bed:         if (encryptionPassword == null) {
1:38a6bed:             envConfig.setPasswordEnvName(passwordEnvName);
1:38a6bed:         } else {
1:38a6bed:             envConfig.setPassword(encryptionPassword);
1:38a6bed:         }
1:38a6bed: 
1:38a6bed:         configurationEncryptor.setConfig(envConfig);
1:38a6bed:         EncryptableProperties encryptableOptions
1:38a6bed:             = new EncryptableProperties(configurationEncryptor);
1:38a6bed:         encryptableOptions.putAll(options);
1:38a6bed: 
1:38a6bed:         super.initialize(subject, callbackHandler, sharedState, encryptableOptions);
1:38a6bed: 
1:38a6bed:     }
1:38a6bed: 
1:38a6bed: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:38a6bed
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import java.util.Map;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: 
1: import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
1: import org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig;
1: import org.jasypt.properties.EncryptableProperties;
1: 
1: /**
1:  * LDAPLoginModule that supports encryption
1:  */
1: public class EncryptableLDAPLoginModule extends LDAPLoginModule {
1: 
1:     private static final String ENCRYPTION_PASSWORD = "encryptionPassword";
1:     private static final String PASSWORD_ENV_NAME = "passwordEnvName";
1:     private static final String PASSWORD_ALGORITHM = "encryptionAlgorithm";
1:     private static final String DEFAULT_PASSWORD_ENV_NAME = "ACTIVEMQ_ENCRYPTION_PASSWORD";
1:     private static final String DEFAULT_PASSWORD_ALGORITHM = "PBEWithMD5AndDES";
1:     private final StandardPBEStringEncryptor configurationEncryptor = new StandardPBEStringEncryptor();
1: 
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     @Override
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1: 
1:         String encryptionPassword = (String)options.get(ENCRYPTION_PASSWORD);
1:         String passwordEnvName = options.get(PASSWORD_ENV_NAME) != null ?
1:                 (String)options.get(PASSWORD_ENV_NAME) : DEFAULT_PASSWORD_ENV_NAME;
1:         String passwordAlgorithm = options.get(PASSWORD_ALGORITHM) != null ?
1:                 (String)options.get(PASSWORD_ALGORITHM) : DEFAULT_PASSWORD_ALGORITHM;
1: 
1:         EnvironmentStringPBEConfig envConfig = new EnvironmentStringPBEConfig();
1:         envConfig.setAlgorithm(passwordAlgorithm);
1: 
1:         //If the password was set, use it
1:         //else look up the password from the environment
1:         if (encryptionPassword == null) {
1:             envConfig.setPasswordEnvName(passwordEnvName);
1:         } else {
1:             envConfig.setPassword(encryptionPassword);
1:         }
1: 
1:         configurationEncryptor.setConfig(envConfig);
1:         EncryptableProperties encryptableOptions
1:             = new EncryptableProperties(configurationEncryptor);
1:         encryptableOptions.putAll(options);
1: 
1:         super.initialize(subject, callbackHandler, sharedState, encryptableOptions);
1: 
1:     }
1: 
1: }
============================================================================