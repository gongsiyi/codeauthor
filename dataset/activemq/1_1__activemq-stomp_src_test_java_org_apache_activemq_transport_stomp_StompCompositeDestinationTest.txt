1:c360c3e: /**
1:c360c3e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c360c3e:  * contributor license agreements.  See the NOTICE file distributed with
1:c360c3e:  * this work for additional information regarding copyright ownership.
1:c360c3e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c360c3e:  * (the "License"); you may not use this file except in compliance with
1:c360c3e:  * the License.  You may obtain a copy of the License at
1:c360c3e:  *
1:c360c3e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c360c3e:  *
1:c360c3e:  * Unless required by applicable law or agreed to in writing, software
1:c360c3e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c360c3e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c360c3e:  * See the License for the specific language governing permissions and
1:c360c3e:  * limitations under the License.
1:c360c3e:  */
1:c360c3e: package org.apache.activemq.transport.stomp;
1:c360c3e: 
1:c360c3e: import static org.junit.Assert.assertEquals;
1:c360c3e: import static org.junit.Assert.assertNotNull;
1:c360c3e: import static org.junit.Assert.assertTrue;
1:c360c3e: 
1:c360c3e: import java.util.concurrent.TimeUnit;
1:c360c3e: 
1:c360c3e: import javax.jms.Connection;
1:c360c3e: import javax.jms.Destination;
1:c360c3e: import javax.jms.JMSException;
1:c360c3e: import javax.jms.MessageProducer;
1:c360c3e: import javax.jms.Session;
1:c360c3e: import javax.jms.TextMessage;
1:15dc6cc: import javax.management.ObjectName;
1:c360c3e: 
1:c360c3e: import org.apache.activemq.ActiveMQConnection;
1:c360c3e: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:c360c3e: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:c360c3e: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:c360c3e: import org.apache.activemq.util.Wait;
1:c360c3e: import org.junit.Test;
1:c360c3e: import org.slf4j.Logger;
1:c360c3e: import org.slf4j.LoggerFactory;
1:c360c3e: 
1:c360c3e: /**
1:c360c3e:  * Tests for support of composite destination support over STOMP
1:c360c3e:  */
1:c360c3e: public class StompCompositeDestinationTest extends StompTestSupport {
1:c360c3e: 
1:c360c3e:     private static final Logger LOG = LoggerFactory.getLogger(StompCompositeDestinationTest.class);
1:c360c3e: 
1:c360c3e:     protected ActiveMQConnection connection;
1:c360c3e: 
1:c360c3e:     @Override
1:c360c3e:     public void tearDown() throws Exception {
1:c360c3e:         try {
1:c360c3e:             connection.close();
1:c360c3e:         } catch (Exception ex) {}
1:c360c3e: 
1:c360c3e:         super.tearDown();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 20000)
1:c360c3e:     public void testSubscribeToCompositeQueue() throws Exception {
1:c360c3e:         stompConnect();
1:c360c3e: 
1:c360c3e:         String destinationA = "StompA";
1:c360c3e:         String destinationB = "StompB";
1:c360c3e: 
1:c360c3e:         String frame = "CONNECT\n" +
1:c360c3e:                        "login:system\n" +
1:c360c3e:                        "passcode:manager\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("CONNECTED"));
1:c360c3e: 
1:c360c3e:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1:c360c3e: 
1:c360c3e:         frame = "SUBSCRIBE\n" +
1:c360c3e:                 "destination:/queue/" + destinationA + ",/queue/" + destinationB + "\n" +
1:c360c3e:                 "ack:auto\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         // Test in same order as the subscribe command
1:c360c3e: 
1:c360c3e:         sendMessage(destinationA, false);
1:c360c3e:         sendMessage(destinationB, false);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         // Test the reverse ordering
1:c360c3e: 
1:c360c3e:         sendMessage(destinationB, false);
1:c360c3e:         sendMessage(destinationA, false);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         stompConnection.disconnect();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 20000)
1:c360c3e:     public void testSubscribeToCompositeQueueTrailersDefault() throws Exception {
1:c360c3e:         stompConnect();
1:c360c3e: 
1:c360c3e:         String destinationA = "StompA";
1:c360c3e:         String destinationB = "StompB";
1:c360c3e: 
1:c360c3e:         String frame = "CONNECT\n" +
1:c360c3e:                        "login:system\n" +
1:c360c3e:                        "passcode:manager\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("CONNECTED"));
1:c360c3e: 
1:c360c3e:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1:c360c3e: 
1:c360c3e:         frame = "SUBSCRIBE\n" +
1:c360c3e:                 "destination:/queue/" + destinationA + "," + destinationB + "\n" +
1:c360c3e:                 "ack:auto\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         // Test in same order as the subscribe command
1:c360c3e: 
1:c360c3e:         sendMessage(destinationA, false);
1:c360c3e:         sendMessage(destinationB, false);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         // Test the reverse ordering
1:c360c3e: 
1:c360c3e:         sendMessage(destinationB, false);
1:c360c3e:         sendMessage(destinationA, false);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         stompConnection.disconnect();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 20000)
1:c360c3e:     public void testSubscribeToCompositeTopics() throws Exception {
1:c360c3e:         stompConnect();
1:c360c3e: 
1:c360c3e:         String destinationA = "StompA";
1:c360c3e:         String destinationB = "StompB";
1:c360c3e: 
1:c360c3e:         String frame = "CONNECT\n" +
1:c360c3e:                        "login:system\n" +
1:c360c3e:                        "passcode:manager\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("CONNECTED"));
1:c360c3e: 
1:c360c3e:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1:c360c3e: 
1:c360c3e:         frame = "SUBSCRIBE\n" +
1:c360c3e:                 "destination:/topic/" + destinationA + ",/topic/" + destinationB + "\n" +
1:c360c3e:                 "ack:auto\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         // Test in same order as the subscribe command
1:c360c3e: 
1:c360c3e:         sendMessage(destinationA, true);
1:c360c3e:         sendMessage(destinationB, true);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         // Test the reverse ordering
1:c360c3e: 
1:c360c3e:         sendMessage(destinationB, true);
1:c360c3e:         sendMessage(destinationA, true);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("MESSAGE"));
1:c360c3e: 
1:c360c3e:         stompConnection.disconnect();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 60000)
1:c360c3e:     public void testSendMessageToCompositeQueue() throws Exception {
1:c360c3e:         stompConnect();
1:15dc6cc: 
1:c360c3e:         String destinationA = "StompA";
1:c360c3e:         String destinationB = "StompB";
1:c360c3e: 
1:c360c3e:         String frame = "CONNECT\n" +
1:c360c3e:                        "login:system\n" +
1:c360c3e:                        "passcode:manager\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("CONNECTED"));
1:c360c3e: 
1:c360c3e:         frame = "SEND\n" +
1:c360c3e:                 "destination:/queue/" + destinationA + ",/queue/" + destinationB +
1:c360c3e:                 "\n\n" + "Hello World" + Stomp.NULL;
1:c360c3e: 
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         final BrokerViewMBean brokerView = getProxyToBroker();
1:c360c3e:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1:c360c3e: 
1:c360c3e:             @Override
1:c360c3e:             public boolean isSatisified() throws Exception {
1:c360c3e:                 return brokerView.getQueues().length == 2;
1:c360c3e:             }
1:c360c3e:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1:c360c3e: 
1:c360c3e:         QueueViewMBean viewOfA = getProxyToQueue(destinationA);
1:c360c3e:         QueueViewMBean viewOfB = getProxyToQueue(destinationB);
1:c360c3e: 
1:c360c3e:         assertNotNull(viewOfA);
1:c360c3e:         assertNotNull(viewOfB);
1:c360c3e: 
1:c360c3e:         assertEquals(1, viewOfA.getQueueSize());
1:c360c3e:         assertEquals(1, viewOfB.getQueueSize());
1:c360c3e: 
1:c360c3e:         stompConnection.disconnect();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     @Test(timeout = 60000)
1:15dc6cc:     public void testSendMessageToCompositeQueueNoPrefixes() throws Exception {
1:15dc6cc:         stompConnect();
1:15dc6cc: 
1:15dc6cc:         String destinationA = "StompA.Queue";
1:15dc6cc:         String destinationB = "StompB.Queue";
1:15dc6cc: 
1:15dc6cc:         String frame = "CONNECT\n" +
1:15dc6cc:                        "login:system\n" +
1:15dc6cc:                        "passcode:manager\n\n" + Stomp.NULL;
1:15dc6cc:         stompConnection.sendFrame(frame);
1:15dc6cc: 
1:15dc6cc:         frame = stompConnection.receiveFrame();
1:15dc6cc:         assertTrue(frame.startsWith("CONNECTED"));
1:15dc6cc: 
1:15dc6cc:         frame = "SEND\n" +
1:15dc6cc:                 "destination:" + destinationA + "," + destinationB +
1:15dc6cc:                 "\n\n" + "Hello World" + Stomp.NULL;
1:15dc6cc: 
1:15dc6cc:         stompConnection.sendFrame(frame);
1:15dc6cc: 
1:15dc6cc:         final BrokerViewMBean brokerView = getProxyToBroker();
1:15dc6cc:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1:15dc6cc: 
1:15dc6cc:             @Override
1:15dc6cc:             public boolean isSatisified() throws Exception {
1:15dc6cc:                 for(ObjectName queueName : brokerView.getQueues()) {
1:15dc6cc:                     LOG.info("Broker Has Queue: {}", queueName);
1:15dc6cc:                 }
1:15dc6cc:                 return brokerView.getQueues().length == 2;
1:15dc6cc:             }
1:15dc6cc:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1:15dc6cc: 
1:15dc6cc:         QueueViewMBean viewOfA = getProxyToQueue(destinationA);
1:15dc6cc:         QueueViewMBean viewOfB = getProxyToQueue(destinationB);
1:15dc6cc: 
1:15dc6cc:         assertNotNull(viewOfA);
1:15dc6cc:         assertNotNull(viewOfB);
1:15dc6cc: 
1:15dc6cc:         assertEquals(1, viewOfA.getQueueSize());
1:15dc6cc:         assertEquals(1, viewOfB.getQueueSize());
1:15dc6cc: 
1:15dc6cc:         stompConnection.disconnect();
1:15dc6cc:     }
1:c360c3e: 
1:15dc6cc:     @Test(timeout = 60000)
1:c360c3e:     public void testSendMessageToCompositeTopic() throws Exception {
1:c360c3e:         stompConnect();
1:c360c3e: 
1:c360c3e:         String destinationA = "StompA";
1:c360c3e:         String destinationB = "StompB";
1:c360c3e: 
1:c360c3e:         String frame = "CONNECT\n" +
1:c360c3e:                        "login:system\n" +
1:c360c3e:                        "passcode:manager\n\n" + Stomp.NULL;
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         frame = stompConnection.receiveFrame();
1:c360c3e:         assertTrue(frame.startsWith("CONNECTED"));
1:c360c3e: 
1:c360c3e:         frame = "SEND\n" +
1:c360c3e:                 "destination:/topic/" + destinationA + ",/topic/" + destinationB +
1:c360c3e:                 "\n\n" + "Hello World" + Stomp.NULL;
1:c360c3e: 
1:c360c3e:         stompConnection.sendFrame(frame);
1:c360c3e: 
1:c360c3e:         final BrokerViewMBean brokerView = getProxyToBroker();
1:c360c3e:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1:c360c3e: 
1:c360c3e:             @Override
1:c360c3e:             public boolean isSatisified() throws Exception {
1:c360c3e:                 return brokerView.getTopics().length == 2;
1:c360c3e:             }
1:c360c3e:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1:c360c3e: 
1:c360c3e:         TopicViewMBean viewOfA = getProxyToTopic(destinationA);
1:c360c3e:         TopicViewMBean viewOfB = getProxyToTopic(destinationB);
1:c360c3e: 
1:c360c3e:         assertNotNull(viewOfA);
1:c360c3e:         assertNotNull(viewOfB);
1:c360c3e: 
1:c360c3e:         assertEquals(1, viewOfA.getEnqueueCount());
1:c360c3e:         assertEquals(1, viewOfB.getEnqueueCount());
1:c360c3e: 
1:c360c3e:         stompConnection.disconnect();
1:c360c3e:     }
1:c360c3e: 
1:c360c3e:     private void sendMessage(String destinationName, boolean topic) throws JMSException {
1:c360c3e:         Connection connection = cf.createConnection("system", "manager");
1:c360c3e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c360c3e:         Destination destination = null;
1:c360c3e: 
1:c360c3e:         if (topic) {
1:c360c3e:             destination = session.createTopic(destinationName);
1:c360c3e:         } else {
1:c360c3e:             destination = session.createQueue(destinationName);
1:c360c3e:         }
1:c360c3e: 
1:c360c3e:         MessageProducer producer = session.createProducer(destination);
1:c360c3e:         TextMessage message = session.createTextMessage("test");
1:c360c3e:         producer.send(message);
1:c360c3e: 
1:c360c3e:         connection.close();
1:c360c3e:     }
1:c360c3e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:15dc6cc
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     public void testSendMessageToCompositeQueueNoPrefixes() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA.Queue";
1:         String destinationB = "StompB.Queue";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" +
1:                 "destination:" + destinationA + "," + destinationB +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 for(ObjectName queueName : brokerView.getQueues()) {
1:                     LOG.info("Broker Has Queue: {}", queueName);
1:                 }
1:                 return brokerView.getQueues().length == 2;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1: 
1:         QueueViewMBean viewOfA = getProxyToQueue(destinationA);
1:         QueueViewMBean viewOfB = getProxyToQueue(destinationB);
1: 
1:         assertNotNull(viewOfA);
1:         assertNotNull(viewOfB);
1: 
1:         assertEquals(1, viewOfA.getQueueSize());
1:         assertEquals(1, viewOfB.getQueueSize());
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:c360c3e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests for support of composite destination support over STOMP
1:  */
1: public class StompCompositeDestinationTest extends StompTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompCompositeDestinationTest.class);
1: 
1:     protected ActiveMQConnection connection;
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         try {
1:             connection.close();
1:         } catch (Exception ex) {}
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 20000)
1:     public void testSubscribeToCompositeQueue() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA";
1:         String destinationB = "StompB";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1: 
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/queue/" + destinationA + ",/queue/" + destinationB + "\n" +
1:                 "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Test in same order as the subscribe command
1: 
1:         sendMessage(destinationA, false);
1:         sendMessage(destinationB, false);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         // Test the reverse ordering
1: 
1:         sendMessage(destinationB, false);
1:         sendMessage(destinationA, false);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     @Test(timeout = 20000)
1:     public void testSubscribeToCompositeQueueTrailersDefault() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA";
1:         String destinationB = "StompB";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1: 
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/queue/" + destinationA + "," + destinationB + "\n" +
1:                 "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Test in same order as the subscribe command
1: 
1:         sendMessage(destinationA, false);
1:         sendMessage(destinationB, false);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         // Test the reverse ordering
1: 
1:         sendMessage(destinationB, false);
1:         sendMessage(destinationA, false);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     @Test(timeout = 20000)
1:     public void testSubscribeToCompositeTopics() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA";
1:         String destinationB = "StompB";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         LOG.info("Subscribing to destination: {},{}", destinationA, destinationB);
1: 
1:         frame = "SUBSCRIBE\n" +
1:                 "destination:/topic/" + destinationA + ",/topic/" + destinationB + "\n" +
1:                 "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Test in same order as the subscribe command
1: 
1:         sendMessage(destinationA, true);
1:         sendMessage(destinationB, true);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         // Test the reverse ordering
1: 
1:         sendMessage(destinationB, true);
1:         sendMessage(destinationA, true);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToCompositeQueue() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA";
1:         String destinationB = "StompB";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" +
1:                 "destination:/queue/" + destinationA + ",/queue/" + destinationB +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getQueues().length == 2;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1: 
1:         QueueViewMBean viewOfA = getProxyToQueue(destinationA);
1:         QueueViewMBean viewOfB = getProxyToQueue(destinationB);
1: 
1:         assertNotNull(viewOfA);
1:         assertNotNull(viewOfB);
1: 
1:         assertEquals(1, viewOfA.getQueueSize());
1:         assertEquals(1, viewOfB.getQueueSize());
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToCompositeTopic() throws Exception {
1:         stompConnect();
1: 
1:         String destinationA = "StompA";
1:         String destinationB = "StompB";
1: 
1:         String frame = "CONNECT\n" +
1:                        "login:system\n" +
1:                        "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" +
1:                 "destination:/topic/" + destinationA + ",/topic/" + destinationB +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1:         assertTrue("Should be two destinations for the dispatch", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getTopics().length == 2;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(150)));
1: 
1:         TopicViewMBean viewOfA = getProxyToTopic(destinationA);
1:         TopicViewMBean viewOfB = getProxyToTopic(destinationB);
1: 
1:         assertNotNull(viewOfA);
1:         assertNotNull(viewOfB);
1: 
1:         assertEquals(1, viewOfA.getEnqueueCount());
1:         assertEquals(1, viewOfB.getEnqueueCount());
1: 
1:         stompConnection.disconnect();
1:     }
1: 
1:     private void sendMessage(String destinationName, boolean topic) throws JMSException {
1:         Connection connection = cf.createConnection("system", "manager");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = null;
1: 
1:         if (topic) {
1:             destination = session.createTopic(destinationName);
1:         } else {
1:             destination = session.createQueue(destinationName);
1:         }
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test");
1:         producer.send(message);
1: 
1:         connection.close();
1:     }
1: }
============================================================================