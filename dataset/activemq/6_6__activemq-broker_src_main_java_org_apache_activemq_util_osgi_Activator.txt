1:7638179: /**
1:7638179:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7638179:  * contributor license agreements.  See the NOTICE file distributed with
1:7638179:  * this work for additional information regarding copyright ownership.
1:7638179:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7638179:  * (the "License"); you may not use this file except in compliance with
1:7638179:  * the License.  You may obtain a copy of the License at
3:7638179:  *
1:7638179:  *     http://www.apache.org/licenses/LICENSE-2.0
1:7638179:  *
1:7638179:  *  Unless required by applicable law or agreed to in writing, software
1:7638179:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:7638179:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7638179:  *  See the License for the specific language governing permissions and
1:7638179:  *  limitations under the License.
1:7638179:  */
1:7638179: package org.apache.activemq.util.osgi;
6:7638179: 
1:97cd60f: import static org.osgi.framework.wiring.BundleRevision.PACKAGE_NAMESPACE;
1:97cd60f: 
1:9ef4259: import java.io.BufferedReader;
1:7638179: import java.io.IOException;
1:7638179: import java.io.InputStream;
1:7638179: import java.io.InputStreamReader;
1:9ef4259: import java.net.URL;
1:9ef4259: import java.util.ArrayList;
1:97cd60f: import java.util.HashSet;
1:26806e7: import java.util.List;
1:7638179: import java.util.Properties;
1:97cd60f: import java.util.Set;
1:7638179: import java.util.concurrent.ConcurrentHashMap;
1:7638179: import java.util.concurrent.ConcurrentMap;
1:97cd60f: 
1:921d6ca: import org.apache.activemq.Service;
1:921d6ca: import org.apache.activemq.store.PersistenceAdapter;
1:921d6ca: import org.apache.activemq.transport.Transport;
1:921d6ca: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1:7638179: import org.apache.activemq.util.FactoryFinder;
1:7638179: import org.apache.activemq.util.FactoryFinder.ObjectFactory;
1:7638179: import org.osgi.framework.Bundle;
1:7638179: import org.osgi.framework.BundleActivator;
1:7638179: import org.osgi.framework.BundleContext;
1:7638179: import org.osgi.framework.BundleEvent;
1:7638179: import org.osgi.framework.SynchronousBundleListener;
1:97cd60f: import org.osgi.framework.wiring.BundleCapability;
1:97cd60f: import org.osgi.framework.wiring.BundleWire;
1:97cd60f: import org.osgi.framework.wiring.BundleWiring;
1:9ef4259: import org.slf4j.Logger;
1:9ef4259: import org.slf4j.LoggerFactory;
1:97cd60f: 
1:7638179: /**
1:7638179:  * An OSGi bundle activator for ActiveMQ which adapts the {@link org.apache.activemq.util.FactoryFinder}
1:09fab74:  * to the OSGi environment.
1:97cd60f:  *
1:7638179:  */
1:7638179: public class Activator implements BundleActivator, SynchronousBundleListener, ObjectFactory {
1:7638179: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(Activator.class);
1:7638179: 
1:97cd60f:     private final ConcurrentMap<String, Class<?>> serviceCache = new ConcurrentHashMap<String, Class<?>>();
1:7638179:     private final ConcurrentMap<Long, BundleWrapper> bundleWrappers = new ConcurrentHashMap<Long, BundleWrapper>();
1:7638179:     private BundleContext bundleContext;
1:97cd60f:     private Set<BundleCapability> packageCapabilities = new HashSet<BundleCapability>();
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // BundleActivator interface impl
1:7638179:     // ================================================================
1:7638179: 
1:9ef4259:     @Override
1:7638179:     public synchronized void start(BundleContext bundleContext) throws Exception {
1:7638179: 
1:7638179:         // This is how we replace the default FactoryFinder strategy
1:7638179:         // with one that is more compatible in an OSGi env.
1:7638179:         FactoryFinder.setObjectFactory(this);
1:7638179: 
1:7638179:         debug("activating");
1:7638179:         this.bundleContext = bundleContext;
1:5e05df1: 
1:97cd60f:         cachePackageCapabilities(Service.class, Transport.class, DiscoveryAgent.class, PersistenceAdapter.class);
1:5e05df1: 
1:7638179:         debug("checking existing bundles");
1:921d6ca:         bundleContext.addBundleListener(this);
1:7638179:         for (Bundle bundle : bundleContext.getBundles()) {
1:7638179:             if (bundle.getState() == Bundle.RESOLVED || bundle.getState() == Bundle.STARTING ||
1:7638179:                 bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STOPPING) {
1:7638179:                 register(bundle);
2:7638179:             }
1:921d6ca:         }
1:7638179:         debug("activated");
1:7638179:     }
1:921d6ca: 
1:97cd60f:     /**
1:97cd60f:      * Caches the package capabilities that are needed for a set of interface classes
1:5e05df1:      *
1:97cd60f:      * @param classes interfaces we want to track
1:97cd60f:      */
1:97cd60f:     private void cachePackageCapabilities(Class<?> ... classes) {
1:97cd60f:         BundleWiring ourWiring = bundleContext.getBundle().adapt(BundleWiring.class);
1:97cd60f:         Set<String> packageNames = new HashSet<String>();
1:97cd60f:         for (Class<?> clazz: classes) {
1:97cd60f:             packageNames.add(clazz.getPackage().getName());
1:97cd60f:         }
1:5e05df1: 
1:97cd60f:         List<BundleCapability> ourExports = ourWiring.getCapabilities(PACKAGE_NAMESPACE);
1:97cd60f:         for (BundleCapability ourExport : ourExports) {
1:97cd60f:             String ourPkgName = (String) ourExport.getAttributes().get(PACKAGE_NAMESPACE);
1:97cd60f:             if (packageNames.contains(ourPkgName)) {
1:97cd60f:                 packageCapabilities.add(ourExport);
1:97cd60f:             }
1:97cd60f:         }
1:97cd60f:     }
1:97cd60f: 
1:97cd60f: 
1:9ef4259:     @Override
1:7638179:     public synchronized void stop(BundleContext bundleContext) throws Exception {
1:7638179:         debug("deactivating");
1:7638179:         bundleContext.removeBundleListener(this);
1:7638179:         while (!bundleWrappers.isEmpty()) {
1:7638179:             unregister(bundleWrappers.keySet().iterator().next());
1:7638179:         }
1:7638179:         debug("deactivated");
1:7638179:         this.bundleContext = null;
1:7638179:     }
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // SynchronousBundleListener interface impl
1:7638179:     // ================================================================
1:7638179: 
1:9ef4259:     @Override
1:7638179:     public void bundleChanged(BundleEvent event) {
1:7638179:         if (event.getType() == BundleEvent.RESOLVED) {
1:7638179:             register(event.getBundle());
1:7638179:         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
1:7638179:             unregister(event.getBundle().getBundleId());
1:7638179:         }
1:7638179:     }
1:7638179: 
1:7638179:     protected void register(final Bundle bundle) {
1:7638179:         debug("checking bundle " + bundle.getBundleId());
1:97cd60f:         if (isOurBundle(bundle) || isImportingUs(bundle) ) {
1:97cd60f:             debug("Registering bundle for extension resolution: "+ bundle.getBundleId());
1:97cd60f:             bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
1:97cd60f:         }
1:7638179:     }
1:97cd60f: 
1:97cd60f:     private boolean isOurBundle(final Bundle bundle) {
1:97cd60f:         return bundle.getBundleId() == bundleContext.getBundle().getBundleId();
1:7638179:     }
1:7638179: 
1:97cd60f:     /**
1:7638179:      * When bundles unload.. we remove them thier cached Class entries from the
1:7638179:      * serviceCache.  Future service lookups for the service will fail.
1:97cd60f:      *
1:7638179:      * TODO: consider a way to get the Broker release any references to
1:7638179:      * instances of the service.
1:7638179:      *
1:7638179:      * @param bundleId
1:7638179:      */
1:7638179:     protected void unregister(long bundleId) {
1:7638179:         BundleWrapper bundle = bundleWrappers.remove(bundleId);
1:7638179:         if (bundle != null) {
1:7638179:             for (String path : bundle.cachedServices) {
1:7638179:                 debug("unregistering service for key: " +path );
1:7638179:                 serviceCache.remove(path);
1:7638179:             }
1:7638179:         }
1:7638179:     }
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // ObjectFactory interface impl
1:7638179:     // ================================================================
1:7638179: 
1:9ef4259:     @Override
1:7638179:     public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
1:97cd60f:         Class<?> clazz = serviceCache.get(path);
1:7638179:         if (clazz == null) {
1:7638179:             StringBuffer warnings = new StringBuffer();
1:7638179:             // We need to look for a bundle that has that class.
1:7638179:             int wrrningCounter=1;
1:7638179:             for (BundleWrapper wrapper : bundleWrappers.values()) {
1:7638179:                 URL resource = wrapper.bundle.getResource(path);
1:7638179:                 if( resource == null ) {
1:7638179:                     continue;
1:7638179:                 }
1:7638179: 
1:7638179:                 Properties properties = loadProperties(resource);
1:7638179: 
1:7638179:                 String className = properties.getProperty("class");
1:7638179:                 if (className == null) {
1:26806e7:                     warnings.append("("+(wrrningCounter++)+") Invalid service file in bundle "+wrapper+": 'class' property not defined.");
1:7638179:                     continue;
1:7638179:                 }
1:7638179: 
2:7638179:                 try {
1:7638179:                     clazz = wrapper.bundle.loadClass(className);
2:7638179:                 } catch (ClassNotFoundException e) {
1:7638179:                     warnings.append("("+(wrrningCounter++)+") Bundle "+wrapper+" could not load "+className+": "+e);
1:7638179:                     continue;
1:7638179:                 }
1:7638179: 
1:7638179:                 // Yay.. the class was found.  Now cache it.
1:7638179:                 serviceCache.put(path, clazz);
1:7638179:                 wrapper.cachedServices.add(path);
1:7638179:                 break;
1:7638179:             }
1:7638179: 
1:7638179:             if( clazz == null ) {
1:26806e7:                 // Since OSGi is such a tricky environment to work in.. lets give folks the
1:7638179:                 // most information we can in the error message.
1:7638179:                 String msg = "Service not found: '" + path + "'";
1:7638179:                 if (warnings.length()!= 0) {
1:7638179:                     msg += ", "+warnings;
1:7638179:                 }
1:7638179:                 throw new IOException(msg);
1:7638179:             }
1:7638179:         }
1:7638179:         return clazz.newInstance();
1:7638179:     }
1:7638179: 
1:7638179:     // ================================================================
1:7638179:     // Internal Helper Methods
1:7638179:     // ================================================================
1:7638179: 
1:7638179:     private void debug(Object msg) {
1:8bf987b:         LOG.debug(msg.toString());
1:7638179:     }
1:7638179: 
1:7638179:     private Properties loadProperties(URL resource) throws IOException {
1:7638179:         InputStream in = resource.openStream();
1:7638179:         try {
1:7638179:             BufferedReader br = new BufferedReader(new InputStreamReader(in, "UTF-8"));
1:7638179:             Properties properties = new Properties();
1:7638179:             properties.load(in);
1:7638179:             return properties;
1:7638179:         } finally {
1:7638179:             try {
1:7638179:                 in.close();
1:7638179:             } catch (Exception e) {
1:7638179:             }
1:7638179:         }
1:7638179:     }
1:7638179: 
1:7638179:     /**
1:97cd60f:      * We consider a bundle to be a candidate for objects if it imports at least
1:97cd60f:      * one of the packages of our interfaces
1:5e05df1:      *
1:97cd60f:      * @param bundle
1:5e05df1:      * @return true if the bundle is improting.
1:97cd60f:      */
1:7638179:     private boolean isImportingUs(Bundle bundle) {
1:97cd60f:         BundleWiring wiring = bundle.adapt(BundleWiring.class);
1:97cd60f:         List<BundleWire> imports = wiring.getRequiredWires(PACKAGE_NAMESPACE);
1:97cd60f:         for (BundleWire importWire : imports) {
1:97cd60f:             if (packageCapabilities.contains(importWire.getCapability())) {
1:97cd60f:                 return true;
1:97cd60f:             }
1:7638179:         }
1:97cd60f:         return false;
1:7638179:     }
1:7638179: 
1:7638179:     private static class BundleWrapper {
1:7638179:         private final Bundle bundle;
1:26806e7:         private final List<String> cachedServices = new ArrayList<String>();
1:7638179: 
1:7638179:         public BundleWrapper(Bundle bundle) {
1:7638179:             this.bundle = bundle;
1:7638179:         }
1:7638179:     }
1:7638179: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return true if the bundle is improting.
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.net.URL;
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private final ConcurrentMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Christian Schneider
-------------------------------------------------------------------------------
commit:97cd60f
/////////////////////////////////////////////////////////////////////////
1: import static org.osgi.framework.wiring.BundleRevision.PACKAGE_NAMESPACE;
1: 
1: import java.util.HashSet;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: import org.osgi.framework.wiring.BundleCapability;
1: import org.osgi.framework.wiring.BundleWire;
1: import org.osgi.framework.wiring.BundleWiring;
/////////////////////////////////////////////////////////////////////////
1:     private final ConcurrentMap<String, Class<?>> serviceCache = new ConcurrentHashMap<String, Class<?>>();
1:     private Set<BundleCapability> packageCapabilities = new HashSet<BundleCapability>();
/////////////////////////////////////////////////////////////////////////
1:         
1:         cachePackageCapabilities(Service.class, Transport.class, DiscoveryAgent.class, PersistenceAdapter.class);
1:         
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Caches the package capabilities that are needed for a set of interface classes
1:      *  
1:      * @param classes interfaces we want to track
1:      */
1:     private void cachePackageCapabilities(Class<?> ... classes) {
1:         BundleWiring ourWiring = bundleContext.getBundle().adapt(BundleWiring.class);
1:         Set<String> packageNames = new HashSet<String>();
1:         for (Class<?> clazz: classes) {
1:             packageNames.add(clazz.getPackage().getName());
1:         }
1:         
1:         List<BundleCapability> ourExports = ourWiring.getCapabilities(PACKAGE_NAMESPACE);
1:         for (BundleCapability ourExport : ourExports) {
1:             String ourPkgName = (String) ourExport.getAttributes().get(PACKAGE_NAMESPACE);
1:             if (packageNames.contains(ourPkgName)) {
1:                 packageCapabilities.add(ourExport);
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (isOurBundle(bundle) || isImportingUs(bundle) ) {
1:             debug("Registering bundle for extension resolution: "+ bundle.getBundleId());
1:             bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
1:     }
1: 
1:     private boolean isOurBundle(final Bundle bundle) {
1:         return bundle.getBundleId() == bundleContext.getBundle().getBundleId();
/////////////////////////////////////////////////////////////////////////
1:         Class<?> clazz = serviceCache.get(path);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * We consider a bundle to be a candidate for objects if it imports at least
1:      * one of the packages of our interfaces
1:      * 
1:      * @param bundle
0:      * @return
1:      */
1:         BundleWiring wiring = bundle.adapt(BundleWiring.class);
1:         List<BundleWire> imports = wiring.getRequiredWires(PACKAGE_NAMESPACE);
1:         for (BundleWire importWire : imports) {
1:             if (packageCapabilities.contains(importWire.getCapability())) {
1:                 return true;
1:             }
1:         return false;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:921d6ca
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.discovery.DiscoveryAgent;
/////////////////////////////////////////////////////////////////////////
1:         bundleContext.addBundleListener(this);
/////////////////////////////////////////////////////////////////////////
0:         return isImportingClass(bundle, Service.class)
0:                 || isImportingClass(bundle, Transport.class)
0:                 || isImportingClass(bundle, DiscoveryAgent.class)
0:                 || isImportingClass(bundle, PersistenceAdapter.class);
1:     }
1: 
0:     private boolean isImportingClass(Bundle bundle, Class clazz) {
0:             return bundle.loadClass(clazz.getName())==clazz;
commit:7638179
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  */
1: package org.apache.activemq.util.osgi;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
0: import java.io.BufferedReader;
1: import java.util.Properties;
0: import java.util.ArrayList;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.ConcurrentMap;
0: import java.net.URL;
1: 
1: import org.apache.activemq.util.FactoryFinder;
1: import org.apache.activemq.util.FactoryFinder.ObjectFactory;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.commons.logging.Log;
1: 
1: import org.osgi.framework.Bundle;
1: import org.osgi.framework.BundleActivator;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.BundleEvent;
1: import org.osgi.framework.SynchronousBundleListener;
1: 
1: /**
1:  * An OSGi bundle activator for ActiveMQ which adapts the {@link org.apache.activemq.util.FactoryFinder}
0:  * to the OSGi enviorment.
1:  *
1:  */
1: public class Activator implements BundleActivator, SynchronousBundleListener, ObjectFactory {
1: 
0:     private static final Log LOG = LogFactory.getLog(Activator.class);
1: 
0:     private final ConcurrentHashMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>();
1:     private final ConcurrentMap<Long, BundleWrapper> bundleWrappers = new ConcurrentHashMap<Long, BundleWrapper>();
1:     private BundleContext bundleContext;
1: 
1:     // ================================================================
1:     // BundleActivator interface impl
1:     // ================================================================
1: 
1:     public synchronized void start(BundleContext bundleContext) throws Exception {
1: 
1:         // This is how we replace the default FactoryFinder strategy
1:         // with one that is more compatible in an OSGi env.
1:         FactoryFinder.setObjectFactory(this);
1: 
1:         debug("activating");
1:         this.bundleContext = bundleContext;
1:         debug("checking existing bundles");
1:         for (Bundle bundle : bundleContext.getBundles()) {
1:             if (bundle.getState() == Bundle.RESOLVED || bundle.getState() == Bundle.STARTING ||
1:                 bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STOPPING) {
1:                 register(bundle);
1:             }
1:         }
1:         debug("activated");
1:     }
1: 
1: 
1:     public synchronized void stop(BundleContext bundleContext) throws Exception {
1:         debug("deactivating");
1:         bundleContext.removeBundleListener(this);
1:         while (!bundleWrappers.isEmpty()) {
1:             unregister(bundleWrappers.keySet().iterator().next());
1:         }
1:         debug("deactivated");
1:         this.bundleContext = null;
1:     }
1: 
1:     // ================================================================
1:     // SynchronousBundleListener interface impl
1:     // ================================================================
1: 
1:     public void bundleChanged(BundleEvent event) {
1:         if (event.getType() == BundleEvent.RESOLVED) {
1:             register(event.getBundle());
1:         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {
1:             unregister(event.getBundle().getBundleId());
1:         }
1:     }
1: 
1:     protected void register(final Bundle bundle) {
1:         debug("checking bundle " + bundle.getBundleId());
0:         if( !isImportingUs(bundle) ) {
0:             debug("The bundle does not import us: "+ bundle.getBundleId());
0:             return;
1:         }
0:         bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
1:     }
1: 
1:     /**
1:      * When bundles unload.. we remove them thier cached Class entries from the
1:      * serviceCache.  Future service lookups for the service will fail.
1:      *
1:      * TODO: consider a way to get the Broker release any references to
1:      * instances of the service.
1:      *
1:      * @param bundleId
1:      */
1:     protected void unregister(long bundleId) {
1:         BundleWrapper bundle = bundleWrappers.remove(bundleId);
1:         if (bundle != null) {
1:             for (String path : bundle.cachedServices) {
1:                 debug("unregistering service for key: " +path );
1:                 serviceCache.remove(path);
1:             }
1:         }
1:     }
1: 
1:     // ================================================================
1:     // ObjectFactory interface impl
1:     // ================================================================
1: 
1:     public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException {
0:         Class clazz = serviceCache.get(path);
1:         if (clazz == null) {
1:             StringBuffer warnings = new StringBuffer();
1:             // We need to look for a bundle that has that class.
1:             int wrrningCounter=1;
1:             for (BundleWrapper wrapper : bundleWrappers.values()) {
1:                 URL resource = wrapper.bundle.getResource(path);
1:                 if( resource == null ) {
1:                     continue;
1:                 }
1: 
1:                 Properties properties = loadProperties(resource);
1: 
1:                 String className = properties.getProperty("class");
1:                 if (className == null) {
0:                     warnings.append("("+(wrrningCounter++)+") Invalid sevice file in bundle "+wrapper+": 'class' property not defined.");
1:                     continue;
1:                 }
1: 
1:                 try {
1:                     clazz = wrapper.bundle.loadClass(className);
1:                 } catch (ClassNotFoundException e) {
1:                     warnings.append("("+(wrrningCounter++)+") Bundle "+wrapper+" could not load "+className+": "+e);
1:                     continue;
1:                 }
1: 
1:                 // Yay.. the class was found.  Now cache it.
1:                 serviceCache.put(path, clazz);
1:                 wrapper.cachedServices.add(path);
1:                 break;
1:             }
1: 
1:             if( clazz == null ) {
0:                 // Since OSGi is such a tricky enviorment to work in.. lets give folks the
1:                 // most information we can in the error message.
1:                 String msg = "Service not found: '" + path + "'";
1:                 if (warnings.length()!= 0) {
1:                     msg += ", "+warnings;
1:                 }
1:                 throw new IOException(msg);
1:             }
1:         }
1:         return clazz.newInstance();
1:     }
1: 
1:     // ================================================================
1:     // Internal Helper Methods
1:     // ================================================================
1: 
1:     private void debug(Object msg) {
0:         LOG.debug(msg);
1:     }
1: 
1:     private Properties loadProperties(URL resource) throws IOException {
1:         InputStream in = resource.openStream();
1:         try {
1:             BufferedReader br = new BufferedReader(new InputStreamReader(in, "UTF-8"));
1:             Properties properties = new Properties();
1:             properties.load(in);
1:             return properties;
1:         } finally {
1:             try {
1:                 in.close();
1:             } catch (Exception e) {
1:             }
1:         }
1:     }
1: 
1:     private boolean isImportingUs(Bundle bundle) {
1:         try {
0:             // If that bundle can load our classes.. then it must be importing us.
0:             return bundle.loadClass(Activator.class.getName())==Activator.class;
1:         } catch (ClassNotFoundException e) {
0:             return false;
1:         }
1:     }
1: 
1:     private static class BundleWrapper {
1:         private final Bundle bundle;
0:         private final ArrayList<String> cachedServices = new ArrayList<String>();
1: 
1:         public BundleWrapper(Bundle bundle) {
1:             this.bundle = bundle;
1:         }
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:26806e7
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:                     warnings.append("("+(wrrningCounter++)+") Invalid service file in bundle "+wrapper+": 'class' property not defined.");
/////////////////////////////////////////////////////////////////////////
1:                 // Since OSGi is such a tricky environment to work in.. lets give folks the
/////////////////////////////////////////////////////////////////////////
1:         private final List<String> cachedServices = new ArrayList<String>();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.LoggerFactory;
0: import org.slf4j.Logger;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(Activator.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(msg.toString());
author:David Jencks
-------------------------------------------------------------------------------
commit:fa9f4ac
/////////////////////////////////////////////////////////////////////////
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1:  * to the OSGi environment.
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * constructor for use as a blueprint bean rather than bundle activator
0:      * @param bundleContext
0:      */
0:     public Activator(BundleContext bundleContext) throws Exception {
0:         start(bundleContext);
0:     }
0: 
0: 
============================================================================