1:41c2a9c: /**
1:41c2a9c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41c2a9c:  * contributor license agreements.  See the NOTICE file distributed with
1:41c2a9c:  * this work for additional information regarding copyright ownership.
1:41c2a9c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41c2a9c:  * (the "License"); you may not use this file except in compliance with
1:41c2a9c:  * the License.  You may obtain a copy of the License at
1:41c2a9c:  *
1:41c2a9c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:41c2a9c:  *
1:41c2a9c:  * Unless required by applicable law or agreed to in writing, software
1:41c2a9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41c2a9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41c2a9c:  * See the License for the specific language governing permissions and
1:41c2a9c:  * limitations under the License.
1:41c2a9c:  */
1:41c2a9c: package org.apache.activemq.bugs;
1:41c2a9c: 
1:41c2a9c: import java.util.concurrent.CountDownLatch;
1:41c2a9c: import java.util.concurrent.TimeUnit;
1:41c2a9c: 
1:41c2a9c: import javax.jms.Connection;
1:41c2a9c: import javax.jms.ConnectionFactory;
1:41c2a9c: import javax.jms.DeliveryMode;
1:41c2a9c: import javax.jms.Message;
1:41c2a9c: import javax.jms.MessageConsumer;
1:41c2a9c: import javax.jms.MessageListener;
1:41c2a9c: import javax.jms.MessageProducer;
1:41c2a9c: import javax.jms.Queue;
1:41c2a9c: import javax.jms.Session;
1:41c2a9c: import javax.jms.TextMessage;
1:41c2a9c: 
1:41c2a9c: import org.apache.activemq.ActiveMQConnectionFactory;
1:41c2a9c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:41c2a9c: 
1:41c2a9c: public class AMQ2645Test extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2645Test.class);
1:41c2a9c:     private final static String QUEUE_NAME = "test.daroo.q";
1:41c2a9c: 
1:41c2a9c:     public void testWaitForTransportInterruptionProcessingHang()
1:41c2a9c:             throws Exception {
1:41c2a9c:         final ConnectionFactory fac = new ActiveMQConnectionFactory(
1:41c2a9c:                 "failover:(" + this.bindAddress + ")");
1:41c2a9c:         final Connection connection = fac.createConnection();
1:41c2a9c:         try {
1:41c2a9c:             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41c2a9c:             final Queue queue = session.createQueue(QUEUE_NAME);
1:41c2a9c:             final MessageProducer producer = session.createProducer(queue);
1:41c2a9c:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:41c2a9c:             connection.start();
1:41c2a9c: 
1:41c2a9c:             producer.send(session.createTextMessage("test"));
1:41c2a9c: 
1:41c2a9c:             final CountDownLatch afterRestart = new CountDownLatch(1);
1:41c2a9c:             final CountDownLatch twoNewMessages = new CountDownLatch(1);
1:41c2a9c:             final CountDownLatch thirdMessageReceived = new CountDownLatch(1);
1:41c2a9c: 
1:41c2a9c:             final MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:41c2a9c:             consumer.setMessageListener(new MessageListener() {
1:41c2a9c:                 public void onMessage(Message message) {
1:41c2a9c:                     try {
1:41c2a9c:                         afterRestart.await();
1:41c2a9c: 
1:41c2a9c:                         final TextMessage txtMsg = (TextMessage) message;
1:41c2a9c:                         if (txtMsg.getText().equals("test")) {
1:41c2a9c:                             producer.send(session.createTextMessage("test 1"));
1:41c2a9c:                             TimeUnit.SECONDS.sleep(5);
1:41c2a9c:                             // THIS SECOND send() WILL CAUSE CONSUMER DEADLOCK
1:41c2a9c:                             producer.send(session.createTextMessage("test 2"));
1:41c2a9c:                             LOG.info("Two new messages produced.");
1:41c2a9c:                             twoNewMessages.countDown();
1:41c2a9c:                         } else if (txtMsg.getText().equals("test 3")) {
1:41c2a9c:                             thirdMessageReceived.countDown();
1:41c2a9c:                         }
1:41c2a9c:                     } catch (Exception e) {
1:8bf987b:                         LOG.error(e.toString());
1:41c2a9c:                         throw new RuntimeException(e);
1:41c2a9c:                     }
1:41c2a9c:                 }
1:41c2a9c:             });
1:41c2a9c: 
1:41c2a9c:             LOG.info("Stopping broker....");
1:41c2a9c:             broker.stop();
1:41c2a9c: 
1:41c2a9c:             LOG.info("Creating new broker...");
1:41c2a9c:             broker = createBroker();
1:41c2a9c:             startBroker();
1:41c2a9c:             broker.waitUntilStarted();
1:41c2a9c: 
1:41c2a9c:             afterRestart.countDown();
1:41c2a9c:             assertTrue("Consumer is deadlocked!", twoNewMessages.await(60, TimeUnit.SECONDS));
1:41c2a9c: 
1:41c2a9c:             producer.send(session.createTextMessage("test 3"));
1:4a2b796:             assertTrue("Consumer got third message after block", thirdMessageReceived.await(60, TimeUnit.SECONDS));
1:41c2a9c: 
1:41c2a9c:         } finally {
1:41c2a9c:             broker.stop();
1:41c2a9c:         }
1:41c2a9c: 
1:41c2a9c:     }
1:41c2a9c: 
1:41c2a9c:     @Override
1:41c2a9c:     protected void setUp() throws Exception {
1:41c2a9c:         bindAddress = "tcp://0.0.0.0:61617";
1:41c2a9c:         super.setUp();
1:41c2a9c:     }
1:41c2a9c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2645Test.class);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.error(e.toString());
author:Gary Tully
-------------------------------------------------------------------------------
commit:4a2b796
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Consumer got third message after block", thirdMessageReceived.await(60, TimeUnit.SECONDS));
commit:41c2a9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class AMQ2645Test extends EmbeddedBrokerTestSupport {
0:     private static final Log LOG = LogFactory.getLog(AMQ2645Test.class);
1:     private final static String QUEUE_NAME = "test.daroo.q";
1: 
1:     public void testWaitForTransportInterruptionProcessingHang()
1:             throws Exception {
1:         final ConnectionFactory fac = new ActiveMQConnectionFactory(
1:                 "failover:(" + this.bindAddress + ")");
1:         final Connection connection = fac.createConnection();
1:         try {
1:             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final Queue queue = session.createQueue(QUEUE_NAME);
1:             final MessageProducer producer = session.createProducer(queue);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             connection.start();
1: 
1:             producer.send(session.createTextMessage("test"));
1: 
1:             final CountDownLatch afterRestart = new CountDownLatch(1);
1:             final CountDownLatch twoNewMessages = new CountDownLatch(1);
1:             final CountDownLatch thirdMessageReceived = new CountDownLatch(1);
1: 
1:             final MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:             consumer.setMessageListener(new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     try {
1:                         afterRestart.await();
1: 
1:                         final TextMessage txtMsg = (TextMessage) message;
1:                         if (txtMsg.getText().equals("test")) {
1:                             producer.send(session.createTextMessage("test 1"));
1:                             TimeUnit.SECONDS.sleep(5);
1:                             // THIS SECOND send() WILL CAUSE CONSUMER DEADLOCK
1:                             producer.send(session.createTextMessage("test 2"));
1:                             LOG.info("Two new messages produced.");
1:                             twoNewMessages.countDown();
1:                         } else if (txtMsg.getText().equals("test 3")) {
1:                             thirdMessageReceived.countDown();
1:                         }
1:                     } catch (Exception e) {
0:                         LOG.error(e);
1:                         throw new RuntimeException(e);
1:                     }
1:                 }
1:             });
1: 
1:             LOG.info("Stopping broker....");
1:             broker.stop();
1: 
1:             LOG.info("Creating new broker...");
1:             broker = createBroker();
1:             startBroker();
1:             broker.waitUntilStarted();
1: 
1:             afterRestart.countDown();
1:             assertTrue("Consumer is deadlocked!", twoNewMessages.await(60, TimeUnit.SECONDS));
1: 
1:             producer.send(session.createTextMessage("test 3"));
0:             assertTrue("Consumer got third message after block", twoNewMessages.await(60, TimeUnit.SECONDS));
1: 
1:         } finally {
1:             broker.stop();
1:         }
1: 
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://0.0.0.0:61617";
1:         super.setUp();
1:     }
1: }
============================================================================