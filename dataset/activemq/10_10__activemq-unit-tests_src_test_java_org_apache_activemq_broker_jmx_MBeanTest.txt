1:138d9cf: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7092b19:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7092b19:  *
1:138d9cf:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:138d9cf: package org.apache.activemq.broker.jmx;
1:c43282e: 
1:74a7a8b: import java.io.BufferedReader;
1:74a7a8b: import java.io.InputStreamReader;
1:e792395: import java.net.URI;
1:eb034b4: import java.net.URL;
1:ee54f09: import java.util.ArrayList;
1:3dd6575: import java.util.HashMap;
1:e792395: import java.util.Map;
1:f5dcc9d: import java.util.Set;
1:2a62b74: import java.util.concurrent.atomic.AtomicBoolean;
1:e792395: 
1:564d550: import javax.jms.BytesMessage;
1:564d550: import javax.jms.Connection;
1:564d550: import javax.jms.ConnectionFactory;
1:564d550: import javax.jms.Destination;
1:564d550: import javax.jms.JMSException;
1:564d550: import javax.jms.Message;
1:564d550: import javax.jms.MessageConsumer;
1:564d550: import javax.jms.MessageListener;
1:564d550: import javax.jms.MessageProducer;
1:564d550: import javax.jms.Session;
1:564d550: import javax.jms.Topic;
1:564d550: import javax.jms.TopicSubscriber;
1:fde22a8: import javax.management.MBeanServer;
1:fde22a8: import javax.management.MBeanServerInvocationHandler;
1:fde22a8: import javax.management.MalformedObjectNameException;
1:fde22a8: import javax.management.ObjectInstance;
1:fde22a8: import javax.management.ObjectName;
1:138d9cf: import javax.management.openmbean.CompositeData;
1:138d9cf: import javax.management.openmbean.TabularData;
1:fde22a8: 
1:6c0fae0: import junit.textui.TestRunner;
1:fde22a8: 
1:74f530a: import org.apache.activemq.ActiveMQConnection;
1:6cd7082: import org.apache.activemq.ActiveMQConnectionFactory;
1:74f530a: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:eb034b4: import org.apache.activemq.ActiveMQSession;
1:eb034b4: import org.apache.activemq.BlobMessage;
1:e792395: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:2ea5d14: import org.apache.activemq.RedeliveryPolicy;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:18f9773: import org.apache.activemq.broker.region.BaseDestination;
1:9b260dc: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:9b260dc: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6cd7082: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:99653c6: import org.apache.activemq.command.ActiveMQDestination;
1:e792395: import org.apache.activemq.command.ActiveMQQueue;
1:e511e76: import org.apache.activemq.command.ActiveMQTempQueue;
1:e511e76: import org.apache.activemq.util.JMXSupport;
1:7410257: import org.apache.activemq.util.URISupport;
1:2a62b74: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e792395: 
1:138d9cf: /**
1:230a86c:  * A test case of the various MBeans in ActiveMQ. If you want to look at the
1:230a86c:  * various MBeans after the test has been run then run this test case as a
1:230a86c:  * command line application.
2:138d9cf:  */
1:138d9cf: public class MBeanTest extends EmbeddedBrokerTestSupport {
1:564d550: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MBeanTest.class);
1:e792395: 
1:6c0fae0:     private static boolean waitForKeyPress;
1:c43282e: 
1:138d9cf:     protected MBeanServer mbeanServer;
1:138d9cf:     protected String domain = "org.apache.activemq";
1:6c0fae0:     protected String clientID = "foo";
1:c43282e: 
1:138d9cf:     protected Connection connection;
1:138d9cf:     protected boolean transacted;
1:138d9cf:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:15fb25d:     protected static final int MESSAGE_COUNT = 2*BaseDestination.MAX_PAGE_SIZE;
1:7410257:     final static String QUEUE_WITH_OPTIONS = "QueueWithOptions";
1:c43282e: 
1:6c0fae0:     /**
1:230a86c:      * When you run this test case from the command line it will pause before
1:230a86c:      * terminating so that you can look at the MBeans state for debugging
1:230a86c:      * purposes.
1:6c0fae0:      */
1:6c0fae0:     public static void main(String[] args) {
1:6c0fae0:         waitForKeyPress = true;
1:6c0fae0:         TestRunner.run(MBeanTest.class);
1:c43282e:     }
1:85b9c81: 
1:c43282e:     public void testConnectors() throws Exception{
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:cb895f0: 
1:42e51a3:         assertEquals("openwire URL port doesn't equal bind Address",
1:cb895f0:                      new URI(broker.getTransportConnectorByType("tcp")).getPort(),
1:42e51a3:                      new URI(this.broker.getTransportConnectors().get(0).getPublishableConnectString()).getPort());
1:c43282e:     }
1:99653c6: 
1:c43282e:     public void testMBeans() throws Exception {
1:c43282e:         connection = connectionFactory.createConnection();
1:c43282e:         useConnection(connection);
1:c43282e: 
1:c43282e:         // test all the various MBeans now we have a producer, consumer and
1:c43282e:         // messages on a queue
1:c43282e:         assertSendViaMBean();
1:dda5c93:         assertSendCsnvViaMBean();
1:c43282e:         assertQueueBrowseWorks();
1:c43282e:         assertCreateAndDestroyDurableSubscriptions();
1:c43282e:         assertConsumerCounts();
1:c43282e:         assertProducerCounts();
1:c43282e:     }
1:c43282e: 
1:c43282e:     public void testMoveMessages() throws Exception {
1:c43282e:         connection = connectionFactory.createConnection();
1:c43282e:         useConnection(connection);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:c43282e: 
1:85b9c81:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:c43282e:         CompositeData[] compdatalist = queue.browse();
1:c43282e:         int initialQueueSize = compdatalist.length;
1:c43282e:         if (initialQueueSize == 0) {
1:c43282e:             fail("There is no message in the queue:");
1:c43282e:         }
1:c43282e:         else {
1:c43282e:             echo("Current queue size: " + initialQueueSize);
1:c43282e:         }
1:c43282e:         int messageCount = initialQueueSize;
1:c43282e:         String[] messageIDs = new String[messageCount];
1:c43282e:         for (int i = 0; i < messageCount; i++) {
1:c43282e:             CompositeData cdata = compdatalist[i];
1:c43282e:             String messageID = (String) cdata.get("JMSMessageID");
1:c43282e:             assertNotNull("Should have a message ID for message " + i, messageID);
1:c43282e:             messageIDs[i] = messageID;
1:c43282e:         }
1:c43282e: 
1:9b260dc:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:9edeb21: 
1:c43282e:         echo("About to move " + messageCount + " messages");
1:9edeb21: 
1:c43282e:         String newDestination = getSecondDestinationString();
1:c43282e:         for (String messageID : messageIDs) {
1:cb7b657:             //echo("Moving message: " + messageID);
1:c43282e:             queue.moveMessageTo(messageID, newDestination);
1:9edeb21:         }
1:c43282e: 
1:c43282e:         echo("Now browsing the queue");
1:c43282e:         compdatalist = queue.browse();
1:c43282e:         int actualCount = compdatalist.length;
1:c43282e:         echo("Current queue size: " + actualCount);
1:c43282e:         assertEquals("Should now have empty queue but was", initialQueueSize - messageCount, actualCount);
1:c43282e: 
1:c43282e:         echo("Now browsing the second queue");
1:c43282e: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
1:fde22a8:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:9b260dc:         long newQueuesize = queueNew.getQueueSize();
1:c43282e:         echo("Second queue size: " + newQueuesize);
1:c43282e:         assertEquals("Unexpected number of messages ",messageCount, newQueuesize);
1:9b260dc: 
1:9b260dc:         // check memory usage migration
1:9b260dc:         assertTrue("new dest has some memory usage", queueNew.getMemoryPercentUsage() > 0);
1:9b260dc:         assertEquals("old dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:aad7e73:         assertTrue("use cache", queueNew.isUseCache());
1:aad7e73:         assertTrue("cache enabled", queueNew.isCacheEnabled());
1:25e3c1b:         assertEquals("no forwards", 0, queueNew.getForwardCount());
1:c43282e:     }
1:99653c6: 
1:2ea5d14:     public void testMoveFromDLQImmediateDLQ() throws Exception {
1:2ea5d14: 
1:2ea5d14:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:2ea5d14:         redeliveryPolicy.setMaximumRedeliveries(0);
1:2ea5d14:         ((ActiveMQConnectionFactory)connectionFactory).setRedeliveryPolicy(redeliveryPolicy);
1:2ea5d14:         Connection connection = connectionFactory.createConnection();
1:2ea5d14: 
1:2ea5d14:         // populate
1:2ea5d14:         useConnection(connection);
1:2ea5d14: 
1:2ea5d14:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2ea5d14:         Destination dest = session.createQueue(getDestinationString());
1:2ea5d14:         MessageConsumer consumer = session.createConsumer(dest);
1:2ea5d14:         consumer.setMessageListener(new MessageListener() {
1:2ea5d14:             @Override
1:2ea5d14:             public void onMessage(Message message) {
1:2ea5d14:                 try {
1:2ea5d14:                     System.out.println("Received: " + message + " on " + message.getJMSDestination());
1:2ea5d14:                 } catch (JMSException e) {
1:2ea5d14:                     e.printStackTrace();
1:2ea5d14:                 }
1:2ea5d14:                 throw new RuntimeException("Horrible exception");
1:2ea5d14:             }});
1:03b19b9: 
1:2ea5d14: 
1:03b19b9:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:03b19b9:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:2ea5d14: 
1:2ea5d14:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
1:2ea5d14:         QueueViewMBean dlq = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
1:2ea5d14: 
1:03b19b9:         assertTrue("messages on dlq", Wait.waitFor(new Wait.Condition() {
1:2ea5d14:             @Override
1:2ea5d14:             public boolean isSatisified() throws Exception {
1:03b19b9:                 LOG.info("Dlq size: " + dlq.getQueueSize() + ", qSize: " + queue.getQueueSize());
1:2ea5d14:                 return MESSAGE_COUNT == dlq.getQueueSize();
1:2ea5d14:             }
1:2ea5d14:         }));
1:2ea5d14: 
1:2ea5d14:         dlq.retryMessages();
1:2ea5d14: 
1:03b19b9:         assertTrue("messages on dlq after retry", Wait.waitFor(new Wait.Condition() {
1:2ea5d14:             @Override
1:2ea5d14:             public boolean isSatisified() throws Exception {
1:03b19b9:                 LOG.info("Dlq size: " + dlq.getQueueSize() + ", qSize: " + queue.getQueueSize());
1:2ea5d14:                 return MESSAGE_COUNT == dlq.getQueueSize();
1:2ea5d14:             }
1:2ea5d14:         }));
1:2ea5d14:     }
1:2ea5d14: 
1:82200b6:     //Show broken behaviour https://issues.apache.org/jira/browse/AMQ-5752"
1:564d550:     // points to the need to except on a duplicate or have store.addMessage return boolean
1:82200b6:     // need some thought on how best to resolve this
1:82200b6:     public void Broken_testMoveDuplicateDoesNotDelete() throws Exception {
1:82200b6:         connection = connectionFactory.createConnection();
1:82200b6:         useConnection(connection);
1:82200b6: 
1:82200b6:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:82200b6: 
1:82200b6:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:82200b6: 
1:82200b6:         CompositeData[] compdatalist = queue.browse();
1:82200b6:         int initialQueueSize = compdatalist.length;
1:82200b6:         CompositeData cdata = compdatalist[0];
1:82200b6:         String messageID = (String) cdata.get("JMSMessageID");
1:82200b6: 
1:82200b6:         String newDestination = getSecondDestinationString();
1:82200b6:         queue.copyMessageTo(messageID, newDestination);
1:82200b6: 
1:82200b6:         compdatalist = queue.browse();
1:82200b6:         int actualCount = compdatalist.length;
1:82200b6:         echo("Current queue size: " + actualCount);
1:82200b6:         assertEquals("no change", initialQueueSize, actualCount);
1:82200b6: 
1:82200b6:         echo("Now browsing the second queue");
1:82200b6: 
1:82200b6:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
1:82200b6:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:82200b6: 
1:82200b6:         long newQueuesize = queueNew.getQueueSize();
1:82200b6:         assertEquals("Expect one", 1, newQueuesize);
1:82200b6: 
1:82200b6:         // try move of same message - should fail on duplicate send
1:82200b6:         boolean moveResult = queue.moveMessageTo(messageID, newDestination);
1:82200b6:         assertFalse("move of duplicate should fail", moveResult);
1:82200b6: 
1:82200b6:         newQueuesize = queueNew.getQueueSize();
1:82200b6:         assertEquals("Expect one", 1, newQueuesize);
1:82200b6: 
1:82200b6:         compdatalist = queue.browse();
1:82200b6:         actualCount = compdatalist.length;
1:82200b6:         echo("Current queue size: " + actualCount);
1:82200b6:         assertEquals("no change", initialQueueSize, actualCount);
1:82200b6:     }
1:82200b6: 
1:8023b9e:     public void testMoveCopyToSameDestFails() throws Exception {
1:8023b9e:         connection = connectionFactory.createConnection();
1:8023b9e:         useConnection(connection);
1:8023b9e: 
1:8023b9e:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:8023b9e: 
1:8023b9e:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:8023b9e: 
1:8023b9e:         CompositeData[] compdatalist = queue.browse();
1:8023b9e:         int initialQueueSize = compdatalist.length;
1:8023b9e:         CompositeData cdata = compdatalist[0];
1:8023b9e:         String messageID = (String) cdata.get("JMSMessageID");
1:8023b9e: 
1:8023b9e:         assertFalse("fail to copy to self", queue.copyMessageTo(messageID, getDestinationString()));
1:8023b9e:         assertEquals("fail to copy to self", 0, queue.copyMatchingMessagesTo("", getDestinationString()));
1:8023b9e:         assertEquals("fail to copy x to self", 0, queue.copyMatchingMessagesTo("", getDestinationString(), initialQueueSize));
1:8023b9e: 
1:8023b9e:         assertFalse("fail to move to self", queue.moveMessageTo(messageID, getDestinationString()));
1:8023b9e:         assertEquals("fail to move to self", 0, queue.moveMatchingMessagesTo("", getDestinationString()));
1:8023b9e:         assertEquals("fail to move x to self", 0, queue.moveMatchingMessagesTo("", getDestinationString(), initialQueueSize));
1:8023b9e: 
1:8023b9e:         compdatalist = queue.browse();
1:8023b9e:         int actualCount = compdatalist.length;
1:8023b9e:         echo("Current queue size: " + actualCount);
1:8023b9e:         assertEquals("no change", initialQueueSize, actualCount);
1:8023b9e:     }
1:8023b9e: 
1:99653c6:     public void testRemoveMessages() throws Exception {
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:99653c6:         broker.addQueue(getDestinationString());
1:99653c6: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:99653c6: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:99653c6:         String msg1 = queue.sendTextMessage("message 1");
1:99653c6:         String msg2 = queue.sendTextMessage("message 2");
1:99653c6: 
1:99653c6:         assertTrue(queue.removeMessage(msg2));
1:99653c6: 
1:99653c6:         connection = connectionFactory.createConnection();
1:99653c6:         connection.start();
1:99653c6:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:99653c6:         ActiveMQDestination dest = createDestination();
1:ee54f09: 
1:99653c6:         MessageConsumer consumer = session.createConsumer(dest);
1:99653c6:         Message message = consumer.receive(1000);
1:99653c6:         assertNotNull(message);
1:99653c6:         assertEquals(msg1, message.getJMSMessageID());
1:ee54f09: 
1:99653c6:         String msg3 = queue.sendTextMessage("message 3");
1:99653c6:         message = consumer.receive(1000);
1:99653c6:         assertNotNull(message);
1:99653c6:         assertEquals(msg3, message.getJMSMessageID());
1:99653c6: 
1:99653c6:         message = consumer.receive(1000);
1:99653c6:         assertNull(message);
1:99653c6: 
1:99653c6:     }
1:99653c6: 
1:a0c1781:     public void testRemoveQueue() throws Exception {
1:a0c1781:         String queueName = "TEST";
1:a0c1781:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:a0c1781:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:a0c1781:         broker.addQueue(queueName);
1:a0c1781: 
1:a0c1781:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1:a0c1781: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:a0c1781:         queue.sendTextMessage("message 1");
1:a0c1781:         queue.sendTextMessage("message 2");
1:a0c1781: 
1:a0c1781:         assertEquals(2, broker.getTotalMessageCount());
1:a0c1781: 
1:a0c1781:         broker.removeQueue(queueName);
1:a0c1781: 
1:a0c1781:         assertEquals(0, broker.getTotalMessageCount());
1:a0c1781: 
1:a0c1781:     }
1:a0c1781: 
1:c43282e:     public void testRetryMessages() throws Exception {
1:c43282e:         // lets speed up redelivery
1:c43282e:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) connectionFactory;
1:c43282e:         factory.getRedeliveryPolicy().setCollisionAvoidancePercent((short) 0);
1:c43282e:         factory.getRedeliveryPolicy().setMaximumRedeliveries(1);
1:c43282e:         factory.getRedeliveryPolicy().setInitialRedeliveryDelay(0);
1:c43282e:         factory.getRedeliveryPolicy().setUseCollisionAvoidance(false);
1:c43282e:         factory.getRedeliveryPolicy().setUseExponentialBackOff(false);
1:c43282e:         factory.getRedeliveryPolicy().setBackOffMultiplier((short) 0);
1:c43282e: 
1:c43282e:         connection = connectionFactory.createConnection();
1:c43282e:         useConnection(connection);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:c43282e:         long initialQueueSize = queue.getQueueSize();
1:c43282e:         echo("current queue size: " + initialQueueSize);
1:9b260dc:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:c43282e: 
1:c43282e:         // lets create a duff consumer which keeps rolling back...
1:c43282e:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c43282e:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationString()));
1:c43282e:         Message message = consumer.receive(5000);
1:c43282e:         while (message != null) {
1:c43282e:             echo("Message: " + message.getJMSMessageID() + " redelivered " + message.getJMSRedelivered() + " counter " + message.getObjectProperty("JMSXDeliveryCount"));
1:c43282e:             session.rollback();
1:c43282e:             message = consumer.receive(2000);
1:c43282e:         }
1:c43282e:         consumer.close();
1:c43282e:         session.close();
1:74f530a: 
1:c43282e:         // now lets get the dead letter queue
1:c43282e:         Thread.sleep(1000);
1:9edeb21: 
1:cb7b657:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
1:fde22a8:         QueueViewMBean dlq = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
1:eb034b4: 
1:c43282e:         long initialDlqSize = dlq.getQueueSize();
1:c43282e:         CompositeData[] compdatalist = dlq.browse();
1:c43282e:         int dlqQueueSize = compdatalist.length;
1:c43282e:         if (dlqQueueSize == 0) {
1:c43282e:             fail("There are no messages in the queue:");
1:c43282e:         }
1:c43282e:         else {
1:c43282e:             echo("Current DLQ queue size: " + dlqQueueSize);
1:c43282e:         }
1:c43282e:         int messageCount = dlqQueueSize;
1:c43282e:         String[] messageIDs = new String[messageCount];
1:c43282e:         for (int i = 0; i < messageCount; i++) {
1:c43282e:             CompositeData cdata = compdatalist[i];
1:c43282e:             String messageID = (String) cdata.get("JMSMessageID");
1:c43282e:             assertNotNull("Should have a message ID for message " + i, messageID);
1:c43282e:             messageIDs[i] = messageID;
1:c43282e:         }
1:5bc37af: 
1:9b260dc:         int dlqMemUsage = dlq.getMemoryPercentUsage();
1:9b260dc:         assertTrue("dlq has some memory usage", dlqMemUsage > 0);
1:9b260dc:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:99f3d4c: 
1:c43282e:         echo("About to retry " + messageCount + " messages");
1:fde22a8: 
1:c43282e:         for (String messageID : messageIDs) {
1:c43282e:             echo("Retrying message: " + messageID);
1:c43282e:             dlq.retryMessage(messageID);
1:c43282e:         }
1:9b260dc: 
1:c43282e:         long queueSize = queue.getQueueSize();
1:c43282e:         compdatalist = queue.browse();
1:c43282e:         int actualCount = compdatalist.length;
1:c43282e:         echo("Orginal queue size is now " + queueSize);
1:c43282e:         echo("Original browse queue size: " + actualCount);
1:c43282e: 
1:c43282e:         long dlqSize = dlq.getQueueSize();
1:c43282e:         echo("DLQ size: " + dlqSize);
1:c43282e: 
1:c43282e:         assertEquals("DLQ size", initialDlqSize - messageCount, dlqSize);
1:c43282e:         assertEquals("queue size", initialQueueSize, queueSize);
1:c43282e:         assertEquals("browse queue size", initialQueueSize, actualCount);
1:9b260dc: 
1:9b260dc:         assertEquals("dest has some memory usage", dlqMemUsage, queue.getMemoryPercentUsage());
1:c43282e:     }
1:9b260dc: 
1:c43282e:     public void testMoveMessagesBySelector() throws Exception {
1:74f530a:         connection = connectionFactory.createConnection();
1:c43282e:         useConnection(connection);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString() );
1:c43282e: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:c43282e:         String newDestination = getSecondDestinationString();
1:c43282e:         queue.moveMatchingMessagesTo("counter > 2", newDestination);
1:c43282e: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
1:c43282e: 
1:50d27e7:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e:         int movedSize = MESSAGE_COUNT-3;
1:50d27e7:         assertEquals("Unexpected number of messages ",movedSize,queueNew.getQueueSize());
1:c43282e: 
1:c43282e:         // now lets remove them by selector
1:50d27e7:         queueNew.removeMatchingMessages("counter > 2");
1:c43282e: 
1:50d27e7:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queueNew.getQueueSize());
1:50d27e7:         assertEquals("dest has no memory usage", 0, queueNew.getMemoryPercentUsage());
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queueNew.getMemoryUsageByteCount());
1:50d27e7: 
1:50d27e7:         queue.purge();
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:c43282e:     }
1:c43282e: 
1:c43282e:     public void testCopyMessagesBySelector() throws Exception {
1:c43282e:         connection = connectionFactory.createConnection();
1:c43282e:         useConnection(connection);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:c43282e: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:c43282e:         String newDestination = getSecondDestinationString();
1:c43282e:         long queueSize = queue.getQueueSize();
1:42e51a3:         assertTrue(queueSize > 0);
1:c43282e:         queue.copyMatchingMessagesTo("counter > 2", newDestination);
1:c43282e: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
1:c43282e: 
1:50d27e7:         QueueViewMBean queueTwo = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:50d27e7:         LOG.info("Queue: " + queueViewMBeanName + " now has: " + queueTwo.getQueueSize() + " message(s)");
1:50d27e7:         assertEquals("Expected messages in a queue: " + queueViewMBeanName, MESSAGE_COUNT-3, queueTwo.getQueueSize());
1:c43282e:         // now lets remove them by selector
1:50d27e7:         queueTwo.removeMatchingMessages("counter > 2");
1:c43282e: 
1:50d27e7:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queueTwo.getQueueSize());
1:50d27e7:         assertEquals("dest has no memory usage", 0, queueTwo.getMemoryPercentUsage());
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queueTwo.getMemoryUsageByteCount());
1:50d27e7: 
1:50d27e7:         queue.purge();
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:c43282e:     }
1:c43282e: 
1:50d27e7:     public void testSelectorBrowseUsage() throws Exception {
1:50d27e7:         connection = connectionFactory.createConnection();
1:50d27e7:         useConnection(connection);
1:50d27e7: 
1:50d27e7:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:50d27e7: 
1:50d27e7:         final String someSelectorExp = "JMSType = '22'";
1:50d27e7:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:50d27e7:         queue.browse(someSelectorExp);
1:50d27e7:         queue.purge();
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:50d27e7: 
1:50d27e7:         connection.close();
1:50d27e7:         connection = connectionFactory.createConnection();
1:50d27e7:         useConnection(connection);
1:50d27e7:         queue.browseMessages(someSelectorExp);
1:50d27e7:         queue.purge();
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:50d27e7: 
1:50d27e7:         connection.close();
1:50d27e7:         connection = connectionFactory.createConnection();
1:50d27e7:         useConnection(connection);
1:50d27e7:         queue.browseAsTable(someSelectorExp);
1:50d27e7:         queue.purge();
1:50d27e7:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:50d27e7:     }
1:c43282e: 
1:99f3d4c:     public void testCopyPurgeCopyBack() throws Exception {
1:99f3d4c:         connection = connectionFactory.createConnection();
1:99f3d4c:         final int numMessages = 100;
1:99f3d4c:         useConnection(connection, numMessages);
1:99f3d4c: 
1:99f3d4c:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:99f3d4c: 
1:99f3d4c:         QueueViewMBean queueT = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:99f3d4c: 
1:99f3d4c:         String newDestination = getSecondDestinationString();
1:99f3d4c:         long queueSize = queueT.getQueueSize();
1:99f3d4c:         assertTrue(queueSize > 0);
1:99f3d4c: 
1:99f3d4c:         int c = queueT.copyMatchingMessagesTo(null, newDestination);
1:99f3d4c:         LOG.info("Copied: " + c);
1:99f3d4c: 
1:99f3d4c:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
1:99f3d4c: 
1:99f3d4c:         QueueViewMBean queueD = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:99f3d4c: 
1:99f3d4c:         LOG.info("Queue: " + queueD.getName() + " now has: " + queueD.getQueueSize() + " message(s)");
1:99f3d4c:         assertEquals("Expected messages in a queue: " + queueD.getQueueSize(), numMessages, queueD.getQueueSize());
1:99f3d4c: 
1:99f3d4c:         LOG.info("Queue: " + queueT.getName() + " now has: " + queueT.getQueueSize() + " message(s)");
1:99f3d4c:         assertEquals("Expected messages in a queue: " + queueT.getQueueSize(), numMessages, queueT.getQueueSize());
1:99f3d4c: 
1:99f3d4c:         queueT.purge();
1:99f3d4c:         queueD.copyMatchingMessagesTo(null, getDestinationString());
1:99f3d4c: 
1:99f3d4c:         LOG.info("Queue: " + queueD.getName() + " now has: " + queueD.getQueueSize() + " message(s)");
1:99f3d4c:         assertEquals("Expected messages in a queue: " + queueD.getQueueSize(), numMessages, queueD.getQueueSize());
1:99f3d4c: 
1:99f3d4c:         LOG.info("Queue: " + queueT.getName() + " now has: " + queueT.getQueueSize() + " message(s)");
1:99f3d4c:         assertEquals("Expected messages in a queue: " + queueT.getQueueSize(), numMessages, queueT.getQueueSize());
1:99f3d4c: 
1:99f3d4c:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
1:99f3d4c:     }
1:99f3d4c: 
1:f220607:     public void testCreateDestinationWithSpacesAtEnds() throws Exception {
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:cb7b657:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:f220607: 
1:a38e372:         assertTrue("broker is not a slave", !broker.isSlave());
1:f220607:         // create 2 topics
1:f220607:         broker.addTopic(getDestinationString() + "1 ");
1:f220607:         broker.addTopic(" " + getDestinationString() + "2");
1:f220607:         broker.addTopic(" " + getDestinationString() + "3 ");
1:f220607: 
1:f220607: 
1:cb7b657:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1 ");
1:cb7b657:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= " + getDestinationString() + "2");
1:cb7b657:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= " + getDestinationString() + "3 ");
1:f220607: 
1:cb7b657:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:cb7b657:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
1:cb7b657:         ObjectName topicObjName3 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "3");
1:f220607: 
1:fde22a8:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:fde22a8:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
1:cb7b657:         TopicViewMBean topic3 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName3, TopicViewMBean.class, true);
1:c43282e: 
1:f220607:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:f220607:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
1:f220607:         assertEquals("topic3 Durable subscriber count", 0, topic3.getConsumerCount());
1:f220607: 
1:f220607:         String topicName = getDestinationString();
1:f220607:         String selector = null;
1:f220607: 
1:f220607:         // create 1 subscriber for each topic
1:f220607:         broker.createDurableSubscriber(clientID, "topic1.subscriber1", topicName + "1", selector);
1:f220607:         broker.createDurableSubscriber(clientID, "topic2.subscriber1", topicName + "2", selector);
1:f220607:         broker.createDurableSubscriber(clientID, "topic3.subscriber1", topicName + "3", selector);
1:f220607: 
1:f220607:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:f220607:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
1:f220607:         assertEquals("topic3 Durable subscriber count", 1, topic3.getConsumerCount());
1:f220607:     }
1:f220607: 
1:3dd6575:     protected void assertSendViaMBean() throws Exception {
1:3dd6575:         String queueName = getDestinationString() + ".SendMBBean";
1:dda5c93: 
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:dda5c93:         echo("Create QueueView MBean...");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:3dd6575:         broker.addQueue(queueName);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1:c43282e: 
1:3dd6575:         echo("Create QueueView MBean...");
1:fde22a8:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:9cd9a00:         proxy.purge();
1:c43282e: 
1:3dd6575:         int count = 5;
1:3dd6575:         for (int i = 0; i < count; i++) {
1:3dd6575:             String body = "message:" + i;
1:c43282e: 
1:42e51a3:             Map<String, Object> headers = new HashMap<String, Object>();
1:3dd6575:             headers.put("JMSCorrelationID", "MyCorrId");
1:9cd9a00:             headers.put("JMSDeliveryMode", Boolean.FALSE);
1:3dd6575:             headers.put("JMSXGroupID", "MyGroupID");
1:3dd6575:             headers.put("JMSXGroupSeq", 1234);
1:9cd9a00:             headers.put("JMSPriority", i + 1);
1:3dd6575:             headers.put("JMSType", "MyType");
1:3dd6575:             headers.put("MyHeader", i);
1:3dd6575:             headers.put("MyStringHeader", "StringHeader" + i);
1:c43282e: 
1:3dd6575:             proxy.sendTextMessage(headers, body);
1:c43282e:         }
1:c43282e: 
1:dda5c93:         browseAndVerify(proxy);
1:dda5c93:     }
1:dda5c93: 
1:dda5c93:     private void browseAndVerify(QueueViewMBean proxy) throws Exception {
1:dda5c93:         browseAndVerifyTypes(proxy, false);
1:dda5c93:     }
1:dda5c93: 
1:fde22a8:     @SuppressWarnings("rawtypes")
1:dda5c93:     private void browseAndVerifyTypes(QueueViewMBean proxy, boolean allStrings) throws Exception {
1:3dd6575:         CompositeData[] compdatalist = proxy.browse();
1:3dd6575:         if (compdatalist.length == 0) {
1:c43282e:             fail("There is no message in the queue:");
1:c43282e:         }
1:c43282e: 
1:3dd6575:         for (int i = 0; i < compdatalist.length; i++) {
1:c43282e:             CompositeData cdata = compdatalist[i];
1:c43282e: 
1:3dd6575:             if (i == 0) {
1:3dd6575:                 echo("Columns: " + cdata.getCompositeType().keySet());
1:c43282e:             }
1:c43282e: 
1:9cd9a00:             assertComplexData(i, cdata, "JMSCorrelationID", "MyCorrId");
1:9cd9a00:             assertComplexData(i, cdata, "JMSPriority", i + 1);
1:9cd9a00:             assertComplexData(i, cdata, "JMSType", "MyType");
1:9cd9a00:             assertComplexData(i, cdata, "JMSCorrelationID", "MyCorrId");
1:9cd9a00:             assertComplexData(i, cdata, "JMSDeliveryMode", "NON-PERSISTENT");
1:fee7f6a:             String expected = "{MyStringHeader=StringHeader" + i + ", MyHeader=" + i + "}";
1:fee7f6a:             // The order of the properties is different when using the ibm jdk.
1:fee7f6a:             if (System.getProperty("java.vendor").equals("IBM Corporation")) {
1:fee7f6a:                 expected = "{MyHeader=" + i + ", MyStringHeader=StringHeader" + i + "}";
1:fee7f6a:             }
1:fee7f6a:             assertComplexData(i, cdata, "PropertiesText", expected);
1:c43282e: 
1:dda5c93:             if (allStrings) {
1:dda5c93:                 Map stringProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.STRING_PROPERTIES);
1:dda5c93:                 assertEquals("stringProperties size()", 2, stringProperties.size());
1:dda5c93:                 assertEquals("stringProperties.MyHeader", "StringHeader" + i, stringProperties.get("MyStringHeader"));
1:dda5c93:                 assertEquals("stringProperties.MyHeader", "" + i, stringProperties.get("MyHeader"));
1:c43282e: 
1:dda5c93:             } else {
2:74f530a:                 Map intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:dda5c93:                 assertEquals("intProperties size()", 1, intProperties.size());
1:dda5c93:                 assertEquals("intProperties.MyHeader", i, intProperties.get("MyHeader"));
1:dda5c93: 
1:dda5c93:                 Map stringProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.STRING_PROPERTIES);
1:dda5c93:                 assertEquals("stringProperties size()", 1, stringProperties.size());
1:dda5c93:                 assertEquals("stringProperties.MyHeader", "StringHeader" + i, stringProperties.get("MyStringHeader"));
1:dda5c93:             }
1:c43282e: 
1:a655335:             Map properties = CompositeDataHelper.getMessageUserProperties(cdata);
1:a655335:             assertEquals("properties size()", 2, properties.size());
1:dda5c93:             assertEquals("properties.MyHeader", allStrings ? "" + i : i, properties.get("MyHeader"));
1:a655335:             assertEquals("properties.MyHeader", "StringHeader" + i, properties.get("MyStringHeader"));
1:c43282e: 
1:9cd9a00:             assertComplexData(i, cdata, "JMSXGroupSeq", 1234);
1:9cd9a00:             assertComplexData(i, cdata, "JMSXGroupID", "MyGroupID");
1:9cd9a00:             assertComplexData(i, cdata, "Text", "message:" + i);
1:c43282e:         }
1:c43282e:     }
1:c43282e: 
1:dda5c93:     protected void assertSendCsnvViaMBean() throws Exception {
1:dda5c93:         String queueName = getDestinationString() + ".SendMBBean";
1:dda5c93: 
1:dda5c93:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:dda5c93:         echo("Create QueueView MBean...");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:dda5c93:         broker.addQueue(queueName);
1:dda5c93: 
1:dda5c93:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1:dda5c93: 
1:3dd6575:         echo("Create QueueView MBean...");
1:fde22a8:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:dda5c93: 
1:dda5c93:         proxy.purge();
1:c43282e: 
1:dda5c93:         int count = 5;
1:dda5c93:         for (int i = 0; i < count; i++) {
1:dda5c93:             String props = "body=message:" + i;
1:dda5c93: 
1:dda5c93:             props += ",JMSCorrelationID=MyCorrId";
1:dda5c93:             props += ",JMSDeliveryMode=1";
1:dda5c93:             props += ",JMSXGroupID=MyGroupID";
1:dda5c93:             props += ",JMSXGroupSeq=1234";
1:dda5c93:             props += ",JMSPriority=" + (i + 1);
1:dda5c93:             props += ",JMSType=MyType";
1:dda5c93:             props += ",MyHeader=" + i;
1:dda5c93:             props += ",MyStringHeader=StringHeader" + i;
1:dda5c93: 
1:dda5c93:             proxy.sendTextMessageWithProperties(props);
1:dda5c93:         }
1:dda5c93: 
1:dda5c93:         browseAndVerifyTypes(proxy, true);
1:dda5c93:     }
1:dda5c93: 
1:9cd9a00:     protected void assertComplexData(int messageIndex, CompositeData cdata, String name, Object expected) {
1:3dd6575:         Object value = cdata.get(name);
1:9cd9a00:         assertEquals("Message " + messageIndex + " CData field: " + name, expected, value);
1:c43282e:     }
1:c43282e: 
1:138d9cf:     protected void assertQueueBrowseWorks() throws Exception {
1:138d9cf:         Integer mbeancnt = mbeanServer.getMBeanCount();
1:138d9cf:         echo("Mbean count :" + mbeancnt);
1:c43282e: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:c43282e: 
1:6c0fae0:         echo("Create QueueView MBean...");
1:fde22a8:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:c43282e: 
1:138d9cf:         long concount = proxy.getConsumerCount();
1:138d9cf:         echo("Consumer Count :" + concount);
1:138d9cf:         long messcount = proxy.getQueueSize();
1:138d9cf:         echo("current number of messages in the queue :" + messcount);
1:629b18c: 
1:138d9cf:         // lets browse
1:138d9cf:         CompositeData[] compdatalist = proxy.browse();
1:138d9cf:         if (compdatalist.length == 0) {
1:c43282e:             fail("There is no message in the queue:");
1:c1051c8:         }
1:3dd6575:         String[] messageIDs = new String[compdatalist.length];
1:629b18c: 
1:6c0fae0:         for (int i = 0; i < compdatalist.length; i++) {
1:c43282e:             CompositeData cdata = compdatalist[i];
1:629b18c: 
1:6c0fae0:             if (i == 0) {
1:6c0fae0:                 echo("Columns: " + cdata.getCompositeType().keySet());
1:6cd7082:             }
1:230a86c:             messageIDs[i] = (String)cdata.get("JMSMessageID");
1:6c0fae0:             echo("message " + i + " : " + cdata.values());
1:6cd7082:         }
1:7092b19: 
1:138d9cf:         TabularData table = proxy.browseAsTable();
1:138d9cf:         echo("Found tabular data: " + table);
1:138d9cf:         assertTrue("Table should not be empty!", table.size() > 0);
1:7092b19: 
1:18f9773:         assertEquals("Queue size", MESSAGE_COUNT, proxy.getQueueSize());
1:7092b19: 
1:6c0fae0:         String messageID = messageIDs[0];
1:138d9cf:         String newDestinationName = "queue://dummy.test.cheese";
1:6c0fae0:         echo("Attempting to copy: " + messageID + " to destination: " + newDestinationName);
1:138d9cf:         proxy.copyMessageTo(messageID, newDestinationName);
1:7092b19: 
1:18f9773:         assertEquals("Queue size", MESSAGE_COUNT, proxy.getQueueSize());
1:7092b19: 
1:6c0fae0:         messageID = messageIDs[1];
1:6c0fae0:         echo("Attempting to remove: " + messageID);
1:6c0fae0:         proxy.removeMessage(messageID);
1:7092b19: 
1:18f9773:         assertEquals("Queue size", MESSAGE_COUNT-1, proxy.getQueueSize());
1:7092b19: 
1:6c0fae0:         echo("Worked!");
1:6cd7082:     }
1:7092b19: 
1:6c0fae0:     protected void assertCreateAndDestroyDurableSubscriptions() throws Exception {
1:6c0fae0:         // lets create a new topic
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:6c0fae0:         echo("Create QueueView MBean...");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:7092b19: 
1:6c0fae0:         broker.addTopic(getDestinationString());
1:7092b19: 
1:6c0fae0:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
1:7092b19: 
1:ad5ad88:         String topicName = getDestinationString();
1:ad5ad88:         String selector = null;
1:230a86c:         ObjectName name1 = broker.createDurableSubscriber(clientID, "subscriber1", topicName, selector);
1:ad5ad88:         broker.createDurableSubscriber(clientID, "subscriber2", topicName, selector);
1:4fc1712:         assertEquals("Durable subscriber count", 2, broker.getInactiveDurableTopicSubscribers().length);
1:7092b19: 
1:0def1d4:         assertNotNull("Should have created an mbean name for the durable subscriber!", name1);
1:7092b19: 
1:230a86c:         LOG.info("Created durable subscriber with name: " + name1);
1:7092b19: 
1:6c0fae0:         // now lets try destroy it
1:ad5ad88:         broker.destroyDurableSubscriber(clientID, "subscriber1");
1:4fc1712:         assertEquals("Durable subscriber count", 1, broker.getInactiveDurableTopicSubscribers().length);
1:6cd7082:     }
1:cb7b657: 
1:91bcbda:     protected void assertConsumerCounts() throws Exception {
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:cb7b657: 
1:d75e418:         assertTrue("broker is not a slave", !broker.isSlave());
1:230a86c:         // create 2 topics
1:91bcbda:         broker.addTopic(getDestinationString() + "1");
1:91bcbda:         broker.addTopic(getDestinationString() + "2");
1:7092b19: 
1:cb7b657:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:cb7b657:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
1:fde22a8:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:fde22a8:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
1:cb7b657: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
1:c1051c8: 
1:91bcbda:         String topicName = getDestinationString();
1:91bcbda:         String selector = null;
1:c1051c8: 
1:230a86c:         // create 1 subscriber for each topic
1:91bcbda:         broker.createDurableSubscriber(clientID, "topic1.subscriber1", topicName + "1", selector);
1:91bcbda:         broker.createDurableSubscriber(clientID, "topic2.subscriber1", topicName + "2", selector);
1:18f9773: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
9:230a86c: 
1:230a86c:         // create 1 more subscriber for topic1
1:91bcbda:         broker.createDurableSubscriber(clientID, "topic1.subscriber2", topicName + "1", selector);
1:230a86c: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 2, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
1:230a86c: 
1:230a86c:         // destroy topic1 subscriber
1:91bcbda:         broker.destroyDurableSubscriber(clientID, "topic1.subscriber1");
1:230a86c: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
1:230a86c: 
1:91bcbda:         // destroy topic2 subscriber
1:91bcbda:         broker.destroyDurableSubscriber(clientID, "topic2.subscriber1");
1:230a86c: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
1:230a86c: 
1:230a86c:         // destroy remaining topic1 subscriber
1:91bcbda:         broker.destroyDurableSubscriber(clientID, "topic1.subscriber2");
1:230a86c: 
1:91bcbda:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:91bcbda:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
1:6cd7082:     }
1:230a86c: 
1:7092b19:     protected void assertProducerCounts() throws Exception {
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:7092b19: 
1:d75e418:         assertTrue("broker is not a slave", !broker.isSlave());
1:7092b19:         // create 2 topics
1:7092b19:         broker.addTopic(getDestinationString() + "1");
1:7092b19:         broker.addTopic(getDestinationString() + "2");
1:7092b19: 
1:cb7b657:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:cb7b657:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
1:cb7b657:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:cb7b657:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
1:7092b19: 
1:7092b19:         assertEquals("topic1 Producer count", 0, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1:7092b19:         assertEquals("broker Topic Producer count", 0, broker.getTopicProducers().length);
1:7092b19: 
1:7092b19:         // create 1 producer for each topic
1:c43282e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7092b19:         Destination dest1 = session.createTopic(getDestinationString() + "1");
1:7092b19:         Destination dest2 = session.createTopic(getDestinationString() + "2");
1:7092b19:         MessageProducer producer1 = session.createProducer(dest1);
1:7092b19:         MessageProducer producer2 = session.createProducer(dest2);
1:7092b19:         Thread.sleep(500);
1:71c0d44: 
1:7092b19:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1:7092b19: 
1:7092b19:         assertEquals("broker Topic Producer count", 2, broker.getTopicProducers().length);
1:7092b19: 
1:7092b19:         // create 1 more producer for topic1
1:7092b19:         MessageProducer producer3 = session.createProducer(dest1);
1:7092b19:         Thread.sleep(500);
1:7092b19: 
1:7092b19:         assertEquals("topic1 Producer count", 2, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1:7092b19: 
1:7092b19:         assertEquals("broker Topic Producer count", 3, broker.getTopicProducers().length);
1:7092b19: 
1:7092b19:         // destroy topic1 producer
1:7092b19:         producer1.close();
1:7092b19:         Thread.sleep(500);
1:7092b19: 
1:7092b19:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1:7092b19: 
1:7092b19:         assertEquals("broker Topic Producer count", 2, broker.getTopicProducers().length);
1:7092b19: 
1:7092b19:         // destroy topic2 producer
1:7092b19:         producer2.close();
1:7092b19:         Thread.sleep(500);
1:7092b19: 
1:7092b19:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1:7092b19: 
1:7092b19:         assertEquals("broker Topic Producer count", 1, broker.getTopicProducers().length);
1:7092b19: 
1:7092b19:         // destroy remaining topic1 producer
1:7092b19:         producer3.close();
1:7092b19:         Thread.sleep(500);
1:7092b19: 
1:7092b19:         assertEquals("topic1 Producer count", 0, topic1.getProducerCount());
1:7092b19:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1:7092b19: 
1:71c0d44:         MessageProducer producer4 = session.createProducer(null);
1:629b18c:         Thread.sleep(500);
1:629b18c:         assertEquals(1, broker.getDynamicDestinationProducers().length);
1:71c0d44:         producer4.close();
1:71c0d44:         Thread.sleep(500);
1:629b18c: 
1:7092b19:         assertEquals("broker Topic Producer count", 0, broker.getTopicProducers().length);
1:7092b19:     }
1:629b18c: 
1:2a62b74:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, Exception {
1:2a62b74:         final ObjectName objectName = new ObjectName(name);
1:2a62b74:         final AtomicBoolean result = new AtomicBoolean(false);
1:2a62b74:         assertTrue("Bean registered: " + objectName, Wait.waitFor(new Wait.Condition() {
1:2a62b74:             @Override
1:2a62b74:             public boolean isSatisified() throws Exception {
1:2a62b74:                 try {
1:2a62b74:                     result.set(mbeanServer.isRegistered(objectName));
1:2a62b74:                 } catch (Exception ignored) {
1:2a62b74:                     LOG.debug(ignored.toString());
1:2a62b74:                 }
1:2a62b74:                 return result.get();
1:2a62b74:             }
1:2a62b74:         }));
1:6c0fae0:         return objectName;
1:6cd7082:     }
1:629b18c: 
1:f220607:     protected ObjectName assertNotRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:f220607:         ObjectName objectName = new ObjectName(name);
1:f220607:         if (mbeanServer.isRegistered(objectName)) {
1:f220607:             fail("Found the MBean!: " + objectName);
1:f220607:         } else {
1:f220607:             echo("Bean not registered Registered: " + objectName);
1:f220607:         }
1:f220607:         return objectName;
1:f220607:     }
1:f220607: 
1:fde22a8:     @Override
1:138d9cf:     protected void setUp() throws Exception {
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:138d9cf:         useTopic = false;
1:138d9cf:         super.setUp();
1:aaa81de:         ManagementContext managementContext = broker.getManagementContext();
1:aaa81de:         mbeanServer = managementContext.getMBeanServer();
1:ae441cb: 
1:ae441cb:         broker.getTransportConnectorByScheme("tcp").setUpdateClusterClientsOnRemove(true);
1:6cd7082:     }
1:629b18c: 
1:fde22a8:     @Override
1:138d9cf:     protected void tearDown() throws Exception {
1:6c0fae0:         if (waitForKeyPress) {
1:6c0fae0:             // We are running from the command line so let folks browse the
1:6c0fae0:             // mbeans...
1:6c0fae0:             System.out.println();
1:6c0fae0:             System.out.println("Press enter to terminate the program.");
1:6c0fae0:             System.out.println("In the meantime you can use your JMX console to view the current MBeans");
1:6c0fae0:             BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
1:6c0fae0:             reader.readLine();
1:6cd7082:         }
1:629b18c: 
1:138d9cf:         if (connection != null) {
1:138d9cf:             connection.close();
1:138d9cf:             connection = null;
1:6cd7082:         }
1:138d9cf:         super.tearDown();
1:6cd7082:     }
1:629b18c: 
1:42e51a3:     @Override
1:42e51a3:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:42e51a3:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:42e51a3:     }
1:42e51a3: 
1:fde22a8:     @Override
1:138d9cf:     protected BrokerService createBroker() throws Exception {
1:138d9cf:         BrokerService answer = new BrokerService();
1:6cd7082:         answer.setPersistent(false);
1:18f9773:         answer.setDeleteAllMessagesOnStartup(true);
1:138d9cf:         answer.setUseJmx(true);
1:9b260dc: 
1:9b260dc:         // apply memory limit so that %usage is visible
1:9b260dc:         PolicyMap policyMap = new PolicyMap();
1:9b260dc:         PolicyEntry defaultEntry = new PolicyEntry();
1:9b260dc:         defaultEntry.setMemoryLimit(1024*1024*4);
1:9b260dc:         policyMap.setDefaultEntry(defaultEntry);
1:9b260dc:         answer.setDestinationPolicy(policyMap);
1:9b260dc: 
1:7410257:         // allow options to be visible via jmx
1:7410257:         answer.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue(QUEUE_WITH_OPTIONS + "?topQueue=true&hasOptions=2")});
1:7410257: 
1:138d9cf:         answer.addConnector(bindAddress);
1:138d9cf:         return answer;
1:6cd7082:     }
1:629b18c: 
1:85b9c81:     protected void useConnection(Connection connection, int numToSend) throws Exception {
1:c43282e:         connection.setClientID(clientID);
1:c43282e:         connection.start();
1:c43282e:         Session session = connection.createSession(transacted, authMode);
1:138d9cf:         destination = createDestination();
1:138d9cf:         MessageProducer producer = session.createProducer(destination);
1:85b9c81:         for (int i = 0; i < numToSend; i++) {
1:138d9cf:             Message message = session.createTextMessage("Message: " + i);
1:9479de7:             message.setIntProperty("counter", i);
1:3dd6575:             message.setJMSCorrelationID("MyCorrelationID");
1:3dd6575:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:3dd6575:             message.setJMSType("MyType");
1:3dd6575:             message.setJMSPriority(5);
1:138d9cf:             producer.send(message);
1:c43282e:         }
2:c43282e:         Thread.sleep(1000);
1:c43282e:     }
1:c43282e: 
1:85b9c81:     protected void useConnection(Connection connection) throws Exception {
1:85b9c81:         useConnection(connection, MESSAGE_COUNT);
1:85b9c81:     }
1:85b9c81: 
1:eb034b4:     protected void useConnectionWithBlobMessage(Connection connection) throws Exception {
1:eb034b4:         connection.setClientID(clientID);
1:eb034b4:         connection.start();
1:eb034b4:         ActiveMQSession session = (ActiveMQSession) connection.createSession(transacted, authMode);
1:eb034b4:         destination = createDestination();
1:eb034b4:         MessageProducer producer = session.createProducer(destination);
1:eb034b4:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:eb034b4:             BlobMessage message = session.createBlobMessage(new URL("http://foo.bar/test"));
1:eb034b4:             message.setIntProperty("counter", i);
1:eb034b4:             message.setJMSCorrelationID("MyCorrelationID");
1:eb034b4:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:eb034b4:             message.setJMSType("MyType");
1:eb034b4:             message.setJMSPriority(5);
1:eb034b4:             producer.send(message);
1:eb034b4:         }
1:eb034b4:         Thread.sleep(1000);
1:eb034b4:     }
1:eb034b4: 
1:9edeb21:     protected void useConnectionWithByteMessage(Connection connection) throws Exception {
1:9edeb21:         connection.setClientID(clientID);
1:9edeb21:         connection.start();
1:9edeb21:         ActiveMQSession session = (ActiveMQSession) connection.createSession(transacted, authMode);
1:9edeb21:         destination = createDestination();
1:9edeb21:         MessageProducer producer = session.createProducer(destination);
1:9edeb21:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:9edeb21:             BytesMessage message = session.createBytesMessage();
1:9edeb21:             message.writeBytes(("Message: " + i).getBytes());
1:9edeb21:             message.setIntProperty("counter", i);
1:9edeb21:             message.setJMSCorrelationID("MyCorrelationID");
1:9edeb21:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:9edeb21:             message.setJMSType("MyType");
1:9edeb21:             message.setJMSPriority(5);
1:9edeb21:             producer.send(message);
1:9edeb21:         }
1:9edeb21:         Thread.sleep(1000);
1:9edeb21:     }
1:9edeb21: 
1:138d9cf:     protected void echo(String text) {
1:cb7b657:         //LOG.info(text);
1:c43282e:     }
1:c43282e: 
1:6cd7082:     protected String getSecondDestinationString() {
1:6cd7082:         return "test.new.destination." + getClass() + "." + getName();
1:c43282e:     }
1:eb034b4: 
1:629b18c:     public void testDynamicProducerView() throws Exception {
1:c43282e:         connection = connectionFactory.createConnection();
1:e511e76: 
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:c43282e: 
1:629b18c:         assertEquals(0, broker.getDynamicDestinationProducers().length);
1:c43282e: 
1:c43282e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:629b18c:         MessageProducer producer = session.createProducer(null);
1:5bc37af: 
1:629b18c:         Destination dest1 = session.createTopic("DynamicDest-1");
1:629b18c:         Destination dest2 = session.createTopic("DynamicDest-2");
1:629b18c:         Destination dest3 = session.createQueue("DynamicDest-3");
1:c43282e: 
1:629b18c:         // Wait a bit to let the producer get registered.
1:629b18c:         Thread.sleep(100);
1:c43282e: 
1:629b18c:         assertEquals(1, broker.getDynamicDestinationProducers().length);
1:c43282e: 
1:629b18c:         ObjectName viewName = broker.getDynamicDestinationProducers()[0];
1:629b18c:         assertNotNull(viewName);
1:fde22a8:         ProducerViewMBean view = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, viewName, ProducerViewMBean.class, true);
1:629b18c:         assertNotNull(view);
1:c43282e: 
1:629b18c:         assertEquals("NOTSET", view.getDestinationName());
1:c43282e: 
1:629b18c:         producer.send(dest1, session.createTextMessage("Test Message 1"));
1:629b18c:         Thread.sleep(200);
1:629b18c:         assertEquals(((ActiveMQDestination)dest1).getPhysicalName(), view.getDestinationName());
1:629b18c:         assertTrue(view.isDestinationTopic());
1:629b18c:         assertFalse(view.isDestinationQueue());
1:629b18c:         assertFalse(view.isDestinationTemporary());
1:c43282e: 
1:629b18c:         producer.send(dest2, session.createTextMessage("Test Message 2"));
1:629b18c:         Thread.sleep(200);
1:629b18c:         assertEquals(((ActiveMQDestination)dest2).getPhysicalName(), view.getDestinationName());
1:629b18c:         assertTrue(view.isDestinationTopic());
1:629b18c:         assertFalse(view.isDestinationQueue());
1:629b18c:         assertFalse(view.isDestinationTemporary());
1:c43282e: 
1:629b18c:         producer.send(dest3, session.createTextMessage("Test Message 3"));
1:629b18c:         Thread.sleep(200);
1:629b18c:         assertEquals(((ActiveMQDestination)dest3).getPhysicalName(), view.getDestinationName());
1:629b18c:         assertTrue(view.isDestinationQueue());
1:629b18c:         assertFalse(view.isDestinationTopic());
1:629b18c:         assertFalse(view.isDestinationTemporary());
1:c43282e: 
1:629b18c:         producer.close();
1:629b18c:         Thread.sleep(200);
1:629b18c:         assertEquals(0, broker.getDynamicDestinationProducers().length);
1:c43282e:     }
1:c43282e: 
1:e511e76:     public void testTempQueueJMXDelete() throws Exception {
1:e511e76:         connection = connectionFactory.createConnection();
1:e511e76: 
1:e511e76:         connection.setClientID(clientID);
1:e511e76:         connection.start();
1:e511e76:         Session session = connection.createSession(transacted, authMode);
1:e511e76:         ActiveMQTempQueue tQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
1:e511e76:         Thread.sleep(1000);
1:e511e76: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType="
1:cb7b657:                 + JMXSupport.encodeObjectNamePart(tQueue.getDestinationTypeAsString())
1:cb7b657:                 + ",destinationName=" + JMXSupport.encodeObjectNamePart(tQueue.getPhysicalName()));
1:c43282e: 
1:e511e76:                         // should not throw an exception
1:c43282e: 
1:e511e76:         mbeanServer.getObjectInstance(queueViewMBeanName);
1:e511e76: 
1:e511e76:         tQueue.delete();
1:e511e76:         Thread.sleep(1000);
1:e511e76:         try {
1:e511e76:             // should throw an exception
1:e511e76:             mbeanServer.getObjectInstance(queueViewMBeanName);
1:e511e76: 
1:e511e76:             fail("should be deleted already!");
1:e511e76:         } catch (Exception e) {
1:e511e76:             // expected!
1:e511e76:         }
1:e511e76:     }
1:e511e76: 
1:eb034b4:     // Test for AMQ-3029
1:eb034b4:     public void testBrowseBlobMessages() throws Exception {
1:eb034b4:         connection = connectionFactory.createConnection();
1:eb034b4:         useConnectionWithBlobMessage(connection);
1:eb034b4: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:eb034b4: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:eb034b4: 
1:eb034b4:         CompositeData[] compdatalist = queue.browse();
1:eb034b4:         int initialQueueSize = compdatalist.length;
1:eb034b4:         if (initialQueueSize == 0) {
1:eb034b4:             fail("There is no message in the queue:");
1:eb034b4:         }
1:eb034b4:         else {
1:eb034b4:             echo("Current queue size: " + initialQueueSize);
1:eb034b4:         }
1:eb034b4:         int messageCount = initialQueueSize;
1:eb034b4:         String[] messageIDs = new String[messageCount];
1:eb034b4:         for (int i = 0; i < messageCount; i++) {
1:eb034b4:             CompositeData cdata = compdatalist[i];
1:eb034b4:             String messageID = (String) cdata.get("JMSMessageID");
1:eb034b4:             assertNotNull("Should have a message ID for message " + i, messageID);
1:eb034b4: 
1:eb034b4:             messageIDs[i] = messageID;
1:eb034b4:         }
1:eb034b4: 
1:eb034b4:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:eb034b4:     }
1:e511e76: 
1:7410257:     public void testDestinationOptionsAreVisible() throws Exception {
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + QUEUE_WITH_OPTIONS );
1:7410257: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:7410257: 
1:7410257:         assertEquals("name match", QUEUE_WITH_OPTIONS, queue.getName());
1:7410257: 
1:7410257:         String options = queue.getOptions();
1:7410257:         LOG.info("Got options: " + options);
1:7410257: 
1:7410257:         Map<String, String> optionsMap = URISupport.parseQuery(options);
1:7410257:         assertEquals("got a map", 2, optionsMap.size());
1:7410257:         assertTrue("matches our options", optionsMap.containsKey("hasOptions"));
1:7410257:         assertTrue("matches our options", optionsMap.containsKey("topQueue"));
1:7410257: 
1:7410257:         assertTrue("matches our options", optionsMap.containsValue("true"));
1:7410257:         assertTrue("matches our options", optionsMap.containsValue("2"));
1:7410257:     }
1:7410257: 
1:686bfcf:     public void testSubscriptionViewToConnectionMBean() throws Exception {
1:686bfcf: 
1:686bfcf:         connection = connectionFactory.createConnection("admin", "admin");
1:686bfcf:         connection.setClientID("MBeanTest");
1:686bfcf:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:686bfcf:         Destination queue = session.createQueue(getDestinationString() + ".Queue");
1:686bfcf:         MessageConsumer queueConsumer = session.createConsumer(queue);
1:0efaaec:         MessageProducer producer = session.createProducer(queue);
1:686bfcf: 
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:686bfcf: 
1:686bfcf:         Thread.sleep(100);
1:686bfcf: 
1:686bfcf:         assertTrue(broker.getQueueSubscribers().length == 1);
1:686bfcf: 
1:686bfcf:         ObjectName subscriptionName = broker.getQueueSubscribers()[0];
1:0efaaec:         LOG.info("Looking for Subscription: " + subscriptionName);
1:686bfcf: 
1:686bfcf:         SubscriptionViewMBean subscriberView =
1:cb7b657:             MBeanServerInvocationHandler.newProxyInstance(
1:686bfcf:                     mbeanServer, subscriptionName, SubscriptionViewMBean.class, true);
1:686bfcf:         assertNotNull(subscriberView);
1:686bfcf: 
1:686bfcf:         ObjectName connectionName = subscriberView.getConnection();
1:0efaaec:         LOG.info("Looking for Connection: " + connectionName);
1:686bfcf:         assertNotNull(connectionName);
1:686bfcf:         ConnectionViewMBean connectionView =
1:cb7b657:             MBeanServerInvocationHandler.newProxyInstance(
1:686bfcf:                     mbeanServer, connectionName, ConnectionViewMBean.class, true);
1:686bfcf:         assertNotNull(connectionView);
1:0efaaec: 
1:0efaaec:         // Our consumer plus one advisory consumer.
1:0efaaec:         assertEquals(2, connectionView.getConsumers().length);
1:0efaaec: 
1:aaa81de:         assertEquals("client id match", "MBeanTest", connectionView.getClientId());
1:aaa81de: 
1:0efaaec:         // Check that the subscription view we found earlier is in this list.
1:0efaaec:         boolean found = false;
1:0efaaec:         for (ObjectName name : connectionView.getConsumers()) {
1:0efaaec:             if (name.equals(subscriptionName)) {
1:0efaaec:                 found = true;
1:0efaaec:             }
1:0efaaec:         }
1:0efaaec:         assertTrue("We should have found: " + subscriptionName, found);
1:0efaaec: 
1:0efaaec:         // Our producer and no others.
1:0efaaec:         assertEquals(1, connectionView.getProducers().length);
1:0efaaec: 
1:0efaaec:         // Bean should detect the updates.
1:0efaaec:         queueConsumer.close();
1:0efaaec:         producer.close();
1:0efaaec: 
1:0efaaec:         Thread.sleep(200);
1:0efaaec: 
1:0efaaec:         // Only an advisory consumers now.
1:0efaaec:         assertEquals(1, connectionView.getConsumers().length);
1:0efaaec:         assertEquals(0, connectionView.getProducers().length);
1:686bfcf:     }
1:686bfcf: 
1:681c1ab:     public void testCreateAndUnsubscribeDurableSubscriptions() throws Exception {
1:681c1ab: 
1:681c1ab:         connection = connectionFactory.createConnection("admin", "admin");
1:681c1ab:         connection.setClientID("MBeanTest");
1:681c1ab: 
1:681c1ab:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:681c1ab:         String topicName = getDestinationString() + ".DurableTopic";
1:681c1ab:         Topic topic = session.createTopic(topicName);
1:681c1ab: 
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:681c1ab:         echo("Create QueueView MBean...");
1:cb7b657:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:681c1ab: 
1:681c1ab:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
1:681c1ab:         assertEquals("Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1:681c1ab: 
1:681c1ab:         MessageConsumer durableConsumer1 = session.createDurableSubscriber(topic, "subscription1");
1:681c1ab:         MessageConsumer durableConsumer2 = session.createDurableSubscriber(topic, "subscription2");
1:681c1ab: 
1:681c1ab:         Thread.sleep(100);
1:681c1ab: 
1:681c1ab:         assertEquals("Durable subscriber count", 2, broker.getDurableTopicSubscribers().length);
1:681c1ab:         assertEquals("Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1:681c1ab: 
1:681c1ab:         durableConsumer1.close();
1:681c1ab:         durableConsumer2.close();
1:681c1ab: 
1:681c1ab:         Thread.sleep(100);
1:681c1ab: 
1:681c1ab:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
1:681c1ab:         assertEquals("Durable subscriber count", 2, broker.getInactiveDurableTopicSubscribers().length);
1:681c1ab: 
1:681c1ab:         session.unsubscribe("subscription1");
1:681c1ab: 
1:681c1ab:         Thread.sleep(100);
1:681c1ab: 
1:681c1ab:         assertEquals("Inactive Durable subscriber count", 1, broker.getInactiveDurableTopicSubscribers().length);
1:681c1ab: 
1:681c1ab:         session.unsubscribe("subscription2");
1:681c1ab: 
1:681c1ab:         assertEquals("Inactive Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1:681c1ab:     }
1:681c1ab: 
1:f5dcc9d:     public void testUserNamePopulated() throws Exception {
1:f5dcc9d:         doTestUserNameInMBeans(true);
1:f5dcc9d:     }
1:f5dcc9d: 
1:f5dcc9d:     public void testUserNameNotPopulated() throws Exception {
1:f5dcc9d:         doTestUserNameInMBeans(false);
1:f5dcc9d:     }
1:f5dcc9d: 
1:686bfcf:     @SuppressWarnings("unused")
1:f5dcc9d:     private void doTestUserNameInMBeans(boolean expect) throws Exception {
1:f5dcc9d:         broker.setPopulateUserNameInMBeans(expect);
1:f5dcc9d: 
1:f5dcc9d:         connection = connectionFactory.createConnection("admin", "admin");
1:f5dcc9d:         connection.setClientID("MBeanTest");
1:f5dcc9d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f5dcc9d:         Destination queue = session.createQueue(getDestinationString() + ".Queue");
1:f5dcc9d:         Topic topic = session.createTopic(getDestinationString() + ".Topic");
1:f5dcc9d:         MessageProducer producer = session.createProducer(queue);
1:f5dcc9d:         MessageConsumer queueConsumer = session.createConsumer(queue);
1:f5dcc9d:         MessageConsumer topicConsumer = session.createConsumer(topic);
1:f5dcc9d:         MessageConsumer durable = session.createDurableSubscriber(topic, "Durable");
1:f5dcc9d: 
1:cb7b657:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:f5dcc9d: 
1:f5dcc9d:         Thread.sleep(100);
1:f5dcc9d: 
1:f5dcc9d:         assertTrue(broker.getQueueProducers().length == 1);
1:f5dcc9d:         assertTrue(broker.getTopicSubscribers().length == 2);
1:f5dcc9d:         assertTrue(broker.getQueueSubscribers().length == 1);
1:f5dcc9d: 
1:f5dcc9d:         ObjectName producerName = broker.getQueueProducers()[0];
1:fde22a8:         ProducerViewMBean producerView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, producerName, ProducerViewMBean.class, true);
1:f5dcc9d:         assertNotNull(producerView);
1:f5dcc9d: 
1:f5dcc9d:         if (expect) {
1:f5dcc9d:             assertEquals("admin", producerView.getUserName());
1:f5dcc9d:         } else {
1:f5dcc9d:             assertNull(producerView.getUserName());
1:f5dcc9d:         }
1:f5dcc9d: 
1:f5dcc9d:         for (ObjectName name : broker.getTopicSubscribers()) {
1:fde22a8:             SubscriptionViewMBean subscriberView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
1:f5dcc9d:             if (expect) {
1:f5dcc9d:                 assertEquals("admin", subscriberView.getUserName());
1:f5dcc9d:             } else {
1:f5dcc9d:                 assertNull(subscriberView.getUserName());
1:f5dcc9d:             }
1:f5dcc9d:         }
1:f5dcc9d: 
1:f5dcc9d:         for (ObjectName name : broker.getQueueSubscribers()) {
1:fde22a8:             SubscriptionViewMBean subscriberView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
1:f5dcc9d:             if (expect) {
1:f5dcc9d:                 assertEquals("admin", subscriberView.getUserName());
1:f5dcc9d:             } else {
1:f5dcc9d:                 assertNull(subscriberView.getUserName());
1:f5dcc9d:             }
1:f5dcc9d:         }
1:aaa81de:         ObjectName query = //new ObjectName(domain + ":type=Broker,brokerName=localhost,connector=*," + "connectorName=*,connectionName=MBeanTest");
1:7d7d6fa:             BrokerMBeanSupport.createConnectionQuery(domain, "localhost", connection.getClientID());
1:f5dcc9d: 
1:cb7b657:         Set<ObjectName> names = mbeanServer.queryNames(query, null);
1:f5dcc9d:         boolean found = false;
1:f5dcc9d:         for (ObjectName name : names) {
1:cb7b657:             if (name.toString().endsWith("connectionName=MBeanTest")) {
1:f5dcc9d: 
1:f5dcc9d:                 ConnectionViewMBean connectionView =
1:fde22a8:                     MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, ConnectionViewMBean.class, true);
1:f5dcc9d:                 assertNotNull(connectionView);
1:f5dcc9d: 
1:f5dcc9d:                 if (expect) {
1:f5dcc9d:                     assertEquals("admin", connectionView.getUserName());
1:f5dcc9d:                 } else {
1:f5dcc9d:                     assertNull(connectionView.getUserName());
1:f5dcc9d:                 }
1:f5dcc9d: 
1:f5dcc9d:                 found = true;
1:f5dcc9d:                 break;
1:f5dcc9d:             }
1:f5dcc9d:         }
1:f5dcc9d: 
1:f5dcc9d:         assertTrue("Should find the connection's ManagedTransportConnection", found);
1:f5dcc9d:     }
1:f5dcc9d: 
1:3813947:     public void testMoveMessagesToRetainOrder() throws Exception {
1:3813947:         connection = connectionFactory.createConnection();
1:3813947:         useConnection(connection);
1:3813947: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:3813947: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:3813947: 
1:3813947:         String newDestination = getSecondDestinationString();
1:3813947:         queue.moveMatchingMessagesTo("", newDestination);
1:3813947: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
1:3813947: 
1:fde22a8:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:3813947:         int movedSize = MESSAGE_COUNT;
1:3813947:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
1:3813947: 
1:3813947:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3813947:         Destination destination = session.createQueue(newDestination);
1:3813947:         MessageConsumer consumer = session.createConsumer(destination);
1:3813947: 
1:3813947:         int last = -1;
1:3813947:         int current = -1;
1:3813947:         Message message = null;
1:3813947:         while ((message = consumer.receive(2000)) != null) {
1:3813947:             if (message.propertyExists("counter")) {
1:3813947:                 current = message.getIntProperty("counter");
1:3813947:                 assertEquals(last, current - 1);
1:3813947:                 last = current;
1:3813947:             }
1:3813947:         }
1:3813947: 
1:3813947:         // now lets remove them by selector
1:3813947:         queue.removeMatchingMessages("");
1:3813947: 
1:3813947:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
1:9b260dc:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:3813947:     }
1:3813947: 
1:fde22a8:     public void testConnectionCounts() throws Exception {
1:fde22a8: 
1:fde22a8:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:fde22a8:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:3813947: 
1:fde22a8:         assertEquals(0, broker.getCurrentConnectionsCount());
1:fde22a8: 
1:fde22a8:         connection = connectionFactory.createConnection();
1:fde22a8:         useConnection(connection);
1:fde22a8: 
1:fde22a8:         assertEquals(1, broker.getCurrentConnectionsCount());
1:fde22a8:         connection.close();
1:fde22a8:         assertEquals(0, broker.getCurrentConnectionsCount());
1:fde22a8:         assertEquals(1, broker.getTotalConnectionsCount());
1:fde22a8:     }
1:fde22a8: 
1:3813947:     public void testCopyMessagesToRetainOrder() throws Exception {
1:3813947:         connection = connectionFactory.createConnection();
1:3813947:         useConnection(connection);
1:3813947: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:3813947: 
1:fde22a8:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:3813947: 
1:3813947:         String newDestination = getSecondDestinationString();
1:3813947:         queue.copyMatchingMessagesTo("", newDestination);
1:3813947: 
1:cb7b657:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
1:3813947: 
1:fde22a8:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:3813947:         int movedSize = MESSAGE_COUNT;
1:3813947:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
1:3813947: 
1:3813947:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3813947:         Destination destination = session.createQueue(newDestination);
1:3813947:         MessageConsumer consumer = session.createConsumer(destination);
1:3813947: 
1:3813947:         int last = -1;
1:3813947:         int current = -1;
1:3813947:         Message message = null;
1:3813947:         while ((message = consumer.receive(2000)) != null) {
1:3813947:             if (message.propertyExists("counter")) {
1:3813947:                 current = message.getIntProperty("counter");
1:3813947:                 assertEquals(last, current - 1);
1:3813947:                 last = current;
1:3813947:             }
1:3813947:         }
1:3813947: 
1:3813947:         // now lets remove them by selector
1:3813947:         queue.removeMatchingMessages("");
1:3813947: 
1:3813947:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
1:9b260dc:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:3813947:     }
1:c43282e: 
1:3813947:     public void testRemoveMatchingMessageRetainOrder() throws Exception {
1:3813947:         connection = connectionFactory.createConnection();
1:3813947:         useConnection(connection);
1:3813947: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:3813947: 
1:a0c1781:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:3813947: 
1:3813947:         String queueName = getDestinationString();
1:3813947:         queue.removeMatchingMessages("counter < 10");
1:3813947: 
1:3813947:         int newSize = MESSAGE_COUNT - 10;
1:3813947:         assertEquals("Unexpected number of messages ", newSize, queue.getQueueSize());
1:3813947: 
1:3813947:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3813947:         Destination destination = session.createQueue(queueName);
1:3813947:         MessageConsumer consumer = session.createConsumer(destination);
1:3813947: 
1:3813947:         int last = 9;
1:3813947:         int current = 0;
1:3813947:         Message message = null;
1:3813947:         while ((message = consumer.receive(2000)) != null) {
1:3813947:             if (message.propertyExists("counter")) {
1:3813947:                 current = message.getIntProperty("counter");
1:3813947:                 assertEquals(last, current - 1);
1:3813947:                 last = current;
1:3813947:             }
1:3813947:         }
1:3813947: 
1:3813947:         // now lets remove them by selector
1:3813947:         queue.removeMatchingMessages("");
1:3813947: 
1:3813947:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
3:3813947:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:3813947:     }
1:3813947: 
1:9edeb21:     public void testBrowseBytesMessages() throws Exception {
1:9edeb21:         connection = connectionFactory.createConnection();
1:9edeb21:         useConnectionWithByteMessage(connection);
1:9edeb21: 
1:cb7b657:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:9edeb21: 
1:cb7b657:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:9edeb21: 
1:9edeb21:         CompositeData[] compdatalist = queue.browse();
1:9edeb21:         int initialQueueSize = compdatalist.length;
1:9edeb21:         if (initialQueueSize == 0) {
1:9edeb21:             fail("There is no message in the queue:");
1:9edeb21:         }
1:9edeb21:         else {
1:9edeb21:             echo("Current queue size: " + initialQueueSize);
1:c43282e:         }
1:9edeb21:         int messageCount = initialQueueSize;
1:9edeb21:         String[] messageIDs = new String[messageCount];
1:9edeb21:         for (int i = 0; i < messageCount; i++) {
1:9edeb21:             CompositeData cdata = compdatalist[i];
1:9edeb21:             String messageID = (String) cdata.get("JMSMessageID");
1:9edeb21:             assertNotNull("Should have a message ID for message " + i, messageID);
1:9edeb21:             messageIDs[i] = messageID;
1:c43282e: 
1:9edeb21:             Byte[] preview = (Byte[]) cdata.get(CompositeDataConstants.BODY_PREVIEW);
1:9edeb21:             assertNotNull("should be a preview", preview);
1:9edeb21:             assertTrue("not empty", preview.length > 0);
1:9edeb21:         }
1:9edeb21: 
1:9edeb21:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:9edeb21: 
1:9edeb21:         // consume all the messages
1:9edeb21:         echo("Attempting to consume all bytes messages from: " + destination);
1:9edeb21:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9edeb21:         MessageConsumer consumer = session.createConsumer(destination);
1:9edeb21:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:9edeb21:             Message message = consumer.receive(5000);
1:9edeb21:             assertNotNull(message);
1:9edeb21:             assertTrue(message instanceof BytesMessage);
1:9edeb21:         }
1:9edeb21:         consumer.close();
1:9edeb21:         session.close();
1:9edeb21:     }
1:c43282e: 
1:74f530a:     public void testBrowseOrder() throws Exception {
1:c43282e:         connection = connectionFactory.createConnection();
1:74f530a:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:74f530a:         prefetchPolicy.setAll(20);
1:74f530a:         ((ActiveMQConnection) connection).setPrefetchPolicy(prefetchPolicy);
1:74f530a:         useConnection(connection);
1:74f530a: 
1:74f530a:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:74f530a: 
1:74f530a:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:74f530a: 
1:74f530a:         CompositeData[] compdatalist = queue.browse();
1:74f530a:         int initialQueueSize = compdatalist.length;
1:74f530a:         assertEquals("expected", MESSAGE_COUNT, initialQueueSize);
1:74f530a: 
1:74f530a:         int messageCount = initialQueueSize;
1:74f530a:         for (int i = 0; i < messageCount; i++) {
1:74f530a:             CompositeData cdata = compdatalist[i];
1:74f530a:             String messageID = (String) cdata.get("JMSMessageID");
1:74f530a:             assertNotNull("Should have a message ID for message " + i, messageID);
1:c43282e: 
1:564d550:             @SuppressWarnings("unchecked")
1:564d550:             Map<Object, Object> intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:74f530a:             assertTrue("not empty", intProperties.size() > 0);
1:74f530a:             assertEquals("counter in order", i, intProperties.get("counter"));
1:74f530a:         }
1:74f530a: 
1:74f530a:         echo("Attempting to consume 5 bytes messages from: " + destination);
1:74f530a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74f530a:         MessageConsumer consumer = session.createConsumer(destination);
1:85b9c81:         for (int i=0; i<5; i++) {
1:74f530a:             Message message = consumer.receive(5000);
1:74f530a:             assertNotNull(message);
1:74f530a:             assertEquals("ordered", i, message.getIntProperty("counter"));
1:74f530a:             echo("Consumed: " + message.getIntProperty("counter"));
1:74f530a:         }
1:74f530a:         consumer.close();
1:74f530a:         session.close();
1:74f530a:         connection.close();
1:74f530a: 
1:74f530a:         // browse again and verify order
1:74f530a:         compdatalist = queue.browse();
1:74f530a:         initialQueueSize = compdatalist.length;
1:74f530a:         assertEquals("5 gone", MESSAGE_COUNT - 5, initialQueueSize);
1:74f530a: 
1:74f530a:         messageCount = initialQueueSize;
1:74f530a:         for (int i = 0; i < messageCount - 4; i++) {
1:74f530a:             CompositeData cdata = compdatalist[i];
1:74f530a: 
1:564d550:             @SuppressWarnings("unchecked")
1:564d550:             Map<Object, Object> intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:74f530a:             assertTrue("not empty", intProperties.size() > 0);
1:74f530a:             assertEquals("counter in order", i + 5, intProperties.get("counter"));
1:74f530a:             echo("Got: " + intProperties.get("counter"));
1:74f530a:         }
1:74f530a:     }
1:74f530a: 
1:7c2735d:     public void testAddRemoveConnectorBrokerView() throws Exception {
1:7c2735d: 
1:7c2735d:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:7c2735d:         BrokerViewMBean brokerView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:7c2735d: 
1:564d550:         Map<String, String> connectors = brokerView.getTransportConnectors();
1:7c2735d:         LOG.info("Connectors: " + connectors);
1:7c2735d:         assertEquals("one connector", 1, connectors.size());
1:7c2735d: 
1:7c2735d:         ConnectorViewMBean connector = getProxyToConnectionView("tcp");
1:7c2735d:         assertNotNull(connector);
1:7c2735d: 
1:7c2735d:         String name = connectors.keySet().iterator().next().toString();
1:7c2735d: 
1:7c2735d:         brokerView.removeConnector(name);
1:7c2735d: 
1:7c2735d:         connectors = brokerView.getTransportConnectors();
1:7c2735d:         assertEquals("empty", 0, connectors.size());
1:7c2735d: 
1:7c2735d:         name = brokerView.addConnector("tcp://0.0.0.0:0");
1:7c2735d: 
1:7c2735d:         connector = getProxyToConnectionView("tcp");
1:7c2735d:         assertNotNull(connector);
1:7c2735d: 
1:7c2735d:         connectors = brokerView.getTransportConnectors();
1:7c2735d:         LOG.info("Connectors: " + connectors);
1:7c2735d:         assertEquals("one connector", 1, connectors.size());
1:7c2735d:         assertTrue("name is in map: " + connectors.keySet(), connectors.keySet().contains(name));
1:7c2735d:     }
1:7c2735d: 
1:d223ea9:     public void testConnectorView() throws Exception {
1:d223ea9:         ConnectorViewMBean connector = getProxyToConnectionView("tcp");
1:d223ea9:         assertNotNull(connector);
1:d223ea9: 
1:d223ea9:         assertFalse(connector.isRebalanceClusterClients());
1:ae441cb:         assertTrue(connector.isUpdateClusterClientsOnRemove());
1:d223ea9:         assertFalse(connector.isUpdateClusterClients());
1:d223ea9:         assertFalse(connector.isAllowLinkStealingEnabled());
1:d223ea9:     }
1:d223ea9: 
1:d223ea9:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:d223ea9:         ObjectName connectorQuery = new ObjectName(
1:d223ea9:             "org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName="+connectionType+"_//*");
1:d223ea9: 
1:d223ea9:         Set<ObjectName> results = broker.getManagementContext().queryNames(connectorQuery, null);
1:d223ea9: 
1:d223ea9:         if (results == null || results.isEmpty() || results.size() > 1) {
1:d223ea9:             throw new Exception("Unable to find the exact Connector instance.");
1:d223ea9:         }
1:d223ea9: 
1:d223ea9:         ConnectorViewMBean proxy = (ConnectorViewMBean) broker.getManagementContext()
1:d223ea9:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:d223ea9:         return proxy;
1:d223ea9:     }
1:d223ea9: 
1:5bc37af:     public void testDynamicProducers() throws Exception {
1:5bc37af:         connection = connectionFactory.createConnection();
1:5bc37af:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5bc37af:         MessageProducer producer = session.createProducer(null);
1:5bc37af: 
1:5bc37af:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,endpoint=dynamicProducer,*");
1:5bc37af:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:5bc37af:         assertEquals(mbeans.size(), 1);
1:fde22a8:         producer.close();
1:5bc37af:     }
1:5bc37af: 
1:5bc37af:     public void testDurableSubQuery() throws Exception  {
1:5bc37af:         connection = connectionFactory.createConnection();
1:5bc37af:         connection.setClientID("test");
1:5bc37af:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5bc37af:         TopicSubscriber sub = session.createDurableSubscriber(session.createTopic("test.topic"), "test.consumer");
1:ee54f09: 
1:5bc37af:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic,endpoint=Consumer,consumerId=Durable(*),*");
1:5bc37af:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:5bc37af:         assertEquals(mbeans.size(), 1);
1:fde22a8:         sub.close();
1:5bc37af:     }
1:ee54f09: 
1:85b9c81:     public void testQueuePauseResume() throws Exception {
1:85b9c81:         connection = connectionFactory.createConnection();
1:85b9c81:         final int numToSend = 20;
1:ad39fc0:         final int numToConsume = 5;
1:85b9c81:         useConnection(connection, numToSend);
1:85b9c81:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:85b9c81: 
1:ad39fc0:         final QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:85b9c81: 
1:85b9c81:         CompositeData[] compdatalist = queue.browse();
1:85b9c81:         int initialQueueSize = compdatalist.length;
1:85b9c81:         assertEquals("expected", numToSend, initialQueueSize);
1:85b9c81: 
1:85b9c81: 
1:85b9c81:         echo("Attempting to consume 5 bytes messages from: " + destination);
1:85b9c81:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85b9c81:         MessageConsumer consumer = session.createConsumer(destination);
1:ad39fc0:         for (int i=0; i<numToConsume; i++) {
1:85b9c81:             assertNotNull("Message: " + i, consumer.receive(5000));
1:85b9c81:         }
1:85b9c81:         consumer.close();
1:85b9c81:         session.close();
1:85b9c81: 
1:ad39fc0:         Wait.waitFor(new Wait.Condition() {
1:ad39fc0:             @Override
1:ad39fc0:             public boolean isSatisified() throws Exception {
1:ad39fc0:                 return  numToSend - numToConsume == queue.browse().length;
1:ad39fc0:             }
1:ad39fc0:         });
1:85b9c81:         compdatalist = queue.browse();
1:ad39fc0:         assertEquals("expected", numToSend - numToConsume, compdatalist.length);
1:85b9c81: 
1:85b9c81:         echo("pause");
1:85b9c81:         queue.pause();
1:85b9c81: 
1:85b9c81:         assertTrue("queue is paused", queue.isPaused());
1:85b9c81: 
1:85b9c81:         // verify no consume  while paused
1:85b9c81:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85b9c81:         consumer = session.createConsumer(destination);
1:85b9c81:         assertNull("cannot get message while paused", consumer.receive(2000));
1:85b9c81:         consumer.close();
1:85b9c81:         session.close();
1:85b9c81:         connection.close();
1:85b9c81: 
1:85b9c81:         // verify send while paused
1:85b9c81:         connection = connectionFactory.createConnection();
1:85b9c81:         useConnection(connection, numToSend);
1:85b9c81: 
1:85b9c81:         // verify browse
1:85b9c81:         compdatalist = queue.browse();
1:ad39fc0:         assertEquals("expected browse", (2*numToSend)-numToConsume, compdatalist.length);
1:85b9c81:         assertEquals("expected message count", compdatalist.length, queue.getQueueSize());
1:85b9c81: 
1:85b9c81:         echo("resume");
1:85b9c81:         queue.resume();
1:85b9c81: 
1:85b9c81:         assertFalse("queue is not paused", queue.isPaused());
1:85b9c81: 
1:85b9c81:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85b9c81:         consumer = session.createConsumer(destination);
1:85b9c81:         for (int i = 0; i < compdatalist.length; i++) {
1:85b9c81:             assertNotNull("Message: " + i, consumer.receive(5000));
1:85b9c81:         }
1:85b9c81:     }
1:ee54f09: 
1:ee54f09:     public void testTopicView() throws Exception {
1:ee54f09:         connection = connectionFactory.createConnection();
1:ee54f09:         connection.setClientID("test");
1:ee54f09:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:ee54f09:         connection.start();
1:ee54f09: 
1:ee54f09:         Topic singleTopic = session.createTopic("test.topic");
1:ee54f09:         Topic wildcardTopic = session.createTopic("test.>");
1:ee54f09: 
1:ee54f09:         TopicSubscriber durable1 = session.createDurableSubscriber(singleTopic, "single");
1:ee54f09:         TopicSubscriber durable2 = session.createDurableSubscriber(wildcardTopic, "wildcard");
1:ee54f09: 
1:ee54f09:         MessageConsumer consumer1 = session.createConsumer(singleTopic);
1:ee54f09:         MessageConsumer consumer2 = session.createConsumer(wildcardTopic);
1:ee54f09: 
1:ee54f09:         final ArrayList<Message> messages = new ArrayList<>();
1:564d550: 
1:ee54f09:         MessageListener listener = new MessageListener() {
1:ee54f09:             @Override
1:ee54f09:             public void onMessage(Message message) {
1:ee54f09:                 messages.add(message);
1:ee54f09:             }
1:ee54f09:         };
1:ee54f09: 
1:ee54f09:         durable1.setMessageListener(listener);
1:ee54f09:         durable2.setMessageListener(listener);
1:ee54f09:         consumer1.setMessageListener(listener);
1:ee54f09:         consumer2.setMessageListener(listener);
1:ee54f09: 
1:ee54f09:         MessageProducer producer = session.createProducer(singleTopic);
1:ee54f09:         producer.send(session.createTextMessage("test"));
1:ee54f09: 
1:ee54f09:         Wait.waitFor(new Wait.Condition() {
1:ee54f09:             @Override
1:ee54f09:             public boolean isSatisified() throws Exception {
1:ee54f09:                 return messages.size() == 4;
1:ee54f09:             }
1:ee54f09:         });
1:ee54f09: 
1:ee54f09:         ObjectName topicObjName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic");
1:ee54f09:         final TopicViewMBean topicView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:564d550:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:ee54f09:         for (ObjectName name : topicView.getSubscriptions()) {
1:ee54f09:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:ee54f09:         }
1:ee54f09: 
1:ee54f09:         assertEquals(4, subscriberViews.size());
1:ee54f09: 
1:564d550:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:564d550:             assertEquals(1, subscriberView.getEnqueueCounter());
1:564d550:             assertEquals(1, subscriberView.getDispatchedCounter());
1:ee54f09:             assertEquals(0, subscriberView.getDequeueCounter());
1:564d550:         }
1:564d550: 
1:ee54f09:         for (Message message : messages) {
1:ee54f09:             try {
1:ee54f09:                 message.acknowledge();
1:ee54f09:             } catch (JMSException ignore) {}
1:564d550:         }
1:564d550: 
1:ee54f09:         Wait.waitFor(new Wait.Condition() {
1:ee54f09:             @Override
1:ee54f09:             public boolean isSatisified() throws Exception {
1:ee54f09:                 return topicView.getDequeueCount() == 4;
1:ee54f09:             }
1:ee54f09:         });
1:564d550: 
1:ee54f09:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:ee54f09:             assertEquals(1, subscriberView.getEnqueueCounter());
1:ee54f09:             assertEquals(1, subscriberView.getDispatchedCounter());
1:564d550:             assertEquals(1, subscriberView.getDequeueCounter());
1:564d550:         }
1:c2ad0c3: 
1:564d550:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:564d550:             subscriberView.resetStatistics();
1:564d550:         }
1:564d550: 
1:564d550:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:564d550:             assertEquals(0, subscriberView.getEnqueueCounter());
1:564d550:             assertEquals(0, subscriberView.getDispatchedCounter());
1:564d550:             assertEquals(0, subscriberView.getDequeueCounter());
1:564d550:         }
1:564d550:     }
1:564d550: 
1:564d550:     public void testSubscriptionView() throws Exception {
1:564d550:         connection = connectionFactory.createConnection();
1:564d550:         connection.setClientID("test");
1:564d550:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:564d550:         connection.start();
1:564d550: 
1:564d550:         Topic singleTopic = session.createTopic("test.topic");
1:564d550:         Topic wildcardTopic = session.createTopic("test.>");
1:564d550: 
1:564d550:         TopicSubscriber durable1 = session.createDurableSubscriber(singleTopic, "single");
1:564d550:         TopicSubscriber durable2 = session.createDurableSubscriber(wildcardTopic, "wildcard");
1:564d550: 
1:564d550:         MessageConsumer consumer1 = session.createConsumer(singleTopic);
1:564d550:         MessageConsumer consumer2 = session.createConsumer(wildcardTopic);
1:564d550: 
1:564d550:         final ArrayList<Message> messages = new ArrayList<>();
1:564d550: 
1:564d550:         MessageListener listener = new MessageListener() {
1:564d550:             @Override
1:564d550:             public void onMessage(Message message) {
1:564d550:                 messages.add(message);
1:564d550:             }
1:564d550:         };
1:564d550: 
1:564d550:         durable1.setMessageListener(listener);
1:564d550:         durable2.setMessageListener(listener);
1:564d550:         consumer1.setMessageListener(listener);
1:564d550:         consumer2.setMessageListener(listener);
1:564d550: 
1:564d550:         MessageProducer producer = session.createProducer(singleTopic);
1:564d550:         producer.send(session.createTextMessage("test"));
1:564d550: 
1:564d550:         Wait.waitFor(new Wait.Condition() {
1:564d550:             @Override
1:564d550:             public boolean isSatisified() throws Exception {
1:564d550:                 return messages.size() == 4;
1:564d550:             }
1:564d550:         });
1:564d550: 
1:564d550:         ObjectName topicObjName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic");
1:564d550:         final TopicViewMBean topicView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:564d550:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:564d550:         for (ObjectName name : topicView.getSubscriptions()) {
1:564d550:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:564d550:         }
1:564d550: 
1:564d550:         assertEquals(4, subscriberViews.size());
1:ee54f09: 
1:564d550:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:564d550:             assertEquals(1, subscriberView.getEnqueueCounter());
1:564d550:             assertEquals(1, subscriberView.getDispatchedCounter());
1:564d550:             assertEquals(0, subscriberView.getDequeueCounter());
1:ee54f09:         }
1:ee54f09: 
1:564d550:         for (Message message : messages) {
1:564d550:             try {
1:564d550:                 message.acknowledge();
1:564d550:             } catch (JMSException ignore) {}
1:ee54f09:         }
1:ee54f09: 
1:564d550:         // Wait so that each subscription gets updated
1:564d550:         Wait.waitFor(new Wait.Condition() {
1:564d550:             @Override
1:564d550:             public boolean isSatisified() throws Exception {
1:564d550:                 return topicView.getDequeueCount() == 4;
1:564d550:             }
1:564d550:         });
1:564d550: 
2:ee54f09:         assertEquals(1, topicView.getEnqueueCount());
2:ee54f09:         assertEquals(4, topicView.getDispatchCount());
1:ee54f09:         assertEquals(0, topicView.getInFlightCount());
1:ee54f09:         assertEquals(4, topicView.getDequeueCount());
1:ee54f09: 
1:ee54f09:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:ee54f09:             assertEquals(1, subscriberView.getEnqueueCounter());
1:ee54f09:             assertEquals(1, subscriberView.getDispatchedCounter());
1:ee54f09:             assertEquals(1, subscriberView.getDequeueCounter());
1:ee54f09:         }
1:ee54f09:     }
1:ee54f09: 
1:c2ad0c3:     public void testSubscriptionViewProperties() throws Exception {
1:c2ad0c3:         connection = createConnection();
1:c2ad0c3:         connection.start();
1:c2ad0c3: 
1:c2ad0c3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c2ad0c3: 
1:c2ad0c3:         Topic topic1 = session.createTopic("test.topic1?consumer.dispatchAsync=false&consumer.retroactive=true");
1:c2ad0c3:         Topic topic2 = session.createTopic("test.topic2?consumer.dispatchAsync=true&consumer.retroactive=false&consumer.exclusive=true");
1:c2ad0c3:         MessageConsumer consumer1 = session.createConsumer(topic1);
1:c2ad0c3:         MessageConsumer consumer2 = session.createConsumer(topic2);
1:c2ad0c3: 
1:c2ad0c3:         assertNotNull(consumer1);
1:c2ad0c3:         assertNotNull(consumer2);
1:c2ad0c3: 
1:c2ad0c3:         ObjectName topicObjName = assertRegisteredObjectName(
1:c2ad0c3:             domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + topic1.getTopicName());
1:c2ad0c3:         final TopicViewMBean topic1View = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:c2ad0c3:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:c2ad0c3:         for (ObjectName name : topic1View.getSubscriptions()) {
1:c2ad0c3:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:c2ad0c3:         }
1:c2ad0c3: 
1:c2ad0c3:         assertEquals(1, subscriberViews.size());
1:c2ad0c3: 
1:c2ad0c3:         SubscriptionViewMBean subscription = subscriberViews.get(0);
1:c2ad0c3: 
1:c2ad0c3:         assertFalse(subscription.isDispatchAsync());
1:c2ad0c3:         assertTrue(subscription.isRetroactive());
1:c2ad0c3:         assertFalse(subscription.isExclusive());
1:c2ad0c3: 
1:c2ad0c3:         topicObjName = assertRegisteredObjectName(
1:c2ad0c3:             domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + topic2.getTopicName());
1:c2ad0c3:         final TopicViewMBean topic2View = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:c2ad0c3:         subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:c2ad0c3:         for (ObjectName name : topic2View.getSubscriptions()) {
1:c2ad0c3:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:c2ad0c3:         }
1:c2ad0c3: 
1:c2ad0c3:         assertEquals(1, subscriberViews.size());
1:c2ad0c3: 
1:c2ad0c3:         subscription = subscriberViews.get(0);
1:c2ad0c3: 
1:c2ad0c3:         assertTrue(subscription.isDispatchAsync());
1:c2ad0c3:         assertFalse(subscription.isRetroactive());
1:c2ad0c3:         assertTrue(subscription.isExclusive());
1:c2ad0c3:     }
1:c2ad0c3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         assertEquals("Unexpected number of messages ",movedSize,queueNew.getQueueSize());
1:         queueNew.removeMatchingMessages("counter > 2");
1:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queueNew.getQueueSize());
1:         assertEquals("dest has no memory usage", 0, queueNew.getMemoryPercentUsage());
1:         assertEquals("dest has 0 memory usage", 0, queueNew.getMemoryUsageByteCount());
1: 
1:         queue.purge();
1:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queueTwo = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         LOG.info("Queue: " + queueViewMBeanName + " now has: " + queueTwo.getQueueSize() + " message(s)");
1:         assertEquals("Expected messages in a queue: " + queueViewMBeanName, MESSAGE_COUNT-3, queueTwo.getQueueSize());
1:         queueTwo.removeMatchingMessages("counter > 2");
1:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queueTwo.getQueueSize());
1:         assertEquals("dest has no memory usage", 0, queueTwo.getMemoryPercentUsage());
1:         assertEquals("dest has 0 memory usage", 0, queueTwo.getMemoryUsageByteCount());
1: 
1:         queue.purge();
1:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:     public void testSelectorBrowseUsage() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         final String someSelectorExp = "JMSType = '22'";
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         queue.browse(someSelectorExp);
1:         queue.purge();
1:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1: 
1:         connection.close();
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1:         queue.browseMessages(someSelectorExp);
1:         queue.purge();
1:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1: 
1:         connection.close();
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1:         queue.browseAsTable(someSelectorExp);
1:         queue.purge();
1:         assertEquals("dest has 0 memory usage", 0, queue.getMemoryUsageByteCount());
1:     }
commit:03b19b9
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertTrue("messages on dlq", Wait.waitFor(new Wait.Condition() {
1:                 LOG.info("Dlq size: " + dlq.getQueueSize() + ", qSize: " + queue.getQueueSize());
1:         assertTrue("messages on dlq after retry", Wait.waitFor(new Wait.Condition() {
1:                 LOG.info("Dlq size: " + dlq.getQueueSize() + ", qSize: " + queue.getQueueSize());
commit:2ea5d14
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.RedeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
1:     public void testMoveFromDLQImmediateDLQ() throws Exception {
1: 
1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:         redeliveryPolicy.setMaximumRedeliveries(0);
1:         ((ActiveMQConnectionFactory)connectionFactory).setRedeliveryPolicy(redeliveryPolicy);
1:         Connection connection = connectionFactory.createConnection();
1: 
1:         // populate
1:         useConnection(connection);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = session.createQueue(getDestinationString());
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         consumer.setMessageListener(new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     System.out.println("Received: " + message + " on " + message.getJMSDestination());
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:                 throw new RuntimeException("Horrible exception");
1:             }});
1: 
1: 
1:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
1:         QueueViewMBean dlq = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         assertTrue("messagees on dlq", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return MESSAGE_COUNT == dlq.getQueueSize();
1:             }
1:         }));
1: 
1:         dlq.retryMessages();
1: 
0:         assertTrue("messagees on dlq after retry", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 LOG.info("Dlq size: " + dlq.getQueueSize());
1:                 return MESSAGE_COUNT == dlq.getQueueSize();
1:             }
1:         }));
1:     }
1: 
commit:99f3d4c
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testCopyPurgeCopyBack() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         final int numMessages = 100;
1:         useConnection(connection, numMessages);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         QueueViewMBean queueT = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String newDestination = getSecondDestinationString();
1:         long queueSize = queueT.getQueueSize();
1:         assertTrue(queueSize > 0);
1: 
1:         int c = queueT.copyMatchingMessagesTo(null, newDestination);
1:         LOG.info("Copied: " + c);
1: 
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
1: 
1:         QueueViewMBean queueD = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         LOG.info("Queue: " + queueD.getName() + " now has: " + queueD.getQueueSize() + " message(s)");
1:         assertEquals("Expected messages in a queue: " + queueD.getQueueSize(), numMessages, queueD.getQueueSize());
1: 
1:         LOG.info("Queue: " + queueT.getName() + " now has: " + queueT.getQueueSize() + " message(s)");
1:         assertEquals("Expected messages in a queue: " + queueT.getQueueSize(), numMessages, queueT.getQueueSize());
1: 
1:         queueT.purge();
1:         queueD.copyMatchingMessagesTo(null, getDestinationString());
1: 
1:         LOG.info("Queue: " + queueD.getName() + " now has: " + queueD.getQueueSize() + " message(s)");
1:         assertEquals("Expected messages in a queue: " + queueD.getQueueSize(), numMessages, queueD.getQueueSize());
1: 
1:         LOG.info("Queue: " + queueT.getName() + " now has: " + queueT.getQueueSize() + " message(s)");
1:         assertEquals("Expected messages in a queue: " + queueT.getQueueSize(), numMessages, queueT.getQueueSize());
1: 
1:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
1:     }
1: 
commit:8023b9e
/////////////////////////////////////////////////////////////////////////
1:     public void testMoveCopyToSameDestFails() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         CompositeData cdata = compdatalist[0];
1:         String messageID = (String) cdata.get("JMSMessageID");
1: 
1:         assertFalse("fail to copy to self", queue.copyMessageTo(messageID, getDestinationString()));
1:         assertEquals("fail to copy to self", 0, queue.copyMatchingMessagesTo("", getDestinationString()));
1:         assertEquals("fail to copy x to self", 0, queue.copyMatchingMessagesTo("", getDestinationString(), initialQueueSize));
1: 
1:         assertFalse("fail to move to self", queue.moveMessageTo(messageID, getDestinationString()));
1:         assertEquals("fail to move to self", 0, queue.moveMatchingMessagesTo("", getDestinationString()));
1:         assertEquals("fail to move x to self", 0, queue.moveMatchingMessagesTo("", getDestinationString(), initialQueueSize));
1: 
1:         compdatalist = queue.browse();
1:         int actualCount = compdatalist.length;
1:         echo("Current queue size: " + actualCount);
1:         assertEquals("no change", initialQueueSize, actualCount);
1:     }
1: 
commit:ae441cb
/////////////////////////////////////////////////////////////////////////
1: 
1:         broker.getTransportConnectorByScheme("tcp").setUpdateClusterClientsOnRemove(true);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(connector.isUpdateClusterClientsOnRemove());
commit:82200b6
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     //Show broken behaviour https://issues.apache.org/jira/browse/AMQ-5752"
0:     // points to the need to except on a duplicate or have store.addMessage return bool
1:     // need some thought on how best to resolve this
1:     public void Broken_testMoveDuplicateDoesNotDelete() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         CompositeData cdata = compdatalist[0];
1:         String messageID = (String) cdata.get("JMSMessageID");
1: 
1:         String newDestination = getSecondDestinationString();
1:         queue.copyMessageTo(messageID, newDestination);
1: 
1:         compdatalist = queue.browse();
1:         int actualCount = compdatalist.length;
1:         echo("Current queue size: " + actualCount);
1:         assertEquals("no change", initialQueueSize, actualCount);
1: 
1:         echo("Now browsing the second queue");
1: 
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
1:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long newQueuesize = queueNew.getQueueSize();
1:         assertEquals("Expect one", 1, newQueuesize);
1: 
1:         // try move of same message - should fail on duplicate send
1:         boolean moveResult = queue.moveMessageTo(messageID, newDestination);
1:         assertFalse("move of duplicate should fail", moveResult);
1: 
1:         newQueuesize = queueNew.getQueueSize();
1:         assertEquals("Expect one", 1, newQueuesize);
1: 
1:         compdatalist = queue.browse();
1:         actualCount = compdatalist.length;
1:         echo("Current queue size: " + actualCount);
1:         assertEquals("no change", initialQueueSize, actualCount);
1:     }
1: 
commit:ad39fc0
/////////////////////////////////////////////////////////////////////////
1:         final int numToConsume = 5;
1:         final QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         for (int i=0; i<numToConsume; i++) {
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return  numToSend - numToConsume == queue.browse().length;
1:             }
1:         });
1:         assertEquals("expected", numToSend - numToConsume, compdatalist.length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("expected browse", (2*numToSend)-numToConsume, compdatalist.length);
commit:85b9c81
/////////////////////////////////////////////////////////////////////////
1:     protected void useConnection(Connection connection, int numToSend) throws Exception {
1:         for (int i = 0; i < numToSend; i++) {
/////////////////////////////////////////////////////////////////////////
1:     protected void useConnection(Connection connection) throws Exception {
1:         useConnection(connection, MESSAGE_COUNT);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testQueuePauseResume() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         final int numToSend = 20;
1:         useConnection(connection, numToSend);
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         assertEquals("expected", numToSend, initialQueueSize);
1: 
1: 
1:         echo("Attempting to consume 5 bytes messages from: " + destination);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         for (int i=0; i<5; i++) {
1:             assertNotNull("Message: " + i, consumer.receive(5000));
1:         }
1:         consumer.close();
1:         session.close();
1: 
1:         compdatalist = queue.browse();
0:         assertEquals("expected", numToSend -5, compdatalist.length);
1: 
1:         echo("pause");
1:         queue.pause();
1: 
1:         assertTrue("queue is paused", queue.isPaused());
1: 
1:         // verify no consume  while paused
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = session.createConsumer(destination);
1:         assertNull("cannot get message while paused", consumer.receive(2000));
1:         consumer.close();
1:         session.close();
1:         connection.close();
1: 
1:         // verify send while paused
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection, numToSend);
1: 
1:         // verify browse
1:         compdatalist = queue.browse();
0:         assertEquals("expected browse", (2*numToSend)-5, compdatalist.length);
1:         assertEquals("expected message count", compdatalist.length, queue.getQueueSize());
1: 
1:         echo("resume");
1:         queue.resume();
1: 
1:         assertFalse("queue is not paused", queue.isPaused());
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = session.createConsumer(destination);
1:         for (int i = 0; i < compdatalist.length; i++) {
1:             assertNotNull("Message: " + i, consumer.receive(5000));
1:         }
1:     }
commit:2a62b74
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, Exception {
1:         final ObjectName objectName = new ObjectName(name);
1:         final AtomicBoolean result = new AtomicBoolean(false);
1:         assertTrue("Bean registered: " + objectName, Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     result.set(mbeanServer.isRegistered(objectName));
1:                 } catch (Exception ignored) {
1:                     LOG.debug(ignored.toString());
1:                 }
1:                 return result.get();
1:             }
1:         }));
commit:74f530a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
1:     public void testBrowseOrder() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setAll(20);
1:         ((ActiveMQConnection) connection).setPrefetchPolicy(prefetchPolicy);
1:         useConnection(connection);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         assertEquals("expected", MESSAGE_COUNT, initialQueueSize);
1: 
1:         int messageCount = initialQueueSize;
1:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
1:             String messageID = (String) cdata.get("JMSMessageID");
1:             assertNotNull("Should have a message ID for message " + i, messageID);
1: 
1:             Map intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:             assertTrue("not empty", intProperties.size() > 0);
1:             assertEquals("counter in order", i, intProperties.get("counter"));
1:         }
1: 
1:         echo("Attempting to consume 5 bytes messages from: " + destination);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
0:         for (int i=0; i<5; i++) {
1:             Message message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertEquals("ordered", i, message.getIntProperty("counter"));
1:             echo("Consumed: " + message.getIntProperty("counter"));
1:         }
1:         consumer.close();
1:         session.close();
1:         connection.close();
1: 
1:         // browse again and verify order
1:         compdatalist = queue.browse();
1:         initialQueueSize = compdatalist.length;
1:         assertEquals("5 gone", MESSAGE_COUNT - 5, initialQueueSize);
1: 
1:         messageCount = initialQueueSize;
1:         for (int i = 0; i < messageCount - 4; i++) {
1:             CompositeData cdata = compdatalist[i];
1: 
1:             Map intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:             assertTrue("not empty", intProperties.size() > 0);
1:             assertEquals("counter in order", i + 5, intProperties.get("counter"));
1:             echo("Got: " + intProperties.get("counter"));
1:         }
1:     }
1: 
commit:7c2735d
/////////////////////////////////////////////////////////////////////////
1:     public void testAddRemoveConnectorBrokerView() throws Exception {
1: 
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         BrokerViewMBean brokerView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
0:         Map connectors = brokerView.getTransportConnectors();
1:         LOG.info("Connectors: " + connectors);
1:         assertEquals("one connector", 1, connectors.size());
1: 
1:         ConnectorViewMBean connector = getProxyToConnectionView("tcp");
1:         assertNotNull(connector);
1: 
1:         String name = connectors.keySet().iterator().next().toString();
1: 
1:         brokerView.removeConnector(name);
1: 
1:         connectors = brokerView.getTransportConnectors();
1:         assertEquals("empty", 0, connectors.size());
1: 
1:         name = brokerView.addConnector("tcp://0.0.0.0:0");
1: 
1:         connector = getProxyToConnectionView("tcp");
1:         assertNotNull(connector);
1: 
1:         connectors = brokerView.getTransportConnectors();
1:         LOG.info("Connectors: " + connectors);
1:         assertEquals("one connector", 1, connectors.size());
1:         assertTrue("name is in map: " + connectors.keySet(), connectors.keySet().contains(name));
1:     }
1: 
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("no forwards", 0, queueNew.getForwardCount());
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c2ad0c3
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSubscriptionViewProperties() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic1 = session.createTopic("test.topic1?consumer.dispatchAsync=false&consumer.retroactive=true");
1:         Topic topic2 = session.createTopic("test.topic2?consumer.dispatchAsync=true&consumer.retroactive=false&consumer.exclusive=true");
1:         MessageConsumer consumer1 = session.createConsumer(topic1);
1:         MessageConsumer consumer2 = session.createConsumer(topic2);
1: 
1:         assertNotNull(consumer1);
1:         assertNotNull(consumer2);
1: 
1:         ObjectName topicObjName = assertRegisteredObjectName(
1:             domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + topic1.getTopicName());
1:         final TopicViewMBean topic1View = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:         for (ObjectName name : topic1View.getSubscriptions()) {
1:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:         }
1: 
1:         assertEquals(1, subscriberViews.size());
1: 
1:         SubscriptionViewMBean subscription = subscriberViews.get(0);
1: 
1:         assertFalse(subscription.isDispatchAsync());
1:         assertTrue(subscription.isRetroactive());
1:         assertFalse(subscription.isExclusive());
1: 
1:         topicObjName = assertRegisteredObjectName(
1:             domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + topic2.getTopicName());
1:         final TopicViewMBean topic2View = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:         subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:         for (ObjectName name : topic2View.getSubscriptions()) {
1:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:         }
1: 
1:         assertEquals(1, subscriberViews.size());
1: 
1:         subscription = subscriberViews.get(0);
1: 
1:         assertTrue(subscription.isDispatchAsync());
1:         assertFalse(subscription.isRetroactive());
1:         assertTrue(subscription.isExclusive());
1:     }
1: }
commit:564d550
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     // points to the need to except on a duplicate or have store.addMessage return boolean
/////////////////////////////////////////////////////////////////////////
1:             @SuppressWarnings("unchecked")
1:             Map<Object, Object> intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
/////////////////////////////////////////////////////////////////////////
1:             @SuppressWarnings("unchecked")
1:             Map<Object, Object> intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> connectors = brokerView.getTransportConnectors();
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
/////////////////////////////////////////////////////////////////////////
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             assertEquals(1, subscriberView.getEnqueueCounter());
1:             assertEquals(1, subscriberView.getDispatchedCounter());
1:             assertEquals(1, subscriberView.getDequeueCounter());
1:         }
1: 
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             subscriberView.resetStatistics();
1:         }
1: 
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             assertEquals(0, subscriberView.getEnqueueCounter());
1:             assertEquals(0, subscriberView.getDispatchedCounter());
1:             assertEquals(0, subscriberView.getDequeueCounter());
1:         }
1:     }
1: 
1:     public void testSubscriptionView() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID("test");
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         Topic singleTopic = session.createTopic("test.topic");
1:         Topic wildcardTopic = session.createTopic("test.>");
1: 
1:         TopicSubscriber durable1 = session.createDurableSubscriber(singleTopic, "single");
1:         TopicSubscriber durable2 = session.createDurableSubscriber(wildcardTopic, "wildcard");
1: 
1:         MessageConsumer consumer1 = session.createConsumer(singleTopic);
1:         MessageConsumer consumer2 = session.createConsumer(wildcardTopic);
1: 
1:         final ArrayList<Message> messages = new ArrayList<>();
1: 
1:         MessageListener listener = new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 messages.add(message);
1:             }
1:         };
1: 
1:         durable1.setMessageListener(listener);
1:         durable2.setMessageListener(listener);
1:         consumer1.setMessageListener(listener);
1:         consumer2.setMessageListener(listener);
1: 
1:         MessageProducer producer = session.createProducer(singleTopic);
1:         producer.send(session.createTextMessage("test"));
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return messages.size() == 4;
1:             }
1:         });
1: 
1:         ObjectName topicObjName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic");
1:         final TopicViewMBean topicView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList<SubscriptionViewMBean>();
1:         for (ObjectName name : topicView.getSubscriptions()) {
1:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:         }
1: 
1:         assertEquals(4, subscriberViews.size());
1: 
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             assertEquals(1, subscriberView.getEnqueueCounter());
1:             assertEquals(1, subscriberView.getDispatchedCounter());
1:             assertEquals(0, subscriberView.getDequeueCounter());
1:         }
1: 
1:         for (Message message : messages) {
1:             try {
1:                 message.acknowledge();
1:             } catch (JMSException ignore) {}
1:         }
1: 
1:         // Wait so that each subscription gets updated
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return topicView.getDequeueCount() == 4;
1:             }
1:         });
1: 
/////////////////////////////////////////////////////////////////////////
commit:d223ea9
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectorView() throws Exception {
1:         ConnectorViewMBean connector = getProxyToConnectionView("tcp");
1:         assertNotNull(connector);
1: 
1:         assertFalse(connector.isRebalanceClusterClients());
0:         assertFalse(connector.isUpdateClusterClientsOnRemove());
1:         assertFalse(connector.isUpdateClusterClients());
1:         assertFalse(connector.isAllowLinkStealingEnabled());
1:     }
1: 
1:     protected ConnectorViewMBean getProxyToConnectionView(String connectionType) throws Exception {
1:         ObjectName connectorQuery = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName="+connectionType+"_//*");
1: 
1:         Set<ObjectName> results = broker.getManagementContext().queryNames(connectorQuery, null);
1: 
1:         if (results == null || results.isEmpty() || results.size() > 1) {
1:             throw new Exception("Unable to find the exact Connector instance.");
1:         }
1: 
1:         ConnectorViewMBean proxy = (ConnectorViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(results.iterator().next(), ConnectorViewMBean.class, true);
1:         return proxy;
1:     }
1: 
commit:fde22a8
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.Destination;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.Topic;
0: import javax.jms.TopicSubscriber;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queueNew = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean dlq = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ProducerViewMBean view = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, viewName, ProducerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ProducerViewMBean producerView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, producerName, ProducerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:             SubscriptionViewMBean subscriberView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:             SubscriptionViewMBean subscriberView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:                     MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, ConnectionViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectionCounts() throws Exception {
1: 
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
1:         assertEquals(0, broker.getCurrentConnectionsCount());
1: 
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1:         assertEquals(1, broker.getCurrentConnectionsCount());
1:         connection.close();
1:         assertEquals(0, broker.getCurrentConnectionsCount());
1:         assertEquals(1, broker.getTotalConnectionsCount());
1:     }
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         producer.close();
/////////////////////////////////////////////////////////////////////////
1:         sub.close();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ee54f09
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.list.MessageList;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testTopicView() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID("test");
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         Topic singleTopic = session.createTopic("test.topic");
1:         Topic wildcardTopic = session.createTopic("test.>");
1: 
1:         TopicSubscriber durable1 = session.createDurableSubscriber(singleTopic, "single");
1:         TopicSubscriber durable2 = session.createDurableSubscriber(wildcardTopic, "wildcard");
1: 
1:         MessageConsumer consumer1 = session.createConsumer(singleTopic);
1:         MessageConsumer consumer2 = session.createConsumer(wildcardTopic);
1: 
1:         final ArrayList<Message> messages = new ArrayList<>();
1: 
1:         MessageListener listener = new MessageListener() {
1:             @Override
1:             public void onMessage(Message message) {
1:                 messages.add(message);
1:             }
1:         };
1: 
1:         durable1.setMessageListener(listener);
1:         durable2.setMessageListener(listener);
1:         consumer1.setMessageListener(listener);
1:         consumer2.setMessageListener(listener);
1: 
1:         MessageProducer producer = session.createProducer(singleTopic);
1:         producer.send(session.createTextMessage("test"));
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return messages.size() == 4;
1:             }
1:         });
1: 
1:         ObjectName topicObjName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic");
1:         final TopicViewMBean topicView = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName, TopicViewMBean.class, true);
1: 
1:         assertEquals(1, topicView.getEnqueueCount());
1:         assertEquals(4, topicView.getDispatchCount());
0:         assertEquals(4, topicView.getInFlightCount());
0:         assertEquals(0, topicView.getDequeueCount());
1: 
0:         ArrayList<SubscriptionViewMBean> subscriberViews = new ArrayList();
1:         for (ObjectName name : topicView.getSubscriptions()) {
1:             subscriberViews.add(MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true));
1:         }
1: 
1:         assertEquals(4, subscriberViews.size());
1: 
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             assertEquals(1, subscriberView.getEnqueueCounter());
1:             assertEquals(1, subscriberView.getDispatchedCounter());
1:             assertEquals(0, subscriberView.getDequeueCounter());
1:         }
1: 
1:         for (Message message : messages) {
1:             try {
1:                 message.acknowledge();
1:             } catch (JMSException ignore) {}
1:         }
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return topicView.getDequeueCount() == 4;
1:             }
1:         });
1: 
1:         assertEquals(1, topicView.getEnqueueCount());
1:         assertEquals(4, topicView.getDispatchCount());
1:         assertEquals(0, topicView.getInFlightCount());
1:         assertEquals(4, topicView.getDequeueCount());
1: 
1:         for (SubscriptionViewMBean subscriberView : subscriberViews) {
1:             assertEquals(1, subscriberView.getEnqueueCounter());
1:             assertEquals(1, subscriberView.getDispatchedCounter());
1:             assertEquals(1, subscriberView.getDequeueCounter());
1:         }
1: 
1: 
1:     }
commit:a0c1781
/////////////////////////////////////////////////////////////////////////
1:     public void testRemoveQueue() throws Exception {
1:         String queueName = "TEST";
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         broker.addQueue(queueName);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1: 
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         queue.sendTextMessage("message 1");
1:         queue.sendTextMessage("message 2");
1: 
1:         assertEquals(2, broker.getTotalMessageCount());
1: 
1:         broker.removeQueue(queueName);
1: 
1:         assertEquals(0, broker.getTotalMessageCount());
1: 
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:dda5c93
/////////////////////////////////////////////////////////////////////////
1:         assertSendCsnvViaMBean();
/////////////////////////////////////////////////////////////////////////
1:         browseAndVerify(proxy);
1:     }
1: 
1:     private void browseAndVerify(QueueViewMBean proxy) throws Exception {
1:         browseAndVerifyTypes(proxy, false);
1:     }
1: 
1:     private void browseAndVerifyTypes(QueueViewMBean proxy, boolean allStrings) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             if (allStrings) {
1:                 Map stringProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.STRING_PROPERTIES);
1:                 assertEquals("stringProperties size()", 2, stringProperties.size());
1:                 assertEquals("stringProperties.MyHeader", "StringHeader" + i, stringProperties.get("MyStringHeader"));
1:                 assertEquals("stringProperties.MyHeader", "" + i, stringProperties.get("MyHeader"));
1:             } else {
0:                 Map intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
1:                 assertEquals("intProperties size()", 1, intProperties.size());
1:                 assertEquals("intProperties.MyHeader", i, intProperties.get("MyHeader"));
1: 
1:                 Map stringProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.STRING_PROPERTIES);
1:                 assertEquals("stringProperties size()", 1, stringProperties.size());
1:                 assertEquals("stringProperties.MyHeader", "StringHeader" + i, stringProperties.get("MyStringHeader"));
1:             }
1:             assertEquals("properties.MyHeader", allStrings ? "" + i : i, properties.get("MyHeader"));
/////////////////////////////////////////////////////////////////////////
1:     protected void assertSendCsnvViaMBean() throws Exception {
1:         String queueName = getDestinationString() + ".SendMBBean";
1: 
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         echo("Create QueueView MBean...");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         broker.addQueue(queueName);
1: 
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
1: 
1:         echo("Create QueueView MBean...");
0:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         proxy.purge();
1: 
1:         int count = 5;
1:         for (int i = 0; i < count; i++) {
1:             String props = "body=message:" + i;
1: 
1:             props += ",JMSCorrelationID=MyCorrId";
1:             props += ",JMSDeliveryMode=1";
1:             props += ",JMSXGroupID=MyGroupID";
1:             props += ",JMSXGroupSeq=1234";
1:             props += ",JMSPriority=" + (i + 1);
1:             props += ",JMSType=MyType";
1:             props += ",MyHeader=" + i;
1:             props += ",MyStringHeader=StringHeader" + i;
1: 
1:             proxy.sendTextMessageWithProperties(props);
1:         }
1: 
1:         browseAndVerifyTypes(proxy, true);
1:     }
1: 
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1:             BrokerMBeanSupport.createConnectionQuery(domain, "localhost", connection.getClientID());
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:         ManagementContext managementContext = broker.getManagementContext();
1:         mbeanServer = managementContext.getMBeanServer();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("client id match", "MBeanTest", connectionView.getClientId());
1: 
/////////////////////////////////////////////////////////////////////////
1:         ObjectName query = //new ObjectName(domain + ":type=Broker,brokerName=localhost,connector=*," + "connectorName=*,connectionName=MBeanTest");
0:             BrokerMBeanSuppurt.createConnectionQuery(domain, "localhost", connection.getClientID());
commit:7410257
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:     final static String QUEUE_WITH_OPTIONS = "QueueWithOptions";
/////////////////////////////////////////////////////////////////////////
1:         // allow options to be visible via jmx
1:         answer.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue(QUEUE_WITH_OPTIONS + "?topQueue=true&hasOptions=2")});
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testDestinationOptionsAreVisible() throws Exception {
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + QUEUE_WITH_OPTIONS + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         assertEquals("name match", QUEUE_WITH_OPTIONS, queue.getName());
1: 
1:         String options = queue.getOptions();
1:         LOG.info("Got options: " + options);
1: 
1:         Map<String, String> optionsMap = URISupport.parseQuery(options);
1:         assertEquals("got a map", 2, optionsMap.size());
1:         assertTrue("matches our options", optionsMap.containsKey("hasOptions"));
1:         assertTrue("matches our options", optionsMap.containsKey("topQueue"));
1: 
1:         assertTrue("matches our options", optionsMap.containsValue("true"));
1:         assertTrue("matches our options", optionsMap.containsValue("2"));
1:     }
1: 
commit:1b45e3b
/////////////////////////////////////////////////////////////////////////
commit:9edeb21
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.BytesMessage;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void useConnectionWithByteMessage(Connection connection) throws Exception {
1:         connection.setClientID(clientID);
1:         connection.start();
1:         ActiveMQSession session = (ActiveMQSession) connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(("Message: " + i).getBytes());
1:             message.setIntProperty("counter", i);
1:             message.setJMSCorrelationID("MyCorrelationID");
1:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:             message.setJMSType("MyType");
1:             message.setJMSPriority(5);
1:             producer.send(message);
1:         }
1:         Thread.sleep(1000);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testBrowseBytesMessages() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnectionWithByteMessage(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         if (initialQueueSize == 0) {
1:             fail("There is no message in the queue:");
1:         }
1:         else {
1:             echo("Current queue size: " + initialQueueSize);
1:         }
1:         int messageCount = initialQueueSize;
1:         String[] messageIDs = new String[messageCount];
1:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
1:             String messageID = (String) cdata.get("JMSMessageID");
1:             assertNotNull("Should have a message ID for message " + i, messageID);
1:             messageIDs[i] = messageID;
1: 
1:             Byte[] preview = (Byte[]) cdata.get(CompositeDataConstants.BODY_PREVIEW);
1:             assertNotNull("should be a preview", preview);
1:             assertTrue("not empty", preview.length > 0);
1:         }
1: 
1:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1: 
1:         // consume all the messages
1:         echo("Attempting to consume all bytes messages from: " + destination);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:             Message message = consumer.receive(5000);
1:             assertNotNull(message);
1:             assertTrue(message instanceof BytesMessage);
1:         }
1:         consumer.close();
1:         session.close();
1:     }
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("use cache", queueNew.isUseCache());
1:         assertTrue("cache enabled", queueNew.isCacheEnabled());
commit:eb034b4
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.BlobMessage;
0: import org.apache.activemq.command.ActiveMQBlobMessage;
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void useConnectionWithBlobMessage(Connection connection) throws Exception {
1:         connection.setClientID(clientID);
1:         connection.start();
1:         ActiveMQSession session = (ActiveMQSession) connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BlobMessage message = session.createBlobMessage(new URL("http://foo.bar/test"));
1:             message.setIntProperty("counter", i);
1:             message.setJMSCorrelationID("MyCorrelationID");
1:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:             message.setJMSType("MyType");
1:             message.setJMSPriority(5);
1:             producer.send(message);
1:         }
1:         Thread.sleep(1000);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1:     // Test for AMQ-3029
1:     public void testBrowseBlobMessages() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnectionWithBlobMessage(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         if (initialQueueSize == 0) {
1:             fail("There is no message in the queue:");
1:         }
1:         else {
1:             echo("Current queue size: " + initialQueueSize);
1:         }
1:         int messageCount = initialQueueSize;
1:         String[] messageIDs = new String[messageCount];
1:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
1:             String messageID = (String) cdata.get("JMSMessageID");
1:             assertNotNull("Should have a message ID for message " + i, messageID);
1:             
1:             messageIDs[i] = messageID;
1:         }
1: 
1:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:     }
commit:9b260dc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
/////////////////////////////////////////////////////////////////////////
0:         QueueViewMBean queueNew = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         long newQueuesize = queueNew.getQueueSize();
1:         
1:         // check memory usage migration
1:         assertTrue("new dest has some memory usage", queueNew.getMemoryPercentUsage() > 0);
1:         assertEquals("old dest has no memory usage", 0, queue.getMemoryPercentUsage());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
/////////////////////////////////////////////////////////////////////////
1:         int dlqMemUsage = dlq.getMemoryPercentUsage();
1:         assertTrue("dlq has some memory usage", dlqMemUsage > 0);
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:         
/////////////////////////////////////////////////////////////////////////
1:         
1:         assertEquals("dest has some memory usage", dlqMemUsage, queue.getMemoryPercentUsage());
0:         assertEquals("dlq still has memory usage", dlqMemUsage, dlq.getMemoryPercentUsage());
1:         
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
/////////////////////////////////////////////////////////////////////////
1:        
1:         // apply memory limit so that %usage is visible
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setMemoryLimit(1024*1024*4);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         answer.setDestinationPolicy(policyMap);
1:         
commit:e792395
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Map;
1: 
0: import javax.jms.MessageConsumer;
1: 
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("openwire URL port doesn't equal bind Address", new URI(broker.getOpenWireURL()).getPort(), new URI(this.bindAddress).getPort());
commit:a38e372
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("broker is not a slave", !broker.isSlave());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5bc37af
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import javax.management.*;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testDynamicProducers() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,endpoint=dynamicProducer,*");
1:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:         assertEquals(mbeans.size(), 1);
1:     }
1: 
1:     public void testDurableSubQuery() throws Exception  {
1:         connection = connectionFactory.createConnection();
1:         connection.setClientID("test");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TopicSubscriber sub = session.createDurableSubscriber(session.createTopic("test.topic"), "test.consumer");
1: 
1:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic,endpoint=Consumer,consumerId=Durable(*),*");
1:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:         assertEquals(mbeans.size(), 1);
1:     }
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
1: 
1:                      new URI(broker.getTransportConnectorByType("tcp")).getPort(),
commit:99653c6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     public void testRemoveMessages() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         broker.addQueue(getDestinationString());
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         String msg1 = queue.sendTextMessage("message 1");
1:         String msg2 = queue.sendTextMessage("message 2");
1: 
1:         assertTrue(queue.removeMessage(msg2));
1: 
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQDestination dest = createDestination();
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         Message message = consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals(msg1, message.getJMSMessageID());
1: 
1:         String msg3 = queue.sendTextMessage("message 3");
1:         message = consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals(msg3, message.getJMSMessageID());
1: 
1:         message = consumer.receive(1000);
1:         assertNull(message);
1: 
1:     }
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MBeanTest.class);
commit:e511e76
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.util.JMXSupport;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testTempQueueJMXDelete() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         
1:         connection.setClientID(clientID);
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         ActiveMQTempQueue tQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
1:         Thread.sleep(1000);
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type="+  JMXSupport.encodeObjectNamePart(tQueue.getDestinationTypeAsString())+",Destination=" + JMXSupport.encodeObjectNamePart(tQueue.getPhysicalName()) + ",BrokerName=localhost");
1:         
1:         // should not throw an exception
1:         mbeanServer.getObjectInstance(queueViewMBeanName);
1: 
1:         tQueue.delete();
1:         Thread.sleep(1000);
1:         try {
1:             // should throw an exception
1:             mbeanServer.getObjectInstance(queueViewMBeanName);
1: 
1:             fail("should be deleted already!");
1:         } catch (Exception e) {
1:             // expected!
1:         }
1: 
1:     }
1: 
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Durable subscriber count", 2, broker.getInactiveDurableTopicSubscribers().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Durable subscriber count", 1, broker.getInactiveDurableTopicSubscribers().length);
commit:fee7f6a
/////////////////////////////////////////////////////////////////////////
1:             String expected = "{MyStringHeader=StringHeader" + i + ", MyHeader=" + i + "}";
1:             // The order of the properties is different when using the ibm jdk.
1:             if (System.getProperty("java.vendor").equals("IBM Corporation")) {
1:                 expected = "{MyHeader=" + i + ", MyStringHeader=StringHeader" + i + "}";
1:             }
1:             assertComplexData(i, cdata, "PropertiesText", expected);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d75e418
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("broker is not a slave", !broker.isSlave());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("broker is not a slave", !broker.isSlave());
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("broker is not a slave", !broker.isSlave());
commit:ef24cc9
commit:3813947
/////////////////////////////////////////////////////////////////////////
1:     public void testMoveMessagesToRetainOrder() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String newDestination = getSecondDestinationString();
1:         queue.moveMatchingMessagesTo("", newDestination);
1: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         int movedSize = MESSAGE_COUNT;
1:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(newDestination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         int last = -1;
1:         int current = -1;
1:         Message message = null;
1:         while ((message = consumer.receive(2000)) != null) {
1:             if (message.propertyExists("counter")) {
1:                 current = message.getIntProperty("counter");
1:                 assertEquals(last, current - 1);
1:                 last = current;
1:             }
1:         }
1: 
1:         // now lets remove them by selector
1:         queue.removeMatchingMessages("");
1: 
1:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:     }
1: 
1:     public void testCopyMessagesToRetainOrder() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String newDestination = getSecondDestinationString();
1:         queue.copyMatchingMessagesTo("", newDestination);
1: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         int movedSize = MESSAGE_COUNT;
1:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(newDestination);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         int last = -1;
1:         int current = -1;
1:         Message message = null;
1:         while ((message = consumer.receive(2000)) != null) {
1:             if (message.propertyExists("counter")) {
1:                 current = message.getIntProperty("counter");
1:                 assertEquals(last, current - 1);
1:                 last = current;
1:             }
1:         }
1: 
1:         // now lets remove them by selector
1:         queue.removeMatchingMessages("");
1: 
1:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:     }
1: 
1:     public void testRemoveMatchingMessageRetainOrder() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String queueName = getDestinationString();
1:         queue.removeMatchingMessages("counter < 10");
1: 
1:         int newSize = MESSAGE_COUNT - 10;
1:         assertEquals("Unexpected number of messages ", newSize, queue.getQueueSize());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(queueName);
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         int last = 9;
1:         int current = 0;
1:         Message message = null;
1:         while ((message = consumer.receive(2000)) != null) {
1:             if (message.propertyExists("counter")) {
1:                 current = message.getIntProperty("counter");
1:                 assertEquals(last, current - 1);
1:                 last = current;
1:             }
1:         }
1: 
1:         // now lets remove them by selector
1:         queue.removeMatchingMessages("");
1: 
1:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
1:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:     }
1: 
commit:681c1ab
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateAndUnsubscribeDurableSubscriptions() throws Exception {
1: 
1:         connection = connectionFactory.createConnection("admin", "admin");
1:         connection.setClientID("MBeanTest");
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         String topicName = getDestinationString() + ".DurableTopic";
1:         Topic topic = session.createTopic(topicName);
1: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         echo("Create QueueView MBean...");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
1:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
1:         assertEquals("Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1: 
1:         MessageConsumer durableConsumer1 = session.createDurableSubscriber(topic, "subscription1");
1:         MessageConsumer durableConsumer2 = session.createDurableSubscriber(topic, "subscription2");
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals("Durable subscriber count", 2, broker.getDurableTopicSubscribers().length);
1:         assertEquals("Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1: 
1:         durableConsumer1.close();
1:         durableConsumer2.close();
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
1:         assertEquals("Durable subscriber count", 2, broker.getInactiveDurableTopicSubscribers().length);
1: 
1:         session.unsubscribe("subscription1");
1: 
1:         Thread.sleep(100);
1: 
1:         assertEquals("Inactive Durable subscriber count", 1, broker.getInactiveDurableTopicSubscribers().length);
1: 
1:         session.unsubscribe("subscription2");
1: 
1:         assertEquals("Inactive Durable subscriber count", 0, broker.getInactiveDurableTopicSubscribers().length);
1:     }
1: 
commit:0efaaec
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer = session.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Looking for Subscription: " + subscriptionName);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Looking for Connection: " + connectionName);
1: 
1:         // Our consumer plus one advisory consumer.
1:         assertEquals(2, connectionView.getConsumers().length);
1: 
1:         // Check that the subscription view we found earlier is in this list.
1:         boolean found = false;
1:         for (ObjectName name : connectionView.getConsumers()) {
1:             if (name.equals(subscriptionName)) {
1:                 found = true;
1:             }
1:         }
1:         assertTrue("We should have found: " + subscriptionName, found);
1: 
1:         // Our producer and no others.
1:         assertEquals(1, connectionView.getProducers().length);
1: 
1:         // Bean should detect the updates.
1:         queueConsumer.close();
1:         producer.close();
1: 
1:         Thread.sleep(200);
1: 
1:         // Only an advisory consumers now.
1:         assertEquals(1, connectionView.getConsumers().length);
1:         assertEquals(0, connectionView.getProducers().length);
commit:686bfcf
/////////////////////////////////////////////////////////////////////////
1:     public void testSubscriptionViewToConnectionMBean() throws Exception {
1: 
1:         connection = connectionFactory.createConnection("admin", "admin");
1:         connection.setClientID("MBeanTest");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue(getDestinationString() + ".Queue");
1:         @SuppressWarnings("unused")
1:         MessageConsumer queueConsumer = session.createConsumer(queue);
1: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
1:         Thread.sleep(100);
1: 
1:         assertTrue(broker.getQueueSubscribers().length == 1);
1: 
1:         ObjectName subscriptionName = broker.getQueueSubscribers()[0];
1: 
1:         SubscriptionViewMBean subscriberView =
0:             (SubscriptionViewMBean)MBeanServerInvocationHandler.newProxyInstance(
1:                     mbeanServer, subscriptionName, SubscriptionViewMBean.class, true);
1:         assertNotNull(subscriberView);
1: 
1:         ObjectName connectionName = subscriberView.getConnection();
1:         assertNotNull(connectionName);
1:         ConnectionViewMBean connectionView =
0:             (ConnectionViewMBean)MBeanServerInvocationHandler.newProxyInstance(
1:                     mbeanServer, connectionName, ConnectionViewMBean.class, true);
1:         assertNotNull(connectionView);
1:     }
1: 
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Topic;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testUserNamePopulated() throws Exception {
1:         doTestUserNameInMBeans(true);
1:     }
1: 
1:     public void testUserNameNotPopulated() throws Exception {
1:         doTestUserNameInMBeans(false);
1:     }
1: 
0:     @SuppressWarnings("unused")
1:     private void doTestUserNameInMBeans(boolean expect) throws Exception {
1:         broker.setPopulateUserNameInMBeans(expect);
1: 
1:         connection = connectionFactory.createConnection("admin", "admin");
1:         connection.setClientID("MBeanTest");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue(getDestinationString() + ".Queue");
1:         Topic topic = session.createTopic(getDestinationString() + ".Topic");
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer queueConsumer = session.createConsumer(queue);
1:         MessageConsumer topicConsumer = session.createConsumer(topic);
1:         MessageConsumer durable = session.createDurableSubscriber(topic, "Durable");
1: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
1:         Thread.sleep(100);
1: 
1:         assertTrue(broker.getQueueProducers().length == 1);
1:         assertTrue(broker.getTopicSubscribers().length == 2);
1:         assertTrue(broker.getQueueSubscribers().length == 1);
1: 
1:         ObjectName producerName = broker.getQueueProducers()[0];
0:         ProducerViewMBean producerView = (ProducerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, producerName, ProducerViewMBean.class, true);
1:         assertNotNull(producerView);
1: 
1:         if (expect) {
1:             assertEquals("admin", producerView.getUserName());
1:         } else {
1:             assertNull(producerView.getUserName());
1:         }
1: 
1:         for (ObjectName name : broker.getTopicSubscribers()) {
0:             SubscriptionViewMBean subscriberView = (SubscriptionViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
1:             if (expect) {
1:                 assertEquals("admin", subscriberView.getUserName());
1:             } else {
1:                 assertNull(subscriberView.getUserName());
1:             }
1:         }
1: 
1:         for (ObjectName name : broker.getQueueSubscribers()) {
0:             SubscriptionViewMBean subscriberView = (SubscriptionViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, SubscriptionViewMBean.class, true);
1:             if (expect) {
1:                 assertEquals("admin", subscriberView.getUserName());
1:             } else {
1:                 assertNull(subscriberView.getUserName());
1:             }
1:         }
1: 
0:         Set<ObjectName> names = mbeanServer.queryNames(null, null);
1:         boolean found = false;
1:         for (ObjectName name : names) {
0:             if (name.toString().startsWith(domain + ":BrokerName=localhost,Type=Connection,ConnectorName=tcp") &&
0:                 name.toString().endsWith("Connection=MBeanTest")) {
1: 
1:                 ConnectionViewMBean connectionView =
0:                     (ConnectionViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, name, ConnectionViewMBean.class, true);
1:                 assertNotNull(connectionView);
1: 
1:                 if (expect) {
1:                     assertEquals("admin", connectionView.getUserName());
1:                 } else {
1:                     assertNull(connectionView.getUserName());
1:                 }
1: 
1:                 found = true;
1:                 break;
1:             }
1:         }
1: 
1:         assertTrue("Should find the connection's ManagedTransportConnection", found);
1:     }
1: 
commit:f220607
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateDestinationWithSpacesAtEnds() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
0:         assertTrue("broker is not a slave", !broker.isSlave());
1:         // create 2 topics
1:         broker.addTopic(getDestinationString() + "1 ");
1:         broker.addTopic(" " + getDestinationString() + "2");
1:         broker.addTopic(" " + getDestinationString() + "3 ");
1: 
0:         assertNotRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "1 ");
0:         assertNotRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination= " + getDestinationString() + "2");
0:         assertNotRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination= " + getDestinationString() + "3 ");
1: 
0:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "1");
0:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "2");
0:         ObjectName topicObjName3 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "3");
1: 
0:         TopicViewMBean topic1 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
0:         TopicViewMBean topic2 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
0:         TopicViewMBean topic3 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName3, TopicViewMBean.class, true);
1: 
1:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
1:         assertEquals("topic3 Durable subscriber count", 0, topic3.getConsumerCount());
1: 
1:         String topicName = getDestinationString();
1:         String selector = null;
1: 
1:         // create 1 subscriber for each topic
1:         broker.createDurableSubscriber(clientID, "topic1.subscriber1", topicName + "1", selector);
1:         broker.createDurableSubscriber(clientID, "topic2.subscriber1", topicName + "2", selector);
1:         broker.createDurableSubscriber(clientID, "topic3.subscriber1", topicName + "3", selector);
1: 
1:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
1:         assertEquals("topic3 Durable subscriber count", 1, topic3.getConsumerCount());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected ObjectName assertNotRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             fail("Found the MBean!: " + objectName);
1:         } else {
1:             echo("Bean not registered Registered: " + objectName);
1:         }
1:         return objectName;
1:     }
1: 
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("openwire URL port doesn't equal bind Address",
0:                      new URI(broker.getOpenWireURL()).getPort(),
1:                      new URI(this.broker.getTransportConnectors().get(0).getPublishableConnectString()).getPort());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(queueSize > 0);
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:             Map<String, Object> headers = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         bindAddress = "tcp://localhost:0";
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:c43282e
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectors() throws Exception{
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0:         assertEquals("openwire URL port doesn't equal bind Address", new URI(broker.getOpenWireURL()).getPort(), new URI(this.bindAddress).getPort());
1:     }
1: 
1:     public void testMBeans() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1:         // test all the various MBeans now we have a producer, consumer and
1:         // messages on a queue
1:         assertSendViaMBean();
1:         assertQueueBrowseWorks();
1:         assertCreateAndDestroyDurableSubscriptions();
1:         assertConsumerCounts();
1:         assertProducerCounts();
1:     }
1: 
1:     public void testMoveMessages() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         CompositeData[] compdatalist = queue.browse();
1:         int initialQueueSize = compdatalist.length;
1:         if (initialQueueSize == 0) {
1:             fail("There is no message in the queue:");
1:         }
1:         else {
1:             echo("Current queue size: " + initialQueueSize);
1:         }
1:         int messageCount = initialQueueSize;
1:         String[] messageIDs = new String[messageCount];
1:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
1:             String messageID = (String) cdata.get("JMSMessageID");
1:             assertNotNull("Should have a message ID for message " + i, messageID);
1:             messageIDs[i] = messageID;
1:         }
1: 
0:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1: 
1:         echo("About to move " + messageCount + " messages");
1: 
1:         String newDestination = getSecondDestinationString();
1:         for (String messageID : messageIDs) {
0:             echo("Moving message: " + messageID);
1:             queue.moveMessageTo(messageID, newDestination);
1:         }
1: 
1:         echo("Now browsing the queue");
1:         compdatalist = queue.browse();
1:         int actualCount = compdatalist.length;
1:         echo("Current queue size: " + actualCount);
1:         assertEquals("Should now have empty queue but was", initialQueueSize - messageCount, actualCount);
1: 
1:         echo("Now browsing the second queue");
1: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0:         QueueViewMBean queueNew = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         long newQueuesize = queueNew.getQueueSize();
1:         echo("Second queue size: " + newQueuesize);
1:         assertEquals("Unexpected number of messages ",messageCount, newQueuesize);
1: 
0:         // check memory usage migration
0:         assertTrue("new dest has some memory usage", queueNew.getMemoryPercentUsage() > 0);
0:         assertEquals("old dest has no memory usage", 0, queue.getMemoryPercentUsage());
0:         assertTrue("use cache", queueNew.isUseCache());
0:         assertTrue("cache enabled", queueNew.isCacheEnabled());
1:     }
1: 
0:     public void testRemoveMessages() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0:         broker.addQueue(getDestinationString());
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0:         String msg1 = queue.sendTextMessage("message 1");
0:         String msg2 = queue.sendTextMessage("message 2");
1: 
0:         assertTrue(queue.removeMessage(msg2));
1: 
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         ActiveMQDestination dest = createDestination();
1: 
0:         MessageConsumer consumer = session.createConsumer(dest);
0:         Message message = consumer.receive(1000);
0:         assertNotNull(message);
0:         assertEquals(msg1, message.getJMSMessageID());
1: 
0:         String msg3 = queue.sendTextMessage("message 3");
0:         message = consumer.receive(1000);
0:         assertNotNull(message);
0:         assertEquals(msg3, message.getJMSMessageID());
1: 
0:         message = consumer.receive(1000);
0:         assertNull(message);
1: 
1:     }
1: 
1:     public void testRetryMessages() throws Exception {
1:         // lets speed up redelivery
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) connectionFactory;
1:         factory.getRedeliveryPolicy().setCollisionAvoidancePercent((short) 0);
1:         factory.getRedeliveryPolicy().setMaximumRedeliveries(1);
1:         factory.getRedeliveryPolicy().setInitialRedeliveryDelay(0);
1:         factory.getRedeliveryPolicy().setUseCollisionAvoidance(false);
1:         factory.getRedeliveryPolicy().setUseExponentialBackOff(false);
1:         factory.getRedeliveryPolicy().setBackOffMultiplier((short) 0);
1: 
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long initialQueueSize = queue.getQueueSize();
1:         echo("current queue size: " + initialQueueSize);
0:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1: 
1:         // lets create a duff consumer which keeps rolling back...
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationString()));
1:         Message message = consumer.receive(5000);
1:         while (message != null) {
1:             echo("Message: " + message.getJMSMessageID() + " redelivered " + message.getJMSRedelivered() + " counter " + message.getObjectProperty("JMSXDeliveryCount"));
1:             session.rollback();
1:             message = consumer.receive(2000);
1:         }
1:         consumer.close();
1:         session.close();
1: 
1: 
1:         // now lets get the dead letter queue
1:         Thread.sleep(1000);
1: 
0:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME + ",BrokerName=localhost");
0:         QueueViewMBean dlq = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         long initialDlqSize = dlq.getQueueSize();
1:         CompositeData[] compdatalist = dlq.browse();
1:         int dlqQueueSize = compdatalist.length;
1:         if (dlqQueueSize == 0) {
1:             fail("There are no messages in the queue:");
1:         }
1:         else {
1:             echo("Current DLQ queue size: " + dlqQueueSize);
1:         }
1:         int messageCount = dlqQueueSize;
1:         String[] messageIDs = new String[messageCount];
1:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
1:             String messageID = (String) cdata.get("JMSMessageID");
1:             assertNotNull("Should have a message ID for message " + i, messageID);
1:             messageIDs[i] = messageID;
1:         }
1: 
0:         int dlqMemUsage = dlq.getMemoryPercentUsage();
0:         assertTrue("dlq has some memory usage", dlqMemUsage > 0);
0:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1: 
1: 
1:         echo("About to retry " + messageCount + " messages");
1: 
1:         for (String messageID : messageIDs) {
1:             echo("Retrying message: " + messageID);
1:             dlq.retryMessage(messageID);
1:         }
1: 
1:         long queueSize = queue.getQueueSize();
1:         compdatalist = queue.browse();
1:         int actualCount = compdatalist.length;
1:         echo("Orginal queue size is now " + queueSize);
1:         echo("Original browse queue size: " + actualCount);
1: 
1:         long dlqSize = dlq.getQueueSize();
1:         echo("DLQ size: " + dlqSize);
1: 
1:         assertEquals("DLQ size", initialDlqSize - messageCount, dlqSize);
1:         assertEquals("queue size", initialQueueSize, queueSize);
1:         assertEquals("browse queue size", initialQueueSize, actualCount);
1: 
0:         assertEquals("dest has some memory usage", dlqMemUsage, queue.getMemoryPercentUsage());
1:     }
1: 
1:     public void testMoveMessagesBySelector() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String newDestination = getSecondDestinationString();
1:         queue.moveMatchingMessagesTo("counter > 2", newDestination);
1: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         int movedSize = MESSAGE_COUNT-3;
0:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
1: 
1:         // now lets remove them by selector
0:         queue.removeMatchingMessages("counter > 2");
1: 
0:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:     }
1: 
1:     public void testCopyMessagesBySelector() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         String newDestination = getSecondDestinationString();
1:         long queueSize = queue.getQueueSize();
1:         queue.copyMatchingMessagesTo("counter > 2", newDestination);
1: 
1: 
1: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         LOG.info("Queue: " + queueViewMBeanName + " now has: " + queue.getQueueSize() + " message(s)");
0:         assertEquals("Expected messages in a queue: " + queueViewMBeanName, MESSAGE_COUNT-3, queue.getQueueSize());
1:         // now lets remove them by selector
0:         queue.removeMatchingMessages("counter > 2");
1: 
0:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0:         assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
1:     }
/////////////////////////////////////////////////////////////////////////
0:     public void testTempQueueJMXDelete() throws Exception {
0:         connection = connectionFactory.createConnection();
1: 
1:         connection.setClientID(clientID);
0:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
0:         ActiveMQTempQueue tQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
1:         Thread.sleep(1000);
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type="+  JMXSupport.encodeObjectNamePart(tQueue.getDestinationTypeAsString())+",Destination=" + JMXSupport.encodeObjectNamePart(tQueue.getPhysicalName()) + ",BrokerName=localhost");
1: 
0:         // should not throw an exception
0:         mbeanServer.getObjectInstance(queueViewMBeanName);
1: 
0:         tQueue.delete();
1:         Thread.sleep(1000);
0:         try {
0:             // should throw an exception
0:             mbeanServer.getObjectInstance(queueViewMBeanName);
1: 
0:             fail("should be deleted already!");
0:         } catch (Exception e) {
0:             // expected!
1:         }
1: 
1:     }
1: 
0:     // Test for AMQ-3029
0:     public void testBrowseBlobMessages() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnectionWithBlobMessage(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         CompositeData[] compdatalist = queue.browse();
0:         int initialQueueSize = compdatalist.length;
0:         if (initialQueueSize == 0) {
1:             fail("There is no message in the queue:");
1:         }
0:         else {
0:             echo("Current queue size: " + initialQueueSize);
1:         }
0:         int messageCount = initialQueueSize;
0:         String[] messageIDs = new String[messageCount];
0:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
0:             String messageID = (String) cdata.get("JMSMessageID");
0:             assertNotNull("Should have a message ID for message " + i, messageID);
1: 
0:             messageIDs[i] = messageID;
1:         }
1: 
0:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1:     }
1: 
0:     public void testBrowseBytesMessages() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnectionWithByteMessage(connection);
1: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         CompositeData[] compdatalist = queue.browse();
0:         int initialQueueSize = compdatalist.length;
0:         if (initialQueueSize == 0) {
1:             fail("There is no message in the queue:");
1:         }
0:         else {
0:             echo("Current queue size: " + initialQueueSize);
1:         }
0:         int messageCount = initialQueueSize;
0:         String[] messageIDs = new String[messageCount];
0:         for (int i = 0; i < messageCount; i++) {
1:             CompositeData cdata = compdatalist[i];
0:             String messageID = (String) cdata.get("JMSMessageID");
0:             assertNotNull("Should have a message ID for message " + i, messageID);
0:             messageIDs[i] = messageID;
1: 
0:             Byte[] preview = (Byte[]) cdata.get(CompositeDataConstants.BODY_PREVIEW);
0:             assertNotNull("should be a preview", preview);
0:             assertTrue("not empty", preview.length > 0);
1:         }
1: 
0:         assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
1: 
0:         // consume all the messages
0:         echo("Attempting to consume all bytes messages from: " + destination);
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(destination);
0:         for (int i=0; i<MESSAGE_COUNT; i++) {
0:             Message message = consumer.receive(5000);
0:             assertNotNull(message);
0:             assertTrue(message instanceof BytesMessage);
1:         }
0:         consumer.close();
0:         session.close();
1:     }
commit:629b18c
/////////////////////////////////////////////////////////////////////////
0: //    public void testConnectors() throws Exception{
0: //        ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0: //        BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0: //        assertEquals("openwire URL port doesn't equal bind Address", new URI(broker.getOpenWireURL()).getPort(), new URI(this.bindAddress).getPort());
0: //
0: //    }
0: //
0: //    public void testMBeans() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnection(connection);
0: //
0: //        // test all the various MBeans now we have a producer, consumer and
0: //        // messages on a queue
0: //        assertSendViaMBean();
0: //        assertQueueBrowseWorks();
0: //        assertCreateAndDestroyDurableSubscriptions();
0: //        assertConsumerCounts();
0: //        assertProducerCounts();
0: //    }
0: //
0: //    public void testMoveMessages() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnection(connection);
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        CompositeData[] compdatalist = queue.browse();
0: //        int initialQueueSize = compdatalist.length;
0: //        if (initialQueueSize == 0) {
0: //            fail("There is no message in the queue:");
0: //        }
0: //        else {
0: //            echo("Current queue size: " + initialQueueSize);
0: //        }
0: //        int messageCount = initialQueueSize;
0: //        String[] messageIDs = new String[messageCount];
0: //        for (int i = 0; i < messageCount; i++) {
0: //            CompositeData cdata = compdatalist[i];
0: //            String messageID = (String) cdata.get("JMSMessageID");
0: //            assertNotNull("Should have a message ID for message " + i, messageID);
0: //            messageIDs[i] = messageID;
0: //        }
0: //
0: //        assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
0: //
0: //        echo("About to move " + messageCount + " messages");
0: //
0: //        String newDestination = getSecondDestinationString();
0: //        for (String messageID : messageIDs) {
0: //            echo("Moving message: " + messageID);
0: //            queue.moveMessageTo(messageID, newDestination);
0: //        }
0: //
0: //        echo("Now browsing the queue");
0: //        compdatalist = queue.browse();
0: //        int actualCount = compdatalist.length;
0: //        echo("Current queue size: " + actualCount);
0: //        assertEquals("Should now have empty queue but was", initialQueueSize - messageCount, actualCount);
0: //
0: //        echo("Now browsing the second queue");
0: //
0: //        queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0: //        QueueViewMBean queueNew = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        long newQueuesize = queueNew.getQueueSize();
0: //        echo("Second queue size: " + newQueuesize);
0: //        assertEquals("Unexpected number of messages ",messageCount, newQueuesize);
0: //
0: //        // check memory usage migration
0: //        assertTrue("new dest has some memory usage", queueNew.getMemoryPercentUsage() > 0);
0: //        assertEquals("old dest has no memory usage", 0, queue.getMemoryPercentUsage());
0: //        assertTrue("use cache", queueNew.isUseCache());
0: //        assertTrue("cache enabled", queueNew.isCacheEnabled());
0: //    }
0: //
0: //    public void testRemoveMessages() throws Exception {
0: //        ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0: //        BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0: //        broker.addQueue(getDestinationString());
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //        String msg1 = queue.sendTextMessage("message 1");
0: //        String msg2 = queue.sendTextMessage("message 2");
0: //
0: //        assertTrue(queue.removeMessage(msg2));
0: //
0: //        connection = connectionFactory.createConnection();
0: //        connection.start();
0: //        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: //        ActiveMQDestination dest = createDestination();
0: //
0: //        MessageConsumer consumer = session.createConsumer(dest);
0: //        Message message = consumer.receive(1000);
0: //        assertNotNull(message);
0: //        assertEquals(msg1, message.getJMSMessageID());
0: //
0: //        String msg3 = queue.sendTextMessage("message 3");
0: //        message = consumer.receive(1000);
0: //        assertNotNull(message);
0: //        assertEquals(msg3, message.getJMSMessageID());
0: //
0: //        message = consumer.receive(1000);
0: //        assertNull(message);
0: //
0: //    }
0: //
0: //    public void testRetryMessages() throws Exception {
0: //        // lets speed up redelivery
0: //        ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) connectionFactory;
0: //        factory.getRedeliveryPolicy().setCollisionAvoidancePercent((short) 0);
0: //        factory.getRedeliveryPolicy().setMaximumRedeliveries(1);
0: //        factory.getRedeliveryPolicy().setInitialRedeliveryDelay(0);
0: //        factory.getRedeliveryPolicy().setUseCollisionAvoidance(false);
0: //        factory.getRedeliveryPolicy().setUseExponentialBackOff(false);
0: //        factory.getRedeliveryPolicy().setBackOffMultiplier((short) 0);
0: //
0: //        connection = connectionFactory.createConnection();
0: //        useConnection(connection);
0: //
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        long initialQueueSize = queue.getQueueSize();
0: //        echo("current queue size: " + initialQueueSize);
0: //        assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
0: //
0: //        // lets create a duff consumer which keeps rolling back...
0: //        Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
0: //        MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationString()));
0: //        Message message = consumer.receive(5000);
0: //        while (message != null) {
0: //            echo("Message: " + message.getJMSMessageID() + " redelivered " + message.getJMSRedelivered() + " counter " + message.getObjectProperty("JMSXDeliveryCount"));
0: //            session.rollback();
0: //            message = consumer.receive(2000);
0: //        }
0: //        consumer.close();
0: //        session.close();
0: //
0: //
0: //        // now lets get the dead letter queue
0: //        Thread.sleep(1000);
0: //
0: //        ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME + ",BrokerName=localhost");
0: //        QueueViewMBean dlq = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        long initialDlqSize = dlq.getQueueSize();
0: //        CompositeData[] compdatalist = dlq.browse();
0: //        int dlqQueueSize = compdatalist.length;
0: //        if (dlqQueueSize == 0) {
0: //            fail("There are no messages in the queue:");
0: //        }
0: //        else {
0: //            echo("Current DLQ queue size: " + dlqQueueSize);
0: //        }
0: //        int messageCount = dlqQueueSize;
0: //        String[] messageIDs = new String[messageCount];
0: //        for (int i = 0; i < messageCount; i++) {
0: //            CompositeData cdata = compdatalist[i];
0: //            String messageID = (String) cdata.get("JMSMessageID");
0: //            assertNotNull("Should have a message ID for message " + i, messageID);
0: //            messageIDs[i] = messageID;
0: //        }
0: //
0: //        int dlqMemUsage = dlq.getMemoryPercentUsage();
0: //        assertTrue("dlq has some memory usage", dlqMemUsage > 0);
0: //        assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
0: //
0: //
0: //        echo("About to retry " + messageCount + " messages");
0: //
0: //        for (String messageID : messageIDs) {
0: //            echo("Retrying message: " + messageID);
0: //            dlq.retryMessage(messageID);
0: //        }
0: //
0: //        long queueSize = queue.getQueueSize();
0: //        compdatalist = queue.browse();
0: //        int actualCount = compdatalist.length;
0: //        echo("Orginal queue size is now " + queueSize);
0: //        echo("Original browse queue size: " + actualCount);
0: //
0: //        long dlqSize = dlq.getQueueSize();
0: //        echo("DLQ size: " + dlqSize);
0: //
0: //        assertEquals("DLQ size", initialDlqSize - messageCount, dlqSize);
0: //        assertEquals("queue size", initialQueueSize, queueSize);
0: //        assertEquals("browse queue size", initialQueueSize, actualCount);
0: //
0: //        assertEquals("dest has some memory usage", dlqMemUsage, queue.getMemoryPercentUsage());
0: //    }
0: //
0: //    public void testMoveMessagesBySelector() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnection(connection);
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        String newDestination = getSecondDestinationString();
0: //        queue.moveMatchingMessagesTo("counter > 2", newDestination);
0: //
0: //        queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0: //
0: //        queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //        int movedSize = MESSAGE_COUNT-3;
0: //        assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
0: //
0: //        // now lets remove them by selector
0: //        queue.removeMatchingMessages("counter > 2");
0: //
0: //        assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0: //        assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
0: //    }
0: //
0: //    public void testCopyMessagesBySelector() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnection(connection);
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        String newDestination = getSecondDestinationString();
0: //        long queueSize = queue.getQueueSize();
0: //        queue.copyMatchingMessagesTo("counter > 2", newDestination);
0: //
0: //
0: //
0: //        queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0: //
0: //        queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        LOG.info("Queue: " + queueViewMBeanName + " now has: " + queue.getQueueSize() + " message(s)");
0: //        assertEquals("Expected messages in a queue: " + queueViewMBeanName, MESSAGE_COUNT-3, queue.getQueueSize());
0: //        // now lets remove them by selector
0: //        queue.removeMatchingMessages("counter > 2");
0: //
0: //        assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0: //        assertEquals("dest has no memory usage", 0, queue.getMemoryPercentUsage());
0: //    }
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(500);
1:         assertEquals(1, broker.getDynamicDestinationProducers().length);
/////////////////////////////////////////////////////////////////////////
1:     public void testDynamicProducerView() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0:         assertTrue("broker is not a slave", !broker.isSlave());
1:         assertEquals(0, broker.getDynamicDestinationProducers().length);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         Destination dest1 = session.createTopic("DynamicDest-1");
1:         Destination dest2 = session.createTopic("DynamicDest-2");
1:         Destination dest3 = session.createQueue("DynamicDest-3");
1: 
1:         // Wait a bit to let the producer get registered.
1:         Thread.sleep(100);
1: 
1:         assertEquals(1, broker.getDynamicDestinationProducers().length);
1: 
1:         ObjectName viewName = broker.getDynamicDestinationProducers()[0];
1:         assertNotNull(viewName);
0:         ProducerViewMBean view = (ProducerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, viewName, ProducerViewMBean.class, true);
1:         assertNotNull(view);
1: 
1:         assertEquals("NOTSET", view.getDestinationName());
1: 
1:         producer.send(dest1, session.createTextMessage("Test Message 1"));
1:         Thread.sleep(200);
1:         assertEquals(((ActiveMQDestination)dest1).getPhysicalName(), view.getDestinationName());
1:         assertTrue(view.isDestinationTopic());
1:         assertFalse(view.isDestinationQueue());
1:         assertFalse(view.isDestinationTemporary());
1: 
1:         producer.send(dest2, session.createTextMessage("Test Message 2"));
1:         Thread.sleep(200);
1:         assertEquals(((ActiveMQDestination)dest2).getPhysicalName(), view.getDestinationName());
1:         assertTrue(view.isDestinationTopic());
1:         assertFalse(view.isDestinationQueue());
1:         assertFalse(view.isDestinationTemporary());
1: 
1:         producer.send(dest3, session.createTextMessage("Test Message 3"));
1:         Thread.sleep(200);
1:         assertEquals(((ActiveMQDestination)dest3).getPhysicalName(), view.getDestinationName());
1:         assertTrue(view.isDestinationQueue());
1:         assertFalse(view.isDestinationTopic());
1:         assertFalse(view.isDestinationTemporary());
1: 
1:         producer.close();
1:         Thread.sleep(200);
1:         assertEquals(0, broker.getDynamicDestinationProducers().length);
1: 
0: //    public void testTempQueueJMXDelete() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //
0: //        connection.setClientID(clientID);
0: //        connection.start();
0: //        Session session = connection.createSession(transacted, authMode);
0: //        ActiveMQTempQueue tQueue = (ActiveMQTempQueue) session.createTemporaryQueue();
0: //        Thread.sleep(1000);
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type="+  JMXSupport.encodeObjectNamePart(tQueue.getDestinationTypeAsString())+",Destination=" + JMXSupport.encodeObjectNamePart(tQueue.getPhysicalName()) + ",BrokerName=localhost");
0: //
0: //        // should not throw an exception
0: //        mbeanServer.getObjectInstance(queueViewMBeanName);
0: //
0: //        tQueue.delete();
0: //        Thread.sleep(1000);
0: //        try {
0: //            // should throw an exception
0: //            mbeanServer.getObjectInstance(queueViewMBeanName);
0: //
0: //            fail("should be deleted already!");
0: //        } catch (Exception e) {
0: //            // expected!
0: //        }
0: //
0: //    }
0: //
0: //    // Test for AMQ-3029
0: //    public void testBrowseBlobMessages() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnectionWithBlobMessage(connection);
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        CompositeData[] compdatalist = queue.browse();
0: //        int initialQueueSize = compdatalist.length;
0: //        if (initialQueueSize == 0) {
0: //            fail("There is no message in the queue:");
0: //        }
0: //        else {
0: //            echo("Current queue size: " + initialQueueSize);
0: //        }
0: //        int messageCount = initialQueueSize;
0: //        String[] messageIDs = new String[messageCount];
0: //        for (int i = 0; i < messageCount; i++) {
0: //            CompositeData cdata = compdatalist[i];
0: //            String messageID = (String) cdata.get("JMSMessageID");
0: //            assertNotNull("Should have a message ID for message " + i, messageID);
0: //
0: //            messageIDs[i] = messageID;
0: //        }
0: //
0: //        assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
0: //    }
0: //
0: //    public void testBrowseBytesMessages() throws Exception {
0: //        connection = connectionFactory.createConnection();
0: //        useConnectionWithByteMessage(connection);
0: //
0: //        ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: //
0: //        QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: //
0: //        CompositeData[] compdatalist = queue.browse();
0: //        int initialQueueSize = compdatalist.length;
0: //        if (initialQueueSize == 0) {
0: //            fail("There is no message in the queue:");
0: //        }
0: //        else {
0: //            echo("Current queue size: " + initialQueueSize);
0: //        }
0: //        int messageCount = initialQueueSize;
0: //        String[] messageIDs = new String[messageCount];
0: //        for (int i = 0; i < messageCount; i++) {
0: //            CompositeData cdata = compdatalist[i];
0: //            String messageID = (String) cdata.get("JMSMessageID");
0: //            assertNotNull("Should have a message ID for message " + i, messageID);
0: //            messageIDs[i] = messageID;
0: //
0: //            Byte[] preview = (Byte[]) cdata.get(CompositeDataConstants.BODY_PREVIEW);
0: //            assertNotNull("should be a preview", preview);
0: //            assertTrue("not empty", preview.length > 0);
0: //        }
0: //
0: //        assertTrue("dest has some memory usage", queue.getMemoryPercentUsage() > 0);
0: //
0: //        // consume all the messages
0: //        echo("Attempting to consume all bytes messages from: " + destination);
0: //        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: //        MessageConsumer consumer = session.createConsumer(destination);
0: //        for (int i=0; i<MESSAGE_COUNT; i++) {
0: //            Message message = consumer.receive(5000);
0: //            assertNotNull(message);
0: //            assertTrue(message instanceof BytesMessage);
0: //        }
0: //        consumer.close();
0: //        session.close();
0: //    }
commit:71c0d44
/////////////////////////////////////////////////////////////////////////
1:         MessageProducer producer4 = session.createProducer(null);
1:         producer4.close();
1:         Thread.sleep(500);
1: 
commit:0c4fe3e
/////////////////////////////////////////////////////////////////////////
0:         assertSendViaMBean();
0:         assertQueueBrowseWorks();
0:         assertCreateAndDestroyDurableSubscriptions();
0:         assertConsumerCounts();
commit:7092b19
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: //        assertSendViaMBean();
0: //        assertQueueBrowseWorks();
0: //        assertCreateAndDestroyDurableSubscriptions();
0: //        assertConsumerCounts();
0:         assertProducerCounts();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void assertProducerCounts() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
0:         assertTrue("broker is not a slave", !broker.isSlave());
1:         // create 2 topics
1:         broker.addTopic(getDestinationString() + "1");
1:         broker.addTopic(getDestinationString() + "2");
1: 
0:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "1");
0:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "2");
0:         TopicViewMBean topic1 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
0:         TopicViewMBean topic2 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
1: 
1:         assertEquals("topic1 Producer count", 0, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1:         assertEquals("broker Topic Producer count", 0, broker.getTopicProducers().length);
1: 
1:         // create 1 producer for each topic
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination dest1 = session.createTopic(getDestinationString() + "1");
1:         Destination dest2 = session.createTopic(getDestinationString() + "2");
1:         MessageProducer producer1 = session.createProducer(dest1);
1:         MessageProducer producer2 = session.createProducer(dest2);
1:         Thread.sleep(500);
1: 
1:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1: 
1:         assertEquals("broker Topic Producer count", 2, broker.getTopicProducers().length);
1: 
1:         // create 1 more producer for topic1
1:         MessageProducer producer3 = session.createProducer(dest1);
1:         Thread.sleep(500);
1: 
1:         assertEquals("topic1 Producer count", 2, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1: 
1:         assertEquals("broker Topic Producer count", 3, broker.getTopicProducers().length);
1: 
1:         // destroy topic1 producer
1:         producer1.close();
1:         Thread.sleep(500);
1: 
1:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 1, topic2.getProducerCount());
1: 
1:         assertEquals("broker Topic Producer count", 2, broker.getTopicProducers().length);
1: 
1:         // destroy topic2 producer
1:         producer2.close();
1:         Thread.sleep(500);
1: 
1:         assertEquals("topic1 Producer count", 1, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1: 
1:         assertEquals("broker Topic Producer count", 1, broker.getTopicProducers().length);
1: 
1:         // destroy remaining topic1 producer
1:         producer3.close();
1:         Thread.sleep(500);
1: 
1:         assertEquals("topic1 Producer count", 0, topic1.getProducerCount());
1:         assertEquals("topic2 Producer count", 0, topic2.getProducerCount());
1: 
1:         assertEquals("broker Topic Producer count", 0, broker.getTopicProducers().length);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:             //echo("Moving message: " + messageID);
/////////////////////////////////////////////////////////////////////////
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME );
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString() );
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
0:         QueueViewMBean queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
0:         queue = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1 ");
1:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= " + getDestinationString() + "2");
1:         assertNotRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= " + getDestinationString() + "3 ");
1:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
1:         ObjectName topicObjName3 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "3");
1: 
1:         TopicViewMBean topic1 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
1:         TopicViewMBean topic2 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
1:         TopicViewMBean topic3 = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName3, TopicViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + queueName);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
1:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "1");
1:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=" + getDestinationString() + "2");
/////////////////////////////////////////////////////////////////////////
1:         //LOG.info(text);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType="
1:                 + JMXSupport.encodeObjectNamePart(tQueue.getDestinationTypeAsString())
1:                 + ",destinationName=" + JMXSupport.encodeObjectNamePart(tQueue.getPhysicalName()));
1: 
0:                         // should not throw an exception
1: 
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + QUEUE_WITH_OPTIONS );
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:             MBeanServerInvocationHandler.newProxyInstance(
/////////////////////////////////////////////////////////////////////////
1:             MBeanServerInvocationHandler.newProxyInstance(
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
0:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,connector=*," + "connectorName=*,connectionName=MBeanTest");
1:         Set<ObjectName> names = mbeanServer.queryNames(query, null);
1:             if (name.toString().endsWith("connectionName=MBeanTest")) {
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
1:         queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + newDestination );
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + getDestinationString());
commit:c1051c8
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void testConnectors() throws Exception{
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0:         assertEquals("openwire URL doesn't equal bind Address",broker.getOpenWireURL(),this.bindAddress);
1: 
1:     }
commit:47cfa55
/////////////////////////////////////////////////////////////////////////
0:         int messageCount = initialQueueSize;
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("Should now have empty queue but was", initialQueueSize - messageCount, actualCount);
/////////////////////////////////////////////////////////////////////////
0:     public void testRetryMessages() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         int messageCount = dlqQueueSize;
commit:15fb25d
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MESSAGE_COUNT = 2*BaseDestination.MAX_PAGE_SIZE;
commit:18f9773
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.BaseDestination;
/////////////////////////////////////////////////////////////////////////
0:     protected static final int MESSAGE_COUNT = 2*BaseDestination.DEFAULT_PAGE_SIZE;
/////////////////////////////////////////////////////////////////////////
0:         int movedSize = MESSAGE_COUNT-3;
0:         assertEquals("Unexpected number of messages ",movedSize,queue.getQueueSize());
/////////////////////////////////////////////////////////////////////////
1:         
0:         assertEquals("Expected messages in a queue: " + queueViewMBeanName, MESSAGE_COUNT-3, queue.getQueueSize());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Queue size", MESSAGE_COUNT, proxy.getQueueSize());
1:         assertEquals("Queue size", MESSAGE_COUNT, proxy.getQueueSize());
1:         assertEquals("Queue size", MESSAGE_COUNT-1, proxy.getQueueSize());
/////////////////////////////////////////////////////////////////////////
1:         answer.setDeleteAllMessagesOnStartup(true);
0:         //answer.setEnableStatistics(true);
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < MESSAGE_COUNT; i++) {
commit:4089d75
/////////////////////////////////////////////////////////////////////////
0:         answer.setEnableStatistics(true);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.advisory.TempDestDeleteTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MBeanTest.class);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A test case of the various MBeans in ActiveMQ. If you want to look at the
1:  * various MBeans after the test has been run then run this test case as a
1:  * command line application.
/////////////////////////////////////////////////////////////////////////
1:      * When you run this test case from the command line it will pause before
1:      * terminating so that you can look at the MBeans state for debugging
1:      * purposes.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         queue.moveMatchingMessagesTo("counter > 2", newDestination);
1: 
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1: 
1: 
1: 
1: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1: 
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
0:         LOG.info("Queue: " + queueViewMBeanName + " now has: " + queue.getQueueSize() + " message(s)");
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:             messageIDs[i] = (String)cdata.get("JMSMessageID");
/////////////////////////////////////////////////////////////////////////
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         ObjectName name1 = broker.createDurableSubscriber(clientID, "subscriber1", topicName, selector);
0: 
1:         LOG.info("Created durable subscriber with name: " + name1);
0: 
/////////////////////////////////////////////////////////////////////////
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         // create 2 topics
0:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "1");
0:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination=" + getDestinationString() + "2");
0:         TopicViewMBean topic1 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
0:         TopicViewMBean topic2 = (TopicViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
1:         // create 1 subscriber for each topic
1:         // create 1 more subscriber for topic1
1:         // destroy topic1 subscriber
/////////////////////////////////////////////////////////////////////////
1:         // destroy remaining topic1 subscriber
/////////////////////////////////////////////////////////////////////////
0:         } else {
/////////////////////////////////////////////////////////////////////////
0:         LOG.info(text);
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Created durable subscriber with name: "  + name1);
/////////////////////////////////////////////////////////////////////////
0:         log.info(text);
author:James Strachan
-------------------------------------------------------------------------------
commit:6cd7082
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageConsumer;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
/////////////////////////////////////////////////////////////////////////
0:     public void testMoveMessages() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
0: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: 
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
0:         CompositeData[] compdatalist = queue.browse();
0:         int initialQueueSize = compdatalist.length;
0:         if (initialQueueSize == 0) {
0:             fail("There is no message in the queue:");
1:         }
0:         else {
0:             echo("Current queue size: " + initialQueueSize);
1:         }
0:         // TODO uncommenting this line causes a hang!
0:         //int messageCount = initialQueueSize;
0:         int messageCount = 10;
0:         String[] messageIDs = new String[messageCount];
0:         for (int i = 0; i < messageCount; i++) {
0:             CompositeData cdata = compdatalist[i];
0:             String messageID = (String) cdata.get("JMSMessageID");
0:             assertNotNull("Should have a message ID for message " + i, messageID);
0:             messageIDs[i] = messageID;
1:         }
0: 
0: 
0:         echo("About to move " + messageCount + " messages");
0: 
0:         String newDestination = getSecondDestinationString();
0:         for (String messageID : messageIDs) {
0:             echo("Moving message: " + messageID);
0:             queue.moveMessageTo(messageID, newDestination);
1:         }
0: 
0:         echo("Now browsing the queue");
0:         compdatalist = queue.browse();
0:         int actualCount = compdatalist.length;
0:         echo("Current queue size: " + actualCount);
0:         // TODO we seem to have browsed the queue and now there are messages missing!
0:         //assertEquals("Should now have empty queue but was", initialQueueSize - messageCount, actualCount);
0: 
0:         echo("Now browsing the second queue");
0: 
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0:         queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
0:         long newQueuesize = queue.getQueueSize();
0:         echo("Second queue size: " + newQueuesize);
0:         assertEquals("Unexpected number of messages ",messageCount, newQueuesize);
1:     }
0: 
0:     public void TODO_testRetryMessages() throws Exception {
0:         // lets speed up redelivery
0:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) connectionFactory;
0:         factory.getRedeliveryPolicy().setCollisionAvoidancePercent((short) 0);
0:         factory.getRedeliveryPolicy().setMaximumRedeliveries(1);
0:         factory.getRedeliveryPolicy().setInitialRedeliveryDelay(0);
0:         factory.getRedeliveryPolicy().setUseCollisionAvoidance(false);
0:         factory.getRedeliveryPolicy().setUseExponentialBackOff(false);
0:         factory.getRedeliveryPolicy().setBackOffMultiplier((short) 0);
0: 
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
0: 
0: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
0:         long initialQueueSize = queue.getQueueSize();
0:         echo("current queue size: " + initialQueueSize);
0: 
0: 
0:         // lets create a duff consumer which keeps rolling back...
0:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
0:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(getDestinationString()));
0:         Message message = consumer.receive(5000);
0:         while (message != null) {
0:             echo("Message: " + message.getJMSMessageID() + " redelivered " + message.getJMSRedelivered() + " counter " + message.getObjectProperty("JMSXDeliveryCount"));
0:             session.rollback();
0:             message = consumer.receive(2000);
1:         }
0:         consumer.close();
0:         session.close();
0: 
0: 
0:         // now lets get the dead letter queue
0:         Thread.sleep(1000);
0: 
0:         ObjectName dlqQueueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME + ",BrokerName=localhost");
0:         QueueViewMBean dlq = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, dlqQueueViewMBeanName, QueueViewMBean.class, true);
0: 
0:         long initialDlqSize = dlq.getQueueSize();
0:         CompositeData[] compdatalist = dlq.browse();
0:         int dlqQueueSize = compdatalist.length;
0:         if (dlqQueueSize == 0) {
0:             fail("There are no messages in the queue:");
1:         }
0:         else {
0:             echo("Current DLQ queue size: " + dlqQueueSize);
1:         }
0: 
0:         // TODO uncommenting this line causes a hang!
0:         //int messageCount = dlqQueueSize;
0:         int messageCount = 10;
0:         String[] messageIDs = new String[messageCount];
0:         for (int i = 0; i < messageCount; i++) {
0:             CompositeData cdata = compdatalist[i];
0:             String messageID = (String) cdata.get("JMSMessageID");
0:             assertNotNull("Should have a message ID for message " + i, messageID);
0:             messageIDs[i] = messageID;
1:         }
0: 
0: 
0:         echo("About to retry " + messageCount + " messages");
0: 
0:         for (String messageID : messageIDs) {
0:             echo("Retrying message: " + messageID);
0:             dlq.retryMessage(messageID);
1:         }
0: 
0:         long queueSize = queue.getQueueSize();
0:         compdatalist = queue.browse();
0:         int actualCount = compdatalist.length;
0:         echo("Orginal queue size is now " + queueSize);
0:         echo("Original browse queue size: " + actualCount);
0: 
0:         long dlqSize = dlq.getQueueSize();
0:         echo("DLQ size: " + dlqSize);
0: 
0:         assertEquals("DLQ size", initialDlqSize - messageCount, dlqSize);
0:         assertEquals("queue size", initialQueueSize, queueSize);
0:         assertEquals("browse queue size", initialQueueSize, actualCount);
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         String newDestination = getSecondDestinationString();
/////////////////////////////////////////////////////////////////////////
0:         String newDestination = getSecondDestinationString();
/////////////////////////////////////////////////////////////////////////
1:         answer.setPersistent(false);
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     protected String getSecondDestinationString() {
1:         return "test.new.destination." + getClass() + "." + getName();
0:     }
commit:9cd9a00
/////////////////////////////////////////////////////////////////////////
1:         proxy.purge();
0:         
1:             headers.put("JMSDeliveryMode", Boolean.FALSE);
1:             headers.put("JMSPriority", i + 1);
/////////////////////////////////////////////////////////////////////////
1:             assertComplexData(i, cdata, "JMSCorrelationID", "MyCorrId");
1:             assertComplexData(i, cdata, "JMSPriority", i + 1);
1:             assertComplexData(i, cdata, "JMSType", "MyType");
1:             assertComplexData(i, cdata, "JMSCorrelationID", "MyCorrId");
1:             assertComplexData(i, cdata, "JMSDeliveryMode", "NON-PERSISTENT");
0:             assertComplexData(i, cdata, "PropertiesText", "{MyStringHeader=StringHeader" + i + ", MyHeader=" + i + "}");
/////////////////////////////////////////////////////////////////////////
1:             assertComplexData(i, cdata, "JMSXGroupSeq", 1234);
1:             assertComplexData(i, cdata, "JMSXGroupID", "MyGroupID");
1:             assertComplexData(i, cdata, "Text", "message:" + i);
1:     protected void assertComplexData(int messageIndex, CompositeData cdata, String name, Object expected) {
1:         assertEquals("Message " + messageIndex + " CData field: " + name, expected, value);
commit:a655335
/////////////////////////////////////////////////////////////////////////
1:             Map properties = CompositeDataHelper.getMessageUserProperties(cdata);
1:             assertEquals("properties size()", 2, properties.size());
0:             assertEquals("properties.MyHeader", i, properties.get("MyHeader"));
1:             assertEquals("properties.MyHeader", "StringHeader" + i, properties.get("MyStringHeader"));
0: 
commit:3dd6575
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
0:         assertSendViaMBean();
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void assertSendViaMBean() throws Exception {
1:         String queueName = getDestinationString() + ".SendMBBean";
0: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         echo("Create QueueView MBean...");
0:         BrokerViewMBean broker = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1:         broker.addQueue(queueName);
0: 
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + queueName + ",BrokerName=localhost");
0: 
1:         echo("Create QueueView MBean...");
0:         QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
1:         int count = 5;
1:         for (int i = 0; i < count; i++) {
1:             String body = "message:" + i;
0: 
0:             Map headers = new HashMap();
1:             headers.put("JMSCorrelationID", "MyCorrId");
0:             headers.put("JMSDeliveryMode", Boolean.TRUE);
1:             headers.put("JMSXGroupID", "MyGroupID");
1:             headers.put("JMSXGroupSeq", 1234);
0:             headers.put("JMSPriority", i);
1:             headers.put("JMSType", "MyType");
1:             headers.put("MyHeader", i);
1:             headers.put("MyStringHeader", "StringHeader" + i);
0: 
1:             proxy.sendTextMessage(headers, body);
0:         }
0:         
1:         CompositeData[] compdatalist = proxy.browse();
1:         if (compdatalist.length == 0) {
0:             fail("There is no message in the queue:");
0:         }
1:         String[] messageIDs = new String[compdatalist.length];
0: 
1:         for (int i = 0; i < compdatalist.length; i++) {
0:             CompositeData cdata = compdatalist[i];
0: 
1:             if (i == 0) {
1:                 echo("Columns: " + cdata.getCompositeType().keySet());
0:             }
0: 
0:             assertComplexData(cdata, "JMSCorrelationID", "MyCorrId");
0:             assertComplexData(cdata, "JMSPriority", i);
0:             assertComplexData(cdata, "JMSType", "MyType");
0:             assertComplexData(cdata, "JMSCorrelationID", "MyCorrId");
0:             assertComplexData(cdata, "PropertiesText", "{MyStringHeader=StringHeader" + i + ", MyHeader=" + i + "}");
0: 
0:             Map intProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.INT_PROPERTIES);
0:             assertEquals("intProperties size()", 1, intProperties.size());
0:             assertEquals("intProperties.MyHeader", i, intProperties.get("MyHeader"));
0: 
0:             Map stringProperties = CompositeDataHelper.getTabularMap(cdata, CompositeDataConstants.STRING_PROPERTIES);
0:             assertEquals("stringProperties size()", 1, stringProperties.size());
0:             assertEquals("stringProperties.MyHeader", "StringHeader" + i, stringProperties.get("MyStringHeader"));
0: 
0:             assertComplexData(cdata, "JMSXGroupSeq", 1234);
0:             assertComplexData(cdata, "JMSXGroupID", "MyGroupID");
0:             assertComplexData(cdata, "Text", "message:" + i);
0: 
0:         }
0:     }
0: 
0:     protected void assertComplexData(CompositeData cdata, String name, Object expected) {
1:         Object value = cdata.get(name);
0:         assertEquals("CData field: " + name, expected, value);
0:     }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:             message.setJMSCorrelationID("MyCorrelationID");
1:             message.setJMSReplyTo(new ActiveMQQueue("MyReplyTo"));
1:             message.setJMSType("MyType");
1:             message.setJMSPriority(5);
commit:9479de7
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void testMoveMessagesBySelector() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
0:         
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0:         
0:         QueueViewMBean queue = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0:         
0:         String newDestination = "test.new.destination." + getClass() + "." + getName();
0:         queue.moveMatchingMessagesTo("counter > 2", newDestination );
0:         
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0:         
0:         queue = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0:         
0:         assertTrue("Should have at least one message in the queue: " + queueViewMBeanName, queue.getQueueSize() > 0);
0:         
0:         // now lets remove them by selector
0:         queue.removeMatchingMessages("counter > 2");
0:         
0:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0:     }
0:     
0:     public void testCopyMessagesBySelector() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
0:         
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: 
0:         QueueViewMBean queue = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
0:         String newDestination = "test.new.destination." + getClass() + "." + getName();
0:         long queueSize = queue.getQueueSize();
0:         queue.copyMatchingMessagesTo("counter > 2", newDestination);
0:         
0:         assertEquals("Should have same number of messages in the queue: " + queueViewMBeanName, queueSize, queueSize);
0:         
0:         queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + newDestination + ",BrokerName=localhost");
0: 
0:         queue = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0:         
0:         log.info("Queue: " + queueViewMBeanName + " now has: " + queue.getQueueSize() + " message(s)");
0:         
0:         assertTrue("Should have at least one message in the queue: " + queueViewMBeanName, queue.getQueueSize() > 0);
0:         
0:         // now lets remove them by selector
0:         queue.removeMatchingMessages("counter > 2");
0:         
0:         assertEquals("Should have no more messages in the queue: " + queueViewMBeanName, 0, queue.getQueueSize());
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:             message.setIntProperty("counter", i);
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
0:         ObjectName name1 = broker.createDurableSubscriber(clientID, "subscriber1", topicName , selector);
1:         assertNotNull("Should have created an mbean name for the durable subscriber!", name1);
0:         
0:         System.out.println("Created durable subscriber with name: "  + name1);
0:         
commit:ad5ad88
/////////////////////////////////////////////////////////////////////////
1:         String topicName = getDestinationString();
1:         String selector = null;
0:         broker.createDurableSubscriber(clientID, "subscriber1", topicName , selector);
1:         broker.createDurableSubscriber(clientID, "subscriber2", topicName, selector);
1:         broker.destroyDurableSubscriber(clientID, "subscriber1");
commit:6c0fae0
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MalformedObjectNameException;
0: import java.io.BufferedReader;
0: import java.io.InputStreamReader;
0: 
1: import junit.textui.TestRunner;
0: 
0:  * A test case of the various MBeans in ActiveMQ.
0:  * If you want to look at the various MBeans after the test has been run then
0:  * run this test case as a command line application.
1:     private static boolean waitForKeyPress;
0: 
1:     protected String clientID = "foo";
1:     /**
0:      * When you run this test case from the command line it will pause before terminating
0:      * so that you can look at the MBeans state for debugging purposes.
1:      */
1:     public static void main(String[] args) {
1:         waitForKeyPress = true;
1:         TestRunner.run(MBeanTest.class);
0:     public void testMBeans() throws Exception {
0:         assertCreateAndDestroyDurableSubscriptions();
0:         ObjectName queueViewMBeanName = assertRegisteredObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
1:         echo("Create QueueView MBean...");
/////////////////////////////////////////////////////////////////////////
0:         String[] messageIDs = new String[compdatalist.length];
0: 
1:         for (int i = 0; i < compdatalist.length; i++) {
0:             CompositeData cdata = compdatalist[i];
0: 
1:             if (i == 0) {
1:                 echo("Columns: " + cdata.getCompositeType().keySet());
0:             messageIDs[i] = (String) cdata.get("JMSMessageID");
1:             echo("message " + i + " : " + cdata.values());
0:         assertEquals("Queue size", 10, proxy.getQueueSize());
0: 
1:         String messageID = messageIDs[0];
1:         echo("Attempting to copy: " + messageID + " to destination: " + newDestinationName);
0:         assertEquals("Queue size", 10, proxy.getQueueSize());
0: 
1:         messageID = messageIDs[1];
1:         echo("Attempting to remove: " + messageID);
1:         proxy.removeMessage(messageID);
0: 
0:         assertEquals("Queue size", 9, proxy.getQueueSize());
0: 
1:         echo("Worked!");
0:     }
0: 
1:     protected void assertCreateAndDestroyDurableSubscriptions() throws Exception {
1:         // lets create a new topic
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         echo("Create QueueView MBean...");
0:         BrokerViewMBean broker = (BrokerViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0: 
1:         broker.addTopic(getDestinationString());
0: 
1:         assertEquals("Durable subscriber count", 0, broker.getDurableTopicSubscribers().length);
0: 
0:         ObjectName newTopicName = assertRegisteredObjectName(domain + ":Type=Topic,Destination=" + getDestinationString() + ",BrokerName=localhost");
0:         TopicViewMBean topic = (TopicViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, newTopicName, TopicViewMBean.class, true);
0:         topic.createDurableSubscriber(clientID, "subscriber1");
0:         topic.createDurableSubscriber(clientID, "subscriber2");
0:         assertEquals("Durable subscriber count", 2, broker.getDurableTopicSubscribers().length);
0: 
1:         // now lets try destroy it
0:         topic.destroyDurableSubscriber(clientID, "subscriber1");
0:         assertEquals("Durable subscriber count", 1, broker.getDurableTopicSubscribers().length);
0:     }
0: 
0:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
0:         ObjectName objectName = new ObjectName(name);
0:         if (mbeanServer.isRegistered(objectName)) {
0:             echo("Bean Registered: " + objectName);
0:         }
0:         else {
0:             fail("Could not find MBean!: " + objectName);
0:         }
1:         return objectName;
/////////////////////////////////////////////////////////////////////////
1:         if (waitForKeyPress) {
1:             // We are running from the command line so let folks browse the
1:             // mbeans...
1:             System.out.println();
1:             System.out.println("Press enter to terminate the program.");
1:             System.out.println("In the meantime you can use your JMX console to view the current MBeans");
1:             BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
1:             reader.readLine();
0:         }
0: 
/////////////////////////////////////////////////////////////////////////
0:         connection.setClientID(clientID);
commit:138d9cf
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.jmx;
0: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
0: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class MBeanTest extends EmbeddedBrokerTestSupport {
0: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
0: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
0:     protected int messageCount = 10;
0: 
0:     public void testDummy() throws Exception {
0:     }
0: 
0:     public void XXXX_testMBeans() throws Exception {
0:         connection = connectionFactory.createConnection();
0:         useConnection(connection);
0: 
0:         // test all the various MBeans now we have a producer, consumer and
0:         // messages on a queue
0:         assertQueueBrowseWorks();
0:     }
0: 
1:     protected void assertQueueBrowseWorks() throws Exception {
0: 
1:         Integer mbeancnt = mbeanServer.getMBeanCount();
1:         echo("Mbean count :" + mbeancnt);
0: 
0:         ObjectName queueViewMBeanName = new ObjectName(domain + ":Type=Queue,Destination=" + getDestinationString() + ",BrokerName=localhost");
0: 
0:         if (mbeanServer.isRegistered(queueViewMBeanName)) {
0:             echo("Bean Registered: " + queueViewMBeanName);
0:         }
0:         else {
0:             fail("Could not find MBean!: " + queueViewMBeanName);
0:         }
0: 
0:         echo("\nCreate QueueView MBean...");
0: 
0:         QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
0: 
1:         long concount = proxy.getConsumerCount();
1:         echo("Consumer Count :" + concount);
1:         long messcount = proxy.getQueueSize();
1:         echo("current number of messages in the queue :" + messcount);
0: 
0:         
0:         
1:         // lets browse
1:         CompositeData[] compdatalist = proxy.browse();
1:         if (compdatalist.length == 0) {
0:             fail("There is no message in the queue:");
0:         }
0:         else {
0:             for (int i = 0; i < compdatalist.length; i++) {
0:                 CompositeData cdata = compdatalist[i];
0:                 echo("message " + i + " : " + cdata.toString());
0:             }
0:         }
0: 
1:         TabularData table = proxy.browseAsTable();
1:         echo("Found tabular data: " + table);
1:         assertTrue("Table should not be empty!", table.size() > 0);
0:         
0: 
0:         /*
0:         String messageID = null;
1:         String newDestinationName = "queue://dummy.test.cheese";
1:         proxy.copyMessageTo(messageID, newDestinationName);
0:         proxy.removeMessage(messageID);
1:         */
0: 
0:     }
0: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         useTopic = false;
1:         super.setUp();
0:         mbeanServer = broker.getManagementContext().getMBeanServer();
0:     }
0: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
0:         }
1:         super.tearDown();
0:     }
0: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
0:         answer.setPersistent(false);
1:         answer.addConnector(bindAddress);
1:         return answer;
0:     }
0: 
0:     protected void useConnection(Connection connection) throws Exception {
0:         connection.setClientID("foo");
0:         connection.start();
0:         Session session = connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
0:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage("Message: " + i);
1:             producer.send(message);
0:         }
0:         Thread.sleep(1000);
0:     }
0: 
1:     protected void echo(String text) {
0:         System.out.println(text);
0:     }
0: }
author:Patrick Edward Lapus Villacorta
-------------------------------------------------------------------------------
commit:91bcbda
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Topic;
/////////////////////////////////////////////////////////////////////////
0:         assertConsumerCounts();
/////////////////////////////////////////////////////////////////////////
1:     protected void assertConsumerCounts() throws Exception {
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean broker = (BrokerViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
0: 
0:         //create 2 topics
1:         broker.addTopic(getDestinationString() + "1");
1:         broker.addTopic(getDestinationString() + "2");
0: 
0:         ObjectName topicObjName1 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination="+getDestinationString() + "1");
0:         ObjectName topicObjName2 = assertRegisteredObjectName(domain + ":Type=Topic,BrokerName=localhost,Destination="+getDestinationString() + "2");
0:         TopicViewMBean topic1 = (TopicViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName1, TopicViewMBean.class, true);
0:         TopicViewMBean topic2 = (TopicViewMBean) MBeanServerInvocationHandler.newProxyInstance(mbeanServer, topicObjName2, TopicViewMBean.class, true);
0: 
1:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
0: 
1:         String topicName = getDestinationString();
1:         String selector = null;
0: 
0:         //create 1 subscriber for each topic
1:         broker.createDurableSubscriber(clientID, "topic1.subscriber1", topicName + "1", selector);
1:         broker.createDurableSubscriber(clientID, "topic2.subscriber1", topicName + "2", selector);
0: 
1:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
0: 
0:         //create 1 more subscriber for topic1
1:         broker.createDurableSubscriber(clientID, "topic1.subscriber2", topicName + "1", selector);
0: 
1:         assertEquals("topic1 Durable subscriber count", 2, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
0: 
0:         //destroy topic1 subscriber
1:         broker.destroyDurableSubscriber(clientID, "topic1.subscriber1");
0: 
1:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 1, topic2.getConsumerCount());
0: 
1:         // destroy topic2 subscriber
1:         broker.destroyDurableSubscriber(clientID, "topic2.subscriber1");
0: 
1:         assertEquals("topic1 Durable subscriber count", 1, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
0: 
0:         //destroy remaining topic1 subscriber
1:         broker.destroyDurableSubscriber(clientID, "topic1.subscriber2");
0: 
1:         assertEquals("topic1 Durable subscriber count", 0, topic1.getConsumerCount());
1:         assertEquals("topic2 Durable subscriber count", 0, topic2.getConsumerCount());
0:     }
0: 
============================================================================