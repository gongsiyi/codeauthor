1:2769298: /**
1:2769298:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2769298:  * contributor license agreements.  See the NOTICE file distributed with
1:2769298:  * this work for additional information regarding copyright ownership.
1:2769298:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2769298:  * (the "License"); you may not use this file except in compliance with
1:2769298:  * the License.  You may obtain a copy of the License at
1:2769298:  *
1:2769298:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2769298:  *
1:2769298:  * Unless required by applicable law or agreed to in writing, software
1:2769298:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2769298:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2769298:  * See the License for the specific language governing permissions and
1:2769298:  * limitations under the License.
1:2769298:  */
1:2769298: package org.apache.activemq.thread;
1:2769298: 
1:2769298: import static org.junit.Assert.assertFalse;
1:2769298: import static org.junit.Assert.assertTrue;
1:2769298: 
1:2769298: import java.util.concurrent.CountDownLatch;
1:2769298: import java.util.concurrent.TimeUnit;
1:2769298: 
1:2769298: import org.junit.After;
1:2769298: import org.junit.Before;
1:2769298: import org.junit.Test;
1:2769298: 
1:2769298: public class SchedulerTest {
1:2769298: 
1:2769298:     private final static String schedulerName = "testScheduler";
1:2769298:     private Scheduler scheduler;
1:2769298: 
1:2769298:     @Before
1:2769298:     public void before() throws Exception {
1:2769298:         scheduler = new Scheduler(schedulerName);
1:2769298:         scheduler.start();
1:2769298:     }
1:2769298: 
1:2769298:     @After
1:2769298:     public void after() throws Exception {
1:2769298:         scheduler.stop();
1:2769298:     }
1:2769298: 
1:2769298:     @Test
1:2769298:     public void testExecutePeriodically() throws Exception {
1:2769298:         final CountDownLatch latch = new CountDownLatch(1);
1:2769298:         scheduler.executePeriodically(new CountDownRunnable(latch), 10);
1:2769298:         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
1:2769298:     }
1:2769298: 
1:2769298:     @Test
1:2769298:     public void executeAfterDelay() throws Exception {
1:2769298:         final CountDownLatch latch = new CountDownLatch(1);
1:2769298:         scheduler.executeAfterDelay(new CountDownRunnable(latch), 10);
1:2769298:         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
1:2769298:     }
1:2769298: 
1:2769298:     @Test
1:2769298:     public void testExecutePeriodicallyReplace() throws Exception {
1:2769298:         final CountDownLatch latch = new CountDownLatch(1);
1:2769298:         final CountDownRunnable task = new CountDownRunnable(latch);
1:2769298: 
1:2769298:         scheduler.executePeriodically(task, 500);
1:2769298:         scheduler.executePeriodically(task, 500);
1:2769298:         scheduler.cancel(task);
1:2769298: 
1:2769298:         //make sure the task never runs
1:2769298:         assertFalse(latch.await(1000, TimeUnit.MILLISECONDS));
1:2769298:     }
1:2769298: 
1:2769298:     private static class CountDownRunnable implements Runnable {
1:2769298:         final CountDownLatch latch;
1:2769298: 
1:2769298:         CountDownRunnable(final CountDownLatch latch) {
1:2769298:             this.latch = latch;
1:2769298:         }
1:2769298: 
1:2769298:         @Override
1:2769298:         public void run() {
1:2769298:             latch.countDown();
1:2769298:         }
1:2769298:     }
1:2769298: 
1:2769298: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2769298
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class SchedulerTest {
1: 
1:     private final static String schedulerName = "testScheduler";
1:     private Scheduler scheduler;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         scheduler = new Scheduler(schedulerName);
1:         scheduler.start();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         scheduler.stop();
1:     }
1: 
1:     @Test
1:     public void testExecutePeriodically() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         scheduler.executePeriodically(new CountDownRunnable(latch), 10);
1:         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
1:     }
1: 
1:     @Test
1:     public void executeAfterDelay() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         scheduler.executeAfterDelay(new CountDownRunnable(latch), 10);
1:         assertTrue(latch.await(5000, TimeUnit.MILLISECONDS));
1:     }
1: 
1:     @Test
1:     public void testExecutePeriodicallyReplace() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final CountDownRunnable task = new CountDownRunnable(latch);
1: 
1:         scheduler.executePeriodically(task, 500);
1:         scheduler.executePeriodically(task, 500);
1:         scheduler.cancel(task);
1: 
1:         //make sure the task never runs
1:         assertFalse(latch.await(1000, TimeUnit.MILLISECONDS));
1:     }
1: 
1:     private static class CountDownRunnable implements Runnable {
1:         final CountDownLatch latch;
1: 
1:         CountDownRunnable(final CountDownLatch latch) {
1:             this.latch = latch;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             latch.countDown();
1:         }
1:     }
1: 
1: }
============================================================================