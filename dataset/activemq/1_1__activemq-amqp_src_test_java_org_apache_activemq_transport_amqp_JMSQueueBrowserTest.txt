1:6ae169e: /*
1:6ae169e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ae169e:  * contributor license agreements.  See the NOTICE file distributed with
1:6ae169e:  * this work for additional information regarding copyright ownership.
1:6ae169e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ae169e:  * (the "License"); you may not use this file except in compliance with
1:6ae169e:  * the License.  You may obtain a copy of the License at
1:6ae169e:  *
1:6ae169e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ae169e:  *
1:6ae169e:  * Unless required by applicable law or agreed to in writing, software
1:6ae169e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ae169e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ae169e:  * See the License for the specific language governing permissions and
1:6ae169e:  * limitations under the License.
1:6ae169e:  */
1:6ae169e: package org.apache.activemq.transport.amqp;
1:6ae169e: 
1:6ae169e: import static org.junit.Assert.assertEquals;
1:6ae169e: import static org.junit.Assert.assertFalse;
1:6ae169e: import static org.junit.Assert.assertNotNull;
1:8448cf1: import static org.junit.Assert.assertTrue;
1:6ae169e: 
1:6ae169e: import java.util.Enumeration;
1:8448cf1: import java.util.concurrent.TimeUnit;
1:6ae169e: 
1:6ae169e: import javax.jms.Message;
1:8448cf1: import javax.jms.MessageConsumer;
1:8448cf1: import javax.jms.MessageProducer;
1:6ae169e: import javax.jms.Queue;
1:6ae169e: import javax.jms.QueueBrowser;
1:6ae169e: import javax.jms.Session;
1:8448cf1: import javax.jms.TextMessage;
1:6ae169e: 
1:6ae169e: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:6ae169e: import org.apache.activemq.junit.ActiveMQTestRunner;
1:6ae169e: import org.apache.activemq.junit.Repeat;
1:6ae169e: import org.apache.qpid.jms.JmsConnectionFactory;
1:6ae169e: import org.junit.Test;
1:6ae169e: import org.junit.runner.RunWith;
1:6ae169e: import org.slf4j.Logger;
1:6ae169e: import org.slf4j.LoggerFactory;
1:6ae169e: 
1:6ae169e: /**
1:6ae169e:  * Tests for various QueueBrowser scenarios with an AMQP JMS client.
1:6ae169e:  */
1:6ae169e: @RunWith(ActiveMQTestRunner.class)
1:6ae169e: public class JMSQueueBrowserTest extends JMSClientTestSupport {
1:6ae169e: 
1:6ae169e:     protected static final Logger LOG = LoggerFactory.getLogger(JMSClientTest.class);
1:6ae169e: 
1:6ae169e:     @Test(timeout = 60000)
1:8448cf1:     @Repeat(repetitions = 5)
1:6ae169e:     public void testBrowseAllInQueueZeroPrefetch() throws Exception {
1:6ae169e: 
1:6ae169e:         final int MSG_COUNT = 5;
1:6ae169e: 
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=0"));
1:6ae169e:         connection = cf.createConnection();
1:6ae169e:         connection.start();
1:6ae169e: 
1:6ae169e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ae169e:         assertNotNull(session);
1:6ae169e:         Queue queue = session.createQueue(getDestinationName());
1:6ae169e:         sendMessages(name.getMethodName(), MSG_COUNT, false);
1:6ae169e: 
1:6ae169e:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:6ae169e:         assertEquals(MSG_COUNT, proxy.getQueueSize());
1:6ae169e: 
1:6ae169e:         QueueBrowser browser = session.createBrowser(queue);
1:6ae169e:         assertNotNull(browser);
1:6ae169e:         Enumeration<?> enumeration = browser.getEnumeration();
1:6ae169e:         int count = 0;
1:6ae169e:         while (count < MSG_COUNT && enumeration.hasMoreElements()) {
1:6ae169e:             Message msg = (Message) enumeration.nextElement();
1:6ae169e:             assertNotNull(msg);
1:6ae169e:             LOG.debug("Recv: {}", msg);
1:6ae169e:             count++;
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         LOG.debug("Received all expected message, checking that hasMoreElements returns false");
1:6ae169e:         assertFalse(enumeration.hasMoreElements());
1:6ae169e:         assertEquals(5, count);
1:6ae169e:     }
1:6ae169e: 
1:8448cf1:     @Test(timeout = 40000)
1:8448cf1:     public void testCreateQueueBrowser() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         session.createConsumer(queue).close();
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(0, proxy.getQueueSize());
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 40000)
1:8448cf1:     public void testNoMessagesBrowserHasNoElements() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         session.createConsumer(queue).close();
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(0, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout=30000)
1:8448cf1:     public void testBroseOneInQueue() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         MessageProducer producer = session.createProducer(queue);
1:8448cf1:         producer.send(session.createTextMessage("hello"));
1:8448cf1:         producer.close();
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message m = (Message) enumeration.nextElement();
1:8448cf1:             assertTrue(m instanceof TextMessage);
1:8448cf1:             LOG.debug("Browsed message {} from Queue {}", m, queue);
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         browser.close();
1:8448cf1: 
1:8448cf1:         MessageConsumer consumer = session.createConsumer(queue);
1:8448cf1:         Message msg = consumer.receive(5000);
1:8448cf1:         assertNotNull(msg);
1:8448cf1:         assertTrue(msg instanceof TextMessage);
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:8448cf1:     @Repeat(repetitions = 5)
1:8448cf1:     public void testBrowseAllInQueue() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         sendMessages(name.getMethodName(), 5, false);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         int count = 0;
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message msg = (Message) enumeration.nextElement();
1:8448cf1:             assertNotNull(msg);
1:8448cf1:             LOG.debug("Recv: {}", msg);
1:8448cf1:             count++;
1:8448cf1:             TimeUnit.MILLISECONDS.sleep(50);
1:8448cf1:         }
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:         assertEquals(5, count);
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:8448cf1:     @Repeat(repetitions = 5)
1:8448cf1:     public void testBrowseAllInQueuePrefetchOne() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=1"));
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         sendMessages(name.getMethodName(), 5, false);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         int count = 0;
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message msg = (Message) enumeration.nextElement();
1:8448cf1:             assertNotNull(msg);
1:8448cf1:             LOG.debug("Recv: {}", msg);
1:8448cf1:             count++;
1:8448cf1:         }
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:         assertEquals(5, count);
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 40000)
1:8448cf1:     public void testBrowseAllInQueueTxSession() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         sendMessages(name.getMethodName(), 5, false);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         int count = 0;
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message msg = (Message) enumeration.nextElement();
1:8448cf1:             assertNotNull(msg);
1:8448cf1:             LOG.debug("Recv: {}", msg);
1:8448cf1:             count++;
1:8448cf1:         }
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:         assertEquals(5, count);
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 40000)
1:8448cf1:     public void testQueueBrowserInTxSessionLeavesOtherWorkUnaffected() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         sendMessages(name.getMethodName(), 5, false);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         // Send some TX work but don't commit.
1:8448cf1:         MessageProducer txProducer = session.createProducer(queue);
1:8448cf1:         for (int i = 0; i < 5; ++i) {
1:8448cf1:             txProducer.send(session.createMessage());
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         int count = 0;
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message msg = (Message) enumeration.nextElement();
1:8448cf1:             assertNotNull(msg);
1:8448cf1:             LOG.debug("Recv: {}", msg);
1:8448cf1:             count++;
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:         assertEquals(5, count);
1:8448cf1: 
1:8448cf1:         browser.close();
1:8448cf1: 
1:8448cf1:         // Now check that all browser work did not affect the session transaction.
1:8448cf1:         assertEquals(5, proxy.getQueueSize());
1:8448cf1:         session.commit();
1:8448cf1:         assertEquals(10, proxy.getQueueSize());
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:8448cf1:     public void testBrowseAllInQueueSmallPrefetch() throws Exception {
1:8448cf1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=5"));
1:8448cf1: 
1:8448cf1:         connection = cf.createConnection();
1:8448cf1:         connection.start();
1:8448cf1: 
1:8448cf1:         final int MSG_COUNT = 30;
1:8448cf1: 
1:8448cf1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8448cf1:         assertNotNull(session);
1:8448cf1:         Queue queue = session.createQueue(getDestinationName());
1:8448cf1:         sendMessages(name.getMethodName(), MSG_COUNT, false);
1:8448cf1: 
1:8448cf1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:8448cf1:         assertEquals(MSG_COUNT, proxy.getQueueSize());
1:8448cf1: 
1:8448cf1:         QueueBrowser browser = session.createBrowser(queue);
1:8448cf1:         assertNotNull(browser);
1:8448cf1:         Enumeration<?> enumeration = browser.getEnumeration();
1:8448cf1:         int count = 0;
1:8448cf1:         while (enumeration.hasMoreElements()) {
1:8448cf1:             Message msg = (Message) enumeration.nextElement();
1:8448cf1:             assertNotNull(msg);
1:8448cf1:             LOG.debug("Recv: {}", msg);
1:8448cf1:             count++;
1:8448cf1:         }
1:8448cf1:         assertFalse(enumeration.hasMoreElements());
1:8448cf1:         assertEquals(MSG_COUNT, count);
1:8448cf1:     }
1:8448cf1: 
1:6ae169e:     @Override
1:6ae169e:     protected boolean isUseOpenWireConnector() {
1:6ae169e:         return true;
1:6ae169e:     }
1:6ae169e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
1:     @Repeat(repetitions = 5)
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=0"));
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 40000)
1:     public void testCreateQueueBrowser() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         session.createConsumer(queue).close();
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(0, proxy.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 40000)
1:     public void testNoMessagesBrowserHasNoElements() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         session.createConsumer(queue).close();
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(0, proxy.getQueueSize());
1: 
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         assertFalse(enumeration.hasMoreElements());
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testBroseOneInQueue() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("hello"));
1:         producer.close();
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         while (enumeration.hasMoreElements()) {
1:             Message m = (Message) enumeration.nextElement();
1:             assertTrue(m instanceof TextMessage);
1:             LOG.debug("Browsed message {} from Queue {}", m, queue);
1:         }
1: 
1:         browser.close();
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(5000);
1:         assertNotNull(msg);
1:         assertTrue(msg instanceof TextMessage);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     @Repeat(repetitions = 5)
1:     public void testBrowseAllInQueue() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), 5, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(5, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:             TimeUnit.MILLISECONDS.sleep(50);
1:         }
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(5, count);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     @Repeat(repetitions = 5)
1:     public void testBrowseAllInQueuePrefetchOne() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=1"));
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), 5, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(5, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:         }
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(5, count);
1:     }
1: 
1:     @Test(timeout = 40000)
1:     public void testBrowseAllInQueueTxSession() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), 5, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(5, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:         }
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(5, count);
1:     }
1: 
1:     @Test(timeout = 40000)
1:     public void testQueueBrowserInTxSessionLeavesOtherWorkUnaffected() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI());
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), 5, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(5, proxy.getQueueSize());
1: 
1:         // Send some TX work but don't commit.
1:         MessageProducer txProducer = session.createProducer(queue);
1:         for (int i = 0; i < 5; ++i) {
1:             txProducer.send(session.createMessage());
1:         }
1: 
1:         assertEquals(5, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:         }
1: 
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(5, count);
1: 
1:         browser.close();
1: 
1:         // Now check that all browser work did not affect the session transaction.
1:         assertEquals(5, proxy.getQueueSize());
1:         session.commit();
1:         assertEquals(10, proxy.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBrowseAllInQueueSmallPrefetch() throws Exception {
1:         JmsConnectionFactory cf = new JmsConnectionFactory(getAmqpURI("jms.prefetchPolicy.all=5"));
1: 
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         final int MSG_COUNT = 30;
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), MSG_COUNT, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(MSG_COUNT, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:         }
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(MSG_COUNT, count);
1:     }
1: 
commit:6ae169e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.Enumeration;
1: 
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.junit.ActiveMQTestRunner;
1: import org.apache.activemq.junit.Repeat;
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests for various QueueBrowser scenarios with an AMQP JMS client.
1:  */
1: @RunWith(ActiveMQTestRunner.class)
1: public class JMSQueueBrowserTest extends JMSClientTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSClientTest.class);
1: 
1:     @Test(timeout = 60000)
0:     @Repeat(repetitions = 1)
1:     public void testBrowseAllInQueueZeroPrefetch() throws Exception {
1: 
1:         final int MSG_COUNT = 5;
1: 
0:         JmsConnectionFactory cf = new JmsConnectionFactory(getBrokerURI() + "?jms.prefetchPolicy.all=0");
1:         connection = cf.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         assertNotNull(session);
1:         Queue queue = session.createQueue(getDestinationName());
1:         sendMessages(name.getMethodName(), MSG_COUNT, false);
1: 
1:         QueueViewMBean proxy = getProxyToQueue(getDestinationName());
1:         assertEquals(MSG_COUNT, proxy.getQueueSize());
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         assertNotNull(browser);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int count = 0;
1:         while (count < MSG_COUNT && enumeration.hasMoreElements()) {
1:             Message msg = (Message) enumeration.nextElement();
1:             assertNotNull(msg);
1:             LOG.debug("Recv: {}", msg);
1:             count++;
1:         }
1: 
1:         LOG.debug("Received all expected message, checking that hasMoreElements returns false");
1:         assertFalse(enumeration.hasMoreElements());
1:         assertEquals(5, count);
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: }
============================================================================