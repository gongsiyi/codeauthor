1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
23:1a88ac6: 
1:1a88ac6: package org.apache.activemq.jaas;
1:1a88ac6: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.security.Principal;
1:1a88ac6: import java.util.HashMap;
1:1a88ac6: import java.util.HashSet;
1:1a88ac6: import java.util.Iterator;
1:1a88ac6: import java.util.List;
1:1a88ac6: import java.util.Set;
1:1a88ac6: import java.util.Vector;
1:1a88ac6: 
1:1a88ac6: import javax.security.auth.Subject;
1:1a88ac6: import javax.security.auth.login.LoginException;
1:1a88ac6: 
1:540dd5c: import junit.framework.TestCase;
1:540dd5c: 
1:1a88ac6: public class CertificateLoginModuleTest extends TestCase {
1:540dd5c: 
1:540dd5c:     private static final String USER_NAME = "testUser";
1:540dd5c:     private static final List<String> GROUP_NAMES = new Vector<String>();
1:540dd5c: 
1:1a88ac6:     private StubCertificateLoginModule loginModule;
1:540dd5c: 
1:1a88ac6:     private Subject subject;
1:540dd5c: 
1:1a88ac6:     public CertificateLoginModuleTest() {
1:540dd5c:         GROUP_NAMES.add("testGroup1");
1:540dd5c:         GROUP_NAMES.add("testGroup2");
1:540dd5c:         GROUP_NAMES.add("testGroup3");
1:540dd5c:         GROUP_NAMES.add("testGroup4");
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     protected void setUp() throws Exception {
1:1a88ac6:         subject = new Subject();
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     protected void tearDown() throws Exception {
1:1a88ac6:     }
1:540dd5c: 
1:540dd5c:     private void loginWithCredentials(String userName, Set<String> groupNames) throws LoginException {
1:540dd5c:         loginModule = new StubCertificateLoginModule(userName, new HashSet<String>(groupNames));
1:540dd5c:         JaasCertificateCallbackHandler callbackHandler = new JaasCertificateCallbackHandler(null);
1:540dd5c: 
1:1a88ac6:         loginModule.initialize(subject, callbackHandler, null, new HashMap());
1:1a88ac6: 
1:1a88ac6:         loginModule.login();
1:1a88ac6:         loginModule.commit();
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     private void checkPrincipalsMatch(Subject subject) {
1:1a88ac6:         boolean nameFound = false;
1:540dd5c:         boolean groupsFound[] = new boolean[GROUP_NAMES.size()];
1:1a88ac6:         for (int i = 0; i < groupsFound.length; ++i) {
1:1a88ac6:             groupsFound[i] = false;
1:1a88ac6:         }
1:540dd5c: 
1:540dd5c:         for (Iterator iter = subject.getPrincipals().iterator(); iter.hasNext();) {
1:540dd5c:             Principal currentPrincipal = (Principal)iter.next();
1:540dd5c: 
1:1a88ac6:             if (currentPrincipal instanceof UserPrincipal) {
1:540dd5c:                 if (((UserPrincipal)currentPrincipal).getName().equals(USER_NAME)) {
1:540dd5c:                     if (!nameFound) {
1:1a88ac6:                         nameFound = true;
1:1a88ac6:                     } else {
1:1a88ac6:                         fail("UserPrincipal found twice.");
1:1a88ac6:                     }
1:540dd5c: 
1:1a88ac6:                 } else {
1:1a88ac6:                     fail("Unknown UserPrincipal found.");
1:1a88ac6:                 }
1:540dd5c: 
1:1a88ac6:             } else if (currentPrincipal instanceof GroupPrincipal) {
1:540dd5c:                 int principalIdx = GROUP_NAMES.indexOf(((GroupPrincipal)currentPrincipal).getName());
1:540dd5c: 
1:1a88ac6:                 if (principalIdx < 0) {
1:1a88ac6:                     fail("Unknown GroupPrincipal found.");
1:1a88ac6:                 }
1:540dd5c: 
1:540dd5c:                 if (!groupsFound[principalIdx]) {
1:1a88ac6:                     groupsFound[principalIdx] = true;
1:1a88ac6:                 } else {
1:1a88ac6:                     fail("GroupPrincipal found twice.");
1:1a88ac6:                 }
1:1a88ac6:             } else {
1:1a88ac6:                 fail("Unknown Principal type found.");
1:1a88ac6:             }
1:1a88ac6:         }
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void testLoginSuccess() throws IOException {
1:1a88ac6:         try {
1:540dd5c:             loginWithCredentials(USER_NAME, new HashSet<String>(GROUP_NAMES));
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             fail("Unable to login: " + e.getMessage());
1:1a88ac6:         }
1:540dd5c: 
1:1a88ac6:         checkPrincipalsMatch(subject);
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     public void testLoginFailure() throws IOException {
1:1a88ac6:         boolean loginFailed = false;
1:540dd5c: 
1:1a88ac6:         try {
1:540dd5c:             loginWithCredentials(null, new HashSet<String>());
1:1a88ac6:         } catch (LoginException e) {
1:1a88ac6:             loginFailed = true;
1:1a88ac6:         }
1:540dd5c: 
1:1a88ac6:         if (!loginFailed) {
1:1a88ac6:             fail("Logged in with unknown certificate.");
1:1a88ac6:         }
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     public void testLogOut() throws IOException {
1:1a88ac6:         try {
1:540dd5c:             loginWithCredentials(USER_NAME, new HashSet<String>(GROUP_NAMES));
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             fail("Unable to login: " + e.getMessage());
1:1a88ac6:         }
1:540dd5c: 
1:1a88ac6:         loginModule.logout();
1:540dd5c: 
1:1a88ac6:         assertEquals("logout should have cleared Subject principals.", 0, subject.getPrincipals().size());
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
1: 
1:     private static final String USER_NAME = "testUser";
1:     private static final List<String> GROUP_NAMES = new Vector<String>();
1: 
1: 
1: 
1:         GROUP_NAMES.add("testGroup1");
1:         GROUP_NAMES.add("testGroup2");
1:         GROUP_NAMES.add("testGroup3");
1:         GROUP_NAMES.add("testGroup4");
1: 
1: 
1:     private void loginWithCredentials(String userName, Set<String> groupNames) throws LoginException {
1:         loginModule = new StubCertificateLoginModule(userName, new HashSet<String>(groupNames));
1:         JaasCertificateCallbackHandler callbackHandler = new JaasCertificateCallbackHandler(null);
1: 
1: 
1:         boolean groupsFound[] = new boolean[GROUP_NAMES.size()];
1: 
1:         for (Iterator iter = subject.getPrincipals().iterator(); iter.hasNext();) {
1:             Principal currentPrincipal = (Principal)iter.next();
1: 
1:                 if (((UserPrincipal)currentPrincipal).getName().equals(USER_NAME)) {
1:                     if (!nameFound) {
1: 
1: 
1:                 int principalIdx = GROUP_NAMES.indexOf(((GroupPrincipal)currentPrincipal).getName());
1: 
1: 
1:                 if (!groupsFound[principalIdx]) {
/////////////////////////////////////////////////////////////////////////
1: 
1:             loginWithCredentials(USER_NAME, new HashSet<String>(GROUP_NAMES));
1: 
1: 
1: 
1:             loginWithCredentials(null, new HashSet<String>());
1: 
1: 
1:             loginWithCredentials(USER_NAME, new HashSet<String>(GROUP_NAMES));
1: 
1: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.jaas;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.io.IOException;
0: import java.io.InputStream;
1: import java.security.Principal;
0: import java.security.cert.X509Certificate;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.Vector;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.login.LoginException;
1: 
1: public class CertificateLoginModuleTest extends TestCase {
0:     private final String userName = "testUser";
0:     private final List groupNames = new Vector();
1:     private StubCertificateLoginModule loginModule;
1:     
1:     private Subject subject;
1:     
1:     public CertificateLoginModuleTest() {
0:         groupNames.add("testGroup1");
0:         groupNames.add("testGroup2");
0:         groupNames.add("testGroup3");
0:         groupNames.add("testGroup4");
1:     }
1:     
1:     protected void setUp() throws Exception {
1:         subject = new Subject();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:     }
1:     
0:     private void loginWithCredentials(String userName, Set groupNames) throws LoginException {
0:         loginModule = new StubCertificateLoginModule(userName, new HashSet(groupNames));
0:         JaasCertificateCallbackHandler callbackHandler = new JaasCertificateCallbackHandler(null); 
1:         
1:         loginModule.initialize(subject, callbackHandler, null, new HashMap());
1: 
1:         loginModule.login();
1:         loginModule.commit();
1:     }
1:     
1:     private void checkPrincipalsMatch(Subject subject) {
1:         boolean nameFound = false;
0:         boolean groupsFound[] = new boolean[groupNames.size()];
1:         for (int i = 0; i < groupsFound.length; ++i) {
1:             groupsFound[i] = false;
1:         }
1:         
0:         for (Iterator iter = subject.getPrincipals().iterator(); iter.hasNext(); ) {
0:             Principal currentPrincipal = (Principal) iter.next();
1:             
1:             if (currentPrincipal instanceof UserPrincipal) {
0:                 if (((UserPrincipal)currentPrincipal).getName().equals(userName)) {
0:                     if (nameFound == false) {
1:                         nameFound = true;
1:                     } else {
1:                         fail("UserPrincipal found twice.");
1:                     }
1:                         
1:                 } else {
1:                     fail("Unknown UserPrincipal found.");
1:                 }
1:                     
1:             } else if (currentPrincipal instanceof GroupPrincipal) {
0:                 int principalIdx = groupNames.indexOf(((GroupPrincipal)currentPrincipal).getName());
1:                 
1:                 if (principalIdx < 0) {
1:                     fail("Unknown GroupPrincipal found.");
1:                 }
1:                 
0:                 if (groupsFound[principalIdx] == false) {
1:                     groupsFound[principalIdx] = true;
1:                 } else {
1:                     fail("GroupPrincipal found twice.");
1:                 }
1:             } else {
1:                 fail("Unknown Principal type found.");
1:             }
1:         }
1:     }
1:     
1:     public void testLoginSuccess() throws IOException {
1:         try {
0:             loginWithCredentials(userName, new HashSet(groupNames));
1:         } catch (Exception e) {
1:             fail("Unable to login: " + e.getMessage());
1:         }
1:         
1:         checkPrincipalsMatch(subject);
1:     }
1:     
1:     public void testLoginFailure() throws IOException {
1:         boolean loginFailed = false;
1:         
1:         try {
0:             loginWithCredentials(null, new HashSet());
1:         } catch (LoginException e) {
1:             loginFailed = true;
1:         }
1:         
1:         if (!loginFailed) {
1:             fail("Logged in with unknown certificate.");
1:         }
1:     }
1:     
1:     public void testLogOut() throws IOException {
1:         try {
0:             loginWithCredentials(userName, new HashSet(groupNames));
1:         } catch (Exception e) {
1:             fail("Unable to login: " + e.getMessage());
1:         }
1:         
1:         loginModule.logout();
1:         
1:         assertEquals("logout should have cleared Subject principals.", 0, subject.getPrincipals().size());
1:     }
1: }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b266786
/////////////////////////////////////////////////////////////////////////
0:     private static final String userName = "testUser";
0:     private static final List groupNames = new Vector();
============================================================================