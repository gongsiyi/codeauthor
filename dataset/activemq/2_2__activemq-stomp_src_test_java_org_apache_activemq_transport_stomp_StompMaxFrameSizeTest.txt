1:a7a3c78: /**
1:a7a3c78:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a7a3c78:  * contributor license agreements.  See the NOTICE file distributed with
1:a7a3c78:  * this work for additional information regarding copyright ownership.
1:a7a3c78:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a7a3c78:  * (the "License"); you may not use this file except in compliance with
1:a7a3c78:  * the License.  You may obtain a copy of the License at
1:a7a3c78:  *
1:a7a3c78:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a7a3c78:  *
1:a7a3c78:  * Unless required by applicable law or agreed to in writing, software
1:a7a3c78:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a7a3c78:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a7a3c78:  * See the License for the specific language governing permissions and
1:a7a3c78:  * limitations under the License.
1:a7a3c78:  */
1:a7a3c78: package org.apache.activemq.transport.stomp;
25:a7a3c78: 
1:a7a3c78: import static org.junit.Assert.assertEquals;
1:a7a3c78: import static org.junit.Assert.assertNotNull;
1:a7a3c78: import static org.junit.Assert.assertTrue;
1:a7a3c78: 
1:a7a3c78: import java.io.IOException;
1:a7a3c78: import java.net.Socket;
1:a7a3c78: import java.util.Arrays;
1:a7a3c78: import java.util.Collection;
1:a7a3c78: 
1:a7a3c78: import javax.net.SocketFactory;
1:a7a3c78: import javax.net.ssl.SSLSocketFactory;
1:a7a3c78: 
1:a7a3c78: import org.junit.Assume;
1:a7a3c78: import org.junit.Test;
1:a7a3c78: import org.junit.runner.RunWith;
1:a7a3c78: import org.junit.runners.Parameterized;
1:a7a3c78: import org.junit.runners.Parameterized.Parameters;
1:a7a3c78: 
1:a7a3c78: @RunWith(Parameterized.class)
1:a7a3c78: public class StompMaxFrameSizeTest extends StompTestSupport {
1:a7a3c78: 
1:a7a3c78:     enum TestType {FRAME_MAX_GREATER_THAN_HEADER_MAX, FRAME_MAX_LESS_THAN_HEADER_MAX, FRAME_MAX_LESS_THAN_ACTION_MAX};
1:a7a3c78: 
1:aedf4ea:     // set max data size higher than max frame size so that max frame size gets tested
1:a7a3c78:     private static final int MAX_DATA_SIZE = 100 * 1024;
1:aedf4ea:     private final TestType testType;
1:aedf4ea:     private final int maxFrameSize;
1:aedf4ea: 
1:a7a3c78:     /**
1:a7a3c78:      * This defines the different possible max header sizes for this test.
1:a7a3c78:      */
1:a7a3c78:     @Parameters
1:a7a3c78:     public static Collection<Object[]> data() {
1:a7a3c78:         return Arrays.asList(new Object[][] {
1:aedf4ea:                 // The maximum size exceeds the default max header size of 10 * 1024
1:a7a3c78:                 {TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX, 64 * 1024},
1:aedf4ea:                 // The maximum size is less than the default max header size of 10 * 1024
1:a7a3c78:                 {TestType.FRAME_MAX_LESS_THAN_HEADER_MAX, 5 * 1024},
1:aedf4ea:                 // The maximum size is less than the default max action size of 1024
1:a7a3c78:                 {TestType.FRAME_MAX_LESS_THAN_ACTION_MAX, 512}
1:a7a3c78:         });
3:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     public StompMaxFrameSizeTest(TestType testType, int maxFrameSize) {
1:a7a3c78:         this.testType = testType;
1:a7a3c78:         this.maxFrameSize = maxFrameSize;
1:a7a3c78:     }
1:a7a3c78: 
2:a7a3c78:     @Override
1:540a66b:     protected boolean isUseSslConnector() {
1:540a66b:         return true;
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Override
1:540a66b:     protected boolean isUseNioConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:a7a3c78: 
1:540a66b:     @Override
1:540a66b:     protected boolean isUseNioPlusSslConnector() {
1:540a66b:         return true;
1:540a66b:     }
1:540a66b: 
1:540a66b:     @Override
1:540a66b:     protected String getAdditionalConfig() {
1:f37b005:         return "?wireFormat.maxDataLength=" + MAX_DATA_SIZE + "&wireFormat.maxFrameSize=" + maxFrameSize;
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     /**
1:a7a3c78:      * These tests should cause a Stomp error because the body size is greater than the
1:a7a3c78:      * max allowed frame size
1:a7a3c78:      */
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedBodyOnPlainSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(port, false, maxFrameSize + 100);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedBodyOnNioSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(nioPort, false, maxFrameSize + 100);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedBodyOnSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(sslPort, true, maxFrameSize + 100);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedBodyOnNioSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(nioSslPort, true, maxFrameSize + 100);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     /**
1:a7a3c78:      * These tests should cause a Stomp error because even though the body size is less than max frame size,
1:a7a3c78:      * the action and headers plus data size should cause a max frame size failure
1:a7a3c78:      */
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedTotalFrameOnPlainSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(port, false, maxFrameSize - 50);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedTotalFrameOnNioSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(nioPort, false, maxFrameSize - 50);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedTotalFrameOnSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(sslPort, true, maxFrameSize - 50);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedTotalFrameOnNioSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doOversizedTestMessage(nioSslPort, true, maxFrameSize - 50);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     /**
1:a7a3c78:      * These tests will test a successful Stomp message when the total size is than max frame size
1:a7a3c78:      */
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testUndersizedTotalFrameOnPlainSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doUndersizedTestMessage(port, false);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testUndersizedTotalFrameOnNioSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doUndersizedTestMessage(nioPort, false);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testUndersizedTotalFrameOnSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doUndersizedTestMessage(sslPort, true);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testUndersizedTotalFrameOnNioSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:a7a3c78:         doUndersizedTestMessage(nioSslPort, true);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     /**
1:a7a3c78:      *  These tests test that a Stomp error occurs if the action size exceeds maxFrameSize
1:a7a3c78:      *  when the maxFrameSize length is less than the default max action length
1:a7a3c78:      */
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedActionOnPlainSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:a7a3c78:         doTestOversizedAction(port, false);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedActionOnNioSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:a7a3c78:         doTestOversizedAction(nioPort, false);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedActionOnSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:a7a3c78:         doTestOversizedAction(sslPort, true);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedActionOnNioSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:a7a3c78:         doTestOversizedAction(nioSslPort, true);
1:a7a3c78:     }
1:aedf4ea: 
1:aedf4ea: 
1:a7a3c78:     /**
1:a7a3c78:      *  These tests will test that a Stomp error occurs if the header size exceeds maxFrameSize
1:a7a3c78:      *  when the maxFrameSize length is less than the default max header length
1:a7a3c78:      */
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedHeadersOnPlainSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:a7a3c78:         doTestOversizedHeaders(port, false);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedHeadersOnNioSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:a7a3c78:         doTestOversizedHeaders(nioPort, false);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedHeadersOnSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:a7a3c78:         doTestOversizedHeaders(sslPort, true);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     @Test(timeout = 60000)
1:a7a3c78:     public void testOversizedHeadersOnNioSslSocket() throws Exception {
1:a7a3c78:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:a7a3c78:         doTestOversizedHeaders(nioSslPort, true);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     protected void doTestOversizedAction(int port, boolean useSsl) throws Exception {
1:a7a3c78:         initializeStomp(port, useSsl);
1:a7a3c78: 
1:a7a3c78:         char[] actionArray = new char[maxFrameSize + 100];
1:a7a3c78:         Arrays.fill(actionArray, 'A');
1:a7a3c78:         String action = new String(actionArray);
1:aedf4ea: 
1:a7a3c78:         String frame = action + "\n" + "destination:/queue/" + getQueueName() + "\n\n" + "body" + Stomp.NULL;
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78: 
1:a7a3c78:         StompFrame received = stompConnection.receive(500000);
1:a7a3c78:         assertNotNull(received);
1:a7a3c78:         assertEquals("ERROR", received.getAction());
1:a7a3c78:         assertTrue(received.getBody().contains("maximum frame size"));
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     protected void doTestOversizedHeaders(int port, boolean useSsl) throws Exception {
1:a7a3c78:         initializeStomp(port, useSsl);
1:aedf4ea: 
1:a7a3c78:         StringBuilder headers = new StringBuilder(maxFrameSize + 100);
1:a7a3c78:         int i = 0;
1:a7a3c78:         while (headers.length() < maxFrameSize + 1) {
1:a7a3c78:             headers.append("key" + i++ + ":value\n");
1:a7a3c78:         }
1:aedf4ea: 
1:a7a3c78:         String frame = "SEND\n" + headers.toString() + "\n" + "destination:/queue/" + getQueueName() +
1:a7a3c78:                 headers.toString() + "\n\n" + "body" + Stomp.NULL;
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78: 
1:a7a3c78:         StompFrame received = stompConnection.receive(5000);
1:a7a3c78:         assertNotNull(received);
1:a7a3c78:         assertEquals("ERROR", received.getAction());
1:a7a3c78:         assertTrue(received.getBody().contains("maximum frame size"));
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     protected void doOversizedTestMessage(int port, boolean useSsl, int dataSize) throws Exception {
1:a7a3c78:         initializeStomp(port, useSsl);
1:a7a3c78: 
1:a7a3c78:         int size = dataSize + 100;
1:a7a3c78:         char[] bigBodyArray = new char[size];
1:a7a3c78:         Arrays.fill(bigBodyArray, 'a');
1:a7a3c78:         String bigBody = new String(bigBodyArray);
1:a7a3c78: 
1:a7a3c78:         String frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:a7a3c78: 
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78: 
1:a7a3c78:         StompFrame received = stompConnection.receive(5000);
1:a7a3c78:         assertNotNull(received);
1:a7a3c78:         assertEquals("ERROR", received.getAction());
1:a7a3c78:         assertTrue(received.getBody().contains("maximum frame size"));
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     protected void doUndersizedTestMessage(int port, boolean useSsl) throws Exception {
1:a7a3c78:         initializeStomp(port, useSsl);
1:a7a3c78: 
1:a7a3c78:         int size = 100;
1:a7a3c78:         char[] bigBodyArray = new char[size];
1:a7a3c78:         Arrays.fill(bigBodyArray, 'a');
1:a7a3c78:         String bigBody = new String(bigBodyArray);
1:a7a3c78: 
1:a7a3c78:         String frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:a7a3c78: 
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78: 
1:a7a3c78:         StompFrame received = stompConnection.receive();
1:a7a3c78:         assertNotNull(received);
1:a7a3c78:         assertEquals("MESSAGE", received.getAction());
1:a7a3c78:         assertEquals(bigBody, received.getBody());
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     protected StompConnection stompConnect(int port, boolean ssl) throws Exception {
1:a7a3c78:         if (stompConnection == null) {
1:a7a3c78:             stompConnection = new StompConnection();
1:a7a3c78:         }
1:a7a3c78: 
1:a7a3c78:         Socket socket = null;
1:a7a3c78:         if (ssl) {
1:a7a3c78:             socket = createSslSocket(port);
1:a7a3c78:         } else {
1:a7a3c78:             socket = createSocket(port);
1:a7a3c78:         }
1:a7a3c78: 
1:a7a3c78:         stompConnection.open(socket);
1:a7a3c78: 
1:a7a3c78:         return stompConnection;
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     protected void initializeStomp(int port, boolean useSsl) throws Exception{
1:a7a3c78:         stompConnect(port, useSsl);
1:aedf4ea: 
1:a7a3c78:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78: 
1:a7a3c78:         frame = stompConnection.receiveFrame();
1:a7a3c78:         assertTrue(frame.startsWith("CONNECTED"));
1:a7a3c78: 
1:a7a3c78:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:a7a3c78:         stompConnection.sendFrame(frame);
1:a7a3c78:     }
1:aedf4ea: 
1:a7a3c78:     protected Socket createSocket(int port) throws IOException {
1:a7a3c78:         return new Socket("127.0.0.1", port);
1:a7a3c78:     }
1:a7a3c78: 
1:a7a3c78:     protected Socket createSslSocket(int port) throws IOException {
1:a7a3c78:         SocketFactory factory = SSLSocketFactory.getDefault();
1:a7a3c78:         return factory.createSocket("127.0.0.1", port);
1:a7a3c78:     }
1:a7a3c78: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f37b005
/////////////////////////////////////////////////////////////////////////
1:         return "?wireFormat.maxDataLength=" + MAX_DATA_SIZE + "&wireFormat.maxFrameSize=" + maxFrameSize;
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
0:         return "?transport.maxDataLength=" + MAX_DATA_SIZE + "&transport.maxFrameSize=" + maxFrameSize;
commit:aedf4ea
/////////////////////////////////////////////////////////////////////////
1:     // set max data size higher than max frame size so that max frame size gets tested
1:     private final TestType testType;
1:     private final int maxFrameSize;
1: 
1:                 // The maximum size exceeds the default max header size of 10 * 1024
1:                 // The maximum size is less than the default max header size of 10 * 1024
1:                 // The maximum size is less than the default max action size of 1024
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a7a3c78
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
0: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Assume;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class StompMaxFrameSizeTest extends StompTestSupport {
1: 
1:     enum TestType {FRAME_MAX_GREATER_THAN_HEADER_MAX, FRAME_MAX_LESS_THAN_HEADER_MAX, FRAME_MAX_LESS_THAN_ACTION_MAX};
1: 
0:     //set max data size higher than max frame size so that max frame size gets tested
1:     private static final int MAX_DATA_SIZE = 100 * 1024;
0:     private StompConnection connection;
0:     private TestType testType;
0:     private int maxFrameSize;
1:     
1:     /**
1:      * This defines the different possible max header sizes for this test.
1:      */
1:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
0:                 //The maximum size exceeds the default max header size of 10 * 1024
1:                 {TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX, 64 * 1024},
0:                 //The maximum size is less than the default max header size of 10 * 1024
1:                 {TestType.FRAME_MAX_LESS_THAN_HEADER_MAX, 5 * 1024},
0:                 //The maximum size is less than the default max action size of 1024
1:                 {TestType.FRAME_MAX_LESS_THAN_ACTION_MAX, 512}
1:         });
1:     }
1:     
1:     public StompMaxFrameSizeTest(TestType testType, int maxFrameSize) {
1:         this.testType = testType;
1:         this.maxFrameSize = maxFrameSize;
1:     }
1: 
1:     @Override
0:     public void setUp() throws Exception {
0:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
0:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
0:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
0:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
0:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
0:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
0:         super.setUp();
1:     }
1: 
1:     @Override
0:     public void tearDown() throws Exception {
0:         if (connection != null) {
0:             try {
0:                 connection.close();
0:             } catch (Throwable ex) {}
1:         }
0:         super.tearDown();
1:     }
1: 
1:     @Override
0:     protected void addStompConnector() throws Exception {
0:         TransportConnector connector = null;
1: 
0:         connector = brokerService.addConnector("stomp+ssl://0.0.0.0:"+ sslPort +
0:             "?transport.maxDataLength=" + MAX_DATA_SIZE + "&transport.maxFrameSize=" + maxFrameSize);
0:         sslPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp://0.0.0.0:" + port +
0:             "?transport.maxDataLength=" + MAX_DATA_SIZE + "&transport.maxFrameSize=" + maxFrameSize);
0:         port = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio://0.0.0.0:" + nioPort +
0:             "?transport.maxDataLength=" + MAX_DATA_SIZE + "&transport.maxFrameSize=" + maxFrameSize);
0:         nioPort = connector.getConnectUri().getPort();
0:         connector = brokerService.addConnector("stomp+nio+ssl://0.0.0.0:" + nioSslPort +
0:             "?transport.maxDataLength=" + MAX_DATA_SIZE + "&transport.maxFrameSize=" + maxFrameSize);
0:         nioSslPort = connector.getConnectUri().getPort();
1:     }
1: 
1:     /**
1:      * These tests should cause a Stomp error because the body size is greater than the
1:      * max allowed frame size
1:      */
1:     
1:     @Test(timeout = 60000)
1:     public void testOversizedBodyOnPlainSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(port, false, maxFrameSize + 100);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedBodyOnNioSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(nioPort, false, maxFrameSize + 100);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedBodyOnSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(sslPort, true, maxFrameSize + 100);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedBodyOnNioSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(nioSslPort, true, maxFrameSize + 100);
1:     }
1:     
1: 
1:     /**
1:      * These tests should cause a Stomp error because even though the body size is less than max frame size,
1:      * the action and headers plus data size should cause a max frame size failure
1:      */
1:     @Test(timeout = 60000)
1:     public void testOversizedTotalFrameOnPlainSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(port, false, maxFrameSize - 50);
1:     }
1:     
1:     @Test(timeout = 60000)
1:     public void testOversizedTotalFrameOnNioSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(nioPort, false, maxFrameSize - 50);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedTotalFrameOnSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(sslPort, true, maxFrameSize - 50);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedTotalFrameOnNioSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doOversizedTestMessage(nioSslPort, true, maxFrameSize - 50);
1:     }
1:     
1:     
1:     /**
1:      * These tests will test a successful Stomp message when the total size is than max frame size
1:      */
1:     @Test(timeout = 60000)
1:     public void testUndersizedTotalFrameOnPlainSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doUndersizedTestMessage(port, false);
1:     }
1:     
1:     @Test(timeout = 60000)
1:     public void testUndersizedTotalFrameOnNioSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doUndersizedTestMessage(nioPort, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUndersizedTotalFrameOnSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doUndersizedTestMessage(sslPort, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUndersizedTotalFrameOnNioSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_GREATER_THAN_HEADER_MAX);
1:         doUndersizedTestMessage(nioSslPort, true);
1:     }
1:     
1:     /**
1:      *  These tests test that a Stomp error occurs if the action size exceeds maxFrameSize
1:      *  when the maxFrameSize length is less than the default max action length
1:      */
1:     
1:     @Test(timeout = 60000)
1:     public void testOversizedActionOnPlainSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:         doTestOversizedAction(port, false);
1:     }
1:     
1:     @Test(timeout = 60000)
1:     public void testOversizedActionOnNioSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:         doTestOversizedAction(nioPort, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedActionOnSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:         doTestOversizedAction(sslPort, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedActionOnNioSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_ACTION_MAX);
1:         doTestOversizedAction(nioSslPort, true);
1:     }
1:     
1:     
1:     /**
1:      *  These tests will test that a Stomp error occurs if the header size exceeds maxFrameSize
1:      *  when the maxFrameSize length is less than the default max header length
1:      */
1:     @Test(timeout = 60000)
1:     public void testOversizedHeadersOnPlainSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:         doTestOversizedHeaders(port, false);
1:     }
1:     
1:     @Test(timeout = 60000)
1:     public void testOversizedHeadersOnNioSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:         doTestOversizedHeaders(nioPort, false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedHeadersOnSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:         doTestOversizedHeaders(sslPort, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOversizedHeadersOnNioSslSocket() throws Exception {
1:         Assume.assumeTrue(testType == TestType.FRAME_MAX_LESS_THAN_HEADER_MAX);
1:         doTestOversizedHeaders(nioSslPort, true);
1:     }
1:     
1:     
1:     protected void doTestOversizedAction(int port, boolean useSsl) throws Exception {
1:         initializeStomp(port, useSsl);
1: 
1:         char[] actionArray = new char[maxFrameSize + 100];
1:         Arrays.fill(actionArray, 'A');
1:         String action = new String(actionArray);
1:         
1:         String frame = action + "\n" + "destination:/queue/" + getQueueName() + "\n\n" + "body" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive(500000);
1:         assertNotNull(received);
1:         assertEquals("ERROR", received.getAction());
1:         assertTrue(received.getBody().contains("maximum frame size"));
1:     }
1:     
1:     protected void doTestOversizedHeaders(int port, boolean useSsl) throws Exception {
1:         initializeStomp(port, useSsl);
1:         
1:         StringBuilder headers = new StringBuilder(maxFrameSize + 100);
1:         int i = 0;
1:         while (headers.length() < maxFrameSize + 1) {
1:             headers.append("key" + i++ + ":value\n");
1:         }
1:         
1:         String frame = "SEND\n" + headers.toString() + "\n" + "destination:/queue/" + getQueueName() +
1:                 headers.toString() + "\n\n" + "body" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive(5000);
1:         assertNotNull(received);
1:         assertEquals("ERROR", received.getAction());
1:         assertTrue(received.getBody().contains("maximum frame size"));
1:     }
1: 
1:     protected void doOversizedTestMessage(int port, boolean useSsl, int dataSize) throws Exception {
1:         initializeStomp(port, useSsl);
1: 
1:         int size = dataSize + 100;
1:         char[] bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         String bigBody = new String(bigBodyArray);
1: 
1:         String frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive(5000);
1:         assertNotNull(received);
1:         assertEquals("ERROR", received.getAction());
1:         assertTrue(received.getBody().contains("maximum frame size"));
1:     }
1: 
1:     protected void doUndersizedTestMessage(int port, boolean useSsl) throws Exception {
1:         initializeStomp(port, useSsl);
1: 
1:         int size = 100;
1:         char[] bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         String bigBody = new String(bigBodyArray);
1: 
1:         String frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertNotNull(received);
1:         assertEquals("MESSAGE", received.getAction());
1:         assertEquals(bigBody, received.getBody());
1:     }
1:     
1:     protected StompConnection stompConnect(int port, boolean ssl) throws Exception {
1:         if (stompConnection == null) {
1:             stompConnection = new StompConnection();
1:         }
1: 
1:         Socket socket = null;
1:         if (ssl) {
1:             socket = createSslSocket(port);
1:         } else {
1:             socket = createSocket(port);
1:         }
1: 
1:         stompConnection.open(socket);
1: 
1:         return stompConnection;
1:     }
1: 
1:     protected void initializeStomp(int port, boolean useSsl) throws Exception{
1:         stompConnect(port, useSsl);
1:         
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1:     
1:     protected Socket createSocket(int port) throws IOException {
1:         return new Socket("127.0.0.1", port);
1:     }
1: 
1:     protected Socket createSslSocket(int port) throws IOException {
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket("127.0.0.1", port);
1:     }
1: }
============================================================================