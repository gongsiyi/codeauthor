1:913f644: /**
1:913f644:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:913f644:  * contributor license agreements.  See the NOTICE file distributed with
1:913f644:  * this work for additional information regarding copyright ownership.
1:913f644:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:913f644:  * (the "License"); you may not use this file except in compliance with
1:913f644:  * the License.  You may obtain a copy of the License at
1:913f644:  *
1:913f644:  *      http://www.apache.org/licenses/LICENSE-2.0
1:913f644:  *
1:913f644:  * Unless required by applicable law or agreed to in writing, software
1:913f644:  * distributed under the License is distributed on an "AS IS" BASIS,
1:913f644:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:913f644:  * See the License for the specific language governing permissions and
1:913f644:  * limitations under the License.
1:913f644:  */
1:913f644: package org.apache.activemq.transport.ws;
1:913f644: 
1:913f644: import static org.junit.Assert.assertEquals;
1:913f644: 
1:913f644: import java.io.IOException;
1:913f644: import java.util.concurrent.TimeUnit;
1:913f644: 
1:913f644: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:913f644: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:913f644: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:913f644: import org.junit.After;
1:913f644: import org.junit.Before;
1:913f644: import org.junit.Test;
1:913f644: 
1:913f644: public class MQTTWSSubProtocolTest extends WSTransportTestSupport {
1:913f644: 
1:913f644:     protected WebSocketClient wsClient;
1:913f644:     protected MQTTWSConnection wsMQTTConnection;
1:913f644:     protected ClientUpgradeRequest request;
1:913f644: 
1:913f644:     @Override
1:913f644:     @Before
1:913f644:     public void setUp() throws Exception {
1:913f644:         super.setUp();
1:913f644: 
1:913f644:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:913f644:         wsClient.start();
1:913f644:     }
1:913f644: 
1:913f644:     @Override
1:913f644:     @After
1:913f644:     public void tearDown() throws Exception {
1:913f644:         if (wsMQTTConnection != null) {
1:913f644:             wsMQTTConnection.close();
1:913f644:             wsMQTTConnection = null;
1:913f644:             wsClient = null;
1:913f644:         }
1:913f644: 
1:913f644:         super.tearDown();
1:913f644:     }
1:913f644: 
1:913f644:     @Test(timeout = 60000)
1:913f644:     public void testConnectv31() throws Exception {
1:913f644:         connect("mqttv3.1");
1:913f644:         wsMQTTConnection.connect();
1:913f644:         assertEquals("mqttv3.1", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:913f644:     }
1:913f644: 
1:913f644:     @Test(timeout = 60000)
1:913f644:     public void testConnectMqtt() throws Exception {
1:913f644:         connect("mqtt");
1:913f644:         wsMQTTConnection.connect();
1:913f644:         assertEquals("mqtt", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:913f644:     }
1:913f644: 
1:913f644:     @Test(timeout = 60000)
1:913f644:     public void testConnectMultiple() throws Exception {
1:913f644:         connect("mqtt,mqttv3.1");
1:913f644:         wsMQTTConnection.connect();
1:913f644:         assertEquals("mqttv3.1", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:913f644:     }
1:913f644: 
1:913f644:     protected void connect(String subProtocol) throws Exception {
1:913f644:         request = new ClientUpgradeRequest();
1:913f644:         if (subProtocol != null) {
1:913f644:             request.setSubProtocols(subProtocol);
1:913f644:         }
1:913f644: 
1:913f644:         wsMQTTConnection = new MQTTWSConnection();
1:913f644: 
1:913f644:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
1:913f644:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:913f644:             throw new IOException("Could not connect to MQTT WS endpoint");
1:913f644:         }
1:913f644:     }
1:913f644: 
1:913f644: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:913f644
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MQTTWSSubProtocolTest extends WSTransportTestSupport {
1: 
1:     protected WebSocketClient wsClient;
1:     protected MQTTWSConnection wsMQTTConnection;
1:     protected ClientUpgradeRequest request;
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:         wsClient.start();
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (wsMQTTConnection != null) {
1:             wsMQTTConnection.close();
1:             wsMQTTConnection = null;
1:             wsClient = null;
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectv31() throws Exception {
1:         connect("mqttv3.1");
1:         wsMQTTConnection.connect();
1:         assertEquals("mqttv3.1", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectMqtt() throws Exception {
1:         connect("mqtt");
1:         wsMQTTConnection.connect();
1:         assertEquals("mqtt", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnectMultiple() throws Exception {
1:         connect("mqtt,mqttv3.1");
1:         wsMQTTConnection.connect();
1:         assertEquals("mqttv3.1", wsMQTTConnection.getConnection().getUpgradeResponse().getAcceptedSubProtocol());
1:     }
1: 
1:     protected void connect(String subProtocol) throws Exception {
1:         request = new ClientUpgradeRequest();
1:         if (subProtocol != null) {
1:             request.setSubProtocols(subProtocol);
1:         }
1: 
1:         wsMQTTConnection = new MQTTWSConnection();
1: 
1:         wsClient.connect(wsMQTTConnection, wsConnectUri, request);
1:         if (!wsMQTTConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1:     }
1: 
1: }
============================================================================