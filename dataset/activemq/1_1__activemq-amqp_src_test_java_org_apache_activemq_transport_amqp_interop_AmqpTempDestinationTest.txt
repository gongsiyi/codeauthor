1:10fc397: /*
1:8e6a404:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e6a404:  * contributor license agreements.  See the NOTICE file distributed with
1:8e6a404:  * this work for additional information regarding copyright ownership.
1:8e6a404:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e6a404:  * (the "License"); you may not use this file except in compliance with
1:8e6a404:  * the License.  You may obtain a copy of the License at
1:8e6a404:  *
1:8e6a404:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e6a404:  *
1:8e6a404:  * Unless required by applicable law or agreed to in writing, software
1:8e6a404:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e6a404:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e6a404:  * See the License for the specific language governing permissions and
1:8e6a404:  * limitations under the License.
1:8e6a404:  */
1:8e6a404: package org.apache.activemq.transport.amqp.interop;
1:8e6a404: 
1:3306467: import static org.apache.activemq.transport.amqp.AmqpSupport.LIFETIME_POLICY;
1:8e6a404: import static org.apache.activemq.transport.amqp.AmqpSupport.TEMP_QUEUE_CAPABILITY;
1:8e6a404: import static org.apache.activemq.transport.amqp.AmqpSupport.TEMP_TOPIC_CAPABILITY;
1:8e6a404: import static org.junit.Assert.assertEquals;
1:8e6a404: import static org.junit.Assert.assertNotNull;
1:10fc397: import static org.junit.Assert.assertTrue;
1:b313209: import static org.junit.Assert.fail;
1:8e6a404: 
1:8e6a404: import java.util.HashMap;
1:8e6a404: import java.util.Map;
1:27d9555: import java.util.concurrent.TimeUnit;
1:8e6a404: 
1:8e6a404: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:10fc397: import org.apache.activemq.transport.amqp.AmqpSupport;
1:8e6a404: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:8e6a404: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:8e6a404: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:27d9555: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:85d9d4e: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:8e6a404: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:8e6a404: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:8e6a404: import org.apache.qpid.proton.amqp.Symbol;
1:8e6a404: import org.apache.qpid.proton.amqp.messaging.DeleteOnClose;
1:85d9d4e: import org.apache.qpid.proton.amqp.messaging.Source;
1:8e6a404: import org.apache.qpid.proton.amqp.messaging.Target;
1:8e6a404: import org.apache.qpid.proton.amqp.messaging.TerminusDurability;
1:8e6a404: import org.apache.qpid.proton.amqp.messaging.TerminusExpiryPolicy;
1:8e6a404: import org.junit.Test;
1:8e6a404: 
2:8e6a404: /**
1:8e6a404:  * Tests for JMS temporary destination mappings to AMQP
1:8e6a404:  */
1:8e6a404: public class AmqpTempDestinationTest extends AmqpClientTestSupport {
1:8e6a404: 
1:8e6a404:     @Test(timeout = 60000)
1:b313209:     public void testCannotCreateSenderWithNamedTempQueue() throws Exception {
1:b313209:         doTestCannotCreateSenderWithNamedTempDestination(false);
1:b313209:     }
1:b313209: 
1:b313209:     @Test(timeout = 60000)
1:b313209:     public void testCannotCreateSenderWithNamedTempTopic() throws Exception {
1:b313209:         doTestCannotCreateSenderWithNamedTempDestination(true);
1:b313209:     }
1:b313209: 
1:b313209:     protected void doTestCannotCreateSenderWithNamedTempDestination(boolean topic) throws Exception {
1:b313209: 
1:b313209:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b313209:         AmqpSession session = connection.createSession();
1:b313209: 
1:b313209:         String address = null;
1:b313209:         if (topic) {
1:b313209:             address = "temp-topic://" + getTestName();
1:b313209:         } else {
1:b313209:             address = "temp-queue://" + getTestName();
1:b313209:         }
1:b313209: 
1:b313209:         try {
1:b313209:             session.createSender(address);
1:b313209:             fail("Should not be able to create sender to a temp destination that doesn't exist.");
1:b313209:         } catch (Exception ex) {
1:b313209:             LOG.info("Error creating sender: {}", ex.getMessage());
1:b313209:         }
1:b313209:     }
1:b313209: 
1:b313209:     @Test(timeout = 60000)
1:b313209:     public void testCanntCreateReceverWithNamedTempQueue() throws Exception {
1:b313209:         doTestCannotCreateReceiverWithNamedTempDestination(false);
1:b313209:     }
1:b313209: 
1:b313209:     @Test(timeout = 60000)
1:b313209:     public void testCannotCreateReceiverWithNamedTempTopic() throws Exception {
1:b313209:         doTestCannotCreateReceiverWithNamedTempDestination(true);
1:b313209:     }
1:b313209: 
1:b313209:     protected void doTestCannotCreateReceiverWithNamedTempDestination(boolean topic) throws Exception {
1:b313209: 
1:b313209:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b313209:         AmqpSession session = connection.createSession();
1:b313209: 
1:b313209:         String address = null;
1:b313209:         if (topic) {
1:b313209:             address = "temp-topic://" + getTestName();
1:b313209:         } else {
1:b313209:             address = "temp-queue://" + getTestName();
1:b313209:         }
1:b313209: 
1:b313209:         try {
1:b313209:             session.createReceiver(address);
1:b313209:             fail("Should not be able to create sender to a temp destination that doesn't exist.");
1:b313209:         } catch (Exception ex) {
1:b313209:             LOG.info("Error creating sender: {}", ex.getMessage());
1:b313209:         }
1:b313209:     }
1:b313209: 
1:b313209:     @Test(timeout = 60000)
1:8e6a404:     public void testCreateDynamicSenderToTopic() throws Exception {
1:8e6a404:         doTestCreateDynamicSender(true);
1:8e6a404:     }
1:8e6a404: 
1:8e6a404:     @Test(timeout = 60000)
1:8e6a404:     public void testCreateDynamicSenderToQueue() throws Exception {
1:8e6a404:         doTestCreateDynamicSender(false);
1:8e6a404:     }
1:8e6a404: 
1:10fc397:     @SuppressWarnings("unchecked")
1:8e6a404:     protected void doTestCreateDynamicSender(boolean topic) throws Exception {
1:8e6a404:         Target target = createDynamicTarget(topic);
1:8e6a404: 
1:8e6a404:         final BrokerViewMBean brokerView = getProxyToBroker();
1:8e6a404: 
1:8e6a404:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8e6a404:         AmqpSession session = connection.createSession();
1:8e6a404: 
1:8e6a404:         AmqpSender sender = session.createSender(target);
1:8e6a404:         assertNotNull(sender);
1:8e6a404: 
1:10fc397:         Target remoteTarget = (Target) sender.getEndpoint().getRemoteTarget();
1:10fc397:         Map<Symbol, Object> dynamicNodeProperties = remoteTarget.getDynamicNodeProperties();
1:10fc397:         Symbol[] capabilites = remoteTarget.getCapabilities();
1:10fc397: 
1:10fc397:         assertTrue(Boolean.TRUE.equals(remoteTarget.getDynamic()));
1:10fc397:         assertTrue(dynamicNodeProperties.containsKey(LIFETIME_POLICY));
1:10fc397:         assertEquals(DeleteOnClose.getInstance(), dynamicNodeProperties.get(LIFETIME_POLICY));
1:10fc397: 
1:8e6a404:         if (topic) {
1:8e6a404:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:10fc397:             assertTrue(AmqpSupport.contains(capabilites, TEMP_TOPIC_CAPABILITY));
1:8e6a404:         } else {
1:8e6a404:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:10fc397:             assertTrue(AmqpSupport.contains(capabilites, TEMP_QUEUE_CAPABILITY));
1:8e6a404:         }
1:8e6a404: 
1:8e6a404:         connection.close();
1:8e6a404:     }
1:27d9555: 
1:27d9555:     @Test(timeout = 60000)
1:8e6a404:     public void testDynamicSenderLifetimeBoundToLinkTopic() throws Exception {
1:8e6a404:         doTestDynamicSenderLifetimeBoundToLinkQueue(true);
1:8e6a404:     }
1:8e6a404: 
1:85d9d4e:     @Test(timeout = 60000)
1:8e6a404:     public void testDynamicSenderLifetimeBoundToLinkQueue() throws Exception {
1:8e6a404:         doTestDynamicSenderLifetimeBoundToLinkQueue(false);
1:8e6a404:     }
1:8e6a404: 
1:8e6a404:     protected void doTestDynamicSenderLifetimeBoundToLinkQueue(boolean topic) throws Exception {
1:8e6a404:         Target target = createDynamicTarget(topic);
1:8e6a404: 
1:8e6a404:         final BrokerViewMBean brokerView = getProxyToBroker();
1:8e6a404: 
1:8e6a404:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8e6a404:         AmqpSession session = connection.createSession();
1:8e6a404: 
1:8e6a404:         AmqpSender sender = session.createSender(target);
1:8e6a404:         assertNotNull(sender);
1:8e6a404: 
1:8e6a404:         if (topic) {
1:8e6a404:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:8e6a404:         } else {
1:8e6a404:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:8e6a404:         }
1:8e6a404: 
1:8e6a404:         sender.close();
1:8e6a404: 
1:8e6a404:         if (topic) {
1:8e6a404:             assertEquals(0, brokerView.getTemporaryTopics().length);
1:8e6a404:         } else {
1:8e6a404:             assertEquals(0, brokerView.getTemporaryQueues().length);
1:8e6a404:         }
1:8e6a404: 
1:8e6a404:         connection.close();
1:8e6a404:     }
1:8e6a404: 
1:8e6a404:     @Test(timeout = 60000)
1:85d9d4e:     public void testCreateDynamicReceiverToTopic() throws Exception {
1:85d9d4e:         doTestCreateDynamicSender(true);
1:85d9d4e:     }
1:85d9d4e: 
1:85d9d4e:     @Test(timeout = 60000)
1:85d9d4e:     public void testCreateDynamicReceiverToQueue() throws Exception {
1:85d9d4e:         doTestCreateDynamicSender(false);
1:85d9d4e:     }
1:85d9d4e: 
1:10fc397:     @SuppressWarnings("unchecked")
1:85d9d4e:     protected void doTestCreateDynamicReceiver(boolean topic) throws Exception {
1:85d9d4e:         Source source = createDynamicSource(topic);
1:85d9d4e: 
1:85d9d4e:         final BrokerViewMBean brokerView = getProxyToBroker();
1:85d9d4e: 
1:85d9d4e:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:85d9d4e:         AmqpSession session = connection.createSession();
1:85d9d4e: 
1:85d9d4e:         AmqpReceiver receiver = session.createReceiver(source);
1:85d9d4e:         assertNotNull(receiver);
1:85d9d4e: 
1:10fc397:         Source remoteSource = (Source) receiver.getEndpoint().getRemoteSource();
1:10fc397:         Map<Symbol, Object> dynamicNodeProperties = remoteSource.getDynamicNodeProperties();
1:10fc397:         Symbol[] capabilites = remoteSource.getCapabilities();
1:10fc397: 
1:10fc397:         assertTrue(Boolean.TRUE.equals(remoteSource.getDynamic()));
1:10fc397:         assertTrue(dynamicNodeProperties.containsKey(LIFETIME_POLICY));
1:10fc397:         assertEquals(DeleteOnClose.getInstance(), dynamicNodeProperties.get(LIFETIME_POLICY));
1:10fc397: 
1:85d9d4e:         if (topic) {
1:85d9d4e:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:10fc397:             assertTrue(AmqpSupport.contains(capabilites, TEMP_TOPIC_CAPABILITY));
1:85d9d4e:         } else {
1:85d9d4e:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:10fc397:             assertTrue(AmqpSupport.contains(capabilites, TEMP_QUEUE_CAPABILITY));
1:85d9d4e:         }
1:85d9d4e: 
1:85d9d4e:         connection.close();
1:85d9d4e:     }
1:85d9d4e: 
1:85d9d4e:     @Test(timeout = 60000)
1:85d9d4e:     public void testDynamicReceiverLifetimeBoundToLinkTopic() throws Exception {
1:85d9d4e:         doTestDynamicReceiverLifetimeBoundToLinkQueue(true);
1:85d9d4e:     }
1:85d9d4e: 
1:85d9d4e:     @Test(timeout = 60000)
1:85d9d4e:     public void testDynamicReceiverLifetimeBoundToLinkQueue() throws Exception {
1:85d9d4e:         doTestDynamicReceiverLifetimeBoundToLinkQueue(false);
1:85d9d4e:     }
1:85d9d4e: 
1:85d9d4e:     protected void doTestDynamicReceiverLifetimeBoundToLinkQueue(boolean topic) throws Exception {
1:85d9d4e:         Source source = createDynamicSource(topic);
1:85d9d4e: 
1:85d9d4e:         final BrokerViewMBean brokerView = getProxyToBroker();
1:85d9d4e: 
1:85d9d4e:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:85d9d4e:         AmqpSession session = connection.createSession();
1:85d9d4e: 
1:85d9d4e:         AmqpReceiver receiver = session.createReceiver(source);
1:85d9d4e:         assertNotNull(receiver);
1:85d9d4e: 
1:85d9d4e:         if (topic) {
1:85d9d4e:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:85d9d4e:         } else {
1:85d9d4e:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:85d9d4e:         }
1:85d9d4e: 
1:85d9d4e:         receiver.close();
1:85d9d4e: 
1:85d9d4e:         if (topic) {
1:85d9d4e:             assertEquals(0, brokerView.getTemporaryTopics().length);
1:85d9d4e:         } else {
1:85d9d4e:             assertEquals(0, brokerView.getTemporaryQueues().length);
1:85d9d4e:         }
1:85d9d4e: 
1:85d9d4e:         connection.close();
1:85d9d4e:     }
1:85d9d4e: 
1:8e6a404:     @Test(timeout = 60000)
1:27d9555:     public void TestCreateDynamicQueueSenderAndPublish() throws Exception {
1:27d9555:         doTestCreateDynamicSenderAndPublish(false);
1:27d9555:     }
1:27d9555: 
1:27d9555:     @Test(timeout = 60000)
1:27d9555:     public void TestCreateDynamicTopicSenderAndPublish() throws Exception {
1:27d9555:         doTestCreateDynamicSenderAndPublish(true);
1:27d9555:     }
1:27d9555: 
1:27d9555:     protected void doTestCreateDynamicSenderAndPublish(boolean topic) throws Exception {
1:27d9555:         Target target = createDynamicTarget(topic);
1:27d9555: 
1:27d9555:         final BrokerViewMBean brokerView = getProxyToBroker();
1:27d9555: 
1:27d9555:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:27d9555:         AmqpSession session = connection.createSession();
1:27d9555: 
1:27d9555:         AmqpSender sender = session.createSender(target);
1:27d9555:         assertNotNull(sender);
1:27d9555: 
1:27d9555:         if (topic) {
1:27d9555:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:27d9555:         } else {
1:27d9555:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:27d9555:         }
1:27d9555: 
1:27d9555:         // Get the new address
1:27d9555:         String address = sender.getSender().getRemoteTarget().getAddress();
1:27d9555:         LOG.info("New dynamic sender address -> {}", address);
1:27d9555: 
1:27d9555:         // Create a message and send to a receive that is listening on the newly
1:27d9555:         // created dynamic link address.
1:27d9555:         AmqpMessage message = new AmqpMessage();
1:27d9555:         message.setMessageId("msg-1");
1:27d9555:         message.setText("Test-Message");
1:27d9555: 
1:27d9555:         AmqpReceiver receiver = session.createReceiver(address);
1:27d9555:         receiver.flow(1);
1:27d9555: 
1:27d9555:         sender.send(message);
1:27d9555: 
1:27d9555:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:27d9555:         assertNotNull("Should have read a message", received);
1:27d9555:         received.accept();
1:27d9555: 
1:27d9555:         receiver.close();
1:27d9555:         sender.close();
1:27d9555: 
1:27d9555:         connection.close();
1:27d9555:     }
1:27d9555: 
1:27d9555:     @Test(timeout = 60000)
1:27d9555:     public void testCreateDynamicReceiverToTopicAndSend() throws Exception {
1:27d9555:         doTestCreateDynamicSender(true);
1:27d9555:     }
1:27d9555: 
1:27d9555:     @Test(timeout = 60000)
1:27d9555:     public void testCreateDynamicReceiverToQueueAndSend() throws Exception {
1:27d9555:         doTestCreateDynamicSender(false);
1:27d9555:     }
1:27d9555: 
1:27d9555:     protected void doTestCreateDynamicReceiverAndSend(boolean topic) throws Exception {
1:27d9555:         Source source = createDynamicSource(topic);
1:27d9555: 
1:27d9555:         final BrokerViewMBean brokerView = getProxyToBroker();
1:27d9555: 
1:27d9555:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:27d9555:         AmqpSession session = connection.createSession();
1:27d9555: 
1:27d9555:         AmqpReceiver receiver = session.createReceiver(source);
1:27d9555:         assertNotNull(receiver);
1:27d9555: 
1:27d9555:         if (topic) {
1:27d9555:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:27d9555:         } else {
1:27d9555:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:27d9555:         }
1:27d9555: 
1:27d9555:         // Get the new address
1:27d9555:         String address = receiver.getReceiver().getRemoteSource().getAddress();
1:27d9555:         LOG.info("New dynamic receiver address -> {}", address);
1:27d9555: 
1:27d9555:         // Create a message and send to a receive that is listening on the newly
1:27d9555:         // created dynamic link address.
1:27d9555:         AmqpMessage message = new AmqpMessage();
1:27d9555:         message.setMessageId("msg-1");
1:27d9555:         message.setText("Test-Message");
1:27d9555: 
1:27d9555:         AmqpSender sender = session.createSender(address);
1:27d9555:         sender.send(message);
1:27d9555: 
1:27d9555:         receiver.flow(1);
1:27d9555:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:27d9555:         assertNotNull("Should have read a message", received);
1:27d9555:         received.accept();
1:27d9555: 
1:27d9555:         sender.close();
1:27d9555:         receiver.close();
1:27d9555: 
1:27d9555:         connection.close();
1:27d9555:     }
1:8e6a404: 
1:85d9d4e:     protected Source createDynamicSource(boolean topic) {
1:85d9d4e: 
1:85d9d4e:         Source source = new Source();
1:85d9d4e:         source.setDynamic(true);
1:85d9d4e:         source.setDurable(TerminusDurability.NONE);
1:85d9d4e:         source.setExpiryPolicy(TerminusExpiryPolicy.LINK_DETACH);
1:85d9d4e: 
1:85d9d4e:         // Set the dynamic node lifetime-policy
1:85d9d4e:         Map<Symbol, Object> dynamicNodeProperties = new HashMap<Symbol, Object>();
1:3306467:         dynamicNodeProperties.put(LIFETIME_POLICY, DeleteOnClose.getInstance());
1:85d9d4e:         source.setDynamicNodeProperties(dynamicNodeProperties);
1:85d9d4e: 
1:85d9d4e:         // Set the capability to indicate the node type being created
1:85d9d4e:         if (!topic) {
1:85d9d4e:             source.setCapabilities(TEMP_QUEUE_CAPABILITY);
1:85d9d4e:         } else {
1:85d9d4e:             source.setCapabilities(TEMP_TOPIC_CAPABILITY);
1:85d9d4e:         }
1:85d9d4e: 
1:85d9d4e:         return source;
1:85d9d4e:     }
1:85d9d4e: 
1:8e6a404:     protected Target createDynamicTarget(boolean topic) {
1:8e6a404: 
1:8e6a404:         Target target = new Target();
1:8e6a404:         target.setDynamic(true);
1:8e6a404:         target.setDurable(TerminusDurability.NONE);
1:8e6a404:         target.setExpiryPolicy(TerminusExpiryPolicy.LINK_DETACH);
1:8e6a404: 
1:8e6a404:         // Set the dynamic node lifetime-policy
1:8e6a404:         Map<Symbol, Object> dynamicNodeProperties = new HashMap<Symbol, Object>();
1:3306467:         dynamicNodeProperties.put(LIFETIME_POLICY, DeleteOnClose.getInstance());
1:8e6a404:         target.setDynamicNodeProperties(dynamicNodeProperties);
1:8e6a404: 
1:8e6a404:         // Set the capability to indicate the node type being created
1:8e6a404:         if (!topic) {
1:8e6a404:             target.setCapabilities(TEMP_QUEUE_CAPABILITY);
1:8e6a404:         } else {
1:8e6a404:             target.setCapabilities(TEMP_TOPIC_CAPABILITY);
1:8e6a404:         }
1:8e6a404: 
1:8e6a404:         return target;
1:8e6a404:     }
1:8e6a404: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:10fc397
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.AmqpSupport;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         Target remoteTarget = (Target) sender.getEndpoint().getRemoteTarget();
1:         Map<Symbol, Object> dynamicNodeProperties = remoteTarget.getDynamicNodeProperties();
1:         Symbol[] capabilites = remoteTarget.getCapabilities();
1: 
1:         assertTrue(Boolean.TRUE.equals(remoteTarget.getDynamic()));
1:         assertTrue(dynamicNodeProperties.containsKey(LIFETIME_POLICY));
1:         assertEquals(DeleteOnClose.getInstance(), dynamicNodeProperties.get(LIFETIME_POLICY));
1: 
1:             assertTrue(AmqpSupport.contains(capabilites, TEMP_TOPIC_CAPABILITY));
1:             assertTrue(AmqpSupport.contains(capabilites, TEMP_QUEUE_CAPABILITY));
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         Source remoteSource = (Source) receiver.getEndpoint().getRemoteSource();
1:         Map<Symbol, Object> dynamicNodeProperties = remoteSource.getDynamicNodeProperties();
1:         Symbol[] capabilites = remoteSource.getCapabilities();
1: 
1:         assertTrue(Boolean.TRUE.equals(remoteSource.getDynamic()));
1:         assertTrue(dynamicNodeProperties.containsKey(LIFETIME_POLICY));
1:         assertEquals(DeleteOnClose.getInstance(), dynamicNodeProperties.get(LIFETIME_POLICY));
1: 
1:             assertTrue(AmqpSupport.contains(capabilites, TEMP_TOPIC_CAPABILITY));
1:             assertTrue(AmqpSupport.contains(capabilites, TEMP_QUEUE_CAPABILITY));
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:27d9555
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void TestCreateDynamicQueueSenderAndPublish() throws Exception {
1:         doTestCreateDynamicSenderAndPublish(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void TestCreateDynamicTopicSenderAndPublish() throws Exception {
1:         doTestCreateDynamicSenderAndPublish(true);
1:     }
1: 
1:     protected void doTestCreateDynamicSenderAndPublish(boolean topic) throws Exception {
1:         Target target = createDynamicTarget(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender(target);
1:         assertNotNull(sender);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         // Get the new address
1:         String address = sender.getSender().getRemoteTarget().getAddress();
1:         LOG.info("New dynamic sender address -> {}", address);
1: 
1:         // Create a message and send to a receive that is listening on the newly
1:         // created dynamic link address.
1:         AmqpMessage message = new AmqpMessage();
1:         message.setMessageId("msg-1");
1:         message.setText("Test-Message");
1: 
1:         AmqpReceiver receiver = session.createReceiver(address);
1:         receiver.flow(1);
1: 
1:         sender.send(message);
1: 
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull("Should have read a message", received);
1:         received.accept();
1: 
1:         receiver.close();
1:         sender.close();
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicReceiverToTopicAndSend() throws Exception {
1:         doTestCreateDynamicSender(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicReceiverToQueueAndSend() throws Exception {
1:         doTestCreateDynamicSender(false);
1:     }
1: 
1:     protected void doTestCreateDynamicReceiverAndSend(boolean topic) throws Exception {
1:         Source source = createDynamicSource(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpReceiver receiver = session.createReceiver(source);
1:         assertNotNull(receiver);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         // Get the new address
1:         String address = receiver.getReceiver().getRemoteSource().getAddress();
1:         LOG.info("New dynamic receiver address -> {}", address);
1: 
1:         // Create a message and send to a receive that is listening on the newly
1:         // created dynamic link address.
1:         AmqpMessage message = new AmqpMessage();
1:         message.setMessageId("msg-1");
1:         message.setText("Test-Message");
1: 
1:         AmqpSender sender = session.createSender(address);
1:         sender.send(message);
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull("Should have read a message", received);
1:         received.accept();
1: 
1:         sender.close();
1:         receiver.close();
1: 
1:         connection.close();
1:     }
1: 
commit:b313209
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:     public void testCannotCreateSenderWithNamedTempQueue() throws Exception {
1:         doTestCannotCreateSenderWithNamedTempDestination(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCannotCreateSenderWithNamedTempTopic() throws Exception {
1:         doTestCannotCreateSenderWithNamedTempDestination(true);
1:     }
1: 
1:     protected void doTestCannotCreateSenderWithNamedTempDestination(boolean topic) throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         String address = null;
1:         if (topic) {
1:             address = "temp-topic://" + getTestName();
1:         } else {
1:             address = "temp-queue://" + getTestName();
1:         }
1: 
1:         try {
1:             session.createSender(address);
1:             fail("Should not be able to create sender to a temp destination that doesn't exist.");
1:         } catch (Exception ex) {
1:             LOG.info("Error creating sender: {}", ex.getMessage());
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCanntCreateReceverWithNamedTempQueue() throws Exception {
1:         doTestCannotCreateReceiverWithNamedTempDestination(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCannotCreateReceiverWithNamedTempTopic() throws Exception {
1:         doTestCannotCreateReceiverWithNamedTempDestination(true);
1:     }
1: 
1:     protected void doTestCannotCreateReceiverWithNamedTempDestination(boolean topic) throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         String address = null;
1:         if (topic) {
1:             address = "temp-topic://" + getTestName();
1:         } else {
1:             address = "temp-queue://" + getTestName();
1:         }
1: 
1:         try {
1:             session.createReceiver(address);
1:             fail("Should not be able to create sender to a temp destination that doesn't exist.");
1:         } catch (Exception ex) {
1:             LOG.info("Error creating sender: {}", ex.getMessage());
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.AmqpSupport.LIFETIME_POLICY;
/////////////////////////////////////////////////////////////////////////
1:         dynamicNodeProperties.put(LIFETIME_POLICY, DeleteOnClose.getInstance());
/////////////////////////////////////////////////////////////////////////
1:         dynamicNodeProperties.put(LIFETIME_POLICY, DeleteOnClose.getInstance());
commit:85d9d4e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.qpid.proton.amqp.messaging.Source;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicReceiverToTopic() throws Exception {
1:         doTestCreateDynamicSender(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicReceiverToQueue() throws Exception {
1:         doTestCreateDynamicSender(false);
1:     }
1: 
1:     protected void doTestCreateDynamicReceiver(boolean topic) throws Exception {
1:         Source source = createDynamicSource(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpReceiver receiver = session.createReceiver(source);
1:         assertNotNull(receiver);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDynamicReceiverLifetimeBoundToLinkTopic() throws Exception {
1:         doTestDynamicReceiverLifetimeBoundToLinkQueue(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDynamicReceiverLifetimeBoundToLinkQueue() throws Exception {
1:         doTestDynamicReceiverLifetimeBoundToLinkQueue(false);
1:     }
1: 
1:     protected void doTestDynamicReceiverLifetimeBoundToLinkQueue(boolean topic) throws Exception {
1:         Source source = createDynamicSource(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpReceiver receiver = session.createReceiver(source);
1:         assertNotNull(receiver);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         receiver.close();
1: 
1:         if (topic) {
1:             assertEquals(0, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(0, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     protected Source createDynamicSource(boolean topic) {
1: 
1:         Source source = new Source();
1:         source.setDynamic(true);
1:         source.setDurable(TerminusDurability.NONE);
1:         source.setExpiryPolicy(TerminusExpiryPolicy.LINK_DETACH);
1: 
1:         // Set the dynamic node lifetime-policy
1:         Map<Symbol, Object> dynamicNodeProperties = new HashMap<Symbol, Object>();
0:         dynamicNodeProperties.put(DYNAMIC_NODE_LIFETIME_POLICY, DeleteOnClose.getInstance());
1:         source.setDynamicNodeProperties(dynamicNodeProperties);
1: 
1:         // Set the capability to indicate the node type being created
1:         if (!topic) {
1:             source.setCapabilities(TEMP_QUEUE_CAPABILITY);
1:         } else {
1:             source.setCapabilities(TEMP_TOPIC_CAPABILITY);
1:         }
1: 
1:         return source;
1:     }
1: 
commit:8e6a404
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
0: import static org.apache.activemq.transport.amqp.AmqpSupport.DYNAMIC_NODE_LIFETIME_POLICY;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.TEMP_QUEUE_CAPABILITY;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.TEMP_TOPIC_CAPABILITY;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.DeleteOnClose;
1: import org.apache.qpid.proton.amqp.messaging.Target;
1: import org.apache.qpid.proton.amqp.messaging.TerminusDurability;
1: import org.apache.qpid.proton.amqp.messaging.TerminusExpiryPolicy;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests for JMS temporary destination mappings to AMQP
1:  */
1: public class AmqpTempDestinationTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicSenderToTopic() throws Exception {
1:         doTestCreateDynamicSender(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDynamicSenderToQueue() throws Exception {
1:         doTestCreateDynamicSender(false);
1:     }
1: 
1:     protected void doTestCreateDynamicSender(boolean topic) throws Exception {
1:         Target target = createDynamicTarget(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender(target);
1:         assertNotNull(sender);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDynamicSenderLifetimeBoundToLinkTopic() throws Exception {
1:         doTestDynamicSenderLifetimeBoundToLinkQueue(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDynamicSenderLifetimeBoundToLinkQueue() throws Exception {
1:         doTestDynamicSenderLifetimeBoundToLinkQueue(false);
1:     }
1: 
1:     protected void doTestDynamicSenderLifetimeBoundToLinkQueue(boolean topic) throws Exception {
1:         Target target = createDynamicTarget(topic);
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender(target);
1:         assertNotNull(sender);
1: 
1:         if (topic) {
1:             assertEquals(1, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         sender.close();
1: 
1:         if (topic) {
1:             assertEquals(0, brokerView.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(0, brokerView.getTemporaryQueues().length);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     protected Target createDynamicTarget(boolean topic) {
1: 
1:         Target target = new Target();
1:         target.setDynamic(true);
1:         target.setDurable(TerminusDurability.NONE);
1:         target.setExpiryPolicy(TerminusExpiryPolicy.LINK_DETACH);
1: 
1:         // Set the dynamic node lifetime-policy
1:         Map<Symbol, Object> dynamicNodeProperties = new HashMap<Symbol, Object>();
0:         dynamicNodeProperties.put(DYNAMIC_NODE_LIFETIME_POLICY, DeleteOnClose.getInstance());
1:         target.setDynamicNodeProperties(dynamicNodeProperties);
1: 
1:         // Set the capability to indicate the node type being created
1:         if (!topic) {
1:             target.setCapabilities(TEMP_QUEUE_CAPABILITY);
1:         } else {
1:             target.setCapabilities(TEMP_TOPIC_CAPABILITY);
1:         }
1: 
1:         return target;
1:     }
1: }
============================================================================