1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
2:04ee70a: 
1:e14aca8: package org.apache.activemq.transport.auto;
1:04ee70a: 
1:04ee70a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:04ee70a: import java.net.URI;
1:04ee70a: import java.net.URISyntaxException;
1:04ee70a: import java.util.Set;
1:04ee70a: 
1:04ee70a: import javax.net.ssl.SSLServerSocket;
1:04ee70a: import javax.net.ssl.SSLServerSocketFactory;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.broker.BrokerService;
1:04ee70a: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport;
1:7e648d5: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:04ee70a: import org.apache.activemq.wireformat.WireFormat;
1:04ee70a: 
1:04ee70a: /**
1:04ee70a:  *  An SSL TransportServer.
1:04ee70a:  *
1:04ee70a:  *  Allows for client certificate authentication (refer to setNeedClientAuth for
1:04ee70a:  *      details).
1:04ee70a:  *  NOTE: Client certificate authentication is disabled by default.
1:04ee70a:  *
1:04ee70a:  */
1:04ee70a: public class AutoSslTransportServer extends AutoTcpTransportServer {
1:04ee70a: 
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     // Specifies if sockets created from this server should needClientAuth.
1:04ee70a:     private boolean needClientAuth;
1:04ee70a: 
1:04ee70a:     // Specifies if sockets created from this server should wantClientAuth.
1:04ee70a:     private boolean wantClientAuth;
1:04ee70a: 
1:04ee70a:     public AutoSslTransportServer(SslTransportFactory transportFactory,
1:04ee70a:             URI location, SSLServerSocketFactory serverSocketFactory,
1:04ee70a:             BrokerService brokerService, Set<String> enabledProtocols) throws IOException, URISyntaxException {
1:04ee70a:         super(transportFactory, location, serverSocketFactory, brokerService, enabledProtocols);
1:04ee70a:         // TODO Auto-generated constructor stub
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Sets whether client authentication should be required
1:04ee70a:      * Must be called before {@link #bind()}
1:04ee70a:      * Note: Calling this method clears the wantClientAuth flag
1:04ee70a:      * in the underlying implementation.
1:04ee70a:      */
1:04ee70a:     public void setNeedClientAuth(boolean needAuth) {
1:04ee70a:         this.needClientAuth = needAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Returns whether client authentication should be required.
1:04ee70a:      */
1:04ee70a:     public boolean getNeedClientAuth() {
1:04ee70a:         return this.needClientAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Returns whether client authentication should be requested.
1:04ee70a:      */
1:04ee70a:     public boolean getWantClientAuth() {
1:04ee70a:         return this.wantClientAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Sets whether client authentication should be requested.
1:04ee70a:      * Must be called before {@link #bind()}
1:04ee70a:      * Note: Calling this method clears the needClientAuth flag
1:04ee70a:      * in the underlying implementation.
1:04ee70a:      */
1:04ee70a:     public void setWantClientAuth(boolean wantAuth) {
1:04ee70a:         this.wantClientAuth = wantAuth;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Binds this socket to the previously specified URI.
1:04ee70a:      *
1:04ee70a:      * Overridden to allow for proper handling of needClientAuth.
1:04ee70a:      *
1:04ee70a:      * @throws IOException passed up from TcpTransportServer.
1:04ee70a:      */
1:04ee70a:     @Override
1:04ee70a:     public void bind() throws IOException {
1:04ee70a:         super.bind();
1:04ee70a:         if (needClientAuth) {
1:04ee70a:             ((SSLServerSocket)this.serverSocket).setNeedClientAuth(true);
1:04ee70a:         } else if (wantClientAuth) {
1:04ee70a:             ((SSLServerSocket)this.serverSocket).setWantClientAuth(true);
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * Used to create Transports for this server.
1:04ee70a:      *
1:04ee70a:      * Overridden to allow the use of SslTransports (instead of TcpTransports).
1:04ee70a:      *
1:04ee70a:      * @param socket The incoming socket that will be wrapped into the new Transport.
1:04ee70a:      * @param format The WireFormat being used.
1:04ee70a:      * @return The newly return (SSL) Transport.
1:04ee70a:      * @throws IOException
1:04ee70a:      */
1:04ee70a:     @Override
1:98c5866:     protected TcpTransport createTransport(Socket socket, WireFormat format,
1:7e648d5:             TcpTransportFactory detectedTransportFactory, InitBuffer initBuffer) throws IOException {
1:98c5866: 
1:7e648d5:         return detectedTransportFactory.createTransport(format, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     public boolean isSslServer() {
1:04ee70a:         return true;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:7e648d5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:             TcpTransportFactory detectedTransportFactory, InitBuffer initBuffer) throws IOException {
1:         return detectedTransportFactory.createTransport(format, socket, initBuffer);
commit:98c5866
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected TcpTransport createTransport(Socket socket, WireFormat format,
0:             TcpTransportFactory detectedTransportFactory) throws IOException {
1: 
0:         return detectedTransportFactory.createTransport(format, socket, this.initBuffer);
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.auto;
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.activemq.broker.transport.auto;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.Set;
1: 
0: import javax.net.ServerSocketFactory;
1: import javax.net.ssl.SSLServerSocket;
1: import javax.net.ssl.SSLServerSocketFactory;
0: import javax.net.ssl.SSLSocket;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.tcp.SslTransport;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  *  An SSL TransportServer.
1:  *
1:  *  Allows for client certificate authentication (refer to setNeedClientAuth for
1:  *      details).
1:  *  NOTE: Client certificate authentication is disabled by default.
1:  *
1:  */
1: public class AutoSslTransportServer extends AutoTcpTransportServer {
1: 
1: 
1: 
1:     // Specifies if sockets created from this server should needClientAuth.
1:     private boolean needClientAuth;
1: 
1:     // Specifies if sockets created from this server should wantClientAuth.
1:     private boolean wantClientAuth;
1: 
0: //    /**
0: //     * Creates a ssl transport server for the specified url using the provided
0: //     * serverSocketFactory
0: //     *
0: //     * @param transportFactory The factory used to create transports when connections arrive.
0: //     * @param location The location of the broker to bind to.
0: //     * @param serverSocketFactory The factory used to create this server.
0: //     * @throws IOException passed up from TcpTransportFactory.
0: //     * @throws URISyntaxException passed up from TcpTransportFactory.
0: //     */
0: //    public SslTransportServer(SslTransportFactory transportFactory, URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0: //        super(transportFactory, location, serverSocketFactory);
0: //    }
1: 
1:     public AutoSslTransportServer(SslTransportFactory transportFactory,
1:             URI location, SSLServerSocketFactory serverSocketFactory,
1:             BrokerService brokerService, Set<String> enabledProtocols) throws IOException, URISyntaxException {
1:         super(transportFactory, location, serverSocketFactory, brokerService, enabledProtocols);
1:         // TODO Auto-generated constructor stub
1:     }
1: 
1:     /**
1:      * Sets whether client authentication should be required
1:      * Must be called before {@link #bind()}
1:      * Note: Calling this method clears the wantClientAuth flag
1:      * in the underlying implementation.
1:      */
1:     public void setNeedClientAuth(boolean needAuth) {
1:         this.needClientAuth = needAuth;
1:     }
1: 
1:     /**
1:      * Returns whether client authentication should be required.
1:      */
1:     public boolean getNeedClientAuth() {
1:         return this.needClientAuth;
1:     }
1: 
1:     /**
1:      * Returns whether client authentication should be requested.
1:      */
1:     public boolean getWantClientAuth() {
1:         return this.wantClientAuth;
1:     }
1: 
1:     /**
1:      * Sets whether client authentication should be requested.
1:      * Must be called before {@link #bind()}
1:      * Note: Calling this method clears the needClientAuth flag
1:      * in the underlying implementation.
1:      */
1:     public void setWantClientAuth(boolean wantAuth) {
1:         this.wantClientAuth = wantAuth;
1:     }
1: 
1:     /**
1:      * Binds this socket to the previously specified URI.
1:      *
1:      * Overridden to allow for proper handling of needClientAuth.
1:      *
1:      * @throws IOException passed up from TcpTransportServer.
1:      */
1:     @Override
1:     public void bind() throws IOException {
1:         super.bind();
1:         if (needClientAuth) {
1:             ((SSLServerSocket)this.serverSocket).setNeedClientAuth(true);
1:         } else if (wantClientAuth) {
1:             ((SSLServerSocket)this.serverSocket).setWantClientAuth(true);
1:         }
1:     }
1: 
1:     /**
1:      * Used to create Transports for this server.
1:      *
1:      * Overridden to allow the use of SslTransports (instead of TcpTransports).
1:      *
1:      * @param socket The incoming socket that will be wrapped into the new Transport.
1:      * @param format The WireFormat being used.
1:      * @return The newly return (SSL) Transport.
1:      * @throws IOException
1:      */
1:     @Override
0:     protected TcpTransport createTransport(Socket socket, WireFormat format) throws IOException {
0:         return new SslTransport(format, (SSLSocket)socket, this.initBuffer);
1:     }
1: 
1:     @Override
1:     public boolean isSslServer() {
1:         return true;
1:     }
1: 
1: }
============================================================================