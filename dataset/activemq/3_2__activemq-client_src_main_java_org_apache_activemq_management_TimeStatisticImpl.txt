1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A time statistic implementation
1:b0c2a40:  *
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class TimeStatisticImpl extends StatisticImpl {
1:d29ca2a:     private long count;
1:d29ca2a:     private long maxTime;
1:d29ca2a:     private long minTime;
1:d29ca2a:     private long totalTime;
1:d29ca2a:     private TimeStatisticImpl parent;
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl(String name, String description) {
1:d29ca2a:         this(name, "millis", description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl(TimeStatisticImpl parent, String name, String description) {
1:d29ca2a:         this(name, description);
1:d29ca2a:         this.parent = parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl(String name, String unit, String description) {
1:d29ca2a:         super(name, unit, description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public synchronized void reset() {
1:3c68051:         if(isDoReset()) {
1:d29ca2a:             super.reset();
1:d29ca2a:             count = 0;
1:d29ca2a:             maxTime = 0;
1:d29ca2a:             minTime = 0;
1:d29ca2a:             totalTime = 0;
1:d29ca2a:         }
1:3c68051:     }
1:d29ca2a: 
1:d29ca2a:     public synchronized long getCount() {
1:d29ca2a:         return count;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public synchronized void addTime(long time) {
1:d29ca2a:         count++;
1:d29ca2a:         totalTime += time;
1:d29ca2a:         if (time > maxTime) {
1:d29ca2a:             maxTime = time;
1:d29ca2a:         }
1:d29ca2a:         if (time < minTime || minTime == 0) {
1:d29ca2a:             minTime = time;
1:d29ca2a:         }
1:d29ca2a:         updateSampleTime();
1:d29ca2a:         if (parent != null) {
1:d29ca2a:             parent.addTime(time);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the maximum time of any step
1:d29ca2a:      */
1:d29ca2a:     public long getMaxTime() {
1:d29ca2a:         return maxTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the minimum time of any step
1:d29ca2a:      */
1:d29ca2a:     public synchronized long getMinTime() {
1:d29ca2a:         return minTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the total time of all the steps added together
1:d29ca2a:      */
1:d29ca2a:     public synchronized long getTotalTime() {
1:d29ca2a:         return totalTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the average time calculated by dividing the
1:d29ca2a:      *         total time by the number of counts
1:d29ca2a:      */
1:d29ca2a:     public synchronized double getAverageTime() {
1:d29ca2a:         if (count == 0) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:d29ca2a:         double d = totalTime;
1:d29ca2a:         return d / count;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the average time calculated by dividing the
1:d29ca2a:      *         total time by the number of counts but excluding the
1:d29ca2a:      *         minimum and maximum times.
1:d29ca2a:      */
1:d29ca2a:     public synchronized double getAverageTimeExcludingMinMax() {
1:d29ca2a:         if (count <= 2) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:d29ca2a:         double d = totalTime - minTime - maxTime;
1:d29ca2a:         return d / (count - 2);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the average number of steps per second
1:d29ca2a:      */
1:d29ca2a:     public double getAveragePerSecond() {
1:d29ca2a:         double d = 1000;
1:d29ca2a:         double averageTime = getAverageTime();
1:d29ca2a:         if (averageTime == 0) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:d29ca2a:         return d / averageTime;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the average number of steps per second excluding the min & max values
1:d29ca2a:      */
1:d29ca2a:     public double getAveragePerSecondExcludingMinMax() {
1:d29ca2a:         double d = 1000;
1:d29ca2a:         double average = getAverageTimeExcludingMinMax();
1:d29ca2a:         if (average == 0) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:d29ca2a:         return d / average;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TimeStatisticImpl getParent() {
1:d29ca2a:         return parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setParent(TimeStatisticImpl parent) {
1:d29ca2a:         this.parent = parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected synchronized void appendFieldDescription(StringBuffer buffer) {
1:d29ca2a:         buffer.append(" count: ");
1:d29ca2a:         buffer.append(Long.toString(count));
1:d29ca2a:         buffer.append(" maxTime: ");
1:d29ca2a:         buffer.append(Long.toString(maxTime));
1:d29ca2a:         buffer.append(" minTime: ");
1:d29ca2a:         buffer.append(Long.toString(minTime));
1:d29ca2a:         buffer.append(" totalTime: ");
1:d29ca2a:         buffer.append(Long.toString(totalTime));
1:d29ca2a:         buffer.append(" averageTime: ");
1:d29ca2a:         buffer.append(Double.toString(getAverageTime()));
1:d29ca2a:         buffer.append(" averageTimeExMinMax: ");
1:d29ca2a:         buffer.append(Double.toString(getAverageTimeExcludingMinMax()));
1:d29ca2a:         buffer.append(" averagePerSecond: ");
1:d29ca2a:         buffer.append(Double.toString(getAveragePerSecond()));
1:d29ca2a:         buffer.append(" averagePerSecondExMinMax: ");
1:d29ca2a:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:d29ca2a:         super.appendFieldDescription(buffer);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
1: 
1: /**
1:  * A time statistic implementation
1:  *
0:  * @version $Revision: 1.2 $
1:  */
1: public class TimeStatisticImpl extends StatisticImpl {
1:     private long count;
1:     private long maxTime;
1:     private long minTime;
1:     private long totalTime;
1:     private TimeStatisticImpl parent;
1: 
1:     public TimeStatisticImpl(String name, String description) {
1:         this(name, "millis", description);
1:     }
1: 
1:     public TimeStatisticImpl(TimeStatisticImpl parent, String name, String description) {
1:         this(name, description);
1:         this.parent = parent;
1:     }
1: 
1:     public TimeStatisticImpl(String name, String unit, String description) {
1:         super(name, unit, description);
1:     }
1: 
1:     public synchronized void reset() {
1:         super.reset();
1:         count = 0;
1:         maxTime = 0;
1:         minTime = 0;
1:         totalTime = 0;
1:     }
1: 
1:     public synchronized long getCount() {
1:         return count;
1:     }
1: 
1:     public synchronized void addTime(long time) {
1:         count++;
1:         totalTime += time;
1:         if (time > maxTime) {
1:             maxTime = time;
1:         }
1:         if (time < minTime || minTime == 0) {
1:             minTime = time;
1:         }
1:         updateSampleTime();
1:         if (parent != null) {
1:             parent.addTime(time);
1:         }
1:     }
1: 
1:     /**
1:      * @return the maximum time of any step
1:      */
1:     public long getMaxTime() {
1:         return maxTime;
1:     }
1: 
1:     /**
1:      * @return the minimum time of any step
1:      */
1:     public synchronized long getMinTime() {
1:         return minTime;
1:     }
1: 
1:     /**
1:      * @return the total time of all the steps added together
1:      */
1:     public synchronized long getTotalTime() {
1:         return totalTime;
1:     }
1: 
1:     /**
1:      * @return the average time calculated by dividing the
1:      *         total time by the number of counts
1:      */
1:     public synchronized double getAverageTime() {
1:         if (count == 0) {
1:             return 0;
1:         }
1:         double d = totalTime;
1:         return d / count;
1:     }
1: 
1: 
1:     /**
1:      * @return the average time calculated by dividing the
1:      *         total time by the number of counts but excluding the
1:      *         minimum and maximum times.
1:      */
1:     public synchronized double getAverageTimeExcludingMinMax() {
1:         if (count <= 2) {
1:             return 0;
1:         }
1:         double d = totalTime - minTime - maxTime;
1:         return d / (count - 2);
1:     }
1: 
1: 
1:     /**
1:      * @return the average number of steps per second
1:      */
1:     public double getAveragePerSecond() {
1:         double d = 1000;
1:         double averageTime = getAverageTime();
1:         if (averageTime == 0) {
1:             return 0;
1:         }
1:         return d / averageTime;
1:     }
1: 
1:     /**
1:      * @return the average number of steps per second excluding the min & max values
1:      */
1:     public double getAveragePerSecondExcludingMinMax() {
1:         double d = 1000;
1:         double average = getAverageTimeExcludingMinMax();
1:         if (average == 0) {
1:             return 0;
1:         }
1:         return d / average;
1:     }
1: 
1:     public TimeStatisticImpl getParent() {
1:         return parent;
1:     }
1: 
1:     public void setParent(TimeStatisticImpl parent) {
1:         this.parent = parent;
1:     }
1: 
1:     protected synchronized void appendFieldDescription(StringBuffer buffer) {
1:         buffer.append(" count: ");
1:         buffer.append(Long.toString(count));
1:         buffer.append(" maxTime: ");
1:         buffer.append(Long.toString(maxTime));
1:         buffer.append(" minTime: ");
1:         buffer.append(Long.toString(minTime));
1:         buffer.append(" totalTime: ");
1:         buffer.append(Long.toString(totalTime));
1:         buffer.append(" averageTime: ");
1:         buffer.append(Double.toString(getAverageTime()));
1:         buffer.append(" averageTimeExMinMax: ");
1:         buffer.append(Double.toString(getAverageTimeExcludingMinMax()));
1:         buffer.append(" averagePerSecond: ");
1:         buffer.append(Double.toString(getAveragePerSecond()));
1:         buffer.append(" averagePerSecondExMinMax: ");
1:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:         super.appendFieldDescription(buffer);
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:3c68051
/////////////////////////////////////////////////////////////////////////
1:         if(isDoReset()) {
0:             super.reset();
0:             count = 0;
0:             maxTime = 0;
0:             minTime = 0;
0:             totalTime = 0;
1:         }
============================================================================