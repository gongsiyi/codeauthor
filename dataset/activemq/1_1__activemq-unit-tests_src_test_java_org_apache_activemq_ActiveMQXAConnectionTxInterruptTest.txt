1:0a12bcb: /**
1:0a12bcb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0a12bcb:  * contributor license agreements.  See the NOTICE file distributed with
1:0a12bcb:  * this work for additional information regarding copyright ownership.
1:0a12bcb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0a12bcb:  * (the "License"); you may not use this file except in compliance with
1:0a12bcb:  * the License.  You may obtain a copy of the License at
1:0a12bcb:  *
1:0a12bcb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0a12bcb:  *
1:0a12bcb:  * Unless required by applicable law or agreed to in writing, software
1:0a12bcb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0a12bcb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0a12bcb:  * See the License for the specific language governing permissions and
1:0a12bcb:  * limitations under the License.
1:0a12bcb:  */
1:0a12bcb: package org.apache.activemq;
1:0a12bcb: 
1:0a12bcb: import java.io.ByteArrayOutputStream;
1:0a12bcb: import java.io.DataOutputStream;
1:0a12bcb: import java.io.IOException;
1:0a12bcb: import java.net.URI;
1:0a12bcb: import java.util.LinkedList;
1:0a12bcb: import java.util.concurrent.CountDownLatch;
1:0a12bcb: import java.util.concurrent.ExecutorService;
1:0a12bcb: import java.util.concurrent.Executors;
1:0a12bcb: import java.util.concurrent.TimeUnit;
1:0a12bcb: import javax.jms.Destination;
1:0a12bcb: import javax.jms.JMSException;
1:0a12bcb: import javax.jms.MessageConsumer;
1:0a12bcb: import javax.jms.MessageProducer;
1:0a12bcb: import javax.jms.TextMessage;
1:0a12bcb: import javax.jms.XASession;
1:0a12bcb: import javax.transaction.xa.XAException;
1:0a12bcb: import javax.transaction.xa.XAResource;
1:0a12bcb: import javax.transaction.xa.Xid;
1:0a12bcb: import org.apache.activemq.broker.BrokerFactory;
1:0a12bcb: import org.apache.activemq.broker.BrokerService;
1:0a12bcb: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:0a12bcb: import org.apache.activemq.broker.MutableBrokerFilter;
1:0a12bcb: import org.apache.activemq.command.ActiveMQQueue;
1:0a12bcb: import org.apache.activemq.command.ActiveMQTextMessage;
1:0a12bcb: import org.apache.activemq.command.MessageAck;
1:0a12bcb: import org.apache.activemq.transaction.Synchronization;
1:0a12bcb: import org.junit.After;
1:0a12bcb: import org.junit.Before;
1:0a12bcb: import org.junit.Test;
1:0a12bcb: import org.slf4j.Logger;
1:0a12bcb: import org.slf4j.LoggerFactory;
1:0a12bcb: 
1:0a12bcb: 
1:0a12bcb: import static org.junit.Assert.*;
1:0a12bcb: 
1:0a12bcb: public class ActiveMQXAConnectionTxInterruptTest {
1:0a12bcb:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionTxInterruptTest.class);
1:0a12bcb:     long txGenerator = System.currentTimeMillis();
1:0a12bcb:     private BrokerService broker;
1:0a12bcb:     XASession session;
1:0a12bcb:     XAResource resource;
1:0a12bcb:     ActiveMQXAConnection xaConnection;
1:0a12bcb:     Destination dest;
1:0a12bcb: 
1:0a12bcb:     @Before
1:0a12bcb:     public void startBrokerEtc() throws Exception {
1:0a12bcb:         broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/BRXA"));
1:0a12bcb:         broker.setPersistent(false);
1:0a12bcb:         broker.start();
1:0a12bcb:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
1:0a12bcb:         cf1.setStatsEnabled(true);
1:0a12bcb:         xaConnection = (ActiveMQXAConnection)cf1.createConnection();
1:0a12bcb:         xaConnection.start();
1:0a12bcb:         session = xaConnection.createXASession();
1:0a12bcb:         resource = session.getXAResource();
1:0a12bcb: 
1:0a12bcb:         dest = new ActiveMQQueue("Q");
1:0a12bcb: 
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @After
1:0a12bcb:     public void tearDown() throws Exception {
1:0a12bcb:         try {
1:0a12bcb:             xaConnection.close();
1:0a12bcb:         } catch (Throwable ignore) {
1:0a12bcb:         }
1:0a12bcb:         try {
1:0a12bcb:             broker.stop();
1:0a12bcb:         } catch (Throwable ignore) {
1:0a12bcb:         }
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb: 
1:0a12bcb:     @Test
1:0a12bcb:     public void testRollbackAckInterrupted() throws Exception {
1:0a12bcb: 
1:0a12bcb:         // publish a message
1:0a12bcb:         publishAMessage();
1:0a12bcb:         Xid tid;
1:0a12bcb: 
1:0a12bcb:         // consume in tx and rollback with interrupt
1:0a12bcb:         session = xaConnection.createXASession();
1:0a12bcb:         final MessageConsumer consumer = session.createConsumer(dest);
1:0a12bcb:         tid = createXid();
1:0a12bcb:         resource = session.getXAResource();
1:0a12bcb:         resource.start(tid, XAResource.TMNOFLAGS);
1:0a12bcb:         ((TransactionContext)resource).addSynchronization(new Synchronization() {
1:0a12bcb:             @Override
1:0a12bcb:             public void beforeEnd() throws Exception {
1:0a12bcb:                 LOG.info("Interrupting thread: " + Thread.currentThread(), new Throwable("Source"));
1:0a12bcb:                 Thread.currentThread().interrupt();
1:0a12bcb:             }
1:0a12bcb:         });
1:0a12bcb:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:0a12bcb:         assertNotNull(receivedMessage);
1:0a12bcb:         assertEquals(getName(), receivedMessage.getText());
1:0a12bcb:         resource.end(tid, XAResource.TMFAIL);
1:0a12bcb:         resource.rollback(tid);
1:0a12bcb:         session.close();
1:0a12bcb:         assertTrue("Was interrupted", Thread.currentThread().isInterrupted());
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @Test
1:0a12bcb:     public void testCommitAckInterrupted() throws Exception {
1:0a12bcb: 
1:0a12bcb:         // publish a message
1:0a12bcb:         publishAMessage();
1:0a12bcb: 
1:0a12bcb:         // consume in tx and rollback with interrupt
1:0a12bcb:         session = xaConnection.createXASession();
1:0a12bcb:         MessageConsumer consumer = session.createConsumer(dest);
1:0a12bcb:         Xid tid = createXid();
1:0a12bcb:         resource = session.getXAResource();
1:0a12bcb:         resource.start(tid, XAResource.TMNOFLAGS);
1:0a12bcb:         ((TransactionContext)resource).addSynchronization(new Synchronization() {
1:0a12bcb:             @Override
1:0a12bcb:             public void beforeEnd() throws Exception {
1:0a12bcb:                 LOG.info("Interrupting thread: " + Thread.currentThread(), new Throwable("Source"));
1:0a12bcb:                 Thread.currentThread().interrupt();
1:0a12bcb:             }
1:0a12bcb:         });
1:0a12bcb:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:0a12bcb:         assertNotNull(receivedMessage);
1:0a12bcb:         assertEquals(getName(), receivedMessage.getText());
1:0a12bcb:         resource.end(tid, XAResource.TMSUCCESS);
1:0a12bcb:         resource.commit(tid, true);
1:0a12bcb:         session.close();
1:0a12bcb: 
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     @Test
1:0a12bcb:     public void testInterruptWhilePendingResponseToAck() throws Exception {
1:0a12bcb: 
1:0a12bcb:         final LinkedList<Throwable> errors = new LinkedList<Throwable>();
1:0a12bcb:         final CountDownLatch blockedServerSize = new CountDownLatch(1);
1:0a12bcb:         final CountDownLatch canContinue = new CountDownLatch(1);
1:0a12bcb:         MutableBrokerFilter filter = (MutableBrokerFilter)broker.getBroker().getAdaptor(MutableBrokerFilter.class);
1:0a12bcb:         filter.setNext(new MutableBrokerFilter(filter.getNext()) {
1:0a12bcb:             @Override
1:0a12bcb:             public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:0a12bcb:                 blockedServerSize.countDown();
1:0a12bcb:                 canContinue.await();
1:0a12bcb:                 super.acknowledge(consumerExchange, ack);
1:0a12bcb:             }
1:0a12bcb:         });
1:0a12bcb: 
1:0a12bcb:         publishAMessage();
1:0a12bcb: 
1:0a12bcb:         // consume in tx and rollback with interrupt while pending reply
1:0a12bcb:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:0a12bcb:         executorService.execute(new Runnable() {
1:0a12bcb:             @Override
1:0a12bcb:             public void run() {
1:0a12bcb:                 try {
1:0a12bcb:                     session = xaConnection.createXASession();
1:0a12bcb:                     MessageConsumer consumer = session.createConsumer(dest);
1:0a12bcb:                     Xid tid = createXid();
1:0a12bcb:                     resource = session.getXAResource();
1:0a12bcb:                     resource.start(tid, XAResource.TMNOFLAGS);
1:0a12bcb: 
1:0a12bcb:                     TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:0a12bcb:                     assertNotNull(receivedMessage);
1:0a12bcb:                     assertEquals(getName(), receivedMessage.getText());
1:0a12bcb: 
1:0a12bcb:                     try {
1:0a12bcb:                         resource.end(tid, XAResource.TMSUCCESS);
1:0a12bcb:                         fail("Expect end to fail");
1:0a12bcb:                     } catch (Throwable expectedWithInterrupt) {
1:0a12bcb:                         assertTrue(expectedWithInterrupt instanceof XAException);
1:0a12bcb:                         assertCause(expectedWithInterrupt, new Class[]{InterruptedException.class});
1:0a12bcb:                     }
1:0a12bcb: 
1:0a12bcb:                     try {
1:0a12bcb:                         resource.rollback(tid);
1:0a12bcb:                         fail("Expect rollback to fail due to connection being closed");
1:0a12bcb:                     } catch (Throwable expectedWithInterrupt) {
1:0a12bcb:                         assertTrue(expectedWithInterrupt instanceof XAException);
1:0a12bcb:                         assertCause(expectedWithInterrupt, new Class[]{ConnectionClosedException.class, InterruptedException.class});
1:0a12bcb:                     }
1:0a12bcb:                     session.close();
1:0a12bcb: 
1:0a12bcb:                     assertTrue("Was interrupted", Thread.currentThread().isInterrupted());
1:0a12bcb: 
1:0a12bcb:                 } catch (Throwable error) {
1:0a12bcb:                     error.printStackTrace();
1:0a12bcb:                     errors.add(error);
1:0a12bcb:                 }
1:0a12bcb:             }
1:0a12bcb:         });
1:0a12bcb: 
1:0a12bcb:         assertTrue("got to blocking call", blockedServerSize.await(20, TimeUnit.SECONDS));
1:0a12bcb: 
1:0a12bcb:         // will interrupt
1:0a12bcb:         executorService.shutdownNow();
1:0a12bcb:         canContinue.countDown();
1:0a12bcb: 
1:0a12bcb:         assertTrue("job done", executorService.awaitTermination(20, TimeUnit.SECONDS));
1:0a12bcb: 
1:0a12bcb:         assertTrue("no errors: " + errors, errors.isEmpty());
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     private void assertCause(Throwable expectedWithInterrupt, Class[] exceptionClazzes) {
1:0a12bcb:         Throwable candidate = expectedWithInterrupt;
1:0a12bcb: 
1:0a12bcb:         while (candidate != null) {
1:0a12bcb:             for (Class<?> exceptionClazz: exceptionClazzes) {
1:0a12bcb:                 if (exceptionClazz.isInstance(candidate)) {
1:0a12bcb:                     return;
1:0a12bcb:                 }
1:0a12bcb:             }
1:0a12bcb:             candidate = candidate.getCause();
1:0a12bcb:         }
1:0a12bcb:         LOG.error("ex", expectedWithInterrupt);
1:0a12bcb:         fail("no expected type as cause:" + expectedWithInterrupt);
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     public Xid createXid() throws IOException {
1:0a12bcb: 
1:0a12bcb:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:0a12bcb:         DataOutputStream os = new DataOutputStream(baos);
1:0a12bcb:         os.writeLong(++txGenerator);
1:0a12bcb:         os.close();
1:0a12bcb:         final byte[] bs = baos.toByteArray();
1:0a12bcb: 
1:0a12bcb:         return new Xid() {
1:0a12bcb:             public int getFormatId() {
1:0a12bcb:                 return 87;
1:0a12bcb:             }
1:0a12bcb: 
1:0a12bcb:             public byte[] getGlobalTransactionId() {
1:0a12bcb:                 return bs;
1:0a12bcb:             }
1:0a12bcb: 
1:0a12bcb:             public byte[] getBranchQualifier() {
1:0a12bcb:                 return bs;
1:0a12bcb:             }
1:0a12bcb:         };
1:0a12bcb: 
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     private void publishAMessage() throws IOException, XAException, JMSException {
1:0a12bcb:         Xid tid = createXid();
1:0a12bcb:         resource.start(tid, XAResource.TMNOFLAGS);
1:0a12bcb:         MessageProducer producer = session.createProducer(dest);
1:0a12bcb:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:0a12bcb:         message.setText(getName());
1:0a12bcb:         producer.send(message);
1:0a12bcb:         resource.end(tid, XAResource.TMSUCCESS);
1:0a12bcb:         resource.commit(tid, true);
1:0a12bcb:         session.close();
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb: 
1:0a12bcb:     private String getName() {
1:0a12bcb:         return this.getClass().getName();
1:0a12bcb:     }
1:0a12bcb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.LinkedList;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.MutableBrokerFilter;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.transaction.Synchronization;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.*;
1: 
1: public class ActiveMQXAConnectionTxInterruptTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQXAConnectionTxInterruptTest.class);
1:     long txGenerator = System.currentTimeMillis();
1:     private BrokerService broker;
1:     XASession session;
1:     XAResource resource;
1:     ActiveMQXAConnection xaConnection;
1:     Destination dest;
1: 
1:     @Before
1:     public void startBrokerEtc() throws Exception {
1:         broker = BrokerFactory.createBroker(new URI("broker:(tcp://localhost:0)/BRXA"));
1:         broker.setPersistent(false);
1:         broker.start();
1:         ActiveMQXAConnectionFactory cf1 = new ActiveMQXAConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
1:         cf1.setStatsEnabled(true);
1:         xaConnection = (ActiveMQXAConnection)cf1.createConnection();
1:         xaConnection.start();
1:         session = xaConnection.createXASession();
1:         resource = session.getXAResource();
1: 
1:         dest = new ActiveMQQueue("Q");
1: 
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             xaConnection.close();
1:         } catch (Throwable ignore) {
1:         }
1:         try {
1:             broker.stop();
1:         } catch (Throwable ignore) {
1:         }
1:     }
1: 
1: 
1:     @Test
1:     public void testRollbackAckInterrupted() throws Exception {
1: 
1:         // publish a message
1:         publishAMessage();
1:         Xid tid;
1: 
1:         // consume in tx and rollback with interrupt
1:         session = xaConnection.createXASession();
1:         final MessageConsumer consumer = session.createConsumer(dest);
1:         tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         ((TransactionContext)resource).addSynchronization(new Synchronization() {
1:             @Override
1:             public void beforeEnd() throws Exception {
1:                 LOG.info("Interrupting thread: " + Thread.currentThread(), new Throwable("Source"));
1:                 Thread.currentThread().interrupt();
1:             }
1:         });
1:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:         assertNotNull(receivedMessage);
1:         assertEquals(getName(), receivedMessage.getText());
1:         resource.end(tid, XAResource.TMFAIL);
1:         resource.rollback(tid);
1:         session.close();
1:         assertTrue("Was interrupted", Thread.currentThread().isInterrupted());
1:     }
1: 
1:     @Test
1:     public void testCommitAckInterrupted() throws Exception {
1: 
1:         // publish a message
1:         publishAMessage();
1: 
1:         // consume in tx and rollback with interrupt
1:         session = xaConnection.createXASession();
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         Xid tid = createXid();
1:         resource = session.getXAResource();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         ((TransactionContext)resource).addSynchronization(new Synchronization() {
1:             @Override
1:             public void beforeEnd() throws Exception {
1:                 LOG.info("Interrupting thread: " + Thread.currentThread(), new Throwable("Source"));
1:                 Thread.currentThread().interrupt();
1:             }
1:         });
1:         TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:         assertNotNull(receivedMessage);
1:         assertEquals(getName(), receivedMessage.getText());
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         session.close();
1: 
1:     }
1: 
1:     @Test
1:     public void testInterruptWhilePendingResponseToAck() throws Exception {
1: 
1:         final LinkedList<Throwable> errors = new LinkedList<Throwable>();
1:         final CountDownLatch blockedServerSize = new CountDownLatch(1);
1:         final CountDownLatch canContinue = new CountDownLatch(1);
1:         MutableBrokerFilter filter = (MutableBrokerFilter)broker.getBroker().getAdaptor(MutableBrokerFilter.class);
1:         filter.setNext(new MutableBrokerFilter(filter.getNext()) {
1:             @Override
1:             public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:                 blockedServerSize.countDown();
1:                 canContinue.await();
1:                 super.acknowledge(consumerExchange, ack);
1:             }
1:         });
1: 
1:         publishAMessage();
1: 
1:         // consume in tx and rollback with interrupt while pending reply
1:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     session = xaConnection.createXASession();
1:                     MessageConsumer consumer = session.createConsumer(dest);
1:                     Xid tid = createXid();
1:                     resource = session.getXAResource();
1:                     resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:                     TextMessage receivedMessage = (TextMessage) consumer.receive(1000);
1:                     assertNotNull(receivedMessage);
1:                     assertEquals(getName(), receivedMessage.getText());
1: 
1:                     try {
1:                         resource.end(tid, XAResource.TMSUCCESS);
1:                         fail("Expect end to fail");
1:                     } catch (Throwable expectedWithInterrupt) {
1:                         assertTrue(expectedWithInterrupt instanceof XAException);
1:                         assertCause(expectedWithInterrupt, new Class[]{InterruptedException.class});
1:                     }
1: 
1:                     try {
1:                         resource.rollback(tid);
1:                         fail("Expect rollback to fail due to connection being closed");
1:                     } catch (Throwable expectedWithInterrupt) {
1:                         assertTrue(expectedWithInterrupt instanceof XAException);
1:                         assertCause(expectedWithInterrupt, new Class[]{ConnectionClosedException.class, InterruptedException.class});
1:                     }
1:                     session.close();
1: 
1:                     assertTrue("Was interrupted", Thread.currentThread().isInterrupted());
1: 
1:                 } catch (Throwable error) {
1:                     error.printStackTrace();
1:                     errors.add(error);
1:                 }
1:             }
1:         });
1: 
1:         assertTrue("got to blocking call", blockedServerSize.await(20, TimeUnit.SECONDS));
1: 
1:         // will interrupt
1:         executorService.shutdownNow();
1:         canContinue.countDown();
1: 
1:         assertTrue("job done", executorService.awaitTermination(20, TimeUnit.SECONDS));
1: 
1:         assertTrue("no errors: " + errors, errors.isEmpty());
1:     }
1: 
1:     private void assertCause(Throwable expectedWithInterrupt, Class[] exceptionClazzes) {
1:         Throwable candidate = expectedWithInterrupt;
1: 
1:         while (candidate != null) {
1:             for (Class<?> exceptionClazz: exceptionClazzes) {
1:                 if (exceptionClazz.isInstance(candidate)) {
1:                     return;
1:                 }
1:             }
1:             candidate = candidate.getCause();
1:         }
1:         LOG.error("ex", expectedWithInterrupt);
1:         fail("no expected type as cause:" + expectedWithInterrupt);
1:     }
1: 
1:     public Xid createXid() throws IOException {
1: 
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 87;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1: 
1:     }
1: 
1:     private void publishAMessage() throws IOException, XAException, JMSException {
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1:         MessageProducer producer = session.createProducer(dest);
1:         ActiveMQTextMessage message  = new ActiveMQTextMessage();
1:         message.setText(getName());
1:         producer.send(message);
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         resource.commit(tid, true);
1:         session.close();
1:     }
1: 
1: 
1:     private String getName() {
1:         return this.getClass().getName();
1:     }
1: }
============================================================================