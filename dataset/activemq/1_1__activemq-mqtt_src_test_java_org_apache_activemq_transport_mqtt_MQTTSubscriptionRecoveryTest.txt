1:fd2805f: /**
1:fd2805f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd2805f:  * contributor license agreements.  See the NOTICE file distributed with
1:fd2805f:  * this work for additional information regarding copyright ownership.
1:fd2805f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd2805f:  * (the "License"); you may not use this file except in compliance with
1:fd2805f:  * the License.  You may obtain a copy of the License at
1:fd2805f:  *
1:fd2805f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd2805f:  *
1:fd2805f:  * Unless required by applicable law or agreed to in writing, software
1:fd2805f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd2805f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd2805f:  * See the License for the specific language governing permissions and
1:fd2805f:  * limitations under the License.
1:fd2805f:  */
1:fd2805f: package org.apache.activemq.transport.mqtt;
1:fd2805f: 
1:fd2805f: import static org.junit.Assert.assertTrue;
1:fd2805f: 
1:fd2805f: import java.util.Arrays;
1:fd2805f: import java.util.Collection;
1:fd2805f: import java.util.concurrent.TimeUnit;
1:fd2805f: 
1:fd2805f: import org.apache.activemq.util.Wait;
1:fd2805f: import org.eclipse.paho.client.mqttv3.MqttCallback;
1:fd2805f: import org.eclipse.paho.client.mqttv3.MqttClient;
1:fd2805f: import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
1:fd2805f: import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
1:fd2805f: import org.junit.Test;
1:fd2805f: import org.junit.runner.RunWith;
1:fd2805f: import org.junit.runners.Parameterized;
1:fd2805f: import org.junit.runners.Parameterized.Parameters;
1:fd2805f: import org.slf4j.Logger;
1:fd2805f: import org.slf4j.LoggerFactory;
1:fd2805f: 
1:fd2805f: /**
1:fd2805f:  * Test that all previous QoS 2 subscriptions are recovered on Broker restart.
1:fd2805f:  */
1:fd2805f: @RunWith(Parameterized.class)
1:fd2805f: public class MQTTSubscriptionRecoveryTest extends MQTTTestSupport {
1:fd2805f: 
1:fd2805f:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSubscriptionRecoveryTest.class);
1:fd2805f: 
1:fd2805f:     protected boolean defaultStrategy = false;
1:fd2805f: 
1:fd2805f:     @Parameters(name="{0}")
1:fd2805f:     public static Collection<Object[]> data() {
1:fd2805f:         return Arrays.asList(new Object[][] {
1:fd2805f:             { "mqtt-virtual-topic-subscriptions", false},
1:fd2805f:             { "mqtt-default-subscriptions", true} });
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     public MQTTSubscriptionRecoveryTest(String subscriptionStrategy, boolean defaultStrategy) {
1:fd2805f:         this.defaultStrategy = defaultStrategy;
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     @Override
1:fd2805f:     public boolean isPersistent() {
1:fd2805f:         return true;
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     @Override
1:fd2805f:     public String getProtocolConfig() {
1:fd2805f:         if (defaultStrategy) {
1:fd2805f:             return "transport.subscriptionStrategy=mqtt-default-subscriptions";
1:fd2805f:         } else {
1:fd2805f:             return "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:fd2805f:         }
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     @Test
1:fd2805f:     public void testDurableSubscriptionsAreRecovered() throws Exception {
1:fd2805f: 
1:455f1ca:         MqttClient connection = createClient(getTestName());
1:fd2805f: 
1:fd2805f:         final String[] topics = { "TopicA/", "TopicB/", "TopicC/" };
1:fd2805f:         for (int i = 0; i < topics.length; i++) {
1:fd2805f:             LOG.debug("Subscribing to Topic:{}", topics[i]);
1:fd2805f:             connection.subscribe(topics[i], EXACTLY_ONCE);
1:fd2805f:         }
1:fd2805f: 
1:fd2805f:         assertStatsForConnectedClient(topics.length);
1:fd2805f: 
1:fd2805f:         disconnect(connection);
1:fd2805f: 
1:fd2805f:         assertStatsForDisconnectedClient(topics.length);
1:fd2805f: 
1:fd2805f:         restartBroker();
1:fd2805f: 
1:fd2805f:         assertStatsForDisconnectedClient(topics.length);
1:fd2805f: 
1:455f1ca:         connection = createClient(getTestName());
1:fd2805f: 
1:fd2805f:         assertStatsForConnectedClient(topics.length);
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     private void assertStatsForConnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         if (defaultStrategy) {
1:fd2805f:             assertTopicStatsForConnectedClient(numDestinations);
1:fd2805f:         } else {
1:fd2805f:             assertQueueStatsForConnectedClient(numDestinations);
1:fd2805f:         }
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     private void assertStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         if (defaultStrategy) {
1:fd2805f:             assertTopicStatsForDisconnectedClient(numDestinations);
1:fd2805f:         } else {
1:fd2805f:             assertQueueStatsForDisconnectedClient(numDestinations);
1:fd2805f:         }
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     //----- Assert implementations based on subscription strategy ------------//
1:fd2805f: 
1:fd2805f:     private void assertQueueStatsForConnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getQueueSubscribers().length == numDestinations;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     private void assertQueueStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getQueueSubscribers().length == 0;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     private void assertTopicStatsForConnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getDurableTopicSubscribers().length == numDestinations;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f: 
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getInactiveDurableTopicSubscribers().length == 0;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     private void assertTopicStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getDurableTopicSubscribers().length == 0;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f: 
1:fd2805f:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:fd2805f: 
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return getProxyToBroker().getInactiveDurableTopicSubscribers().length == numDestinations;
1:fd2805f:             }
1:fd2805f:         }));
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     //----- Client Connect and Disconnect using Paho MQTT --------------------//
1:fd2805f: 
1:fd2805f:     protected MqttClient createClient(String clientId) throws Exception {
1:fd2805f:         return createClient(false, clientId, null);
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     protected MqttClient createClient(boolean cleanSession, String clientId, MqttCallback listener) throws Exception {
1:fd2805f:         MqttConnectOptions options = new MqttConnectOptions();
1:fd2805f:         options.setCleanSession(cleanSession);
1:fd2805f:         options.setKeepAliveInterval(30);
1:fd2805f: 
1:fd2805f:         final MqttClient client = new MqttClient("tcp://localhost:" + getPort(), clientId, new MemoryPersistence());
1:fd2805f:         client.setCallback(listener);
1:fd2805f:         client.connect(options);
1:fd2805f: 
1:fd2805f:         Wait.waitFor(new Wait.Condition() {
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return client.isConnected();
1:fd2805f:             }
1:fd2805f:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100));
1:fd2805f: 
1:fd2805f:         return client;
1:fd2805f:     }
1:fd2805f: 
1:fd2805f:     protected void disconnect(final MqttClient client) throws Exception {
1:fd2805f:         client.disconnect();
1:fd2805f:         client.close();
1:fd2805f: 
1:fd2805f:         Wait.waitFor(new Wait.Condition() {
1:fd2805f:             @Override
1:fd2805f:             public boolean isSatisified() throws Exception {
1:fd2805f:                 return !client.isConnected();
1:fd2805f:             }
1:fd2805f:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100));
1:fd2805f:     }
1:fd2805f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:455f1ca
/////////////////////////////////////////////////////////////////////////
1:         MqttClient connection = createClient(getTestName());
/////////////////////////////////////////////////////////////////////////
1:         connection = createClient(getTestName());
commit:fd2805f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.eclipse.paho.client.mqttv3.MqttCallback;
1: import org.eclipse.paho.client.mqttv3.MqttClient;
1: import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
1: import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that all previous QoS 2 subscriptions are recovered on Broker restart.
1:  */
1: @RunWith(Parameterized.class)
1: public class MQTTSubscriptionRecoveryTest extends MQTTTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSubscriptionRecoveryTest.class);
1: 
1:     protected boolean defaultStrategy = false;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             { "mqtt-virtual-topic-subscriptions", false},
1:             { "mqtt-default-subscriptions", true} });
1:     }
1: 
1:     public MQTTSubscriptionRecoveryTest(String subscriptionStrategy, boolean defaultStrategy) {
1:         this.defaultStrategy = defaultStrategy;
1:     }
1: 
1:     @Override
1:     public boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     @Override
1:     public String getProtocolConfig() {
1:         if (defaultStrategy) {
1:             return "transport.subscriptionStrategy=mqtt-default-subscriptions";
1:         } else {
1:             return "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:         }
1:     }
1: 
1:     @Test
1:     public void testDurableSubscriptionsAreRecovered() throws Exception {
1: 
0:         MqttClient connection = createClient(getName());
1: 
1:         final String[] topics = { "TopicA/", "TopicB/", "TopicC/" };
1:         for (int i = 0; i < topics.length; i++) {
1:             LOG.debug("Subscribing to Topic:{}", topics[i]);
1:             connection.subscribe(topics[i], EXACTLY_ONCE);
1:         }
1: 
1:         assertStatsForConnectedClient(topics.length);
1: 
1:         disconnect(connection);
1: 
1:         assertStatsForDisconnectedClient(topics.length);
1: 
1:         restartBroker();
1: 
1:         assertStatsForDisconnectedClient(topics.length);
1: 
0:         connection = createClient(getName());
1: 
1:         assertStatsForConnectedClient(topics.length);
1:     }
1: 
1:     private void assertStatsForConnectedClient(final int numDestinations) throws Exception {
1:         if (defaultStrategy) {
1:             assertTopicStatsForConnectedClient(numDestinations);
1:         } else {
1:             assertQueueStatsForConnectedClient(numDestinations);
1:         }
1:     }
1: 
1:     private void assertStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:         if (defaultStrategy) {
1:             assertTopicStatsForDisconnectedClient(numDestinations);
1:         } else {
1:             assertQueueStatsForDisconnectedClient(numDestinations);
1:         }
1:     }
1: 
1:     //----- Assert implementations based on subscription strategy ------------//
1: 
1:     private void assertQueueStatsForConnectedClient(final int numDestinations) throws Exception {
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getQueueSubscribers().length == numDestinations;
1:             }
1:         }));
1:     }
1: 
1:     private void assertQueueStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getQueueSubscribers().length == 0;
1:             }
1:         }));
1:     }
1: 
1:     private void assertTopicStatsForConnectedClient(final int numDestinations) throws Exception {
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getDurableTopicSubscribers().length == numDestinations;
1:             }
1:         }));
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getInactiveDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1:     }
1: 
1:     private void assertTopicStatsForDisconnectedClient(final int numDestinations) throws Exception {
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getInactiveDurableTopicSubscribers().length == numDestinations;
1:             }
1:         }));
1:     }
1: 
1:     //----- Client Connect and Disconnect using Paho MQTT --------------------//
1: 
1:     protected MqttClient createClient(String clientId) throws Exception {
1:         return createClient(false, clientId, null);
1:     }
1: 
1:     protected MqttClient createClient(boolean cleanSession, String clientId, MqttCallback listener) throws Exception {
1:         MqttConnectOptions options = new MqttConnectOptions();
1:         options.setCleanSession(cleanSession);
1:         options.setKeepAliveInterval(30);
1: 
1:         final MqttClient client = new MqttClient("tcp://localhost:" + getPort(), clientId, new MemoryPersistence());
1:         client.setCallback(listener);
1:         client.connect(options);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return client.isConnected();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100));
1: 
1:         return client;
1:     }
1: 
1:     protected void disconnect(final MqttClient client) throws Exception {
1:         client.disconnect();
1:         client.close();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !client.isConnected();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(100));
1:     }
1: }
============================================================================