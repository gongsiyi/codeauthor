1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:a3fa0da: import java.beans.Transient;
1:1f01c94: import java.io.DataOutputStream;
1:d29ca2a: import java.io.IOException;
1:a3fa0da: import java.lang.reflect.Method;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageNotReadableException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: import junit.textui.TestRunner;
1:d29ca2a: 
1:1f01c94: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:1f01c94: import org.apache.activemq.util.MarshallingSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQTextMessageTest extends TestCase {
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         TestRunner.run(ActiveMQTextMessageTest.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetDataStructureType() {
1:d29ca2a:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:d29ca2a:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_TEXT_MESSAGE);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testShallowCopy() throws JMSException {
1:d29ca2a:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:d29ca2a:         String string = "str";
1:d29ca2a:         msg.setText(string);
1:d29ca2a:         Message copy = msg.copy();
1:d29ca2a:         assertTrue(msg.getText() == ((ActiveMQTextMessage) copy).getText());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetText() {
1:d29ca2a:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:d29ca2a:         String str = "testText";
1:d29ca2a:         try {
1:d29ca2a:             msg.setText(str);
1:d29ca2a:             assertEquals(msg.getText(), str);
1:d29ca2a:         } catch (JMSException e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetBytes() throws JMSException, IOException {
1:d29ca2a:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:d29ca2a:         String str = "testText";
1:d29ca2a:         msg.setText(str);
1:d29ca2a:         msg.beforeMarshall(null);
1:d29ca2a:         
1:d29ca2a:         ByteSequence bytes = msg.getContent();
1:d29ca2a:         msg = new ActiveMQTextMessage();
1:d29ca2a:         msg.setContent(bytes);
1:d29ca2a:         
1:d29ca2a:         assertEquals(msg.getText(), str);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testClearBody() throws JMSException, IOException {
1:d29ca2a:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:d29ca2a:         textMessage.setText("string");
1:d29ca2a:         textMessage.clearBody();
1:d29ca2a:         assertFalse(textMessage.isReadOnlyBody());
1:d29ca2a:         assertNull(textMessage.getText());
1:d29ca2a:         try {
1:d29ca2a:             textMessage.setText("String");
1:d29ca2a:             textMessage.getText();
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("should be writeable");
1:d29ca2a:         } catch (MessageNotReadableException mnre) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:d29ca2a:         textMessage.setText("test");
1:d29ca2a:         textMessage.setReadOnlyBody(true);
1:d29ca2a:         try {
1:d29ca2a:             textMessage.getText();
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             textMessage.setText("test");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testWriteOnlyBody() throws JMSException { // should always be readable
1:d29ca2a:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:d29ca2a:         textMessage.setReadOnlyBody(false);
1:d29ca2a:         try {
1:d29ca2a:             textMessage.setText("test");
1:d29ca2a:             textMessage.getText();
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         textMessage.setReadOnlyBody(true);
1:d29ca2a:         try {
1:d29ca2a:             textMessage.getText();
1:d29ca2a:             textMessage.setText("test");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:1f01c94:     
1:1f01c94:     public void testShortText() throws Exception {
1:1f01c94:         String shortText = "Content";
1:1f01c94:     	ActiveMQTextMessage shortMessage = new ActiveMQTextMessage();
1:1f01c94:         setContent(shortMessage, shortText);
1:1f01c94:         assertTrue(shortMessage.toString().contains("text = " + shortText));
1:1f01c94:         assertTrue(shortMessage.getText().equals(shortText));
1:1f01c94:         
1:1f01c94:         String longText = "Very very very very veeeeeeery loooooooooooooooooooooooooooooooooong text";
1:1f01c94:         String longExpectedText = "Very very very very veeeeeeery looooooooooooo...ooooong text";
1:1f01c94:         ActiveMQTextMessage longMessage = new ActiveMQTextMessage();
1:1f01c94:         setContent(longMessage, longText);
1:1f01c94:         assertTrue(longMessage.toString().contains("text = " + longExpectedText));
1:1f01c94:         assertTrue(longMessage.getText().equals(longText));         
1:d29ca2a:     }
1:1f01c94:     
1:90fd917:     public void testNullText() throws Exception {
1:90fd917:     	ActiveMQTextMessage nullMessage = new ActiveMQTextMessage();
1:90fd917:     	setContent(nullMessage, null);
1:90fd917:     	assertTrue(nullMessage.toString().contains("text = null"));
1:90fd917:     }
1:a3fa0da: 
1:a3fa0da:     public void testTransient() throws Exception {
1:a3fa0da:         Method method = ActiveMQTextMessage.class.getMethod("getRegionDestination", null);
1:a3fa0da:         assertTrue(method.isAnnotationPresent(Transient.class));
1:a3fa0da:     }
1:90fd917:     
1:1f01c94:     protected void setContent(Message message, String text) throws Exception {
1:1f01c94:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:1f01c94:         DataOutputStream dataOut = new DataOutputStream(baos);
1:1f01c94:         MarshallingSupport.writeUTF8(dataOut, text);
1:1f01c94:         dataOut.close();
1:1f01c94:         message.setContent(baos.toByteSequence());
1:1f01c94:     }
1:1f01c94: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:a3fa0da
/////////////////////////////////////////////////////////////////////////
1: import java.beans.Transient;
1: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testTransient() throws Exception {
1:         Method method = ActiveMQTextMessage.class.getMethod("getRegionDestination", null);
1:         assertTrue(method.isAnnotationPresent(Transient.class));
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.packet.ByteSequence;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: 
1: import junit.framework.TestCase;
1: import junit.textui.TestRunner;
1: 
0: import org.activeio.ByteSequence;
0: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.CommandTypes;
0: import org.apache.activemq.command.Message;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQTextMessageTest extends TestCase {
1: 
1:     public static void main(String[] args) {
1:         TestRunner.run(ActiveMQTextMessageTest.class);
1:     }
1: 
1:     public void testGetDataStructureType() {
1:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_TEXT_MESSAGE);
1:     }
1: 
1:     public void testShallowCopy() throws JMSException {
1:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:         String string = "str";
1:         msg.setText(string);
1:         Message copy = msg.copy();
1:         assertTrue(msg.getText() == ((ActiveMQTextMessage) copy).getText());
1:     }
1: 
1:     public void testSetText() {
1:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:         String str = "testText";
1:         try {
1:             msg.setText(str);
1:             assertEquals(msg.getText(), str);
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void testGetBytes() throws JMSException, IOException {
1:         ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:         String str = "testText";
1:         msg.setText(str);
1:         msg.beforeMarshall(null);
1:         
1:         ByteSequence bytes = msg.getContent();
1:         msg = new ActiveMQTextMessage();
1:         msg.setContent(bytes);
1:         
1:         assertEquals(msg.getText(), str);
1:     }
1: 
1:     public void testClearBody() throws JMSException, IOException {
1:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:         textMessage.setText("string");
1:         textMessage.clearBody();
1:         assertFalse(textMessage.isReadOnlyBody());
1:         assertNull(textMessage.getText());
1:         try {
1:             textMessage.setText("String");
1:             textMessage.getText();
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("should be writeable");
1:         } catch (MessageNotReadableException mnre) {
1:             fail("should be readable");
1:         }
1:     }
1: 
1:     public void testReadOnlyBody() throws JMSException {
1:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:         textMessage.setText("test");
1:         textMessage.setReadOnlyBody(true);
1:         try {
1:             textMessage.getText();
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         }
1:         try {
1:             textMessage.setText("test");
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1:     public void testWriteOnlyBody() throws JMSException { // should always be readable
1:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:         textMessage.setReadOnlyBody(false);
1:         try {
1:             textMessage.setText("test");
1:             textMessage.getText();
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         }
1:         textMessage.setReadOnlyBody(true);
1:         try {
1:             textMessage.getText();
1:             textMessage.setText("test");
1:             fail("should throw exception");
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:90fd917
/////////////////////////////////////////////////////////////////////////
1:     public void testNullText() throws Exception {
1:     	ActiveMQTextMessage nullMessage = new ActiveMQTextMessage();
1:     	setContent(nullMessage, null);
1:     	assertTrue(nullMessage.toString().contains("text = null"));
1:     }
1:     
commit:1f01c94
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataOutputStream;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testShortText() throws Exception {
1:         String shortText = "Content";
1:     	ActiveMQTextMessage shortMessage = new ActiveMQTextMessage();
1:         setContent(shortMessage, shortText);
1:         assertTrue(shortMessage.toString().contains("text = " + shortText));
1:         assertTrue(shortMessage.getText().equals(shortText));
1:         
1:         String longText = "Very very very very veeeeeeery loooooooooooooooooooooooooooooooooong text";
1:         String longExpectedText = "Very very very very veeeeeeery looooooooooooo...ooooong text";
1:         ActiveMQTextMessage longMessage = new ActiveMQTextMessage();
1:         setContent(longMessage, longText);
1:         assertTrue(longMessage.toString().contains("text = " + longExpectedText));
1:         assertTrue(longMessage.getText().equals(longText));         
1:     }
1:     
1:     protected void setContent(Message message, String text) throws Exception {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dataOut = new DataOutputStream(baos);
1:         MarshallingSupport.writeUTF8(dataOut, text);
1:         dataOut.close();
1:         message.setContent(baos.toByteSequence());
1:     }
============================================================================