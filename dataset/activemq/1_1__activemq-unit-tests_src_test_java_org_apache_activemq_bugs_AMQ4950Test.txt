1:f69cbd8: /**
1:ed66e3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed66e3b:  * contributor license agreements.  See the NOTICE file distributed with
1:ed66e3b:  * this work for additional information regarding copyright ownership.
1:ed66e3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed66e3b:  * (the "License"); you may not use this file except in compliance with
1:ed66e3b:  * the License.  You may obtain a copy of the License at
1:ed66e3b:  *
1:ed66e3b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed66e3b:  *
1:ed66e3b:  * Unless required by applicable law or agreed to in writing, software
1:ed66e3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed66e3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed66e3b:  * See the License for the specific language governing permissions and
1:ed66e3b:  * limitations under the License.
1:f69cbd8:  */
1:f69cbd8: package org.apache.activemq.bugs;
1:f69cbd8: 
1:f69cbd8: import java.io.ByteArrayOutputStream;
1:f69cbd8: import java.io.DataOutputStream;
1:f69cbd8: import java.io.IOException;
1:f69cbd8: import java.util.concurrent.CopyOnWriteArrayList;
1:f69cbd8: 
1:f69cbd8: import javax.jms.Message;
1:f69cbd8: import javax.jms.MessageProducer;
1:f69cbd8: import javax.jms.XASession;
1:f69cbd8: import javax.transaction.xa.XAException;
1:f69cbd8: import javax.transaction.xa.XAResource;
1:f69cbd8: import javax.transaction.xa.Xid;
1:f69cbd8: 
1:f69cbd8: import org.apache.activemq.ActiveMQXAConnection;
1:f69cbd8: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:f69cbd8: import org.apache.activemq.broker.BrokerPlugin;
1:f69cbd8: import org.apache.activemq.broker.BrokerPluginSupport;
1:f69cbd8: import org.apache.activemq.broker.BrokerRegistry;
1:f69cbd8: import org.apache.activemq.broker.BrokerRestartTestSupport;
1:f69cbd8: import org.apache.activemq.broker.BrokerService;
1:f69cbd8: import org.apache.activemq.broker.ConnectionContext;
1:f69cbd8: import org.apache.activemq.broker.TransactionBroker;
1:f69cbd8: import org.apache.activemq.broker.TransportConnection;
1:f69cbd8: import org.apache.activemq.command.ConnectionId;
1:f69cbd8: import org.apache.activemq.command.TransactionId;
1:f69cbd8: import org.apache.activemq.command.TransactionInfo;
1:f69cbd8: import org.apache.activemq.command.XATransactionId;
1:f69cbd8: import org.apache.activemq.transport.failover.FailoverTransport;
1:f69cbd8: 
1:f69cbd8: import org.slf4j.Logger;
1:f69cbd8: import org.slf4j.LoggerFactory;
1:f69cbd8: 
1:f69cbd8: 
1:f69cbd8: /**
1:f69cbd8:  * Test for AMQ-4950.
1:f69cbd8:  * Simulates an error during XA prepare call.
1:f69cbd8:  */
1:f69cbd8: public class AMQ4950Test extends BrokerRestartTestSupport {
1:f69cbd8: 
1:f69cbd8:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ4950Test.class);
1:f69cbd8:     protected static final String simulatedExceptionMessage = "Simulating error inside tx prepare().";
1:f69cbd8:     public boolean prioritySupport = false;
1:f69cbd8:     protected String connectionUri = null;
1:f69cbd8: 
1:f69cbd8:     @Override
1:f69cbd8:     protected void configureBroker(BrokerService broker) throws Exception {
1:f69cbd8:         broker.setDestinationPolicy(policyMap);
1:f69cbd8:         broker.setDeleteAllMessagesOnStartup(true);
1:f69cbd8:         broker.setUseJmx(false);
1:f69cbd8:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:f69cbd8:         broker.setPlugins(new BrokerPlugin[]{
1:f69cbd8:                 new BrokerPluginSupport() {
1:f69cbd8: 
1:f69cbd8:                     @Override
1:f69cbd8:                     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:f69cbd8:                         getNext().prepareTransaction(context, xid);
1:f69cbd8:                         LOG.debug("BrokerPlugin.prepareTransaction() will throw an exception.");
1:f69cbd8:                         throw new XAException(simulatedExceptionMessage);
1:f69cbd8:                     }
1:f69cbd8: 
1:f69cbd8:                     @Override
1:f69cbd8:                     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:f69cbd8:                         LOG.debug("BrokerPlugin.commitTransaction().");
1:f69cbd8:                         super.commitTransaction(context, xid, onePhase);
1:f69cbd8:                     }
1:f69cbd8:                 }
1:f69cbd8:         });
1:f69cbd8:    }
1:f69cbd8: 
1:f69cbd8:     /**
1:f69cbd8:      * Creates XA transaction and invokes XA prepare().
1:f69cbd8:      * Due to registered BrokerFilter prepare will be handled by broker
1:f69cbd8:      * but then throw an exception.
1:f69cbd8:      * Prior to fixing AMQ-4950, this resulted in a ClassCastException
1:f69cbd8:      * in ConnectionStateTracker.PrepareReadonlyTransactionAction.onResponse()
1:f69cbd8:      * causing the failover transport to reconnect and replay the XA prepare().
1:f69cbd8:      */
1:f69cbd8:     public void testXAPrepareFailure() throws Exception {
1:f69cbd8: 
1:f69cbd8:         assertNotNull(connectionUri);
1:f69cbd8:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + connectionUri + ")");
1:f69cbd8:         ActiveMQXAConnection xaConnection = (ActiveMQXAConnection)cf.createConnection();
1:f69cbd8:         xaConnection.start();
1:f69cbd8:         XASession session = xaConnection.createXASession();
1:f69cbd8:         XAResource resource = session.getXAResource();
1:f69cbd8:         Xid tid = createXid();
1:f69cbd8:         resource.start(tid, XAResource.TMNOFLAGS);
1:f69cbd8: 
1:f69cbd8:         MessageProducer producer = session.createProducer(session.createQueue(this.getClass().getName()));
1:f69cbd8:         Message message = session.createTextMessage("Sample Message");
1:f69cbd8:         producer.send(message);
1:f69cbd8:         resource.end(tid, XAResource.TMSUCCESS);
1:f69cbd8:         try {
1:f69cbd8:             LOG.debug("Calling XA prepare(), expecting an exception");
1:f69cbd8:             int ret = resource.prepare(tid);
1:f69cbd8:             if (XAResource.XA_OK == ret) 
1:f69cbd8:                 resource.commit(tid, false);
1:f69cbd8:         } catch (XAException xae) {
1:f69cbd8:             LOG.info("Received excpected XAException: {}", xae.getMessage());
1:f69cbd8:             LOG.info("Rolling back transaction {}", tid);
1:f69cbd8:             
1:f69cbd8:             // with bug AMQ-4950 the thrown error reads "Cannot call prepare now"
1:f69cbd8:             // we check that we receive the original exception message as 
1:f69cbd8:             // thrown by the BrokerPlugin
1:f69cbd8:             assertEquals(simulatedExceptionMessage, xae.getMessage());
1:f69cbd8:             resource.rollback(tid);
1:f69cbd8:         }
1:f69cbd8:         // couple of assertions
1:f69cbd8:         assertTransactionGoneFromBroker(tid);
1:f69cbd8:         assertTransactionGoneFromConnection(broker.getBrokerName(), xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:f69cbd8:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1:f69cbd8: 
1:f69cbd8:         //cleanup
1:f69cbd8:         producer.close();
1:f69cbd8:         session.close();
1:f69cbd8:         xaConnection.close();
1:f69cbd8:         LOG.debug("testXAPrepareFailure() finished.");
1:f69cbd8:     }
1:f69cbd8: 
1:f69cbd8: 
1:f69cbd8:     public Xid createXid() throws IOException {
1:f69cbd8:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:f69cbd8:         DataOutputStream os = new DataOutputStream(baos);
1:f69cbd8:         os.writeLong(++txGenerator);
1:f69cbd8:         os.close();
1:f69cbd8:         final byte[] bs = baos.toByteArray();
1:f69cbd8: 
1:f69cbd8:         return new Xid() {
1:f69cbd8:             public int getFormatId() {
1:f69cbd8:                 return 86;
1:f69cbd8:             }
1:f69cbd8: 
1:f69cbd8:             public byte[] getGlobalTransactionId() {
1:f69cbd8:                 return bs;
1:f69cbd8:             }
1:f69cbd8: 
1:f69cbd8:             public byte[] getBranchQualifier() {
1:f69cbd8:                 return bs;
1:f69cbd8:             }
1:f69cbd8:         };
1:f69cbd8:     }
1:f69cbd8: 
1:f69cbd8: 
1:f69cbd8:     private void assertTransactionGoneFromFailoverState(
1:f69cbd8:             ActiveMQXAConnection connection1, Xid tid) throws Exception {
1:f69cbd8: 
1:f69cbd8:         FailoverTransport transport = (FailoverTransport) connection1.getTransport().narrow(FailoverTransport.class);
1:f69cbd8:         TransactionInfo info = new TransactionInfo(connection1.getConnectionInfo().getConnectionId(), new XATransactionId(tid), TransactionInfo.COMMIT_ONE_PHASE);
1:f69cbd8:         assertNull("transaction should not exist in the state tracker",
1:f69cbd8:                 transport.getStateTracker().processCommitTransactionOnePhase(info));
1:f69cbd8:     }
1:f69cbd8: 
1:f69cbd8: 
1:f69cbd8:     private void assertTransactionGoneFromBroker(Xid tid) throws Exception {
1:f69cbd8:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
1:f69cbd8:         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:f69cbd8:         try {
1:f69cbd8:             transactionBroker.getTransaction(null, new XATransactionId(tid), false);
1:f69cbd8:             fail("expected exception on tx not found");
1:f69cbd8:         } catch (XAException expectedOnNotFound) {
1:f69cbd8:         }
1:f69cbd8:     }
1:f69cbd8: 
1:f69cbd8: 
1:f69cbd8:     private void assertTransactionGoneFromConnection(String brokerName, String clientId, ConnectionId connectionId, Xid tid) throws Exception {
1:f69cbd8:         BrokerService broker = BrokerRegistry.getInstance().lookup(brokerName);
1:f69cbd8:         CopyOnWriteArrayList<TransportConnection> connections = broker.getTransportConnectors().get(0).getConnections();
1:f69cbd8:         for (TransportConnection connection: connections) {
1:f69cbd8:             if (connection.getConnectionId().equals(clientId)) {
1:f69cbd8:                 try {
1:f69cbd8:                     connection.processPrepareTransaction(new TransactionInfo(connectionId, new XATransactionId(tid), TransactionInfo.PREPARE));
1:f69cbd8:                     fail("did not get expected excepton on missing transaction, it must be still there in error!");
1:f69cbd8:                 } catch (IllegalStateException expectedOnNoTransaction) {
1:f69cbd8:                 }
1:f69cbd8:             }
1:f69cbd8:         }
1:f69cbd8:     }
1:f69cbd8: }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:ed66e3b
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f69cbd8
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
1: import org.apache.activemq.ActiveMQXAConnection;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerRestartTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.TransactionBroker;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.command.TransactionInfo;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * Test for AMQ-4950.
1:  * Simulates an error during XA prepare call.
1:  */
1: public class AMQ4950Test extends BrokerRestartTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ4950Test.class);
1:     protected static final String simulatedExceptionMessage = "Simulating error inside tx prepare().";
1:     public boolean prioritySupport = false;
1:     protected String connectionUri = null;
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         broker.setDestinationPolicy(policyMap);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(false);
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1: 
1:                     @Override
1:                     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:                         getNext().prepareTransaction(context, xid);
1:                         LOG.debug("BrokerPlugin.prepareTransaction() will throw an exception.");
1:                         throw new XAException(simulatedExceptionMessage);
1:                     }
1: 
1:                     @Override
1:                     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:                         LOG.debug("BrokerPlugin.commitTransaction().");
1:                         super.commitTransaction(context, xid, onePhase);
1:                     }
1:                 }
1:         });
1:    }
1: 
1:     /**
1:      * Creates XA transaction and invokes XA prepare().
1:      * Due to registered BrokerFilter prepare will be handled by broker
1:      * but then throw an exception.
1:      * Prior to fixing AMQ-4950, this resulted in a ClassCastException
1:      * in ConnectionStateTracker.PrepareReadonlyTransactionAction.onResponse()
1:      * causing the failover transport to reconnect and replay the XA prepare().
1:      */
1:     public void testXAPrepareFailure() throws Exception {
1: 
1:         assertNotNull(connectionUri);
1:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + connectionUri + ")");
1:         ActiveMQXAConnection xaConnection = (ActiveMQXAConnection)cf.createConnection();
1:         xaConnection.start();
1:         XASession session = xaConnection.createXASession();
1:         XAResource resource = session.getXAResource();
1:         Xid tid = createXid();
1:         resource.start(tid, XAResource.TMNOFLAGS);
1: 
1:         MessageProducer producer = session.createProducer(session.createQueue(this.getClass().getName()));
1:         Message message = session.createTextMessage("Sample Message");
1:         producer.send(message);
1:         resource.end(tid, XAResource.TMSUCCESS);
1:         try {
1:             LOG.debug("Calling XA prepare(), expecting an exception");
1:             int ret = resource.prepare(tid);
1:             if (XAResource.XA_OK == ret) 
1:                 resource.commit(tid, false);
1:         } catch (XAException xae) {
1:             LOG.info("Received excpected XAException: {}", xae.getMessage());
1:             LOG.info("Rolling back transaction {}", tid);
1:             
1:             // with bug AMQ-4950 the thrown error reads "Cannot call prepare now"
1:             // we check that we receive the original exception message as 
1:             // thrown by the BrokerPlugin
1:             assertEquals(simulatedExceptionMessage, xae.getMessage());
1:             resource.rollback(tid);
1:         }
1:         // couple of assertions
1:         assertTransactionGoneFromBroker(tid);
1:         assertTransactionGoneFromConnection(broker.getBrokerName(), xaConnection.getClientID(), xaConnection.getConnectionInfo().getConnectionId(), tid);
1:         assertTransactionGoneFromFailoverState(xaConnection, tid);
1: 
1:         //cleanup
1:         producer.close();
1:         session.close();
1:         xaConnection.close();
1:         LOG.debug("testXAPrepareFailure() finished.");
1:     }
1: 
1: 
1:     public Xid createXid() throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream os = new DataOutputStream(baos);
1:         os.writeLong(++txGenerator);
1:         os.close();
1:         final byte[] bs = baos.toByteArray();
1: 
1:         return new Xid() {
1:             public int getFormatId() {
1:                 return 86;
1:             }
1: 
1:             public byte[] getGlobalTransactionId() {
1:                 return bs;
1:             }
1: 
1:             public byte[] getBranchQualifier() {
1:                 return bs;
1:             }
1:         };
1:     }
1: 
1: 
1:     private void assertTransactionGoneFromFailoverState(
1:             ActiveMQXAConnection connection1, Xid tid) throws Exception {
1: 
1:         FailoverTransport transport = (FailoverTransport) connection1.getTransport().narrow(FailoverTransport.class);
1:         TransactionInfo info = new TransactionInfo(connection1.getConnectionInfo().getConnectionId(), new XATransactionId(tid), TransactionInfo.COMMIT_ONE_PHASE);
1:         assertNull("transaction should not exist in the state tracker",
1:                 transport.getStateTracker().processCommitTransactionOnePhase(info));
1:     }
1: 
1: 
1:     private void assertTransactionGoneFromBroker(Xid tid) throws Exception {
1:         BrokerService broker = BrokerRegistry.getInstance().lookup("localhost");
1:         TransactionBroker transactionBroker = (TransactionBroker)broker.getBroker().getAdaptor(TransactionBroker.class);
1:         try {
1:             transactionBroker.getTransaction(null, new XATransactionId(tid), false);
1:             fail("expected exception on tx not found");
1:         } catch (XAException expectedOnNotFound) {
1:         }
1:     }
1: 
1: 
1:     private void assertTransactionGoneFromConnection(String brokerName, String clientId, ConnectionId connectionId, Xid tid) throws Exception {
1:         BrokerService broker = BrokerRegistry.getInstance().lookup(brokerName);
1:         CopyOnWriteArrayList<TransportConnection> connections = broker.getTransportConnectors().get(0).getConnections();
1:         for (TransportConnection connection: connections) {
1:             if (connection.getConnectionId().equals(clientId)) {
1:                 try {
1:                     connection.processPrepareTransaction(new TransactionInfo(connectionId, new XATransactionId(tid), TransactionInfo.PREPARE));
1:                     fail("did not get expected excepton on missing transaction, it must be still there in error!");
1:                 } catch (IllegalStateException expectedOnNoTransaction) {
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================