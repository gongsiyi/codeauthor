1:63d62a7: /*
1:63d62a7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63d62a7:  * contributor license agreements.  See the NOTICE file distributed with
1:63d62a7:  * this work for additional information regarding copyright ownership.
1:63d62a7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63d62a7:  * (the "License"); you may not use this file except in compliance with
1:63d62a7:  * the License.  You may obtain a copy of the License at
2:63d62a7:  *
1:63d62a7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:63d62a7:  *
1:63d62a7:  * Unless required by applicable law or agreed to in writing, software
1:63d62a7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63d62a7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63d62a7:  * See the License for the specific language governing permissions and
1:63d62a7:  * limitations under the License.
2:63d62a7:  */
1:63d62a7: package org.apache.activemq.transport.amqp.message;
1:63d62a7: 
1:63d62a7: import java.nio.ByteBuffer;
1:63d62a7: 
1:b29d2ea: import org.apache.qpid.proton.codec.ReadableBuffer;
1:63d62a7: import org.apache.qpid.proton.codec.WritableBuffer;
1:63d62a7: 
1:63d62a7: public class AmqpWritableBuffer implements WritableBuffer {
1:63d62a7: 
1:63d62a7:     public final static int DEFAULT_CAPACITY = 4 * 1024;
1:63d62a7: 
1:63d62a7:     byte buffer[];
1:63d62a7:     int position;
1:63d62a7: 
2:63d62a7:    /**
1:63d62a7:     * Creates a new WritableBuffer with default capacity.
1:63d62a7:     */
1:63d62a7:    public AmqpWritableBuffer() {
1:63d62a7:        this(DEFAULT_CAPACITY);
1:63d62a7:    }
1:63d62a7: 
1:63d62a7:     /**
1:63d62a7:      * Create a new WritableBuffer with the given capacity.
1:63d62a7:      */
1:63d62a7:     public AmqpWritableBuffer(int capacity) {
1:63d62a7:         this.buffer = new byte[capacity];
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     public byte[] getArray() {
1:63d62a7:         return buffer;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     public int getArrayLength() {
1:63d62a7:         return position;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void put(byte b) {
1:63d62a7:         int newPosition = position + 1;
1:63d62a7:         ensureCapacity(newPosition);
1:63d62a7:         buffer[position] = b;
1:63d62a7:         position = newPosition;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void putShort(short value) {
1:63d62a7:         ensureCapacity(position + 2);
1:63d62a7:         buffer[position++] = (byte)(value >>> 8);
1:63d62a7:         buffer[position++] = (byte)(value >>> 0);
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void putInt(int value) {
1:63d62a7:         ensureCapacity(position + 4);
1:63d62a7:         buffer[position++] = (byte)(value >>> 24);
1:63d62a7:         buffer[position++] = (byte)(value >>> 16);
1:63d62a7:         buffer[position++] = (byte)(value >>> 8);
1:63d62a7:         buffer[position++] = (byte)(value >>> 0);
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void putLong(long value) {
1:63d62a7:         ensureCapacity(position + 8);
1:63d62a7:         buffer[position++] = (byte)(value >>> 56);
1:63d62a7:         buffer[position++] = (byte)(value >>> 48);
1:63d62a7:         buffer[position++] = (byte)(value >>> 40);
1:63d62a7:         buffer[position++] = (byte)(value >>> 32);
1:63d62a7:         buffer[position++] = (byte)(value >>> 24);
1:63d62a7:         buffer[position++] = (byte)(value >>> 16);
1:63d62a7:         buffer[position++] = (byte)(value >>> 8);
1:63d62a7:         buffer[position++] = (byte)(value >>> 0);
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void putFloat(float value) {
1:63d62a7:         putInt(Float.floatToRawIntBits(value));
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void putDouble(double value) {
1:63d62a7:         putLong(Double.doubleToRawLongBits(value));
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void put(byte[] src, int offset, int length) {
1:63d62a7:         if (length == 0) {
1:63d62a7:             return;
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         int newPosition = position + length;
1:63d62a7:         ensureCapacity(newPosition);
1:63d62a7:         System.arraycopy(src, offset, buffer, position, length);
1:63d62a7:         position = newPosition;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public boolean hasRemaining() {
1:63d62a7:         return position < Integer.MAX_VALUE;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public int remaining() {
1:63d62a7:         return Integer.MAX_VALUE - position;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public int position() {
1:63d62a7:         return position;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void position(int position) {
1:63d62a7:         ensureCapacity(position);
1:63d62a7:         this.position = position;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public void put(ByteBuffer payload) {
1:63d62a7:         int newPosition = position + payload.remaining();
1:63d62a7:         ensureCapacity(newPosition);
1:63d62a7:         while (payload.hasRemaining()) {
1:63d62a7:             buffer[position++] = payload.get();
1:63d62a7:         }
1:63d62a7: 
1:63d62a7:         position = newPosition;
1:63d62a7:     }
1:63d62a7: 
1:63d62a7:     @Override
1:63d62a7:     public int limit() {
1:63d62a7:         return Integer.MAX_VALUE;
1:63d62a7:     }
1:63d62a7: 
1:b29d2ea:     @Override
1:b29d2ea:     public void put(ReadableBuffer src) {
1:b29d2ea:         ensureCapacity(position);
1:b29d2ea:         src.get(this);
1:b29d2ea:     }
1:b29d2ea: 
1:63d62a7:     /**
1:63d62a7:      * Ensures the the buffer has at least the minimumCapacity specified.
1:63d62a7:      *
1:63d62a7:      * @param minimumCapacity
1:63d62a7:      *      the minimum capacity needed to meet the next write operation.
1:63d62a7:      */
1:63d62a7:     private void ensureCapacity(int minimumCapacity) {
1:63d62a7:         if (minimumCapacity > buffer.length) {
1:63d62a7:             byte newBuffer[] = new byte[Math.max(buffer.length << 1, minimumCapacity)];
1:63d62a7:             System.arraycopy(buffer, 0, newBuffer, 0, position);
1:63d62a7:             buffer = newBuffer;
1:63d62a7:         }
1:63d62a7:     }
1:63d62a7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b29d2ea
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.codec.ReadableBuffer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void put(ReadableBuffer src) {
1:         ensureCapacity(position);
1:         src.get(this);
1:     }
1: 
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.qpid.proton.codec.WritableBuffer;
1: 
1: /**
1:  *
1:  */
1: public class AmqpWritableBuffer implements WritableBuffer {
1: 
1:     public final static int DEFAULT_CAPACITY = 4 * 1024;
1: 
1:     byte buffer[];
1:     int position;
1: 
1:    /**
1:     * Creates a new WritableBuffer with default capacity.
1:     */
1:    public AmqpWritableBuffer() {
1:        this(DEFAULT_CAPACITY);
1:    }
1: 
1:     /**
1:      * Create a new WritableBuffer with the given capacity.
1:      */
1:     public AmqpWritableBuffer(int capacity) {
1:         this.buffer = new byte[capacity];
1:     }
1: 
1:     public byte[] getArray() {
1:         return buffer;
1:     }
1: 
1:     public int getArrayLength() {
1:         return position;
1:     }
1: 
1:     @Override
1:     public void put(byte b) {
1:         int newPosition = position + 1;
1:         ensureCapacity(newPosition);
1:         buffer[position] = b;
1:         position = newPosition;
1:     }
1: 
1:     @Override
1:     public void putShort(short value) {
1:         ensureCapacity(position + 2);
1:         buffer[position++] = (byte)(value >>> 8);
1:         buffer[position++] = (byte)(value >>> 0);
1:     }
1: 
1:     @Override
1:     public void putInt(int value) {
1:         ensureCapacity(position + 4);
1:         buffer[position++] = (byte)(value >>> 24);
1:         buffer[position++] = (byte)(value >>> 16);
1:         buffer[position++] = (byte)(value >>> 8);
1:         buffer[position++] = (byte)(value >>> 0);
1:     }
1: 
1:     @Override
1:     public void putLong(long value) {
1:         ensureCapacity(position + 8);
1:         buffer[position++] = (byte)(value >>> 56);
1:         buffer[position++] = (byte)(value >>> 48);
1:         buffer[position++] = (byte)(value >>> 40);
1:         buffer[position++] = (byte)(value >>> 32);
1:         buffer[position++] = (byte)(value >>> 24);
1:         buffer[position++] = (byte)(value >>> 16);
1:         buffer[position++] = (byte)(value >>> 8);
1:         buffer[position++] = (byte)(value >>> 0);
1:     }
1: 
1:     @Override
1:     public void putFloat(float value) {
1:         putInt(Float.floatToRawIntBits(value));
1:     }
1: 
1:     @Override
1:     public void putDouble(double value) {
1:         putLong(Double.doubleToRawLongBits(value));
1:     }
1: 
1:     @Override
1:     public void put(byte[] src, int offset, int length) {
1:         if (length == 0) {
1:             return;
1:         }
1: 
1:         int newPosition = position + length;
1:         ensureCapacity(newPosition);
1:         System.arraycopy(src, offset, buffer, position, length);
1:         position = newPosition;
1:     }
1: 
1:     @Override
1:     public boolean hasRemaining() {
1:         return position < Integer.MAX_VALUE;
1:     }
1: 
1:     @Override
1:     public int remaining() {
1:         return Integer.MAX_VALUE - position;
1:     }
1: 
1:     @Override
1:     public int position() {
1:         return position;
1:     }
1: 
1:     @Override
1:     public void position(int position) {
1:         ensureCapacity(position);
1:         this.position = position;
1:     }
1: 
1:     @Override
1:     public void put(ByteBuffer payload) {
1:         int newPosition = position + payload.remaining();
1:         ensureCapacity(newPosition);
1:         while (payload.hasRemaining()) {
1:             buffer[position++] = payload.get();
1:         }
1: 
1:         position = newPosition;
1:     }
1: 
1:     @Override
1:     public int limit() {
1:         return Integer.MAX_VALUE;
1:     }
1: 
1:     /**
1:      * Ensures the the buffer has at least the minimumCapacity specified.
1:      *
1:      * @param minimumCapacity
1:      *      the minimum capacity needed to meet the next write operation.
1:      */
1:     private void ensureCapacity(int minimumCapacity) {
1:         if (minimumCapacity > buffer.length) {
1:             byte newBuffer[] = new byte[Math.max(buffer.length << 1, minimumCapacity)];
1:             System.arraycopy(buffer, 0, newBuffer, 0, position);
1:             buffer = newBuffer;
1:         }
1:     }
1: }
============================================================================