1:5da7ab3: /**
1:5da7ab3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5da7ab3:  * contributor license agreements.  See the NOTICE file distributed with
1:5da7ab3:  * this work for additional information regarding copyright ownership.
1:5da7ab3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5da7ab3:  * (the "License"); you may not use this file except in compliance with
1:5da7ab3:  * the License.  You may obtain a copy of the License at
1:5da7ab3:  *
1:5da7ab3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5da7ab3:  *
1:5da7ab3:  * Unless required by applicable law or agreed to in writing, software
1:5da7ab3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5da7ab3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5da7ab3:  * See the License for the specific language governing permissions and
1:5da7ab3:  * limitations under the License.
1:5da7ab3:  */
1:5da7ab3: package org.apache.activemq.jaas;
1:5da7ab3: 
1:5da7ab3: import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
1:5da7ab3: import org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig;
1:5da7ab3: import org.jasypt.properties.PropertyValueEncryptionUtils;
1:5da7ab3: 
1:5da7ab3: import java.util.ArrayList;
1:5da7ab3: import java.util.Properties;
1:5da7ab3: 
1:5da7ab3: /**
1:5da7ab3:  * Holds utility methods used work with encrypted values.
1:5da7ab3:  */
1:5da7ab3: public class EncryptionSupport {
1:5da7ab3: 
1:5da7ab3:     static public void decrypt(Properties props) {
1:5da7ab3:         StandardPBEStringEncryptor encryptor = createEncryptor();
1:5da7ab3:         for (Object k : new ArrayList(props.keySet())) {
1:5da7ab3:             String key = (String) k;
1:5da7ab3:             String value = props.getProperty(key);
1:5da7ab3:             if (PropertyValueEncryptionUtils.isEncryptedValue(value)) {
1:5da7ab3:                 value = PropertyValueEncryptionUtils.decrypt(value, encryptor);
1:5da7ab3:                 props.setProperty(key, value);
1:5da7ab3:             }
1:5da7ab3:         }
1:5da7ab3: 
1:5da7ab3:     }
1:5da7ab3:     public static StandardPBEStringEncryptor createEncryptor() {
1:5da7ab3:         StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
1:5da7ab3:         EnvironmentStringPBEConfig config = new EnvironmentStringPBEConfig();
1:5da7ab3:         config.setAlgorithm("PBEWithMD5AndDES");
1:5da7ab3:         config.setPasswordEnvName("ACTIVEMQ_ENCRYPTION_PASSWORD");
1:5da7ab3:         encryptor.setConfig(config);
1:5da7ab3:         return encryptor;
1:5da7ab3:     }
1:5da7ab3: 
1:5da7ab3: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:5da7ab3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
1: import org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig;
1: import org.jasypt.properties.PropertyValueEncryptionUtils;
1: 
1: import java.util.ArrayList;
1: import java.util.Properties;
1: 
1: /**
1:  * Holds utility methods used work with encrypted values.
1:  */
1: public class EncryptionSupport {
1: 
1:     static public void decrypt(Properties props) {
1:         StandardPBEStringEncryptor encryptor = createEncryptor();
1:         for (Object k : new ArrayList(props.keySet())) {
1:             String key = (String) k;
1:             String value = props.getProperty(key);
1:             if (PropertyValueEncryptionUtils.isEncryptedValue(value)) {
1:                 value = PropertyValueEncryptionUtils.decrypt(value, encryptor);
1:                 props.setProperty(key, value);
1:             }
1:         }
1: 
1:     }
1:     public static StandardPBEStringEncryptor createEncryptor() {
1:         StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
1:         EnvironmentStringPBEConfig config = new EnvironmentStringPBEConfig();
1:         config.setAlgorithm("PBEWithMD5AndDES");
1:         config.setPasswordEnvName("ACTIVEMQ_ENCRYPTION_PASSWORD");
1:         encryptor.setConfig(config);
1:         return encryptor;
1:     }
1: 
1: }
============================================================================