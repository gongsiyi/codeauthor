1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
12:40a7d3b: 
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: import static org.junit.Assert.fail;
1:ba1bd26: 
1:40a7d3b: import java.lang.reflect.Method;
1:40a7d3b: 
1:540dd5c: import javax.jms.Message;
1:540dd5c: import javax.jms.MessageListener;
1:540dd5c: import javax.resource.ResourceException;
1:540dd5c: import javax.resource.spi.endpoint.MessageEndpoint;
1:540dd5c: 
1:8274f09: import org.jmock.Expectations;
1:8274f09: import org.jmock.Mockery;
1:8274f09: import org.jmock.integration.junit4.JMock;
1:8274f09: import org.junit.Before;
1:8274f09: import org.junit.Test;
1:8274f09: import org.junit.runner.RunWith;
1:8274f09: 
1:8274f09: @RunWith(JMock.class)
1:ba1bd26: public class MessageEndpointProxyTest {
1:540dd5c: 
1:8274f09:     private MessageEndpoint mockEndpoint;
1:8274f09:     private EndpointAndListener mockEndpointAndListener;
1:8274f09:     private Message stubMessage;
1:40a7d3b:     private MessageEndpointProxy endpointProxy;
1:8274f09:     private Mockery context;
1:ba1bd26: 
1:8274f09:     @Before
1:8274f09:     public void setUp() {
1:8274f09:         context = new Mockery();
1:8274f09:         mockEndpoint = context.mock(MessageEndpoint.class);
1:8274f09:         context.mock(MessageListener.class);
1:8274f09:         mockEndpointAndListener = context.mock(EndpointAndListener.class);
1:8274f09:         stubMessage = context.mock(Message.class);
1:8274f09:         endpointProxy = new MessageEndpointProxy(mockEndpointAndListener);
2:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testInvalidConstruction() {
1:40a7d3b:         try {
1:8274f09:             new MessageEndpointProxy(mockEndpoint);
1:40a7d3b:             fail("An exception should have been thrown");
1:40a7d3b:         } catch (IllegalArgumentException e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:8274f09:     public void testSuccessfulCallSequence() throws Exception {
1:40a7d3b:         setupBeforeDeliverySuccessful();
1:40a7d3b:         setupOnMessageSuccessful();
1:40a7d3b:         setupAfterDeliverySuccessful();
1:8274f09: 
1:40a7d3b:         doBeforeDeliveryExpectSuccess();
1:40a7d3b:         doOnMessageExpectSuccess();
1:40a7d3b:         doAfterDeliveryExpectSuccess();
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:8274f09:     public void testBeforeDeliveryFailure() throws Exception {
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).beforeDelivery(with(any(Method.class)));
1:8274f09:             will(throwException(new ResourceException()));
1:8274f09:         }});
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             never (mockEndpointAndListener).onMessage(null);
1:8274f09:             never (mockEndpointAndListener).afterDelivery();
1:8274f09:         }});
1:ba1bd26: 
2:40a7d3b:         setupExpectRelease();
1:8274f09: 
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:40a7d3b:             fail("An exception should have been thrown");
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b:         doOnMessageExpectInvalidMessageEndpointException();
1:40a7d3b:         doAfterDeliveryExpectInvalidMessageEndpointException();
1:ba1bd26: 
2:40a7d3b:         doFullyDeadCheck();
1:40a7d3b:     }
1:8274f09: 
1:ba1bd26:     @Test(timeout = 60000)
1:8274f09:     public void testOnMessageFailure() throws Exception {
1:40a7d3b:         setupBeforeDeliverySuccessful();
1:ba1bd26: 
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).onMessage(with(same(stubMessage)));
1:8274f09:             will(throwException(new RuntimeException()));
1:8274f09:         }});
1:ba1bd26: 
1:40a7d3b:         setupAfterDeliverySuccessful();
1:8274f09: 
1:40a7d3b:         doBeforeDeliveryExpectSuccess();
1:40a7d3b:         try {
1:8274f09:             endpointProxy.onMessage(stubMessage);
1:40a7d3b:             fail("An exception should have been thrown");
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b:         doAfterDeliveryExpectSuccess();
1:40a7d3b: 
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:8274f09:     public void testAfterDeliveryFailure() throws Exception {
1:40a7d3b:         setupBeforeDeliverySuccessful();
1:40a7d3b:         setupOnMessageSuccessful();
1:ba1bd26: 
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).afterDelivery(); will(throwException(new ResourceException()));
1:8274f09:         }});
1:8274f09: 
1:40a7d3b:         setupExpectRelease();
1:40a7d3b: 
1:40a7d3b:         doBeforeDeliveryExpectSuccess();
1:40a7d3b:         doOnMessageExpectSuccess();
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.afterDelivery();
1:40a7d3b:             fail("An exception should have been thrown");
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         doFullyDeadCheck();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doFullyDeadCheck() {
1:40a7d3b:         doBeforeDeliveryExpectInvalidMessageEndpointException();
1:40a7d3b:         doOnMessageExpectInvalidMessageEndpointException();
1:40a7d3b:         doAfterDeliveryExpectInvalidMessageEndpointException();
1:40a7d3b:         doReleaseExpectInvalidMessageEndpointException();
1:40a7d3b:     }
1:40a7d3b: 
1:8274f09:     private void setupAfterDeliverySuccessful() throws Exception {
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).afterDelivery();
1:8274f09:         }});
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void setupOnMessageSuccessful() {
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).onMessage(with(stubMessage));
1:8274f09:         }});
1:40a7d3b:     }
1:40a7d3b: 
1:8274f09:     private void setupBeforeDeliverySuccessful() throws Exception {
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).beforeDelivery(with(any(Method.class)));
1:8274f09:         }});
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void setupExpectRelease() {
1:8274f09:         context.checking(new Expectations() {{
1:8274f09:             oneOf (mockEndpointAndListener).release();
1:8274f09:         }});
1:40a7d3b:     }
1:ba1bd26: 
1:40a7d3b:     private void doBeforeDeliveryExpectSuccess() {
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             fail("No exception should have been thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:8274f09: 
1:40a7d3b:     private void doOnMessageExpectSuccess() {
1:40a7d3b:         try {
1:8274f09:             endpointProxy.onMessage(stubMessage);
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             fail("No exception should have been thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doAfterDeliveryExpectSuccess() {
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.afterDelivery();
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             fail("No exception should have been thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doBeforeDeliveryExpectInvalidMessageEndpointException() {
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         } catch (InvalidMessageEndpointException e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doOnMessageExpectInvalidMessageEndpointException() {
1:40a7d3b:         try {
1:8274f09:             endpointProxy.onMessage(stubMessage);
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         } catch (InvalidMessageEndpointException e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doAfterDeliveryExpectInvalidMessageEndpointException() {
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.afterDelivery();
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         } catch (InvalidMessageEndpointException e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         } catch (Exception e) {
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void doReleaseExpectInvalidMessageEndpointException() {
1:40a7d3b:         try {
1:40a7d3b:             endpointProxy.release();
1:40a7d3b:             fail("An InvalidMessageEndpointException should have been thrown");
1:40a7d3b:         } catch (InvalidMessageEndpointException e) {
1:40a7d3b:             assertTrue(true);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private interface EndpointAndListener extends MessageListener, MessageEndpoint {
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class MessageEndpointProxyTest {
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:8274f09
/////////////////////////////////////////////////////////////////////////
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.integration.junit4.JMock;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
0: import junit.framework.TestCase;
1: @RunWith(JMock.class)
0: public class MessageEndpointProxyTest extends TestCase {
1:     private MessageEndpoint mockEndpoint;
1:     private EndpointAndListener mockEndpointAndListener;
1:     private Message stubMessage;
1:     private Mockery context;
1:     @Before
1:     public void setUp() {
1:         context = new Mockery();
1:         mockEndpoint = context.mock(MessageEndpoint.class);
1:         context.mock(MessageListener.class);
1:         mockEndpointAndListener = context.mock(EndpointAndListener.class);
1:         stubMessage = context.mock(Message.class);
1:         endpointProxy = new MessageEndpointProxy(mockEndpointAndListener);
0:     @Test
1:             new MessageEndpointProxy(mockEndpoint);
0:     @Test
1:     public void testSuccessfulCallSequence() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testBeforeDeliveryFailure() throws Exception {
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).beforeDelivery(with(any(Method.class)));
1:             will(throwException(new ResourceException()));
1:         }});
1:         context.checking(new Expectations() {{
1:             never (mockEndpointAndListener).onMessage(null);
1:             never (mockEndpointAndListener).afterDelivery();
1:         }});
1:         
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testOnMessageFailure() throws Exception {
1:      
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).onMessage(with(same(stubMessage)));
1:             will(throwException(new RuntimeException()));
1:         }});
1:         
1:             endpointProxy.onMessage(stubMessage);
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:     public void testAfterDeliveryFailure() throws Exception {
1:         
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).afterDelivery(); will(throwException(new ResourceException()));
1:         }});
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void setupAfterDeliverySuccessful() throws Exception {
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).afterDelivery();
1:         }});
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).onMessage(with(stubMessage));
1:         }});
1:     private void setupBeforeDeliverySuccessful() throws Exception {
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).beforeDelivery(with(any(Method.class)));
1:         }});
1:         context.checking(new Expectations() {{
1:             oneOf (mockEndpointAndListener).release();
1:         }});
1:     
/////////////////////////////////////////////////////////////////////////
1:             endpointProxy.onMessage(stubMessage);
/////////////////////////////////////////////////////////////////////////
1:             endpointProxy.onMessage(stubMessage);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.endpoint.MessageEndpoint;
1: 
0: import org.jmock.Mock;
0: import org.jmock.MockObjectTestCase;
1: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:1882e54
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
0: import org.apache.activemq.ra.ActiveMQEndpointWorker;
0: import org.apache.activemq.ra.InvalidMessageEndpointException;
0: import org.apache.activemq.ra.MessageEndpointProxy;
author:Robert Davies
-------------------------------------------------------------------------------
commit:2256ec0
/////////////////////////////////////////////////////////////////////////
0:             new MessageEndpointProxy((MessageEndpoint) mockEndpoint.proxy());
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /** 
0:  * 
0:  * Copyright 2004 Michael Gaffney
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import org.jmock.MockObjectTestCase;
0: import org.jmock.Mock;
1: 
0: import javax.jms.MessageListener;
0: import javax.jms.Message;
0: import javax.resource.spi.endpoint.MessageEndpoint;
0: import javax.resource.ResourceException;
1: import java.lang.reflect.Method;
1: 
0: /**
0:  * @author <a href="mailto:michael.gaffney@panacya.com">Michael Gaffney </a>
0:  */
0: public class MessageEndpointProxyTest extends MockObjectTestCase {
1: 
0:     private Mock mockEndpoint;
0:     private Mock stubMessage;
1:     private MessageEndpointProxy endpointProxy;
1: 
0:     public MessageEndpointProxyTest(String name) {
0:         super(name);
1:     }
1:     
0:     protected void setUp() {
0:         mockEndpoint = new Mock(EndpointAndListener.class);
0:         stubMessage = new Mock(Message.class);
0:         endpointProxy = new MessageEndpointProxy((MessageEndpoint) mockEndpoint.proxy());       
1:     }
1: 
1:     public void testInvalidConstruction() {
0:         Mock mockEndpoint = new Mock(MessageEndpoint.class);
1:         try {
0:             MessageEndpointProxy proxy = new MessageEndpointProxy((MessageEndpoint) mockEndpoint.proxy());
1:             fail("An exception should have been thrown");
1:         } catch (IllegalArgumentException e) {
1:             assertTrue(true);
1:         }
1:     }
1: 
0:     public void testSuccessfulCallSequence() {
1:         setupBeforeDeliverySuccessful();
1:         setupOnMessageSuccessful();
1:         setupAfterDeliverySuccessful();
1: 
1:         doBeforeDeliveryExpectSuccess();
1:         doOnMessageExpectSuccess();
1:         doAfterDeliveryExpectSuccess();
1:     }
1: 
0:     public void testBeforeDeliveryFailure() {
0:         mockEndpoint.expects(once()).method("beforeDelivery").with(isA(Method.class))
0:                 .will(throwException(new ResourceException()));
0:         mockEndpoint.expects(never()).method("onMessage");
0:         mockEndpoint.expects(never()).method("afterDelivery");
1:         setupExpectRelease();
1: 
1:         try {
1:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:             fail("An exception should have been thrown");
1:         } catch (Exception e) {
1:             assertTrue(true);
1:         }
1:         doOnMessageExpectInvalidMessageEndpointException();
1:         doAfterDeliveryExpectInvalidMessageEndpointException();
1:         
1:         doFullyDeadCheck();
1:     }
1: 
0:     public void testOnMessageFailure() {
1:         setupBeforeDeliverySuccessful();
0:         mockEndpoint.expects(once()).method("onMessage").with(same(stubMessage.proxy()))
0:                 .will(throwException(new RuntimeException()));
1:         setupAfterDeliverySuccessful();
1:         setupExpectRelease();
1: 
1:         doBeforeDeliveryExpectSuccess();
1:         try {
0:             endpointProxy.onMessage((Message) stubMessage.proxy());
1:             fail("An exception should have been thrown");
1:         } catch (Exception e) {
1:             assertTrue(true);
1:         }
1:         doAfterDeliveryExpectSuccess();
1: 
1:         doFullyDeadCheck();
1:     }
1: 
0:     public void testAfterDeliveryFailure() {
1:         setupBeforeDeliverySuccessful();
1:         setupOnMessageSuccessful();
0:         mockEndpoint.expects(once()).method("afterDelivery")
0:                 .will(throwException(new ResourceException()));
1:         setupExpectRelease();
1: 
1:         doBeforeDeliveryExpectSuccess();
1:         doOnMessageExpectSuccess();
1:         try {
1:             endpointProxy.afterDelivery();
1:             fail("An exception should have been thrown");
1:         } catch (Exception e) {
1:             assertTrue(true);
1:         }
1: 
1:         doFullyDeadCheck();
1:     }
1: 
1:     private void doFullyDeadCheck() {
1:         doBeforeDeliveryExpectInvalidMessageEndpointException();
1:         doOnMessageExpectInvalidMessageEndpointException();
1:         doAfterDeliveryExpectInvalidMessageEndpointException();
1:         doReleaseExpectInvalidMessageEndpointException();
1:     }
1: 
0:     private void setupAfterDeliverySuccessful() {
0:         mockEndpoint.expects(once()).method("afterDelivery");
1:     }
1: 
1:     private void setupOnMessageSuccessful() {
0:         mockEndpoint.expects(once()).method("onMessage").with(same(stubMessage.proxy()));
1:     }
1: 
0:     private void setupBeforeDeliverySuccessful() {
0:         mockEndpoint.expects(once()).method("beforeDelivery").with(isA(Method.class));
1:     }
1: 
1:     private void setupExpectRelease() {
0:         mockEndpoint.expects(once()).method("release");
1:     }
1: 
1:     private void doBeforeDeliveryExpectSuccess() {
1:         try {
1:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:         } catch (Exception e) {
1:             fail("No exception should have been thrown");
1:         }
1:     }
1: 
1:     private void doOnMessageExpectSuccess() {
1:         try {
0:             endpointProxy.onMessage((Message) stubMessage.proxy());
1:         } catch (Exception e) {
1:             fail("No exception should have been thrown");
1:         }
1:     }
1: 
1:     private void doAfterDeliveryExpectSuccess() {
1:         try {
1:             endpointProxy.afterDelivery();
1:         } catch (Exception e) {
1:             fail("No exception should have been thrown");
1:         }
1:     }
1: 
1:     private void doBeforeDeliveryExpectInvalidMessageEndpointException() {
1:         try {
1:             endpointProxy.beforeDelivery(ActiveMQEndpointWorker.ON_MESSAGE_METHOD);
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         } catch (InvalidMessageEndpointException e) {
1:             assertTrue(true);
1:         } catch (Exception e) {
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         }
1:     }
1: 
1:     private void doOnMessageExpectInvalidMessageEndpointException() {
1:         try {
0:             endpointProxy.onMessage((Message) stubMessage.proxy());
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         } catch (InvalidMessageEndpointException e) {
1:             assertTrue(true);
1:         }
1:     }
1: 
1:     private void doAfterDeliveryExpectInvalidMessageEndpointException() {
1:         try {
1:             endpointProxy.afterDelivery();
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         } catch (InvalidMessageEndpointException e) {
1:             assertTrue(true);
1:         } catch (Exception e) {
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         }
1:     }
1: 
1:     private void doReleaseExpectInvalidMessageEndpointException() {
1:         try {
1:             endpointProxy.release();
1:             fail("An InvalidMessageEndpointException should have been thrown");
1:         } catch (InvalidMessageEndpointException e) {
1:             assertTrue(true);
1:         }
1:     }
1: 
1:     private interface EndpointAndListener extends MessageListener, MessageEndpoint {
1:     }
1: }
============================================================================