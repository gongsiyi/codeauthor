1:35bd3ad: /**
1:35bd3ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:35bd3ad:  * contributor license agreements.  See the NOTICE file distributed with
1:35bd3ad:  * this work for additional information regarding copyright ownership.
1:35bd3ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:35bd3ad:  * (the "License"); you may not use this file except in compliance with
1:35bd3ad:  * the License.  You may obtain a copy of the License at
1:35bd3ad:  *
1:35bd3ad:  *      http://www.apache.org/licenses/LICENSE-2.0
1:35bd3ad:  *
1:35bd3ad:  * Unless required by applicable law or agreed to in writing, software
1:35bd3ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:35bd3ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:35bd3ad:  * See the License for the specific language governing permissions and
1:35bd3ad:  * limitations under the License.
1:35bd3ad:  */
1:35bd3ad: package org.apache.activemq.usage;
1:35bd3ad: 
1:35bd3ad: import static org.junit.Assert.assertEquals;
1:35bd3ad: 
1:35bd3ad: import java.io.File;
1:35bd3ad: import java.lang.reflect.Field;
1:35bd3ad: import java.util.List;
1:35bd3ad: 
1:35bd3ad: import org.apache.activemq.broker.BrokerService;
1:35bd3ad: import org.apache.activemq.broker.region.Destination;
1:35bd3ad: import org.apache.activemq.command.ActiveMQDestination;
1:35bd3ad: import org.apache.activemq.command.ActiveMQQueue;
1:35bd3ad: import org.junit.After;
1:35bd3ad: import org.junit.Before;
1:35bd3ad: import org.junit.Rule;
1:35bd3ad: import org.junit.Test;
1:35bd3ad: import org.junit.rules.TemporaryFolder;
1:35bd3ad: import org.slf4j.Logger;
1:35bd3ad: import org.slf4j.LoggerFactory;
1:35bd3ad: 
1:35bd3ad: 
1:35bd3ad: /**
1:35bd3ad:  * Test for AMQ-6798
1:35bd3ad:  */
1:35bd3ad: public class QueueMemoryAndStoreUsageCleanupTest {
1:35bd3ad:     protected static final Logger LOG = LoggerFactory
1:35bd3ad:             .getLogger(QueueMemoryAndStoreUsageCleanupTest.class);
1:35bd3ad: 
1:35bd3ad:     @Rule
1:35bd3ad:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:35bd3ad:     private BrokerService broker;
1:35bd3ad:     private SystemUsage systemUsage;
1:35bd3ad: 
1:35bd3ad:     @Before
1:35bd3ad:     public void setUpBroker() throws Exception {
1:35bd3ad:         broker = new BrokerService();
1:35bd3ad:         broker.setPersistent(true);
1:35bd3ad:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:35bd3ad:         broker.setDeleteAllMessagesOnStartup(true);
1:35bd3ad:         systemUsage = broker.getSystemUsage();
1:35bd3ad:         startBroker();
1:35bd3ad:     }
1:35bd3ad: 
1:35bd3ad:     protected void startBroker() throws Exception {
1:35bd3ad:         broker.start();
1:35bd3ad:         broker.waitUntilStarted();
1:35bd3ad:     }
1:35bd3ad: 
1:35bd3ad:     @After
1:35bd3ad:     public void stopBroker() throws Exception {
1:35bd3ad:         broker.stop();
1:35bd3ad:         broker.waitUntilStopped();
1:35bd3ad:     }
1:35bd3ad: 
1:35bd3ad:     @Test(timeout=30000)
1:35bd3ad:     public void testQueueMemoryAndStoreUsageCleanup() throws Exception {
1:35bd3ad:         Field childrenField = Usage.class.getDeclaredField("children");
1:35bd3ad:         childrenField.setAccessible(true);
1:35bd3ad:         List<?> memoryUsageChildren = (List<?>) childrenField.get(systemUsage.getMemoryUsage());
1:35bd3ad:         List<?> storeUsageChildren = (List<?>) childrenField.get(systemUsage.getStoreUsage());
1:35bd3ad: 
1:35bd3ad:         Destination queue1 = addDestination(new ActiveMQQueue("queue1"));
1:35bd3ad:         Destination queue2 = addDestination(new ActiveMQQueue("queue2"));
1:35bd3ad:         Destination queue3 = addDestination(new ActiveMQQueue("queue3"));
1:35bd3ad:         Destination queue4 = addDestination(new ActiveMQQueue("queue4"));
1:35bd3ad: 
1:35bd3ad:         int beforeStopMemoryChildren = memoryUsageChildren.size();
1:35bd3ad:         int beforeStopStoreChildren = storeUsageChildren.size();
1:35bd3ad: 
1:35bd3ad:         queue1.stop();
1:35bd3ad:         queue2.stop();
1:35bd3ad:         queue3.stop();
1:35bd3ad:         queue4.stop();
1:35bd3ad: 
1:35bd3ad:         //Make sure each memory usage and store usage object that was created for every queue
1:35bd3ad:         //has been cleaned up
1:35bd3ad:         assertEquals(beforeStopMemoryChildren - 4, memoryUsageChildren.size());
1:35bd3ad:         assertEquals(beforeStopStoreChildren - 4, storeUsageChildren.size());
1:35bd3ad:     }
1:35bd3ad: 
1:35bd3ad:     private Destination addDestination(ActiveMQDestination destination) throws Exception {
1:35bd3ad:         Destination dest = broker.getBroker().addDestination(broker.getAdminConnectionContext(),
1:35bd3ad:                 destination, false);
1:35bd3ad:         dest.start();
1:35bd3ad:         return dest;
1:35bd3ad:     }
1:35bd3ad: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:35bd3ad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: import java.lang.reflect.Field;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * Test for AMQ-6798
1:  */
1: public class QueueMemoryAndStoreUsageCleanupTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(QueueMemoryAndStoreUsageCleanupTest.class);
1: 
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:     private BrokerService broker;
1:     private SystemUsage systemUsage;
1: 
1:     @Before
1:     public void setUpBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         systemUsage = broker.getSystemUsage();
1:         startBroker();
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testQueueMemoryAndStoreUsageCleanup() throws Exception {
1:         Field childrenField = Usage.class.getDeclaredField("children");
1:         childrenField.setAccessible(true);
1:         List<?> memoryUsageChildren = (List<?>) childrenField.get(systemUsage.getMemoryUsage());
1:         List<?> storeUsageChildren = (List<?>) childrenField.get(systemUsage.getStoreUsage());
1: 
1:         Destination queue1 = addDestination(new ActiveMQQueue("queue1"));
1:         Destination queue2 = addDestination(new ActiveMQQueue("queue2"));
1:         Destination queue3 = addDestination(new ActiveMQQueue("queue3"));
1:         Destination queue4 = addDestination(new ActiveMQQueue("queue4"));
1: 
1:         int beforeStopMemoryChildren = memoryUsageChildren.size();
1:         int beforeStopStoreChildren = storeUsageChildren.size();
1: 
1:         queue1.stop();
1:         queue2.stop();
1:         queue3.stop();
1:         queue4.stop();
1: 
1:         //Make sure each memory usage and store usage object that was created for every queue
1:         //has been cleaned up
1:         assertEquals(beforeStopMemoryChildren - 4, memoryUsageChildren.size());
1:         assertEquals(beforeStopStoreChildren - 4, storeUsageChildren.size());
1:     }
1: 
1:     private Destination addDestination(ActiveMQDestination destination) throws Exception {
1:         Destination dest = broker.getBroker().addDestination(broker.getAdminConnectionContext(),
1:                 destination, false);
1:         dest.start();
1:         return dest;
1:     }
1: }
============================================================================