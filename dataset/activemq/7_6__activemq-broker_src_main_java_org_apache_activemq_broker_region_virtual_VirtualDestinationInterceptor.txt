1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:370734c:  *
1:da67a38:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
1:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region.virtual;
3:da67a38: 
1:4569d7d: import java.util.ArrayList;
1:92860ae: import java.util.Arrays;
1:4569d7d: import java.util.Iterator;
1:4569d7d: import java.util.List;
1:4569d7d: import java.util.Set;
1:4569d7d: 
1:d17eceb: import org.apache.activemq.broker.Broker;
1:d17eceb: import org.apache.activemq.broker.ConnectionContext;
1:4569d7d: import org.apache.activemq.broker.ProducerBrokerExchange;
1:da67a38: import org.apache.activemq.broker.region.Destination;
1:da67a38: import org.apache.activemq.broker.region.DestinationFilter;
1:da67a38: import org.apache.activemq.broker.region.DestinationInterceptor;
1:d17eceb: import org.apache.activemq.command.ActiveMQDestination;
1:da67a38: import org.apache.activemq.command.Message;
1:da67a38: import org.apache.activemq.filter.DestinationMap;
1:da67a38: 
1:da67a38: /**
1:da67a38:  * Implements <a
1:f55edcf:  * href="http://activemq.apache.org/virtual-destinations.html">Virtual
1:f55edcf:  * Topics</a>.
1:f55edcf:  *
1:370734c:  * @org.apache.xbean.XBean
1:f55edcf:  *
1:da67a38:  */
1:da67a38: public class VirtualDestinationInterceptor implements DestinationInterceptor {
1:da67a38: 
1:da67a38:     private DestinationMap destinationMap = new DestinationMap();
1:f55edcf:     private DestinationMap mappedDestinationMap = new DestinationMap();
1:f55edcf: 
1:da67a38:     private VirtualDestination[] virtualDestinations;
1:da67a38: 
1:f55edcf:     @Override
1:5daeb53:     public Destination intercept(Destination destination) {
1:f55edcf:         final ActiveMQDestination activeMQDestination = destination.getActiveMQDestination();
1:f55edcf:         Set matchingDestinations = destinationMap.get(activeMQDestination);
1:ecf89a6:         List<Destination> destinations = new ArrayList<Destination>();
1:5daeb53:         for (Iterator iter = matchingDestinations.iterator(); iter.hasNext();) {
1:f55edcf:             VirtualDestination virtualDestination = (VirtualDestination) iter.next();
1:d17eceb:             Destination newDestination = virtualDestination.intercept(destination);
1:d17eceb:             destinations.add(newDestination);
3:da67a38:         }
1:da67a38:         if (!destinations.isEmpty()) {
1:da67a38:             if (destinations.size() == 1) {
1:ecf89a6:                 return destinations.get(0);
1:74a7a8b:             } else {
1:da67a38:                 // should rarely be used but here just in case
1:da67a38:                 return createCompositeDestination(destination, destinations);
1:da67a38:             }
1:da67a38:         }
1:f55edcf:         // check if the destination instead matches any mapped destinations
1:f55edcf:         Set mappedDestinations = mappedDestinationMap.get(activeMQDestination);
1:f55edcf:         if (!mappedDestinations.isEmpty()) {
1:f55edcf:             // create a mapped destination interceptor
1:f55edcf:             VirtualDestination virtualDestination = (VirtualDestination)
1:f55edcf:                 mappedDestinations.toArray(new VirtualDestination[mappedDestinations.size()])[0];
1:f55edcf:             return virtualDestination.interceptMappedDestination(destination);
1:f55edcf:         }
1:f55edcf: 
1:da67a38:         return destination;
1:da67a38:     }
1:16f2d75: 
1:f55edcf:     @Override
1:d17eceb:     public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:f55edcf:         for (VirtualDestination virt : virtualDestinations) {
1:d17eceb:             virt.create(broker, context, destination);
1:d17eceb:         }
1:d17eceb:     }
1:d17eceb: 
1:f55edcf:     @Override
1:f55edcf:     public synchronized void remove(Destination destination) {
1:16f2d75:     }
1:16f2d75: 
1:da67a38:     public VirtualDestination[] getVirtualDestinations() {
1:da67a38:         return virtualDestinations;
1:da67a38:     }
1:da67a38: 
1:da67a38:     public void setVirtualDestinations(VirtualDestination[] virtualDestinations) {
1:da67a38:         destinationMap = new DestinationMap();
1:f55edcf:         mappedDestinationMap = new DestinationMap();
1:da67a38:         this.virtualDestinations = virtualDestinations;
1:da67a38:         for (int i = 0; i < virtualDestinations.length; i++) {
1:da67a38:             VirtualDestination virtualDestination = virtualDestinations[i];
1:da67a38:             destinationMap.put(virtualDestination.getVirtualDestination(), virtualDestination);
1:f55edcf:             mappedDestinationMap.put(virtualDestination.getMappedDestinations(), virtualDestination);
1:da67a38:         }
1:da67a38:     }
1:da67a38: 
1:ecf89a6:     protected Destination createCompositeDestination(Destination destination, final List<Destination> destinations) {
1:da67a38:         return new DestinationFilter(destination) {
1:f55edcf:             @Override
1:4569d7d:             public void send(ProducerBrokerExchange context, Message messageSend) throws Exception {
1:ecf89a6:                 for (Iterator<Destination> iter = destinations.iterator(); iter.hasNext();) {
1:ecf89a6:                     Destination destination = iter.next();
1:da67a38:                     destination.send(context, messageSend);
1:da67a38:                 }
1:da67a38:             }
1:da67a38:         };
1:86cbdfd:     }
1:da67a38: 
1:92860ae:     @Override
1:92860ae:     public String toString() {
1:92860ae:         return "VirtualDestinationInterceptor" + Arrays.asList(virtualDestinations);
1:92860ae:     }
1:da67a38: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:35b7ac2
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1:  * href="http://activemq.apache.org/virtual-destinations.html">Virtual
1:  * Topics</a>.
1:  *
1:  *
1:     private DestinationMap mappedDestinationMap = new DestinationMap();
1: 
1:     @Override
1:         final ActiveMQDestination activeMQDestination = destination.getActiveMQDestination();
1:         Set matchingDestinations = destinationMap.get(activeMQDestination);
1:             VirtualDestination virtualDestination = (VirtualDestination) iter.next();
/////////////////////////////////////////////////////////////////////////
1:         // check if the destination instead matches any mapped destinations
1:         Set mappedDestinations = mappedDestinationMap.get(activeMQDestination);
0:         assert mappedDestinations.size() < 2;
1:         if (!mappedDestinations.isEmpty()) {
1:             // create a mapped destination interceptor
1:             VirtualDestination virtualDestination = (VirtualDestination)
1:                 mappedDestinations.toArray(new VirtualDestination[mappedDestinations.size()])[0];
1:             return virtualDestination.interceptMappedDestination(destination);
1:         }
1: 
1:     @Override
1:         for (VirtualDestination virt : virtualDestinations) {
1:     @Override
1:     public synchronized void remove(Destination destination) {
/////////////////////////////////////////////////////////////////////////
1:         mappedDestinationMap = new DestinationMap();
1:             mappedDestinationMap.put(virtualDestination.getMappedDestinations(), virtualDestination);
1:             @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:92860ae
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String toString() {
1:         return "VirtualDestinationInterceptor" + Arrays.asList(virtualDestinations);
1:     }
commit:5daeb53
/////////////////////////////////////////////////////////////////////////
1:     public Destination intercept(Destination destination) {
0:         Set matchingDestinations = destinationMap.get(destination.getActiveMQDestination());
1:         for (Iterator iter = matchingDestinations.iterator(); iter.hasNext();) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         List<Destination> destinations = new ArrayList<Destination>();
/////////////////////////////////////////////////////////////////////////
1:                 return destinations.get(0);
/////////////////////////////////////////////////////////////////////////
1:     protected Destination createCompositeDestination(Destination destination, final List<Destination> destinations) {
1:                 for (Iterator<Destination> iter = destinations.iterator(); iter.hasNext();) {
1:                     Destination destination = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0:  * href="http://activemq.apache.org/virtual-destinations.html">Virtual Topics</a>.
/////////////////////////////////////////////////////////////////////////
0:             VirtualDestination virtualDestination = (VirtualDestination)iter.next();
0:                 return (Destination)destinations.get(0);
1:             } else {
/////////////////////////////////////////////////////////////////////////
0:                     Destination destination = (Destination)iter.next();
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:             public void send(ProducerBrokerExchange context, Message messageSend) throws Exception {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:             Destination newDestination = virtualDestination.intercept(destination);
1:             destinations.add(newDestination);
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         for (VirtualDestination virt: virtualDestinations) {
1:             virt.create(broker, context, destination);
1:         }
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
0:     public synchronized Destination intercept(Destination destination) {
/////////////////////////////////////////////////////////////////////////
1:     
1: 
0:     public synchronized void remove(Destination destination) {     
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:3013c20
/////////////////////////////////////////////////////////////////////////
0:  * href="http://activemq.apache.org/virtual-destinations.html">Virtual
commit:370734c
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
1:  * 
commit:da67a38
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationMap;
1: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Set;
1: 
1: /**
1:  * Implements <a
0:  * href="http://incubator.apache.org/activemq/virtual-destinations.html">Virtual
0:  * Topics</a>.
0:  * 
0:  * @version $Revision$
1:  */
1: public class VirtualDestinationInterceptor implements DestinationInterceptor {
1: 
1:     private DestinationMap destinationMap = new DestinationMap();
1:     private VirtualDestination[] virtualDestinations;
1: 
0:     public Destination intercept(Destination destination) {
0:         Set virtualDestinations = destinationMap.get(destination.getActiveMQDestination());
0:         List destinations = new ArrayList();
0:         for (Iterator iter = virtualDestinations.iterator(); iter.hasNext();) {
0:             VirtualDestination virtualDestination = (VirtualDestination) iter.next();
0:             Destination newNestination = virtualDestination.intercept(destination);
0:             destinations.add(newNestination);
1:         }
1:         if (!destinations.isEmpty()) {
1:             if (destinations.size() == 1) {
0:                 return (Destination) destinations.get(0);
1:             }
0:             else {
1:                 // should rarely be used but here just in case
1:                 return createCompositeDestination(destination, destinations);
1:             }
1:         }
1:         return destination;
1:     }
1: 
1:     public VirtualDestination[] getVirtualDestinations() {
1:         return virtualDestinations;
1:     }
1: 
1:     public void setVirtualDestinations(VirtualDestination[] virtualDestinations) {
1:         destinationMap = new DestinationMap();
1:         this.virtualDestinations = virtualDestinations;
1:         for (int i = 0; i < virtualDestinations.length; i++) {
1:             VirtualDestination virtualDestination = virtualDestinations[i];
1:             destinationMap.put(virtualDestination.getVirtualDestination(), virtualDestination);
1:         }
1:     }
1: 
0:     protected Destination createCompositeDestination(Destination destination, final List destinations) {
1:         return new DestinationFilter(destination) {
0:             public void send(ConnectionContext context, Message messageSend) throws Exception {
0:                 for (Iterator iter = destinations.iterator(); iter.hasNext();) {
0:                     Destination destination = (Destination) iter.next();
1:                     destination.send(context, messageSend);
1:                 }
1:             }
1:         };
1:     }
1: 
1: }
============================================================================