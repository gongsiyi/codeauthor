1:220ad62: /**
1:be5a767:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:be5a767:  * contributor license agreements.  See the NOTICE file distributed with
1:be5a767:  * this work for additional information regarding copyright ownership.
1:be5a767:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:be5a767:  * (the "License"); you may not use this file except in compliance with
1:be5a767:  * the License.  You may obtain a copy of the License at
3:220ad62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:220ad62:  *
1:220ad62:  * Unless required by applicable law or agreed to in writing, software
1:220ad62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:220ad62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:220ad62:  * See the License for the specific language governing permissions and
1:220ad62:  * limitations under the License.
1:220ad62:  */
1:220ad62: package org.apache.activemq.state;
9:220ad62: 
1:220ad62: import java.util.ArrayList;
1:220ad62: import java.util.List;
1:b9e51d6: import java.util.Map;
1:b9e51d6: import java.util.concurrent.ConcurrentHashMap;
1:f812e34: import java.util.concurrent.atomic.AtomicBoolean;
1:220ad62: 
1:220ad62: import org.apache.activemq.command.Command;
1:b9e51d6: import org.apache.activemq.command.ProducerId;
1:220ad62: import org.apache.activemq.command.TransactionId;
1:220ad62: 
1:f812e34: public class TransactionState {
1:f812e34: 
1:ecf89a6:     private final List<Command> commands = new ArrayList<Command>();
1:ecf89a6:     private final TransactionId id;
1:220ad62:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
1:f812e34:     private boolean prepared;
1:f812e34:     private int preparedResult;
1:b9e51d6:     private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>();
1:93ca044:     private final long createdAt = System.currentTimeMillis();
1:f812e34: 
1:220ad62:     public TransactionState(TransactionId id) {
1:220ad62:         this.id = id;
1:f812e34:     }
1:f812e34: 
1:220ad62:     public String toString() {
1:220ad62:         return id.toString();
8:220ad62:     }
1:f812e34: 
1:220ad62:     public void addCommand(Command operation) {
1:f812e34:         checkShutdown();
1:f812e34:         commands.add(operation);
1:f812e34:     }
1:220ad62: 
1:ecf89a6:     public List<Command> getCommands() {
1:f812e34:         return commands;
1:220ad62:     }
1:f812e34: 
1:f812e34:     private void checkShutdown() {
1:ecf89a6:         if (shutdown.get()) {
1:f812e34:             throw new IllegalStateException("Disposed");
1:ecf89a6:         }
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void shutdown() {
1:f812e34:         shutdown.set(false);
1:f812e34:     }
1:f812e34: 
1:f812e34:     public TransactionId getId() {
1:f812e34:         return id;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setPrepared(boolean prepared) {
1:f812e34:         this.prepared = prepared;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public boolean isPrepared() {
1:f812e34:         return prepared;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setPreparedResult(int preparedResult) {
1:f812e34:         this.preparedResult = preparedResult;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public int getPreparedResult() {
1:f812e34:         return preparedResult;
1:f812e34:     }
1:220ad62: 
1:b9e51d6:     public void addProducerState(ProducerState producerState) {
1:b9e51d6:         if (producerState != null) {
1:b9e51d6:             producers.put(producerState.getInfo().getProducerId(), producerState);
1:86cbdfd:         }
1:220ad62:     }
1:220ad62: 
1:b9e51d6:     public Map<ProducerId, ProducerState> getProducerStates() {
1:b9e51d6:         return producers;
1:220ad62:     }
1:220ad62: 
1:93ca044:     public long getCreatedAt() {
1:93ca044:         return createdAt;
1:93ca044:     }
1:220ad62: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:93ca044
/////////////////////////////////////////////////////////////////////////
1:     private final long createdAt = System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
1:     public long getCreatedAt() {
1:         return createdAt;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private final List<Command> commands = new ArrayList<Command>();
1:     private final TransactionId id;
/////////////////////////////////////////////////////////////////////////
1:     public List<Command> getCommands() {
1:         if (shutdown.get()) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: public class TransactionState {
1: 
1:     private boolean prepared;
1:     private int preparedResult;
1: 
1:     }
1: 
1: 
1:         checkShutdown();
1:         commands.add(operation);
1:     }
1:         return commands;
1: 
1:     private void checkShutdown() {
0:         if (shutdown.get())
1:             throw new IllegalStateException("Disposed");
1:     }
1: 
1:     public void shutdown() {
1:         shutdown.set(false);
1:     }
1: 
1:     public TransactionId getId() {
1:         return id;
1:     }
1: 
1:     public void setPrepared(boolean prepared) {
1:         this.prepared = prepared;
1:     }
1: 
1:     public boolean isPrepared() {
1:         return prepared;
1:     }
1: 
1:     public void setPreparedResult(int preparedResult) {
1:         this.preparedResult = preparedResult;
1:     }
1: 
1:     public int getPreparedResult() {
1:         return preparedResult;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:220ad62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.state;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.TransactionId;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
0: public class TransactionState {        
0:     final TransactionId id;
1:     
0:     public final ArrayList commands = new ArrayList();
1:     private final AtomicBoolean shutdown = new AtomicBoolean(false);
1: 
0: 	private boolean prepared;
1: 
0: 	private int preparedResult;
1:     
1:     public TransactionState(TransactionId id) {
1:         this.id = id;
1:     }        
1:     public String toString() {
1:         return id.toString();
1:     }
1:     
1:     public void addCommand(Command operation) {
0:     	checkShutdown();
0:     	commands.add(operation);            
1:     }        
1: 
0:     public List getCommands() {
0:     	return commands;            
1:     }        
1:     
0:     private void checkShutdown() {
0: 		if( shutdown.get() )
0: 			throw new IllegalStateException("Disposed");
1: 	}
1:     
0:     public void shutdown() {
0:     	shutdown.set(false);
1:     }
0: 	public TransactionId getId() {
0: 		return id;
1: 	}
1: 	
0: 	public void setPrepared(boolean prepared) {
0: 		this.prepared = prepared;
1: 	}
0: 	public boolean isPrepared() {
0: 		return prepared;
1: 	}
0: 	public void setPreparedResult(int preparedResult) {
0: 		this.preparedResult = preparedResult;
1: 	}
0: 	public int getPreparedResult() {
0: 		return preparedResult;
1: 	}
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:b9e51d6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: import org.apache.activemq.command.ProducerId;
/////////////////////////////////////////////////////////////////////////
1:     private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>();
/////////////////////////////////////////////////////////////////////////
1:     public void addProducerState(ProducerState producerState) {
1:         if (producerState != null) {
1:             producers.put(producerState.getInfo().getProducerId(), producerState);
0:         }
0:     }
0: 
1:     public Map<ProducerId, ProducerState> getProducerStates() {
1:         return producers;
0:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:be5a767
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
/////////////////////////////////////////////////////////////////////////
============================================================================