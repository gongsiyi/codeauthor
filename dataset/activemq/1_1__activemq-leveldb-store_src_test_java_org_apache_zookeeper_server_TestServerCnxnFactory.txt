1:a39e51e: /**
1:a39e51e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a39e51e:  * contributor license agreements.  See the NOTICE file distributed with
1:a39e51e:  * this work for additional information regarding copyright ownership.
1:a39e51e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a39e51e:  * (the "License"); you may not use this file except in compliance with
1:a39e51e:  * the License.  You may obtain a copy of the License at
1:a39e51e:  *
1:a39e51e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a39e51e:  *
1:a39e51e:  * Unless required by applicable law or agreed to in writing, software
1:a39e51e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a39e51e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a39e51e:  * See the License for the specific language governing permissions and
1:a39e51e:  * limitations under the License.
1:a39e51e:  */
1:a39e51e: package org.apache.zookeeper.server;
1:a39e51e: 
1:a39e51e: import java.io.IOException;
1:a39e51e: import java.nio.channels.SelectionKey;
1:a39e51e: import java.nio.channels.SocketChannel;
1:a39e51e: 
1:a39e51e: import org.slf4j.Logger;
1:a39e51e: import org.slf4j.LoggerFactory;
1:a39e51e: 
1:a39e51e: /*
1:a39e51e:  * TestServerCnxnFactory allows a caller to impose an artifical
1:a39e51e:  * wait on I/O over the ServerCnxn used to communicate with the
1:a39e51e:  * ZooKeeper server.
1:a39e51e:  */
1:a39e51e: public class TestServerCnxnFactory extends NIOServerCnxnFactory {
1:a39e51e:     protected static final Logger LOG = LoggerFactory.getLogger(TestServerCnxnFactory.class);
1:a39e51e: 
1:a39e51e:     /* testHandle controls whehter or not an artifical wait
1:a39e51e:      * is imposed when talking to the ZooKeeper server
1:a39e51e:     */
1:a39e51e:     public TestHandle testHandle = new TestHandle();
1:a39e51e: 
1:a39e51e:     public TestServerCnxnFactory() throws IOException {
1:a39e51e:         super();
1:a39e51e:     }
1:a39e51e: 
1:a39e51e:     protected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk) throws IOException {
1:a39e51e:         return new TestServerCnxn(this.zkServer, sock, sk, this, testHandle);
1:a39e51e:     }
1:a39e51e: 
1:a39e51e:     /*
1:a39e51e:      * TestHandle is handed to TestServerCnxn and is used to
1:a39e51e:      * control the amount of time the TestServerCnxn waits
1:a39e51e:      * before allowing an I/O operation.
1:a39e51e:      */
1:a39e51e:     public class TestHandle {
1:a39e51e:         private Object mu = new Object();
1:a39e51e:         private int ioWaitMillis = 0;
1:a39e51e: 
1:a39e51e:         /*
1:a39e51e:          * Set an artifical I/O wait (in milliseconds) on ServerCnxn and
1:a39e51e:          * then sleep for the specified number of milliseconds.
1:a39e51e:          */
1:a39e51e:         public void setIOWaitMillis(int ioWaitMillis, int sleepMillis) {
1:a39e51e:             synchronized(mu) {
1:a39e51e:                 this.ioWaitMillis = ioWaitMillis;
1:a39e51e:             }
1:a39e51e:             if (sleepMillis > 0) {
1:a39e51e:                 try {
1:a39e51e:                     Thread.sleep(sleepMillis);
1:a39e51e:                 } catch (InterruptedException e) {}
1:a39e51e:             }
1:a39e51e:         }
1:a39e51e: 
1:a39e51e:         /*
1:a39e51e:          * Get the number of milliseconds to wait before
1:a39e51e:          * allowing ServerCnxn to perform I/O.
1:a39e51e:          */
1:a39e51e:         public int getIOWaitMillis() {
1:a39e51e:             synchronized(mu) {
1:a39e51e:                 return this.ioWaitMillis;
1:a39e51e:             }
1:a39e51e:         }
1:a39e51e:     }
1:a39e51e: 
1:a39e51e:     public class TestServerCnxn extends NIOServerCnxn {
1:a39e51e:         public TestHandle testHandle;
1:a39e51e: 
1:a39e51e:         public TestServerCnxn(ZooKeeperServer zk, SocketChannel sock, SelectionKey sk, NIOServerCnxnFactory factory, TestHandle testHandle) throws IOException {
1:a39e51e:             super(zk, sock, sk, factory);
1:a39e51e:             this.testHandle = testHandle;
1:a39e51e:         }
1:a39e51e: 
1:a39e51e:         public void doIO(SelectionKey k) throws InterruptedException {
1:a39e51e:             final int millis = this.testHandle.getIOWaitMillis();
1:a39e51e:             if (millis > 0) {
1:a39e51e:                 LOG.info("imposing a "+millis+" millisecond wait on ServerCxn: "+this);
1:a39e51e:                 try {
1:a39e51e:                     Thread.sleep(millis);
1:a39e51e:                 } catch (InterruptedException e) {}
1:a39e51e:             }
1:a39e51e:             super.doIO(k);
1:a39e51e:         }
1:a39e51e:     }
1:a39e51e: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:a39e51e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.zookeeper.server;
1: 
1: import java.io.IOException;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.SocketChannel;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /*
1:  * TestServerCnxnFactory allows a caller to impose an artifical
1:  * wait on I/O over the ServerCnxn used to communicate with the
1:  * ZooKeeper server.
1:  */
1: public class TestServerCnxnFactory extends NIOServerCnxnFactory {
1:     protected static final Logger LOG = LoggerFactory.getLogger(TestServerCnxnFactory.class);
1: 
1:     /* testHandle controls whehter or not an artifical wait
1:      * is imposed when talking to the ZooKeeper server
1:     */
1:     public TestHandle testHandle = new TestHandle();
1: 
1:     public TestServerCnxnFactory() throws IOException {
1:         super();
1:     }
1: 
1:     protected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk) throws IOException {
1:         return new TestServerCnxn(this.zkServer, sock, sk, this, testHandle);
1:     }
1: 
1:     /*
1:      * TestHandle is handed to TestServerCnxn and is used to
1:      * control the amount of time the TestServerCnxn waits
1:      * before allowing an I/O operation.
1:      */
1:     public class TestHandle {
1:         private Object mu = new Object();
1:         private int ioWaitMillis = 0;
1: 
1:         /*
1:          * Set an artifical I/O wait (in milliseconds) on ServerCnxn and
1:          * then sleep for the specified number of milliseconds.
1:          */
1:         public void setIOWaitMillis(int ioWaitMillis, int sleepMillis) {
1:             synchronized(mu) {
1:                 this.ioWaitMillis = ioWaitMillis;
1:             }
1:             if (sleepMillis > 0) {
1:                 try {
1:                     Thread.sleep(sleepMillis);
1:                 } catch (InterruptedException e) {}
1:             }
1:         }
1: 
1:         /*
1:          * Get the number of milliseconds to wait before
1:          * allowing ServerCnxn to perform I/O.
1:          */
1:         public int getIOWaitMillis() {
1:             synchronized(mu) {
1:                 return this.ioWaitMillis;
1:             }
1:         }
1:     }
1: 
1:     public class TestServerCnxn extends NIOServerCnxn {
1:         public TestHandle testHandle;
1: 
1:         public TestServerCnxn(ZooKeeperServer zk, SocketChannel sock, SelectionKey sk, NIOServerCnxnFactory factory, TestHandle testHandle) throws IOException {
1:             super(zk, sock, sk, factory);
1:             this.testHandle = testHandle;
1:         }
1: 
1:         public void doIO(SelectionKey k) throws InterruptedException {
1:             final int millis = this.testHandle.getIOWaitMillis();
1:             if (millis > 0) {
1:                 LOG.info("imposing a "+millis+" millisecond wait on ServerCxn: "+this);
1:                 try {
1:                     Thread.sleep(millis);
1:                 } catch (InterruptedException e) {}
1:             }
1:             super.doIO(k);
1:         }
1:     }
1: }
============================================================================