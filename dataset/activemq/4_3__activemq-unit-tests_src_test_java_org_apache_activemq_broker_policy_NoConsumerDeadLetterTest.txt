1:27f7cab: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:27f7cab:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:27f7cab: package org.apache.activemq.broker.policy;
5:27f7cab: 
1:27183f8: import javax.jms.DeliveryMode;
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.Message;
1:27183f8: import javax.jms.MessageConsumer;
1:27183f8: import javax.jms.MessageProducer;
1:27183f8: import javax.jms.Session;
1:27183f8: import javax.jms.TextMessage;
1:27183f8: import javax.jms.Topic;
1:74a7a8b: 
1:27183f8: import org.apache.activemq.ActiveMQConnection;
1:27183f8: import org.apache.activemq.ActiveMQConnectionFactory;
1:27f7cab: import org.apache.activemq.advisory.AdvisorySupport;
1:27f7cab: import org.apache.activemq.broker.BrokerService;
1:27f7cab: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:27f7cab: import org.apache.activemq.broker.region.policy.PolicyMap;
1:27f7cab: import org.apache.activemq.command.ActiveMQDestination;
1:27f7cab: 
1:27f7cab: /**
1:0bbc0ac:  * 
1:27f7cab:  */
1:27f7cab: public class NoConsumerDeadLetterTest extends DeadLetterTestSupport {
1:27f7cab: 
1:27f7cab:     // lets disable the inapplicable tests
1:27f7cab:     public void testDurableQueueMessage() throws Exception {
2:27f7cab:     }
1:27f7cab: 
1:27f7cab:     public void testDurableTopicMessage() throws Exception {
1:27f7cab:     }
1:230a86c: 
1:27f7cab:     protected void doTest() throws Exception {
1:230a86c:         makeDlqConsumer();
1:27f7cab:         sendMessages();
1:230a86c: 
1:230a86c:         for (int i = 0; i < messageCount; i++) {
1:27f7cab:             Message msg = dlqConsumer.receive(1000);
1:27f7cab:             assertNotNull("Should be a message for loop: " + i, msg);
1:27f7cab:         }
1:27f7cab:     }
1:27183f8:     
1:27183f8:     public void testConsumerReceivesMessages() throws Exception {
1:27183f8:     	this.topic = false;
1:27183f8:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:27183f8:         connection = (ActiveMQConnection)factory.createConnection();
1:27183f8:         connection.start();
1:27183f8: 
1:27183f8:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27183f8:         MessageProducer producer = session.createProducer(getDestination());
1:27183f8:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:27183f8:    
1:27183f8:         Topic advisoryTopic = AdvisorySupport.getNoQueueConsumersAdvisoryTopic(getDestination());
1:27183f8:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:27183f8:         
1:27183f8:         TextMessage msg = session.createTextMessage("Message: x");
1:27183f8:         producer.send(msg);
1:27183f8:         
1:27183f8:         Message advisoryMessage = advisoryConsumer.receive(1000);
1:27183f8:         assertNotNull("Advisory message not received", advisoryMessage);
1:27183f8:         
1:27183f8:         Thread.sleep(1000);
1:27183f8:         
1:27183f8:         factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:27183f8:         connection = (ActiveMQConnection)factory.createConnection();
1:27183f8:         connection.start();
1:27183f8:         
1:27183f8:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27183f8:         
1:27183f8:         MessageConsumer consumer = session.createConsumer(getDestination());
1:27183f8:         Message received = consumer.receive(1000);
1:27183f8:         assertNotNull("Message not received", received);
1:27183f8:     }
1:27f7cab: 
1:27f7cab:     protected BrokerService createBroker() throws Exception {
1:27f7cab:         BrokerService broker = super.createBroker();
1:27f7cab: 
1:27f7cab:         PolicyEntry policy = new PolicyEntry();
1:27f7cab:         policy.setSendAdvisoryIfNoConsumers(true);
1:27f7cab: 
1:27f7cab:         PolicyMap pMap = new PolicyMap();
1:27f7cab:         pMap.setDefaultEntry(policy);
1:27f7cab: 
1:27f7cab:         broker.setDestinationPolicy(pMap);
1:27f7cab: 
1:27f7cab:         return broker;
1:27f7cab:     }
1:27f7cab: 
1:27f7cab:     protected Destination createDlqDestination() {
1:9ad6c08:     	if (this.topic) {
1:230a86c:     		return AdvisorySupport.getNoTopicConsumersAdvisoryTopic((ActiveMQDestination)getDestination());
1:9ad6c08:     	} else {
1:9ad6c08:     		return AdvisorySupport.getNoQueueConsumersAdvisoryTopic((ActiveMQDestination)getDestination());
1:9ad6c08:     	}
1:27f7cab:     }
1:27f7cab: 
1:27f7cab: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         makeDlqConsumer();
1: 
1:         for (int i = 0; i < messageCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:         return AdvisorySupport.getNoTopicConsumersAdvisoryTopic((ActiveMQDestination)getDestination());
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:27183f8
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testConsumerReceivesMessages() throws Exception {
1:     	this.topic = false;
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(getDestination());
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:    
1:         Topic advisoryTopic = AdvisorySupport.getNoQueueConsumersAdvisoryTopic(getDestination());
1:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:         
1:         TextMessage msg = session.createTextMessage("Message: x");
1:         producer.send(msg);
1:         
1:         Message advisoryMessage = advisoryConsumer.receive(1000);
1:         assertNotNull("Advisory message not received", advisoryMessage);
1:         
1:         Thread.sleep(1000);
1:         
1:         factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connection.start();
1:         
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         MessageConsumer consumer = session.createConsumer(getDestination());
1:         Message received = consumer.receive(1000);
1:         assertNotNull("Message not received", received);
1:     }
commit:9ad6c08
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     	if (this.topic) {
0:     		return AdvisorySupport.getNoTopicConsumersAdvisoryTopic((ActiveMQDestination)getDestination());
1:     	} else {
1:     		return AdvisorySupport.getNoQueueConsumersAdvisoryTopic((ActiveMQDestination)getDestination());
1:     	}
author:James Strachan
-------------------------------------------------------------------------------
commit:27f7cab
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
0: import javax.jms.Destination;
0: import javax.jms.Message;
1: 
1: /**
0:  *
0:  * @version $Revision$
1:  */
1: public class NoConsumerDeadLetterTest extends DeadLetterTestSupport {
1: 
1:     // lets disable the inapplicable tests
1:     public void testDurableQueueMessage() throws Exception {
1:     }
1: 
1:     public void testDurableTopicMessage() throws Exception {
1:     }
1:     
0:     public void testTransientQueueMessage() throws Exception {
1:     }
1: 
1:     protected void doTest() throws Exception {
0:         makeDlqConsumer(); 
1:         sendMessages();
1:         
0:         for (int i =0; i < messageCount; i++){
1:             Message msg = dlqConsumer.receive(1000);
1:             assertNotNull("Should be a message for loop: " + i, msg);
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setSendAdvisoryIfNoConsumers(true);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     protected Destination createDlqDestination() {
0:         return AdvisorySupport.getNoTopicConsumersAdvisoryTopic((ActiveMQDestination) getDestination());
1:     }
1: 
1: }
============================================================================