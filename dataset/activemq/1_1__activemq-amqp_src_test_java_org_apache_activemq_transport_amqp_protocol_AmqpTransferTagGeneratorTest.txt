1:ed395d1: /*
1:ed395d1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed395d1:  * contributor license agreements.  See the NOTICE file distributed with
1:ed395d1:  * this work for additional information regarding copyright ownership.
1:ed395d1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed395d1:  * (the "License"); you may not use this file except in compliance with
1:ed395d1:  * the License.  You may obtain a copy of the License at
1:ed395d1:  *
1:ed395d1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed395d1:  *
1:ed395d1:  * Unless required by applicable law or agreed to in writing, software
1:ed395d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed395d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed395d1:  * See the License for the specific language governing permissions and
1:ed395d1:  * limitations under the License.
1:ed395d1:  */
1:ed395d1: package org.apache.activemq.transport.amqp.protocol;
1:ed395d1: 
1:ed395d1: import static org.junit.Assert.assertEquals;
1:ed395d1: import static org.junit.Assert.assertFalse;
1:ed395d1: import static org.junit.Assert.assertNotSame;
1:ed395d1: import static org.junit.Assert.assertSame;
1:ed395d1: import static org.junit.Assert.assertTrue;
1:ed395d1: 
1:ed395d1: import java.io.ByteArrayInputStream;
1:ed395d1: import java.io.DataInputStream;
1:ed395d1: import java.io.IOException;
1:ed395d1: import java.lang.reflect.Field;
1:ed395d1: import java.util.ArrayList;
1:ed395d1: import java.util.Arrays;
1:ed395d1: 
1:ed395d1: import org.junit.Ignore;
1:ed395d1: import org.junit.Test;
1:ed395d1: 
1:ed395d1: /**
1:ed395d1:  * Tests for the AMQP Transfer Tag Generator
1:ed395d1:  */
1:ed395d1: public class AmqpTransferTagGeneratorTest {
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testCreate() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator();
1:ed395d1:         assertTrue(tagGen.isPooling());
1:ed395d1:         assertEquals(AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE, tagGen.getMaxPoolSize());
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testCreateDisabled() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1:ed395d1:         assertFalse(tagGen.isPooling());
1:ed395d1:         assertEquals(AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE, tagGen.getMaxPoolSize());
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testNewTagsOnSuccessiveCheckouts() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1:ed395d1: 
1:ed395d1:         byte[] tag1 = tagGen.getNextTag();
1:ed395d1:         byte[] tag2 = tagGen.getNextTag();
1:ed395d1:         byte[] tag3 = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:         assertNotSame(tag1, tag2);
1:ed395d1:         assertNotSame(tag1, tag3);
1:ed395d1:         assertNotSame(tag3, tag2);
1:ed395d1: 
1:ed395d1:         assertFalse(Arrays.equals(tag1, tag2));
1:ed395d1:         assertFalse(Arrays.equals(tag1, tag3));
1:ed395d1:         assertFalse(Arrays.equals(tag3, tag2));
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testTagPoolingInEffect() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1:ed395d1: 
1:ed395d1:         byte[] tag1 = tagGen.getNextTag();
1:ed395d1:         byte[] tag2 = tagGen.getNextTag();
1:ed395d1:         tagGen.returnTag(tag1);
1:ed395d1:         tagGen.returnTag(tag2);
1:ed395d1:         byte[] tag3 = tagGen.getNextTag();
1:ed395d1:         byte[] tag4 = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:         assertSame(tag1, tag3);
1:ed395d1:         assertSame(tag2, tag4);
1:ed395d1:         assertNotSame(tag1, tag4);
1:ed395d1:         assertNotSame(tag2, tag3);
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testPooledTagsReturnedInCheckedInOrder() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1:ed395d1: 
1:ed395d1:         byte[] tag1 = tagGen.getNextTag();
1:ed395d1:         byte[] tag2 = tagGen.getNextTag();
1:ed395d1:         tagGen.returnTag(tag2);
1:ed395d1:         tagGen.returnTag(tag1);
1:ed395d1:         byte[] tag3 = tagGen.getNextTag();
1:ed395d1:         byte[] tag4 = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:         assertSame(tag1, tag4);
1:ed395d1:         assertSame(tag2, tag3);
1:ed395d1:         assertNotSame(tag1, tag3);
1:ed395d1:         assertNotSame(tag2, tag4);
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testTagArrayGrowsWithTagValue() {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1:ed395d1: 
1:ed395d1:         for (int i = 0; i < 512; ++i) {
1:ed395d1:             byte[] tag = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:             if (i < 256) {
1:ed395d1:                 assertEquals(1, tag.length);
1:ed395d1:             } else {
1:ed395d1:                 assertEquals(2, tag.length);
1:ed395d1:             }
1:ed395d1:         }
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testTagValueMatchesParsedArray() throws IOException {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1:ed395d1: 
1:ed395d1:         for (int i = 0; i < Short.MAX_VALUE; ++i) {
1:ed395d1:             byte[] tag = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:ed395d1:             DataInputStream dis = new DataInputStream(bais);
1:ed395d1: 
1:ed395d1:             if (i < 256) {
1:ed395d1:                 assertEquals(1, tag.length);
1:ed395d1:                 assertEquals((byte) i, dis.readByte());
1:ed395d1:             } else {
1:ed395d1:                 assertEquals(2, tag.length);
1:ed395d1:                 assertEquals(i, dis.readShort());
1:ed395d1:             }
1:ed395d1:         }
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Test
1:ed395d1:     public void testTagGenerationWorksWithIdRollover() throws Exception {
1:ed395d1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1:ed395d1: 
1:ed395d1:         Field urisField = tagGen.getClass().getDeclaredField("nextTagId");
1:ed395d1:         urisField.setAccessible(true);
1:ed395d1:         urisField.set(tagGen, Long.MAX_VALUE + 1);
1:ed395d1: 
1:ed395d1:         {
1:ed395d1:             byte[] tag = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:ed395d1:             DataInputStream dis = new DataInputStream(bais);
1:ed395d1: 
1:ed395d1:             assertEquals(8, tag.length);
1:ed395d1:             assertEquals(Long.MAX_VALUE + 1, dis.readLong());
1:ed395d1:         }
1:ed395d1:         {
1:ed395d1:             byte[] tag = tagGen.getNextTag();
1:ed395d1: 
1:ed395d1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:ed395d1:             DataInputStream dis = new DataInputStream(bais);
1:ed395d1: 
1:ed395d1:             assertEquals(8, tag.length);
1:ed395d1:             assertEquals(Long.MAX_VALUE + 2, dis.readLong());
1:ed395d1:         }
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     @Ignore("Used to test performance")
1:ed395d1:     @Test
1:ed395d1:     public void testTagGeneratorOverTime() {
1:ed395d1:         final AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1:ed395d1:         final int tagLoop = AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE;
1:ed395d1:         final ArrayList<byte[]> tags = new ArrayList<>(tagLoop);
1:ed395d1: 
1:ed395d1:         for (int i = 0; i < Short.MAX_VALUE * 16; ++i) {
1:ed395d1:             // Checkout all the tags the pool will create
1:ed395d1:             for (int j = 0; j < tagLoop; ++j) {
1:ed395d1:                 tags.add(tagGen.getNextTag());
1:ed395d1:             }
1:ed395d1: 
1:ed395d1:             // Return them and then clear
1:ed395d1:             tags.forEach((tag) -> tagGen.returnTag(tag));
1:ed395d1:             tags.clear();
1:ed395d1:         }
1:ed395d1:     }
1:ed395d1: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ed395d1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.lang.reflect.Field;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: 
1: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests for the AMQP Transfer Tag Generator
1:  */
1: public class AmqpTransferTagGeneratorTest {
1: 
1:     @Test
1:     public void testCreate() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator();
1:         assertTrue(tagGen.isPooling());
1:         assertEquals(AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE, tagGen.getMaxPoolSize());
1:     }
1: 
1:     @Test
1:     public void testCreateDisabled() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1:         assertFalse(tagGen.isPooling());
1:         assertEquals(AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE, tagGen.getMaxPoolSize());
1:     }
1: 
1:     @Test
1:     public void testNewTagsOnSuccessiveCheckouts() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1: 
1:         byte[] tag1 = tagGen.getNextTag();
1:         byte[] tag2 = tagGen.getNextTag();
1:         byte[] tag3 = tagGen.getNextTag();
1: 
1:         assertNotSame(tag1, tag2);
1:         assertNotSame(tag1, tag3);
1:         assertNotSame(tag3, tag2);
1: 
1:         assertFalse(Arrays.equals(tag1, tag2));
1:         assertFalse(Arrays.equals(tag1, tag3));
1:         assertFalse(Arrays.equals(tag3, tag2));
1:     }
1: 
1:     @Test
1:     public void testTagPoolingInEffect() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1: 
1:         byte[] tag1 = tagGen.getNextTag();
1:         byte[] tag2 = tagGen.getNextTag();
1:         tagGen.returnTag(tag1);
1:         tagGen.returnTag(tag2);
1:         byte[] tag3 = tagGen.getNextTag();
1:         byte[] tag4 = tagGen.getNextTag();
1: 
1:         assertSame(tag1, tag3);
1:         assertSame(tag2, tag4);
1:         assertNotSame(tag1, tag4);
1:         assertNotSame(tag2, tag3);
1:     }
1: 
1:     @Test
1:     public void testPooledTagsReturnedInCheckedInOrder() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1: 
1:         byte[] tag1 = tagGen.getNextTag();
1:         byte[] tag2 = tagGen.getNextTag();
1:         tagGen.returnTag(tag2);
1:         tagGen.returnTag(tag1);
1:         byte[] tag3 = tagGen.getNextTag();
1:         byte[] tag4 = tagGen.getNextTag();
1: 
1:         assertSame(tag1, tag4);
1:         assertSame(tag2, tag3);
1:         assertNotSame(tag1, tag3);
1:         assertNotSame(tag2, tag4);
1:     }
1: 
1:     @Test
1:     public void testTagArrayGrowsWithTagValue() {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1: 
1:         for (int i = 0; i < 512; ++i) {
1:             byte[] tag = tagGen.getNextTag();
1: 
1:             if (i < 256) {
1:                 assertEquals(1, tag.length);
1:             } else {
1:                 assertEquals(2, tag.length);
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testTagValueMatchesParsedArray() throws IOException {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1: 
1:         for (int i = 0; i < Short.MAX_VALUE; ++i) {
1:             byte[] tag = tagGen.getNextTag();
1: 
1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:             DataInputStream dis = new DataInputStream(bais);
1: 
1:             if (i < 256) {
1:                 assertEquals(1, tag.length);
1:                 assertEquals((byte) i, dis.readByte());
1:             } else {
1:                 assertEquals(2, tag.length);
1:                 assertEquals(i, dis.readShort());
1:             }
1:         }
1:     }
1: 
1:     @Test
1:     public void testTagGenerationWorksWithIdRollover() throws Exception {
1:         AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(false);
1: 
1:         Field urisField = tagGen.getClass().getDeclaredField("nextTagId");
1:         urisField.setAccessible(true);
1:         urisField.set(tagGen, Long.MAX_VALUE + 1);
1: 
1:         {
1:             byte[] tag = tagGen.getNextTag();
1: 
1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:             DataInputStream dis = new DataInputStream(bais);
1: 
1:             assertEquals(8, tag.length);
1:             assertEquals(Long.MAX_VALUE + 1, dis.readLong());
1:         }
1:         {
1:             byte[] tag = tagGen.getNextTag();
1: 
1:             ByteArrayInputStream bais = new ByteArrayInputStream(tag);
1:             DataInputStream dis = new DataInputStream(bais);
1: 
1:             assertEquals(8, tag.length);
1:             assertEquals(Long.MAX_VALUE + 2, dis.readLong());
1:         }
1:     }
1: 
1:     @Ignore("Used to test performance")
1:     @Test
1:     public void testTagGeneratorOverTime() {
1:         final AmqpTransferTagGenerator tagGen = new AmqpTransferTagGenerator(true);
1:         final int tagLoop = AmqpTransferTagGenerator.DEFAULT_TAG_POOL_SIZE;
1:         final ArrayList<byte[]> tags = new ArrayList<>(tagLoop);
1: 
1:         for (int i = 0; i < Short.MAX_VALUE * 16; ++i) {
1:             // Checkout all the tags the pool will create
1:             for (int j = 0; j < tagLoop; ++j) {
1:                 tags.add(tagGen.getNextTag());
1:             }
1: 
1:             // Return them and then clear
1:             tags.forEach((tag) -> tagGen.returnTag(tag));
1:             tags.clear();
1:         }
1:     }
1: }
============================================================================