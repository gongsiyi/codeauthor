1:c239bf0: /*
1:2eaf675:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2eaf675:  * contributor license agreements.  See the NOTICE file distributed with
1:2eaf675:  * this work for additional information regarding copyright ownership.
1:2eaf675:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2eaf675:  * (the "License"); you may not use this file except in compliance with
1:2eaf675:  * the License.  You may obtain a copy of the License at
1:2eaf675:  *
1:2eaf675:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2eaf675:  *
1:2eaf675:  * Unless required by applicable law or agreed to in writing, software
1:2eaf675:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2eaf675:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2eaf675:  * See the License for the specific language governing permissions and
1:2eaf675:  * limitations under the License.
1:2eaf675:  */
1:2eaf675: package org.apache.activemq.karaf.itest;
1:3051882: 
1:3051882: import javax.jms.Connection;
1:3051882: 
1:3051882: import org.apache.qpid.jms.JmsConnectionFactory;
1:25f18ad: import org.junit.Test;
1:9743dbd: import org.ops4j.pax.exam.Configuration;
1:d42b51a: import org.ops4j.pax.exam.CoreOptions;
1:2eaf675: import org.ops4j.pax.exam.Option;
1:3051882: 
1:50ea308: public class ActiveMQAMQPBrokerFeatureTest extends AbstractFeatureTest {
1:2eaf675:     private static final Integer AMQP_PORT = 61636;
1:4dd3aa4: 
1:2eaf675:     @Configuration
1:2eaf675:     public static Option[] configure() {
1:4dd3aa4:         return new Option[] //
1:4dd3aa4:         {
1:d42b51a:          CoreOptions.mavenBundle("org.apache.geronimo.specs","geronimo-jms_2.0_spec").version("1.0-alpha-2"),
1:4dd3aa4:          configure("activemq", "activemq-amqp-client"), //
1:4dd3aa4:          configureBrokerStart()
1:4dd3aa4:         };
1:25f18ad:     }
1:4dd3aa4: 
1:25f18ad:     @Test(timeout = 5 * 60 * 1000)
1:50ea308:     public void testProduceConsume() throws Throwable {
1:50ea308:     	JMSTester tester = new JMSTester(getQPIDConnection());
1:50ea308:     	tester.produceAndConsume(sessionFactory);
1:50ea308:     	tester.close();
1:0f492f3:     }
1:50ea308: 
1:50ea308: 	protected Connection getQPIDConnection() throws Exception {
1:50ea308: 		assertBrokerStarted();
1:50ea308: 	    assertQpidClient();
1:50ea308: 	
1:50ea308: 	    JmsConnectionFactory factory = new JmsConnectionFactory("amqp://localhost:" + AMQP_PORT);
1:50ea308: 	    factory.setUsername(KarafShellHelper.USER);
1:50ea308: 	    factory.setPassword(KarafShellHelper.PASSWORD);
1:7741e02: 	    Connection connection = factory.createConnection();
1:7741e02: 	    connection.start();
1:50ea308: 	    return connection;
1:50ea308: 	}
1:50ea308: 
1:50ea308: 	private void assertQpidClient() throws Exception {
1:50ea308: 		withinReason(new Runnable() {
1:50ea308: 	        public void run() {
1:50ea308: 	            getBundle("org.apache.qpid.jms.client");
1:50ea308: 	        }
1:50ea308: 	    });
1:50ea308: 	}
1:f0cb95c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d42b51a
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.CoreOptions;
/////////////////////////////////////////////////////////////////////////
1:          CoreOptions.mavenBundle("org.apache.geronimo.specs","geronimo-jms_2.0_spec").version("1.0-alpha-2"),
commit:7741e02
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Option netty = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("io.netty", "netty-all").versionAsInProject().getURL().toString() + "$Bundle-SymbolicName=netty-all");
0:         Option protonJ = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("org.apache.qpid", "proton-j").versionAsInProject().getURL().toString() + "$Bundle-SymbolicName=proton-j");
0:         Option[] options = append(protonJ, activeMQOptions);
0:         options = append(netty, options);
0:         options = append(qpidClient, options);
/////////////////////////////////////////////////////////////////////////
0:         String amqpURI = "amqp://localhost:" + AMQP_PORT;
1:         Connection connection = factory.createConnection();
1:         connection.start();
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
0:         final String fragmentHost = "qpid-amqp-jms-client";
0:         Option qpidClient = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-client").versionAsInProject().getURL().toString() + "$Bundle-SymbolicName=qpid-amqp-client&Fragment-Host=" + fragmentHost);
0:         Option qpidClientJms = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-client-jms").versionAsInProject().getURL().toString() + "$Bundle-SymbolicName=" + fragmentHost);
0:         Option qpidCommon = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-common").versionAsInProject().getURL().toString());
0:     protected Connection getConnection() throws Throwable {
0:         ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", AMQP_PORT, AbstractFeatureTest.USER, AbstractFeatureTest.PASSWORD);
0:         Connection connection = null;
0:         ClassLoader originalLoader = Thread.currentThread().getContextClassLoader();
0:         try {
0:             // ensure service loader uses a loader that can find the impl - not the system classpath
0:             Thread.currentThread().setContextClassLoader(factory.getClass().getClassLoader());
0:             connection = factory.createConnection();
0:             connection.start();
0:         } finally {
0:             Thread.currentThread().setContextClassLoader(originalLoader);
1:         }
0:     @Ignore
1:     @Test(timeout = 5 * 60 * 1000)
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.junit.PaxExam;
0: @RunWith(PaxExam.class)
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQAMQPBrokerFeatureTest extends AbstractFeatureTest {
/////////////////////////////////////////////////////////////////////////
1:     public void testProduceConsume() throws Throwable {
1:     	JMSTester tester = new JMSTester(getQPIDConnection());
1:     	tester.produceAndConsume(sessionFactory);
1:     	tester.close();
1: 
1: 	protected Connection getQPIDConnection() throws Exception {
1: 		assertBrokerStarted();
1: 	    assertQpidClient();
1: 	
1: 	    JmsConnectionFactory factory = new JmsConnectionFactory("amqp://localhost:" + AMQP_PORT);
1: 	    factory.setUsername(KarafShellHelper.USER);
1: 	    factory.setPassword(KarafShellHelper.PASSWORD);
0: 	    Connection connection = factory.createConnection();
0: 	    connection.start();
1: 	    return connection;
1: 	}
1: 
1: 	private void assertQpidClient() throws Exception {
1: 		withinReason(new Runnable() {
1: 	        public void run() {
1: 	            getBundle("org.apache.qpid.jms.client");
1: 	        }
1: 	    });
1: 	}
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
0: import org.ops4j.pax.exam.spi.reactors.PerClass;
0: @ExamReactorStrategy(PerClass.class)
1:         return new Option[] //
1:         {
1:          configure("activemq", "activemq-amqp-client"), //
1:          configureBrokerStart()
1:         };
0:     protected Connection getConnection() throws Exception {
0:         withinReason(new Runnable() {
0:             public void run() {
0:                 getBundle("org.apache.qpid.jms.client");
1:         
1:     
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c239bf0
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Option[] configure = configure("activemq", "activemq-amqp-client");
0:                 assertTrue("qpid jms client bundle installed", verifyBundleInstalled("org.apache.qpid.jms.client"));
commit:3051882
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: 
1: import org.apache.qpid.jms.JmsConnectionFactory;
0: import org.ops4j.pax.exam.Configuration;
0: @Ignore
/////////////////////////////////////////////////////////////////////////
0:         Option qpidClient = CoreOptions.wrappedBundle(CoreOptions.mavenBundle("org.apache.qpid", "qpid-jms-client").versionAsInProject().getURL().toString() + "$Bundle-SymbolicName=qpid-jms-client");
/////////////////////////////////////////////////////////////////////////
0:         String amqpURI = "amqp://localhost" + AMQP_PORT;
0:         JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1: 
0:         factory.setUsername(AbstractFeatureTest.USER);
0:         factory.setPassword(AbstractFeatureTest.PASSWORD);
1: 
/////////////////////////////////////////////////////////////////////////
0:     @Override
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
0: 
0: import java.util.concurrent.Callable;
0: 
0: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
0:         Option[] configure = configure("activemq");
0:         Option[] configuredOptions = configureBrokerStart(configure);
0: 
0: 
0:     @Before
0:     public void setUpBundle() {
0: 
0:         installWrappedBundle(CoreOptions.wrappedBundle(CoreOptions.mavenBundle(
0:                 "io.netty", "netty-all").version(
0:                         getArtifactVersion("io.netty", "netty-all")).getURL().toString()
0:                 + "$Bundle-SymbolicName=qpid-jms-client"));
0:         installWrappedBundle(CoreOptions.wrappedBundle(CoreOptions.mavenBundle(
0:                 "org.apache.qpid", "proton-j").version(
0:                         getArtifactVersion("org.apache.qpid", "proton-j")).getURL()));
0:         installWrappedBundle(CoreOptions.wrappedBundle(CoreOptions.mavenBundle(
0:                 "org.apache.qpid", "qpid-jms-client").version(
0:                         getArtifactVersion("org.apache.qpid", "qpid-jms-client")).getURL()));
1:     }
0: 
0: 
0:         setUpBundle();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f0cb95c
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: 
0: import static org.junit.Assert.assertTrue;
0: 
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue("qpid jms client bundle installed", verifyBundleInstalled("qpid-jms-client"));
0:                 return true;
1:             }
0:         });
0: 
0: 
commit:ec2a3c7
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
0:     public void testTemporaryDestinations() throws Throwable {
0:         // ignore until we have temporary destination are working in amqp
0:     }
author:Kevin Earls
-------------------------------------------------------------------------------
commit:2eaf675
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
0: 
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ActiveMQAMQPBrokerFeatureTest extends ActiveMQBrokerFeatureTest {
1:     private static final Integer AMQP_PORT = 61636;
0: 
1:     @Configuration
1:     public static Option[] configure() {
0:         Option[] activeMQOptions = configure("activemq");
0: 
0:         MavenArtifactProvisionOption qpidClient = CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-client").versionAsInProject();
0:         MavenArtifactProvisionOption qpidClientJms = CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-client-jms").versionAsInProject();
0:         MavenArtifactProvisionOption qpidCommon = CoreOptions.mavenBundle("org.apache.qpid", "qpid-amqp-1-0-common").versionAsInProject();
0:         MavenArtifactProvisionOption geronimoJms = CoreOptions.mavenBundle("org.apache.geronimo.specs", "geronimo-jms_1.1_spec").versionAsInProject();
0:         MavenArtifactProvisionOption geronimoJta = CoreOptions.mavenBundle("org.apache.geronimo.specs", "geronimo-jta_1.1_spec","1.1.1");
0: 
0:         Option[] options = append(qpidClient, activeMQOptions);
0:         options = append(qpidClientJms, options);
0:         options = append(qpidCommon, options);
0:         options = append(geronimoJms, options);
0:         options = append(geronimoJta, options);
0: 
0:         Option[] configuredOptions = configureBrokerStart(options);
0:         return configuredOptions;
0:     }
0: 
0:     @Override
0:     protected Connection getConnection() throws JMSException {
0:         ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", AMQP_PORT, AbstractFeatureTest.USER, AbstractFeatureTest.PASSWORD);
0:         Connection connection = factory.createConnection();
0:         connection.start();
0: 
0:         return connection;
0:     }
0: }
============================================================================