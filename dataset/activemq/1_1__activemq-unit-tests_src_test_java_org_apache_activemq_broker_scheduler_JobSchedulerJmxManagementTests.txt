1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: 
1:74846bb: package org.apache.activemq.broker.scheduler;
1:74846bb: 
1:74846bb: import static org.junit.Assert.assertEquals;
1:74846bb: import static org.junit.Assert.assertFalse;
1:74846bb: import static org.junit.Assert.assertNotNull;
1:74846bb: import static org.junit.Assert.assertTrue;
1:74846bb: 
1:74846bb: import java.util.List;
1:74846bb: 
1:74846bb: import javax.jms.Connection;
1:74846bb: import javax.jms.MessageProducer;
1:74846bb: import javax.jms.Session;
1:74846bb: import javax.jms.TextMessage;
1:74846bb: import javax.management.openmbean.TabularData;
1:74846bb: 
1:74846bb: import org.apache.activemq.ScheduledMessage;
1:74846bb: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1:74846bb: import org.apache.activemq.util.Wait;
1:74846bb: import org.junit.Test;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * Tests of the JMX JobSchedulerStore management MBean.
1:74846bb:  */
1:74846bb: public class JobSchedulerJmxManagementTests extends JobSchedulerTestSupport {
1:74846bb: 
1:74846bb:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerJmxManagementTests.class);
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testJobSchedulerMBeanIsRegistered() throws Exception {
1:74846bb:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testGetNumberOfJobs() throws Exception {
1:74846bb:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:         scheduleMessage(60000, -1, -1);
1:74846bb:         assertFalse(view.getAllJobs().isEmpty());
1:74846bb:         assertEquals(1, view.getAllJobs().size());
1:74846bb:         scheduleMessage(60000, -1, -1);
1:74846bb:         assertEquals(2, view.getAllJobs().size());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testRemvoeJob() throws Exception {
1:74846bb:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:         scheduleMessage(60000, -1, -1);
1:74846bb:         assertFalse(view.getAllJobs().isEmpty());
1:74846bb:         TabularData jobs = view.getAllJobs();
1:74846bb:         assertEquals(1, jobs.size());
1:74846bb:         for (Object key : jobs.keySet()) {
1:74846bb:             String jobId = ((List<?>)key).get(0).toString();
1:74846bb:             LOG.info("Attempting to remove Job: {}", jobId);
1:74846bb:             view.removeJob(jobId);
1:74846bb:         }
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testRemvoeJobInRange() throws Exception {
1:74846bb:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:         scheduleMessage(60000, -1, -1);
1:74846bb:         assertFalse(view.getAllJobs().isEmpty());
1:74846bb:         String now = JobSupport.getDateTime(System.currentTimeMillis());
1:74846bb:         String later = JobSupport.getDateTime(System.currentTimeMillis() + 120 * 1000);
1:74846bb:         view.removeAllJobs(now, later);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testGetNextScheduledJob() throws Exception {
1:74846bb:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:         scheduleMessage(60000, -1, -1);
1:74846bb:         assertFalse(view.getAllJobs().isEmpty());
1:74846bb:         long before = System.currentTimeMillis() + 57 * 1000;
1:74846bb:         long toLate = System.currentTimeMillis() + 63 * 1000;
1:74846bb:         String next = view.getNextScheduleTime();
1:74846bb:         long nextTime = JobSupport.getDataTime(next);
1:433912f:         LOG.info("Next Scheduled Time: {} should be after: {}", next, JobSupport.getDateTime(before));
1:74846bb:         assertTrue(nextTime > before);
1:74846bb:         assertTrue(nextTime < toLate);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:74846bb:     public void testGetExecutionCount() throws Exception {
1:74846bb:         final JobSchedulerViewMBean view = getJobSchedulerMBean();
1:74846bb:         assertNotNull(view);
1:74846bb:         assertTrue(view.getAllJobs().isEmpty());
1:74846bb:         scheduleMessage(10000, 1000, 10);
1:74846bb:         assertFalse(view.getAllJobs().isEmpty());
1:74846bb:         TabularData jobs = view.getAllJobs();
1:74846bb:         assertEquals(1, jobs.size());
1:74846bb:         String jobId = null;
1:74846bb:         for (Object key : jobs.keySet()) {
1:74846bb:             jobId = ((List<?>)key).get(0).toString();
1:74846bb:         }
1:74846bb: 
1:74846bb:         final String fixedJobId = jobId;
1:74846bb:         LOG.info("Attempting to get execution count for Job: {}", jobId);
1:74846bb:         assertEquals(0, view.getExecutionCount(jobId));
1:74846bb: 
1:74846bb:         assertTrue("Should execute again", Wait.waitFor(new Wait.Condition() {
1:74846bb: 
1:74846bb:             @Override
1:74846bb:             public boolean isSatisified() throws Exception {
1:74846bb:                 return view.getExecutionCount(fixedJobId) > 0;
1:74846bb:             }
1:74846bb:         }));
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     protected boolean isUseJmx() {
1:74846bb:         return true;
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected void scheduleMessage(int time, int period, int repeat) throws Exception {
1:74846bb:         Connection connection = createConnection();
1:74846bb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74846bb:         MessageProducer producer = session.createProducer(destination);
1:74846bb:         TextMessage message = session.createTextMessage("test msg");
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:74846bb:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);
1:74846bb:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);
1:74846bb:         producer.send(message);
1:74846bb:         connection.close();
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Next Scheduled Time: {} should be after: {}", next, JobSupport.getDateTime(before));
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Tests of the JMX JobSchedulerStore management MBean.
1:  */
1: public class JobSchedulerJmxManagementTests extends JobSchedulerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerJmxManagementTests.class);
1: 
1:     @Test
1:     public void testJobSchedulerMBeanIsRegistered() throws Exception {
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:     }
1: 
1:     @Test
1:     public void testGetNumberOfJobs() throws Exception {
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:         scheduleMessage(60000, -1, -1);
1:         assertFalse(view.getAllJobs().isEmpty());
1:         assertEquals(1, view.getAllJobs().size());
1:         scheduleMessage(60000, -1, -1);
1:         assertEquals(2, view.getAllJobs().size());
1:     }
1: 
1:     @Test
1:     public void testRemvoeJob() throws Exception {
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:         scheduleMessage(60000, -1, -1);
1:         assertFalse(view.getAllJobs().isEmpty());
1:         TabularData jobs = view.getAllJobs();
1:         assertEquals(1, jobs.size());
1:         for (Object key : jobs.keySet()) {
1:             String jobId = ((List<?>)key).get(0).toString();
1:             LOG.info("Attempting to remove Job: {}", jobId);
1:             view.removeJob(jobId);
1:         }
1:         assertTrue(view.getAllJobs().isEmpty());
1:     }
1: 
1:     @Test
1:     public void testRemvoeJobInRange() throws Exception {
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:         scheduleMessage(60000, -1, -1);
1:         assertFalse(view.getAllJobs().isEmpty());
1:         String now = JobSupport.getDateTime(System.currentTimeMillis());
1:         String later = JobSupport.getDateTime(System.currentTimeMillis() + 120 * 1000);
1:         view.removeAllJobs(now, later);
1:         assertTrue(view.getAllJobs().isEmpty());
1:     }
1: 
1:     @Test
1:     public void testGetNextScheduledJob() throws Exception {
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:         scheduleMessage(60000, -1, -1);
1:         assertFalse(view.getAllJobs().isEmpty());
1:         long before = System.currentTimeMillis() + 57 * 1000;
1:         long toLate = System.currentTimeMillis() + 63 * 1000;
1:         String next = view.getNextScheduleTime();
1:         long nextTime = JobSupport.getDataTime(next);
0:         LOG.info("Next Scheduled Time: {}", next);
1:         assertTrue(nextTime > before);
1:         assertTrue(nextTime < toLate);
1:     }
1: 
1:     @Test
1:     public void testGetExecutionCount() throws Exception {
1:         final JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertTrue(view.getAllJobs().isEmpty());
1:         scheduleMessage(10000, 1000, 10);
1:         assertFalse(view.getAllJobs().isEmpty());
1:         TabularData jobs = view.getAllJobs();
1:         assertEquals(1, jobs.size());
1:         String jobId = null;
1:         for (Object key : jobs.keySet()) {
1:             jobId = ((List<?>)key).get(0).toString();
1:         }
1: 
1:         final String fixedJobId = jobId;
1:         LOG.info("Attempting to get execution count for Job: {}", jobId);
1:         assertEquals(0, view.getExecutionCount(jobId));
1: 
1:         assertTrue("Should execute again", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getExecutionCount(fixedJobId) > 0;
1:             }
1:         }));
1:     }
1: 
1:     @Override
1:     protected boolean isUseJmx() {
1:         return true;
1:     }
1: 
1:     protected void scheduleMessage(int time, int period, int repeat) throws Exception {
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);
1:         producer.send(message);
1:         connection.close();
1:     }
1: }
============================================================================