2:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
2:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
6:8c4ded4: 
1:b08ae50: import java.io.BufferedWriter;
1:b08ae50: import java.io.File;
1:b08ae50: import java.io.FileWriter;
1:3af93f1: 
1:b08ae50: import javax.jms.JMSException;
1:b08ae50: import javax.jms.Session;
1:3af93f1: 
1:b08ae50: import org.apache.activemq.ActiveMQConnection;
1:b08ae50: import org.apache.activemq.ActiveMQSession;
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:8c4ded4: 
1:8c4ded4: 
1:3af93f1: public class FTPBlobUploadStrategyTest extends FTPTestSupport {
1:8c4ded4: 
1:3af93f1:     public void testFileUpload() throws Exception {
1:3af93f1:         setConnection();
1:c7d559f:         File file = File.createTempFile("amq-data-file-", ".dat");
1:b08ae50:         // lets write some data
1:b08ae50:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:b08ae50:         writer.append("hello world");
1:b08ae50:         writer.close();
1:c7d559f: 
1:b08ae50:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b08ae50:         ((ActiveMQConnection)connection).setCopyMessageOnSend(false);
1:c7d559f: 
1:b08ae50:         ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session).createBlobMessage(file);
1:01cda85:         message.setJMSMessageID("testmessage");
1:b08ae50:         message.onSend();
1:01cda85:         assertEquals(ftpUrl + "ID_testmessage", message.getURL().toString());
1:01cda85:         File uploaded = new File(ftpHomeDirFile, "ID_testmessage");
1:3af93f1:         assertTrue("File doesn't exists", uploaded.exists());
1:c7d559f:     }
1:c7d559f: 
1:3af93f1:     public void testWriteDenied() throws Exception {
1:3af93f1:         userNamePass = "guest";
1:3af93f1:         setConnection();
1:3af93f1:         File file = File.createTempFile("amq-data-file-", ".dat");
1:3af93f1:         // lets write some data
1:3af93f1:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:3af93f1:         writer.append("hello world");
1:3af93f1:         writer.close();
1:c7d559f: 
1:3af93f1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3af93f1:         ((ActiveMQConnection)connection).setCopyMessageOnSend(false);
1:3af93f1: 
1:3af93f1:         ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session).createBlobMessage(file);
1:01cda85:         message.setJMSMessageID("testmessage");
1:3af93f1:         try {
1:3af93f1:             message.onSend();
1:3af93f1:         } catch (JMSException e) {
1:3af93f1:             e.printStackTrace();
1:3af93f1:             return;
1:3af93f1:         }
1:3af93f1:         fail("Should have failed with permission denied exception!");
1:3af93f1:     }
1:c7d559f: 
4:b08ae50: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:01cda85
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         message.setJMSMessageID("testmessage");
1:         assertEquals(ftpUrl + "ID_testmessage", message.getURL().toString());
1:         File uploaded = new File(ftpHomeDirFile, "ID_testmessage");
/////////////////////////////////////////////////////////////////////////
1:         message.setJMSMessageID("testmessage");
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         File file = File.createTempFile("amq-data-file-", ".dat");
1: 
1: 
0:         assertEquals(ftpUrl + "testmessage", message.getURL().toString());
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3af93f1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class FTPBlobUploadStrategyTest extends FTPTestSupport {
1:     public void testFileUpload() throws Exception {
1:         setConnection();
/////////////////////////////////////////////////////////////////////////
0:         File uploaded = new File(ftpHomeDirFile, "testmessage");
1:         assertTrue("File doesn't exists", uploaded.exists());
1:     public void testWriteDenied() throws Exception {
1:         userNamePass = "guest";
1:         setConnection();
1:         File file = File.createTempFile("amq-data-file-", ".dat");
1:         // lets write some data
1:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:         writer.append("hello world");
1:         writer.close();
1:         
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ((ActiveMQConnection)connection).setCopyMessageOnSend(false);
1:         
1:         ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session).createBlobMessage(file);
0:         message.setMessageId(new MessageId("testmessage"));
1:         try {
1:             message.onSend();
1:         } catch (JMSException e) {
1:             e.printStackTrace();
1:             return;
1:         }
1:         fail("Should have failed with permission denied exception!");
1:     }
1:     
commit:8c4ded4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.ftpserver.FtpServer;
0: import org.apache.ftpserver.FtpServerFactory;
0: import org.apache.ftpserver.ftplet.AuthorizationRequest;
0: import org.apache.ftpserver.ftplet.User;
0: import org.apache.ftpserver.ftplet.UserManager;
0: import org.apache.ftpserver.listener.ListenerFactory;
0: import org.apache.ftpserver.usermanager.PropertiesUserManagerFactory;
0: import org.apache.ftpserver.usermanager.UsernamePasswordAuthentication;
0: import org.apache.ftpserver.usermanager.impl.BaseUser;
0: import org.jmock.Expectations;
0: import org.jmock.Mockery;
0: import org.jmock.api.Invocation;
0: import org.jmock.lib.action.CustomAction;
1: 
0:     private static final String ftpServerListenerName = "default";
0:     private Connection connection;
0:     private FtpServer server;
0:     final static String userNamePass = "activemq";
0: 	Mockery context = null;
0: 	String ftpUrl;
1: 	
1: 		
0:         final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
0:         ftpHomeDirFile.mkdirs();
0:         ftpHomeDirFile.getParentFile().deleteOnExit();
1: 
0:         FtpServerFactory serverFactory = new FtpServerFactory();
0:         ListenerFactory factory = new ListenerFactory();
1: 
0: 		PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
0: 		UserManager userManager = userManagerFactory.createUserManager();
1: 
0: 		BaseUser user = new BaseUser();
0:         user.setName("activemq");
0:         user.setPassword("activemq");
0:         user.setHomeDirectory(ftpHomeDirFile.getParent());
1:         
0:         userManager.save(user);
1: 
0:         serverFactory.setUserManager(userManager);
0:         factory.setPort(0);
0:         serverFactory.addListener(ftpServerListenerName, factory
0:                 .createListener());
0:         server = serverFactory.createServer();
0:         server.start();
0:         int ftpPort = serverFactory.getListener(ftpServerListenerName)
0:                 .getPort();
1: 		
0:         ftpUrl = "ftp://"
0:             + userNamePass
0:             + ":"
0:             + userNamePass
0:             + "@localhost:"
0:             + ftpPort
0:             + "/ftptest/";
0:         bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=" + ftpUrl;
0:         URL url = new URL(ftpUrl);
/////////////////////////////////////////////////////////////////////////
0:         Assert.assertEquals(ftpUrl + "testmessage", message.getURL().toString()); 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
0: 
1: import java.io.BufferedWriter;
1: import java.io.File;
1: import java.io.FileWriter;
0: import java.net.URL;
0: 
0: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
0: 
0: import junit.framework.Assert;
0: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQSession;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQBlobMessage;
0: import org.apache.activemq.command.MessageId;
0: import org.apache.commons.net.ftp.FTPClient;
0: 
1: /**
0:  * To start this test make sure an ftp server is running with
0:  * user: activemq and password: activemq
1:  */
0: public class FTPBlobUploadStrategyTest extends EmbeddedBrokerTestSupport {
0: 	
0: 	private Connection connection;
0: 
0: 	protected void setUp() throws Exception {
0: 		bindAddress = "vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=ftp://activemq:activemq@localhost/ftptest/";
0:         super.setUp();
0: 
0:         connection = createConnection();
0:         connection.start();
0:         
0:         // check if file exist and delete it
0:         URL url = new URL("ftp://activemq:activemq@localhost/ftptest/");
0:         String connectUrl = url.getHost();
0: 		int port = url.getPort() < 1 ? 21 : url.getPort();
0: 		
0: 		FTPClient ftp = new FTPClient();
0: 		ftp.connect(connectUrl, port);
0: 		if(!ftp.login("activemq", "activemq")) {
0: 			ftp.quit();
0: 			ftp.disconnect();
0: 			throw new JMSException("Cant Authentificate to FTP-Server");
1: 		}
0: 		ftp.changeWorkingDirectory("ftptest");
0: 		ftp.deleteFile("testmessage");
0: 		ftp.quit();
0: 		ftp.disconnect();
1:     }
0: 	
0: 	public void testFileUpload() throws Exception {
0: 		File file = File.createTempFile("amq-data-file-", ".dat");
1:         // lets write some data
1:         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
1:         writer.append("hello world");
1:         writer.close();
0:         
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ((ActiveMQConnection)connection).setCopyMessageOnSend(false);
0:         
1:         ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session).createBlobMessage(file);
0:         message.setMessageId(new MessageId("testmessage"));
1:         message.onSend();
0:         Assert.assertEquals("ftp://activemq:activemq@localhost/ftptest/testmessage", message.getURL().toString()); 
1: 	}
0: 
1: }
============================================================================