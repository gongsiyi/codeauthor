1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
1:d29ca2a: 
1:d29ca2a: import java.util.LinkedHashMap;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A simple least-recently-used cache of a fixed size.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:6aa4bca: public class LRUMap<K,V> extends LinkedHashMap<K,V>{
1:d29ca2a: 
1:d29ca2a:     protected static final float DEFAULT_LOAD_FACTOR = (float) 0.75;
1:d29ca2a:     protected static final int DEFAULT_INITIAL_CAPACITY = 5000;
1:933eb2f:     private static final long serialVersionUID = -9179676638408888162L;
1:d29ca2a: 
1:d29ca2a:     private int maximumSize;
1:d29ca2a: 
1:d29ca2a:     public LRUMap(int maximumSize) {
1:d29ca2a:         this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, true, maximumSize);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public LRUMap(int maximumSize, boolean accessOrder) {
1:d29ca2a:         this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, accessOrder, maximumSize);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public LRUMap(int initialCapacity, float loadFactor, boolean accessOrder, int maximumSize) {
1:d29ca2a:         super(initialCapacity, loadFactor, accessOrder);
1:d29ca2a:         this.maximumSize = maximumSize;
1:d29ca2a:     }
1:d29ca2a: 
1:6aa4bca:     protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {
1:d29ca2a:         return size() > maximumSize;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private static final long serialVersionUID = -9179676638408888162L;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: 
1: /**
1:  * A simple least-recently-used cache of a fixed size.
1:  * 
0:  * @version $Revision:$
1:  */
0: public class LRUMap extends LinkedHashMap {
0:     private static final long serialVersionUID = -9179676638408888162L;
1: 
1:     protected static final float DEFAULT_LOAD_FACTOR = (float) 0.75;
1:     protected static final int DEFAULT_INITIAL_CAPACITY = 5000;
1: 
1:     private int maximumSize;
1: 
1:     public LRUMap(int maximumSize) {
1:         this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, true, maximumSize);
1:     }
1: 
1:     public LRUMap(int maximumSize, boolean accessOrder) {
1:         this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, accessOrder, maximumSize);
1:     }
1: 
1:     public LRUMap(int initialCapacity, float loadFactor, boolean accessOrder, int maximumSize) {
1:         super(initialCapacity, loadFactor, accessOrder);
1:         this.maximumSize = maximumSize;
1:     }
1: 
0:     protected boolean removeEldestEntry(Map.Entry eldest) {
1:         return size() > maximumSize;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6aa4bca
/////////////////////////////////////////////////////////////////////////
1: public class LRUMap<K,V> extends LinkedHashMap<K,V>{
/////////////////////////////////////////////////////////////////////////
1:     protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {
============================================================================