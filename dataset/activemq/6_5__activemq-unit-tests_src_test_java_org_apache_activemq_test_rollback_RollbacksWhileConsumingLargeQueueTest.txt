1:39b0376: /**
1:39b0376:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39b0376:  * contributor license agreements.  See the NOTICE file distributed with
1:39b0376:  * this work for additional information regarding copyright ownership.
1:39b0376:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39b0376:  * (the "License"); you may not use this file except in compliance with
1:39b0376:  * the License.  You may obtain a copy of the License at
2:39b0376:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39b0376:  *
1:39b0376:  * Unless required by applicable law or agreed to in writing, software
1:39b0376:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39b0376:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39b0376:  * See the License for the specific language governing permissions and
1:39b0376:  * limitations under the License.
1:39b0376:  */
1:39b0376: package org.apache.activemq.test.rollback;
4:39b0376: 
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:74a7a8b: 
1:39b0376: import javax.jms.Connection;
1:f0de24c: import javax.jms.ConnectionFactory;
1:39b0376: import javax.jms.JMSException;
1:39b0376: import javax.jms.Message;
1:0c93dfd: import javax.jms.MessageConsumer;
1:39b0376: import javax.jms.MessageListener;
1:39b0376: import javax.jms.Session;
1:39b0376: import javax.jms.TextMessage;
1:0c93dfd: 
1:f0de24c: import org.apache.activemq.ActiveMQConnectionFactory;
1:0c93dfd: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f0de24c: import org.apache.activemq.RedeliveryPolicy;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:0c93dfd: import org.springframework.jms.core.MessageCreator;
1:0c93dfd: 
1:39b0376: /**
1:0bbc0ac:  * 
1:39b0376:  */
1:230a86c: public class RollbacksWhileConsumingLargeQueueTest extends EmbeddedBrokerTestSupport implements MessageListener {
1:aa1aa58: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(RollbacksWhileConsumingLargeQueueTest.class);
1:39b0376: 
1:cb234b3:     protected int numberOfMessagesOnQueue = 650;
1:230a86c:     private Connection connection;
1:230a86c:     private AtomicInteger deliveryCounter = new AtomicInteger(0);
1:230a86c:     private AtomicInteger ackCounter = new AtomicInteger(0);
1:230a86c:     private CountDownLatch latch;
1:230a86c:     private Throwable failure;
1:39b0376: 
1:230a86c:     public void testWithReciever() throws Throwable {
1:230a86c:         latch = new CountDownLatch(numberOfMessagesOnQueue);
1:230a86c:         Session session = connection.createSession(true, 0);
1:230a86c:         MessageConsumer consumer = session.createConsumer(destination);
1:39b0376: 
1:230a86c:         long start = System.currentTimeMillis();
1:230a86c:         while ((System.currentTimeMillis() - start) < 1000 * 1000) {
1:230a86c:             if (getFailure() != null) {
1:230a86c:                 throw getFailure();
1:230a86c:             }
1:0c93dfd: 
1:230a86c:             // Are we done receiving all the messages.
1:fc00993:             if (ackCounter.get() == numberOfMessagesOnQueue) {
1:230a86c:                 return;
1:fc00993:             }
1:0c93dfd: 
1:230a86c:             Message message = consumer.receive(1000);
1:fc00993:             if (message == null) {
1:230a86c:                 continue;
1:fc00993:             }
1:0c93dfd: 
1:230a86c:             try {
1:230a86c:                 onMessage(message);
1:230a86c:                 session.commit();
1:230a86c:             } catch (Throwable e) {
1:230a86c:                 session.rollback();
1:230a86c:             }
1:230a86c:         }
1:0c93dfd: 
1:230a86c:         fail("Did not receive all the messages.");
1:230a86c:     }
1:0c93dfd: 
1:230a86c:     public void testWithMessageListener() throws Throwable {
1:230a86c:         latch = new CountDownLatch(numberOfMessagesOnQueue);
1:230a86c:         new DelegatingTransactionalMessageListener(this, connection, destination);
1:0c93dfd: 
1:230a86c:         long start = System.currentTimeMillis();
1:230a86c:         while ((System.currentTimeMillis() - start) < 1000 * 1000) {
1:0c93dfd: 
1:230a86c:             if (getFailure() != null) {
1:230a86c:                 throw getFailure();
1:230a86c:             }
1:0c93dfd: 
1:230a86c:             if (latch.await(1, TimeUnit.SECONDS)) {
1:fc00993:                 LOG.debug("Received: " + deliveryCounter.get() + "  message(s)");
1:230a86c:                 return;
1:230a86c:             }
1:0c93dfd: 
1:230a86c:         }
1:0c93dfd: 
1:230a86c:         fail("Did not receive all the messages.");
1:230a86c:     }
1:39b0376: 
1:f0de24c:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:f0de24c:         ActiveMQConnectionFactory answer = (ActiveMQConnectionFactory) super.createConnectionFactory();
1:f0de24c:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:f0de24c:         policy.setMaximumRedeliveries(3);
1:f0de24c:         policy.setRedeliveryDelay(0);
1:f0de24c:         policy.setInitialRedeliveryDelay(0);
1:f0de24c:         policy.setUseExponentialBackOff(false);
1:f0de24c:         answer.setRedeliveryPolicy(policy);
1:0c93dfd:         return answer;
19:0c93dfd:     }
1:f0de24c: 
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         super.setUp();
1:39b0376: 
1:230a86c:         connection = createConnection();
1:230a86c:         connection.start();
1:39b0376: 
1:230a86c:         // lets fill the queue up
1:230a86c:         for (int i = 0; i < numberOfMessagesOnQueue; i++) {
1:230a86c:             template.send(createMessageCreator(i));
1:230a86c:         }
1:39b0376: 
1:230a86c:     }
1:39b0376: 
1:230a86c:     protected void tearDown() throws Exception {
1:230a86c:         if (connection != null) {
1:230a86c:             connection.close();
1:230a86c:         }
1:230a86c:         super.tearDown();
1:230a86c:     }
1:39b0376: 
1:230a86c:     protected MessageCreator createMessageCreator(final int i) {
1:230a86c:         return new MessageCreator() {
1:230a86c:             public Message createMessage(Session session) throws JMSException {
1:230a86c:                 TextMessage answer = session.createTextMessage("Message: " + i);
1:230a86c:                 answer.setIntProperty("Counter", i);
1:230a86c:                 return answer;
1:230a86c:             }
1:230a86c:         };
1:230a86c:     }
1:39b0376: 
1:230a86c:     public void onMessage(Message message) {
1:230a86c:         String msgId = null;
1:230a86c:         String msgText = null;
1:39b0376: 
1:230a86c:         try {
1:230a86c:             msgId = message.getJMSMessageID();
1:230a86c:             msgText = ((TextMessage)message).getText();
1:230a86c:         } catch (JMSException e) {
1:230a86c:             setFailure(e);
1:230a86c:         }
1:39b0376: 
1:230a86c:         try {
1:230a86c:             assertEquals("Message: " + ackCounter.get(), msgText);
1:230a86c:         } catch (Throwable e) {
1:230a86c:             setFailure(e);
1:230a86c:         }
1:39b0376: 
1:230a86c:         int value = deliveryCounter.incrementAndGet();
1:230a86c:         if (value % 2 == 0) {
1:fc00993:             LOG.info("Rolling Back message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
1:230a86c:             throw new RuntimeException("Dummy exception on message: " + value);
1:230a86c:         }
1:0c93dfd: 
1:fc00993:         LOG.info("Received message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
1:230a86c:         ackCounter.incrementAndGet();
1:230a86c:         latch.countDown();
1:230a86c:     }
1:0c93dfd: 
1:230a86c:     public synchronized Throwable getFailure() {
1:230a86c:         return failure;
1:230a86c:     }
1:0c93dfd: 
1:230a86c:     public synchronized void setFailure(Throwable failure) {
1:230a86c:         this.failure = failure;
1:230a86c:     }
1:0c93dfd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(RollbacksWhileConsumingLargeQueueTest.class);
/////////////////////////////////////////////////////////////////////////
1:             if (ackCounter.get() == numberOfMessagesOnQueue) {
1:             }
1:             if (message == null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Received: " + deliveryCounter.get() + "  message(s)");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Rolling Back message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
1:         LOG.info("Received message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: public class RollbacksWhileConsumingLargeQueueTest extends EmbeddedBrokerTestSupport implements MessageListener {
1:     private Connection connection;
1:     private AtomicInteger deliveryCounter = new AtomicInteger(0);
1:     private AtomicInteger ackCounter = new AtomicInteger(0);
1:     private CountDownLatch latch;
1:     private Throwable failure;
1:     public void testWithReciever() throws Throwable {
1:         latch = new CountDownLatch(numberOfMessagesOnQueue);
1:         Session session = connection.createSession(true, 0);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         long start = System.currentTimeMillis();
1:         while ((System.currentTimeMillis() - start) < 1000 * 1000) {
1:             if (getFailure() != null) {
1:                 throw getFailure();
1:             }
1:             // Are we done receiving all the messages.
0:             if (ackCounter.get() == numberOfMessagesOnQueue)
1:                 return;
1:             Message message = consumer.receive(1000);
0:             if (message == null)
1:                 continue;
1:             try {
1:                 onMessage(message);
1:                 session.commit();
1:             } catch (Throwable e) {
1:                 session.rollback();
1:             }
1:         }
1:         fail("Did not receive all the messages.");
1:     }
1:     public void testWithMessageListener() throws Throwable {
1:         latch = new CountDownLatch(numberOfMessagesOnQueue);
1:         new DelegatingTransactionalMessageListener(this, connection, destination);
1:         long start = System.currentTimeMillis();
1:         while ((System.currentTimeMillis() - start) < 1000 * 1000) {
1:             if (getFailure() != null) {
1:                 throw getFailure();
1:             }
1:             if (latch.await(1, TimeUnit.SECONDS)) {
0:                 log.debug("Received: " + deliveryCounter.get() + "  message(s)");
1:                 return;
1:             }
1:         }
1:         fail("Did not receive all the messages.");
1:     }
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:         connection.start();
1:         // lets fill the queue up
1:         for (int i = 0; i < numberOfMessagesOnQueue; i++) {
1:             template.send(createMessageCreator(i));
1:         }
1:     }
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1:     protected MessageCreator createMessageCreator(final int i) {
1:         return new MessageCreator() {
1:             public Message createMessage(Session session) throws JMSException {
1:                 TextMessage answer = session.createTextMessage("Message: " + i);
1:                 answer.setIntProperty("Counter", i);
1:                 return answer;
1:             }
1:         };
1:     }
1:     public void onMessage(Message message) {
1:         String msgId = null;
1:         String msgText = null;
1:         try {
1:             msgId = message.getJMSMessageID();
1:             msgText = ((TextMessage)message).getText();
1:         } catch (JMSException e) {
1:             setFailure(e);
1:         }
1:         try {
1:             assertEquals("Message: " + ackCounter.get(), msgText);
1:         } catch (Throwable e) {
1:             setFailure(e);
1:         }
1:         int value = deliveryCounter.incrementAndGet();
1:         if (value % 2 == 0) {
0:             log.info("Rolling Back message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
1:             throw new RuntimeException("Dummy exception on message: " + value);
1:         }
0:         log.info("Received message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
1:         ackCounter.incrementAndGet();
1:         latch.countDown();
1:     }
1:     public synchronized Throwable getFailure() {
1:         return failure;
1:     }
1:     public synchronized void setFailure(Throwable failure) {
1:         this.failure = failure;
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicInteger;
commit:da5139c
/////////////////////////////////////////////////////////////////////////
0: 	public void testWithReciever() throws Throwable {
/////////////////////////////////////////////////////////////////////////
0: 			log.info("Rolling Back message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
0: 		log.info("Received message: " + ackCounter.get() + " id: " + msgId + ", content: " + msgText);
commit:0c93dfd
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.springframework.jms.core.MessageCreator;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
0: public class RollbacksWhileConsumingLargeQueueTest extends
0: 		EmbeddedBrokerTestSupport implements MessageListener {
0: 	protected int numberOfMessagesOnQueue = 6500;
0: 	private Connection connection;
0: 	private AtomicInteger deliveryCounter = new AtomicInteger(0);
0: 	private AtomicInteger ackCounter = new AtomicInteger(0);
0: 	private CountDownLatch latch;
0: 	private Throwable failure;
0: 	public void xtestWithReciever() throws Throwable {
0: 		latch = new CountDownLatch(numberOfMessagesOnQueue);
0: 		Session session = connection.createSession(true, 0);
0: 		MessageConsumer consumer = session.createConsumer(destination);
0: 		long start = System.currentTimeMillis();
0: 		while ((System.currentTimeMillis() - start) < 1000*1000) {
0: 			if (getFailure() != null) {
0: 				throw getFailure();
1: 			}
1: 			
0: 			// Are we done receiving all the messages.
0: 			if( ackCounter.get() == numberOfMessagesOnQueue )
0: 				return;
1: 
0: 			Message message = consumer.receive(1000);
0: 			if (message == null)
0: 				continue;
1: 
0: 			try {
0: 				onMessage(message);
0: 				session.commit();
0: 			} catch (Throwable e) {
0: 				session.rollback();
1: 			}
1: 		}
1: 
0: 		fail("Did not receive all the messages.");
1: 	}
1: 
0: 	public void testWithMessageListener() throws Throwable {
0: 		latch = new CountDownLatch(numberOfMessagesOnQueue);
0: 		new DelegatingTransactionalMessageListener(this, connection,
0: 				destination);
1: 
0: 		long start = System.currentTimeMillis();
0: 		while ((System.currentTimeMillis() - start) < 1000*1000) {
1: 
0: 			if (getFailure() != null) {
0: 				throw getFailure();
1: 			}
1: 
0: 			if (latch.await(1, TimeUnit.SECONDS)) {
0: 				System.out.println("Received: " + deliveryCounter.get()
0: 						+ "  message(s)");
0: 				return;
1: 			}
1: 
1: 		}
1: 
0: 		fail("Did not receive all the messages.");
1: 	}
0: 	protected void setUp() throws Exception {
0: 		super.setUp();
0: 		connection = createConnection();
0: 		connection.start();
0: 		// lets fill the queue up
0: 		for (int i = 0; i < numberOfMessagesOnQueue; i++) {
0: 			template.send(createMessageCreator(i));
1: 		}
1: 	}
0: 	protected void tearDown() throws Exception {
0: 		if (connection != null) {
0: 			connection.close();
1: 		}
0: 		super.tearDown();
1: 	}
0: 	protected MessageCreator createMessageCreator(final int i) {
0: 		return new MessageCreator() {
0: 			public Message createMessage(Session session) throws JMSException {
0: 				TextMessage answer = session.createTextMessage("Message: " + i);
0: 				answer.setIntProperty("Counter", i);
1: 				return answer;
1: 			}
0: 		};
1: 	}
0: 	public void onMessage(Message message) {
0: 		String msgId = null;
0: 		String msgText = null;
0: 		try {
0: 			msgId = message.getJMSMessageID();
0: 			msgText = ((TextMessage) message).getText();
0: 		} catch (JMSException e) {
0: 			setFailure(e);
1: 		}
0: 		try {
0: 			assertEquals("Message: " + ackCounter.get(), msgText);
0: 		} catch (Throwable e) {
0: 			setFailure(e);
1: 		}
0: 		int value = deliveryCounter.incrementAndGet();
0: 		if (value % 2 == 0) {
0: 			log.info("Rolling Back message: " + value + " id: " + msgId + ", content: " + msgText);
0: 			throw new RuntimeException("Dummy exception on message: " + value);
1: 		}
1: 
0: 		log.info("Received message: " + value + " id: " + msgId + ", content: " + msgText);
0: 		ackCounter.incrementAndGet();
0: 		latch.countDown();
1: 	}
1: 
0: 	public synchronized Throwable getFailure() {
0: 		return failure;
1: 	}
1: 
0: 	public synchronized void setFailure(Throwable failure) {
0: 		this.failure = failure;
1: 	}
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(RollbacksWhileConsumingLargeQueueTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:f0de24c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory answer = (ActiveMQConnectionFactory) super.createConnectionFactory();
1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:         policy.setMaximumRedeliveries(3);
1:         policy.setRedeliveryDelay(0);
1:         policy.setInitialRedeliveryDelay(0);
1:         policy.setUseExponentialBackOff(false);
1:         answer.setRedeliveryPolicy(policy);
0:         return answer;
0:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb234b3
/////////////////////////////////////////////////////////////////////////
1:     protected int numberOfMessagesOnQueue = 650;
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(RollbacksWhileConsumingLargeQueueTest.class);
1: 
0:     protected int numberOfMessagesOnQueue = 6500;
/////////////////////////////////////////////////////////////////////////
0: 				log.debug("Received: " + deliveryCounter.get()
commit:11501cb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:39b0376
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.rollback;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.springframework.jms.core.MessageCreator;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class RollbacksWhileConsumingLargeQueueTest extends EmbeddedBrokerTestSupport implements MessageListener {
1: 
0:     protected int numberOfMessagesOnQueue = 6500;
0:     private Connection connection;
0:     private DelegatingTransactionalMessageListener messageListener;
0:     private AtomicInteger counter = new AtomicInteger(0);
0:     private CountDownLatch latch;
1: 
0:     public void testConsumeOnFullQueue() throws Exception {
0:         boolean answer = latch.await(1000, TimeUnit.SECONDS);
1: 
0:         System.out.println("Received: " + counter.get() + "  message(s)");
0:         assertTrue("Did not receive the latch!", answer);
0:     }
1: 
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
0:         connection = createConnection();
0:         connection.start();
1: 
0:         // lets fill the queue up
0:         for (int i = 0; i < numberOfMessagesOnQueue; i++) {
0:             template.send(createMessageCreator(i));
0:         }
1: 
0:         latch = new CountDownLatch(numberOfMessagesOnQueue);
0:         messageListener = new DelegatingTransactionalMessageListener(this, connection, destination);
0:     }
1: 
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
0:         if (connection != null) {
0:             connection.close();
0:         }
0:         super.tearDown();
0:     }
1: 
0:     protected MessageCreator createMessageCreator(final int i) {
0:         return new MessageCreator() {
0:             public Message createMessage(Session session) throws JMSException {
0:                 TextMessage answer = session.createTextMessage("Message: " + i);
0:                 answer.setIntProperty("Counter", i);
0:                 return answer;
0:             }
0:         };
0:     }
1: 
0:     public void onMessage(Message message) {
0:         int value = counter.incrementAndGet();
0:         if (value % 10 == 0) {
0:             throw new RuntimeException("Dummy exception on message: " + value);
0:         }
1: 
0:         log.info("Received message: " + value + " content: " + message);
1: 
0:         latch.countDown();
0:     }
0: }
============================================================================