1:2dd1335: /**
1:2dd1335:  *
1:2dd1335:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2dd1335:  * contributor license agreements.  See the NOTICE file distributed with
1:2dd1335:  * this work for additional information regarding copyright ownership.
1:2dd1335:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2dd1335:  * (the "License"); you may not use this file except in compliance with
1:2dd1335:  * the License.  You may obtain a copy of the License at
1:2dd1335:  *
1:2dd1335:  * http://www.apache.org/licenses/LICENSE-2.0
1:2dd1335:  *
1:2dd1335:  * Unless required by applicable law or agreed to in writing, software
1:2dd1335:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2dd1335:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2dd1335:  * See the License for the specific language governing permissions and
1:2dd1335:  * limitations under the License.
1:2dd1335:  */
1:2dd1335: 
1:2dd1335: package org.apache.activemq.openwire.v10;
1:2dd1335: 
1:2dd1335: import java.io.DataInput;
1:2dd1335: import java.io.DataOutput;
1:2dd1335: import java.io.IOException;
1:2dd1335: 
1:2dd1335: import org.apache.activemq.openwire.*;
1:2dd1335: import org.apache.activemq.command.*;
1:2dd1335: 
1:2dd1335: 
1:2dd1335: 
1:2dd1335: /**
1:2dd1335:  * Marshalling code for Open Wire Format for IntegerResponseMarshaller
1:2dd1335:  *
1:2dd1335:  *
1:2dd1335:  * NOTE!: This file is auto generated - do not modify!
1:2dd1335:  *        if you need to make a change, please see the modify the groovy scripts in the
1:2dd1335:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:2dd1335:  *        this file.
1:2dd1335:  *
1:2dd1335:  * 
1:2dd1335:  */
1:2dd1335: public class IntegerResponseMarshaller extends ResponseMarshaller {
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Return the type of Data Structure we marshal
1:2dd1335:      * @return short representation of the type data structure
1:2dd1335:      */
1:2dd1335:     public byte getDataStructureType() {
1:2dd1335:         return IntegerResponse.DATA_STRUCTURE_TYPE;
1:2dd1335:     }
1:2dd1335:     
1:2dd1335:     /**
1:2dd1335:      * @return a new object instance
1:2dd1335:      */
1:2dd1335:     public DataStructure createObject() {
1:2dd1335:         return new IntegerResponse();
1:2dd1335:     }
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Un-marshal an object instance from the data input stream
1:2dd1335:      *
1:2dd1335:      * @param o the object to un-marshal
1:2dd1335:      * @param dataIn the data input stream to build the object from
1:2dd1335:      * @throws IOException
1:2dd1335:      */
1:2dd1335:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:2dd1335:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:2dd1335: 
1:2dd1335:         IntegerResponse info = (IntegerResponse)o;
1:2dd1335:         info.setResult(dataIn.readInt());
1:2dd1335: 
1:2dd1335:     }
1:2dd1335: 
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Write the booleans that this object uses to a BooleanStream
1:2dd1335:      */
1:2dd1335:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:2dd1335: 
1:2dd1335:         IntegerResponse info = (IntegerResponse)o;
1:2dd1335: 
1:2dd1335:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:2dd1335: 
1:2dd1335:         return rc + 4;
1:2dd1335:     }
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Write a object instance to data output stream
1:2dd1335:      *
1:2dd1335:      * @param o the instance to be marshaled
1:2dd1335:      * @param dataOut the output stream
1:2dd1335:      * @throws IOException thrown if an error occurs
1:2dd1335:      */
1:2dd1335:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:2dd1335:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:2dd1335: 
1:2dd1335:         IntegerResponse info = (IntegerResponse)o;
1:2dd1335:         dataOut.writeInt(info.getResult());
1:2dd1335: 
1:2dd1335:     }
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Un-marshal an object instance from the data input stream
1:2dd1335:      *
1:2dd1335:      * @param o the object to un-marshal
1:2dd1335:      * @param dataIn the data input stream to build the object from
1:2dd1335:      * @throws IOException
1:2dd1335:      */
1:2dd1335:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:2dd1335:         super.looseUnmarshal(wireFormat, o, dataIn);
1:2dd1335: 
1:2dd1335:         IntegerResponse info = (IntegerResponse)o;
1:2dd1335:         info.setResult(dataIn.readInt());
1:2dd1335: 
1:2dd1335:     }
1:2dd1335: 
1:2dd1335: 
1:2dd1335:     /**
1:2dd1335:      * Write the booleans that this object uses to a BooleanStream
1:2dd1335:      */
1:2dd1335:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:2dd1335: 
1:2dd1335:         IntegerResponse info = (IntegerResponse)o;
1:2dd1335: 
1:2dd1335:         super.looseMarshal(wireFormat, o, dataOut);
1:2dd1335:         dataOut.writeInt(info.getResult());
1:2dd1335: 
1:2dd1335:     }
1:2dd1335: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2dd1335
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v10;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for IntegerResponseMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
1:  * 
1:  */
1: public class IntegerResponseMarshaller extends ResponseMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return IntegerResponse.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new IntegerResponse();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         IntegerResponse info = (IntegerResponse)o;
1:         info.setResult(dataIn.readInt());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         IntegerResponse info = (IntegerResponse)o;
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1: 
1:         return rc + 4;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         IntegerResponse info = (IntegerResponse)o;
1:         dataOut.writeInt(info.getResult());
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         IntegerResponse info = (IntegerResponse)o;
1:         info.setResult(dataIn.readInt());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1: 
1:         IntegerResponse info = (IntegerResponse)o;
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         dataOut.writeInt(info.getResult());
1: 
1:     }
1: }
============================================================================