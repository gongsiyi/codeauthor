1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
13:40a7d3b: 
1:40a7d3b: import java.lang.reflect.Method;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.endpoint.MessageEndpoint;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:40a7d3b: 
2:40a7d3b: /**
1:40a7d3b:  * @author <a href="mailto:michael.gaffney@panacya.com">Michael Gaffney </a>
1:40a7d3b:  */
1:40a7d3b: public class MessageEndpointProxy implements MessageListener, MessageEndpoint {
1:540dd5c: 
1:40a7d3b:     private static final MessageEndpointState ALIVE = new MessageEndpointAlive();
1:40a7d3b:     private static final MessageEndpointState DEAD = new MessageEndpointDead();
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MessageEndpointProxy.class);
1:540dd5c: 
1:540dd5c:     private static int proxyCount;
1:40a7d3b:     private final int proxyID;
1:540dd5c: 
1:202b3ef:     private final MessageEndpoint endpoint;
1:202b3ef:     private final MessageListener messageListener;
1:40a7d3b:     private MessageEndpointState state = ALIVE;
1:40a7d3b: 
1:540dd5c:     public MessageEndpointProxy(MessageEndpoint endpoint) {
1:40a7d3b:         if (!(endpoint instanceof MessageListener)) {
1:540dd5c:             throw new IllegalArgumentException("MessageEndpoint is not a MessageListener");
1:540dd5c:         }
1:540dd5c:         messageListener = (MessageListener)endpoint;
1:40a7d3b:         proxyID = getID();
1:40a7d3b:         this.endpoint = endpoint;
11:40a7d3b:     }
1:40a7d3b: 
1:540dd5c:     private static int getID() {
1:540dd5c:         return ++proxyCount;
1:540dd5c:     }
1:540dd5c: 
1:40a7d3b:     public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:58e5b9a:         LOG.trace("Invoking MessageEndpoint.beforeDelivery()");
1:40a7d3b:         state.beforeDelivery(this, method);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void onMessage(Message message) {
1:58e5b9a:         LOG.trace("Invoking MessageEndpoint.onMethod()");
1:40a7d3b:         state.onMessage(this, message);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void afterDelivery() throws ResourceException {
1:58e5b9a:         LOG.trace("Invoking MessageEndpoint.afterDelivery()");
1:40a7d3b:         state.afterDelivery(this);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void release() {
1:58e5b9a:         LOG.trace("Invoking MessageEndpoint.release()");
1:40a7d3b:         state.release(this);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public String toString() {
1:540dd5c:         return "MessageEndpointProxy{ " + "proxyID: " + proxyID + ", endpoint: " + endpoint + " }";
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     private abstract static class MessageEndpointState {
1:40a7d3b: 
2:40a7d3b:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
1:40a7d3b:             throw new IllegalStateException();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:40a7d3b:             throw new IllegalStateException();
1:40a7d3b:         }
1:40a7d3b: 
2:40a7d3b:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:40a7d3b:             throw new IllegalStateException();
1:40a7d3b:         }
1:40a7d3b: 
2:40a7d3b:         public void release(MessageEndpointProxy proxy) {
1:40a7d3b:             throw new IllegalStateException();
1:40a7d3b:         }
1:540dd5c: 
1:40a7d3b:         protected final void transition(MessageEndpointProxy proxy, MessageEndpointState nextState) {
1:40a7d3b:             proxy.state = nextState;
1:40a7d3b:             nextState.enter(proxy);
1:40a7d3b:         }
1:540dd5c: 
1:540dd5c:         protected void enter(MessageEndpointProxy proxy) {
1:540dd5c:         }
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     private static class MessageEndpointAlive extends MessageEndpointState {
1:40a7d3b: 
1:540dd5c:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
3:40a7d3b:             try {
1:40a7d3b:                 proxy.endpoint.beforeDelivery(method);
1:40a7d3b:             } catch (NoSuchMethodException e) {
1:540dd5c:                 transition(proxy, DEAD);
3:40a7d3b:                 throw e;
2:40a7d3b:             } catch (ResourceException e) {
1:540dd5c:                 transition(proxy, DEAD);
1:40a7d3b:                 throw e;
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:202b3ef:             proxy.messageListener.onMessage(message);
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:40a7d3b:             try {
2:40a7d3b:                 proxy.endpoint.afterDelivery();
1:40a7d3b:             } catch (ResourceException e) {
1:540dd5c:                 transition(proxy, DEAD);
1:40a7d3b:                 throw e;
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void release(MessageEndpointProxy proxy) {
6:40a7d3b:             transition(proxy, DEAD);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private static class MessageEndpointDead extends MessageEndpointState {
1:40a7d3b: 
2:40a7d3b:         protected void enter(MessageEndpointProxy proxy) {
1:40a7d3b:             proxy.endpoint.release();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
1:40a7d3b:             throw new InvalidMessageEndpointException();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:40a7d3b:             throw new InvalidMessageEndpointException();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:40a7d3b:             throw new InvalidMessageEndpointException();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void release(MessageEndpointProxy proxy) {
1:40a7d3b:             throw new InvalidMessageEndpointException();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageEndpointProxy.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:58e5b9a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MessageEndpointProxy.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.trace("Invoking MessageEndpoint.beforeDelivery()");
1:         LOG.trace("Invoking MessageEndpoint.onMethod()");
1:         LOG.trace("Invoking MessageEndpoint.afterDelivery()");
1:         LOG.trace("Invoking MessageEndpoint.release()");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private static int proxyCount;
1: 
1:     public MessageEndpointProxy(MessageEndpoint endpoint) {
1:             throw new IllegalArgumentException("MessageEndpoint is not a MessageListener");
1:         }
1:         messageListener = (MessageListener)endpoint;
1:     private static int getID() {
1:         return ++proxyCount;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return "MessageEndpointProxy{ " + "proxyID: " + proxyID + ", endpoint: " + endpoint + " }";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         protected void enter(MessageEndpointProxy proxy) {
1:         }
1: 
1:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
1:                 transition(proxy, DEAD);
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 transition(proxy, DEAD);
1:             }
1:             transition(proxy, DEAD);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:202b3ef
/////////////////////////////////////////////////////////////////////////
1:     private final MessageEndpoint endpoint;
1:     private final MessageListener messageListener;
/////////////////////////////////////////////////////////////////////////
0:         messageListener = (MessageListener) endpoint;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             proxy.messageListener.onMessage(message);
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Michael Gaffney
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.lang.reflect.Method;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.endpoint.MessageEndpoint;
1: 
1: /**
1:  * @author <a href="mailto:michael.gaffney@panacya.com">Michael Gaffney </a>
1:  */
1: public class MessageEndpointProxy implements MessageListener, MessageEndpoint {
1:     
1:     private static final MessageEndpointState ALIVE = new MessageEndpointAlive();
0:     private static final MessageEndpointState GOING_TO_DIE = new MessageEndpointInTheElectricChair();
1:     private static final MessageEndpointState DEAD = new MessageEndpointDead();
1:     
1:     
0:     private static int proxyCount = 0;    
1:     private final int proxyID;
1:     
0:     private MessageEndpoint endpoint;    
1:     private MessageEndpointState state = ALIVE;
1: 
0:     private static int getID() {
0:         return ++proxyCount;
1:     }       
1:     
0:     public MessageEndpointProxy(MessageEndpoint endpoint) {        
1:         if (!(endpoint instanceof MessageListener)) {
0:             throw new IllegalArgumentException("MessageEndpoint is not a MessageListener");            
1:         }        
1:         proxyID = getID();
1:         this.endpoint = endpoint;
1:     }
1: 
1:     public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException {
1:         state.beforeDelivery(this, method);
1:     }
1: 
1:     public void onMessage(Message message) {
0: //        log.warn("Delivery Count: " + getNextDeliveryCount() );
1:         state.onMessage(this, message);
1:     }
1: 
1:     public void afterDelivery() throws ResourceException {
1:         state.afterDelivery(this);
1:     }
1: 
1:     public void release() {
1:         state.release(this);
1:     }
1: 
1:     public String toString() {
0:         return "MessageEndpointProxy{ " +
0:                 "proxyID: " + proxyID +
0:                 ", endpoint: " + endpoint +
0:                 " }";
1:     }
1:     
1:     private abstract static class MessageEndpointState {
1: 
1:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
1:             throw new IllegalStateException();
1:         }
1: 
1:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:             throw new IllegalStateException();
1:         }
1: 
1:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:             throw new IllegalStateException();
1:         }
1: 
1:         public void release(MessageEndpointProxy proxy) {
1:             throw new IllegalStateException();
1:         }
1:         
1:         protected final void transition(MessageEndpointProxy proxy, MessageEndpointState nextState) {
1:             proxy.state = nextState;
1:             nextState.enter(proxy);
1:         }
1:         
1:         protected void enter(MessageEndpointProxy proxy) {            
1:         }        
1:     }
1:     
1:     private static class MessageEndpointAlive extends MessageEndpointState {
1: 
1:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {            
1:             try {
1:                 proxy.endpoint.beforeDelivery(method);
1:             } catch (NoSuchMethodException e) {
1:                 transition(proxy, DEAD);
1:                 throw e;
1:             } catch (ResourceException e) {
1:                 transition(proxy, DEAD);                
1:                 throw e;
1:             }            
1:         }
1: 
1:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:             try {
0:                 ((MessageListener) proxy.endpoint).onMessage(message);
0:             } catch (RuntimeException e) {
0:                 transition(proxy, GOING_TO_DIE);
1:                 throw e;
1:             }            
1:         }
1: 
1:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:             try {
1:                 proxy.endpoint.afterDelivery();
1:             } catch (ResourceException e) {
1:                 transition(proxy, DEAD);                
1:                 throw e;
1:             }                        
1:         }
1: 
1:         public void release(MessageEndpointProxy proxy) {
1:             transition(proxy, DEAD);                
1:         }
1:     }
1: 
0:     private static class MessageEndpointInTheElectricChair extends MessageEndpointState {
1: 
1:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:             try {
1:                 proxy.endpoint.afterDelivery();
1:             } catch (ResourceException e) {
1:                 throw e;
0:             } finally {
1:                 transition(proxy, DEAD);                
1:             }
1:         }
1: 
1:         public void release(MessageEndpointProxy proxy) {
1:             transition(proxy, DEAD);
1:         }
1:     }
1: 
1:     private static class MessageEndpointDead extends MessageEndpointState {
1: 
1:         protected void enter(MessageEndpointProxy proxy) {
1:             proxy.endpoint.release();
0:             proxy.endpoint = null;
1:         }
1: 
1:         public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException {
1:             throw new InvalidMessageEndpointException();
1:         }
1: 
1:         public void onMessage(MessageEndpointProxy proxy, Message message) {
1:             throw new InvalidMessageEndpointException();
1:         }
1: 
1:         public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException {
1:             throw new InvalidMessageEndpointException();
1:         }
1: 
1:         public void release(MessageEndpointProxy proxy) {
1:             throw new InvalidMessageEndpointException();
1:         }
1:     }
1: }
============================================================================