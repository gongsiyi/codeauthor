1:187f884: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:187f884:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:187f884:  * Unless required by applicable law or agreed to in writing, software
1:187f884:  * distributed under the License is distributed on an "AS IS" BASIS,
1:187f884:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:187f884:  * See the License for the specific language governing permissions and
1:187f884:  * limitations under the License.
1:187f884:  */
1:187f884: package org.apache.activemq.transport.udp;
2:187f884: 
1:187f884: import java.nio.ByteBuffer;
1:187f884: 
1:187f884: /**
1:61b2f6b:  * A simple implementation of {@link ByteBufferPool} which does no pooling and just
1:187f884:  * creates new buffers each time
1:187f884:  */
1:187f884: public class SimpleBufferPool implements ByteBufferPool {
1:187f884: 
1:187f884:     private int defaultSize;
1:187f884:     private boolean useDirect;
1:187f884: 
1:187f884:     public SimpleBufferPool() {
1:187f884:         this(false);
2:187f884:     }
1:187f884: 
1:187f884:     public SimpleBufferPool(boolean useDirect) {
1:187f884:         this.useDirect = useDirect;
1:187f884:     }
1:187f884: 
1:61b2f6b:     @Override
1:187f884:     public synchronized ByteBuffer borrowBuffer() {
1:187f884:         return createBuffer();
1:187f884:     }
1:187f884: 
1:61b2f6b:     @Override
1:187f884:     public void returnBuffer(ByteBuffer buffer) {
1:187f884:     }
1:187f884: 
1:61b2f6b:     @Override
1:187f884:     public void setDefaultSize(int defaultSize) {
1:187f884:         this.defaultSize = defaultSize;
1:187f884:     }
1:187f884: 
1:187f884:     public boolean isUseDirect() {
1:187f884:         return useDirect;
1:187f884:     }
1:187f884: 
1:187f884:     /**
1:187f884:      * Sets whether direct buffers are used or not
1:187f884:      */
1:187f884:     public void setUseDirect(boolean useDirect) {
1:187f884:         this.useDirect = useDirect;
1:187f884:     }
1:187f884: 
1:61b2f6b:     @Override
1:187f884:     public void start() throws Exception {
1:187f884:     }
1:187f884: 
1:61b2f6b:     @Override
1:187f884:     public void stop() throws Exception {
1:187f884:     }
1:187f884: 
1:187f884:     protected ByteBuffer createBuffer() {
1:187f884:         if (useDirect) {
1:187f884:             return ByteBuffer.allocateDirect(defaultSize);
1:74a7a8b:         } else {
1:187f884:             return ByteBuffer.allocate(defaultSize);
1:187f884:         }
1:187f884:     }
1:187f884: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
1:  * A simple implementation of {@link ByteBufferPool} which does no pooling and just
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:187f884
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: import java.nio.ByteBuffer;
1: 
1: /**
0:  * A simple implementation of {@link BufferPool} which does no pooling and just
1:  * creates new buffers each time
1:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleBufferPool implements ByteBufferPool {
1: 
1:     private int defaultSize;
1:     private boolean useDirect;
1: 
1:     public SimpleBufferPool() {
1:         this(false);
1:     }
1: 
1:     public SimpleBufferPool(boolean useDirect) {
1:         this.useDirect = useDirect;
1:     }
1: 
1:     public synchronized ByteBuffer borrowBuffer() {
1:         return createBuffer();
1:     }
1: 
1:     public void returnBuffer(ByteBuffer buffer) {
1:     }
1: 
1:     public void setDefaultSize(int defaultSize) {
1:         this.defaultSize = defaultSize;
1:     }
1: 
1:     public boolean isUseDirect() {
1:         return useDirect;
1:     }
1: 
1:     /**
1:      * Sets whether direct buffers are used or not
1:      */
1:     public void setUseDirect(boolean useDirect) {
1:         this.useDirect = useDirect;
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1:     protected ByteBuffer createBuffer() {
1:         if (useDirect) {
1:             return ByteBuffer.allocateDirect(defaultSize);
1:         }
0:         else {
1:             return ByteBuffer.allocate(defaultSize);
1:         }
1:     }
1: 
1: }
============================================================================