1:acab282: /**
1:acab282:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:acab282:  * contributor license agreements.  See the NOTICE file distributed with
1:acab282:  * this work for additional information regarding copyright ownership.
1:acab282:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:acab282:  * (the "License"); you may not use this file except in compliance with
1:acab282:  * the License.  You may obtain a copy of the License at
1:acab282:  *
1:acab282:  *      http://www.apache.org/licenses/LICENSE-2.0
1:acab282:  *
1:acab282:  * Unless required by applicable law or agreed to in writing, software
1:acab282:  * distributed under the License is distributed on an "AS IS" BASIS,
1:acab282:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:acab282:  * See the License for the specific language governing permissions and
1:acab282:  * limitations under the License.
1:acab282:  */
1:acab282: package org.apache.activemq.broker.jmx;
1:acab282: 
1:acab282: import org.apache.activemq.ActiveMQConnectionFactory;
1:acab282: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:acab282: import org.apache.activemq.broker.BrokerService;
1:acab282: import org.apache.activemq.broker.region.RegionBroker;
1:acab282: import org.apache.activemq.command.ActiveMQQueue;
1:acab282: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:acab282: import org.apache.commons.io.FileUtils;
1:acab282: import org.slf4j.Logger;
1:acab282: import org.slf4j.LoggerFactory;
1:acab282: 
1:acab282: import javax.jms.Connection;
1:acab282: import javax.jms.ConnectionFactory;
1:acab282: import javax.jms.Message;
1:acab282: import javax.jms.MessageProducer;
1:acab282: import javax.jms.Session;
1:acab282: import javax.management.MBeanServer;
1:acab282: import javax.management.MBeanServerInvocationHandler;
1:acab282: import javax.management.MalformedObjectNameException;
1:acab282: import javax.management.ObjectName;
1:acab282: import java.util.concurrent.ExecutorService;
1:acab282: import java.util.concurrent.Executors;
1:acab282: import java.util.concurrent.TimeUnit;
1:acab282: 
1:acab282: public class ConcurrentMoveTest extends EmbeddedBrokerTestSupport {
1:acab282:     private static final Logger LOG = LoggerFactory.getLogger(ConcurrentMoveTest.class);
1:acab282: 
1:acab282:     protected MBeanServer mbeanServer;
1:acab282:     protected String domain = "org.apache.activemq";
1:acab282: 
1:acab282:     protected Connection connection;
1:acab282:     protected boolean transacted;
1:acab282:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:acab282:     protected int messageCount = 2000;
1:acab282: 
1:acab282: 
1:acab282:     public void testConcurrentMove() throws Exception {
1:acab282: 
1:acab282:         // Send some messages
1:acab282:         connection = connectionFactory.createConnection();
1:acab282:         connection.start();
1:acab282:         Session session = connection.createSession(transacted, authMode);
1:acab282:         destination = createDestination();
1:acab282:         MessageProducer producer = session.createProducer(destination);
1:acab282:         for (int i = 0; i < messageCount; i++) {
1:acab282:             Message message = session.createTextMessage("Message: " + i);
1:acab282:             producer.send(message);
1:acab282:         }
1:acab282: 
1:acab282:         long usageBeforMove = broker.getPersistenceAdapter().size();
1:acab282:         LOG.info("Store usage:"  + usageBeforMove);
1:acab282: 
1:acab282:         // Now get the QueueViewMBean and purge
1:acab282:         String objectNameStr = broker.getBrokerObjectName().toString();
1:acab282:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:acab282:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:acab282:         final QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:acab282: 
1:acab282:         final ActiveMQQueue to = new ActiveMQQueue("TO");
1:acab282:         ((RegionBroker)broker.getRegionBroker()).addDestination(broker.getAdminConnectionContext(), to, false);
1:acab282: 
1:acab282:         ExecutorService executorService = Executors.newCachedThreadPool();
1:acab282:         for (int i=0; i<50; i++) {
1:acab282:             executorService.execute(new Runnable() {
1:acab282:                 @Override
1:acab282:                 public void run() {
1:acab282:                     try {
1:acab282:                         proxy.moveMatchingMessagesTo(null, to.getPhysicalName());
1:acab282:                     } catch (Exception e) {
1:acab282:                         e.printStackTrace();
1:acab282:                     }
1:acab282:                 }
1:acab282:             });
1:acab282:         }
1:acab282: 
1:acab282:         executorService.shutdown();
1:acab282:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1:acab282: 
1:acab282:         long count = proxy.getQueueSize();
1:acab282:         assertEquals("Queue size", count, 0);
1:acab282:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1:acab282: 
1:acab282:         objectNameStr = broker.getBrokerObjectName().toString();
1:acab282:         objectNameStr += ",destinationType=Queue,destinationName="+to.getQueueName();
1:acab282:         queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:acab282:         QueueViewMBean toProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1:acab282: 
1:acab282:         count = toProxy.getQueueSize();
1:acab282:         assertEquals("Queue size", count, messageCount);
1:acab282: 
1:acab282:         long usageAfterMove = broker.getPersistenceAdapter().size();
1:acab282:         LOG.info("Store usage, before: " + usageBeforMove + ", after:"  + usageAfterMove);
1:acab282:         LOG.info("Store size increase:" + FileUtils.byteCountToDisplaySize(usageAfterMove - usageBeforMove));
1:acab282: 
1:acab282:         assertTrue("Usage not more than doubled", usageAfterMove < (usageBeforMove * 3));
1:acab282: 
1:acab282:         producer.close();
1:acab282:     }
1:acab282: 
1:acab282: 
1:acab282:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:acab282:         ObjectName objectName = new ObjectName(name);
1:acab282:         if (mbeanServer.isRegistered(objectName)) {
1:acab282:             LOG.info("Bean Registered: " + objectName);
1:acab282:         } else {
1:acab282:             fail("Could not find MBean!: " + objectName);
1:acab282:         }
1:acab282:         return objectName;
1:acab282:     }
1:acab282: 
1:acab282:     protected void setUp() throws Exception {
1:acab282:         bindAddress = "tcp://localhost:0";
1:acab282:         useTopic = false;
1:acab282:         super.setUp();
1:acab282:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:acab282:     }
1:acab282: 
1:acab282:     protected void tearDown() throws Exception {
1:acab282:         if (connection != null) {
1:acab282:             connection.close();
1:acab282:             connection = null;
1:acab282:         }
1:acab282:         super.tearDown();
1:acab282:     }
1:acab282: 
1:acab282:     protected BrokerService createBroker() throws Exception {
1:acab282:         BrokerService answer = new BrokerService();
1:acab282:         answer.setUseJmx(true);
1:acab282:         answer.setEnableStatistics(true);
1:acab282:         answer.addConnector(bindAddress);
1:acab282:         ((KahaDBPersistenceAdapter)answer.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:acab282:         answer.deleteAllMessages();
1:acab282:         return answer;
1:acab282:     }
1:acab282: 
1:acab282:     @Override
1:acab282:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:acab282:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:acab282:     }
1:acab282: 
1:acab282:     /**
1:acab282:      * Returns the name of the destination used in this test case
1:acab282:      */
1:acab282:     protected String getDestinationString() {
1:acab282:         return getClass().getName() + "." + getName(true);
1:acab282:     }
1:acab282: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:acab282
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.commons.io.FileUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: public class ConcurrentMoveTest extends EmbeddedBrokerTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(ConcurrentMoveTest.class);
1: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:     protected int messageCount = 2000;
1: 
1: 
1:     public void testConcurrentMove() throws Exception {
1: 
1:         // Send some messages
1:         connection = connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         destination = createDestination();
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage("Message: " + i);
1:             producer.send(message);
1:         }
1: 
1:         long usageBeforMove = broker.getPersistenceAdapter().size();
1:         LOG.info("Store usage:"  + usageBeforMove);
1: 
1:         // Now get the QueueViewMBean and purge
1:         String objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName="+getDestinationString();
1:         ObjectName queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:         final QueueViewMBean proxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         final ActiveMQQueue to = new ActiveMQQueue("TO");
1:         ((RegionBroker)broker.getRegionBroker()).addDestination(broker.getAdminConnectionContext(), to, false);
1: 
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         for (int i=0; i<50; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         proxy.moveMatchingMessagesTo(null, to.getPhysicalName());
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(5, TimeUnit.MINUTES);
1: 
1:         long count = proxy.getQueueSize();
1:         assertEquals("Queue size", count, 0);
1:         assertEquals("Browse size", proxy.browseMessages().size(), 0);
1: 
1:         objectNameStr = broker.getBrokerObjectName().toString();
1:         objectNameStr += ",destinationType=Queue,destinationName="+to.getQueueName();
1:         queueViewMBeanName = assertRegisteredObjectName(objectNameStr);
1:         QueueViewMBean toProxy = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, queueViewMBeanName, QueueViewMBean.class, true);
1: 
1:         count = toProxy.getQueueSize();
1:         assertEquals("Queue size", count, messageCount);
1: 
1:         long usageAfterMove = broker.getPersistenceAdapter().size();
1:         LOG.info("Store usage, before: " + usageBeforMove + ", after:"  + usageAfterMove);
1:         LOG.info("Store size increase:" + FileUtils.byteCountToDisplaySize(usageAfterMove - usageBeforMove));
1: 
1:         assertTrue("Usage not more than doubled", usageAfterMove < (usageBeforMove * 3));
1: 
1:         producer.close();
1:     }
1: 
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             LOG.info("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
1:         answer.setEnableStatistics(true);
1:         answer.addConnector(bindAddress);
1:         ((KahaDBPersistenceAdapter)answer.getPersistenceAdapter()).setConcurrentStoreAndDispatchQueues(false);
1:         answer.deleteAllMessages();
1:         return answer;
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:     /**
1:      * Returns the name of the destination used in this test case
1:      */
1:     protected String getDestinationString() {
1:         return getClass().getName() + "." + getName(true);
1:     }
1: }
============================================================================