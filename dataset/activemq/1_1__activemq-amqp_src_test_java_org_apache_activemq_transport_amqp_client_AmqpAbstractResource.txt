1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client;
6:72839b7: 
1:72839b7: import java.io.IOException;
1:72839b7: 
1:72839b7: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
1:72839b7: import org.apache.qpid.proton.engine.Endpoint;
1:72839b7: import org.apache.qpid.proton.engine.EndpointState;
1:72839b7: import org.slf4j.Logger;
1:72839b7: import org.slf4j.LoggerFactory;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Abstract base for all AmqpResource implementations to extend.
1:72839b7:  *
1:72839b7:  * This abstract class wraps up the basic state management bits so that the concrete
1:72839b7:  * object don't have to reproduce it.  Provides hooks for the subclasses to initialize
1:72839b7:  * and shutdown.
1:72839b7:  */
1:72839b7: public abstract class AmqpAbstractResource<E extends Endpoint> implements AmqpResource {
1:72839b7: 
1:72839b7:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAbstractResource.class);
1:72839b7: 
1:72839b7:     protected AsyncResult openRequest;
1:72839b7:     protected AsyncResult closeRequest;
1:72839b7: 
1:1a0f73e:     private AmqpValidator amqpStateInspector;
1:72839b7: 
1:72839b7:     private E endpoint;
1:72839b7: 
4:72839b7:     @Override
1:72839b7:     public void open(AsyncResult request) {
1:72839b7:         this.openRequest = request;
1:72839b7:         doOpen();
1:72839b7:         getEndpoint().setContext(this);
9:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public boolean isOpen() {
1:72839b7:         return getEndpoint().getRemoteState() == EndpointState.ACTIVE;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void opened() {
1:72839b7:         if (this.openRequest != null) {
1:72839b7:             this.openRequest.onSuccess();
1:72839b7:             this.openRequest = null;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:934ad44:     public void detach(AsyncResult request) {
1:934ad44:         // If already closed signal success or else the caller might never get notified.
1:934ad44:         if (getEndpoint().getLocalState() == EndpointState.CLOSED ||
1:934ad44:             getEndpoint().getRemoteState() == EndpointState.CLOSED) {
1:934ad44: 
1:934ad44:             if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
1:934ad44:                 doDetach();
1:934ad44:                 getEndpoint().free();
1:934ad44:             }
1:934ad44: 
1:934ad44:             request.onSuccess();
1:934ad44:         } else {
1:934ad44:             this.closeRequest = request;
1:934ad44:             doDetach();
1:934ad44:         }
1:934ad44:     }
1:934ad44: 
1:934ad44:     @Override
1:72839b7:     public void close(AsyncResult request) {
1:72839b7:         // If already closed signal success or else the caller might never get notified.
1:72839b7:         if (getEndpoint().getLocalState() == EndpointState.CLOSED ||
1:72839b7:             getEndpoint().getRemoteState() == EndpointState.CLOSED) {
1:72839b7: 
2:72839b7:             if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
1:934ad44:                 doClose();
1:934ad44:                 getEndpoint().free();
1:72839b7:             }
1:72839b7: 
1:72839b7:             request.onSuccess();
1:934ad44:         } else {
1:934ad44:             this.closeRequest = request;
1:934ad44:             doClose();
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public boolean isClosed() {
1:72839b7:         return getEndpoint().getLocalState() == EndpointState.CLOSED;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void closed() {
1:72839b7:         getEndpoint().close();
2:72839b7:         getEndpoint().free();
1:72839b7: 
1:72839b7:         if (this.closeRequest != null) {
1:72839b7:             this.closeRequest.onSuccess();
1:72839b7:             this.closeRequest = null;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void failed() {
1:72839b7:         failed(new Exception("Remote request failed."));
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void failed(Exception cause) {
1:72839b7:         if (openRequest != null) {
1:72839b7:             if (endpoint != null) {
1:72839b7:                 // TODO: if this is a producer/consumer link then we may only be detached,
1:72839b7:                 // rather than fully closed, and should respond appropriately.
1:72839b7:                 endpoint.close();
1:72839b7:             }
1:72839b7:             openRequest.onFailure(cause);
1:72839b7:             openRequest = null;
1:72839b7:         }
1:72839b7: 
1:72839b7:         if (closeRequest != null) {
1:72839b7:             closeRequest.onFailure(cause);
1:72839b7:             closeRequest = null;
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void remotelyClosed(AmqpConnection connection) {
1:d9e22a9:         Exception error = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
1:72839b7: 
1:72839b7:         if (endpoint != null) {
1:72839b7:             // TODO: if this is a producer/consumer link then we may only be detached,
1:72839b7:             // rather than fully closed, and should respond appropriately.
1:72839b7:             endpoint.close();
1:72839b7:         }
1:72839b7: 
1:72839b7:         LOG.info("Resource {} was remotely closed", this);
1:72839b7: 
1:72839b7:         connection.fireClientException(error);
1:72839b7:     }
1:72839b7: 
1:8448cf1:     @Override
1:8448cf1:     public void locallyClosed(AmqpConnection connection, Exception error) {
1:8448cf1:         if (endpoint != null) {
1:8448cf1:             // TODO: if this is a producer/consumer link then we may only be detached,
1:8448cf1:             // rather than fully closed, and should respond appropriately.
1:8448cf1:             endpoint.close();
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         LOG.info("Resource {} was locally closed", this);
1:8448cf1: 
1:8448cf1:         connection.fireClientException(error);
1:8448cf1:     }
1:8448cf1: 
1:72839b7:     public E getEndpoint() {
1:72839b7:         return this.endpoint;
1:72839b7:     }
1:72839b7: 
1:72839b7:     public void setEndpoint(E endpoint) {
1:72839b7:         this.endpoint = endpoint;
1:72839b7:     }
1:72839b7: 
1:1a0f73e:     public AmqpValidator getStateInspector() {
1:72839b7:         return amqpStateInspector;
1:72839b7:     }
1:72839b7: 
1:1a0f73e:     public void setStateInspector(AmqpValidator stateInspector) {
1:72839b7:         if (stateInspector == null) {
1:1a0f73e:             stateInspector = new AmqpValidator();
1:72839b7:         }
1:72839b7: 
1:72839b7:         this.amqpStateInspector = stateInspector;
1:72839b7:     }
1:72839b7: 
1:72839b7:     public EndpointState getLocalState() {
1:72839b7:         if (getEndpoint() == null) {
1:72839b7:             return EndpointState.UNINITIALIZED;
1:72839b7:         }
1:72839b7:         return getEndpoint().getLocalState();
1:72839b7:     }
1:72839b7: 
1:72839b7:     public EndpointState getRemoteState() {
1:72839b7:         if (getEndpoint() == null) {
1:72839b7:             return EndpointState.UNINITIALIZED;
1:72839b7:         }
1:72839b7:         return getEndpoint().getRemoteState();
1:72839b7:     }
1:72839b7: 
1:72839b7:     public boolean hasRemoteError() {
1:72839b7:         return getEndpoint().getRemoteCondition().getCondition() != null;
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void processRemoteOpen(AmqpConnection connection) throws IOException {
1:72839b7:         doOpenInspection();
1:72839b7:         doOpenCompletion();
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void processRemoteDetach(AmqpConnection connection) throws IOException {
1:72839b7:         doDetachedInspection();
1:72839b7:         if (isAwaitingClose()) {
1:72839b7:             LOG.debug("{} is now closed: ", this);
1:72839b7:             closed();
2:72839b7:         } else {
1:72839b7:             remotelyClosed(connection);
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void processRemoteClose(AmqpConnection connection) throws IOException {
1:72839b7:         doClosedInspection();
1:72839b7:         if (isAwaitingClose()) {
1:72839b7:             LOG.debug("{} is now closed: ", this);
1:72839b7:             closed();
1:72839b7:         } else if (isAwaitingOpen()) {
1:72839b7:             // Error on Open, create exception and signal failure.
1:72839b7:             LOG.warn("Open of {} failed: ", this);
1:72839b7:             Exception openError;
1:72839b7:             if (hasRemoteError()) {
1:d9e22a9:                 openError = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
1:72839b7:             } else {
1:72839b7:                 openError = getOpenAbortException();
1:72839b7:             }
1:72839b7: 
1:72839b7:             failed(openError);
1:72839b7:         } else {
1:72839b7:             remotelyClosed(connection);
1:72839b7:         }
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void processDeliveryUpdates(AmqpConnection connection) throws IOException {
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Override
1:72839b7:     public void processFlowUpdates(AmqpConnection connection) throws IOException {
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Perform the open operation on the managed endpoint.  A subclass may
1:72839b7:      * override this method to provide additional open actions or configuration
1:72839b7:      * updates.
1:72839b7:      */
1:72839b7:     protected void doOpen() {
1:72839b7:         getEndpoint().open();
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Perform the close operation on the managed endpoint.  A subclass may
1:72839b7:      * override this method to provide additional close actions or alter the
1:72839b7:      * standard close path such as endpoint detach etc.
1:72839b7:      */
1:72839b7:     protected void doClose() {
1:72839b7:         getEndpoint().close();
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:934ad44:      * Perform the detach operation on the managed endpoint.
1:934ad44:      *
1:934ad44:      * By default this method throws an UnsupportedOperationException, a subclass
1:934ad44:      * must implement this and do a detach if its resource supports that.
1:934ad44:      */
1:934ad44:     protected void doDetach() {
1:934ad44:         throw new UnsupportedOperationException("Endpoint cannot be detached.");
1:934ad44:     }
1:934ad44: 
1:934ad44:     /**
1:72839b7:      * Complete the open operation on the managed endpoint. A subclass may
1:72839b7:      * override this method to provide additional verification actions or configuration
1:72839b7:      * updates.
1:72839b7:      */
1:72839b7:     protected void doOpenCompletion() {
1:72839b7:         LOG.debug("{} is now open: ", this);
1:72839b7:         opened();
1:72839b7:     }
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * When aborting the open operation, and there isnt an error condition,
1:72839b7:      * provided by the peer, the returned exception will be used instead.
1:72839b7:      * A subclass may override this method to provide alternative behaviour.
1:72839b7:      */
1:72839b7:     protected Exception getOpenAbortException() {
1:72839b7:         return new IOException("Open failed unexpectedly.");
1:72839b7:     }
1:72839b7: 
1:72839b7:     protected abstract void doOpenInspection();
1:72839b7:     protected abstract void doClosedInspection();
1:72839b7: 
1:72839b7:     protected void doDetachedInspection() {}
1:72839b7: 
1:72839b7:     //----- Private implementation utility methods ---------------------------//
1:72839b7: 
1:72839b7:     private boolean isAwaitingOpen() {
1:72839b7:         return this.openRequest != null;
1:72839b7:     }
1:72839b7: 
1:72839b7:     private boolean isAwaitingClose() {
1:72839b7:         return this.closeRequest != null;
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:cec3245
/////////////////////////////////////////////////////////////////////////
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void locallyClosed(AmqpConnection connection, Exception error) {
1:         if (endpoint != null) {
1:             // TODO: if this is a producer/consumer link then we may only be detached,
1:             // rather than fully closed, and should respond appropriately.
1:             endpoint.close();
1:         }
1: 
1:         LOG.info("Resource {} was locally closed", this);
1: 
1:         connection.fireClientException(error);
1:     }
1: 
commit:d9e22a9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Exception error = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 openError = AmqpSupport.convertToException(getEndpoint().getRemoteCondition());
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
commit:1a0f73e
/////////////////////////////////////////////////////////////////////////
1:     private AmqpValidator amqpStateInspector;
/////////////////////////////////////////////////////////////////////////
1:     public AmqpValidator getStateInspector() {
1:     public void setStateInspector(AmqpValidator stateInspector) {
1:             stateInspector = new AmqpValidator();
commit:934ad44
/////////////////////////////////////////////////////////////////////////
1:     public void detach(AsyncResult request) {
1:         // If already closed signal success or else the caller might never get notified.
1:         if (getEndpoint().getLocalState() == EndpointState.CLOSED ||
1:             getEndpoint().getRemoteState() == EndpointState.CLOSED) {
1: 
1:             if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
1:                 doDetach();
1:                 getEndpoint().free();
1:             }
1: 
1:             request.onSuccess();
1:         } else {
1:             this.closeRequest = request;
1:             doDetach();
1:         }
1:     }
1: 
1:     @Override
1:                 doClose();
1:                 getEndpoint().free();
1:         } else {
1:             this.closeRequest = request;
1:             doClose();
0: //        // If already closed signal success or else the caller might never get notified.
0: //        if (getEndpoint().getLocalState() == EndpointState.CLOSED ||
0: //            getEndpoint().getRemoteState() == EndpointState.CLOSED) {
0: //
0: //            if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
0: //                // Remote already closed this resource, close locally and free.
0: //                if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
0: //                    doClose();
0: //                    getEndpoint().free();
0: //                }
0: //            }
0: //
0: //            request.onSuccess();
0: //            return;
0: //        }
0: //
0: //        this.closeRequest = request;
0: //        doClose();
/////////////////////////////////////////////////////////////////////////
1:      * Perform the detach operation on the managed endpoint.
1:      *
1:      * By default this method throws an UnsupportedOperationException, a subclass
1:      * must implement this and do a detach if its resource supports that.
1:      */
1:     protected void doDetach() {
1:         throw new UnsupportedOperationException("Endpoint cannot be detached.");
1:     }
1: 
1:     /**
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.transport.amqp.client.util.AsyncResult;
0: import org.apache.qpid.proton.amqp.Symbol;
0: import org.apache.qpid.proton.amqp.transport.AmqpError;
0: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Endpoint;
1: import org.apache.qpid.proton.engine.EndpointState;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Abstract base for all AmqpResource implementations to extend.
1:  *
1:  * This abstract class wraps up the basic state management bits so that the concrete
1:  * object don't have to reproduce it.  Provides hooks for the subclasses to initialize
1:  * and shutdown.
1:  */
1: public abstract class AmqpAbstractResource<E extends Endpoint> implements AmqpResource {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpAbstractResource.class);
1: 
1:     protected AsyncResult openRequest;
1:     protected AsyncResult closeRequest;
1: 
0:     private AmqpStateInspector amqpStateInspector = new AmqpStateInspector();
1: 
1:     private E endpoint;
1: 
1:     @Override
1:     public void open(AsyncResult request) {
1:         this.openRequest = request;
1:         doOpen();
1:         getEndpoint().setContext(this);
1:     }
1: 
1:     @Override
1:     public boolean isOpen() {
1:         return getEndpoint().getRemoteState() == EndpointState.ACTIVE;
1:     }
1: 
1:     @Override
1:     public void opened() {
1:         if (this.openRequest != null) {
1:             this.openRequest.onSuccess();
1:             this.openRequest = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void close(AsyncResult request) {
1:         // If already closed signal success or else the caller might never get notified.
1:         if (getEndpoint().getLocalState() == EndpointState.CLOSED ||
1:             getEndpoint().getRemoteState() == EndpointState.CLOSED) {
1: 
1:             if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
0:                 // Remote already closed this resource, close locally and free.
1:                 if (getEndpoint().getLocalState() != EndpointState.CLOSED) {
0:                     doClose();
1:                     getEndpoint().free();
1:                 }
1:             }
1: 
1:             request.onSuccess();
0:             return;
1:         }
1: 
0:         this.closeRequest = request;
0:         doClose();
1:     }
1: 
1:     @Override
1:     public boolean isClosed() {
1:         return getEndpoint().getLocalState() == EndpointState.CLOSED;
1:     }
1: 
1:     @Override
1:     public void closed() {
1:         getEndpoint().close();
1:         getEndpoint().free();
1: 
1:         if (this.closeRequest != null) {
1:             this.closeRequest.onSuccess();
1:             this.closeRequest = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void failed() {
1:         failed(new Exception("Remote request failed."));
1:     }
1: 
1:     @Override
1:     public void failed(Exception cause) {
1:         if (openRequest != null) {
1:             if (endpoint != null) {
1:                 // TODO: if this is a producer/consumer link then we may only be detached,
1:                 // rather than fully closed, and should respond appropriately.
1:                 endpoint.close();
1:             }
1:             openRequest.onFailure(cause);
1:             openRequest = null;
1:         }
1: 
1:         if (closeRequest != null) {
1:             closeRequest.onFailure(cause);
1:             closeRequest = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void remotelyClosed(AmqpConnection connection) {
0:         Exception error = getRemoteError();
0:         if (error == null) {
0:             error = new IOException("Remote has closed without error information");
1:         }
1: 
1:         if (endpoint != null) {
1:             // TODO: if this is a producer/consumer link then we may only be detached,
1:             // rather than fully closed, and should respond appropriately.
1:             endpoint.close();
1:         }
1: 
1:         LOG.info("Resource {} was remotely closed", this);
1: 
1:         connection.fireClientException(error);
1:     }
1: 
1:     public E getEndpoint() {
1:         return this.endpoint;
1:     }
1: 
1:     public void setEndpoint(E endpoint) {
1:         this.endpoint = endpoint;
1:     }
1: 
0:     public AmqpStateInspector getStateInspector() {
1:         return amqpStateInspector;
1:     }
1: 
0:     public void setStateInspector(AmqpStateInspector stateInspector) {
1:         if (stateInspector == null) {
0:             stateInspector = new AmqpStateInspector();
1:         }
1: 
1:         this.amqpStateInspector = stateInspector;
1:     }
1: 
1:     public EndpointState getLocalState() {
1:         if (getEndpoint() == null) {
1:             return EndpointState.UNINITIALIZED;
1:         }
1:         return getEndpoint().getLocalState();
1:     }
1: 
1:     public EndpointState getRemoteState() {
1:         if (getEndpoint() == null) {
1:             return EndpointState.UNINITIALIZED;
1:         }
1:         return getEndpoint().getRemoteState();
1:     }
1: 
1:     @Override
1:     public boolean hasRemoteError() {
1:         return getEndpoint().getRemoteCondition().getCondition() != null;
1:     }
1: 
1:     @Override
0:     public Exception getRemoteError() {
0:         String message = getRemoteErrorMessage();
0:         Exception remoteError = null;
0:         Symbol error = getEndpoint().getRemoteCondition().getCondition();
0:         if (error != null) {
0:             if (error.equals(AmqpError.UNAUTHORIZED_ACCESS)) {
0:                 remoteError = new SecurityException(message);
1:             } else {
0:                 remoteError = new Exception(message);
1:             }
1:         }
1: 
0:         return remoteError;
1:     }
1: 
1:     @Override
0:     public String getRemoteErrorMessage() {
0:         String message = "Received unkown error from remote peer";
0:         if (getEndpoint().getRemoteCondition() != null) {
0:             ErrorCondition error = getEndpoint().getRemoteCondition();
0:             if (error.getDescription() != null && !error.getDescription().isEmpty()) {
0:                 message = error.getDescription();
1:             }
1:         }
1: 
0:         return message;
1:     }
1: 
1:     @Override
1:     public void processRemoteOpen(AmqpConnection connection) throws IOException {
1:         doOpenInspection();
1:         doOpenCompletion();
1:     }
1: 
1:     @Override
1:     public void processRemoteDetach(AmqpConnection connection) throws IOException {
1:         doDetachedInspection();
1:         if (isAwaitingClose()) {
1:             LOG.debug("{} is now closed: ", this);
1:             closed();
1:         } else {
1:             remotelyClosed(connection);
1:         }
1:     }
1: 
1:     @Override
1:     public void processRemoteClose(AmqpConnection connection) throws IOException {
1:         doClosedInspection();
1:         if (isAwaitingClose()) {
1:             LOG.debug("{} is now closed: ", this);
1:             closed();
1:         } else if (isAwaitingOpen()) {
1:             // Error on Open, create exception and signal failure.
1:             LOG.warn("Open of {} failed: ", this);
1:             Exception openError;
1:             if (hasRemoteError()) {
0:                 openError = getRemoteError();
1:             } else {
1:                 openError = getOpenAbortException();
1:             }
1: 
1:             failed(openError);
1:         } else {
1:             remotelyClosed(connection);
1:         }
1:     }
1: 
1:     @Override
1:     public void processDeliveryUpdates(AmqpConnection connection) throws IOException {
1:     }
1: 
1:     @Override
1:     public void processFlowUpdates(AmqpConnection connection) throws IOException {
1:     }
1: 
1:     /**
1:      * Perform the open operation on the managed endpoint.  A subclass may
1:      * override this method to provide additional open actions or configuration
1:      * updates.
1:      */
1:     protected void doOpen() {
1:         getEndpoint().open();
1:     }
1: 
1:     /**
1:      * Perform the close operation on the managed endpoint.  A subclass may
1:      * override this method to provide additional close actions or alter the
1:      * standard close path such as endpoint detach etc.
1:      */
1:     protected void doClose() {
1:         getEndpoint().close();
1:     }
1: 
1:     /**
1:      * Complete the open operation on the managed endpoint. A subclass may
1:      * override this method to provide additional verification actions or configuration
1:      * updates.
1:      */
1:     protected void doOpenCompletion() {
1:         LOG.debug("{} is now open: ", this);
1:         opened();
1:     }
1: 
1:     /**
1:      * When aborting the open operation, and there isnt an error condition,
1:      * provided by the peer, the returned exception will be used instead.
1:      * A subclass may override this method to provide alternative behaviour.
1:      */
1:     protected Exception getOpenAbortException() {
1:         return new IOException("Open failed unexpectedly.");
1:     }
1: 
0:     // TODO - Fina a more generic way to do this.
1:     protected abstract void doOpenInspection();
1:     protected abstract void doClosedInspection();
1: 
1:     protected void doDetachedInspection() {}
1: 
1:     //----- Private implementation utility methods ---------------------------//
1: 
1:     private boolean isAwaitingOpen() {
1:         return this.openRequest != null;
1:     }
1: 
1:     private boolean isAwaitingClose() {
1:         return this.closeRequest != null;
1:     }
1: }
============================================================================