1:c4d8d86: /**
1:c4d8d86:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4d8d86:  * contributor license agreements.  See the NOTICE file distributed with
1:c4d8d86:  * this work for additional information regarding copyright ownership.
1:c4d8d86:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4d8d86:  * (the "License"); you may not use this file except in compliance with
1:c4d8d86:  * the License.  You may obtain a copy of the License at
1:c4d8d86:  *
1:c4d8d86:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c4d8d86:  *
1:c4d8d86:  * Unless required by applicable law or agreed to in writing, software
1:c4d8d86:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4d8d86:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4d8d86:  * See the License for the specific language governing permissions and
1:c4d8d86:  * limitations under the License.
1:c4d8d86:  */
1:c4d8d86: package org.apache.activemq.transport;
1:c4d8d86: 
1:c4d8d86: import java.io.IOException;
1:c4d8d86: 
1:8bf987b: import org.slf4j.Logger;
1:c4d8d86: 
1:c4d8d86: /**
1:c4d8d86:  * Interface for classes that will be called by the TransportLogger
1:c4d8d86:  * class to actually write to a log file.
1:c4d8d86:  * Every class that implements this interface has do be declared in
1:c4d8d86:  * the resources/META-INF/services/org/apache/activemq/transport/logwriters
1:c4d8d86:  * directory, by creating a file with the name of the writer (for example
1:c4d8d86:  * "default") and including the line
1:c4d8d86:  * class=org.apache.activemq.transport.logwriters.(Name of the LogWriter class)
1:c4d8d86:  * 
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:0bbc0ac:  * 
1:c4d8d86:  */
1:c4d8d86: public interface LogWriter {
1:c4d8d86: 
1:c4d8d86:     /**
1:5385fd1:      * prefix each statement with this value. allows connections to be correlated
1:5385fd1:      * when logger is shared
1:5385fd1:      * @param prefix
1:5385fd1:      */
1:5385fd1:     public void setPrefix(String prefix);
1:5385fd1: 
1:5385fd1:     /**
1:c4d8d86:      * Writes a header message to the log.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      */
1:8bf987b:     public void initialMessage(Logger log);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when a request command is sent.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logRequest (Logger log, Object command);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when a response command is received.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logResponse (Logger log, Object response);
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when an asynchronous equest command is sent.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logAsyncRequest (Logger log, Object command);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when message is sent.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logOneWay (Logger log, Object command);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when message is received.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logReceivedCommand (Logger log, Object command);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Writes a message to a log when an exception is received.
1:c4d8d86:      * @param log The log to be written to.
1:c4d8d86:      * @param command The command to be logged.
1:c4d8d86:      */
1:8bf987b:     public void logReceivedException (Logger log, IOException error);
1:c4d8d86:     
1:c4d8d86: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5385fd1
/////////////////////////////////////////////////////////////////////////
1:      * prefix each statement with this value. allows connections to be correlated
1:      * when logger is shared
1:      * @param prefix
1:      */
1:     public void setPrefix(String prefix);
1: 
1:     /**
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.commons.logging.Log;
1: 
1: /**
1:  * Interface for classes that will be called by the TransportLogger
1:  * class to actually write to a log file.
1:  * Every class that implements this interface has do be declared in
1:  * the resources/META-INF/services/org/apache/activemq/transport/logwriters
1:  * directory, by creating a file with the name of the writer (for example
1:  * "default") and including the line
1:  * class=org.apache.activemq.transport.logwriters.(Name of the LogWriter class)
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
0:  * @version $Revision$
1:  */
1: public interface LogWriter {
1: 
1:     /**
1:      * Writes a header message to the log.
1:      * @param log The log to be written to.
1:      */
0:     public void initialMessage(Log log);
1:     
1:     /**
1:      * Writes a message to a log when a request command is sent.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logRequest (Log log, Object command);
1:     
1:     /**
1:      * Writes a message to a log when a response command is received.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logResponse (Log log, Object response);
1: 
1:     /**
1:      * Writes a message to a log when an asynchronous equest command is sent.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logAsyncRequest (Log log, Object command);
1:     
1:     /**
1:      * Writes a message to a log when message is sent.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logOneWay (Log log, Object command);
1:     
1:     /**
1:      * Writes a message to a log when message is received.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logReceivedCommand (Log log, Object command);
1:     
1:     /**
1:      * Writes a message to a log when an exception is received.
1:      * @param log The log to be written to.
1:      * @param command The command to be logged.
1:      */
0:     public void logReceivedException (Log log, IOException error);
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
/////////////////////////////////////////////////////////////////////////
1:     public void initialMessage(Logger log);
1:     public void logRequest (Logger log, Object command);
1:     public void logResponse (Logger log, Object response);
1:     public void logAsyncRequest (Logger log, Object command);
1:     public void logOneWay (Logger log, Object command);
1:     public void logReceivedCommand (Logger log, Object command);
1:     public void logReceivedException (Logger log, IOException error);
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport;
0: 
0: import java.io.IOException;
0: 
0: import org.apache.commons.logging.Log;
0: 
0: /**
0:  * Interface for classes that will be called by the TransportLogger
0:  * class to actually write to a log file.
0:  * Every class that implements this interface has do be declared in
0:  * the resources/META-INF/services/org/apache/activemq/transport/logwriters
0:  * directory, by creating a file with the name of the writer (for example
0:  * "default") and including the line
0:  * class=org.apache.activemq.transport.logwriters.(Name of the LogWriter class)
0:  */
0: public interface LogWriter {
0: 
0:     /**
0:      * Writes a header message to the log.
0:      * @param log The log to be written to.
0:      */
0:     public void initialMessage(Log log);
0:     
0:     /**
0:      * Writes a message to a log when a request command is sent.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logRequest (Log log, Object command);
0:     
0:     /**
0:      * Writes a message to a log when a response command is received.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logResponse (Log log, Object response);
0: 
0:     /**
0:      * Writes a message to a log when an asynchronous equest command is sent.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logAsyncRequest (Log log, Object command);
0:     
0:     /**
0:      * Writes a message to a log when message is sent.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logOneWay (Log log, Object command);
0:     
0:     /**
0:      * Writes a message to a log when message is received.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logReceivedCommand (Log log, Object command);
0:     
0:     /**
0:      * Writes a message to a log when an exception is received.
0:      * @param log The log to be written to.
0:      * @param command The command to be logged.
0:      */
0:     public void logReceivedException (Log log, IOException error);
0:     
0: }
============================================================================