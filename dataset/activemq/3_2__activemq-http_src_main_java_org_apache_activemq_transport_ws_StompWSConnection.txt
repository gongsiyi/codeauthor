1:f05f83b: /**
1:f05f83b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f05f83b:  * contributor license agreements.  See the NOTICE file distributed with
1:f05f83b:  * this work for additional information regarding copyright ownership.
1:f05f83b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f05f83b:  * (the "License"); you may not use this file except in compliance with
1:f05f83b:  * the License.  You may obtain a copy of the License at
1:f05f83b:  *
1:f05f83b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f05f83b:  *
1:f05f83b:  * Unless required by applicable law or agreed to in writing, software
1:f05f83b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f05f83b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f05f83b:  * See the License for the specific language governing permissions and
1:f05f83b:  * limitations under the License.
1:f05f83b:  */
1:f05f83b: package org.apache.activemq.transport.ws;
1:f05f83b: 
1:f05f83b: import java.io.IOException;
1:f05f83b: import java.util.concurrent.BlockingQueue;
1:f05f83b: import java.util.concurrent.CountDownLatch;
1:f05f83b: import java.util.concurrent.LinkedBlockingDeque;
1:f05f83b: import java.util.concurrent.TimeUnit;
1:f05f83b: 
1:f05f83b: import org.apache.activemq.transport.stomp.StompFrame;
1:2490c85: import org.apache.activemq.transport.stomp.StompWireFormat;
1:f44c3d2: import org.eclipse.jetty.websocket.api.Session;
1:f44c3d2: import org.eclipse.jetty.websocket.api.WebSocketAdapter;
1:f44c3d2: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:f05f83b: import org.slf4j.Logger;
1:f05f83b: import org.slf4j.LoggerFactory;
1:f05f83b: 
1:f05f83b: /**
1:f05f83b:  * STOMP over WS based Connection class
1:f05f83b:  */
1:f44c3d2: public class StompWSConnection extends WebSocketAdapter implements WebSocketListener {
1:f05f83b: 
1:f05f83b:     private static final Logger LOG = LoggerFactory.getLogger(StompWSConnection.class);
1:f05f83b: 
1:f44c3d2:     private Session connection;
1:f05f83b:     private final CountDownLatch connectLatch = new CountDownLatch(1);
1:f05f83b: 
1:f05f83b:     private final BlockingQueue<String> prefetch = new LinkedBlockingDeque<String>();
1:2490c85:     private final StompWireFormat wireFormat = new StompWireFormat();
1:f05f83b: 
1:f05f83b:     private int closeCode = -1;
1:f05f83b:     private String closeMessage;
1:f05f83b: 
1:f44c3d2:     @Override
1:f05f83b:     public boolean isConnected() {
1:f05f83b:         return connection != null ? connection.isOpen() : false;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     public void close() {
1:f05f83b:         if (connection != null) {
1:f05f83b:             connection.close();
1:f05f83b:         }
1:f05f83b:     }
1:f05f83b: 
1:913f644:     protected Session getConnection() {
1:913f644:         return connection;
1:913f644:     }
1:913f644: 
1:f05f83b:     //---- Send methods ------------------------------------------------------//
1:f05f83b: 
1:bbde847:     public synchronized void sendRawFrame(String rawFrame) throws Exception {
1:f05f83b:         checkConnected();
1:f44c3d2:         connection.getRemote().sendString(rawFrame);
1:f05f83b:     }
1:f05f83b: 
1:bbde847:     public synchronized void sendFrame(StompFrame frame) throws Exception {
1:f05f83b:         checkConnected();
1:2490c85:         connection.getRemote().sendString(wireFormat.marshalToString(frame));
1:f05f83b:     }
1:f05f83b: 
1:bbde847:     public synchronized void keepAlive() throws Exception {
1:f05f83b:         checkConnected();
1:f44c3d2:         connection.getRemote().sendString("\n");
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //----- Receive methods --------------------------------------------------//
1:f05f83b: 
1:f05f83b:     public String receive() throws Exception {
1:f05f83b:         checkConnected();
1:f05f83b:         return prefetch.take();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     public String receive(long timeout, TimeUnit unit) throws Exception {
1:f05f83b:         checkConnected();
1:f05f83b:         return prefetch.poll(timeout, unit);
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     public String receiveNoWait() throws Exception {
1:f05f83b:         checkConnected();
1:f05f83b:         return prefetch.poll();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //---- Blocking state change calls ---------------------------------------//
1:f05f83b: 
1:f05f83b:     public void awaitConnection() throws InterruptedException {
1:f05f83b:         connectLatch.await();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     public boolean awaitConnection(long time, TimeUnit unit) throws InterruptedException {
1:f05f83b:         return connectLatch.await(time, unit);
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //----- Property Accessors -----------------------------------------------//
1:f05f83b: 
1:f05f83b:     public int getCloseCode() {
1:f05f83b:         return closeCode;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     public String getCloseMessage() {
1:f05f83b:         return closeMessage;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //----- WebSocket callback handlers --------------------------------------//
1:f05f83b: 
1:f05f83b:     @Override
1:f44c3d2:     public void onWebSocketText(String data) {
1:f05f83b:         if (data == null) {
1:f05f83b:             return;
1:f05f83b:         }
1:f05f83b: 
1:f05f83b:         if (data.equals("\n")) {
1:f05f83b:             LOG.debug("New incoming heartbeat read");
1:f05f83b:         } else {
1:f05f83b:             LOG.trace("New incoming STOMP Frame read: \n{}", data);
1:f05f83b:             prefetch.add(data);
1:f05f83b:         }
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Override
1:f44c3d2:     public void onWebSocketClose(int statusCode, String reason) {
1:f44c3d2:         LOG.trace("STOMP WS Connection closed, code:{} message:{}", statusCode, reason);
1:f05f83b: 
1:f05f83b:         this.connection = null;
1:f44c3d2:         this.closeCode = statusCode;
1:f44c3d2:         this.closeMessage = reason;
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     @Override
1:31c55f7:     public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session session) {
1:f44c3d2:         this.connection = session;
1:f05f83b:         this.connectLatch.countDown();
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //----- Internal implementation ------------------------------------------//
1:f05f83b: 
1:f05f83b:     private void checkConnected() throws IOException {
1:f05f83b:         if (!isConnected()) {
1:f05f83b:             throw new IOException("STOMP WS Connection is closed.");
1:f05f83b:         }
1:f05f83b:     }
1:f05f83b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2490c85
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.stomp.StompWireFormat;
/////////////////////////////////////////////////////////////////////////
1:     private final StompWireFormat wireFormat = new StompWireFormat();
/////////////////////////////////////////////////////////////////////////
1:         connection.getRemote().sendString(wireFormat.marshalToString(frame));
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session session) {
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.LinkedBlockingDeque;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.stomp.StompFrame;
0: import org.eclipse.jetty.websocket.WebSocket;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * STOMP over WS based Connection class
1:  */
0: public class StompWSConnection implements WebSocket, WebSocket.OnTextMessage {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompWSConnection.class);
1: 
0:     private Connection connection;
1:     private final CountDownLatch connectLatch = new CountDownLatch(1);
1: 
1:     private final BlockingQueue<String> prefetch = new LinkedBlockingDeque<String>();
1: 
1:     private int closeCode = -1;
1:     private String closeMessage;
1: 
1:     public boolean isConnected() {
1:         return connection != null ? connection.isOpen() : false;
1:     }
1: 
1:     public void close() {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:     }
1: 
1:     //---- Send methods ------------------------------------------------------//
1: 
0:     public void sendRawFrame(String rawFrame) throws Exception {
1:         checkConnected();
0:         connection.sendMessage(rawFrame);
1:     }
1: 
0:     public void sendFrame(StompFrame frame) throws Exception {
1:         checkConnected();
0:         connection.sendMessage(frame.format());
1:     }
1: 
0:     public void keepAlive() throws Exception {
1:         checkConnected();
0:         connection.sendMessage("\n");
1:     }
1: 
1:     //----- Receive methods --------------------------------------------------//
1: 
1:     public String receive() throws Exception {
1:         checkConnected();
1:         return prefetch.take();
1:     }
1: 
1:     public String receive(long timeout, TimeUnit unit) throws Exception {
1:         checkConnected();
1:         return prefetch.poll(timeout, unit);
1:     }
1: 
1:     public String receiveNoWait() throws Exception {
1:         checkConnected();
1:         return prefetch.poll();
1:     }
1: 
1:     //---- Blocking state change calls ---------------------------------------//
1: 
1:     public void awaitConnection() throws InterruptedException {
1:         connectLatch.await();
1:     }
1: 
1:     public boolean awaitConnection(long time, TimeUnit unit) throws InterruptedException {
1:         return connectLatch.await(time, unit);
1:     }
1: 
1:     //----- Property Accessors -----------------------------------------------//
1: 
1:     public int getCloseCode() {
1:         return closeCode;
1:     }
1: 
1:     public String getCloseMessage() {
1:         return closeMessage;
1:     }
1: 
1:     //----- WebSocket callback handlers --------------------------------------//
1: 
1:     @Override
0:     public void onMessage(String data) {
1:         if (data == null) {
1:             return;
1:         }
1: 
1:         if (data.equals("\n")) {
1:             LOG.debug("New incoming heartbeat read");
1:         } else {
1:             LOG.trace("New incoming STOMP Frame read: \n{}", data);
1:             prefetch.add(data);
1:         }
1:     }
1: 
1:     @Override
0:     public void onOpen(Connection connection) {
0:         this.connection = connection;
1:         this.connectLatch.countDown();
1:     }
1: 
1:     @Override
0:     public void onClose(int closeCode, String message) {
0:         LOG.trace("STOMP WS Connection closed, code:{} message:{}", closeCode, message);
1: 
1:         this.connection = null;
0:         this.closeCode = closeCode;
0:         this.closeMessage = message;
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private void checkConnected() throws IOException {
1:         if (!isConnected()) {
1:             throw new IOException("STOMP WS Connection is closed.");
1:         }
1:     }
1: }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:913f644
/////////////////////////////////////////////////////////////////////////
1:     protected Session getConnection() {
1:         return connection;
1:     }
1: 
commit:bbde847
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void sendRawFrame(String rawFrame) throws Exception {
1:     public synchronized void sendFrame(StompFrame frame) throws Exception {
1:     public synchronized void keepAlive() throws Exception {
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.api.WebSocketAdapter;
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
1: public class StompWSConnection extends WebSocketAdapter implements WebSocketListener {
1:     private Session connection;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         connection.getRemote().sendString(rawFrame);
0:         connection.getRemote().sendString(frame.format());
1:         connection.getRemote().sendString("\n");
/////////////////////////////////////////////////////////////////////////
1:     public void onWebSocketText(String data) {
/////////////////////////////////////////////////////////////////////////
0:     /* (non-Javadoc)
0:      * @see org.eclipse.jetty.websocket.api.WebSocketListener#onWebSocketClose(int, java.lang.String)
0:      */
1:     public void onWebSocketClose(int statusCode, String reason) {
1:         LOG.trace("STOMP WS Connection closed, code:{} message:{}", statusCode, reason);
1:         this.closeCode = statusCode;
1:         this.closeMessage = reason;
0: 
0:     }
0: 
0:     /* (non-Javadoc)
0:      * @see org.eclipse.jetty.websocket.api.WebSocketListener#onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)
0:      */
0:     @Override
0:     public void onWebSocketConnect(
0:             org.eclipse.jetty.websocket.api.Session session) {
1:         this.connection = session;
0:         this.connectLatch.countDown();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
============================================================================