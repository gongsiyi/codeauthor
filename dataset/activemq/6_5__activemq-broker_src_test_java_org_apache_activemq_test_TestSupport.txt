3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
7:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test;
10:d29ca2a: 
1:02fe43b: import java.io.File;
1:93dc39b: import java.lang.reflect.Array;
1:93dc39b: 
1:93dc39b: import javax.jms.Connection;
1:29b833f: import javax.jms.ConnectionFactory;
1:93dc39b: import javax.jms.Destination;
1:93dc39b: import javax.jms.JMSException;
1:93dc39b: import javax.jms.Message;
1:93dc39b: import javax.jms.TextMessage;
1:93dc39b: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Useful base class for unit test cases
1:b0c2a40:  * 
1:230a86c:  * 
1:d29ca2a:  */
1:ca067a6: public abstract class TestSupport extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TestSupport.class);
1:fc00993:     
1:29b833f:     protected ConnectionFactory connectionFactory;
1:d29ca2a:     protected boolean topic = true;
1:d29ca2a: 
1:d29ca2a:     public TestSupport() {
1:d29ca2a:         super();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public TestSupport(String name) {
1:d29ca2a:         super(name);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates an ActiveMQMessage.
1:d29ca2a:      * 
1:d29ca2a:      * @return ActiveMQMessage
1:d29ca2a:      */
1:d29ca2a:     protected ActiveMQMessage createMessage() {
1:d29ca2a:         return new ActiveMQMessage();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a destination.
1:d29ca2a:      * 
1:d29ca2a:      * @param subject - topic or queue name.
1:d29ca2a:      * @return Destination - either an ActiveMQTopic or ActiveMQQUeue.
1:d29ca2a:      */
1:d29ca2a:     protected Destination createDestination(String subject) {
1:d29ca2a:         if (topic) {
1:d29ca2a:             return new ActiveMQTopic(subject);
1:230a86c:         } else {
1:d29ca2a:             return new ActiveMQQueue(subject);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
2:d29ca2a:      * Tests if firstSet and secondSet are equal.
1:d29ca2a:      * 
2:d29ca2a:      * @param messsage - string to be displayed when the assertion fails.
1:230a86c:      * @param firstSet[] - set of messages to be compared with its counterpart
1:230a86c:      *                in the secondset.
1:230a86c:      * @param secondSet[] - set of messages to be compared with its counterpart
1:230a86c:      *                in the firstset.
1:230a86c:      * @throws JMSException
1:230a86c:      */
1:230a86c:     protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
1:230a86c:         assertTextMessagesEqual("", firstSet, secondSet);
1:230a86c:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Tests if firstSet and secondSet are equal.
1:230a86c:      * 
1:230a86c:      * @param messsage - string to be displayed when the assertion fails.
1:230a86c:      * @param firstSet[] - set of messages to be compared with its counterpart
1:230a86c:      *                in the secondset.
1:230a86c:      * @param secondSet[] - set of messages to be compared with its counterpart
1:230a86c:      *                in the firstset.
1:d29ca2a:      */
1:d29ca2a:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet) throws JMSException {
1:d29ca2a:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1:d29ca2a: 
1:d29ca2a:         for (int i = 0; i < secondSet.length; i++) {
1:230a86c:             TextMessage m1 = (TextMessage)firstSet[i];
1:230a86c:             TextMessage m2 = (TextMessage)secondSet[i];
1:230a86c:             assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1, m2);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
2:d29ca2a:      * Tests if m1 and m2 are equal.
1:d29ca2a:      * 
1:d29ca2a:      * @param m1 - message to be compared with m2.
1:d29ca2a:      * @param m2 - message to be compared with m1.
2:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected void assertEquals(TextMessage m1, TextMessage m2) throws JMSException {
1:230a86c:         assertEquals("", m1, m2);
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     /**
1:d29ca2a:      * Tests if m1 and m2 are equal.
1:230a86c:      * 
1:d29ca2a:      * @param message - string to be displayed when the assertion fails.
1:d29ca2a:      * @param m1 - message to be compared with m2.
1:d29ca2a:      * @param m2 - message to be compared with m1.
1:d29ca2a:      */
1:d29ca2a:     protected void assertTextMessageEqual(String message, TextMessage m1, TextMessage m2) throws JMSException {
1:d29ca2a:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:230a86c: 
1:230a86c:         if (m1 == null) {
1:230a86c:             return;
1:230a86c:         }
1:230a86c: 
1:230a86c:         assertEquals(message, m1.getText(), m2.getText());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if m1 and m2 are equal.
1:d29ca2a:      * 
1:d29ca2a:      * @param m1 - message to be compared with m2.
1:d29ca2a:      * @param m2 - message to be compared with m1.
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected void assertEquals(Message m1, Message m2) throws JMSException {
1:230a86c:         assertEquals("", m1, m2);
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     /**
1:230a86c:      * Tests if m1 and m2 are equal.
1:230a86c:      * 
1:230a86c:      * @param message - error message.
1:d29ca2a:      * @param m1 - message to be compared with m2.
1:d29ca2a:      * @param m2 -- message to be compared with m1.
1:d29ca2a:      */
1:d29ca2a:     protected void assertEquals(String message, Message m1, Message m2) throws JMSException {
1:d29ca2a:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1:230a86c: 
1:230a86c:         if (m1 == null) {
1:230a86c:             return;
1:d29ca2a:         }
1:230a86c: 
1:230a86c:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass() == m2.getClass());
1:230a86c: 
1:230a86c:         if (m1 instanceof TextMessage) {
1:230a86c:             assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
1:230a86c:         } else {
1:230a86c:             assertEquals(message, m1, m2);
1:230a86c:         }
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     /**
1:02fe43b:      * Test if base directory contains spaces
1:d29ca2a:      */
1:02fe43b:     protected void assertBaseDirectoryContainsSpaces() {
1:02fe43b:     	assertFalse("Base directory cannot contain spaces.", new File(System.getProperty("basedir", ".")).getAbsoluteFile().toString().contains(" "));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates an ActiveMQConnectionFactory.
1:d29ca2a:      * 
1:230a86c:      * @return ActiveMQConnectionFactory
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:29b833f:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new connection.
1:d29ca2a:      * 
1:230a86c:      * @return connection
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected Connection createConnection() throws Exception {
1:d29ca2a:         return getConnectionFactory().createConnection();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates an ActiveMQ connection factory.
1:d29ca2a:      * 
1:d29ca2a:      * @return connectionFactory
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:29b833f:     public ConnectionFactory getConnectionFactory() throws Exception {
1:d29ca2a:         if (connectionFactory == null) {
1:d29ca2a:             connectionFactory = createConnectionFactory();
1:d29ca2a:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         return connectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the consumer subject.
1:d29ca2a:      * 
1:d29ca2a:      * @return String
1:d29ca2a:      */
1:d29ca2a:     protected String getConsumerSubject() {
1:d29ca2a:         return getSubject();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the producer subject.
1:d29ca2a:      * 
1:d29ca2a:      * @return String
1:d29ca2a:      */
1:d29ca2a:     protected String getProducerSubject() {
1:d29ca2a:         return getSubject();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Returns the subject.
1:d29ca2a:      * 
1:d29ca2a:      * @return String
1:d29ca2a:      */
1:d29ca2a:     protected String getSubject() {
1:d29ca2a:         return getClass().getName() + "." + getName();
1:d29ca2a:     }
1:d29ca2a: 
1:6ce83ac:     protected void assertArrayEqual(String message, Object[] expected, Object[] actual) {
1:6ce83ac:         assertEquals(message + ". Array length", expected.length, actual.length);
1:6ce83ac:         for (int i = 0; i < expected.length; i++) {
1:6ce83ac:             assertEquals(message + ". element: " + i, expected[i], actual[i]);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:6ce83ac:     protected void assertPrimitiveArrayEqual(String message, Object expected, Object actual) {
1:6ce83ac:         int length = Array.getLength(expected);
1:6ce83ac:         assertEquals(message + ". Array length", length, Array.getLength(actual));
1:6ce83ac:         for (int i = 0; i < length; i++) {
1:6ce83ac:             assertEquals(message + ". element: " + i, Array.get(expected, i), Array.get(actual, i));
1:d29ca2a:         }
1:d29ca2a:     }
1:02fe43b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:29b833f
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionFactory connectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionFactory getConnectionFactory() throws Exception {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TestSupport.class);
1:     
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:      * @param firstSet[] - set of messages to be compared with its counterpart
1:      *                in the secondset.
1:      * @param secondSet[] - set of messages to be compared with its counterpart
1:      *                in the firstset.
1:      * @throws JMSException
1:      */
1:     protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
1:         assertTextMessagesEqual("", firstSet, secondSet);
1:     }
1: 
1:     /**
1:      * Tests if firstSet and secondSet are equal.
1:      * 
1:      * @param messsage - string to be displayed when the assertion fails.
1:      * @param firstSet[] - set of messages to be compared with its counterpart
1:      *                in the secondset.
1:      * @param secondSet[] - set of messages to be compared with its counterpart
1:      *                in the firstset.
1:             TextMessage m1 = (TextMessage)firstSet[i];
1:             TextMessage m2 = (TextMessage)secondSet[i];
1:             assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1, m2);
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("", m1, m2);
1:     /**
1:      * 
1: 
1:         if (m1 == null) {
1:             return;
1:         }
1: 
1:         assertEquals(message, m1.getText(), m2.getText());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("", m1, m2);
1: 
1:     /**
1:      * Tests if m1 and m2 are equal.
1:      * 
1:      * @param message - error message.
1: 
1:         if (m1 == null) {
1:             return;
1: 
1:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass() == m2.getClass());
1: 
1:         if (m1 instanceof TextMessage) {
1:             assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
1:         } else {
1:             assertEquals(message, m1, m2);
1:         }
1:      * @return ActiveMQConnectionFactory
/////////////////////////////////////////////////////////////////////////
1:      * @return connection
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Returns the subject.
/////////////////////////////////////////////////////////////////////////
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import java.lang.reflect.Array;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     final static protected Log log = LogFactory.getLog(TestSupport.class);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.TextMessage;
1: 
1: 
1: /**
1:  * Useful base class for unit test cases
1:  *
0:  * @version $Revision: 1.4 $
1:  */
0: public class TestSupport extends TestCase {
0:     protected Log log = LogFactory.getLog(getClass());
0:     protected ActiveMQConnectionFactory connectionFactory;
1:     protected boolean topic = true;
1: 
1:     public TestSupport() {
1:         super();
1:     }
1: 
1:     public TestSupport(String name) {
1:         super(name);
1:     }
1: 
1:     /**
1:      * Creates an ActiveMQMessage.
1:      * 
1:      * @return ActiveMQMessage
1:      */
1:     protected ActiveMQMessage createMessage() {
1:         return new ActiveMQMessage();
1:     }
1: 
1:     /**
1:      * Creates a destination.
1:      * 
1:      * @param subject - topic or queue name.
1:      * @return Destination - either an ActiveMQTopic or ActiveMQQUeue.
1:      */
1:     protected Destination createDestination(String subject) {
1:         if (topic) {
1:             return new ActiveMQTopic(subject);
1:         }
0:         else {
1:             return new ActiveMQQueue(subject);
1:         }
1:     }
1: 
1: 	/**
1:      * Tests if firstSet and secondSet are equal.
1:      * 
1:      * @param messsage - string to be displayed when the assertion fails.
0:      * @param firstSet[] - set of messages to be compared with its counterpart in the secondset.
0:      * @param secondSet[] - set of messages to be compared with its counterpart in the firstset. 
1: 	 * @throws JMSException
1: 	 */
0: 	protected void assertTextMessagesEqual(Message[] firstSet, Message[] secondSet) throws JMSException {
0: 		assertTextMessagesEqual("", firstSet, secondSet);
1: 	}
1: 	
1:     /**
1:      * Tests if firstSet and secondSet are equal.
1:      * 
1:      * @param messsage - string to be displayed when the assertion fails.
0:      * @param firstSet[] - set of messages to be compared with its counterpart in the secondset.
0:      * @param secondSet[] - set of messages to be compared with its counterpart in the firstset. 
1:      */
1:     protected void assertTextMessagesEqual(String messsage, Message[] firstSet, Message[] secondSet) throws JMSException {
1:         assertEquals("Message count does not match: " + messsage, firstSet.length, secondSet.length);
1: 
1:         for (int i = 0; i < secondSet.length; i++) {
0:             TextMessage m1 = (TextMessage) firstSet[i];
0:             TextMessage m2 = (TextMessage) secondSet[i];
0: 			assertTextMessageEqual("Message " + (i + 1) + " did not match : ", m1,m2);
1:         }
1:     }
1: 	
1:     /**
1:      * Tests if m1 and m2 are equal.
1:      * 
1:      * @param m1 - message to be compared with m2.
1:      * @param m2 - message to be compared with m1.
1:      * @throws JMSException
1:      */
1:     protected void assertEquals(TextMessage m1, TextMessage m2) throws JMSException {
0: 		assertEquals("", m1, m2);
1:     }
1: 
1: 	/**
1:      * Tests if m1 and m2 are equal.
1: 	 * 
1:      * @param message - string to be displayed when the assertion fails.
1:      * @param m1 - message to be compared with m2.
1:      * @param m2 - message to be compared with m1.
1:      */
1:     protected void assertTextMessageEqual(String message, TextMessage m1, TextMessage m2) throws JMSException {
1:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1: 		
0:         if( m1 == null ) {
0: 			return;
1: 		}	
1:         
0: 		assertEquals(message, m1.getText(), m2.getText());
1:     }
1: 
1:     /**
1:      * Tests if m1 and m2 are equal.
1:      * 
1:      * @param m1 - message to be compared with m2.
1:      * @param m2 - message to be compared with m1.
1:      * @throws JMSException
1:      */
1:     protected void assertEquals(Message m1, Message m2) throws JMSException {
0: 		assertEquals("", m1, m2);
1:     }
1:     
1: 	/**
1: 	 * Tests if m1 and m2 are equal.  
1: 	 * 
0:      * @param message - error message. 
1:      * @param m1 - message to be compared with m2.
1:      * @param m2 -- message to be compared with m1.
1:      */
1:     protected void assertEquals(String message, Message m1, Message m2) throws JMSException {
1:         assertFalse(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1 == null ^ m2 == null);
1: 		
0:         if( m1 == null ){
0: 			return;
1:         }
1:         
0:         assertTrue(message + ": expected {" + m1 + "}, but was {" + m2 + "}", m1.getClass()==m2.getClass());
1: 		
0:         if( m1 instanceof TextMessage ) {
0: 			assertTextMessageEqual(message, (TextMessage)m1, (TextMessage)m2);
0: 		} else {
0: 			assertEquals(message, m1, m2);
1: 		}
1:     }
1: 
1:     /**
1:      * Creates an ActiveMQConnectionFactory.
1:      * 
0:      * @return ActiveMQConnectionFactory 
1:      * @throws Exception
1:      */
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:     }
1: 
1:     /**
1:      * Factory method to create a new connection.
1:      * 
0:      * @return connection 
1:      * @throws Exception
1:      */
1:     protected Connection createConnection() throws Exception {
1:         return getConnectionFactory().createConnection();
1:     }
1: 
1:     /**
1:      * Creates an ActiveMQ connection factory.
1:      * 
1:      * @return connectionFactory
1:      * @throws Exception
1:      */
0:     public ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         if (connectionFactory == null) {
1:             connectionFactory = createConnectionFactory();
1:             assertTrue("Should have created a connection factory!", connectionFactory != null);
1:         }
1:         
1:         return connectionFactory;
1:     }
1: 
1:     /**
1:      * Returns the consumer subject.
1:      * 
1:      * @return String
1:      */
1:     protected String getConsumerSubject() {
1:         return getSubject();
1:     }
1: 
1:     /**
1:      * Returns the producer subject.
1:      * 
1:      * @return String
1:      */
1:     protected String getProducerSubject() {
1:         return getSubject();
1:     }
1: 
1:     /**
0:      * Returns the subject. 
1:      * 
1:      * @return String
1:      */
1:     protected String getSubject() {
1:         return getClass().getName() + "." + getName();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TestSupport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:02fe43b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * Test if base directory contains spaces
0:      */
1:     protected void assertBaseDirectoryContainsSpaces() {
1:     	assertFalse("Base directory cannot contain spaces.", new File(System.getProperty("basedir", ".")).getAbsoluteFile().toString().contains(" "));
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: public abstract class TestSupport extends TestCase {
commit:6ce83ac
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Array;
0: import java.util.Arrays;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected void assertArrayEqual(String message, Object[] expected, Object[] actual) {
1:         assertEquals(message + ". Array length", expected.length, actual.length);
1:         for (int i = 0; i < expected.length; i++) {
1:             assertEquals(message + ". element: " + i, expected[i], actual[i]);
0:         }
0:     }
0:     
1:     protected void assertPrimitiveArrayEqual(String message, Object expected, Object actual) {
1:         int length = Array.getLength(expected);
1:         assertEquals(message + ". Array length", length, Array.getLength(actual));
1:         for (int i = 0; i < length; i++) {
1:             assertEquals(message + ". element: " + i, Array.get(expected, i), Array.get(actual, i));
0:         }
0:     }
============================================================================