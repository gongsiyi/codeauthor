2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
7:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
9:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.LinkedList;
1:d29ca2a: import java.util.List;
1:dc0291b: import java.util.concurrent.CountDownLatch;
1:dc0291b: import java.util.concurrent.atomic.AtomicInteger;
1:d29ca2a: 
1:d29ca2a: import javax.jms.ConnectionConsumer;
1:d29ca2a: import javax.jms.IllegalStateException;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.ServerSession;
1:d29ca2a: import javax.jms.ServerSessionPool;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:757a2f1: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * For application servers, <CODE>Connection</CODE> objects provide a special
1:d29ca2a:  * facility for creating a <CODE>ConnectionConsumer</CODE> (optional). The
1:230a86c:  * messages it is to consume are specified by a <CODE>Destination</CODE> and a
1:230a86c:  * message selector. In addition, a <CODE>ConnectionConsumer</CODE> must be
1:d29ca2a:  * given a <CODE>ServerSessionPool</CODE> to use for processing its messages.
2:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Normally, when traffic is light, a <CODE>ConnectionConsumer</CODE> gets a
1:d29ca2a:  * <CODE>ServerSession</CODE> from its pool, loads it with a single message,
1:d29ca2a:  * and starts it. As traffic picks up, messages can back up. If this happens, a
1:d29ca2a:  * <CODE>ConnectionConsumer</CODE> can load each <CODE>ServerSession</CODE>
1:d29ca2a:  * with more than one message. This reduces the thread context switches and
1:d29ca2a:  * minimizes resource use at the expense of some serialization of message
1:d29ca2a:  * processing.
1:230a86c:  * 
1:d29ca2a:  * @see javax.jms.Connection#createConnectionConsumer
1:d29ca2a:  * @see javax.jms.Connection#createDurableConnectionConsumer
1:d29ca2a:  * @see javax.jms.QueueConnection#createConnectionConsumer
1:d29ca2a:  * @see javax.jms.TopicConnection#createConnectionConsumer
1:d29ca2a:  * @see javax.jms.TopicConnection#createDurableConnectionConsumer
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: public class ActiveMQConnectionConsumer implements ConnectionConsumer, ActiveMQDispatcher {
1:d29ca2a: 
1:d29ca2a:     private ActiveMQConnection connection;
1:d29ca2a:     private ServerSessionPool sessionPool;
1:d29ca2a:     private ConsumerInfo consumerInfo;
1:d29ca2a:     private boolean closed;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Create a ConnectionConsumer
1:230a86c:      * 
1:d29ca2a:      * @param theConnection
1:d29ca2a:      * @param theSessionPool
1:d29ca2a:      * @param theConsumerInfo
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:230a86c:     protected ActiveMQConnectionConsumer(ActiveMQConnection theConnection, ServerSessionPool theSessionPool, ConsumerInfo theConsumerInfo) throws JMSException {
1:d29ca2a:         this.connection = theConnection;
1:d29ca2a:         this.sessionPool = theSessionPool;
1:d29ca2a:         this.consumerInfo = theConsumerInfo;
1:230a86c: 
1:d29ca2a:         this.connection.addConnectionConsumer(this);
1:d29ca2a:         this.connection.addDispatcher(consumerInfo.getConsumerId(), this);
1:757a2f1:         this.connection.syncSendPacket(this.consumerInfo);
1:d29ca2a:     }
1:757a2f1: 
1:230a86c:     /**
1:d29ca2a:      * Gets the server session pool associated with this connection consumer.
1:230a86c:      * 
1:d29ca2a:      * @return the server session pool used by this connection consumer
1:230a86c:      * @throws JMSException if the JMS provider fails to get the server session
1:230a86c:      *                 pool associated with this consumer due to some internal
1:230a86c:      *                 error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public ServerSessionPool getServerSessionPool() throws JMSException {
1:d29ca2a:         if (closed) {
1:d29ca2a:             throw new IllegalStateException("The Connection Consumer is closed");
1:d29ca2a:         }
1:d29ca2a:         return this.sessionPool;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Closes the connection consumer. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Since a provider may allocate some resources on behalf of a connection
1:d29ca2a:      * consumer outside the Java virtual machine, clients should close these
1:d29ca2a:      * resources when they are not needed. Relying on garbage collection to
1:d29ca2a:      * eventually reclaim these resources may not be timely enough.
1:230a86c:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public void close() throws JMSException {
1:d29ca2a:         if (!closed) {
1:d29ca2a:             dispose();
1:d29ca2a:             this.connection.asyncSendPacket(this.consumerInfo.createRemoveCommand());
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void dispose() {
1:d29ca2a:         if (!closed) {
1:d29ca2a:             this.connection.removeDispatcher(consumerInfo.getConsumerId());
1:d29ca2a:             this.connection.removeConnectionConsumer(this);
1:d29ca2a:             closed = true;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void dispatch(MessageDispatch messageDispatch) {
1:d29ca2a:         try {
1:d29ca2a:             messageDispatch.setConsumer(this);
1:230a86c: 
1:d29ca2a:             ServerSession serverSession = sessionPool.getServerSession();
1:d29ca2a:             Session s = serverSession.getSession();
1:d29ca2a:             ActiveMQSession session = null;
1:230a86c: 
1:230a86c:             if (s instanceof ActiveMQSession) {
1:230a86c:                 session = (ActiveMQSession)s;
1:d29ca2a:             } else if (s instanceof ActiveMQTopicSession) {
1:230a86c:                 ActiveMQTopicSession topicSession = (ActiveMQTopicSession)s;
1:230a86c:                 session = (ActiveMQSession)topicSession.getNext();
1:d29ca2a:             } else if (s instanceof ActiveMQQueueSession) {
1:230a86c:                 ActiveMQQueueSession queueSession = (ActiveMQQueueSession)s;
1:230a86c:                 session = (ActiveMQSession)queueSession.getNext();
1:d29ca2a:             } else {
1:0acf545:                 connection.onClientInternalException(new JMSException("Session pool provided an invalid session type: " + s.getClass()));
1:d29ca2a:                 return;
1:d29ca2a:             }
1:230a86c: 
1:d29ca2a:             session.dispatch(messageDispatch);
1:d29ca2a:             serverSession.start();
1:d29ca2a:         } catch (JMSException e) {
1:d29ca2a:             connection.onAsyncException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public String toString() {
1:230a86c:         return "ActiveMQConnectionConsumer { value=" + consumerInfo.getConsumerId() + " }";
1:d29ca2a:     }
1:ad06a5f: 
1:dc0291b:     public void clearMessagesInProgress(AtomicInteger transportInterruptionProcessingComplete) {
1:ad06a5f:         // future: may want to deal with rollback of in progress messages to track re deliveries
1:ad06a5f:         // before indicating that all is complete.        
1:ad06a5f:     }
1:d29ca2a: 
1:757a2f1:     public ConsumerInfo getConsumerInfo() {
1:757a2f1:         return consumerInfo;
1:757a2f1:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:dc0291b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     public void clearMessagesInProgress(AtomicInteger transportInterruptionProcessingComplete) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:757a2f1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerId;
/////////////////////////////////////////////////////////////////////////
1:         this.connection.syncSendPacket(this.consumerInfo);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ConsumerInfo getConsumerInfo() {
1:         return consumerInfo;
1:     }
commit:ad06a5f
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void clearMessagesInProgress() {
1:         // future: may want to deal with rollback of in progress messages to track re deliveries
1:         // before indicating that all is complete.        
0:         // Till there is a need, lets immediately allow dispatch
0:         this.connection.transportInterruptionProcessingComplete();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * messages it is to consume are specified by a <CODE>Destination</CODE> and a
1:  * message selector. In addition, a <CODE>ConnectionConsumer</CODE> must be
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected ActiveMQConnectionConsumer(ActiveMQConnection theConnection, ServerSessionPool theSessionPool, ConsumerInfo theConsumerInfo) throws JMSException {
1: 
1:     /**
1:      * 
1:      * @throws JMSException if the JMS provider fails to get the server session
1:      *                 pool associated with this consumer due to some internal
1:      *                 error.
/////////////////////////////////////////////////////////////////////////
1:      * Closes the connection consumer. <p/>
1:      * 
/////////////////////////////////////////////////////////////////////////
1:     public void dispatch(MessageDispatch messageDispatch) {
1: 
1: 
1:             if (s instanceof ActiveMQSession) {
1:                 session = (ActiveMQSession)s;
1:                 ActiveMQTopicSession topicSession = (ActiveMQTopicSession)s;
1:                 session = (ActiveMQSession)topicSession.getNext();
1:                 ActiveMQQueueSession queueSession = (ActiveMQQueueSession)s;
1:                 session = (ActiveMQSession)queueSession.getNext();
0:                 connection.onAsyncException(new JMSException("Session pool provided an invalid session type: " + s.getClass()));
1: 
1: 
1:         return "ActiveMQConnectionConsumer { value=" + consumerInfo.getConsumerId() + " }";
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
0:         return "ActiveMQConnectionConsumer { value=" +consumerInfo.getConsumerId()+" }";
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import java.util.Collections;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.ServerSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageDispatch;
1: 
1: /**
1:  * For application servers, <CODE>Connection</CODE> objects provide a special
1:  * facility for creating a <CODE>ConnectionConsumer</CODE> (optional). The
0:  * messages it is to consume are specified by a <CODE>Destination</CODE> and
0:  * a message selector. In addition, a <CODE>ConnectionConsumer</CODE> must be
1:  * given a <CODE>ServerSessionPool</CODE> to use for processing its messages.
1:  * <p/>
1:  * <P>
1:  * Normally, when traffic is light, a <CODE>ConnectionConsumer</CODE> gets a
1:  * <CODE>ServerSession</CODE> from its pool, loads it with a single message,
1:  * and starts it. As traffic picks up, messages can back up. If this happens, a
1:  * <CODE>ConnectionConsumer</CODE> can load each <CODE>ServerSession</CODE>
1:  * with more than one message. This reduces the thread context switches and
1:  * minimizes resource use at the expense of some serialization of message
1:  * processing.
1:  *
1:  * @see javax.jms.Connection#createConnectionConsumer
1:  * @see javax.jms.Connection#createDurableConnectionConsumer
1:  * @see javax.jms.QueueConnection#createConnectionConsumer
1:  * @see javax.jms.TopicConnection#createConnectionConsumer
1:  * @see javax.jms.TopicConnection#createDurableConnectionConsumer
1:  */
1: 
1: public class ActiveMQConnectionConsumer implements ConnectionConsumer, ActiveMQDispatcher {
1: 
1:     private ActiveMQConnection connection;
1:     private ServerSessionPool sessionPool;
1:     private ConsumerInfo consumerInfo;
1:     private boolean closed;
1: 
0:     protected final List messageQueue = Collections.synchronizedList(new LinkedList());
1:     
1: 
1:     /**
1:      * Create a ConnectionConsumer
1:      *
1:      * @param theConnection
1:      * @param theSessionPool
1:      * @param theConsumerInfo
0:      * @param theMaximumMessages
1:      * @throws JMSException
1:      */
0:     protected ActiveMQConnectionConsumer(ActiveMQConnection theConnection,
0:                                          ServerSessionPool theSessionPool, 
0:                                          ConsumerInfo theConsumerInfo) throws JMSException {
1:         this.connection = theConnection;
1:         this.sessionPool = theSessionPool;
1:         this.consumerInfo = theConsumerInfo;
1:         
1:         this.connection.addConnectionConsumer(this);
1:         this.connection.addDispatcher(consumerInfo.getConsumerId(), this);
0:         this.connection.syncSendPacket(this.consumerInfo);
1:     }
1: 
1: 	/**
1:      * Gets the server session pool associated with this connection consumer.
1:      *
1:      * @return the server session pool used by this connection consumer
0:      * @throws JMSException if the JMS provider fails to get the server session pool
0:      *                      associated with this consumer due to some internal error.
1:      */
1: 
1:     public ServerSessionPool getServerSessionPool() throws JMSException {
1:         if (closed) {
1:             throw new IllegalStateException("The Connection Consumer is closed");
1:         }
1:         return this.sessionPool;
1:     }
1: 
1:     /**
0:      * Closes the connection consumer.
1:      * <p/>
1:      * <P>
1:      * Since a provider may allocate some resources on behalf of a connection
1:      * consumer outside the Java virtual machine, clients should close these
1:      * resources when they are not needed. Relying on garbage collection to
1:      * eventually reclaim these resources may not be timely enough.
1:      *
1:      * @throws JMSException
1:      */
1: 
1:     public void close() throws JMSException {
1:         if (!closed) {
1:             dispose();
1:             this.connection.asyncSendPacket(this.consumerInfo.createRemoveCommand());
1:         }
1: 
1:     }
1: 
1:     public void dispose() {
1:         if (!closed) {
1:             this.connection.removeDispatcher(consumerInfo.getConsumerId());
1:             this.connection.removeConnectionConsumer(this);
1:             closed = true;
1:         }
1:     }
1: 
0:     public void dispatch(MessageDispatch messageDispatch)  {
1:         try {
1:             messageDispatch.setConsumer(this);
1:             
1:             ServerSession serverSession = sessionPool.getServerSession();
1:             Session s = serverSession.getSession();
1:             ActiveMQSession session = null;
1:             
1:             
0:             if( s instanceof ActiveMQSession ) {
0:                 session = (ActiveMQSession) s;
1:             } else if (s instanceof ActiveMQTopicSession) {
0:                 ActiveMQTopicSession topicSession = (ActiveMQTopicSession) s;
0:                 session = (ActiveMQSession) topicSession.getNext();
1:             } else if (s instanceof ActiveMQQueueSession) {
0:                 ActiveMQQueueSession queueSession = (ActiveMQQueueSession) s;
0:                 session = (ActiveMQSession) queueSession.getNext();
1:             } else {
0:                 connection.onAsyncException(new JMSException("Session pool provided an invalid session type: "+s.getClass()));
1:                 return;
1:             }
1:             
1:             session.dispatch(messageDispatch);
1:             serverSession.start();
1:         } catch (JMSException e) {
1:             connection.onAsyncException(e);
1:         }
1:     }
1:     
1:     public String toString() {
0:         return "ActiveMQConnectionConsumer { consumerId=" +consumerInfo.getConsumerId()+" }";
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:944145b
/////////////////////////////////////////////////////////////////////////
0:         this.connection.asyncSendPacket(this.consumerInfo);
commit:0acf545
/////////////////////////////////////////////////////////////////////////
1:                 connection.onClientInternalException(new JMSException("Session pool provided an invalid session type: " + s.getClass()));
author:James Strachan
-------------------------------------------------------------------------------
commit:e2b561e
/////////////////////////////////////////////////////////////////////////
============================================================================