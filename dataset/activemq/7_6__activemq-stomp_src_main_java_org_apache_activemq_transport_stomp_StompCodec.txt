1:036f2a8: /**
1:036f2a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:036f2a8:  * contributor license agreements.  See the NOTICE file distributed with
1:036f2a8:  * this work for additional information regarding copyright ownership.
1:036f2a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:036f2a8:  * (the "License"); you may not use this file except in compliance with
1:036f2a8:  * the License.  You may obtain a copy of the License at
1:036f2a8:  *
1:036f2a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:036f2a8:  *
1:036f2a8:  * Unless required by applicable law or agreed to in writing, software
1:036f2a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:036f2a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:036f2a8:  * See the License for the specific language governing permissions and
1:036f2a8:  * limitations under the License.
1:036f2a8:  */
1:036f2a8: package org.apache.activemq.transport.stomp;
4:036f2a8: 
1:036f2a8: import java.io.ByteArrayInputStream;
1:a54fa4b: import java.util.Arrays;
1:a54fa4b: import java.util.Collections;
1:036f2a8: import java.util.HashMap;
1:a54fa4b: import java.util.HashSet;
1:a54fa4b: import java.util.Map;
1:a7a3c78: import java.util.concurrent.atomic.AtomicLong;
1:036f2a8: 
1:46824ce: import org.apache.activemq.transport.tcp.TcpTransport;
1:46824ce: import org.apache.activemq.util.ByteArrayOutputStream;
1:46824ce: import org.apache.activemq.util.DataByteArrayInputStream;
1:46824ce: 
1:036f2a8: public class StompCodec {
1:036f2a8: 
1:e32ff5c:     final static byte[] crlfcrlf = new byte[]{'\r','\n','\r','\n'};
1:036f2a8:     TcpTransport transport;
1:8d42343:     StompWireFormat wireFormat;
1:036f2a8: 
1:a7a3c78:     AtomicLong frameSize = new AtomicLong(); 
1:036f2a8:     ByteArrayOutputStream currentCommand = new ByteArrayOutputStream();
1:036f2a8:     boolean processedHeaders = false;
1:036f2a8:     String action;
1:036f2a8:     HashMap<String, String> headers;
1:036f2a8:     int contentLength = -1;
1:036f2a8:     int readLength = 0;
1:036f2a8:     int previousByte = -1;
1:78265ea:     boolean awaitingCommandStart = true;
1:a54fa4b:     String version = Stomp.DEFAULT_VERSION;
1:036f2a8: 
1:036f2a8:     public StompCodec(TcpTransport transport) {
1:036f2a8:         this.transport = transport;
1:8d42343:         this.wireFormat = (StompWireFormat) transport.getWireFormat();
9:036f2a8:     }
1:036f2a8: 
1:036f2a8:     public void parse(ByteArrayInputStream input, int readSize) throws Exception {
1:0885c60:        int i = 0;
1:0885c60:        int b;
1:0885c60:        while(i++ < readSize) {
1:0885c60:            b = input.read();
1:0885c60:            // skip repeating nulls
1:0885c60:            if (!processedHeaders && previousByte == 0 && b == 0) {
1:0885c60:                continue;
1:0885c60:            }
1:036f2a8: 
1:0885c60:            if (!processedHeaders) {
1:78265ea: 
1:78265ea:                // skip heart beat commands.
1:78265ea:                if (awaitingCommandStart && b == '\n') {
1:78265ea:                    continue;
1:78265ea:                } else {
1:78265ea:                    awaitingCommandStart = false;   // non-newline indicates next frame.
1:78265ea:                }
1:78265ea: 
1:0885c60:                currentCommand.write(b);
1:0885c60:                // end of headers section, parse action and header
1:e32ff5c:                if (b == '\n' && (previousByte == '\n' || currentCommand.endsWith(crlfcrlf))) {
1:0885c60:                    DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
1:a7a3c78: 
1:a54fa4b:                    try {
1:a7a3c78:                        action = wireFormat.parseAction(data, frameSize);
1:a7a3c78:                        headers = wireFormat.parseHeaders(data, frameSize);
1:a7a3c78:                        
1:0885c60:                        String contentLengthHeader = headers.get(Stomp.Headers.CONTENT_LENGTH);
1:93a379f:                        if ((action.equals(Stomp.Commands.SEND) || action.equals(Stomp.Responses.MESSAGE)) && contentLengthHeader != null) {
1:a7a3c78:                            contentLength = wireFormat.parseContentLength(contentLengthHeader, frameSize);
5:036f2a8:                        } else {
1:0885c60:                            contentLength = -1;
1:a54fa4b:                        }
1:8d42343:                    } catch (ProtocolException e) {
1:8d42343:                        transport.doConsume(new StompFrameError(e));
1:8d42343:                        return;
1:8d42343:                    }
1:0885c60:                    processedHeaders = true;
1:0885c60:                    currentCommand.reset();
1:036f2a8:                }
1:78265ea: 
1:0885c60:            } else {
1:0885c60: 
1:0885c60:                if (contentLength == -1) {
1:0885c60:                    // end of command reached, unmarshal
1:0885c60:                    if (b == 0) {
1:0885c60:                        processCommand();
1:0885c60:                    } else {
1:0885c60:                        currentCommand.write(b);
1:8d42343:                        if (currentCommand.size() > wireFormat.getMaxDataLength()) {
1:9e35778:                            StompFrameError errorFrame = new StompFrameError(new ProtocolException("The maximum data length was exceeded", true));
1:9e35778:                            errorFrame.setAction(this.action);
1:9e35778:                            transport.doConsume(errorFrame);
1:8d42343:                            return;
1:8d42343:                        }
1:a7a3c78:                        if (frameSize.incrementAndGet() > wireFormat.getMaxFrameSize()) {
1:9e35778:                            StompFrameError errorFrame = new StompFrameError(new ProtocolException("The maximum frame size was exceeded", true));
1:9e35778:                            errorFrame.setAction(this.action);
1:9e35778:                            transport.doConsume(errorFrame);
1:a7a3c78:                            return;
1:a7a3c78:                        }
1:0885c60:                    }
1:0885c60:                } else {
1:0885c60:                    // read desired content length
1:0885c60:                    if (readLength++ == contentLength) {
1:0885c60:                        processCommand();
1:0885c60:                        readLength = 0;
1:0885c60:                    } else {
1:0885c60:                        currentCommand.write(b);
1:0885c60:                    }
1:0885c60:                }
1:0885c60:            }
1:0885c60: 
1:0885c60:            previousByte = b;
1:0885c60:        }
1:036f2a8:     }
1:a54fa4b: 
1:036f2a8:     protected void processCommand() throws Exception {
1:036f2a8:         StompFrame frame = new StompFrame(action, headers, currentCommand.toByteArray());
1:036f2a8:         transport.doConsume(frame);
1:036f2a8:         processedHeaders = false;
1:78265ea:         awaitingCommandStart = true;
2:036f2a8:         currentCommand.reset();
2:036f2a8:         contentLength = -1;
1:a7a3c78:         frameSize.set(0);
1:036f2a8:     }
1:036f2a8: 
1:a54fa4b:     public static String detectVersion(Map<String, String> headers) throws ProtocolException {
1:a54fa4b:         String accepts = headers.get(Stomp.Headers.Connect.ACCEPT_VERSION);
1:a54fa4b: 
1:a54fa4b:         if (accepts == null) {
1:a54fa4b:             accepts = Stomp.DEFAULT_VERSION;
1:a54fa4b:         }
1:a54fa4b:         HashSet<String> acceptsVersions = new HashSet<String>(Arrays.asList(accepts.trim().split(Stomp.COMMA)));
1:a54fa4b:         acceptsVersions.retainAll(Arrays.asList(Stomp.SUPPORTED_PROTOCOL_VERSIONS));
1:a54fa4b:         if (acceptsVersions.isEmpty()) {
1:a54fa4b:             throw new ProtocolException("Invalid Protocol version[" + accepts +"], supported versions are: " +
1:a54fa4b:                     Arrays.toString(Stomp.SUPPORTED_PROTOCOL_VERSIONS), true);
1:a54fa4b:         } else {
1:a54fa4b:             return Collections.max(acceptsVersions);
1:a54fa4b:         }
1:a54fa4b:     }
1:036f2a8: }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:9e35778
/////////////////////////////////////////////////////////////////////////
1:                            StompFrameError errorFrame = new StompFrameError(new ProtocolException("The maximum data length was exceeded", true));
1:                            errorFrame.setAction(this.action);
1:                            transport.doConsume(errorFrame);
1:                            StompFrameError errorFrame = new StompFrameError(new ProtocolException("The maximum frame size was exceeded", true));
1:                            errorFrame.setAction(this.action);
1:                            transport.doConsume(errorFrame);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a7a3c78
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1:     AtomicLong frameSize = new AtomicLong(); 
/////////////////////////////////////////////////////////////////////////
1: 
1:                        action = wireFormat.parseAction(data, frameSize);
1:                        headers = wireFormat.parseHeaders(data, frameSize);
1:                        
1:                            contentLength = wireFormat.parseContentLength(contentLengthHeader, frameSize);
/////////////////////////////////////////////////////////////////////////
1:                        if (frameSize.incrementAndGet() > wireFormat.getMaxFrameSize()) {
0:                            transport.doConsume(new StompFrameError(new ProtocolException("The maximum frame size was exceeded", true)));
1:                            return;
1:                        }
/////////////////////////////////////////////////////////////////////////
1:         frameSize.set(0);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8d42343
/////////////////////////////////////////////////////////////////////////
1:     StompWireFormat wireFormat;
/////////////////////////////////////////////////////////////////////////
1:         this.wireFormat = (StompWireFormat) transport.getWireFormat();
/////////////////////////////////////////////////////////////////////////
0:                    action = wireFormat.parseAction(data);
0:                    headers = wireFormat.parseHeaders(data);
0:                            contentLength = wireFormat.parseContentLength(contentLengthHeader);
1:                    } catch (ProtocolException e) {
1:                        transport.doConsume(new StompFrameError(e));
1:                        return;
1:                    }
/////////////////////////////////////////////////////////////////////////
1:                        if (currentCommand.size() > wireFormat.getMaxDataLength()) {
0:                            transport.doConsume(new StompFrameError(new ProtocolException("The maximum data length was exceeded", true)));
1:                            return;
1:                        }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:78265ea
/////////////////////////////////////////////////////////////////////////
1:     boolean awaitingCommandStart = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:                // skip heart beat commands.
1:                if (awaitingCommandStart && b == '\n') {
1:                    continue;
1:                } else {
1:                    awaitingCommandStart = false;   // non-newline indicates next frame.
1:                }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         awaitingCommandStart = true;
commit:46824ce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.DataByteArrayInputStream;
1: 
/////////////////////////////////////////////////////////////////////////
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:        int i = 0;
1:        int b;
1:        while(i++ < readSize) {
1:            b = input.read();
1:            // skip repeating nulls
1:            if (!processedHeaders && previousByte == 0 && b == 0) {
1:                continue;
1:            }
1:            if (!processedHeaders) {
1:                currentCommand.write(b);
1:                // end of headers section, parse action and header
0:                if (previousByte == '\n' && b == '\n') {
0:                    if (transport.getWireFormat() instanceof StompWireFormat) {
1:                        DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
0:                        action = ((StompWireFormat)transport.getWireFormat()).parseAction(data);
0:                        headers = ((StompWireFormat)transport.getWireFormat()).parseHeaders(data);
1:                        String contentLengthHeader = headers.get(Stomp.Headers.CONTENT_LENGTH);
0:                        if (contentLengthHeader != null) {
0:                            contentLength = ((StompWireFormat)transport.getWireFormat()).parseContentLength(contentLengthHeader);
1:                            contentLength = -1;
1:                    processedHeaders = true;
1:                    currentCommand.reset();
1:            } else {
1: 
1:                if (contentLength == -1) {
1:                    // end of command reached, unmarshal
1:                    if (b == 0) {
1:                        processCommand();
1:                    } else {
1:                        currentCommand.write(b);
1:                    }
1:                } else {
1:                    // read desired content length
1:                    if (readLength++ == contentLength) {
1:                        processCommand();
1:                        readLength = 0;
1:                    } else {
1:                        currentCommand.write(b);
1:                    }
1:                }
1:            }
1: 
1:            previousByte = b;
1:        }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a54fa4b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     String version = Stomp.DEFAULT_VERSION;
/////////////////////////////////////////////////////////////////////////
0:                    StompWireFormat wf = (StompWireFormat) transport.getWireFormat();
0:                    DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
0:                    action = wf.parseAction(data);
0:                    headers = wf.parseHeaders(data);
1:                    try {
0:                        if (action.equals(Stomp.Commands.CONNECT) || action.equals(Stomp.Commands.STOMP)) {
0:                            wf.setStompVersion(detectVersion(headers));
1:                        }
0:                            contentLength = wf.parseContentLength(contentLengthHeader);
0:                    } catch (ProtocolException ignore) {}
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static String detectVersion(Map<String, String> headers) throws ProtocolException {
1:         String accepts = headers.get(Stomp.Headers.Connect.ACCEPT_VERSION);
1: 
1:         if (accepts == null) {
1:             accepts = Stomp.DEFAULT_VERSION;
1:         }
1:         HashSet<String> acceptsVersions = new HashSet<String>(Arrays.asList(accepts.trim().split(Stomp.COMMA)));
1:         acceptsVersions.retainAll(Arrays.asList(Stomp.SUPPORTED_PROTOCOL_VERSIONS));
1:         if (acceptsVersions.isEmpty()) {
1:             throw new ProtocolException("Invalid Protocol version[" + accepts +"], supported versions are: " +
1:                     Arrays.toString(Stomp.SUPPORTED_PROTOCOL_VERSIONS), true);
1:         } else {
1:             return Collections.max(acceptsVersions);
1:         }
1:     }
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
0: import org.apache.activemq.transport.tcp.TcpTransport;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.DataByteArrayInputStream;
0: import org.apache.activemq.wireformat.WireFormat;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.util.HashMap;
1: 
1: public class StompCodec {
1: 
1:     TcpTransport transport;
1: 
1:     ByteArrayOutputStream currentCommand = new ByteArrayOutputStream();
1:     boolean processedHeaders = false;
1:     String action;
1:     HashMap<String, String> headers;
1:     int contentLength = -1;
1:     int readLength = 0;
1:     int previousByte = -1;
1: 
1:     public StompCodec(TcpTransport transport) {
1:         this.transport = transport;
1:     }
1: 
1:     public void parse(ByteArrayInputStream input, int readSize) throws Exception {
0:                int i = 0;
0:                int b;
0:                while(i++ < readSize) {
0:                    b = input.read();
0:                    // skip repeating nulls
0:                    if (!processedHeaders && previousByte == 0 && b == 0) {
0:                        continue;
1:                    }
1: 
0:                    if (!processedHeaders) {
0:                        currentCommand.write(b);
0:                        // end of headers section, parse action and header
0:                        if (previousByte == '\n' && b == '\n') {
0:                            if (transport.getWireFormat() instanceof StompWireFormat) {
0:                                DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
0:                                action = ((StompWireFormat)transport.getWireFormat()).parseAction(data);
0:                                headers = ((StompWireFormat)transport.getWireFormat()).parseHeaders(data);
0:                                String contentLengthHeader = headers.get(Stomp.Headers.CONTENT_LENGTH);
0:                                if (contentLengthHeader != null) {
0:                                    contentLength = ((StompWireFormat)transport.getWireFormat()).parseContentLength(contentLengthHeader);
1:                                } else {
1:                                    contentLength = -1;
1:                                }
1:                            }
0:                            processedHeaders = true;
1:                            currentCommand.reset();
1:                        }
1:                    } else {
1: 
0:                        if (contentLength == -1) {
0:                            // end of command reached, unmarshal
0:                            if (b == 0) {
0:                                processCommand();
1:                            } else {
0:                                currentCommand.write(b);
1:                            }
1:                        } else {
0:                            // read desired content length
0:                            if (readLength++ == contentLength) {
0:                                processCommand();
0:                                readLength = 0;
1:                            } else {
0:                                currentCommand.write(b);
1:                            }
1:                        }
1:                    }
1: 
0:                    previousByte = b;
1:                }
1:     }
1: 
1:     protected void processCommand() throws Exception {
1:         StompFrame frame = new StompFrame(action, headers, currentCommand.toByteArray());
1:         transport.doConsume(frame);
1:         processedHeaders = false;
1:         currentCommand.reset();
1:         contentLength = -1;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e32ff5c
/////////////////////////////////////////////////////////////////////////
1:     final static byte[] crlfcrlf = new byte[]{'\r','\n','\r','\n'};
/////////////////////////////////////////////////////////////////////////
1:                if (b == '\n' && (previousByte == '\n' || currentCommand.endsWith(crlfcrlf))) {
commit:93a379f
/////////////////////////////////////////////////////////////////////////
1:                        if ((action.equals(Stomp.Commands.SEND) || action.equals(Stomp.Responses.MESSAGE)) && contentLengthHeader != null) {
============================================================================