1:cc6213e: /**
1:cc6213e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cc6213e:  * contributor license agreements.  See the NOTICE file distributed with
1:cc6213e:  * this work for additional information regarding copyright ownership.
1:cc6213e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cc6213e:  * (the "License"); you may not use this file except in compliance with
1:cc6213e:  * the License.  You may obtain a copy of the License at
1:cc6213e:  *
1:cc6213e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cc6213e:  *
1:cc6213e:  * Unless required by applicable law or agreed to in writing, software
1:cc6213e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cc6213e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cc6213e:  * See the License for the specific language governing permissions and
1:cc6213e:  * limitations under the License.
1:cc6213e:  */
1:cc6213e: package org.apache.activemq.bugs;
1:cc6213e: 
1:cc6213e: import static org.junit.Assert.assertEquals;
1:cc6213e: import static org.junit.Assert.assertNotNull;
1:cc6213e: import static org.junit.Assert.assertTrue;
1:cc6213e: import static org.junit.Assert.fail;
1:cc6213e: 
1:cc6213e: import java.io.File;
1:cc6213e: import java.io.IOException;
1:cc6213e: import java.util.Arrays;
1:cc6213e: import java.util.concurrent.CountDownLatch;
1:cc6213e: import java.util.concurrent.TimeUnit;
1:cc6213e: import java.util.concurrent.atomic.AtomicInteger;
1:cc6213e: 
1:cc6213e: import javax.jms.BytesMessage;
1:cc6213e: import javax.jms.Connection;
1:cc6213e: import javax.jms.DeliveryMode;
1:cc6213e: import javax.jms.JMSException;
1:cc6213e: import javax.jms.Message;
1:cc6213e: import javax.jms.MessageConsumer;
1:cc6213e: import javax.jms.MessageProducer;
1:cc6213e: import javax.jms.Queue;
1:cc6213e: import javax.jms.Session;
1:cc6213e: import javax.management.MalformedObjectNameException;
1:cc6213e: import javax.management.ObjectName;
1:cc6213e: 
1:cc6213e: import org.apache.activemq.ActiveMQConnectionFactory;
1:cc6213e: import org.apache.activemq.broker.BrokerService;
1:cc6213e: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:cc6213e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:cc6213e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cc6213e: import org.apache.activemq.store.kahadb.KahaDBStore;
1:cc6213e: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1:cc6213e: import org.apache.activemq.util.Wait;
1:cc6213e: import org.apache.activemq.util.Wait.Condition;
1:cc6213e: import org.junit.After;
1:cc6213e: import org.junit.Before;
1:cc6213e: import org.junit.Rule;
1:cc6213e: import org.junit.Test;
1:cc6213e: import org.junit.rules.TestName;
1:cc6213e: import org.slf4j.Logger;
1:cc6213e: import org.slf4j.LoggerFactory;
1:cc6213e: 
1:cc6213e: /**
1:cc6213e:  * Test behavior of senders when broker side producer flow control kicks in.
1:cc6213e:  */
1:cc6213e: public class AMQ5712Test {
1:cc6213e: 
1:cc6213e:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5712Test.class);
1:cc6213e: 
1:cc6213e:     @Rule public TestName name = new TestName();
1:cc6213e: 
1:cc6213e:     private BrokerService brokerService;
1:cc6213e:     private Connection connection;
1:cc6213e: 
1:cc6213e:     @Before
1:cc6213e:     public void setUp() throws Exception {
1:cc6213e:         brokerService = createBroker();
1:cc6213e:         brokerService.start();
1:cc6213e:         brokerService.waitUntilStarted();
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     @After
1:cc6213e:     public void tearDown() throws Exception {
1:cc6213e:         if (connection != null) {
1:cc6213e:             try {
1:cc6213e:                 connection.close();
1:cc6213e:             } catch (Exception e) {}
1:cc6213e:         }
1:cc6213e: 
1:cc6213e:         if (brokerService != null) {
1:cc6213e:             brokerService.stop();
1:cc6213e:             brokerService.waitUntilStopped();
1:cc6213e:             brokerService = null;
1:cc6213e:         }
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     private Connection createConnection() throws Exception {
1:cc6213e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:cc6213e:         factory.setAlwaysSyncSend(true);
1:cc6213e:         return factory.createConnection();
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     @Test(timeout = 120000)
1:cc6213e:     public void test() throws Exception {
1:cc6213e:         connection = createConnection();
1:cc6213e:         connection.start();
1:cc6213e: 
1:cc6213e:         final int MSG_COUNT = 100;
1:cc6213e: 
1:cc6213e:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:cc6213e:         final Queue queue = session.createQueue(name.getMethodName());
1:cc6213e:         MessageProducer producer = session.createProducer(queue);
1:cc6213e:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:cc6213e: 
1:cc6213e:         final QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1:cc6213e: 
1:cc6213e:         byte[] payload = new byte[65535];
1:cc6213e:         Arrays.fill(payload, (byte) 255);
1:cc6213e:         final CountDownLatch done = new CountDownLatch(1);
1:cc6213e:         final AtomicInteger counter = new AtomicInteger();
1:cc6213e: 
1:cc6213e:         Thread purge = new Thread(new Runnable() {
1:cc6213e: 
1:cc6213e:             @Override
1:cc6213e:             public void run() {
1:cc6213e:                 try {
1:cc6213e:                     while (!done.await(5, TimeUnit.SECONDS)) {
1:cc6213e:                         if (queueView.getBlockedSends() > 0 && queueView.getQueueSize() > 0) {
1:cc6213e:                             long queueSize = queueView.getQueueSize();
1:cc6213e:                             LOG.info("Queue send blocked at {} messages", queueSize);
1:cc6213e:                             MessageConsumer consumer = session.createConsumer(queue);
1:cc6213e:                             for (int i = 0; i < queueSize; i++) {
1:cc6213e:                                 Message message = consumer.receive(60000);
1:cc6213e:                                 if (message != null) {
1:cc6213e:                                     counter.incrementAndGet();
1:cc6213e:                                     message.acknowledge();
1:cc6213e:                                 } else {
1:cc6213e:                                     LOG.warn("Got null message when none as expected.");
1:cc6213e:                                 }
1:cc6213e:                             }
1:cc6213e:                             consumer.close();
1:cc6213e:                         }
1:cc6213e:                     }
1:cc6213e:                 } catch (Exception ex) {
1:cc6213e:                 }
1:cc6213e:             }
1:cc6213e:         });
1:cc6213e:         purge.start();
1:cc6213e: 
1:cc6213e:         for (int i = 0; i < MSG_COUNT; i++) {
1:cc6213e:             BytesMessage message = session.createBytesMessage();
1:cc6213e:             message.writeBytes(payload);
1:cc6213e:             producer.send(message);
1:cc6213e:             LOG.info("sent message: {}", i);
1:cc6213e:         }
1:cc6213e: 
1:cc6213e:         done.countDown();
1:cc6213e:         purge.join(60000);
1:cc6213e:         if (purge.isAlive()) {
1:cc6213e:             fail("Consumer thread should have read initial batch and completed.");
1:cc6213e:         }
1:cc6213e: 
1:cc6213e:         //wait for processed acked messages
1:cc6213e:         assertTrue(Wait.waitFor(new Condition() {
1:cc6213e:             @Override
1:cc6213e:             public boolean isSatisified() throws Exception {
1:cc6213e:                 return queueView.getDequeueCount() == counter.get();
1:cc6213e:             }
1:cc6213e:         }));
1:cc6213e: 
1:cc6213e:         long remainingQueued = queueView.getQueueSize();
1:cc6213e:         LOG.info("Remaining messages to consume: {}", remainingQueued);
1:cc6213e:         assertEquals(remainingQueued, MSG_COUNT - counter.get());
1:cc6213e: 
1:cc6213e:         MessageConsumer consumer = session.createConsumer(queue);
1:cc6213e:         for (int i = counter.get(); i < MSG_COUNT; i++) {
1:cc6213e:             Message message = consumer.receive(5000);
1:cc6213e:             assertNotNull("Should not get null message", consumer);
1:cc6213e:             counter.incrementAndGet();
1:cc6213e:             message.acknowledge();
1:cc6213e:             LOG.info("Read message: {}", i);
1:cc6213e:         }
1:cc6213e: 
1:cc6213e:         assertEquals("Should consume all messages", MSG_COUNT, counter.get());
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     protected BrokerService createBroker() throws Exception {
1:cc6213e:         BrokerService answer = new BrokerService();
1:cc6213e: 
1:cc6213e:         KahaDBStore persistence = createStore(true);
1:cc6213e:         persistence.setJournalMaxFileLength(1024 * 1024 * 1);
1:cc6213e: 
1:cc6213e:         answer.setPersistent(true);
1:cc6213e:         answer.setPersistenceAdapter(persistence);
1:cc6213e:         answer.setDeleteAllMessagesOnStartup(true);
1:cc6213e:         answer.getSystemUsage().getMemoryUsage().setLimit(1024 * 1024 * 6);
1:cc6213e:         answer.getSystemUsage().getTempUsage().setLimit(1024 * 1024 * 5);
1:cc6213e:         answer.getSystemUsage().getStoreUsage().setLimit(1024 * 1024 * 5);
1:cc6213e:         answer.setUseJmx(true);
1:cc6213e:         answer.getManagementContext().setCreateConnector(false);
1:cc6213e:         answer.setSchedulerSupport(false);
1:cc6213e:         answer.setAdvisorySupport(false);
1:cc6213e: 
1:cc6213e:         PListStoreImpl tempStore = ((PListStoreImpl)answer.getSystemUsage().getTempUsage().getStore());
1:cc6213e:         tempStore.setCleanupInterval(10000);
1:cc6213e:         tempStore.setJournalMaxFileLength(1024 * 1024 * 2);
1:cc6213e: 
1:cc6213e:         PolicyEntry policy = new PolicyEntry();
1:cc6213e:         policy.setProducerFlowControl(false);
1:cc6213e: 
1:cc6213e:         PolicyMap policyMap = new PolicyMap();
1:cc6213e:         policyMap.setDefaultEntry(policy);
1:cc6213e: 
1:cc6213e:         answer.setDestinationPolicy(policyMap);
1:cc6213e: 
1:cc6213e:         return answer;
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     private KahaDBStore createStore(boolean delete) throws IOException {
1:cc6213e:         KahaDBStore kaha = new KahaDBStore();
1:cc6213e:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:cc6213e:         if( delete ) {
1:cc6213e:             kaha.deleteAllMessages();
1:cc6213e:         }
1:cc6213e:         return kaha;
1:cc6213e:     }
1:cc6213e: 
1:cc6213e:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:cc6213e:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:cc6213e:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:cc6213e:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:cc6213e:         return proxy;
1:cc6213e:     }
1:cc6213e: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc6213e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test behavior of senders when broker side producer flow control kicks in.
1:  */
1: public class AMQ5712Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5712Test.class);
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private BrokerService brokerService;
1:     private Connection connection;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {}
1:         }
1: 
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:             brokerService = null;
1:         }
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         factory.setAlwaysSyncSend(true);
1:         return factory.createConnection();
1:     }
1: 
1:     @Test(timeout = 120000)
1:     public void test() throws Exception {
1:         connection = createConnection();
1:         connection.start();
1: 
1:         final int MSG_COUNT = 100;
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final Queue queue = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         final QueueViewMBean queueView = getProxyToQueue(name.getMethodName());
1: 
1:         byte[] payload = new byte[65535];
1:         Arrays.fill(payload, (byte) 255);
1:         final CountDownLatch done = new CountDownLatch(1);
1:         final AtomicInteger counter = new AtomicInteger();
1: 
1:         Thread purge = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     while (!done.await(5, TimeUnit.SECONDS)) {
1:                         if (queueView.getBlockedSends() > 0 && queueView.getQueueSize() > 0) {
1:                             long queueSize = queueView.getQueueSize();
1:                             LOG.info("Queue send blocked at {} messages", queueSize);
1:                             MessageConsumer consumer = session.createConsumer(queue);
1:                             for (int i = 0; i < queueSize; i++) {
1:                                 Message message = consumer.receive(60000);
1:                                 if (message != null) {
1:                                     counter.incrementAndGet();
1:                                     message.acknowledge();
1:                                 } else {
1:                                     LOG.warn("Got null message when none as expected.");
1:                                 }
1:                             }
1:                             consumer.close();
1:                         }
1:                     }
1:                 } catch (Exception ex) {
1:                 }
1:             }
1:         });
1:         purge.start();
1: 
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBytes(payload);
1:             producer.send(message);
1:             LOG.info("sent message: {}", i);
1:         }
1: 
1:         done.countDown();
1:         purge.join(60000);
1:         if (purge.isAlive()) {
1:             fail("Consumer thread should have read initial batch and completed.");
1:         }
1: 
1:         //wait for processed acked messages
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getDequeueCount() == counter.get();
1:             }
1:         }));
1: 
1:         long remainingQueued = queueView.getQueueSize();
1:         LOG.info("Remaining messages to consume: {}", remainingQueued);
1:         assertEquals(remainingQueued, MSG_COUNT - counter.get());
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         for (int i = counter.get(); i < MSG_COUNT; i++) {
1:             Message message = consumer.receive(5000);
1:             assertNotNull("Should not get null message", consumer);
1:             counter.incrementAndGet();
1:             message.acknowledge();
1:             LOG.info("Read message: {}", i);
1:         }
1: 
1:         assertEquals("Should consume all messages", MSG_COUNT, counter.get());
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1: 
1:         KahaDBStore persistence = createStore(true);
1:         persistence.setJournalMaxFileLength(1024 * 1024 * 1);
1: 
1:         answer.setPersistent(true);
1:         answer.setPersistenceAdapter(persistence);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.getSystemUsage().getMemoryUsage().setLimit(1024 * 1024 * 6);
1:         answer.getSystemUsage().getTempUsage().setLimit(1024 * 1024 * 5);
1:         answer.getSystemUsage().getStoreUsage().setLimit(1024 * 1024 * 5);
1:         answer.setUseJmx(true);
1:         answer.getManagementContext().setCreateConnector(false);
1:         answer.setSchedulerSupport(false);
1:         answer.setAdvisorySupport(false);
1: 
1:         PListStoreImpl tempStore = ((PListStoreImpl)answer.getSystemUsage().getTempUsage().getStore());
1:         tempStore.setCleanupInterval(10000);
1:         tempStore.setJournalMaxFileLength(1024 * 1024 * 2);
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setProducerFlowControl(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policy);
1: 
1:         answer.setDestinationPolicy(policyMap);
1: 
1:         return answer;
1:     }
1: 
1:     private KahaDBStore createStore(boolean delete) throws IOException {
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         if( delete ) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================