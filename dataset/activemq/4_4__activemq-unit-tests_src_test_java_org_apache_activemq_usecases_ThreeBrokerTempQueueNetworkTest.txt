1:a677c21: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
3:a677c21: 
1:a677c21: import java.net.URI;
1:a677c21: import java.util.Iterator;
1:6a12e9c: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TemporaryQueue;
1:6a12e9c: 
1:a677c21: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:6a12e9c: import org.apache.activemq.network.NetworkConnector;
1:230a86c: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:230a86c: public class ThreeBrokerTempQueueNetworkTest extends JmsMultipleBrokersTestSupport {
1:230a86c:     protected static final int MESSAGE_COUNT = 100;
1:6a12e9c:     boolean enableTempDestinationBridging = true;
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * BrokerA -> BrokerB -> BrokerC
1:a677c21:      */
1:230a86c:     public void testTempQueueCleanup() throws Exception {
1:a677c21:         // Setup broker networks
1:230a86c:         bridgeBrokers("BrokerA", "BrokerB", false, 2);
1:230a86c:         bridgeBrokers("BrokerB", "BrokerC", false, 2);
1:a677c21:         startAllBrokers();
1:4743a20:         BrokerItem brokerItem = brokers.get("BrokerC");
1:230a86c:         Connection conn = brokerItem.createConnection();
1:a677c21:         conn.start();
1:230a86c:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         TemporaryQueue tempQ = sess.createTemporaryQueue();
1:a677c21:         Thread.sleep(5000);
1:4743a20:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:4743a20:             BrokerItem bi = i.next();
1:230a86c:             assertEquals("No queues on broker " + bi.broker.getBrokerName(), 1, bi.broker.getAdminView().getTemporaryQueues().length);
2:a677c21:         }
1:a677c21:         tempQ.delete();
1:a677c21:         Thread.sleep(2000);
1:4743a20:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:4743a20:             BrokerItem bi = i.next();
1:230a86c:             assertEquals("Temp queue left behind on broker " + bi.broker.getBrokerName(), 0, bi.broker.getAdminView().getTemporaryQueues().length);
1:a677c21:         }
1:a677c21:     }
1:6a12e9c: 
1:a677c21:     // this actually uses 4 brokers ...
1:230a86c:     public void testTempQueueRecovery() throws Exception {
1:a677c21:         // Setup broker networks
1:230a86c:         bridgeBrokers("BrokerA", "BrokerB", false, 3);
1:230a86c:         bridgeBrokers("BrokerB", "BrokerC", false, 3);
1:a677c21:         startAllBrokers();
1:4743a20:         BrokerItem brokerItem = brokers.get("BrokerC");
1:230a86c:         Connection conn = brokerItem.createConnection();
1:a677c21:         conn.start();
1:230a86c:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         TemporaryQueue tempQ = sess.createTemporaryQueue();
1:a677c21:         Thread.sleep(5000);
1:4743a20:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:4743a20:             BrokerItem bi = i.next();
1:230a86c:             assertEquals("No queues on broker " + bi.broker.getBrokerName(), 1, bi.broker.getAdminView().getTemporaryQueues().length);
1:a677c21:         }
1:a677c21:         createBroker(new URI("broker:(tcp://localhost:61619)/BrokerD?persistent=false&useJmx=true"));
1:230a86c:         bridgeBrokers("BrokerD", "BrokerA", false, 3);
1:4743a20:         BrokerItem newBroker = brokers.get("BrokerD");
1:a677c21:         newBroker.broker.start();
1:a677c21:         Thread.sleep(1000);
1:230a86c:         assertEquals("No queues on broker D", 1, newBroker.broker.getAdminView().getTemporaryQueues().length);
1:a677c21:         tempQ.delete();
1:a677c21:         Thread.sleep(2000);
1:4743a20:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:4743a20:             BrokerItem bi = i.next();
1:230a86c:             assertEquals("Temp queue left behind on broker " + bi.broker.getBrokerName(), 0, bi.broker.getAdminView().getTemporaryQueues().length);
1:a677c21:         }
1:a677c21:     }
1:230a86c: 
1:230a86c:     public void testTempDisable() throws Exception {
1:230a86c:         enableTempDestinationBridging = false;
1:230a86c:         try {
1:230a86c:             testTempQueueCleanup();
1:230a86c:         } catch (Throwable e) {
1:230a86c:             // Expecting an error
1:230a86c:             return;
1:230a86c:         }
1:230a86c:         fail("Test should have failed since temp queues are disabled.");
1:6a12e9c:     }
1:6a12e9c: 
1:4743a20:     @Override
1:230a86c:     public void setUp() throws Exception {
1:a677c21:         super.setAutoFail(true);
1:a677c21:         super.setUp();
1:a677c21:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=true"));
1:a677c21:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=true"));
1:a677c21:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC?persistent=false&useJmx=true"));
1:6a12e9c:     }
1:6a12e9c: 
1:6a12e9c:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception {
1:8b0bb33:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true);
1:230a86c:         connector.setBridgeTempDestinations(enableTempDestinationBridging);
1:230a86c:         return connector;
1:6a12e9c:     }
1:230a86c: 
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         BrokerItem brokerItem = brokers.get("BrokerC");
1:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:             BrokerItem bi = i.next();
1:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:             BrokerItem bi = i.next();
/////////////////////////////////////////////////////////////////////////
1:         BrokerItem brokerItem = brokers.get("BrokerC");
1:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:             BrokerItem bi = i.next();
1:         BrokerItem newBroker = brokers.get("BrokerD");
1:         for (Iterator<BrokerItem> i = brokers.values().iterator(); i.hasNext();) {
1:             BrokerItem bi = i.next();
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class ThreeBrokerTempQueueNetworkTest extends JmsMultipleBrokersTestSupport {
1:     protected static final int MESSAGE_COUNT = 100;
1:     public void testTempQueueCleanup() throws Exception {
1:         bridgeBrokers("BrokerA", "BrokerB", false, 2);
1:         bridgeBrokers("BrokerB", "BrokerC", false, 2);
0:         BrokerItem brokerItem = (BrokerItem)brokers.get("BrokerC");
1:         Connection conn = brokerItem.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue tempQ = sess.createTemporaryQueue();
0:         for (Iterator i = brokers.values().iterator(); i.hasNext();) {
0:             BrokerItem bi = (BrokerItem)i.next();
1:             assertEquals("No queues on broker " + bi.broker.getBrokerName(), 1, bi.broker.getAdminView().getTemporaryQueues().length);
0:         for (Iterator i = brokers.values().iterator(); i.hasNext();) {
0:             BrokerItem bi = (BrokerItem)i.next();
1:             assertEquals("Temp queue left behind on broker " + bi.broker.getBrokerName(), 0, bi.broker.getAdminView().getTemporaryQueues().length);
1:     public void testTempQueueRecovery() throws Exception {
1:         bridgeBrokers("BrokerA", "BrokerB", false, 3);
1:         bridgeBrokers("BrokerB", "BrokerC", false, 3);
0:         BrokerItem brokerItem = (BrokerItem)brokers.get("BrokerC");
1:         Connection conn = brokerItem.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         TemporaryQueue tempQ = sess.createTemporaryQueue();
0:         for (Iterator i = brokers.values().iterator(); i.hasNext();) {
0:             BrokerItem bi = (BrokerItem)i.next();
1:             assertEquals("No queues on broker " + bi.broker.getBrokerName(), 1, bi.broker.getAdminView().getTemporaryQueues().length);
1:         bridgeBrokers("BrokerD", "BrokerA", false, 3);
0:         BrokerItem newBroker = (BrokerItem)brokers.get("BrokerD");
1:         assertEquals("No queues on broker D", 1, newBroker.broker.getAdminView().getTemporaryQueues().length);
0:         for (Iterator i = brokers.values().iterator(); i.hasNext();) {
0:             BrokerItem bi = (BrokerItem)i.next();
1:             assertEquals("Temp queue left behind on broker " + bi.broker.getBrokerName(), 0, bi.broker.getAdminView().getTemporaryQueues().length);
1: 
1:     public void testTempDisable() throws Exception {
1:         enableTempDestinationBridging = false;
1:         try {
1:             testTempQueueCleanup();
1:         } catch (Throwable e) {
1:             // Expecting an error
1:             return;
1:         }
1:         fail("Test should have failed since temp queues are disabled.");
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL);
1:         connector.setBridgeTempDestinations(enableTempDestinationBridging);
1:         return connector;
1: 
commit:6a12e9c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import org.apache.activemq.network.NetworkConnector;
1:     boolean enableTempDestinationBridging = true;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void testTempDisable() throws Exception{
0:     	enableTempDestinationBridging=false;
0:     	try {
0:     		testTempQueueCleanup();
0:     	} catch (Throwable e) {
0:     		// Expecting an error
0:     		return;
1:     	}
0:     	fail("Test should have failed since temp queues are disabled.");
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception {
0:     	NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL);
0:     	connector.setBridgeTempDestinations(enableTempDestinationBridging);
0:     	return connector;
1:     }
1:     
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.Iterator;
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class ThreeBrokerTempQueueNetworkTest extends JmsMultipleBrokersTestSupport{
0:     protected static final int MESSAGE_COUNT=100;
1: 
1:     /**
1:      * BrokerA -> BrokerB -> BrokerC
1:      */
0:     public void testTempQueueCleanup() throws Exception{
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA","BrokerB",false,2);
0:         bridgeBrokers("BrokerB","BrokerC",false,2);
1:         startAllBrokers();
0:         BrokerItem brokerItem=(BrokerItem) brokers.get("BrokerC");
0:         Connection conn=brokerItem.createConnection();
1:         conn.start();
0:         Session sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         TemporaryQueue tempQ=sess.createTemporaryQueue();
1:         Thread.sleep(5000);
0:         for(Iterator i=brokers.values().iterator();i.hasNext();){
0:             BrokerItem bi=(BrokerItem) i.next();
0:             assertEquals("No queues on broker "+bi.broker.getBrokerName(),1,bi.broker.getAdminView()
0:                             .getTemporaryQueues().length);
1:         }
1:         tempQ.delete();
1:         Thread.sleep(2000);
0:         for(Iterator i=brokers.values().iterator();i.hasNext();){
0:             BrokerItem bi=(BrokerItem) i.next();
0:             assertEquals("Temp queue left behind on broker "+bi.broker.getBrokerName(),0,bi.broker.getAdminView()
0:                             .getTemporaryQueues().length);
1:         }
1:     }
1: 
1:     // this actually uses 4 brokers ...
0:     public void testTempQueueRecovery() throws Exception{
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA","BrokerB",false,3);
0:         bridgeBrokers("BrokerB","BrokerC",false,3);
1:         startAllBrokers();
0:         BrokerItem brokerItem=(BrokerItem) brokers.get("BrokerC");
0:         Connection conn=brokerItem.createConnection();
1:         conn.start();
0:         Session sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         TemporaryQueue tempQ=sess.createTemporaryQueue();
1:         Thread.sleep(5000);
0:         for(Iterator i=brokers.values().iterator();i.hasNext();){
0:             BrokerItem bi=(BrokerItem) i.next();
0:             assertEquals("No queues on broker "+bi.broker.getBrokerName(),1,bi.broker.getAdminView()
0:                             .getTemporaryQueues().length);
1:         }
1:         createBroker(new URI("broker:(tcp://localhost:61619)/BrokerD?persistent=false&useJmx=true"));
0:         bridgeBrokers("BrokerD","BrokerA",false,3);
0:         BrokerItem newBroker=(BrokerItem) brokers.get("BrokerD");
1:         newBroker.broker.start();
1:         Thread.sleep(1000);
0:         assertEquals("No queues on broker D",1,newBroker.broker.getAdminView().getTemporaryQueues().length);
1:         tempQ.delete();
1:         Thread.sleep(2000);
0:         for(Iterator i=brokers.values().iterator();i.hasNext();){
0:             BrokerItem bi=(BrokerItem) i.next();
0:             assertEquals("Temp queue left behind on broker "+bi.broker.getBrokerName(),0,bi.broker.getAdminView()
0:                             .getTemporaryQueues().length);
1:         }
1:     }
1: 
0:     public void setUp() throws Exception{
1:         super.setAutoFail(true);
1:         super.setUp();
1:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=true"));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=true"));
1:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC?persistent=false&useJmx=true"));
1:     }
1: }
============================================================================