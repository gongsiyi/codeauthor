1:74a5381: /**
1:74a5381:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74a5381:  * contributor license agreements.  See the NOTICE file distributed with
1:74a5381:  * this work for additional information regarding copyright ownership.
1:74a5381:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74a5381:  * (the "License"); you may not use this file except in compliance with
1:74a5381:  * the License.  You may obtain a copy of the License at
1:74a5381:  *
1:74a5381:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74a5381:  *
1:74a5381:  * Unless required by applicable law or agreed to in writing, software
1:74a5381:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74a5381:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74a5381:  * See the License for the specific language governing permissions and
1:74a5381:  * limitations under the License.
1:74a5381:  */
1:74a5381: package org.apache.activemq.bugs;
1:74a5381: 
1:74a5381: import org.apache.activemq.ActiveMQConnection;
1:74a5381: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a5381: import org.apache.activemq.JmsTestSupport;
1:74a5381: import org.apache.activemq.ScheduledMessage;
1:74a5381: import org.apache.activemq.broker.BrokerService;
1:74a5381: import org.apache.activemq.broker.TransportConnector;
1:74a5381: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:74a5381: import org.apache.activemq.broker.region.policy.PolicyMap;
1:74a5381: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:74a5381: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:74a5381: import org.apache.activemq.command.ActiveMQQueue;
1:74a5381: import org.apache.activemq.util.DefaultTestAppender;
1:74a5381: import org.apache.activemq.util.Wait;
1:74a5381: import org.apache.log4j.Level;
1:74a5381: import org.apache.log4j.spi.LoggingEvent;
1:74a5381: import org.slf4j.Logger;
1:74a5381: import org.slf4j.LoggerFactory;
1:74a5381: 
1:74a5381: import javax.jms.ConnectionFactory;
1:74a5381: import javax.jms.MessageConsumer;
1:74a5381: import javax.jms.MessageProducer;
1:74a5381: import javax.jms.Session;
1:74a5381: import javax.jms.TextMessage;
1:74a5381: import java.util.concurrent.atomic.AtomicBoolean;
1:74a5381: import java.util.concurrent.atomic.AtomicInteger;
1:74a5381: 
1:74a5381: public class AMQ6463Test extends JmsTestSupport {
1:74a5381:     static final Logger LOG = LoggerFactory.getLogger(AMQ6463Test.class);
1:74a5381:     ActiveMQQueue queueA = new ActiveMQQueue("QUEUE.A");
1:74a5381:     protected TransportConnector connector;
1:74a5381:     protected ActiveMQConnection connection;
1:74a5381:     protected DefaultTestAppender appender;
1:74a5381:     final AtomicInteger errors = new AtomicInteger(0);
1:74a5381:     final AtomicBoolean gotUsageBlocked = new AtomicBoolean();
1:74a5381: 
1:74a5381: 
1:74a5381:     public void testBlockedSechedulerSendNoError() throws Exception {
1:74a5381:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:74a5381:         connection = (ActiveMQConnection)factory.createConnection();
1:74a5381:         connections.add(connection);
1:74a5381:         connection.start();
1:74a5381: 
1:74a5381:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:74a5381:         final MessageProducer producer = session.createProducer(queueA);
1:74a5381: 
1:74a5381:         TextMessage message = session.createTextMessage("test msg");
1:74a5381:         final int numMessages = 20;
1:74a5381:         long time = 5;
1:74a5381:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:74a5381:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:74a5381:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 5);
1:74a5381:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, numMessages - 1);
1:74a5381: 
1:74a5381:         producer.send(message);
1:74a5381:         producer.close();
1:74a5381: 
1:74a5381:         // lets not consume till producer is blocked
1:030c44a:         assertTrue("got blocked event", Wait.waitFor(new Wait.Condition() {
1:74a5381:             @Override
1:74a5381:             public boolean isSatisified() throws Exception {
1:74a5381:                 return gotUsageBlocked.get();
1:74a5381:             }
1:030c44a:         }));
1:74a5381: 
1:74a5381:         MessageConsumer consumer = session.createConsumer(queueA);
1:74a5381:         TextMessage msg;
1:74a5381:         for (int idx = 0; idx < numMessages; ++idx) {
1:74a5381:         	msg = (TextMessage) consumer.receive(10000);
1:74a5381:         	assertNotNull("received: " + idx, msg);
1:74a5381:         	msg.acknowledge();
1:74a5381:         }
1:74a5381:         assertTrue("no errors in the log", errors.get() == 0);
1:74a5381:         assertTrue("got blocked message", gotUsageBlocked.get());
1:74a5381:     }
1:74a5381: 
1:74a5381: 
1:74a5381:     protected BrokerService createBroker() throws Exception {
1:74a5381:         BrokerService service = new BrokerService();
1:74a5381:         service.setPersistent(true);
1:74a5381:         service.setUseJmx(false);
1:74a5381:         service.setSchedulerSupport(true);
1:030c44a:         service.setDeleteAllMessagesOnStartup(true);
1:74a5381: 
1:74a5381:         // Setup a destination policy where it takes only 1 message at a time.
1:74a5381:         PolicyMap policyMap = new PolicyMap();
1:74a5381:         PolicyEntry policy = new PolicyEntry();
1:f5baebb:         policy.setExpireMessagesPeriod(0); // so not to effect memory usage
1:74a5381:         policy.setMemoryLimit(1);
1:74a5381:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:74a5381:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:74a5381:         policy.setProducerFlowControl(true);
1:74a5381:         policyMap.setDefaultEntry(policy);
1:74a5381:         service.setDestinationPolicy(policyMap);
1:74a5381: 
1:74a5381:         connector = service.addConnector("tcp://localhost:0");
1:74a5381:         return service;
1:74a5381:     }
1:74a5381: 
1:74a5381:     public void setUp() throws Exception {
1:74a5381:         setAutoFail(true);
1:74a5381:         DefaultTestAppender appender = new DefaultTestAppender() {
1:74a5381:             @Override
1:74a5381:             public void doAppend(LoggingEvent event) {
1:74a5381:                 if (event.getLevel().equals(Level.ERROR)) {
1:74a5381:                     errors.incrementAndGet();
1:0608175:                 } else if (event.getLevel().equals(Level.WARN) && event.getRenderedMessage().contains("Usage Manager Memory Limit")) {
1:74a5381:                     gotUsageBlocked.set(true);
1:74a5381:                 }
1:74a5381:             }
1:74a5381:         };
1:74a5381:         org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
1:74a5381:         rootLogger.addAppender(appender);
1:74a5381: 
1:74a5381:         super.setUp();
1:74a5381:     }
1:74a5381:     
1:74a5381:     protected void tearDown() throws Exception {
1:74a5381:         org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
1:74a5381:         rootLogger.removeAppender(appender);
1:74a5381: 
1:74a5381:         if (connection != null) {
1:74a5381:             connection.close();
1:74a5381:         }
1:74a5381:         super.tearDown();
1:74a5381:     }
1:74a5381: 
1:74a5381:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:74a5381:         return new ActiveMQConnectionFactory(connector.getConnectUri());
1:74a5381:     }
1:74a5381: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0608175
/////////////////////////////////////////////////////////////////////////
1:                 } else if (event.getLevel().equals(Level.WARN) && event.getRenderedMessage().contains("Usage Manager Memory Limit")) {
commit:f5baebb
/////////////////////////////////////////////////////////////////////////
1:         policy.setExpireMessagesPeriod(0); // so not to effect memory usage
commit:030c44a
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("got blocked event", Wait.waitFor(new Wait.Condition() {
1:         }));
/////////////////////////////////////////////////////////////////////////
1:         service.setDeleteAllMessagesOnStartup(true);
commit:74a5381
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.activemq.util.Wait;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: public class AMQ6463Test extends JmsTestSupport {
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ6463Test.class);
1:     ActiveMQQueue queueA = new ActiveMQQueue("QUEUE.A");
1:     protected TransportConnector connector;
1:     protected ActiveMQConnection connection;
1:     protected DefaultTestAppender appender;
1:     final AtomicInteger errors = new AtomicInteger(0);
1:     final AtomicBoolean gotUsageBlocked = new AtomicBoolean();
1: 
1: 
1:     public void testBlockedSechedulerSendNoError() throws Exception {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)createConnectionFactory();
1:         connection = (ActiveMQConnection)factory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(queueA);
1: 
1:         TextMessage message = session.createTextMessage("test msg");
1:         final int numMessages = 20;
1:         long time = 5;
1:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 5);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, numMessages - 1);
1: 
1:         producer.send(message);
1:         producer.close();
1: 
1:         // lets not consume till producer is blocked
0:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return gotUsageBlocked.get();
1:             }
0:         });
1: 
1:         MessageConsumer consumer = session.createConsumer(queueA);
1:         TextMessage msg;
1:         for (int idx = 0; idx < numMessages; ++idx) {
1:         	msg = (TextMessage) consumer.receive(10000);
1:         	assertNotNull("received: " + idx, msg);
1:         	msg.acknowledge();
1:         }
1:         assertTrue("no errors in the log", errors.get() == 0);
1:         assertTrue("got blocked message", gotUsageBlocked.get());
1:     }
1: 
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(true);
1:         service.setUseJmx(false);
1:         service.setSchedulerSupport(true);
1: 
1:         // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policy.setProducerFlowControl(true);
1:         policyMap.setDefaultEntry(policy);
1:         service.setDestinationPolicy(policyMap);
1: 
1:         connector = service.addConnector("tcp://localhost:0");
1:         return service;
1:     }
1: 
1:     public void setUp() throws Exception {
1:         setAutoFail(true);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().equals(Level.ERROR)) {
1:                     errors.incrementAndGet();
0:                 } else if (event.getLevel().equals(Level.INFO) && event.getRenderedMessage().contains("Usage Manager Memory Limit")) {
1:                     gotUsageBlocked.set(true);
1:                 }
1:             }
1:         };
1:         org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
1:         rootLogger.addAppender(appender);
1: 
1:         super.setUp();
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
1:         rootLogger.removeAppender(appender);
1: 
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connector.getConnectUri());
1:     }
1: }
============================================================================