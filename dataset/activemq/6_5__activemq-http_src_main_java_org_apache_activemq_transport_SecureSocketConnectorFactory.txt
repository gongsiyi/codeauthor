1:39da37d: /**
1:39da37d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39da37d:  * contributor license agreements.  See the NOTICE file distributed with
1:39da37d:  * this work for additional information regarding copyright ownership.
1:39da37d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39da37d:  * (the "License"); you may not use this file except in compliance with
1:39da37d:  * the License.  You may obtain a copy of the License at
1:39da37d:  *
1:39da37d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39da37d:  *
1:39da37d:  * Unless required by applicable law or agreed to in writing, software
1:39da37d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39da37d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39da37d:  * See the License for the specific language governing permissions and
1:39da37d:  * limitations under the License.
1:39da37d:  */
1:39da37d: package org.apache.activemq.transport;
1:3b4aadc: 
1:3b4aadc: import javax.net.ssl.SSLContext;
1:3f82625: 
1:3b4aadc: import org.apache.activemq.broker.SslContext;
1:39da37d: import org.apache.activemq.util.IntrospectionSupport;
1:39da37d: import org.eclipse.jetty.server.Connector;
1:bc2e2d9: import org.eclipse.jetty.server.Server;
1:f44c3d2: import org.eclipse.jetty.server.ServerConnector;
1:39da37d: import org.eclipse.jetty.util.ssl.SslContextFactory;
13:39da37d: 
1:39da37d: public class SecureSocketConnectorFactory extends SocketConnectorFactory {
1:39da37d: 
1:39da37d:     private String keyPassword = System.getProperty("javax.net.ssl.keyPassword");
1:39da37d:     private String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword");
1:39da37d:     private String keyStore = System.getProperty("javax.net.ssl.keyStore");
1:571d452:     private String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword");
1:571d452:     private String trustStore = System.getProperty("javax.net.ssl.trustStore");
1:571d452:     private boolean needClientAuth;
1:571d452:     private boolean wantClientAuth;
1:39da37d:     private String keyStoreType;
1:39da37d:     private String secureRandomCertficateAlgorithm;
1:39da37d:     private String trustCertificateAlgorithm;
1:39da37d:     private String keyCertificateAlgorithm;
1:39da37d:     private String protocol;
1:39da37d:     private String auth;
1:3f82625: 
1:39da37d:     private SslContext context;
1:3f82625:     private SslContextFactory contextFactory;
1:f44c3d2: 
1:3f82625:     public SecureSocketConnectorFactory() {
1:f44c3d2: 
1:3f82625:     }
1:39da37d:     public SecureSocketConnectorFactory(SslContext context) {
1:39da37d:         this.context = context;
1:571d452:     }
1:f44c3d2: 
1:3f82625:     public SecureSocketConnectorFactory(SslContextFactory contextFactory) {
1:3f82625:         this.contextFactory = contextFactory;
1:3f82625:     }
1:3f82625: 
1:39da37d:     @Override
1:bc2e2d9:     public Connector createConnector(Server server) throws Exception {
1:3f82625:         if (getTransportOptions() != null) {
1:3f82625:             IntrospectionSupport.setProperties(this, getTransportOptions());
1:da138e3:         }
1:39da37d: 
1:39da37d:         SSLContext sslContext = context == null ? null : context.getSSLContext();
1:39da37d: 
1:39da37d:         // Get a reference to the current ssl context factory...
1:39da37d: 
1:3f82625:         SslContextFactory factory;
1:3f82625:         if (contextFactory == null) {
1:3f82625:             factory = new SslContextFactory();
1:3f82625:             if (context != null) {
1:3f82625:                 // Should not be using this method since it does not use all of the values
1:3f82625:                 // from the passed SslContext instance.....
1:3f82625:                 factory.setSslContext(sslContext);
1:39da37d: 
1:3f82625:             } else {
1:3f82625:                 if (keyStore != null) {
1:3f82625:                     factory.setKeyStorePath(keyStore);
1:3f82625:                 }
1:3f82625:                 if (keyStorePassword != null) {
1:3f82625:                     factory.setKeyStorePassword(keyStorePassword);
1:3f82625:                 }
1:3f82625:                 // if the keyPassword hasn't been set, default it to the
1:3f82625:                 // key store password
1:3f82625:                 if (keyPassword == null && keyStorePassword != null) {
1:3f82625:                     factory.setKeyStorePassword(keyStorePassword);
1:3f82625:                 }
1:3f82625:                 if (keyStoreType != null) {
1:3f82625:                     factory.setKeyStoreType(keyStoreType);
1:3f82625:                 }
1:3f82625:                 if (secureRandomCertficateAlgorithm != null) {
1:3f82625:                     factory.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
1:3f82625:                 }
1:3f82625:                 if (keyCertificateAlgorithm != null) {
1:3f82625:                     factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
1:3f82625:                 }
1:3f82625:                 if (trustCertificateAlgorithm != null) {
1:3f82625:                     factory.setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
1:3f82625:                 }
1:3f82625:                 if (protocol != null) {
1:3f82625:                     factory.setProtocol(protocol);
1:3f82625:                 }
1:3f82625:                 if (trustStore != null) {
1:3f82625:                     setTrustStore(factory, trustStore);
1:3f82625:                 }
1:3f82625:                 if (trustStorePassword != null) {
1:3f82625:                     factory.setTrustStorePassword(trustStorePassword);
1:3f82625:                 }
1:3f82625:             }
1:3f82625:             factory.setNeedClientAuth(needClientAuth);
1:3f82625:             factory.setWantClientAuth(wantClientAuth);
1:da138e3:         } else {
1:3f82625:             factory = contextFactory;
1:3f82625:         }
1:f44c3d2: 
1:3f82625: 
1:3f82625:         if ("KRB".equals(auth) || "BOTH".equals(auth)
1:3f82625:             && Server.getVersion().startsWith("8")) {
1:f44c3d2:             //return new Krb5AndCertsSslSocketConnector(factory, auth);
1:f44c3d2:             return null;
1:3f82625:         } else {
1:f44c3d2:             ServerConnector connector = new ServerConnector(server, factory);
1:f44c3d2:             server.setStopTimeout(500);
1:f44c3d2:             connector.setStopTimeout(500);
1:f44c3d2:             return connector;
1:3f82625:         }
1:3f82625:     }
1:3f82625:     private void setTrustStore(SslContextFactory factory, String trustStore2) throws Exception {
1:3f82625:         String mname = Server.getVersion().startsWith("8") ? "setTrustStore" : "setTrustStorePath";
1:3f82625:         factory.getClass().getMethod(mname, String.class).invoke(factory, trustStore2);
1:571d452:     }
1:3f82625: 
1:3f82625: 
1:571d452: 
1:39da37d:     // Properties
1:39da37d:     // --------------------------------------------------------------------------------
1:571d452: 
1:39da37d:     public String getKeyStore() {
1:39da37d:         return keyStore;
13:39da37d:     }
1:39da37d: 
1:39da37d:     public void setKeyStore(String keyStore) {
1:39da37d:         this.keyStore = keyStore;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getKeyPassword() {
1:39da37d:         return keyPassword;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setKeyPassword(String keyPassword) {
1:39da37d:         this.keyPassword = keyPassword;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getKeyStoreType() {
1:39da37d:         return keyStoreType;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setKeyStoreType(String keyStoreType) {
1:39da37d:         this.keyStoreType = keyStoreType;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getKeyStorePassword() {
1:39da37d:         return keyStorePassword;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setKeyStorePassword(String keyStorePassword) {
1:39da37d:         this.keyStorePassword = keyStorePassword;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getProtocol() {
1:39da37d:         return protocol;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setProtocol(String protocol) {
1:39da37d:         this.protocol = protocol;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getSecureRandomCertficateAlgorithm() {
1:39da37d:         return secureRandomCertficateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setSecureRandomCertficateAlgorithm(String secureRandomCertficateAlgorithm) {
1:39da37d:         this.secureRandomCertficateAlgorithm = secureRandomCertficateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getKeyCertificateAlgorithm() {
1:39da37d:         return keyCertificateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setKeyCertificateAlgorithm(String keyCertificateAlgorithm) {
1:39da37d:         this.keyCertificateAlgorithm = keyCertificateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public String getTrustCertificateAlgorithm() {
1:39da37d:         return trustCertificateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     public void setTrustCertificateAlgorithm(String trustCertificateAlgorithm) {
1:39da37d:         this.trustCertificateAlgorithm = trustCertificateAlgorithm;
1:39da37d:     }
1:39da37d: 
1:39da37d:     /**
1:39da37d:      * @return the auth
1:39da37d:      */
1:39da37d:     public String getAuth() {
1:39da37d:         return auth;
1:39da37d:     }
1:39da37d: 
1:39da37d:     /**
1:39da37d:      * @param auth the auth to set
1:39da37d:      */
1:39da37d:     public void setAuth(String auth) {
1:39da37d:         this.auth = auth;
1:39da37d:     }
1:571d452: 
1:571d452:     public boolean isWantClientAuth() {
1:571d452:         return wantClientAuth;
1:571d452:     }
1:571d452: 
1:571d452:     public void setWantClientAuth(boolean wantClientAuth) {
1:571d452:         this.wantClientAuth = wantClientAuth;
1:571d452:     }
1:571d452: 
1:571d452:     public boolean isNeedClientAuth() {
1:571d452:         return needClientAuth;
1:571d452:     }
1:571d452: 
1:571d452:     public void setNeedClientAuth(boolean needClientAuth) {
1:571d452:         this.needClientAuth = needClientAuth;
1:571d452:     }
1:571d452: 
1:571d452:     public String getTrustStore() {
1:571d452:         return trustStore;
1:571d452:     }
1:571d452: 
1:571d452:     public void setTrustStore(String trustStore) {
1:571d452:         this.trustStore = trustStore;
1:571d452:     }
1:571d452: 
1:571d452:     public String getTrustStorePassword() {
1:571d452:         return trustStorePassword;
1:571d452:     }
1:571d452: 
1:571d452:     public void setTrustStorePassword(String trustStorePassword) {
1:571d452:         this.trustStorePassword = trustStorePassword;
1:571d452:     }
1:39da37d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.ServerConnector;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             //return new Krb5AndCertsSslSocketConnector(factory, auth);
1:             return null;
1:             ServerConnector connector = new ServerConnector(server, factory);
1:             server.setStopTimeout(500);
1:             connector.setStopTimeout(500);
1:             return connector;
/////////////////////////////////////////////////////////////////////////
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private SslContextFactory contextFactory;
1:     
1:     public SecureSocketConnectorFactory() {
1:         
1:     }
1:     public SecureSocketConnectorFactory(SslContextFactory contextFactory) {
1:         this.contextFactory = contextFactory;
1:     }
1: 
1:         if (getTransportOptions() != null) {
1:             IntrospectionSupport.setProperties(this, getTransportOptions());
1:         SslContextFactory factory;
1:         if (contextFactory == null) {
1:             factory = new SslContextFactory();
1:             if (context != null) {
1:                 // Should not be using this method since it does not use all of the values
1:                 // from the passed SslContext instance.....
1:                 factory.setSslContext(sslContext);
1:             } else {
1:                 if (keyStore != null) {
1:                     factory.setKeyStorePath(keyStore);
1:                 }
1:                 if (keyStorePassword != null) {
1:                     factory.setKeyStorePassword(keyStorePassword);
1:                 }
1:                 // if the keyPassword hasn't been set, default it to the
1:                 // key store password
1:                 if (keyPassword == null && keyStorePassword != null) {
1:                     factory.setKeyStorePassword(keyStorePassword);
1:                 }
1:                 if (keyStoreType != null) {
1:                     factory.setKeyStoreType(keyStoreType);
1:                 }
1:                 if (secureRandomCertficateAlgorithm != null) {
1:                     factory.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
1:                 }
1:                 if (keyCertificateAlgorithm != null) {
1:                     factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
1:                 }
1:                 if (trustCertificateAlgorithm != null) {
1:                     factory.setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
1:                 }
1:                 if (protocol != null) {
1:                     factory.setProtocol(protocol);
1:                 }
1:                 if (trustStore != null) {
1:                     setTrustStore(factory, trustStore);
1:                 }
1:                 if (trustStorePassword != null) {
1:                     factory.setTrustStorePassword(trustStorePassword);
1:                 }
1:             }
1:             factory.setNeedClientAuth(needClientAuth);
1:             factory.setWantClientAuth(wantClientAuth);
1:             factory = contextFactory;
1:         
1:         if ("KRB".equals(auth) || "BOTH".equals(auth)
1:             && Server.getVersion().startsWith("8")) {
0:             return new Krb5AndCertsSslSocketConnector(factory, auth);
1:         } else {
0:             try {
0:                 Class<?> cls = Class.forName("org.eclipse.jetty.server.ssl.SslSelectChannelConnector", true, Server.class.getClassLoader());
0:                 return (Connector)cls.getConstructor(SslContextFactory.class).newInstance(factory);
0:             } catch (Throwable t) {
0:                 Class<?> c = Class.forName("org.eclipse.jetty.server.ServerConnector", true, Server.class.getClassLoader());
0:                 Connector connector = (Connector)c.getConstructor(Server.class, SslContextFactory.class).newInstance(server, factory);
0:                 Server.class.getMethod("setStopTimeout", Long.TYPE).invoke(server, 500);
0:                 connector.getClass().getMethod("setStopTimeout", Long.TYPE).invoke(connector, 500);
0:                 return connector;
1:             }
1:         }
1:     }
1:     private void setTrustStore(SslContextFactory factory, String trustStore2) throws Exception {
1:         String mname = Server.getVersion().startsWith("8") ? "setTrustStore" : "setTrustStorePath";
1:         factory.getClass().getMethod(mname, String.class).invoke(factory, trustStore2);
1: 
1:     
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.Server;
/////////////////////////////////////////////////////////////////////////
1:     public Connector createConnector(Server server) throws Exception {
author:Christian Posta
-------------------------------------------------------------------------------
commit:571d452
/////////////////////////////////////////////////////////////////////////
1:     private String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword");
1:     private String trustStore = System.getProperty("javax.net.ssl.trustStore");
1:     private boolean needClientAuth;
1:     private boolean wantClientAuth;
/////////////////////////////////////////////////////////////////////////
0:             if (trustStore != null) {
0:                 factory.setTrustStore(trustStore);
1:             }
0:             if (trustStorePassword != null) {
0:                 factory.setTrustStorePassword(trustStorePassword);
1:             }
1: 
0:         factory.setNeedClientAuth(needClientAuth);
0:         factory.setWantClientAuth(wantClientAuth);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isWantClientAuth() {
1:         return wantClientAuth;
1:     }
1: 
1:     public void setWantClientAuth(boolean wantClientAuth) {
1:         this.wantClientAuth = wantClientAuth;
1:     }
1: 
1:     public boolean isNeedClientAuth() {
1:         return needClientAuth;
1:     }
1: 
1:     public void setNeedClientAuth(boolean needClientAuth) {
1:         this.needClientAuth = needClientAuth;
1:     }
1: 
1:     public String getTrustStore() {
1:         return trustStore;
1:     }
1: 
1:     public void setTrustStore(String trustStore) {
1:         this.trustStore = trustStore;
1:     }
1: 
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
1: 
1:     public void setTrustStorePassword(String trustStorePassword) {
1:         this.trustStorePassword = trustStorePassword;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLContext;
1: 
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:da138e3
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.server.ssl.SslConnector;
0: import org.eclipse.jetty.server.ssl.SslSelectChannelConnector;
/////////////////////////////////////////////////////////////////////////
0:         IntrospectionSupport.setProperties(this, getTransportOptions());
0:         SslConnector sslConnector;
0:         if (Krb5AndCertsSslSocketConnector.isKrb(auth)) {
0:             sslConnector = new Krb5AndCertsSslSocketConnector();
0:             ((Krb5AndCertsSslSocketConnector)sslConnector).setMode(auth);
1:         } else {
0:             sslConnector = new SslSelectChannelConnector();
1:         }
/////////////////////////////////////////////////////////////////////////
commit:39da37d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import org.apache.activemq.spring.SpringSslContext;
0: import org.apache.activemq.transport.https.Krb5AndCertsSslSocketConnector;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: 
0: import org.apache.activemq.broker.SslContext;
1: 
0: import javax.net.ssl.SSLContext;
0: import java.util.Map;
1: 
1: public class SecureSocketConnectorFactory extends SocketConnectorFactory {
1: 
1:     private String keyPassword = System.getProperty("javax.net.ssl.keyPassword");
1:     private String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword");
1:     private String keyStore = System.getProperty("javax.net.ssl.keyStore");
1:     private String keyStoreType;
1:     private String secureRandomCertficateAlgorithm;
1:     private String trustCertificateAlgorithm;
1:     private String keyCertificateAlgorithm;
1:     private String protocol;
1:     private String auth;
1: 
1:     private SslContext context;
1: 
1:     public SecureSocketConnectorFactory(SslContext context) {
1:         this.context = context;
1:     }
1: 
1:     @Override
0:     public Connector createConnector() throws Exception {
0:         Krb5AndCertsSslSocketConnector sslConnector = new Krb5AndCertsSslSocketConnector();
1: 
1:         SSLContext sslContext = context == null ? null : context.getSSLContext();
1: 
1:         // Get a reference to the current ssl context factory...
0:         SslContextFactory factory = sslConnector.getSslContextFactory();
1: 
0:         if (context != null) {
1: 
0:             // Should not be using this method since it does not use all of the values
0:             // from the passed SslContext instance.....
0:             factory.setSslContext(sslContext);
1: 
0:         } else {
0:             IntrospectionSupport.setProperties(this, getTransportOptions());
1: 
0:             if (auth != null) {
0:                 sslConnector.setMode(auth);
1:             }
1: 
0:             if (keyStore != null) {
0:                 factory.setKeyStorePath(keyStore);
1:             }
0:             if (keyStorePassword != null) {
0:                 factory.setKeyStorePassword(keyStorePassword);
1:             }
0:             // if the keyPassword hasn't been set, default it to the
0:             // key store password
0:             if (keyPassword == null && keyStorePassword != null) {
0:                 factory.setKeyStorePassword(keyStorePassword);
1:             }
0:             if (keyStoreType != null) {
0:                 factory.setKeyStoreType(keyStoreType);
1:             }
0:             if (secureRandomCertficateAlgorithm != null) {
0:                 factory.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
1:             }
0:             if (keyCertificateAlgorithm != null) {
0:                 factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
1:             }
0:             if (trustCertificateAlgorithm != null) {
0:                 factory.setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
1:             }
0:             if (protocol != null) {
0:                 factory.setProtocol(protocol);
1:             }
1:         }
1: 
0:         return sslConnector;
1:     }
1: 
1:     // Properties
1:     // --------------------------------------------------------------------------------
1: 
1:     public String getKeyStore() {
1:         return keyStore;
1:     }
1: 
1:     public void setKeyStore(String keyStore) {
1:         this.keyStore = keyStore;
1:     }
1: 
1:     public String getKeyPassword() {
1:         return keyPassword;
1:     }
1: 
1:     public void setKeyPassword(String keyPassword) {
1:         this.keyPassword = keyPassword;
1:     }
1: 
1:     public String getKeyStoreType() {
1:         return keyStoreType;
1:     }
1: 
1:     public void setKeyStoreType(String keyStoreType) {
1:         this.keyStoreType = keyStoreType;
1:     }
1: 
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
1: 
1:     public void setKeyStorePassword(String keyStorePassword) {
1:         this.keyStorePassword = keyStorePassword;
1:     }
1: 
1:     public String getProtocol() {
1:         return protocol;
1:     }
1: 
1:     public void setProtocol(String protocol) {
1:         this.protocol = protocol;
1:     }
1: 
1:     public String getSecureRandomCertficateAlgorithm() {
1:         return secureRandomCertficateAlgorithm;
1:     }
1: 
1:     public void setSecureRandomCertficateAlgorithm(String secureRandomCertficateAlgorithm) {
1:         this.secureRandomCertficateAlgorithm = secureRandomCertficateAlgorithm;
1:     }
1: 
1:     public String getKeyCertificateAlgorithm() {
1:         return keyCertificateAlgorithm;
1:     }
1: 
1:     public void setKeyCertificateAlgorithm(String keyCertificateAlgorithm) {
1:         this.keyCertificateAlgorithm = keyCertificateAlgorithm;
1:     }
1: 
1:     public String getTrustCertificateAlgorithm() {
1:         return trustCertificateAlgorithm;
1:     }
1: 
1:     public void setTrustCertificateAlgorithm(String trustCertificateAlgorithm) {
1:         this.trustCertificateAlgorithm = trustCertificateAlgorithm;
1:     }
1: 
1:     /**
1:      * @return the auth
1:      */
1:     public String getAuth() {
1:         return auth;
1:     }
1: 
1:     /**
1:      * @param auth the auth to set
1:      */
1:     public void setAuth(String auth) {
1:         this.auth = auth;
1:     }
1: }
============================================================================