1:8c77e95: /**
1:8c77e95:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8c77e95:  * contributor license agreements.  See the NOTICE file distributed with
1:8c77e95:  * this work for additional information regarding copyright ownership.
1:8c77e95:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8c77e95:  * (the "License"); you may not use this file except in compliance with
1:8c77e95:  * the License.  You may obtain a copy of the License at
1:8c77e95:  *
1:8c77e95:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8c77e95:  *
1:8c77e95:  * Unless required by applicable law or agreed to in writing, software
1:8c77e95:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8c77e95:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8c77e95:  * See the License for the specific language governing permissions and
1:8c77e95:  * limitations under the License.
1:8c77e95:  */
1:8c77e95: 
1:8c77e95: package org.apache.activemq.broker;
1:8c77e95: 
1:8c77e95: import org.apache.activemq.command.BrokerInfo;
1:8c77e95: import org.junit.Before;
1:8c77e95: import org.junit.Test;
1:8c77e95: 
1:8c77e95: import static org.junit.Assert.assertTrue;
1:8c77e95: import static org.junit.Assert.assertFalse;
1:8c77e95: 
1:8c77e95: public class TransportConnectorTest {
1:8c77e95: 
1:8c77e95:     TransportConnector underTest;
1:8c77e95: 
1:8c77e95:     @Before
1:8c77e95:     public void init() throws Exception {
1:8c77e95:         underTest = new TransportConnector();
1:8c77e95:         underTest.setBrokerService(new BrokerService());
1:8c77e95:     }
1:8c77e95: 
1:8c77e95:     @Test
1:8c77e95:     public void addPeerBrokerWithFilter() throws Exception {
1:8c77e95:         underTest.setUpdateClusterFilter("e.*,w.*");
1:8c77e95: 
1:8c77e95:         final String validName = "west";
1:8c77e95: 
1:8c77e95:         BrokerInfo brokerInfo = new BrokerInfo();
1:8c77e95:         brokerInfo.setBrokerURL(validName);
1:8c77e95:         brokerInfo.setBrokerName(validName);
1:8c77e95: 
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(validName));
1:8c77e95:         underTest.addPeerBroker(brokerInfo);
1:8c77e95:         assertTrue(underTest.getPeerBrokers().contains(validName));
1:8c77e95: 
1:8c77e95:         final String validName2 = "east";
1:8c77e95:         brokerInfo = new BrokerInfo();
1:8c77e95:         brokerInfo.setBrokerURL(validName2);
1:8c77e95:         brokerInfo.setBrokerName(validName2);
1:8c77e95: 
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(validName2));
1:8c77e95:         underTest.addPeerBroker(brokerInfo);
1:8c77e95:         assertTrue(underTest.getPeerBrokers().contains(validName2));
1:8c77e95: 
1:8c77e95: 
1:8c77e95:         final String inValidName = "boo";
1:8c77e95:         brokerInfo = new BrokerInfo();
1:8c77e95:         brokerInfo.setBrokerURL(inValidName);
1:8c77e95:         brokerInfo.setBrokerName(inValidName);
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(inValidName));
1:8c77e95:         underTest.addPeerBroker(brokerInfo);
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(inValidName));
1:8c77e95:     }
1:8c77e95: 
1:8c77e95:     @Test
1:8c77e95:     public void addPeerBrokerWithoutFilter() throws Exception {
1:8c77e95:         underTest.setBrokerService(new BrokerService());
1:8c77e95: 
1:8c77e95:         final String validName = "west";
1:8c77e95:         BrokerInfo brokerInfo = new BrokerInfo();
1:8c77e95:         brokerInfo.setBrokerURL(validName);
1:8c77e95:         brokerInfo.setBrokerName(validName);
1:8c77e95: 
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(validName));
1:8c77e95:         underTest.addPeerBroker(brokerInfo);
1:8c77e95:         assertTrue(underTest.getPeerBrokers().contains(validName));
1:8c77e95: 
1:8c77e95:         final String validName2 = "east";
1:8c77e95:         brokerInfo = new BrokerInfo();
1:8c77e95:         brokerInfo.setBrokerURL(validName2);
1:8c77e95:         brokerInfo.setBrokerName(validName2);
1:8c77e95: 
1:8c77e95:         assertFalse(underTest.getPeerBrokers().contains(validName2));
1:8c77e95:         underTest.addPeerBroker(brokerInfo);
1:8c77e95:         assertTrue(underTest.getPeerBrokers().contains(validName2));
1:8c77e95:     }
1:8c77e95: 
1:8c77e95: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8c77e95
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.command.BrokerInfo;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.assertFalse;
1: 
1: public class TransportConnectorTest {
1: 
1:     TransportConnector underTest;
1: 
1:     @Before
1:     public void init() throws Exception {
1:         underTest = new TransportConnector();
1:         underTest.setBrokerService(new BrokerService());
1:     }
1: 
1:     @Test
1:     public void addPeerBrokerWithFilter() throws Exception {
1:         underTest.setUpdateClusterFilter("e.*,w.*");
1: 
1:         final String validName = "west";
1: 
1:         BrokerInfo brokerInfo = new BrokerInfo();
1:         brokerInfo.setBrokerURL(validName);
1:         brokerInfo.setBrokerName(validName);
1: 
1:         assertFalse(underTest.getPeerBrokers().contains(validName));
1:         underTest.addPeerBroker(brokerInfo);
1:         assertTrue(underTest.getPeerBrokers().contains(validName));
1: 
1:         final String validName2 = "east";
1:         brokerInfo = new BrokerInfo();
1:         brokerInfo.setBrokerURL(validName2);
1:         brokerInfo.setBrokerName(validName2);
1: 
1:         assertFalse(underTest.getPeerBrokers().contains(validName2));
1:         underTest.addPeerBroker(brokerInfo);
1:         assertTrue(underTest.getPeerBrokers().contains(validName2));
1: 
1: 
1:         final String inValidName = "boo";
1:         brokerInfo = new BrokerInfo();
1:         brokerInfo.setBrokerURL(inValidName);
1:         brokerInfo.setBrokerName(inValidName);
1:         assertFalse(underTest.getPeerBrokers().contains(inValidName));
1:         underTest.addPeerBroker(brokerInfo);
1:         assertFalse(underTest.getPeerBrokers().contains(inValidName));
1:     }
1: 
1:     @Test
1:     public void addPeerBrokerWithoutFilter() throws Exception {
1:         underTest.setBrokerService(new BrokerService());
1: 
1:         final String validName = "west";
1:         BrokerInfo brokerInfo = new BrokerInfo();
1:         brokerInfo.setBrokerURL(validName);
1:         brokerInfo.setBrokerName(validName);
1: 
1:         assertFalse(underTest.getPeerBrokers().contains(validName));
1:         underTest.addPeerBroker(brokerInfo);
1:         assertTrue(underTest.getPeerBrokers().contains(validName));
1: 
1:         final String validName2 = "east";
1:         brokerInfo = new BrokerInfo();
1:         brokerInfo.setBrokerURL(validName2);
1:         brokerInfo.setBrokerName(validName2);
1: 
1:         assertFalse(underTest.getPeerBrokers().contains(validName2));
1:         underTest.addPeerBroker(brokerInfo);
1:         assertTrue(underTest.getPeerBrokers().contains(validName2));
1:     }
1: 
1: }
============================================================================