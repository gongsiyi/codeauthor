1:4b6b61b: /**
1:4b6b61b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b6b61b:  * contributor license agreements.  See the NOTICE file distributed with
1:4b6b61b:  * this work for additional information regarding copyright ownership.
1:4b6b61b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b6b61b:  * (the "License"); you may not use this file except in compliance with
1:4b6b61b:  * the License.  You may obtain a copy of the License at
3:4b6b61b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b6b61b:  *
1:4b6b61b:  * Unless required by applicable law or agreed to in writing, software
1:4b6b61b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b6b61b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b6b61b:  * See the License for the specific language governing permissions and
1:4b6b61b:  * limitations under the License.
1:4b6b61b:  */
1:4b6b61b: package org.apache.activemq.broker.util;
11:4b6b61b: 
1:4b6b61b: import java.io.DataOutputStream;
1:4b6b61b: import java.io.IOException;
1:4b6b61b: import java.net.DatagramPacket;
1:4b6b61b: import java.net.DatagramSocket;
1:4b6b61b: import java.net.InetAddress;
1:4b6b61b: import java.net.InetSocketAddress;
1:4b6b61b: import java.net.SocketAddress;
1:4b6b61b: import java.net.URI;
1:4b6b61b: import java.net.URISyntaxException;
1:4b6b61b: import java.net.UnknownHostException;
1:4b6b61b: 
1:4b6b61b: import org.apache.activemq.broker.BrokerPluginSupport;
1:4b6b61b: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:8029b8d: import org.apache.activemq.broker.region.Subscription;
1:8029b8d: import org.apache.activemq.command.ActiveMQDestination;
1:4b6b61b: import org.apache.activemq.command.BrokerId;
1:8029b8d: import org.apache.activemq.command.ConnectionInfo;
1:8029b8d: import org.apache.activemq.command.ConsumerInfo;
1:4b6b61b: import org.apache.activemq.command.DataStructure;
1:8029b8d: import org.apache.activemq.command.DestinationInfo;
1:8029b8d: import org.apache.activemq.command.JournalTrace;
1:4b6b61b: import org.apache.activemq.command.Message;
1:4b6b61b: import org.apache.activemq.command.MessageAck;
1:8029b8d: import org.apache.activemq.command.MessageDispatch;
1:8029b8d: import org.apache.activemq.command.MessageDispatchNotification;
1:8029b8d: import org.apache.activemq.command.MessagePull;
1:8029b8d: import org.apache.activemq.command.ProducerInfo;
1:8029b8d: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:8029b8d: import org.apache.activemq.command.Response;
1:8029b8d: import org.apache.activemq.command.SessionInfo;
1:8029b8d: import org.apache.activemq.command.TransactionId;
1:8029b8d: import org.apache.activemq.command.TransactionInfo;
1:4b6b61b: import org.apache.activemq.openwire.OpenWireFormatFactory;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:88acb0e: import org.apache.activemq.wireformat.WireFormatFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:4b6b61b: 
1:4b6b61b: /**
1:230a86c:  * A Broker interceptor which allows you to trace all operations to a UDP
1:230a86c:  * socket.
1:4b6b61b:  * 
1:230a86c:  * @org.apache.xbean.XBean element="udpTraceBrokerPlugin"
1:0bbc0ac:  * 
1:4b6b61b:  */
1:4b6b61b: public class UDPTraceBrokerPlugin extends BrokerPluginSupport {
1:4b6b61b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(UDPTraceBrokerPlugin.class);
1:230a86c:     protected WireFormat wireFormat;
1:230a86c:     protected WireFormatFactory wireFormatFactory;
1:230a86c:     protected int maxTraceDatagramSize = 1024 * 4;
1:230a86c:     protected URI destination;
1:230a86c:     protected DatagramSocket socket;
1:4b6b61b: 
1:230a86c:     protected BrokerId brokerId;
1:230a86c:     protected SocketAddress address;
1:230a86c:     protected boolean broadcast;
1:4b6b61b: 
1:230a86c:     public UDPTraceBrokerPlugin() {
1:230a86c:         try {
1:230a86c:             destination = new URI("udp://127.0.0.1:61616");
1:230a86c:         } catch (URISyntaxException wontHappen) {
1:230a86c:         }
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void start() throws Exception {
1:230a86c:         super.start();
1:ecf89a6:         if (getWireFormat() == null) {
1:230a86c:             throw new IllegalArgumentException("Wireformat must be specifed.");
1:ecf89a6:         }
1:230a86c:         if (address == null) {
1:230a86c:             address = createSocketAddress(destination);
1:230a86c:         }
1:230a86c:         socket = createSocket();
1:230a86c: 
1:230a86c:         brokerId = super.getBrokerId();
1:230a86c:         trace(new JournalTrace("START"));
1:230a86c:     }
1:230a86c: 
1:230a86c:     protected DatagramSocket createSocket() throws IOException {
1:230a86c:         DatagramSocket s = new DatagramSocket();
1:230a86c:         s.setSendBufferSize(maxTraceDatagramSize);
1:230a86c:         s.setBroadcast(broadcast);
1:230a86c:         return s;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void stop() throws Exception {
1:230a86c:         trace(new JournalTrace("STOP"));
1:230a86c:         socket.close();
1:230a86c:         super.stop();
1:230a86c:     }
1:230a86c: 
1:230a86c:     private void trace(DataStructure command) {
1:230a86c:         try {
1:230a86c: 
1:230a86c:             ByteArrayOutputStream baos = new ByteArrayOutputStream(maxTraceDatagramSize);
1:230a86c:             DataOutputStream out = new DataOutputStream(baos);
1:230a86c:             wireFormat.marshal(brokerId, out);
1:230a86c:             wireFormat.marshal(command, out);
1:230a86c:             out.close();
1:230a86c:             ByteSequence sequence = baos.toByteSequence();
1:230a86c:             DatagramPacket datagram = new DatagramPacket(sequence.getData(), sequence.getOffset(), sequence.getLength(), address);
1:230a86c:             socket.send(datagram);
1:230a86c: 
1:230a86c:         } catch (Throwable e) {
1:e1bbde7:             LOG.debug("Failed to trace: {}", command, e);
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:84eb9f8:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:230a86c:         trace(messageSend);
1:84eb9f8:         super.send(producerExchange, messageSend);
1:8029b8d:     }
1:8029b8d: 
1:84eb9f8:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:230a86c:         trace(ack);
1:84eb9f8:         super.acknowledge(consumerExchange, ack);
19:8029b8d:     }
1:8029b8d: 
1:230a86c:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.addConnection(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         return super.addConsumer(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.addDestinationInfo(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.addProducer(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.addSession(context, info);
1:230a86c:     }
1:230a86c: 
1:230a86c:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:8029b8d:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.BEGIN));
1:230a86c:         super.beginTransaction(context, xid);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:8029b8d:         trace(new TransactionInfo(context.getConnectionId(), xid, onePhase ? TransactionInfo.COMMIT_ONE_PHASE : TransactionInfo.COMMIT_TWO_PHASE));
1:230a86c:         super.commitTransaction(context, xid, onePhase);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void forgetTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:8029b8d:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.FORGET));
1:230a86c:         super.forgetTransaction(context, xid);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:230a86c:         trace(pull);
1:230a86c:         return super.messagePull(context, pull);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:8029b8d:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.PREPARE));
1:230a86c:         return super.prepareTransaction(context, xid);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:230a86c:         trace(messageDispatch);
1:230a86c:         super.postProcessDispatch(messageDispatch);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:230a86c:         trace(messageDispatchNotification);
1:230a86c:         super.processDispatchNotification(messageDispatchNotification);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:230a86c:         trace(info.createRemoveCommand());
1:230a86c:         super.removeConnection(context, info, error);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:230a86c:         trace(info.createRemoveCommand());
1:230a86c:         super.removeConsumer(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:230a86c:         super.removeDestination(context, destination, timeout);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.removeDestinationInfo(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:230a86c:         trace(info.createRemoveCommand());
1:230a86c:         super.removeProducer(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:230a86c:         trace(info.createRemoveCommand());
1:230a86c:         super.removeSession(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:230a86c:         trace(info);
1:230a86c:         super.removeSubscription(context, info);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:8029b8d:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.ROLLBACK));
1:230a86c:         super.rollbackTransaction(context, xid);
1:230a86c:     }
1:8029b8d: 
1:230a86c:     public WireFormat getWireFormat() {
1:230a86c:         if (wireFormat == null) {
1:230a86c:             wireFormat = createWireFormat();
1:230a86c:         }
1:230a86c:         return wireFormat;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     protected WireFormat createWireFormat() {
1:230a86c:         return getWireFormatFactory().createWireFormat();
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setWireFormat(WireFormat wireFormat) {
1:230a86c:         this.wireFormat = wireFormat;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public WireFormatFactory getWireFormatFactory() {
1:230a86c:         if (wireFormatFactory == null) {
1:230a86c:             wireFormatFactory = createWireFormatFactory();
1:230a86c:         }
1:230a86c:         return wireFormatFactory;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     protected OpenWireFormatFactory createWireFormatFactory() {
1:230a86c:         OpenWireFormatFactory wf = new OpenWireFormatFactory();
1:230a86c:         wf.setCacheEnabled(false);
1:230a86c:         wf.setVersion(1);
1:230a86c:         wf.setTightEncodingEnabled(true);
1:230a86c:         wf.setSizePrefixDisabled(true);
1:230a86c:         return wf;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setWireFormatFactory(WireFormatFactory wireFormatFactory) {
1:230a86c:         this.wireFormatFactory = wireFormatFactory;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     protected SocketAddress createSocketAddress(URI location) throws UnknownHostException {
1:230a86c:         InetAddress a = InetAddress.getByName(location.getHost());
1:230a86c:         int port = location.getPort();
1:230a86c:         return new InetSocketAddress(a, port);
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public URI getDestination() {
1:230a86c:         return destination;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setDestination(URI destination) {
1:230a86c:         this.destination = destination;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public int getMaxTraceDatagramSize() {
1:230a86c:         return maxTraceDatagramSize;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setMaxTraceDatagramSize(int maxTraceDatagramSize) {
1:230a86c:         this.maxTraceDatagramSize = maxTraceDatagramSize;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public boolean isBroadcast() {
1:230a86c:         return broadcast;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setBroadcast(boolean broadcast) {
1:230a86c:         this.broadcast = broadcast;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public SocketAddress getAddress() {
1:230a86c:         return address;
1:230a86c:     }
1:4b6b61b: 
1:230a86c:     public void setAddress(SocketAddress address) {
1:230a86c:         this.address = address;
1:230a86c:     }
1:4b6b61b: 
1:8029b8d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Failed to trace: {}", command, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (getWireFormat() == null) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(UDPTraceBrokerPlugin.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("Failed to trace: " + command, e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A Broker interceptor which allows you to trace all operations to a UDP
1:  * socket.
1:  * @org.apache.xbean.XBean element="udpTraceBrokerPlugin"
0:     static final private Log log = LogFactory.getLog(UDPTraceBrokerPlugin.class);
1:     protected WireFormat wireFormat;
1:     protected WireFormatFactory wireFormatFactory;
1:     protected int maxTraceDatagramSize = 1024 * 4;
1:     protected URI destination;
1:     protected DatagramSocket socket;
1:     protected BrokerId brokerId;
1:     protected SocketAddress address;
1:     protected boolean broadcast;
1:     public UDPTraceBrokerPlugin() {
1:         try {
1:             destination = new URI("udp://127.0.0.1:61616");
1:         } catch (URISyntaxException wontHappen) {
1:         }
1:     }
1:     public void start() throws Exception {
1:         super.start();
0:         if (getWireFormat() == null)
1:             throw new IllegalArgumentException("Wireformat must be specifed.");
1:         if (address == null) {
1:             address = createSocketAddress(destination);
1:         }
1:         socket = createSocket();
1: 
1:         brokerId = super.getBrokerId();
1:         trace(new JournalTrace("START"));
1:     }
1: 
1:     protected DatagramSocket createSocket() throws IOException {
1:         DatagramSocket s = new DatagramSocket();
1:         s.setSendBufferSize(maxTraceDatagramSize);
1:         s.setBroadcast(broadcast);
1:         return s;
1:     }
1: 
1:     public void stop() throws Exception {
1:         trace(new JournalTrace("STOP"));
1:         socket.close();
1:         super.stop();
1:     }
1: 
1:     private void trace(DataStructure command) {
1:         try {
1: 
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream(maxTraceDatagramSize);
1:             DataOutputStream out = new DataOutputStream(baos);
1:             wireFormat.marshal(brokerId, out);
1:             wireFormat.marshal(command, out);
1:             out.close();
1:             ByteSequence sequence = baos.toByteSequence();
1:             DatagramPacket datagram = new DatagramPacket(sequence.getData(), sequence.getOffset(), sequence.getLength(), address);
1:             socket.send(datagram);
1: 
1:         } catch (Throwable e) {
0:             log.debug("Failed to trace: " + command, e);
1:         }
1:     }
1: 
1:         trace(messageSend);
1:         trace(ack);
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         trace(info);
1:         super.addConnection(context, info);
1:     }
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         trace(info);
1:         return super.addConsumer(context, info);
1:     }
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:         trace(info);
1:         super.addDestinationInfo(context, info);
1:     }
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         trace(info);
1:         super.addProducer(context, info);
1:     }
1:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:         trace(info);
1:         super.addSession(context, info);
1:     }
1: 
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         super.beginTransaction(context, xid);
1:     }
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:         super.commitTransaction(context, xid, onePhase);
1:     }
1:     public void forgetTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         super.forgetTransaction(context, xid);
1:     }
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:         trace(pull);
1:         return super.messagePull(context, pull);
1:     }
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         return super.prepareTransaction(context, xid);
1:     }
1:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:         trace(messageDispatch);
1:         super.postProcessDispatch(messageDispatch);
1:     }
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:         trace(messageDispatchNotification);
1:         super.processDispatchNotification(messageDispatchNotification);
1:     }
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         trace(info.createRemoveCommand());
1:         super.removeConnection(context, info, error);
1:     }
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         trace(info.createRemoveCommand());
1:         super.removeConsumer(context, info);
1:     }
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         super.removeDestination(context, destination, timeout);
1:     }
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:         trace(info);
1:         super.removeDestinationInfo(context, info);
1:     }
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         trace(info.createRemoveCommand());
1:         super.removeProducer(context, info);
1:     }
1:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:         trace(info.createRemoveCommand());
1:         super.removeSession(context, info);
1:     }
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:         trace(info);
1:         super.removeSubscription(context, info);
1:     }
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         super.rollbackTransaction(context, xid);
1:     }
1:     public WireFormat getWireFormat() {
1:         if (wireFormat == null) {
1:             wireFormat = createWireFormat();
1:         }
1:         return wireFormat;
1:     }
1:     protected WireFormat createWireFormat() {
1:         return getWireFormatFactory().createWireFormat();
1:     }
1:     public void setWireFormat(WireFormat wireFormat) {
1:         this.wireFormat = wireFormat;
1:     }
1:     public WireFormatFactory getWireFormatFactory() {
1:         if (wireFormatFactory == null) {
1:             wireFormatFactory = createWireFormatFactory();
1:         }
1:         return wireFormatFactory;
1:     }
1:     protected OpenWireFormatFactory createWireFormatFactory() {
1:         OpenWireFormatFactory wf = new OpenWireFormatFactory();
1:         wf.setCacheEnabled(false);
1:         wf.setVersion(1);
1:         wf.setTightEncodingEnabled(true);
1:         wf.setSizePrefixDisabled(true);
1:         return wf;
1:     }
1:     public void setWireFormatFactory(WireFormatFactory wireFormatFactory) {
1:         this.wireFormatFactory = wireFormatFactory;
1:     }
1:     protected SocketAddress createSocketAddress(URI location) throws UnknownHostException {
1:         InetAddress a = InetAddress.getByName(location.getHost());
1:         int port = location.getPort();
1:         return new InetSocketAddress(a, port);
1:     }
1:     public URI getDestination() {
1:         return destination;
1:     }
1:     public void setDestination(URI destination) {
1:         this.destination = destination;
1:     }
1:     public int getMaxTraceDatagramSize() {
1:         return maxTraceDatagramSize;
1:     }
1:     public void setMaxTraceDatagramSize(int maxTraceDatagramSize) {
1:         this.maxTraceDatagramSize = maxTraceDatagramSize;
1:     }
1:     public boolean isBroadcast() {
1:         return broadcast;
1:     }
1:     public void setBroadcast(boolean broadcast) {
1:         this.broadcast = broadcast;
1:     }
1:     public SocketAddress getAddress() {
1:         return address;
1:     }
1:     public void setAddress(SocketAddress address) {
1:         this.address = address;
1:     }
commit:8029b8d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.JournalTrace;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.MessageDispatchNotification;
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.command.TransactionInfo;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:  * @org.apache.xbean.XBean element="udpTraceBrokerPlugin" 
0: 	static final private Log log = LogFactory.getLog(UDPTraceBrokerPlugin.class);
/////////////////////////////////////////////////////////////////////////
0: 	private void trace(DataStructure command) {
0: 		try {
1: 			
0: 			ByteArrayOutputStream baos = new ByteArrayOutputStream(maxTraceDatagramSize);
0: 			DataOutputStream out = new DataOutputStream(baos);
0: 			wireFormat.marshal(brokerId, out);
0: 			wireFormat.marshal(command, out);
0: 			out.close();
0: 			ByteSequence sequence = baos.toByteSequence();
0: 			DatagramPacket datagram = new DatagramPacket( sequence.getData(), sequence.getOffset(), sequence.getLength(), address);		
0: 			socket.send(datagram);
1: 			
0: 		} catch ( Throwable e) {
0: 			log.debug("Failed to trace: "+command, e);
1:  		}
/////////////////////////////////////////////////////////////////////////
1:   
0: 	public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:     	trace(info);
0: 		super.addConnection(context, info);
1: 	}
1: 
0: 	public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     	trace(info);
0: 		return super.addConsumer(context, info);
1: 	}
1: 
0: 	public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:     	trace(info);
0: 		super.addDestinationInfo(context, info);
1: 	}
1: 
0: 	public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     	trace(info);
0: 		super.addProducer(context, info);
1: 	}
1: 
0: 	public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     	trace(info);
0: 		super.addSession(context, info);
1: 	}
1: 
0: 	public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.BEGIN));
0: 		super.beginTransaction(context, xid);
1: 	}
1: 
0: 	public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:         trace(new TransactionInfo(context.getConnectionId(), xid, onePhase ? TransactionInfo.COMMIT_ONE_PHASE : TransactionInfo.COMMIT_TWO_PHASE));
0: 		super.commitTransaction(context, xid, onePhase);
1: 	}
1: 
0: 	public void forgetTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.FORGET));
0: 		super.forgetTransaction(context, xid);
1: 	}
1: 
0: 	public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:     	trace(pull);
0: 		return super.messagePull(context, pull);
1: 	}
1: 
0: 	public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.PREPARE));
0: 		return super.prepareTransaction(context, xid);
1: 	}
1: 
0: 	public void processDispatch(MessageDispatch messageDispatch) {
0:     	trace(messageDispatch);
0: 		super.processDispatch(messageDispatch);
1: 	}
1: 
0: 	public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0:     	trace(messageDispatchNotification);
0: 		super.processDispatchNotification(messageDispatchNotification);
1: 	}
1: 
0: 	public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
0:     	trace(info.createRemoveCommand());
0: 		super.removeConnection(context, info, error);
1: 	}
1: 
0: 	public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:     	trace(info.createRemoveCommand());
0: 		super.removeConsumer(context, info);
1: 	}
1: 
0: 	public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
0: 		super.removeDestination(context, destination, timeout);
1: 	}
1: 
0: 	public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
0:     	trace(info);
0: 		super.removeDestinationInfo(context, info);
1: 	}
1: 
0: 	public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:     	trace(info.createRemoveCommand());
0: 		super.removeProducer(context, info);
1: 	}
1: 
0: 	public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
0:     	trace(info.createRemoveCommand());
0: 		super.removeSession(context, info);
1: 	}
1: 
0: 	public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:     	trace(info);
0: 		super.removeSubscription(context, info);
1: 	}
1: 
0: 	public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         trace(new TransactionInfo(context.getConnectionId(), xid, TransactionInfo.ROLLBACK));
0: 		super.rollbackTransaction(context, xid);
1: 	}
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.apache.activemq.wireformat.WireFormatFactory;
commit:4b6b61b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.DatagramPacket;
1: import java.net.DatagramSocket;
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.SocketAddress;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: 
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.command.WireFormatFactory;
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayOutputStream;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.JournalTrace;
1: import org.apache.activemq.openwire.OpenWireFormatFactory;
1: 
1: /**
0:  * A Broker interceptor which allows you to trace all operations to a UDP socket.
1:  * 
0:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision: 427613 $
1:  */
1: public class UDPTraceBrokerPlugin extends BrokerPluginSupport {
1: 
0: 	protected WireFormat wireFormat;
0: 	protected WireFormatFactory wireFormatFactory;
0: 	protected int maxTraceDatagramSize = 1024*4;
0: 	protected URI destination;
0: 	protected DatagramSocket socket;
1: 		
0: 	protected BrokerId brokerId;
0: 	protected SocketAddress address;
0: 	protected boolean broadcast;
1: 	
0: 	public UDPTraceBrokerPlugin() {
0: 		try {
0: 			destination = new URI("udp://127.0.0.1:61616");
0: 		} catch (URISyntaxException wontHappen) {
0: 		}
0: 	}
1: 
0: 	public void start() throws Exception {
0: 		super.start();
0: 		if( getWireFormat() == null )
0: 			throw new IllegalArgumentException("Wireformat must be specifed.");	
0: 		if( address == null ) {
0: 			address = createSocketAddress(destination);
0: 		}
0: 		socket = createSocket();
1: 		
0: 		brokerId = super.getBrokerId();
0: 		trace(new JournalTrace("START"));		
0: 	}	
1: 
0: 	protected DatagramSocket createSocket() throws IOException {
0: 		DatagramSocket s = new DatagramSocket();
0: 		s.setSendBufferSize(maxTraceDatagramSize);
0: 		s.setBroadcast(broadcast);
0: 		return s;
0: 	}
1: 
0: 	public void stop() throws Exception {
0: 		trace(new JournalTrace("STOP"));
0: 		socket.close();
0: 		super.stop();
0: 	}
1: 	
0: 	private void trace(DataStructure command) throws IOException {
0: 		ByteArrayOutputStream baos = new ByteArrayOutputStream(maxTraceDatagramSize);
0: 		DataOutputStream out = new DataOutputStream(baos);
0: 		wireFormat.marshal(brokerId, out);
0: 		wireFormat.marshal(command, out);
0: 		out.close();
0: 		ByteSequence sequence = baos.toByteSequence();
0: 		DatagramPacket datagram = new DatagramPacket( sequence.getData(), sequence.getOffset(), sequence.getLength(), address);		
0: 		socket.send(datagram);
0: 	}
1: 	
0:     public void send(ConnectionContext context, Message messageSend) throws Exception {
0:     	trace(messageSend);
0:         super.send(context, messageSend);
0:     }
1: 
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
0:     	trace(ack);
0:         super.acknowledge(context, ack);
0:     }
1: 
0: 	public WireFormat getWireFormat() {
0: 		if( wireFormat == null ) {
0: 			wireFormat = createWireFormat();
0: 		}
0: 		return wireFormat;
0: 	}
1: 
0: 	protected WireFormat createWireFormat() {
0: 		return getWireFormatFactory().createWireFormat();
0: 	}
1: 
0: 	public void setWireFormat(WireFormat wireFormat) {
0: 		this.wireFormat = wireFormat;
0: 	}
1: 
0: 	public WireFormatFactory getWireFormatFactory() {
0: 		if( wireFormatFactory == null ) {
0: 			wireFormatFactory = createWireFormatFactory();
0: 		}
0: 		return wireFormatFactory;
0: 	}
1: 
0: 	protected OpenWireFormatFactory createWireFormatFactory() {
0: 		OpenWireFormatFactory wf = new OpenWireFormatFactory();
0: 		wf.setCacheEnabled(false);
0: 		wf.setVersion(1);
0: 		wf.setTightEncodingEnabled(true);
0: 		wf.setSizePrefixDisabled(true);
0: 		return wf;
0: 	}
1: 
0: 	public void setWireFormatFactory(WireFormatFactory wireFormatFactory) {
0: 		this.wireFormatFactory = wireFormatFactory;
0: 	}
1: 
1: 
0: 	protected SocketAddress createSocketAddress(URI location) throws UnknownHostException {
0: 		InetAddress a = InetAddress.getByName(location.getHost());
0: 		int port = location.getPort();
0: 		return new InetSocketAddress(a, port);
0: 	}
1: 
0: 	public URI getDestination() {
0: 		return destination;
0: 	}
1: 
0: 	public void setDestination(URI destination) {
0: 		this.destination = destination;
0: 	}
1: 
0: 	public int getMaxTraceDatagramSize() {
0: 		return maxTraceDatagramSize;
0: 	}
1: 
0: 	public void setMaxTraceDatagramSize(int maxTraceDatagramSize) {
0: 		this.maxTraceDatagramSize = maxTraceDatagramSize;
0: 	}
1: 
0: 	public boolean isBroadcast() {
0: 		return broadcast;
0: 	}
1: 
0: 	public void setBroadcast(boolean broadcast) {
0: 		this.broadcast = broadcast;
0: 	}
1: 
0: 	public SocketAddress getAddress() {
0: 		return address;
0: 	}
1: 
0: 	public void setAddress(SocketAddress address) {
0: 		this.address = address;
0: 	}
1: 
1: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(UDPTraceBrokerPlugin.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a401575
/////////////////////////////////////////////////////////////////////////
0: 	public void postProcessDispatch(MessageDispatch messageDispatch) {
0: 		super.postProcessDispatch(messageDispatch);
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         super.send(producerExchange, messageSend);
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         super.acknowledge(consumerExchange, ack);
============================================================================