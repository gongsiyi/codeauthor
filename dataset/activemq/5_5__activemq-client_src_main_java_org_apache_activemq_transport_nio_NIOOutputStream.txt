2:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
1:72eb191: 
1:885c379: import java.io.EOFException;
1:885c379: import java.io.IOException;
1:885c379: import java.io.InterruptedIOException;
1:885c379: import java.io.OutputStream;
1:885c379: import java.nio.ByteBuffer;
1:885c379: import java.nio.channels.WritableByteChannel;
1:f812e34: 
1:e504086: import javax.net.ssl.SSLEngine;
8:885c379: 
1:72eb191: import org.apache.activemq.transport.tcp.TimeStampStream;
1:72eb191: 
1:885c379: /**
1:210e39d:  * An optimized buffered OutputStream for TCP/IP
1:885c379:  */
1:2189100: public class NIOOutputStream extends OutputStream implements TimeStampStream {
1:885c379: 
1:210e39d:     private static final int BUFFER_SIZE = 8196;
1:885c379: 
1:f812e34:     private final WritableByteChannel out;
1:885c379:     private final byte[] buffer;
1:f812e34:     private final ByteBuffer byteBuffer;
1:f812e34: 
1:885c379:     private int count;
1:885c379:     private boolean closed;
1:210e39d:     private volatile long writeTimestamp = -1; // concurrent reads of this value
1:885c379: 
1:e504086:     private SSLEngine engine;
1:885c379: 
1:885c379:     /**
1:885c379:      * Constructor
1:c78c244:      *
1:885c379:      * @param out
1:210e39d:      *        the channel to write data to.
1:885c379:      */
1:885c379:     public NIOOutputStream(WritableByteChannel out) {
1:885c379:         this(out, BUFFER_SIZE);
1:885c379:     }
1:c78c244: 
1:885c379:     /**
1:f812e34:      * Creates a new buffered output stream to write data to the specified
1:f812e34:      * underlying output stream with the specified buffer size.
1:c78c244:      *
1:210e39d:      * @param out
1:210e39d:      *        the underlying output stream.
1:210e39d:      * @param size
1:210e39d:      *        the buffer size.
1:210e39d:      *
1:885c379:      * @throws IllegalArgumentException if size <= 0.
1:885c379:      */
1:885c379:     public NIOOutputStream(WritableByteChannel out, int size) {
1:885c379:         this.out = out;
1:f812e34:         if (size <= 0) {
1:885c379:             throw new IllegalArgumentException("Buffer size <= 0");
1:885c379:         }
1:885c379:         buffer = new byte[size];
1:885c379:         byteBuffer = ByteBuffer.wrap(buffer);
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * write a byte on to the stream
1:c78c244:      *
1:210e39d:      * @param b
1:210e39d:      *        byte to write
1:210e39d:      *
1:210e39d:      * @throws IOException if an error occurs while writing the data.
1:885c379:      */
1:7809e80:     @Override
1:885c379:     public void write(int b) throws IOException {
1:885c379:         checkClosed();
1:885c379:         if (availableBufferToWrite() < 1) {
1:885c379:             flush();
1:885c379:         }
1:210e39d:         buffer[count++] = (byte) b;
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * write a byte array to the stream
1:c78c244:      *
1:210e39d:      * @param b
1:210e39d:      *        the byte buffer
1:210e39d:      * @param off
1:210e39d:      *        the offset into the buffer
1:210e39d:      * @param len
1:210e39d:      *        the length of data to write
1:210e39d:      *
1:210e39d:      * @throws IOException if an error occurs while writing the data.
1:885c379:      */
1:7809e80:     @Override
1:885c379:     public void write(byte b[], int off, int len) throws IOException {
1:885c379:         checkClosed();
1:885c379:         if (availableBufferToWrite() < len) {
1:885c379:             flush();
1:885c379:         }
1:885c379:         if (buffer.length >= len) {
1:885c379:             System.arraycopy(b, off, buffer, count, len);
1:885c379:             count += len;
1:f812e34:         } else {
1:f812e34:             write(ByteBuffer.wrap(b, off, len));
1:885c379:         }
1:885c379:     }
1:885c379: 
1:f812e34:     /**
1:f812e34:      * flush the data to the output stream This doesn't call flush on the
1:210e39d:      * underlying OutputStream, because TCP/IP is particularly efficient at doing
1:f812e34:      * this itself ....
1:c78c244:      *
1:210e39d:      * @throws IOException if an error occurs while writing the data.
1:885c379:      */
1:7809e80:     @Override
1:885c379:     public void flush() throws IOException {
1:885c379:         if (count > 0 && out != null) {
1:f812e34:             byteBuffer.position(0);
1:f812e34:             byteBuffer.limit(count);
1:885c379:             write(byteBuffer);
1:885c379:             count = 0;
1:885c379:         }
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * close this stream
1:c78c244:      *
4:885c379:      * @throws IOException
1:885c379:      */
1:7809e80:     @Override
1:885c379:     public void close() throws IOException {
1:885c379:         super.close();
1:036f2a8:         if (engine != null) {
1:036f2a8:             engine.closeOutbound();
1:885c379:         }
1:885c379:         closed = true;
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * Checks that the stream has not been closed
1:c78c244:      *
1:885c379:      * @throws IOException
1:885c379:      */
1:885c379:     protected void checkClosed() throws IOException {
1:885c379:         if (closed) {
1:885c379:             throw new EOFException("Cannot write to the stream any more it has already been closed");
1:885c379:         }
1:885c379:     }
1:885c379: 
1:885c379:     /**
1:885c379:      * @return the amount free space in the buffer
1:885c379:      */
1:885c379:     private int availableBufferToWrite() {
1:885c379:         return buffer.length - count;
1:885c379:     }
1:f812e34: 
1:885c379:     protected void write(ByteBuffer data) throws IOException {
1:e504086:         ByteBuffer plain;
1:e504086:         if (engine != null) {
1:e504086:             plain = ByteBuffer.allocate(engine.getSession().getPacketBufferSize());
1:72eb191:             plain.clear();
1:72eb191:             engine.wrap(data, plain);
1:72eb191:             plain.flip();
1:210e39d:         } else {
1:e504086:             plain = data;
1:72eb191:         }
1:7809e80: 
1:e504086:         int remaining = plain.remaining();
1:f812e34:         long delay = 1;
1:210e39d:         int lastWriteSize = -1;
1:885c379:         try {
1:2189100:             writeTimestamp = System.currentTimeMillis();
1:f812e34:             while (remaining > 0) {
1:f812e34: 
1:210e39d:                 // We may need to do a little bit of sleeping to avoid a busy
1:210e39d:                 // loop. Slow down if no data was written out..
1:210e39d:                 if (lastWriteSize == 0) {
1:f812e34:                     try {
1:210e39d:                         // Use exponential growth to increase sleep time.
1:885c379:                         Thread.sleep(delay);
1:885c379:                         delay *= 2;
1:f812e34:                         if (delay > 1000) {
1:885c379:                             delay = 1000;
1:885c379:                         }
1:885c379:                     } catch (InterruptedException e) {
1:885c379:                         throw new InterruptedIOException();
1:f812e34:                     }
1:f812e34:                 } else {
1:f812e34:                     delay = 1;
1:f812e34:                 }
1:f812e34: 
1:210e39d:                 // Since the write is non-blocking, all the data may not have
1:210e39d:                 // been written.
1:210e39d:                 lastWriteSize = out.write(plain);
1:f812e34: 
1:210e39d:                 // if the data buffer was larger than the packet buffer we might
1:210e39d:                 // need to wrap more packets until we reach the end of data, but only
1:210e39d:                 // when plain has no more space since we are non-blocking and a write
1:210e39d:                 // might not have written anything.
1:8af1df7:                 if (engine != null && data.hasRemaining() && !plain.hasRemaining()) {
1:e504086:                     plain.clear();
1:e504086:                     engine.wrap(data, plain);
1:c78c244:                     plain.flip();
1:f812e34:                 }
1:885c379: 
1:7809e80:                 remaining = plain.remaining();
1:f812e34:             }
1:2189100:         } finally {
1:2189100:             writeTimestamp = -1;
1:885c379:         }
1:885c379:     }
1:c78c244: 
1:210e39d:     /*
1:210e39d:      * (non-Javadoc)
1:210e39d:      *
1:2189100:      * @see org.apache.activemq.transport.tcp.TimeStampStream#isWriting()
9:8e8b820:      */
1:7809e80:     @Override
1:2189100:     public boolean isWriting() {
1:2189100:         return writeTimestamp > 0;
1:885c379:     }
1:c78c244: 
1:210e39d:     /*
1:210e39d:      * (non-Javadoc)
1:210e39d:      *
1:210e39d:      * @see
1:210e39d:      * org.apache.activemq.transport.tcp.TimeStampStream#getWriteTimestamp()
1:8e8b820:      */
1:7809e80:     @Override
1:2189100:     public long getWriteTimestamp() {
1:2189100:         return writeTimestamp;
1:885c379:     }
1:885c379: 
1:e504086:     public void setEngine(SSLEngine engine) {
1:e504086:         this.engine = engine;
1:885c379:     }
21:8e8b820: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:210e39d
/////////////////////////////////////////////////////////////////////////
1:  * An optimized buffered OutputStream for TCP/IP
1:     private static final int BUFFER_SIZE = 8196;
/////////////////////////////////////////////////////////////////////////
1:     private volatile long writeTimestamp = -1; // concurrent reads of this value
/////////////////////////////////////////////////////////////////////////
1:      *        the channel to write data to.
/////////////////////////////////////////////////////////////////////////
1:      * @param out
1:      *        the underlying output stream.
1:      * @param size
1:      *        the buffer size.
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * @param b
1:      *        byte to write
1:      *
1:      * @throws IOException if an error occurs while writing the data.
/////////////////////////////////////////////////////////////////////////
1:         buffer[count++] = (byte) b;
1:      * @param b
1:      *        the byte buffer
1:      * @param off
1:      *        the offset into the buffer
1:      * @param len
1:      *        the length of data to write
1:      *
1:      * @throws IOException if an error occurs while writing the data.
/////////////////////////////////////////////////////////////////////////
1:      * underlying OutputStream, because TCP/IP is particularly efficient at doing
1:      * @throws IOException if an error occurs while writing the data.
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:         int lastWriteSize = -1;
1:                 // We may need to do a little bit of sleeping to avoid a busy
1:                 // loop. Slow down if no data was written out..
1:                 if (lastWriteSize == 0) {
1:                         // Use exponential growth to increase sleep time.
/////////////////////////////////////////////////////////////////////////
1:                 // Since the write is non-blocking, all the data may not have
1:                 // been written.
1:                 lastWriteSize = out.write(plain);
1:                 // if the data buffer was larger than the packet buffer we might
1:                 // need to wrap more packets until we reach the end of data, but only
1:                 // when plain has no more space since we are non-blocking and a write
1:                 // might not have written anything.
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * (non-Javadoc)
1:      *
/////////////////////////////////////////////////////////////////////////
1:     /*
1:      * (non-Javadoc)
1:      *
1:      * @see
1:      * org.apache.activemq.transport.tcp.TimeStampStream#getWriteTimestamp()
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7809e80
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:                 remaining = plain.remaining();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:2a64e88
/////////////////////////////////////////////////////////////////////////
0:                 remaining = plain.remaining();
commit:8af1df7
/////////////////////////////////////////////////////////////////////////
1:                 if (engine != null && data.hasRemaining() && !plain.hasRemaining()) {
commit:72eb191
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TimeStampStream;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:                 // if the data buffer was larger than the packet buffer we might need to
0:                 // wrap more packets until we reach the end of data, but only when plain
0:                 // has no more space since we are non-blocking and a write might not have
0:                 // written anything.
0:                 if (data.hasRemaining() && !plain.hasRemaining()) {
1:                     plain.clear();
1:                     engine.wrap(data, plain);
1:                     plain.flip();
1:                 }
commit:c78c244
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:             plain.flip();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final int BUFFER_SIZE = 8192;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
0:     private final static int BUFFER_SIZE = 8192;
1: 
1:     private final WritableByteChannel out;
1:     private final ByteBuffer byteBuffer;
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Creates a new buffered output stream to write data to the specified
1:      * underlying output stream with the specified buffer size.
0:      * 
0:      * @param out the underlying output stream.
1:         if (size <= 0) {
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:         buffer[count++] = (byte)b;
0:      * 
0:      * @param b the byte buffer
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             write(ByteBuffer.wrap(b, off, len));
1:     /**
1:      * flush the data to the output stream This doesn't call flush on the
0:      * underlying outputstream, because Tcp is particularly efficent at doing
1:      * this itself ....
0:      * 
1:             byteBuffer.position(0);
1:             byteBuffer.limit(count);
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1: 
0:         int remaining = data.remaining();
0:         int lastRemaining = remaining - 1;
1:         long delay = 1;
1:         while (remaining > 0) {
1: 
0:             // We may need to do a little bit of sleeping to avoid a busy loop.
0:             // Slow down if no data was written out..
0:             if (remaining == lastRemaining) {
1:                 try {
1:                     if (delay > 1000) {
1:                 }
1:             } else {
1:                 delay = 1;
1:             }
0:             lastRemaining = remaining;
1: 
0:             // Since the write is non-blocking, all the data may not have been
0:             // written.
0:             out.write(data);
0:             remaining = data.remaining();
1:         }
1:     }
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InterruptedIOException;
1: import java.io.OutputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.WritableByteChannel;
1: 
1: /**
0:  * An optimized buffered outputstream for Tcp
0:  *
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: 
0: public class NIOOutputStream extends OutputStream {
1: 	
0: 	private final static int BUFFER_SIZE = 8192;
1: 
0: 	private final WritableByteChannel out;
1:     private final byte[] buffer;
0: 	private final ByteBuffer byteBuffer;
1:     
1:     private int count;
1:     private boolean closed;
1: 
1:     /**
1:      * Constructor
0:      *
1:      * @param out
1:      */
1:     public NIOOutputStream(WritableByteChannel out) {
1:         this(out, BUFFER_SIZE);
1:     }
1: 
1:     /**
0:      * Creates a new buffered output stream to write data to the specified underlying output stream with the specified
0:      * buffer size.
0:      *
0:      * @param out  the underlying output stream.
0:      * @param size the buffer size.
1:      * @throws IllegalArgumentException if size <= 0.
1:      */
1:     public NIOOutputStream(WritableByteChannel out, int size) {
1:         this.out = out;
0: 		if (size <= 0) {
1:             throw new IllegalArgumentException("Buffer size <= 0");
1:         }
1:         buffer = new byte[size];
1:         byteBuffer = ByteBuffer.wrap(buffer);
1:     }
1: 
1:     /**
1:      * write a byte on to the stream
0:      *
0:      * @param b - byte to write
1:      * @throws IOException
1:      */
1:     public void write(int b) throws IOException {
1:         checkClosed();
1:         if (availableBufferToWrite() < 1) {
1:             flush();
1:         }
0:         buffer[count++] = (byte) b;
1:     }
1: 
1: 
1:     /**
1:      * write a byte array to the stream
0:      *
0:      * @param b   the byte buffer
0:      * @param off the offset into the buffer
0:      * @param len the length of data to write
1:      * @throws IOException
1:      */
1:     public void write(byte b[], int off, int len) throws IOException {
1:         checkClosed();
1:         if (availableBufferToWrite() < len) {
1:             flush();
1:         }
1:         if (buffer.length >= len) {
1:             System.arraycopy(b, off, buffer, count, len);
1:             count += len;
1:         }
0:         else {
0:         	write( ByteBuffer.wrap(b, off, len));
1:         }
1:     }
1: 
1: 	/**
0:      * flush the data to the output stream
0:      * This doesn't call flush on the underlying outputstream, because
0:      * Tcp is particularly efficent at doing this itself ....
0:      *
1:      * @throws IOException
1:      */
1:     public void flush() throws IOException {
1:         if (count > 0 && out != null) {
0:         	byteBuffer.position(0);
0:         	byteBuffer.limit(count);
1:             write(byteBuffer);
1:             count = 0;
1:         }
1:     }
1: 
1:     /**
1:      * close this stream
0:      *
1:      * @throws IOException
1:      */
1:     public void close() throws IOException {
1:         super.close();
1:         closed = true;
1:     }
1: 
1: 
1:     /**
1:      * Checks that the stream has not been closed
0:      *
1:      * @throws IOException
1:      */
1:     protected void checkClosed() throws IOException {
1:         if (closed) {
1:             throw new EOFException("Cannot write to the stream any more it has already been closed");
1:         }
1:     }
1: 
1:     /**
1:      * @return the amount free space in the buffer
1:      */
1:     private int availableBufferToWrite() {
1:         return buffer.length - count;
1:     }
1:     
1:     protected void write(ByteBuffer data) throws IOException {
0:         int remaining = data.remaining();        
0:         int lastRemaining = remaining-1;
0:         long delay=1;
0:         while( remaining > 0 ) {
1:         	
0: 	        // We may need to do a little bit of sleeping to avoid a busy loop.
0:             // Slow down if no data was written out.. 
0: 	        if( remaining == lastRemaining ) {
1: 	            try {
0:                     // Use exponential rollback to increase sleep time.
1:                     Thread.sleep(delay);
1:                     delay *= 2;
0:                     if( delay > 1000 ) {
1:                         delay = 1000;
1:                     }
1:                 } catch (InterruptedException e) {
1:                     throw new InterruptedIOException();
1:                 }                        
0: 	        } else {
0: 	            delay = 1;
1: 	        }        	        
0: 	        lastRemaining = remaining;
1: 	        
0:             // Since the write is non-blocking, all the data may not have been written.
0:             out.write( data );        
0:             remaining = data.remaining();        	        
1:         }    
1: 	}
1:     
1: }
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.EOFException;
0: import java.io.IOException;
0: import java.io.InterruptedIOException;
0: import java.io.OutputStream;
0: import java.nio.ByteBuffer;
0: import java.nio.channels.WritableByteChannel;
0: 
0: /**
0:  * An optimized buffered outputstream for Tcp
0:  *
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: 
0: public class NIOOutputStream extends OutputStream {
0: 	
0: 	private final static int BUFFER_SIZE = 8192;
0: 
0: 	private final WritableByteChannel out;
0:     private final byte[] buffer;
0: 	private final ByteBuffer byteBuffer;
0:     
0:     private int count;
0:     private boolean closed;
0: 
0:     /**
0:      * Constructor
0:      *
0:      * @param out
1:      */
0:     public NIOOutputStream(WritableByteChannel out) {
0:         this(out, BUFFER_SIZE);
1:     }
0: 
0:     /**
0:      * Creates a new buffered output stream to write data to the specified underlying output stream with the specified
0:      * buffer size.
0:      *
0:      * @param out  the underlying output stream.
0:      * @param size the buffer size.
0:      * @throws IllegalArgumentException if size <= 0.
1:      */
0:     public NIOOutputStream(WritableByteChannel out, int size) {
0:         this.out = out;
0: 		if (size <= 0) {
0:             throw new IllegalArgumentException("Buffer size <= 0");
1:         }
0:         buffer = new byte[size];
0:         byteBuffer = ByteBuffer.wrap(buffer);
1:     }
0: 
0:     /**
0:      * write a byte on to the stream
0:      *
0:      * @param b - byte to write
0:      * @throws IOException
1:      */
0:     public void write(int b) throws IOException {
0:         checkClosed();
0:         if (availableBufferToWrite() < 1) {
0:             flush();
1:         }
0:         buffer[count++] = (byte) b;
1:     }
0: 
0: 
0:     /**
0:      * write a byte array to the stream
0:      *
0:      * @param b   the byte buffer
0:      * @param off the offset into the buffer
0:      * @param len the length of data to write
0:      * @throws IOException
1:      */
0:     public void write(byte b[], int off, int len) throws IOException {
0:         checkClosed();
0:         if (availableBufferToWrite() < len) {
0:             flush();
1:         }
0:         if (buffer.length >= len) {
0:             System.arraycopy(b, off, buffer, count, len);
0:             count += len;
1:         }
0:         else {
0:         	write( ByteBuffer.wrap(b, off, len));
1:         }
1:     }
0: 
0: 	/**
0:      * flush the data to the output stream
0:      * This doesn't call flush on the underlying outputstream, because
0:      * Tcp is particularly efficent at doing this itself ....
0:      *
0:      * @throws IOException
1:      */
0:     public void flush() throws IOException {
0:         if (count > 0 && out != null) {
0:         	byteBuffer.position(0);
0:         	byteBuffer.limit(count);
0:             write(byteBuffer);
0:             count = 0;
1:         }
1:     }
0: 
0:     /**
0:      * close this stream
0:      *
0:      * @throws IOException
1:      */
0:     public void close() throws IOException {
0:         super.close();
0:         closed = true;
1:     }
0: 
0: 
0:     /**
0:      * Checks that the stream has not been closed
0:      *
0:      * @throws IOException
1:      */
0:     protected void checkClosed() throws IOException {
0:         if (closed) {
0:             throw new EOFException("Cannot write to the stream any more it has already been closed");
1:         }
1:     }
0: 
0:     /**
0:      * @return the amount free space in the buffer
1:      */
0:     private int availableBufferToWrite() {
0:         return buffer.length - count;
1:     }
0:     
0:     protected void write(ByteBuffer data) throws IOException {
0:         int remaining = data.remaining();        
0:         int lastRemaining = remaining-1;
0:         long delay=1;
0:         while( remaining > 0 ) {
0:         	
0: 	        // We may need to do a little bit of sleeping to avoid a busy loop.
0:             // Slow down if no data was written out.. 
0: 	        if( remaining == lastRemaining ) {
0: 	            try {
0:                     // Use exponential rollback to increase sleep time.
0:                     Thread.sleep(delay);
0:                     delay *= 2;
0:                     if( delay > 1000 ) {
0:                         delay = 1000;
1:                     }
0:                 } catch (InterruptedException e) {
0:                     throw new InterruptedIOException();
1:                 }                        
0: 	        } else {
0: 	            delay = 1;
1: 	        }        	        
0: 	        lastRemaining = remaining;
0: 	        
0:             // Since the write is non-blocking, all the data may not have been written.
0:             out.write( data );        
0:             remaining = data.remaining();        	        
1:         }    
1: 	}
0:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1:         if (engine != null) {
1:             engine.closeOutbound();
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
commit:e504086
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLEngine;
0: import javax.net.ssl.SSLEngineResult;
0: 
/////////////////////////////////////////////////////////////////////////
1:     private SSLEngine engine;
0: 
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer plain;
1:         if (engine != null) {
1:             plain = ByteBuffer.allocate(engine.getSession().getPacketBufferSize());
1:             plain.clear();
1:             engine.wrap(data, plain);
0:         }  else {
1:             plain = data;
0:         }
0:         plain.flip();
1:         int remaining = plain.remaining();
/////////////////////////////////////////////////////////////////////////
0:                 out.write(plain);
/////////////////////////////////////////////////////////////////////////
1:     public void setEngine(SSLEngine engine) {
1:         this.engine = engine;
0:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2189100
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.tcp.TimeStampStream;
0: 
1: public class NIOOutputStream extends OutputStream implements TimeStampStream {
/////////////////////////////////////////////////////////////////////////
0:     private volatile long writeTimestamp = -1;//concurrent reads of this value
/////////////////////////////////////////////////////////////////////////
0:         try {
1:             writeTimestamp = System.currentTimeMillis();
0:             while (remaining > 0) {
0:                 // We may need to do a little bit of sleeping to avoid a busy loop.
0:                 // Slow down if no data was written out..
0:                 if (remaining == lastRemaining) {
0:                     try {
0:                         // Use exponential rollback to increase sleep time.
0:                         Thread.sleep(delay);
0:                         delay *= 2;
0:                         if (delay > 1000) {
0:                             delay = 1000;
0:                         }
0:                     } catch (InterruptedException e) {
0:                         throw new InterruptedIOException();
0:                 } else {
0:                     delay = 1;
0:                 lastRemaining = remaining;
0:                 // Since the write is non-blocking, all the data may not have been
0:                 // written.
0:                 out.write(data);
0:                 remaining = data.remaining();
0:             }
1:         } finally {
1:             writeTimestamp = -1;
0:     
0:     
0:     /* (non-Javadoc)
1:      * @see org.apache.activemq.transport.tcp.TimeStampStream#isWriting()
0:      */
1:     public boolean isWriting() {
1:         return writeTimestamp > 0;
0:     }
0:     
0:     /* (non-Javadoc)
0:      * @see org.apache.activemq.transport.tcp.TimeStampStream#getWriteTimestamp()
0:      */
1:     public long getWriteTimestamp() {
1:         return writeTimestamp;
0:     }
============================================================================