1:8cb2141: //========================================================================
1:8cb2141: //Copyright 2006 Mort Bay Consulting Pty. Ltd.
1:8cb2141: //------------------------------------------------------------------------
1:8cb2141: //Licensed under the Apache License, Version 2.0 (the "License");
1:8cb2141: //you may not use this file except in compliance with the License.
1:12b26b6: //You may obtain a copy of the License at
1:8cb2141: //http://www.apache.org/licenses/LICENSE-2.0
1:8cb2141: //Unless required by applicable law or agreed to in writing, software
1:8cb2141: //distributed under the License is distributed on an "AS IS" BASIS,
1:8cb2141: //WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8cb2141: //See the License for the specific language governing permissions and
1:8cb2141: //limitations under the License.
1:8cb2141: //========================================================================
10:8cb2141: 
1:8cb2141: package org.apache.activemq.web;
1:fedc039: 
1:8cb2141: import java.io.ByteArrayOutputStream;
1:8cb2141: import java.io.IOException;
1:8cb2141: import java.io.InputStream;
1:fedc039: import java.net.URL;
1:8cb2141: import java.util.HashMap;
1:8cb2141: import java.util.Map;
1:fedc039: 
1:8cb2141: import javax.servlet.ServletException;
1:8cb2141: import javax.servlet.http.HttpServletRequest;
1:8cb2141: import javax.servlet.http.HttpServletResponse;
1:8cb2141: 
1:8cb2141: /* ------------------------------------------------------------ */
1:540dd5c: /**
1:540dd5c:  * AjaxServlet. The AjaxServlet extends the {@link MessageListenerServlet} with
1:540dd5c:  * the capability to server the <code>amq.js</code> script and associated
1:540dd5c:  * scripts from resources within the activemq-web jar. The amq.js script is the
1:540dd5c:  * client side companion to the MessageListenerServlet and supports sending
1:540dd5c:  * messages and long polling for receiving messages (Also called Comet style
1:540dd5c:  * Ajax).
1:8cb2141:  */
1:8cb2141: public class AjaxServlet extends MessageListenerServlet {
1:8cb2141: 
1:21b81e1:     private static final long serialVersionUID = -3875280764356406114L;
1:540dd5c:     private Map<String, byte[]> jsCache = new HashMap<String, byte[]>();
1:540dd5c:     private long jsLastModified = 1000 * (System.currentTimeMillis() / 1000);
1:8cb2141: 
1:8cb2141:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:540dd5c:         if (request.getPathInfo() != null && request.getPathInfo().endsWith(".js")) {
1:540dd5c:             doJavaScript(request, response);
1:540dd5c:         } else {
1:8cb2141:             super.doGet(request, response);
1:540dd5c:         }
3:8cb2141:     }
1:540dd5c: 
1:540dd5c:     protected void doJavaScript(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
1:540dd5c: 
1:fedc039:         // Look for a local resource first.
1:540dd5c:         String js = request.getServletPath() + request.getPathInfo();
1:4225a49:         URL url = getServletContext().getResource(js);
1:540dd5c:         if (url != null) {
1:540dd5c:             getServletContext().getNamedDispatcher("default").forward(request, response);
1:fedc039:             return;
1:fedc039:         }
1:540dd5c: 
1:fedc039:         // Serve from the classpath resources
1:540dd5c:         String resource = "org/apache/activemq/web" + request.getPathInfo();
1:540dd5c:         synchronized (jsCache) {
1:540dd5c: 
1:540dd5c:             byte[] data = jsCache.get(resource);
1:540dd5c:             if (data == null) {
1:12b26b6:                 try(InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource)) {
1:12b26b6:                     if (in != null) {
1:12b26b6:                         try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {
1:12b26b6:                             byte[] buf = new byte[4096];
1:12b26b6:                             int len = in.read(buf);
1:12b26b6:                             while (len >= 0) {
1:12b26b6:                                 out.write(buf, 0, len);
1:12b26b6:                                 len = in.read(buf);
1:12b26b6:                             }
1:12b26b6:                             data = out.toByteArray();
1:12b26b6:                             jsCache.put(resource, data);
1:12b26b6:                         }
1:8cb2141:                     }
1:8cb2141:                 }
1:8cb2141:             }
1:540dd5c: 
1:540dd5c:             if (data != null) {
1:540dd5c: 
1:540dd5c:                 long ifModified = request.getDateHeader("If-Modified-Since");
1:540dd5c: 
1:540dd5c:                 if (ifModified == jsLastModified) {
1:8cb2141:                     response.sendError(HttpServletResponse.SC_NOT_MODIFIED);
1:540dd5c:                 } else {
1:8cb2141:                     response.setContentType("application/x-javascript");
1:8cb2141:                     response.setContentLength(data.length);
1:540dd5c:                     response.setDateHeader("Last-Modified", jsLastModified);
1:8cb2141:                     response.getOutputStream().write(data);
1:8cb2141:                 }
1:540dd5c:             } else {
1:8cb2141:                 response.sendError(HttpServletResponse.SC_NOT_FOUND);
1:540dd5c:             }
1:8cb2141:         }
1:8cb2141:     }
1:8cb2141: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1: //You may obtain a copy of the License at
/////////////////////////////////////////////////////////////////////////
1:                 try(InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource)) {
1:                     if (in != null) {
1:                         try(ByteArrayOutputStream out = new ByteArrayOutputStream()) {
1:                             byte[] buf = new byte[4096];
1:                             int len = in.read(buf);
1:                             while (len >= 0) {
1:                                 out.write(buf, 0, len);
1:                                 len = in.read(buf);
1:                             }
1:                             data = out.toByteArray();
1:                             jsCache.put(resource, data);
1:                         }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:21b81e1
/////////////////////////////////////////////////////////////////////////
1:     private static final long serialVersionUID = -3875280764356406114L;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * AjaxServlet. The AjaxServlet extends the {@link MessageListenerServlet} with
1:  * the capability to server the <code>amq.js</code> script and associated
1:  * scripts from resources within the activemq-web jar. The amq.js script is the
1:  * client side companion to the MessageListenerServlet and supports sending
1:  * messages and long polling for receiving messages (Also called Comet style
1:  * Ajax).
1:     private Map<String, byte[]> jsCache = new HashMap<String, byte[]>();
1:     private long jsLastModified = 1000 * (System.currentTimeMillis() / 1000);
1:         if (request.getPathInfo() != null && request.getPathInfo().endsWith(".js")) {
1:             doJavaScript(request, response);
1:         } else {
1:         }
1: 
1:     protected void doJavaScript(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
1: 
1:         String js = request.getServletPath() + request.getPathInfo();
1:         if (url != null) {
1:             getServletContext().getNamedDispatcher("default").forward(request, response);
1: 
1:         String resource = "org/apache/activemq/web" + request.getPathInfo();
1:         synchronized (jsCache) {
1: 
1:             byte[] data = jsCache.get(resource);
1:             if (data == null) {
0:                 if (in != null) {
0:                     byte[] buf = new byte[4096];
0:                     int len = in.read(buf);
0:                     while (len >= 0) {
0:                         len = in.read(buf);
0:                     data = out.toByteArray();
1: 
1:             if (data != null) {
1: 
1:                 long ifModified = request.getDateHeader("If-Modified-Since");
1: 
1:                 if (ifModified == jsLastModified) {
1:                 } else {
1:                     response.setDateHeader("Last-Modified", jsLastModified);
1:             } else {
1:             }
author:Gregory John Wilkins
-------------------------------------------------------------------------------
commit:4225a49
/////////////////////////////////////////////////////////////////////////
0:         String js = request.getServletPath()+request.getPathInfo();
1:         URL url = getServletContext().getResource(js);
0:             getServletContext().getNamedDispatcher("default").forward(request,response);
commit:fedc039
/////////////////////////////////////////////////////////////////////////
1: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
0:     protected void doJavaScript(HttpServletRequest request, HttpServletResponse response)throws IOException, ServletException {
1:         
1:         // Look for a local resource first.
0:         URL url = getServletContext().getResource(request.getServletPath()+request.getPathInfo());
0:         if (url!=null)
0:         {
0:             getServletContext().getRequestDispatcher(request.getServletPath()+request.getPathInfo()).forward(request,response);
1:             return;
1:         }
1:         
1:         // Serve from the classpath resources
commit:8cb2141
/////////////////////////////////////////////////////////////////////////
1: //========================================================================
1: //Copyright 2006 Mort Bay Consulting Pty. Ltd.
1: //------------------------------------------------------------------------
1: //Licensed under the Apache License, Version 2.0 (the "License");
1: //you may not use this file except in compliance with the License.
0: //You may obtain a copy of the License at 
1: //http://www.apache.org/licenses/LICENSE-2.0
1: //Unless required by applicable law or agreed to in writing, software
1: //distributed under the License is distributed on an "AS IS" BASIS,
1: //WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1: //See the License for the specific language governing permissions and
1: //limitations under the License.
1: //========================================================================
1: 
1: package org.apache.activemq.web;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
1: 
1: /* ------------------------------------------------------------ */
0: /** AjaxServlet.
0:  * The AjaxServlet extends the {@link MessageListenerServlet} with the capability to 
0:  * server the <code>amq.js</code> script and associated scripts from resources 
0:  * within the activemq-web jar.  The amq.js script is the client side companion to
0:  * the MessageListenerServlet and supports sending messages and long polling for 
0:  * receiving messages (Also called Comet style Ajax).
0:  * 
1:  */
1: public class AjaxServlet extends MessageListenerServlet {
1: 
0:     private Map jsCache = new HashMap();
0:     private long jsLastModified = 1000*(System.currentTimeMillis()/1000);
1: 
1: 
1:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
0:         if (request.getPathInfo()!=null && request.getPathInfo().endsWith(".js"))
0:             doJavaScript(request,response);
0:         else 
1:             super.doGet(request, response);
1:     }
1:     
0:     protected void doJavaScript(HttpServletRequest request, HttpServletResponse response)throws IOException {
0:         String resource="org/apache/activemq/web"+request.getPathInfo();
0:         synchronized(jsCache){
1:             
0:             byte[] data = (byte[])jsCache.get(resource);
0:             if (data==null) {
0:                 InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
0:                 if (in!=null)
0:                 {
0:                     ByteArrayOutputStream out = new ByteArrayOutputStream();
0:                     byte[] buf=new byte[4096];
0:                     int len=in.read(buf);
0:                     while (len>=0) {
0:                         out.write(buf, 0, len);
0:                         len=in.read(buf);
1:                     }
0:                     in.close();
0:                     out.close();
0:                     data=out.toByteArray();
0:                     jsCache.put(resource, data);
1:                 }
1:             }
1:             
0:             if (data!=null){
1:                 
0:                 long if_modified = request.getDateHeader("If-Modified-Since");
1:                 
0:                 if (if_modified == jsLastModified) {
1:                     response.sendError(HttpServletResponse.SC_NOT_MODIFIED);
1:                 }
0:                 else  {
1:                     response.setContentType("application/x-javascript");
1:                     response.setContentLength(data.length);
0:                     response.setDateHeader("Last-Modified",jsLastModified);
1:                     response.getOutputStream().write(data);
1:                 }
1:             }
0:             else
1:                 response.sendError(HttpServletResponse.SC_NOT_FOUND);
1:         }
1:     }
1: }
============================================================================