1:6e5f231: /**
1:6e5f231:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e5f231:  * contributor license agreements.  See the NOTICE file distributed with
1:6e5f231:  * this work for additional information regarding copyright ownership.
1:6e5f231:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e5f231:  * (the "License"); you may not use this file except in compliance with
1:6e5f231:  * the License.  You may obtain a copy of the License at
1:6e5f231:  *
1:6e5f231:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e5f231:  *
1:6e5f231:  * Unless required by applicable law or agreed to in writing, software
1:6e5f231:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e5f231:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e5f231:  * See the License for the specific language governing permissions and
1:6e5f231:  * limitations under the License.
1:6e5f231:  */
1:6e5f231: package org.apache.activemq.broker.policy;
1:6e5f231: 
1:6e5f231: import javax.jms.Message;
1:6e5f231: 
1:6e5f231: import org.apache.activemq.ActiveMQConnection;
1:6e5f231: import org.apache.activemq.broker.BrokerService;
1:6e5f231: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:6e5f231: import org.apache.activemq.broker.region.policy.DiscardingDeadLetterStrategy;
1:6e5f231: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6e5f231: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6e5f231: import org.slf4j.Logger;
1:6e5f231: import org.slf4j.LoggerFactory;
1:6e5f231: 
1:6e5f231: /**
1:6e5f231:  *
1:6e5f231:  */
1:6e5f231: public class DiscardingDeadLetterPolicyTest extends DeadLetterTest {
1:6e5f231:     private static final Logger LOG = LoggerFactory.getLogger(DiscardingDeadLetterPolicyTest.class);
1:6e5f231: 
1:6e5f231:     @Override
1:6e5f231:     protected BrokerService createBroker() throws Exception {
1:6e5f231:         BrokerService broker = super.createBroker();
1:6e5f231: 
1:6e5f231:         PolicyEntry policy = new PolicyEntry();
1:6e5f231:         DeadLetterStrategy strategy = new DiscardingDeadLetterStrategy();
1:6e5f231:         strategy.setProcessNonPersistent(true);
1:6e5f231:         policy.setDeadLetterStrategy(strategy);
1:6e5f231: 
1:6e5f231:         PolicyMap pMap = new PolicyMap();
1:6e5f231:         pMap.setDefaultEntry(policy);
1:6e5f231: 
1:6e5f231:         broker.setDestinationPolicy(pMap);
1:6e5f231: 
1:6e5f231:         return broker;
1:6e5f231:     }
1:6e5f231: 
1:6e5f231:     @Override
1:6e5f231:     protected void doTest() throws Exception {
1:6e5f231:         connection.start();
1:6e5f231: 
1:6e5f231:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:6e5f231:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:6e5f231:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:6e5f231: 
1:6e5f231:         makeConsumer();
1:6e5f231:         makeDlqConsumer();
1:6e5f231: 
1:6e5f231:         sendMessages();
1:6e5f231: 
1:6e5f231:         // now lets receive and rollback N times
1:6e5f231:         for (int i = 0; i < messageCount; i++) {
1:6e5f231:             consumeAndRollback(i);
1:6e5f231:         }
1:6e5f231: 
1:6e5f231:         for (int i = 0; i < messageCount; i++) {
1:6e5f231:             Message msg = dlqConsumer.receive(1000);
1:6e5f231:             assertNull("Should not be a DLQ message for loop: " + i, msg);
1:6e5f231:         }
1:6e5f231:         session.commit();
1:6e5f231:     }
1:6e5f231: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6e5f231
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.DiscardingDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  */
1: public class DiscardingDeadLetterPolicyTest extends DeadLetterTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(DiscardingDeadLetterPolicyTest.class);
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         DeadLetterStrategy strategy = new DiscardingDeadLetterStrategy();
1:         strategy.setProcessNonPersistent(true);
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected void doTest() throws Exception {
1:         connection.start();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         makeDlqConsumer();
1: 
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         for (int i = 0; i < messageCount; i++) {
1:             consumeAndRollback(i);
1:         }
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             Message msg = dlqConsumer.receive(1000);
1:             assertNull("Should not be a DLQ message for loop: " + i, msg);
1:         }
1:         session.commit();
1:     }
1: }
============================================================================