1:886e2d4: /**
1:886e2d4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:886e2d4:  * contributor license agreements.  See the NOTICE file distributed with
1:886e2d4:  * this work for additional information regarding copyright ownership.
1:886e2d4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:886e2d4:  * (the "License"); you may not use this file except in compliance with
1:886e2d4:  * the License.  You may obtain a copy of the License at
1:886e2d4:  *
1:886e2d4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:886e2d4:  *
1:886e2d4:  * Unless required by applicable law or agreed to in writing, software
1:886e2d4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:886e2d4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:886e2d4:  * See the License for the specific language governing permissions and
1:886e2d4:  * limitations under the License.
1:886e2d4:  */
1:886e2d4: 
1:886e2d4: package org.apache.activemq.broker.region;
1:886e2d4: 
1:886e2d4: import org.apache.activemq.management.CountStatisticImpl;
1:886e2d4: import org.apache.activemq.management.StatsImpl;
1:886e2d4: 
1:886e2d4: /**
1:886e2d4:  * The J2EE Statistics for the Connection.
1:886e2d4:  *
1:886e2d4:  *
1:886e2d4:  */
1:886e2d4: public class RegionStatistics extends StatsImpl {
1:886e2d4: 
1:886e2d4:     private CountStatisticImpl advisoryDestinations;
1:886e2d4:     private CountStatisticImpl destinations;
1:886e2d4:     private CountStatisticImpl allDestinations;
1:886e2d4: 
1:886e2d4:     public RegionStatistics() {
1:886e2d4:         this(true);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public RegionStatistics(boolean enabled) {
1:886e2d4: 
1:886e2d4:         advisoryDestinations = new CountStatisticImpl("advisoryTopics", "The number of advisory destinations in the region");
1:886e2d4:         destinations = new CountStatisticImpl("destinations", "The number of regular (non-adivsory) destinations in the region");
1:886e2d4:         allDestinations = new CountStatisticImpl("allDestinations", "The total number of destinations, including advisory destinations, in the region");
1:886e2d4: 
1:886e2d4:         addStatistic("advisoryDestinations", advisoryDestinations);
1:886e2d4:         addStatistic("destinations", destinations);
1:886e2d4:         addStatistic("allDestinations", allDestinations);
1:886e2d4: 
1:886e2d4:         this.setEnabled(enabled);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public CountStatisticImpl getAdvisoryDestinations() {
1:886e2d4:         return advisoryDestinations;
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public CountStatisticImpl getDestinations() {
1:886e2d4:         return destinations;
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public CountStatisticImpl getAllDestinations() {
1:886e2d4:         return allDestinations;
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public void reset() {
1:886e2d4:         super.reset();
1:886e2d4:         advisoryDestinations.reset();
1:886e2d4:         destinations.reset();
1:886e2d4:         allDestinations.reset();
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public void setEnabled(boolean enabled) {
1:886e2d4:         super.setEnabled(enabled);
1:886e2d4:         advisoryDestinations.setEnabled(enabled);
1:886e2d4:         destinations.setEnabled(enabled);
1:886e2d4:         allDestinations.setEnabled(enabled);
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     public void setParent(RegionStatistics parent) {
1:886e2d4:         if (parent != null) {
1:886e2d4:             advisoryDestinations.setParent(parent.getAdvisoryDestinations());
1:886e2d4:             destinations.setParent(parent.getDestinations());
1:886e2d4:             allDestinations.setParent(parent.getAllDestinations());
1:886e2d4:         } else {
1:886e2d4:             advisoryDestinations.setParent(null);
1:886e2d4:             destinations.setParent(null);
1:886e2d4:             allDestinations.setParent(null);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:886e2d4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.management.CountStatisticImpl;
1: import org.apache.activemq.management.StatsImpl;
1: 
1: /**
1:  * The J2EE Statistics for the Connection.
1:  *
1:  *
1:  */
1: public class RegionStatistics extends StatsImpl {
1: 
1:     private CountStatisticImpl advisoryDestinations;
1:     private CountStatisticImpl destinations;
1:     private CountStatisticImpl allDestinations;
1: 
1:     public RegionStatistics() {
1:         this(true);
1:     }
1: 
1:     public RegionStatistics(boolean enabled) {
1: 
1:         advisoryDestinations = new CountStatisticImpl("advisoryTopics", "The number of advisory destinations in the region");
1:         destinations = new CountStatisticImpl("destinations", "The number of regular (non-adivsory) destinations in the region");
1:         allDestinations = new CountStatisticImpl("allDestinations", "The total number of destinations, including advisory destinations, in the region");
1: 
1:         addStatistic("advisoryDestinations", advisoryDestinations);
1:         addStatistic("destinations", destinations);
1:         addStatistic("allDestinations", allDestinations);
1: 
1:         this.setEnabled(enabled);
1:     }
1: 
1:     public CountStatisticImpl getAdvisoryDestinations() {
1:         return advisoryDestinations;
1:     }
1: 
1:     public CountStatisticImpl getDestinations() {
1:         return destinations;
1:     }
1: 
1:     public CountStatisticImpl getAllDestinations() {
1:         return allDestinations;
1:     }
1: 
1:     public void reset() {
1:         super.reset();
1:         advisoryDestinations.reset();
1:         destinations.reset();
1:         allDestinations.reset();
1:     }
1: 
1:     public void setEnabled(boolean enabled) {
1:         super.setEnabled(enabled);
1:         advisoryDestinations.setEnabled(enabled);
1:         destinations.setEnabled(enabled);
1:         allDestinations.setEnabled(enabled);
1:     }
1: 
1:     public void setParent(RegionStatistics parent) {
1:         if (parent != null) {
1:             advisoryDestinations.setParent(parent.getAdvisoryDestinations());
1:             destinations.setParent(parent.getDestinations());
1:             allDestinations.setParent(parent.getAllDestinations());
1:         } else {
1:             advisoryDestinations.setParent(null);
1:             destinations.setParent(null);
1:             allDestinations.setParent(null);
1:         }
1:     }
1: 
1: }
============================================================================