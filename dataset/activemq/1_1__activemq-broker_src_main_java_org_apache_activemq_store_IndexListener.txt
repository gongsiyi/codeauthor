1:54e2e3b: /**
1:54e2e3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:54e2e3b:  * contributor license agreements.  See the NOTICE file distributed with
1:54e2e3b:  * this work for additional information regarding copyright ownership.
1:54e2e3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:54e2e3b:  * (the "License"); you may not use this file except in compliance with
1:54e2e3b:  * the License.  You may obtain a copy of the License at
1:54e2e3b:  *
1:54e2e3b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:54e2e3b:  *
1:54e2e3b:  * Unless required by applicable law or agreed to in writing, software
1:54e2e3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:54e2e3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:54e2e3b:  * See the License for the specific language governing permissions and
1:54e2e3b:  * limitations under the License.
1:54e2e3b:  */
1:54e2e3b: package org.apache.activemq.store;
1:54e2e3b: 
1:54e2e3b: import org.apache.activemq.broker.ConnectionContext;
1:54e2e3b: import org.apache.activemq.command.Message;
1:54e2e3b: 
1:54e2e3b: /**
1:54e2e3b:  * callback when the index is updated, allows ordered work to be seen by destinations
1:54e2e3b:  */
1:54e2e3b: public interface IndexListener {
1:54e2e3b: 
1:54e2e3b:     final class MessageContext {
1:8a37f97:         public final Message message;
1:8a37f97:         public final ConnectionContext context;
1:8a37f97:         public final Runnable onCompletion;
1:54e2e3b:         public boolean duplicate;
1:54e2e3b: 
1:54e2e3b:         public MessageContext(ConnectionContext context, Message message, Runnable onCompletion) {
1:54e2e3b:             this.context = context;
1:54e2e3b:             this.message = message;
1:54e2e3b:             this.onCompletion = onCompletion;
1:54e2e3b:         }
1:54e2e3b:     }
1:54e2e3b: 
1:54e2e3b:     /**
1:54e2e3b:      *  called with some global index lock held so that a listener can do order
1:54e2e3b:      *  dependent work
1:54e2e3b:      *  non null MessageContext.onCompletion called when work is done
1:54e2e3b:      */
1:54e2e3b:     public void onAdd(MessageContext messageContext);
1:54e2e3b: 
1:54e2e3b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8a37f97
/////////////////////////////////////////////////////////////////////////
1:         public final Message message;
1:         public final ConnectionContext context;
1:         public final Runnable onCompletion;
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.Message;
1: 
1: /**
1:  * callback when the index is updated, allows ordered work to be seen by destinations
1:  */
1: public interface IndexListener {
1: 
1:     final class MessageContext {
0:         public Message message;
0:         public ConnectionContext context;
0:         public Runnable onCompletion;
1:         public boolean duplicate;
1: 
1:         public MessageContext(ConnectionContext context, Message message, Runnable onCompletion) {
1:             this.context = context;
1:             this.message = message;
1:             this.onCompletion = onCompletion;
1:         }
1:     }
1: 
1:     /**
1:      *  called with some global index lock held so that a listener can do order
1:      *  dependent work
1:      *  non null MessageContext.onCompletion called when work is done
1:      */
1:     public void onAdd(MessageContext messageContext);
1: 
1: }
============================================================================