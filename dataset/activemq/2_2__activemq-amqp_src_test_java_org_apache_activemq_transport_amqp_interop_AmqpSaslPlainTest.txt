1:ce5628a: /*
1:ce5628a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ce5628a:  * contributor license agreements.  See the NOTICE file distributed with
1:ce5628a:  * this work for additional information regarding copyright ownership.
1:ce5628a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ce5628a:  * (the "License"); you may not use this file except in compliance with
1:ce5628a:  * the License.  You may obtain a copy of the License at
1:ce5628a:  *
1:ce5628a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ce5628a:  *
1:ce5628a:  * Unless required by applicable law or agreed to in writing, software
1:ce5628a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ce5628a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ce5628a:  * See the License for the specific language governing permissions and
1:ce5628a:  * limitations under the License.
1:ce5628a:  */
1:ce5628a: package org.apache.activemq.transport.amqp.interop;
1:ce5628a: 
1:ce5628a: import static org.junit.Assert.assertEquals;
1:ce5628a: import static org.junit.Assert.assertNotNull;
1:ce5628a: import static org.junit.Assert.assertTrue;
1:ce5628a: import static org.junit.Assert.fail;
1:ce5628a: 
1:ce5628a: import java.util.ArrayList;
1:ce5628a: import java.util.List;
1:ce5628a: 
1:ce5628a: import org.apache.activemq.broker.BrokerPlugin;
1:ce5628a: import org.apache.activemq.security.AuthenticationUser;
1:ce5628a: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:ce5628a: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:ce5628a: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:ce5628a: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:ce5628a: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:ce5628a: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:ce5628a: import org.apache.activemq.transport.amqp.client.sasl.PlainMechanism;
1:ce5628a: import org.junit.Test;
1:ce5628a: 
1:ce5628a: /**
1:ce5628a:  * Test broker behaviour when creating AMQP connections with SASL PLAIN mechanism.
1:ce5628a:  */
1:ce5628a: public class AmqpSaslPlainTest extends AmqpClientTestSupport {
1:ce5628a: 
1:ce5628a:     private static final String ADMIN = "admin";
1:ce5628a:     private static final String USER = "user";
1:ce5628a:     private static final String USER_PASSWORD = "password";
1:ce5628a: 
1:ce5628a:     @Override
1:ce5628a:     protected void performAdditionalConfiguration(org.apache.activemq.broker.BrokerService brokerService) throws Exception {
1:ce5628a:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:ce5628a:         users.add(new AuthenticationUser(USER, USER_PASSWORD, "users"));
1:ce5628a:         users.add(new AuthenticationUser(ADMIN, ADMIN, "admins"));
1:ce5628a: 
1:ce5628a:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:ce5628a: 
1:ce5628a:         brokerService.setPlugins(new BrokerPlugin[] { authenticationPlugin});
1:ce5628a:     };
1:ce5628a: 
1:ce5628a:     @Test(timeout = 30000)
1:ce5628a:     public void testSaslPlainWithValidUsernameAndPassword() throws Exception {
1:ce5628a:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1:ce5628a: 
1:ce5628a:         doSucessfullConnectionTestImpl(client);
1:ce5628a:     }
1:ce5628a: 
1:ce5628a:     @Test(timeout = 30000)
1:b5dd0a1:     public void testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUser() throws Exception {
1:ce5628a:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1:ce5628a:         client.setAuthzid(USER);
1:ce5628a: 
1:ce5628a:         doSucessfullConnectionTestImpl(client);
1:ce5628a:     }
1:ce5628a: 
1:b5dd0a1:     @Test(timeout = 30000)
1:b5dd0a1:     public void testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUnkown() throws Exception {
1:b5dd0a1:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1:b5dd0a1:         client.setAuthzid("unknown");
1:b5dd0a1: 
1:b5dd0a1:         doSucessfullConnectionTestImpl(client);
1:b5dd0a1:     }
1:b5dd0a1: 
1:ce5628a:     private void doSucessfullConnectionTestImpl(AmqpClient client) throws Exception {
1:ce5628a:         client.setMechanismRestriction(PlainMechanism.MECH_NAME);
1:ce5628a: 
1:ce5628a:         // Expect connection to succeed
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:ce5628a: 
1:ce5628a:         // Exercise it for verification
1:ce5628a:         exerciseConnection(connection);
1:ce5628a: 
1:ce5628a:         connection.close();
1:ce5628a:     }
1:ce5628a: 
1:ce5628a:     private void exerciseConnection(AmqpConnection connection)throws Exception{
1:ce5628a:         AmqpSession session = connection.createSession();
1:ce5628a: 
1:ce5628a:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:ce5628a: 
1:ce5628a:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:ce5628a: 
1:ce5628a:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:ce5628a:         assertNotNull(getProxyToQueue(getTestName()));
1:ce5628a:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:ce5628a:         sender.close();
1:ce5628a:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1:ce5628a:     }
1:ce5628a: 
1:ce5628a:     @Test(timeout = 30000)
1:ce5628a:     public void testSaslPlainWithInvalidUsername() throws Exception {
1:ce5628a:         AmqpClient client = createAmqpClient("not-user", USER_PASSWORD);
1:ce5628a:         doFailedConnectionTestImpl(client);
1:ce5628a:     }
1:ce5628a: 
1:b5dd0a1:     @Test(timeout = 30000)
1:ce5628a:     public void testSaslPlainWithInvalidPassword() throws Exception {
1:ce5628a:         AmqpClient client = createAmqpClient(USER, "not-user-password");
1:ce5628a:         doFailedConnectionTestImpl(client);
1:ce5628a:     }
1:ce5628a: 
1:ce5628a:     @Test(timeout = 30000)
1:b5dd0a1:     public void testSaslPlainWithInvalidUsernameAndAuthzid() throws Exception {
1:b5dd0a1:         AmqpClient client = createAmqpClient("not-user", USER_PASSWORD);
1:b5dd0a1:         client.setAuthzid(USER);
1:b5dd0a1:         doFailedConnectionTestImpl(client);
1:b5dd0a1:     }
1:b5dd0a1: 
1:b5dd0a1:     @Test(timeout = 30000)
1:b5dd0a1:     public void testSaslPlainWithInvalidPasswordAndAuthzid() throws Exception {
1:b5dd0a1:         AmqpClient client = createAmqpClient(USER, "not-user-password");
1:b5dd0a1:         client.setAuthzid(USER);
1:b5dd0a1:         doFailedConnectionTestImpl(client);
1:b5dd0a1:     }
1:b5dd0a1: 
1:ce5628a:     private void doFailedConnectionTestImpl(AmqpClient client) throws Exception {
1:ce5628a:         client.setMechanismRestriction(PlainMechanism.MECH_NAME);
1:ce5628a: 
1:ce5628a:         // Expect connection to fail
1:ce5628a:         try {
1:ce5628a:             client.connect();
1:ce5628a:             fail("exected connection to fail");
1:ce5628a:         } catch (Exception e){
1:ce5628a:             // Expected
1:ce5628a:             Throwable cause = e.getCause();
1:ce5628a:             assertNotNull("Expected security exception cause", cause);
1:ce5628a:             assertTrue("Expected security exception cause", cause instanceof SecurityException);
1:ce5628a:         }
1:ce5628a:     }
1:ce5628a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUser() throws Exception {
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUnkown() throws Exception {
1:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1:         client.setAuthzid("unknown");
1: 
1:         doSucessfullConnectionTestImpl(client);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithInvalidUsernameAndAuthzid() throws Exception {
1:         AmqpClient client = createAmqpClient("not-user", USER_PASSWORD);
1:         client.setAuthzid(USER);
1:         doFailedConnectionTestImpl(client);
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithInvalidPasswordAndAuthzid() throws Exception {
1:         AmqpClient client = createAmqpClient(USER, "not-user-password");
1:         client.setAuthzid(USER);
1:         doFailedConnectionTestImpl(client);
1:     }
1: 
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:ce5628a
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.activemq.transport.amqp.client.sasl.PlainMechanism;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: /**
1:  * Test broker behaviour when creating AMQP connections with SASL PLAIN mechanism.
1:  */
1: public class AmqpSaslPlainTest extends AmqpClientTestSupport {
1: 
1:     private static final String ADMIN = "admin";
1:     private static final String USER = "user";
1:     private static final String USER_PASSWORD = "password";
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(org.apache.activemq.broker.BrokerService brokerService) throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:         users.add(new AuthenticationUser(USER, USER_PASSWORD, "users"));
1:         users.add(new AuthenticationUser(ADMIN, ADMIN, "admins"));
1: 
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         brokerService.setPlugins(new BrokerPlugin[] { authenticationPlugin});
1:     };
1: 
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithValidUsernameAndPassword() throws Exception {
1:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1: 
1:         doSucessfullConnectionTestImpl(client);
1:     }
1: 
0:     @Ignore //TODO: fix broker to handle authzid
1:     @Test(timeout = 30000)
0:     public void testSaslPlainWithValidUsernameAndPasswordAndAuthzid() throws Exception {
1:         AmqpClient client = createAmqpClient(USER, USER_PASSWORD);
1:         client.setAuthzid(USER);
1: 
1:         doSucessfullConnectionTestImpl(client);
1:     }
1: 
1:     private void doSucessfullConnectionTestImpl(AmqpClient client) throws Exception {
1:         client.setMechanismRestriction(PlainMechanism.MECH_NAME);
1: 
1:         // Expect connection to succeed
0:         AmqpConnection connection = client.connect();
1: 
1:         // Exercise it for verification
1:         exerciseConnection(connection);
1: 
1:         connection.close();
1:     }
1: 
1:     private void exerciseConnection(AmqpConnection connection)throws Exception{
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         assertNotNull(getProxyToQueue(getTestName()));
1:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:         sender.close();
1:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithInvalidUsername() throws Exception {
1:         AmqpClient client = createAmqpClient("not-user", USER_PASSWORD);
1:         doFailedConnectionTestImpl(client);
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSaslPlainWithInvalidPassword() throws Exception {
1:         AmqpClient client = createAmqpClient(USER, "not-user-password");
1:         doFailedConnectionTestImpl(client);
1:     }
1: 
1:     private void doFailedConnectionTestImpl(AmqpClient client) throws Exception {
1:         client.setMechanismRestriction(PlainMechanism.MECH_NAME);
1: 
1:         // Expect connection to fail
1:         try {
1:             client.connect();
1:             fail("exected connection to fail");
1:         } catch (Exception e){
1:             // Expected
1:             Throwable cause = e.getCause();
1:             assertNotNull("Expected security exception cause", cause);
1:             assertTrue("Expected security exception cause", cause instanceof SecurityException);
1:         }
1:     }
1: }
============================================================================