1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
8:a107823:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.jndi;
1:a107823: 
1:b93cd9e: import java.io.Externalizable;
1:b93cd9e: import java.io.IOException;
1:b93cd9e: import java.io.ObjectInput;
1:b93cd9e: import java.io.ObjectOutput;
1:a107823: import java.util.Properties;
1:a107823: 
1:74a7a8b: import javax.naming.NamingException;
1:74a7a8b: import javax.naming.Reference;
1:74a7a8b: 
1:a107823: /**
1:230a86c:  * Facilitates objects to be stored in JNDI as properties
1:a107823:  */
1:a107823: 
1:230a86c: public abstract class JNDIBaseStorable implements JNDIStorableInterface, Externalizable {
1:a107823: 
1:230a86c:     private Properties properties;
1:a107823: 
1:a107823:     /**
1:a107823:      * Set the properties that will represent the instance in JNDI
1:230a86c:      * 
1:a107823:      * @param props
1:a107823:      */
1:a107823:     protected abstract void buildFromProperties(Properties props);
1:a107823: 
1:a107823:     /**
1:a107823:      * Initialize the instance from properties stored in JNDI
1:230a86c:      * 
1:a107823:      * @param props
1:a107823:      */
1:a107823: 
1:a107823:     protected abstract void populateProperties(Properties props);
1:a107823: 
1:a107823:     /**
1:a107823:      * set the properties for this instance as retrieved from JNDI
1:230a86c:      * 
1:a107823:      * @param props
1:a107823:      */
1:a107823: 
1:a107823:     public synchronized void setProperties(Properties props) {
1:a107823:         this.properties = props;
1:a107823:         buildFromProperties(props);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Get the properties from this instance for storing in JNDI
1:230a86c:      * 
1:a107823:      * @return the properties
1:a107823:      */
1:a107823: 
1:a107823:     public synchronized Properties getProperties() {
1:a107823:         if (this.properties == null) {
1:a107823:             this.properties = new Properties();
1:a107823:         }
1:a107823:         populateProperties(this.properties);
1:a107823:         return this.properties;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrive a Reference for this instance to store in JNDI
1:230a86c:      * 
1:a107823:      * @return the built Reference
1:a107823:      * @throws NamingException if error on building Reference
1:a107823:      */
1:a107823:     public Reference getReference() throws NamingException {
1:a107823:         return JNDIReferenceFactory.createReference(this.getClass().getName(), this);
1:a107823:     }
1:a107823: 
1:b93cd9e:     /**
1:b93cd9e:      * @param in
1:b93cd9e:      * @throws IOException
1:b93cd9e:      * @throws ClassNotFoundException
1:b93cd9e:      * @see java.io.Externalizable#readExternal(java.io.ObjectInput)
1:b93cd9e:      */
1:230a86c:     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
1:b93cd9e:         Properties props = (Properties)in.readObject();
1:b93cd9e:         if (props != null) {
1:b93cd9e:             setProperties(props);
1:a107823:         }
1:230a86c: 
1:b93cd9e:     }
1:a107823: 
1:b93cd9e:     /**
1:b93cd9e:      * @param out
1:b93cd9e:      * @throws IOException
1:b93cd9e:      * @see java.io.Externalizable#writeExternal(java.io.ObjectOutput)
1:b93cd9e:      */
1:230a86c:     public void writeExternal(ObjectOutput out) throws IOException {
1:b93cd9e:         out.writeObject(getProperties());
1:230a86c: 
1:b93cd9e:     }
1:a107823: 
1:b93cd9e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.NamingException;
1: import javax.naming.Reference;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Facilitates objects to be stored in JNDI as properties
1: public abstract class JNDIBaseStorable implements JNDIStorableInterface, Externalizable {
1:     private Properties properties;
1:      * 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void writeExternal(ObjectOutput out) throws IOException {
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
0: import javax.naming.NamingException;
0: import javax.naming.Reference;
1: import java.util.Properties;
1: 
1: /**
0:  * Faciliates objects to be stored in JNDI as properties
1:  */
1: 
0: public abstract class JNDIBaseStorable implements JNDIStorableInterface {
0:     private Properties properties = null;
1: 
1: 
1:     /**
1:      * Set the properties that will represent the instance in JNDI
1:      *
1:      * @param props
1:      */
1:     protected abstract void buildFromProperties(Properties props);
1: 
1:     /**
1:      * Initialize the instance from properties stored in JNDI
1:      *
1:      * @param props
1:      */
1: 
1:     protected abstract void populateProperties(Properties props);
1: 
1:     /**
1:      * set the properties for this instance as retrieved from JNDI
1:      *
1:      * @param props
1:      */
1: 
1:     public synchronized void setProperties(Properties props) {
1:         this.properties = props;
1:         buildFromProperties(props);
1:     }
1: 
1:     /**
1:      * Get the properties from this instance for storing in JNDI
1:      *
1:      * @return the properties
1:      */
1: 
1:     public synchronized Properties getProperties() {
1:         if (this.properties == null) {
1:             this.properties = new Properties();
1:         }
1:         populateProperties(this.properties);
1:         return this.properties;
1:     }
1: 
1: 
1:     /**
1:      * Retrive a Reference for this instance to store in JNDI
1:      *
1:      * @return the built Reference
1:      * @throws NamingException if error on building Reference
1:      */
1:     public Reference getReference() throws NamingException {
1:         return JNDIReferenceFactory.createReference(this.getClass().getName(), this);
1:     }
1: 
1: }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b93cd9e
/////////////////////////////////////////////////////////////////////////
1: import java.io.Externalizable;
1: import java.io.IOException;
1: import java.io.ObjectInput;
1: import java.io.ObjectOutput;
0: public abstract class JNDIBaseStorable implements JNDIStorableInterface, Externalizable{
0:     
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param in
1:      * @throws IOException
1:      * @throws ClassNotFoundException
1:      * @see java.io.Externalizable#readExternal(java.io.ObjectInput)
1:      */
0:     public void readExternal(ObjectInput in) throws IOException,ClassNotFoundException{
1:         Properties props = (Properties)in.readObject();
1:         if (props != null) {
1:             setProperties(props);
1:         }
0:         
1:     }
0: 
1:     /**
1:      * @param out
1:      * @throws IOException
1:      * @see java.io.Externalizable#writeExternal(java.io.ObjectOutput)
1:      */
0:     public void writeExternal(ObjectOutput out) throws IOException{
1:         out.writeObject(getProperties());
0:         
1:     }
0: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:b9a4dee
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.jndi;
0: 
0: import javax.naming.NamingException;
0: import javax.naming.Reference;
0: import java.util.Properties;
0: 
0: /**
0:  * Faciliates objects to be stored in JNDI as properties
0:  */
0: 
0: public abstract class JNDIBaseStorable implements JNDIStorableInterface {
0:     private Properties properties = null;
0: 
0: 
0:     /**
0:      * Set the properties that will represent the instance in JNDI
0:      *
0:      * @param props
0:      */
0:     protected abstract void buildFromProperties(Properties props);
0: 
0:     /**
0:      * Initialize the instance from properties stored in JNDI
0:      *
0:      * @param props
0:      */
0: 
0:     protected abstract void populateProperties(Properties props);
0: 
0:     /**
0:      * set the properties for this instance as retrieved from JNDI
0:      *
0:      * @param props
0:      */
0: 
0:     public synchronized void setProperties(Properties props) {
0:         this.properties = props;
0:         buildFromProperties(props);
0:     }
0: 
0:     /**
0:      * Get the properties from this instance for storing in JNDI
0:      *
0:      * @return the properties
0:      */
0: 
0:     public synchronized Properties getProperties() {
0:         if (this.properties == null) {
0:             this.properties = new Properties();
0:         }
0:         populateProperties(this.properties);
0:         return this.properties;
0:     }
0: 
0: 
0:     /**
0:      * Retrive a Reference for this instance to store in JNDI
0:      *
0:      * @return the built Reference
0:      * @throws NamingException if error on building Reference
0:      */
0:     public Reference getReference() throws NamingException {
0:         return JNDIReferenceFactory.createReference(this.getClass().getName(), this);
0:     }
0: 
0: }
0: 
============================================================================