1:80b526b: /**
1:80b526b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:80b526b:  * contributor license agreements.  See the NOTICE file distributed with
1:80b526b:  * this work for additional information regarding copyright ownership.
1:80b526b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:80b526b:  * (the "License"); you may not use this file except in compliance with
1:80b526b:  * the License.  You may obtain a copy of the License at
1:80b526b:  *
1:80b526b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:80b526b:  *
1:80b526b:  * Unless required by applicable law or agreed to in writing, software
1:80b526b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:80b526b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80b526b:  * See the License for the specific language governing permissions and
1:80b526b:  * limitations under the License.
1:80b526b:  */
1:80b526b: package org.apache.activemq.transport.amqp;
1:80b526b: 
1:80b526b: import static org.junit.Assert.assertEquals;
1:80b526b: import static org.junit.Assert.fail;
1:80b526b: 
1:80b526b: import java.io.File;
1:80b526b: import java.net.URI;
1:80b526b: import java.util.Arrays;
1:80b526b: import java.util.Collection;
1:80b526b: 
1:80b526b: import javax.jms.Connection;
1:80b526b: 
1:80b526b: import org.apache.qpid.jms.JmsConnectionFactory;
1:80b526b: import org.junit.Test;
1:80b526b: import org.junit.runner.RunWith;
1:80b526b: import org.junit.runners.Parameterized;
1:80b526b: import org.junit.runners.Parameterized.Parameters;
1:80b526b: 
1:80b526b: /**
1:80b526b:  * Test that failed SSL Handshakes don't leave the transport in a bad sate.
1:80b526b:  */
1:80b526b: @RunWith(Parameterized.class)
1:80b526b: public class JMSMaxConnectionsSSLHandshakeFailsTest extends JMSClientTestSupport {
1:80b526b: 
1:80b526b:     private static final int MAX_CONNECTIONS = 10;
1:80b526b: 
1:80b526b:     private final String connectorScheme;
1:80b526b: 
1:80b526b:     @Parameters(name="{0}")
1:80b526b:     public static Collection<Object[]> data() {
1:80b526b:         return Arrays.asList(new Object[][] {
1:80b526b:                 {"amqp+ssl"},
1:80b526b:                 {"amqp+nio+ssl"},
1:80b526b:             });
1:80b526b:     }
1:80b526b: 
1:80b526b:     public JMSMaxConnectionsSSLHandshakeFailsTest(String connectorScheme) {
1:80b526b:         this.connectorScheme = connectorScheme;
1:80b526b:     }
1:80b526b: 
1:80b526b:     @Test(timeout = 60000)
1:80b526b:     public void testFailedSSLConnectionAttemptsDoesNotBreakTransport() throws Exception {
1:80b526b: 
1:80b526b:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:80b526b:             try {
1:80b526b:                 createFailingConnection();
1:80b526b:                 fail("Should not be able to connect.");
1:80b526b:             } catch (Exception ex) {
1:80b526b:                 LOG.debug("Connection failed as expected");
1:80b526b:             }
1:80b526b:         }
1:80b526b: 
1:80b526b:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:80b526b:             try {
1:80b526b:                 createNonSslConnection().start();;
1:80b526b:                 fail("Should not be able to connect.");
1:80b526b:             } catch (Exception ex) {
1:80b526b:                 LOG.debug("Connection failed as expected");
1:80b526b:             }
1:80b526b:         }
1:80b526b: 
1:80b526b:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:80b526b:             try {
1:80b526b:                 createGoodConnection();
1:80b526b:                 LOG.debug("Connection created as expected");
1:80b526b:             } catch (Exception ex) {
1:80b526b:                 fail("Should be able to connect: " + ex.getMessage());
1:80b526b:             }
1:80b526b:         }
1:80b526b: 
1:80b526b:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected Connection createNonSslConnection() throws Exception {
1:80b526b:         return new JmsConnectionFactory(getGoodClientConnectURI(false)).createConnection();
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected Connection createFailingConnection() throws Exception {
1:80b526b:         return new JmsConnectionFactory(getBadClientConnectURI()).createConnection();
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected Connection createGoodConnection() throws Exception {
1:80b526b:         return new JmsConnectionFactory(getGoodClientConnectURI(true)).createConnection();
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected URI getGoodClientConnectURI(boolean useSsl) throws Exception {
1:80b526b:         URI brokerURI = getBrokerURI();
1:80b526b: 
1:80b526b:         String amqpURI = (useSsl ? "amqps://" : "amqp://") + brokerURI.getHost() + ":" + brokerURI.getPort();
1:80b526b: 
1:80b526b:         if (useSsl) {
1:80b526b:             amqpURI = amqpURI + "?transport.verifyHost=false";
1:80b526b:         }
1:80b526b: 
1:80b526b:         return new URI(amqpURI);
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected URI getBadClientConnectURI() throws Exception {
1:80b526b:         URI brokerURI = getBrokerURI();
1:80b526b: 
1:80b526b:         String amqpURI = "amqps://" + brokerURI.getHost() + ":" + brokerURI.getPort() +
1:80b526b:                          "?transport.verifyHost=false" +
1:80b526b:                          "&transport.keyStoreLocation=" + getUntrustedKeyStoreLocation();
1:80b526b: 
1:80b526b:         return new URI(amqpURI);
1:80b526b:     }
1:80b526b: 
1:80b526b:     protected String getUntrustedKeyStoreLocation() {
1:80b526b:         File brokerKeyStore = new File(System.getProperty("javax.net.ssl.keyStore"));
1:80b526b:         File untrustedStore = new File(brokerKeyStore.getParent(), "alternative.keystore");
1:80b526b: 
1:80b526b:         return untrustedStore.toString();
1:80b526b:     }
1:80b526b: 
1:80b526b:     //----- Configure the test support plumbing for this test ----------------//
1:80b526b: 
1:80b526b:     @Override
1:80b526b:     protected String getAdditionalConfig() {
1:80b526b:         return "&transport.needClientAuth=true&maximumConnections=" + MAX_CONNECTIONS;
1:80b526b:     }
1:80b526b: 
1:80b526b:     @Override
1:80b526b:     protected boolean isUseTcpConnector() {
1:80b526b:         return false;
1:80b526b:     }
1:80b526b: 
1:80b526b:     @Override
1:80b526b:     protected boolean isUseSslConnector() {
1:80b526b:         return connectorScheme.equals("amqp+ssl");
1:80b526b:     }
1:80b526b: 
1:80b526b:     @Override
1:80b526b:     protected boolean isUseNioPlusSslConnector() {
1:80b526b:         return connectorScheme.equals("amqp+nio+ssl");
1:80b526b:     }
1:80b526b: 
1:80b526b:     @Override
1:80b526b:     protected URI getBrokerURI() {
1:80b526b:         if (connectorScheme.equals("amqp+ssl")) {
1:80b526b:             return amqpSslURI;
1:80b526b:         } else {
1:80b526b:             return amqpNioPlusSslURI;
1:80b526b:         }
1:80b526b:     }
1:80b526b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:80b526b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.jms.Connection;
1: 
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test that failed SSL Handshakes don't leave the transport in a bad sate.
1:  */
1: @RunWith(Parameterized.class)
1: public class JMSMaxConnectionsSSLHandshakeFailsTest extends JMSClientTestSupport {
1: 
1:     private static final int MAX_CONNECTIONS = 10;
1: 
1:     private final String connectorScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"amqp+ssl"},
1:                 {"amqp+nio+ssl"},
1:             });
1:     }
1: 
1:     public JMSMaxConnectionsSSLHandshakeFailsTest(String connectorScheme) {
1:         this.connectorScheme = connectorScheme;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testFailedSSLConnectionAttemptsDoesNotBreakTransport() throws Exception {
1: 
1:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:             try {
1:                 createFailingConnection();
1:                 fail("Should not be able to connect.");
1:             } catch (Exception ex) {
1:                 LOG.debug("Connection failed as expected");
1:             }
1:         }
1: 
1:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:             try {
1:                 createNonSslConnection().start();;
1:                 fail("Should not be able to connect.");
1:             } catch (Exception ex) {
1:                 LOG.debug("Connection failed as expected");
1:             }
1:         }
1: 
1:         for (int i = 0; i < MAX_CONNECTIONS; ++i) {
1:             try {
1:                 createGoodConnection();
1:                 LOG.debug("Connection created as expected");
1:             } catch (Exception ex) {
1:                 fail("Should be able to connect: " + ex.getMessage());
1:             }
1:         }
1: 
1:         assertEquals(0, getProxyToBroker().getCurrentConnectionsCount());
1:     }
1: 
1:     protected Connection createNonSslConnection() throws Exception {
1:         return new JmsConnectionFactory(getGoodClientConnectURI(false)).createConnection();
1:     }
1: 
1:     protected Connection createFailingConnection() throws Exception {
1:         return new JmsConnectionFactory(getBadClientConnectURI()).createConnection();
1:     }
1: 
1:     protected Connection createGoodConnection() throws Exception {
1:         return new JmsConnectionFactory(getGoodClientConnectURI(true)).createConnection();
1:     }
1: 
1:     protected URI getGoodClientConnectURI(boolean useSsl) throws Exception {
1:         URI brokerURI = getBrokerURI();
1: 
1:         String amqpURI = (useSsl ? "amqps://" : "amqp://") + brokerURI.getHost() + ":" + brokerURI.getPort();
1: 
1:         if (useSsl) {
1:             amqpURI = amqpURI + "?transport.verifyHost=false";
1:         }
1: 
1:         return new URI(amqpURI);
1:     }
1: 
1:     protected URI getBadClientConnectURI() throws Exception {
1:         URI brokerURI = getBrokerURI();
1: 
1:         String amqpURI = "amqps://" + brokerURI.getHost() + ":" + brokerURI.getPort() +
1:                          "?transport.verifyHost=false" +
1:                          "&transport.keyStoreLocation=" + getUntrustedKeyStoreLocation();
1: 
1:         return new URI(amqpURI);
1:     }
1: 
1:     protected String getUntrustedKeyStoreLocation() {
1:         File brokerKeyStore = new File(System.getProperty("javax.net.ssl.keyStore"));
1:         File untrustedStore = new File(brokerKeyStore.getParent(), "alternative.keystore");
1: 
1:         return untrustedStore.toString();
1:     }
1: 
1:     //----- Configure the test support plumbing for this test ----------------//
1: 
1:     @Override
1:     protected String getAdditionalConfig() {
1:         return "&transport.needClientAuth=true&maximumConnections=" + MAX_CONNECTIONS;
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return false;
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return connectorScheme.equals("amqp+ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return connectorScheme.equals("amqp+nio+ssl");
1:     }
1: 
1:     @Override
1:     protected URI getBrokerURI() {
1:         if (connectorScheme.equals("amqp+ssl")) {
1:             return amqpSslURI;
1:         } else {
1:             return amqpNioPlusSslURI;
1:         }
1:     }
1: }
============================================================================