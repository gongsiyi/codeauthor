1:9bc2821: /**
1:9bc2821:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bc2821:  * contributor license agreements.  See the NOTICE file distributed with
1:9bc2821:  * this work for additional information regarding copyright ownership.
1:9bc2821:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9bc2821:  * (the "License"); you may not use this file except in compliance with
1:9bc2821:  * the License.  You may obtain a copy of the License at
1:9bc2821:  *
1:9bc2821:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9bc2821:  *
1:9bc2821:  * Unless required by applicable law or agreed to in writing, software
1:9bc2821:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9bc2821:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9bc2821:  * See the License for the specific language governing permissions and
1:9bc2821:  * limitations under the License.
1:9bc2821:  */
1:9bc2821: package org.apache.activemq.transport.mqtt;
1:9bc2821: 
1:9bc2821: import org.fusesource.mqtt.client.*;
1:9bc2821: import org.junit.Test;
1:9bc2821: 
1:9bc2821: import java.util.concurrent.TimeUnit;
1:9bc2821: 
1:9bc2821: import static org.junit.Assert.assertEquals;
1:9bc2821: import static org.junit.Assert.assertNotNull;
1:9bc2821: 
1:9bc2821: public class MQTTWillTest extends MQTTTestSupport {
1:9bc2821: 
1:9bc2821:     @Test(timeout = 60 * 1000)
1:9bc2821:     public void testWillMessage() throws Exception {
1:9bc2821:         BlockingConnection conn1 = null;
1:9bc2821:         BlockingConnection conn2 = null;
1:9bc2821:         try {
1:9bc2821:             MQTT mqtt1 = createMQTTConnection("client1", false);
1:9bc2821:             mqtt1.setWillMessage("last will");
1:9bc2821:             mqtt1.setWillQos(QoS.AT_LEAST_ONCE);
1:9bc2821:             mqtt1.setWillTopic("wills");
1:9bc2821: 
1:9bc2821:             conn1 = mqtt1.blockingConnection();
1:9bc2821:             conn1.connect();
1:9bc2821: 
1:9bc2821:             MQTT mqtt2 = createMQTTConnection("client2", false);
1:9bc2821:             conn2 = mqtt2.blockingConnection();
1:9bc2821:             conn2.connect();
1:9bc2821:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_LEAST_ONCE)});
1:9bc2821: 
1:9bc2821:             conn1.publish("test", "hello world".getBytes(), QoS.AT_LEAST_ONCE, false);
1:9bc2821: 
1:9bc2821:             Message msg = conn2.receive(5, TimeUnit.SECONDS);
1:9bc2821:             assertNotNull(msg);
1:9bc2821:             assertEquals("hello world", new String(msg.getPayload()));
1:9bc2821:             assertEquals("test", msg.getTopic());
1:9bc2821: 
1:9bc2821:             conn1.kill();
1:9bc2821: 
1:9bc2821:             msg = conn2.receive(5, TimeUnit.SECONDS);
1:9bc2821:             assertNotNull(msg);
1:9bc2821:             assertEquals("last will", new String(msg.getPayload()));
1:9bc2821:             assertEquals("wills", msg.getTopic());
1:9bc2821:         } finally {
1:9bc2821:            if (conn1 != null) {
1:9bc2821:                conn1.disconnect();
1:9bc2821:            }
1:9bc2821:            if (conn2 != null) {
1:9bc2821:                conn2.disconnect();
1:9bc2821:            }
1:9bc2821:         }
1:9bc2821:     }
1:9bc2821: 
1:9bc2821:     @Test(timeout = 60 * 1000)
1:9bc2821:     public void testRetainWillMessage() throws Exception {
1:9bc2821:         BlockingConnection conn1 = null;
1:9bc2821:         BlockingConnection conn2 = null;
1:9bc2821:         try {
1:9bc2821:             MQTT mqtt1 = createMQTTConnection("client1", false);
1:9bc2821:             mqtt1.setWillMessage("last will");
1:9bc2821:             mqtt1.setWillQos(QoS.AT_LEAST_ONCE);
1:9bc2821:             mqtt1.setWillTopic("wills");
1:9bc2821:             mqtt1.setWillRetain(true);
1:9bc2821: 
1:9bc2821:             conn1 = mqtt1.blockingConnection();
1:9bc2821:             conn1.connect();
1:9bc2821: 
1:9bc2821:             MQTT mqtt2 = createMQTTConnection("client2", false);
1:9bc2821:             conn2 = mqtt2.blockingConnection();
1:9bc2821:             conn2.connect();
1:9bc2821:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_MOST_ONCE)});
1:9bc2821: 
1:9bc2821:             conn1.publish("test", "hello world".getBytes(), QoS.AT_LEAST_ONCE, false);
1:9bc2821: 
1:9bc2821:             Message msg = conn2.receive(5, TimeUnit.SECONDS);
1:9bc2821:             assertNotNull(msg);
1:9bc2821:             assertEquals("hello world", new String(msg.getPayload()));
1:9bc2821:             assertEquals("test", msg.getTopic());
1:9bc2821:             msg.ack();
1:9bc2821: 
1:9bc2821:             conn2.disconnect();
1:9bc2821: 
1:9bc2821:             Thread.sleep(1000);
1:9bc2821:             conn1.kill();
1:9bc2821:             Thread.sleep(1000);
1:9bc2821: 
1:9bc2821:             conn2 = mqtt2.blockingConnection();
1:9bc2821:             conn2.connect();
1:9bc2821:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_MOST_ONCE)});
1:9bc2821: 
1:9bc2821:             msg = conn2.receive(5, TimeUnit.SECONDS);
1:9bc2821:             System.out.println(msg.getTopic() + " " + new String(msg.getPayload()));
1:9bc2821:             assertNotNull(msg);
1:9bc2821:             assertEquals("last will", new String(msg.getPayload()));
1:9bc2821:             assertEquals("wills", msg.getTopic());
1:9bc2821:         } finally {
1:9bc2821:            if (conn1 != null) {
1:9bc2821:                conn1.disconnect();
1:9bc2821:            }
1:9bc2821:            if (conn2 != null) {
1:9bc2821:                conn2.disconnect();
1:9bc2821:            }
1:9bc2821:         }
1:9bc2821:     }
1:9bc2821: 
1:9bc2821: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9bc2821
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import org.fusesource.mqtt.client.*;
1: import org.junit.Test;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class MQTTWillTest extends MQTTTestSupport {
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testWillMessage() throws Exception {
1:         BlockingConnection conn1 = null;
1:         BlockingConnection conn2 = null;
1:         try {
1:             MQTT mqtt1 = createMQTTConnection("client1", false);
1:             mqtt1.setWillMessage("last will");
1:             mqtt1.setWillQos(QoS.AT_LEAST_ONCE);
1:             mqtt1.setWillTopic("wills");
1: 
1:             conn1 = mqtt1.blockingConnection();
1:             conn1.connect();
1: 
1:             MQTT mqtt2 = createMQTTConnection("client2", false);
1:             conn2 = mqtt2.blockingConnection();
1:             conn2.connect();
1:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_LEAST_ONCE)});
1: 
1:             conn1.publish("test", "hello world".getBytes(), QoS.AT_LEAST_ONCE, false);
1: 
1:             Message msg = conn2.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(msg);
1:             assertEquals("hello world", new String(msg.getPayload()));
1:             assertEquals("test", msg.getTopic());
1: 
1:             conn1.kill();
1: 
1:             msg = conn2.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(msg);
1:             assertEquals("last will", new String(msg.getPayload()));
1:             assertEquals("wills", msg.getTopic());
1:         } finally {
1:            if (conn1 != null) {
1:                conn1.disconnect();
1:            }
1:            if (conn2 != null) {
1:                conn2.disconnect();
1:            }
1:         }
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testRetainWillMessage() throws Exception {
1:         BlockingConnection conn1 = null;
1:         BlockingConnection conn2 = null;
1:         try {
1:             MQTT mqtt1 = createMQTTConnection("client1", false);
1:             mqtt1.setWillMessage("last will");
1:             mqtt1.setWillQos(QoS.AT_LEAST_ONCE);
1:             mqtt1.setWillTopic("wills");
1:             mqtt1.setWillRetain(true);
1: 
1:             conn1 = mqtt1.blockingConnection();
1:             conn1.connect();
1: 
1:             MQTT mqtt2 = createMQTTConnection("client2", false);
1:             conn2 = mqtt2.blockingConnection();
1:             conn2.connect();
1:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_MOST_ONCE)});
1: 
1:             conn1.publish("test", "hello world".getBytes(), QoS.AT_LEAST_ONCE, false);
1: 
1:             Message msg = conn2.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(msg);
1:             assertEquals("hello world", new String(msg.getPayload()));
1:             assertEquals("test", msg.getTopic());
1:             msg.ack();
1: 
1:             conn2.disconnect();
1: 
1:             Thread.sleep(1000);
1:             conn1.kill();
1:             Thread.sleep(1000);
1: 
1:             conn2 = mqtt2.blockingConnection();
1:             conn2.connect();
1:             conn2.subscribe(new Topic[]{new Topic("#", QoS.AT_MOST_ONCE)});
1: 
1:             msg = conn2.receive(5, TimeUnit.SECONDS);
1:             System.out.println(msg.getTopic() + " " + new String(msg.getPayload()));
1:             assertNotNull(msg);
1:             assertEquals("last will", new String(msg.getPayload()));
1:             assertEquals("wills", msg.getTopic());
1:         } finally {
1:            if (conn1 != null) {
1:                conn1.disconnect();
1:            }
1:            if (conn2 != null) {
1:                conn2.disconnect();
1:            }
1:         }
1:     }
1: 
1: }
============================================================================