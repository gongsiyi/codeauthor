3:2b0279a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:7a46a1c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7a46a1c:  *
1:2b0279a:  * Unless required by applicable law or agreed to in writing, software
1:2b0279a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b0279a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b0279a:  * See the License for the specific language governing permissions and
1:2b0279a:  * limitations under the License.
3:2b0279a:  */
1:2b0279a: package org.apache.activemq.transport.stomp;
1:f8485e3: 
1:1236bbf: import static org.junit.Assert.assertEquals;
1:1236bbf: import static org.junit.Assert.assertTrue;
1:1236bbf: 
1:2b0279a: import java.io.ByteArrayInputStream;
1:2b0279a: import java.io.DataInput;
1:2b0279a: import java.io.DataInputStream;
1:2b0279a: import java.io.IOException;
1:7a46a1c: 
1:2b0279a: import javax.jms.Connection;
1:2b0279a: import javax.jms.Message;
1:2b0279a: import javax.jms.MessageProducer;
1:2b0279a: import javax.jms.Session;
1:f812e34: 
1:2b0279a: import org.apache.activemq.command.ActiveMQQueue;
1:1236bbf: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e3eba85: 
1:1236bbf: public class StompSubscriptionRemoveTest extends StompTestSupport {
1:1236bbf: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(StompSubscriptionRemoveTest.class);
1:2d5bb84:     private static final String COMMAND_MESSAGE = "MESSAGE";
1:2d5bb84:     private static final String HEADER_MESSAGE_ID = "message-id";
1:f8485e3: 
1:540a66b:     @Test(timeout = 60000)
1:2b0279a:     public void testRemoveSubscriber() throws Exception {
1:540a66b:         stompConnect();
1:1236bbf:         Connection connection = cf.createConnection("system", "manager");
1:2b0279a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1236bbf:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getQueueName()));
1:2b0279a:         Message message = session.createTextMessage("Testas");
1:2b0279a:         for (int idx = 0; idx < 2000; ++idx) {
1:2b0279a:             producer.send(message);
1:fc00993:             LOG.debug("Sending: " + idx);
24:2b0279a:         }
1:2b0279a:         producer.close();
1:2b0279a:         session.close();
1:2b0279a:         connection.close();
1:47abda2: 
1:1236bbf:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:fc00993:         stompConnection.sendFrame(connectFrame);
1:47abda2: 
1:2d5bb84:         stompConnection.receiveFrame();
1:1236bbf:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:f812e34: 
1:2b0279a:         int messagesCount = 0;
1:2b0279a:         int count = 0;
1:2b0279a:         while (count < 2) {
1:2d5bb84:             String receiveFrame = stompConnection.receiveFrame();
1:fc00993:             LOG.debug("Received: " + receiveFrame);
1:2d5bb84:             assertEquals("Unexpected frame received", COMMAND_MESSAGE, getCommand(receiveFrame));
1:2d5bb84:             String messageId = getHeaderValue(receiveFrame, HEADER_MESSAGE_ID);
1:9a22fe5:             String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId + "\n\n"+ Stomp.NULL;
1:2d5bb84:             stompConnection.sendFrame(ackmessage);
1:f812e34:             // Thread.sleep(1000);
1:2b0279a:             ++messagesCount;
1:2b0279a:             ++count;
1:2d5bb84:         }
1:4404311: 
1:1236bbf:         stompDisconnect();
1:540a66b:         Thread.sleep(1000);
1:1236bbf:         stompConnect();
1:47abda2: 
1:1236bbf:         connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:fc00993:         stompConnection.sendFrame(connectFrame);
1:2d5bb84: 
1:2d5bb84:         stompConnection.receiveFrame();
1:f8485e3: 
1:1236bbf:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b0279a:         try {
1:2b0279a:             while (count != 2000) {
1:2d5bb84:                 String receiveFrame = stompConnection.receiveFrame();
1:fc00993:                 LOG.debug("Received: " + receiveFrame);
1:2d5bb84:                 assertEquals("Unexpected frame received", COMMAND_MESSAGE, getCommand(receiveFrame));
1:2d5bb84:                 String messageId = getHeaderValue(receiveFrame, HEADER_MESSAGE_ID);
1:9a22fe5:                 String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId.trim() + "\n\n" + Stomp.NULL;
1:2d5bb84:                 stompConnection.sendFrame(ackmessage);
1:2d5bb84:                 // Thread.sleep(1000);
1:2b0279a:                 ++messagesCount;
1:2b0279a:                 ++count;
1:2b0279a:             }
1:f812e34:         } catch (IOException ex) {
1:47abda2:             ex.printStackTrace();
1:2b0279a:         }
1:4404311: 
2:2d5bb84:         stompConnection.sendFrame("DISCONNECT\n\n");
2:2d5bb84:         stompConnection.close();
1:47abda2: 
1:fc00993:         LOG.info("Total messages received: " + messagesCount);
1:e264e6f:         assertTrue("Messages received after connection loss: " + messagesCount, messagesCount >= 2000);
1:f8485e3: 
1:f812e34:         // The first ack messages has no chance complete, so we receiving more
1:f812e34:         // messages
2:f8485e3: 
1:2b0279a:         // Don't know how to list subscriptions for the broker. Currently you
1:e264e6f:         // can check using JMX console. You'll see
1:e264e6f:         // Subscription without any connections
1:2d5bb84:     }
1:2d5bb84: 
1:2d5bb84:     // These two methods could move to a utility class
1:2d5bb84:     protected String getCommand(String frame) {
1:f812e34:         return frame.substring(0, frame.indexOf('\n') + 1).trim();
1:2d5bb84:     }
1:2d5bb84: 
1:f812e34:     protected String getHeaderValue(String frame, String header) throws IOException {
1:2d5bb84:         DataInput input = new DataInputStream(new ByteArrayInputStream(frame.getBytes()));
1:2d5bb84:         String line;
1:f812e34:         for (int idx = 0; /* forever, sort of */; ++idx) {
1:2d5bb84:             line = input.readLine();
1:2d5bb84:             if (line == null) {
1:f812e34:                 // end of message, no headers
1:f812e34:                 return null;
1:f812e34:             }
1:2d5bb84:             line = line.trim();
1:2d5bb84:             if (line.length() == 0) {
1:f812e34:                 // start body, no headers from here on
1:f812e34:                 return null;
1:f812e34:             }
1:f812e34:             if (idx > 0) { // Ignore command line
1:f812e34:                 int pos = line.indexOf(':');
1:f812e34:                 if (header.equals(line.substring(0, pos))) {
1:f812e34:                     return line.substring(pos + 1).trim();
1:f812e34:                 }
1:2d5bb84:             }
1:2d5bb84:         }
1:2d5bb84:     }
1:2d5bb84: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:540a66b
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(1000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.junit.Test;
1: public class StompSubscriptionRemoveTest extends StompTestSupport {
1: 
0:     @Test
1:         Connection connection = cf.createConnection("system", "manager");
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getQueueName()));
/////////////////////////////////////////////////////////////////////////
1:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         stompDisconnect();
1:         stompConnect();
1:         connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7a46a1c
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:         broker.addConnector("stomp://localhost:0").setName("Stomp");
0:         broker.addConnector("tcp://localhost:0").setName("Default");
0:         final String stompUri = broker.getConnectorByName("Stomp").getPublishableConnectString();
0:         final int stompPort = new URI(stompUri).getPort();
0:         final String openwireUri = broker.getConnectorByName("Default").getPublishableConnectString();
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(openwireUri);
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open(new Socket("localhost", stompPort));
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open(new Socket("localhost", stompPort));
author:Gary Tully
-------------------------------------------------------------------------------
commit:9a22fe5
/////////////////////////////////////////////////////////////////////////
0:         String connectFrame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
0:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:             String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId + "\n\n"+ Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         connectFrame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
0:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:                 String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId.trim() + "\n\n" + Stomp.NULL;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(StompSubscriptionRemoveTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Sending: " + idx);
/////////////////////////////////////////////////////////////////////////
0:         String connectFrame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n";
1:         stompConnection.sendFrame(connectFrame);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Received: " + receiveFrame);
/////////////////////////////////////////////////////////////////////////
0:         connectFrame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n";
1:         stompConnection.sendFrame(connectFrame);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Received: " + receiveFrame);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total messages received: " + messagesCount);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 // Thread.sleep(1000);
1:         } catch (IOException ex) {
/////////////////////////////////////////////////////////////////////////
1:         // The first ack messages has no chance complete, so we receiving more
1:         // messages
/////////////////////////////////////////////////////////////////////////
1:         return frame.substring(0, frame.indexOf('\n') + 1).trim();
1:     protected String getHeaderValue(String frame, String header) throws IOException {
1:         for (int idx = 0; /* forever, sort of */; ++idx) {
1:                 // end of message, no headers
1:                 return null;
1:             }
1:                 // start body, no headers from here on
1:                 return null;
1:             }
1:             if (idx > 0) { // Ignore command line
1:                 int pos = line.indexOf(':');
1:                 if (header.equals(line.substring(0, pos))) {
1:                     return line.substring(pos + 1).trim();
1:                 }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:4404311
/////////////////////////////////////////////////////////////////////////
0:         broker.setPersistent(false);
/////////////////////////////////////////////////////////////////////////
1:         
0:         sendFrame("DISCONNECT\n\n");
0:         Thread.sleep(1000);
/////////////////////////////////////////////////////////////////////////
1:                 
0:         sendFrame("DISCONNECT\n\n");
commit:47abda2
/////////////////////////////////////////////////////////////////////////
0:         String connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n";
0:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n";
/////////////////////////////////////////////////////////////////////////
0:             String ackmessage = "ACK\n" + "message-id:" + messageId + "\n\n";
/////////////////////////////////////////////////////////////////////////
0:         connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n";
0:         f = receiveFrame(5000);
1:         
0:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n";
0:                 String receiveFrame = receiveFrame(5000);
/////////////////////////////////////////////////////////////////////////
1:                                 
0:                 String ackmessage = "ACK\n" + "message-id:" + messageId + "\n\n";
/////////////////////////////////////////////////////////////////////////
1:             ex.printStackTrace();
1:         
1:         
/////////////////////////////////////////////////////////////////////////
0:         outputStream.write(bytes);
0:         outputStream.write(0);
commit:e264e6f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         log.info("Total messages received: " + messagesCount);
1:         assertTrue("Messages received after connection loss: " + messagesCount, messagesCount >= 2000);
1:         // can check using JMX console. You'll see
1:         // Subscription without any connections
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(StompSubscriptionRemoveTest.class);
commit:e3eba85
/////////////////////////////////////////////////////////////////////////
0: import java.net.Socket;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open(new Socket("localhost", STOMP_PORT));
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open(new Socket("localhost", STOMP_PORT));
author:Robert Davies
-------------------------------------------------------------------------------
commit:2d5bb84
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String COMMAND_MESSAGE = "MESSAGE";
1:     private static final String HEADER_MESSAGE_ID = "message-id";
0:     private static final int STOMP_PORT = 61613;
0:     private StompConnection stompConnection = new StompConnection();
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open("localhost", STOMP_PORT);
0:         stompConnection.sendFrame(connect_frame);
1:         stompConnection.receiveFrame();
1:         stompConnection.sendFrame(frame);
1:         
1:             String receiveFrame = stompConnection.receiveFrame();
0:             log.debug("Received: " + receiveFrame);
1:             assertEquals("Unexpected frame received", COMMAND_MESSAGE, getCommand(receiveFrame));
1:             String messageId = getHeaderValue(receiveFrame, HEADER_MESSAGE_ID);
0:             String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId + "\n\n";
1:             stompConnection.sendFrame(ackmessage);
1:             // Thread.sleep(1000);
1:         stompConnection.sendFrame("DISCONNECT\n\n");
1:         stompConnection.close();
0:         stompConnection.open("localhost", STOMP_PORT);
0:         stompConnection.sendFrame(connect_frame);
1:         stompConnection.receiveFrame();
1:         stompConnection.sendFrame(frame);
1:                 String receiveFrame = stompConnection.receiveFrame();
1:                 assertEquals("Unexpected frame received", COMMAND_MESSAGE, getCommand(receiveFrame));
1:                 String messageId = getHeaderValue(receiveFrame, HEADER_MESSAGE_ID);
0:                 String ackmessage = "ACK\n" + HEADER_MESSAGE_ID + ":" + messageId.trim() + "\n\n";
1:                 stompConnection.sendFrame(ackmessage);
1:         stompConnection.sendFrame("DISCONNECT\n\n");
1:         stompConnection.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:     // These two methods could move to a utility class
1:     protected String getCommand(String frame) {
0:     	return frame.substring(0, frame.indexOf('\n') + 1).trim();
1:     }
1: 
0:     protected String getHeaderValue (String frame, String header) throws IOException {
1:         DataInput input = new DataInputStream(new ByteArrayInputStream(frame.getBytes()));
1:         String line;
0:         for (int idx = 0; /*forever, sort of*/; ++idx) {
1:             line = input.readLine();
1:             if (line == null) {
0:             	// end of message, no headers
0:             	return null;
1:             } 
1:             line = line.trim();
1:             if (line.length() == 0) {
0:             	// start body, no headers from here on
0:             	return null;
1:             } 
0:             if (idx > 0) {     // Ignore command line
0:             	int pos = line.indexOf(':');
0:             	if (header.equals(line.substring(0, pos))) {
0:             		return line.substring(pos + 1).trim();
1:             	}
1:             }
1:         }
1:     }
author:Brian McCallister
-------------------------------------------------------------------------------
commit:f8485e3
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
commit:2b0279a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
0: 
1: import java.io.ByteArrayInputStream;
0: import java.io.ByteArrayOutputStream;
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.net.Socket;
0: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.transport.stomp.Stomp;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
0: public class StompSubscriptionRemoveTest extends TestCase {
0:     private static final Log log = LogFactory.getLog(StompSubscriptionRemoveTest.class);
0: 
0:     private Socket stompSocket;
0:     private ByteArrayOutputStream inputBuffer;
0: 
1:     /**
0:      * @param args
0:      * @throws Exception
1:      */
1:     public void testRemoveSubscriber() throws Exception {
0:         BrokerService broker = new BrokerService();
0:         broker.setPersistent(true);
0: 
0:         broker.addConnector("stomp://localhost:61613").setName("Stomp");
0:         broker.addConnector("tcp://localhost:61616").setName("Default");
0:         broker.start();
0: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
0:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(new ActiveMQQueue(getDestinationName()));
1:         Message message = session.createTextMessage("Testas");
1:         for (int idx = 0; idx < 2000; ++idx) {
1:             producer.send(message);
0:             log.debug("Sending: " + idx);
1:         }
1:         producer.close();
0:         // consumer.close();
1:         session.close();
1:         connection.close();
0:         broker.stop();
0:         while (broker.isStarted()) {
0:             Thread.sleep(1000);
1:         }
0: 
0:         broker = new BrokerService();
0:         broker.setPersistent(true);
0: 
0:         broker.addConnector("stomp://localhost:61613").setName("Stomp");
0:         broker.addConnector("tcp://localhost:61616").setName("Default");
0:         broker.start();
0: 
0:         stompSocket = new Socket("localhost", 61613);
0:         inputBuffer = new ByteArrayOutputStream();
0: 
0:         String connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n" + Stomp.NULL;
0:         sendFrame(connect_frame);
0: 
0:         String f = receiveFrame(100000);
0:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n" + Stomp.NULL;
0:         sendFrame(frame);
1:         int messagesCount = 0;
1:         int count = 0;
1:         while (count < 2) {
0:             String receiveFrame = receiveFrame(10000);
0:             DataInput input = new DataInputStream(new ByteArrayInputStream(receiveFrame.getBytes()));
0:             String line;
0:             while (true) {
0:                 line = input.readLine();
0:                 if (line == null) {
0:                     throw new IOException("connection was closed");
1:                 }
0:                 else {
0:                     line = line.trim();
0:                     if (line.length() > 0) {
0:                         break;
1:                     }
1:                 }
1:             }
0:             line = input.readLine();
0:             if (line == null) {
0:                 throw new IOException("connection was closed");
1:             }
0:             String messageId = line.substring(line.indexOf(':') + 1);
0:             messageId = messageId.trim();
0:             String ackmessage = "ACK\n" + "message-id:" + messageId + "\n\n" + Stomp.NULL;
0:             sendFrame(ackmessage);
0:             log.debug(receiveFrame);
0:             //Thread.sleep(1000);
1:             ++messagesCount;
1:             ++count;
1:         }
0:         stompSocket.close();
0:         Thread.sleep(10000);
0: 
0:         // for (int idx = 0; idx < 500; ++idx) {
0:         // producer.send(message);
0:         // log.debug("Sending: " +idx);
0:         // }
0: 
0:         stompSocket = new Socket("localhost", 61613);
0:         inputBuffer = new ByteArrayOutputStream();
0: 
0:         connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n" + Stomp.NULL;
0:         sendFrame(connect_frame);
0: 
0:         f = receiveFrame(100000);
0:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getDestinationName() + "\n" + "ack:client\n\n" + Stomp.NULL;
0:         sendFrame(frame);
1:         try {
1:             while (count != 2000) {
0:                 String receiveFrame = receiveFrame(10000);
0:                 DataInput input = new DataInputStream(new ByteArrayInputStream(receiveFrame.getBytes()));
0:                 String line;
0:                 while (true) {
0:                     line = input.readLine();
0:                     if (line == null) {
0:                         throw new IOException("connection was closed");
1:                     }
0:                     else {
0:                         line = line.trim();
0:                         if (line.length() > 0) {
0:                             break;
1:                         }
1:                     }
1:                 }
0:                 line = input.readLine();
0:                 if (line == null) {
0:                     throw new IOException("connection was closed");
1:                 }
0:                 String messageId = line.substring(line.indexOf(':') + 1);
0:                 messageId = messageId.trim();
0:                 String ackmessage = "ACK\n" + "message-id:" + messageId + "\n\n" + Stomp.NULL;
0:                 sendFrame(ackmessage);
0:                 log.debug("Received: " + receiveFrame);
0:                 //Thread.sleep(1000);
1:                 ++messagesCount;
1:                 ++count;
1:             }
0: 
1:         }
0:         catch (IOException ex) {
0:             // timeout
1:         }
0:         stompSocket.close();
0:         broker.stop();
0:         log.info("Total messages receved: " + messagesCount);
0:         assertTrue("Messages receved after connection loss: " + messagesCount, messagesCount >= 2000);
0: 
0:         // The first ack messages has no chance complete, so we receiving more messages
0: 
1:         // Don't know how to list subscriptions for the broker. Currently you
0:         // can check using jmx console. You'll see
0:         // Subscription whithout any connections
1:     }
0: 
0:     public void sendFrame(String data) throws Exception {
0:         byte[] bytes = data.getBytes("UTF-8");
0:         OutputStream outputStream = stompSocket.getOutputStream();
0:         for (int i = 0; i < bytes.length; i++) {
0:             outputStream.write(bytes[i]);
1:         }
0:         outputStream.flush();
1:     }
0: 
0:     public String receiveFrame(long timeOut) throws Exception {
0:         stompSocket.setSoTimeout((int) timeOut);
0:         InputStream is = stompSocket.getInputStream();
0:         int c = 0;
0:         for (;;) {
0:             c = is.read();
0:             if (c < 0) {
0:                 throw new IOException("socket closed.");
1:             }
0:             else if (c == 0) {
0:                 c = is.read();
0:                 byte[] ba = inputBuffer.toByteArray();
0:                 inputBuffer.reset();
0:                 return new String(ba, "UTF-8");
1:             }
0:             else {
0:                 inputBuffer.write(c);
1:             }
1:         }
1:     }
0: 
0:     protected String getDestinationName() {
0:         return getClass().getName() + "." + getName();
1:     }
1: }
============================================================================