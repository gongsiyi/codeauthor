1:57f5d49: /**
1:57f5d49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5d49:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5d49:  * this work for additional information regarding copyright ownership.
1:57f5d49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5d49:  * (the "License"); you may not use this file except in compliance with
1:57f5d49:  * the License.  You may obtain a copy of the License at
1:57f5d49:  *
1:57f5d49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5d49:  *
1:57f5d49:  * Unless required by applicable law or agreed to in writing, software
1:57f5d49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5d49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5d49:  * See the License for the specific language governing permissions and
1:57f5d49:  * limitations under the License.
1:57f5d49:  */
1:57f5d49: package org.apache.activemq.usecases;
1:57f5d49: 
1:57f5d49: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:57f5d49: import org.apache.activemq.util.Wait;
1:57f5d49: import org.junit.Test;
1:57f5d49: import org.junit.runner.RunWith;
1:57f5d49: import org.junit.runners.Parameterized;
1:57f5d49: import org.slf4j.Logger;
1:57f5d49: import org.slf4j.LoggerFactory;
1:57f5d49: 
1:57f5d49: import javax.jms.Connection;
1:57f5d49: import javax.jms.Message;
1:57f5d49: import javax.jms.MessageConsumer;
1:57f5d49: import javax.jms.MessageProducer;
1:57f5d49: import javax.jms.Session;
1:57f5d49: import java.util.ArrayList;
1:57f5d49: import java.util.Collection;
1:57f5d49: import java.util.List;
1:57f5d49: 
1:57f5d49: import static org.junit.Assert.assertTrue;
1:57f5d49: 
1:57f5d49: 
1:57f5d49: @RunWith(value = Parameterized.class)
1:57f5d49: public class DurableSubscriptionOffline4Test extends DurableSubscriptionOfflineTestBase {
1:57f5d49: 
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline4Test.class);
1:57f5d49: 
1:57f5d49:     @Parameterized.Parameters(name = "keepDurableSubsActive_{0}")
1:57f5d49:     public static Collection<Boolean[]> getTestParameters() {
1:57f5d49:         Boolean[] f = {Boolean.FALSE};
1:57f5d49:         Boolean[] t = {Boolean.TRUE};
1:57f5d49:         List<Boolean[]> booleanChoices = new ArrayList<Boolean[]>();
1:57f5d49:         booleanChoices.add(f);
1:57f5d49:         booleanChoices.add(t);
1:57f5d49: 
1:57f5d49:         return booleanChoices;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public DurableSubscriptionOffline4Test(Boolean keepDurableSubsActive) {
1:57f5d49:         this.journalMaxFileLength = 64 * 1024;
1:57f5d49:         this.keepDurableSubsActive = keepDurableSubsActive.booleanValue();
1:57f5d49: 
1:57f5d49:         LOG.info(">>>> running {} with keepDurableSubsActive: {}, journalMaxFileLength", testName.getMethodName(), this.keepDurableSubsActive, journalMaxFileLength);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49: 
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     // https://issues.apache.org/jira/browse/AMQ-3206
1:57f5d49:     public void testCleanupDeletedSubAfterRestart() throws Exception {
1:57f5d49:         Connection con = createConnection("cli1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         con = createConnection("cli2");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         final int toSend = 500;
1:57f5d49:         final String payload = new byte[40*1024].toString();
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = sent; i < toSend; i++) {
1:57f5d49:             Message message = session.createTextMessage(payload);
1:57f5d49:             message.setStringProperty("filter", "false");
1:57f5d49:             message.setIntProperty("ID", i);
1:57f5d49:             producer.send(topic, message);
1:57f5d49:             sent++;
1:57f5d49:         }
1:57f5d49:         con.close();
1:57f5d49:         LOG.info("sent: " + sent);
1:57f5d49: 
1:57f5d49:         // kill off cli1
1:57f5d49:         con = createConnection("cli1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.unsubscribe("SubsId");
1:57f5d49: 
1:57f5d49:         destroyBroker();
1:57f5d49:         createBroker(false);
1:57f5d49: 
1:57f5d49:         con = createConnection("cli2");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49:         final DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49:         assertTrue("got all sent", Wait.waitFor(new Wait.Condition() {
1:57f5d49:             @Override
1:57f5d49:             public boolean isSatisified() throws Exception {
1:57f5d49:                 LOG.info("Want: " + toSend  + ", current: " + listener.count);
1:57f5d49:                 return listener.count == toSend;
1:57f5d49:             }
1:57f5d49:         }));
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         destroyBroker();
1:57f5d49:         createBroker(false);
1:57f5d49:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:57f5d49:         assertTrue("Should have less than three journal files left but was: " +
1:57f5d49:                 pa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {
1:57f5d49: 
1:57f5d49:             @Override
1:57f5d49:             public boolean isSatisified() throws Exception {
1:57f5d49:                 return pa.getStore().getJournal().getFileMap().size() <= 3;
1:57f5d49:             }
1:57f5d49:         }));
1:57f5d49:     }
1:57f5d49: }
1:57f5d49: 
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:57f5d49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: @RunWith(value = Parameterized.class)
1: public class DurableSubscriptionOffline4Test extends DurableSubscriptionOfflineTestBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline4Test.class);
1: 
1:     @Parameterized.Parameters(name = "keepDurableSubsActive_{0}")
1:     public static Collection<Boolean[]> getTestParameters() {
1:         Boolean[] f = {Boolean.FALSE};
1:         Boolean[] t = {Boolean.TRUE};
1:         List<Boolean[]> booleanChoices = new ArrayList<Boolean[]>();
1:         booleanChoices.add(f);
1:         booleanChoices.add(t);
1: 
1:         return booleanChoices;
1:     }
1: 
1:     public DurableSubscriptionOffline4Test(Boolean keepDurableSubsActive) {
1:         this.journalMaxFileLength = 64 * 1024;
1:         this.keepDurableSubsActive = keepDurableSubsActive.booleanValue();
1: 
1:         LOG.info(">>>> running {} with keepDurableSubsActive: {}, journalMaxFileLength", testName.getMethodName(), this.keepDurableSubsActive, journalMaxFileLength);
1:     }
1: 
1: 
1:     @Test(timeout = 60 * 1000)
1:     // https://issues.apache.org/jira/browse/AMQ-3206
1:     public void testCleanupDeletedSubAfterRestart() throws Exception {
1:         Connection con = createConnection("cli1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:         session.close();
1:         con.close();
1: 
1:         con = createConnection("cli2");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:         session.close();
1:         con.close();
1: 
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         final int toSend = 500;
1:         final String payload = new byte[40*1024].toString();
1:         int sent = 0;
1:         for (int i = sent; i < toSend; i++) {
1:             Message message = session.createTextMessage(payload);
1:             message.setStringProperty("filter", "false");
1:             message.setIntProperty("ID", i);
1:             producer.send(topic, message);
1:             sent++;
1:         }
1:         con.close();
1:         LOG.info("sent: " + sent);
1: 
1:         // kill off cli1
1:         con = createConnection("cli1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.unsubscribe("SubsId");
1: 
1:         destroyBroker();
1:         createBroker(false);
1: 
1:         con = createConnection("cli2");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1:         final DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1:         assertTrue("got all sent", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Want: " + toSend  + ", current: " + listener.count);
1:                 return listener.count == toSend;
1:             }
1:         }));
1:         session.close();
1:         con.close();
1: 
1:         destroyBroker();
1:         createBroker(false);
1:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         assertTrue("Should have less than three journal files left but was: " +
1:                 pa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return pa.getStore().getJournal().getFileMap().size() <= 3;
1:             }
1:         }));
1:     }
1: }
1: 
============================================================================