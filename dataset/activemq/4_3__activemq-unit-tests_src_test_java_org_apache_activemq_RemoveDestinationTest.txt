1:2d0fa5e: /**
1:2d0fa5e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2d0fa5e:  * contributor license agreements.  See the NOTICE file distributed with
1:2d0fa5e:  * this work for additional information regarding copyright ownership.
1:2d0fa5e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2d0fa5e:  * (the "License"); you may not use this file except in compliance with
1:2d0fa5e:  * the License.  You may obtain a copy of the License at
1:2d0fa5e:  *
1:2d0fa5e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2d0fa5e:  *
1:2d0fa5e:  * Unless required by applicable law or agreed to in writing, software
1:2d0fa5e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2d0fa5e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2d0fa5e:  * See the License for the specific language governing permissions and
1:2d0fa5e:  * limitations under the License.
1:2d0fa5e:  */
1:2d0fa5e: package org.apache.activemq;
16:2d0fa5e: 
1:60d7cdc: import static org.junit.Assert.assertNotNull;
1:60d7cdc: import static org.junit.Assert.assertTrue;
1:60d7cdc: import static org.junit.Assert.fail;
1:60d7cdc: 
1:79568f1: import java.util.concurrent.TimeUnit;
1:2d0fa5e: 
1:2d0fa5e: import javax.jms.Connection;
1:2d0fa5e: import javax.jms.JMSException;
1:2d0fa5e: import javax.jms.MessageConsumer;
1:2d0fa5e: import javax.jms.MessageProducer;
1:2d0fa5e: import javax.jms.Session;
1:2d0fa5e: import javax.jms.TextMessage;
1:60d7cdc: import javax.jms.Topic;
1:2d0fa5e: import javax.management.ObjectName;
1:2d0fa5e: 
1:2d0fa5e: import org.apache.activemq.advisory.DestinationSource;
1:2d0fa5e: import org.apache.activemq.broker.BrokerService;
1:60d7cdc: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:2d0fa5e: import org.apache.activemq.command.ActiveMQDestination;
1:2d0fa5e: import org.apache.activemq.command.ActiveMQTopic;
1:79568f1: import org.apache.activemq.util.Wait;
1:60d7cdc: import org.junit.After;
1:60d7cdc: import org.junit.Before;
1:60d7cdc: import org.junit.Test;
1:2d0fa5e: 
1:60d7cdc: public class RemoveDestinationTest {
1:2d0fa5e: 
1:2d0fa5e:     private static final String VM_BROKER_URL = "vm://localhost?create=false";
1:2d0fa5e: 
1:60d7cdc:     BrokerService broker;
1:60d7cdc: 
1:60d7cdc:     @Before
1:60d7cdc:     public void setUp() throws Exception {
1:79568f1:         broker = new BrokerService();
1:79568f1:         broker.setPersistent(false);
1:79568f1:         broker.setUseJmx(true);
1:79568f1:         broker.getManagementContext().setCreateConnector(false);
1:79568f1:         broker.setSchedulerSupport(false);
1:2d0fa5e:         broker.start();
1:60d7cdc:         broker.waitUntilStarted();
3:2d0fa5e:     }
1:2d0fa5e: 
1:60d7cdc:     @After
1:60d7cdc:     public void tearDown() throws Exception {
1:2d0fa5e:         broker.stop();
1:60d7cdc:         broker.waitUntilStopped();
1:60d7cdc:         broker = null;
1:2d0fa5e:     }
1:2d0fa5e: 
1:2d0fa5e:     private Connection createConnection(final boolean start) throws JMSException {
1:79568f1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:2d0fa5e:         Connection conn = cf.createConnection();
1:2d0fa5e:         if (start) {
1:2d0fa5e:             conn.start();
1:2d0fa5e:         }
1:2d0fa5e:         return conn;
1:2d0fa5e:     }
1:2d0fa5e: 
1:79568f1:     @Test(timeout = 60000)
1:2d0fa5e:     public void testRemoveDestinationWithoutSubscriber() throws Exception {
1:2d0fa5e: 
1:2d0fa5e:         ActiveMQConnection amqConnection = (ActiveMQConnection) createConnection(true);
1:79568f1: 
1:79568f1:         final DestinationSource destinationSource = amqConnection.getDestinationSource();
1:2d0fa5e:         Session session = amqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2d0fa5e:         Topic topic = session.createTopic("TEST.FOO");
1:2d0fa5e:         MessageProducer producer = session.createProducer(topic);
1:79568f1:         final int consumerCount = broker.getAdminView().getTopicSubscribers().length;
1:2d0fa5e:         MessageConsumer consumer = session.createConsumer(topic);
1:2d0fa5e: 
1:2d0fa5e:         TextMessage msg = session.createTextMessage("Hellow World");
1:2d0fa5e:         producer.send(msg);
1:60d7cdc:         assertNotNull(consumer.receive(5000));
1:79568f1:         final ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
1:2d0fa5e: 
1:79568f1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return destinationSource.getTopics().contains(amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e: 
1:2d0fa5e:         consumer.close();
1:2d0fa5e:         producer.close();
1:2d0fa5e:         session.close();
1:2d0fa5e: 
1:79568f1:         assertTrue("Subscriber still active", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return broker.getAdminView().getTopicSubscribers().length == consumerCount;
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:79568f1: 
1:60d7cdc:         amqConnection.destroyDestination((ActiveMQDestination) topic);
1:79568f1: 
1:79568f1:         assertTrue("Destination still active", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return !destinationSource.getTopics().contains(amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:79568f1: 
1:79568f1:         assertTrue("Destination never unregistered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return !destinationPresentInAdminView(broker, amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e:     }
1:2d0fa5e: 
1:79568f1:     @Test(timeout = 60000)
1:2d0fa5e:     public void testRemoveDestinationWithSubscriber() throws Exception {
1:2d0fa5e:         ActiveMQConnection amqConnection = (ActiveMQConnection) createConnection(true);
1:79568f1:         final DestinationSource destinationSource = amqConnection.getDestinationSource();
1:60d7cdc: 
1:2d0fa5e:         Session session = amqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2d0fa5e:         Topic topic = session.createTopic("TEST.FOO");
1:2d0fa5e:         MessageProducer producer = session.createProducer(topic);
1:79568f1:         final int consumerCount = broker.getAdminView().getTopicSubscribers().length;
1:2d0fa5e:         MessageConsumer consumer = session.createConsumer(topic);
1:2d0fa5e: 
1:2d0fa5e:         TextMessage msg = session.createTextMessage("Hellow World");
1:2d0fa5e:         producer.send(msg);
1:60d7cdc:         assertNotNull(consumer.receive(5000));
1:2d0fa5e: 
1:79568f1:         final ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
1:2d0fa5e: 
1:79568f1:         assertTrue("Destination never registered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return destinationPresentInAdminView(broker, amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:79568f1: 
1:79568f1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return destinationSource.getTopics().contains(amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e: 
1:2d0fa5e:         // This line generates a broker error since the consumer is still active.
1:60d7cdc:         try {
1:60d7cdc:             amqConnection.destroyDestination((ActiveMQDestination) topic);
1:2d0fa5e:             fail("expect exception on destroy if comsumer present");
1:60d7cdc:         } catch (JMSException expected) {
1:2d0fa5e:             assertTrue(expected.getMessage().indexOf(amqTopic.getTopicName()) != -1);
1:79568f1:         }
1:79568f1: 
1:79568f1:         assertTrue("Destination never registered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return destinationPresentInAdminView(broker, amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:79568f1: 
1:79568f1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1:60d7cdc: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return destinationSource.getTopics().contains(amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e: 
1:2d0fa5e:         consumer.close();
1:2d0fa5e:         producer.close();
1:2d0fa5e:         session.close();
1:2d0fa5e: 
1:79568f1:         assertTrue("Subscriber still active", Wait.waitFor(new Wait.Condition() {
1:2d0fa5e: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return broker.getAdminView().getTopicSubscribers().length == consumerCount;
1:2d0fa5e:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e: 
1:60d7cdc:         // The destination will not be removed with this call, but if you remove
1:60d7cdc:         // the call above that generates the error it will.
1:60d7cdc:         amqConnection.destroyDestination(amqTopic);
1:79568f1: 
1:79568f1:         assertTrue("Destination still active", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return !destinationSource.getTopics().contains(amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:79568f1: 
1:79568f1:         assertTrue("Destination never unregistered", Wait.waitFor(new Wait.Condition() {
1:79568f1: 
1:79568f1:             @Override
1:79568f1:             public boolean isSatisified() throws Exception {
1:79568f1:                 return !destinationPresentInAdminView(broker, amqTopic);
1:79568f1:             }
1:79568f1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:2d0fa5e:     }
1:2d0fa5e: 
1:60d7cdc:     private boolean destinationPresentInAdminView(BrokerService broker2, ActiveMQTopic amqTopic) throws Exception {
1:2d0fa5e:         boolean found = false;
1:2d0fa5e:         for (ObjectName name : broker.getAdminView().getTopics()) {
1:60d7cdc: 
1:60d7cdc:             DestinationViewMBean proxy = (DestinationViewMBean)
1:60d7cdc:                 broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class, true);
1:60d7cdc: 
1:60d7cdc:             if (proxy.getName().equals(amqTopic.getPhysicalName())) {
1:2d0fa5e:                 found = true;
1:2d0fa5e:                 break;
1:60d7cdc:             }
1:2d0fa5e:         }
1:2d0fa5e:         return found;
1:2d0fa5e:     }
1:2d0fa5e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:79568f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setSchedulerSupport(false);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1: 
1:         final DestinationSource destinationSource = amqConnection.getDestinationSource();
1:         final int consumerCount = broker.getAdminView().getTopicSubscribers().length;
1:         final ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationSource.getTopics().contains(amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:         assertTrue("Subscriber still active", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTopicSubscribers().length == consumerCount;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1: 
1:         assertTrue("Destination still active", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !destinationSource.getTopics().contains(amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         assertTrue("Destination never unregistered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !destinationPresentInAdminView(broker, amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:     @Test(timeout = 60000)
1:         final DestinationSource destinationSource = amqConnection.getDestinationSource();
1:         final int consumerCount = broker.getAdminView().getTopicSubscribers().length;
1:         final ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
1:         assertTrue("Destination never registered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationPresentInAdminView(broker, amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationSource.getTopics().contains(amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Destination never registered", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationPresentInAdminView(broker, amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         assertTrue("Destination never discovered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return destinationSource.getTopics().contains(amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:         assertTrue("Subscriber still active", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTopicSubscribers().length == consumerCount;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         assertTrue("Destination still active", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !destinationSource.getTopics().contains(amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1: 
1:         assertTrue("Destination never unregistered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !destinationPresentInAdminView(broker, amqTopic);
1:             }
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:60d7cdc
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Topic;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class RemoveDestinationTest {
1:     BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker.waitUntilStarted();
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.waitUntilStopped();
1:         broker = null;
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer.receive(5000));
0:         Thread.sleep(1000);
0:         ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
0:         assertTrue(destinationSource.getTopics().contains(amqTopic));
0:         Thread.sleep(3000);
1:         amqConnection.destroyDestination((ActiveMQDestination) topic);
0:         Thread.sleep(3000);
0:         assertFalse(destinationSource.getTopics().contains(amqTopic));
0:     @Test
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(consumer.receive(5000));
0:         Thread.sleep(1000);
0:         ActiveMQTopic amqTopic = (ActiveMQTopic) topic;
0:         assertTrue(destinationSource.getTopics().contains(amqTopic));
1:         try {
1:             amqConnection.destroyDestination((ActiveMQDestination) topic);
1:         } catch (JMSException expected) {
0:         Thread.sleep(3000);
0:         assertTrue(destinationSource.getTopics().contains(amqTopic));
1: 
0:         Thread.sleep(3000);
1:         // The destination will not be removed with this call, but if you remove
1:         // the call above that generates the error it will.
1:         amqConnection.destroyDestination(amqTopic);
0:         Thread.sleep(3000);
0:         assertFalse(destinationSource.getTopics().contains(amqTopic));
1:     private boolean destinationPresentInAdminView(BrokerService broker2, ActiveMQTopic amqTopic) throws Exception {
1: 
1:             DestinationViewMBean proxy = (DestinationViewMBean)
1:                 broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class, true);
1: 
1:             if (proxy.getName().equals(amqTopic.getPhysicalName())) {
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:2d0fa5e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.net.URI;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import javax.jms.Topic;
1: import javax.jms.TextMessage;
1: import javax.management.ObjectName;
1: 
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.advisory.DestinationSource;
0: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
0: import junit.framework.TestCase;
1: 
0: public class RemoveDestinationTest extends TestCase {
1: 
1:     private static final String VM_BROKER_URL = "vm://localhost?create=false";
0:     private static final String BROKER_URL = "broker:vm://localhost?broker.persistent=false&broker.useJmx=true";
1:     
0:     BrokerService broker;
1:     
0:     public RemoveDestinationTest(String name) {
0:         super(name);
1:     }
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:         
0:         broker = BrokerFactory.createBroker(new URI(BROKER_URL));
1:         broker.start();
1:         
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:         broker.stop();
1:     }
1: 
1:     private Connection createConnection(final boolean start) throws JMSException {
0:         ConnectionFactory cf = new ActiveMQConnectionFactory(VM_BROKER_URL);
1:         Connection conn = cf.createConnection();
1:         if (start) {
1:             conn.start();
1:         }
1:         return conn;
1:     }
1: 
1:     public void testRemoveDestinationWithoutSubscriber() throws Exception {
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) createConnection(true);
0:         DestinationSource destinationSource = amqConnection.getDestinationSource();
1:         Session session = amqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TEST.FOO");
1:         MessageProducer producer = session.createProducer(topic);
1:         MessageConsumer consumer = session.createConsumer(topic);
1: 
1:         TextMessage msg = session.createTextMessage("Hellow World");
1:         producer.send(msg);
0:         assertNotNull( consumer.receive( 5000 ) );
0:         Thread.sleep( 1000 );
1: 
0:         ActiveMQTopic amqTopic = (ActiveMQTopic)topic;
0:         assertTrue( destinationSource.getTopics().contains(amqTopic) );
1: 
1:         consumer.close();
1:         producer.close();
1:         session.close();
1: 
0:         Thread.sleep( 3000 );
1:         
0:         amqConnection.destroyDestination( (ActiveMQDestination)topic );
1:         
0:         Thread.sleep( 3000 );
1: 
0:         assertFalse( destinationSource.getTopics().contains(amqTopic) );
1:     }
1: 
1:     public void testRemoveDestinationWithSubscriber() throws Exception {
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) createConnection(true);
0:         DestinationSource destinationSource = amqConnection.getDestinationSource();
1:         
1:         Session session = amqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("TEST.FOO");
1:         MessageProducer producer = session.createProducer(topic);
1:         MessageConsumer consumer = session.createConsumer(topic);
1: 
1:         TextMessage msg = session.createTextMessage("Hellow World");
1:         producer.send(msg);
0:         assertNotNull( consumer.receive( 5000 ) );
0:         Thread.sleep( 1000 );
1: 
0:         ActiveMQTopic amqTopic = (ActiveMQTopic)topic;
1: 
0:         assertTrue(destinationPresentInAdminView(broker, amqTopic));
1:         
0:         assertTrue( destinationSource.getTopics().contains(amqTopic) );
1: 
1:         // This line generates a broker error since the consumer is still active.
0:         try{
0:             amqConnection.destroyDestination( (ActiveMQDestination)topic );
1:             fail("expect exception on destroy if comsumer present");
0:         } catch( JMSException expected ) {
1:             assertTrue(expected.getMessage().indexOf(amqTopic.getTopicName()) != -1);
1:         }
1: 
0:         Thread.sleep( 3000 );
1: 
0:         assertTrue( destinationSource.getTopics().contains(amqTopic) );
0:         assertTrue(destinationPresentInAdminView(broker, amqTopic));
1:         
1:         consumer.close();
1:         producer.close();
1:         session.close();
1: 
0:         Thread.sleep( 3000 );
1: 
0:         // The destination will not be removed with this call, but if you remove the call
0:         // above that generates the error it will.
0:         amqConnection.destroyDestination( amqTopic );
1: 
0:         Thread.sleep( 3000 );
1: 
0:         assertFalse( destinationSource.getTopics().contains(amqTopic) );
0:         assertFalse(destinationPresentInAdminView(broker, amqTopic));
1:         
1:     }
1: 
0:     private boolean destinationPresentInAdminView(BrokerService broker2,
0:             ActiveMQTopic amqTopic) throws Exception {
1:         boolean found = false;
1:         for (ObjectName name : broker.getAdminView().getTopics()) {
0:             if (name.getKeyProperty("Destination") != null &&
0:                     name.getKeyProperty("Destination").equalsIgnoreCase(amqTopic.getTopicName())) {
1:                 found = true;
1:                 break;
1:             }   
1:         }
1:         return found;
1:     }
1: }
1: 
============================================================================