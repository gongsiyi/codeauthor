1:1dd34a1: /**
1:1591960:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1591960:  * contributor license agreements.  See the NOTICE file distributed with
1:1591960:  * this work for additional information regarding copyright ownership.
1:1591960:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1591960:  * (the "License"); you may not use this file except in compliance with
1:1591960:  * the License.  You may obtain a copy of the License at
1:1dd34a1:  *
1:1591960:  *      http://www.apache.org/licenses/LICENSE-2.0
2:1591960:  *
1:1591960:  * Unless required by applicable law or agreed to in writing, software
1:1591960:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1591960:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1591960:  * See the License for the specific language governing permissions and
1:1591960:  * limitations under the License.
1:1dd34a1:  */
1:1dd34a1: package org.apache.activemq.transport.amqp;
10:1dd34a1: 
1:36bd069: import java.net.URI;
1:8448cf1: import java.net.URISyntaxException;
1:1dd34a1: 
1:7bafa7d: import javax.jms.Connection;
1:7bafa7d: import javax.jms.JMSException;
1:7bafa7d: 
1:7bafa7d: import org.junit.After;
1:7bafa7d: 
1:1dd34a1: public class JMSClientTestSupport extends AmqpTestSupport {
1:1dd34a1: 
1:1dd34a1:     protected Connection connection;
1:a2b78fd: 
2:1dd34a1:     @Override
1:1dd34a1:     @After
1:1dd34a1:     public void tearDown() throws Exception {
1:1dd34a1:         try {
1:76e29bd:             LOG.debug("tearDown started.");
1:1dd34a1:             if (connection != null) {
1:76e29bd:                 LOG.debug("in CloseConnectionTask.call(), calling connection.close()");
1:1dd34a1:                 connection.close();
1:36bd069:             }
1:ce551cf:         } finally {
1:ce551cf:             connection = null;
1:ce551cf:             super.tearDown();
1:a2b78fd:         }
1:7bafa7d:     }
1:36bd069: 
1:36bd069:     /**
1:1dd34a1:      * @return the proper destination name to use for each test method invocation.
1:1dd34a1:      */
1:1dd34a1:     protected String getDestinationName() {
1:1dd34a1:         return name.getMethodName();
6:1dd34a1:     }
1:a2b78fd: 
1:1dd34a1:     /**
1:36bd069:      * Can be overridden in subclasses to test against a different transport suchs as NIO.
1:36bd069:      *
1:36bd069:      * @return the URI to connect to on the Broker for AMQP.
1:36bd069:      */
1:36bd069:     protected URI getBrokerURI() {
1:36bd069:         return amqpURI;
1:1dd34a1:     }
1:7bafa7d: 
1:8448cf1:     protected URI getAmqpURI() {
1:8448cf1:         return getAmqpURI("");
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     protected URI getAmqpURI(String uriOptions) {
1:8448cf1: 
1:2e2d5dd:         String clientScheme;
1:2e2d5dd:         boolean useSSL = false;
1:8448cf1: 
1:2e2d5dd:         switch (getBrokerURI().getScheme()) {
1:2e2d5dd:             case "tcp" :
1:2e2d5dd:             case "amqp":
1:2e2d5dd:             case "auto":
1:2e2d5dd:             case "amqp+nio":
1:2e2d5dd:             case "auto+nio":
1:2e2d5dd:                 clientScheme = "amqp://";
1:2e2d5dd:                 break;
1:2e2d5dd:             case "ssl":
1:2e2d5dd:             case "amqp+ssl":
1:2e2d5dd:             case "auto+ssl":
1:2e2d5dd:             case "amqp+nio+ssl":
1:2e2d5dd:             case "auto+nio+ssl":
1:2e2d5dd:                 clientScheme = "amqps://";
1:2e2d5dd:                 useSSL = true;
1:2e2d5dd:                 break;
1:2e2d5dd:             case "ws":
1:2e2d5dd:             case "amqp+ws":
1:2e2d5dd:                 clientScheme = "amqpws://";
1:2e2d5dd:                 break;
1:2e2d5dd:             case "wss":
1:2e2d5dd:             case "amqp+wss":
1:2e2d5dd:                 clientScheme = "amqpwss://";
1:2e2d5dd:                 useSSL = true;
1:2e2d5dd:                 break;
1:2e2d5dd:             default:
1:2e2d5dd:                 clientScheme = "amqp://";
1:2e2d5dd:         }
1:2e2d5dd: 
1:2e2d5dd:         String amqpURI = clientScheme + getBrokerURI().getHost() + ":" + getBrokerURI().getPort();
1:8448cf1: 
1:8448cf1:         if (uriOptions != null && !uriOptions.isEmpty()) {
1:8448cf1:             if (uriOptions.startsWith("?") || uriOptions.startsWith("&")) {
1:8448cf1:                 uriOptions = uriOptions.substring(1);
1:8448cf1:             }
1:8448cf1:         } else {
1:8448cf1:             uriOptions = "";
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         if (useSSL) {
1:8448cf1:             amqpURI += "?transport.verifyHost=false";
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         if (!uriOptions.isEmpty()) {
1:8448cf1:             if (useSSL) {
1:8448cf1:                 amqpURI += "&" + uriOptions;
1:8448cf1:             } else {
1:8448cf1:                 amqpURI += "?" + uriOptions;
1:8448cf1:             }
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         URI result = getBrokerURI();
1:8448cf1:         try {
1:8448cf1:             result = new URI(amqpURI);
1:8448cf1:         } catch (URISyntaxException e) {
1:8448cf1:         }
1:8448cf1: 
1:8448cf1:         return result;
1:8448cf1:     }
1:8448cf1: 
1:1dd34a1:     protected Connection createConnection() throws JMSException {
1:b5ef928:         return createConnection(name.toString(), false);
1:1dd34a1:     }
1:1dd34a1: 
1:1dd34a1:     protected Connection createConnection(boolean syncPublish) throws JMSException {
1:b5ef928:         return createConnection(name.toString(), syncPublish);
1:1dd34a1:     }
1:1dd34a1: 
1:1dd34a1:     protected Connection createConnection(String clientId) throws JMSException {
1:b5ef928:         return createConnection(clientId, false);
1:1dd34a1:     }
1:1dd34a1: 
1:b5ef928:     protected Connection createConnection(String clientId, boolean syncPublish) throws JMSException {
1:b5ef928:         Connection connection = JMSClientContext.INSTANCE.createConnection(getBrokerURI(), "admin", "password", clientId, syncPublish);
1:1dd34a1:         connection.start();
1:1dd34a1:         return connection;
1:1dd34a1:     }
1:1dd34a1: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ce551cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             connection = null;
1:             super.tearDown();
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:         String clientScheme;
1:         boolean useSSL = false;
1:         switch (getBrokerURI().getScheme()) {
1:             case "tcp" :
1:             case "amqp":
1:             case "auto":
1:             case "amqp+nio":
1:             case "auto+nio":
1:                 clientScheme = "amqp://";
1:                 break;
1:             case "ssl":
1:             case "amqp+ssl":
1:             case "auto+ssl":
1:             case "amqp+nio+ssl":
1:             case "auto+nio+ssl":
1:                 clientScheme = "amqps://";
1:                 useSSL = true;
1:                 break;
1:             case "ws":
1:             case "amqp+ws":
1:                 clientScheme = "amqpws://";
1:                 break;
1:             case "wss":
1:             case "amqp+wss":
1:                 clientScheme = "amqpwss://";
1:                 useSSL = true;
1:                 break;
1:             default:
1:                 clientScheme = "amqp://";
1:         }
1: 
1:         String amqpURI = clientScheme + getBrokerURI().getHost() + ":" + getBrokerURI().getPort();
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
/////////////////////////////////////////////////////////////////////////
1:     protected URI getAmqpURI() {
1:         return getAmqpURI("");
1:     }
1: 
1:     protected URI getAmqpURI(String uriOptions) {
1: 
0:         boolean useSSL = getBrokerURI().getScheme().toLowerCase().contains("ssl");
1: 
0:         String amqpURI = (useSSL ? "amqps://" : "amqp://") + getBrokerURI().getHost() + ":" + getBrokerURI().getPort();
1: 
1:         if (uriOptions != null && !uriOptions.isEmpty()) {
1:             if (uriOptions.startsWith("?") || uriOptions.startsWith("&")) {
1:                 uriOptions = uriOptions.substring(1);
1:             }
1:         } else {
1:             uriOptions = "";
1:         }
1: 
1:         if (useSSL) {
1:             amqpURI += "?transport.verifyHost=false";
1:         }
1: 
1:         if (!uriOptions.isEmpty()) {
1:             if (useSSL) {
1:                 amqpURI += "&" + uriOptions;
1:             } else {
1:                 amqpURI += "?" + uriOptions;
1:             }
1:         }
1: 
1:         URI result = getBrokerURI();
1:         try {
1:             result = new URI(amqpURI);
1:         } catch (URISyntaxException e) {
1:         }
1: 
1:         return result;
1:     }
1: 
commit:b5ef928
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return createConnection(name.toString(), false);
1:         return createConnection(name.toString(), syncPublish);
1:         return createConnection(clientId, false);
1:     protected Connection createConnection(String clientId, boolean syncPublish) throws JMSException {
1:         Connection connection = JMSClientContext.INSTANCE.createConnection(getBrokerURI(), "admin", "password", clientId, syncPublish);
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return amqpPort;
1:     }
1: 
1:     /**
1:      * Can be overridden in subclasses to test against a different transport suchs as NIO.
1:      *
1:      * @return the URI to connect to on the Broker for AMQP.
1:      */
1:     protected URI getBrokerURI() {
1:         return amqpURI;
/////////////////////////////////////////////////////////////////////////
0:             factory.setKeyStorePath(System.getProperty("javax.net.ssl.trustStore"));
0:             factory.setTrustStorePath(System.getProperty("javax.net.ssl.keyStore"));
commit:a2b78fd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private Thread connectionCloseThread;
1: 
0:         Future<Boolean> future = testService.submit(new CloseConnectionTask());
0:             if (connectionCloseThread != null) {
0:                 connectionCloseThread.interrupt();;
1:             }
1: 
0:             testService.shutdownNow();
0:             testService = Executors.newSingleThreadExecutor();
0:             connectionCloseThread = null;
0:             connection = null;
/////////////////////////////////////////////////////////////////////////
0:                 connectionCloseThread = Thread.currentThread();
commit:7bafa7d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: 
0: import org.apache.activemq.spring.SpringSslContext;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
1: import org.junit.After;
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (useSsl) {
0:             SpringSslContext context = (SpringSslContext) brokerService.getSslContext();
0:             factory.setKeyStorePath(context.getKeyStore());
0:             factory.setKeyStorePassword("password");
0:             factory.setTrustStorePath(context.getTrustStore());
0:             factory.setTrustStorePassword("password");
1:         }
1: 
commit:1dd34a1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.amqp;
1: 
0: import javax.jms.Connection;
0: import javax.jms.ExceptionListener;
0: import javax.jms.JMSException;
1: 
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.junit.After;
1: 
1: public class JMSClientTestSupport extends AmqpTestSupport {
1: 
1:     protected Connection connection;
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
0:             } catch (Exception e) {
1:             }
1:         }
1: 
0:         super.tearDown();
1:     }
1: 
1:     /**
1:      * @return the proper destination name to use for each test method invocation.
1:      */
1:     protected String getDestinationName() {
1:         return name.getMethodName();
1:     }
1: 
1:     /**
0:      * Can be overridden in subclasses to test against a different transport suchs as NIO.
1:      *
0:      * @return the port to connect to on the Broker.
1:      */
0:     protected int getBrokerPort() {
0:         return port;
1:     }
1: 
1:     protected Connection createConnection() throws JMSException {
0:         return createConnection(name.toString(), false, false);
1:     }
1: 
1:     protected Connection createConnection(boolean syncPublish) throws JMSException {
0:         return createConnection(name.toString(), syncPublish, false);
1:     }
1: 
1:     protected Connection createConnection(String clientId) throws JMSException {
0:         return createConnection(clientId, false, false);
1:     }
1: 
0:     protected Connection createConnection(String clientId, boolean syncPublish, boolean useSsl) throws JMSException {
1: 
0:         int brokerPort = getBrokerPort();
0:         LOG.debug("Creating connection on port {}", brokerPort);
0:         final ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", brokerPort, "admin", "password", null, useSsl);
1: 
0:         factory.setSyncPublish(syncPublish);
0:         factory.setTopicPrefix("topic://");
0:         factory.setQueuePrefix("queue://");
1: 
0:         final Connection connection = factory.createConnection();
0:         if (clientId != null && !clientId.isEmpty()) {
0:             connection.setClientID(clientId);
1:         }
0:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
0:             public void onException(JMSException exception) {
0:                 exception.printStackTrace();
1:             }
0:         });
1:         connection.start();
1:         return connection;
1:     }
1: }
author:gtully
-------------------------------------------------------------------------------
commit:db65c2e
/////////////////////////////////////////////////////////////////////////
0:         } finally {
0:             executor.shutdownNow();
0:             super.tearDown();
author:Kevin Earls
-------------------------------------------------------------------------------
commit:76e29bd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.Future;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.TimeoutException;
0: 
/////////////////////////////////////////////////////////////////////////
0:         ExecutorService executor = Executors.newSingleThreadExecutor();
0:         Future<Boolean> future = executor.submit(new CloseConnectionTask());
0:         try {
1:             LOG.debug("tearDown started.");
0:             future.get(60, TimeUnit.SECONDS);
0:         } catch (TimeoutException e) {
0:             throw new Exception("CloseConnection timed out");
0:         executor.shutdownNow();
0:     public class CloseConnectionTask implements Callable<Boolean> {
0:         @Override
0:         public Boolean call() throws Exception {
0:             if (connection != null) {
1:                 LOG.debug("in CloseConnectionTask.call(), calling connection.close()");
0:                 connection.close();
0:             }
0: 
0:             return Boolean.TRUE;
0:         }
0:     }
0: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:1591960
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
============================================================================