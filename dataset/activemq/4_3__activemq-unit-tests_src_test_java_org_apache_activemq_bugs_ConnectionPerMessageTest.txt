1:f3d633c: /**
1:f3d633c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f3d633c:  * contributor license agreements.  See the NOTICE file distributed with
1:f3d633c:  * this work for additional information regarding copyright ownership.
1:f3d633c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f3d633c:  * (the "License"); you may not use this file except in compliance with
1:f3d633c:  * the License.  You may obtain a copy of the License at
1:f3d633c:  *
1:f3d633c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f3d633c:  *
1:f3d633c:  * Unless required by applicable law or agreed to in writing, software
1:f3d633c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f3d633c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f3d633c:  * See the License for the specific language governing permissions and
1:f3d633c:  * limitations under the License.
1:f3d633c:  */
1:f3d633c: 
1:f3d633c: 
1:f3d633c: 
1:f3d633c: package org.apache.activemq.bugs;
1:f3d633c: import javax.jms.Connection;
1:f3d633c: import javax.jms.DeliveryMode;
1:f3d633c: import javax.jms.JMSException;
1:f3d633c: import javax.jms.MapMessage;
1:f3d633c: import javax.jms.MessageProducer;
1:f3d633c: import javax.jms.Session;
1:f3d633c: import javax.jms.Topic;
1:f3d633c: 
1:f3d633c: import org.apache.activemq.ActiveMQConnectionFactory;
1:f3d633c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f3d633c: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f3d633c: 
1:f3d633c: public class ConnectionPerMessageTest extends EmbeddedBrokerTestSupport {
1:f3d633c: 
1:8bf987b: 	private static final Logger LOG = LoggerFactory.getLogger(ConnectionPerMessageTest.class);
1:f92d45b: 	private static final int COUNT = 2000;
1:f3d633c: 	protected String bindAddress;
1:f3d633c: 
1:f3d633c: 	public void testConnectionPerMessage() throws Exception {
1:f3d633c: 		final String topicName = "test.topic";
1:f3d633c: 
1:f92d45b: 		LOG.info("Initializing connection factory for JMS to URL: "
1:f3d633c: 				+ bindAddress);
1:f3d633c: 		final ActiveMQConnectionFactory normalFactory = new ActiveMQConnectionFactory();
1:f3d633c: 		normalFactory.setBrokerURL(bindAddress);
1:f3d633c: 		for (int i = 0; i < COUNT; i++) {
1:f3d633c: 
1:f92d45b: 			if (i % 100 == 0) {
1:8bf987b: 				LOG.info(new Integer(i).toString());
1:f3d633c: 			}
1:f3d633c: 
1:f3d633c: 			Connection conn = null;
1:f3d633c: 			try {
1:f3d633c: 
1:f3d633c: 				conn = normalFactory.createConnection();
1:f3d633c: 				final Session session = conn.createSession(false,
1:f3d633c: 						Session.AUTO_ACKNOWLEDGE);
1:f3d633c: 				final Topic topic = session.createTopic(topicName);
1:f3d633c: 				final MessageProducer producer = session.createProducer(topic);
1:f3d633c: 				producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:f3d633c: 
1:f3d633c: 				final MapMessage m = session.createMapMessage();
1:f3d633c: 				m.setInt("hey", i);
1:f3d633c: 
1:f3d633c: 				producer.send(m);
1:f3d633c: 
1:f3d633c: 			} catch (JMSException e) {
1:f3d633c: 				LOG.warn(e.getMessage(), e);
1:f3d633c: 			} finally {
1:f3d633c: 				if (conn != null)
1:f3d633c: 					try {
1:f3d633c: 						conn.close();
1:f3d633c: 					} catch (JMSException e) {
1:f3d633c: 						LOG.warn(e.getMessage(), e);
1:f3d633c: 					}
1:f3d633c: 			}
1:f3d633c: 		}
1:f3d633c: 	}
1:f3d633c: 
1:f3d633c: 	protected void setUp() throws Exception {
1:f3d633c: 		bindAddress = "vm://localhost";
1:f3d633c: 		super.setUp();
1:f3d633c: 	}
1:f3d633c: 
1:f3d633c: 	protected BrokerService createBroker() throws Exception {
1:f3d633c: 		BrokerService answer = new BrokerService();
1:f92d45b:         answer.setDeleteAllMessagesOnStartup(true);
1:f3d633c: 		answer.setUseJmx(false);
1:f3d633c: 		answer.setPersistent(isPersistent());
1:f3d633c: 		answer.addConnector(bindAddress);
1:f3d633c: 		return answer;
1:f3d633c: 	}
1:f3d633c: 
1:f3d633c: 	protected boolean isPersistent() {
1:f3d633c: 		return true;
1:f3d633c: 	}
1:f3d633c: 
1:f3d633c: 	protected void tearDown() throws Exception {
1:f3d633c: 		super.tearDown();
1:f3d633c: 	}
1:f3d633c: 
1:f3d633c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f92d45b
/////////////////////////////////////////////////////////////////////////
1: 	private static final int COUNT = 2000;
1: 		LOG.info("Initializing connection factory for JMS to URL: "
1: 			if (i % 100 == 0) {
/////////////////////////////////////////////////////////////////////////
1:         answer.setDeleteAllMessagesOnStartup(true);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	private static final Logger LOG = LoggerFactory.getLogger(ConnectionPerMessageTest.class);
/////////////////////////////////////////////////////////////////////////
1: 				LOG.info(new Integer(i).toString());
author:Robert Davies
-------------------------------------------------------------------------------
commit:f3d633c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: 
1: 
1: package org.apache.activemq.bugs;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class ConnectionPerMessageTest extends EmbeddedBrokerTestSupport {
1: 
0: 	private static final Log LOG = LogFactory.getLog(ConnectionPerMessageTest.class);
0: 	private static final int COUNT = 20000;
1: 	protected String bindAddress;
1: 
1: 	public void testConnectionPerMessage() throws Exception {
1: 		final String topicName = "test.topic";
1: 
0: 		LOG.info("Initializing pooled connection factory for JMS to URL: "
1: 				+ bindAddress);
1: 		final ActiveMQConnectionFactory normalFactory = new ActiveMQConnectionFactory();
1: 		normalFactory.setBrokerURL(bindAddress);
1: 		for (int i = 0; i < COUNT; i++) {
1: 
0: 			if (i % 1000 == 0) {
0: 				LOG.info(i);
1: 			}
1: 
1: 			Connection conn = null;
1: 			try {
1: 
1: 				conn = normalFactory.createConnection();
1: 				final Session session = conn.createSession(false,
1: 						Session.AUTO_ACKNOWLEDGE);
1: 				final Topic topic = session.createTopic(topicName);
1: 				final MessageProducer producer = session.createProducer(topic);
1: 				producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1: 				final MapMessage m = session.createMapMessage();
1: 				m.setInt("hey", i);
1: 
1: 				producer.send(m);
1: 
1: 			} catch (JMSException e) {
1: 				LOG.warn(e.getMessage(), e);
1: 			} finally {
1: 				if (conn != null)
1: 					try {
1: 						conn.close();
1: 					} catch (JMSException e) {
1: 						LOG.warn(e.getMessage(), e);
1: 					}
1: 			}
1: 		}
1: 	}
1: 
1: 	protected void setUp() throws Exception {
1: 		bindAddress = "vm://localhost";
1: 		super.setUp();
1: 	}
1: 
1: 	protected BrokerService createBroker() throws Exception {
1: 		BrokerService answer = new BrokerService();
1: 		answer.setUseJmx(false);
1: 		answer.setPersistent(isPersistent());
1: 		answer.addConnector(bindAddress);
1: 		return answer;
1: 	}
1: 
1: 	protected boolean isPersistent() {
1: 		return true;
1: 	}
1: 
1: 	protected void tearDown() throws Exception {
1: 		super.tearDown();
1: 	}
1: 
1: }
============================================================================