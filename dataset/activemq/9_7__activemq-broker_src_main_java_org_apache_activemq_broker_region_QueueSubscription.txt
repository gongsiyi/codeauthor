2:18d616c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
2:18d616c:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:18d616c:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:230a86c: 
1:d29ca2a: import java.io.IOException;
1:0b8b230: 
1:7d1e6bc: import javax.jms.JMSException;
1:0b8b230: 
1:4098942: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:e1d4780: import org.apache.activemq.broker.region.group.MessageGroupMap;
1:6df6d58: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:18d616c: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:9dd11cb: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:44b00e9: public class QueueSubscription extends PrefetchSubscription implements LockOwner {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueueSubscription.class);
1:230a86c: 
1:915333e:     public QueueSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws JMSException {
1:16f2d75:         super(broker,usageManager, context, info);
1:18d616c:     }
1:230a86c: 
1:c46562b:     /**
1:230a86c:      * In the queue case, mark the node as dropped and then a gc cycle will
1:230a86c:      * remove it from the queue.
1:0b8b230:      *
1:230a86c:      * @throws IOException
1:c46562b:      */
1:0b8b230:     @Override
1:8d11f07:     protected void acknowledge(final ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
1:2b99f39:         this.setTimeOfLastMessageAck(System.currentTimeMillis());
1:2b99f39: 
1:9a8f6e4:         final Destination q = (Destination) n.getRegionDestination();
1:230a86c:         final QueueMessageReference node = (QueueMessageReference)n;
1:bfaff9b:         final Queue queue = (Queue)q;
1:00fb444:         queue.removeMessage(context, this, node, ack);
1:0b8b230:     }
1:0b8b230: 
1:0b8b230:     @Override
1:a640ff5:     protected boolean canDispatch(MessageReference n) throws IOException {
1:d4382e4:         boolean result = true;
1:230a86c:         QueueMessageReference node = (QueueMessageReference)n;
1:d4382e4:         if (node.isAcked() || node.isDropped()) {
1:d4382e4:             result = false;
1:ecf89a6:         }
1:d4382e4:         result = result && (isBrowser() || node.lock(this));
1:d4382e4:         return result;
1:c46562b:     }
1:230a86c: 
1:0b8b230:     @Override
1:a3e3821:     public synchronized String toString() {
1:230a86c:         return "QueueSubscription:" + " consumer=" + info.getConsumerId() + ", destinations=" + destinations.size() + ", dispatched=" + dispatched.size() + ", delivered="
1:ffee8b4:                + this.prefetchExtension + ", pending=" + getPendingQueueSize() + ", prefetch=" + getPrefetchSize() + ", prefetchExtension=" + prefetchExtension.get();
1:18d616c:     }
1:230a86c: 
1:0b8b230:     @Override
1:44b00e9:     public int getLockPriority() {
1:44b00e9:         return info.getPriority();
1:18d616c:     }
1:230a86c: 
1:0b8b230:     @Override
1:44b00e9:     public boolean isLockExclusive() {
1:44b00e9:         return info.isExclusive();
1:18d616c:     }
1:230a86c: 
1:18d616c:     /**
1:18d616c:      */
1:0b8b230:     @Override
1:230a86c:     public void destroy() {
1:1b6d397:         setSlowConsumer(false);
1:18d616c:     }
1:0b8b230: 
1:230a86c: 
1:0b8b230:     @Override
1:149428b:     protected boolean isDropped(MessageReference node) {
1:149428b:        boolean result = false;
1:149428b:        if(node instanceof IndirectMessageReference) {
1:149428b:            QueueMessageReference qmr = (QueueMessageReference) node;
1:149428b:            result = qmr.isDropped();
1:18d616c:        }
1:149428b:        return result;
1:44b00e9:     }
1:230a86c: 
1:44b00e9: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:ffee8b4
/////////////////////////////////////////////////////////////////////////
1:                + this.prefetchExtension + ", pending=" + getPendingQueueSize() + ", prefetch=" + getPrefetchSize() + ", prefetchExtension=" + prefetchExtension.get();
commit:26807cd
/////////////////////////////////////////////////////////////////////////
commit:dd91e85
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("ignoring ack {}, for already expired message: {}", ack, n);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2b99f39
/////////////////////////////////////////////////////////////////////////
1:         this.setTimeOfLastMessageAck(System.currentTimeMillis());
1: 
commit:0b8b230
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
1: 
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("ignoring ack {}, for already expired message: {}", ack, n);
1:                 }
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:915333e
/////////////////////////////////////////////////////////////////////////
1:     public QueueSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws JMSException {
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueSubscription.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1:         final Destination q = (Destination) n.getRegionDestination();
commit:00fb444
/////////////////////////////////////////////////////////////////////////
1:         queue.removeMessage(context, this, node, ack);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:         if (node.isAcked()) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(QueueSubscription.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Failed to set boolean header: " + e, e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:     public QueueSubscription(Broker broker, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(broker, context, info);
1: 
1:      * In the queue case, mark the node as dropped and then a gc cycle will
1:      * remove it from the queue.
1:      * 
1:      * @throws IOException
1:         final QueueMessageReference node = (QueueMessageReference)n;
0:         if (!ack.isInTransaction()) {
0:             node.drop();
0:             context.getTransaction().addSynchronization(new Synchronization() {
0:                 public void afterCommit() throws Exception {
0:                     node.drop();
1: 
1: 
1:         QueueMessageReference node = (QueueMessageReference)n;
0:         if (node.isAcked())
0:         if (groupId != null) {
0:             MessageGroupMap messageGroupOwners = ((Queue)node.getRegionDestination()).getMessageGroupOwners();
1: 
0:             if (sequence == 1) {
0:                 if (node.lock(this)) {
1: 
0:             // Make sure that the previous owner is still valid, we may
0:             synchronized (node) {
0:                 if (groupOwner == null) {
0:                     if (node.lock(this)) {
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (groupOwner.equals(info.getConsumerId())) {
0:                 if (sequence < 0) {
1: 
1: 
0:      * Assigns the message group to this subscription and set the flag on the
0:      * message that it is the first message to be dispatched.
0:             ActiveMQMessage activeMessage = (ActiveMQMessage)message;
0:             } catch (JMSException e) {
1: 
1:         return "QueueSubscription:" + " consumer=" + info.getConsumerId() + ", destinations=" + destinations.size() + ", dispatched=" + dispatched.size() + ", delivered="
0:                + this.prefetchExtension + ", pending=" + getPendingQueueSize();
/////////////////////////////////////////////////////////////////////////
0:      * Override so that the message ref count is > 0 only when the message is
0:      * being dispatched to a client. Keeping it at 0 when it is in the pending
0:      * list allows the message to be swapped out to disk.
/////////////////////////////////////////////////////////////////////////
0:             // If the message was dispatched, it could be getting dispatched
0:             // async, so we
0:             // can only drop the reference count when that completes @see
0:             // onDispatch
0:             if (!rc) {
/////////////////////////////////////////////////////////////////////////
0:      * @see org.apache.activemq.broker.region.PrefetchSubscription#onDispatch(org.apache.activemq.broker.region.MessageReference,
0:      *      org.apache.activemq.command.Message)
0:         // Now that the message has been sent over the wire to the client,
0: 
0:      * Sending a message to the DQL will require us to increment the ref count
0:      * so we can get at the content.
0:         try {
0: 
1:     public void destroy() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d65ba80
/////////////////////////////////////////////////////////////////////////
0:             ", pending="+getPendingQueueSize();
commit:c46562b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      */
0:     synchronized public void destroy() {        
1:     }
0: 
commit:18d616c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Override so that the message ref count is > 0 only when the message is being dispatched
0:      * to a client.  Keeping it at 0 when it is in the pending list allows the message to be swapped out
0:      * to disk.
1:      * 
0:      * @return true if the message was dispatched.
1:      */
0:     protected boolean dispatch(MessageReference node) throws IOException {
0:         boolean rc = false;
0:         // This brings the message into memory if it was swapped out.
0:         node.incrementReferenceCount();
0:         try {
0:             rc = super.dispatch(node);
0:         } finally {
0:             // If the message was dispatched, it could be getting dispatched async, so we
0:             // can only drop the reference count when that completes @see onDispatch
0:             if( !rc ) {
0:                 node.incrementReferenceCount();
1:             }
1:         }
0:         return rc;
1:     }
0: 
1:     /**
0:      * OK Message was transmitted, we can now drop the reference count.
1:      * 
0:      * @see org.apache.activemq.broker.region.PrefetchSubscription#onDispatch(org.apache.activemq.broker.region.MessageReference, org.apache.activemq.command.Message)
1:      */
0:     protected void onDispatch(MessageReference node, Message message) {
0:         // Now that the message has been sent over the wire to the client, 
0:         // we can let it get swapped out.
0:         node.decrementReferenceCount();
0:         super.onDispatch(node, message);
1:     }
0:     
1:     /**
0:      * Sending a message to the DQL will require us to increment the ref count so we can get at the content.
1:      */
0:     protected void sendToDLQ(ConnectionContext context, MessageReference node) throws IOException, Exception {
0:         // This brings the message into memory if it was swapped out.
0:         node.incrementReferenceCount();
0:         try{
0:             super.sendToDLQ(context, node);
0:         } finally {
0:             // This let's the message be swapped out of needed.
0:             node.decrementReferenceCount();
1:         }
1:     }
0:     
commit:5ff3487
/////////////////////////////////////////////////////////////////////////
0:             ", delivered="+this.prefetchExtension+
0:             ", pending="+this.pending.size();
commit:44b00e9
/////////////////////////////////////////////////////////////////////////
1: public class QueueSubscription extends PrefetchSubscription implements LockOwner {
/////////////////////////////////////////////////////////////////////////
1:     public int getLockPriority() {
1:         return info.getPriority();
1:     }
0: 
1:     public boolean isLockExclusive() {
1:         return info.isExclusive();
1:     }
0: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void add(MessageReference node) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:                 public void afterCommit() throws Exception {                    
0:                 public void afterRollback() throws Exception {
commit:a7785c6
/////////////////////////////////////////////////////////////////////////
0:             if( sequence==0 ) {
/////////////////////////////////////////////////////////////////////////
0:                 if ( sequence < 0 ) {
commit:4759253
/////////////////////////////////////////////////////////////////////////
0:     
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.broker.region;
0: 
1: import java.io.IOException;
0: 
0: import javax.jms.InvalidSelectorException;
0: 
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.transaction.Synchronization;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: 
0: public class QueueSubscription extends PrefetchSubscription {
0:     
0:     public QueueSubscription(ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(context, info);
0:     }
0:     
0:     public void add(MessageReference node) throws Throwable {
0:         super.add(node);
0:     }
0:     /**
0:      * In the queue case, mark the node as dropped and then a gc cycle will remove it from 
0:      * the queue.
0:      * @throws IOException 
0:      */
0:     protected void acknowledge(ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
0:         
0:         final IndirectMessageReference node = (IndirectMessageReference) n;
0: 
0:         final Queue queue = (Queue)node.getRegionDestination();
0:         queue.acknowledge(context, this, ack, node);
0:         
0:         if( !ack.isInTransaction() ) {
0:             node.drop();            
0:             queue.dropEvent();
0:         } else {
0:             node.setAcked(true);
0:             context.getTransaction().addSynchronization(new Synchronization(){
0:                 public void afterCommit() throws Throwable {                    
0:                     node.drop();            
0:                     queue.dropEvent();
0:                 }
0:                 public void afterRollback() throws Throwable {
0:                     node.setAcked(false);
0:                 }
0:             });
0:         }
0:     }
0:     
0:     protected boolean canDispatch(MessageReference n) {
0:         IndirectMessageReference node = (IndirectMessageReference) n;
0:         if( node.isAcked() )
0:             return false;
0:         
0:         // Keep message groups together.
0:         String groupId = node.getGroupID();
0:         int sequence = node.getGroupSequence();
0:         if( groupId!=null ) {
0:             
0:             ConcurrentHashMap messageGroupOwners = ((Queue)node.getRegionDestination()).getMessageGroupOwners();            
0:             
0:             // If we can own the first, then no-one else should own the rest.
0:             if( sequence==1 ) {
0:                 if( node.lock(this) ) {
0:                     messageGroupOwners.put(groupId, info.getConsumerId());
0:                     return true;
0:                 } else {
0:                     return false;
0:                 }
0:             }
0:             
0:             // Make sure that the previous owner is still valid, we may 
0:             // need to become the new owner.
0:             ConsumerId groupOwner;
0:             synchronized(node) {
0:                 groupOwner = (ConsumerId) messageGroupOwners.get(groupId);
0:                 if( groupOwner==null ) {
0:                     if( node.lock(this) ) {
0:                         messageGroupOwners.put(groupId, info.getConsumerId());
0:                         return true;
0:                     } else {
0:                         return false;
0:                     }
0:                 }
0:             }
0:             
0:             if( groupOwner.equals(info.getConsumerId()) ) {
0:                 // A group sequence < 1 is an end of group signal.
0:                 if ( sequence < 1 ) {
0:                     messageGroupOwners.remove(groupId);
0:                 }
0:                 return true;
0:             }
0:             
0:             return false;
0:             
0:         } else {
0:             return node.lock(this);
0:         }
0:         
0:     }
0:     
0:     public String toString() {
0:         return 
0:             "QueueSubscription:" +
0:             " consumer="+info.getConsumerId()+
0:             ", destinations="+destinations.size()+
0:             ", dispatched="+dispatched.size()+
0:             ", delivered="+this.delivered+
0:             ", matched="+this.matched.size();
0:     }
0: 
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:a27eab4
/////////////////////////////////////////////////////////////////////////
0:             // sync with message expiry processing
0:             if (!broker.isExpired(n)) {
0:                 LOG.warn("ignoring ack " + ack + ", for already expired message: " + n);
0:                 return;
commit:1b6d397
/////////////////////////////////////////////////////////////////////////
1:         setSlowConsumer(false);
commit:a1bd85e
/////////////////////////////////////////////////////////////////////////
0:         
0:         if (n.isExpired()) {
0:             if (broker.isExpired(n)) {
0:                 queue.messageExpired(context, this, node);
0:             } else {
0:                 LOG.debug("ignoring ack " + ack + ", for already expired message: " + n);
0:             }
0:             return;
0:         }
commit:ca242f4
/////////////////////////////////////////////////////////////////////////
0:         if (n.isExpired()) {
0:             if (!broker.isExpired(n)) {
0:                 LOG.info("ignoring ack " + ack + ", for already expired message: " + n);
0:                 return;
0:             }
0:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public QueueSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
1:         super(broker,usageManager, context, info);
commit:dc4f299
/////////////////////////////////////////////////////////////////////////
commit:044c07d
/////////////////////////////////////////////////////////////////////////
0:     public QueueSubscription(Broker broker, Destination destination,SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(broker,destination,usageManager, context, info);
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         boolean result = true;
1:         if (node.isAcked() || node.isDropped()) {
1:             result = false;
1:         result = result && (isBrowser() || node.lock(this));
1:         return result;
commit:149428b
/////////////////////////////////////////////////////////////////////////
0:    
1:     protected boolean isDropped(MessageReference node) {
1:        boolean result = false;
1:        if(node instanceof IndirectMessageReference) {
1:            QueueMessageReference qmr = (QueueMessageReference) node;
1:            result = qmr.isDropped();
0:        }
1:        return result;
0:     }
0: 
commit:071b4b1
/////////////////////////////////////////////////////////////////////////
commit:8d11f07
/////////////////////////////////////////////////////////////////////////
1:     protected void acknowledge(final ConnectionContext context, final MessageAck ack, final MessageReference n) throws IOException {
0:             queue.removeMessage(context, this, node, ack);
0:                     queue.removeMessage(context, QueueSubscription.this, node, ack);
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     public QueueSubscription(Broker broker, SystemUsage usageManager, ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(broker,usageManager, context, info);
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     public synchronized String toString() {
commit:332aae3
/////////////////////////////////////////////////////////////////////////
0:                 activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
commit:d2e6062
/////////////////////////////////////////////////////////////////////////
0:         if( node.isAcked())
/////////////////////////////////////////////////////////////////////////
0:     public void destroy() {        
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import javax.jms.InvalidSelectorException;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
0: 
0:         final Destination q = n.getRegionDestination();
0:         q.acknowledge(context, this, ack, n);
0: 
0:         final QueueMessageReference node = (QueueMessageReference) n;
1:         final Queue queue = (Queue)q;
/////////////////////////////////////////////////////////////////////////
0:         QueueMessageReference node = (QueueMessageReference) n;
/////////////////////////////////////////////////////////////////////////
commit:40b96b1
/////////////////////////////////////////////////////////////////////////
0:                 node.decrementReferenceCount();
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.InvalidSelectorException;
0: 
0: import java.io.IOException;
0:     public QueueSubscription(Broker broker,ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
0:         super(broker,context, info);
author:James Strachan
-------------------------------------------------------------------------------
commit:9479de7
/////////////////////////////////////////////////////////////////////////
commit:6df6d58
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import javax.jms.JMSException;
0:     private static final Log log = LogFactory.getLog(QueueSubscription.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:                     assignGroupToMe(messageGroupOwners, n, groupId);
/////////////////////////////////////////////////////////////////////////
0:                         assignGroupToMe(messageGroupOwners, n, groupId);
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Assigns the message group to this subscription and set the flag on the message that it is the first message
0:      * to be dispatched.
0:      */
0:     protected void assignGroupToMe(MessageGroupMap messageGroupOwners, MessageReference n, String groupId) throws IOException {
0:         messageGroupOwners.put(groupId, info.getConsumerId());
0:         Message message = n.getMessage();
0:         if (message instanceof ActiveMQMessage) {
0:             ActiveMQMessage activeMessage = (ActiveMQMessage) message;
0:             try {
0:                 activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true);
0:             }
0:             catch (JMSException e) {
0:                 log.warn("Failed to set boolean header: " + e, e);
0:             }
0:         }
0:     }
commit:fbb26ba
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if( sequence == 1 ) {
commit:a640ff5
/////////////////////////////////////////////////////////////////////////
1:     protected boolean canDispatch(MessageReference n) throws IOException {
0:         // allow user-level security
0:         if (!context.isAllowedToConsume(n)) {
0:             return false;
0:         }
0:             
commit:e1d4780
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.group.MessageGroupMap;
/////////////////////////////////////////////////////////////////////////
0:             MessageGroupMap messageGroupOwners = ((Queue)node.getRegionDestination()).getMessageGroupOwners();            
/////////////////////////////////////////////////////////////////////////
0:                 groupOwner = messageGroupOwners.get(groupId);
/////////////////////////////////////////////////////////////////////////
0:                     messageGroupOwners.removeGroup(groupId);
============================================================================