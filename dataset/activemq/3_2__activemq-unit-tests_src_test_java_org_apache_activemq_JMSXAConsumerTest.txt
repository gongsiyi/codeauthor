1:ab2cd11: /**
1:ab2cd11:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ab2cd11:  * contributor license agreements.  See the NOTICE file distributed with
1:ab2cd11:  * this work for additional information regarding copyright ownership.
1:ab2cd11:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ab2cd11:  * (the "License"); you may not use this file except in compliance with
1:ab2cd11:  * the License.  You may obtain a copy of the License at
1:ab2cd11:  *
1:ab2cd11:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ab2cd11:  *
1:ab2cd11:  * Unless required by applicable law or agreed to in writing, software
1:ab2cd11:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab2cd11:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab2cd11:  * See the License for the specific language governing permissions and
1:ab2cd11:  * limitations under the License.
1:ab2cd11:  */
1:ab2cd11: package org.apache.activemq;
1:ab2cd11: 
1:ab2cd11: import javax.jms.ConnectionFactory;
1:004be56: import javax.jms.Session;
1:004be56: 
1:ab2cd11: import junit.framework.Test;
1:ab2cd11: 
1:ab2cd11: /*
1:ab2cd11:  * allow an XA session to be used as an auto ack session when no XA transaction
1:ab2cd11:  * https://issues.apache.org/activemq/browse/AMQ-2659
1:ab2cd11:  */
1:ab2cd11: public class JMSXAConsumerTest extends JMSConsumerTest {
1:ab2cd11: 
1:ab2cd11:     public static Test suite() {
1:ab2cd11:         return suite(JMSXAConsumerTest.class);
1:ab2cd11:     }
1:ab2cd11: 
1:ab2cd11:     @Override
1:ab2cd11:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:004be56:         ActiveMQXAConnectionFactory activeMQXAConnectionFactory = new ActiveMQXAConnectionFactory("vm://localhost?jms.xaAckMode=1");
1:004be56:         activeMQXAConnectionFactory.setXaAckMode(Session.AUTO_ACKNOWLEDGE);
1:004be56:         return activeMQXAConnectionFactory;
1:ab2cd11:     }
1:ab2cd11: 
1:ab2cd11:     // some tests use transactions, these will not work unless an XA transaction is in place
1:ab2cd11:     // slip these
1:ab2cd11:     public void testPrefetch1MessageNotDispatched() throws Exception {
1:ab2cd11:     }
1:ab2cd11: 
1:ab2cd11:     public void testRedispatchOfUncommittedTx() throws Exception {
1:ab2cd11:     }
1:ab2cd11: 
1:ab2cd11:     public void testRedispatchOfRolledbackTx() throws Exception {
1:ab2cd11:     }
1:ab2cd11: 
1:ab2cd11:     public void testMessageListenerOnMessageCloseUnackedWithPrefetch1StayInQueue() throws Exception {
1:ab2cd11:     }
1:e91f5c8: 
1:e91f5c8:     // needs client ack, xa is auto ack if no transaction
1:e91f5c8:     public void testExceptionOnClientAckAfterConsumerClose() throws Exception {
1:e91f5c8:     }
1:41a1007: 
1:41a1007:     public void testReceiveTopicWithPrefetch1() throws Exception {
1:41a1007:     }
1:41a1007: 
1:41a1007:     public void testReceiveQueueWithPrefetch1() throws Exception {
1:41a1007:     }
1:ab2cd11: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:004be56
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQXAConnectionFactory activeMQXAConnectionFactory = new ActiveMQXAConnectionFactory("vm://localhost?jms.xaAckMode=1");
1:         activeMQXAConnectionFactory.setXaAckMode(Session.AUTO_ACKNOWLEDGE);
1:         return activeMQXAConnectionFactory;
commit:41a1007
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testReceiveTopicWithPrefetch1() throws Exception {
1:     }
1: 
1:     public void testReceiveQueueWithPrefetch1() throws Exception {
1:     }
commit:e91f5c8
/////////////////////////////////////////////////////////////////////////
1: 
1:     // needs client ack, xa is auto ack if no transaction
1:     public void testExceptionOnClientAckAfterConsumerClose() throws Exception {
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:ab2cd11
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.ConnectionFactory;
1: import junit.framework.Test;
1: 
1: /*
1:  * allow an XA session to be used as an auto ack session when no XA transaction
1:  * https://issues.apache.org/activemq/browse/AMQ-2659
1:  */
1: public class JMSXAConsumerTest extends JMSConsumerTest {
1: 
1:     public static Test suite() {
1:         return suite(JMSXAConsumerTest.class);
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
0:         return new ActiveMQXAConnectionFactory("vm://localhost");
1:     }
1: 
1:     // some tests use transactions, these will not work unless an XA transaction is in place
1:     // slip these
1:     public void testPrefetch1MessageNotDispatched() throws Exception {
1:     }
1: 
1:     public void testRedispatchOfUncommittedTx() throws Exception {
1:     }
1: 
1:     public void testRedispatchOfRolledbackTx() throws Exception {
1:     }
1: 
1:     public void testMessageListenerOnMessageCloseUnackedWithPrefetch1StayInQueue() throws Exception {
1:     }
1: }
============================================================================