1:4f108ce: /**
1:4f108ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f108ce:  * contributor license agreements.  See the NOTICE file distributed with
1:4f108ce:  * this work for additional information regarding copyright ownership.
1:4f108ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f108ce:  * (the "License"); you may not use this file except in compliance with
1:4f108ce:  * the License.  You may obtain a copy of the License at
1:4f108ce:  *
1:4f108ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f108ce:  *
1:4f108ce:  * Unless required by applicable law or agreed to in writing, software
1:4f108ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f108ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f108ce:  * See the License for the specific language governing permissions and
1:4f108ce:  * limitations under the License.
1:4f108ce:  */
1:b66559e: package org.apache.activemq.jms.pool.bugs;
3:858ab26: 
1:858ab26: import static org.junit.Assert.fail;
1:858ab26: 
1:858ab26: import java.util.concurrent.CountDownLatch;
1:858ab26: import java.util.concurrent.TimeUnit;
1:858ab26: import java.util.concurrent.atomic.AtomicBoolean;
1:858ab26: 
1:858ab26: import javax.jms.JMSException;
1:858ab26: 
1:b66559e: import org.apache.activemq.ActiveMQConnectionFactory;
1:858ab26: import org.apache.activemq.broker.BrokerService;
1:e6597c4: import org.apache.activemq.jms.pool.JmsPoolTestSupport;
1:b66559e: import org.apache.activemq.jms.pool.PooledConnection;
1:b66559e: import org.apache.activemq.jms.pool.PooledConnectionFactory;
1:858ab26: import org.junit.Before;
1:858ab26: import org.junit.Test;
1:858ab26: import org.slf4j.Logger;
1:858ab26: import org.slf4j.LoggerFactory;
1:858ab26: 
1:e6597c4: public class AMQ4441Test extends JmsPoolTestSupport {
1:858ab26: 
1:858ab26:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4441Test.class);
1:858ab26: 
1:e6597c4:     @Override
1:858ab26:     @Before
1:858ab26:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setDeleteAllMessagesOnStartup(true);
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         brokerService.start();
1:e6597c4:         brokerService.waitUntilStarted();
2:858ab26:     }
1:858ab26: 
1:e6597c4:     @Test(timeout = 120000)
1:858ab26:     public void demo() throws JMSException, InterruptedException {
1:858ab26:         final CountDownLatch latch = new CountDownLatch(1);
1:858ab26:         final AtomicBoolean done = new AtomicBoolean(false);
1:b66559e:         final PooledConnectionFactory pooled = new PooledConnectionFactory();
1:b66559e:         pooled.setConnectionFactory(new ActiveMQConnectionFactory("vm://localhost?create=false"));
1:858ab26: 
1:858ab26:         pooled.setMaxConnections(2);
1:858ab26:         pooled.setExpiryTimeout(10L);
1:b66559e:         //pooled.start();
1:858ab26:         Thread[] threads = new Thread[10];
1:858ab26:         for (int i = 0; i < threads.length; i++) {
1:858ab26:             threads[i] = new Thread(new Runnable() {
1:858ab26:                 @Override
1:858ab26:                 public void run() {
1:858ab26:                     while (!done.get() && latch.getCount() > 0) {
1:858ab26:                         try {
1:858ab26:                             final PooledConnection pooledConnection = (PooledConnection) pooled.createConnection();
1:858ab26:                             if (pooledConnection.getConnection() == null) {
1:858ab26:                                 LOG.info("Found broken connection.");
1:858ab26:                                 latch.countDown();
1:858ab26:                             }
1:858ab26:                             pooledConnection.close();
1:858ab26:                         } catch (JMSException e) {
1:858ab26:                             LOG.warn("Caught Exception", e);
1:858ab26:                         }
1:858ab26:                     }
1:858ab26:                 }
1:858ab26:             });
1:858ab26:         }
1:e6597c4: 
1:858ab26:         for (Thread thread : threads) {
1:858ab26:             thread.start();
1:858ab26:         }
1:858ab26: 
1:e6597c4:         if (latch.await(20, TimeUnit.SECONDS)) {
1:858ab26:             fail("A thread obtained broken connection");
1:858ab26:         }
1:858ab26: 
1:858ab26:         done.set(true);
1:858ab26:         for (Thread thread : threads) {
1:858ab26:             thread.join();
1:858ab26:         }
1:858ab26:     }
1:858ab26: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jms.pool.JmsPoolTestSupport;
1: public class AMQ4441Test extends JmsPoolTestSupport {
1:     @Override
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     @Test(timeout = 120000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (latch.await(20, TimeUnit.SECONDS)) {
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:4f108ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool.bugs;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.jms.pool.PooledConnection;
1: import org.apache.activemq.jms.pool.PooledConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         final PooledConnectionFactory pooled = new PooledConnectionFactory();
1:         pooled.setConnectionFactory(new ActiveMQConnectionFactory("vm://localhost?create=false"));
1:         //pooled.start();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:858ab26
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.pool.bugs;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.pool.PooledConnection;
0: import org.apache.activemq.pool.PooledConnectionFactory;
0: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class AMQ4441Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4441Test.class);
0:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
0:         broker.start();
0:         broker.waitUntilStarted();
1:     }
1: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
0:     @Test(timeout=120000)
1:     public void demo() throws JMSException, InterruptedException {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final AtomicBoolean done = new AtomicBoolean(false);
0:         final PooledConnectionFactory pooled = new PooledConnectionFactory("vm://localhost?create=false");
1: 
1:         pooled.setMaxConnections(2);
1:         pooled.setExpiryTimeout(10L);
0:         pooled.start();
1:         Thread[] threads = new Thread[10];
1:         for (int i = 0; i < threads.length; i++) {
1:             threads[i] = new Thread(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     while (!done.get() && latch.getCount() > 0) {
1:                         try {
1:                             final PooledConnection pooledConnection = (PooledConnection) pooled.createConnection();
1:                             if (pooledConnection.getConnection() == null) {
1:                                 LOG.info("Found broken connection.");
1:                                 latch.countDown();
1:                             }
1:                             pooledConnection.close();
1:                         } catch (JMSException e) {
1:                             LOG.warn("Caught Exception", e);
1:                         }
1:                     }
1:                 }
1:             });
1:         }
1:         for (Thread thread : threads) {
1:             thread.start();
1:         }
1: 
0:         if (latch.await(1, TimeUnit.MINUTES)) {
1:             fail("A thread obtained broken connection");
1:         }
1: 
1:         done.set(true);
1:         for (Thread thread : threads) {
1:             thread.join();
1:         }
1:     }
1: 
1: }
============================================================================