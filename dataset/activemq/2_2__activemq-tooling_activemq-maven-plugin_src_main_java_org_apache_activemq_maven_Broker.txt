1:a50f011: /**
1:a50f011:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a50f011:  * contributor license agreements.  See the NOTICE file distributed with
1:a50f011:  * this work for additional information regarding copyright ownership.
1:a50f011:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a50f011:  * (the "License"); you may not use this file except in compliance with
1:a50f011:  * the License.  You may obtain a copy of the License at
1:a50f011:  *
1:a50f011:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a50f011:  *
1:a50f011:  * Unless required by applicable law or agreed to in writing, software
1:a50f011:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a50f011:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a50f011:  * See the License for the specific language governing permissions and
1:a50f011:  * limitations under the License.
1:a50f011:  */
1:a50f011: package org.apache.activemq.maven;
2:a50f011: 
1:a50f011: import org.apache.activemq.broker.BrokerFactory;
1:a50f011: import org.apache.activemq.broker.BrokerService;
1:a50f011: import org.apache.maven.plugin.MojoExecutionException;
1:a50f011: 
1:c0eae1b: /**
1:c0eae1b:  * Singleton facade between Maven and one ActiveMQ broker.
1:c0eae1b:  */
1:a50f011: public class Broker {
1:a50f011: 
1:a50f011:     private static BrokerService broker;
1:a50f011: 
1:a50f011:     private static boolean[] shutdown;
1:a50f011: 
1:a50f011:     private static Thread shutdownThread;
1:a50f011: 
1:a50f011:     public static void start(boolean fork, String configUri) throws MojoExecutionException {
1:a50f011: 
1:a50f011:         if (broker != null) {
1:a50f011:             throw new MojoExecutionException("A local broker is already running");
1:a50f011:         }
1:a50f011: 
1:a50f011:         try {
1:a50f011:             broker = BrokerFactory.createBroker(configUri);
1:a50f011:             if (fork) {
1:a50f011:                 new Thread(new Runnable() {
1:a50f011:                     @Override
1:a50f011:                     public void run() {
1:a50f011:                         try {
1:a50f011:                             broker.start();
1:a50f011:                             waitForShutdown();
1:a50f011:                         } catch (Exception e) {
1:a50f011:                             e.printStackTrace();
1:a50f011:                         }
1:a50f011:                     }
1:a50f011:                 }).start();
1:a50f011:             } else {
1:a50f011:                 broker.start();
1:a50f011:                 waitForShutdown();
1:a50f011:             }
1:a50f011:         } catch (Exception e) {
1:a50f011:             throw new MojoExecutionException("Failed to start the ActiveMQ Broker", e);
1:a50f011:         }
1:a50f011:     }
1:a50f011: 
1:a50f011:     public static void stop() throws MojoExecutionException {
1:a50f011: 
1:a50f011:         if (broker == null) {
1:a50f011:             throw new MojoExecutionException("The local broker is not running");
1:a50f011:         }
1:a50f011: 
1:a50f011:         try {
1:a50f011:             broker.stop();
1:a50f011:             broker.waitUntilStopped();
1:a50f011:             broker = null;
1:c0eae1b: 
1:a50f011:             Runtime.getRuntime().removeShutdownHook(shutdownThread);
1:a50f011: 
1:a50f011:             // Terminate the shutdown hook thread
1:a50f011:             synchronized (shutdown) {
1:a50f011:                 shutdown[0] = true;
1:a50f011:                 shutdown.notify();
1:a50f011:             }
1:a50f011:         } catch (Exception e) {
1:a50f011:             throw new MojoExecutionException("Failed to stop the ActiveMQ Broker", e);
1:a50f011:         }
1:a50f011:     }
1:a50f011: 
1:c0eae1b:     /**
1:a50f011:      * Wait for a shutdown invocation elsewhere
1:a50f011:      *
1:a50f011:      * @throws Exception
1:a50f011:      */
1:a50f011:     protected static void waitForShutdown() throws Exception {
1:a50f011:         shutdown = new boolean[] { false };
1:a50f011: 
1:a50f011:         shutdownThread = new Thread() {
1:a50f011:             @Override
1:a50f011:             public void run() {
1:a50f011:                 synchronized (shutdown) {
1:a50f011:                     shutdown[0] = true;
1:a50f011:                     shutdown.notify();
1:a50f011:                 }
1:a50f011:             }
1:a50f011:         };
1:a50f011: 
1:a50f011:         Runtime.getRuntime().addShutdownHook(shutdownThread);
1:a50f011: 
1:a50f011:         // Wait for any shutdown event
1:a50f011:         synchronized (shutdown) {
1:a50f011:             while (!shutdown[0]) {
1:a50f011:                 try {
1:a50f011:                     shutdown.wait();
1:a50f011:                 } catch (InterruptedException e) {
1:a50f011:                 }
1:a50f011:             }
1:a50f011:         }
1:a50f011: 
1:a50f011:         // Stop broker
1:a50f011:         if (broker != null) {
1:a50f011:             broker.stop();
1:a50f011:         }
1:a50f011:     }
1:a50f011: 
1:a50f011:     /**
1:c0eae1b:      * Return the broker service created.
1:c0eae1b:      */
1:c0eae1b:     public static BrokerService getBroker() {
1:c0eae1b:         return broker;
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Override the default creation of the broker service.  Primarily added for testing purposes.
1:c0eae1b:      *
1:c0eae1b:      * @param broker
1:c0eae1b:      */
1:c0eae1b:     public static void setBroker(BrokerService broker) {
1:c0eae1b:         Broker.broker = broker;
1:c0eae1b:     }
1:a50f011: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Singleton facade between Maven and one ActiveMQ broker.
1:  */
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Return the broker service created.
1:      */
1:     public static BrokerService getBroker() {
1:         return broker;
1:     }
1: 
1:     /**
1:      * Override the default creation of the broker service.  Primarily added for testing purposes.
1:      *
1:      * @param broker
1:      */
1:     public static void setBroker(BrokerService broker) {
1:         Broker.broker = broker;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a50f011
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
0: import java.util.Properties;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.maven.plugin.MojoExecutionException;
1: 
1: public class Broker {
1: 
1:     private static BrokerService broker;
1: 
1:     private static boolean[] shutdown;
1: 
1:     private static Thread shutdownThread;
1: 
1:     public static void start(boolean fork, String configUri) throws MojoExecutionException {
1: 
1:         if (broker != null) {
1:             throw new MojoExecutionException("A local broker is already running");
1:         }
1: 
1:         try {
1:             broker = BrokerFactory.createBroker(configUri);
1:             if (fork) {
1:                 new Thread(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             broker.start();
1:                             waitForShutdown();
1:                         } catch (Exception e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1:                 }).start();
1:             } else {
1:                 broker.start();
1:                 waitForShutdown();
1:             }
1:         } catch (Exception e) {
1:             throw new MojoExecutionException("Failed to start the ActiveMQ Broker", e);
1:         }
1:     }
1: 
1:     public static void stop() throws MojoExecutionException {
1: 
1:         if (broker == null) {
1:             throw new MojoExecutionException("The local broker is not running");
1:         }
1: 
1:         try {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1: 
1:             Runtime.getRuntime().removeShutdownHook(shutdownThread);
1: 
1:             // Terminate the shutdown hook thread
1:             synchronized (shutdown) {
1:                 shutdown[0] = true;
1:                 shutdown.notify();
1:             }
1:         } catch (Exception e) {
1:             throw new MojoExecutionException("Failed to stop the ActiveMQ Broker", e);
1:         }
1:     }
1: 
1:     /**
1:      * Wait for a shutdown invocation elsewhere
1:      *
1:      * @throws Exception
1:      */
1:     protected static void waitForShutdown() throws Exception {
1:         shutdown = new boolean[] { false };
1: 
1:         shutdownThread = new Thread() {
1:             @Override
1:             public void run() {
1:                 synchronized (shutdown) {
1:                     shutdown[0] = true;
1:                     shutdown.notify();
1:                 }
1:             }
1:         };
1: 
1:         Runtime.getRuntime().addShutdownHook(shutdownThread);
1: 
1:         // Wait for any shutdown event
1:         synchronized (shutdown) {
1:             while (!shutdown[0]) {
1:                 try {
1:                     shutdown.wait();
1:                 } catch (InterruptedException e) {
1:                 }
1:             }
1:         }
1: 
1:         // Stop broker
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: }
============================================================================