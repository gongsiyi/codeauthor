1:d4133c4: /**
1:d4133c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4133c4:  * contributor license agreements.  See the NOTICE file distributed with
1:d4133c4:  * this work for additional information regarding copyright ownership.
1:d4133c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4133c4:  * (the "License"); you may not use this file except in compliance with
1:d4133c4:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:d4133c4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d4133c4:  * Unless required by applicable law or agreed to in writing, software
1:d4133c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4133c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4133c4:  * See the License for the specific language governing permissions and
1:d4133c4:  * limitations under the License.
1:d4133c4:  */
1:d4133c4: package org.apache.activemq.transport.stomp;
1:584d52c: 
1:a9e7e94: import java.io.ByteArrayInputStream;
1:d4133c4: import java.io.DataOutputStream;
1:a9e7e94: import java.io.EOFException;
1:d4133c4: import java.io.IOException;
1:d4133c4: import java.net.Socket;
1:d4133c4: import java.net.URI;
1:d4133c4: import java.net.UnknownHostException;
1:0e8eadb: import java.nio.ByteBuffer;
1:0e8eadb: import java.nio.channels.SelectionKey;
1:d4133c4: import java.nio.channels.SocketChannel;
1:f8a601a: 
1:d4133c4: import javax.net.SocketFactory;
1:f8a601a: 
1:d4133c4: import org.apache.activemq.transport.Transport;
1:d4133c4: import org.apache.activemq.transport.nio.NIOOutputStream;
1:0e8eadb: import org.apache.activemq.transport.nio.SelectorManager;
1:0e8eadb: import org.apache.activemq.transport.nio.SelectorSelection;
1:d4133c4: import org.apache.activemq.transport.tcp.TcpTransport;
1:0e8eadb: import org.apache.activemq.util.IOExceptionSupport;
1:0e8eadb: import org.apache.activemq.util.ServiceStopper;
1:d4133c4: import org.apache.activemq.wireformat.WireFormat;
1:584d52c: 
1:d4133c4: /**
1:d4133c4:  * An implementation of the {@link Transport} interface for using Stomp over NIO
1:d4133c4:  */
1:d4133c4: public class StompNIOTransport extends TcpTransport {
1:584d52c: 
1:d4133c4:     private SocketChannel channel;
1:0e8eadb:     private SelectorSelection selection;
1:f8a601a: 
1:a9e7e94:     private ByteBuffer inputBuffer;
1:036f2a8:     StompCodec codec;
1:584d52c: 
1:d4133c4:     public StompNIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:d4133c4:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:584d52c:     }
1:f8a601a: 
1:d4133c4:     public StompNIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:d4133c4:         super(wireFormat, socket);
1:584d52c:     }
1:f8a601a: 
1:04ee70a:     public StompNIOTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:8d42343:     @Override
1:d4133c4:     protected void initializeStreams() throws IOException {
1:d4133c4:         channel = socket.getChannel();
1:d4133c4:         channel.configureBlocking(false);
1:f8a601a: 
1:0e8eadb:         // listen for events telling us when the socket is readable.
1:0e8eadb:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:8d42343:             @Override
1:0e8eadb:             public void onSelect(SelectorSelection selection) {
1:0e8eadb:                 serviceRead();
1:584d52c:             }
1:f8a601a: 
1:8d42343:             @Override
1:0e8eadb:             public void onError(SelectorSelection selection, Throwable error) {
1:0e8eadb:                 if (error instanceof IOException) {
1:0e8eadb:                     onException((IOException)error);
5:584d52c:                 } else {
1:0e8eadb:                     onException(IOExceptionSupport.create(error));
1:584d52c:                 }
1:584d52c:             }
1:0e8eadb:         });
1:f8a601a: 
1:a9e7e94:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:2189100:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
1:2189100:         this.dataOut = new DataOutputStream(outPutStream);
1:2189100:         this.buffOut = outPutStream;
1:036f2a8:         codec = new StompCodec(this);
1:04ee70a: 
1:04ee70a:         try {
1:04ee70a:             if (initBuffer != null) {
1:04ee70a:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:04ee70a:             }
1:04ee70a:         } catch (IOException e) {
1:04ee70a:             onException(e);
1:04ee70a:         } catch (Throwable e) {
1:04ee70a:             onException(IOExceptionSupport.create(e));
1:04ee70a:         }
1:584d52c:     }
1:f8a601a: 
1:0e8eadb:     private void serviceRead() {
1:0e8eadb:         try {
1:a9e7e94:            while (true) {
1:a9e7e94:                // read channel
1:a9e7e94:                int readSize = channel.read(inputBuffer);
1:04ee70a: 
1:a9e7e94:                // channel is closed, cleanup
1:a9e7e94:                if (readSize == -1) {
1:a9e7e94:                    onException(new EOFException());
1:db68273:                    selection.close();
1:a9e7e94:                    break;
1:584d52c:                }
1:78265ea: 
1:a9e7e94:                // nothing more to read, break
1:a9e7e94:                if (readSize == 0) {
1:a9e7e94:                    break;
1:db68273:                }
1:78265ea: 
1:04ee70a:                processBuffer(inputBuffer, readSize);
1:a9e7e94:            }
1:0e8eadb:         } catch (IOException e) {
1:f8a601a:             onException(e);
1:0e8eadb:         } catch (Throwable e) {
1:0e8eadb:             onException(IOExceptionSupport.create(e));
1:a9e7e94:         }
1:a9e7e94:     }
1:f8a601a: 
1:04ee70a:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:04ee70a:         receiveCounter += readSize;
1:04ee70a: 
1:04ee70a:         buffer.flip();
1:04ee70a: 
1:04ee70a:         ByteArrayInputStream input = new ByteArrayInputStream(buffer.array());
1:04ee70a:         codec.parse(input, readSize);
1:04ee70a: 
1:04ee70a:         // clear the buffer
1:04ee70a:         buffer.clear();
1:04ee70a:     }
1:04ee70a: 
1:8d42343:     @Override
1:0e8eadb:     protected void doStart() throws Exception {
1:0e8eadb:         connect();
1:0e8eadb:         selection.setInterestOps(SelectionKey.OP_READ);
1:0e8eadb:         selection.enable();
1:a9e7e94:     }
1:f8a601a: 
1:8d42343:     @Override
1:0e8eadb:     protected void doStop(ServiceStopper stopper) throws Exception {
1:db68273:         try {
1:08ae777:             if (selection != null) {
1:08ae777:                 selection.close();
1:08ae777:             }
1:08ae777:         } finally {
1:08ae777:             super.doStop(stopper);
1:a9e7e94:         }
1:a9e7e94:     }
8:0e8eadb: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     public StompNIOTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:         super(wireFormat, socket, initBuffer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             if (initBuffer != null) {
1:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                processBuffer(inputBuffer, readSize);
/////////////////////////////////////////////////////////////////////////
1:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:         receiveCounter += readSize;
1: 
1:         buffer.flip();
1: 
1:         ByteArrayInputStream input = new ByteArrayInputStream(buffer.array());
1:         codec.parse(input, readSize);
1: 
1:         // clear the buffer
1:         buffer.clear();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8d42343
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:78265ea
/////////////////////////////////////////////////////////////////////////
1: 
0:                receiveCounter += readSize;
1: 
/////////////////////////////////////////////////////////////////////////
commit:08ae777
/////////////////////////////////////////////////////////////////////////
1:             if (selection != null) {
1:                 selection.close();
1:             }
1:         } finally {
1:             super.doStop(stopper);
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:             e.printStackTrace();
commit:f8a601a
/////////////////////////////////////////////////////////////////////////
0:  *
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                                readLength = 0;
1: 
1: 
1:             onException(e);
1: 
0:         contentLength = -1;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
1:     StompCodec codec;
/////////////////////////////////////////////////////////////////////////
1:         codec = new StompCodec(this);
/////////////////////////////////////////////////////////////////////////
0:                codec.parse(input, readSize);
/////////////////////////////////////////////////////////////////////////
commit:584d52c
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.DataByteArrayInputStream;
/////////////////////////////////////////////////////////////////////////
0:     boolean processedHeaders = false;
0:     String action;
0:     HashMap<String, String> headers;
0:     int contentLength = -1;
0:     int readLength = 0;
/////////////////////////////////////////////////////////////////////////
0:                    if (!processedHeaders && previousByte == 0 && b == 0) {
1:                    
0:                    if (!processedHeaders) {
0:                        currentCommand.write(b);
0:                        // end of headers section, parse action and header
0:                        if (previousByte == '\n' && b == '\n') {
0:                            if (wireFormat instanceof StompWireFormat) {
0:                                DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
0:                                action = ((StompWireFormat)wireFormat).parseAction(data);
0:                                headers = ((StompWireFormat)wireFormat).parseHeaders(data);
0:                                String contentLengthHeader = headers.get(Stomp.Headers.CONTENT_LENGTH);
0:                                if (contentLengthHeader != null) {
0:                                    contentLength = ((StompWireFormat)wireFormat).parseContentLength(contentLengthHeader);
1:                                } else {
0:                                    contentLength = -1;
1:                                }
1:                            }
0:                            processedHeaders = true;
0:                            currentCommand.reset();
1:                        }
1:                    } else {
1:                        
0:                        if (contentLength == -1) {
0:                            // end of command reached, unmarshal
0:                            if (b == 0) {
0:                                processCommand();
1:                            } else {
0:                                currentCommand.write(b);
1:                            }
1:                        } else {
0:                            // read desired content length
0:                            if (readLength++ == contentLength) {
0:                                processCommand();
1:                            } else {
0:                                currentCommand.write(b);
1:                            }
1:                        }
1:                    
/////////////////////////////////////////////////////////////////////////
1:     
0:     private void processCommand() throws Exception {
0:         StompFrame frame = new StompFrame(action, headers, currentCommand.toByteArray());
0:         doConsume(frame);
0:         processedHeaders = false;
0:         currentCommand.reset();
0:         contentLength = -1;       
1:     }
commit:3cbe3f1
/////////////////////////////////////////////////////////////////////////
0:         	e.printStackTrace();
commit:db68273
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             onException(e);  
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             selection.close();
0:         } catch (Exception e) {
1:         }
commit:a9e7e94
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.EOFException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.nio.NIOInputStream;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.ByteSequence;
/////////////////////////////////////////////////////////////////////////
0:     
1:     private ByteBuffer inputBuffer;
0:     ByteArrayOutputStream currentCommand = new ByteArrayOutputStream();
0:     int previousByte = -1;
/////////////////////////////////////////////////////////////////////////
1:         inputBuffer = ByteBuffer.allocate(8 * 1024);
0:     
0:             
1:            while (true) {
1:                // read channel
1:                int readSize = channel.read(inputBuffer);
1:                // channel is closed, cleanup
1:                if (readSize == -1) {
1:                    onException(new EOFException());
0:                    selection.close();
1:                    break;
1:                }
1:                // nothing more to read, break
1:                if (readSize == 0) {
1:                    break;
1:                }
0:                
0:                inputBuffer.flip();
0:                
0:                int b;
0:                ByteArrayInputStream input = new ByteArrayInputStream(inputBuffer.array());
0:                
0:                int i = 0;
0:                while(i++ < readSize) {
0:                    b = input.read();
0:                    // skip repeating nulls
0:                    if (previousByte == 0 && b == 0) {
0:                        continue;
1:                    }
0:                    currentCommand.write(b);
0:                    // end of command reached, unmarshal
0:                    if (b == 0) {
0:                        Object command = wireFormat.unmarshal(new ByteSequence(currentCommand.toByteArray()));
0:                        doConsume((Command)command);
0:                        currentCommand.reset();
1:                    }
0:                    previousByte = b;
1:                }
0:                // clear the buffer
0:                inputBuffer.clear();
0:                
1:            }
0:             selection.close();
commit:0e8eadb
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
1: import java.nio.channels.SelectionKey;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.nio.SelectorManager;
1: import org.apache.activemq.transport.nio.SelectorSelection;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
1:     private SelectorSelection selection;
/////////////////////////////////////////////////////////////////////////
1:         // listen for events telling us when the socket is readable.
1:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:             public void onSelect(SelectorSelection selection) {
1:                 serviceRead();
1:             }
0: 
1:             public void onError(SelectorSelection selection, Throwable error) {
1:                 if (error instanceof IOException) {
1:                     onException((IOException)error);
0:                 } else {
1:                     onException(IOExceptionSupport.create(error));
1:                 }
1:             }
1:         });
0: 
0:         this.dataOut = new DataOutputStream(new NIOOutputStream(channel, 8 * 1024));
1:     private void serviceRead() {
1:         try {
0:             DataInputStream in = new DataInputStream(new NIOBufferedInputStream(channel, 8 * 1024));
0:             while (true) {
0:                 Object command = wireFormat.unmarshal(in);
0:                 doConsume((Command)command);
1:             }
0: 
1:         } catch (IOException e) {
0:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
0: 
1:     protected void doStart() throws Exception {
1:         connect();
1:         selection.setInterestOps(SelectionKey.OP_READ);
1:         selection.enable();
1:     }
0: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
0:         selection.disable();
0:         super.doStop(stopper);
1:     }
commit:d4133c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
0: 
0: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.channels.SocketChannel;
0: 
1: import javax.net.SocketFactory;
0: 
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.nio.NIOBufferedInputStream;
1: import org.apache.activemq.transport.nio.NIOOutputStream;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.wireformat.WireFormat;
0: 
1: /**
1:  * An implementation of the {@link Transport} interface for using Stomp over NIO
0:  * 
0:  * @version $Revision$
1:  */
1: public class StompNIOTransport extends TcpTransport {
0: 
1:     private SocketChannel channel;
0: 
1:     public StompNIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
0:     }
0: 
1:     public StompNIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:         super(wireFormat, socket);
0:     }
0: 
1:     protected void initializeStreams() throws IOException {
1:         channel = socket.getChannel();
1:         channel.configureBlocking(false);
0: 
0:         this.dataOut = new DataOutputStream(new NIOOutputStream(channel, 16 * 1024));
0:         this.dataIn = new DataInputStream(new NIOBufferedInputStream(channel, 8 * 1024));
0:     }
0: 
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2189100
/////////////////////////////////////////////////////////////////////////
1:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
1:         this.dataOut = new DataOutputStream(outPutStream);
1:         this.buffOut = outPutStream;
============================================================================