2:4098942: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:4098942:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:4098942:  * Unless required by applicable law or agreed to in writing, software
1:4098942:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4098942:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4098942:  * See the License for the specific language governing permissions and
1:4098942:  * limitations under the License.
2:4098942:  */
1:4098942: package org.apache.activemq.broker;
40:4098942: 
1:a414c20: import java.net.URI;
1:a414c20: import java.util.Collections;
1:a414c20: import java.util.Map;
1:a414c20: import java.util.Set;
1:1a5ad28: import java.util.concurrent.ThreadPoolExecutor;
1:0bb9013: 
1:4098942: import org.apache.activemq.broker.region.Destination;
1:a414c20: import org.apache.activemq.broker.region.MessageReference;
1:0def1d4: import org.apache.activemq.broker.region.Subscription;
1:cc81680: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:4098942: import org.apache.activemq.command.ActiveMQDestination;
1:4098942: import org.apache.activemq.command.BrokerId;
1:4098942: import org.apache.activemq.command.BrokerInfo;
1:4098942: import org.apache.activemq.command.ConnectionInfo;
1:8d3ca90: import org.apache.activemq.command.ConsumerControl;
1:4098942: import org.apache.activemq.command.ConsumerInfo;
1:a9c49a7: import org.apache.activemq.command.DestinationInfo;
1:4098942: import org.apache.activemq.command.Message;
1:4098942: import org.apache.activemq.command.MessageAck;
1:4098942: import org.apache.activemq.command.MessageDispatch;
1:4098942: import org.apache.activemq.command.MessageDispatchNotification;
1:9d671b7: import org.apache.activemq.command.MessagePull;
1:4098942: import org.apache.activemq.command.ProducerInfo;
1:4098942: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:9d671b7: import org.apache.activemq.command.Response;
1:4098942: import org.apache.activemq.command.SessionInfo;
1:4098942: import org.apache.activemq.command.TransactionId;
1:d5dd937: import org.apache.activemq.store.PListStore;
1:1a5ad28: import org.apache.activemq.thread.Scheduler;
1:cdc2fd3: import org.apache.activemq.usage.Usage;
1:4098942: 
1:4098942: /**
1:4098942:  * Dumb implementation - used to be overriden by listeners
1:0bb9013:  *
1:0bb9013:  *
1:4098942:  */
1:8abb655: public class EmptyBroker implements Broker {
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public BrokerId getBrokerId() {
1:4098942:         return null;
1:4098942:     }
1:cc81680: 
1:cc81680:     @Override
1:8abb655:     public String getBrokerName() {
1:a414c20:         return null;
1:cc81680:     }
1:cc81680: 
1:cc81680:     @Override
1:5076808:     public Broker getAdaptor(Class<?> type) {
1:5076808:         return type.isInstance(this) ? this : null;
1:cc81680:     }
1:55da9bc: 
1:0bb9013:     @Override
1:933eb2f:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
1:5076808:         return Collections.emptyMap();
1:a414c20:     }
1:1a5ad28: 
1:0bb9013:     @Override
1:27b3a7c:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination) {
1:5076808:         return Collections.emptyMap();
1:27b3a7c:     }
1:27b3a7c: 
1:27b3a7c:     @Override
1:5076808:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
1:5076808:         return Collections.emptySet();
1:a414c20:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:8abb655:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:a414c20:     }
1:dfcf776: 
1:0bb9013:     @Override
1:8abb655:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:25a252f:     }
1:a401575: 
1:0bb9013:     @Override
1:8abb655:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:25a252f:     }
1:a414c20: 
1:0bb9013:     @Override
1:8abb655:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:4741136:     }
1:a414c20: 
1:0bb9013:     @Override
1:8abb655:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:3a9299b:     }
1:a414c20: 
1:0bb9013:     @Override
1:8abb655:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:3a9299b:     }
1:83a6eff: 
1:0bb9013:     @Override
1:8abb655:     public Connection[] getClients() throws Exception {
1:25a252f:         return null;
1:7d1e6bc:     }
1:25a252f: 
1:0bb9013:     @Override
1:8abb655:     public ActiveMQDestination[] getDestinations() throws Exception {
1:4741136:         return null;
1:a9c49a7:     }
1:25a252f: 
1:0bb9013:     @Override
1:8abb655:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
1:3a9299b:         return null;
1:a9c49a7:     }
1:4741136: 
1:0bb9013:     @Override
1:8abb655:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:4098942:     }
1:3a9299b: 
1:0bb9013:     @Override
1:8abb655:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:4098942:         return 0;
1:4098942:     }
1:3a9299b: 
1:0bb9013:     @Override
1:8abb655:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:4098942:     }
1:7d1e6bc: 
1:0bb9013:     @Override
1:8abb655:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:4098942:     }
1:ef0734b: 
1:0bb9013:     @Override
1:8abb655:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:4098942:     }
1:a9c49a7: 
1:0bb9013:     @Override
1:204f91f:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean flag) throws Exception {
1:7d1e6bc:         return null;
1:4098942:     }
1:a9c49a7: 
1:0bb9013:     @Override
1:8abb655:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:4098942:     }
1:a9c49a7: 
1:0bb9013:     @Override
1:8abb655:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:4098942:         return null;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:84eb9f8:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:84eb9f8:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void gc() {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void start() throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void stop() throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void addBroker(Connection connection, BrokerInfo info) {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void removeBroker(Connection connection, BrokerInfo info) {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public BrokerInfo[] getPeerBrokerInfos() {
1:4098942:         return null;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:a401575:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:a401575:     }
1:230a86c: 
1:0bb9013:     @Override
1:a401575:     public void postProcessDispatch(MessageDispatch messageDispatch) {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public boolean isStopped() {
1:ef0734b:         return false;
1:ef0734b:     }
1:debd0cc: 
1:0bb9013:     @Override
1:933eb2f:     public Set<ActiveMQDestination> getDurableDestinations() {
1:debd0cc:         return null;
1:debd0cc:     }
1:233b604: 
1:0bb9013:     @Override
1:8abb655:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:233b604:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public boolean isFaultTolerantConfiguration() {
1:233b604:         return false;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public ConnectionContext getAdminConnectionContext() {
1:4098942:         return null;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:8abb655:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
1:4098942:     }
1:230a86c: 
1:0bb9013:     @Override
1:4ee029e:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:4098942:         return null;
1:4098942:     }
1:230a86c: 
1:0bb9013:     @Override
1:ee55abb:     public PListStore getTempDataStore() {
1:4098942:         return null;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:230a86c:     public URI getVmConnectorURI() {
1:4098942:         return null;
1:4098942:     }
1:230a86c: 
1:0bb9013:     @Override
1:230a86c:     public void brokerServiceStarted() {
1:4098942:     }
1:230a86c: 
1:0bb9013:     @Override
1:230a86c:     public BrokerService getBrokerService() {
1:4098942:         return null;
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:a401575:     public boolean isExpired(MessageReference messageReference) {
1:a401575:         return false;
1:a401575:     }
1:230a86c: 
1:0bb9013:     @Override
1:27c1719:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
1:4098942:     }
1:230a86c: 
1:0bb9013:     @Override
1:0bb9013:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
1:708be6d:                                          Subscription subscription, Throwable poisonCause) {
1:0bb9013:         return false;
1:4098942:     }
1:a401575: 
1:0bb9013:     @Override
1:230a86c:     public Broker getRoot() {
1:9d671b7:         return null;
1:230a86c:     }
1:0bb9013: 
1:0bb9013:     @Override
1:dfcf776:     public long getBrokerSequenceId() {
1:dfcf776:         return -1l;
1:cdc2fd3:     }
1:0bb9013: 
1:0bb9013:     @Override
1:db1f6fe:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:5076808:     public void isFull(ConnectionContext context, Destination destination,Usage<?> usage) {
1:dfcf776:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:3e4fc0a:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
1:cdc2fd3:     }
1:cdc2fd3: 
1:0bb9013:     @Override
1:cdc2fd3:     public void slowConsumer(ConnectionContext context,Destination destination, Subscription subs) {
1:cdc2fd3:     }
1:4ee029e: 
1:0bb9013:     @Override
1:5076808:     public void virtualDestinationAdded(ConnectionContext context, VirtualDestination virtualDestination) {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:5076808:     public void virtualDestinationRemoved(ConnectionContext context, VirtualDestination virtualDestination) {
1:4098942:     }
1:4098942: 
1:0bb9013:     @Override
1:0bb9013:     public void nowMasterBroker() {
1:8d3ca90:     }
1:8d3ca90: 
1:0bb9013:     @Override
1:37384a1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
1:663d5db:     }
1:663d5db: 
1:0bb9013:     @Override
1:663d5db:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
1:663d5db:     }
1:663d5db: 
1:0bb9013:     @Override
1:5076808:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:4ee029e:     }
1:4098942: 
1:0bb9013:     @Override
1:55da9bc:     public void reapplyInterceptor() {
1:55da9bc:     }
1:55da9bc: 
1:55da9bc:     @Override
1:1a5ad28:     public Scheduler getScheduler() {
1:1a5ad28:         return null;
1:1a5ad28:     }
1:1a5ad28: 
1:0bb9013:     @Override
1:1a5ad28:     public ThreadPoolExecutor getExecutor() {
1:1a5ad28:         return null;
1:1a5ad28:     }
1:5076808: 
1:4098942: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     public Broker getAdaptor(Class<?> type) {
1:         return type.isInstance(this) ? this : null;
1:         return Collections.emptyMap();
1:         return Collections.emptyMap();
1:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
1:         return Collections.emptySet();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void isFull(ConnectionContext context, Destination destination,Usage<?> usage) {
/////////////////////////////////////////////////////////////////////////
1:     public void virtualDestinationAdded(ConnectionContext context, VirtualDestination virtualDestination) {
1:     public void virtualDestinationRemoved(ConnectionContext context, VirtualDestination virtualDestination) {
/////////////////////////////////////////////////////////////////////////
1:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
/////////////////////////////////////////////////////////////////////////
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
/////////////////////////////////////////////////////////////////////////
0:     public void virtualDestinationAdded(ConnectionContext context,
0:             VirtualDestination virtualDestination) {
1:     }
1: 
1:     @Override
0:     public void virtualDestinationRemoved(ConnectionContext context,
0:             VirtualDestination virtualDestination) {
1:     }
1: 
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
1:     public Map<ActiveMQDestination, Destination> getDestinationMap(ActiveMQDestination destination) {
0:         return Collections.EMPTY_MAP;
1:     }
1: 
1:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
1:     public void reapplyInterceptor() {
1: 
1:     }
1: 
1:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:708be6d
/////////////////////////////////////////////////////////////////////////
1:                                          Subscription subscription, Throwable poisonCause) {
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1:     public void messageExpired(ConnectionContext context, MessageReference message, Subscription subscription) {
0:     public void sendToDeadLetterQueue(ConnectionContext context,
0:                                       MessageReference messageReference,
0:                                       Subscription subscription) {
commit:3e4fc0a
/////////////////////////////////////////////////////////////////////////
1:     public void messageDiscarded(ConnectionContext context, Subscription sub, MessageReference messageReference) {
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerControl;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange,
0:             ConsumerControl control) {     
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0bb9013
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public boolean sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
0:                                          Subscription subscription) {
1:         return false;
1:     @Override
1: 
1:     @Override
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public void nowMasterBroker() {
1:     @Override
1:     @Override
1:     @Override
0:             ConsumerControl control) {
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.PListStore;
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
1:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
/////////////////////////////////////////////////////////////////////////
1:     public Set<ActiveMQDestination> getDurableDestinations() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public URI getVmConnectorURI() {
1: 
1:     public void brokerServiceStarted() {
1: 
1:     public BrokerService getBrokerService() {
1: 
0:     public void messageExpired(ConnectionContext context, MessageReference message) {
0:     public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference) {
1: 
1:     public Broker getRoot() {
1:     }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void addConnection(ConnectionContext context,ConnectionInfo info) throws Exception{
0:     public void removeConnection(ConnectionContext context,ConnectionInfo info,Throwable error) throws Exception{
0:     public void addSession(ConnectionContext context,SessionInfo info) throws Exception{
0:     public void removeSession(ConnectionContext context,SessionInfo info) throws Exception{
0:     public void addProducer(ConnectionContext context,ProducerInfo info) throws Exception{
0:     public void removeProducer(ConnectionContext context,ProducerInfo info) throws Exception{
0:     public Connection[] getClients() throws Exception{
0:     public ActiveMQDestination[] getDestinations() throws Exception{
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception{
0:     public void beginTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:     public int prepareTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:     public void rollbackTransaction(ConnectionContext context,TransactionId xid) throws Exception{
0:     public void commitTransaction(ConnectionContext context,TransactionId xid,boolean onePhase) throws Exception{
0:     public void forgetTransaction(ConnectionContext context,TransactionId transactionId) throws Exception{
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Exception{
0:     public void removeDestination(ConnectionContext context,ActiveMQDestination destination,long timeout) throws Exception{
0:     public void addConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:     public void removeConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:     public void removeSubscription(ConnectionContext context,RemoveSubscriptionInfo info) throws Exception{
0:     public void send(ConnectionContext context,Message message) throws Exception{
0:     public void acknowledge(ConnectionContext context,MessageAck ack) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception{
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:37384a1
/////////////////////////////////////////////////////////////////////////
1:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex, String remoteIp) {
commit:bd49b52
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo, boolean createdByDuplex) {
commit:663d5db
/////////////////////////////////////////////////////////////////////////
0:     public void networkBridgeStarted(BrokerInfo brokerInfo) {
1:     }
1: 
1:     public void networkBridgeStopped(BrokerInfo brokerInfo) {
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ThreadPoolExecutor;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.thread.Scheduler;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Scheduler getScheduler() {
1:         return null;
1:     }
1: 
1:     public ThreadPoolExecutor getExecutor() {
1:         return null;
1:     }
commit:204f91f
/////////////////////////////////////////////////////////////////////////
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean flag) throws Exception {
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.plist.PListStore;
/////////////////////////////////////////////////////////////////////////
1:     public PListStore getTempDataStore() {
commit:4ee029e
/////////////////////////////////////////////////////////////////////////
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void nowMasterBroker() {        
1:     }
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
1:     }
1: 
0:     public void isFull(ConnectionContext context, Destination destination,Usage usage) {
1:     }
1: 
1:     public void messageConsumed(ConnectionContext context,MessageReference messageReference) {
1:     }
1: 
1:     public void messageDelivered(ConnectionContext context,MessageReference messageReference) {
1:     }
1: 
0:     public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
1:     }
1: 
1:     public void slowConsumer(ConnectionContext context,Destination destination, Subscription subs) {
1:     }
commit:dfcf776
/////////////////////////////////////////////////////////////////////////
1:     
1:     public long getBrokerSequenceId() {
1:         return -1l;
1:     }
commit:a401575
/////////////////////////////////////////////////////////////////////////
1:     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:     }
1:     
1:     public void postProcessDispatch(MessageDispatch messageDispatch) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isExpired(MessageReference messageReference) {
1:         return false;
1:     }
1:     
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Collections;
1: import java.util.Map;
1: import java.util.Set;
1: import org.apache.activemq.broker.region.MessageReference;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void messageExpired(ConnectionContext context,MessageReference message){        
1:     }
1: 
0:     public void sendToDeadLetterQueue(ConnectionContext context,MessageReference messageReference){        
1:     }
1:     
0:     public Broker getRoot(){
1:         return null;
1:      }
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
1:     
commit:25a252f
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void brokerServiceStarted(){
1:     }
1:     
0:     public BrokerService getBrokerService(){
1:         return null;
1:     }
commit:4741136
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public URI getVmConnectorURI(){
1:         return null;
1:     }
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PendingDurableSubscriberMessageStoragePolicy;
/////////////////////////////////////////////////////////////////////////
0:     public PendingDurableSubscriberMessageStoragePolicy getPendingDurableSubscriberPolicy() {
1:         return null;
1:     }
1:   
0:     public void setPendingDurableSubscriberPolicy(PendingDurableSubscriberMessageStoragePolicy pendingDurableSubscriberPolicy) {
1:     }
1:     
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.kaha.Store;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public Store getTempDataStore() {
1:         return null;
1:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isFaultTolerantConfiguration(){
1:         return false;
1:     }
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
0:     public void addDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{
1:     }
1: 
0:     public void removeDestinationInfo(ConnectionContext context,DestinationInfo info) throws Exception{        
1:     }
1:     
1:    
commit:debd0cc
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public Set getDurableDestinations(){
1:         return null;
1:     }
commit:233b604
/////////////////////////////////////////////////////////////////////////
1:     
0:     public boolean isStopped(){
1:         return false;
1:     }
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.MessageDispatchNotification;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.TransactionId;
1: 
1: /**
1:  * Dumb implementation - used to be overriden by listeners
1:  * 
0:  * @version $Revision$
1:  */
0: public class EmptyBroker implements Broker{
1: 
0:     public BrokerId getBrokerId(){
1:         return null;
1:     }
1: 
0:     public String getBrokerName(){
1:         return null;
1:     }
1:     
0:     public Broker getAdaptor(Class type){
0:         if (type.isInstance(this)){
0:             return this;
1:         }
1:         return null;
1:     }
1: 
0:     public void addConnection(ConnectionContext context,ConnectionInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void removeConnection(ConnectionContext context,ConnectionInfo info,Throwable error) throws Throwable{
1: 
1:     }
1: 
0:     public void addSession(ConnectionContext context,SessionInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void removeSession(ConnectionContext context,SessionInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void addProducer(ConnectionContext context,ProducerInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void removeProducer(ConnectionContext context,ProducerInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public Connection[] getClients() throws Throwable{
1: 
1:         return null;
1:     }
1: 
0:     public ActiveMQDestination[] getDestinations() throws Throwable{
1: 
1:         return null;
1:     }
1: 
0:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Throwable{
1: 
1:         return null;
1:     }
1: 
0:     public void beginTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
1: 
1:     }
1: 
0:     public int prepareTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
1: 
1:         return 0;
1:     }
1: 
0:     public void rollbackTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
1: 
1:     }
1: 
0:     public void commitTransaction(ConnectionContext context,TransactionId xid,boolean onePhase) throws Throwable{
1: 
1:     }
1: 
0:     public void forgetTransaction(ConnectionContext context,TransactionId transactionId) throws Throwable{
1: 
1:     }
1: 
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Throwable{
1: 
1:         return null;
1:     }
1: 
0:     public void removeDestination(ConnectionContext context,ActiveMQDestination destination,long timeout) throws Throwable{
1: 
1:     }
1: 
0:     public void addConsumer(ConnectionContext context,ConsumerInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void removeConsumer(ConnectionContext context,ConsumerInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void removeSubscription(ConnectionContext context,RemoveSubscriptionInfo info) throws Throwable{
1: 
1:     }
1: 
0:     public void send(ConnectionContext context,Message message) throws Throwable{
1: 
1:     }
1: 
0:     public void acknowledge(ConnectionContext context,MessageAck ack) throws Throwable{
1: 
1:     }
1: 
0:     public void gc(){
1: 
1:     }
1: 
0:     public void start() throws Exception{
1: 
1:     }
1: 
0:     public void stop() throws Exception{
1: 
1:     }
1: 
0:     public void addBroker(Connection connection,BrokerInfo info){
1:         
1:     }
1:     
0:     public void removeBroker(Connection connection,BrokerInfo info){
1:        
1:     }
1: 
0:     public BrokerInfo[] getPeerBrokerInfos(){
1:         return null;
1:     }
1:     
1:     /**
0:      * Notifiy the Broker that a dispatch has happened
0:      * @param messageDispatch
1:      */
0:     public void processDispatch(MessageDispatch messageDispatch){
1:         
1:     }
1:     
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification){
1:         
1:     }
1:     
0:     public boolean isSlaveBroker(){
0:         return false;
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Response messagePull(ConnectionContext context, MessagePull pull) {
1:         return null;
0:     }
0: 
commit:8abb655
/////////////////////////////////////////////////////////////////////////
1: public class EmptyBroker implements Broker {
1:     public BrokerId getBrokerId() {
1:     public String getBrokerName() {
0: 
0:     public Broker getAdaptor(Class type) {
0:         if (type.isInstance(this)) {
/////////////////////////////////////////////////////////////////////////
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:     public Connection[] getClients() throws Exception {
1:     public ActiveMQDestination[] getDestinations() throws Exception {
1:     public TransactionId[] getPreparedTransactions(ConnectionContext context) throws Exception {
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
0:     public void send(ConnectionContext context, Message message) throws Exception {
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
1:     public void gc() {
1:     public void start() throws Exception {
1:     public void stop() throws Exception {
1:     public void addBroker(Connection connection, BrokerInfo info) {
0: 
1:     public void removeBroker(Connection connection, BrokerInfo info) {
0: 
0:     }
0: 
1:     public BrokerInfo[] getPeerBrokerInfos() {
0: 
0:      * 
0:     public void processDispatch(MessageDispatch messageDispatch) {
0: 
0: 
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0: 
0: 
0:     public boolean isSlaveBroker() {
0: 
1:     public boolean isStopped() {
0: 
0:     public Set getDurableDestinations() {
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:     public boolean isFaultTolerantConfiguration() {
0: 
1:     public ConnectionContext getAdminConnectionContext() {
0:         return null;
0:     }
0: 
1:     public void setAdminConnectionContext(ConnectionContext adminConnectionContext) {
0:     }
0: 
commit:06a5829
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.Map;
0: import java.util.Set;
0: 
/////////////////////////////////////////////////////////////////////////
0:     public Set getDestinations(ActiveMQDestination destination) {
0:         return Collections.EMPTY_SET;
0:     }
0: 
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     public Map getDestinationMap() {
0:         return Collections.EMPTY_MAP;
0:     }
0: 
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public Subscription addConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:         return null;
============================================================================