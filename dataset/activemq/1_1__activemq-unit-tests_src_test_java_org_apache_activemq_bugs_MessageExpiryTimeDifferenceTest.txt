1:cd5ea6c: /*
1:cd5ea6c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cd5ea6c:  * contributor license agreements.  See the NOTICE file distributed with
1:cd5ea6c:  * this work for additional information regarding copyright ownership.
1:cd5ea6c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cd5ea6c:  * (the "License"); you may not use this file except in compliance with
1:cd5ea6c:  * the License.  You may obtain a copy of the License at
1:cd5ea6c:  *
1:cd5ea6c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cd5ea6c:  *
1:cd5ea6c:  * Unless required by applicable law or agreed to in writing, software
1:cd5ea6c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cd5ea6c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cd5ea6c:  * See the License for the specific language governing permissions and
1:cd5ea6c:  * limitations under the License.
1:cd5ea6c:  */
1:cd5ea6c: package org.apache.activemq.bugs;
1:cd5ea6c: 
1:cd5ea6c: import static org.junit.Assert.assertEquals;
1:cd5ea6c: import static org.junit.Assert.assertNull;
1:cd5ea6c: import static org.junit.Assert.fail;
1:cd5ea6c: 
1:cd5ea6c: import java.util.Map;
1:cd5ea6c: import java.util.concurrent.CountDownLatch;
1:cd5ea6c: import java.util.concurrent.ExecutorService;
1:cd5ea6c: import java.util.concurrent.Executors;
1:cd5ea6c: import java.util.concurrent.TimeUnit;
1:cd5ea6c: import java.util.concurrent.atomic.AtomicInteger;
1:cd5ea6c: 
1:cd5ea6c: import javax.jms.JMSException;
1:cd5ea6c: import javax.jms.Message;
1:cd5ea6c: import javax.jms.MessageConsumer;
1:cd5ea6c: import javax.jms.MessageProducer;
1:cd5ea6c: import javax.jms.Queue;
1:cd5ea6c: import javax.jms.Session;
1:cd5ea6c: import javax.jms.TextMessage;
1:cd5ea6c: import javax.management.ObjectName;
1:cd5ea6c: 
1:cd5ea6c: import org.apache.activemq.ActiveMQConnection;
1:cd5ea6c: import org.apache.activemq.ActiveMQConnectionFactory;
1:cd5ea6c: import org.apache.activemq.broker.Broker;
1:cd5ea6c: import org.apache.activemq.broker.BrokerFilter;
1:cd5ea6c: import org.apache.activemq.broker.BrokerPlugin;
1:cd5ea6c: import org.apache.activemq.broker.BrokerService;
1:cd5ea6c: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:cd5ea6c: import org.apache.activemq.broker.jmx.DestinationView;
1:cd5ea6c: import org.apache.activemq.broker.jmx.QueueView;
1:cd5ea6c: import org.apache.activemq.command.MessageAck;
1:cd5ea6c: import org.apache.activemq.command.MessageDispatch;
1:cd5ea6c: import org.junit.After;
1:cd5ea6c: import org.junit.Before;
1:cd5ea6c: import org.junit.Test;
1:cd5ea6c: 
1:cd5ea6c: public class MessageExpiryTimeDifferenceTest {
1:cd5ea6c: 
1:cd5ea6c:     public static final String QUEUE_NAME = "timeout.test";
1:cd5ea6c:     private ActiveMQConnection connection;
1:cd5ea6c:     private BrokerService broker;
1:cd5ea6c:     private String connectionUri;
1:cd5ea6c: 
1:cd5ea6c:     @Before
1:cd5ea6c:     public void setUp() throws Exception {
1:cd5ea6c:         createBroker();
1:cd5ea6c: 
1:cd5ea6c:         connection = createConnection();
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     @After
1:cd5ea6c:     public void tearDown() throws Exception {
1:cd5ea6c:         if (connection != null) {
1:cd5ea6c:             try {
1:cd5ea6c:                 connection.close();
1:cd5ea6c:             } catch (Exception e) {
1:cd5ea6c:             }
1:cd5ea6c:         }
1:cd5ea6c: 
1:cd5ea6c:         if (broker != null) {
1:cd5ea6c:             broker.stop();
1:cd5ea6c:             broker.waitUntilStopped();
1:cd5ea6c:         }
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     /**
1:cd5ea6c:      * if the client clock is slightly ahead of the brokers clock a message
1:cd5ea6c:      * could be expired on the client. When the expiry is sent to the broker it
1:cd5ea6c:      * checks if the message is also considered expired on the broker side.
1:cd5ea6c:      *
1:cd5ea6c:      * If the broker clock is behind the message could be considered not expired
1:cd5ea6c:      * on the broker and not removed from the broker's dispatched list. This
1:cd5ea6c:      * leaves the broker reporting a message inflight from the broker's
1:cd5ea6c:      * perspective even though the message has been expired on the
1:cd5ea6c:      * consumer(client) side
1:cd5ea6c:      *
1:cd5ea6c:      * The BrokerFlight is used to manipulate the expiration timestamp on the
1:cd5ea6c:      * message when it is sent and ack'd from the consumer to simulate a time
1:cd5ea6c:      * difference between broker and client in the unit test. This is rather
1:cd5ea6c:      * invasive but it it difficult to test this deterministically in a unit
1:cd5ea6c:      * test.
1:cd5ea6c:      */
1:cd5ea6c:     @Test(timeout = 30000)
1:cd5ea6c:     public void testInflightCountAfterExpiry() throws Exception {
1:cd5ea6c: 
1:cd5ea6c:         connection.start();
1:cd5ea6c: 
1:cd5ea6c:         // push message to queue
1:cd5ea6c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cd5ea6c:         Queue queue = session.createQueue("timeout.test");
1:cd5ea6c:         MessageProducer producer = session.createProducer(queue);
1:cd5ea6c:         TextMessage textMessage = session.createTextMessage(QUEUE_NAME);
1:cd5ea6c: 
1:cd5ea6c:         producer.send(textMessage);
1:cd5ea6c:         session.close();
1:cd5ea6c: 
1:cd5ea6c:         // try to consume message
1:cd5ea6c:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cd5ea6c:         final MessageConsumer consumer = session.createConsumer(queue);
1:cd5ea6c:         final CountDownLatch messageReceived = new CountDownLatch(1);
1:cd5ea6c: 
1:cd5ea6c:         // call consume in a separate thread
1:cd5ea6c:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:cd5ea6c: 
1:cd5ea6c:         executorService.submit(new Runnable() {
1:cd5ea6c: 
1:cd5ea6c:             @Override
1:cd5ea6c:             public void run() {
1:cd5ea6c:                 Message message = null;
1:cd5ea6c:                 try {
1:cd5ea6c:                     message = consumer.receive(1000);
1:cd5ea6c:                 } catch (JMSException e) {
1:cd5ea6c:                     fail();
1:cd5ea6c:                 }
1:cd5ea6c: 
1:cd5ea6c:                 // message should be null as it should have expired and the
1:cd5ea6c:                 // consumer.receive(timeout) should return null.
1:cd5ea6c:                 assertNull(message);
1:cd5ea6c:                 messageReceived.countDown();
1:cd5ea6c:             }
1:cd5ea6c:         });
1:cd5ea6c: 
1:cd5ea6c:         messageReceived.await(20, TimeUnit.SECONDS);
1:cd5ea6c: 
1:cd5ea6c:         QueueView queueView = getQueueView(broker, QUEUE_NAME);
1:cd5ea6c:         assertEquals("Should be No inflight messages", 0, queueView.getInFlightCount());
1:cd5ea6c: 
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     private void createBroker() throws Exception {
1:cd5ea6c:         broker = new BrokerService();
1:cd5ea6c:         broker.setUseJmx(true);
1:cd5ea6c:         broker.setPersistent(false);
1:cd5ea6c:         broker.setAdvisorySupport(false);
1:cd5ea6c:         broker.addConnector("tcp://localhost:0");
1:cd5ea6c: 
1:cd5ea6c:         // add a plugin to ensure the expiry happens on the client side the
1:cd5ea6c:         // acknowledge() reset the expiration time to 30 seconds in the future.
1:cd5ea6c:         //
1:cd5ea6c:         // this simulates a scenario where the client clock is *0 seconds ahead
1:cd5ea6c:         // of the broker's clock.
1:cd5ea6c:         broker.setPlugins(new BrokerPlugin[] { new BrokerPlugin() {
1:cd5ea6c: 
1:cd5ea6c:             @Override
1:cd5ea6c:             public Broker installPlugin(Broker broker) throws Exception {
1:cd5ea6c:                 return new BrokerFilter(broker) {
1:cd5ea6c: 
1:cd5ea6c:                     private AtomicInteger counter = new AtomicInteger();
1:cd5ea6c:                     private org.apache.activemq.command.Message dispatchedMessage;
1:cd5ea6c: 
1:cd5ea6c:                     @Override
1:cd5ea6c:                     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:cd5ea6c:                         if (counter.get() == 0 && messageDispatch.getDestination().getPhysicalName().contains("timeout.test")) {
1:cd5ea6c:                             // Set the expiration to now
1:cd5ea6c:                             dispatchedMessage = messageDispatch.getMessage();
1:cd5ea6c:                             dispatchedMessage.setExpiration(System.currentTimeMillis() - 100);
1:cd5ea6c: 
1:cd5ea6c:                             counter.incrementAndGet();
1:cd5ea6c:                         }
1:cd5ea6c:                         super.preProcessDispatch(messageDispatch);
1:cd5ea6c:                     }
1:cd5ea6c: 
1:cd5ea6c:                     @Override
1:cd5ea6c:                     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:cd5ea6c:                         // set the expiration in the future, to simulate broker's clock is
1:cd5ea6c:                         // 30 seconds behind client clock
1:cd5ea6c:                         if (ack.isExpiredAck()) {
1:cd5ea6c:                             dispatchedMessage.setExpiration(System.currentTimeMillis() + 300000);
1:cd5ea6c:                         }
1:cd5ea6c:                         super.acknowledge(consumerExchange, ack);
1:cd5ea6c:                     }
1:cd5ea6c:                 };
1:cd5ea6c:             }
1:cd5ea6c:         } });
1:cd5ea6c: 
1:cd5ea6c:         broker.start();
1:cd5ea6c:         broker.waitUntilStarted();
1:cd5ea6c: 
1:cd5ea6c:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:cd5ea6c:         return new ActiveMQConnectionFactory(connectionUri);
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     protected ActiveMQConnection createConnection() throws Exception {
1:cd5ea6c:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:cd5ea6c:     }
1:cd5ea6c: 
1:cd5ea6c:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:cd5ea6c:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1:cd5ea6c: 
1:cd5ea6c:         for (ObjectName key : queueViews.keySet()) {
1:cd5ea6c:             DestinationView destinationView = queueViews.get(key);
1:cd5ea6c: 
1:cd5ea6c:             if (destinationView instanceof QueueView) {
1:cd5ea6c:                 QueueView queueView = (QueueView) destinationView;
1:cd5ea6c: 
1:cd5ea6c:                 if (queueView.getName().equals(queueName)) {
1:cd5ea6c:                     return queueView;
1:cd5ea6c:                 }
1:cd5ea6c: 
1:cd5ea6c:             }
1:cd5ea6c:         }
1:cd5ea6c:         return null;
1:cd5ea6c:     }
1:cd5ea6c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:cd5ea6c
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.jmx.DestinationView;
1: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MessageExpiryTimeDifferenceTest {
1: 
1:     public static final String QUEUE_NAME = "timeout.test";
1:     private ActiveMQConnection connection;
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Exception e) {
1:             }
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * if the client clock is slightly ahead of the brokers clock a message
1:      * could be expired on the client. When the expiry is sent to the broker it
1:      * checks if the message is also considered expired on the broker side.
1:      *
1:      * If the broker clock is behind the message could be considered not expired
1:      * on the broker and not removed from the broker's dispatched list. This
1:      * leaves the broker reporting a message inflight from the broker's
1:      * perspective even though the message has been expired on the
1:      * consumer(client) side
1:      *
1:      * The BrokerFlight is used to manipulate the expiration timestamp on the
1:      * message when it is sent and ack'd from the consumer to simulate a time
1:      * difference between broker and client in the unit test. This is rather
1:      * invasive but it it difficult to test this deterministically in a unit
1:      * test.
1:      */
1:     @Test(timeout = 30000)
1:     public void testInflightCountAfterExpiry() throws Exception {
1: 
1:         connection.start();
1: 
1:         // push message to queue
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("timeout.test");
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage textMessage = session.createTextMessage(QUEUE_NAME);
1: 
1:         producer.send(textMessage);
1:         session.close();
1: 
1:         // try to consume message
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageConsumer consumer = session.createConsumer(queue);
1:         final CountDownLatch messageReceived = new CountDownLatch(1);
1: 
1:         // call consume in a separate thread
1:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1: 
1:         executorService.submit(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 Message message = null;
1:                 try {
1:                     message = consumer.receive(1000);
1:                 } catch (JMSException e) {
1:                     fail();
1:                 }
1: 
1:                 // message should be null as it should have expired and the
1:                 // consumer.receive(timeout) should return null.
1:                 assertNull(message);
1:                 messageReceived.countDown();
1:             }
1:         });
1: 
1:         messageReceived.await(20, TimeUnit.SECONDS);
1: 
1:         QueueView queueView = getQueueView(broker, QUEUE_NAME);
1:         assertEquals("Should be No inflight messages", 0, queueView.getInFlightCount());
1: 
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setPersistent(false);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector("tcp://localhost:0");
1: 
1:         // add a plugin to ensure the expiry happens on the client side the
1:         // acknowledge() reset the expiration time to 30 seconds in the future.
1:         //
1:         // this simulates a scenario where the client clock is *0 seconds ahead
1:         // of the broker's clock.
1:         broker.setPlugins(new BrokerPlugin[] { new BrokerPlugin() {
1: 
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1: 
1:                     private AtomicInteger counter = new AtomicInteger();
1:                     private org.apache.activemq.command.Message dispatchedMessage;
1: 
1:                     @Override
1:                     public void preProcessDispatch(MessageDispatch messageDispatch) {
1:                         if (counter.get() == 0 && messageDispatch.getDestination().getPhysicalName().contains("timeout.test")) {
1:                             // Set the expiration to now
1:                             dispatchedMessage = messageDispatch.getMessage();
1:                             dispatchedMessage.setExpiration(System.currentTimeMillis() - 100);
1: 
1:                             counter.incrementAndGet();
1:                         }
1:                         super.preProcessDispatch(messageDispatch);
1:                     }
1: 
1:                     @Override
1:                     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:                         // set the expiration in the future, to simulate broker's clock is
1:                         // 30 seconds behind client clock
1:                         if (ack.isExpiredAck()) {
1:                             dispatchedMessage.setExpiration(System.currentTimeMillis() + 300000);
1:                         }
1:                         super.acknowledge(consumerExchange, ack);
1:                     }
1:                 };
1:             }
1:         } });
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     protected ActiveMQConnection createConnection() throws Exception {
1:         return (ActiveMQConnection) createConnectionFactory().createConnection();
1:     }
1: 
1:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1: 
1:         for (ObjectName key : queueViews.keySet()) {
1:             DestinationView destinationView = queueViews.get(key);
1: 
1:             if (destinationView instanceof QueueView) {
1:                 QueueView queueView = (QueueView) destinationView;
1: 
1:                 if (queueView.getName().equals(queueName)) {
1:                     return queueView;
1:                 }
1: 
1:             }
1:         }
1:         return null;
1:     }
1: }
============================================================================