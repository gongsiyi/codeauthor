1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:7167041:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7167041:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
4:40a7d3b: 
1:40a7d3b: import java.util.ArrayList;
1:7167041: import java.util.List;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.ConnectionConsumer;
1:40a7d3b: import javax.jms.ConnectionMetaData;
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.ExceptionListener;
1:40a7d3b: import javax.jms.IllegalStateException;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.QueueConnection;
1:40a7d3b: import javax.jms.QueueSession;
1:40a7d3b: import javax.jms.ServerSessionPool;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.Topic;
1:40a7d3b: import javax.jms.TopicConnection;
1:40a7d3b: import javax.jms.TopicSession;
1:9e13901: import javax.resource.spi.ConnectionRequestInfo;
1:fd4bb60: import org.apache.activemq.ActiveMQQueueSession;
1:fd4bb60: import org.apache.activemq.ActiveMQSession;
1:fd4bb60: import org.apache.activemq.ActiveMQTopicSession;
1:40a7d3b: 
2:40a7d3b: /**
1:540dd5c:  * Acts as a pass through proxy for a JMS Connection object. It intercepts
1:540dd5c:  * events that are of interest of the ActiveMQManagedConnection.
1:b0c2a40:  *
1:540dd5c:  * 
1:40a7d3b:  */
1:40a7d3b: public class ManagedConnectionProxy implements Connection, QueueConnection, TopicConnection, ExceptionListener {
1:40a7d3b: 
1:40a7d3b:     private ActiveMQManagedConnection managedConnection;
1:7167041:     private final List<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
1:40a7d3b:     private ExceptionListener exceptionListener;
1:9e13901:     private ActiveMQConnectionRequestInfo info;
1:40a7d3b: 
1:9e13901:     public ManagedConnectionProxy(ActiveMQManagedConnection managedConnection, ConnectionRequestInfo info) {
1:40a7d3b:         this.managedConnection = managedConnection;
1:9e13901:         if (info instanceof ActiveMQConnectionRequestInfo) {
1:9e13901:             this.info = (ActiveMQConnectionRequestInfo) info;
1:9e13901:         }
2:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * Used to let the ActiveMQManagedConnection that this connection handel is
1:540dd5c:      * not needed by the app.
1:540dd5c:      *
5:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void close() throws JMSException {
1:540dd5c:         if (managedConnection != null) {
1:40a7d3b:             managedConnection.proxyClosedEvent(this);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Called by the ActiveMQManagedConnection to invalidate this proxy.
1:40a7d3b:      */
1:40a7d3b:     public void cleanup() {
1:540dd5c:         exceptionListener = null;
1:40a7d3b:         managedConnection = null;
1:7167041:         synchronized (sessions) {
1:7167041:             for (ManagedSessionProxy p : sessions) {
1:7167041:                 try {
1:7167041:                     //TODO is this dangerous?  should we copy the list before iterating?
1:7167041:                     p.cleanup();
1:7167041:                 } catch (JMSException ignore) {
1:7167041:                 }
1:40a7d3b:             }
1:7167041:             sessions.clear();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:ab438f6:      * @return "physical" underlying activemq connection, if proxy is associated with a managed connection
1:ab438f6:      * @throws javax.jms.JMSException if managed connection is null
1:40a7d3b:      */
1:40a7d3b:     private Connection getConnection() throws JMSException {
1:40a7d3b:         if (managedConnection == null) {
1:40a7d3b:             throw new IllegalStateException("The Connection is closed");
1:40a7d3b:         }
1:40a7d3b:         return managedConnection.getPhysicalConnection();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @param transacted      Whether session is transacted
1:ab438f6:      * @param acknowledgeMode session acknowledge mode
1:ab438f6:      * @return session proxy
1:ab438f6:      * @throws JMSException on error
1:40a7d3b:      */
1:540dd5c:     public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException {
1:40a7d3b:         return createSessionProxy(transacted, acknowledgeMode);
1:ab438f6:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @param transacted      Whether session is transacted
1:ab438f6:      * @param acknowledgeMode session acknowledge mode
1:ab438f6:      * @return session proxy
1:ab438f6:      * @throws JMSException on error
1:40a7d3b:      */
1:540dd5c:     private ManagedSessionProxy createSessionProxy(boolean transacted, int acknowledgeMode) throws JMSException {
1:9e13901:         ActiveMQSession session;
1:9e13901:         if (info != null && info.isUseSessionArgs()) {
1:9e13901:             session = (ActiveMQSession) getConnection().createSession(transacted, transacted ? Session.SESSION_TRANSACTED : acknowledgeMode);
1:9e13901:         } else {
1:9e13901:             session = (ActiveMQSession) getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9e13901:         }
1:40a7d3b:         ManagedTransactionContext txContext = new ManagedTransactionContext(managedConnection.getTransactionContext());
1:540dd5c:         session.setTransactionContext(txContext);
1:7167041:         ManagedSessionProxy p = new ManagedSessionProxy(session, this);
1:40a7d3b:         p.setUseSharedTxContext(managedConnection.isInManagedTx());
1:7167041:         synchronized (sessions) {
1:540dd5c:             sessions.add(p);
1:7167041:         }
1:40a7d3b:         return p;
1:40a7d3b:     }
1:40a7d3b: 
1:7167041:     protected void sessionClosed(ManagedSessionProxy session) {
1:7167041:         synchronized (sessions) {
1:7167041:             sessions.remove(session);
1:7167041:         }
1:7167041:     }
1:7167041: 
1:40a7d3b:     public void setUseSharedTxContext(boolean enable) throws JMSException {
1:7167041:         synchronized (sessions) {
1:7167041:             for (ManagedSessionProxy p : sessions) {
1:7167041:                 p.setUseSharedTxContext(enable);
1:7167041:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @param transacted      Whether session is transacted
1:ab438f6:      * @param acknowledgeMode session acknowledge mode
1:ab438f6:      * @return session proxy
1:ab438f6:      * @throws JMSException on error
1:40a7d3b:      */
1:540dd5c:     public QueueSession createQueueSession(boolean transacted, int acknowledgeMode) throws JMSException {
1:40a7d3b:         return new ActiveMQQueueSession(createSessionProxy(transacted, acknowledgeMode));
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @param transacted      Whether session is transacted
1:ab438f6:      * @param acknowledgeMode session acknowledge mode
1:ab438f6:      * @return session proxy
1:ab438f6:      * @throws JMSException on error
1:40a7d3b:      */
1:540dd5c:     public TopicSession createTopicSession(boolean transacted, int acknowledgeMode) throws JMSException {
1:40a7d3b:         return new ActiveMQTopicSession(createSessionProxy(transacted, acknowledgeMode));
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @return client id from delegate
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public String getClientID() throws JMSException {
1:40a7d3b:         return getConnection().getClientID();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @return exception listener from delegate
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public ExceptionListener getExceptionListener() throws JMSException {
1:40a7d3b:         return getConnection().getExceptionListener();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * @return connection metadata from delegate
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public ConnectionMetaData getMetaData() throws JMSException {
1:40a7d3b:         return getConnection().getMetaData();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * Sets client id on delegate
1:7167041:      * @param clientID new clientId
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void setClientID(String clientID) throws JMSException {
1:40a7d3b:         getConnection().setClientID(clientID);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:7167041:      * sets exception listener on delegate
1:7167041:      * @param listener new listener
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public void setExceptionListener(ExceptionListener listener) throws JMSException {
1:40a7d3b:         getConnection();
1:40a7d3b:         exceptionListener = listener;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void start() throws JMSException {
1:40a7d3b:         getConnection().start();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void stop() throws JMSException {
1:40a7d3b:         getConnection().stop();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param queue
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param sessionPool
1:40a7d3b:      * @param maxMessages
8:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
1:40a7d3b:         throw new JMSException("Not Supported.");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param sessionPool
1:40a7d3b:      * @param maxMessages
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
1:40a7d3b:         throw new JMSException("Not Supported.");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param destination
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param sessionPool
1:40a7d3b:      * @param maxMessages
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
1:40a7d3b:         throw new JMSException("Not Supported.");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @param topic
1:40a7d3b:      * @param subscriptionName
1:40a7d3b:      * @param messageSelector
1:40a7d3b:      * @param sessionPool
1:40a7d3b:      * @param maxMessages
1:40a7d3b:      * @return
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:540dd5c:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
1:40a7d3b:         throw new JMSException("Not Supported.");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return Returns the managedConnection.
1:40a7d3b:      */
1:40a7d3b:     public ActiveMQManagedConnection getManagedConnection() {
1:40a7d3b:         return managedConnection;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void onException(JMSException e) {
1:540dd5c:         if (exceptionListener != null && managedConnection != null) {
2:40a7d3b:             try {
1:40a7d3b:                 exceptionListener.onException(e);
1:40a7d3b:             } catch (Throwable ignore) {
1:40a7d3b:                 // We can never trust user code so ignore any exceptions.
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:9e13901
/////////////////////////////////////////////////////////////////////////
1: import javax.resource.spi.ConnectionRequestInfo;
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQConnectionRequestInfo info;
1:     public ManagedConnectionProxy(ActiveMQManagedConnection managedConnection, ConnectionRequestInfo info) {
1:         if (info instanceof ActiveMQConnectionRequestInfo) {
1:             this.info = (ActiveMQConnectionRequestInfo) info;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQSession session;
1:         if (info != null && info.isUseSessionArgs()) {
1:             session = (ActiveMQSession) getConnection().createSession(transacted, transacted ? Session.SESSION_TRANSACTED : acknowledgeMode);
1:         } else {
1:             session = (ActiveMQSession) getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
commit:adb49f5
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQSession session = (ActiveMQSession) getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * Acts as a pass through proxy for a JMS Connection object. It intercepts
1:  * events that are of interest of the ActiveMQManagedConnection.
1:  * 
0:     private ArrayList<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
/////////////////////////////////////////////////////////////////////////
1:      * Used to let the ActiveMQManagedConnection that this connection handel is
1:      * not needed by the app.
1:      * 
1:         if (managedConnection != null) {
/////////////////////////////////////////////////////////////////////////
1:         exceptionListener = null;
0:         for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
0:             ManagedSessionProxy p = iter.next();
/////////////////////////////////////////////////////////////////////////
1:     public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     private ManagedSessionProxy createSessionProxy(boolean transacted, int acknowledgeMode) throws JMSException {
0:         ActiveMQSession session = (ActiveMQSession)getConnection().createSession(transacted, acknowledgeMode);
1:         session.setTransactionContext(txContext);
0:         ManagedSessionProxy p = new ManagedSessionProxy(session);
1:         sessions.add(p);
0:         for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
0:             ManagedSessionProxy p = iter.next();
/////////////////////////////////////////////////////////////////////////
1:     public QueueSession createQueueSession(boolean transacted, int acknowledgeMode) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public TopicSession createTopicSession(boolean transacted, int acknowledgeMode) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public void setExceptionListener(ExceptionListener listener) throws JMSException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         if (exceptionListener != null && managedConnection != null) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQQueueSession;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.ActiveMQTopicSession;
author:David Jencks
-------------------------------------------------------------------------------
commit:7167041
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private final List<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:         synchronized (sessions) {
1:             for (ManagedSessionProxy p : sessions) {
1:                 try {
1:                     //TODO is this dangerous?  should we copy the list before iterating?
1:                     p.cleanup();
1:                 } catch (JMSException ignore) {
1:                 }
1:             sessions.clear();
/////////////////////////////////////////////////////////////////////////
1:      * @param transacted      Whether session is transacted
/////////////////////////////////////////////////////////////////////////
1:      * @param transacted      Whether session is transacted
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQSession session = (ActiveMQSession) getConnection().createSession(transacted, acknowledgeMode);
1:         ManagedSessionProxy p = new ManagedSessionProxy(session, this);
1:         synchronized (sessions) {
0:             sessions.add(p);
1:         }
1:     protected void sessionClosed(ManagedSessionProxy session) {
1:         synchronized (sessions) {
1:             sessions.remove(session);
1:         }
1:     }
1: 
1:         synchronized (sessions) {
1:             for (ManagedSessionProxy p : sessions) {
1:                 p.setUseSharedTxContext(enable);
1:             }
1:      * @param transacted      Whether session is transacted
/////////////////////////////////////////////////////////////////////////
1:      * @param transacted      Whether session is transacted
/////////////////////////////////////////////////////////////////////////
1:      * @return client id from delegate
/////////////////////////////////////////////////////////////////////////
1:      * @return exception listener from delegate
/////////////////////////////////////////////////////////////////////////
1:      * @return connection metadata from delegate
/////////////////////////////////////////////////////////////////////////
1:      * Sets client id on delegate
1:      * @param clientID new clientId
/////////////////////////////////////////////////////////////////////////
1:      * sets exception listener on delegate
1:      * @param listener new listener
commit:ab438f6
/////////////////////////////////////////////////////////////////////////
0:      *
1:      * @return "physical" underlying activemq connection, if proxy is associated with a managed connection
1:      * @throws javax.jms.JMSException if managed connection is null
/////////////////////////////////////////////////////////////////////////
0:      * @param transacted Whether session is transacted
1:      * @param acknowledgeMode session acknowledge mode
1:      * @return session proxy
1:      * @throws JMSException on error
0:      * @param transacted Whether session is transacted
1:      * @param acknowledgeMode session acknowledge mode
1:      * @return session proxy
1:      * @throws JMSException on error
0:         if (!transacted && acknowledgeMode == Session.SESSION_TRANSACTED) {
0:             acknowledgeMode = Session.AUTO_ACKNOWLEDGE;
1:         }
0: //        ActiveMQSession session = (ActiveMQSession)getConnection().createSession(true, acknowledgeMode);
/////////////////////////////////////////////////////////////////////////
0:         for (ManagedSessionProxy p : sessions) {
0:      * @param transacted Whether session is transacted
1:      * @param acknowledgeMode session acknowledge mode
1:      * @return session proxy
1:      * @throws JMSException on error
0:      * @param transacted Whether session is transacted
1:      * @param acknowledgeMode session acknowledge mode
1:      * @return session proxy
1:      * @throws JMSException on error
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.ConnectionMetaData;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: 
0: import org.activemq.ActiveMQQueueSession;
0: import org.activemq.ActiveMQSession;
0: import org.activemq.ActiveMQTopicSession;
1: 
1: 
1: /**
0:  * Acts as a pass through proxy for a JMS Connection object.
0:  * It intercepts events that are of interest of the ActiveMQManagedConnection.
0:  *
0:  * @version $Revision$
1:  */
1: public class ManagedConnectionProxy implements Connection, QueueConnection, TopicConnection, ExceptionListener {
1: 
1:     private ActiveMQManagedConnection managedConnection;
0:     private ArrayList sessions = new ArrayList();
1:     private ExceptionListener exceptionListener;
1: 
0:     public ManagedConnectionProxy(ActiveMQManagedConnection managedConnection) {
1:         this.managedConnection = managedConnection;
1:     }
1: 
1:     /**
0:      * Used to let the ActiveMQManagedConnection that this connection
0:      * handel is not needed by the app.
0:      *
1:      * @throws JMSException
1:      */
1:     public void close() throws JMSException {
0:         if( managedConnection!=null ) {
1:             managedConnection.proxyClosedEvent(this);
1:         }
1:     }
1: 
1:     /**
1:      * Called by the ActiveMQManagedConnection to invalidate this proxy.
1:      */
1:     public void cleanup() {
0:         exceptionListener=null;
1:         managedConnection = null;
0:         for (Iterator iter = sessions.iterator(); iter.hasNext();) {
0:             ManagedSessionProxy p = (ManagedSessionProxy) iter.next();
1:             try {
0:                 p.cleanup();
0:             } catch (JMSException ignore) {
1:             }
0:             iter.remove();
1:         }
1:     }
1: 
1:     /**
0:      * 
1:      */
1:     private Connection getConnection() throws JMSException {
1:         if (managedConnection == null) {
1:             throw new IllegalStateException("The Connection is closed");
1:         }
1:         return managedConnection.getPhysicalConnection();
1:     }
1: 
1:     /**
0:      * @param transacted
0:      * @param acknowledgeMode
1:      * @return
1:      * @throws JMSException
1:      */
0:     public Session createSession(boolean transacted, int acknowledgeMode)
0:             throws JMSException {
1:         return createSessionProxy(transacted, acknowledgeMode);
1:     }
1: 
1:     /**
0:      * @param acknowledgeMode
0:      * @param transacted
1:      * @return
1:      * @throws JMSException
1:      */
0:     private ManagedSessionProxy createSessionProxy(boolean transacted, int acknowledgeMode) throws JMSException {        
0:         ActiveMQSession session = (ActiveMQSession) getConnection().createSession(transacted, acknowledgeMode);
1:         ManagedTransactionContext txContext = new ManagedTransactionContext(managedConnection.getTransactionContext());
0:         session.setTransactionContext(txContext);        
0:         ManagedSessionProxy p = new ManagedSessionProxy(session);        
1:         p.setUseSharedTxContext(managedConnection.isInManagedTx());
0:         sessions.add(p);        
1:         return p;
1:     }
1: 
1:     public void setUseSharedTxContext(boolean enable) throws JMSException {
0:         for (Iterator iter = sessions.iterator(); iter.hasNext();) {
0:             ManagedSessionProxy p = (ManagedSessionProxy) iter.next();
0:             p.setUseSharedTxContext(enable);
1:         }
1:     }
1: 
1:     /**
0:      * @param transacted
0:      * @param acknowledgeMode
1:      * @return
1:      * @throws JMSException
1:      */
0:     public QueueSession createQueueSession(boolean transacted,
0:                                            int acknowledgeMode) throws JMSException {
1:         return new ActiveMQQueueSession(createSessionProxy(transacted, acknowledgeMode));
1:     }
1: 
1:     /**
0:      * @param transacted
0:      * @param acknowledgeMode
1:      * @return
1:      * @throws JMSException
1:      */
0:     public TopicSession createTopicSession(boolean transacted,
0:                                            int acknowledgeMode) throws JMSException {
1:         return new ActiveMQTopicSession(createSessionProxy(transacted, acknowledgeMode));
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public String getClientID() throws JMSException {
1:         return getConnection().getClientID();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public ExceptionListener getExceptionListener() throws JMSException {
1:         return getConnection().getExceptionListener();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws JMSException
1:      */
1:     public ConnectionMetaData getMetaData() throws JMSException {
1:         return getConnection().getMetaData();
1:     }
1: 
1:     /**
0:      * @param clientID
1:      * @throws JMSException
1:      */
1:     public void setClientID(String clientID) throws JMSException {
1:         getConnection().setClientID(clientID);
1:     }
1: 
1:     /**
0:      * @param listener
1:      * @throws JMSException
1:      */
0:     public void setExceptionListener(ExceptionListener listener)
0:             throws JMSException {
1:         getConnection();
1:         exceptionListener = listener;
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void start() throws JMSException {
1:         getConnection().start();
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void stop() throws JMSException {
1:         getConnection().stop();
1:     }
1: 
1: 
1:     /**
1:      * @param queue
1:      * @param messageSelector
1:      * @param sessionPool
1:      * @param maxMessages
1:      * @return
1:      * @throws JMSException
1:      */
0:     public ConnectionConsumer createConnectionConsumer(Queue queue,
0:                                                        String messageSelector, ServerSessionPool sessionPool,
0:                                                        int maxMessages) throws JMSException {
1:         throw new JMSException("Not Supported.");
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @param messageSelector
1:      * @param sessionPool
1:      * @param maxMessages
1:      * @return
1:      * @throws JMSException
1:      */
0:     public ConnectionConsumer createConnectionConsumer(Topic topic,
0:                                                        String messageSelector, ServerSessionPool sessionPool,
0:                                                        int maxMessages) throws JMSException {
1:         throw new JMSException("Not Supported.");
1:     }
1: 
1:     /**
1:      * @param destination
1:      * @param messageSelector
1:      * @param sessionPool
1:      * @param maxMessages
1:      * @return
1:      * @throws JMSException
1:      */
0:     public ConnectionConsumer createConnectionConsumer(Destination destination,
0:                                                        String messageSelector, ServerSessionPool sessionPool,
0:                                                        int maxMessages) throws JMSException {
1:         throw new JMSException("Not Supported.");
1:     }
1: 
1:     /**
1:      * @param topic
1:      * @param subscriptionName
1:      * @param messageSelector
1:      * @param sessionPool
1:      * @param maxMessages
1:      * @return
1:      * @throws JMSException
1:      */
0:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic,
0:                                                               String subscriptionName, String messageSelector,
0:                                                               ServerSessionPool sessionPool, int maxMessages) throws JMSException {
1:         throw new JMSException("Not Supported.");
1:     }
1: 
1:     /**
1:      * @return Returns the managedConnection.
1:      */
1:     public ActiveMQManagedConnection getManagedConnection() {
1:         return managedConnection;
1:     }
1: 
1:     public void onException(JMSException e) {
0:         if(exceptionListener!=null && managedConnection!=null) {
1:             try {
1:                 exceptionListener.onException(e);
1:             } catch (Throwable ignore) {
1:                 // We can never trust user code so ignore any exceptions.
1:             }
1:         }
1:     }
1: 
1: }
============================================================================