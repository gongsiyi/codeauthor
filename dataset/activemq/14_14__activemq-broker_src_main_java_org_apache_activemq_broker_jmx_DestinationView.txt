1:3f2c18d: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:3f2c18d:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f2c18d:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:3f2c18d:  */
1:3f2c18d: package org.apache.activemq.broker.jmx;
1:3f2c18d: 
1:6fc3744: import java.io.IOException;
1:7410257: import java.net.URISyntaxException;
1:6fc3744: import java.util.ArrayList;
1:6fc3744: import java.util.Collections;
1:dda5c93: import java.util.HashMap;
1:6fc3744: import java.util.Iterator;
1:6fc3744: import java.util.List;
1:6fc3744: import java.util.Map;
1:f58683e: import java.util.Map.Entry;
1:c6a485f: 
1:6fc3744: import javax.jms.Connection;
1:6fc3744: import javax.jms.InvalidSelectorException;
1:6fc3744: import javax.jms.MessageProducer;
1:6fc3744: import javax.jms.Session;
1:6fc3744: import javax.management.MalformedObjectNameException;
1:6fc3744: import javax.management.ObjectName;
1:6fc3744: import javax.management.openmbean.CompositeData;
1:6fc3744: import javax.management.openmbean.CompositeDataSupport;
1:6fc3744: import javax.management.openmbean.CompositeType;
1:6fc3744: import javax.management.openmbean.OpenDataException;
1:6fc3744: import javax.management.openmbean.TabularData;
1:6fc3744: import javax.management.openmbean.TabularDataSupport;
1:6fc3744: import javax.management.openmbean.TabularType;
1:785b16b: 
1:00879cf: import org.apache.activemq.ActiveMQConnectionFactory;
1:00879cf: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
1:00879cf: import org.apache.activemq.broker.region.Destination;
1:00879cf: import org.apache.activemq.broker.region.Subscription;
1:383d12e: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:383d12e: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
1:00879cf: import org.apache.activemq.command.ActiveMQDestination;
1:00879cf: import org.apache.activemq.command.ActiveMQMessage;
1:00879cf: import org.apache.activemq.command.ActiveMQTextMessage;
1:00879cf: import org.apache.activemq.command.Message;
1:00879cf: import org.apache.activemq.filter.BooleanExpression;
1:50d27e7: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:00879cf: import org.apache.activemq.selector.SelectorParser;
1:785b16b: import org.apache.activemq.store.MessageStore;
1:7410257: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3f2c18d: 
1:944f9d6: public class DestinationView implements DestinationViewMBean {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DestinationViewMBean.class);
1:3f2c18d:     protected final Destination destination;
1:ed5d43b:     protected final ManagedRegionBroker broker;
1:3f2c18d: 
1:230a86c:     public DestinationView(ManagedRegionBroker broker, Destination destination) {
1:ed5d43b:         this.broker = broker;
1:230a86c:         this.destination = destination;
1:3f2c18d:     }
1:83c3dca: 
1:d29ca2a:     public void gc() {
1:3f2c18d:         destination.gc();
1:3f2c18d:     }
1:83c3dca: 
1:0736953:     @Override
1:d680ba1:     public String getName() {
1:44493e4:         return destination.getName();
1:36722d8:     }
1:83c3dca: 
1:63a660a:     @Override
1:d29ca2a:     public void resetStatistics() {
1:3f2c18d:         destination.getDestinationStatistics().reset();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:d29ca2a:     public long getEnqueueCount() {
1:3f2c18d:         return destination.getDestinationStatistics().getEnqueues().getCount();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:d29ca2a:     public long getDequeueCount() {
1:3f2c18d:         return destination.getDestinationStatistics().getDequeues().getCount();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:25e3c1b:     public long getForwardCount() {
1:25e3c1b:         return destination.getDestinationStatistics().getForwards().getCount();
1:25e3c1b:     }
1:25e3c1b: 
1:25e3c1b:     @Override
1:36de58b:     public long getDispatchCount() {
1:36de58b:         return destination.getDestinationStatistics().getDispatched().getCount();
1:230a86c:     }
1:2a153b0: 
1:63a660a:     @Override
1:2a153b0:     public long getInFlightCount() {
1:2a153b0:         return destination.getDestinationStatistics().getInflight().getCount();
1:2a153b0:     }
1:3f2c18d: 
1:63a660a:     @Override
1:c6a485f:     public long getExpiredCount() {
1:c6a485f:         return destination.getDestinationStatistics().getExpired().getCount();
1:c6a485f:     }
1:3f2c18d: 
1:63a660a:     @Override
1:d29ca2a:     public long getConsumerCount() {
1:3f2c18d:         return destination.getDestinationStatistics().getConsumers().getCount();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:44493e4:     public long getQueueSize() {
1:3f2c18d:         return destination.getDestinationStatistics().getMessages().getCount();
1:3f2c18d:     }
1:3f2c18d: 
1:785b16b:     @Override
1:785b16b:     public long getStoreMessageSize() {
1:785b16b:         MessageStore messageStore = destination.getMessageStore();
1:785b16b:         return messageStore != null ? messageStore.getMessageStoreStatistics().getMessageSize().getTotalSize() : 0;
1:785b16b:     }
1:785b16b: 
1:d29ca2a:     public long getMessagesCached() {
1:3f2c18d:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:23cda2d:     public int getMemoryPercentUsage() {
1:83c3dca:         return destination.getMemoryUsage().getPercentUsage();
1:3f2c18d:     }
1:3f2c18d: 
1:63a660a:     @Override
1:90eb05c:     public long getMemoryUsageByteCount() {
1:90eb05c:         return destination.getMemoryUsage().getUsage();
1:3f2c18d:     }
1:fe63c29: 
1:63a660a:     @Override
1:36722d8:     public long getMemoryLimit() {
1:83c3dca:         return destination.getMemoryUsage().getLimit();
1:3f2c18d:     }
1:90eb05c: 
1:63a660a:     @Override
1:36722d8:     public void setMemoryLimit(long limit) {
1:83c3dca:         destination.getMemoryUsage().setLimit(limit);
1:3f2c18d:     }
1:c07b233: 
1:63a660a:     @Override
1:230a86c:     public double getAverageEnqueueTime() {
1:c07b233:         return destination.getDestinationStatistics().getProcessTime().getAverageTime();
1:c07b233:     }
1:c07b233: 
1:63a660a:     @Override
1:230a86c:     public long getMaxEnqueueTime() {
1:c07b233:         return destination.getDestinationStatistics().getProcessTime().getMaxTime();
1:c07b233:     }
1:c07b233: 
1:63a660a:     @Override
1:230a86c:     public long getMinEnqueueTime() {
1:c07b233:         return destination.getDestinationStatistics().getProcessTime().getMinTime();
1:c07b233:     }
1:00879cf: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the average size of a message (bytes)
1:f71e2fe:      */
1:457dbd8:     @Override
1:dbf2c28:     public long getAverageMessageSize() {
1:dbf2c28:         // we are okay with the size without decimals so cast to long
1:dbf2c28:         return (long) destination.getDestinationStatistics().getMessageSize().getAverageSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the max size of a message (bytes)
1:f71e2fe:      */
1:457dbd8:     @Override
1:f71e2fe:     public long getMaxMessageSize() {
1:f71e2fe:         return destination.getDestinationStatistics().getMessageSize().getMaxSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the min size of a message (bytes)
1:f71e2fe:      */
1:457dbd8:     @Override
1:f71e2fe:     public long getMinMessageSize() {
1:f71e2fe:         return destination.getDestinationStatistics().getMessageSize().getMinSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe: 
1:63a660a:     @Override
1:00879cf:     public boolean isPrioritizedMessages() {
1:00879cf:         return destination.isPrioritizedMessages();
1:00879cf:     }
1:c07b233: 
1:63a660a:     @Override
1:230a86c:     public CompositeData[] browse() throws OpenDataException {
1:944f9d6:         try {
1:944f9d6:             return browse(null);
1:944f9d6:         } catch (InvalidSelectorException e) {
1:944f9d6:             // should not happen.
1:944f9d6:             throw new RuntimeException(e);
1:90eb05c:         }
1:944f9d6:     }
1:90eb05c: 
1:63a660a:     @Override
1:230a86c:     public CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException {
1:230a86c:         Message[] messages = destination.browse();
1:933eb2f:         ArrayList<CompositeData> c = new ArrayList<CompositeData>();
1:90eb05c: 
1:50d27e7:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
1:944f9d6:         ctx.setDestination(destination.getActiveMQDestination());
1:1ab76f7:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
1:5016ecd: 
1:230a86c:         for (int i = 0; i < messages.length; i++) {
1:230a86c:             try {
1:5016ecd: 
1:230a86c:                 if (selectorExpression == null) {
1:944f9d6:                     c.add(OpenTypeSupport.convert(messages[i]));
1:944f9d6:                 } else {
1:944f9d6:                     ctx.setMessageReference(messages[i]);
1:230a86c:                     if (selectorExpression.matches(ctx)) {
1:944f9d6:                         c.add(OpenTypeSupport.convert(messages[i]));
1:944f9d6:                     }
1:944f9d6:                 }
1:5016ecd: 
1:230a86c:             } catch (Throwable e) {
1:fc00993:                 LOG.warn("exception browsing destination", e);
1:944f9d6:             }
1:36722d8:         }
1:230a86c: 
1:230a86c:         CompositeData rc[] = new CompositeData[c.size()];
1:944f9d6:         c.toArray(rc);
1:3f2c18d:         return rc;
1:3f2c18d:     }
1:230a86c: 
1:d29ca2a:     /**
1:9b07e43:      * Browses the current destination returning a list of messages
1:d29ca2a:      */
1:63a660a:     @Override
1:933eb2f:     public List<Object> browseMessages() throws InvalidSelectorException {
1:9b07e43:         return browseMessages(null);
1:3f2c18d:     }
1:230a86c: 
2:9b07e43:     /**
1:230a86c:      * Browses the current destination with the given selector returning a list
1:230a86c:      * of messages
2:9b07e43:      */
1:63a660a:     @Override
1:933eb2f:     public List<Object> browseMessages(String selector) throws InvalidSelectorException {
1:9b07e43:         Message[] messages = destination.browse();
1:933eb2f:         ArrayList<Object> answer = new ArrayList<Object>();
1:230a86c: 
1:50d27e7:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
1:9b07e43:         ctx.setDestination(destination.getActiveMQDestination());
1:1ab76f7:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
1:230a86c: 
1:9b07e43:         for (int i = 0; i < messages.length; i++) {
1:944f9d6:             try {
1:9b07e43:                 Message message = messages[i];
1:a713e6a:                 message.setReadOnlyBody(true);
1:9b07e43:                 if (selectorExpression == null) {
1:5016ecd:                     answer.add(message);
1:230a86c:                 } else {
1:9b07e43:                     ctx.setMessageReference(message);
1:9b07e43:                     if (selectorExpression.matches(ctx)) {
1:9b07e43:                         answer.add(message);
1:230a86c:                     }
1:944f9d6:                 }
1:230a86c: 
1:230a86c:             } catch (Throwable e) {
1:fc00993:                 LOG.warn("exception browsing destination", e);
1:944f9d6:             }
1:36722d8:         }
1:9b07e43:         return answer;
3:d29ca2a:     }
1:c6a485f: 
1:63a660a:     @Override
1:230a86c:     public TabularData browseAsTable() throws OpenDataException {
1:07d4e8c:         try {
1:944f9d6:             return browseAsTable(null);
1:944f9d6:         } catch (InvalidSelectorException e) {
1:944f9d6:             throw new RuntimeException(e);
1:944f9d6:         }
1:944f9d6:     }
1:230a86c: 
1:63a660a:     @Override
1:230a86c:     public TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException {
1:230a86c:         OpenTypeFactory factory = OpenTypeSupport.getFactory(ActiveMQMessage.class);
1:230a86c:         Message[] messages = destination.browse();
1:230a86c:         CompositeType ct = factory.getCompositeType();
1:48764be:         TabularType tt = new TabularType("MessageList", "MessageList", ct, new String[] { "JMSMessageID" });
1:230a86c:         TabularDataSupport rc = new TabularDataSupport(tt);
1:230a86c: 
1:50d27e7:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
1:944f9d6:         ctx.setDestination(destination.getActiveMQDestination());
1:1ab76f7:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
1:230a86c: 
1:230a86c:         for (int i = 0; i < messages.length; i++) {
1:944f9d6:             try {
1:230a86c:                 if (selectorExpression == null) {
1:230a86c:                     rc.put(new CompositeDataSupport(ct, factory.getFields(messages[i])));
1:944f9d6:                 } else {
1:944f9d6:                     ctx.setMessageReference(messages[i]);
1:230a86c:                     if (selectorExpression.matches(ctx)) {
1:230a86c:                         rc.put(new CompositeDataSupport(ct, factory.getFields(messages[i])));
1:944f9d6:                     }
1:d29ca2a:                 }
1:230a86c:             } catch (Throwable e) {
1:fc00993:                 LOG.warn("exception browsing destination", e);
1:d29ca2a:             }
1:d29ca2a:         }
1:230a86c: 
1:944f9d6:         return rc;
1:d29ca2a:     }
3:230a86c: 
1:63a660a:     @Override
1:dda5c93:     public String sendTextMessageWithProperties(String properties) throws Exception {
1:dda5c93:         String[] kvs = properties.split(",");
1:dda5c93:         Map<String, String> props = new HashMap<String, String>();
1:dda5c93:         for (String kv : kvs) {
1:dda5c93:             String[] it = kv.split("=");
1:dda5c93:             if (it.length == 2) {
1:dda5c93:                 props.put(it[0],it[1]);
1:dda5c93:             }
1:dda5c93:         }
1:dda5c93:         return sendTextMessage(props, props.remove("body"), props.remove("username"), props.remove("password"));
1:dda5c93:     }
1:dda5c93: 
1:dda5c93:     @Override
1:07d4e8c:     public String sendTextMessage(String body) throws Exception {
1:230a86c:         return sendTextMessage(Collections.EMPTY_MAP, body);
1:07d4e8c:     }
1:5cd2921: 
1:63a660a:     @Override
1:07d4e8c:     public String sendTextMessage(Map headers, String body) throws Exception {
1:48764be:         return sendTextMessage(headers, body, null, null);
1:5cd2921:     }
1:5cd2921: 
1:63a660a:     @Override
1:a65ac58:     public String sendTextMessage(String body, String user, @Sensitive String password) throws Exception {
1:48764be:         return sendTextMessage(Collections.EMPTY_MAP, body, user, password);
1:5cd2921:     }
1:5cd2921: 
1:63a660a:     @Override
1:a65ac58:     public String sendTextMessage(Map<String, String> headers, String body, String userName, @Sensitive String password) throws Exception {
1:230a86c: 
1:230a86c:         String brokerUrl = "vm://" + broker.getBrokerName();
1:230a86c:         ActiveMQDestination dest = destination.getActiveMQDestination();
1:230a86c: 
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUrl);
1:230a86c:         Connection connection = null;
1:230a86c:         try {
1:48764be:             connection = cf.createConnection(userName, password);
1:230a86c:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:             MessageProducer producer = session.createProducer(dest);
1:07d4e8c:             ActiveMQTextMessage msg = (ActiveMQTextMessage) session.createTextMessage(body);
1:230a86c: 
1:f58683e:             for (Iterator<Entry<String, String>> iter = headers.entrySet().iterator(); iter.hasNext();) {
1:f58683e:                 Entry<String, String> entry = iter.next();
1:f58683e:                 msg.setObjectProperty(entry.getKey(), entry.getValue());
1:230a86c:             }
1:230a86c: 
1:230a86c:             producer.setDeliveryMode(msg.getJMSDeliveryMode());
1:230a86c:             producer.setPriority(msg.getPriority());
1:fc8c8d3:             long ttl = 0;
1:fc8c8d3:             if (msg.getExpiration() != 0) {
1:fc8c8d3:                 ttl = msg.getExpiration() - System.currentTimeMillis();
1:fc8c8d3:             } else {
1:fc8c8d3:                 String timeToLive = headers.get("timeToLive");
1:fc8c8d3:                 if (timeToLive != null) {
1:fc8c8d3:                     ttl = Integer.valueOf(timeToLive);
1:fc8c8d3:                 }
1:fc8c8d3:             }
1:230a86c:             producer.setTimeToLive(ttl > 0 ? ttl : 0);
1:230a86c:             producer.send(msg);
1:230a86c: 
1:230a86c:             return msg.getJMSMessageID();
1:230a86c: 
1:230a86c:         } finally {
1:f58683e:             if (connection != null) {
1:f58683e:                 connection.close();
1:f58683e:             }
1:230a86c:         }
1:07d4e8c:     }
1:230a86c: 
1:63a660a:     @Override
1:83c3dca:     public int getMaxAuditDepth() {
1:83c3dca:         return destination.getMaxAuditDepth();
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public int getMaxProducersToAudit() {
1:83c3dca:         return destination.getMaxProducersToAudit();
1:83c3dca:     }
1:83c3dca: 
1:83c3dca:     public boolean isEnableAudit() {
1:83c3dca:         return destination.isEnableAudit();
1:83c3dca:     }
1:83c3dca: 
1:83c3dca:     public void setEnableAudit(boolean enableAudit) {
1:83c3dca:         destination.setEnableAudit(enableAudit);
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public void setMaxAuditDepth(int maxAuditDepth) {
1:83c3dca:         destination.setMaxAuditDepth(maxAuditDepth);
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public void setMaxProducersToAudit(int maxProducersToAudit) {
1:83c3dca:         destination.setMaxProducersToAudit(maxProducersToAudit);
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:23cda2d:     public float getMemoryUsagePortion() {
1:83c3dca:         return destination.getMemoryUsage().getUsagePortion();
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public long getProducerCount() {
1:83c3dca:         return destination.getDestinationStatistics().getProducers().getCount();
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public boolean isProducerFlowControl() {
1:83c3dca:         return destination.isProducerFlowControl();
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:23cda2d:     public void setMemoryUsagePortion(float value) {
1:83c3dca:         destination.getMemoryUsage().setUsagePortion(value);
1:83c3dca:     }
1:83c3dca: 
1:63a660a:     @Override
1:83c3dca:     public void setProducerFlowControl(boolean producerFlowControl) {
1:83c3dca:         destination.setProducerFlowControl(producerFlowControl);
1:83c3dca:     }
1:4dde323: 
1:63a660a:     @Override
1:fe63c29:     public boolean isAlwaysRetroactive() {
1:fe63c29:         return destination.isAlwaysRetroactive();
1:fe63c29:     }
1:83c3dca: 
1:63a660a:     @Override
1:fe63c29:     public void setAlwaysRetroactive(boolean alwaysRetroactive) {
1:fe63c29:         destination.setAlwaysRetroactive(alwaysRetroactive);
1:fe63c29:     }
1:fe63c29: 
1:48764be:     /**
1:48764be:      * Set's the interval at which warnings about producers being blocked by
1:48764be:      * resource usage will be triggered. Values of 0 or less will disable
1:48764be:      * warnings
1:3f2c18d:      *
1:48764be:      * @param blockedProducerWarningInterval the interval at which warning about
1:48764be:      *            blocked producers will be triggered.
1:48764be:      */
1:63a660a:     @Override
1:48764be:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval) {
1:48764be:         destination.setBlockedProducerWarningInterval(blockedProducerWarningInterval);
1:07d4e8c:     }
1:230a86c: 
1:48764be:     /**
1:3f2c18d:      *
1:48764be:      * @return the interval at which warning about blocked producers will be
1:48764be:      *         triggered.
1:48764be:      */
1:63a660a:     @Override
1:48764be:     public long getBlockedProducerWarningInterval() {
1:48764be:         return destination.getBlockedProducerWarningInterval();
1:07d4e8c:     }
1:230a86c: 
1:63a660a:     @Override
1:4dde323:     public int getMaxPageSize() {
1:4dde323:         return destination.getMaxPageSize();
1:4dde323:     }
1:4dde323: 
1:63a660a:     @Override
1:4dde323:     public void setMaxPageSize(int pageSize) {
1:4dde323:         destination.setMaxPageSize(pageSize);
1:4dde323:     }
1:4dde323: 
1:63a660a:     @Override
1:4dde323:     public boolean isUseCache() {
1:4dde323:         return destination.isUseCache();
1:4dde323:     }
1:4dde323: 
1:63a660a:     @Override
1:4dde323:     public void setUseCache(boolean value) {
1:4dde323:         destination.setUseCache(value);
1:5cd2921:     }
1:230a86c: 
1:63a660a:     @Override
1:947659c:     public ObjectName[] getSubscriptions() throws IOException, MalformedObjectNameException {
1:947659c:         List<Subscription> subscriptions = destination.getConsumers();
1:947659c:         ObjectName[] answer = new ObjectName[subscriptions.size()];
1:63a660a:         ObjectName brokerObjectName = broker.getBrokerService().getBrokerObjectName();
1:947659c:         int index = 0;
1:947659c:         for (Subscription subscription : subscriptions) {
1:947659c:             String connectionClientId = subscription.getContext().getClientId();
1:7d7d6fa:             answer[index++] = BrokerMBeanSupport.createSubscriptionName(brokerObjectName, connectionClientId, subscription.getConsumerInfo());
1:4dde323:         }
1:947659c:         return answer;
1:d29ca2a:     }
1:230a86c: 
1:63a660a:     @Override
1:383d12e:     public ObjectName getSlowConsumerStrategy() throws IOException, MalformedObjectNameException {
1:383d12e:         ObjectName result = null;
1:383d12e:         SlowConsumerStrategy strategy = destination.getSlowConsumerStrategy();
1:383d12e:         if (strategy != null && strategy instanceof AbortSlowConsumerStrategy) {
1:383d12e:             result = broker.registerSlowConsumerStrategy((AbortSlowConsumerStrategy)strategy);
1:383d12e:         }
1:383d12e:         return result;
1:383d12e:     }
1:383d12e: 
1:63a660a:     @Override
1:7410257:     public String getOptions() {
1:7410257:         Map<String, String> options = destination.getActiveMQDestination().getOptions();
1:7410257:         String optionsString = "";
1:7410257:         try {
1:7410257:             if (options != null) {
1:7410257:                 optionsString = URISupport.createQueryString(options);
1:7410257:             }
1:7410257:         } catch (URISyntaxException ignored) {}
1:7410257:         return optionsString;
1:7410257:     }
1:7410257: 
1:e1f170d:     @Override
1:e1f170d:     public boolean isDLQ() {
1:be919fb:         return destination.getActiveMQDestination().isDLQ();
1:e1f170d:     }
1:e1f170d: 
1:63a660a:     @Override
1:d2c0edd:     public void setDLQ(boolean val) {
1:d2c0edd:          destination.getActiveMQDestination().setDLQ(val);
1:d2c0edd:     }
1:d2c0edd: 
1:d2c0edd:     @Override
1:0736953:     public long getBlockedSends() {
1:0736953:         return destination.getDestinationStatistics().getBlockedSends().getCount();
1:0736953:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public double getAverageBlockedTime() {
1:0736953:         return destination.getDestinationStatistics().getBlockedTime().getAverageTime();
1:0736953:     }
1:0736953: 
1:0736953:     @Override
1:0736953:     public long getTotalBlockedTime() {
1:0736953:         return destination.getDestinationStatistics().getBlockedTime().getTotalTime();
1:0736953:     }
1:0736953: 
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
/////////////////////////////////////////////////////////////////////////
1:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
/////////////////////////////////////////////////////////////////////////
1:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
/////////////////////////////////////////////////////////////////////////
1:         NonCachedMessageEvaluationContext ctx = new NonCachedMessageEvaluationContext();
commit:d2c0edd
/////////////////////////////////////////////////////////////////////////
1:     public void setDLQ(boolean val) {
1:          destination.getActiveMQDestination().setDLQ(val);
1:     }
1: 
1:     @Override
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1:         return destination.getActiveMQDestination().isDLQ();
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1:     public long getForwardCount() {
1:         return destination.getDestinationStatistics().getForwards().getCount();
1:     }
1: 
1:     @Override
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f58683e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator<Entry<String, String>> iter = headers.entrySet().iterator(); iter.hasNext();) {
1:                 Entry<String, String> entry = iter.next();
1:                 msg.setObjectProperty(entry.getKey(), entry.getValue());
/////////////////////////////////////////////////////////////////////////
1:             if (connection != null) {
1:                 connection.close();
1:             }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:457dbd8
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.MessageStore;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public long getStoreMessageSize() {
1:         MessageStore messageStore = destination.getMessageStore();
1:         return messageStore != null ? messageStore.getMessageStoreStatistics().getMessageSize().getTotalSize() : 0;
1:     }
1: 
author:Martyn Taylor
-------------------------------------------------------------------------------
commit:a65ac58
/////////////////////////////////////////////////////////////////////////
1:     public String sendTextMessage(String body, String user, @Sensitive String password) throws Exception {
1:     public String sendTextMessage(Map<String, String> headers, String body, String userName, @Sensitive String password) throws Exception {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:dbf2c28
/////////////////////////////////////////////////////////////////////////
1:     public long getAverageMessageSize() {
1:         // we are okay with the size without decimals so cast to long
1:         return (long) destination.getDestinationStatistics().getMessageSize().getAverageSize();
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the average size of a message (bytes)
1:      */
0:     public double getAverageMessageSize() {
0:         return destination.getDestinationStatistics().getMessageSize().getAverageSize();
1:     }
1: 
1:     /**
1:      * @return the max size of a message (bytes)
1:      */
1:     public long getMaxMessageSize() {
1:         return destination.getDestinationStatistics().getMessageSize().getMaxSize();
1:     }
1: 
1:     /**
1:      * @return the min size of a message (bytes)
1:      */
1:     public long getMinMessageSize() {
1:         return destination.getDestinationStatistics().getMessageSize().getMinSize();
1:     }
1: 
1: 
commit:0736953
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public long getBlockedSends() {
1:         return destination.getDestinationStatistics().getBlockedSends().getCount();
1:     }
1: 
1:     @Override
1:     public double getAverageBlockedTime() {
1:         return destination.getDestinationStatistics().getBlockedTime().getAverageTime();
1:     }
1: 
1:     @Override
1:     public long getTotalBlockedTime() {
1:         return destination.getDestinationStatistics().getBlockedTime().getTotalTime();
1:     }
1: 
commit:a713e6a
/////////////////////////////////////////////////////////////////////////
1:                 message.setReadOnlyBody(true);
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.BooleanExpression;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.selector.SelectorParser;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isPrioritizedMessages() {
1:         return destination.isPrioritizedMessages();
1:     }
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import javax.jms.Connection;
1: import javax.jms.InvalidSelectorException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import javax.management.openmbean.TabularType;
commit:5cd2921
/////////////////////////////////////////////////////////////////////////
1:     
0:         return sendTextMessage(headers,body,null,null);
1:     }
1: 
0:     public String sendTextMessage(String body, String user, String password) throws Exception {
0:         return sendTextMessage(Collections.EMPTY_MAP,body,null,null);
1:     }
1: 
0:     public String sendTextMessage(Map headers, String body,String userName,String password) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             connection = cf.createConnection(userName,password);
/////////////////////////////////////////////////////////////////////////
1:     }  
commit:4dde323
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Queue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxPageSize() {
1:         return destination.getMaxPageSize();
1:     }
1:     
1:     public void setMaxPageSize(int pageSize) {
1:         destination.setMaxPageSize(pageSize);
1:     }
1:     
1:     public boolean isUseCache() {
1:         return destination.isUseCache();
1:     }
1: 
1:     public void setUseCache(boolean value) {
1:         destination.setUseCache(value);    
1:     }
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1:     
1:     public long getInFlightCount() {
1:         return destination.getDestinationStatistics().getInflight().getCount();
1:     }
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1:     public int getMemoryPercentUsage() {
/////////////////////////////////////////////////////////////////////////
1:     public float getMemoryUsagePortion() {
/////////////////////////////////////////////////////////////////////////
1:     public void setMemoryUsagePortion(float value) {
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:         return destination.getMemoryUsage().getPercentUsage();
1:         return destination.getMemoryUsage().getLimit();
1:         destination.getMemoryUsage().setLimit(limit);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxAuditDepth() {
1:         return destination.getMaxAuditDepth();
1:      }
1: 
1:      public int getMaxProducersToAudit() {
1:          return destination.getMaxProducersToAudit();
1:      }
1: 
1:      public boolean isEnableAudit() {
1:          return destination.isEnableAudit();
1:      }
1: 
1:      
1:      public void setEnableAudit(boolean enableAudit) {
1:          destination.setEnableAudit(enableAudit);
1:      }
1: 
1:      public void setMaxAuditDepth(int maxAuditDepth) {
1:          destination.setMaxAuditDepth(maxAuditDepth);
1:      }
1:  
1:      public void setMaxProducersToAudit(int maxProducersToAudit) {
1:          destination.setMaxProducersToAudit(maxProducersToAudit);
1:      }
1: 
1:     
0:     public float getMemoryLimitPortion() {
1:         return destination.getMemoryUsage().getUsagePortion();
1:     }
1: 
1:     public long getProducerCount() {
1:         return destination.getDestinationStatistics().getProducers().getCount();
1:     }
1: 
1:     public boolean isProducerFlowControl() {
1:        return destination.isProducerFlowControl();
1:     }
1:     
0:     public void setMemoryLimitPortion(float value) {
1:         destination.getMemoryUsage().setUsagePortion(value);
1:     }
1: 
1:     public void setProducerFlowControl(boolean producerFlowControl) {
1:       destination.setProducerFlowControl(producerFlowControl);      
1:     }
1:   
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
0:         return destination.getBrokerMemoryUsage().getPercentUsage();
0:         return destination.getBrokerMemoryUsage().getLimit();
0:         destination.getBrokerMemoryUsage().setLimit(limit);
commit:c07b233
/////////////////////////////////////////////////////////////////////////
1:     
0:     public double getAverageEnqueueTime(){
1:         return destination.getDestinationStatistics().getProcessTime().getAverageTime();
1:     }
1: 
0:     public long getMaxEnqueueTime(){
1:         return destination.getDestinationStatistics().getProcessTime().getMaxTime();
1:     }
1: 
0:     public long getMinEnqueueTime(){
1:         return destination.getDestinationStatistics().getProcessTime().getMinTime();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:3c9a89a
/////////////////////////////////////////////////////////////////////////
commit:fe0243a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(DestinationViewMBean.class);
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("exception browsing destination",e);
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("exception browsing destination",e);
/////////////////////////////////////////////////////////////////////////
0:                 log.warn("exception browsing destination",e);
commit:3f2c18d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
0: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.CompositeDataSupport;
0: import javax.management.openmbean.CompositeType;
0: import javax.management.openmbean.OpenDataException;
0: import javax.management.openmbean.TabularData;
0: import javax.management.openmbean.TabularDataSupport;
0: import javax.management.openmbean.TabularType;
0: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.Message;
1: 
0: public class DestinationView {
1:     protected final Destination destination;
1: 
0:     public DestinationView(Destination destination){
0:         this.destination=destination;
1:     }
1: 
0:     public void gc(){
1:         destination.gc();
1:     }
1: 
0:     public void resetStatistics(){
1:         destination.getDestinationStatistics().reset();
1:     }
1: 
0:     public long getEnqueueCount(){
1:         return destination.getDestinationStatistics().getEnqueues().getCount();
1:     }
1: 
0:     public long getDequeueCount(){
1:         return destination.getDestinationStatistics().getDequeues().getCount();
1:     }
1: 
0:     public long getConsumerCount(){
1:         return destination.getDestinationStatistics().getConsumers().getCount();
1:     }
1: 
0:     public long getMessages(){
1:         return destination.getDestinationStatistics().getMessages().getCount();
1:     }
1: 
0:     public long getMessagesCached(){
1:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:     }
1: 
0:     public CompositeData[] browse() throws OpenDataException{
0:         Message[] messages=destination.browse();
0:         CompositeData c[]=new CompositeData[messages.length];
0:         for(int i=0;i<c.length;i++){
0:             try{
0:                 c[i]=OpenTypeSupport.convert(messages[i]);
0:             }catch(Throwable e){
0:                 e.printStackTrace();
1:             }
1:         }
0:         return c;
1:     }
1: 
0:     public TabularData browseAsTable() throws OpenDataException{
0:         OpenTypeFactory factory=OpenTypeSupport.getFactory(ActiveMQMessage.class);
0:         Message[] messages=destination.browse();
0:         CompositeType ct=factory.getCompositeType();
0:         TabularType tt=new TabularType("MessageList","MessageList",ct,new String[] { "JMSMessageID" });
0:         TabularDataSupport rc=new TabularDataSupport(tt);
0:         for(int i=0;i<messages.length;i++){
0:             rc.put(new CompositeDataSupport(ct,factory.getFields(messages[i])));
1:         }
1:         return rc;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:dda5c93
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:     public String sendTextMessageWithProperties(String properties) throws Exception {
1:         String[] kvs = properties.split(",");
1:         Map<String, String> props = new HashMap<String, String>();
1:         for (String kv : kvs) {
1:             String[] it = kv.split("=");
1:             if (it.length == 2) {
1:                 props.put(it[0],it[1]);
1:             }
1:         }
1:         return sendTextMessage(props, props.remove("body"), props.remove("username"), props.remove("password"));
1:     }
1: 
1:     @Override
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1:             answer[index++] = BrokerMBeanSupport.createSubscriptionName(brokerObjectName, connectionClientId, subscription.getConsumerInfo());
commit:7410257
/////////////////////////////////////////////////////////////////////////
1: import java.net.URISyntaxException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:     public String getOptions() {
1:         Map<String, String> options = destination.getActiveMQDestination().getOptions();
1:         String optionsString = "";
1:         try {
1:             if (options != null) {
1:                 optionsString = URISupport.createQueryString(options);
1:             }
1:         } catch (URISyntaxException ignored) {}
1:         return optionsString;
1:     }
1: 
commit:caca105
/////////////////////////////////////////////////////////////////////////
0:             String objectNameStr = ManagedRegionBroker.getSubscriptionObjectName(subscription.getConsumerInfo(), connectionClientId, objectName);
commit:fe63c29
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isAlwaysRetroactive() {
1:     	return destination.isAlwaysRetroactive();
1:     }
1:     
1:     public void setAlwaysRetroactive(boolean alwaysRetroactive) {
1:     	destination.setAlwaysRetroactive(alwaysRetroactive);
1:     }
commit:383d12e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.SlowConsumerStrategy;
/////////////////////////////////////////////////////////////////////////
1:     public ObjectName getSlowConsumerStrategy() throws IOException, MalformedObjectNameException {
1:         ObjectName result = null;
1:         SlowConsumerStrategy strategy = destination.getSlowConsumerStrategy();
1:         if (strategy != null && strategy instanceof AbortSlowConsumerStrategy) {
1:             result = broker.registerSlowConsumerStrategy((AbortSlowConsumerStrategy)strategy);
1:         }
1:         return result;
1:     }
1: 
commit:c6a485f
/////////////////////////////////////////////////////////////////////////
1:     
1:     public long getExpiredCount() {
1:         return destination.getDestinationStatistics().getExpired().getCount();
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fc8c8d3
/////////////////////////////////////////////////////////////////////////
0:     public String sendTextMessage(Map<String, String> headers, String body, String userName, String password) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             long ttl = 0;
1:             if (msg.getExpiration() != 0) {
1:                 ttl = msg.getExpiration() - System.currentTimeMillis();
1:             } else {
1:                 String timeToLive = headers.get("timeToLive");
1:                 if (timeToLive != null) {
1:                     ttl = Integer.valueOf(timeToLive);
1:                 }
1:             }
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean isDLQ() {
0:         return destination.isDLQ();
1:     }
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DestinationViewMBean.class);
commit:c43eda3
/////////////////////////////////////////////////////////////////////////
0:         return sendTextMessage(Collections.EMPTY_MAP,body,user,password);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:63a660a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:         ObjectName brokerObjectName = broker.getBrokerService().getBrokerObjectName();
0:             answer[index++] = BrokerMBeanSuppurt.createSubscriptionName(brokerObjectName, connectionClientId, subscription.getConsumerInfo());
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:90eb05c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public long getMemoryUsageByteCount() {
1:         return destination.getMemoryUsage().getUsage();
1:     }
1: 
commit:5016ecd
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                     answer.add(message);
/////////////////////////////////////////////////////////////////////////
1: 
0:         return destination.isAlwaysRetroactive();
1: 
0:         destination.setAlwaysRetroactive(alwaysRetroactive);
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<CompositeData> c = new ArrayList<CompositeData>();
/////////////////////////////////////////////////////////////////////////
1:     public List<Object> browseMessages() throws InvalidSelectorException {
/////////////////////////////////////////////////////////////////////////
1:     public List<Object> browseMessages(String selector) throws InvalidSelectorException {
1:         ArrayList<Object> answer = new ArrayList<Object>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DestinationViewMBean.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("exception browsing destination", e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("exception browsing destination", e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("exception browsing destination", e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public DestinationView(ManagedRegionBroker broker, Destination destination) {
1:         this.destination = destination;
/////////////////////////////////////////////////////////////////////////
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
0:         destination.getUsageManager().setLimit(limit);
1: 
1:     public double getAverageEnqueueTime() {
1:     public long getMaxEnqueueTime() {
1:     public long getMinEnqueueTime() {
1:     public CompositeData[] browse() throws OpenDataException {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException {
1:         Message[] messages = destination.browse();
1: 
0:         BooleanExpression selectorExpression = selector == null ? null : new SelectorParser().parse(selector);
1: 
1:         for (int i = 0; i < messages.length; i++) {
1:             try {
1: 
1:                 if (selectorExpression == null) {
1:                     if (selectorExpression.matches(ctx)) {
1: 
1:             } catch (Throwable e) {
0:                 log.warn("exception browsing destination", e);
1: 
1:         CompositeData rc[] = new CompositeData[c.size()];
1: 
1:     }
1: 
1:      * Browses the current destination with the given selector returning a list
1:      * of messages
/////////////////////////////////////////////////////////////////////////
1:                 } else {
1:             } catch (Throwable e) {
0:                 log.warn("exception browsing destination", e);
1:     public TabularData browseAsTable() throws OpenDataException {
1: 
1:     public TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException {
1:         OpenTypeFactory factory = OpenTypeSupport.getFactory(ActiveMQMessage.class);
1:         Message[] messages = destination.browse();
1:         CompositeType ct = factory.getCompositeType();
0:         TabularType tt = new TabularType("MessageList", "MessageList", ct, new String[] {"JMSMessageID"});
1:         TabularDataSupport rc = new TabularDataSupport(tt);
1: 
0:         BooleanExpression selectorExpression = selector == null ? null : new SelectorParser().parse(selector);
1: 
1:         for (int i = 0; i < messages.length; i++) {
1:                 if (selectorExpression == null) {
1:                     rc.put(new CompositeDataSupport(ct, factory.getFields(messages[i])));
1:                     if (selectorExpression.matches(ctx)) {
1:                         rc.put(new CompositeDataSupport(ct, factory.getFields(messages[i])));
1:             } catch (Throwable e) {
0:                 log.warn("exception browsing destination", e);
1: 
1: 
1:         return sendTextMessage(Collections.EMPTY_MAP, body);
1: 
1: 
1:         String brokerUrl = "vm://" + broker.getBrokerName();
1:         ActiveMQDestination dest = destination.getActiveMQDestination();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUrl);
1:         Connection connection = null;
1:         try {
1: 
0:             connection = cf.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(dest);
0:             ActiveMQTextMessage msg = (ActiveMQTextMessage)session.createTextMessage(body);
1: 
0:             for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
0:                 Map.Entry entry = (Map.Entry)iter.next();
0:                 msg.setObjectProperty((String)entry.getKey(), entry.getValue());
1:             }
1: 
1:             producer.setDeliveryMode(msg.getJMSDeliveryMode());
1:             producer.setPriority(msg.getPriority());
0:             long ttl = msg.getExpiration() - System.currentTimeMillis();
1:             producer.setTimeToLive(ttl > 0 ? ttl : 0);
1:             producer.send(msg);
1: 
1:             return msg.getJMSMessageID();
1: 
1:         } finally {
0:             connection.close();
1:         }
1: 
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:944f9d6
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import javax.jms.InvalidSelectorException;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.filter.BooleanExpression;
0: import org.apache.activemq.filter.MessageEvaluationContext;
0: import org.apache.activemq.selector.SelectorParser;
1: public class DestinationView implements DestinationViewMBean {
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             return browse(null);
1:         } catch (InvalidSelectorException e) {
1:             // should not happen.
1:             throw new RuntimeException(e);
1:         }
1:     }
0:     
0:     public CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException{
0:         ArrayList c = new ArrayList();
0:                 
0:         MessageEvaluationContext ctx = new MessageEvaluationContext();
1:         ctx.setDestination(destination.getActiveMQDestination());
0:         BooleanExpression selectorExpression = selector==null ? null : new SelectorParser().parse(selector);
0:         
0:         for(int i=0;i<messages.length;i++){
0:                 
0:                 if( selectorExpression==null ) {
1:                     c.add(OpenTypeSupport.convert(messages[i]));
1:                 } else {
1:                     ctx.setMessageReference(messages[i]);
0:                     if ( selectorExpression.matches(ctx) ) {
1:                         c.add(OpenTypeSupport.convert(messages[i]));
1:                     }
1:                 }
0:                 
0:             } catch(Throwable e) {
0:         
0:         CompositeData rc[]=new CompositeData[c.size()];
1:         c.toArray(rc);
1:         return rc;
1:         try {
1:             return browseAsTable(null);
1:         } catch (InvalidSelectorException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
0:     
0:     public TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException{
0:         
0:         
0:         MessageEvaluationContext ctx = new MessageEvaluationContext();
1:         ctx.setDestination(destination.getActiveMQDestination());
0:         BooleanExpression selectorExpression = selector==null ? null : new SelectorParser().parse(selector);
0:         
1:             try {
0:                 if( selectorExpression==null ) {
0:                     rc.put(new CompositeDataSupport(ct,factory.getFields(messages[i])));
1:                 } else {
1:                     ctx.setMessageReference(messages[i]);
0:                     if ( selectorExpression.matches(ctx) ) {
0:                         rc.put(new CompositeDataSupport(ct,factory.getFields(messages[i])));
1:                     }
1:                 }
0:                 rc.put(new CompositeDataSupport(ct,factory.getFields(messages[i])));
0:             } catch(Throwable e) {
0:                 e.printStackTrace();
1:             }
0:         
commit:36722d8
/////////////////////////////////////////////////////////////////////////
0:     public int getMemoryPercentageUsed() {
0:         return destination.getUsageManager().getPercentUsage();
1:     }
1:     public long getMemoryLimit() {
0:         return destination.getUsageManager().getLimit();
1:     }
1:     public void setMemoryLimit(long limit) {
0:         destination.getUsageManager().setLimit(limit);
1:     }
0: 
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
0: import java.util.Iterator;
0: import java.util.Map;
0: 
0: import javax.jms.Connection;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQTextMessage;
/////////////////////////////////////////////////////////////////////////
0:     public long getQueueSize(){
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String sendTextMessage(String body) throws Exception {
0:     	return sendTextMessage(Collections.EMPTY_MAP, body);
1:     }
0:     
1:     public String sendTextMessage(Map headers, String body) throws Exception {
0:     	
0:     	String brokerUrl = "vm://"+broker.getBrokerName();
0:     	ActiveMQDestination dest = destination.getActiveMQDestination();
0:     	
0:     	ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUrl);
0:     	Connection connection = null;
1:     	try {
0:     		
0:     		connection = cf.createConnection();
0: 			Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0: 			MessageProducer producer = session.createProducer(dest);
1: 			ActiveMQTextMessage msg = (ActiveMQTextMessage) session.createTextMessage(body);
0: 			
0: 			for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
0: 				Map.Entry entry = (Map.Entry) iter.next();
0: 				msg.setObjectProperty((String) entry.getKey(), entry.getValue());
1: 			}
0: 			
0: 			producer.setDeliveryMode(msg.getJMSDeliveryMode());
0: 			producer.setPriority(msg.getPriority());
0: 			long ttl = msg.getExpiration() - System.currentTimeMillis();
0: 			producer.setTimeToLive(ttl > 0 ? ttl : 0);
0: 	    	producer.send(msg);
0: 	    	
0: 	    	return msg.getJMSMessageID();
0: 	    	
0:     	} finally {
0:     		connection.close();
1:     	}
0:     	
1:     }
0: 
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     protected final ManagedRegionBroker broker;
0:     public DestinationView(ManagedRegionBroker broker, Destination destination){
1:         this.broker = broker;
commit:e6f5d30
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
0: package org.apache.activemq.broker.jmx;
0: 
0: import org.apache.activemq.broker.region.Destination;
0: 
0: public class DestinationView implements DestinationViewMBean {
0: 
0:     private final Destination destination;
0: 
0:     public DestinationView(Destination destination) {
0:         this.destination = destination;
1:     }
0: 
1:     public void gc() {
0:         destination.gc();
1:     }
1:     public void resetStatistics() {
0:         destination.getDestinationStatistics().reset();
1:     }
0: 
1:     public long getEnqueueCount() {
0:         return destination.getDestinationStatistics().getEnqueues().getCount();
0:     
1:     }
1:     public long getDequeueCount() {
0:         return destination.getDestinationStatistics().getDequeues().getCount();
1:     }
0: 
1:     public long getConsumerCount() {
0:         return destination.getDestinationStatistics().getConsumers().getCount();
1:     }
0:     
0:     public long getMessages() {
0:         return destination.getDestinationStatistics().getMessages().getCount();
1:     }
0:     
1:     public long getMessagesCached() {
0:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:     }
0:     
1: }
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:48764be
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         TabularType tt = new TabularType("MessageList", "MessageList", ct, new String[] { "JMSMessageID" });
/////////////////////////////////////////////////////////////////////////
0: 
1:         return sendTextMessage(headers, body, null, null);
1:         return sendTextMessage(Collections.EMPTY_MAP, body, user, password);
0:     public String sendTextMessage(Map headers, String body, String userName, String password) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             connection = cf.createConnection(userName, password);
0:             ActiveMQTextMessage msg = (ActiveMQTextMessage) session.createTextMessage(body);
0:                 Map.Entry entry = (Map.Entry) iter.next();
0:                 msg.setObjectProperty((String) entry.getKey(), entry.getValue());
/////////////////////////////////////////////////////////////////////////
0:     }
0:     public int getMaxProducersToAudit() {
0:         return destination.getMaxProducersToAudit();
0:     }
0:     public boolean isEnableAudit() {
0:         return destination.isEnableAudit();
0:     }
0:     public void setEnableAudit(boolean enableAudit) {
0:         destination.setEnableAudit(enableAudit);
0:     }
0:     public void setMaxAuditDepth(int maxAuditDepth) {
0:         destination.setMaxAuditDepth(maxAuditDepth);
0:     }
0:     public void setMaxProducersToAudit(int maxProducersToAudit) {
0:         destination.setMaxProducersToAudit(maxProducersToAudit);
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         return destination.isProducerFlowControl();
0: 
0:         destination.setProducerFlowControl(producerFlowControl);
0:     }
0: 
1:     /**
1:      * Set's the interval at which warnings about producers being blocked by
1:      * resource usage will be triggered. Values of 0 or less will disable
1:      * warnings
0:      * 
1:      * @param blockedProducerWarningInterval the interval at which warning about
1:      *            blocked producers will be triggered.
1:      */
1:     public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval) {
1:         destination.setBlockedProducerWarningInterval(blockedProducerWarningInterval);
0:     }
0: 
1:     /**
0:      * 
1:      * @return the interval at which warning about blocked producers will be
1:      *         triggered.
1:      */
1:     public long getBlockedProducerWarningInterval() {
1:         return destination.getBlockedProducerWarningInterval();
0: 
0: 
0:         destination.setUseCache(value);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1ab76f7
/////////////////////////////////////////////////////////////////////////
1:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
/////////////////////////////////////////////////////////////////////////
1:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
/////////////////////////////////////////////////////////////////////////
1:         BooleanExpression selectorExpression = selector == null ? null : SelectorParser.parse(selector);
author:James Strachan
-------------------------------------------------------------------------------
commit:3dd6575
/////////////////////////////////////////////////////////////////////////
0:                 // TODO DELETE ME
0:                 System.out.println(e);
0:                 e.printStackTrace();
0:                 // TODO DELETE ME
commit:947659c
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0: import javax.management.ObjectName;
0: import javax.management.MalformedObjectNameException;
0: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     }
0: 
1:     public ObjectName[] getSubscriptions() throws IOException, MalformedObjectNameException {
1:         List<Subscription> subscriptions = destination.getConsumers();
1:         ObjectName[] answer = new ObjectName[subscriptions.size()];
0:         ObjectName objectName = broker.getBrokerService().getBrokerObjectName();
1:         int index = 0;
1:         for (Subscription subscription : subscriptions) {
1:             String connectionClientId = subscription.getContext().getClientId();
0:             String objectNameStr = ManagedRegionBroker.getSubscriptionObjectName(subscription, connectionClientId, objectName);
0:             answer[index++] = new ObjectName(objectNameStr);
0:         }
1:         return answer;
0:     }
commit:9b07e43
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Browses the current destination returning a list of messages
1:      */
0:     public List browseMessages() throws InvalidSelectorException {
1:         return browseMessages(null);
0:     }    
0:     
1:     /**
0:      * Browses the current destination with the given selector returning a list of messages
1:      */
0:     public List browseMessages(String selector) throws InvalidSelectorException {
1:         Message[] messages = destination.browse();
0:         ArrayList answer = new ArrayList();
0: 
0:         MessageEvaluationContext ctx = new MessageEvaluationContext();
1:         ctx.setDestination(destination.getActiveMQDestination());
0:         BooleanExpression selectorExpression = selector == null ? null : new SelectorParser().parse(selector);
0: 
1:         for (int i = 0; i < messages.length; i++) {
0:             try {
1:                 Message message = messages[i];
1:                 if (selectorExpression == null) {
0:                     answer.add(OpenTypeSupport.convert(message));
0:                 }
0:                 else {
1:                     ctx.setMessageReference(message);
1:                     if (selectorExpression.matches(ctx)) {
1:                         answer.add(message);
0:                     }
0:                 }
0: 
0:             }
0:             catch (Throwable e) {
0:                 e.printStackTrace();
0:             }
0:         }
1:         return answer;
0:     }
commit:44493e4
/////////////////////////////////////////////////////////////////////////
0:     public void gc() {
1:         return destination.getName();
0:     public void resetStatistics() {
0:         destination.resetStatistics();
0:     public long getEnqueueCount() {
0:         return destination.getEnqueueCount();
0:     public long getDequeueCount() {
0:         return destination.getDequeueCount();
0:     public long getConsumerCount() {
0:         return destination.getConsumerCount();
1:     public long getQueueSize() {
0:         return destination.getQueueSize();
0:     public long getMessagesCached() {
0:         return destination.getMessagesCached();
0:         return destination.getMemoryPercentageUsed();
0: 
0:         return destination.getMemoryLimit();
0: 
0:         destination.setMemoryLimit(limit);
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getName() {
0:         return destination.getActiveMQDestination().getPhysicalName();
0:     }
0: 
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:36de58b
/////////////////////////////////////////////////////////////////////////
0:         destination.getDestinationStatistics().reset();
0:         return destination.getDestinationStatistics().getEnqueues().getCount();
0:         return destination.getDestinationStatistics().getDequeues().getCount();
0:     
1:     public long getDispatchCount() {
1:         return destination.getDestinationStatistics().getDispatched().getCount();
0:     }    
0:         return destination.getDestinationStatistics().getConsumers().getCount();
0:         return destination.getDestinationStatistics().getMessages().getCount();
0:         return destination.getDestinationStatistics().getMessagesCached().getCount();
0:         return destination.getUsageManager().getPercentUsage();
0:         return destination.getUsageManager().getLimit();
0:        destination.getUsageManager().setLimit(limit);
============================================================================