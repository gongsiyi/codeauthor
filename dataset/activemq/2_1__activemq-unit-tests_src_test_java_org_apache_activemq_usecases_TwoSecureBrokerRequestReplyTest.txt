1:205699e: /**
1:205699e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:205699e:  * contributor license agreements.  See the NOTICE file distributed with
1:205699e:  * this work for additional information regarding copyright ownership.
1:205699e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:205699e:  * (the "License"); you may not use this file except in compliance with
1:205699e:  * the License.  You may obtain a copy of the License at
1:205699e:  *
1:205699e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:205699e:  *
1:205699e:  * Unless required by applicable law or agreed to in writing, software
1:205699e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:205699e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:205699e:  * See the License for the specific language governing permissions and
1:205699e:  * limitations under the License.
1:205699e:  */
1:205699e: package org.apache.activemq.usecases;
1:205699e: 
1:205699e: import org.apache.activemq.ActiveMQConnection;
1:205699e: import org.apache.activemq.ActiveMQMessageConsumer;
1:205699e: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:205699e: import org.apache.activemq.command.ActiveMQQueue;
1:205699e: import org.slf4j.Logger;
1:205699e: import org.slf4j.LoggerFactory;
1:205699e: import org.springframework.core.io.ClassPathResource;
1:205699e: 
1:205699e: import javax.jms.ConnectionFactory;
1:205699e: import javax.jms.MessageProducer;
1:205699e: import javax.jms.Session;
1:205699e: import javax.jms.TemporaryQueue;
1:205699e: 
1:205699e: public class TwoSecureBrokerRequestReplyTest extends JmsMultipleBrokersTestSupport {
1:205699e:     private static final Logger LOG = LoggerFactory.getLogger(TwoSecureBrokerRequestReplyTest.class);
1:205699e: 
1:205699e:     public void setUp() throws Exception {
1:205699e:         super.setAutoFail(true);
1:205699e:         super.setUp();
1:205699e: 
1:205699e:         createBroker(new ClassPathResource("org/apache/activemq/usecases/sender-secured.xml"));
1:205699e:         createBroker(new ClassPathResource("org/apache/activemq/usecases/receiver-secured.xml"));
1:205699e:     }
1:205699e: 
1:205699e:     public void testRequestReply() throws Exception {
1:205699e:         ActiveMQQueue requestReplyDest = new ActiveMQQueue("RequestReply");
1:205699e: 
1:205699e:         startAllBrokers();
1:205699e:         waitForBridgeFormation();
1:205699e:         waitForMinTopicRegionConsumerCount("sender", 1);
1:205699e:         waitForMinTopicRegionConsumerCount("receiver", 1);
1:205699e: 
1:205699e: 
1:205699e:         ConnectionFactory factory = getConnectionFactory("sender");
1:205699e:         ActiveMQConnection conn = (ActiveMQConnection) factory.createConnection("system", "manager");
1:205699e:         conn.setWatchTopicAdvisories(false);
1:205699e:         conn.start();
1:205699e:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:205699e: 
1:205699e:         ConnectionFactory replyFactory = getConnectionFactory("receiver");
1:205699e:         for (int i = 0; i < 2000; i++) {
1:205699e:             TemporaryQueue tempDest = session.createTemporaryQueue();
1:205699e:             MessageProducer producer = session.createProducer(requestReplyDest);
1:205699e:             javax.jms.Message message = session.createTextMessage("req-" + i);
1:205699e:             message.setJMSReplyTo(tempDest);
1:205699e: 
1:205699e:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(tempDest);
1:205699e:             producer.send(message);
1:205699e: 
1:205699e:             ActiveMQConnection replyConnection = (ActiveMQConnection) replyFactory.createConnection("system", "manager");
1:205699e:             replyConnection.setWatchTopicAdvisories(false);
1:205699e:             replyConnection.start();
1:205699e:             Session replySession = replyConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:205699e:             ActiveMQMessageConsumer replyConsumer = (ActiveMQMessageConsumer) replySession.createConsumer(requestReplyDest);
1:205699e:             javax.jms.Message msg = replyConsumer.receive(10000);
1:205699e:             assertNotNull("request message not null: " + i, msg);
1:205699e:             MessageProducer replyProducer = replySession.createProducer(msg.getJMSReplyTo());
1:205699e:             replyProducer.send(session.createTextMessage("reply-" + i));
1:205699e:             replyConnection.close();
1:205699e: 
1:205699e:             javax.jms.Message reply = consumer.receive(10000);
1:205699e:             assertNotNull("reply message : " + i + ", to: " + tempDest + ", by consumer:" + consumer.getConsumerId(), reply);
1:205699e:             consumer.close();
1:205699e:             tempDest.delete();
1:205699e:             LOG.info("message #" + i + " processed");
1:205699e:         }
1:205699e: 
1:205699e:     }
1:205699e: 
1:205699e: 
1:205699e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:205699e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQMessageConsumer;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: 
1: public class TwoSecureBrokerRequestReplyTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(TwoSecureBrokerRequestReplyTest.class);
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1: 
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/sender-secured.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/receiver-secured.xml"));
1:     }
1: 
1:     public void testRequestReply() throws Exception {
1:         ActiveMQQueue requestReplyDest = new ActiveMQQueue("RequestReply");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1:         waitForMinTopicRegionConsumerCount("sender", 1);
1:         waitForMinTopicRegionConsumerCount("receiver", 1);
1: 
1: 
1:         ConnectionFactory factory = getConnectionFactory("sender");
1:         ActiveMQConnection conn = (ActiveMQConnection) factory.createConnection("system", "manager");
1:         conn.setWatchTopicAdvisories(false);
1:         conn.start();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ConnectionFactory replyFactory = getConnectionFactory("receiver");
1:         for (int i = 0; i < 2000; i++) {
1:             TemporaryQueue tempDest = session.createTemporaryQueue();
1:             MessageProducer producer = session.createProducer(requestReplyDest);
1:             javax.jms.Message message = session.createTextMessage("req-" + i);
1:             message.setJMSReplyTo(tempDest);
1: 
1:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(tempDest);
1:             producer.send(message);
1: 
1:             ActiveMQConnection replyConnection = (ActiveMQConnection) replyFactory.createConnection("system", "manager");
1:             replyConnection.setWatchTopicAdvisories(false);
1:             replyConnection.start();
1:             Session replySession = replyConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             ActiveMQMessageConsumer replyConsumer = (ActiveMQMessageConsumer) replySession.createConsumer(requestReplyDest);
1:             javax.jms.Message msg = replyConsumer.receive(10000);
1:             assertNotNull("request message not null: " + i, msg);
1:             MessageProducer replyProducer = replySession.createProducer(msg.getJMSReplyTo());
1:             replyProducer.send(session.createTextMessage("reply-" + i));
1:             replyConnection.close();
1: 
1:             javax.jms.Message reply = consumer.receive(10000);
1:             assertNotNull("reply message : " + i + ", to: " + tempDest + ", by consumer:" + consumer.getConsumerId(), reply);
1:             consumer.close();
1:             tempDest.delete();
1:             LOG.info("message #" + i + " processed");
1:         }
1: 
1:     }
1: 
1: 
1: }
============================================================================