1:f6a5c7b: /**
1:f6a5c7b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f6a5c7b:  * contributor license agreements.  See the NOTICE file distributed with
1:f6a5c7b:  * this work for additional information regarding copyright ownership.
1:f6a5c7b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f6a5c7b:  * (the "License"); you may not use this file except in compliance with
1:f6a5c7b:  * the License.  You may obtain a copy of the License at
1:f6a5c7b:  *
1:f6a5c7b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f6a5c7b:  *
1:f6a5c7b:  * Unless required by applicable law or agreed to in writing, software
1:f6a5c7b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f6a5c7b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f6a5c7b:  * See the License for the specific language governing permissions and
1:f6a5c7b:  * limitations under the License.
1:f6a5c7b:  */
1:f6a5c7b: package org.apache.activemq.maven;
2:f6a5c7b: 
1:f6a5c7b: import java.io.File;
1:f6a5c7b: import java.net.MalformedURLException;
1:f6a5c7b: import java.net.URL;
1:f6a5c7b: 
1:f6a5c7b: /**
1:f6a5c7b:  * Helper to convert relative paths to XBean description files to URL-compliant absolute paths.
1:f6a5c7b:  * 
1:f6a5c7b:  * @author Marc CARRE <carre.marc@gmail.com>
1:f6a5c7b:  */
1:f6a5c7b: public class XBeanFileResolver {
1:f6a5c7b:     private static final String XBEAN_FILE = "xbean:file:";
1:f6a5c7b: 
1:f6a5c7b:     /**
1:f6a5c7b:      * Check if the provided path is an URL to a XBean file (xbean:file:<path/to/file>)
1:f6a5c7b:      */
1:c0eae1b:     public boolean isXBeanFile(final String configUri) {
1:f6a5c7b:         return configUri.startsWith(XBEAN_FILE);
2:f6a5c7b:     }
1:f6a5c7b: 
1:f6a5c7b:     /**
1:f6a5c7b:      * Convert provided path into a URL-style absolute path. See also:
1:f6a5c7b:      * http://maven.apache.org/plugin-developers/common-bugs.html# Converting_between_URLs_and_Filesystem_Paths
1:f6a5c7b:      */
1:c0eae1b:     public String toUrlCompliantAbsolutePath(final String configUri) {
1:f6a5c7b:         if (!isXBeanFile(configUri))
1:f6a5c7b:             return configUri;
1:f6a5c7b: 
1:f6a5c7b:         String filePath = extractFilePath(configUri);
1:f6a5c7b:         return XBEAN_FILE + toAbsolutePath(filePath);
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private String extractFilePath(final String configUri) {
1:f6a5c7b:         return configUri.substring(getIndexFilePath(configUri), configUri.length());
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private int getIndexFilePath(final String configUri) {
1:f6a5c7b:         return configUri.indexOf(XBEAN_FILE) + XBEAN_FILE.length();
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private String toAbsolutePath(final String path) {
1:f6a5c7b:         try {
1:f6a5c7b:             final URL url = new File(path).toURI().toURL();
1:f6a5c7b:             return toFilePath(url);
1:f6a5c7b:         } catch (MalformedURLException e) {
1:f6a5c7b:             throw new RuntimeException("Failed to resolve relative path for: " + path, e);
1:f6a5c7b:         }
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private String toFilePath(final URL url) {
1:f6a5c7b:         String filePath = url.getFile();
1:f6a5c7b:         return underWindows() ? removePrependingSlash(filePath) : filePath;
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private String removePrependingSlash(String filePath) {
1:f6a5c7b:         // Remove prepending '/' because path would be /C:/temp/file.txt, as URL would be file:/C:/temp/file.txt
1:f6a5c7b:         return filePath.substring(1, filePath.length());
1:f6a5c7b:     }
1:f6a5c7b: 
1:c0eae1b:     private boolean underWindows() {
1:f6a5c7b:         String os = System.getProperty("os.name").toLowerCase();
1:f6a5c7b:         return (os.indexOf("win") >= 0);
1:f6a5c7b:     }
1:f6a5c7b: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1:     public boolean isXBeanFile(final String configUri) {
/////////////////////////////////////////////////////////////////////////
1:     public String toUrlCompliantAbsolutePath(final String configUri) {
/////////////////////////////////////////////////////////////////////////
1:     private String extractFilePath(final String configUri) {
1:     private int getIndexFilePath(final String configUri) {
1:     private String toAbsolutePath(final String path) {
/////////////////////////////////////////////////////////////////////////
1:     private String toFilePath(final URL url) {
1:     private String removePrependingSlash(String filePath) {
1:     private boolean underWindows() {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
commit:f6a5c7b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
1: import java.io.File;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: 
1: /**
1:  * Helper to convert relative paths to XBean description files to URL-compliant absolute paths.
1:  * 
1:  * @author Marc CARRE <carre.marc@gmail.com>
1:  */
1: public class XBeanFileResolver {
1:     private static final String XBEAN_FILE = "xbean:file:";
1: 
0:     private XBeanFileResolver() {
0:         // Utility class, should not be instantiated.
1:     }
1: 
1:     /**
1:      * Check if the provided path is an URL to a XBean file (xbean:file:<path/to/file>)
1:      */
0:     public static boolean isXBeanFile(final String configUri) {
1:         return configUri.startsWith(XBEAN_FILE);
1:     }
1: 
1:     /**
1:      * Convert provided path into a URL-style absolute path. See also:
1:      * http://maven.apache.org/plugin-developers/common-bugs.html# Converting_between_URLs_and_Filesystem_Paths
1:      */
0:     public static String toUrlCompliantAbsolutePath(final String configUri) {
1:         if (!isXBeanFile(configUri))
1:             return configUri;
1: 
1:         String filePath = extractFilePath(configUri);
1:         return XBEAN_FILE + toAbsolutePath(filePath);
1:     }
1: 
0:     private static String extractFilePath(final String configUri) {
1:         return configUri.substring(getIndexFilePath(configUri), configUri.length());
1:     }
1: 
0:     private static int getIndexFilePath(final String configUri) {
1:         return configUri.indexOf(XBEAN_FILE) + XBEAN_FILE.length();
1:     }
1: 
0:     private static String toAbsolutePath(final String path) {
1:         try {
1:             final URL url = new File(path).toURI().toURL();
1:             return toFilePath(url);
1:         } catch (MalformedURLException e) {
1:             throw new RuntimeException("Failed to resolve relative path for: " + path, e);
1:         }
1:     }
1: 
0:     private static String toFilePath(final URL url) {
1:         String filePath = url.getFile();
1:         return underWindows() ? removePrependingSlash(filePath) : filePath;
1:     }
1: 
0:     private static String removePrependingSlash(String filePath) {
1:         // Remove prepending '/' because path would be /C:/temp/file.txt, as URL would be file:/C:/temp/file.txt
1:         return filePath.substring(1, filePath.length());
1:     }
1: 
0:     private static boolean underWindows() {
1:         String os = System.getProperty("os.name").toLowerCase();
1:         return (os.indexOf("win") >= 0);
1:     }
1: }
============================================================================