1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:4a12796: package org.apache.activemq.transport.failover;
2:738e9a1: 
1:8824ac9: import static org.junit.Assert.assertEquals;
1:8824ac9: import static org.junit.Assert.assertTrue;
1:8824ac9: import static org.junit.Assert.fail;
1:8824ac9: 
1:ae9af4b: import java.net.Socket;
1:4a12796: import java.net.URI;
1:ae9af4b: import java.util.concurrent.CountDownLatch;
1:ae9af4b: import java.util.concurrent.ExecutorService;
1:ae9af4b: import java.util.concurrent.Executors;
1:ae9af4b: import java.util.concurrent.TimeUnit;
1:8514e38: import java.util.concurrent.atomic.AtomicLong;
1:8824ac9: 
1:4a12796: import javax.jms.Connection;
1:ae9af4b: import javax.jms.ExceptionListener;
1:4a12796: import javax.jms.JMSException;
1:4a12796: import javax.jms.MessageProducer;
1:4a12796: import javax.jms.Session;
1:4a12796: import javax.jms.TextMessage;
1:8824ac9: 
1:738e9a1: import org.apache.activemq.ActiveMQConnection;
1:4a12796: import org.apache.activemq.ActiveMQConnectionFactory;
1:4a12796: import org.apache.activemq.broker.BrokerService;
1:8514e38: import org.apache.activemq.command.Command;
1:8514e38: import org.apache.activemq.command.LocalTransactionId;
1:ae9af4b: import org.apache.activemq.command.MessageAck;
1:8514e38: import org.apache.activemq.command.TransactionInfo;
1:8824ac9: import org.junit.After;
1:8824ac9: import org.junit.Before;
1:8824ac9: import org.junit.Test;
1:8824ac9: import org.slf4j.Logger;
1:8824ac9: import org.slf4j.LoggerFactory;
1:738e9a1: 
1:8824ac9: public class FailoverTimeoutTest {
1:8824ac9: 
1:8824ac9:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTimeoutTest.class);
1:738e9a1: 
1:738e9a1:     private static final String QUEUE_NAME = "test.failovertimeout";
1:738e9a1:     BrokerService bs;
1:738e9a1:     URI tcpUri;
1:738e9a1: 
1:8824ac9:     @Before
1:738e9a1:     public void setUp() throws Exception {
1:738e9a1:         bs = new BrokerService();
1:738e9a1:         bs.setUseJmx(false);
1:ae9af4b:         bs.addConnector(getTransportUri());
1:738e9a1:         bs.start();
1:738e9a1:         tcpUri = bs.getTransportConnectors().get(0).getConnectUri();
1:738e9a1:     }
1:738e9a1: 
1:8824ac9:     @After
1:738e9a1:     public void tearDown() throws Exception {
1:738e9a1:         if (bs != null) {
1:738e9a1:             bs.stop();
1:738e9a1:         }
1:738e9a1:     }
1:738e9a1: 
1:04ee70a:     protected String getTransportUri() {
1:04ee70a:         return "tcp://localhost:0";
1:04ee70a:     }
1:04ee70a: 
1:8824ac9:     @Test
1:8824ac9:     public void testTimoutDoesNotFailConnectionAttempts() throws Exception {
1:8824ac9:         bs.stop();
1:8824ac9:         long timeout = 1000;
1:8824ac9: 
1:8824ac9:         long startTime = System.currentTimeMillis();
1:8824ac9: 
1:8824ac9:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:8824ac9:             "failover:(" + tcpUri + ")" +
1:8824ac9:             "?timeout=" + timeout + "&useExponentialBackOff=false" +
1:8824ac9:             "&maxReconnectAttempts=5" + "&initialReconnectDelay=1000");
1:8824ac9:         Connection connection = cf.createConnection();
1:8824ac9:         try {
1:8824ac9:             connection.start();
1:8824ac9:             fail("Should have failed to connect");
1:8824ac9:         } catch (JMSException ex) {
1:8824ac9:             LOG.info("Caught exception on call to start: {}", ex.getMessage());
1:8824ac9:         }
1:8824ac9: 
1:8824ac9:         long endTime = System.currentTimeMillis();
1:8824ac9:         long duration = endTime - startTime;
1:8824ac9: 
1:8824ac9:         LOG.info("Time spent waiting to connect: {} ms", duration);
1:8824ac9: 
1:8824ac9:         assertTrue(duration > 3000);
1:8514e38: 
1:8514e38:         safeClose(connection);
1:8514e38:     }
1:8514e38: 
1:8514e38:     private void safeClose(Connection connection) {
1:8514e38:         try {
1:8514e38:             connection.close();
1:8514e38:         } catch (Exception ignored) {}
1:8824ac9:     }
1:8824ac9: 
1:8824ac9:     @Test
1:738e9a1:     public void testTimeout() throws Exception {
1:738e9a1: 
1:738e9a1:         long timeout = 1000;
1:738e9a1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?timeout=" + timeout + "&useExponentialBackOff=false");
1:738e9a1:         Connection connection = cf.createConnection();
1:738e9a1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:738e9a1:         MessageProducer producer = session.createProducer(session
1:738e9a1:                 .createQueue(QUEUE_NAME));
1:738e9a1:         TextMessage message = session.createTextMessage("Test message");
1:738e9a1:         producer.send(message);
1:ae9af4b: 
1:738e9a1:         bs.stop();
1:738e9a1: 
1:738e9a1:         try {
1:738e9a1:             producer.send(message);
1:738e9a1:         } catch (JMSException jmse) {
1:738e9a1:             assertEquals("Failover timeout of " + timeout + " ms reached.", jmse.getMessage());
1:738e9a1:         }
1:738e9a1: 
1:738e9a1:         bs = new BrokerService();
1:738e9a1:         bs.setUseJmx(false);
1:738e9a1:         bs.addConnector(tcpUri);
1:738e9a1:         bs.start();
1:738e9a1:         bs.waitUntilStarted();
1:ae9af4b: 
1:738e9a1:         producer.send(message);
1:738e9a1:         bs.stop();
1:ae9af4b:         connection.close();
1:ae9af4b:     }
1:ae9af4b: 
1:ae9af4b:     @Test
1:8514e38:     public void testInterleaveAckAndException() throws Exception {
1:ae9af4b:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?maxReconnectAttempts=0");
1:ae9af4b:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:8514e38: 
1:8514e38:         doTestInterleaveAndException(connection, new MessageAck());
1:8514e38:         safeClose(connection);
1:8514e38:     }
1:8514e38: 
1:8514e38:     @Test
1:8514e38:     public void testInterleaveTxAndException() throws Exception {
1:8514e38:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?maxReconnectAttempts=0");
1:8514e38:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:8514e38: 
1:8514e38:         TransactionInfo tx = new TransactionInfo();
1:8514e38:         tx.setConnectionId(connection.getConnectionInfo().getConnectionId());
1:8514e38:         tx.setTransactionId(new LocalTransactionId(tx.getConnectionId(), 1));
1:8514e38:         doTestInterleaveAndException(connection, tx);
1:8514e38: 
1:8514e38:         safeClose(connection);
1:8514e38:     }
1:8514e38: 
1:8514e38:     public void doTestInterleaveAndException(final ActiveMQConnection connection, final Command command) throws Exception {
1:8514e38: 
1:ae9af4b:         connection.start();
1:ae9af4b: 
1:ae9af4b:         connection.setExceptionListener(new ExceptionListener() {
1:ae9af4b:             @Override
1:ae9af4b:             public void onException(JMSException exception) {
1:ae9af4b:                 try {
1:ae9af4b:                     LOG.info("Deal with exception - invoke op that may block pending outstanding oneway");
1:ae9af4b:                     // try and invoke on connection as part of handling exception
1:8514e38:                     connection.asyncSendPacket(command);
1:ae9af4b:                 } catch (Exception e) {
1:ae9af4b:                 }
1:ae9af4b:             }
1:ae9af4b:         });
1:ae9af4b: 
1:ae9af4b:         final ExecutorService executorService = Executors.newCachedThreadPool();
1:ae9af4b: 
1:ae9af4b:         final int NUM_TASKS = 200;
1:ae9af4b:         final CountDownLatch enqueueOnExecutorDone = new CountDownLatch(NUM_TASKS);
1:ae9af4b: 
1:8514e38:         // let a few tasks delay a bit
1:8514e38:         final AtomicLong sleepMillis = new AtomicLong(1000);
1:ae9af4b:         for (int i=0; i < NUM_TASKS; i++) {
1:ae9af4b:             executorService.submit(new Runnable() {
1:ae9af4b:                 @Override
1:ae9af4b:                 public void run() {
1:ae9af4b:                     try {
1:8514e38:                         TimeUnit.MILLISECONDS.sleep(Math.max(0, sleepMillis.addAndGet(-50)));
1:8514e38:                         connection.asyncSendPacket(command);
1:8514e38:                     } catch (Exception e) {
1:ae9af4b:                     } finally {
1:ae9af4b:                         enqueueOnExecutorDone.countDown();
1:ae9af4b:                     }
1:ae9af4b:                 }
1:ae9af4b:             });
1:ae9af4b:         }
1:ae9af4b: 
1:8514e38:         while (enqueueOnExecutorDone.getCount() > (NUM_TASKS - 10)) {
1:ae9af4b:             enqueueOnExecutorDone.await(20, TimeUnit.MILLISECONDS);
1:ae9af4b:         }
1:ae9af4b: 
1:ae9af4b:         // force IOException
1:ae9af4b:         final Socket socket = connection.getTransport().narrow(Socket.class);
1:ae9af4b:         socket.close();
1:ae9af4b: 
1:ae9af4b:         executorService.shutdown();
1:ae9af4b: 
1:ae9af4b:         assertTrue("all ops finish", enqueueOnExecutorDone.await(15, TimeUnit.SECONDS));
1:738e9a1:     }
1:8514e38: 
1:ae9af4b: 
1:8824ac9:     @Test
1:738e9a1:     public void testUpdateUris() throws Exception {
1:738e9a1: 
1:738e9a1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?useExponentialBackOff=false");
1:738e9a1:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:738e9a1:         connection.start();
1:738e9a1:         FailoverTransport failoverTransport = connection.getTransport().narrow(FailoverTransport.class);
1:738e9a1: 
1:738e9a1:         URI[] bunchOfUnknownAndOneKnown = new URI[]{
1:738e9a1:                 new URI("tcp://unknownHost:" + tcpUri.getPort()),
1:738e9a1:                 new URI("tcp://unknownHost2:" + tcpUri.getPort()),
1:738e9a1:                 new URI("tcp://localhost:2222")};
1:738e9a1:         failoverTransport.add(false, bunchOfUnknownAndOneKnown);
1:738e9a1:     }
3:4a12796: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8514e38
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.TransactionInfo;
/////////////////////////////////////////////////////////////////////////
1: 
1:         safeClose(connection);
1:     }
1: 
1:     private void safeClose(Connection connection) {
1:         try {
1:             connection.close();
1:         } catch (Exception ignored) {}
/////////////////////////////////////////////////////////////////////////
1:     public void testInterleaveAckAndException() throws Exception {
1: 
1:         doTestInterleaveAndException(connection, new MessageAck());
1:         safeClose(connection);
1:     }
1: 
1:     @Test
1:     public void testInterleaveTxAndException() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?maxReconnectAttempts=0");
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1: 
1:         TransactionInfo tx = new TransactionInfo();
1:         tx.setConnectionId(connection.getConnectionInfo().getConnectionId());
1:         tx.setTransactionId(new LocalTransactionId(tx.getConnectionId(), 1));
1:         doTestInterleaveAndException(connection, tx);
1: 
1:         safeClose(connection);
1:     }
1: 
1:     public void doTestInterleaveAndException(final ActiveMQConnection connection, final Command command) throws Exception {
1: 
/////////////////////////////////////////////////////////////////////////
1:                     connection.asyncSendPacket(command);
/////////////////////////////////////////////////////////////////////////
1:         // let a few tasks delay a bit
1:         final AtomicLong sleepMillis = new AtomicLong(1000);
1:                         TimeUnit.MILLISECONDS.sleep(Math.max(0, sleepMillis.addAndGet(-50)));
1:                         connection.asyncSendPacket(command);
1:                     } catch (Exception e) {
1:         while (enqueueOnExecutorDone.getCount() > (NUM_TASKS - 10)) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:ae9af4b
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.ExceptionListener;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
1:         bs.addConnector(getTransportUri());
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
1:     }
1: 
1:     @Test
0:     public void testInterleaveSendAndException() throws Exception {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?maxReconnectAttempts=0");
1:         final ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 try {
1:                     LOG.info("Deal with exception - invoke op that may block pending outstanding oneway");
1:                     // try and invoke on connection as part of handling exception
0:                     connection.asyncSendPacket(new MessageAck());
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         });
1: 
1:         final ExecutorService executorService = Executors.newCachedThreadPool();
1: 
1:         final int NUM_TASKS = 200;
1:         final CountDownLatch enqueueOnExecutorDone = new CountDownLatch(NUM_TASKS);
1: 
1:         for (int i=0; i < NUM_TASKS; i++) {
1: 
1:             executorService.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
0:                         connection.asyncSendPacket(new MessageAck());
0:                     } catch (JMSException e) {
0:                         e.printStackTrace();
1:                     } finally {
1:                         enqueueOnExecutorDone.countDown();
1:                     }
1: 
1:                 }
1:             });
1:         }
1: 
0:         while (enqueueOnExecutorDone.getCount() > (NUM_TASKS - 20)) {
1:             enqueueOnExecutorDone.await(20, TimeUnit.MILLISECONDS);
1:         }
1: 
1:         // force IOException
1:         final Socket socket = connection.getTransport().narrow(Socket.class);
1:         socket.close();
1: 
1:         executorService.shutdown();
1: 
1:         assertTrue("all ops finish", enqueueOnExecutorDone.await(15, TimeUnit.SECONDS));
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     protected String getTransportUri() {
1:         return "tcp://localhost:0";
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8824ac9
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: 
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class FailoverTimeoutTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTimeoutTest.class);
1:     @Before
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     @Test
1:     public void testTimoutDoesNotFailConnectionAttempts() throws Exception {
1:         bs.stop();
1:         long timeout = 1000;
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:             "failover:(" + tcpUri + ")" +
1:             "?timeout=" + timeout + "&useExponentialBackOff=false" +
1:             "&maxReconnectAttempts=5" + "&initialReconnectDelay=1000");
1:         Connection connection = cf.createConnection();
1:         try {
1:             connection.start();
1:             fail("Should have failed to connect");
1:         } catch (JMSException ex) {
1:             LOG.info("Caught exception on call to start: {}", ex.getMessage());
1:         }
1: 
1:         long endTime = System.currentTimeMillis();
1:         long duration = endTime - startTime;
1: 
1:         LOG.info("Time spent waiting to connect: {} ms", duration);
1: 
1:         assertTrue(duration > 3000);
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:738e9a1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
1:     private static final String QUEUE_NAME = "test.failovertimeout";
1:     BrokerService bs;
1:     URI tcpUri;
1: 
1:     public void setUp() throws Exception {
1:         bs = new BrokerService();
1:         bs.setUseJmx(false);
0:         bs.addConnector("tcp://localhost:0");
1:         bs.start();
1:         tcpUri = bs.getTransportConnectors().get(0).getConnectUri();
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         if (bs != null) {
1:             bs.stop();
1:         }
1:     }
1: 
1:     public void testTimeout() throws Exception {
1: 
1:         long timeout = 1000;
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?timeout=" + timeout + "&useExponentialBackOff=false");
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session
1:                 .createQueue(QUEUE_NAME));
1:         TextMessage message = session.createTextMessage("Test message");
1:         producer.send(message);
1: 
1:         bs.stop();
1: 
1:         try {
1:             producer.send(message);
1:         } catch (JMSException jmse) {
1:             assertEquals("Failover timeout of " + timeout + " ms reached.", jmse.getMessage());
1:         }
1: 
1:         bs = new BrokerService();
1:         bs.setUseJmx(false);
1:         bs.addConnector(tcpUri);
1:         bs.start();
1:         bs.waitUntilStarted();
1: 
1:         producer.send(message);
1: 
1:         bs.stop();
1:     }
1: 
1:     public void testUpdateUris() throws Exception {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?useExponentialBackOff=false");
1:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         FailoverTransport failoverTransport = connection.getTransport().narrow(FailoverTransport.class);
1: 
1:         URI[] bunchOfUnknownAndOneKnown = new URI[]{
1:                 new URI("tcp://unknownHost:" + tcpUri.getPort()),
1:                 new URI("tcp://unknownHost2:" + tcpUri.getPort()),
1:                 new URI("tcp://localhost:2222")};
1:         failoverTransport.add(false, bunchOfUnknownAndOneKnown);
1:     }
commit:08d89ff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?timeout=" + timeout + "&useExponentialBackOff=false");
/////////////////////////////////////////////////////////////////////////
0: 		bs = new BrokerService();		
0: 		bs.waitUntilStarted();
commit:b5b6a08
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4a12796
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.failover;
0: 
1: import java.net.URI;
0: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: 
0: import junit.framework.TestCase;
0: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: 
0: public class FailoverTimeoutTest extends TestCase {
0: 	
0: 	private static final String QUEUE_NAME = "test.failovertimeout";
0: 
0: 	public void testTimeout() throws Exception {
0: 		
0: 		long timeout = 1000;
0: 		URI tcpUri = new URI("tcp://localhost:61616");
0: 		BrokerService bs = new BrokerService();
0: 		bs.setUseJmx(false);
0: 		bs.addConnector(tcpUri);
0: 		bs.start();
0: 		
0: 		ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + tcpUri + ")?timeout=" + timeout);
0: 		Connection connection = cf.createConnection();
0: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		MessageProducer producer = session.createProducer(session
0: 				.createQueue(QUEUE_NAME));
0: 		TextMessage message = session.createTextMessage("Test message");
0: 		producer.send(message);
0: 		
0: 		bs.stop();
0: 		
0: 		try {
0: 			producer.send(message);
0: 		} catch (JMSException jmse) {
0: 			jmse.printStackTrace();
0: 			assertEquals("Failover timeout of " + timeout + " ms reached.", jmse.getMessage());
1: 		}
0: 		
0: 		bs = new BrokerService();
0: 		
0: 		bs.setUseJmx(false);
0: 		bs.addConnector(tcpUri);
0: 		bs.start();
0: 		
0: 		producer.send(message);
0: 		
0: 		bs.stop();
1: 	}
0: 	
1: }
============================================================================