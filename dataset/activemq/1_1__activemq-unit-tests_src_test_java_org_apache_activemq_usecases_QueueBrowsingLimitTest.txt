1:85bc9ce: /**
1:85bc9ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:85bc9ce:  * contributor license agreements.  See the NOTICE file distributed with
1:85bc9ce:  * this work for additional information regarding copyright ownership.
1:85bc9ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:85bc9ce:  * (the "License"); you may not use this file except in compliance with
1:85bc9ce:  * the License.  You may obtain a copy of the License at
1:85bc9ce:  *
1:85bc9ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:85bc9ce:  *
1:85bc9ce:  * Unless required by applicable law or agreed to in writing, software
1:85bc9ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:85bc9ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:85bc9ce:  * See the License for the specific language governing permissions and
1:85bc9ce:  * limitations under the License.
1:85bc9ce:  */
1:85bc9ce: package org.apache.activemq.usecases;
1:85bc9ce: 
1:85bc9ce: import java.io.IOException;
1:85bc9ce: import java.net.URI;
1:85bc9ce: import java.util.Enumeration;
1:85bc9ce: import javax.jms.Connection;
1:85bc9ce: import javax.jms.Message;
1:85bc9ce: import javax.jms.MessageProducer;
1:85bc9ce: import javax.jms.QueueBrowser;
1:85bc9ce: import javax.jms.Session;
1:85bc9ce: import org.apache.activemq.ActiveMQConnectionFactory;
1:85bc9ce: import org.apache.activemq.broker.BrokerService;
1:85bc9ce: import org.apache.activemq.broker.TransportConnector;
1:85bc9ce: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:85bc9ce: import org.apache.activemq.broker.region.policy.PolicyMap;
1:85bc9ce: import org.apache.activemq.command.ActiveMQQueue;
1:85bc9ce: import org.junit.After;
1:85bc9ce: import org.junit.Before;
1:85bc9ce: import org.junit.Test;
1:85bc9ce: import org.slf4j.Logger;
1:85bc9ce: import org.slf4j.LoggerFactory;
1:85bc9ce: 
1:85bc9ce: 
1:85bc9ce: import static org.junit.Assert.assertEquals;
1:85bc9ce: 
1:85bc9ce: public class QueueBrowsingLimitTest {
1:85bc9ce: 
1:85bc9ce:     private static final Logger LOG = LoggerFactory.getLogger(QueueBrowsingLimitTest.class);
1:85bc9ce: 
1:85bc9ce:     private BrokerService broker;
1:85bc9ce:     private URI connectUri;
1:85bc9ce:     private ActiveMQConnectionFactory factory;
1:85bc9ce:     private final int browserLimit = 300;
1:85bc9ce: 
1:85bc9ce: 
1:85bc9ce:     @Before
1:85bc9ce:     public void startBroker() throws Exception {
1:85bc9ce:         broker = createBroker();
1:85bc9ce:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:85bc9ce:         broker.deleteAllMessages();
1:85bc9ce:         broker.start();
1:85bc9ce:         broker.waitUntilStarted();
1:85bc9ce: 
1:85bc9ce:         PolicyEntry policy = new PolicyEntry();
1:85bc9ce:         policy.setMaxBrowsePageSize(browserLimit);
1:85bc9ce:         broker.setDestinationPolicy(new PolicyMap());
1:85bc9ce:         broker.getDestinationPolicy().setDefaultEntry(policy);
1:85bc9ce: 
1:85bc9ce:         connectUri = connector.getConnectUri();
1:85bc9ce:         factory = new ActiveMQConnectionFactory(connectUri);
1:85bc9ce: 
1:85bc9ce:     }
1:85bc9ce: 
1:85bc9ce:     public BrokerService createBroker() throws IOException {
1:85bc9ce:         return new BrokerService();
1:85bc9ce:     }
1:85bc9ce: 
1:85bc9ce:     @After
1:85bc9ce:     public void stopBroker() throws Exception {
1:85bc9ce:         broker.stop();
1:85bc9ce:         broker.waitUntilStopped();
1:85bc9ce:     }
1:85bc9ce: 
1:85bc9ce:     @Test
1:85bc9ce:     public void testBrowsingLimited() throws Exception {
1:85bc9ce: 
1:85bc9ce:         int messageToSend = 470;
1:85bc9ce: 
1:85bc9ce:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:85bc9ce:         Connection connection = factory.createConnection();
1:85bc9ce:         connection.start();
1:85bc9ce:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:85bc9ce:         MessageProducer producer = session.createProducer(queue);
1:85bc9ce: 
1:85bc9ce:         String data = "";
1:85bc9ce:         for( int i=0; i < 1024*2; i++ ) {
1:85bc9ce:             data += "x";
1:85bc9ce:         }
1:85bc9ce: 
1:85bc9ce:         for( int i=0; i < messageToSend; i++ ) {
1:85bc9ce:             producer.send(session.createTextMessage(data));
1:85bc9ce:         }
1:85bc9ce: 
1:85bc9ce:         QueueBrowser browser = session.createBrowser(queue);
1:85bc9ce:         Enumeration<?> enumeration = browser.getEnumeration();
1:85bc9ce:         int received = 0;
1:85bc9ce:         while (enumeration.hasMoreElements()) {
1:85bc9ce:             Message m = (Message) enumeration.nextElement();
1:85bc9ce:             received++;
1:85bc9ce:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:85bc9ce:         }
1:85bc9ce: 
1:85bc9ce:         browser.close();
1:85bc9ce: 
1:85bc9ce:         assertEquals(browserLimit, received);
1:85bc9ce:     }
1:85bc9ce: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:85bc9ce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.Enumeration;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class QueueBrowsingLimitTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueBrowsingLimitTest.class);
1: 
1:     private BrokerService broker;
1:     private URI connectUri;
1:     private ActiveMQConnectionFactory factory;
1:     private final int browserLimit = 300;
1: 
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = createBroker();
1:         TransportConnector connector = broker.addConnector("tcp://0.0.0.0:0");
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMaxBrowsePageSize(browserLimit);
1:         broker.setDestinationPolicy(new PolicyMap());
1:         broker.getDestinationPolicy().setDefaultEntry(policy);
1: 
1:         connectUri = connector.getConnectUri();
1:         factory = new ActiveMQConnectionFactory(connectUri);
1: 
1:     }
1: 
1:     public BrokerService createBroker() throws IOException {
1:         return new BrokerService();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testBrowsingLimited() throws Exception {
1: 
1:         int messageToSend = 470;
1: 
1:         ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         String data = "";
1:         for( int i=0; i < 1024*2; i++ ) {
1:             data += "x";
1:         }
1: 
1:         for( int i=0; i < messageToSend; i++ ) {
1:             producer.send(session.createTextMessage(data));
1:         }
1: 
1:         QueueBrowser browser = session.createBrowser(queue);
1:         Enumeration<?> enumeration = browser.getEnumeration();
1:         int received = 0;
1:         while (enumeration.hasMoreElements()) {
1:             Message m = (Message) enumeration.nextElement();
1:             received++;
1:             LOG.info("Browsed message " + received + ": " + m.getJMSMessageID());
1:         }
1: 
1:         browser.close();
1: 
1:         assertEquals(browserLimit, received);
1:     }
1: }
============================================================================