1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.management;
4:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
1:ecf89a6: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import javax.management.j2ee.statistics.CountStatistic;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A count statistic implementation
1:b0c2a40:  * 
1:f812e34:  * 
1:d29ca2a:  */
1:d29ca2a: public class PollCountStatisticImpl extends StatisticImpl implements CountStatistic {
1:d29ca2a: 
1:d29ca2a:     private PollCountStatisticImpl parent;
1:ecf89a6:     private List<PollCountStatisticImpl> children;
1:d29ca2a: 
1:d29ca2a:     public PollCountStatisticImpl(PollCountStatisticImpl parent, String name, String description) {
1:d29ca2a:         this(name, description);
1:d29ca2a:         setParent(parent);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public PollCountStatisticImpl(String name, String description) {
1:d29ca2a:         this(name, "count", description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public PollCountStatisticImpl(String name, String unit, String description) {
1:d29ca2a:         super(name, unit, description);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public PollCountStatisticImpl getParent() {
1:d29ca2a:         return parent;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setParent(PollCountStatisticImpl parent) {
1:f812e34:         if (this.parent != null) {
1:d29ca2a:             this.parent.removeChild(this);
1:d29ca2a:         }
1:d29ca2a:         this.parent = parent;
1:f812e34:         if (this.parent != null) {
1:d29ca2a:             this.parent.addChild(this);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     private synchronized void removeChild(PollCountStatisticImpl child) {
1:ecf89a6:         if (children != null) {
1:d29ca2a:             children.remove(child);
1:ecf89a6:         }
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     private synchronized void addChild(PollCountStatisticImpl child) {
1:ecf89a6:         if (children == null) {
1:ecf89a6:             children = new ArrayList<PollCountStatisticImpl>();
1:ecf89a6:         }
1:d29ca2a:         children.add(child);
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     public synchronized long getCount() {
1:ecf89a6:         if (children == null) {
1:d29ca2a:             return 0;
1:ecf89a6:         }
1:f812e34:         long count = 0;
1:ecf89a6:         for (Iterator<PollCountStatisticImpl> iter = children.iterator(); iter.hasNext();) {
1:ecf89a6:             PollCountStatisticImpl child = iter.next();
1:d29ca2a:             count += child.getCount();
1:d29ca2a:         }
1:d29ca2a:         return count;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void appendFieldDescription(StringBuffer buffer) {
1:d29ca2a:         buffer.append(" count: ");
1:d29ca2a:         buffer.append(Long.toString(getCount()));
1:d29ca2a:         super.appendFieldDescription(buffer);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @return the average time period that elapses between counter increments
1:f812e34:      *         since the last reset.
1:d29ca2a:      */
1:d29ca2a:     public double getPeriod() {
1:d29ca2a:         double count = getCount();
1:ecf89a6:         if (count == 0) {
1:d29ca2a:             return 0;
1:ecf89a6:         }
1:ecf89a6:         double time = System.currentTimeMillis() - getStartTime();
1:ecf89a6:         return time / (count * 1000.0);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * @return the number of times per second that the counter is incrementing
1:f812e34:      *         since the last reset.
1:d29ca2a:      */
1:d29ca2a:     public double getFrequency() {
1:d29ca2a:         double count = getCount();
1:ecf89a6:         double time = System.currentTimeMillis() - getStartTime();
1:ecf89a6:         return count * 1000.0 / time;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     private List<PollCountStatisticImpl> children;
/////////////////////////////////////////////////////////////////////////
1:         if (children != null) {
1:         }
1:         if (children == null) {
1:             children = new ArrayList<PollCountStatisticImpl>();
1:         }
1:         if (children == null) {
1:         }
1:         for (Iterator<PollCountStatisticImpl> iter = children.iterator(); iter.hasNext();) {
1:             PollCountStatisticImpl child = iter.next();
/////////////////////////////////////////////////////////////////////////
1:         if (count == 0) {
1:         }
1:         double time = System.currentTimeMillis() - getStartTime();
1:         return time / (count * 1000.0);
/////////////////////////////////////////////////////////////////////////
1:         double time = System.currentTimeMillis() - getStartTime();
1:         return count * 1000.0 / time;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private synchronized void removeChild(PollCountStatisticImpl child) {
1:     private synchronized void addChild(PollCountStatisticImpl child) {
1:     public synchronized long getCount() {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         if (this.parent != null) {
1:         if (this.parent != null) {
0:         if (children != null)
0:         if (children == null)
0:         if (children == null)
1:         long count = 0;
0:             PollCountStatisticImpl child = (PollCountStatisticImpl)iter.next();
1: 
1: 
1:      * @return the average time period that elapses between counter increments
1:      *         since the last reset.
0:         if (count == 0)
0:         return (time / (count * 1000.0));
1: 
1:      * @return the number of times per second that the counter is incrementing
1:      *         since the last reset.
0:         return (count * 1000.0 / time);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import javax.management.j2ee.statistics.CountStatistic;
1: 
1: /**
1:  * A count statistic implementation
1:  *
0:  * @version $Revision$
1:  */
1: public class PollCountStatisticImpl extends StatisticImpl implements CountStatistic {
1: 
1:     private PollCountStatisticImpl parent;
0:     private ArrayList children;
1: 
1:     public PollCountStatisticImpl(PollCountStatisticImpl parent, String name, String description) {
1:         this(name, description);
1:         setParent(parent);
1:     }
1: 
1:     public PollCountStatisticImpl(String name, String description) {
1:         this(name, "count", description);
1:     }
1: 
1:     public PollCountStatisticImpl(String name, String unit, String description) {
1:         super(name, unit, description);
1:     }
1: 
1:     public PollCountStatisticImpl getParent() {
1:         return parent;
1:     }
1: 
1:     public void setParent(PollCountStatisticImpl parent) {
0:         if( this.parent !=null ) {
1:             this.parent.removeChild(this);
1:         }
1:         this.parent = parent;
0:         if( this.parent !=null ) {
1:             this.parent.addChild(this);
1:         }
1:     }
1: 
0:     synchronized private void removeChild(PollCountStatisticImpl child) {
0:         if( children!=null )
1:             children.remove(child);
1:     }
1: 
0:     synchronized private void addChild(PollCountStatisticImpl child) {
0:         if( children==null )
0:             children = new ArrayList();
1:         children.add(child);
1:     }
1: 
0:     synchronized public long getCount() {
0:         if ( children == null )
1:             return 0;
0:         long count=0;
0:         for (Iterator iter = children.iterator(); iter.hasNext();) {
0:             PollCountStatisticImpl child = (PollCountStatisticImpl) iter.next();
1:             count += child.getCount();
1:         }
1:         return count;
1:     }
1:     
1:     protected void appendFieldDescription(StringBuffer buffer) {
1:         buffer.append(" count: ");
1:         buffer.append(Long.toString(getCount()));
1:         super.appendFieldDescription(buffer);
1:     }
1:     
1:     /**
0:      * @return the average time period that elapses between counter increments since the last reset.
1:      */
1:     public double getPeriod() {
1:         double count = getCount();
0:         if( count == 0 )
1:             return 0;
0:         double time = (System.currentTimeMillis() - getStartTime());
0:         return (time/(count*1000.0));
1:     }
1:     
1:     /**
0:      * @return the number of times per second that the counter is incrementing since the last reset.
1:      */
1:     public double getFrequency() {
1:         double count = getCount();
0:         double time = (System.currentTimeMillis() - getStartTime());
0:         return (count*1000.0/time);
1:     }
1: 
1: }
============================================================================