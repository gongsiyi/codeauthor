1:31c01f8: /**
1:31c01f8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c01f8:  * contributor license agreements.  See the NOTICE file distributed with
1:31c01f8:  * this work for additional information regarding copyright ownership.
1:31c01f8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c01f8:  * (the "License"); you may not use this file except in compliance with
1:31c01f8:  * the License.  You may obtain a copy of the License at
1:31c01f8:  *
1:31c01f8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c01f8:  *
1:31c01f8:  * Unless required by applicable law or agreed to in writing, software
1:31c01f8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c01f8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c01f8:  * See the License for the specific language governing permissions and
1:31c01f8:  * limitations under the License.
1:31c01f8:  */
1:31c01f8: package org.apache.activemq.camel;
7:31c01f8: 
1:31c01f8: import java.sql.ResultSet;
1:31c01f8: import java.sql.SQLException;
1:31c01f8: import java.util.concurrent.Executors;
1:d4da85f: 
1:31c01f8: import javax.jms.Connection;
1:31c01f8: import javax.jms.MessageProducer;
1:31c01f8: import javax.jms.Session;
1:31c01f8: import javax.jms.TextMessage;
1:d4da85f: 
1:c8d96c6: import javax.sql.DataSource;
1:31c01f8: import org.apache.activemq.ActiveMQConnectionFactory;
1:31c01f8: import org.apache.activemq.broker.BrokerPlugin;
1:31c01f8: import org.apache.activemq.broker.BrokerPluginSupport;
1:31c01f8: import org.apache.activemq.broker.BrokerService;
1:31c01f8: import org.apache.activemq.broker.ConnectionContext;
1:31c01f8: import org.apache.activemq.command.ActiveMQQueue;
1:31c01f8: import org.apache.activemq.command.TransactionId;
1:31c01f8: import org.apache.activemq.util.Wait;
1:d4da85f: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:5e6f8a1: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:31c01f8: import org.springframework.context.support.AbstractXmlApplicationContext;
1:31c01f8: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:31c01f8: 
1:31c01f8: /**
1:101e711:  *  shows broker 'once only delivery' and recovery with XA
1:31c01f8:  */
1:5e6f8a1: public class JmsJdbcXATest extends CamelSpringTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsJdbcXATest.class);
1:31c01f8:     BrokerService broker = null;
1:101e711:     int messageCount;
1:31c01f8: 
1:31c01f8:     public java.sql.Connection initDb() throws Exception {
1:31c01f8:         String createStatement =
1:31c01f8:                 "CREATE TABLE SCP_INPUT_MESSAGES (" +
1:31c01f8:                         "id int NOT NULL GENERATED ALWAYS AS IDENTITY, " +
1:31c01f8:                         "messageId varchar(96) NOT NULL, " +
1:31c01f8:                         "messageCorrelationId varchar(96) NOT NULL, " +
1:31c01f8:                         "messageContent varchar(2048) NOT NULL, " +
1:31c01f8:                         "PRIMARY KEY (id) )";
1:31c01f8: 
1:101e711:         java.sql.Connection conn = getJDBCConnection();
1:31c01f8:         try {
1:31c01f8:             conn.createStatement().execute(createStatement);
1:31c01f8:         } catch (SQLException alreadyExists) {
1:31c01f8:             log.info("ex on create tables", alreadyExists);
4:31c01f8:         }
1:31c01f8: 
1:31c01f8:         try {
1:31c01f8:             conn.createStatement().execute("DELETE FROM SCP_INPUT_MESSAGES");
1:31c01f8:         } catch (SQLException ex) {
1:31c01f8:             log.info("ex on create delete all", ex);
1:31c01f8:         }
1:31c01f8: 
1:31c01f8:         return conn;
1:31c01f8:     }
1:31c01f8: 
1:101e711:     private java.sql.Connection getJDBCConnection() throws Exception {
1:c8d96c6:         DataSource dataSource = getMandatoryBean(DataSource.class, "managedDataSourceWithRecovery");
1:101e711:         return dataSource.getConnection();
1:101e711:     }
1:101e711: 
1:31c01f8:     private int dumpDb(java.sql.Connection jdbcConn) throws Exception {
1:31c01f8:         int count = 0;
1:31c01f8:         ResultSet resultSet = jdbcConn.createStatement().executeQuery("SELECT * FROM SCP_INPUT_MESSAGES");
1:31c01f8:         while (resultSet.next()) {
1:31c01f8:             count++;
1:31c01f8:             log.info("message - seq:" + resultSet.getInt(1)
1:31c01f8:                     + ", id: " + resultSet.getString(2)
1:31c01f8:                     + ", corr: " + resultSet.getString(3)
1:31c01f8:                     + ", content: " + resultSet.getString(4));
1:31c01f8:         }
1:31c01f8:         return count;
1:31c01f8:     }
1:31c01f8: 
1:5e6f8a1:     @Test
1:101e711:     public void testRecoveryCommit() throws Exception {
1:101e711:         java.sql.Connection jdbcConn = initDb();
1:31c01f8: 
1:101e711:         sendJMSMessageToKickOffRoute();
1:101e711:         LOG.info("waiting for route to kick in, it will kill the broker on first 2pc commit");
1:101e711:         // will be stopped by the plugin on first 2pc commit
1:101e711:         broker.waitUntilStopped();
1:101e711:         assertEquals("message in db, commit to db worked", 1, dumpDb(jdbcConn));
1:101e711: 
1:101e711:         LOG.info("Broker stopped, restarting...");
1:101e711:         broker = createBroker(false);
1:101e711:         broker.start();
1:101e711:         broker.waitUntilStarted();
1:101e711:         assertEquals("pending transactions", 1, broker.getBroker().getPreparedTransactions(null).length);
1:101e711: 
1:101e711:         // TM stays actively committing first message ack which won't get redelivered - xa once only delivery
1:101e711:         LOG.info("waiting for recovery to complete");
1:101e711:         assertTrue("recovery complete in time", Wait.waitFor(new Wait.Condition() {
1:101e711:             @Override
1:101e711:             public boolean isSatisified() throws Exception {
1:101e711:                 return broker.getBroker().getPreparedTransactions(null).length == 0;
1:101e711:             }
1:101e711:         }));
1:101e711:         // verify recovery complete
1:101e711:         assertEquals("recovery complete", 0, broker.getBroker().getPreparedTransactions(null).length);
1:101e711: 
1:101e711:         final java.sql.Connection freshConnection = getJDBCConnection();
1:101e711:         assertTrue("did not get replay", Wait.waitFor(new Wait.Condition() {
1:101e711:             @Override
1:101e711:             public boolean isSatisified() throws Exception {
1:101e711:                 return 1 == dumpDb(freshConnection);
1:101e711:             }
1:101e711:         }));
1:101e711:         assertEquals("still one message in db", 1, dumpDb(freshConnection));
1:101e711: 
1:101e711:         // let once complete ok
1:101e711:         sendJMSMessageToKickOffRoute();
1:101e711: 
1:101e711:         assertTrue("got second message", Wait.waitFor(new Wait.Condition() {
1:101e711:             @Override
1:101e711:             public boolean isSatisified() throws Exception {
1:101e711:                 return 2 == dumpDb(freshConnection);
1:101e711:             }
1:101e711:         }));
1:101e711:         assertEquals("two messages in db", 2, dumpDb(freshConnection));
1:101e711:     }
1:101e711: 
1:101e711:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:101e711:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:101e711:         factory.setWatchTopicAdvisories(false);
1:101e711:         Connection connection = factory.createConnection();
1:101e711:         connection.start();
1:101e711:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:101e711:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:101e711:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:101e711:         message.setJMSCorrelationID("pleaseCorrelate");
1:101e711:         producer.send(message);
1:101e711:         connection.close();
1:101e711:     }
1:101e711: 
1:101e711:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:101e711:         BrokerService brokerService = new BrokerService();
1:101e711:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:101e711:         brokerService.setBrokerName("testXA");
1:101e711:         brokerService.setAdvisorySupport(false);
1:101e711:         brokerService.setUseJmx(false);
1:101e711:         brokerService.setDataDirectory("target/data");
1:101e711:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:101e711:         return brokerService;
1:101e711:     }
1:101e711: 
1:d4da85f:     @SuppressWarnings("unchecked")
1:101e711:     @Override
1:101e711:     protected AbstractXmlApplicationContext createApplicationContext() {
1:101e711: 
1:101e711:         deleteDirectory("target/data/howl");
1:101e711: 
1:101e711:         // make broker available to recovery processing on app context start
1:101e711:         try {
1:101e711:             broker = createBroker(true);
1:101e711:             broker.setPlugins(new BrokerPlugin[]{
1:31c01f8:                 new BrokerPluginSupport() {
3:31c01f8:                     @Override
1:31c01f8:                     public void commitTransaction(ConnectionContext context,
1:31c01f8:                                                   TransactionId xid, boolean onePhase) throws Exception {
1:31c01f8:                         if (onePhase) {
1:31c01f8:                             super.commitTransaction(context, xid, onePhase);
1:31c01f8:                         } else {
1:31c01f8:                             // die before doing the commit
1:31c01f8:                             // so commit will hang as if reply is lost
1:31c01f8:                             context.setDontSendReponse(true);
1:31c01f8:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:d4da85f:                                 @Override
1:31c01f8:                                 public void run() {
1:31c01f8:                                     LOG.info("Stopping broker post commit...");
1:31c01f8:                                     try {
1:31c01f8:                                         broker.stop();
1:31c01f8:                                     } catch (Exception e) {
1:31c01f8:                                         e.printStackTrace();
1:31c01f8:                                     }
1:31c01f8:                                 }
1:101e711:                             });
1:31c01f8:                         }
1:31c01f8:                     }
1:31c01f8:                 }
2:31c01f8:             });
1:101e711:             broker.start();
1:101e711:         } catch (Exception e) {
1:101e711:             throw new RuntimeException("Failed to start broker", e);
1:101e711:         }
1:31c01f8: 
1:31c01f8:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsXajdbc.xml");
1:31c01f8:     }
1:31c01f8: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c8d96c6
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         DataSource dataSource = getMandatoryBean(DataSource.class, "managedDataSourceWithRecovery");
commit:9c4621d
/////////////////////////////////////////////////////////////////////////
author:Jeff Genender
-------------------------------------------------------------------------------
commit:939c8a1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.dbcp2.BasicDataSource;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:                                 @Override
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:fef7f54
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
0: @Ignore("Test hangs")
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7b02226
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.test.junit4.CamelSpringTestSupport;
0: import org.junit.Ignore;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
0: @Ignore("When upgrade to the Camel 2.8.0, this test will be hang due to camel-jdbc autoCommit issue CAMEL-4272."
0:         + "We should remove this Ignore annotation when upgrade Camel version again")
1: public class JmsJdbcXATest extends CamelSpringTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     @Test
author:Gary Tully
-------------------------------------------------------------------------------
commit:101e711
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.dbcp.BasicDataSource;
1:  *  shows broker 'once only delivery' and recovery with XA
1:     int messageCount;
/////////////////////////////////////////////////////////////////////////
1:         java.sql.Connection conn = getJDBCConnection();
/////////////////////////////////////////////////////////////////////////
1:     private java.sql.Connection getJDBCConnection() throws Exception {
0:         BasicDataSource dataSource = getMandatoryBean(BasicDataSource.class, "managedDataSourceWithRecovery");
1:         return dataSource.getConnection();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testRecoveryCommit() throws Exception {
1:         java.sql.Connection jdbcConn = initDb();
1:         sendJMSMessageToKickOffRoute();
1:         LOG.info("waiting for route to kick in, it will kill the broker on first 2pc commit");
1:         // will be stopped by the plugin on first 2pc commit
1:         broker.waitUntilStopped();
1:         assertEquals("message in db, commit to db worked", 1, dumpDb(jdbcConn));
1: 
1:         LOG.info("Broker stopped, restarting...");
1:         broker = createBroker(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         assertEquals("pending transactions", 1, broker.getBroker().getPreparedTransactions(null).length);
1: 
1:         // TM stays actively committing first message ack which won't get redelivered - xa once only delivery
1:         LOG.info("waiting for recovery to complete");
1:         assertTrue("recovery complete in time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getBroker().getPreparedTransactions(null).length == 0;
1:             }
1:         }));
1:         // verify recovery complete
1:         assertEquals("recovery complete", 0, broker.getBroker().getPreparedTransactions(null).length);
1: 
1:         final java.sql.Connection freshConnection = getJDBCConnection();
1:         assertTrue("did not get replay", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == dumpDb(freshConnection);
1:             }
1:         }));
1:         assertEquals("still one message in db", 1, dumpDb(freshConnection));
1: 
1:         // let once complete ok
1:         sendJMSMessageToKickOffRoute();
1: 
1:         assertTrue("got second message", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 2 == dumpDb(freshConnection);
1:             }
1:         }));
1:         assertEquals("two messages in db", 2, dumpDb(freshConnection));
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:         message.setJMSCorrelationID("pleaseCorrelate");
1:         producer.send(message);
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName("testXA");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectory("target/data");
1:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:         return brokerService;
1:     }
1: 
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1: 
1:         deleteDirectory("target/data/howl");
1: 
1:         // make broker available to recovery processing on app context start
1:         try {
1:             broker = createBroker(true);
1:             broker.setPlugins(new BrokerPlugin[]{
/////////////////////////////////////////////////////////////////////////
1:             });
1:             broker.start();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
commit:31c01f8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.concurrent.Executors;
0: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.util.Wait;
0: import org.apache.camel.spring.SpringTestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.enhydra.jdbc.pool.StandardXAPoolDataSource;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: /**
0:  *  shows broker heuristic rollback (no prepare memory), hence duplicate message delivery
1:  */
0: public class JmsJdbcXATest extends SpringTestSupport {
0:     private static final Log LOG = LogFactory.getLog(JmsJdbcXATest.class);
1:     BrokerService broker = null;
1: 
1:     public java.sql.Connection initDb() throws Exception {
1:         String createStatement =
1:                 "CREATE TABLE SCP_INPUT_MESSAGES (" +
1:                         "id int NOT NULL GENERATED ALWAYS AS IDENTITY, " +
1:                         "messageId varchar(96) NOT NULL, " +
1:                         "messageCorrelationId varchar(96) NOT NULL, " +
1:                         "messageContent varchar(2048) NOT NULL, " +
1:                         "PRIMARY KEY (id) )";
1: 
0:         java.sql.Connection conn = null;
0:         StandardXAPoolDataSource pool = getMandatoryBean(StandardXAPoolDataSource.class, "jdbcEnhydraXaDataSource");
0:         conn = pool.getConnection();
1:         try {
1:             conn.createStatement().execute(createStatement);
1:         } catch (SQLException alreadyExists) {
1:             log.info("ex on create tables", alreadyExists);
1:         }
1: 
1:         try {
1:             conn.createStatement().execute("DELETE FROM SCP_INPUT_MESSAGES");
1:         } catch (SQLException ex) {
1:             log.info("ex on create delete all", ex);
1:         }
1: 
1:         return conn;
1:     }
1: 
1:     private int dumpDb(java.sql.Connection jdbcConn) throws Exception {
1:         int count = 0;
1:         ResultSet resultSet = jdbcConn.createStatement().executeQuery("SELECT * FROM SCP_INPUT_MESSAGES");
1:         while (resultSet.next()) {
1:             count++;
1:             log.info("message - seq:" + resultSet.getInt(1)
1:                     + ", id: " + resultSet.getString(2)
1:                     + ", corr: " + resultSet.getString(3)
1:                     + ", content: " + resultSet.getString(4));
1:         }
1:         return count;
1:     }
1: 
0:     public void testRecovery() throws Exception {
1: 
0:         broker = createBroker(true);
0:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public void commitTransaction(ConnectionContext context,
1:                                                   TransactionId xid, boolean onePhase) throws Exception {
1:                         if (onePhase) {
1:                             super.commitTransaction(context, xid, onePhase);
1:                         } else {
1:                             // die before doing the commit
1:                             // so commit will hang as if reply is lost
1:                             context.setDontSendReponse(true);
1:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                                 public void run() {
1:                                     LOG.info("Stopping broker post commit...");
1:                                     try {
1:                                         broker.stop();
1:                                     } catch (Exception e) {
1:                                         e.printStackTrace();
1:                                     }
1:                                 }
1:                             });
1:                         }
1:                     }
1:                 }
1:         });
0:         broker.start();
1: 
0:         final java.sql.Connection jdbcConn = initDb();
1: 
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testXA");
0:         factory.setWatchTopicAdvisories(false);
0:         Connection connection = factory.createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
0:         TextMessage message = session.createTextMessage("Some Text");
0:         message.setJMSCorrelationID("pleaseCorrelate");
0:         producer.send(message);
1: 
0:         LOG.info("waiting for route to kick in, it will kill the broker on first 2pc commit");
0:         // will be stopped by the plugin on first 2pc commit
0:         broker.waitUntilStopped();
0:         assertEquals("message in db, commit to db worked", 1, dumpDb(jdbcConn));
1: 
0:         LOG.info("Broker stopped, restarting...");
0:         broker = createBroker(false);
0:         broker.start();
0:         broker.waitUntilStarted();
1: 
0:         LOG.info("waiting for completion or route with replayed message");
0:         assertTrue("got a second message in the db", Wait.waitFor(new Wait.Condition() {
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return 2 == dumpDb(jdbcConn);
1:             }
0:         }));
0:         assertEquals("message in db", 2, dumpDb(jdbcConn));
1:     }
1: 
0:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
0:         BrokerService brokerService = new BrokerService();
0:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
0:         brokerService.setBrokerName("testXA");
0:         brokerService.setAdvisorySupport(false);
0:         brokerService.setUseJmx(false);
0:         brokerService.setDataDirectory("target/data");
0:         brokerService.addConnector("tcp://0.0.0.0:61616");
0:         return brokerService;
1:     }
1: 
1:     @Override
0:     protected AbstractXmlApplicationContext createApplicationContext() {
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsXajdbc.xml");
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsJdbcXATest.class);
============================================================================