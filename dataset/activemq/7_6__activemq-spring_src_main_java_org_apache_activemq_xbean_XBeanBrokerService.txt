1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.xbean;
3:d29ca2a: 
1:b5b6a08: import java.io.IOException;
1:d29ca2a: 
1:09fab74: import javax.annotation.PostConstruct;
1:09fab74: import javax.annotation.PreDestroy;
1:d29ca2a: 
1:60646c9: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:b5b6a08: import org.apache.activemq.usage.SystemUsage;
1:35f15ac: import org.springframework.beans.CachedIntrospectionResults;
1:d29ca2a: 
1:d29ca2a: /**
1:bf4d753:  * An ActiveMQ Message Broker. It consists of a number of transport
1:d29ca2a:  * connectors, network connectors and a bunch of properties which can be used to
1:d29ca2a:  * configure the broker as its lazily created.
1:6f2ac63:  *
1:bf4d753:  * @org.apache.xbean.XBean element="broker" rootElement="true"
1:6f2ac63:  * @org.apache.xbean.Defaults {code:xml}
1:bf4d753:  * <broker test="foo.bar">
1:bf4d753:  *   lets.
1:bf4d753:  *   see what it includes.
1:6f2ac63:  * </broker>
1:bf4d753:  * {code}
1:6f2ac63:  *
1:d29ca2a:  */
1:11705e7: public class XBeanBrokerService extends BrokerService {
1:6f2ac63: 
1:4a29408:     private boolean start;
1:6f2ac63: 
1:d29ca2a:     public XBeanBrokerService() {
1:60646c9:         start = BrokerFactory.getStartDefault();
1:d29ca2a:     }
1:3910056: 
1:d3fb1aa:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:174fe15:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.InitMethod
1:d3fb1aa:      */
1:d29ca2a:     public void afterPropertiesSet() throws Exception {
1:b5b6a08:         ensureSystemUsageHasStore();
1:20118f2:         if (shouldAutostart()) {
1:d29ca2a:             start();
1:3910056:         }
1:3910056:     }
1:3910056: 
1:20118f2:     @Override
1:20118f2:     protected boolean shouldAutostart() {
1:d29ca2a:         return start;
1:d29ca2a:     }
1:3910056: 
1:b5b6a08:     private void ensureSystemUsageHasStore() throws IOException {
1:b5b6a08:         SystemUsage usage = getSystemUsage();
1:b5b6a08:         if (usage.getStoreUsage().getStore() == null) {
1:b5b6a08:             usage.getStoreUsage().setStore(getPersistenceAdapter());
1:d29ca2a:         }
1:b5b6a08:         if (usage.getTempUsage().getStore() == null) {
1:b5b6a08:             usage.getTempUsage().setStore(getTempDataStore());
1:35f15ac:         }
1:f21992e:         if (usage.getJobSchedulerUsage().getStore() == null) {
1:f21992e:             usage.getJobSchedulerUsage().setStore(getJobSchedulerStore());
1:f21992e:         }
1:20118f2:     }
1:3910056: 
1:09fab74:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:b0c2a40:      *
1:174fe15:      * delegates to destroy, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PreDestroy
1:174fe15:     private void preDestroy() {
1:174fe15:         try {
1:174fe15:             destroy();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:d29ca2a:      *
1:09fab74:      * @throws Exception
1:09fab74:      * @org.apache.xbean.DestroyMethod
1:09fab74:      */
1:d29ca2a:     public void destroy() throws Exception {
1:d29ca2a:         stop();
1:d29ca2a:     }
1:d29ca2a: 
1:35f15ac:     @Override
1:35f15ac:     public void stop() throws Exception {
1:35f15ac:         // must clear this Spring cache to avoid any memory leaks
1:35f15ac:         CachedIntrospectionResults.clearClassLoader(getClass().getClassLoader());
1:35f15ac:         super.stop();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets whether or not the broker is started along with the ApplicationContext it is defined within.
1:d29ca2a:      * Normally you would want the broker to start up along with the ApplicationContext but sometimes when working
1:d29ca2a:      * with JUnit tests you may wish to start and stop the broker explicitly yourself.
1:d29ca2a:      */
1:d29ca2a:     public void setStart(boolean start) {
1:d29ca2a:         this.start = start;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to destroy, done to prevent backwards incompatible signature change.
1:      */
1:     @PreDestroy
1:     private void preDestroy() {
1:         try {
1:             destroy();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
commit:f21992e
/////////////////////////////////////////////////////////////////////////
1:         if (usage.getJobSchedulerUsage().getStore() == null) {
1:             usage.getJobSchedulerUsage().setStore(getJobSchedulerStore());
1:         }
commit:6f2ac63
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * @org.apache.xbean.Defaults {code:xml}
1:  * </broker>
1:  *
1: 
1: 
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerFactory;
/////////////////////////////////////////////////////////////////////////
1:         start = BrokerFactory.getStartDefault();
commit:7c9fec6
commit:58aca86
commit:4a29408
/////////////////////////////////////////////////////////////////////////
1:     private boolean start;
0:         start = XBeanBrokerFactory.getStartDefault();
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:3910056
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.beans.BeansException;
0: import org.springframework.context.ApplicationContext;
0: import org.springframework.context.ApplicationContextAware;
/////////////////////////////////////////////////////////////////////////
0: public class XBeanBrokerService extends BrokerService implements InitializingBean, DisposableBean, ApplicationContextAware {
0:     private ApplicationContext applicationContext = null;
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public void setApplicationContext(ApplicationContext applicationContext)
0: 			throws BeansException {
0: 		this.applicationContext = applicationContext;
1: 	}
1: 
0: 	public ApplicationContext getApplicationContext() {
0: 		return applicationContext;
1: 	}
1:     
1:     
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bf4d753
/////////////////////////////////////////////////////////////////////////
1:  * An ActiveMQ Message Broker. It consists of a number of transport
1:  * @org.apache.xbean.XBean element="broker" rootElement="true"
0:  * @org.apache.xbean.Defaults {code:xml} 
1:  * <broker test="foo.bar">
1:  *   lets.
1:  *   see what it includes.
0:  * </broker>   
1:  * {code}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean element="broker" rootElement="true" description="An ActiveMQ
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.springframework.beans.factory.DisposableBean;
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: /**
0:  * Represents a running broker service which consists of a number of transport
1:  * connectors, network connectors and a bunch of properties which can be used to
1:  * configure the broker as its lazily created.
1:  * 
0:  * @org.xbean.XBean element="broker" rootElement="true" description="An ActiveMQ
0:  *                  Message Broker which consists of a number of transport
0:  *                  connectors, network connectors and a persistence adaptor"
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class XBeanBrokerService extends BrokerService implements InitializingBean, DisposableBean {
1: 
0:     private boolean start = true;
1: 
1:     public XBeanBrokerService() {
1:     }
1: 
1:     public void afterPropertiesSet() throws Exception {
0:         if (start) {
1:             start();
1:         }
1:     }
1: 
1:     public void destroy() throws Exception {
1:         stop();
1:     }
1: 
0:     public boolean isStart() {
1:         return start;
1:     }
1: 
1:     /**
1:      * Sets whether or not the broker is started along with the ApplicationContext it is defined within.
1:      * Normally you would want the broker to start up along with the ApplicationContext but sometimes when working
1:      * with JUnit tests you may wish to start and stop the broker explicitly yourself.
1:      */
1:     public void setStart(boolean start) {
1:         this.start = start;
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:35f15ac
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.beans.CachedIntrospectionResults;
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
1:     public void stop() throws Exception {
1:         // must clear this Spring cache to avoid any memory leaks
1:         CachedIntrospectionResults.clearClassLoader(getClass().getClassLoader());
1:         super.stop();
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:eebe135
/////////////////////////////////////////////////////////////////////////
0:             start();
commit:ed58e9a
/////////////////////////////////////////////////////////////////////////
0:             startAsync();
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Logger LOG = LoggerFactory.getLogger(XBeanBrokerService.class);
commit:20118f2
/////////////////////////////////////////////////////////////////////////
1:         if (shouldAutostart()) {
1:     @Override
1:     protected boolean shouldAutostart() {
0:         return start;
1:     }
0: 
commit:11705e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class XBeanBrokerService extends BrokerService {
/////////////////////////////////////////////////////////////////////////
commit:145c80a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Deprecated
0:         LOG.warn("destroyApplicationContextOnShutdown parameter is deprecated, please use shutdown hooks instead");
0:     @Deprecated
0:         LOG.warn("destroyApplicationContextOnStop parameter is deprecated, please use shutdown hooks instead");
commit:0a3c0e5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.osgi.framework.BundleException;
0: import org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(XBeanBrokerService.class);
0:     
/////////////////////////////////////////////////////////////////////////
0:                     if (applicationContext instanceof OsgiBundleXmlApplicationContext){
0:                         try {
0:                             ((OsgiBundleXmlApplicationContext)applicationContext).getBundle().stop();
0:                         } catch (BundleException e) {
0:                             LOG.info("Error stopping OSGi bundle " + e, e);
0:                         }
0:                     }
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:d3fb1aa
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:     private boolean destroyApplicationContextOnStop = false;
0:     Runnable stopContextRunnable = new Runnable() {
0:         public void run() {
0:             if (applicationContext instanceof ConfigurableApplicationContext) {
0:                 ((ConfigurableApplicationContext) applicationContext).close();
0:             }
0:             if (applicationContext instanceof OsgiBundleXmlApplicationContext){
0:                 try {
0:                     ((OsgiBundleXmlApplicationContext)applicationContext).getBundle().stop();
0:                 } catch (BundleException e) {
0:                     LOG.info("Error stopping OSGi bundle " + e, e);
0:                 }
0:             }
0: 
0:         }
0:     };
0:     
/////////////////////////////////////////////////////////////////////////
0:             addShutdownHook(stopContextRunnable);
/////////////////////////////////////////////////////////////////////////
0:     
0:    @Override
0:    public void stop() throws Exception {      
0:        if (destroyApplicationContextOnStop) {
0:            stopContextRunnable.run();
0:        }
0:        super.stop();
0:    }
0:     
/////////////////////////////////////////////////////////////////////////
0:      * Sets whether the broker should shutdown the ApplicationContext when the broker jvm is shutdown.
0:     
1:     /**
0:      * Sets whether the broker should shutdown the ApplicationContext when the broker is stopped.
0:      * The broker can be stopped because the underlying JDBC store is unavailable for example.
1:      */
0:     public void setDestroyApplicationContextOnStop(boolean destroy) {
0:         this.destroyApplicationContextOnStop = destroy;
0:     }
commit:b5b6a08
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: 
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:         ensureSystemUsageHasStore();
/////////////////////////////////////////////////////////////////////////
1:     private void ensureSystemUsageHasStore() throws IOException {
1:         SystemUsage usage = getSystemUsage();
1:         if (usage.getStoreUsage().getStore() == null) {
1:             usage.getStoreUsage().setStore(getPersistenceAdapter());
0:         }
1:         if (usage.getTempUsage().getStore() == null) {
1:             usage.getTempUsage().setStore(getTempDataStore());
0:         }
0:     }
0: 
author:David Jencks
-------------------------------------------------------------------------------
commit:09fab74
/////////////////////////////////////////////////////////////////////////
1: import javax.annotation.PostConstruct;
1: import javax.annotation.PreDestroy;
/////////////////////////////////////////////////////////////////////////
0: public class XBeanBrokerService extends BrokerService implements ApplicationContextAware {
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      *
1:      * @throws Exception
1:      * @org.apache.xbean.DestroyMethod
0:      */
0:     @PreDestroy
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:b609bdb
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.context.ConfigurableApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:     private boolean destroyApplicationContextOnShutdown = false;
/////////////////////////////////////////////////////////////////////////
0:         if (destroyApplicationContextOnShutdown) {
0:             addShutdownHook(new Runnable() {
0:                 public void run() {
0:                     if (applicationContext instanceof ConfigurableApplicationContext) {
0: 	                    ((ConfigurableApplicationContext) applicationContext).close();
0:                     }
0:                 }
0:             });
0:         }
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * Sets whether the broker should shutdown the ApplicationContext when the broker is stopped.
0:      * The broker can be stopped because the underlying JDBC store is unavailable for example.
0:      */
0:     public void setDestroyApplicationContextOnShutdown(boolean destroy) {
0:         this.destroyApplicationContextOnShutdown = destroy;
0:     }
0: 
============================================================================