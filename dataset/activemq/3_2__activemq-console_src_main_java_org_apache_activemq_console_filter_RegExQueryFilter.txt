1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:5f1adbe: import java.util.ArrayList;
1:5f1adbe: import java.util.HashMap;
1:5f1adbe: import java.util.Iterator;
1:a107823: import java.util.List;
1:a107823: import java.util.Map;
1:5f1adbe: import java.util.regex.Pattern;
1:a107823: 
1:a107823: public abstract class RegExQueryFilter extends AbstractQueryFilter {
1:a107823:     public static final String REGEX_PREFIX = "REGEX:QUERY:";
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates a regular expression query that is able to match an object using
1:5f1adbe:      * key-value pattern regex filtering
1:f1486c6:      *
1:a107823:      * @param next
1:a107823:      */
1:a107823:     protected RegExQueryFilter(QueryFilter next) {
1:a107823:         super(next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Separates the regular expressions queries from the usual queries. A query
1:5f1adbe:      * is a regex query, if it is key-value pair with the format <key>=<value>,
1:5f1adbe:      * and value is a pattern that satisfies the isRegularExpression method.
1:f1486c6:      *
1:a107823:      * @param queries - list of queries
1:a107823:      * @return filtered objects that matches the regex query
1:a107823:      * @throws Exception
1:a107823:      */
1:f1486c6:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:a107823:     public List query(List queries) throws Exception {
1:a107823:         Map regex = new HashMap();
1:a107823:         List newQueries = new ArrayList();
1:a107823: 
1:a107823:         // Lets parse for regular expression queries
1:5f1adbe:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:a107823:             // Get key-value pair
1:a107823:             String token = (String)i.next();
1:a107823:             String key = "";
1:a107823:             String val = "";
1:a107823:             int pos = token.indexOf("=");
1:a107823:             if (pos >= 0) {
1:a107823:                 val = token.substring(pos + 1);
1:a107823:                 key = token.substring(0, pos);
1:a107823:             }
1:a107823: 
1:5f1adbe:             // Add the regex query to list and make it a non-factor in the
1:5f1adbe:             // succeeding queries
1:a107823:             if (isRegularExpression(val)) {
1:a107823:                 regex.put(key, compileQuery(val));
1:a107823: 
1:5f1adbe:                 // Add the normal query to the query list
1:a107823:             } else {
1:a107823:                 newQueries.add(token);
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         // Filter the result using the regular expressions specified
1:a107823:         return filterCollectionUsingRegEx(regex, next.query(newQueries));
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Checks if a given string is a regular expression query. Currently, a
1:5f1adbe:      * pattern is a regex query, if it starts with the
1:5f1adbe:      * RegExQueryFilter.REGEX_PREFIX.
1:f1486c6:      *
1:a107823:      * @param query
1:f1486c6:      * @return boolean result of query check
1:a107823:      */
1:a107823:     protected boolean isRegularExpression(String query) {
1:a107823:         return query.startsWith(REGEX_PREFIX);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Compiles the regex query to a pattern.
1:f1486c6:      *
1:a107823:      * @param query - query string to compile
1:a107823:      * @return regex pattern
1:a107823:      */
1:a107823:     protected Pattern compileQuery(String query) {
1:a107823:         return Pattern.compile(query.substring(REGEX_PREFIX.length()));
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Filter the specified colleciton using the regex patterns extracted.
1:f1486c6:      *
1:a107823:      * @param regex - regex map
1:a107823:      * @param data - list of objects to filter
1:a107823:      * @return filtered list of objects that matches the regex map
1:a107823:      * @throws Exception
1:a107823:      */
1:f1486c6:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:a107823:     protected List filterCollectionUsingRegEx(Map regex, List data) throws Exception {
1:a107823:         // No regular expressions filtering needed
1:5f1adbe:         if (regex == null || regex.isEmpty()) {
1:a107823:             return data;
1:a107823:         }
1:a107823: 
1:a107823:         List filteredElems = new ArrayList();
1:a107823: 
1:a107823:         // Get each data object to filter
1:5f1adbe:         for (Iterator i = data.iterator(); i.hasNext();) {
1:a107823:             Object dataElem = i.next();
1:a107823:             // If properties of data matches all the regex pattern, add it
1:a107823:             if (matches(dataElem, regex)) {
1:a107823:                 filteredElems.add(dataElem);
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return filteredElems;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Determines how the object is to be matched to the regex map.
1:f1486c6:      *
1:a107823:      * @param data - object to match
1:a107823:      * @param regex - regex map
1:a107823:      * @return true, if the object matches the regex map, false otherwise
1:a107823:      * @throws Exception
1:a107823:      */
1:f1486c6:     @SuppressWarnings("rawtypes")
1:a107823:     protected abstract boolean matches(Object data, Map regex) throws Exception;
1:a107823: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f1486c6
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return boolean result of query check
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @SuppressWarnings("rawtypes")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.regex.Pattern;
1:      * Creates a regular expression query that is able to match an object using
1:      * key-value pattern regex filtering
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Separates the regular expressions queries from the usual queries. A query
1:      * is a regex query, if it is key-value pair with the format <key>=<value>,
1:      * and value is a pattern that satisfies the isRegularExpression method.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = queries.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             // Add the regex query to list and make it a non-factor in the
1:             // succeeding queries
1:                 // Add the normal query to the query list
/////////////////////////////////////////////////////////////////////////
1:      * Checks if a given string is a regular expression query. Currently, a
1:      * pattern is a regex query, if it starts with the
1:      * RegExQueryFilter.REGEX_PREFIX.
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:         if (regex == null || regex.isEmpty()) {
1:         for (Iterator i = data.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
0:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import java.util.regex.Pattern;
1: import java.util.List;
1: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: public abstract class RegExQueryFilter extends AbstractQueryFilter {
1:     public static final String REGEX_PREFIX = "REGEX:QUERY:";
1: 
1:     /**
0:      * Creates a regular expression query that is able to match an object using key-value pattern regex filtering
1:      * @param next
1:      */
1:     protected RegExQueryFilter(QueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
0:      * Separates the regular expressions queries from the usual queries. A query is a regex query, if it is key-value pair
0:      * with the format <key>=<value>, and value is a pattern that satisfies the isRegularExpression method.
1:      * @param queries - list of queries
1:      * @return filtered objects that matches the regex query
1:      * @throws Exception
1:      */
1:     public List query(List queries) throws Exception {
1:         Map regex = new HashMap();
1:         List newQueries = new ArrayList();
1: 
1:         // Lets parse for regular expression queries
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
1:             // Get key-value pair
1:             String token = (String)i.next();
1:             String key = "";
1:             String val = "";
1:             int pos = token.indexOf("=");
1:             if (pos >= 0) {
1:                 val = token.substring(pos + 1);
1:                 key = token.substring(0, pos);
1:             }
1: 
0:             // Add the regex query to list and make it a non-factor in the succeeding queries
1:             if (isRegularExpression(val)) {
1:                 regex.put(key, compileQuery(val));
1: 
0:             // Add the normal query to the query list
1:             } else {
1:                 newQueries.add(token);
1:             }
1:         }
1: 
1:         // Filter the result using the regular expressions specified
1:         return filterCollectionUsingRegEx(regex, next.query(newQueries));
1:     }
1: 
1:     /**
0:      * Checks if a given string is a regular expression query. Currently, a pattern is a regex query, if it starts with
0:      * the RegExQueryFilter.REGEX_PREFIX.
1:      * @param query
0:      * @return
1:      */
1:     protected boolean isRegularExpression(String query) {
1:         return query.startsWith(REGEX_PREFIX);
1:     }
1: 
1:     /**
1:      * Compiles the regex query to a pattern.
1:      * @param query - query string to compile
1:      * @return regex pattern
1:      */
1:     protected Pattern compileQuery(String query) {
1:         return Pattern.compile(query.substring(REGEX_PREFIX.length()));
1:     }
1: 
1:     /**
1:      * Filter the specified colleciton using the regex patterns extracted.
1:      * @param regex - regex map
1:      * @param data - list of objects to filter
1:      * @return filtered list of objects that matches the regex map
1:      * @throws Exception
1:      */
1:     protected List filterCollectionUsingRegEx(Map regex, List data) throws Exception {
1:         // No regular expressions filtering needed
0:         if (regex==null || regex.isEmpty()) {
1:             return data;
1:         }
1: 
1:         List filteredElems = new ArrayList();
1: 
1:         // Get each data object to filter
0:         for (Iterator i=data.iterator(); i.hasNext();) {
1:             Object dataElem = i.next();
1:             // If properties of data matches all the regex pattern, add it
1:             if (matches(dataElem, regex)) {
1:                 filteredElems.add(dataElem);
1:             }
1:         }
1: 
1:         return filteredElems;
1:     }
1: 
1:     /**
1:      * Determines how the object is to be matched to the regex map.
1:      * @param data - object to match
1:      * @param regex - regex map
1:      * @return true, if the object matches the regex map, false otherwise
1:      * @throws Exception
1:      */
1:     protected abstract boolean matches(Object data, Map regex) throws Exception;
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import java.util.regex.Pattern;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: public abstract class RegExQueryFilter extends AbstractQueryFilter {
0:     public static final String REGEX_PREFIX = "REGEX:QUERY:";
0: 
0:     /**
0:      * Creates a regular expression query that is able to match an object using key-value pattern regex filtering
0:      * @param next
0:      */
0:     protected RegExQueryFilter(QueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Separates the regular expressions queries from the usual queries. A query is a regex query, if it is key-value pair
0:      * with the format <key>=<value>, and value is a pattern that satisfies the isRegularExpression method.
0:      * @param queries - list of queries
0:      * @return filtered objects that matches the regex query
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         Map regex = new HashMap();
0:         List newQueries = new ArrayList();
0: 
0:         // Lets parse for regular expression queries
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             // Get key-value pair
0:             String token = (String)i.next();
0:             String key = "";
0:             String val = "";
0:             int pos = token.indexOf("=");
0:             if (pos >= 0) {
0:                 val = token.substring(pos + 1);
0:                 key = token.substring(0, pos);
0:             }
0: 
0:             // Add the regex query to list and make it a non-factor in the succeeding queries
0:             if (isRegularExpression(val)) {
0:                 regex.put(key, compileQuery(val));
0: 
0:             // Add the normal query to the query list
0:             } else {
0:                 newQueries.add(token);
0:             }
0:         }
0: 
0:         // Filter the result using the regular expressions specified
0:         return filterCollectionUsingRegEx(regex, next.query(newQueries));
0:     }
0: 
0:     /**
0:      * Checks if a given string is a regular expression query. Currently, a pattern is a regex query, if it starts with
0:      * the RegExQueryFilter.REGEX_PREFIX.
0:      * @param query
0:      * @return
0:      */
0:     protected boolean isRegularExpression(String query) {
0:         return query.startsWith(REGEX_PREFIX);
0:     }
0: 
0:     /**
0:      * Compiles the regex query to a pattern.
0:      * @param query - query string to compile
0:      * @return regex pattern
0:      */
0:     protected Pattern compileQuery(String query) {
0:         return Pattern.compile(query.substring(REGEX_PREFIX.length()));
0:     }
0: 
0:     /**
0:      * Filter the specified colleciton using the regex patterns extracted.
0:      * @param regex - regex map
0:      * @param data - list of objects to filter
0:      * @return filtered list of objects that matches the regex map
0:      * @throws Exception
0:      */
0:     protected List filterCollectionUsingRegEx(Map regex, List data) throws Exception {
0:         // No regular expressions filtering needed
0:         if (regex==null || regex.isEmpty()) {
0:             return data;
0:         }
0: 
0:         List filteredElems = new ArrayList();
0: 
0:         // Get each data object to filter
0:         for (Iterator i=data.iterator(); i.hasNext();) {
0:             Object dataElem = i.next();
0:             // If properties of data matches all the regex pattern, add it
0:             if (matches(dataElem, regex)) {
0:                 filteredElems.add(dataElem);
0:             }
0:         }
0: 
0:         return filteredElems;
0:     }
0: 
0:     /**
0:      * Determines how the object is to be matched to the regex map.
0:      * @param data - object to match
0:      * @param regex - regex map
0:      * @return true, if the object matches the regex map, false otherwise
0:      * @throws Exception
0:      */
0:     protected abstract boolean matches(Object data, Map regex) throws Exception;
0: }
============================================================================