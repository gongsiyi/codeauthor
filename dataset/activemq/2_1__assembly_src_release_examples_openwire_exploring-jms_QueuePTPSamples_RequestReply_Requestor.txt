1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: 
1:3f32507: /*
1:3f32507: Copyright 2001-2008, Progress Software Corporation -  All Rights Reserved
1:3f32507: 
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Writing a Basic JMS Application with Point-to-Point Queues,
1:3f32507: using:
1:3f32507:     - Synchronous Request/Reply
1:3f32507:     - javax.jms.QueueRequestor class
1:3f32507:     - JMSReplyTo Header
1:3f32507: 
1:3f32507: When this program runs, it reads input from System.in
1:3f32507: and then sends the text as a message to the queue, "Q1"
1:3f32507: (by default).
1:3f32507: 
1:3f32507: A "Replier" class should be waiting for the request.
1:3f32507: It will reply with a message.
1:3f32507: 
1:3f32507: NOTE: Unlike the Publish-Subscribe example, you need
1:3f32507: not run the Replier first.  However, this Requestor
1:3f32507: will block until the Replier is started to service the queue.
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java Requestor -b <broker:port> -u <username> -p <password> -qs <queue>
1:3f32507:       -b broker:port points to your message broker
1:3f32507:                      Default: tcp://localhost:61616
1:3f32507:       -u username    must be unique (but is not checked)
1:3f32507:                      Default: SampleRequestor
1:3f32507:       -p password    password for user (not checked)
1:3f32507:                      Default: password
1:3f32507:       -qs queue      name of queue for sending requests
1:3f32507:                      Default: SampleQ1
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - In a console window with the environment set,
1:3f32507:     start a copy of the Replier. For example:
1:3f32507:        java Replier -u SampleQReplier
1:3f32507:   - In another console window, start a Requestor.
1:3f32507:     For example:
1:3f32507:        java Requestor -u SampleQRequestor
1:3f32507:   - Enter text in the Requestor window then press Enter.
1:3f32507:     The Replier responds with the message in all uppercase characters.
1:3f32507:   - Start other Requestors with different user names to see that
1:3f32507:     replies are not broadcast to all users. For example:
1:3f32507:        java Requestor -u SampleRequestorFoo
1:3f32507:   - Start other Repliers.
1:3f32507:   - See that only one replier is receiving messages,(as it should).
1:3f32507:   - See the Requestor only receives one response.
1:3f32507:        java Replier -u toLower -m lowercase
1:3f32507: 
1:3f32507: */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: 
1:3f32507: public class Requestor
1:3f32507: {
1:3f32507:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:3f32507:     private static final String DEFAULT_USER_NAME = "SampleRequestor";
1:3f32507:     private static final String DEFAULT_PASSWORD = "password";
1:3f32507:     private static final String DEFAULT_QUEUE = "Q1";
1:3f32507: 
1:3f32507:     private javax.jms.QueueConnection connect = null;
1:3f32507:     private javax.jms.QueueSession session = null;
1:3f32507:     private javax.jms.QueueRequestor requestor = null;
1:3f32507: 
1:3f32507:     /** Create JMS client for sending messages. */
1:3f32507:     private void start ( String broker, String username, String password, String sQueue)
1:3f32507:     {
1:3f32507:         // Create a connection.
1:3f32507:         try
1:3f32507:         {
1:3f32507:             javax.jms.QueueConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507:             connect = factory.createQueueConnection (username, password);
1:3f32507:             session = connect.createQueueSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("error: Cannot connect to Broker - " + broker);
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Create the Queue and QueueRequestor for sending requests.
1:3f32507:         javax.jms.Queue queue = null;
1:3f32507:         try
1:3f32507:         {
1:3f32507:             queue = session.createQueue (sQueue);
1:3f32507:             requestor = new javax.jms.QueueRequestor(session, queue);
1:3f32507: 
1:3f32507:             // Now that all setup is complete, start the Connection.
1:3f32507:             connect.start();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:             exit();
1:3f32507:         }
1:3f32507: 
1:3f32507:         try
1:3f32507:         {
1:3f32507:             // Read all standard input and send it as a message.
1:3f32507:             java.io.BufferedReader stdin =
1:3f32507:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:3f32507:             System.out.println ("\nRequestor application:\n"
1:3f32507: 			            					+ "============================\n"
1:3f32507: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1:3f32507: 											+ "The application uses a QueueRequestor to on the " + DEFAULT_QUEUE + " queue."
1:3f32507: 											+ "The Replier application gets the message, and transforms it."
1:3f32507: 			                                + "The Requestor application displays the result.\n\n"
1:3f32507: 			                                + "Type some mixed case text, and then press Enter to make a request.\n");
1:3f32507:             while ( true )
1:3f32507:             {
1:3f32507:                 String s = stdin.readLine();
1:3f32507: 
1:3f32507:                 if ( s == null )
1:3f32507:                     exit();
1:3f32507:                 else if ( s.length() > 0 )
1:3f32507:                 {
1:3f32507:                     javax.jms.TextMessage msg = session.createTextMessage();
1:3f32507:                     msg.setText( username + ": " + s );
1:3f32507:                     // Instead of sending, we will use the QueueRequestor.
1:3f32507:                     javax.jms.Message response = requestor.request(msg);
1:3f32507:                     // The message should be a TextMessage.  Just report it.
1:3f32507:                     javax.jms.TextMessage textMessage = (javax.jms.TextMessage) response;
1:3f32507:                     System.out.println( "[Reply] " + textMessage.getText() );
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch ( java.io.IOException ioe )
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:         catch ( javax.jms.JMSException jmse )
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Cleanup resources cleanly and exit. */
1:3f32507:     private void exit()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             requestor.close();
1:3f32507:             connect.close();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.exit(0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     //
1:3f32507:     // NOTE: the remainder of this sample deals with reading arguments
1:3f32507:     // and does not utilize any JMS classes or code.
1:3f32507:     //
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String argv[]) {
1:3f32507: 
1:3f32507:         // Values to be read from parameters
1:3f32507:         String broker    = DEFAULT_BROKER_NAME;
1:3f32507:         String username  = DEFAULT_USER_NAME;
1:3f32507:         String password  = DEFAULT_PASSWORD;
1:3f32507:         String queue     = DEFAULT_QUEUE;
1:3f32507: 
1:3f32507:         // Check parameters
1:3f32507:         for (int i = 0; i < argv.length; i++) {
1:3f32507:             String arg = argv[i];
1:3f32507: 
1:3f32507: 
1:3f32507:             if (arg.equals("-b")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing broker name:port");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 broker = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-u")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing user name");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 username = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-p")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing password");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 password = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-qs")) {
1:3f32507:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                     System.err.println("error: missing queue");
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:                 queue = argv[++i];
1:3f32507:                 continue;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (arg.equals("-h")) {
1:3f32507:                 printUsage();
1:3f32507:                 System.exit(1);
1:3f32507:             }
1:3f32507: 
1:3f32507:             // Invalid argument
1:3f32507:             System.err.println ("error: unexpected argument: "+arg);
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Start the JMS client for sending requests.
1:3f32507:         Requestor requestor = new Requestor();
1:3f32507:         requestor.start (broker, username, password, queue);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage() {
1:3f32507: 
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("usage: java Requestor (options) ...\n\n");
1:3f32507:         use.append("options:\n");
1:3f32507:         use.append("  -b name:port Specify name:port of broker.\n");
1:3f32507:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:3f32507:         use.append("  -u name      Specify unique user name.\n");
1:3f32507:         use.append("               Default broker: "+DEFAULT_USER_NAME+"\n");
1:3f32507:         use.append("  -p password  Specify password for user.\n");
1:3f32507:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
1:3f32507:         use.append("  -qs queue    Specify name of queue for sending.\n");
1:3f32507:         use.append("               Default queue: "+DEFAULT_QUEUE+"\n");
1:3f32507:         use.append("  -h           This help screen.\n");
1:3f32507:         System.err.println (use);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
1:3f32507: 
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: /*
1: Copyright 2001-2008, Progress Software Corporation -  All Rights Reserved
1: 
1: Sample Application
1: 
1: Writing a Basic JMS Application with Point-to-Point Queues,
1: using:
1:     - Synchronous Request/Reply
1:     - javax.jms.QueueRequestor class
1:     - JMSReplyTo Header
1: 
1: When this program runs, it reads input from System.in
1: and then sends the text as a message to the queue, "Q1"
1: (by default).
1: 
1: A "Replier" class should be waiting for the request.
1: It will reply with a message.
1: 
1: NOTE: Unlike the Publish-Subscribe example, you need
1: not run the Replier first.  However, this Requestor
1: will block until the Replier is started to service the queue.
1: 
1: Usage:
1:   java Requestor -b <broker:port> -u <username> -p <password> -qs <queue>
1:       -b broker:port points to your message broker
1:                      Default: tcp://localhost:61616
1:       -u username    must be unique (but is not checked)
1:                      Default: SampleRequestor
1:       -p password    password for user (not checked)
1:                      Default: password
1:       -qs queue      name of queue for sending requests
1:                      Default: SampleQ1
1: 
1: Suggested demonstration:
1:   - In a console window with the environment set,
1:     start a copy of the Replier. For example:
1:        java Replier -u SampleQReplier
1:   - In another console window, start a Requestor.
1:     For example:
1:        java Requestor -u SampleQRequestor
1:   - Enter text in the Requestor window then press Enter.
1:     The Replier responds with the message in all uppercase characters.
1:   - Start other Requestors with different user names to see that
1:     replies are not broadcast to all users. For example:
1:        java Requestor -u SampleRequestorFoo
1:   - Start other Repliers.
1:   - See that only one replier is receiving messages,(as it should).
1:   - See the Requestor only receives one response.
1:        java Replier -u toLower -m lowercase
1: 
1: */
1: import org.apache.activemq.*;
1: 
1: 
1: public class Requestor
1: {
1:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:     private static final String DEFAULT_USER_NAME = "SampleRequestor";
1:     private static final String DEFAULT_PASSWORD = "password";
1:     private static final String DEFAULT_QUEUE = "Q1";
1: 
1:     private javax.jms.QueueConnection connect = null;
1:     private javax.jms.QueueSession session = null;
1:     private javax.jms.QueueRequestor requestor = null;
1: 
1:     /** Create JMS client for sending messages. */
1:     private void start ( String broker, String username, String password, String sQueue)
1:     {
1:         // Create a connection.
1:         try
1:         {
1:             javax.jms.QueueConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:             connect = factory.createQueueConnection (username, password);
1:             session = connect.createQueueSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("error: Cannot connect to Broker - " + broker);
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         // Create the Queue and QueueRequestor for sending requests.
1:         javax.jms.Queue queue = null;
1:         try
1:         {
1:             queue = session.createQueue (sQueue);
1:             requestor = new javax.jms.QueueRequestor(session, queue);
1: 
1:             // Now that all setup is complete, start the Connection.
1:             connect.start();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:             exit();
1:         }
1: 
1:         try
1:         {
1:             // Read all standard input and send it as a message.
1:             java.io.BufferedReader stdin =
1:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:             System.out.println ("\nRequestor application:\n"
1: 			            					+ "============================\n"
1: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1: 											+ "The application uses a QueueRequestor to on the " + DEFAULT_QUEUE + " queue."
1: 											+ "The Replier application gets the message, and transforms it."
1: 			                                + "The Requestor application displays the result.\n\n"
1: 			                                + "Type some mixed case text, and then press Enter to make a request.\n");
1:             while ( true )
1:             {
1:                 String s = stdin.readLine();
1: 
1:                 if ( s == null )
1:                     exit();
1:                 else if ( s.length() > 0 )
1:                 {
1:                     javax.jms.TextMessage msg = session.createTextMessage();
1:                     msg.setText( username + ": " + s );
1:                     // Instead of sending, we will use the QueueRequestor.
1:                     javax.jms.Message response = requestor.request(msg);
1:                     // The message should be a TextMessage.  Just report it.
1:                     javax.jms.TextMessage textMessage = (javax.jms.TextMessage) response;
1:                     System.out.println( "[Reply] " + textMessage.getText() );
1:                 }
1:             }
1:         }
1:         catch ( java.io.IOException ioe )
1:         {
1:             ioe.printStackTrace();
1:         }
1:         catch ( javax.jms.JMSException jmse )
1:         {
1:             jmse.printStackTrace();
1:         }
1:     }
1: 
1:     /** Cleanup resources cleanly and exit. */
1:     private void exit()
1:     {
1:         try
1:         {
1:             requestor.close();
1:             connect.close();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1: 
1:         System.exit(0);
1:     }
1: 
1:     //
1:     // NOTE: the remainder of this sample deals with reading arguments
1:     // and does not utilize any JMS classes or code.
1:     //
1: 
1:     /** Main program entry point. */
1:     public static void main(String argv[]) {
1: 
1:         // Values to be read from parameters
1:         String broker    = DEFAULT_BROKER_NAME;
1:         String username  = DEFAULT_USER_NAME;
1:         String password  = DEFAULT_PASSWORD;
1:         String queue     = DEFAULT_QUEUE;
1: 
1:         // Check parameters
1:         for (int i = 0; i < argv.length; i++) {
1:             String arg = argv[i];
1: 
1: 
1:             if (arg.equals("-b")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing broker name:port");
1:                     System.exit(1);
1:                 }
1:                 broker = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-u")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing user name");
1:                     System.exit(1);
1:                 }
1:                 username = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-p")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing password");
1:                     System.exit(1);
1:                 }
1:                 password = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-qs")) {
1:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                     System.err.println("error: missing queue");
1:                     System.exit(1);
1:                 }
1:                 queue = argv[++i];
1:                 continue;
1:             }
1: 
1:             if (arg.equals("-h")) {
1:                 printUsage();
1:                 System.exit(1);
1:             }
1: 
1:             // Invalid argument
1:             System.err.println ("error: unexpected argument: "+arg);
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         // Start the JMS client for sending requests.
1:         Requestor requestor = new Requestor();
1:         requestor.start (broker, username, password, queue);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage() {
1: 
1:         StringBuffer use = new StringBuffer();
1:         use.append("usage: java Requestor (options) ...\n\n");
1:         use.append("options:\n");
1:         use.append("  -b name:port Specify name:port of broker.\n");
1:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:         use.append("  -u name      Specify unique user name.\n");
1:         use.append("               Default broker: "+DEFAULT_USER_NAME+"\n");
1:         use.append("  -p password  Specify password for user.\n");
1:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
1:         use.append("  -qs queue    Specify name of queue for sending.\n");
1:         use.append("               Default queue: "+DEFAULT_QUEUE+"\n");
1:         use.append("  -h           This help screen.\n");
1:         System.err.println (use);
1:     }
1: 
1: }
1: 
commit:ed11b06
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0: Copyright 2001-2008, Progress Software Corporation -  All Rights Reserved
0: 
0: Sample Application
0: 
0: Writing a Basic JMS Application with Point-to-Point Queues,
0: using:
0:     - Synchronous Request/Reply
0:     - javax.jms.QueueRequestor class
0:     - JMSReplyTo Header
0: 
0: When this program runs, it reads input from System.in
0: and then sends the text as a message to the queue, "Q1"
0: (by default).
0: 
0: A "Replier" class should be waiting for the request.
0: It will reply with a message.
0: 
0: NOTE: Unlike the Publish-Subscribe example, you need
0: not run the Replier first.  However, this Requestor
0: will block until the Replier is started to service the queue.
0: 
0: Usage:
0:   java Requestor -b <broker:port> -u <username> -p <password> -qs <queue>
0:       -b broker:port points to your message broker
0:                      Default: tcp://localhost:61616
0:       -u username    must be unique (but is not checked)
0:                      Default: SampleRequestor
0:       -p password    password for user (not checked)
0:                      Default: password
0:       -qs queue      name of queue for sending requests
0:                      Default: SampleQ1
0: 
0: Suggested demonstration:
0:   - In a console window with the environment set,
0:     start a copy of the Replier. For example:
0:        java Replier -u SampleQReplier
0:   - In another console window, start a Requestor.
0:     For example:
0:        java Requestor -u SampleQRequestor
0:   - Enter text in the Requestor window then press Enter.
0:     The Replier responds with the message in all uppercase characters.
0:   - Start other Requestors with different user names to see that
0:     replies are not broadcast to all users. For example:
0:        java Requestor -u SampleRequestorFoo
0:   - Start other Repliers.
0:   - See that only one replier is receiving messages,(as it should).
0:   - See the Requestor only receives one response.
0:        java Replier -u toLower -m lowercase
0: 
0: */
0: import org.apache.activemq.*;
0: 
0: 
0: public class Requestor
0: {
0:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
0:     private static final String DEFAULT_USER_NAME = "SampleRequestor";
0:     private static final String DEFAULT_PASSWORD = "password";
0:     private static final String DEFAULT_QUEUE = "Q1";
0: 
0:     private javax.jms.QueueConnection connect = null;
0:     private javax.jms.QueueSession session = null;
0:     private javax.jms.QueueRequestor requestor = null;
0: 
0:     /** Create JMS client for sending messages. */
0:     private void start ( String broker, String username, String password, String sQueue)
0:     {
0:         // Create a connection.
0:         try
0:         {
0:             javax.jms.QueueConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0:             connect = factory.createQueueConnection (username, password);
0:             session = connect.createQueueSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("error: Cannot connect to Broker - " + broker);
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         // Create the Queue and QueueRequestor for sending requests.
0:         javax.jms.Queue queue = null;
0:         try
0:         {
0:             queue = session.createQueue (sQueue);
0:             requestor = new javax.jms.QueueRequestor(session, queue);
0: 
0:             // Now that all setup is complete, start the Connection.
0:             connect.start();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:             exit();
0:         }
0: 
0:         try
0:         {
0:             // Read all standard input and send it as a message.
0:             java.io.BufferedReader stdin =
0:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
0:             System.out.println ("\nRequestor application:\n"
0: 			            					+ "============================\n"
0: 			            					+ "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
0: 											+ "The application uses a QueueRequestor to on the " + DEFAULT_QUEUE + " queue."
0: 											+ "The Replier application gets the message, and transforms it."
0: 			                                + "The Requestor application displays the result.\n\n"
0: 			                                + "Type some mixed case text, and then press Enter to make a request.\n");
0:             while ( true )
0:             {
0:                 String s = stdin.readLine();
0: 
0:                 if ( s == null )
0:                     exit();
0:                 else if ( s.length() > 0 )
0:                 {
0:                     javax.jms.TextMessage msg = session.createTextMessage();
0:                     msg.setText( username + ": " + s );
0:                     // Instead of sending, we will use the QueueRequestor.
0:                     javax.jms.Message response = requestor.request(msg);
0:                     // The message should be a TextMessage.  Just report it.
0:                     javax.jms.TextMessage textMessage = (javax.jms.TextMessage) response;
0:                     System.out.println( "[Reply] " + textMessage.getText() );
0:                 }
0:             }
0:         }
0:         catch ( java.io.IOException ioe )
0:         {
0:             ioe.printStackTrace();
0:         }
0:         catch ( javax.jms.JMSException jmse )
0:         {
0:             jmse.printStackTrace();
0:         }
0:     }
0: 
0:     /** Cleanup resources cleanly and exit. */
0:     private void exit()
0:     {
0:         try
0:         {
0:             requestor.close();
0:             connect.close();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0: 
0:         System.exit(0);
0:     }
0: 
0:     //
0:     // NOTE: the remainder of this sample deals with reading arguments
0:     // and does not utilize any JMS classes or code.
0:     //
0: 
0:     /** Main program entry point. */
0:     public static void main(String argv[]) {
0: 
0:         // Values to be read from parameters
0:         String broker    = DEFAULT_BROKER_NAME;
0:         String username  = DEFAULT_USER_NAME;
0:         String password  = DEFAULT_PASSWORD;
0:         String queue     = DEFAULT_QUEUE;
0: 
0:         // Check parameters
0:         for (int i = 0; i < argv.length; i++) {
0:             String arg = argv[i];
0: 
0: 
0:             if (arg.equals("-b")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing broker name:port");
0:                     System.exit(1);
0:                 }
0:                 broker = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-u")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing user name");
0:                     System.exit(1);
0:                 }
0:                 username = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-p")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing password");
0:                     System.exit(1);
0:                 }
0:                 password = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-qs")) {
0:                 if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                     System.err.println("error: missing queue");
0:                     System.exit(1);
0:                 }
0:                 queue = argv[++i];
0:                 continue;
0:             }
0: 
0:             if (arg.equals("-h")) {
0:                 printUsage();
0:                 System.exit(1);
0:             }
0: 
0:             // Invalid argument
0:             System.err.println ("error: unexpected argument: "+arg);
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         // Start the JMS client for sending requests.
0:         Requestor requestor = new Requestor();
0:         requestor.start (broker, username, password, queue);
0: 
0:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage() {
0: 
0:         StringBuffer use = new StringBuffer();
0:         use.append("usage: java Requestor (options) ...\n\n");
0:         use.append("options:\n");
0:         use.append("  -b name:port Specify name:port of broker.\n");
0:         use.append("               Default broker: "+DEFAULT_BROKER_NAME+"\n");
0:         use.append("  -u name      Specify unique user name.\n");
0:         use.append("               Default broker: "+DEFAULT_USER_NAME+"\n");
0:         use.append("  -p password  Specify password for user.\n");
0:         use.append("               Default password: "+DEFAULT_PASSWORD+"\n");
0:         use.append("  -qs queue    Specify name of queue for sending.\n");
0:         use.append("               Default queue: "+DEFAULT_QUEUE+"\n");
0:         use.append("  -h           This help screen.\n");
0:         System.err.println (use);
0:     }
0: 
0: }
0: 
============================================================================