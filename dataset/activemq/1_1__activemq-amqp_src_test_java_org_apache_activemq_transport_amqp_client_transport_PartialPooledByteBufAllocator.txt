1:82a5839: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements. See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License. You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *     http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
1:82a5839: import io.netty.buffer.ByteBuf;
1:82a5839: import io.netty.buffer.ByteBufAllocator;
1:82a5839: import io.netty.buffer.CompositeByteBuf;
1:82a5839: import io.netty.buffer.PooledByteBufAllocator;
1:82a5839: import io.netty.buffer.UnpooledByteBufAllocator;
1:82a5839: 
1:82a5839: /**
1:82a5839:  * A {@link ByteBufAllocator} which is partial pooled. Which means only direct
1:82a5839:  * {@link ByteBuf}s are pooled. The rest is unpooled.
1:82a5839:  *
1:82a5839:  * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
1:82a5839:  */
1:82a5839: public class PartialPooledByteBufAllocator implements ByteBufAllocator {
1:82a5839: 
1:82a5839:     private static final ByteBufAllocator POOLED = new PooledByteBufAllocator(false);
1:82a5839:     private static final ByteBufAllocator UNPOOLED = new UnpooledByteBufAllocator(false);
1:82a5839: 
1:82a5839:     public static final PartialPooledByteBufAllocator INSTANCE = new PartialPooledByteBufAllocator();
1:82a5839: 
1:82a5839:     private PartialPooledByteBufAllocator() {
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf buffer() {
1:82a5839:         return UNPOOLED.heapBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf buffer(int initialCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf buffer(int initialCapacity, int maxCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf ioBuffer() {
1:82a5839:         return UNPOOLED.heapBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf ioBuffer(int initialCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf ioBuffer(int initialCapacity, int maxCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf heapBuffer() {
1:82a5839:         return UNPOOLED.heapBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf heapBuffer(int initialCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {
1:82a5839:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf directBuffer() {
1:82a5839:         return POOLED.directBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf directBuffer(int initialCapacity) {
1:82a5839:         return POOLED.directBuffer(initialCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public ByteBuf directBuffer(int initialCapacity, int maxCapacity) {
1:82a5839:         return POOLED.directBuffer(initialCapacity, maxCapacity);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeBuffer() {
1:82a5839:         return UNPOOLED.compositeHeapBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeBuffer(int maxNumComponents) {
1:82a5839:         return UNPOOLED.compositeHeapBuffer(maxNumComponents);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeHeapBuffer() {
1:82a5839:         return UNPOOLED.compositeHeapBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeHeapBuffer(int maxNumComponents) {
1:82a5839:         return UNPOOLED.compositeHeapBuffer(maxNumComponents);
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeDirectBuffer() {
1:82a5839:         return POOLED.compositeDirectBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public CompositeByteBuf compositeDirectBuffer(int maxNumComponents) {
1:82a5839:         return POOLED.compositeDirectBuffer();
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:82a5839:     public boolean isDirectBufferPooled() {
1:82a5839:         return true;
1:82a5839:     }
1:0196be1: 
1:0196be1:     @Override
1:0196be1:     public int calculateNewCapacity(int minNewCapacity, int maxCapacity) {
1:0196be1:         return POOLED.calculateNewCapacity(minNewCapacity, maxCapacity);
1:0196be1:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0196be1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int calculateNewCapacity(int minNewCapacity, int maxCapacity) {
1:         return POOLED.calculateNewCapacity(minNewCapacity, maxCapacity);
1:     }
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import io.netty.buffer.ByteBuf;
1: import io.netty.buffer.ByteBufAllocator;
1: import io.netty.buffer.CompositeByteBuf;
1: import io.netty.buffer.PooledByteBufAllocator;
1: import io.netty.buffer.UnpooledByteBufAllocator;
1: 
1: /**
1:  * A {@link ByteBufAllocator} which is partial pooled. Which means only direct
1:  * {@link ByteBuf}s are pooled. The rest is unpooled.
1:  *
1:  * @author <a href="mailto:nmaurer@redhat.com">Norman Maurer</a>
1:  */
1: public class PartialPooledByteBufAllocator implements ByteBufAllocator {
1: 
1:     private static final ByteBufAllocator POOLED = new PooledByteBufAllocator(false);
1:     private static final ByteBufAllocator UNPOOLED = new UnpooledByteBufAllocator(false);
1: 
1:     public static final PartialPooledByteBufAllocator INSTANCE = new PartialPooledByteBufAllocator();
1: 
1:     private PartialPooledByteBufAllocator() {
1:     }
1: 
1:     @Override
1:     public ByteBuf buffer() {
1:         return UNPOOLED.heapBuffer();
1:     }
1: 
1:     @Override
1:     public ByteBuf buffer(int initialCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf buffer(int initialCapacity, int maxCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf ioBuffer() {
1:         return UNPOOLED.heapBuffer();
1:     }
1: 
1:     @Override
1:     public ByteBuf ioBuffer(int initialCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf ioBuffer(int initialCapacity, int maxCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf heapBuffer() {
1:         return UNPOOLED.heapBuffer();
1:     }
1: 
1:     @Override
1:     public ByteBuf heapBuffer(int initialCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {
1:         return UNPOOLED.heapBuffer(initialCapacity, maxCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf directBuffer() {
1:         return POOLED.directBuffer();
1:     }
1: 
1:     @Override
1:     public ByteBuf directBuffer(int initialCapacity) {
1:         return POOLED.directBuffer(initialCapacity);
1:     }
1: 
1:     @Override
1:     public ByteBuf directBuffer(int initialCapacity, int maxCapacity) {
1:         return POOLED.directBuffer(initialCapacity, maxCapacity);
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeBuffer() {
1:         return UNPOOLED.compositeHeapBuffer();
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeBuffer(int maxNumComponents) {
1:         return UNPOOLED.compositeHeapBuffer(maxNumComponents);
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeHeapBuffer() {
1:         return UNPOOLED.compositeHeapBuffer();
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeHeapBuffer(int maxNumComponents) {
1:         return UNPOOLED.compositeHeapBuffer(maxNumComponents);
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeDirectBuffer() {
1:         return POOLED.compositeDirectBuffer();
1:     }
1: 
1:     @Override
1:     public CompositeByteBuf compositeDirectBuffer(int maxNumComponents) {
1:         return POOLED.compositeDirectBuffer();
1:     }
1: 
1:     @Override
1:     public boolean isDirectBufferPooled() {
1:         return true;
1:     }
1: }
============================================================================