1:9445e93: /**
1:9445e93:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9445e93:  * contributor license agreements.  See the NOTICE file distributed with
1:9445e93:  * this work for additional information regarding copyright ownership.
1:9445e93:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9445e93:  * (the "License"); you may not use this file except in compliance with
1:9445e93:  * the License.  You may obtain a copy of the License at
1:9445e93:  *
1:9445e93:  * http://www.apache.org/licenses/LICENSE-2.0
1:9445e93:  *
1:9445e93:  * Unless required by applicable law or agreed to in writing, software
1:9445e93:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9445e93:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9445e93:  * See the License for the specific language governing permissions and
1:9445e93:  * limitations under the License.
1:9445e93:  */
1:9445e93: package org.apache.activemq.web;
1:9445e93: 
1:9445e93: import static com.google.common.collect.Sets.newHashSet;
1:9445e93: import static org.mockito.Mockito.mock;
1:9445e93: import static org.mockito.Mockito.verify;
1:9445e93: import static org.mockito.Mockito.when;
1:9445e93: 
1:9445e93: import org.apache.activemq.broker.BrokerService;
1:9445e93: import org.apache.activemq.broker.jmx.BrokerView;
1:9445e93: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1:9445e93: import org.apache.activemq.broker.region.Destination;
1:9445e93: import org.apache.activemq.broker.region.DestinationFilter;
1:9445e93: import org.apache.activemq.broker.region.Queue;
1:9445e93: import org.apache.activemq.broker.region.Region;
1:9445e93: import org.apache.activemq.command.ActiveMQDestination;
1:9445e93: import org.junit.Test;
1:9445e93: import org.junit.runner.RunWith;
1:9445e93: import org.mockito.Mock;
1:9445e93: import org.mockito.runners.MockitoJUnitRunner;
1:9445e93: 
1:9445e93: @RunWith(MockitoJUnitRunner.class)
1:9445e93: public class LocalBrokerFacadeTest {
1:9445e93: 
1:9445e93:     @Mock
1:9445e93:     private BrokerService brokerService;
1:9445e93:     @Mock
1:9445e93:     private BrokerView brokerView;
1:9445e93:     @Mock
1:9445e93:     private Queue queue;
1:9445e93:     @Mock
1:9445e93:     private Queue otherQueue;
1:9445e93:     @Mock
1:9445e93:     private ManagedRegionBroker managedRegionBroker;
1:9445e93:     @Mock
1:9445e93:     private Region region;
1:9445e93:     @Mock
1:9445e93:     private ActiveMQDestination destination;
1:9445e93: 
1:9445e93:     @Test
1:9445e93:     public void testPurgeQueueWorksForSimpleQueue() throws Exception {
1:9445e93:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:9445e93:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:9445e93:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:9445e93:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:9445e93:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) queue));
1:9445e93: 
1:9445e93:         facade.purgeQueue(destination);
1:9445e93: 
1:9445e93:         verify(queue).purge();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Test
1:9445e93:     public void testPurgeQueueWorksForMultipleDestinations() throws Exception {
1:9445e93:         Queue queue1 = mock(Queue.class);
1:9445e93:         Queue queue2 = mock(Queue.class);
1:9445e93: 
1:9445e93:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:9445e93:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:9445e93:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:9445e93:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:9445e93:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) queue1, queue2));
1:9445e93: 
1:9445e93:         facade.purgeQueue(destination);
1:9445e93: 
1:9445e93:         verify(queue1).purge();
1:9445e93:         verify(queue2).purge();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Test
1:9445e93:     public void testPurgeQueueWorksForFilterWrappedQueue() throws Exception {
1:9445e93: 
1:9445e93:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:9445e93:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:9445e93:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:9445e93:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:9445e93: 
1:9445e93:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) new DestinationFilter(queue)));
1:9445e93: 
1:9445e93:         facade.purgeQueue(destination);
1:9445e93: 
1:9445e93:         verify(queue).purge();
1:9445e93:     }
1:9445e93: 
1:9445e93:     @Test
1:9445e93:     public void testPurgeQueueWorksForMultipleFiltersWrappingAQueue() throws Exception {
1:9445e93: 
1:9445e93:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:9445e93:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:9445e93:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:9445e93:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:9445e93: 
1:9445e93:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) new DestinationFilter(new DestinationFilter(queue))));
1:9445e93: 
1:9445e93:         facade.purgeQueue(destination);
1:9445e93: 
1:9445e93:         verify(queue).purge();
1:9445e93:     }
1:9445e93: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9445e93
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import static com.google.common.collect.Sets.newHashSet;
1: import static org.mockito.Mockito.mock;
1: import static org.mockito.Mockito.verify;
1: import static org.mockito.Mockito.when;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.Region;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.mockito.Mock;
1: import org.mockito.runners.MockitoJUnitRunner;
1: 
1: @RunWith(MockitoJUnitRunner.class)
1: public class LocalBrokerFacadeTest {
1: 
1:     @Mock
1:     private BrokerService brokerService;
1:     @Mock
1:     private BrokerView brokerView;
1:     @Mock
1:     private Queue queue;
1:     @Mock
1:     private Queue otherQueue;
1:     @Mock
1:     private ManagedRegionBroker managedRegionBroker;
1:     @Mock
1:     private Region region;
1:     @Mock
1:     private ActiveMQDestination destination;
1: 
1:     @Test
1:     public void testPurgeQueueWorksForSimpleQueue() throws Exception {
1:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) queue));
1: 
1:         facade.purgeQueue(destination);
1: 
1:         verify(queue).purge();
1:     }
1: 
1:     @Test
1:     public void testPurgeQueueWorksForMultipleDestinations() throws Exception {
1:         Queue queue1 = mock(Queue.class);
1:         Queue queue2 = mock(Queue.class);
1: 
1:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) queue1, queue2));
1: 
1:         facade.purgeQueue(destination);
1: 
1:         verify(queue1).purge();
1:         verify(queue2).purge();
1:     }
1: 
1:     @Test
1:     public void testPurgeQueueWorksForFilterWrappedQueue() throws Exception {
1: 
1:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1: 
1:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) new DestinationFilter(queue)));
1: 
1:         facade.purgeQueue(destination);
1: 
1:         verify(queue).purge();
1:     }
1: 
1:     @Test
1:     public void testPurgeQueueWorksForMultipleFiltersWrappingAQueue() throws Exception {
1: 
1:         LocalBrokerFacade facade = new LocalBrokerFacade(brokerService);
1:         when(brokerService.getAdminView()).thenReturn(brokerView);
1:         when(brokerView.getBroker()).thenReturn(managedRegionBroker);
1:         when(managedRegionBroker.getQueueRegion()).thenReturn(region);
1: 
1:         when(region.getDestinations(destination)).thenReturn(newHashSet((Destination) new DestinationFilter(new DestinationFilter(queue))));
1: 
1:         facade.purgeQueue(destination);
1: 
1:         verify(queue).purge();
1:     }
1: }
============================================================================