1:26eedea: /**
1:26eedea:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:26eedea:  * contributor license agreements.  See the NOTICE file distributed with
1:26eedea:  * this work for additional information regarding copyright ownership.
1:26eedea:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:26eedea:  * (the "License"); you may not use this file except in compliance with
1:26eedea:  * the License.  You may obtain a copy of the License at
1:26eedea:  *
1:26eedea:  *      http://www.apache.org/licenses/LICENSE-2.0
1:26eedea:  *
1:26eedea:  * Unless required by applicable law or agreed to in writing, software
1:26eedea:  * distributed under the License is distributed on an "AS IS" BASIS,
1:26eedea:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:26eedea:  * See the License for the specific language governing permissions and
1:26eedea:  * limitations under the License.
1:26eedea:  */
1:26eedea: package org.apache.activemq.camel.component;
3:26eedea: 
1:b2a91b9: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:b2a91b9: import org.apache.activemq.broker.BrokerService;
1:26eedea: import org.apache.activemq.command.ActiveMQDestination;
1:26eedea: import org.apache.activemq.command.ActiveMQQueue;
1:26eedea: import org.apache.activemq.command.ActiveMQTopic;
1:26eedea: import org.apache.camel.CamelContext;
1:65ff8f4: import org.apache.camel.Endpoint;
1:26eedea: import org.apache.camel.impl.DefaultCamelContext;
1:26eedea: import org.apache.camel.spi.BrowsableEndpoint;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:5e6f8a1: 
1:b2a91b9: import java.util.ArrayList;
1:b2a91b9: import java.util.Arrays;
1:b2a91b9: import java.util.Collection;
1:b2a91b9: import java.util.List;
1:b2a91b9: 
1:b2a91b9: import static org.hamcrest.Matchers.is;
1:b2a91b9: import static org.junit.Assert.assertThat;
1:b2a91b9: 
1:26eedea: /**
1:26eedea:  * Shows that we can see the queues inside ActiveMQ via Camel
1:26eedea:  * by enabling the {@link ActiveMQComponent#setExposeAllQueues(boolean)} flag
1:0bbc0ac:  *
1:26eedea:  * 
1:26eedea:  */
1:26eedea: public class AutoExposeQueuesInCamelTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(AutoExposeQueuesInCamelTest.class);
1:26eedea: 
1:26eedea:     protected ActiveMQQueue sampleQueue = new ActiveMQQueue("foo.bar");
1:26eedea:     protected ActiveMQTopic sampleTopic = new ActiveMQTopic("cheese");
1:26eedea: 
1:26eedea:     protected CamelContext camelContext = new DefaultCamelContext();
1:b2a91b9:     ActiveMQComponent component;
1:26eedea: 
1:26eedea:     public void testWorks() throws Exception {
1:26eedea:         Thread.sleep(2000);
1:26eedea:         LOG.debug("Looking for endpoints...");
1:b2a91b9:         broker.getAdminView().addQueue("runtime");
1:b2a91b9: 
1:b2a91b9:         Thread.sleep(1000);
1:65ff8f4:         // Changed from using CamelContextHelper.getSingletonEndpoints here because JMS Endpoints in Camel
1:65ff8f4:         // are always non-singleton
1:65ff8f4:         List<BrowsableEndpoint> endpoints = getEndpoints(camelContext, BrowsableEndpoint.class);
1:26eedea:         for (BrowsableEndpoint endpoint : endpoints) {
1:26eedea:             LOG.debug("Endpoint: " + endpoint);
2:26eedea:         }
1:b2a91b9:         assertEquals("Should have found an endpoint: "+ endpoints, 2, endpoints.size());
1:b2a91b9:     }
1:b2a91b9: 
1:b2a91b9:     public void testCompleter() throws Exception {
1:b2a91b9:         Thread.sleep(1000);
1:b2a91b9:         List<String> result = component.completeEndpointPath(null, "foo");
1:b2a91b9:         assertThat(result, is(Arrays.asList("foo.bar")));
1:b2a91b9:         result = component.completeEndpointPath(null, "queue:foo");
1:b2a91b9:         assertThat(result, is(Arrays.asList("foo.bar")));
1:b2a91b9:         result = component.completeEndpointPath(null, "topic:ch");
1:b2a91b9:         assertThat(result, is(Arrays.asList("cheese")));
1:b2a91b9:         result = component.completeEndpointPath(null, "ch");
1:b2a91b9:         assertTrue(result.isEmpty());
1:b2a91b9:         result = component.completeEndpointPath(null, "queue:ch");
1:b2a91b9:         assertTrue(result.isEmpty());
1:b2a91b9:         result = component.completeEndpointPath(null, "topic:foo");
1:b2a91b9:         assertTrue(result.isEmpty());
1:b2a91b9: 
1:b2a91b9:         broker.getAdminView().addQueue("runtime");
1:b2a91b9: 
1:b2a91b9:         Thread.sleep(1000);
1:b2a91b9: 
1:b2a91b9:         result = component.completeEndpointPath(null, "run");
1:b2a91b9:         assertThat(result, is(Arrays.asList("runtime")));
1:26eedea:     }
1:26eedea: 
1:65ff8f4:     public <T> List<T> getEndpoints(CamelContext camelContext, Class<T> type) {
1:65ff8f4:         List<T> answer = new ArrayList<T>();
1:65ff8f4:         Collection<Endpoint> endpoints = camelContext.getEndpoints();
1:65ff8f4:         for (Endpoint endpoint : endpoints) {
1:65ff8f4:             if (type.isInstance(endpoint)) {
1:65ff8f4:                 T value = type.cast(endpoint);
1:65ff8f4:                 answer.add(value);
1:65ff8f4:             }
1:65ff8f4:         }
1:65ff8f4:         return answer;
1:65ff8f4:     }    
1:65ff8f4:     
1:26eedea:     @Override
1:26eedea:     protected void setUp() throws Exception {
1:26eedea:         super.setUp();
1:26eedea: 
1:26eedea:         // lets configure the ActiveMQ component for Camel
1:b2a91b9:         component = new ActiveMQComponent();
1:26eedea:         component.setBrokerURL(bindAddress);
1:26eedea:         component.setExposeAllQueues(true);
1:26eedea: 
1:26eedea:         camelContext.addComponent("activemq", component);
1:26eedea:         camelContext.start();
1:26eedea:     }
1:26eedea: 
1:26eedea:     @Override
1:26eedea:     protected void tearDown() throws Exception {
1:26eedea:         camelContext.stop();
1:26eedea:         super.tearDown();
1:26eedea:     }
1:26eedea: 
1:26eedea: 
1:26eedea:     @Override
1:26eedea:     protected BrokerService createBroker() throws Exception {
1:26eedea:         BrokerService broker = super.createBroker();
1:26eedea:         broker.setDestinations(new ActiveMQDestination[]{
1:26eedea:                 sampleQueue,
1:26eedea:                 sampleTopic
1:26eedea:         });
1:26eedea:         return broker;
1:8bf987b:     }
1:26eedea: 
1:26eedea: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b2a91b9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import static org.hamcrest.Matchers.is;
1: import static org.junit.Assert.assertThat;
1: 
/////////////////////////////////////////////////////////////////////////
1:     ActiveMQComponent component;
1:         broker.getAdminView().addQueue("runtime");
1: 
1:         Thread.sleep(1000);
1:         assertEquals("Should have found an endpoint: "+ endpoints, 2, endpoints.size());
1:     }
1: 
1:     public void testCompleter() throws Exception {
1:         Thread.sleep(1000);
1:         List<String> result = component.completeEndpointPath(null, "foo");
1:         assertThat(result, is(Arrays.asList("foo.bar")));
1:         result = component.completeEndpointPath(null, "queue:foo");
1:         assertThat(result, is(Arrays.asList("foo.bar")));
1:         result = component.completeEndpointPath(null, "topic:ch");
1:         assertThat(result, is(Arrays.asList("cheese")));
1:         result = component.completeEndpointPath(null, "ch");
1:         assertTrue(result.isEmpty());
1:         result = component.completeEndpointPath(null, "queue:ch");
1:         assertTrue(result.isEmpty());
1:         result = component.completeEndpointPath(null, "topic:foo");
1:         assertTrue(result.isEmpty());
1: 
1:         broker.getAdminView().addQueue("runtime");
1: 
1:         Thread.sleep(1000);
1: 
1:         result = component.completeEndpointPath(null, "run");
1:         assertThat(result, is(Arrays.asList("runtime")));
/////////////////////////////////////////////////////////////////////////
1:         component = new ActiveMQComponent();
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AutoExposeQueuesInCamelTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:1dc4b25
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.CamelTemplate;
commit:ec80f28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.camel.impl.CamelTemplate;
author:Jonathan Anstey
-------------------------------------------------------------------------------
commit:65ff8f4
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.camel.Endpoint;
/////////////////////////////////////////////////////////////////////////
1:         // Changed from using CamelContextHelper.getSingletonEndpoints here because JMS Endpoints in Camel
1:         // are always non-singleton
1:         List<BrowsableEndpoint> endpoints = getEndpoints(camelContext, BrowsableEndpoint.class);
1:     public <T> List<T> getEndpoints(CamelContext camelContext, Class<T> type) {
1:         List<T> answer = new ArrayList<T>();
1:         Collection<Endpoint> endpoints = camelContext.getEndpoints();
1:         for (Endpoint endpoint : endpoints) {
1:             if (type.isInstance(endpoint)) {
1:                 T value = type.cast(endpoint);
1:                 answer.add(value);
1:             }
1:         }
1:         return answer;
1:     }    
1:     
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:26eedea
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
0: import java.util.List;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.camel.CamelContext;
0: import org.apache.camel.CamelTemplate;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.apache.camel.spi.BrowsableEndpoint;
0: import org.apache.camel.util.CamelContextHelper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Shows that we can see the queues inside ActiveMQ via Camel
1:  * by enabling the {@link ActiveMQComponent#setExposeAllQueues(boolean)} flag
1:  *
0:  * @version $Revision$
1:  */
1: public class AutoExposeQueuesInCamelTest extends EmbeddedBrokerTestSupport {
0:     private static final transient Log LOG = LogFactory.getLog(AutoExposeQueuesInCamelTest.class);
1: 
1:     protected ActiveMQQueue sampleQueue = new ActiveMQQueue("foo.bar");
1:     protected ActiveMQTopic sampleTopic = new ActiveMQTopic("cheese");
1: 
1:     protected CamelContext camelContext = new DefaultCamelContext();
0:     protected CamelTemplate template;
1: 
1:     public void testWorks() throws Exception {
1:         Thread.sleep(2000);
1:         LOG.debug("Looking for endpoints...");
0:         List<BrowsableEndpoint> endpoints = CamelContextHelper.getSingletonEndpoints(camelContext, BrowsableEndpoint.class);
1:         for (BrowsableEndpoint endpoint : endpoints) {
1:             LOG.debug("Endpoint: " + endpoint);
1:         }
0:         assertEquals("Should have found an endpoint: "+ endpoints, 1, endpoints.size());
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         // lets configure the ActiveMQ component for Camel
0:         ActiveMQComponent component = new ActiveMQComponent();
1:         component.setBrokerURL(bindAddress);
1:         component.setExposeAllQueues(true);
1: 
1:         camelContext.addComponent("activemq", component);
1:         camelContext.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         camelContext.stop();
1:         super.tearDown();
1:     }
1: 
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         broker.setDestinations(new ActiveMQDestination[]{
1:                 sampleQueue,
1:                 sampleTopic
1:         });
1:         return broker;
1:     }
1: 
1: }
============================================================================