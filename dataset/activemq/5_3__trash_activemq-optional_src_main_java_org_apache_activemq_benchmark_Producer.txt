2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
5:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.benchmark;
1:540dd5c: 
1:540dd5c: import java.io.BufferedReader;
1:540dd5c: import java.io.File;
1:540dd5c: import java.io.FileReader;
1:540dd5c: import java.io.IOException;
1:40a7d3b: import javax.jms.DeliveryMode;
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Session;
3:40a7d3b: 
1:40a7d3b: public class Producer extends BenchmarkSupport {
1:40a7d3b: 
1:40a7d3b:     int loops = -1;
1:40a7d3b:     int loopSize = 1000;
1:40a7d3b:     private int messageSize = 1000;
1:40a7d3b: 
1:540dd5c:     public Producer() {
1:540dd5c:     }
1:540dd5c: 
1:40a7d3b:     public static void main(String[] args) {
1:40a7d3b:         Producer tool = new Producer();
1:40a7d3b:         if (args.length > 0) {
1:40a7d3b:             tool.setUrl(args[0]);
6:40a7d3b:         }
1:40a7d3b:         if (args.length > 1) {
1:40a7d3b:             tool.setTopic(parseBoolean(args[1]));
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 2) {
1:40a7d3b:             tool.setSubject(args[2]);
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 3) {
1:40a7d3b:             tool.setDurable(parseBoolean(args[3]));
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 4) {
1:40a7d3b:             tool.setMessageSize(Integer.parseInt(args[4]));
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 5) {
1:40a7d3b:             tool.setConnectionCount(Integer.parseInt(args[5]));
1:40a7d3b:         }
1:40a7d3b:         try {
1:40a7d3b:             tool.run();
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             System.out.println("Caught: " + e);
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void run() throws Exception {
1:40a7d3b:         start();
1:40a7d3b:         publish();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     // Properties
1:540dd5c:     // -------------------------------------------------------------------------
1:40a7d3b:     public int getMessageSize() {
1:40a7d3b:         return messageSize;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setMessageSize(int messageSize) {
1:40a7d3b:         this.messageSize = messageSize;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getLoopSize() {
1:40a7d3b:         return loopSize;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setLoopSize(int loopSize) {
1:40a7d3b:         this.loopSize = loopSize;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     // Implementation methods
1:540dd5c:     // -------------------------------------------------------------------------
1:40a7d3b: 
1:40a7d3b:     protected void publish() throws Exception {
1:40a7d3b:         final String text = getMessage();
1:40a7d3b: 
1:40a7d3b:         System.out.println("Publishing to: " + subjects.length + " subject(s)");
1:40a7d3b: 
1:40a7d3b:         for (int i = 0; i < subjects.length; i++) {
1:40a7d3b:             final String subject = subjects[i];
1:40a7d3b:             Thread thread = new Thread() {
1:40a7d3b:                 public void run() {
1:40a7d3b:                     try {
1:40a7d3b:                         publish(text, subject);
1:540dd5c:                     } catch (JMSException e) {
1:40a7d3b:                         System.out.println("Caught: " + e);
1:40a7d3b:                         e.printStackTrace();
1:40a7d3b:                     }
1:40a7d3b:                 }
1:40a7d3b:             };
1:40a7d3b:             thread.start();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected String getMessage() {
1:40a7d3b:         StringBuffer buffer = new StringBuffer();
1:40a7d3b:         for (int i = 0; i < messageSize; i++) {
1:40a7d3b:             char ch = 'X';
1:40a7d3b:             buffer.append(ch);
1:40a7d3b:         }
1:40a7d3b:         return buffer.toString();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void publish(String text, String subject) throws JMSException {
1:40a7d3b:         Session session = createSession();
1:40a7d3b: 
1:40a7d3b:         Destination destination = createDestination(session, subject);
1:40a7d3b: 
1:40a7d3b:         MessageProducer publisher = session.createProducer(destination);
1:40a7d3b:         if (isDurable()) {
1:40a7d3b:             publisher.setDeliveryMode(DeliveryMode.PERSISTENT);
1:540dd5c:         } else {
1:40a7d3b:             publisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         System.out.println("Starting publisher on : " + destination + " of type: " + destination.getClass().getName());
1:40a7d3b:         System.out.println("Message length: " + text.length());
1:40a7d3b: 
1:40a7d3b:         if (loops <= 0) {
1:40a7d3b:             while (true) {
1:40a7d3b:                 publishLoop(session, publisher, text);
1:40a7d3b:             }
1:540dd5c:         } else {
1:40a7d3b:             for (int i = 0; i < loops; i++) {
1:40a7d3b:                 publishLoop(session, publisher, text);
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void publishLoop(Session session, MessageProducer publisher, String text) throws JMSException {
1:40a7d3b:         for (int i = 0; i < loopSize; i++) {
1:40a7d3b:             Message message = session.createTextMessage(text);
1:40a7d3b: 
1:40a7d3b:             publisher.send(message);
1:40a7d3b:             count(1);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected String loadFile(String file) throws IOException {
1:40a7d3b:         System.out.println("Loading file: " + file);
1:40a7d3b: 
1:40a7d3b:         StringBuffer buffer = new StringBuffer();
1:40a7d3b:         BufferedReader in = new BufferedReader(new FileReader(file));
1:40a7d3b:         while (true) {
1:40a7d3b:             String line = in.readLine();
1:40a7d3b:             if (line == null) {
1:40a7d3b:                 break;
1:40a7d3b:             }
1:40a7d3b:             buffer.append(line);
1:40a7d3b:             buffer.append(File.separator);
1:40a7d3b:         }
1:13a9200:         in.close();
1:40a7d3b:         return buffer.toString();
1:40a7d3b:     }
1:c1e560e: 
1:c1e560e:     public int getLoops() {
1:c1e560e:         return loops;
1:c1e560e:     }
1:c1e560e: 
1:c1e560e:     public void setLoops(int loops) {
1:c1e560e:         this.loops = loops;
1:c1e560e:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c1e560e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getLoops() {
1:         return loops;
1:     }
1: 
1:     public void setLoops(int loops) {
1:         this.loops = loops;
1:     }
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.File;
1: import java.io.FileReader;
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Producer() {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:                     } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.benchmark;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
commit:d4ee73f
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:13a9200
/////////////////////////////////////////////////////////////////////////
1:         in.close();
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 Protique Ltd
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
0:  **/
0: package org.activemq.benchmark;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileReader;
0: import java.io.IOException;
1: 
1: /**
0:  * @author James Strachan
0:  * @version $Revision$
0:  */
1: public class Producer extends BenchmarkSupport {
1: 
1:     int loops = -1;
1:     int loopSize = 1000;
1:     private int messageSize = 1000;
1: 
1:     public static void main(String[] args) {
1:         Producer tool = new Producer();
1:         if (args.length > 0) {
1:             tool.setUrl(args[0]);
1:         }
1:         if (args.length > 1) {
1:             tool.setTopic(parseBoolean(args[1]));
1:         }
1:         if (args.length > 2) {
1:             tool.setSubject(args[2]);
1:         }
1:         if (args.length > 3) {
1:             tool.setDurable(parseBoolean(args[3]));
1:         }
1:         if (args.length > 4) {
1:             tool.setMessageSize(Integer.parseInt(args[4]));
1:         }
1:         if (args.length > 5) {
1:             tool.setConnectionCount(Integer.parseInt(args[5]));
1:         }
1:         try {
1:             tool.run();
1:         }
0:         catch (Exception e) {
1:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
0:     public Producer() {
1:     }
1: 
1:     public void run() throws Exception {
1:         start();
1:         publish();
1:     }
1: 
1:     // Properties
0:     //-------------------------------------------------------------------------
1:     public int getMessageSize() {
1:         return messageSize;
1:     }
1: 
1:     public void setMessageSize(int messageSize) {
1:         this.messageSize = messageSize;
1:     }
1: 
1:     public int getLoopSize() {
1:         return loopSize;
1:     }
1: 
1:     public void setLoopSize(int loopSize) {
1:         this.loopSize = loopSize;
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1: 
1:     protected void publish() throws Exception {
1:         final String text = getMessage();
1: 
1:         System.out.println("Publishing to: " + subjects.length + " subject(s)");
1: 
1:         for (int i = 0; i < subjects.length; i++) {
1:             final String subject = subjects[i];
1:             Thread thread = new Thread() {
1:                 public void run() {
1:                     try {
1:                         publish(text, subject);
1:                     }
0:                     catch (JMSException e) {
1:                         System.out.println("Caught: " + e);
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             };
1:             thread.start();
1:         }
1: 
1:     }
1: 
1:     protected String getMessage() {
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i = 0; i < messageSize; i++) {
1:             char ch = 'X';
1:             buffer.append(ch);
1:         }
1:         return buffer.toString();
1:     }
1: 
1:     protected void publish(String text, String subject) throws JMSException {
1:         Session session = createSession();
1: 
1:         Destination destination = createDestination(session, subject);
1: 
1:         MessageProducer publisher = session.createProducer(destination);
1:         if (isDurable()) {
1:             publisher.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         }
0:         else {
1:             publisher.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         }
1: 
1:         System.out.println("Starting publisher on : " + destination + " of type: " + destination.getClass().getName());
1:         System.out.println("Message length: " + text.length());
1: 
1:         if (loops <= 0) {
1:             while (true) {
1:                 publishLoop(session, publisher, text);
1:             }
1:         }
0:         else {
1:             for (int i = 0; i < loops; i++) {
1:                 publishLoop(session, publisher, text);
1:             }
1:         }
1:     }
1: 
1:     protected void publishLoop(Session session, MessageProducer publisher, String text) throws JMSException {
1:         for (int i = 0; i < loopSize; i++) {
1:             Message message = session.createTextMessage(text);
1: 
1:             publisher.send(message);
1:             count(1);
1:         }
1:     }
1: 
1:     protected String loadFile(String file) throws IOException {
1:         System.out.println("Loading file: " + file);
1: 
1:         StringBuffer buffer = new StringBuffer();
1:         BufferedReader in = new BufferedReader(new FileReader(file));
1:         while (true) {
1:             String line = in.readLine();
1:             if (line == null) {
1:                 break;
1:             }
1:             buffer.append(line);
1:             buffer.append(File.separator);
1:         }
1:         return buffer.toString();
1:     }
1: }
============================================================================