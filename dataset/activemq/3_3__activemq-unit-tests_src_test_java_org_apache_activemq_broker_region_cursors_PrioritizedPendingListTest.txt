1:fd37e8c: /**
1:fd37e8c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fd37e8c:  * contributor license agreements.  See the NOTICE file distributed with
1:fd37e8c:  * this work for additional information regarding copyright ownership.
1:fd37e8c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fd37e8c:  * (the "License"); you may not use this file except in compliance with
1:fd37e8c:  * the License.  You may obtain a copy of the License at
1:fd37e8c:  *
1:fd37e8c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fd37e8c:  *
1:fd37e8c:  * Unless required by applicable law or agreed to in writing, software
1:fd37e8c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fd37e8c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fd37e8c:  * See the License for the specific language governing permissions and
1:fd37e8c:  * limitations under the License.
1:fd37e8c:  */
1:fd37e8c: package org.apache.activemq.broker.region.cursors;
2:fd37e8c: 
1:fd37e8c: import static org.junit.Assert.assertEquals;
1:fd37e8c: import static org.junit.Assert.assertFalse;
1:c1b58d3: import static org.junit.Assert.assertNotNull;
1:fd37e8c: import static org.junit.Assert.assertTrue;
1:fd37e8c: 
1:fd37e8c: import java.util.Iterator;
1:fd37e8c: 
1:fd37e8c: import org.apache.activemq.broker.region.Destination;
1:fd37e8c: import org.apache.activemq.broker.region.MessageReference;
1:fd37e8c: import org.apache.activemq.command.ActiveMQMessage;
1:fd37e8c: import org.apache.activemq.command.ConsumerId;
1:fd37e8c: import org.apache.activemq.command.Message;
1:fd37e8c: import org.apache.activemq.command.MessageId;
1:fd37e8c: import org.apache.activemq.util.IdGenerator;
1:fd37e8c: import org.junit.Test;
1:fd37e8c: 
1:fd37e8c: public class PrioritizedPendingListTest {
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testAddMessageFirst() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = list.size();
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:2b84cd6:     @Test
1:fd37e8c:     public void testAddMessageLast() {
1:fd37e8c: 
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(new TestMessageReference(1));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(3));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(4));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = 1;
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId++, iter.next().getMessageId().getProducerSequenceId());
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:c1b58d3:     @Test
1:fd37e8c:     public void testClear() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         list.clear();
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageLast(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testIsEmpty() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         list.clear();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testRemove() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c: 
1:fd37e8c:         TestMessageReference toRemove = new TestMessageReference(6);
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         list.addMessageLast(toRemove);
1:fd37e8c:         list.remove(toRemove);
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         list.remove(toRemove);
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = list.size();
1:fd37e8c:         while (iter.hasNext()) {
1:fd37e8c:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         list.remove(null);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testSize() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1));
1:fd37e8c:         assertTrue(list.size() == 1);
1:fd37e8c:         list.addMessageLast(new TestMessageReference(2));
1:fd37e8c:         assertTrue(list.size() == 2);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3));
1:fd37e8c:         assertTrue(list.size() == 3);
1:fd37e8c:         list.addMessageLast(new TestMessageReference(4));
1:fd37e8c:         assertTrue(list.size() == 4);
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5));
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         assertFalse(list.isEmpty());
1:fd37e8c:         list.clear();
1:fd37e8c:         assertTrue(list.isEmpty());
1:fd37e8c:         assertTrue(list.size() == 0);
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:fd37e8c:     public void testPrioritization() {
1:fd37e8c:         PrioritizedPendingList list = new PrioritizedPendingList();
1:fd37e8c: 
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(1, 5));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(2, 4));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(3, 3));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(4, 2));
1:fd37e8c:         list.addMessageFirst(new TestMessageReference(5, 1));
1:fd37e8c: 
1:fd37e8c:         assertTrue(list.size() == 5);
1:fd37e8c: 
1:fd37e8c:         Iterator<MessageReference> iter = list.iterator();
1:fd37e8c:         int lastId = list.size();
1:fd37e8c:         while (iter.hasNext()) {
1:c1b58d3:             MessageReference nextMessage = iter.next();
1:c1b58d3:             assertNotNull(nextMessage);
1:c1b58d3:             assertEquals(lastId--, nextMessage.getMessage().getPriority());
1:fd37e8c:         }
1:fd37e8c:     }
1:fd37e8c: 
1:fd37e8c:     @Test
1:2b84cd6:     public void testValuesPriority() {
1:2b84cd6:         PrioritizedPendingList list = new PrioritizedPendingList();
1:2b84cd6: 
1:2b84cd6:         list.addMessageFirst(new TestMessageReference(1, 2));
1:2b84cd6:         list.addMessageFirst(new TestMessageReference(2, 1));
1:2b84cd6:         list.addMessageFirst(new TestMessageReference(3, 3));
1:2b84cd6:         list.addMessageFirst(new TestMessageReference(4, 5));
1:2b84cd6:         list.addMessageFirst(new TestMessageReference(5, 4));
1:2b84cd6: 
1:2b84cd6:         assertTrue(list.size() == 5);
1:2b84cd6: 
1:2b84cd6:         Iterator<MessageReference> iter = list.iterator();
1:2b84cd6:         int lastId = list.size();
1:2b84cd6:         while (iter.hasNext()) {
1:2b84cd6:             assertEquals(lastId--, iter.next().getMessage().getPriority());
1:2b84cd6:         }
1:2b84cd6: 
1:2b84cd6:         lastId = list.size();
1:2b84cd6:         for (MessageReference messageReference : list.values()) {
1:2b84cd6:             assertEquals(lastId--, messageReference.getMessage().getPriority());
1:2b84cd6:         }
1:2b84cd6:     }
1:2b84cd6: 
1:fd37e8c:     @Test
1:c1b58d3:     public void testFullRangeIteration() {
1:c1b58d3:         PrioritizedPendingList list = new PrioritizedPendingList();
1:c1b58d3: 
1:c1b58d3:         int totalElements = 0;
1:c1b58d3: 
1:c1b58d3:         for (int i = 0; i < 10; ++i) {
1:c1b58d3:             list.addMessageFirst(new TestMessageReference(totalElements++, i));
1:c1b58d3:             list.addMessageFirst(new TestMessageReference(totalElements++, i));
1:c1b58d3:         }
1:c1b58d3: 
1:c1b58d3:         assertTrue(list.size() == totalElements);
1:c1b58d3: 
1:c1b58d3:         int totalIterated = 0;
1:c1b58d3:         Iterator<MessageReference> iter = list.iterator();
1:c1b58d3:         while (iter.hasNext()) {
1:c1b58d3:             MessageReference nextMessage = iter.next();
1:c1b58d3:             assertNotNull(nextMessage);
1:c1b58d3:             totalIterated++;
1:c1b58d3:         }
1:c1b58d3: 
1:c1b58d3:         assertEquals(totalElements, totalIterated);
1:c1b58d3:     }
1:c1b58d3: 
1:fd37e8c:     static class TestMessageReference implements MessageReference {
1:fd37e8c: 
1:fd37e8c:         private static final IdGenerator id = new IdGenerator();
1:fd37e8c: 
1:fd37e8c:         private Message message;
1:fd37e8c:         private MessageId messageId;
1:fd37e8c:         private int referenceCount = 0;
1:fd37e8c: 
1:fd37e8c:         public TestMessageReference(int sequenceId) {
1:fd37e8c:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:fd37e8c:             message = new ActiveMQMessage();
1:fd37e8c:             message.setPriority((byte) javax.jms.Message.DEFAULT_PRIORITY);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         public TestMessageReference(int sequenceId, int priority) {
1:fd37e8c:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:fd37e8c:             message = new ActiveMQMessage();
1:fd37e8c:             message.setPriority((byte) priority);
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public MessageId getMessageId() {
1:fd37e8c:             return messageId;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Message getMessageHardRef() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Message getMessage() {
1:fd37e8c:             return message;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isPersistent() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public Destination getRegionDestination() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getRedeliveryCounter() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public void incrementRedeliveryCounter() {
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getReferenceCount() {
1:fd37e8c:             return this.referenceCount;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int incrementReferenceCount() {
1:fd37e8c:             return this.referenceCount++;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int decrementReferenceCount() {
1:fd37e8c:             return this.referenceCount--;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public ConsumerId getTargetConsumerId() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getSize() {
1:fd37e8c:             return 1;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public long getExpiration() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public String getGroupID() {
1:fd37e8c:             return null;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public int getGroupSequence() {
1:fd37e8c:             return 0;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isExpired() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isDropped() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:fd37e8c: 
1:fd37e8c:         @Override
1:fd37e8c:         public boolean isAdvisory() {
1:fd37e8c:             return false;
1:fd37e8c:         }
1:6cc2c11: 
1:6cc2c11:         @Override
1:6cc2c11:         public boolean canProcessAsExpired() {
1:6cc2c11:             return false;
1:6cc2c11:         }
1:fd37e8c:     }
1:fd37e8c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1: 
1:         @Override
1:         public boolean canProcessAsExpired() {
1:             return false;
1:         }
commit:2b84cd6
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testValuesPriority() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1, 2));
1:         list.addMessageFirst(new TestMessageReference(2, 1));
1:         list.addMessageFirst(new TestMessageReference(3, 3));
1:         list.addMessageFirst(new TestMessageReference(4, 5));
1:         list.addMessageFirst(new TestMessageReference(5, 4));
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
1:             assertEquals(lastId--, iter.next().getMessage().getPriority());
1:         }
1: 
1:         lastId = list.size();
1:         for (MessageReference messageReference : list.values()) {
1:             assertEquals(lastId--, messageReference.getMessage().getPriority());
1:         }
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c1b58d3
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
1:             MessageReference nextMessage = iter.next();
1:             assertNotNull(nextMessage);
1:             assertEquals(lastId--, nextMessage.getMessage().getPriority());
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testFullRangeIteration() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         int totalElements = 0;
1: 
1:         for (int i = 0; i < 10; ++i) {
1:             list.addMessageFirst(new TestMessageReference(totalElements++, i));
1:             list.addMessageFirst(new TestMessageReference(totalElements++, i));
1:         }
1: 
1:         assertTrue(list.size() == totalElements);
1: 
1:         int totalIterated = 0;
1:         Iterator<MessageReference> iter = list.iterator();
1:         while (iter.hasNext()) {
1:             MessageReference nextMessage = iter.next();
1:             assertNotNull(nextMessage);
1:             totalIterated++;
1:         }
1: 
1:         assertEquals(totalElements, totalIterated);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:fd37e8c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.util.IdGenerator;
1: import org.junit.Test;
1: 
1: public class PrioritizedPendingListTest {
1: 
1:     @Test
1:     public void testAddMessageFirst() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
1:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:         }
1:     }
1: 
1:     @Test
1:     public void testAddMessageLast() {
1: 
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         list.addMessageLast(new TestMessageReference(1));
1:         list.addMessageLast(new TestMessageReference(2));
1:         list.addMessageLast(new TestMessageReference(3));
1:         list.addMessageLast(new TestMessageReference(4));
1:         list.addMessageLast(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = 1;
1:         while (iter.hasNext()) {
1:             assertEquals(lastId++, iter.next().getMessageId().getProducerSequenceId());
1:         }
1:     }
1: 
1:     @Test
1:     public void testClear() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         assertTrue(list.size() == 5);
1: 
1:         list.clear();
1: 
1:         assertTrue(list.isEmpty());
1:         assertTrue(list.size() == 0);
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageLast(new TestMessageReference(2));
1:         list.addMessageLast(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageLast(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         assertTrue(list.size() == 5);
1:     }
1: 
1:     @Test
1:     public void testIsEmpty() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1:         assertTrue(list.isEmpty());
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertFalse(list.isEmpty());
1:         list.clear();
1:         assertTrue(list.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testRemove() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         TestMessageReference toRemove = new TestMessageReference(6);
1: 
1:         list.addMessageFirst(new TestMessageReference(1));
1:         list.addMessageFirst(new TestMessageReference(2));
1:         list.addMessageFirst(new TestMessageReference(3));
1:         list.addMessageFirst(new TestMessageReference(4));
1:         list.addMessageFirst(new TestMessageReference(5));
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         list.addMessageLast(toRemove);
1:         list.remove(toRemove);
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         list.remove(toRemove);
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
1:             assertEquals(lastId--, iter.next().getMessageId().getProducerSequenceId());
1:         }
1: 
1:         list.remove(null);
1:     }
1: 
1:     @Test
1:     public void testSize() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1:         assertTrue(list.isEmpty());
1: 
1:         assertTrue(list.size() == 0);
1:         list.addMessageFirst(new TestMessageReference(1));
1:         assertTrue(list.size() == 1);
1:         list.addMessageLast(new TestMessageReference(2));
1:         assertTrue(list.size() == 2);
1:         list.addMessageFirst(new TestMessageReference(3));
1:         assertTrue(list.size() == 3);
1:         list.addMessageLast(new TestMessageReference(4));
1:         assertTrue(list.size() == 4);
1:         list.addMessageFirst(new TestMessageReference(5));
1:         assertTrue(list.size() == 5);
1: 
1:         assertFalse(list.isEmpty());
1:         list.clear();
1:         assertTrue(list.isEmpty());
1:         assertTrue(list.size() == 0);
1:     }
1: 
1:     @Test
1:     public void testPrioritization() {
1:         PrioritizedPendingList list = new PrioritizedPendingList();
1: 
1:         list.addMessageFirst(new TestMessageReference(1, 5));
1:         list.addMessageFirst(new TestMessageReference(2, 4));
1:         list.addMessageFirst(new TestMessageReference(3, 3));
1:         list.addMessageFirst(new TestMessageReference(4, 2));
1:         list.addMessageFirst(new TestMessageReference(5, 1));
1: 
1:         assertTrue(list.size() == 5);
1: 
1:         Iterator<MessageReference> iter = list.iterator();
1:         int lastId = list.size();
1:         while (iter.hasNext()) {
0:             assertEquals(lastId--, iter.next().getMessage().getPriority());
1:         }
1:     }
1: 
1:     static class TestMessageReference implements MessageReference {
1: 
1:         private static final IdGenerator id = new IdGenerator();
1: 
1:         private Message message;
1:         private MessageId messageId;
1:         private int referenceCount = 0;
1: 
1:         public TestMessageReference(int sequenceId) {
1:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:             message = new ActiveMQMessage();
1:             message.setPriority((byte) javax.jms.Message.DEFAULT_PRIORITY);
1:         }
1: 
1:         public TestMessageReference(int sequenceId, int priority) {
1:             messageId = new MessageId(id.generateId() + ":1", sequenceId);
1:             message = new ActiveMQMessage();
1:             message.setPriority((byte) priority);
1:         }
1: 
1:         @Override
1:         public MessageId getMessageId() {
1:             return messageId;
1:         }
1: 
1:         @Override
1:         public Message getMessageHardRef() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public Message getMessage() {
1:             return message;
1:         }
1: 
1:         @Override
1:         public boolean isPersistent() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public Destination getRegionDestination() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getRedeliveryCounter() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public void incrementRedeliveryCounter() {
1:         }
1: 
1:         @Override
1:         public int getReferenceCount() {
1:             return this.referenceCount;
1:         }
1: 
1:         @Override
1:         public int incrementReferenceCount() {
1:             return this.referenceCount++;
1:         }
1: 
1:         @Override
1:         public int decrementReferenceCount() {
1:             return this.referenceCount--;
1:         }
1: 
1:         @Override
1:         public ConsumerId getTargetConsumerId() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getSize() {
1:             return 1;
1:         }
1: 
1:         @Override
1:         public long getExpiration() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public String getGroupID() {
1:             return null;
1:         }
1: 
1:         @Override
1:         public int getGroupSequence() {
1:             return 0;
1:         }
1: 
1:         @Override
1:         public boolean isExpired() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean isDropped() {
1:             return false;
1:         }
1: 
1:         @Override
1:         public boolean isAdvisory() {
1:             return false;
1:         }
1:     }
1: }
============================================================================