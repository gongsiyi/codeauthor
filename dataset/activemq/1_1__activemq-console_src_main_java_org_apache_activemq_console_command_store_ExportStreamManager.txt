1:cfe5e98: /**
1:cfe5e98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfe5e98:  * contributor license agreements.  See the NOTICE file distributed with
1:cfe5e98:  * this work for additional information regarding copyright ownership.
1:cfe5e98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfe5e98:  * (the "License"); you may not use this file except in compliance with
1:cfe5e98:  * the License.  You may obtain a copy of the License at
1:cfe5e98:  *
1:cfe5e98:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cfe5e98:  *
1:cfe5e98:  * Unless required by applicable law or agreed to in writing, software
1:cfe5e98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfe5e98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfe5e98:  * See the License for the specific language governing permissions and
1:cfe5e98:  * limitations under the License.
1:cfe5e98:  */
1:cfe5e98: package org.apache.activemq.console.command.store;
1:cfe5e98: 
1:cfe5e98: import org.apache.activemq.console.command.store.proto.*;
1:cfe5e98: import org.apache.activemq.console.command.store.tar.TarEntry;
1:cfe5e98: import org.apache.activemq.console.command.store.tar.TarOutputStream;
1:cfe5e98: import org.fusesource.hawtbuf.AsciiBuffer;
1:cfe5e98: import org.fusesource.hawtbuf.Buffer;
1:cfe5e98: import org.fusesource.hawtbuf.proto.MessageBuffer;
1:cfe5e98: 
1:cfe5e98: import java.io.IOException;
1:cfe5e98: import java.io.OutputStream;
1:cfe5e98: import java.util.zip.GZIPOutputStream;
1:cfe5e98: 
1:cfe5e98: /**
1:cfe5e98:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:cfe5e98:  */
1:cfe5e98: public class ExportStreamManager {
1:cfe5e98: 
1:cfe5e98:     private final OutputStream target;
1:cfe5e98:     private final int version;
1:cfe5e98:     TarOutputStream stream;
1:cfe5e98: 
1:cfe5e98:     ExportStreamManager(OutputStream target, int version) throws IOException {
1:cfe5e98:         this.target = target;
1:cfe5e98:         this.version = version;
1:cfe5e98:         stream = new TarOutputStream(new GZIPOutputStream(target));
1:cfe5e98:         store("ver", new AsciiBuffer(""+version));
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98: 
1:cfe5e98:     long seq = 0;
1:cfe5e98: 
1:cfe5e98:     public void finish() throws IOException {
1:cfe5e98:         stream.close();
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     private void store(String ext, Buffer value) throws IOException {
1:cfe5e98:         TarEntry entry = new TarEntry(seq + "." + ext);
1:cfe5e98:         seq += 1;
1:cfe5e98:         entry.setSize(value.length());
1:cfe5e98:         stream.putNextEntry(entry);
1:cfe5e98:         value.writeTo(stream);
1:cfe5e98:         stream.closeEntry();
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     private void store(String ext, MessageBuffer<?,?> value) throws IOException {
1:cfe5e98:         TarEntry entry = new TarEntry(seq + "." + ext);
1:cfe5e98:       seq += 1;
1:cfe5e98:       entry.setSize(value.serializedSizeFramed());
1:cfe5e98:       stream.putNextEntry(entry);
1:cfe5e98:       value.writeFramed(stream);
1:cfe5e98:       stream.closeEntry();
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98: 
1:cfe5e98:     public void store_queue(QueuePB.Getter value) throws IOException {
1:cfe5e98:       store("que", value.freeze());
1:cfe5e98:     }
1:cfe5e98:     public void store_queue_entry(QueueEntryPB.Getter value) throws IOException {
1:cfe5e98:       store("qen", value.freeze());
1:cfe5e98:     }
1:cfe5e98:     public void store_message(MessagePB.Getter value) throws IOException {
1:cfe5e98:       store("msg", value.freeze());
1:cfe5e98:     }
1:cfe5e98:     public void store_map_entry(MapEntryPB.Getter value) throws IOException {
1:cfe5e98:       store("map", value.freeze());
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command.store;
1: 
1: import org.apache.activemq.console.command.store.proto.*;
1: import org.apache.activemq.console.command.store.tar.TarEntry;
1: import org.apache.activemq.console.command.store.tar.TarOutputStream;
1: import org.fusesource.hawtbuf.AsciiBuffer;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.proto.MessageBuffer;
1: 
1: import java.io.IOException;
1: import java.io.OutputStream;
1: import java.util.zip.GZIPOutputStream;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class ExportStreamManager {
1: 
1:     private final OutputStream target;
1:     private final int version;
1:     TarOutputStream stream;
1: 
1:     ExportStreamManager(OutputStream target, int version) throws IOException {
1:         this.target = target;
1:         this.version = version;
1:         stream = new TarOutputStream(new GZIPOutputStream(target));
1:         store("ver", new AsciiBuffer(""+version));
1:     }
1: 
1: 
1:     long seq = 0;
1: 
1:     public void finish() throws IOException {
1:         stream.close();
1:     }
1: 
1:     private void store(String ext, Buffer value) throws IOException {
1:         TarEntry entry = new TarEntry(seq + "." + ext);
1:         seq += 1;
1:         entry.setSize(value.length());
1:         stream.putNextEntry(entry);
1:         value.writeTo(stream);
1:         stream.closeEntry();
1:     }
1: 
1:     private void store(String ext, MessageBuffer<?,?> value) throws IOException {
1:         TarEntry entry = new TarEntry(seq + "." + ext);
1:       seq += 1;
1:       entry.setSize(value.serializedSizeFramed());
1:       stream.putNextEntry(entry);
1:       value.writeFramed(stream);
1:       stream.closeEntry();
1:     }
1: 
1: 
1:     public void store_queue(QueuePB.Getter value) throws IOException {
1:       store("que", value.freeze());
1:     }
1:     public void store_queue_entry(QueueEntryPB.Getter value) throws IOException {
1:       store("qen", value.freeze());
1:     }
1:     public void store_message(MessagePB.Getter value) throws IOException {
1:       store("msg", value.freeze());
1:     }
1:     public void store_map_entry(MapEntryPB.Getter value) throws IOException {
1:       store("map", value.freeze());
1:     }
1: 
1: }
============================================================================