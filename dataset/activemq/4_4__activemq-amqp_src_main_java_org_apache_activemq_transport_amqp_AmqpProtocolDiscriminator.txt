1:8d5b9a5: /**
1:8d5b9a5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8d5b9a5:  * contributor license agreements.  See the NOTICE file distributed with
1:8d5b9a5:  * this work for additional information regarding copyright ownership.
1:8d5b9a5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8d5b9a5:  * (the "License"); you may not use this file except in compliance with
1:8d5b9a5:  * the License.  You may obtain a copy of the License at
1:8d5b9a5:  *
1:8d5b9a5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d5b9a5:  *
1:8d5b9a5:  * Unless required by applicable law or agreed to in writing, software
1:8d5b9a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d5b9a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d5b9a5:  * See the License for the specific language governing permissions and
1:8d5b9a5:  * limitations under the License.
1:8d5b9a5:  */
1:8d5b9a5: package org.apache.activemq.transport.amqp;
6:8d5b9a5: 
1:8d5b9a5: import java.io.IOException;
1:8d5b9a5: import java.util.ArrayList;
1:838bbeb: 
1:adafdfe: import org.apache.activemq.broker.BrokerService;
1:f2653e6: import org.apache.activemq.command.Command;
1:3306467: import org.apache.activemq.transport.amqp.protocol.AmqpConnection;
1:f2653e6: 
1:8d5b9a5: /**
1:8d5b9a5:  * Used to assign the best implementation of a AmqpProtocolConverter to the
1:8d5b9a5:  * AmqpTransport based on the AmqpHeader that the client sends us.
1:8d5b9a5:  */
1:3306467: public class AmqpProtocolDiscriminator implements AmqpProtocolConverter {
1:8d5b9a5: 
1:0ca376d:     public static final int DEFAULT_PREFETCH = 1000;
1:8d5b9a5: 
1:adafdfe:     private final AmqpTransport transport;
1:adafdfe:     private final BrokerService brokerService;
1:adafdfe: 
1:8d5b9a5:     interface Discriminator {
1:8d5b9a5:         boolean matches(AmqpHeader header);
1:f2653e6: 
1:3306467:         AmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService);
3:8d5b9a5:     }
1:ab3de0c: 
1:8d5b9a5:     static final private ArrayList<Discriminator> DISCRIMINATORS = new ArrayList<Discriminator>();
1:8d5b9a5:     static {
1:f2653e6:         DISCRIMINATORS.add(new Discriminator() {
1:8d5b9a5: 
1:ab3de0c:             @Override
1:3306467:             public AmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService) {
1:3306467:                 return new AmqpConnection(transport, brokerService);
1:ab3de0c:             }
1:838bbeb: 
1:838bbeb:             @Override
1:8d5b9a5:             public boolean matches(AmqpHeader header) {
1:f2653e6:                 switch (header.getProtocolId()) {
1:8d5b9a5:                     case 0:
1:8d5b9a5:                     case 3:
1:f2653e6:                         if (header.getMajor() == 1 && header.getMinor() == 0 && header.getRevision() == 0) {
1:8d5b9a5:                             return true;
1:f2653e6:                         }
1:8d5b9a5:                 }
1:8d5b9a5:                 return false;
1:8d5b9a5:             }
1:8d5b9a5:         });
1:8d5b9a5:     }
1:8d5b9a5: 
1:5aef16a:     final private ArrayList<Command> pendingCommands = new ArrayList<Command>();
1:8d5b9a5: 
1:3306467:     public AmqpProtocolDiscriminator(AmqpTransport transport, BrokerService brokerService) {
1:8d5b9a5:         this.transport = transport;
1:adafdfe:         this.brokerService = brokerService;
1:8d5b9a5:     }
1:8d5b9a5: 
3:8d5b9a5:     @Override
1:8d5b9a5:     public void onAMQPData(Object command) throws Exception {
1:8d5b9a5:         if (command.getClass() == AmqpHeader.class) {
1:8d5b9a5:             AmqpHeader header = (AmqpHeader) command;
1:8d5b9a5: 
1:8d5b9a5:             Discriminator match = null;
1:8d5b9a5:             for (Discriminator discriminator : DISCRIMINATORS) {
1:f2653e6:                 if (discriminator.matches(header)) {
1:8d5b9a5:                     match = discriminator;
1:8d5b9a5:                 }
1:8d5b9a5:             }
1:adafdfe: 
1:8d5b9a5:             // Lets use first in the list if none are a good match.
1:f2653e6:             if (match == null) {
1:8d5b9a5:                 match = DISCRIMINATORS.get(0);
1:8d5b9a5:             }
1:adafdfe: 
1:3306467:             AmqpProtocolConverter next = match.create(transport, brokerService);
1:8d5b9a5:             transport.setProtocolConverter(next);
1:8d5b9a5:             for (Command send : pendingCommands) {
1:8d5b9a5:                 next.onActiveMQCommand(send);
1:8d5b9a5:             }
1:8d5b9a5:             pendingCommands.clear();
1:8d5b9a5:             next.onAMQPData(command);
1:8d5b9a5:         } else {
1:8d5b9a5:             throw new IllegalStateException();
1:8d5b9a5:         }
1:8d5b9a5:     }
1:8d5b9a5: 
1:8d5b9a5:     @Override
1:8d5b9a5:     public void onAMQPException(IOException error) {
1:80b526b:         transport.sendToActiveMQ(error);
1:8d5b9a5:     }
1:8d5b9a5: 
1:8d5b9a5:     @Override
1:8d5b9a5:     public void onActiveMQCommand(Command command) throws Exception {
1:8d5b9a5:         pendingCommands.add(command);
1:8d5b9a5:     }
1:8d5b9a5: 
1:8d5b9a5:     @Override
1:8d5b9a5:     public void updateTracer() {
1:838bbeb:     }
1:4b4cf7c: 
1:4b4cf7c:     @Override
1:4b4cf7c:     public long keepAlive() {
1:4b4cf7c:         return 0;
1:4b4cf7c:     }
1:8d5b9a5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:80b526b
/////////////////////////////////////////////////////////////////////////
1:         transport.sendToActiveMQ(error);
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public long keepAlive() {
1:         return 0;
1:     }
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.protocol.AmqpConnection;
1: public class AmqpProtocolDiscriminator implements AmqpProtocolConverter {
1:         AmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService);
/////////////////////////////////////////////////////////////////////////
1:             public AmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService) {
1:                 return new AmqpConnection(transport, brokerService);
/////////////////////////////////////////////////////////////////////////
1:     public AmqpProtocolDiscriminator(AmqpTransport transport, BrokerService brokerService) {
/////////////////////////////////////////////////////////////////////////
1:             AmqpProtocolConverter next = match.create(transport, brokerService);
/////////////////////////////////////////////////////////////////////////
commit:6a6ef45
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:adafdfe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     private final AmqpTransport transport;
1:     private final BrokerService brokerService;
1: 
0:         IAmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService);
/////////////////////////////////////////////////////////////////////////
0:             public IAmqpProtocolConverter create(AmqpTransport transport, BrokerService brokerService) {
0:                 return new AmqpProtocolConverter(transport, brokerService);
/////////////////////////////////////////////////////////////////////////
0:     public AMQPProtocolDiscriminator(AmqpTransport transport, BrokerService brokerService) {
1:         this.brokerService = brokerService;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:             IAmqpProtocolConverter next = match.create(transport, brokerService);
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Command;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         DISCRIMINATORS.add(new Discriminator() {
/////////////////////////////////////////////////////////////////////////
1:                 switch (header.getProtocolId()) {
1:                         if (header.getMajor() == 1 && header.getMinor() == 0 && header.getRevision() == 0) {
1:                         }
/////////////////////////////////////////////////////////////////////////
1:                 if (discriminator.matches(header)) {
1:             if (match == null) {
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0ca376d
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_PREFETCH = 1000;
0:     private int prefetch = 0;
commit:ab3de0c
/////////////////////////////////////////////////////////////////////////
0:     private int producerCredit = DEFAULT_PREFETCH;
/////////////////////////////////////////////////////////////////////////
0:             next.setProducerCredit(producerCredit);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void setProducerCredit(int producerCredit) {
0:         this.producerCredit = producerCredit;
1:     }
commit:838bbeb
/////////////////////////////////////////////////////////////////////////
0:     private static final int DEFAULT_PREFETCH = 100;
1: 
0:     private int prefetch = DEFAULT_PREFETCH;
/////////////////////////////////////////////////////////////////////////
0:             next.setPrefetch(prefetch);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
0:     public void setPrefetch(int prefetch) {
0:         this.prefetch = prefetch;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:5aef16a
/////////////////////////////////////////////////////////////////////////
1:     final private ArrayList<Command> pendingCommands = new ArrayList<Command>();
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:8d5b9a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
0: import org.apache.activemq.command.Command;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: 
1: /**
1:  * Used to assign the best implementation of a AmqpProtocolConverter to the
1:  * AmqpTransport based on the AmqpHeader that the client sends us.
1:  */
0: public class AMQPProtocolDiscriminator implements IAmqpProtocolConverter {
1: 
0:     final private AmqpTransport transport;
1: 
1:     interface Discriminator {
1:         boolean matches(AmqpHeader header);
0:         IAmqpProtocolConverter create(AmqpTransport transport);
1:     }
1: 
1:     static final private ArrayList<Discriminator> DISCRIMINATORS = new ArrayList<Discriminator>();
1:     static {
0:         DISCRIMINATORS.add(new Discriminator(){
1: 
1:             @Override
0:             public IAmqpProtocolConverter create(AmqpTransport transport) {
0:                 return new AmqpProtocolConverter(transport);
1:             }
1: 
1:             @Override
1:             public boolean matches(AmqpHeader header) {
0:                 switch( header.getProtocolId() ) {
1:                     case 0:
1:                     case 3:
0:                         if( header.getMajor() == 1 && header.getMinor()==0 && header.getRevision()==0 )
1:                             return true;
1:                 }
1:                 return false;
1:             }
1:         });
1: 
1:     }
1: 
0:     static final private ArrayList<Command> pendingCommands = new ArrayList<Command>();
1: 
0:     public AMQPProtocolDiscriminator(AmqpTransport transport) {
1:         this.transport = transport;
1:     }
1: 
1:     @Override
1:     public void onAMQPData(Object command) throws Exception {
1:         if (command.getClass() == AmqpHeader.class) {
1:             AmqpHeader header = (AmqpHeader) command;
1: 
1:             Discriminator match = null;
1:             for (Discriminator discriminator : DISCRIMINATORS) {
0:                 if( discriminator.matches(header) ) {
1:                     match = discriminator;
1:                 }
1:             }
1:             // Lets use first in the list if none are a good match.
0:             if( match == null ) {
1:                 match = DISCRIMINATORS.get(0);
1:             }
0:             IAmqpProtocolConverter next = match.create(transport);
1:             transport.setProtocolConverter(next);
1:             for (Command send : pendingCommands) {
1:                 next.onActiveMQCommand(send);
1:             }
1:             pendingCommands.clear();
1:             next.onAMQPData(command);
1:         } else {
1:             throw new IllegalStateException();
1:         }
1:     }
1: 
1:     @Override
1:     public void onAMQPException(IOException error) {
1:     }
1: 
1:     @Override
1:     public void onActiveMQCommand(Command command) throws Exception {
1:         pendingCommands.add(command);
1:     }
1: 
1:     @Override
1:     public void updateTracer() {
1:     }
1: }
============================================================================