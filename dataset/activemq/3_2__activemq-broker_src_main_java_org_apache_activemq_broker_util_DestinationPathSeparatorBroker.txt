1:008b3e5: /**
1:008b3e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:008b3e5:  * contributor license agreements.  See the NOTICE file distributed with
1:008b3e5:  * this work for additional information regarding copyright ownership.
1:008b3e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:008b3e5:  * (the "License"); you may not use this file except in compliance with
1:008b3e5:  * the License.  You may obtain a copy of the License at
1:008b3e5:  *
1:008b3e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:008b3e5:  *
1:008b3e5:  * Unless required by applicable law or agreed to in writing, software
1:008b3e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:008b3e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:008b3e5:  * See the License for the specific language governing permissions and
1:008b3e5:  * limitations under the License.
1:008b3e5:  */
1:008b3e5: 
1:008b3e5: package org.apache.activemq.broker.util;
1:008b3e5: 
1:008b3e5: import org.apache.activemq.broker.BrokerPluginSupport;
1:008b3e5: import org.apache.activemq.broker.ConnectionContext;
1:008b3e5: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:008b3e5: import org.apache.activemq.broker.ProducerBrokerExchange;
1:008b3e5: import org.apache.activemq.broker.region.Destination;
1:008b3e5: import org.apache.activemq.broker.region.Subscription;
1:008b3e5: import org.apache.activemq.command.*;
1:008b3e5: import org.apache.activemq.filter.DestinationPath;
1:008b3e5: 
1:008b3e5: import java.util.ArrayList;
1:008b3e5: import java.util.List;
1:008b3e5: import java.util.StringTokenizer;
1:008b3e5: 
1:5967d76: /**
1:008b3e5:  * @org.apache.xbean.XBean element="destinationPathSeparatorPlugin"
1:008b3e5:  */
1:008b3e5: 
1:008b3e5: public class DestinationPathSeparatorBroker extends BrokerPluginSupport {
1:008b3e5: 
1:008b3e5:     String pathSeparator = "/";
1:008b3e5: 
1:008b3e5:     protected ActiveMQDestination convertDestination(ActiveMQDestination destination) {
1:2900806:         if (destination != null && destination.getPhysicalName().contains(pathSeparator)) {
1:008b3e5:             List<String> l = new ArrayList<String>();
1:008b3e5:             StringTokenizer iter = new StringTokenizer(destination.getPhysicalName(), pathSeparator);
1:008b3e5:             while (iter.hasMoreTokens()) {
1:008b3e5:                 String name = iter.nextToken().trim();
1:008b3e5:                 if (name.length() == 0) {
1:008b3e5:                     continue;
1:008b3e5:                 }
1:008b3e5:                 l.add(name);
1:008b3e5:             }
1:008b3e5: 
1:008b3e5:             String newName = DestinationPath.toString(l.toArray(new String[l.size()]));
1:008b3e5:             return ActiveMQDestination.createDestination(newName, destination.getDestinationType());
1:008b3e5:         } else {
1:008b3e5:             return destination;
1:008b3e5:         }
1:008b3e5:     }
1:008b3e5: 
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:008b3e5:         ack.setDestination(convertDestination(ack.getDestination()));
1:008b3e5:         super.acknowledge(consumerExchange, ack);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         return super.addConsumer(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         super.addProducer(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         super.removeConsumer(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         super.removeProducer(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:008b3e5:         messageSend.setDestination(convertDestination(messageSend.getDestination()));
1:008b3e5:         super.send(producerExchange, messageSend);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:008b3e5:         return super.addDestination(context, convertDestination(destination), createIfTemporary);
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:008b3e5:         super.removeDestination(context, convertDestination(destination), timeout);
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         super.addDestinationInfo(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:008b3e5:     @Override
1:008b3e5:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:008b3e5:         info.setDestination(convertDestination(info.getDestination()));
1:008b3e5:         super.removeDestinationInfo(context, info);    
1:008b3e5:     }
1:008b3e5: 
1:8311938:     @Override
1:8311938:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:8311938:         control.setDestination(convertDestination(control.getDestination()));
1:8311938:         super.processConsumerControl(consumerExchange, control);
1:8311938:     }
1:8311938: 
1:8311938:     @Override
1:8311938:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:8311938:         pull.setDestination(convertDestination(pull.getDestination()));
1:8311938:         return super.messagePull(context, pull);
1:8311938:     }
1:8311938: 
1:008b3e5:     public void setPathSeparator(String pathSeparator) {
1:008b3e5:         this.pathSeparator = pathSeparator;
1:008b3e5:     }
1:008b3e5: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Gary Tully
-------------------------------------------------------------------------------
commit:8311938
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:         control.setDestination(convertDestination(control.getDestination()));
1:         super.processConsumerControl(consumerExchange, control);
1:     }
1: 
1:     @Override
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:         pull.setDestination(convertDestination(pull.getDestination()));
1:         return super.messagePull(context, pull);
1:     }
1: 
commit:5967d76
/////////////////////////////////////////////////////////////////////////
1: /**
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2900806
/////////////////////////////////////////////////////////////////////////
1:         if (destination != null && destination.getPhysicalName().contains(pathSeparator)) {
commit:008b3e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.util;
1: 
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.*;
1: import org.apache.activemq.filter.DestinationPath;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.StringTokenizer;
1: 
0: /*
1:  * @org.apache.xbean.XBean element="destinationPathSeparatorPlugin"
1:  */
1: 
1: public class DestinationPathSeparatorBroker extends BrokerPluginSupport {
1: 
1:     String pathSeparator = "/";
1: 
1:     protected ActiveMQDestination convertDestination(ActiveMQDestination destination) {
0:         if (destination.getPhysicalName().contains(pathSeparator)) {
1:             List<String> l = new ArrayList<String>();
1:             StringTokenizer iter = new StringTokenizer(destination.getPhysicalName(), pathSeparator);
1:             while (iter.hasMoreTokens()) {
1:                 String name = iter.nextToken().trim();
1:                 if (name.length() == 0) {
1:                     continue;
1:                 }
1:                 l.add(name);
1:             }
1: 
1:             String newName = DestinationPath.toString(l.toArray(new String[l.size()]));
1:             return ActiveMQDestination.createDestination(newName, destination.getDestinationType());
1:         } else {
1:             return destination;
1:         }
1:     }
1: 
1: 
1:     @Override
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         ack.setDestination(convertDestination(ack.getDestination()));
1:         super.acknowledge(consumerExchange, ack);    
1:     }
1: 
1:     @Override
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         return super.addConsumer(context, info);    
1:     }
1: 
1:     @Override
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         super.addProducer(context, info);    
1:     }
1: 
1:     @Override
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         super.removeConsumer(context, info);    
1:     }
1: 
1:     @Override
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         super.removeProducer(context, info);    
1:     }
1: 
1:     @Override
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         messageSend.setDestination(convertDestination(messageSend.getDestination()));
1:         super.send(producerExchange, messageSend);    
1:     }
1: 
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:         return super.addDestination(context, convertDestination(destination), createIfTemporary);
1:     }
1: 
1:     @Override
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         super.removeDestination(context, convertDestination(destination), timeout);
1:     }
1: 
1:     @Override
1:     public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         super.addDestinationInfo(context, info);    
1:     }
1: 
1:     @Override
1:     public void removeDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
1:         info.setDestination(convertDestination(info.getDestination()));
1:         super.removeDestinationInfo(context, info);    
1:     }
1: 
1:     public void setPathSeparator(String pathSeparator) {
1:         this.pathSeparator = pathSeparator;
1:     }
1: }
============================================================================