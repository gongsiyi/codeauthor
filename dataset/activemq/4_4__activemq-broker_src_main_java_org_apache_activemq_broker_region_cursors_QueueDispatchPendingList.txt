1:efc9a8d: /**
1:efc9a8d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efc9a8d:  * contributor license agreements.  See the NOTICE file distributed with
1:efc9a8d:  * this work for additional information regarding copyright ownership.
1:efc9a8d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efc9a8d:  * (the "License"); you may not use this file except in compliance with
1:efc9a8d:  * the License.  You may obtain a copy of the License at
1:efc9a8d:  *
1:efc9a8d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:efc9a8d:  *
1:efc9a8d:  * Unless required by applicable law or agreed to in writing, software
1:efc9a8d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efc9a8d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efc9a8d:  * See the License for the specific language governing permissions and
1:efc9a8d:  * limitations under the License.
1:efc9a8d:  */
1:efc9a8d: package org.apache.activemq.broker.region.cursors;
4:efc9a8d: 
1:efc9a8d: import java.util.ArrayList;
1:efc9a8d: import java.util.Collection;
1:efc9a8d: import java.util.Iterator;
1:efc9a8d: import java.util.List;
1:efc9a8d: 
1:5e05df1: import org.apache.activemq.broker.region.MessageReference;
1:5e05df1: import org.apache.activemq.command.MessageId;
1:5e05df1: 
1:efc9a8d: /**
1:efc9a8d:  * An abstraction that keeps the correct order of messages that need to be dispatched
1:efc9a8d:  * to consumers, but also hides the fact that there might be redelivered messages that
1:efc9a8d:  * should be dispatched ahead of any other paged in messages.
1:efc9a8d:  *
1:efc9a8d:  * Direct usage of this class is recommended as you can control when redeliveries need
1:efc9a8d:  * to be added vs regular pending messages (the next set of messages that can be dispatched)
1:efc9a8d:  *
1:efc9a8d:  * Created by ceposta
1:efc9a8d:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:efc9a8d:  */
1:efc9a8d: public class QueueDispatchPendingList implements PendingList {
1:efc9a8d: 
1:efc9a8d:     private PendingList pagedInPendingDispatch = new OrderedPendingList();
1:efc9a8d:     private PendingList redeliveredWaitingDispatch = new OrderedPendingList();
1:5af5b59:     private boolean prioritized = false;
1:efc9a8d: 
1:efc9a8d: 
5:efc9a8d:     @Override
1:efc9a8d:     public boolean isEmpty() {
1:efc9a8d:         return pagedInPendingDispatch.isEmpty() && redeliveredWaitingDispatch.isEmpty();
7:efc9a8d:     }
1:c2230fd: 
1:f47b370:     @Override
1:efc9a8d:     public void clear() {
1:efc9a8d:         pagedInPendingDispatch.clear();
1:efc9a8d:         redeliveredWaitingDispatch.clear();
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     /**
1:efc9a8d:      * Messages added are added directly to the pagedInPendingDispatch set of messages. If
1:efc9a8d:      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()
1:efc9a8d:      * method
1:efc9a8d:      * @param message
1:efc9a8d:      *      The MessageReference that is to be added to this list.
1:efc9a8d:      *
1:5e05df1:      * @return the pending node.
1:efc9a8d:      */
1:efc9a8d:     @Override
1:efc9a8d:     public PendingNode addMessageFirst(MessageReference message) {
1:efc9a8d:         return pagedInPendingDispatch.addMessageFirst(message);
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     /**
1:efc9a8d:      * Messages added are added directly to the pagedInPendingDispatch set of messages. If
1:efc9a8d:      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()
1:efc9a8d:      * method
1:efc9a8d:      * @param message
1:efc9a8d:      *      The MessageReference that is to be added to this list.
1:efc9a8d:      *
1:5e05df1:      * @return the pending node.
1:efc9a8d:      */
1:efc9a8d:     @Override
1:efc9a8d:     public PendingNode addMessageLast(MessageReference message) {
1:efc9a8d:         return pagedInPendingDispatch.addMessageLast(message);
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public PendingNode remove(MessageReference message) {
1:efc9a8d:         if (pagedInPendingDispatch.contains(message)) {
1:efc9a8d:             return pagedInPendingDispatch.remove(message);
1:2a8218a:         } else if (redeliveredWaitingDispatch.contains(message)) {
1:efc9a8d:             return redeliveredWaitingDispatch.remove(message);
1:efc9a8d:         }
1:efc9a8d:         return null;
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public int size() {
1:efc9a8d:         return pagedInPendingDispatch.size() + redeliveredWaitingDispatch.size();
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:734fb7d:     public long messageSize() {
1:734fb7d:         return pagedInPendingDispatch.messageSize() + redeliveredWaitingDispatch.messageSize();
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     @Override
1:efc9a8d:     public Iterator<MessageReference> iterator() {
1:2a8218a:         if (prioritized && hasRedeliveries()) {
1:2a8218a:             final QueueDispatchPendingList delegate = this;
1:2a8218a:             final PrioritizedPendingList  priorityOrderedRedeliveredAndPending = new PrioritizedPendingList();
1:2a8218a:             priorityOrderedRedeliveredAndPending.addAll(redeliveredWaitingDispatch);
1:2a8218a:             priorityOrderedRedeliveredAndPending.addAll(pagedInPendingDispatch);
1:efc9a8d: 
1:2a8218a:             return new Iterator<MessageReference>() {
1:efc9a8d: 
1:2a8218a:                 Iterator<MessageReference> combinedIterator = priorityOrderedRedeliveredAndPending.iterator();
1:2a8218a:                 MessageReference current = null;
1:efc9a8d: 
1:2a8218a:                 @Override
1:2a8218a:                 public boolean hasNext() {
1:2a8218a:                     return combinedIterator.hasNext();
1:efc9a8d:                 }
1:efc9a8d: 
1:2a8218a:                 @Override
1:2a8218a:                 public MessageReference next() {
1:2a8218a:                     current = combinedIterator.next();
1:2a8218a:                     return current;
1:2a8218a:                 }
1:efc9a8d: 
1:2a8218a:                 @Override
1:2a8218a:                 public void remove() {
1:2a8218a:                     if (current!=null) {
1:2a8218a:                         delegate.remove(current);
1:2a8218a:                     }
1:2a8218a:                 }
1:2a8218a:             };
1:2a8218a: 
1:2a8218a:         } else {
1:2a8218a: 
1:2a8218a:             return new Iterator<MessageReference>() {
1:2a8218a: 
1:2a8218a:                 Iterator<MessageReference> redeliveries = redeliveredWaitingDispatch.iterator();
1:2a8218a:                 Iterator<MessageReference> pendingDispatch = pagedInPendingDispatch.iterator();
1:2a8218a:                 Iterator<MessageReference> current = redeliveries;
1:2a8218a: 
1:2a8218a: 
1:2a8218a:                 @Override
1:2a8218a:                 public boolean hasNext() {
1:2a8218a:                     if (!redeliveries.hasNext() && (current == redeliveries)) {
1:2a8218a:                         current = pendingDispatch;
1:2a8218a:                     }
1:2a8218a:                     return current.hasNext();
1:2a8218a:                 }
1:2a8218a: 
1:2a8218a:                 @Override
1:2a8218a:                 public MessageReference next() {
1:2a8218a:                     return current.next();
1:2a8218a:                 }
1:2a8218a: 
1:2a8218a:                 @Override
1:2a8218a:                 public void remove() {
1:2a8218a:                     current.remove();
1:2a8218a:                 }
1:2a8218a:             };
1:2a8218a:         }
1:5af5b59:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public boolean contains(MessageReference message) {
1:efc9a8d:         return pagedInPendingDispatch.contains(message) || redeliveredWaitingDispatch.contains(message);
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public Collection<MessageReference> values() {
1:efc9a8d:         List<MessageReference> messageReferences = new ArrayList<MessageReference>();
1:efc9a8d:         Iterator<MessageReference> iterator = iterator();
1:efc9a8d:         while (iterator.hasNext()) {
1:efc9a8d:             messageReferences.add(iterator.next());
1:efc9a8d:         }
1:efc9a8d:         return messageReferences;
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public void addAll(PendingList pendingList) {
1:efc9a8d:         pagedInPendingDispatch.addAll(pendingList);
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     @Override
1:efc9a8d:     public MessageReference get(MessageId messageId) {
1:efc9a8d:         MessageReference rc = pagedInPendingDispatch.get(messageId);
1:efc9a8d:         if (rc == null) {
1:efc9a8d:             return redeliveredWaitingDispatch.get(messageId);
1:efc9a8d:         }
1:efc9a8d:         return rc;
1:f47b370:     }
1:f47b370: 
1:efc9a8d:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:5af5b59:         prioritized = prioritizedMessages;
1:efc9a8d:         if (prioritizedMessages && this.pagedInPendingDispatch instanceof OrderedPendingList) {
1:efc9a8d:             pagedInPendingDispatch = new PrioritizedPendingList();
1:efc9a8d:             redeliveredWaitingDispatch = new PrioritizedPendingList();
1:efc9a8d:         } else if(pagedInPendingDispatch instanceof PrioritizedPendingList) {
1:efc9a8d:             pagedInPendingDispatch = new OrderedPendingList();
1:efc9a8d:             redeliveredWaitingDispatch = new OrderedPendingList();
1:efc9a8d:         }
1:efc9a8d:     }
1:efc9a8d: 
1:efc9a8d:     public boolean hasRedeliveries(){
1:2a8218a:         return !redeliveredWaitingDispatch.isEmpty();
1:efc9a8d:     }
1:f47b370: 
1:f47b370:     public void addForRedelivery(List<MessageReference> list, boolean noConsumers) {
1:c2230fd:         if (noConsumers && redeliveredWaitingDispatch instanceof OrderedPendingList && willBeInOrder(list)) {
1:f47b370:             // a single consumer can expect repeatable redelivery order irrespective
1:f47b370:             // of transaction or prefetch boundaries
1:604f707:             ((OrderedPendingList)redeliveredWaitingDispatch).insertAtHead(list);
1:f47b370:         } else {
1:f47b370:             for (MessageReference ref : list) {
1:f47b370:                 redeliveredWaitingDispatch.addMessageLast(ref);
1:f47b370:             }
1:f47b370:         }
1:f47b370:     }
1:efc9a8d: 
1:c2230fd:     private boolean willBeInOrder(List<MessageReference> list) {
1:c2230fd:         // for a single consumer inserting at head will be in order w.r.t brokerSequence but
1:c2230fd:         // will not be if there were multiple consumers in the mix even if this is the last
1:c2230fd:         // consumer to close (noConsumers==true)
1:c2230fd:         return !redeliveredWaitingDispatch.isEmpty() && list != null && !list.isEmpty() &&
1:c2230fd:             redeliveredWaitingDispatch.iterator().next().getMessageId().getBrokerSequenceId() > list.get(list.size() - 1).getMessageId().getBrokerSequenceId();
1:c2230fd:     }
1:efc9a8d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c2230fd
/////////////////////////////////////////////////////////////////////////
1:         if (noConsumers && redeliveredWaitingDispatch instanceof OrderedPendingList && willBeInOrder(list)) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     private boolean willBeInOrder(List<MessageReference> list) {
1:         // for a single consumer inserting at head will be in order w.r.t brokerSequence but
1:         // will not be if there were multiple consumers in the mix even if this is the last
1:         // consumer to close (noConsumers==true)
1:         return !redeliveredWaitingDispatch.isEmpty() && list != null && !list.isEmpty() &&
1:             redeliveredWaitingDispatch.iterator().next().getMessageId().getBrokerSequenceId() > list.get(list.size() - 1).getMessageId().getBrokerSequenceId();
1:     }
commit:604f707
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (noConsumers && redeliveredWaitingDispatch instanceof OrderedPendingList) {
1:             ((OrderedPendingList)redeliveredWaitingDispatch).insertAtHead(list);
commit:f47b370
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:     public void insertAtHead(List<MessageReference> list) {
0:         throw new IllegalStateException("no insertion support in: " + this.getClass().getCanonicalName());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void addForRedelivery(List<MessageReference> list, boolean noConsumers) {
0:         if (noConsumers) {
1:             // a single consumer can expect repeatable redelivery order irrespective
1:             // of transaction or prefetch boundaries
0:             redeliveredWaitingDispatch.insertAtHead(list);
1:         } else {
1:             for (MessageReference ref : list) {
1:                 redeliveredWaitingDispatch.addMessageLast(ref);
1:             }
1:         }
1:     }
commit:2a8218a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } else if (redeliveredWaitingDispatch.contains(message)) {
/////////////////////////////////////////////////////////////////////////
1:         if (prioritized && hasRedeliveries()) {
1:             final QueueDispatchPendingList delegate = this;
1:             final PrioritizedPendingList  priorityOrderedRedeliveredAndPending = new PrioritizedPendingList();
1:             priorityOrderedRedeliveredAndPending.addAll(redeliveredWaitingDispatch);
1:             priorityOrderedRedeliveredAndPending.addAll(pagedInPendingDispatch);
1:             return new Iterator<MessageReference>() {
1:                 Iterator<MessageReference> combinedIterator = priorityOrderedRedeliveredAndPending.iterator();
1:                 MessageReference current = null;
1:                 @Override
1:                 public boolean hasNext() {
1:                     return combinedIterator.hasNext();
1:                 @Override
1:                 public MessageReference next() {
1:                     current = combinedIterator.next();
1:                     return current;
1:                 }
1:                 @Override
1:                 public void remove() {
1:                     if (current!=null) {
1:                         delegate.remove(current);
1:                     }
1:                 }
1:             };
1: 
1:         } else {
1: 
1:             return new Iterator<MessageReference>() {
1: 
1:                 Iterator<MessageReference> redeliveries = redeliveredWaitingDispatch.iterator();
1:                 Iterator<MessageReference> pendingDispatch = pagedInPendingDispatch.iterator();
1:                 Iterator<MessageReference> current = redeliveries;
1: 
1: 
1:                 @Override
1:                 public boolean hasNext() {
1:                     if (!redeliveries.hasNext() && (current == redeliveries)) {
1:                         current = pendingDispatch;
1:                     }
1:                     return current.hasNext();
1:                 }
1: 
1:                 @Override
1:                 public MessageReference next() {
1:                     return current.next();
1:                 }
1: 
1:                 @Override
1:                 public void remove() {
1:                     current.remove();
1:                 }
1:             };
1:         }
/////////////////////////////////////////////////////////////////////////
0:         redeliveredWaitingDispatch.addMessageLast(qmr);
1:         return !redeliveredWaitingDispatch.isEmpty();
commit:5af5b59
/////////////////////////////////////////////////////////////////////////
0:     // when true use one PrioritizedPendingList for everything
1:     private boolean prioritized = false;
/////////////////////////////////////////////////////////////////////////
1:         prioritized = prioritizedMessages;
/////////////////////////////////////////////////////////////////////////
0:         if (prioritized) {
0:             pagedInPendingDispatch.addMessageLast(qmr);
0:         } else {
0:             redeliveredWaitingDispatch.addMessageLast(qmr);
1:         }
0:         return prioritized ? !pagedInPendingDispatch.isEmpty() : !redeliveredWaitingDispatch.isEmpty();
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:     public long messageSize() {
1:         return pagedInPendingDispatch.messageSize() + redeliveredWaitingDispatch.messageSize();
1:     }
1: 
1:     @Override
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.QueueMessageReference;
1: import org.apache.activemq.command.MessageId;
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @return the pending node.
/////////////////////////////////////////////////////////////////////////
1:      * @return the pending node.
author:Christian Posta
-------------------------------------------------------------------------------
commit:efc9a8d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
0: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.QueueMessageReference;
0: import org.apache.activemq.command.MessageId;
1: 
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: /**
1:  * An abstraction that keeps the correct order of messages that need to be dispatched
1:  * to consumers, but also hides the fact that there might be redelivered messages that
1:  * should be dispatched ahead of any other paged in messages.
1:  *
1:  * Direct usage of this class is recommended as you can control when redeliveries need
1:  * to be added vs regular pending messages (the next set of messages that can be dispatched)
1:  *
1:  * Created by ceposta
1:  * <a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.
1:  */
1: public class QueueDispatchPendingList implements PendingList {
1: 
1:     private PendingList pagedInPendingDispatch = new OrderedPendingList();
1:     private PendingList redeliveredWaitingDispatch = new OrderedPendingList();
1: 
1: 
1:     @Override
1:     public boolean isEmpty() {
1:         return pagedInPendingDispatch.isEmpty() && redeliveredWaitingDispatch.isEmpty();
1:     }
1: 
1:     @Override
1:     public void clear() {
1:         pagedInPendingDispatch.clear();
1:         redeliveredWaitingDispatch.clear();
1:     }
1: 
1:     /**
1:      * Messages added are added directly to the pagedInPendingDispatch set of messages. If
1:      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()
1:      * method
1:      * @param message
1:      *      The MessageReference that is to be added to this list.
1:      *
0:      * @return
1:      */
1:     @Override
1:     public PendingNode addMessageFirst(MessageReference message) {
1:         return pagedInPendingDispatch.addMessageFirst(message);
1:     }
1: 
1:     /**
1:      * Messages added are added directly to the pagedInPendingDispatch set of messages. If
1:      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()
1:      * method
1:      * @param message
1:      *      The MessageReference that is to be added to this list.
1:      *
0:      * @return
1:      */
1:     @Override
1:     public PendingNode addMessageLast(MessageReference message) {
1:         return pagedInPendingDispatch.addMessageLast(message);
1:     }
1: 
1:     @Override
1:     public PendingNode remove(MessageReference message) {
1:         if (pagedInPendingDispatch.contains(message)) {
1:             return pagedInPendingDispatch.remove(message);
0:         }else if (redeliveredWaitingDispatch.contains(message)) {
1:             return redeliveredWaitingDispatch.remove(message);
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public int size() {
1:         return pagedInPendingDispatch.size() + redeliveredWaitingDispatch.size();
1:     }
1: 
1:     @Override
1:     public Iterator<MessageReference> iterator() {
0:         return new Iterator<MessageReference>() {
1: 
0:             Iterator<MessageReference> redeliveries = redeliveredWaitingDispatch.iterator();
0:             Iterator<MessageReference> pendingDispatch = pagedInPendingDispatch.iterator();
0:             Iterator<MessageReference> current = redeliveries;
1: 
1: 
1:             @Override
0:             public boolean hasNext() {
0:                 if (!redeliveries.hasNext() && (current == redeliveries)) {
0:                     current = pendingDispatch;
1:                 }
0:                 return current.hasNext();
1:             }
1: 
1:             @Override
0:             public MessageReference next() {
0:                 return current.next();
1:             }
1: 
1:             @Override
0:             public void remove() {
0:                 current.remove();
1:             }
0:         };
1:     }
1: 
1:     @Override
1:     public boolean contains(MessageReference message) {
1:         return pagedInPendingDispatch.contains(message) || redeliveredWaitingDispatch.contains(message);
1:     }
1: 
1:     @Override
1:     public Collection<MessageReference> values() {
1:         List<MessageReference> messageReferences = new ArrayList<MessageReference>();
1:         Iterator<MessageReference> iterator = iterator();
1:         while (iterator.hasNext()) {
1:             messageReferences.add(iterator.next());
1:         }
1:         return messageReferences;
1:     }
1: 
1:     @Override
1:     public void addAll(PendingList pendingList) {
1:         pagedInPendingDispatch.addAll(pendingList);
1:     }
1: 
1:     @Override
1:     public MessageReference get(MessageId messageId) {
1:         MessageReference rc = pagedInPendingDispatch.get(messageId);
1:         if (rc == null) {
1:             return redeliveredWaitingDispatch.get(messageId);
1:         }
1:         return rc;
1:     }
1: 
1:     public void setPrioritizedMessages(boolean prioritizedMessages) {
1:         if (prioritizedMessages && this.pagedInPendingDispatch instanceof OrderedPendingList) {
1:             pagedInPendingDispatch = new PrioritizedPendingList();
1:             redeliveredWaitingDispatch = new PrioritizedPendingList();
1:         } else if(pagedInPendingDispatch instanceof PrioritizedPendingList) {
1:             pagedInPendingDispatch = new OrderedPendingList();
1:             redeliveredWaitingDispatch = new OrderedPendingList();
1:         }
1:     }
1: 
0:     public void addMessageForRedelivery(QueueMessageReference qmr) {
0:         redeliveredWaitingDispatch.addMessageLast(qmr);
1:     }
1: 
1:     public boolean hasRedeliveries(){
0:         return !redeliveredWaitingDispatch.isEmpty();
1:     }
1: }
============================================================================