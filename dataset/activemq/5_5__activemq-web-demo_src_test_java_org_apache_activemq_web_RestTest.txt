1:9e32de2: /**
1:9e32de2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e32de2:  * contributor license agreements.  See the NOTICE file distributed with
1:9e32de2:  * this work for additional information regarding copyright ownership.
1:9e32de2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e32de2:  * (the "License"); you may not use this file except in compliance with
1:9e32de2:  * the License.  You may obtain a copy of the License at
1:9e32de2:  *
1:9e32de2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e32de2:  *
1:9e32de2:  * Unless required by applicable law or agreed to in writing, software
1:9e32de2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e32de2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e32de2:  * See the License for the specific language governing permissions and
1:9e32de2:  * limitations under the License.
1:9e32de2:  */
1:ce9f83c: package org.apache.activemq.web;
1:2b9c59c: 
1:f44c3d2: import static org.junit.Assert.assertEquals;
1:f44c3d2: import static org.junit.Assert.assertNotNull;
1:f44c3d2: import static org.junit.Assert.assertTrue;
1:f44c3d2: 
1:3c734ce: import java.util.Set;
1:f44c3d2: import java.util.concurrent.CountDownLatch;
1:f44c3d2: import java.util.concurrent.atomic.AtomicInteger;
1:2b9c59c: 
1:ce9f83c: import javax.jms.TextMessage;
1:3c734ce: import javax.management.ObjectName;
1:2b9c59c: 
1:f772e5f: import org.apache.commons.lang.RandomStringUtils;
1:ce9f83c: import org.eclipse.jetty.client.HttpClient;
1:f44c3d2: import org.eclipse.jetty.client.api.Result;
1:f44c3d2: import org.eclipse.jetty.client.util.BufferingResponseListener;
1:3c1b477: import org.eclipse.jetty.http.HttpFields;
1:f44c3d2: import org.eclipse.jetty.http.HttpMethod;
1:7504bc7: import org.eclipse.jetty.http.HttpStatus;
1:bdf7aa4: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:bdf7aa4: 
1:ce9f83c: public class RestTest extends JettyTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(RestTest.class);
1:3c734ce: 
1:bdf7aa4:     @Test(timeout = 60 * 1000)
1:ce9f83c:     public void testConsume() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:ce9f83c:         producer.send(session.createTextMessage("test"));
1:2b9c59c:         LOG.info("message sent");
1:2b9c59c: 
1:ce9f83c:         HttpClient httpClient = new HttpClient();
1:ce9f83c:         httpClient.start();
1:f44c3d2: 
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final CountDownLatch latch =
1:f44c3d2:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue", buf);
1:f44c3d2: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertEquals("test", buf.toString());
1:2b9c59c:     }
1:f44c3d2: 
1:bdf7aa4:     @Test(timeout = 60 * 1000)
1:2b9c59c:     public void testSubscribeFirst() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:2b9c59c:         HttpClient httpClient = new HttpClient();
1:2b9c59c:         httpClient.start();
1:bdf7aa4: 
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final CountDownLatch latch =
1:f44c3d2:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=5000&type=queue", buf);
1:f44c3d2: 
1:2b9c59c:         producer.send(session.createTextMessage("test"));
1:2b9c59c:         LOG.info("message sent");
1:3c734ce: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertEquals("test", buf.toString());
1:3c734ce: 
1:ce9f83c:     }
1:f772e5f: 
1:bdf7aa4:     @Test(timeout = 60 * 1000)
1:ce9f83c:     public void testSelector() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:ce9f83c:         TextMessage msg1 = session.createTextMessage("test1");
1:ce9f83c:         msg1.setIntProperty("test", 1);
1:ce9f83c:         producer.send(msg1);
1:2b9c59c:         LOG.info("message 1 sent");
1:ce9f83c: 
1:ce9f83c:         TextMessage msg2 = session.createTextMessage("test2");
1:ce9f83c:         msg2.setIntProperty("test", 2);
1:ce9f83c:         producer.send(msg2);
1:2b9c59c:         LOG.info("message 2 sent");
1:ce9f83c: 
1:ce9f83c:         HttpClient httpClient = new HttpClient();
1:ce9f83c:         httpClient.start();
1:ce9f83c: 
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue")
1:f44c3d2:             .header("selector", "test=2").send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2:         latch.await();
1:f44c3d2:         assertEquals("test2", buf.toString());
1:ce9f83c:     }
1:f44c3d2: 
1:ce9f83c: 
1:f772e5f:     // test for https://issues.apache.org/activemq/browse/AMQ-2827
1:df0c195:     @Test(timeout = 15 * 1000)
1:f772e5f:     public void testCorrelation() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:df0c195:         HttpClient httpClient = new HttpClient();
1:df0c195:         httpClient.start();
1:df0c195: 
1:f772e5f:         for (int i = 0; i < 200; i++) {
1:f772e5f:             String correlId = "RESTY" + RandomStringUtils.randomNumeric(10);
1:f772e5f: 
1:f772e5f:             TextMessage message = session.createTextMessage(correlId);
1:f772e5f:             message.setStringProperty("correlationId", correlId);
1:f772e5f:             message.setJMSCorrelationID(correlId);
1:f772e5f: 
1:f772e5f:             LOG.info("Sending: " + correlId);
1:f772e5f:             producer.send(message);
1:f772e5f: 
1:f44c3d2:             final StringBuffer buf = new StringBuffer();
1:f44c3d2:             final CountDownLatch latch =
1:f44c3d2:                     asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test", buf);
1:f44c3d2: 
1:f44c3d2:             latch.await();
1:f44c3d2:             LOG.info("Received: " +  buf.toString());
1:f44c3d2:            // assertEquals(200, contentExchange.getResponseStatus());
1:f44c3d2:             assertEquals(correlId,  buf.toString());
1:f772e5f:         }
1:c5cebd5:         httpClient.stop();
1:f772e5f:     }
1:f772e5f: 
1:df0c195:     @Test(timeout = 15 * 1000)
1:3c734ce:     public void testDisconnect() throws Exception {
1:c5cebd5:         int port = getPort();
1:3c734ce: 
1:3c734ce:         producer.send(session.createTextMessage("test"));
1:3c734ce:         HttpClient httpClient = new HttpClient();
1:3c734ce:         httpClient.start();
1:3c734ce: 
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final CountDownLatch latch =
1:f44c3d2:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test", buf);
1:3c734ce: 
1:f44c3d2:         latch.await();
1:f44c3d2:         LOG.info("Received: " + buf.toString());
1:f44c3d2: 
1:f44c3d2:         final StringBuffer buf2 = new StringBuffer();
1:f44c3d2:         final CountDownLatch latch2 = new CountDownLatch(1);
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/test?clientId=test&action=unsubscribe")
1:f44c3d2:             .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 buf2.append(getContentAsString());
1:f44c3d2:                 latch2.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2: 
1:f44c3d2:         latch2.await();
1:df0c195:         httpClient.stop();
1:3c734ce: 
1:3c734ce:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Subscription,destinationType=Queue,destinationName=test,*");
1:f3e9ec0:         Set<ObjectName> subs = broker.getManagementContext().queryNames(query, null);
1:3c734ce:         assertEquals("Consumers not closed", 0 , subs.size());
1:3c734ce:     }
1:3c734ce: 
1:df0c195:     @Test(timeout = 15 * 1000)
1:7504bc7:     public void testPost() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:f772e5f:         HttpClient httpClient = new HttpClient();
1:f772e5f:         httpClient.start();
1:ce9f83c: 
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final AtomicInteger status = new AtomicInteger();
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue")
1:f44c3d2:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2: 
1:f44c3d2: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:f44c3d2: 
1:f44c3d2:         final StringBuffer buf2 = new StringBuffer();
1:f44c3d2:         final AtomicInteger status2 = new AtomicInteger();
1:f44c3d2:         final CountDownLatch latch2 =
1:f44c3d2:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue", buf2, status2);
1:f44c3d2: 
1:f44c3d2:         latch2.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status2.get()));
1:f44c3d2:     }
1:ce9f83c: 
1:3c1b477:     // test for https://issues.apache.org/activemq/browse/AMQ-3857
1:df0c195:     @Test(timeout = 15 * 1000)
1:3c1b477:     public void testProperties() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:3c1b477:         HttpClient httpClient = new HttpClient();
1:3c1b477:         httpClient.start();
1:ce9f83c: 
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final AtomicInteger status = new AtomicInteger();
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue&property=value")
1:f44c3d2:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:ce9f83c: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:ce9f83c: 
1:f44c3d2:         final CountDownLatch latch2 = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf2 = new StringBuffer();
1:f44c3d2:         final AtomicInteger status2 = new AtomicInteger();
1:f44c3d2:         final HttpFields responseFields = new HttpFields();
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue")
1:f44c3d2:            .method(HttpMethod.GET).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 responseFields.add(result.getResponse().getHeaders());
1:f44c3d2:                 status2.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf2.append(getContentAsString());
1:f44c3d2:                 latch2.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2: 
1:f44c3d2:         latch2.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status2.get()));
1:f44c3d2: 
1:f44c3d2:         HttpFields fields = responseFields;
1:3c1b477:         assertNotNull("Headers Exist", fields);
1:3c1b477:         assertEquals("header value", "value", fields.getStringField("property"));
1:ce9f83c:     }
1:d4742f5: 
1:ce9f83c: 
1:df0c195:     @Test(timeout = 15 * 1000)
1:d4742f5:     public void testAuth() throws Exception {
1:c5cebd5:         int port = getPort();
1:c5cebd5: 
1:d4742f5:         HttpClient httpClient = new HttpClient();
1:d4742f5:         httpClient.start();
1:d4742f5: 
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final AtomicInteger status = new AtomicInteger();
1:f44c3d2:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue")
1:f44c3d2:             .header("Authorization", "Basic YWRtaW46YWRtaW4=")
1:f44c3d2:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2: 
1:f44c3d2: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:d4742f5:     }
4:3c1b477: 
1:f44c3d2:     protected CountDownLatch asyncRequest(final HttpClient httpClient, final String url, final StringBuffer buffer) {
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         httpClient.newRequest(url).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 buffer.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2:         return latch;
1:f44c3d2:     }
1:f44c3d2: 
1:f44c3d2:     protected CountDownLatch asyncRequest(final HttpClient httpClient, final String url, final StringBuffer buffer,
1:f44c3d2:             final AtomicInteger status) {
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         httpClient.newRequest(url).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buffer.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2:         return latch;
1:3c1b477:     }
1:7504bc7: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import org.eclipse.jetty.client.api.Result;
1: import org.eclipse.jetty.client.util.BufferingResponseListener;
1: import org.eclipse.jetty.http.HttpMethod;
/////////////////////////////////////////////////////////////////////////
1: 
1:         final StringBuffer buf = new StringBuffer();
1:         final CountDownLatch latch =
1:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue", buf);
1: 
1:         latch.await();
1:         assertEquals("test", buf.toString());
/////////////////////////////////////////////////////////////////////////
1:         final StringBuffer buf = new StringBuffer();
1:         final CountDownLatch latch =
1:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=5000&type=queue", buf);
1:         latch.await();
1:         assertEquals("test", buf.toString());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         final StringBuffer buf = new StringBuffer();
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         httpClient.newRequest("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue")
1:             .header("selector", "test=2").send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1:         latch.await();
1:         assertEquals("test2", buf.toString());
1: 
/////////////////////////////////////////////////////////////////////////
1:             final StringBuffer buf = new StringBuffer();
1:             final CountDownLatch latch =
1:                     asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test", buf);
1: 
1:             latch.await();
1:             LOG.info("Received: " +  buf.toString());
1:            // assertEquals(200, contentExchange.getResponseStatus());
1:             assertEquals(correlId,  buf.toString());
/////////////////////////////////////////////////////////////////////////
1:         final StringBuffer buf = new StringBuffer();
1:         final CountDownLatch latch =
1:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test", buf);
1:         latch.await();
1:         LOG.info("Received: " + buf.toString());
1: 
1:         final StringBuffer buf2 = new StringBuffer();
1:         final CountDownLatch latch2 = new CountDownLatch(1);
1:         httpClient.newRequest("http://localhost:" + port + "/message/test?clientId=test&action=unsubscribe")
1:             .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 buf2.append(getContentAsString());
1:                 latch2.countDown();
1:             }
1:         });
1: 
1:         latch2.await();
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final StringBuffer buf = new StringBuffer();
1:         final AtomicInteger status = new AtomicInteger();
1:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue")
1:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         latch.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1: 
1:         final StringBuffer buf2 = new StringBuffer();
1:         final AtomicInteger status2 = new AtomicInteger();
1:         final CountDownLatch latch2 =
1:                 asyncRequest(httpClient, "http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue", buf2, status2);
1: 
1:         latch2.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status2.get()));
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final StringBuffer buf = new StringBuffer();
1:         final AtomicInteger status = new AtomicInteger();
1:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue&property=value")
1:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1:         latch.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:         final CountDownLatch latch2 = new CountDownLatch(1);
1:         final StringBuffer buf2 = new StringBuffer();
1:         final AtomicInteger status2 = new AtomicInteger();
1:         final HttpFields responseFields = new HttpFields();
1:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue")
1:            .method(HttpMethod.GET).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 responseFields.add(result.getResponse().getHeaders());
1:                 status2.getAndSet(result.getResponse().getStatus());
1:                 buf2.append(getContentAsString());
1:                 latch2.countDown();
1:             }
1:         });
1: 
1:         latch2.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status2.get()));
1: 
1:         HttpFields fields = responseFields;
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final StringBuffer buf = new StringBuffer();
1:         final AtomicInteger status = new AtomicInteger();
1:         httpClient.newRequest("http://localhost:" + port + "/message/testPost?type=queue")
1:             .header("Authorization", "Basic YWRtaW46YWRtaW4=")
1:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1: 
1: 
1:         latch.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:     }
1: 
1:     protected CountDownLatch asyncRequest(final HttpClient httpClient, final String url, final StringBuffer buffer) {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         httpClient.newRequest(url).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 buffer.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1:         return latch;
1:     }
1: 
1:     protected CountDownLatch asyncRequest(final HttpClient httpClient, final String url, final StringBuffer buffer,
1:             final AtomicInteger status) {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         httpClient.newRequest(url).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buffer.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1:         return latch;
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:c5cebd5
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
/////////////////////////////////////////////////////////////////////////
0:         contentExchange.setURL("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
0:         contentExchange.setURL("http://localhost:" + port + "/message/test?readTimeout=5000&type=queue");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
/////////////////////////////////////////////////////////////////////////
0:         contentExchange.setURL("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
/////////////////////////////////////////////////////////////////////////
0:             contentExchange.setURL("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test");
1:         httpClient.stop();
1:         int port = getPort();
0:         contentExchange.setURL("http://localhost:" + port + "/message/test?readTimeout=1000&type=queue&clientId=test");
0:         contentExchange.setURL("http://localhost:" + port + "/message/test?clientId=test&action=unsubscribe");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
0:         contentExchange.setURL("http://localhost:" + port + "/message/testPost?type=queue");
0:         contentExchange2.setURL("http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
0:         contentExchange.setURL("http://localhost:" + port + "/message/testPost?type=queue&property=value");
0:         contentExchange2.setURL("http://localhost:" + port + "/message/testPost?readTimeout=1000&type=Queue");
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1: 
0:         contentExchange.setURL("http://localhost:" + port + "/message/testPost?type=queue");
commit:df0c195
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 15 * 1000)
1:         HttpClient httpClient = new HttpClient();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
1:         httpClient.start();
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     	httpClient.stop();
1:     @Test(timeout = 15 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 15 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 15 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 15 * 1000)
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bdf7aa4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
0: import static org.junit.Assert.*;
1: 
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Test(timeout = 60 * 1000)
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d4742f5
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testAuth() throws Exception {
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setMethod("POST");
0:         contentExchange.setURL("http://localhost:8080/message/testPost?type=queue");
0:         contentExchange.setRequestHeader("Authorization", "Basic YWRtaW46YWRtaW4=");
0:         httpClient.send(contentExchange);
1: 
0:         contentExchange.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange.getResponseStatus()));
1:     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(RestTest.class);
commit:3c734ce
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
0: import org.apache.activemq.broker.jmx.DestinationViewMBean;
0: import org.apache.activemq.broker.jmx.SubscriptionViewMBean;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testDisconnect() throws Exception {
1: 
1:         producer.send(session.createTextMessage("test"));
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setURL("http://localhost:8080/message/test?readTimeout=1000&type=queue&clientId=test");
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
0:         LOG.info("Received: [" + contentExchange.getResponseStatus() + "] " + contentExchange.getResponseContent());
1: 
0:         contentExchange = new ContentExchange();
0:         contentExchange.setMethod("POST");
0:         contentExchange.setURL("http://localhost:8080/message/test?clientId=test&action=unsubscribe");
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
1: 
0:         httpClient.stop();
1: 
1: 
1: 
0:         ObjectName name = new ObjectName("org.apache.activemq" + ":BrokerName=localhost,Type=Queue,Destination=test");
1:         ObjectName query = new ObjectName("org.apache.activemq:BrokerName=localhost,Type=Subscription,destinationType=Queue,destinationName=test,*");
0:         Set subs = broker.getManagementContext().queryNames(query, null);
1:         assertEquals("Consumers not closed", 0 , subs.size());
1:     }
1: 
commit:f772e5f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.lang.RandomStringUtils;
/////////////////////////////////////////////////////////////////////////
1: 	
1: 	// test for https://issues.apache.org/activemq/browse/AMQ-2827
1: 	public void testCorrelation() throws Exception {
1: 	    for (int i = 0; i < 200; i++) {
1:             String correlId = "RESTY" + RandomStringUtils.randomNumeric(10);
1:             
1:             TextMessage message = session.createTextMessage(correlId);
1:             message.setStringProperty("correlationId", correlId);
1:             message.setJMSCorrelationID(correlId);
1:             
1:             LOG.info("Sending: " + correlId);
1:             
1:             producer.send(message);
1:             
1:             HttpClient httpClient = new HttpClient();
1:             httpClient.start();
0:             ContentExchange contentExchange = new ContentExchange();
0:             httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:             contentExchange.setURL("http://localhost:8080/message/test?readTimeout=1000&type=queue&clientId=test");
0:             httpClient.send(contentExchange);
0:             contentExchange.waitForDone();
0:             LOG.info("Received: [" + contentExchange.getResponseStatus() + "] " + contentExchange.getResponseContent());
0:             assertEquals(200, contentExchange.getResponseStatus());
0:             assertEquals(correlId, contentExchange.getResponseContent());
1: 	    }
1: 	}
commit:9e32de2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b9c59c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(RestTest.class);
1: 	    LOG.info("message sent");
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("test", contentExchange.getResponseContent());	    
1: 	}
1: 	
1: 	public void testSubscribeFirst() throws Exception {
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setURL("http://localhost:8080/message/test?readTimeout=5000&type=queue");
0:         httpClient.send(contentExchange);
1:         
0:         Thread.sleep(1000);
1:         
1:         producer.send(session.createTextMessage("test"));
1:         LOG.info("message sent");
1:         
0:         contentExchange.waitForDone();
0:         assertEquals("test", contentExchange.getResponseContent());	    
1: 	    LOG.info("message 1 sent");
1: 	    LOG.info("message 2 sent");
commit:6e1d530
/////////////////////////////////////////////////////////////////////////
0:         contentExchange.setURL("http://localhost:8080/message/test?readTimeout=1000&type=queue");
/////////////////////////////////////////////////////////////////////////
0:         contentExchange.setURL("http://localhost:8080/message/test?readTimeout=1000&type=queue");
commit:a05e84e
/////////////////////////////////////////////////////////////////////////
0:         contentExchange.setRequestHeader("selector", "test=2");
commit:ce9f83c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.web;
1: 
1: import javax.jms.TextMessage;
1: 
0: import org.eclipse.jetty.client.ContentExchange;
1: import org.eclipse.jetty.client.HttpClient;
1: 
1: public class RestTest extends JettyTestSupport {
1: 	
1: 	public void testConsume() throws Exception {
1: 	    producer.send(session.createTextMessage("test"));
1: 	    
1: 	    HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setURL("http://localhost:8080/message/test?timeout=1000&type=queue");
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
0:         assertEquals("test", contentExchange.getResponseContent());
1: 	    
1: 	}
1: 	
1: 	public void testSelector() throws Exception {
1: 	    TextMessage msg1 = session.createTextMessage("test1");
1: 	    msg1.setIntProperty("test", 1);
1: 	    producer.send(msg1);
1: 	    
1: 	    TextMessage msg2 = session.createTextMessage("test2");
1: 	    msg2.setIntProperty("test", 2);
1: 	    producer.send(msg2);
1: 	    
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setURL("http://localhost:8080/message/test?timeout=1000&type=queue");
0:         contentExchange.setRequestHeader(WebClient.SELECTOR_NAME, "test=2");
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
0:         assertEquals("test2", contentExchange.getResponseContent());
1: 	}
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3c1b477
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.http.HttpFields;
/////////////////////////////////////////////////////////////////////////
1: 
1:     // test for https://issues.apache.org/activemq/browse/AMQ-3857
1:     public void testProperties() throws Exception {
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setMethod("POST");
0:         contentExchange.setURL("http://localhost:8080/message/testPost?type=queue&property=value");
0:         httpClient.send(contentExchange);
1: 
0:         contentExchange.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange.getResponseStatus()));
1: 
0:         ContentExchange contentExchange2 = new ContentExchange(true);
0:         contentExchange2.setURL("http://localhost:8080/message/testPost?readTimeout=1000&type=Queue");
0:         httpClient.send(contentExchange2);
0:         contentExchange2.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange2.getResponseStatus()));
1: 
0:         HttpFields fields = contentExchange2.getResponseFields();
1:         assertNotNull("Headers Exist", fields);
1:         assertEquals("header value", "value", fields.getStringField("property"));
1:     }
commit:7504bc7
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
0: 
1: import org.eclipse.jetty.http.HttpStatus;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0:     public void testConsume() throws Exception {
0:         producer.send(session.createTextMessage("test"));
0:         LOG.info("message sent");
0:         HttpClient httpClient = new HttpClient();
/////////////////////////////////////////////////////////////////////////
1:     }
0:     public void testSubscribeFirst() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     }
0:     public void testSelector() throws Exception {
0:         TextMessage msg1 = session.createTextMessage("test1");
0:         msg1.setIntProperty("test", 1);
0:         producer.send(msg1);
0:         LOG.info("message 1 sent");
0:         TextMessage msg2 = session.createTextMessage("test2");
0:         msg2.setIntProperty("test", 2);
0:         producer.send(msg2);
0:         LOG.info("message 2 sent");
/////////////////////////////////////////////////////////////////////////
0:     }
0:     // test for https://issues.apache.org/activemq/browse/AMQ-2827
0:     public void testCorrelation() throws Exception {
0:         for (int i = 0; i < 200; i++) {
/////////////////////////////////////////////////////////////////////////
0:         }
0:     }
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void testPost() throws Exception {
0:         HttpClient httpClient = new HttpClient();
0:         httpClient.start();
0:         ContentExchange contentExchange = new ContentExchange();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
0:         contentExchange.setMethod("POST");
0:         contentExchange.setURL("http://localhost:8080/message/testPost?type=queue");
0:         httpClient.send(contentExchange);
0: 
0:         contentExchange.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange.getResponseStatus()));
0: 
0:         ContentExchange contentExchange2 = new ContentExchange();
0:         contentExchange2.setURL("http://localhost:8080/message/testPost?readTimeout=1000&type=Queue");
0:         httpClient.send(contentExchange2);
0:         contentExchange2.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange2.getResponseStatus()));
0:     }
commit:f3e9ec0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("test", contentExchange.getResponseContent());
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0:         assertEquals("test", contentExchange.getResponseContent());
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         Set<ObjectName> subs = broker.getManagementContext().queryNames(query, null);
============================================================================