1:b20d541: /**
1:b20d541:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b20d541:  * contributor license agreements.  See the NOTICE file distributed with
1:b20d541:  * this work for additional information regarding copyright ownership.
1:b20d541:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b20d541:  * (the "License"); you may not use this file except in compliance with
1:b20d541:  * the License.  You may obtain a copy of the License at
1:b20d541:  *
1:b20d541:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b20d541:  *
1:b20d541:  * Unless required by applicable law or agreed to in writing, software
1:b20d541:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b20d541:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b20d541:  * See the License for the specific language governing permissions and
1:b20d541:  * limitations under the License.
1:b20d541:  */
2:b20d541: 
1:b20d541: package org.apache.activemq.leveldb;
1:25356f2: 
1:b20d541: import org.apache.activemq.broker.jmx.MBeanInfo;
1:b20d541: 
1:b20d541: import java.io.File;
1:b20d541: 
1:b20d541: /**
1:b20d541:  * <p>
1:b20d541:  * </p>
1:b20d541:  *
1:b20d541:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:b20d541:  */
1:b20d541: public interface LevelDBStoreViewMBean {
1:b20d541: 
1:b20d541:     @MBeanInfo("The directory holding the store index data.")
1:b20d541:     String getIndexDirectory();
1:b20d541: 
1:b20d541:     @MBeanInfo("The directory holding the store log data.")
1:b20d541:     String getLogDirectory();
1:b20d541: 
1:b20d541:     @MBeanInfo("The size the log files are allowed to grow to.")
1:b20d541:     long getLogSize();
1:b20d541: 
1:b20d541:     @MBeanInfo("The implementation of the LevelDB index being used.")
1:b20d541:     String getIndexFactory();
1:b20d541: 
1:b20d541:     @MBeanInfo("Are writes synced to disk.")
1:b20d541:     boolean getSync();
1:b20d541: 
1:b20d541:     @MBeanInfo("Is data verified against checksums as it's loaded back from disk.")
1:b20d541:     boolean getVerifyChecksums();
1:b20d541: 
1:b20d541:     @MBeanInfo("The maximum number of open files the index will open at one time.")
1:b20d541:     int getIndexMaxOpenFiles();
1:b20d541: 
1:b20d541:     @MBeanInfo("Number of keys between restart points for delta encoding of keys in the index")
1:b20d541:     int getIndexBlockRestartInterval();
1:b20d541: 
1:b20d541:     @MBeanInfo("Do aggressive checking of store data")
1:b20d541:     boolean getParanoidChecks();
1:b20d541: 
1:b20d541:     @MBeanInfo("Amount of data to build up in memory for the index before converting to a sorted on-disk file.")
1:b20d541:     int getIndexWriteBufferSize();
1:b20d541: 
1:b20d541:     @MBeanInfo("Approximate size of user data packed per block for the index")
1:b20d541:     int getIndexBlockSize();
1:b20d541: 
1:b20d541:     @MBeanInfo("The type of compression to use for the index")
1:b20d541:     String getIndexCompression();
1:b20d541: 
1:b20d541:     @MBeanInfo("The size of the cache index")
1:b20d541:     long getIndexCacheSize();
1:b20d541: 
1:b20d541:     @MBeanInfo("The maximum amount of async writes to buffer up")
1:b20d541:     int getAsyncBufferSize();
1:b20d541: 
1:b20d541:     @MBeanInfo("The number of units of work which have been closed.")
1:b20d541:     long getUowClosedCounter();
1:b20d541:     @MBeanInfo("The number of units of work which have been canceled.")
1:b20d541:     long getUowCanceledCounter();
1:b20d541:     @MBeanInfo("The number of units of work which started getting stored.")
1:b20d541:     long getUowStoringCounter();
1:b20d541:     @MBeanInfo("The number of units of work which completed getting stored")
1:b20d541:     long getUowStoredCounter();
1:b20d541: 
1:b20d541:     @MBeanInfo("Gets and resets the maximum time (in ms) a unit of work took to complete.")
1:b20d541:     double resetUowMaxCompleteLatency();
1:b20d541:     @MBeanInfo("Gets and resets the maximum time (in ms) an index write batch took to execute.")
1:b20d541:     double resetMaxIndexWriteLatency();
1:b20d541:     @MBeanInfo("Gets and resets the maximum time (in ms) a log write took to execute (includes the index write latency).")
1:b20d541:     double resetMaxLogWriteLatency();
1:b20d541:     @MBeanInfo("Gets and resets the maximum time (in ms) a log flush took to execute.")
1:b20d541:     double resetMaxLogFlushLatency();
1:b20d541:     @MBeanInfo("Gets and resets the maximum time (in ms) a log rotation took to perform.")
1:b20d541:     double resetMaxLogRotateLatency();
1:b20d541: 
1:b20d541:     @MBeanInfo("Gets the maximum time (in ms) a unit of work took to complete.")
1:b20d541:     double getUowMaxCompleteLatency();
1:b20d541:     @MBeanInfo("Gets the maximum time (in ms) an index write batch took to execute.")
1:b20d541:     double getMaxIndexWriteLatency();
1:b20d541:     @MBeanInfo("Gets the maximum time (in ms) a log write took to execute (includes the index write latency).")
1:b20d541:     double getMaxLogWriteLatency();
1:b20d541:     @MBeanInfo("Gets the maximum time (in ms) a log flush took to execute.")
1:b20d541:     double getMaxLogFlushLatency();
1:b20d541:     @MBeanInfo("Gets the maximum time (in ms) a log rotation took to perform.")
1:b20d541:     double getMaxLogRotateLatency();
1:b20d541: 
1:b20d541:     @MBeanInfo("Gets the index statistics.")
1:b20d541:     String getIndexStats();
1:25356f2: 
1:25356f2:     @MBeanInfo("Compacts disk usage")
1:25356f2:     void compact();
1:75245da: 
1:b20d541: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b41121e
/////////////////////////////////////////////////////////////////////////
commit:75245da
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Are delayed index updates occurring?")
0:     boolean getDelayedIndexUpdates();
1: 
commit:25356f2
/////////////////////////////////////////////////////////////////////////
1: 
1:     @MBeanInfo("Compacts disk usage")
1:     void compact();
1: 
commit:bfbe90b
commit:b20d541
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.leveldb;
1: 
1: import org.apache.activemq.broker.jmx.MBeanInfo;
1: 
1: import java.io.File;
1: 
1: /**
1:  * <p>
1:  * </p>
1:  *
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public interface LevelDBStoreViewMBean {
1: 
1:     @MBeanInfo("The directory holding the store index data.")
1:     String getIndexDirectory();
1: 
1:     @MBeanInfo("The directory holding the store log data.")
1:     String getLogDirectory();
1: 
1:     @MBeanInfo("The size the log files are allowed to grow to.")
1:     long getLogSize();
1: 
1:     @MBeanInfo("The implementation of the LevelDB index being used.")
1:     String getIndexFactory();
1: 
1:     @MBeanInfo("Are writes synced to disk.")
1:     boolean getSync();
1: 
1:     @MBeanInfo("Is data verified against checksums as it's loaded back from disk.")
1:     boolean getVerifyChecksums();
1: 
1:     @MBeanInfo("The maximum number of open files the index will open at one time.")
1:     int getIndexMaxOpenFiles();
1: 
1:     @MBeanInfo("Number of keys between restart points for delta encoding of keys in the index")
1:     int getIndexBlockRestartInterval();
1: 
1:     @MBeanInfo("Do aggressive checking of store data")
1:     boolean getParanoidChecks();
1: 
1:     @MBeanInfo("Amount of data to build up in memory for the index before converting to a sorted on-disk file.")
1:     int getIndexWriteBufferSize();
1: 
1:     @MBeanInfo("Approximate size of user data packed per block for the index")
1:     int getIndexBlockSize();
1: 
1:     @MBeanInfo("The type of compression to use for the index")
1:     String getIndexCompression();
1: 
1:     @MBeanInfo("The size of the cache index")
1:     long getIndexCacheSize();
1: 
1:     @MBeanInfo("The maximum amount of async writes to buffer up")
1:     int getAsyncBufferSize();
1: 
1:     @MBeanInfo("The number of units of work which have been closed.")
1:     long getUowClosedCounter();
1:     @MBeanInfo("The number of units of work which have been canceled.")
1:     long getUowCanceledCounter();
1:     @MBeanInfo("The number of units of work which started getting stored.")
1:     long getUowStoringCounter();
1:     @MBeanInfo("The number of units of work which completed getting stored")
1:     long getUowStoredCounter();
1: 
1:     @MBeanInfo("Gets and resets the maximum time (in ms) a unit of work took to complete.")
1:     double resetUowMaxCompleteLatency();
1:     @MBeanInfo("Gets and resets the maximum time (in ms) an index write batch took to execute.")
1:     double resetMaxIndexWriteLatency();
1:     @MBeanInfo("Gets and resets the maximum time (in ms) a log write took to execute (includes the index write latency).")
1:     double resetMaxLogWriteLatency();
1:     @MBeanInfo("Gets and resets the maximum time (in ms) a log flush took to execute.")
1:     double resetMaxLogFlushLatency();
1:     @MBeanInfo("Gets and resets the maximum time (in ms) a log rotation took to perform.")
1:     double resetMaxLogRotateLatency();
1: 
1:     @MBeanInfo("Gets the maximum time (in ms) a unit of work took to complete.")
1:     double getUowMaxCompleteLatency();
1:     @MBeanInfo("Gets the maximum time (in ms) an index write batch took to execute.")
1:     double getMaxIndexWriteLatency();
1:     @MBeanInfo("Gets the maximum time (in ms) a log write took to execute (includes the index write latency).")
1:     double getMaxLogWriteLatency();
1:     @MBeanInfo("Gets the maximum time (in ms) a log flush took to execute.")
1:     double getMaxLogFlushLatency();
1:     @MBeanInfo("Gets the maximum time (in ms) a log rotation took to perform.")
1:     double getMaxLogRotateLatency();
1: 
1:     @MBeanInfo("Gets the index statistics.")
1:     String getIndexStats();
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f5360a7
============================================================================