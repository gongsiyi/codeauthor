1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.thread;
1:230a86c: 
1:18300c6: import static org.junit.Assert.assertTrue;
1:18300c6: 
1:86cbdfd: import java.util.concurrent.BrokenBarrierException;
1:86cbdfd: import java.util.concurrent.CountDownLatch;
1:230a86c: import java.util.concurrent.CyclicBarrier;
1:86cbdfd: import java.util.concurrent.TimeUnit;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:fc00993: 
1:18300c6: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:18300c6: public class TaskRunnerTest {
1:18300c6: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TaskRunnerTest.class);
1:230a86c: 
1:18300c6:     @Test
1:e2aad41:     public void testWakeupPooled() throws InterruptedException, BrokenBarrierException {
1:e2aad41:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "false");
1:e2aad41:         doTestWakeup();
1:e2aad41:     }
1:230a86c: 
1:18300c6:     @Test
1:e2aad41:     public void testWakeupDedicated() throws InterruptedException, BrokenBarrierException {
1:e2aad41:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "true");
1:e2aad41:         doTestWakeup();
1:e2aad41:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * Simulate multiple threads queuing work for the TaskRunner. The Task
1:230a86c:      * Runner dequeues the work.
1:18300c6:      *
1:d29ca2a:      * @throws InterruptedException
1:230a86c:      * @throws BrokenBarrierException
1:d29ca2a:      */
1:e2aad41:     public void doTestWakeup() throws InterruptedException, BrokenBarrierException {
1:230a86c: 
1:fc00993:         final int enqueueCount = 100000;
1:d29ca2a:         final AtomicInteger iterations = new AtomicInteger(0);
1:d29ca2a:         final AtomicInteger counter = new AtomicInteger(0);
1:d29ca2a:         final AtomicInteger queue = new AtomicInteger(0);
1:d29ca2a:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
1:230a86c: 
1:230a86c:         TaskRunnerFactory factory = new TaskRunnerFactory();
1:230a86c:         final TaskRunner runner = factory.createTaskRunner(new Task() {
1:18300c6:             @Override
1:d29ca2a:             public boolean iterate() {
1:230a86c:                 if (queue.get() == 0) {
1:d29ca2a:                     return false;
1:d29ca2a:                 } else {
1:230a86c:                     while (queue.get() > 0) {
1:d29ca2a:                         queue.decrementAndGet();
1:d29ca2a:                         counter.incrementAndGet();
4:d29ca2a:                     }
1:d29ca2a:                     iterations.incrementAndGet();
1:fc00993:                     if (counter.get() == enqueueCount) {
1:d29ca2a:                         doneCountDownLatch.countDown();
1:fc00993:                     }
1:d29ca2a:                     return true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:e2aad41:         }, "Thread Name");
1:230a86c: 
1:d29ca2a:         long start = System.currentTimeMillis();
1:fc00993:         final int workerCount = 5;
1:fc00993:         final CyclicBarrier barrier = new CyclicBarrier(workerCount + 1);
1:fc00993:         for (int i = 0; i < workerCount; i++) {
1:d29ca2a:             new Thread() {
1:18300c6:                 @Override
1:d29ca2a:                 public void run() {
1:d29ca2a:                     try {
1:d29ca2a:                         barrier.await();
1:fc00993:                         for (int i = 0; i < enqueueCount / workerCount; i++) {
1:d29ca2a:                             queue.incrementAndGet();
1:d29ca2a:                             runner.wakeup();
1:d29ca2a:                             yield();
1:d29ca2a:                         }
1:230a86c:                     } catch (BrokenBarrierException e) {
1:230a86c:                     } catch (InterruptedException e) {
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }.start();
1:d29ca2a:         }
1:d29ca2a:         barrier.await();
1:230a86c: 
1:d29ca2a:         boolean b = doneCountDownLatch.await(30, TimeUnit.SECONDS);
1:d29ca2a:         long end = System.currentTimeMillis();
1:fc00993:         LOG.info("Iterations: " + iterations.get());
1:fc00993:         LOG.info("counter: " + counter.get());
1:fc00993:         LOG.info("Dequeues/s: " + (1000.0 * enqueueCount / (end - start)));
1:fc00993:         LOG.info("duration: " + ((end - start) / 1000.0));
1:d29ca2a:         assertTrue(b);
1:230a86c: 
1:e2aad41:         runner.shutdown();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.junit.Test;
1: public class TaskRunnerTest {
1: 
1:     @Test
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a6ebc8d
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TaskRunnerTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.TopicClusterTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(TaskRunnerTest.class);
/////////////////////////////////////////////////////////////////////////
1:         final int enqueueCount = 100000;
/////////////////////////////////////////////////////////////////////////
1:                     if (counter.get() == enqueueCount) {
1:                     }
1:         final int workerCount = 5;
1:         final CyclicBarrier barrier = new CyclicBarrier(workerCount + 1);
1:         for (int i = 0; i < workerCount; i++) {
1:                         for (int i = 0; i < enqueueCount / workerCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Iterations: " + iterations.get());
1:         LOG.info("counter: " + counter.get());
1:         LOG.info("Dequeues/s: " + (1000.0 * enqueueCount / (end - start)));
1:         LOG.info("duration: " + ((end - start) / 1000.0));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CyclicBarrier;
0: import junit.framework.TestCase;
0: public class TaskRunnerTest extends TestCase {
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(TaskRunnerTest.class);
1: 
1: 
1: 
1:      * Simulate multiple threads queuing work for the TaskRunner. The Task
1:      * Runner dequeues the work.
1:      * @throws BrokenBarrierException
1: 
1: 
1:         TaskRunnerFactory factory = new TaskRunnerFactory();
1:         final TaskRunner runner = factory.createTaskRunner(new Task() {
1:                 if (queue.get() == 0) {
1:                     while (queue.get() > 0) {
0:                     if (counter.get() == ENQUEUE_COUNT)
1: 
0:         final int WORKER_COUNT = 5;
0:         final CyclicBarrier barrier = new CyclicBarrier(WORKER_COUNT + 1);
0:         for (int i = 0; i < WORKER_COUNT; i++) {
0:                         for (int i = 0; i < ENQUEUE_COUNT / WORKER_COUNT; i++) {
1:                     } catch (BrokenBarrierException e) {
1:                     } catch (InterruptedException e) {
1: 
0:         log.info("Iterations: " + iterations.get());
0:         log.info("counter: " + counter.get());
0:         log.info("Dequeues/s: " + (1000.0 * ENQUEUE_COUNT / (end - start)));
0:         log.info("duration: " + ((end - start) / 1000.0));
1: 
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.BrokenBarrierException;
0: import java.util.concurrent.CyclicBarrier;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testWakeupPooled() throws InterruptedException, BrokenBarrierException {
1:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "false");
1:         doTestWakeup();
1:     }
0:     
1:     public void testWakeupDedicated() throws InterruptedException, BrokenBarrierException {
1:         System.setProperty("org.apache.activemq.UseDedicatedTaskRunner", "true");
1:         doTestWakeup();
1:     }
0:     
/////////////////////////////////////////////////////////////////////////
1:     public void doTestWakeup() throws InterruptedException, BrokenBarrierException {
/////////////////////////////////////////////////////////////////////////
1:         }, "Thread Name");
/////////////////////////////////////////////////////////////////////////
0:         
1:         runner.shutdown();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
0: 
0: import org.apache.activemq.thread.Task;
0: import org.apache.activemq.thread.TaskRunner;
0: import org.apache.activemq.thread.TaskRunnerFactory;
0: 
0: import junit.framework.TestCase;
0: import edu.emory.mathcs.backport.java.util.concurrent.BrokenBarrierException;
0: import edu.emory.mathcs.backport.java.util.concurrent.CyclicBarrier;
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: 
0: public class TaskRunnerTest extends TestCase {
0:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(TaskRunnerTest.class);
0: 
1:     /**
0:      * Simulate multiple threads queuing work for the
0:      * TaskRunner.  The Task Runner dequeues the 
0:      * work. 
1:      * 
1:      * @throws InterruptedException
0:      * @throws BrokenBarrierException 
1:      */
0:     public void testWakeup() throws InterruptedException, BrokenBarrierException {
0:         
1:         final AtomicInteger iterations = new AtomicInteger(0);
1:         final AtomicInteger counter = new AtomicInteger(0);
1:         final AtomicInteger queue = new AtomicInteger(0);
1:         final CountDownLatch doneCountDownLatch = new CountDownLatch(1);
0:         final int ENQUEUE_COUNT = 100000;
0:         
0:         TaskRunnerFactory factory = new TaskRunnerFactory();        
0:         final TaskRunner runner = factory.createTaskRunner(new Task() {            
1:             public boolean iterate() {
0:                 if( queue.get()==0 ) {
1:                     return false;
1:                 } else {
0:                     while(queue.get()>0) {
1:                         queue.decrementAndGet();
1:                         counter.incrementAndGet();
1:                     }
1:                     iterations.incrementAndGet();
0:                     if (counter.get()==ENQUEUE_COUNT)
1:                         doneCountDownLatch.countDown();
1:                     return true;
1:                 }
1:             }
0:         });
0:         
1:         long start = System.currentTimeMillis();
0:         final int WORKER_COUNT=5;
0:         final CyclicBarrier barrier = new CyclicBarrier(WORKER_COUNT+1);
0:         for( int i=0; i< WORKER_COUNT; i++ ) {
1:             new Thread() {
1:                 public void run() {
1:                     try {
1:                         barrier.await();
0:                         for( int i=0; i < ENQUEUE_COUNT/WORKER_COUNT; i++ ) {
1:                             queue.incrementAndGet();
1:                             runner.wakeup();
1:                             yield();
1:                         }
1:                     }
0:                     catch (BrokenBarrierException e) {
1:                     }
0:                     catch (InterruptedException e) {
1:                     }        
1:                 }
1:             }.start();
1:         }
1:         barrier.await();
0:         
1:         boolean b = doneCountDownLatch.await(30, TimeUnit.SECONDS);
1:         long end = System.currentTimeMillis();
0:         log.info("Iterations: "+iterations.get());
0:         log.info("counter: "+counter.get());
0:         log.info("Dequeues/s: "+(1000.0*ENQUEUE_COUNT/(end-start)));
0:         log.info("duration: "+((end-start)/1000.0));
1:         assertTrue(b);
1:     }
0:     
0:     
0:     
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(TaskRunnerTest.class);
1:     }
0: 
1: }
============================================================================