2:8b3761c: /**
1:8b3761c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8b3761c:  * contributor license agreements.  See the NOTICE file distributed with
1:8b3761c:  * this work for additional information regarding copyright ownership.
1:8b3761c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8b3761c:  * (the "License"); you may not use this file except in compliance with
1:8b3761c:  * the License.  You may obtain a copy of the License at
1:8b3761c:  *
1:8b3761c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b3761c:  *
1:8b3761c:  * Unless required by applicable law or agreed to in writing, software
1:8b3761c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b3761c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b3761c:  * See the License for the specific language governing permissions and
1:8b3761c:  * limitations under the License.
2:8b3761c:  */
1:8b3761c: package org.apache.activemq.security;
1:8b3761c: 
1:8b3761c: import java.util.concurrent.CopyOnWriteArrayList;
1:8b3761c: 
1:8b3761c: import org.apache.activemq.broker.Broker;
1:8b3761c: import org.apache.activemq.broker.BrokerFilter;
1:8b3761c: import org.apache.activemq.broker.ConnectionContext;
1:8b3761c: import org.apache.activemq.command.ActiveMQDestination;
1:8b3761c: import org.apache.activemq.command.ConnectionInfo;
1:8b3761c: 
1:67ccfca: public abstract class AbstractAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
1:8b3761c: 
1:8b3761c:     protected final CopyOnWriteArrayList<SecurityContext> securityContexts =
1:8b3761c:         new CopyOnWriteArrayList<SecurityContext>();
1:8b3761c: 
1:8b3761c:     public AbstractAuthenticationBroker(Broker next) {
1:8b3761c:         super(next);
1:8b3761c:     }
1:8b3761c: 
1:8b3761c:     @Override
1:8b3761c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:8b3761c:         next.removeDestination(context, destination, timeout);
1:8b3761c: 
1:8b3761c:         for (SecurityContext sc : securityContexts) {
1:8b3761c:             sc.getAuthorizedWriteDests().remove(destination);
1:8b3761c:         }
1:8b3761c:     }
1:8b3761c: 
1:8b3761c:     @Override
1:8b3761c:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:8b3761c:         super.removeConnection(context, info, error);
1:8b3761c:         if (securityContexts.remove(context.getSecurityContext())) {
1:8b3761c:             context.setSecurityContext(null);
1:8b3761c:         }
1:8b3761c:     }
1:8b3761c: 
1:8b3761c:     public void refresh() {
1:8b3761c:         for (SecurityContext sc : securityContexts) {
1:8b3761c:             sc.getAuthorizedWriteDests().clear();
1:8b3761c:         }
1:8b3761c:     }
1:8b3761c: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5f8a3df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractAuthenticationBroker extends BrokerFilter implements AuthenticationBroker {
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b3761c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: 
0: public class AbstractAuthenticationBroker extends BrokerFilter {
1: 
1:     protected final CopyOnWriteArrayList<SecurityContext> securityContexts =
1:         new CopyOnWriteArrayList<SecurityContext>();
1: 
1:     public AbstractAuthenticationBroker(Broker next) {
1:         super(next);
1:     }
1: 
1:     @Override
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         next.removeDestination(context, destination, timeout);
1: 
1:         for (SecurityContext sc : securityContexts) {
0:             sc.getAuthorizedReadDests().remove(destination);
1:             sc.getAuthorizedWriteDests().remove(destination);
1:         }
1:     }
1: 
1:     @Override
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         super.removeConnection(context, info, error);
1:         if (securityContexts.remove(context.getSecurityContext())) {
1:             context.setSecurityContext(null);
1:         }
1:     }
1: 
1:     /**
0:      * Previously logged in users may no longer have the same access anymore.
0:      * Refresh all the logged into users.
1:      */
1:     public void refresh() {
1:         for (SecurityContext sc : securityContexts) {
0:             sc.getAuthorizedReadDests().clear();
1:             sc.getAuthorizedWriteDests().clear();
1:         }
1:     }
1: }
============================================================================