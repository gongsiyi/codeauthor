1:679db08: /**
1:679db08:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:679db08:  * contributor license agreements.  See the NOTICE file distributed with
1:679db08:  * this work for additional information regarding copyright ownership.
1:679db08:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:679db08:  * (the "License"); you may not use this file except in compliance with
1:679db08:  * the License.  You may obtain a copy of the License at
1:679db08:  *
1:679db08:  *      http://www.apache.org/licenses/LICENSE-2.0
1:679db08:  *
1:679db08:  * Unless required by applicable law or agreed to in writing, software
1:679db08:  * distributed under the License is distributed on an "AS IS" BASIS,
1:679db08:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:679db08:  * See the License for the specific language governing permissions and
1:679db08:  * limitations under the License.
1:679db08:  */
1:679db08: package org.apache.activemq.broker.virtual;
1:679db08: 
1:679db08: import org.apache.activemq.broker.BrokerService;
1:679db08: import org.apache.activemq.broker.region.DestinationInterceptor;
1:679db08: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:679db08: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:679db08: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:679db08: import org.apache.activemq.command.ActiveMQQueue;
1:679db08: import org.apache.activemq.command.ActiveMQTopic;
1:679db08: import org.apache.activemq.ActiveMQConnectionFactory;
1:679db08: import org.apache.activemq.spring.ConsumerBean;
1:679db08: import org.apache.activemq.util.Wait;
1:679db08: import org.junit.After;
1:679db08: import org.junit.Before;
1:679db08: import org.junit.Test;
1:679db08: import org.slf4j.Logger;
1:679db08: import org.slf4j.LoggerFactory;
1:679db08: 
1:679db08: import javax.jms.Connection;
1:679db08: import javax.jms.Destination;
1:679db08: import javax.jms.JMSException;
1:679db08: import javax.jms.Message;
1:679db08: import javax.jms.MessageConsumer;
1:679db08: import javax.jms.MessageProducer;
1:679db08: import javax.jms.Session;
1:679db08: 
1:679db08: import static junit.framework.TestCase.assertEquals;
1:679db08: import static junit.framework.TestCase.assertNotNull;
1:679db08: import static org.junit.Assert.assertTrue;
1:679db08: 
1:679db08: // https://issues.apache.org/jira/browse/AMQ-6643
1:679db08: public class VirtualTopicWildcardTest {
1:679db08:     
1:679db08:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicWildcardTest.class);
1:679db08: 
1:679db08:     protected int total = 3;
1:679db08:     protected Connection connection;
1:679db08:     BrokerService brokerService;
1:679db08: 
1:679db08:     @Before
1:679db08:     public void init() throws Exception {
1:679db08:         brokerService = createBroker();
1:679db08:         brokerService.start();
1:679db08:         connection = createConnection();
1:679db08:         connection.start();
1:679db08:     }
1:679db08: 
1:679db08:     @After
1:679db08:     public void afer() throws Exception {
1:679db08:         connection.close();
1:679db08:         brokerService.stop();
1:679db08:     }
1:679db08: 
1:679db08:     @Test
1:679db08:     public void testWildcardAndSimpleConsumerShareMessages() throws Exception {
1:679db08: 
1:8b06488:         ConsumerBean messageList1 = new ConsumerBean("1:");
1:8b06488:         ConsumerBean messageList2 = new ConsumerBean("2:");
1:8b06488:         ConsumerBean messageList3 = new ConsumerBean("3:");
1:679db08: 
1:679db08:         messageList1.setVerbose(true);
1:679db08:         messageList2.setVerbose(true);
1:679db08:         messageList3.setVerbose(true);
1:679db08: 
1:679db08:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:679db08: 
1:679db08:         Destination producerDestination = new ActiveMQTopic("VirtualTopic.TEST.A.IT");
1:679db08:         Destination destination1 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.>");
1:679db08:         Destination destination2 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.A.IT");
1:679db08:         Destination destination3 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.B.IT");
1:679db08: 
1:679db08:         LOG.info("Sending to: " + producerDestination);
1:679db08:         LOG.info("Consuming from: " + destination1 + " and " + destination2 + ", and " + destination3);
1:679db08: 
1:679db08:         MessageConsumer c1 = session.createConsumer(destination1, null);
1:679db08:         MessageConsumer c2 = session.createConsumer(destination2, null);
1:679db08:         // this consumer should get no messages
1:679db08:         MessageConsumer c3 = session.createConsumer(destination3, null);
1:679db08: 
1:679db08:         c1.setMessageListener(messageList1);
1:679db08:         c2.setMessageListener(messageList2);
1:679db08:         c3.setMessageListener(messageList3);
1:679db08: 
1:679db08:         // create topic producer
1:679db08:         MessageProducer producer = session.createProducer(producerDestination);
1:679db08:         assertNotNull(producer);
1:679db08: 
1:679db08:         for (int i = 0; i < total; i++) {
1:679db08:             producer.send(createMessage(session, i));
1:679db08:         }
1:679db08: 
1:679db08:         assertMessagesArrived(messageList1, messageList2);
1:679db08:         assertEquals(0, messageList3.getMessages().size());
1:679db08: 
1:679db08:     }
1:679db08: 
1:679db08:     private Message createMessage(Session session, int i) throws JMSException {
1:679db08:         return session.createTextMessage("val=" + i);
1:679db08:     }
1:679db08: 
1:679db08:     private Connection createConnection() throws Exception {
1:679db08:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:679db08:         cf.setWatchTopicAdvisories(false);
1:679db08:         return cf.createConnection();
1:679db08:     }
1:679db08: 
1:8b06488:     protected void assertMessagesArrived(final ConsumerBean messageList1, final ConsumerBean messageList2) {
1:679db08:         try {
1:679db08:             assertTrue("expected", Wait.waitFor(new Wait.Condition() {
1:679db08:                 @Override
1:679db08:                 public boolean isSatisified() throws Exception {
1:679db08:                     LOG.info("One: " + messageList1.getMessages().size() + ", Two:" + messageList2.getMessages().size());
1:679db08:                     return messageList1.getMessages().size() + messageList2.getMessages().size() == 2 * total;
1:679db08:                 }
1:679db08:             }));
1:679db08:         } catch (Exception e) {
1:679db08:             throw new RuntimeException(e);
1:679db08:         }
1:679db08:     }
1:679db08: 
1:679db08:     protected BrokerService createBroker() throws Exception {
1:679db08: 
1:679db08:         BrokerService broker = new BrokerService();
1:679db08:         broker.setAdvisorySupport(false);
1:679db08:         broker.setPersistent(false);
1:679db08: 
1:679db08:         VirtualTopic virtualTopic = new VirtualTopic();
1:679db08:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:679db08:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});
1:679db08:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:679db08:         return broker;
1:679db08:     }
1:679db08: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8b06488
/////////////////////////////////////////////////////////////////////////
1:         ConsumerBean messageList1 = new ConsumerBean("1:");
1:         ConsumerBean messageList2 = new ConsumerBean("2:");
1:         ConsumerBean messageList3 = new ConsumerBean("3:");
/////////////////////////////////////////////////////////////////////////
1:     protected void assertMessagesArrived(final ConsumerBean messageList1, final ConsumerBean messageList2) {
commit:2a2cb39
/////////////////////////////////////////////////////////////////////////
0:         final ConsumerBean messageList1 = new ConsumerBean("1:");
0:         final ConsumerBean messageList2 = new ConsumerBean("2:");
0:         final ConsumerBean messageList3 = new ConsumerBean("3:");
commit:679db08
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.spring.ConsumerBean;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import static junit.framework.TestCase.assertEquals;
1: import static junit.framework.TestCase.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: // https://issues.apache.org/jira/browse/AMQ-6643
1: public class VirtualTopicWildcardTest {
1:     
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicWildcardTest.class);
1: 
1:     protected int total = 3;
1:     protected Connection connection;
1:     BrokerService brokerService;
1: 
1:     @Before
1:     public void init() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:         connection = createConnection();
1:         connection.start();
1:     }
1: 
1:     @After
1:     public void afer() throws Exception {
1:         connection.close();
1:         brokerService.stop();
1:     }
1: 
1:     @Test
1:     public void testWildcardAndSimpleConsumerShareMessages() throws Exception {
1: 
0:         ConsumerBean messageList1 = new ConsumerBean("1:");
0:         ConsumerBean messageList2 = new ConsumerBean("2:");
0:         ConsumerBean messageList3 = new ConsumerBean("3:");
1: 
1:         messageList1.setVerbose(true);
1:         messageList2.setVerbose(true);
1:         messageList3.setVerbose(true);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Destination producerDestination = new ActiveMQTopic("VirtualTopic.TEST.A.IT");
1:         Destination destination1 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.>");
1:         Destination destination2 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.A.IT");
1:         Destination destination3 = new ActiveMQQueue("Consumer.1.VirtualTopic.TEST.B.IT");
1: 
1:         LOG.info("Sending to: " + producerDestination);
1:         LOG.info("Consuming from: " + destination1 + " and " + destination2 + ", and " + destination3);
1: 
1:         MessageConsumer c1 = session.createConsumer(destination1, null);
1:         MessageConsumer c2 = session.createConsumer(destination2, null);
1:         // this consumer should get no messages
1:         MessageConsumer c3 = session.createConsumer(destination3, null);
1: 
1:         c1.setMessageListener(messageList1);
1:         c2.setMessageListener(messageList2);
1:         c3.setMessageListener(messageList3);
1: 
1:         // create topic producer
1:         MessageProducer producer = session.createProducer(producerDestination);
1:         assertNotNull(producer);
1: 
1:         for (int i = 0; i < total; i++) {
1:             producer.send(createMessage(session, i));
1:         }
1: 
1:         assertMessagesArrived(messageList1, messageList2);
1:         assertEquals(0, messageList3.getMessages().size());
1: 
1:     }
1: 
1:     private Message createMessage(Session session, int i) throws JMSException {
1:         return session.createTextMessage("val=" + i);
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:         cf.setWatchTopicAdvisories(false);
1:         return cf.createConnection();
1:     }
1: 
0:     protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {
1:         try {
1:             assertTrue("expected", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     LOG.info("One: " + messageList1.getMessages().size() + ", Two:" + messageList2.getMessages().size());
1:                     return messageList1.getMessages().size() + messageList2.getMessages().size() == 2 * total;
1:                 }
1:             }));
1:         } catch (Exception e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setAdvisorySupport(false);
1:         broker.setPersistent(false);
1: 
1:         VirtualTopic virtualTopic = new VirtualTopic();
1:         VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:         interceptor.setVirtualDestinations(new VirtualDestination[]{virtualTopic});
1:         broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:         return broker;
1:     }
1: }
============================================================================