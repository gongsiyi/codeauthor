1:0640cb7: /**
1:0640cb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0640cb7:  * contributor license agreements.  See the NOTICE file distributed with
1:0640cb7:  * this work for additional information regarding copyright ownership.
1:0640cb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0640cb7:  * (the "License"); you may not use this file except in compliance with
1:0640cb7:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:0640cb7:  *      http://www.apache.org/licenses/LICENSE-2.0
2:0640cb7:  *
1:0640cb7:  * Unless required by applicable law or agreed to in writing, software
1:0640cb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0640cb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0640cb7:  * See the License for the specific language governing permissions and
1:0640cb7:  * limitations under the License.
1:0640cb7:  */
1:0640cb7: package org.apache.activemq.load;
58:0640cb7: 
1:0640cb7: import java.util.concurrent.CountDownLatch;
1:0640cb7: import java.util.concurrent.TimeUnit;
1:0640cb7: 
1:0640cb7: import javax.jms.ConnectionFactory;
1:0640cb7: import javax.jms.Destination;
1:0640cb7: import javax.jms.JMSException;
1:0640cb7: 
1:0640cb7: /**
1:c7d559f:  *
1:0640cb7:  */
1:3d10acc: public class LoadController extends LoadClient{
1:c7d559f: 
1:3d10acc:     private int numberOfBatches=1;
1:3d10acc:     private int batchSize =1000;
1:3d10acc:     private int count;
1:0640cb7:     private final CountDownLatch stopped = new CountDownLatch(1);
1:3d10acc: 
1:3d10acc:     public LoadController(String name,ConnectionFactory factory) {
1:3d10acc:        super(name,factory);
18:0640cb7:     }
1:c7d559f: 
1:3d10acc: 
1:3d10acc:     public int awaitTestComplete() throws InterruptedException {
1:c7d559f:         stopped.await(60*5,TimeUnit.SECONDS);
1:3d10acc:         return count;
1:0640cb7:     }
1:3d10acc: 
1:c7d559f:     @Override
1:0640cb7:     public void stop() throws JMSException, InterruptedException {
1:0640cb7:         running = false;
1:3d10acc:         stopped.countDown();
1:3d10acc:         if (connection != null) {
1:3d10acc:             this.connection.stop();
1:3d10acc:         }
1:0640cb7:     }
1:c7d559f: 
1:c7d559f:     @Override
1:0640cb7:     public void run() {
1:0640cb7:         try {
1:0640cb7:             for (int i = 0; i < numberOfBatches; i++) {
1:0640cb7:                 for (int j = 0; j < batchSize; j++) {
1:0640cb7:                     String payLoad = "batch[" + i + "]no:" + j;
1:0640cb7:                     send(payLoad);
1:3d10acc:                 }
1:3d10acc:                 for (int j = 0; j < batchSize; j++) {
1:0640cb7:                     String result = consume();
1:3d10acc:                     if (result != null) {
1:3d10acc:                         count++;
1:0640cb7:                     rate.increment();
1:3d10acc:                     }
1:0640cb7:                 }
1:0640cb7:             }
1:0640cb7:         } catch (Throwable e) {
1:0640cb7:             e.printStackTrace();
1:0640cb7:         } finally {
1:0640cb7:             stopped.countDown();
1:0640cb7:         }
1:0640cb7:     }
1:3d10acc: 
1:0640cb7:     public int getNumberOfBatches() {
1:0640cb7:         return numberOfBatches;
1:0640cb7:     }
1:0640cb7: 
1:0640cb7:     public void setNumberOfBatches(int numberOfBatches) {
1:0640cb7:         this.numberOfBatches = numberOfBatches;
1:0640cb7:     }
1:3d10acc: 
1:0640cb7:     public int getBatchSize() {
1:0640cb7:         return batchSize;
1:0640cb7:     }
1:3d10acc: 
1:0640cb7:     public void setBatchSize(int batchSize) {
1:0640cb7:         this.batchSize = batchSize;
1:0640cb7:     }
1:c7d559f: 
1:c7d559f:     @Override
1:3d10acc:     protected Destination getSendDestination() {
1:3d10acc:         return startDestination;
1:0640cb7:     }
1:c7d559f: 
1:c7d559f:     @Override
1:3d10acc:     protected Destination getConsumeDestination() {
1:3d10acc:         return nextDestination;
1:0640cb7:     }
1:0640cb7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
1: 
1:         stopped.await(60*5,TimeUnit.SECONDS);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1: 
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:3d10acc
/////////////////////////////////////////////////////////////////////////
1: public class LoadController extends LoadClient{
1:     private int numberOfBatches=1;
1:     private int batchSize =1000;
1:     private int count;
1:      
1:     public LoadController(String name,ConnectionFactory factory) {
1:        super(name,factory);
1:        
1:     public int awaitTestComplete() throws InterruptedException {
0:         boolean complete = stopped.await(60*5,TimeUnit.SECONDS);
1:         return count;
1:         stopped.countDown();
1:         if (connection != null) {
1:             this.connection.stop();
1:         }
1:                 }
1:                 for (int j = 0; j < batchSize; j++) {
1:                     if (result != null) {
1:                         count++;
1:                     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected Destination getSendDestination() {
1:         return startDestination;
1:     
1:     protected Destination getConsumeDestination() {
1:         return nextDestination;
1:     
1:     
commit:0640cb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.load;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
0: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.perf.PerfRate;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class LoadController implements Runnable{
0:     protected ConnectionFactory factory;
0:     protected Connection connection;
0:     protected Destination startDestination;
0:     protected Destination controlDestination;
0:     protected Session session;
0:     protected MessageConsumer consumer;
0:     protected MessageProducer producer;
0:     protected PerfRate rate = new PerfRate();
0:     protected int numberOfBatches = 1;
0:     protected int batchSize = 1000;
0:     protected int deliveryMode = DeliveryMode.PERSISTENT;
0:     private boolean connectionPerMessage = false;
0:     private int timeout = 5000;
0:     private boolean running = false;
1:     private final CountDownLatch stopped = new CountDownLatch(1);
1:     
1: 
0:     public LoadController(ConnectionFactory factory) {
0:        this.factory = factory;
1:     }
1: 
1:    
1: 
0:     public synchronized void start() throws JMSException {
0:         if (!running) {
0:             rate.reset();
0:             running = true;
0:             if (!connectionPerMessage) {
0:                 connection = factory.createConnection();
0:                 connection.start();
0:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 consumer = session.createConsumer(this.controlDestination);
0:                 producer = session.createProducer(this.startDestination);
0:                 producer.setDeliveryMode(this.deliveryMode);
1:                 
1:             }
1:             
0:             Thread t = new  Thread(this);
0:             t.setName("LoadController");
0:             t.start();
1:         }
1:     }
1: 
1:     public void stop() throws JMSException, InterruptedException {
1:         running = false;
0:         stopped.await();
0:         //stopped.await(1,TimeUnit.SECONDS);
0:         connection.stop();
1:     }
1: 
1:     
1:     public void run() {
1:         try {
1: 
1:             for (int i = 0; i < numberOfBatches; i++) {
1:                 for (int j = 0; j < batchSize; j++) {
1:                     String payLoad = "batch[" + i + "]no:" + j;
1:                     send(payLoad);
1:                     String result = consume();
0:                     if (result == null || !result.equals(payLoad)) {
0:                         throw new Exception("Failed to consume " + payLoad
0:                                 + " GOT " + result);
1:                     }
0:                     System.out.println("Control got " + result);
1:                     rate.increment();
1:                 }
1:             }
1: 
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:         } finally {
1:             stopped.countDown();
1:         }
1:     }
1:     
0:     protected String consume() throws JMSException {
0:         Connection con  = null;
0:         MessageConsumer c = consumer;
0:         if (connectionPerMessage){
0:             con = factory.createConnection();
0:             con.start();
0:             Session s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             c = s.createConsumer(controlDestination);
1:         }
0:         TextMessage result = (TextMessage) c.receive(timeout);
0:         if (connectionPerMessage) {
0:             con.close();
1:         }
0:         return result != null ? result.getText() : null;
1:     }
1:     
0:     protected void send(String text) throws JMSException {
0:         Connection con  = null;
0:         MessageProducer p = producer;
0:         Session s = session;
0:         if (connectionPerMessage){
0:             con = factory.createConnection();
0:             con.start();
0:             s = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             p = s.createProducer(startDestination);
0:             p.setDeliveryMode(deliveryMode);
1:         }
0:         TextMessage message = s.createTextMessage(text);
0:         p.send(message);
0:         if (connectionPerMessage) {
0:             con.close();
1:         }
1:     }
1: 
1: 
1: 
0:     public Destination getStartDestination() {
0:         return startDestination;
1:     }
1: 
1: 
1: 
0:     public void setStartDestination(Destination startDestination) {
0:         this.startDestination = startDestination;
1:     }
1: 
1: 
1: 
0:     public Destination getControlDestination() {
0:         return controlDestination;
1:     }
1: 
1: 
1: 
0:     public void setControlDestination(Destination controlDestination) {
0:         this.controlDestination = controlDestination;
1:     }
1: 
1: 
1: 
1:     public int getNumberOfBatches() {
1:         return numberOfBatches;
1:     }
1: 
1: 
1: 
1:     public void setNumberOfBatches(int numberOfBatches) {
1:         this.numberOfBatches = numberOfBatches;
1:     }
1: 
1: 
1: 
1:     public int getBatchSize() {
1:         return batchSize;
1:     }
1: 
1: 
1: 
1:     public void setBatchSize(int batchSize) {
1:         this.batchSize = batchSize;
1:     }
1: 
1: 
1: 
0:     public int getDeliveryMode() {
0:         return deliveryMode;
1:     }
1: 
1: 
1: 
0:     public void setDeliveryMode(int deliveryMode) {
0:         this.deliveryMode = deliveryMode;
1:     }
1: 
1: 
1: 
0:     public boolean isConnectionPerMessage() {
0:         return connectionPerMessage;
1:     }
1: 
1: 
1: 
0:     public void setConnectionPerMessage(boolean connectionPerMessage) {
0:         this.connectionPerMessage = connectionPerMessage;
1:     }
1: 
1: 
1: 
0:     public int getTimeout() {
0:         return timeout;
1:     }
1: 
1: 
1: 
0:     public void setTimeout(int timeout) {
0:         this.timeout = timeout;
1:     }
1: 
1: }
============================================================================