1:28bc447: /*
1:28bc447:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:28bc447:  * contributor license agreements.  See the NOTICE file distributed with
1:28bc447:  * this work for additional information regarding copyright ownership.
1:28bc447:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:28bc447:  * (the "License"); you may not use this file except in compliance with
1:28bc447:  * the License.  You may obtain a copy of the License at
1:28bc447:  *
1:28bc447:  *      http://www.apache.org/licenses/LICENSE-2.0
1:28bc447:  *
1:28bc447:  * Unless required by applicable law or agreed to in writing, software
1:28bc447:  * distributed under the License is distributed on an "AS IS" BASIS,
1:28bc447:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:28bc447:  * See the License for the specific language governing permissions and
1:28bc447:  * limitations under the License.
1:28bc447:  */
1:28bc447: package org.apache.activemq.console.command;
1:28bc447: 
1:28bc447: import java.util.List;
1:28bc447: 
1:28bc447: import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
1:28bc447: 
1:28bc447: public class DecryptCommand extends EncryptCommand {
1:28bc447: 
1:28bc447:     protected String[] helpFile = new String[] {
1:28bc447:             "Task Usage: Main decrypt --password <password> --input <input>",
1:28bc447:             "Description: Decrypts given text.",
1:28bc447:             "", 
1:28bc447:             "Encrypt Options:",
1:5da7ab3:             "    --password <password>      Password to be used by the encryptor.  Defaults to",
1:5da7ab3:             "                               the value in the ACTIVEMQ_ENCRYPTION_PASSWORD env variable.",
1:28bc447:             "    --input <input>            Text to be encrypted.",
1:28bc447:             "    --version                  Display the version information.",
1:28bc447:             "    -h,-?,--help               Display the stop broker help information.",
1:28bc447:             ""
1:28bc447:         };    
1:28bc447:     
1:28bc447:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "decrypt";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Decrypts given text";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:28bc447:     protected void runTask(List<String> tokens) throws Exception {
1:5da7ab3:         if( password == null ) {
1:5da7ab3:             password = System.getenv("ACTIVEMQ_ENCRYPTION_PASSWORD");
1:5da7ab3:         }
1:28bc447:         if (password == null || input == null) {
1:28bc447:             context.printException(new IllegalArgumentException("input and password parameters are mandatory"));
1:28bc447:             return;
1:28bc447:         }
1:28bc447:         encryptor.setPassword(password);
1:28bc447:         try {
1:28bc447:             context.print("Decrypted text: " + encryptor.decrypt(input));
1:28bc447:         } catch (EncryptionOperationNotPossibleException e) {
1:28bc447:             context.print("ERROR: Text cannot be decrypted, check your input and password and try again!");
1:28bc447:         }
1:28bc447:     }
1:28bc447: 
1:28bc447:     
1:28bc447:     
1:28bc447: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:5da7ab3
/////////////////////////////////////////////////////////////////////////
1:             "    --password <password>      Password to be used by the encryptor.  Defaults to",
1:             "                               the value in the ACTIVEMQ_ENCRYPTION_PASSWORD env variable.",
/////////////////////////////////////////////////////////////////////////
1:         if( password == null ) {
1:             password = System.getenv("ACTIVEMQ_ENCRYPTION_PASSWORD");
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     public String getName() {
1:         return "decrypt";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Decrypts given text";
1:     }
1: 
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:28bc447
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import java.util.List;
1: 
1: import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
1: 
1: public class DecryptCommand extends EncryptCommand {
1: 
1:     protected String[] helpFile = new String[] {
1:             "Task Usage: Main decrypt --password <password> --input <input>",
1:             "Description: Decrypts given text.",
1:             "", 
1:             "Encrypt Options:",
0:             "    --password <password>      Password to be used by the encryptor.",
1:             "    --input <input>            Text to be encrypted.",
1:             "    --version                  Display the version information.",
1:             "    -h,-?,--help               Display the stop broker help information.",
1:             ""
1:         };    
1:     
1:     @Override
1:     protected void runTask(List<String> tokens) throws Exception {
1:         if (password == null || input == null) {
1:             context.printException(new IllegalArgumentException("input and password parameters are mandatory"));
1:             return;
1:         }
1:         encryptor.setPassword(password);
1:         try {
1:             context.print("Decrypted text: " + encryptor.decrypt(input));
1:         } catch (EncryptionOperationNotPossibleException e) {
1:             context.print("ERROR: Text cannot be decrypted, check your input and password and try again!");
1:         }
1:     }
1: 
1:     
1:     
1: }
============================================================================