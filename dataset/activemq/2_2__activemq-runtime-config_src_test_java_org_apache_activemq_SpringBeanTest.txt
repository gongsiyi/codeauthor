1:2ea02bc: /**
1:2ea02bc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ea02bc:  * contributor license agreements.  See the NOTICE file distributed with
1:2ea02bc:  * this work for additional information regarding copyright ownership.
1:2ea02bc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ea02bc:  * (the "License"); you may not use this file except in compliance with
1:2ea02bc:  * the License.  You may obtain a copy of the License at
1:2ea02bc:  *
1:2ea02bc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ea02bc:  *
1:2ea02bc:  * Unless required by applicable law or agreed to in writing, software
1:2ea02bc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ea02bc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ea02bc:  * See the License for the specific language governing permissions and
1:2ea02bc:  * limitations under the License.
1:2ea02bc:  */
1:2ea02bc: package org.apache.activemq;
1:2ea02bc: 
1:2ea02bc: import java.util.HashMap;
1:2ea02bc: import javax.management.ObjectName;
1:634a818: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:2ea02bc: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1:2ea02bc: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1:2ea02bc: import org.apache.activemq.util.IntrospectionSupport;
1:634a818: import org.apache.activemq.util.Wait;
1:634a818: import org.junit.Ignore;
1:2ea02bc: import org.junit.Test;
1:2ea02bc: 
1:2ea02bc: 
1:2ea02bc: import static org.junit.Assert.*;
1:2ea02bc: 
1:2ea02bc: public class SpringBeanTest extends RuntimeConfigTestSupport {
1:2ea02bc: 
1:634a818:     @Test
1:634a818:     public void testModifiable() throws Exception {
1:634a818:         final String brokerConfig =  "SpringBeanTest-broker";
1:2ea02bc:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-bean");
1:2ea02bc:         startBroker(brokerConfig);
1:2ea02bc:         assertTrue("broker alive", brokerService.isStarted());
1:2ea02bc: 
1:2ea02bc:         // apply via jmx
1:2ea02bc:         ObjectName objectName =
1:da45d99:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:da45d99:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:da45d99:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:da45d99:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:da45d99:                         RuntimeConfigurationViewMBean.class, false);
1:2ea02bc: 
1:da45d99:         String propOfInterest = "modified";
1:da45d99:         HashMap<String, String> props = new HashMap<String, String>();
1:da45d99:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:da45d99:         LOG.info("mbean attributes before: " + props);
1:2ea02bc: 
1:2ea02bc:         assertNotEquals("unknown", props.get(propOfInterest));
1:2ea02bc: 
1:2ea02bc:         String result = runtimeConfigurationView.updateNow();
1:2ea02bc: 
1:2ea02bc:         LOG.info("Result from update: " + result);
1:2ea02bc: 
1:2ea02bc:         assertTrue("got sensible result", result.contains("No material change"));
1:2ea02bc: 
1:2ea02bc:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:2ea02bc:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1:2ea02bc:         LOG.info("mbean attributes after: " + propsAfter);
1:2ea02bc: 
1:2ea02bc:         assertEquals("modified is same", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:2ea02bc:     }
1:634a818: 
1:634a818: 
1:da45d99:     @Test
1:634a818:     public void testAddPropertyRef() throws Exception {
1:634a818: 
1:634a818:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:634a818:         final String brokerConfig = "SpringPropertyTest-broker";
1:634a818:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property");
1:634a818:         startBroker(brokerConfig);
1:634a818:         assertTrue("broker alive", brokerService.isStarted());
1:634a818: 
1:634a818:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-nc", SLEEP);
1:634a818: 
1:634a818:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:634a818:             @Override
1:634a818:             public boolean isSatisified() throws Exception {
1:634a818:                 return 1 == brokerService.getNetworkConnectors().size();
1:634a818:             }
1:634a818:         }));
1:634a818: 
1:634a818:         DiscoveryNetworkConnector discoveryNetworkConnector =
1:634a818:                 (DiscoveryNetworkConnector) brokerService.getNetworkConnectors().get(0);
1:634a818:         assertEquals("property replaced", System.getProperty("network.uri"), discoveryNetworkConnector.getUri().toASCIIString());
1:634a818:     }
1:634a818: 
1:634a818:     @Test
1:634a818:     public void testAddPropertyRefFromFile() throws Exception {
1:634a818: 
1:634a818:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:634a818:         System.setProperty("props.base", "classpath:");
1:634a818:         final String brokerConfig = "SpringPropertyTest-broker";
1:634a818:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file");
1:634a818:         startBroker(brokerConfig);
1:634a818:         assertTrue("broker alive", brokerService.isStarted());
1:da45d99: 
1:634a818:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-nc", SLEEP);
1:da45d99: 
1:634a818:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:634a818:             @Override
1:634a818:             public boolean isSatisified() throws Exception {
1:634a818:                 return 1 == brokerService.getNetworkConnectors().size();
1:634a818:             }
1:634a818:         }));
1:634a818: 
1:634a818:         DiscoveryNetworkConnector discoveryNetworkConnector =
1:634a818:                 (DiscoveryNetworkConnector) brokerService.getNetworkConnectors().get(0);
1:634a818:         assertEquals("property replaced", System.getProperty("network.uri"), discoveryNetworkConnector.getUri().toASCIIString());
1:634a818: 
1:634a818:         assertEquals("name is replaced", "guest", discoveryNetworkConnector.getName());
1:634a818:     }
1:634a818: 
1:8d4fef8:     @Test
1:8d4fef8:     public void testAddPropertyRefFromFileAsList() throws Exception {
1:8d4fef8: 
1:8d4fef8:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:8d4fef8:         System.setProperty("props.base", "classpath:");
1:8d4fef8:         final String brokerConfig = "SpringPropertyTestFileList-broker";
1:8d4fef8:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-list");
1:8d4fef8:         startBroker(brokerConfig);
1:8d4fef8:         assertTrue("broker alive", brokerService.isStarted());
1:8d4fef8: 
1:8d4fef8:         ObjectName objectName =
1:8d4fef8:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:8d4fef8:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:8d4fef8:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:8d4fef8:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:8d4fef8:                         RuntimeConfigurationViewMBean.class, false);
1:8d4fef8: 
1:8d4fef8:         String propOfInterest = "modified";
1:8d4fef8:         HashMap<String, String> props = new HashMap<String, String>();
1:8d4fef8:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:8d4fef8:         LOG.info("mbean attributes before: " + props);
1:8d4fef8: 
1:8d4fef8:         assertNotEquals("unknown", props.get(propOfInterest));
1:8d4fef8: 
1:8d4fef8: 
1:8d4fef8:     }
1:8d4fef8: 
1:2ea02bc:     @Test
1:da45d99:     public void testAddPropertyRefFromFileAndBeanFactory() throws Exception {
1:da45d99: 
1:da45d99:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:da45d99:         System.setProperty("props.base", "classpath:");
1:da45d99:         final String brokerConfig = "SpringPropertyTestFileListBeanFactory-broker";
1:da45d99:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory");
1:da45d99:         startBroker(brokerConfig);
1:da45d99:         assertTrue("broker alive", brokerService.isStarted());
1:da45d99: 
1:da45d99:         ObjectName objectName =
1:da45d99:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:da45d99:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:da45d99:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:da45d99:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:da45d99:                         RuntimeConfigurationViewMBean.class, false);
1:da45d99: 
1:da45d99:         String propOfInterest = "modified";
1:da45d99:         HashMap<String, String> props = new HashMap<String, String>();
1:da45d99:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:da45d99:         LOG.info("mbean attributes before: " + props);
1:da45d99: 
1:da45d99:         assertNotEquals("unknown", props.get(propOfInterest));
1:634a818: 
1:da45d99:         assertEquals("our custom prop is applied", "isKing", brokerService.getBrokerName());
1:da45d99: 
1:da45d99:         applyNewConfig(brokerConfig, "spring-property-file-list-and-beanFactory-new-nc", SLEEP);
1:da45d99: 
1:da45d99:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:da45d99:             @Override
1:da45d99:             public boolean isSatisified() throws Exception {
1:da45d99:                 return 1 == brokerService.getNetworkConnectors().size();
1:da45d99:             }
1:da45d99:         }));
1:da45d99: 
1:da45d99:         assertEquals("our custom prop is applied", "isKing", brokerService.getNetworkConnectors().get(0).getName());
1:da45d99: 
1:da45d99:     }
1:2ea02bc: 
1:2ea02bc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:da45d99
/////////////////////////////////////////////////////////////////////////
1:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                         RuntimeConfigurationViewMBean.class, false);
1:         String propOfInterest = "modified";
1:         HashMap<String, String> props = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:         LOG.info("mbean attributes before: " + props);
1:     @Test
1:     public void testAddPropertyRefFromFileAndBeanFactory() throws Exception {
1: 
1:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:         System.setProperty("props.base", "classpath:");
1:         final String brokerConfig = "SpringPropertyTestFileListBeanFactory-broker";
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-list-and-beanFactory");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         ObjectName objectName =
1:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
1:         RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                         RuntimeConfigurationViewMBean.class, false);
1: 
1:         String propOfInterest = "modified";
1:         HashMap<String, String> props = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:         LOG.info("mbean attributes before: " + props);
1: 
1:         assertNotEquals("unknown", props.get(propOfInterest));
1: 
1:         assertEquals("our custom prop is applied", "isKing", brokerService.getBrokerName());
1: 
1:         applyNewConfig(brokerConfig, "spring-property-file-list-and-beanFactory-new-nc", SLEEP);
1: 
1:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
1: 
1:         assertEquals("our custom prop is applied", "isKing", brokerService.getNetworkConnectors().get(0).getName());
1: 
1:     }
1: 
commit:8d4fef8
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testAddPropertyRefFromFileAsList() throws Exception {
1: 
1:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:         System.setProperty("props.base", "classpath:");
1:         final String brokerConfig = "SpringPropertyTestFileList-broker";
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-list");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         ObjectName objectName =
1:                         new ObjectName(brokerService.getBrokerObjectName().toString() +
1:                                 RuntimeConfigurationBroker.objectNamePropsAppendage);
1:                 RuntimeConfigurationViewMBean runtimeConfigurationView =
1:                         (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
1:                                 RuntimeConfigurationViewMBean.class, false);
1: 
1:                 String propOfInterest = "modified";
1:                 HashMap<String, String> props = new HashMap<String, String>();
1:                 IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
1:                 LOG.info("mbean attributes before: " + props);
1: 
1:         assertNotEquals("unknown", props.get(propOfInterest));
1: 
1: 
1:     }
1: 
commit:634a818
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     public void testModifiable() throws Exception {
1:         final String brokerConfig =  "SpringBeanTest-broker";
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testAddPropertyRef() throws Exception {
1: 
1:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:         final String brokerConfig = "SpringPropertyTest-broker";
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-nc", SLEEP);
1: 
1:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
1: 
1:         DiscoveryNetworkConnector discoveryNetworkConnector =
1:                 (DiscoveryNetworkConnector) brokerService.getNetworkConnectors().get(0);
1:         assertEquals("property replaced", System.getProperty("network.uri"), discoveryNetworkConnector.getUri().toASCIIString());
1:     }
1: 
1:     @Test
1:     public void testAddPropertyRefFromFile() throws Exception {
1: 
1:         System.setProperty("network.uri", "static:(tcp://localhost:8888)");
1:         System.setProperty("props.base", "classpath:");
1:         final String brokerConfig = "SpringPropertyTest-broker";
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-property-file-nc", SLEEP);
1: 
1:         assertTrue("new network connectors", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 1 == brokerService.getNetworkConnectors().size();
1:             }
1:         }));
1: 
1:         DiscoveryNetworkConnector discoveryNetworkConnector =
1:                 (DiscoveryNetworkConnector) brokerService.getNetworkConnectors().get(0);
1:         assertEquals("property replaced", System.getProperty("network.uri"), discoveryNetworkConnector.getUri().toASCIIString());
1: 
1:         assertEquals("name is replaced", "guest", discoveryNetworkConnector.getName());
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:2ea02bc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import java.text.DateFormat;
0: import java.util.Date;
1: import java.util.HashMap;
1: import javax.management.ObjectName;
1: import org.apache.activemq.plugin.RuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.jmx.RuntimeConfigurationViewMBean;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.*;
1: 
1: public class SpringBeanTest extends RuntimeConfigTestSupport {
1: 
1:     @Test
0:     public void testUpdateNow() throws Exception {
0:         final String brokerConfig =  "SpromgBeanTest-broker";
1:         applyNewConfig(brokerConfig, "emptyUpdatableConfig1000-spring-bean");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         // apply via jmx
1:         ObjectName objectName =
0:                 new ObjectName(brokerService.getBrokerObjectName().toString() +
0:                         RuntimeConfigurationBroker.objectNamePropsAppendage);
0:         RuntimeConfigurationViewMBean runtimeConfigurationView =
0:                 (RuntimeConfigurationViewMBean) brokerService.getManagementContext().newProxyInstance(objectName,
0:                         RuntimeConfigurationViewMBean.class, false);
1: 
0:         String propOfInterest = "modified";
0:         HashMap<String, String> props = new HashMap<String, String>();
0:         IntrospectionSupport.getProperties(runtimeConfigurationView, props, null);
0:         LOG.info("mbean attributes before: " + props);
1: 
1:         assertNotEquals("unknown", props.get(propOfInterest));
1: 
1:         String result = runtimeConfigurationView.updateNow();
1: 
1:         LOG.info("Result from update: " + result);
1: 
1:         assertTrue("got sensible result", result.contains("No material change"));
1: 
1:         HashMap<String, String> propsAfter = new HashMap<String, String>();
1:         IntrospectionSupport.getProperties(runtimeConfigurationView, propsAfter, null);
1:         LOG.info("mbean attributes after: " + propsAfter);
1: 
1:         assertEquals("modified is same", props.get(propOfInterest), propsAfter.get(propOfInterest));
1:     }
1: 
1: }
============================================================================