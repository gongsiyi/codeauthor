1:9f0ab46: /**
1:9f0ab46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f0ab46:  * contributor license agreements.  See the NOTICE file distributed with
1:9f0ab46:  * this work for additional information regarding copyright ownership.
1:9f0ab46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f0ab46:  * (the "License"); you may not use this file except in compliance with
1:9f0ab46:  * the License.  You may obtain a copy of the License at
1:9f0ab46:  *
1:9f0ab46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f0ab46:  *
1:9f0ab46:  * Unless required by applicable law or agreed to in writing, software
1:9f0ab46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f0ab46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f0ab46:  * See the License for the specific language governing permissions and
1:9f0ab46:  * limitations under the License.
1:9f0ab46:  */
1:9f0ab46: package org.apache.activemq.util;
3:9f0ab46: 
1:9f0ab46: import org.slf4j.Logger;
1:9f0ab46: import org.slf4j.LoggerFactory;
1:9f0ab46: 
1:9f0ab46: import javax.jms.*;
1:df3ff9c: import java.io.*;
1:9f0ab46: import java.net.URL;
1:9f0ab46: import java.util.concurrent.CountDownLatch;
1:61da1fa: import java.util.concurrent.atomic.AtomicInteger;
1:9f0ab46: 
1:9f0ab46: public class ProducerThread extends Thread {
1:9f0ab46: 
1:9f0ab46:     private static final Logger LOG = LoggerFactory.getLogger(ProducerThread.class);
1:9f0ab46: 
1:9f0ab46:     int messageCount = 1000;
1:61da1fa:     boolean runIndefinitely = false;
1:9f0ab46:     Destination destination;
1:9f0ab46:     protected Session session;
1:9f0ab46:     int sleep = 0;
1:9f0ab46:     boolean persistent = true;
1:9f0ab46:     int messageSize = 0;
1:9f0ab46:     int textMessageSize;
1:9f0ab46:     long msgTTL = 0L;
1:9f0ab46:     String msgGroupID=null;
1:9f0ab46:     int transactionBatchSize;
1:9f0ab46: 
1:9f0ab46:     int transactions = 0;
1:61da1fa:     AtomicInteger sentCount = new AtomicInteger(0);
1:df3ff9c:     String message;
1:df3ff9c:     String messageText = null;
1:ebb3df7:     String payloadUrl = null;
1:9f0ab46:     byte[] payload = null;
1:9f0ab46:     boolean running = false;
1:9f0ab46:     CountDownLatch finished;
1:61da1fa:     CountDownLatch paused = new CountDownLatch(0);
1:9f0ab46: 
1:9f0ab46: 
1:9f0ab46:     public ProducerThread(Session session, Destination destination) {
1:9f0ab46:         this.destination = destination;
1:9f0ab46:         this.session = session;
2:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void run() {
1:9f0ab46:         MessageProducer producer = null;
1:9f0ab46:         String threadName = Thread.currentThread().getName();
2:9f0ab46:         try {
1:9f0ab46:             producer = session.createProducer(destination);
1:9f0ab46:             producer.setDeliveryMode(persistent ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
1:9f0ab46:             producer.setTimeToLive(msgTTL);
1:9f0ab46:             initPayLoad();
1:9f0ab46:             running = true;
1:9f0ab46: 
1:9f0ab46:             LOG.info(threadName +  " Started to calculate elapsed time ...\n");
1:9f0ab46:             long tStart = System.currentTimeMillis();
1:9f0ab46: 
1:61da1fa:             if (runIndefinitely) {
1:61da1fa:                 while (running) {
1:61da1fa:                     synchronized (this) {
1:61da1fa:                         paused.await();
1:61da1fa:                     }
1:61da1fa:                     sendMessage(producer, threadName);
1:61da1fa:                     sentCount.incrementAndGet();
1:9f0ab46:                 }
1:61da1fa:             }else{
1:61da1fa:                 for (sentCount.set(0); sentCount.get() < messageCount && running; sentCount.incrementAndGet()) {
1:61da1fa:                     synchronized (this) {
1:61da1fa:                         paused.await();
1:61da1fa:                     }
1:61da1fa:                     sendMessage(producer, threadName);
1:9f0ab46:                 }
1:9f0ab46:             }
1:9f0ab46: 
1:9f0ab46:             LOG.info(threadName + " Produced: " + this.getSentCount() + " messages");
1:9f0ab46:             long tEnd = System.currentTimeMillis();
1:9f0ab46:             long elapsed = (tEnd - tStart) / 1000;
1:9f0ab46:             LOG.info(threadName + " Elapsed time in second : " + elapsed + " s");
1:9f0ab46:             LOG.info(threadName + " Elapsed time in milli second : " + (tEnd - tStart) + " milli seconds");
1:9f0ab46: 
2:9f0ab46:         } catch (Exception e) {
1:9f0ab46:             e.printStackTrace();
2:9f0ab46:         } finally {
1:9f0ab46:             if (finished != null) {
1:9f0ab46:                 finished.countDown();
1:9f0ab46:             }
1:9f0ab46:             if (producer != null) {
1:9f0ab46:                 try {
1:9f0ab46:                     producer.close();
1:9f0ab46:                 } catch (JMSException e) {
1:9f0ab46:                     e.printStackTrace();
1:9f0ab46:                 }
1:9f0ab46:             }
1:9f0ab46:         }
1:9f0ab46:     }
1:9f0ab46: 
1:61da1fa:     private void sendMessage(MessageProducer producer, String threadName) throws Exception {
1:61da1fa:         Message message = createMessage(sentCount.get());
1:61da1fa:         producer.send(message);
1:61da1fa:         if (LOG.isDebugEnabled()) {
1:61da1fa:             LOG.debug(threadName + " Sent: " + (message instanceof TextMessage ? ((TextMessage) message).getText() : message.getJMSMessageID()));
1:61da1fa:         }
1:61da1fa: 
1:61da1fa:         if (transactionBatchSize > 0 && sentCount.get() > 0 && sentCount.get() % transactionBatchSize == 0) {
1:61da1fa:             LOG.info(threadName + " Committing transaction: " + transactions++);
1:61da1fa:             session.commit();
1:61da1fa:         }
1:61da1fa: 
1:61da1fa:         if (sleep > 0) {
1:61da1fa:             Thread.sleep(sleep);
1:61da1fa:         }
1:61da1fa:     }
1:61da1fa: 
1:9f0ab46:     private void initPayLoad() {
1:9f0ab46:         if (messageSize > 0) {
1:9f0ab46:             payload = new byte[messageSize];
1:9f0ab46:             for (int i = 0; i < payload.length; i++) {
1:9f0ab46:                 payload[i] = '.';
1:9f0ab46:             }
1:9f0ab46:         }
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     protected Message createMessage(int i) throws Exception {
1:df3ff9c:         Message answer;
1:9f0ab46:         if (payload != null) {
1:df3ff9c:             answer = session.createBytesMessage();
1:df3ff9c:             ((BytesMessage) answer).writeBytes(payload);
1:9f0ab46:         } else {
1:9f0ab46:             if (textMessageSize > 0) {
1:df3ff9c:                 if (messageText == null) {
1:df3ff9c:                     messageText = readInputStream(getClass().getResourceAsStream("demo.txt"), textMessageSize, i);
1:9f0ab46:                 }
1:ebb3df7:             } else if (payloadUrl != null) {
1:ebb3df7:                 messageText = readInputStream(new URL(payloadUrl).openStream(), -1, i);
1:df3ff9c:             } else if (message != null) {
1:df3ff9c:                 messageText = message;
1:9f0ab46:             } else {
1:df3ff9c:                 messageText = createDefaultMessage(i);
1:9f0ab46:             }
1:df3ff9c:             answer = session.createTextMessage(messageText);
1:9f0ab46:         }
1:9f0ab46:         if ((msgGroupID != null) && (!msgGroupID.isEmpty())) {
1:df3ff9c:             answer.setStringProperty("JMSXGroupID", msgGroupID);
1:9f0ab46:         }
1:df3ff9c:         return answer;
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     private String readInputStream(InputStream is, int size, int messageNumber) throws IOException {
1:df3ff9c:         InputStreamReader reader = new InputStreamReader(is);
1:df3ff9c:         try {
1:df3ff9c:             char[] buffer;
1:df3ff9c:             if (size > 0) {
1:df3ff9c:                 buffer = new char[size];
1:df3ff9c:             } else {
1:df3ff9c:                 buffer = new char[1024];
1:df3ff9c:             }
1:df3ff9c:             int count;
1:df3ff9c:             StringBuilder builder = new StringBuilder();
1:df3ff9c:             while ((count = reader.read(buffer)) != -1) {
1:df3ff9c:                 builder.append(buffer, 0, count);
1:df3ff9c:                 if (size > 0) break;
1:df3ff9c:             }
1:df3ff9c:             return builder.toString();
1:df3ff9c:         } catch (IOException ioe) {
1:df3ff9c:             return createDefaultMessage(messageNumber);
1:df3ff9c:         } finally {
1:df3ff9c:             reader.close();
1:df3ff9c:         }
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     private String createDefaultMessage(int messageNumber) {
1:df3ff9c:         return "test message: " + messageNumber;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMessageCount(int messageCount) {
1:9f0ab46:         this.messageCount = messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getSleep() {
1:9f0ab46:         return sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setSleep(int sleep) {
1:9f0ab46:         this.sleep = sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageCount() {
1:9f0ab46:         return messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getSentCount() {
1:61da1fa:         return sentCount.get();
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public boolean isPersistent() {
1:9f0ab46:         return persistent;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setPersistent(boolean persistent) {
1:9f0ab46:         this.persistent = persistent;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public boolean isRunning() {
1:9f0ab46:         return running;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setRunning(boolean running) {
1:9f0ab46:         this.running = running;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public long getMsgTTL() {
1:9f0ab46:         return msgTTL;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMsgTTL(long msgTTL) {
1:9f0ab46:         this.msgTTL = msgTTL;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getTransactionBatchSize() {
1:9f0ab46:         return transactionBatchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setTransactionBatchSize(int transactionBatchSize) {
1:9f0ab46:         this.transactionBatchSize = transactionBatchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public String getMsgGroupID() {
1:9f0ab46:         return msgGroupID;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMsgGroupID(String msgGroupID) {
1:9f0ab46:         this.msgGroupID = msgGroupID;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getTextMessageSize() {
1:9f0ab46:         return textMessageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setTextMessageSize(int textMessageSize) {
1:9f0ab46:         this.textMessageSize = textMessageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageSize() {
1:9f0ab46:         return messageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setMessageSize(int messageSize) {
1:9f0ab46:         this.messageSize = messageSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public CountDownLatch getFinished() {
1:9f0ab46:         return finished;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setFinished(CountDownLatch finished) {
1:9f0ab46:         this.finished = finished;
1:df3ff9c:     }
1:df3ff9c: 
1:ebb3df7:     public String getPayloadUrl() {
1:ebb3df7:         return payloadUrl;
1:df3ff9c:     }
1:df3ff9c: 
1:ebb3df7:     public void setPayloadUrl(String payloadUrl) {
1:ebb3df7:         this.payloadUrl = payloadUrl;
1:9f0ab46:     }
1:df3ff9c: 
1:df3ff9c:     public String getMessage() {
1:df3ff9c:         return message;
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     public void setMessage(String message) {
1:df3ff9c:         this.message = message;
1:df3ff9c:     }
1:61da1fa: 
1:61da1fa:     public boolean isRunIndefinitely() {
1:61da1fa:         return runIndefinitely;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public void setRunIndefinitely(boolean runIndefinitely) {
1:61da1fa:         this.runIndefinitely = runIndefinitely;
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public synchronized void pauseProducer(){
1:61da1fa:         this.paused = new CountDownLatch(1);
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public synchronized void resumeProducer(){
1:61da1fa:         this.paused.countDown();
1:61da1fa:     }
1:61da1fa: 
1:61da1fa:     public void resetCounters(){
1:61da1fa:         this.sentCount.set(0);
1:61da1fa:     }
1:9f0ab46: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:61da1fa
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
1:     boolean runIndefinitely = false;
/////////////////////////////////////////////////////////////////////////
1:     AtomicInteger sentCount = new AtomicInteger(0);
1:     CountDownLatch paused = new CountDownLatch(0);
/////////////////////////////////////////////////////////////////////////
1:             if (runIndefinitely) {
1:                 while (running) {
1:                     synchronized (this) {
1:                         paused.await();
1:                     }
1:                     sendMessage(producer, threadName);
1:                     sentCount.incrementAndGet();
1:             }else{
1:                 for (sentCount.set(0); sentCount.get() < messageCount && running; sentCount.incrementAndGet()) {
1:                     synchronized (this) {
1:                         paused.await();
1:                     }
1:                     sendMessage(producer, threadName);
/////////////////////////////////////////////////////////////////////////
1:     private void sendMessage(MessageProducer producer, String threadName) throws Exception {
1:         Message message = createMessage(sentCount.get());
1:         producer.send(message);
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug(threadName + " Sent: " + (message instanceof TextMessage ? ((TextMessage) message).getText() : message.getJMSMessageID()));
1:         }
1: 
1:         if (transactionBatchSize > 0 && sentCount.get() > 0 && sentCount.get() % transactionBatchSize == 0) {
1:             LOG.info(threadName + " Committing transaction: " + transactions++);
1:             session.commit();
1:         }
1: 
1:         if (sleep > 0) {
1:             Thread.sleep(sleep);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return sentCount.get();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isRunIndefinitely() {
1:         return runIndefinitely;
1:     }
1: 
1:     public void setRunIndefinitely(boolean runIndefinitely) {
1:         this.runIndefinitely = runIndefinitely;
1:     }
1: 
1:     public synchronized void pauseProducer(){
1:         this.paused = new CountDownLatch(1);
1:     }
1: 
1:     public synchronized void resumeProducer(){
1:         this.paused.countDown();
1:     }
1: 
1:     public void resetCounters(){
1:         this.sentCount.set(0);
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ebb3df7
/////////////////////////////////////////////////////////////////////////
1:     String payloadUrl = null;
/////////////////////////////////////////////////////////////////////////
1:             } else if (payloadUrl != null) {
1:                 messageText = readInputStream(new URL(payloadUrl).openStream(), -1, i);
/////////////////////////////////////////////////////////////////////////
1:     public String getPayloadUrl() {
1:         return payloadUrl;
1:     public void setPayloadUrl(String payloadUrl) {
1:         this.payloadUrl = payloadUrl;
commit:df3ff9c
/////////////////////////////////////////////////////////////////////////
1: import java.io.*;
/////////////////////////////////////////////////////////////////////////
1:     String message;
1:     String messageText = null;
0:     String url = null;
/////////////////////////////////////////////////////////////////////////
1:         Message answer;
1:             answer = session.createBytesMessage();
1:             ((BytesMessage) answer).writeBytes(payload);
1:                 if (messageText == null) {
1:                     messageText = readInputStream(getClass().getResourceAsStream("demo.txt"), textMessageSize, i);
0:             } else if (url != null) {
0:                 messageText = readInputStream(new URL(url).openStream(), -1, i);
1:             } else if (message != null) {
1:                 messageText = message;
1:                 messageText = createDefaultMessage(i);
1:             answer = session.createTextMessage(messageText);
1:             answer.setStringProperty("JMSXGroupID", msgGroupID);
1:         return answer;
1:     }
1: 
1:     private String readInputStream(InputStream is, int size, int messageNumber) throws IOException {
1:         InputStreamReader reader = new InputStreamReader(is);
1:         try {
1:             char[] buffer;
1:             if (size > 0) {
1:                 buffer = new char[size];
1:             } else {
1:                 buffer = new char[1024];
1:             }
1:             int count;
1:             StringBuilder builder = new StringBuilder();
1:             while ((count = reader.read(buffer)) != -1) {
1:                 builder.append(buffer, 0, count);
1:                 if (size > 0) break;
1:             }
1:             return builder.toString();
1:         } catch (IOException ioe) {
1:             return createDefaultMessage(messageNumber);
1:         } finally {
1:             reader.close();
1:         }
1:     }
1: 
1:     private String createDefaultMessage(int messageNumber) {
1:         return "test message: " + messageNumber;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public String getUrl() {
0:         return url;
1:     }
1: 
0:     public void setUrl(String url) {
0:         this.url = url;
1:     }
1: 
1:     public String getMessage() {
1:         return message;
1:     }
1: 
1:     public void setMessage(String message) {
1:         this.message = message;
1:     }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
0: import java.io.File;
0: import java.io.FileReader;
0: import java.io.InputStream;
0: import java.io.InputStreamReader;
1: import java.net.URL;
1: import java.util.concurrent.CountDownLatch;
1: 
1: public class ProducerThread extends Thread {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ProducerThread.class);
1: 
1:     int messageCount = 1000;
1:     Destination destination;
1:     protected Session session;
1:     int sleep = 0;
1:     boolean persistent = true;
1:     int messageSize = 0;
1:     int textMessageSize;
1:     long msgTTL = 0L;
1:     String msgGroupID=null;
1:     int transactionBatchSize;
1: 
1:     int transactions = 0;
0:     int sentCount = 0;
1:     byte[] payload = null;
1:     boolean running = false;
1:     CountDownLatch finished;
1: 
1: 
1:     public ProducerThread(Session session, Destination destination) {
1:         this.destination = destination;
1:         this.session = session;
1:     }
1: 
1:     public void run() {
1:         MessageProducer producer = null;
1:         String threadName = Thread.currentThread().getName();
1:         try {
1:             producer = session.createProducer(destination);
1:             producer.setDeliveryMode(persistent ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
1:             producer.setTimeToLive(msgTTL);
1:             initPayLoad();
1:             running = true;
1: 
1:             LOG.info(threadName +  " Started to calculate elapsed time ...\n");
1:             long tStart = System.currentTimeMillis();
1: 
0:             for (sentCount = 0; sentCount < messageCount && running; sentCount++) {
0:                 Message message = createMessage(sentCount);
0:                 producer.send(message);
0:                 LOG.info(threadName + " Sent: " + (message instanceof TextMessage ? ((TextMessage) message).getText() : message.getJMSMessageID()));
1: 
0:                 if (transactionBatchSize > 0 && sentCount > 0 && sentCount % transactionBatchSize == 0) {
0:                     LOG.info(threadName + " Committing transaction: " + transactions++);
0:                     session.commit();
1:                 }
1: 
0:                 if (sleep > 0) {
0:                     Thread.sleep(sleep);
1:                 }
1:             }
1: 
1:             LOG.info(threadName + " Produced: " + this.getSentCount() + " messages");
1:             long tEnd = System.currentTimeMillis();
1:             long elapsed = (tEnd - tStart) / 1000;
1:             LOG.info(threadName + " Elapsed time in second : " + elapsed + " s");
1:             LOG.info(threadName + " Elapsed time in milli second : " + (tEnd - tStart) + " milli seconds");
1: 
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         } finally {
1:             if (finished != null) {
1:                 finished.countDown();
1:             }
1:             if (producer != null) {
1:                 try {
1:                     producer.close();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private void initPayLoad() {
1:         if (messageSize > 0) {
1:             payload = new byte[messageSize];
1:             for (int i = 0; i < payload.length; i++) {
1:                 payload[i] = '.';
1:             }
1:         }
1:     }
1: 
1:     protected Message createMessage(int i) throws Exception {
0:         Message message = null;
1:         if (payload != null) {
0:             message = session.createBytesMessage();
0:             ((BytesMessage)message).writeBytes(payload);
1:         } else {
1:             if (textMessageSize > 0) {
0:                 InputStreamReader reader = null;
1:                 try {
0:                     InputStream is = getClass().getResourceAsStream("demo.txt");
0:                     reader = new InputStreamReader(is);
0:                     char[] chars = new char[textMessageSize];
0:                     reader.read(chars);
0:                     message = session.createTextMessage(String.valueOf(chars));
1:                 } catch (Exception e) {
0:                     LOG.warn(Thread.currentThread().getName() + " Failed to load " + textMessageSize + " bytes of demo text. Using default text message instead");
0:                     message = session.createTextMessage("test message: " + i);
1:                 } finally {
0:                     if (reader != null) {
0:                         reader.close();
1:                     }
1:                 }
1:             } else {
0:                 message = session.createTextMessage("test message: " + i);
1:             }
1:         }
1:         if ((msgGroupID != null) && (!msgGroupID.isEmpty())) {
0:             message.setStringProperty("JMSXGroupID", msgGroupID);
1:         }
0:         return message;
1:     }
1: 
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
1:     public int getSleep() {
1:         return sleep;
1:     }
1: 
1:     public void setSleep(int sleep) {
1:         this.sleep = sleep;
1:     }
1: 
1:     public int getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public int getSentCount() {
0:         return sentCount;
1:     }
1: 
1:     public boolean isPersistent() {
1:         return persistent;
1:     }
1: 
1:     public void setPersistent(boolean persistent) {
1:         this.persistent = persistent;
1:     }
1: 
1:     public boolean isRunning() {
1:         return running;
1:     }
1: 
1:     public void setRunning(boolean running) {
1:         this.running = running;
1:     }
1: 
1:     public long getMsgTTL() {
1:         return msgTTL;
1:     }
1: 
1:     public void setMsgTTL(long msgTTL) {
1:         this.msgTTL = msgTTL;
1:     }
1: 
1:     public int getTransactionBatchSize() {
1:         return transactionBatchSize;
1:     }
1: 
1:     public void setTransactionBatchSize(int transactionBatchSize) {
1:         this.transactionBatchSize = transactionBatchSize;
1:     }
1: 
1:     public String getMsgGroupID() {
1:         return msgGroupID;
1:     }
1: 
1:     public void setMsgGroupID(String msgGroupID) {
1:         this.msgGroupID = msgGroupID;
1:     }
1: 
1:     public int getTextMessageSize() {
1:         return textMessageSize;
1:     }
1: 
1:     public void setTextMessageSize(int textMessageSize) {
1:         this.textMessageSize = textMessageSize;
1:     }
1: 
1:     public int getMessageSize() {
1:         return messageSize;
1:     }
1: 
1:     public void setMessageSize(int messageSize) {
1:         this.messageSize = messageSize;
1:     }
1: 
1:     public CountDownLatch getFinished() {
1:         return finished;
1:     }
1: 
1:     public void setFinished(CountDownLatch finished) {
1:         this.finished = finished;
1:     }
1: }
============================================================================