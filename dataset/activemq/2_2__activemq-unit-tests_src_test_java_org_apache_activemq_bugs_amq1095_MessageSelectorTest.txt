1:53c4e12: /* ====================================================================
1:53c4e12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:53c4e12:    contributor license agreements.  See the NOTICE file distributed with
1:53c4e12:    this work for additional information regarding copyright ownership.
1:53c4e12:    The ASF licenses this file to You under the Apache License, Version 2.0
1:53c4e12:    (the "License"); you may not use this file except in compliance with
1:53c4e12:    the License.  You may obtain a copy of the License at
5:53c4e12: 
1:53c4e12:        http://www.apache.org/licenses/LICENSE-2.0
1:53c4e12: 
1:53c4e12:    Unless required by applicable law or agreed to in writing, software
1:53c4e12:    distributed under the License is distributed on an "AS IS" BASIS,
1:53c4e12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53c4e12:    See the License for the specific language governing permissions and
1:53c4e12:    limitations under the License.
1:53c4e12: ==================================================================== */
1:53c4e12: 
1:53c4e12: package org.apache.activemq.bugs.amq1095;
1:53c4e12: 
1:53c4e12: import javax.jms.JMSException;
1:53c4e12: import javax.jms.MessageConsumer;
1:53c4e12: import javax.jms.MessageProducer;
1:53c4e12: import javax.jms.Session;
1:53c4e12: import javax.jms.TextMessage;
1:53c4e12: import javax.jms.Topic;
1:53c4e12: 
1:53c4e12: /**
1:53c4e12:  * <p>
1:53c4e12:  * Test cases for various ActiveMQ functionalities.
1:53c4e12:  * </p>
1:c7d559f:  *
1:53c4e12:  * <ul>
1:53c4e12:  * <li>
1:53c4e12:  * <p>
1:53c4e12:  * Durable subscriptions are used.
1:53c4e12:  * </p>
1:53c4e12:  * </li>
1:53c4e12:  * <li>
1:53c4e12:  * <p>
1:53c4e12:  * The Kaha persistence manager is used.
1:53c4e12:  * </p>
1:53c4e12:  * </li>
1:53c4e12:  * <li>
1:53c4e12:  * <p>
1:53c4e12:  * An already existing Kaha directory is used. Everything runs fine if the
1:53c4e12:  * ActiveMQ broker creates a new Kaha directory.
1:53c4e12:  * </p>
1:53c4e12:  * </li>
1:53c4e12:  * </ul>
1:c7d559f:  *
1:53c4e12:  * @author Rainer Klute <a
1:53c4e12:  *         href="mailto:rainer.klute@dp-itsolutions.de">&lt;rainer.klute@dp-itsolutions.de&gt;</a>
1:53c4e12:  * @since 2007-08-09
1:53c4e12:  * @version $Id: MessageSelectorTest.java 12 2007-08-14 12:02:02Z rke $
1:53c4e12:  */
1:53c4e12: public class MessageSelectorTest extends ActiveMQTestCase {
1:53c4e12: 
1:53c4e12:     private MessageConsumer consumer1;
1:53c4e12:     private MessageConsumer consumer2;
1:53c4e12: 
1:53c4e12:     /** <p>Constructor</p> */
1:53c4e12:     public MessageSelectorTest()
1:53c4e12:     {}
1:c7d559f: 
1:53c4e12:     /** <p>Constructor</p>
1:53c4e12:      * @param name the test case's name
1:53c4e12:      */
1:53c4e12:     public MessageSelectorTest(final String name)
1:53c4e12:     {
1:53c4e12:         super(name);
1:53c4e12:     }
1:53c4e12: 
1:53c4e12:     /**
1:53c4e12:      * <p>
1:53c4e12:      * Tests whether message selectors work for durable subscribers.
1:53c4e12:      * </p>
1:53c4e12:      */
1:53c4e12:     public void testMessageSelectorForDurableSubscribersRunA()
1:53c4e12:     {
1:53c4e12:         runMessageSelectorTest(true);
1:53c4e12:     }
1:53c4e12: 
1:53c4e12:     /**
1:53c4e12:      * <p>
1:53c4e12:      * Tests whether message selectors work for durable subscribers.
1:53c4e12:      * </p>
1:53c4e12:      */
1:53c4e12:     public void testMessageSelectorForDurableSubscribersRunB()
1:53c4e12:     {
1:53c4e12:         runMessageSelectorTest(true);
1:53c4e12:     }
1:53c4e12: 
1:53c4e12:     /**
1:53c4e12:      * <p>
1:53c4e12:      * Tests whether message selectors work for non-durable subscribers.
1:53c4e12:      * </p>
1:53c4e12:      */
1:53c4e12:     public void testMessageSelectorForNonDurableSubscribers()
1:53c4e12:     {
1:53c4e12:         runMessageSelectorTest(false);
1:53c4e12:     }
1:c7d559f: 
1:53c4e12:     /**
1:53c4e12:      * <p>
1:53c4e12:      * Tests whether message selectors work. This is done by sending two
1:53c4e12:      * messages to a topic. Both have an int property with different values. Two
1:53c4e12:      * subscribers use message selectors to receive the messages. Each one
1:53c4e12:      * should receive exactly one of the messages.
1:53c4e12:      * </p>
1:53c4e12:      */
1:53c4e12:     private void runMessageSelectorTest(final boolean isDurableSubscriber)
1:53c4e12:     {
1:53c4e12:         try
1:53c4e12:         {
1:53c4e12:             final String PROPERTY_CONSUMER = "consumer";
1:53c4e12:             final String CONSUMER_1 = "Consumer 1";
1:53c4e12:             final String CONSUMER_2 = "Consumer 2";
1:53c4e12:             final String MESSAGE_1 = "Message to " + CONSUMER_1;
1:53c4e12:             final String MESSAGE_2 = "Message to " + CONSUMER_2;
1:53c4e12: 
1:53c4e12:             assertNotNull(connection);
1:53c4e12:             assertNotNull(destination);
1:53c4e12: 
1:53c4e12:             final Session producingSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:53c4e12:             final MessageProducer producer = producingSession.createProducer(destination);
1:53c4e12: 
1:53c4e12:             final Session consumingSession1 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:53c4e12:             final Session consumingSession2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:53c4e12: 
1:53c4e12:             if (isDurableSubscriber)
1:53c4e12:             {
1:53c4e12:                 consumer1 = consumingSession1.createDurableSubscriber
1:53c4e12:                     ((Topic) destination, CONSUMER_1, PROPERTY_CONSUMER + " = 1", false);
1:53c4e12:                 consumer2 = consumingSession2.createDurableSubscriber
1:53c4e12:                     ((Topic) destination, CONSUMER_2, PROPERTY_CONSUMER + " = 2", false);
1:53c4e12:             }
1:53c4e12:             else
1:53c4e12:             {
1:53c4e12:                 consumer1 = consumingSession1.createConsumer(destination, PROPERTY_CONSUMER + " = 1");
1:53c4e12:                 consumer2 = consumingSession2.createConsumer(destination, PROPERTY_CONSUMER + " = 2");
1:53c4e12:             }
1:53c4e12:             registerToBeEmptiedOnShutdown(consumer1);
1:53c4e12:             registerToBeEmptiedOnShutdown(consumer2);
1:53c4e12: 
1:53c4e12:             connection.start();
1:53c4e12: 
1:53c4e12:             TextMessage msg1;
1:53c4e12:             TextMessage msg2;
1:53c4e12:             int propertyValue;
1:53c4e12:             String contents;
1:53c4e12: 
1:53c4e12:             /* Try to receive any messages from the consumers. There shouldn't be any yet. */
1:53c4e12:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:53c4e12:             if (msg1 != null)
1:53c4e12:             {
1:53c4e12:                 final StringBuffer msg = new StringBuffer("The consumer read a message that was left over from a former ActiveMQ broker run.");
1:53c4e12:                 propertyValue = msg1.getIntProperty(PROPERTY_CONSUMER);
1:53c4e12:                 contents = msg1.getText();
1:53c4e12:                 if (propertyValue != 1) // Is the property value as expected?
1:53c4e12:                 {
1:53c4e12:                     msg.append(" That message does not match the consumer's message selector.");
1:53c4e12:                     fail(msg.toString());
1:53c4e12:                 }
1:53c4e12:                 assertEquals(1, propertyValue);
1:53c4e12:                 assertEquals(MESSAGE_1, contents);
1:53c4e12:             }
1:53c4e12:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:53c4e12:             if (msg2 != null)
1:53c4e12:             {
1:53c4e12:                 final StringBuffer msg = new StringBuffer("The consumer read a message that was left over from a former ActiveMQ broker run.");
1:53c4e12:                 propertyValue = msg2.getIntProperty(PROPERTY_CONSUMER);
1:53c4e12:                 contents = msg2.getText();
1:53c4e12:                 if (propertyValue != 2) // Is the property value as expected?
1:53c4e12:                 {
1:53c4e12:                     msg.append(" That message does not match the consumer's message selector.");
1:53c4e12:                     fail(msg.toString());
1:53c4e12:                 }
1:53c4e12:                 assertEquals(2, propertyValue);
1:53c4e12:                 assertEquals(MESSAGE_2, contents);
1:53c4e12:             }
1:53c4e12: 
1:53c4e12:             /* Send two messages. Each is targeted at one of the consumers. */
1:53c4e12:             TextMessage msg;
1:53c4e12:             msg = producingSession.createTextMessage();
1:53c4e12:             msg.setText(MESSAGE_1);
1:53c4e12:             msg.setIntProperty(PROPERTY_CONSUMER, 1);
1:53c4e12:             producer.send(msg);
1:53c4e12: 
1:53c4e12:             msg = producingSession.createTextMessage();
1:53c4e12:             msg.setText(MESSAGE_2);
1:53c4e12:             msg.setIntProperty(PROPERTY_CONSUMER, 2);
1:53c4e12:             producer.send(msg);
1:53c4e12: 
1:53c4e12:             /* Receive the messages that have just been sent. */
1:53c4e12: 
1:53c4e12:             /* Use consumer 1 to receive one of the messages. The receive()
1:53c4e12:              * method is called twice to make sure there is nothing else in
1:53c4e12:              * stock for this consumer. */
1:53c4e12:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:53c4e12:             assertNotNull(msg1);
1:53c4e12:             propertyValue = msg1.getIntProperty(PROPERTY_CONSUMER);
1:53c4e12:             contents = msg1.getText();
1:53c4e12:             assertEquals(1, propertyValue);
1:53c4e12:             assertEquals(MESSAGE_1, contents);
1:53c4e12:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:53c4e12:             assertNull(msg1);
1:53c4e12: 
1:53c4e12:             /* Use consumer 2 to receive the other message. The receive()
1:53c4e12:              * method is called twice to make sure there is nothing else in
1:53c4e12:              * stock for this consumer. */
1:53c4e12:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:53c4e12:             assertNotNull(msg2);
1:53c4e12:             propertyValue = msg2.getIntProperty(PROPERTY_CONSUMER);
1:53c4e12:             contents = msg2.getText();
1:53c4e12:             assertEquals(2, propertyValue);
1:53c4e12:             assertEquals(MESSAGE_2, contents);
1:53c4e12:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:53c4e12:             assertNull(msg2);
1:53c4e12:         }
1:53c4e12:         catch (JMSException ex)
1:53c4e12:         {
1:53c4e12:             ex.printStackTrace();
1:c7d559f:             fail();
1:53c4e12:         }
1:53c4e12:     }
1:53c4e12: 
1:53c4e12: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             fail();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:53c4e12
/////////////////////////////////////////////////////////////////////////
1: /* ====================================================================
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:        http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: ==================================================================== */
1: 
1: package org.apache.activemq.bugs.amq1095;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
0: import junit.framework.Assert;
1: 
1: 
1: /**
1:  * <p>
1:  * Test cases for various ActiveMQ functionalities.
1:  * </p>
0:  * 
1:  * <ul>
1:  * <li>
1:  * <p>
1:  * Durable subscriptions are used.
1:  * </p>
1:  * </li>
1:  * <li>
1:  * <p>
1:  * The Kaha persistence manager is used.
1:  * </p>
1:  * </li>
1:  * <li>
1:  * <p>
1:  * An already existing Kaha directory is used. Everything runs fine if the
1:  * ActiveMQ broker creates a new Kaha directory.
1:  * </p>
1:  * </li>
1:  * </ul>
0:  * 
1:  * @author Rainer Klute <a
1:  *         href="mailto:rainer.klute@dp-itsolutions.de">&lt;rainer.klute@dp-itsolutions.de&gt;</a>
1:  * @since 2007-08-09
1:  * @version $Id: MessageSelectorTest.java 12 2007-08-14 12:02:02Z rke $
1:  */
1: public class MessageSelectorTest extends ActiveMQTestCase {
1: 
1:     private MessageConsumer consumer1;
1:     private MessageConsumer consumer2;
1: 
1:     /** <p>Constructor</p> */
1:     public MessageSelectorTest()
1:     {}
1:     
1:     /** <p>Constructor</p>
1:      * @param name the test case's name
1:      */
1:     public MessageSelectorTest(final String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Tests whether message selectors work for durable subscribers.
1:      * </p>
1:      */
1:     public void testMessageSelectorForDurableSubscribersRunA()
1:     {
1:         runMessageSelectorTest(true);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Tests whether message selectors work for durable subscribers.
1:      * </p>
1:      */
1:     public void testMessageSelectorForDurableSubscribersRunB()
1:     {
1:         runMessageSelectorTest(true);
1:     }
1: 
1:     /**
1:      * <p>
1:      * Tests whether message selectors work for non-durable subscribers.
1:      * </p>
1:      */
1:     public void testMessageSelectorForNonDurableSubscribers()
1:     {
1:         runMessageSelectorTest(false);
1:     }
1:     
1:     /**
1:      * <p>
1:      * Tests whether message selectors work. This is done by sending two
1:      * messages to a topic. Both have an int property with different values. Two
1:      * subscribers use message selectors to receive the messages. Each one
1:      * should receive exactly one of the messages.
1:      * </p>
1:      */
1:     private void runMessageSelectorTest(final boolean isDurableSubscriber)
1:     {
1:         try
1:         {
1:             final String PROPERTY_CONSUMER = "consumer";
1:             final String CONSUMER_1 = "Consumer 1";
1:             final String CONSUMER_2 = "Consumer 2";
1:             final String MESSAGE_1 = "Message to " + CONSUMER_1;
1:             final String MESSAGE_2 = "Message to " + CONSUMER_2;
1: 
1:             assertNotNull(connection);
1:             assertNotNull(destination);
1: 
1:             final Session producingSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final MessageProducer producer = producingSession.createProducer(destination);
1: 
1:             final Session consumingSession1 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             final Session consumingSession2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             if (isDurableSubscriber)
1:             {
1:                 consumer1 = consumingSession1.createDurableSubscriber
1:                     ((Topic) destination, CONSUMER_1, PROPERTY_CONSUMER + " = 1", false);
1:                 consumer2 = consumingSession2.createDurableSubscriber
1:                     ((Topic) destination, CONSUMER_2, PROPERTY_CONSUMER + " = 2", false);
1:             }
1:             else
1:             {
1:                 consumer1 = consumingSession1.createConsumer(destination, PROPERTY_CONSUMER + " = 1");
1:                 consumer2 = consumingSession2.createConsumer(destination, PROPERTY_CONSUMER + " = 2");
1:             }
1:             registerToBeEmptiedOnShutdown(consumer1);
1:             registerToBeEmptiedOnShutdown(consumer2);
1: 
1:             connection.start();
1: 
1:             TextMessage msg1;
1:             TextMessage msg2;
1:             int propertyValue;
1:             String contents;
1: 
1:             /* Try to receive any messages from the consumers. There shouldn't be any yet. */
1:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:             if (msg1 != null)
1:             {
1:                 final StringBuffer msg = new StringBuffer("The consumer read a message that was left over from a former ActiveMQ broker run.");
1:                 propertyValue = msg1.getIntProperty(PROPERTY_CONSUMER);
1:                 contents = msg1.getText();
1:                 if (propertyValue != 1) // Is the property value as expected?
1:                 {
1:                     msg.append(" That message does not match the consumer's message selector.");
1:                     fail(msg.toString());
1:                 }
1:                 assertEquals(1, propertyValue);
1:                 assertEquals(MESSAGE_1, contents);
1:             }
1:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:             if (msg2 != null)
1:             {
1:                 final StringBuffer msg = new StringBuffer("The consumer read a message that was left over from a former ActiveMQ broker run.");
1:                 propertyValue = msg2.getIntProperty(PROPERTY_CONSUMER);
1:                 contents = msg2.getText();
1:                 if (propertyValue != 2) // Is the property value as expected?
1:                 {
1:                     msg.append(" That message does not match the consumer's message selector.");
1:                     fail(msg.toString());
1:                 }
1:                 assertEquals(2, propertyValue);
1:                 assertEquals(MESSAGE_2, contents);
1:             }
1: 
1:             /* Send two messages. Each is targeted at one of the consumers. */
1:             TextMessage msg;
1:             msg = producingSession.createTextMessage();
1:             msg.setText(MESSAGE_1);
1:             msg.setIntProperty(PROPERTY_CONSUMER, 1);
1:             producer.send(msg);
1: 
1:             msg = producingSession.createTextMessage();
1:             msg.setText(MESSAGE_2);
1:             msg.setIntProperty(PROPERTY_CONSUMER, 2);
1:             producer.send(msg);
1: 
1:             /* Receive the messages that have just been sent. */
1: 
1:             /* Use consumer 1 to receive one of the messages. The receive()
1:              * method is called twice to make sure there is nothing else in
1:              * stock for this consumer. */
1:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:             assertNotNull(msg1);
1:             propertyValue = msg1.getIntProperty(PROPERTY_CONSUMER);
1:             contents = msg1.getText();
1:             assertEquals(1, propertyValue);
1:             assertEquals(MESSAGE_1, contents);
1:             msg1 = (TextMessage) consumer1.receive(RECEIVE_TIMEOUT);
1:             assertNull(msg1);
1: 
1:             /* Use consumer 2 to receive the other message. The receive()
1:              * method is called twice to make sure there is nothing else in
1:              * stock for this consumer. */
1:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:             assertNotNull(msg2);
1:             propertyValue = msg2.getIntProperty(PROPERTY_CONSUMER);
1:             contents = msg2.getText();
1:             assertEquals(2, propertyValue);
1:             assertEquals(MESSAGE_2, contents);
1:             msg2 = (TextMessage) consumer2.receive(RECEIVE_TIMEOUT);
1:             assertNull(msg2);
1:         }
1:         catch (JMSException ex)
1:         {
1:             ex.printStackTrace();
0:             Assert.fail();
1:         }
1:     }
1: 
1: }
============================================================================