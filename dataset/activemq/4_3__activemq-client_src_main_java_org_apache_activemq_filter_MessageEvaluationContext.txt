1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * MessageEvaluationContext is used to cache selection results. A message
1:230a86c:  * usually has multiple selectors applied against it. Some selector have a high
1:230a86c:  * cost of evaluating against the message. Those selectors may whish to cache
1:230a86c:  * evaluation results associated with the message in the
1:d29ca2a:  * MessageEvaluationContext.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class MessageEvaluationContext {
1:d29ca2a: 
1:3b0afd6: 	protected MessageReference messageReference;
1:3b0afd6:     protected boolean loaded;
1:3b0afd6:     protected boolean dropped;
1:3b0afd6:     protected Message message;
1:3b0afd6:     protected ActiveMQDestination destination;
1:d29ca2a: 
1:d29ca2a:     public MessageEvaluationContext() {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isDropped() throws IOException {
1:d29ca2a:         getMessage();
1:d29ca2a:         return dropped;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public Message getMessage() throws IOException {
1:230a86c:         if (!dropped && !loaded) {
1:230a86c:             loaded = true;
1:d29ca2a:             messageReference.incrementReferenceCount();
1:d29ca2a:             message = messageReference.getMessage();
1:230a86c:             if (message == null) {
1:d29ca2a:                 messageReference.decrementReferenceCount();
1:230a86c:                 dropped = true;
1:230a86c:                 loaded = false;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return message;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setMessageReference(MessageReference messageReference) {
1:d29ca2a:         if (this.messageReference != messageReference) {
1:d29ca2a:             clearMessageCache();
1:d29ca2a:         }
1:d29ca2a:         this.messageReference = messageReference;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void clear() {
1:d29ca2a:         clearMessageCache();
1:d29ca2a:         destination = null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * A strategy hook to allow per-message caches to be cleared
1:d29ca2a:      */
1:d29ca2a:     protected void clearMessageCache() {
1:230a86c:         if (loaded) {
1:d29ca2a:             messageReference.decrementReferenceCount();
1:d29ca2a:         }
1:230a86c:         message = null;
1:230a86c:         dropped = false;
1:230a86c:         loaded = false;
1:d29ca2a:     }
1:d29ca2a: 
1:af1b232:     public MessageReference getMessageReference() {
1:af1b232:         return messageReference;
1:d29ca2a:     }
1:af1b232: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * MessageEvaluationContext is used to cache selection results. A message
1:  * usually has multiple selectors applied against it. Some selector have a high
1:  * cost of evaluating against the message. Those selectors may whish to cache
1:  * evaluation results associated with the message in the
/////////////////////////////////////////////////////////////////////////
0:     private boolean loaded;
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (!dropped && !loaded) {
1:             loaded = true;
1:             if (message == null) {
1:                 dropped = true;
1:                 loaded = false;
/////////////////////////////////////////////////////////////////////////
1:         if (loaded) {
1:         message = null;
1:         dropped = false;
1:         loaded = false;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: 
1: /**
0:  * MessageEvaluationContext is used to cache selection results.
1:  * 
0:  * A message usually has multiple selectors applied against it. Some selector
0:  * have a high cost of evaluating against the message. Those selectors may whish
0:  * to cache evaluation results associated with the message in the
1:  * MessageEvaluationContext.
1:  * 
0:  * @version $Revision: 1.4 $
1:  */
1: public class MessageEvaluationContext {
1: 
0:     private MessageReference messageReference;
0:     private boolean loaded=false;
0:     private boolean dropped;
0:     private Message message;
0:     private ActiveMQDestination destination;
1: 
1:     public MessageEvaluationContext() {
1:     }
1: 
1:     public boolean isDropped() throws IOException {
1:         getMessage();
1:         return dropped;
1:     }
1:     
1:     public Message getMessage() throws IOException {
0:         if( !dropped && !loaded ) {
0:             loaded=true;
1:             messageReference.incrementReferenceCount();
1:             message = messageReference.getMessage();
0:             if(message==null) {
1:                 messageReference.decrementReferenceCount();
0:                 dropped=true;
0:                 loaded=false;
1:             }
1:         }
1:         return message;
1:     }
1: 
1:     public void setMessageReference(MessageReference messageReference) {
1:         if (this.messageReference != messageReference) {
1:             clearMessageCache();
1:         }
1:         this.messageReference = messageReference;
1:     }
1: 
1:     public void clear() {
1:         clearMessageCache();
1:         destination = null;
1:     }
1: 
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * A strategy hook to allow per-message caches to be cleared
1:      */
1:     protected void clearMessageCache() {
0:         if( loaded ) {
1:             messageReference.decrementReferenceCount();
1:         }
0:         message=null;
0:         dropped=false;
0:         loaded=false;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:af1b232
/////////////////////////////////////////////////////////////////////////
0: 
1:     public MessageReference getMessageReference() {
1:         return messageReference;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:3b0afd6
/////////////////////////////////////////////////////////////////////////
1: 	protected MessageReference messageReference;
1:     protected boolean loaded;
1:     protected boolean dropped;
1:     protected Message message;
1:     protected ActiveMQDestination destination;
============================================================================