1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Matches messages which contain wildcards like "A.B.*.*"
1:b0c2a40:  *
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class WildcardDestinationFilter extends DestinationFilter {
1:d29ca2a: 
1:d29ca2a:     private String[] prefixes;
1:7d5131e:     private byte destinationType;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * An array of paths containing * characters
1:d29ca2a:      *
1:d29ca2a:      * @param prefixes
1:d29ca2a:      */
1:7d5131e:     public WildcardDestinationFilter(String[] prefixes, byte destinationType) {
1:d29ca2a:         this.prefixes = new String[prefixes.length];
1:d29ca2a:         for (int i = 0; i < prefixes.length; i++) {
1:d29ca2a:             String prefix = prefixes[i];
1:d29ca2a:             if (!prefix.equals("*")) {
1:d29ca2a:                 this.prefixes[i] = prefix;
1:d29ca2a:             }
1:d29ca2a:         }
1:7d5131e:         this.destinationType = destinationType;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean matches(ActiveMQDestination destination) {
1:7d5131e:     	if (destination.getDestinationType() != destinationType) return false;
1:d29ca2a:         String[] path = DestinationPath.getDestinationPaths(destination);
1:d29ca2a:         int length = prefixes.length;
1:d29ca2a:         if (path.length == length) {
1:933eb2f:             for (int i = 0; i < length; i++) {
1:d29ca2a:                 String prefix = prefixes[i];
1:d29ca2a:                 if (prefix != null && !prefix.equals(path[i])) {
1:d29ca2a:                     return false;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:             return true;
1:d29ca2a:         }
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:d29ca2a:     public String getText() {
1:d29ca2a:         return DestinationPath.toString(prefixes);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         return super.toString() + "[destination: " + getText() + "]";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isWildcard() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < length; i++) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.filter;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: 
1: /**
1:  * Matches messages which contain wildcards like "A.B.*.*"
1:  *
0:  * @version $Revision: 1.2 $
1:  */
1: public class WildcardDestinationFilter extends DestinationFilter {
1: 
1:     private String[] prefixes;
1: 
1:     /**
1:      * An array of paths containing * characters
1:      *
1:      * @param prefixes
1:      */
0:     public WildcardDestinationFilter(String[] prefixes) {
1:         this.prefixes = new String[prefixes.length];
1:         for (int i = 0; i < prefixes.length; i++) {
1:             String prefix = prefixes[i];
1:             if (!prefix.equals("*")) {
1:                 this.prefixes[i] = prefix;
1:             }
1:         }
1:     }
1: 
1:     public boolean matches(ActiveMQDestination destination) {
1:         String[] path = DestinationPath.getDestinationPaths(destination);
1:         int length = prefixes.length;
1:         if (path.length == length) {
0:             for (int i = 0, size = length; i < size; i++) {
1:                 String prefix = prefixes[i];
1:                 if (prefix != null && !prefix.equals(path[i])) {
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1: 
1:     public String getText() {
1:         return DestinationPath.toString(prefixes);
1:     }
1: 
1:     public String toString() {
1:         return super.toString() + "[destination: " + getText() + "]";
1:     }
1: 
1:     public boolean isWildcard() {
1:         return true;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7d5131e
/////////////////////////////////////////////////////////////////////////
1:     private byte destinationType;
1:     public WildcardDestinationFilter(String[] prefixes, byte destinationType) {
/////////////////////////////////////////////////////////////////////////
1:         this.destinationType = destinationType;
1:     	if (destination.getDestinationType() != destinationType) return false;
============================================================================