1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
1:5170a8b: package org.apache.activemq.store.jdbc;
4:5170a8b: 
1:5170a8b: import java.io.PrintStream;
1:5170a8b: import java.sql.Connection;
1:5170a8b: import java.sql.PreparedStatement;
1:5170a8b: import java.sql.ResultSet;
1:5170a8b: import java.sql.ResultSetMetaData;
1:5170a8b: import java.sql.SQLException;
1:5170a8b: 
1:c6837ac: import javax.sql.DataSource;
1:5170a8b: import org.apache.activemq.broker.BrokerService;
1:5170a8b: import org.apache.activemq.broker.region.cursors.NegativeQueueTest;
1:5170a8b: import org.apache.derby.jdbc.EmbeddedDataSource;
1:5170a8b: 
1:5170a8b: public class JDBCNegativeQueueTest extends NegativeQueueTest {
1:5170a8b: 
1:c6837ac:     DataSource dataSource;
1:5170a8b:     
1:5170a8b:     protected void configureBroker(BrokerService answer) throws Exception {
1:5170a8b:         super.configureBroker(answer);
1:5170a8b:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:5170a8b:         answer.setPersistenceAdapter(jdbc);
1:c6837ac:         dataSource = jdbc.getDataSource();
1:5170a8b:     }
1:5170a8b: 
1:5170a8b:     protected void tearDown() throws Exception {
1:fb591e7:         if (DEBUG) {
1:fb591e7:             printQuery("Select * from ACTIVEMQ_MSGS", System.out);
1:fb591e7:         }
1:5170a8b:         super.tearDown();
1:5170a8b:     }
1:5170a8b:     
1:5170a8b:     
1:fb591e7:     private void printQuery(String query, PrintStream out)
1:5170a8b:             throws SQLException {
1:fb591e7:         Connection conn = dataSource.getConnection();
1:fb591e7:         printQuery(conn.prepareStatement(query), out);
1:fb591e7:         conn.close();
1:5170a8b:     }
1:5170a8b: 
1:5170a8b:     private void printQuery(PreparedStatement s, PrintStream out)
1:5170a8b:             throws SQLException {
1:5170a8b: 
1:5170a8b:         ResultSet set = null;
1:5170a8b:         try {
1:5170a8b:             set = s.executeQuery();
1:5170a8b:             ResultSetMetaData metaData = set.getMetaData();
1:5170a8b:             for (int i = 1; i <= metaData.getColumnCount(); i++) {
1:5170a8b:                 if (i == 1)
1:5170a8b:                     out.print("||");
1:5170a8b:                 out.print(metaData.getColumnName(i) + "||");
1:5170a8b:             }
1:5170a8b:             out.println();
1:5170a8b:             while (set.next()) {
1:5170a8b:                 for (int i = 1; i <= metaData.getColumnCount(); i++) {
1:5170a8b:                     if (i == 1)
1:5170a8b:                         out.print("|");
1:5170a8b:                     out.print(set.getString(i) + "|");
1:5170a8b:                 }
1:5170a8b:                 out.println();
1:5170a8b:             }
1:5170a8b:         } finally {
1:5170a8b:             try {
1:5170a8b:                 set.close();
1:5170a8b:             } catch (Throwable ignore) {
1:5170a8b:             }
1:5170a8b:             try {
1:5170a8b:                 s.close();
1:5170a8b:             } catch (Throwable ignore) {
1:5170a8b:             }
1:5170a8b:         }
1:5170a8b:     }
1:5170a8b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
commit:c6837ac
/////////////////////////////////////////////////////////////////////////
1: import javax.sql.DataSource;
1:     DataSource dataSource;
0:         jdbc.setDataSource(dataSource);
1:         dataSource = jdbc.getDataSource();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:5170a8b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.PrintStream;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.ResultSetMetaData;
1: import java.sql.SQLException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.cursors.NegativeQueueTest;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: public class JDBCNegativeQueueTest extends NegativeQueueTest {
1: 
0:     EmbeddedDataSource dataSource;
1:     
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         super.configureBroker(answer);
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
1:         answer.setPersistenceAdapter(jdbc);
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         /*Connection conn = dataSource.getConnection();
0:         printQuery(conn, "Select * from ACTIVEMQ_MSGS", System.out); */
1:         super.tearDown();
1:     }
1:     
1:     
0:     private void printQuery(Connection c, String query, PrintStream out)
1:             throws SQLException {
0:         printQuery(c.prepareStatement(query), out);
1:     }
1: 
1:     private void printQuery(PreparedStatement s, PrintStream out)
1:             throws SQLException {
1: 
1:         ResultSet set = null;
1:         try {
1:             set = s.executeQuery();
1:             ResultSetMetaData metaData = set.getMetaData();
1:             for (int i = 1; i <= metaData.getColumnCount(); i++) {
1:                 if (i == 1)
1:                     out.print("||");
1:                 out.print(metaData.getColumnName(i) + "||");
1:             }
1:             out.println();
1:             while (set.next()) {
1:                 for (int i = 1; i <= metaData.getColumnCount(); i++) {
1:                     if (i == 1)
1:                         out.print("|");
1:                     out.print(set.getString(i) + "|");
1:                 }
1:                 out.println();
1:             }
1:         } finally {
1:             try {
1:                 set.close();
1:             } catch (Throwable ignore) {
1:             }
1:             try {
1:                 s.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:fb591e7
/////////////////////////////////////////////////////////////////////////
0:         jdbc.setDataSource(dataSource);     
1:         if (DEBUG) {
1:             printQuery("Select * from ACTIVEMQ_MSGS", System.out);
1:         }
1:     private void printQuery(String query, PrintStream out)
1:         Connection conn = dataSource.getConnection();
1:         printQuery(conn.prepareStatement(query), out);
1:         conn.close();
/////////////////////////////////////////////////////////////////////////
============================================================================