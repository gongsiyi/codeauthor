1:816e8df: /**
1:816e8df:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:816e8df:  * contributor license agreements.  See the NOTICE file distributed with
1:816e8df:  * this work for additional information regarding copyright ownership.
1:816e8df:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:816e8df:  * (the "License"); you may not use this file except in compliance with
1:816e8df:  * the License.  You may obtain a copy of the License at
1:816e8df:  *
1:816e8df:  *      http://www.apache.org/licenses/LICENSE-2.0
1:816e8df:  *
1:816e8df:  * Unless required by applicable law or agreed to in writing, software
1:816e8df:  * distributed under the License is distributed on an "AS IS" BASIS,
1:816e8df:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:816e8df:  * See the License for the specific language governing permissions and
1:816e8df:  * limitations under the License.
1:816e8df:  */
1:816e8df: package org.apache.activemq.transport.mqtt;
2:816e8df: 
1:816e8df: import org.apache.activemq.broker.region.Destination;
1:816e8df: import org.apache.activemq.broker.region.RegionBroker;
1:816e8df: import org.eclipse.paho.client.mqttv3.MqttClient;
1:816e8df: import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
1:816e8df: import org.junit.Before;
1:816e8df: import org.junit.Test;
1:816e8df: 
1:816e8df: import javax.jms.MessageConsumer;
1:816e8df: import javax.jms.Session;
1:816e8df: 
1:816e8df: import static org.junit.Assert.assertEquals;
1:816e8df: 
1:816e8df: public class PahoVirtualTopicMQTTTest extends PahoMQTTTest {
1:816e8df: 
1:816e8df:     @Override
1:816e8df:     @Before
1:816e8df:     public void setUp() throws Exception {
1:816e8df:         protocolConfig = "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:816e8df:         super.setUp();
1:816e8df:     }
1:816e8df: 
1:816e8df:     @Override
1:816e8df:     protected MessageConsumer createConsumer(Session s, String topic) throws Exception {
1:816e8df:         return s.createConsumer(s.createQueue("Consumer.X.VirtualTopic." + topic));
1:816e8df:     }
1:816e8df: 
1:816e8df:     @Test(timeout = 300000)
1:816e8df:     public void testVirtualTopicQueueRestore() throws Exception {
1:816e8df:         String user10 = "user10";
1:816e8df:         String password10 = "user10";
1:816e8df:         String clientId10 = "client-10";
1:816e8df:         String topic10 = "user10/";
1:816e8df:         MqttConnectOptions options10 = new MqttConnectOptions();
1:816e8df:         options10.setCleanSession(false);
1:816e8df:         options10.setUserName(user10);
1:816e8df:         options10.setPassword(password10.toCharArray());
1:816e8df:         MqttClient client10 = createClient(false, clientId10, null);
1:816e8df:         client10.subscribe(topic10 + clientId10 + "/#", 1);
1:816e8df:         client10.subscribe(topic10 + "#", 1);
1:816e8df: 
1:816e8df:         String user1 = "user1";
1:816e8df:         String password1 = "user1";
1:816e8df:         String clientId1 = "client-1";
1:816e8df:         String topic1 = "user1/";
1:816e8df:         MqttConnectOptions options1 = new MqttConnectOptions();
1:816e8df:         options1.setCleanSession(false);
1:816e8df:         options1.setUserName(user1);
1:816e8df:         options1.setPassword(password1.toCharArray());
1:816e8df: 
1:816e8df:         MqttClient client1 = createClient(false, clientId1, null);
1:816e8df:         client1.subscribe(topic1 + clientId1 + "/#", 1);
1:816e8df:         client1.subscribe(topic1 + "#", 1);
1:816e8df: 
1:816e8df:         RegionBroker regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:816e8df: 
1:679db08:         for (Destination queue : regionBroker.getQueueRegion().getDestinationMap().values()) {
1:679db08:             assertEquals("Queue " + queue.getActiveMQDestination() + " have more than one consumer", 1, queue.getConsumers().size());
1:816e8df:         }
1:816e8df:     }
1:816e8df: 
1:816e8df: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:679db08
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (Destination queue : regionBroker.getQueueRegion().getDestinationMap().values()) {
1:             assertEquals("Queue " + queue.getActiveMQDestination() + " have more than one consumer", 1, queue.getConsumers().size());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:816e8df
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.eclipse.paho.client.mqttv3.MqttClient;
1: import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class PahoVirtualTopicMQTTTest extends PahoMQTTTest {
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         protocolConfig = "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected MessageConsumer createConsumer(Session s, String topic) throws Exception {
1:         return s.createConsumer(s.createQueue("Consumer.X.VirtualTopic." + topic));
1:     }
1: 
1:     @Test(timeout = 300000)
1:     public void testVirtualTopicQueueRestore() throws Exception {
1:         String user10 = "user10";
1:         String password10 = "user10";
1:         String clientId10 = "client-10";
1:         String topic10 = "user10/";
1:         MqttConnectOptions options10 = new MqttConnectOptions();
1:         options10.setCleanSession(false);
1:         options10.setUserName(user10);
1:         options10.setPassword(password10.toCharArray());
1:         MqttClient client10 = createClient(false, clientId10, null);
1:         client10.subscribe(topic10 + clientId10 + "/#", 1);
1:         client10.subscribe(topic10 + "#", 1);
1: 
1:         String user1 = "user1";
1:         String password1 = "user1";
1:         String clientId1 = "client-1";
1:         String topic1 = "user1/";
1:         MqttConnectOptions options1 = new MqttConnectOptions();
1:         options1.setCleanSession(false);
1:         options1.setUserName(user1);
1:         options1.setPassword(password1.toCharArray());
1: 
1:         MqttClient client1 = createClient(false, clientId1, null);
1:         client1.subscribe(topic1 + clientId1 + "/#", 1);
1:         client1.subscribe(topic1 + "#", 1);
1: 
1:         RegionBroker regionBroker = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1: 
0:         String[] queues = new String[]{"Consumer.client-10:AT_LEAST_ONCE.VirtualTopic.user10.>",
0:                 "Consumer.client-10:AT_LEAST_ONCE.VirtualTopic.user10.client-10.>",
0:                 "Consumer.client-1:AT_LEAST_ONCE.VirtualTopic.user1.>",
0:                 "Consumer.client-1:AT_LEAST_ONCE.VirtualTopic.user1.client-1.>"};
1: 
0:         for (String queueName : queues) {
0:             Destination queue = regionBroker.getQueueRegion().getDestinations(new ActiveMQQueue(queueName)).iterator().next();
0:             assertEquals("Queue " + queueName + " have more than one consumer", 1, queue.getConsumers().size());
1:         }
1:     }
1: 
1: }
============================================================================