1:13044de: /**
1:13044de:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:13044de:  * contributor license agreements.  See the NOTICE file distributed with
1:13044de:  * this work for additional information regarding copyright ownership.
1:13044de:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:13044de:  * (the "License"); you may not use this file except in compliance with
1:13044de:  * the License.  You may obtain a copy of the License at
1:13044de:  *
1:13044de:  *      http://www.apache.org/licenses/LICENSE-2.0
1:13044de:  *
1:13044de:  * Unless required by applicable law or agreed to in writing, software
1:13044de:  * distributed under the License is distributed on an "AS IS" BASIS,
1:13044de:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:13044de:  * See the License for the specific language governing permissions and
1:13044de:  * limitations under the License.
1:13044de:  */
1:13044de: package org.apache.activemq.store.kahadb;
1:13044de: 
1:13044de: import static org.junit.Assert.assertEquals;
1:13044de: import static org.junit.Assert.assertNotNull;
1:13044de: 
1:13044de: import java.io.File;
1:7a7c70a: import java.io.IOException;
1:7a7c70a: import java.util.Arrays;
1:7a7c70a: import java.util.Collection;
1:7a7c70a: import java.util.Iterator;
1:7a7c70a: import java.util.Map.Entry;
1:13044de: 
1:13044de: import javax.jms.Connection;
1:13044de: import javax.jms.ConnectionFactory;
1:13044de: import javax.jms.Message;
1:13044de: import javax.jms.MessageConsumer;
1:13044de: import javax.jms.MessageProducer;
1:13044de: import javax.jms.Queue;
1:13044de: import javax.jms.Session;
1:13044de: import javax.jms.TextMessage;
1:13044de: import javax.jms.Topic;
1:13044de: 
1:13044de: import org.apache.activemq.ActiveMQConnectionFactory;
1:13044de: import org.apache.activemq.broker.BrokerService;
1:13044de: import org.apache.activemq.openwire.OpenWireFormat;
1:7a7c70a: import org.apache.activemq.store.kahadb.MessageDatabase.Metadata;
1:7a7c70a: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1:7a7c70a: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1:7a7c70a: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:7a7c70a: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:7a7c70a: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:7a7c70a: import org.apache.activemq.util.ByteSequence;
1:13044de: import org.apache.activemq.util.IOHelper;
1:7a7c70a: import org.apache.activemq.util.RecoverableRandomAccessFile;
1:13044de: import org.junit.After;
1:13044de: import org.junit.Before;
1:13044de: import org.junit.Rule;
1:13044de: import org.junit.Test;
1:13044de: import org.junit.rules.TestName;
1:13044de: import org.slf4j.Logger;
1:13044de: import org.slf4j.LoggerFactory;
1:13044de: 
1:13044de: public class KahaDBStoreOpenWireVersionTest {
1:13044de: 
1:13044de:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBStoreOpenWireVersionTest.class);
1:13044de: 
1:13044de:     private final String KAHADB_DIRECTORY_BASE = "./target/activemq-data/";
1:13044de:     private final int NUM_MESSAGES = 10;
1:13044de: 
1:13044de:     private BrokerService broker = null;
1:13044de:     private String storeDir;
1:13044de: 
1:13044de:     @Rule public TestName name = new TestName();
1:13044de: 
1:13044de:     protected BrokerService createBroker(int storeOpenWireVersion) throws Exception {
1:13044de:         broker = new BrokerService();
1:13044de:         broker.setUseJmx(false);
1:13044de:         broker.setAdvisorySupport(false);
1:13044de:         broker.setDataDirectory(storeDir);
1:13044de:         broker.setStoreOpenWireVersion(storeOpenWireVersion);
1:7a7c70a:         ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).setCheckForCorruptJournalFiles(true);
1:7a7c70a: 
1:13044de:         broker.start();
1:13044de:         broker.waitUntilStarted();
1:13044de: 
1:13044de:         return broker;
1:13044de:     }
1:13044de: 
1:13044de:     public void stopBroker() throws Exception {
1:13044de:         if (broker != null) {
1:13044de:             broker.stop();
1:13044de:             broker.waitUntilStopped();
1:13044de:         }
1:13044de:     }
1:13044de: 
1:13044de:     @Before
1:13044de:     public void setUp() throws Exception {
1:13044de:         LOG.info("=============== Starting test {} ================", name.getMethodName());
1:13044de:         storeDir = KAHADB_DIRECTORY_BASE + name.getMethodName();
1:13044de:     }
1:13044de: 
1:13044de:     @After
1:13044de:     public void tearDown() throws Exception {
1:13044de:         File brokerStoreDir = new File(KAHADB_DIRECTORY_BASE);
1:13044de: 
1:13044de:         if (broker != null) {
1:13044de:             brokerStoreDir = broker.getPersistenceAdapter().getDirectory();
1:13044de:             stopBroker();
1:13044de:         }
1:13044de: 
1:13044de:         IOHelper.deleteChildren(brokerStoreDir);
1:13044de:         IOHelper.delete(brokerStoreDir);
1:13044de: 
1:13044de:         LOG.info("=============== Finished test {} ================", name.getMethodName());
1:13044de:     }
1:13044de: 
1:13044de:     @Test(timeout = 60000)
1:13044de:     public void testConfiguredVersionWorksOnReload() throws Exception {
1:13044de:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION - 1;
1:13044de:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION - 1;
1:13044de: 
1:13044de:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:13044de:     }
1:13044de: 
1:13044de:     @Test(timeout = 60000)
1:13044de:     public void testOlderVersionWorksWithDefaults() throws Exception {
1:13044de:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_LEGACY_VERSION;
1:13044de:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION;
1:13044de: 
1:13044de:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:13044de:     }
1:13044de: 
1:13044de:     @Test(timeout = 60000)
1:13044de:     public void testNewerVersionWorksWhenOlderIsConfigured() throws Exception {
1:13044de:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION;
1:13044de:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_LEGACY_VERSION;
1:13044de: 
1:13044de:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:13044de:     }
1:13044de: 
1:7a7c70a:     /**
1:7a7c70a:      * This test shows that a corrupted index/rebuild will still
1:7a7c70a:      * honor the storeOpenWireVersion set on the BrokerService.
1:7a7c70a:      * This wasn't the case before AMQ-6082
1:7a7c70a:      */
1:7a7c70a:     @Test(timeout = 60000)
1:7a7c70a:     public void testStoreVersionCorrupt() throws Exception {
1:7a7c70a:         final int create = 6;
1:7a7c70a:         final int reload = 6;
1:7a7c70a: 
1:7a7c70a:         createBroker(create);
1:7a7c70a:         populateStore();
1:7a7c70a: 
1:7a7c70a:         //blow up the index so it has to be recreated
1:7a7c70a:         corruptIndex();
1:7a7c70a:         stopBroker();
1:7a7c70a: 
1:7a7c70a:         createBroker(reload);
1:7a7c70a:         assertEquals(create, broker.getStoreOpenWireVersion());
1:7a7c70a:         assertStoreIsUsable();
1:7a7c70a:     }
1:7a7c70a: 
1:7a7c70a: 
1:7a7c70a:     private void corruptIndex() throws IOException {
1:7a7c70a:         KahaDBStore store = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore();
1:7a7c70a:         final PageFile pageFile = store.getPageFile();
1:7a7c70a:         final Metadata metadata = store.metadata;
1:7a7c70a: 
1:7a7c70a:         //blow up the index
1:7a7c70a:         try {
1:7a7c70a:             store.indexLock.writeLock().lock();
1:7a7c70a:             pageFile.tx().execute(new Transaction.Closure<IOException>() {
1:7a7c70a:                 @Override
1:7a7c70a:                 public void execute(Transaction tx) throws IOException {
1:7a7c70a:                     for (Iterator<Entry<String, StoredDestination>> iterator = metadata.destinations.iterator(tx); iterator
1:7a7c70a:                             .hasNext();) {
1:7a7c70a:                         Entry<String, StoredDestination> entry = iterator.next();
1:7a7c70a:                         entry.getValue().orderIndex.nextMessageId = -100;
1:7a7c70a:                         entry.getValue().orderIndex.defaultPriorityIndex.clear(tx);
1:7a7c70a:                         entry.getValue().orderIndex.lowPriorityIndex.clear(tx);
1:7a7c70a:                         entry.getValue().orderIndex.highPriorityIndex.clear(tx);
1:7a7c70a:                         entry.getValue().messageReferences.clear();
1:7a7c70a:                     }
1:7a7c70a:                 }
1:7a7c70a:             });
1:7a7c70a:         } finally {
1:7a7c70a:             store.indexLock.writeLock().unlock();
1:7a7c70a:         }
1:7a7c70a:     }
1:7a7c70a: 
1:13044de:     private void doTestStoreVersionConfigrationOverrides(int create, int reload) throws Exception {
1:13044de:         createBroker(create);
1:13044de:         populateStore();
1:13044de:         stopBroker();
1:13044de: 
1:13044de:         createBroker(reload);
1:13044de:         assertEquals(create, broker.getStoreOpenWireVersion());
1:13044de:         assertStoreIsUsable();
1:13044de:     }
1:13044de: 
1:13044de:     private void populateStore() throws Exception {
1:13044de: 
1:13044de:         ConnectionFactory factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:13044de:         Connection connection = factory.createConnection();
1:13044de:         connection.setClientID("test");
1:13044de: 
1:13044de:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13044de:         Topic topic = session.createTopic("test.topic");
1:13044de:         Queue queue = session.createQueue("test.queue");
1:13044de:         MessageConsumer consumer = session.createDurableSubscriber(topic, "test");
1:13044de:         consumer.close();
1:13044de: 
1:13044de:         MessageProducer producer = session.createProducer(topic);
1:13044de:         producer.setPriority(9);
1:13044de:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:13044de:             Message msg = session.createTextMessage("test message:" + i);
1:13044de:             producer.send(msg);
1:13044de:         }
1:13044de:         LOG.info("sent {} to topic", NUM_MESSAGES);
1:13044de: 
1:13044de:         producer = session.createProducer(queue);
1:13044de:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:13044de:             Message msg = session.createTextMessage("test message:" + i);
1:13044de:             producer.send(msg);
1:13044de:         }
1:13044de:         LOG.info("sent {} to topic", NUM_MESSAGES);
1:13044de: 
1:13044de:         connection.close();
1:13044de:     }
1:13044de: 
1:13044de:     private void assertStoreIsUsable() throws Exception {
1:13044de:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:13044de:         Connection connection = cf.createConnection();
1:13044de:         connection.setClientID("test");
1:13044de:         connection.start();
1:13044de:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:13044de:         Topic topic = session.createTopic("test.topic");
1:13044de:         Queue queue = session.createQueue("test.queue");
1:13044de: 
1:13044de:         MessageConsumer queueConsumer = session.createConsumer(queue);
1:13044de:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:13044de:             TextMessage received = (TextMessage) queueConsumer.receive(1000);
1:13044de:             assertNotNull(received);
1:13044de:         }
1:13044de:         LOG.info("Consumed {} from queue", NUM_MESSAGES);
1:13044de: 
1:13044de:         MessageConsumer topicConsumer = session.createDurableSubscriber(topic, "test");
1:13044de:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:13044de:             TextMessage received = (TextMessage) topicConsumer.receive(1000);
1:13044de:             assertNotNull(received);
1:13044de:         }
1:13044de:         LOG.info("Consumed {} from topic", NUM_MESSAGES);
1:13044de: 
1:13044de:         connection.close();
1:13044de:     }
1:13044de: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:7a7c70a
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.MessageDatabase.Metadata;
1: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1: import org.apache.activemq.store.kahadb.disk.journal.DataFile;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.RecoverableRandomAccessFile;
/////////////////////////////////////////////////////////////////////////
1:         ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).setCheckForCorruptJournalFiles(true);
1: 
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * This test shows that a corrupted index/rebuild will still
1:      * honor the storeOpenWireVersion set on the BrokerService.
1:      * This wasn't the case before AMQ-6082
1:      */
1:     @Test(timeout = 60000)
1:     public void testStoreVersionCorrupt() throws Exception {
1:         final int create = 6;
1:         final int reload = 6;
1: 
1:         createBroker(create);
1:         populateStore();
1: 
1:         //blow up the index so it has to be recreated
1:         corruptIndex();
1:         stopBroker();
1: 
1:         createBroker(reload);
1:         assertEquals(create, broker.getStoreOpenWireVersion());
1:         assertStoreIsUsable();
1:     }
1: 
1: 
1:     private void corruptIndex() throws IOException {
1:         KahaDBStore store = ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore();
1:         final PageFile pageFile = store.getPageFile();
1:         final Metadata metadata = store.metadata;
1: 
1:         //blow up the index
1:         try {
1:             store.indexLock.writeLock().lock();
1:             pageFile.tx().execute(new Transaction.Closure<IOException>() {
1:                 @Override
1:                 public void execute(Transaction tx) throws IOException {
1:                     for (Iterator<Entry<String, StoredDestination>> iterator = metadata.destinations.iterator(tx); iterator
1:                             .hasNext();) {
1:                         Entry<String, StoredDestination> entry = iterator.next();
1:                         entry.getValue().orderIndex.nextMessageId = -100;
1:                         entry.getValue().orderIndex.defaultPriorityIndex.clear(tx);
1:                         entry.getValue().orderIndex.lowPriorityIndex.clear(tx);
1:                         entry.getValue().orderIndex.highPriorityIndex.clear(tx);
1:                         entry.getValue().messageReferences.clear();
1:                     }
1:                 }
1:             });
1:         } finally {
1:             store.indexLock.writeLock().unlock();
1:         }
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:13044de
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class KahaDBStoreOpenWireVersionTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBStoreOpenWireVersionTest.class);
1: 
1:     private final String KAHADB_DIRECTORY_BASE = "./target/activemq-data/";
1:     private final int NUM_MESSAGES = 10;
1: 
1:     private BrokerService broker = null;
1:     private String storeDir;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     protected BrokerService createBroker(int storeOpenWireVersion) throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setDataDirectory(storeDir);
1:         broker.setStoreOpenWireVersion(storeOpenWireVersion);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         return broker;
1:     }
1: 
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("=============== Starting test {} ================", name.getMethodName());
1:         storeDir = KAHADB_DIRECTORY_BASE + name.getMethodName();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         File brokerStoreDir = new File(KAHADB_DIRECTORY_BASE);
1: 
1:         if (broker != null) {
1:             brokerStoreDir = broker.getPersistenceAdapter().getDirectory();
1:             stopBroker();
1:         }
1: 
1:         IOHelper.deleteChildren(brokerStoreDir);
1:         IOHelper.delete(brokerStoreDir);
1: 
1:         LOG.info("=============== Finished test {} ================", name.getMethodName());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConfiguredVersionWorksOnReload() throws Exception {
1:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION - 1;
1:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION - 1;
1: 
1:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOlderVersionWorksWithDefaults() throws Exception {
1:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_LEGACY_VERSION;
1:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION;
1: 
1:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testNewerVersionWorksWhenOlderIsConfigured() throws Exception {
1:         final int INITIAL_STORE_VERSION = OpenWireFormat.DEFAULT_STORE_VERSION;
1:         final int RELOAD_STORE_VERSION = OpenWireFormat.DEFAULT_LEGACY_VERSION;
1: 
1:         doTestStoreVersionConfigrationOverrides(INITIAL_STORE_VERSION, RELOAD_STORE_VERSION);
1:     }
1: 
1:     private void doTestStoreVersionConfigrationOverrides(int create, int reload) throws Exception {
1:         createBroker(create);
1:         populateStore();
1:         stopBroker();
1: 
1:         createBroker(reload);
1:         assertEquals(create, broker.getStoreOpenWireVersion());
1:         assertStoreIsUsable();
1:     }
1: 
1:     private void populateStore() throws Exception {
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         Connection connection = factory.createConnection();
1:         connection.setClientID("test");
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("test.topic");
1:         Queue queue = session.createQueue("test.queue");
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "test");
1:         consumer.close();
1: 
1:         MessageProducer producer = session.createProducer(topic);
1:         producer.setPriority(9);
1:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:             Message msg = session.createTextMessage("test message:" + i);
1:             producer.send(msg);
1:         }
1:         LOG.info("sent {} to topic", NUM_MESSAGES);
1: 
1:         producer = session.createProducer(queue);
1:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:             Message msg = session.createTextMessage("test message:" + i);
1:             producer.send(msg);
1:         }
1:         LOG.info("sent {} to topic", NUM_MESSAGES);
1: 
1:         connection.close();
1:     }
1: 
1:     private void assertStoreIsUsable() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.setClientID("test");
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic("test.topic");
1:         Queue queue = session.createQueue("test.queue");
1: 
1:         MessageConsumer queueConsumer = session.createConsumer(queue);
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             TextMessage received = (TextMessage) queueConsumer.receive(1000);
1:             assertNotNull(received);
1:         }
1:         LOG.info("Consumed {} from queue", NUM_MESSAGES);
1: 
1:         MessageConsumer topicConsumer = session.createDurableSubscriber(topic, "test");
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             TextMessage received = (TextMessage) topicConsumer.receive(1000);
1:             assertNotNull(received);
1:         }
1:         LOG.info("Consumed {} from topic", NUM_MESSAGES);
1: 
1:         connection.close();
1:     }
1: }
============================================================================