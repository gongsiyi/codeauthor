1:24a7941: /**
1:24a7941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:24a7941:  * contributor license agreements.  See the NOTICE file distributed with
1:24a7941:  * this work for additional information regarding copyright ownership.
1:24a7941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:24a7941:  * (the "License"); you may not use this file except in compliance with
1:24a7941:  * the License.  You may obtain a copy of the License at
1:24a7941:  *
1:24a7941:  *      http://www.apache.org/licenses/LICENSE-2.0
1:24a7941:  *
1:24a7941:  * Unless required by applicable law or agreed to in writing, software
1:24a7941:  * distributed under the License is distributed on an "AS IS" BASIS,
1:24a7941:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:24a7941:  * See the License for the specific language governing permissions and
1:24a7941:  * limitations under the License.
1:24a7941:  */
1:24a7941: package org.apache.activemq.transport.amqp.client;
2:24a7941: 
1:b34336c: import java.util.concurrent.atomic.AtomicReference;
1:b34336c: 
1:24a7941: import org.apache.qpid.proton.amqp.Binary;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Attach;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Begin;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Close;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Detach;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Disposition;
1:24a7941: import org.apache.qpid.proton.amqp.transport.End;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Flow;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Open;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Transfer;
1:24a7941: 
1:24a7941: /**
1:24a7941:  * Abstract base for a validation hook that is used in tests to check
1:b34336c:  * the values of incoming or outgoing AMQP frames.
1:24a7941:  */
1:24a7941: public class AmqpFrameValidator {
1:24a7941: 
1:b34336c:     private AtomicReference<String> errorMessage = new AtomicReference<String>();
1:24a7941: 
1:24a7941:     public void inspectOpen(Open open, Binary encoded) {
1:24a7941: 
2:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectBegin(Begin begin, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectAttach(Attach attach, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectFlow(Flow flow, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectTransfer(Transfer transfer, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectDisposition(Disposition disposition, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectDetach(Detach detach, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectEnd(End end, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public void inspectClose(Close close, Binary encoded) {
1:24a7941: 
1:24a7941:     }
1:24a7941: 
1:24a7941:     public boolean isValid() {
1:b34336c:         return errorMessage.get() != null;
1:24a7941:     }
1:24a7941: 
1:b34336c:     public final void clearErrorMessage() {
1:b34336c:         errorMessage.set(null);
1:24a7941:     }
1:24a7941: 
1:b34336c:     public final String getErrorMessage() {
1:b34336c:         return errorMessage.get();
1:24a7941:     }
1:24a7941: 
1:b34336c:     protected final boolean markAsInvalid(String message) {
1:b34336c:         if (message == null) {
1:b34336c:             throw new NullPointerException("Provided error message cannot be null!");
1:24a7941:         }
1:b34336c: 
1:b34336c:         return errorMessage.compareAndSet(null, message);
1:24a7941:     }
1:24a7941: 
1:b34336c:     public final void assertValid() {
1:b34336c:         final String assertionErrorMessage = errorMessage.get();
1:b34336c:         if (assertionErrorMessage != null) {
1:b34336c:             throw new AssertionError(assertionErrorMessage);
1:24a7941:         }
1:24a7941:     }
1:24a7941: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b34336c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * the values of incoming or outgoing AMQP frames.
1:     private AtomicReference<String> errorMessage = new AtomicReference<String>();
/////////////////////////////////////////////////////////////////////////
1:         return errorMessage.get() != null;
1:     public final void clearErrorMessage() {
1:         errorMessage.set(null);
1:     public final String getErrorMessage() {
1:         return errorMessage.get();
1:     protected final boolean markAsInvalid(String message) {
1:         if (message == null) {
1:             throw new NullPointerException("Provided error message cannot be null!");
1: 
1:         return errorMessage.compareAndSet(null, message);
1:     public final void assertValid() {
1:         final String assertionErrorMessage = errorMessage.get();
1:         if (assertionErrorMessage != null) {
1:             throw new AssertionError(assertionErrorMessage);
commit:24a7941
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.transport.Attach;
1: import org.apache.qpid.proton.amqp.transport.Begin;
1: import org.apache.qpid.proton.amqp.transport.Close;
1: import org.apache.qpid.proton.amqp.transport.Detach;
1: import org.apache.qpid.proton.amqp.transport.Disposition;
1: import org.apache.qpid.proton.amqp.transport.End;
1: import org.apache.qpid.proton.amqp.transport.Flow;
1: import org.apache.qpid.proton.amqp.transport.Open;
1: import org.apache.qpid.proton.amqp.transport.Transfer;
1: 
1: /**
1:  * Abstract base for a validation hook that is used in tests to check
0:  * the state of a remote resource after a variety of lifecycle events.
1:  */
1: public class AmqpFrameValidator {
1: 
0:     private boolean valid = true;
0:     private String errorMessage;
1: 
1:     public void inspectOpen(Open open, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectBegin(Begin begin, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectAttach(Attach attach, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectFlow(Flow flow, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectTransfer(Transfer transfer, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectDisposition(Disposition disposition, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectDetach(Detach detach, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectEnd(End end, Binary encoded) {
1: 
1:     }
1: 
1:     public void inspectClose(Close close, Binary encoded) {
1: 
1:     }
1: 
1:     public boolean isValid() {
0:         return valid;
1:     }
1: 
0:     protected void setValid(boolean valid) {
0:         this.valid = valid;
1:     }
1: 
0:     public String getErrorMessage() {
0:         return errorMessage;
1:     }
1: 
0:     protected void setErrorMessage(String errorMessage) {
0:         this.errorMessage = errorMessage;
1:     }
1: 
0:     protected void markAsInvalid(String errorMessage) {
0:         if (valid) {
0:             setValid(false);
0:             setErrorMessage(errorMessage);
1:         }
1:     }
1: 
0:     public void assertValid() {
0:         if (!isValid()) {
0:             throw new AssertionError(errorMessage);
1:         }
1:     }
1: }
============================================================================