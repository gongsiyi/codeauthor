1:b7dc057: /**
1:b7dc057:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b7dc057:  * contributor license agreements.  See the NOTICE file distributed with
1:b7dc057:  * this work for additional information regarding copyright ownership.
1:b7dc057:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b7dc057:  * (the "License"); you may not use this file except in compliance with
1:b7dc057:  * the License.  You may obtain a copy of the License at
1:b7dc057:  *
1:b7dc057:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b7dc057:  *
1:b7dc057:  * Unless required by applicable law or agreed to in writing, software
1:b7dc057:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b7dc057:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b7dc057:  * See the License for the specific language governing permissions and
1:b7dc057:  * limitations under the License.
1:b7dc057:  */
1:b7dc057: package org.apache.activemq.camel.component;
4:b7dc057: 
1:b7dc057: import static org.junit.Assert.assertNotNull;
1:b7dc057: 
1:f84e416: import java.util.concurrent.TimeUnit;
1:f84e416: 
1:b7dc057: import org.apache.activemq.ActiveMQConnectionFactory;
1:b7dc057: import org.apache.activemq.broker.BrokerService;
1:b7dc057: import org.apache.activemq.pool.PooledConnectionFactory;
1:b7dc057: import org.apache.camel.CamelContext;
1:b7dc057: import org.apache.camel.ProducerTemplate;
1:b7dc057: import org.apache.camel.builder.RouteBuilder;
1:b7dc057: import org.apache.camel.impl.DefaultCamelContext;
1:b7dc057: import org.junit.After;
1:b7dc057: import org.junit.Before;
1:b7dc057: import org.junit.Test;
1:b7dc057: import org.slf4j.Logger;
1:b7dc057: import org.slf4j.LoggerFactory;
1:b7dc057: 
1:b7dc057: public class ComplexRequestReplyTest {
1:b7dc057: 
1:b7dc057:     private static final Logger LOG = LoggerFactory.getLogger(ComplexRequestReplyTest.class);
1:b7dc057: 
1:b7dc057:     private BrokerService brokerA = null;
1:b7dc057:     private BrokerService brokerB = null;
1:b7dc057:     private CamelContext senderContext = null;
1:b7dc057:     private CamelContext brokerAContext = null;
1:b7dc057:     private CamelContext brokerBContext = null;
1:b7dc057: 
1:b7dc057:     private final String fromEndpoint = "direct:test";
1:b7dc057:     private final String toEndpoint = "activemq:queue:send";
1:b7dc057:     private final String brokerEndpoint = "activemq:send";
1:b7dc057: 
1:09756d5:     private String brokerAUri;
1:09756d5:     private String brokerBUri;
1:09756d5: 
1:09756d5:     private String connectionUri;
1:b7dc057: 
1:b7dc057:     @Before
1:b7dc057:     public void setUp() throws Exception {
1:b7dc057: 
1:b7dc057:         createBrokerA();
1:09756d5:         brokerAUri = brokerA.getTransportConnectors().get(0).getPublishableConnectString();
1:b7dc057:         createBrokerB();
1:09756d5:         brokerBUri = brokerB.getTransportConnectors().get(0).getPublishableConnectString();
1:b7dc057: 
1:09756d5:         connectionUri = "failover:(" + brokerAUri + "," + brokerBUri + ")?randomize=false";
1:b7dc057:         senderContext = createSenderContext();
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     @After
1:b7dc057:     public void tearDown() throws Exception {
1:dc33c59:         try {
1:dc33c59:             shutdownBrokerA();
1:dc33c59:         } catch (Exception ex) {}
1:dc33c59: 
1:dc33c59:         try {
1:dc33c59:             shutdownBrokerB();
1:dc33c59:         } catch (Exception e) {}
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     @Test
1:b7dc057:     public void testSendThenFailoverThenSend() throws Exception {
1:b7dc057: 
1:b7dc057:         ProducerTemplate requester = senderContext.createProducerTemplate();
1:b7dc057:         LOG.info("*** Sending Request 1");
1:b7dc057:         String response = (String) requester.requestBody(fromEndpoint, "This is a request");
1:b7dc057:         assertNotNull(response != null);
1:b7dc057:         LOG.info("Got response: " + response);
1:b7dc057: 
1:b7dc057:         /**
1:b7dc057:          * You actually don't need to restart the broker, just wait long enough and the next
1:b7dc057:          * next send will take out a closed connection and reconnect, and if you happen to hit
1:b7dc057:          * the broker you weren't on last time, then you will see the failure.
1:b7dc057:          */
1:b7dc057: 
1:b7dc057:         TimeUnit.SECONDS.sleep(20);
1:b7dc057: 
1:b7dc057:         /**
1:b7dc057:          * I restart the broker after the wait that exceeds the idle timeout value of the
1:b7dc057:          * PooledConnectionFactory to show that it doesn't matter now as the older connection
1:b7dc057:          * has already been closed.
1:b7dc057:          */
1:b7dc057:         LOG.info("Restarting Broker A now.");
2:b7dc057:         shutdownBrokerA();
1:b7dc057:         createBrokerA();
1:b7dc057: 
1:b7dc057:         LOG.info("*** Sending Request 2");
1:b7dc057:         response = (String) requester.requestBody(fromEndpoint, "This is a request");
1:b7dc057:         assertNotNull(response != null);
1:b7dc057:         LOG.info("Got response: " + response);
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private CamelContext createSenderContext() throws Exception {
1:b7dc057: 
1:b7dc057:         ActiveMQConnectionFactory amqFactory = new ActiveMQConnectionFactory(connectionUri);
1:b7dc057:         amqFactory.setWatchTopicAdvisories(false);
1:b7dc057: 
1:b7dc057:         PooledConnectionFactory pooled = new PooledConnectionFactory(amqFactory);
1:b7dc057:         pooled.setMaxConnections(1);
1:09756d5:         pooled.setMaximumActiveSessionPerConnection(500);
1:b7dc057:         // If this is not zero the connection could get closed and the request
1:b7dc057:         // reply can fail.
1:b7dc057:         pooled.setIdleTimeout(0);
1:b7dc057: 
1:b7dc057:         CamelContext camelContext = new DefaultCamelContext();
1:b7dc057:         ActiveMQComponent amqComponent = new ActiveMQComponent();
1:b7dc057:         amqComponent.setConnectionFactory(pooled);
1:b7dc057:         camelContext.addComponent("activemq", amqComponent);
1:b7dc057:         camelContext.addRoutes(new RouteBuilder() {
1:b7dc057:             @Override
1:b7dc057:             public void configure() throws Exception {
1:b7dc057:                 from(fromEndpoint).inOut(toEndpoint);
1:b7dc057:             }
1:b7dc057:         });
1:b7dc057:         camelContext.start();
1:b7dc057: 
1:b7dc057:         return camelContext;
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private void createBrokerA() throws Exception {
1:09756d5:         brokerA = createBroker("brokerA");
1:b7dc057:         brokerAContext = createBrokerCamelContext("brokerA");
1:b7dc057:         brokerA.start();
1:b7dc057:         brokerA.waitUntilStarted();
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private void shutdownBrokerA() throws Exception {
1:dc33c59:         try {
1:dc33c59:             brokerAContext.stop();
1:dc33c59:         } catch (Exception e) {
1:dc33c59:             brokerA.stop();
1:dc33c59:             brokerA.waitUntilStopped();
1:dc33c59:             brokerA = null;
1:dc33c59:         }
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private void createBrokerB() throws Exception {
1:09756d5:         brokerB = createBroker("brokerB");
1:b7dc057:         brokerBContext = createBrokerCamelContext("brokerB");
1:b7dc057:         brokerB.start();
1:b7dc057:         brokerB.waitUntilStarted();
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private void shutdownBrokerB() throws Exception {
1:dc33c59:         try {
1:dc33c59:             brokerBContext.stop();
1:dc33c59:         } finally {
1:dc33c59:             brokerB.stop();
1:dc33c59:             brokerB.waitUntilStopped();
1:dc33c59:             brokerB = null;
1:dc33c59:         }
1:b7dc057:     }
1:b7dc057: 
1:09756d5:     private BrokerService createBroker(String name) throws Exception {
1:b7dc057:         BrokerService service = new BrokerService();
1:b7dc057:         service.setPersistent(false);
1:b7dc057:         service.setUseJmx(false);
1:b7dc057:         service.setBrokerName(name);
1:09756d5:         service.addConnector("tcp://localhost:0");
1:b7dc057: 
1:b7dc057:         return service;
1:b7dc057:     }
1:b7dc057: 
1:b7dc057:     private CamelContext createBrokerCamelContext(String brokerName) throws Exception {
1:b7dc057: 
1:b7dc057:         CamelContext camelContext = new DefaultCamelContext();
1:b7dc057:         camelContext.addComponent("activemq",
1:b7dc057:                 ActiveMQComponent.activeMQComponent("vm://"+brokerName+"?create=false&waitForStart=10000"));
1:b7dc057:         camelContext.addRoutes(new RouteBuilder() {
1:b7dc057:             @Override
1:b7dc057:             public void configure() throws Exception {
1:b7dc057:                 from(brokerEndpoint).setBody().simple("Returning ${body}").log("***Reply sent to ${header.JMSReplyTo} CoorId = ${header.JMSCorrelationID}");
1:b7dc057:             }
1:b7dc057:         });
1:b7dc057:         camelContext.start();
1:b7dc057:         return camelContext;
1:b7dc057:     }
1:b7dc057: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:dc33c59
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             shutdownBrokerA();
1:         } catch (Exception ex) {}
1: 
1:         try {
1:             shutdownBrokerB();
1:         } catch (Exception e) {}
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             brokerAContext.stop();
1:         } catch (Exception e) {
1:             brokerA.stop();
1:             brokerA.waitUntilStopped();
1:             brokerA = null;
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             brokerBContext.stop();
1:         } finally {
1:             brokerB.stop();
1:             brokerB.waitUntilStopped();
1:             brokerB = null;
1:         }
commit:09756d5
/////////////////////////////////////////////////////////////////////////
1:     private String brokerAUri;
1:     private String brokerBUri;
1: 
1:     private String connectionUri;
1:         brokerAUri = brokerA.getTransportConnectors().get(0).getPublishableConnectString();
1:         brokerBUri = brokerB.getTransportConnectors().get(0).getPublishableConnectString();
1:         connectionUri = "failover:(" + brokerAUri + "," + brokerBUri + ")?randomize=false";
/////////////////////////////////////////////////////////////////////////
1:         pooled.setMaximumActiveSessionPerConnection(500);
/////////////////////////////////////////////////////////////////////////
1:         brokerA = createBroker("brokerA");
/////////////////////////////////////////////////////////////////////////
1:         brokerB = createBroker("brokerB");
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService createBroker(String name) throws Exception {
1:         service.addConnector("tcp://localhost:0");
/////////////////////////////////////////////////////////////////////////
commit:f84e416
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
commit:b7dc057
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.ProducerTemplate;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import scala.actors.threadpool.TimeUnit;
1: 
1: public class ComplexRequestReplyTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ComplexRequestReplyTest.class);
1: 
1:     private BrokerService brokerA = null;
1:     private BrokerService brokerB = null;
1:     private CamelContext senderContext = null;
1:     private CamelContext brokerAContext = null;
1:     private CamelContext brokerBContext = null;
1: 
1:     private final String fromEndpoint = "direct:test";
1:     private final String toEndpoint = "activemq:queue:send";
1:     private final String brokerEndpoint = "activemq:send";
1: 
0:     private final String connectionUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)?randomize=false";
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         createBrokerA();
1:         createBrokerB();
1: 
1:         senderContext = createSenderContext();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         shutdownBrokerA();
0:         shutdownBrokerB();
1:     }
1: 
1:     @Test
1:     public void testSendThenFailoverThenSend() throws Exception {
1: 
1:         ProducerTemplate requester = senderContext.createProducerTemplate();
1:         LOG.info("*** Sending Request 1");
1:         String response = (String) requester.requestBody(fromEndpoint, "This is a request");
1:         assertNotNull(response != null);
1:         LOG.info("Got response: " + response);
1: 
1:         /**
1:          * You actually don't need to restart the broker, just wait long enough and the next
1:          * next send will take out a closed connection and reconnect, and if you happen to hit
1:          * the broker you weren't on last time, then you will see the failure.
1:          */
1: 
1:         TimeUnit.SECONDS.sleep(20);
1: 
1:         /**
1:          * I restart the broker after the wait that exceeds the idle timeout value of the
1:          * PooledConnectionFactory to show that it doesn't matter now as the older connection
1:          * has already been closed.
1:          */
1:         LOG.info("Restarting Broker A now.");
1:         shutdownBrokerA();
1:         createBrokerA();
1: 
1:         LOG.info("*** Sending Request 2");
1:         response = (String) requester.requestBody(fromEndpoint, "This is a request");
1:         assertNotNull(response != null);
1:         LOG.info("Got response: " + response);
1:     }
1: 
1:     private CamelContext createSenderContext() throws Exception {
1: 
1:         ActiveMQConnectionFactory amqFactory = new ActiveMQConnectionFactory(connectionUri);
1:         amqFactory.setWatchTopicAdvisories(false);
1: 
1:         PooledConnectionFactory pooled = new PooledConnectionFactory(amqFactory);
1:         pooled.setMaxConnections(1);
0:         pooled.setMaximumActive(500);
1:         // If this is not zero the connection could get closed and the request
1:         // reply can fail.
1:         pooled.setIdleTimeout(0);
1: 
1:         CamelContext camelContext = new DefaultCamelContext();
1:         ActiveMQComponent amqComponent = new ActiveMQComponent();
1:         amqComponent.setConnectionFactory(pooled);
1:         camelContext.addComponent("activemq", amqComponent);
1:         camelContext.addRoutes(new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from(fromEndpoint).inOut(toEndpoint);
1:             }
1:         });
1:         camelContext.start();
1: 
1:         return camelContext;
1:     }
1: 
1:     private void createBrokerA() throws Exception {
0:         brokerA = createBroker("brokerA", 61616);
1:         brokerAContext = createBrokerCamelContext("brokerA");
1:         brokerA.start();
1:         brokerA.waitUntilStarted();
1:     }
1: 
1:     private void shutdownBrokerA() throws Exception {
0:         brokerAContext.stop();
0:         brokerA.stop();
0:         brokerA.waitUntilStopped();
0:         brokerA = null;
1:     }
1: 
1:     private void createBrokerB() throws Exception {
0:         brokerB = createBroker("brokerB", 61617);
1:         brokerBContext = createBrokerCamelContext("brokerB");
1:         brokerB.start();
1:         brokerB.waitUntilStarted();
1:     }
1: 
1:     private void shutdownBrokerB() throws Exception {
0:         brokerBContext.stop();
0:         brokerB.stop();
0:         brokerB.waitUntilStopped();
0:         brokerB = null;
1:     }
1: 
0:     private BrokerService createBroker(String name, int port) throws Exception {
1: 
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         service.setBrokerName(name);
0:         service.addConnector("tcp://localhost:" + Integer.toString(port));
1: 
1:         return service;
1:     }
1: 
1:     private CamelContext createBrokerCamelContext(String brokerName) throws Exception {
1: 
1:         CamelContext camelContext = new DefaultCamelContext();
1:         camelContext.addComponent("activemq",
1:                 ActiveMQComponent.activeMQComponent("vm://"+brokerName+"?create=false&waitForStart=10000"));
1:         camelContext.addRoutes(new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from(brokerEndpoint).setBody().simple("Returning ${body}").log("***Reply sent to ${header.JMSReplyTo} CoorId = ${header.JMSCorrelationID}");
1:             }
1:         });
1:         camelContext.start();
1:         return camelContext;
1:     }
1: 
1: }
============================================================================