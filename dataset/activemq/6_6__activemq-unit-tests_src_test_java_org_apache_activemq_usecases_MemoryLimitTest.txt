1:7450a32: /**
1:7450a32:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7450a32:  * contributor license agreements.  See the NOTICE file distributed with
1:7450a32:  * this work for additional information regarding copyright ownership.
1:7450a32:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7450a32:  * (the "License"); you may not use this file except in compliance with
1:7450a32:  * the License.  You may obtain a copy of the License at
3:7450a32:  *
1:7450a32:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7450a32:  *
1:7450a32:  * Unless required by applicable law or agreed to in writing, software
1:7450a32:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7450a32:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7450a32:  * See the License for the specific language governing permissions and
1:7450a32:  * limitations under the License.
1:7450a32:  */
1:7450a32: package org.apache.activemq.usecases;
1:b4f880a: 
1:caae68a: import java.util.Arrays;
1:540d8c7: 
1:35115fe: import javax.jms.BytesMessage;
1:540d8c7: import javax.jms.Connection;
1:540d8c7: import javax.jms.Message;
1:540d8c7: import javax.jms.MessageConsumer;
1:540d8c7: import javax.jms.Queue;
1:540d8c7: import javax.jms.Session;
1:1cab713: 
1:7450a32: import org.apache.activemq.ActiveMQConnectionFactory;
1:7450a32: import org.apache.activemq.TestSupport;
1:7450a32: import org.apache.activemq.broker.BrokerService;
1:1cab713: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:7450a32: import org.apache.activemq.broker.region.Destination;
1:7450a32: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7450a32: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7450a32: import org.apache.activemq.command.ActiveMQQueue;
1:7450a32: import org.apache.activemq.util.ConsumerThread;
1:7450a32: import org.apache.activemq.util.ProducerThread;
1:ae84399: import org.apache.activemq.util.Wait;
1:7450a32: import org.junit.After;
1:7450a32: import org.junit.Before;
1:7450a32: import org.junit.Ignore;
1:7450a32: import org.junit.Test;
1:7450a32: import org.junit.runner.RunWith;
1:7450a32: import org.junit.runners.Parameterized;
1:7450a32: import org.slf4j.Logger;
1:7450a32: import org.slf4j.LoggerFactory;
1:b4f880a: 
1:7450a32: @RunWith(value = Parameterized.class)
1:7450a32: public class MemoryLimitTest extends TestSupport {
1:7450a32:     private static final Logger LOG = LoggerFactory.getLogger(MemoryLimitTest.class);
1:35115fe:     final byte[] payload = new byte[10 * 1024]; //10KB
1:7450a32:     protected BrokerService broker;
9:7450a32: 
1:caae68a:     @Parameterized.Parameter
1:caae68a:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1:7450a32: 
1:266d23e:     @Parameterized.Parameters(name="store={0}")
1:caae68a:     public static Iterable<Object[]> getTestParameters() {
1:caae68a:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB}, {PersistenceAdapterChoice.LevelDB}, {PersistenceAdapterChoice.JDBC}});
4:7450a32:     }
1:7450a32: 
1:7450a32:     protected BrokerService createBroker() throws Exception {
1:7450a32:         BrokerService broker = new BrokerService();
1:7450a32:         broker.getSystemUsage().getMemoryUsage().setLimit(1 * 1024 * 1024); //1MB
1:7450a32:         broker.deleteAllMessages();
1:7450a32: 
1:7450a32:         PolicyMap policyMap = new PolicyMap();
1:7450a32:         PolicyEntry policyEntry = new PolicyEntry();
1:d5c25c0:         policyEntry.setExpireMessagesPeriod(0); // when this fires it will consume 2*pageSize mem which will throw the test
1:7450a32:         policyEntry.setProducerFlowControl(false);
1:7450a32:         policyMap.put(new ActiveMQQueue(">"), policyEntry);
1:7450a32:         broker.setDestinationPolicy(policyMap);
1:7450a32: 
1:7450a32:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:7450a32:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:7450a32:         broker.getPersistenceAdapter().deleteAllMessages();
1:7450a32: 
1:7450a32:         return broker;
1:7450a32:     }
1:7450a32: 
1:ae84399:     @Override
1:7450a32:     @Before
1:7450a32:     public void setUp() throws Exception {
1:7450a32:         if (broker == null) {
1:7450a32:             broker = createBroker();
1:7450a32:         }
1:7450a32:         broker.start();
1:7450a32:         broker.waitUntilStarted();
1:7450a32:     }
1:7450a32: 
1:b4f880a:     @Override
1:7450a32:     @After
1:7450a32:     public void tearDown() throws Exception {
1:7450a32:         if (broker != null) {
1:7450a32:             broker.stop();
1:7450a32:             broker.waitUntilStopped();
1:7450a32:         }
1:7450a32:     }
1:7450a32: 
1:70ef9b7:     @Test(timeout = 640000)
1:7450a32:     public void testCursorBatch() throws Exception {
1:7450a32: 
1:7450a32:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:7450a32:         factory.setOptimizeAcknowledge(true);
1:7450a32:         Connection conn = factory.createConnection();
1:7450a32:         conn.start();
1:7450a32:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:7450a32:         Queue queue = sess.createQueue("STORE");
1:7450a32:         final ProducerThread producer = new ProducerThread(sess, queue) {
1:b4f880a:             @Override
1:7450a32:             protected Message createMessage(int i) throws Exception {
1:9f0ab46:                 BytesMessage bytesMessage = session.createBytesMessage();
1:35115fe:                 bytesMessage.writeBytes(payload);
1:35115fe:                 return bytesMessage;
1:7450a32:             }
1:7450a32:         };
1:7450a32:         producer.setMessageCount(2000);
1:7450a32:         producer.start();
1:7450a32:         producer.join();
1:7450a32: 
2:7450a32:         Thread.sleep(1000);
1:7450a32: 
1:7450a32:         // assert we didn't break high watermark (70%) usage
1:ae84399:         final Destination dest = broker.getDestination((ActiveMQQueue) queue);
1:ae84399:         LOG.info("Destination usage: " + dest.getMemoryUsage());
1:b4f880a:         int percentUsage = dest.getMemoryUsage().getPercentUsage();
1:d8cf54b:         assertTrue("Should be less than 70% of limit but was: " + percentUsage, percentUsage <= 71);
1:7450a32:         LOG.info("Broker usage: " + broker.getSystemUsage().getMemoryUsage());
1:d8cf54b:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() <= 71);
1:7450a32: 
1:7450a32:         // consume one message
1:7450a32:         MessageConsumer consumer = sess.createConsumer(queue);
1:54e2e3b:         Message msg = consumer.receive(5000);
1:7450a32:         msg.acknowledge();
1:7450a32: 
1:13ec994:         // this should free some space and allow us to get new batch of messages in the memory
1:13ec994:         // exceeding the limit
1:13ec994:         assertTrue("Limit is exceeded", Wait.waitFor(new Wait.Condition() {
1:13ec994:             @Override
1:13ec994:             public boolean isSatisified() throws Exception {
1:13ec994:                 LOG.info("Destination usage: " + dest.getMemoryUsage());
1:13ec994:                 return dest.getMemoryUsage().getPercentUsage() >= 200;
1:13ec994:             }
1:13ec994:         }));
1:13ec994: 
1:7450a32:         LOG.info("Broker usage: " + broker.getSystemUsage().getMemoryUsage());
1:13ec994:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 200);
1:ae84399: 
1:7450a32:         // let's make sure we can consume all messages
1:7450a32:         for (int i = 1; i < 2000; i++) {
1:caae68a:             msg = consumer.receive(5000);
1:caae68a:             if (msg == null) {
1:caae68a:                 dumpAllThreads("NoMessage");
1:caae68a:             }
1:7450a32:             assertNotNull("Didn't receive message " + i, msg);
1:7450a32:             msg.acknowledge();
1:ae84399:         }
1:7450a32:     }
1:7450a32: 
1:1cab713:     @Test(timeout = 120000)
1:1cab713:     public void testMoveMessages() throws Exception {
1:1cab713:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:1cab713:         factory.setOptimizeAcknowledge(true);
1:1cab713:         Connection conn = factory.createConnection();
1:1cab713:         conn.start();
1:1cab713:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:1cab713:         Queue queue = sess.createQueue("IN");
1:1cab713:         final byte[] payload = new byte[200 * 1024]; //200KB
1:1cab713:         final int count = 4;
1:1cab713:         final ProducerThread producer = new ProducerThread(sess, queue) {
1:1cab713:             @Override
1:1cab713:             protected Message createMessage(int i) throws Exception {
1:1cab713:                 BytesMessage bytesMessage = session.createBytesMessage();
1:1cab713:                 bytesMessage.writeBytes(payload);
1:1cab713:                 return bytesMessage;
1:1cab713:             }
1:1cab713:         };
1:1cab713:         producer.setMessageCount(count);
1:1cab713:         producer.start();
1:1cab713:         producer.join();
1:1cab713: 
1:1cab713:         Thread.sleep(1000);
1:1cab713: 
1:1cab713:         final QueueViewMBean in = getProxyToQueue("IN");
1:1cab713:         Wait.waitFor(new Wait.Condition() {
1:1cab713:             @Override
1:1cab713:             public boolean isSatisified() throws Exception {
1:1cab713:                 return in.getQueueSize() == count;
1:1cab713:             }
1:1cab713:         });
1:1cab713: 
1:1cab713:         assertEquals("Messages not sent" , count, in.getQueueSize());
1:1cab713: 
1:1cab713:         int moved = in.moveMatchingMessagesTo("", "OUT");
1:1cab713: 
1:1cab713:         assertEquals("Didn't move all messages", count, moved);
1:1cab713: 
1:1cab713: 
1:1cab713:         final QueueViewMBean out = getProxyToQueue("OUT");
1:1cab713: 
1:1cab713:         Wait.waitFor(new Wait.Condition() {
1:1cab713:             @Override
1:1cab713:             public boolean isSatisified() throws Exception {
1:1cab713:                 return out.getQueueSize() == count;
1:1cab713:             }
1:1cab713:         });
1:1cab713: 
1:1cab713:         assertEquals("Messages not moved" , count, out.getQueueSize());
1:1cab713: 
1:1cab713:     }
1:1cab713: 
1:7450a32:     /**
1:7450a32:      * Handy test for manually checking what's going on
1:7450a32:      */
1:7450a32:     @Ignore
2:7450a32:     @Test(timeout = 120000)
1:7450a32:     public void testLimit() throws Exception {
1:7450a32: 
1:7450a32:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:7450a32:         factory.setOptimizeAcknowledge(true);
1:7450a32:         Connection conn = factory.createConnection();
1:7450a32:         conn.start();
1:7450a32:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7450a32:         final ProducerThread producer = new ProducerThread(sess, sess.createQueue("STORE.1")) {
2:7450a32:             @Override
1:7450a32:             protected Message createMessage(int i) throws Exception {
1:9f0ab46:                 return session.createTextMessage(payload + "::" + i);
1:7450a32:             }
1:7450a32:         };
1:7450a32:         producer.setMessageCount(1000);
1:7450a32: 
1:7450a32:         final ProducerThread producer2 = new ProducerThread(sess, sess.createQueue("STORE.2")) {
1:7450a32:             @Override
1:7450a32:             protected Message createMessage(int i) throws Exception {
1:9f0ab46:                 return session.createTextMessage(payload + "::" + i);
1:7450a32:             }
1:7450a32:         };
1:7450a32:         producer2.setMessageCount(1000);
1:7450a32: 
1:7450a32:         ConsumerThread consumer = new ConsumerThread(sess, sess.createQueue("STORE.1"));
1:7450a32:         consumer.setBreakOnNull(false);
1:7450a32:         consumer.setMessageCount(1000);
1:7450a32: 
1:7450a32:         producer.start();
1:7450a32:         producer.join();
1:7450a32: 
1:7450a32:         producer2.start();
1:7450a32: 
1:7450a32:         Thread.sleep(300);
1:7450a32: 
1:7450a32:         consumer.start();
1:7450a32: 
1:7450a32:         consumer.join();
1:7450a32:         producer2.join();
1:7450a32: 
1:7450a32:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
1:1cab713:     }
1:1cab713: 
1:7450a32: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:13ec994
/////////////////////////////////////////////////////////////////////////
1:         // this should free some space and allow us to get new batch of messages in the memory
1:         // exceeding the limit
1:         assertTrue("Limit is exceeded", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Destination usage: " + dest.getMemoryUsage());
1:                 return dest.getMemoryUsage().getPercentUsage() >= 200;
1:             }
1:         }));
1: 
1:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 200);
commit:d8cf54b
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Should be less than 70% of limit but was: " + percentUsage, percentUsage <= 71);
1:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() <= 71);
commit:d5c25c0
/////////////////////////////////////////////////////////////////////////
1:         policyEntry.setExpireMessagesPeriod(0); // when this fires it will consume 2*pageSize mem which will throw the test
commit:be919fb
/////////////////////////////////////////////////////////////////////////
commit:35115fe
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
/////////////////////////////////////////////////////////////////////////
1:     final byte[] payload = new byte[10 * 1024]; //10KB
/////////////////////////////////////////////////////////////////////////
0:                 BytesMessage bytesMessage = sess.createBytesMessage();
1:                 bytesMessage.writeBytes(payload);
1:                 return bytesMessage;
/////////////////////////////////////////////////////////////////////////
0:                 return dest.getMemoryUsage().getPercentUsage() >= 200;
0:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 200);
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer.receive(5000);
/////////////////////////////////////////////////////////////////////////
0:                 return dest.getMemoryUsage().getPercentUsage() >= 470;
0:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 470);
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1:     @Parameterized.Parameters(name="store={0}")
commit:caae68a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:     @Parameterized.Parameter
1:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
0:     @Parameterized.Parameters(name="{0}")
1:     public static Iterable<Object[]> getTestParameters() {
1:         return Arrays.asList(new Object[][]{{TestSupport.PersistenceAdapterChoice.KahaDB}, {PersistenceAdapterChoice.LevelDB}, {PersistenceAdapterChoice.JDBC}});
/////////////////////////////////////////////////////////////////////////
1:             msg = consumer.receive(5000);
1:             if (msg == null) {
1:                dumpAllThreads("NoMessage");
1:             }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:70ef9b7
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 640000)
/////////////////////////////////////////////////////////////////////////
0:                 dumpAllThreads("NoMessage");
commit:540d8c7
/////////////////////////////////////////////////////////////////////////
1: 
0: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
0:         policyEntry.setExpireMessagesPeriod(0);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:1cab713
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
1: 
0: import org.apache.activemq.broker.BrokerRegistry;
0: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 120000)
1:     public void testMoveMessages() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:         factory.setOptimizeAcknowledge(true);
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = sess.createQueue("IN");
1:         final byte[] payload = new byte[200 * 1024]; //200KB
1:         final int count = 4;
1:         final ProducerThread producer = new ProducerThread(sess, queue) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
1:                 BytesMessage bytesMessage = session.createBytesMessage();
1:                 bytesMessage.writeBytes(payload);
1:                 return bytesMessage;
1:             }
1:         };
1:         producer.setMessageCount(count);
1:         producer.start();
1:         producer.join();
1: 
1:         Thread.sleep(1000);
1: 
1:         final QueueViewMBean in = getProxyToQueue("IN");
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return in.getQueueSize() == count;
1:             }
1:         });
1: 
1:         assertEquals("Messages not sent" , count, in.getQueueSize());
1: 
1:         int moved = in.moveMatchingMessagesTo("", "OUT");
1: 
1:         assertEquals("Didn't move all messages", count, moved);
1: 
1: 
1:         final QueueViewMBean out = getProxyToQueue("OUT");
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return out.getQueueSize() == count;
1:             }
1:         });
1: 
1:         assertEquals("Messages not moved" , count, out.getQueueSize());
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
0:         BrokerService brokerService = BrokerRegistry.getInstance().lookup("localhost");
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
0:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
0:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
0:         return proxy;
1:     }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1:                 BytesMessage bytesMessage = session.createBytesMessage();
/////////////////////////////////////////////////////////////////////////
1:                 return session.createTextMessage(payload + "::" + i);
/////////////////////////////////////////////////////////////////////////
1:                 return session.createTextMessage(payload + "::" + i);
author:Gary Tully
-------------------------------------------------------------------------------
commit:ae84399
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         final Destination dest = broker.getDestination((ActiveMQQueue) queue);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("Limit is exceeded", Wait.waitFor(new Wait.Condition() {
1:             @Override
0:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Destination usage: " + dest.getMemoryUsage());
0:                 return dest.getMemoryUsage().getPercentUsage() >= 478;
1:             }
0:         }));
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b4f880a
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         int percentUsage = dest.getMemoryUsage().getPercentUsage();
0:         assertTrue("Should be less than 70% of limit but was: " + percentUsage, percentUsage <= 71);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7450a32
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.apache.activemq.util.ProducerThread;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
1: 
1: @RunWith(value = Parameterized.class)
1: public class MemoryLimitTest extends TestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryLimitTest.class);
0:     final String payload = new String(new byte[10 * 1024]); //10KB
1:     protected BrokerService broker;
1: 
0:     private final TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1: 
0:     @Parameterized.Parameters
0:     public static Collection<TestSupport.PersistenceAdapterChoice[]> getTestParameters() {
0:         TestSupport.PersistenceAdapterChoice[] kahaDb = {TestSupport.PersistenceAdapterChoice.KahaDB};
0:         TestSupport.PersistenceAdapterChoice[] levelDb = {TestSupport.PersistenceAdapterChoice.LevelDB};
0:         TestSupport.PersistenceAdapterChoice[] jdbc = {TestSupport.PersistenceAdapterChoice.JDBC};
0:         List<TestSupport.PersistenceAdapterChoice[]> choices = new ArrayList<TestSupport.PersistenceAdapterChoice[]>();
0:         choices.add(kahaDb);
0:         choices.add(levelDb);
0:         choices.add(jdbc);
0:         return choices;
1:     }
1: 
0:     public MemoryLimitTest(TestSupport.PersistenceAdapterChoice choice) {
0:         this.persistenceAdapterChoice = choice;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1 * 1024 * 1024); //1MB
1:         broker.deleteAllMessages();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setProducerFlowControl(false);
1:         policyMap.put(new ActiveMQQueue(">"), policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         LOG.info("Starting broker with persistenceAdapterChoice " + persistenceAdapterChoice.toString());
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:         broker.getPersistenceAdapter().deleteAllMessages();
1: 
1:         return broker;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 120000)
1:     public void testCursorBatch() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:         factory.setOptimizeAcknowledge(true);
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = sess.createQueue("STORE");
1:         final ProducerThread producer = new ProducerThread(sess, queue) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
0:                 return sess.createTextMessage(payload + "::" + i);
1:             }
1:         };
1:         producer.setMessageCount(2000);
1:         producer.start();
1:         producer.join();
1: 
1:         Thread.sleep(1000);
1: 
1:         // assert we didn't break high watermark (70%) usage
0:         Destination dest = broker.getDestination((ActiveMQQueue) queue);
0:         LOG.info("Destination usage: " + dest.getMemoryUsage());
0:         assertTrue(dest.getMemoryUsage().getPercentUsage() <= 71);
1:         LOG.info("Broker usage: " + broker.getSystemUsage().getMemoryUsage());
0:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() <= 71);
1: 
1:         // consume one message
1:         MessageConsumer consumer = sess.createConsumer(queue);
0:         Message msg = consumer.receive();
1:         msg.acknowledge();
1: 
1:         Thread.sleep(1000);
0:         // this should free some space and allow us to get new batch of messages in the memory
0:         // exceeding the limit
0:         LOG.info("Destination usage: " + dest.getMemoryUsage());
0:         assertTrue(dest.getMemoryUsage().getPercentUsage() >= 478);
1:         LOG.info("Broker usage: " + broker.getSystemUsage().getMemoryUsage());
0:         assertTrue(broker.getSystemUsage().getMemoryUsage().getPercentUsage() >= 478);
1: 
1:         // let's make sure we can consume all messages
1:         for (int i = 1; i < 2000; i++) {
0:             msg = consumer.receive(1000);
1:             assertNotNull("Didn't receive message " + i, msg);
1:             msg.acknowledge();
1:         }
1: 
1:     }
1: 
1:     /**
1:      *
1:      * Handy test for manually checking what's going on
1:      *
1:      */
1:     @Ignore
1:     @Test(timeout = 120000)
1:     public void testLimit() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=10");
1:         factory.setOptimizeAcknowledge(true);
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final ProducerThread producer = new ProducerThread(sess, sess.createQueue("STORE.1")) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
0:                 return sess.createTextMessage(payload + "::" + i);
1:             }
1:         };
1:         producer.setMessageCount(1000);
1: 
1:         final ProducerThread producer2 = new ProducerThread(sess, sess.createQueue("STORE.2")) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
0:                 return sess.createTextMessage(payload + "::" + i);
1:             }
1:         };
1:         producer2.setMessageCount(1000);
1: 
1: 
1:         ConsumerThread consumer = new ConsumerThread(sess, sess.createQueue("STORE.1"));
1:         consumer.setBreakOnNull(false);
1:         consumer.setMessageCount(1000);
1: 
1:         producer.start();
1:         producer.join();
1: 
1:         producer2.start();
1: 
1:         Thread.sleep(300);
1: 
1:         consumer.start();
1: 
1:         consumer.join();
1:         producer2.join();
1: 
1:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
1: 
1:     }
1: }
============================================================================