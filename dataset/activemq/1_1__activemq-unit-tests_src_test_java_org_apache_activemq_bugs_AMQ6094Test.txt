1:e3df09b: /**
1:e3df09b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3df09b:  * contributor license agreements.  See the NOTICE file distributed with
1:e3df09b:  * this work for additional information regarding copyright ownership.
1:e3df09b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3df09b:  * (the "License"); you may not use this file except in compliance with
1:e3df09b:  * the License.  You may obtain a copy of the License at
1:e3df09b:  * <p/>
1:e3df09b:  * http://www.apache.org/licenses/LICENSE-2.0
1:e3df09b:  * <p/>
1:e3df09b:  * Unless required by applicable law or agreed to in writing, software
1:e3df09b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3df09b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3df09b:  * See the License for the specific language governing permissions and
1:e3df09b:  * limitations under the License.
1:e3df09b:  */
1:e3df09b: package org.apache.activemq.bugs;
1:e3df09b: 
1:e3df09b: 
1:e3df09b: import java.util.ArrayList;
1:e3df09b: 
1:e3df09b: import javax.jms.Connection;
1:e3df09b: import javax.jms.DeliveryMode;
1:e3df09b: import javax.jms.Message;
1:e3df09b: import javax.jms.MessageConsumer;
1:e3df09b: import javax.jms.MessageProducer;
1:e3df09b: import javax.jms.Session;
1:e3df09b: 
1:e3df09b: import org.apache.activemq.ActiveMQConnectionFactory;
1:e3df09b: import org.apache.activemq.broker.BrokerService;
1:e3df09b: import org.apache.activemq.broker.TransportConnector;
1:e3df09b: import org.apache.activemq.broker.region.Queue;
1:e3df09b: import org.apache.activemq.command.ActiveMQQueue;
1:e3df09b: import org.junit.After;
1:e3df09b: import org.junit.Before;
1:e3df09b: import org.junit.Test;
1:e3df09b: import org.slf4j.Logger;
1:e3df09b: import org.slf4j.LoggerFactory;
1:e3df09b: 
1:e3df09b: 
1:e3df09b: import static org.junit.Assert.assertEquals;
1:e3df09b: 
1:e3df09b: public class AMQ6094Test {
1:e3df09b: 
1:e3df09b:     private static Logger LOG = LoggerFactory.getLogger(AMQ6094Test.class);
1:e3df09b: 
1:e3df09b:     private BrokerService brokerService;
1:e3df09b:     private String connectionUri;
1:e3df09b: 
1:e3df09b:     @Before
1:e3df09b:     public void before() throws Exception {
1:e3df09b:         brokerService = new BrokerService();
1:e3df09b:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e3df09b:         connectionUri = connector.getPublishableConnectString();
1:e3df09b:         brokerService.setDeleteAllMessagesOnStartup(true);
1:e3df09b:         brokerService.start();
1:e3df09b:         brokerService.waitUntilStarted();
1:e3df09b:     }
1:e3df09b: 
1:e3df09b:     @After
1:e3df09b:     public void after() throws Exception {
1:e3df09b:         if (brokerService != null) {
1:e3df09b:             brokerService.stop();
1:e3df09b:             brokerService.waitUntilStopped();
1:e3df09b:         }
1:e3df09b:     }
1:e3df09b: 
1:e3df09b:     @Test
1:e3df09b: 	public void testQueueMemoryUsage() throws Exception {
1:e3df09b: 
1:e3df09b:         final ArrayList<ThreadSlot> producerThreads = new ArrayList<>();
1:e3df09b: 
1:e3df09b: 		final ArrayList<ThreadSlot> consumerThreads = new ArrayList<>();
1:e3df09b: 
1:e3df09b: 		for (int i = 0; i < 4; i++)
1:e3df09b: 			producerThreads.add(runInThread(new UnsafeRunnable() {
1:e3df09b: 
1:e3df09b:                 @Override
1:e3df09b:                 public void run() throws Exception {
1:e3df09b:                     producer(connectionUri, "queueA");
1:e3df09b:                 }
1:e3df09b: 
1:e3df09b: 			}));
1:e3df09b: 
1:e3df09b: 		for (int i = 0; i < 4; i++)
1:e3df09b: 			consumerThreads.add(runInThread(new UnsafeRunnable() {
1:e3df09b: 
1:e3df09b:                 @Override
1:e3df09b:                 public void run() throws Exception {
1:e3df09b:                     consumer(connectionUri, "queueA", 2500);
1:e3df09b:                 }
1:e3df09b:             }));
1:e3df09b: 
1:e3df09b: 		// kill and restart random threads
1:e3df09b: 		for (int count = 0; count < 10; count++) {
1:e3df09b: 			Thread.sleep(5000);
1:e3df09b: 			final int i = (int) (Math.random() * consumerThreads.size());
1:e3df09b: 			final ThreadSlot slot = consumerThreads.get(i);
1:e3df09b: 			slot.thread.interrupt();
1:e3df09b: 			consumerThreads.remove(i);
1:e3df09b: 			consumerThreads.add(runInThread(slot.runnable));
1:e3df09b: 
1:e3df09b: 			Queue queue = (Queue) brokerService.getDestination(new ActiveMQQueue("queueA"));
1:e3df09b: 			LOG.info("cursorMemoryUsage: " + queue.getMessages().
1:e3df09b: 			        getSystemUsage().getMemoryUsage().getUsage());
1:e3df09b:             LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1:e3df09b: 
1:e3df09b: 		}
1:e3df09b: 
1:e3df09b:         // verify usage
1:e3df09b:         Queue queue = (Queue) brokerService.getDestination(new ActiveMQQueue("queueA"));
1:e3df09b:         LOG.info("cursorMemoryUsage: " + queue.getMessages().
1:e3df09b:                 getSystemUsage().getMemoryUsage().getUsage());
1:e3df09b:         LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1:e3df09b: 
1:e3df09b:         // drain the queue
1:e3df09b:         for (ThreadSlot threadSlot: producerThreads) {
1:e3df09b:             threadSlot.thread.interrupt();
1:e3df09b:             threadSlot.thread.join(4000);
1:e3df09b:         }
1:e3df09b: 
1:e3df09b:         for (ThreadSlot threadSlot : consumerThreads) {
1:e3df09b:             threadSlot.thread.interrupt();
1:e3df09b:             threadSlot.thread.join(4000);
1:e3df09b:         }
1:e3df09b: 
1:e3df09b:         consumer(connectionUri, "queueA", 2500, true);
1:e3df09b: 
1:e3df09b:         LOG.info("After drain, cursorMemoryUsage: " + queue.getMessages().
1:e3df09b:                 getSystemUsage().getMemoryUsage().getUsage());
1:e3df09b:         LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1:e3df09b: 
1:e3df09b:         assertEquals("Queue memory usage to 0", 0, queue.getMessages().
1:e3df09b:                 getSystemUsage().getMemoryUsage().getUsage());
1:e3df09b: 
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b: 	public static void producer(String uri, String topic) throws Exception {
1:e3df09b: 		final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:e3df09b: 		        uri + "?jms.useCompression=true&jms.useAsyncSend=true&daemon=true");
1:e3df09b: 
1:e3df09b: 		Connection connection = factory.createConnection();
1:e3df09b: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e3df09b:         MessageProducer producer = session.createProducer(new ActiveMQQueue(topic));
1:e3df09b: 
1:e3df09b: 		producer.setTimeToLive(6000);
1:e3df09b: 		producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:e3df09b: 
1:e3df09b: 		while (true) {
1:e3df09b: 			producer.send(session.createTextMessage(msg()));
1:e3df09b: 			if (Math.random() > 0.5)
1:e3df09b: 				Thread.sleep(1);
1:e3df09b: 		}
1:e3df09b: 
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b:     public static void consumer(String uri, String queue, int prefetchSize) throws Exception {
1:e3df09b:         consumer(uri, queue, prefetchSize, false);
1:e3df09b:     }
1:e3df09b: 
1:e3df09b: 	public static void consumer(String uri, String queue, int prefetchSize, boolean drain) throws Exception {
1:e3df09b: 		final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:e3df09b: 				uri + "?jms.prefetchPolicy.queuePrefetch=" + prefetchSize + "&jms.useAsyncSend=true");
1:e3df09b: 
1:e3df09b: 		Connection connection = null;
1:e3df09b: 		try {
1:e3df09b: 			connection = factory.createConnection();
1:e3df09b: 			connection.start();
1:e3df09b: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e3df09b: 			MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queue));
1:e3df09b:             if (drain) {
1:e3df09b:                 Message message = null;
1:e3df09b:                 do {
1:e3df09b:                     message = consumer.receive(4000);
1:e3df09b:                 } while (message != null);
1:e3df09b:             } else {
1:e3df09b:                 // block
1:e3df09b:                 while (true) {
1:e3df09b:                     consumer.receive();
1:e3df09b:                 }
1:e3df09b:             }
1:e3df09b: 		} finally {
1:e3df09b: 
1:e3df09b:             Thread.interrupted();
1:e3df09b: 			if (!drain) {
1:e3df09b:                 Thread.sleep(5000); // delay closing of connection
1:e3df09b:             }
1:e3df09b: 
1:e3df09b: 			LOG.info("Now closing");
1:e3df09b: 			if (connection != null)
1:e3df09b: 				connection.close();
1:e3df09b: 		}
1:e3df09b: 
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b: 	private static String msg() {
1:e3df09b: 		final StringBuilder builder = new StringBuilder();
1:e3df09b: 		for (int i = 0; i < 100; i++)
1:e3df09b: 			builder.append("123457890");
1:e3df09b: 
1:e3df09b: 		return builder.toString();
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b: 	private static interface UnsafeRunnable {
1:e3df09b: 		public void run() throws Exception;
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b: 	public static class ThreadSlot {
1:e3df09b: 		private UnsafeRunnable runnable;
1:e3df09b: 		private Thread thread;
1:e3df09b: 	}
1:e3df09b: 
1:e3df09b: 	public static ThreadSlot runInThread(final UnsafeRunnable runnable) {
1:e3df09b: 		final Thread thread = new Thread(new Runnable() {
1:e3df09b: 
1:e3df09b:             @Override
1:e3df09b:             public void run() {
1:e3df09b:                 try {
1:e3df09b:                     runnable.run();
1:e3df09b:                 } catch (Exception e) {
1:e3df09b:                     //e.printStackTrace();
1:e3df09b:                 }
1:e3df09b: 
1:e3df09b:             }
1:e3df09b:         });
1:e3df09b: 
1:e3df09b: 		thread.start();
1:e3df09b: 
1:e3df09b: 		final ThreadSlot result = new ThreadSlot();
1:e3df09b: 		result.thread = thread;
1:e3df09b: 		result.runnable = runnable;
1:e3df09b: 		return result;
1:e3df09b: 	}
1:e3df09b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e3df09b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: 
1: import java.util.ArrayList;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class AMQ6094Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ6094Test.class);
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = new BrokerService();
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         connectionUri = connector.getPublishableConnectString();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1: 	public void testQueueMemoryUsage() throws Exception {
1: 
1:         final ArrayList<ThreadSlot> producerThreads = new ArrayList<>();
1: 
1: 		final ArrayList<ThreadSlot> consumerThreads = new ArrayList<>();
1: 
1: 		for (int i = 0; i < 4; i++)
1: 			producerThreads.add(runInThread(new UnsafeRunnable() {
1: 
1:                 @Override
1:                 public void run() throws Exception {
1:                     producer(connectionUri, "queueA");
1:                 }
1: 
1: 			}));
1: 
1: 		for (int i = 0; i < 4; i++)
1: 			consumerThreads.add(runInThread(new UnsafeRunnable() {
1: 
1:                 @Override
1:                 public void run() throws Exception {
1:                     consumer(connectionUri, "queueA", 2500);
1:                 }
1:             }));
1: 
1: 		// kill and restart random threads
1: 		for (int count = 0; count < 10; count++) {
1: 			Thread.sleep(5000);
1: 			final int i = (int) (Math.random() * consumerThreads.size());
1: 			final ThreadSlot slot = consumerThreads.get(i);
1: 			slot.thread.interrupt();
1: 			consumerThreads.remove(i);
1: 			consumerThreads.add(runInThread(slot.runnable));
1: 
1: 			Queue queue = (Queue) brokerService.getDestination(new ActiveMQQueue("queueA"));
1: 			LOG.info("cursorMemoryUsage: " + queue.getMessages().
1: 			        getSystemUsage().getMemoryUsage().getUsage());
1:             LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1: 
1: 		}
1: 
1:         // verify usage
1:         Queue queue = (Queue) brokerService.getDestination(new ActiveMQQueue("queueA"));
1:         LOG.info("cursorMemoryUsage: " + queue.getMessages().
1:                 getSystemUsage().getMemoryUsage().getUsage());
1:         LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1: 
1:         // drain the queue
1:         for (ThreadSlot threadSlot: producerThreads) {
1:             threadSlot.thread.interrupt();
1:             threadSlot.thread.join(4000);
1:         }
1: 
1:         for (ThreadSlot threadSlot : consumerThreads) {
1:             threadSlot.thread.interrupt();
1:             threadSlot.thread.join(4000);
1:         }
1: 
1:         consumer(connectionUri, "queueA", 2500, true);
1: 
1:         LOG.info("After drain, cursorMemoryUsage: " + queue.getMessages().
1:                 getSystemUsage().getMemoryUsage().getUsage());
1:         LOG.info("messagesStat: " + queue.getDestinationStatistics().getMessages().getCount());
1: 
1:         assertEquals("Queue memory usage to 0", 0, queue.getMessages().
1:                 getSystemUsage().getMemoryUsage().getUsage());
1: 
1: 	}
1: 
1: 	public static void producer(String uri, String topic) throws Exception {
1: 		final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1: 		        uri + "?jms.useCompression=true&jms.useAsyncSend=true&daemon=true");
1: 
1: 		Connection connection = factory.createConnection();
1: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue(topic));
1: 
1: 		producer.setTimeToLive(6000);
1: 		producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1: 		while (true) {
1: 			producer.send(session.createTextMessage(msg()));
1: 			if (Math.random() > 0.5)
1: 				Thread.sleep(1);
1: 		}
1: 
1: 	}
1: 
1:     public static void consumer(String uri, String queue, int prefetchSize) throws Exception {
1:         consumer(uri, queue, prefetchSize, false);
1:     }
1: 
1: 	public static void consumer(String uri, String queue, int prefetchSize, boolean drain) throws Exception {
1: 		final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1: 				uri + "?jms.prefetchPolicy.queuePrefetch=" + prefetchSize + "&jms.useAsyncSend=true");
1: 
1: 		Connection connection = null;
1: 		try {
1: 			connection = factory.createConnection();
1: 			connection.start();
1: 			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 			MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queue));
1:             if (drain) {
1:                 Message message = null;
1:                 do {
1:                     message = consumer.receive(4000);
1:                 } while (message != null);
1:             } else {
1:                 // block
1:                 while (true) {
1:                     consumer.receive();
1:                 }
1:             }
1: 		} finally {
1: 
1:             Thread.interrupted();
1: 			if (!drain) {
1:                 Thread.sleep(5000); // delay closing of connection
1:             }
1: 
1: 			LOG.info("Now closing");
1: 			if (connection != null)
1: 				connection.close();
1: 		}
1: 
1: 	}
1: 
1: 	private static String msg() {
1: 		final StringBuilder builder = new StringBuilder();
1: 		for (int i = 0; i < 100; i++)
1: 			builder.append("123457890");
1: 
1: 		return builder.toString();
1: 	}
1: 
1: 	private static interface UnsafeRunnable {
1: 		public void run() throws Exception;
1: 	}
1: 
1: 	public static class ThreadSlot {
1: 		private UnsafeRunnable runnable;
1: 		private Thread thread;
1: 	}
1: 
1: 	public static ThreadSlot runInThread(final UnsafeRunnable runnable) {
1: 		final Thread thread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     runnable.run();
1:                 } catch (Exception e) {
1:                     //e.printStackTrace();
1:                 }
1: 
1:             }
1:         });
1: 
1: 		thread.start();
1: 
1: 		final ThreadSlot result = new ThreadSlot();
1: 		result.thread = thread;
1: 		result.runnable = runnable;
1: 		return result;
1: 	}
1: }
============================================================================