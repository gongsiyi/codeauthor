1:57f5d49: /**
1:57f5d49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5d49:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5d49:  * this work for additional information regarding copyright ownership.
1:57f5d49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5d49:  * (the "License"); you may not use this file except in compliance with
1:57f5d49:  * the License.  You may obtain a copy of the License at
1:57f5d49:  *
1:57f5d49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5d49:  *
1:57f5d49:  * Unless required by applicable law or agreed to in writing, software
1:57f5d49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5d49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5d49:  * See the License for the specific language governing permissions and
1:57f5d49:  * limitations under the License.
1:57f5d49:  */
1:57f5d49: package org.apache.activemq.usecases;
1:57f5d49: 
1:57f5d49: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:57f5d49: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:57f5d49: import org.apache.activemq.util.Wait;
1:57f5d49: import org.junit.Test;
1:57f5d49: import org.junit.runner.RunWith;
1:57f5d49: import org.junit.runners.Parameterized;
1:57f5d49: import org.slf4j.Logger;
1:57f5d49: import org.slf4j.LoggerFactory;
1:57f5d49: 
1:57f5d49: import javax.jms.Connection;
1:57f5d49: import javax.jms.Message;
1:57f5d49: import javax.jms.MessageConsumer;
1:57f5d49: import javax.jms.MessageProducer;
1:57f5d49: import javax.jms.Session;
1:57f5d49: import javax.management.ObjectName;
1:57f5d49: import java.util.ArrayList;
1:57f5d49: import java.util.Collection;
1:57f5d49: import java.util.List;
1:57f5d49: 
1:57f5d49: import static org.junit.Assert.*;
1:57f5d49: 
1:57f5d49: 
1:57f5d49: @RunWith(value = Parameterized.class)
1:57f5d49: public class DurableSubscriptionOffline2Test extends DurableSubscriptionOfflineTestBase {
1:57f5d49: 
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline2Test.class);
1:57f5d49: 
1:57f5d49:     @Parameterized.Parameters(name = "{0}")
1:57f5d49:     public static Collection<Boolean[]> getTestParameters() {
1:57f5d49:         Boolean[] f = {Boolean.FALSE};
1:57f5d49:         Boolean[] t = {Boolean.TRUE};
1:57f5d49:         List<Boolean[]> booleanChoices = new ArrayList<Boolean[]>();
1:57f5d49:         booleanChoices.add(f);
1:57f5d49:         booleanChoices.add(t);
1:57f5d49: 
1:57f5d49:         return booleanChoices;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public DurableSubscriptionOffline2Test(Boolean keepDurableSubsActive) {
1:57f5d49:         this.keepDurableSubsActive = keepDurableSubsActive.booleanValue();
1:57f5d49: 
1:57f5d49:         LOG.info(">>>> running {} with keepDurableSubsActive: {}", testName.getMethodName(), this.keepDurableSubsActive);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49: 
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     public void testJMXCountersWithOfflineSubs() throws Exception {
1:57f5d49:         // create durable subscription 1
1:57f5d49:         Connection con = createConnection("cliId1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // restart broker
1:57f5d49:         broker.stop();
1:57f5d49:         createBroker(false /*deleteAllMessages*/);
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // consume some messages
1:57f5d49:         con = createConnection("cliId1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49: 
1:57f5d49:         for (int i=0; i<sent/2; i++) {
1:57f5d49:             Message m =  consumer.receive(4000);
1:57f5d49:             assertNotNull("got message: " + i, m);
1:57f5d49:             LOG.info("Got :" + i + ", " + m);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         // check some counters while active
1:57f5d49:         ObjectName activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];
1:57f5d49:         LOG.info("active durable sub name: " + activeDurableSubName);
1:57f5d49:         final DurableSubscriptionViewMBean durableSubscriptionView = (DurableSubscriptionViewMBean)
1:57f5d49:                 broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);
1:57f5d49: 
1:57f5d49:         assertTrue("is active", durableSubscriptionView.isActive());
1:57f5d49:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView.getEnqueueCounter());
1:57f5d49:         assertTrue("correct waiting acks", Wait.waitFor(new Wait.Condition() {
1:57f5d49:             @Override
1:57f5d49:             public boolean isSatisified() throws Exception {
1:57f5d49:                 return 5 == durableSubscriptionView.getMessageCountAwaitingAcknowledge();
1:57f5d49:             }
1:57f5d49:         }));
1:57f5d49:         assertEquals("correct dequeue", 5, durableSubscriptionView.getDequeueCounter());
1:57f5d49: 
1:57f5d49: 
1:57f5d49:         ObjectName destinationName = broker.getAdminView().getTopics()[0];
1:57f5d49:         TopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);
1:57f5d49:         assertEquals("correct enqueue", 10, topicView.getEnqueueCount());
1:ee54f09:         assertEquals("topic view dequeue not updated", 5, topicView.getDequeueCount());
1:57f5d49:         assertEquals("inflight", 5, topicView.getInFlightCount());
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // check some counters when inactive
1:57f5d49:         ObjectName inActiveDurableSubName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];
1:57f5d49:         LOG.info("inactive durable sub name: " + inActiveDurableSubName);
1:57f5d49:         DurableSubscriptionViewMBean durableSubscriptionView1 = (DurableSubscriptionViewMBean)
1:57f5d49:                 broker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true);
1:57f5d49: 
1:57f5d49:         assertTrue("is not active", !durableSubscriptionView1.isActive());
1:57f5d49:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView1.getEnqueueCounter());
1:57f5d49:         assertEquals("correct awaiting ack", 0, durableSubscriptionView1.getMessageCountAwaitingAcknowledge());
1:57f5d49:         assertEquals("correct dequeue", keepDurableSubsActive ? 5 : 0, durableSubscriptionView1.getDequeueCounter());
1:57f5d49: 
1:57f5d49:         // destination view
1:57f5d49:         assertEquals("correct enqueue", 10, topicView.getEnqueueCount());
1:ee54f09:         assertEquals("topic view dequeue not updated", 5, topicView.getDequeueCount());
1:57f5d49:         assertEquals("inflight back to 0 after deactivate", 0, topicView.getInFlightCount());
1:57f5d49: 
1:57f5d49:         // consume the rest
1:57f5d49:         con = createConnection("cliId1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1:57f5d49: 
1:57f5d49:         for (int i=0; i<sent/2;i++) {
1:57f5d49:             Message m =  consumer.receive(30000);
1:57f5d49:             assertNotNull("got message: " + i, m);
1:57f5d49:             LOG.info("Got :" + i + ", " + m);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];
1:57f5d49:         LOG.info("durable sub name: " + activeDurableSubName);
1:57f5d49:         final DurableSubscriptionViewMBean durableSubscriptionView2 = (DurableSubscriptionViewMBean)
1:57f5d49:                 broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);
1:57f5d49: 
1:57f5d49:         assertTrue("is active", durableSubscriptionView2.isActive());
1:57f5d49:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView2.getEnqueueCounter());
1:57f5d49:         assertTrue("correct dequeue", Wait.waitFor(new Wait.Condition() {
1:57f5d49:             @Override
1:57f5d49:             public boolean isSatisified() throws Exception {
1:57f5d49:                 long val = durableSubscriptionView2.getDequeueCounter();
1:57f5d49:                 LOG.info("dequeue count:" + val);
1:57f5d49:                 return 10 == val;
1:57f5d49:             }
1:57f5d49:         }));
1:57f5d49:     }
1:57f5d49: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ee54f09
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("topic view dequeue not updated", 5, topicView.getDequeueCount());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("topic view dequeue not updated", 5, topicView.getDequeueCount());
author:Kevin Earls
-------------------------------------------------------------------------------
commit:57f5d49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import static org.junit.Assert.*;
1: 
1: 
1: @RunWith(value = Parameterized.class)
1: public class DurableSubscriptionOffline2Test extends DurableSubscriptionOfflineTestBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline2Test.class);
1: 
1:     @Parameterized.Parameters(name = "{0}")
1:     public static Collection<Boolean[]> getTestParameters() {
1:         Boolean[] f = {Boolean.FALSE};
1:         Boolean[] t = {Boolean.TRUE};
1:         List<Boolean[]> booleanChoices = new ArrayList<Boolean[]>();
1:         booleanChoices.add(f);
1:         booleanChoices.add(t);
1: 
1:         return booleanChoices;
1:     }
1: 
1:     public DurableSubscriptionOffline2Test(Boolean keepDurableSubsActive) {
1:         this.keepDurableSubsActive = keepDurableSubsActive.booleanValue();
1: 
1:         LOG.info(">>>> running {} with keepDurableSubsActive: {}", testName.getMethodName(), this.keepDurableSubsActive);
1:     }
1: 
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testJMXCountersWithOfflineSubs() throws Exception {
1:         // create durable subscription 1
1:         Connection con = createConnection("cliId1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", null, true);
1:         session.close();
1:         con.close();
1: 
1:         // restart broker
1:         broker.stop();
1:         createBroker(false /*deleteAllMessages*/);
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             producer.send(topic, message);
1:         }
1:         session.close();
1:         con.close();
1: 
1:         // consume some messages
1:         con = createConnection("cliId1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1: 
1:         for (int i=0; i<sent/2; i++) {
1:             Message m =  consumer.receive(4000);
1:             assertNotNull("got message: " + i, m);
1:             LOG.info("Got :" + i + ", " + m);
1:         }
1: 
1:         // check some counters while active
1:         ObjectName activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];
1:         LOG.info("active durable sub name: " + activeDurableSubName);
1:         final DurableSubscriptionViewMBean durableSubscriptionView = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertTrue("is active", durableSubscriptionView.isActive());
1:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView.getEnqueueCounter());
1:         assertTrue("correct waiting acks", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 5 == durableSubscriptionView.getMessageCountAwaitingAcknowledge();
1:             }
1:         }));
1:         assertEquals("correct dequeue", 5, durableSubscriptionView.getDequeueCounter());
1: 
1: 
1:         ObjectName destinationName = broker.getAdminView().getTopics()[0];
1:         TopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);
1:         assertEquals("correct enqueue", 10, topicView.getEnqueueCount());
0:         assertEquals("still zero dequeue, we don't decrement on each sub ack to stop exceeding the enqueue count with multiple subs", 0, topicView.getDequeueCount());
1:         assertEquals("inflight", 5, topicView.getInFlightCount());
1: 
1:         session.close();
1:         con.close();
1: 
1:         // check some counters when inactive
1:         ObjectName inActiveDurableSubName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];
1:         LOG.info("inactive durable sub name: " + inActiveDurableSubName);
1:         DurableSubscriptionViewMBean durableSubscriptionView1 = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(inActiveDurableSubName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertTrue("is not active", !durableSubscriptionView1.isActive());
1:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView1.getEnqueueCounter());
1:         assertEquals("correct awaiting ack", 0, durableSubscriptionView1.getMessageCountAwaitingAcknowledge());
1:         assertEquals("correct dequeue", keepDurableSubsActive ? 5 : 0, durableSubscriptionView1.getDequeueCounter());
1: 
1:         // destination view
1:         assertEquals("correct enqueue", 10, topicView.getEnqueueCount());
0:         assertEquals("still zero dequeue, we don't decrement on each sub ack to stop exceeding the enqueue count with multiple subs", 0, topicView.getDequeueCount());
1:         assertEquals("inflight back to 0 after deactivate", 0, topicView.getInFlightCount());
1: 
1:         // consume the rest
1:         con = createConnection("cliId1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1: 
1:         for (int i=0; i<sent/2;i++) {
1:             Message m =  consumer.receive(30000);
1:             assertNotNull("got message: " + i, m);
1:             LOG.info("Got :" + i + ", " + m);
1:         }
1: 
1:         activeDurableSubName = broker.getAdminView().getDurableTopicSubscribers()[0];
1:         LOG.info("durable sub name: " + activeDurableSubName);
1:         final DurableSubscriptionViewMBean durableSubscriptionView2 = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(activeDurableSubName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertTrue("is active", durableSubscriptionView2.isActive());
1:         assertEquals("all enqueued", keepDurableSubsActive ? 10 : 0, durableSubscriptionView2.getEnqueueCounter());
1:         assertTrue("correct dequeue", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 long val = durableSubscriptionView2.getDequeueCounter();
1:                 LOG.info("dequeue count:" + val);
1:                 return 10 == val;
1:             }
1:         }));
1:     }
1: }
============================================================================