1:54fa83d: /**
1:54fa83d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:54fa83d:  * contributor license agreements.  See the NOTICE file distributed with
1:54fa83d:  * this work for additional information regarding copyright ownership.
1:54fa83d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:54fa83d:  * (the "License"); you may not use this file except in compliance with
1:54fa83d:  * the License.  You may obtain a copy of the License at
1:54fa83d:  *
1:54fa83d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:54fa83d:  *
1:54fa83d:  * Unless required by applicable law or agreed to in writing, software
1:54fa83d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:54fa83d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:54fa83d:  * See the License for the specific language governing permissions and
1:54fa83d:  * limitations under the License.
1:54fa83d:  */
1:54fa83d: package org.apache.activemq.transport.tcp;
2:54fa83d: 
1:54fa83d: import java.net.Socket;
1:54fa83d: import java.net.SocketException;
1:54fa83d: import java.util.HashMap;
1:54fa83d: import java.util.Map;
1:54fa83d: 
1:54fa83d: /**
1:54fa83d:  * Utilities for determining the values for the bits in the headers of the
1:54fa83d:  * outgoing TCP/IP packets that indicate Traffic Class for use in Quality of
1:54fa83d:  * Service forwarding policies.
1:54fa83d:  */
1:54fa83d: public class QualityOfServiceUtils {
1:54fa83d: 
1:dfeecb4:     private static final int MAX_DIFF_SERV = 63;
1:54fa83d:     private static final int MIN_DIFF_SERV = 0;
1:54fa83d:     private static final Map<String, Integer> DIFF_SERV_NAMES
1:dfeecb4:         = new HashMap<String, Integer>();
1:9740fb2:     /** Common names used for Differentiated Services values. */
1:54fa83d:     static {
1:4b6c802:         
1:4b6c802:         DIFF_SERV_NAMES.put("CS0", 0);
1:4b6c802:         DIFF_SERV_NAMES.put("CS1", 8);
1:4b6c802:         DIFF_SERV_NAMES.put("CS2", 16);
1:4b6c802:         DIFF_SERV_NAMES.put("CS3", 24);
1:4b6c802:         DIFF_SERV_NAMES.put("CS4", 32);
1:4b6c802:         DIFF_SERV_NAMES.put("CS5", 40);
1:4b6c802:         DIFF_SERV_NAMES.put("CS6", 48);
1:4b6c802:         DIFF_SERV_NAMES.put("CS7", 56);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF11", 10);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF12", 12);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF13", 14);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF21", 18);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF22", 20);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF23", 22);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF31", 26);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF32", 28);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF33", 30);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF41", 34);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF42", 36);
1:dfeecb4:         DIFF_SERV_NAMES.put("AF43", 38);
1:4b6c802:         DIFF_SERV_NAMES.put("EF", 46);
1:54fa83d:     }
1:54fa83d: 
1:dfeecb4:     private static final int MAX_TOS = 255;
1:dfeecb4:     private static final int MIN_TOS = 0;
1:dfeecb4: 
1:54fa83d:     /**
1:dfeecb4:      * @param value A potential value to be used for Differentiated Services.
1:54fa83d:      * @return The corresponding Differentiated Services Code Point (DSCP).
1:54fa83d:      * @throws IllegalArgumentException if the value does not correspond to a
1:54fa83d:      *         Differentiated Services Code Point or setting the DSCP is not
1:54fa83d:      *         supported.
1:54fa83d:      */
1:54fa83d:     public static int getDSCP(String value) throws IllegalArgumentException {
1:54fa83d:         int intValue = -1;
1:54fa83d: 
1:54fa83d:         // Check the names first.
1:dfeecb4:         if (DIFF_SERV_NAMES.containsKey(value)) {
1:54fa83d:             intValue = DIFF_SERV_NAMES.get(value);
1:dfeecb4:         } else {
1:54fa83d:             try {
1:54fa83d:                 intValue = Integer.parseInt(value);
1:dfeecb4:                 if (intValue > MAX_DIFF_SERV || intValue < MIN_DIFF_SERV) {
1:dfeecb4:                     throw new IllegalArgumentException("Differentiated Services"
1:dfeecb4:                         + " value: " + intValue + " not in legal range ["
1:dfeecb4:                         + MIN_DIFF_SERV + ", " + MAX_DIFF_SERV + "].");
1:54fa83d:                 }
1:54fa83d:             } catch (NumberFormatException e) {
1:54fa83d:                 // value must have been a malformed name.
1:dfeecb4:                 throw new IllegalArgumentException("No such Differentiated "
1:dfeecb4:                     + "Services name: " + value);
1:54fa83d:             }
1:54fa83d:         }
1:54fa83d: 
1:54fa83d:         return adjustDSCPForECN(intValue);
1:54fa83d:      }
1:dfeecb4: 
1:54fa83d: 
1:dfeecb4:     /**
1:dfeecb4:      * @param value A potential value to be used for Type of Service.
1:dfeecb4:      * @return A valid value that can be used to set the Type of Service in the
1:dfeecb4:      *         packet headers.
1:dfeecb4:      * @throws IllegalArgumentException if the value is not a legal Type of
1:dfeecb4:      *         Service value.
1:dfeecb4:      */
1:dfeecb4:     public static int getToS(int value) throws IllegalArgumentException {
1:dfeecb4:         if (value > MAX_TOS || value < MIN_TOS) {
1:dfeecb4:             throw new IllegalArgumentException("Type of Service value: "
1:dfeecb4:                 + value + " not in legal range [" + MIN_TOS + ", " + MAX_TOS
1:dfeecb4:                 + ".");
1:dfeecb4:         }
1:dfeecb4:         return value;
1:dfeecb4:     }
1:dfeecb4: 
1:54fa83d:     /**
1:54fa83d:      * The Differentiated Services values use only 6 of the 8 bits in the field
1:54fa83d:      * in the TCP/IP packet header. Make sure any values the system has set for
1:54fa83d:      * the other two bits (the ECN bits) are maintained.
1:54fa83d:      *
1:dfeecb4:      * @param dscp The Differentiated Services Code Point.
1:54fa83d:      * @return A Differentiated Services Code Point that respects the ECN bits
1:54fa83d:      *         set on the system.
1:54fa83d:      * @throws IllegalArgumentException if setting Differentiated Services is
1:54fa83d:      *         not supported.
1:54fa83d:      */
1:dfeecb4:     private static int adjustDSCPForECN(int dscp)
1:54fa83d:             throws IllegalArgumentException {
1:dfeecb4:         // The only way to see if there are any values set for the ECN is to
1:54fa83d:         // read the traffic class automatically set by the system and isolate
1:54fa83d:         // the ECN bits.
1:dfeecb4:         Socket socket = new Socket();
1:54fa83d:         try {
1:54fa83d:             int systemTrafficClass = socket.getTrafficClass();
1:9740fb2:             // The 1st and 2nd bits of the system traffic class are the ECN
1:9740fb2:             // bits.
1:9740fb2:             return (dscp << 2) | (systemTrafficClass & 3);
1:54fa83d:         } catch (SocketException e) {
1:dfeecb4:             throw new IllegalArgumentException("Setting Differentiated Services"
1:dfeecb4:                 + " not supported: " + e);
1:54fa83d:         }
1:54fa83d:     }
1:54fa83d: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4b6c802
/////////////////////////////////////////////////////////////////////////
1:         
1:         DIFF_SERV_NAMES.put("CS0", 0);
1:         DIFF_SERV_NAMES.put("CS1", 8);
1:         DIFF_SERV_NAMES.put("CS2", 16);
1:         DIFF_SERV_NAMES.put("CS3", 24);
1:         DIFF_SERV_NAMES.put("CS4", 32);
1:         DIFF_SERV_NAMES.put("CS5", 40);
1:         DIFF_SERV_NAMES.put("CS6", 48);
1:         DIFF_SERV_NAMES.put("CS7", 56);
/////////////////////////////////////////////////////////////////////////
1:         DIFF_SERV_NAMES.put("EF", 46);
author:Robert Davies
-------------------------------------------------------------------------------
commit:9740fb2
/////////////////////////////////////////////////////////////////////////
1:     /** Common names used for Differentiated Services values. */
/////////////////////////////////////////////////////////////////////////
1:             // The 1st and 2nd bits of the system traffic class are the ECN
1:             // bits.
1:             return (dscp << 2) | (systemTrafficClass & 3);
commit:dfeecb4
/////////////////////////////////////////////////////////////////////////
1:     private static final int MAX_DIFF_SERV = 63;
1:         = new HashMap<String, Integer>();
0:         DIFF_SERV_NAMES.put("EF", 46);
1:         DIFF_SERV_NAMES.put("AF11", 10);
1:         DIFF_SERV_NAMES.put("AF12", 12);
1:         DIFF_SERV_NAMES.put("AF13", 14);
1:         DIFF_SERV_NAMES.put("AF21", 18);
1:         DIFF_SERV_NAMES.put("AF22", 20);
1:         DIFF_SERV_NAMES.put("AF23", 22);
1:         DIFF_SERV_NAMES.put("AF31", 26);
1:         DIFF_SERV_NAMES.put("AF32", 28);
1:         DIFF_SERV_NAMES.put("AF33", 30);
1:         DIFF_SERV_NAMES.put("AF41", 34);
1:         DIFF_SERV_NAMES.put("AF42", 36);
1:         DIFF_SERV_NAMES.put("AF43", 38);
1:     private static final int MAX_TOS = 255;
1:     private static final int MIN_TOS = 0;
1: 
1:      * @param value A potential value to be used for Differentiated Services.
/////////////////////////////////////////////////////////////////////////
1:         if (DIFF_SERV_NAMES.containsKey(value)) {
1:         } else {
1:                 if (intValue > MAX_DIFF_SERV || intValue < MIN_DIFF_SERV) {
1:                     throw new IllegalArgumentException("Differentiated Services"
1:                         + " value: " + intValue + " not in legal range ["
1:                         + MIN_DIFF_SERV + ", " + MAX_DIFF_SERV + "].");
1:                 throw new IllegalArgumentException("No such Differentiated "
1:                     + "Services name: " + value);
1: 
1:     /**
1:      * @param value A potential value to be used for Type of Service.
1:      * @return A valid value that can be used to set the Type of Service in the
1:      *         packet headers.
1:      * @throws IllegalArgumentException if the value is not a legal Type of
1:      *         Service value.
1:      */
1:     public static int getToS(int value) throws IllegalArgumentException {
1:         if (value > MAX_TOS || value < MIN_TOS) {
1:             throw new IllegalArgumentException("Type of Service value: "
1:                 + value + " not in legal range [" + MIN_TOS + ", " + MAX_TOS
1:                 + ".");
1:         }
1:         return value;
1:     }
1: 
1:      * @param dscp The Differentiated Services Code Point.
1:     private static int adjustDSCPForECN(int dscp)
1:         // The only way to see if there are any values set for the ECN is to
1:         Socket socket = new Socket();
0:             return dscp | (systemTrafficClass & 192);
1:             throw new IllegalArgumentException("Setting Differentiated Services"
1:                 + " not supported: " + e);
commit:54fa83d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.net.Socket;
1: import java.net.SocketException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
1:  * Utilities for determining the values for the bits in the headers of the
1:  * outgoing TCP/IP packets that indicate Traffic Class for use in Quality of
1:  * Service forwarding policies.
1:  */
1: public class QualityOfServiceUtils {
1: 
0:     private static final int MAX_DIFF_SERV = 64;
1:     private static final int MIN_DIFF_SERV = 0;
1:     private static final Map<String, Integer> DIFF_SERV_NAMES
0: 	= new HashMap<String, Integer>();
0:     // TODO: Find other names used for Differentiated Services values.
1:     static {
0: 	DIFF_SERV_NAMES.put("EF", 46);
0: 	DIFF_SERV_NAMES.put("AF11", 10);
0: 	DIFF_SERV_NAMES.put("AF12", 12);
0: 	DIFF_SERV_NAMES.put("AF13", 14);
0: 	DIFF_SERV_NAMES.put("AF21", 18);
0: 	DIFF_SERV_NAMES.put("AF22", 20);
0: 	DIFF_SERV_NAMES.put("AF23", 22);
0: 	DIFF_SERV_NAMES.put("AF31", 26);
0: 	DIFF_SERV_NAMES.put("AF32", 28);
0: 	DIFF_SERV_NAMES.put("AF33", 30);
0:  	DIFF_SERV_NAMES.put("AF41", 34);
0: 	DIFF_SERV_NAMES.put("AF42", 36);
0: 	DIFF_SERV_NAMES.put("AF43", 38);
1:     }
1: 
1:     /**
0:      * @param The value to be used for Differentiated Services.
1:      * @return The corresponding Differentiated Services Code Point (DSCP).
1:      * @throws IllegalArgumentException if the value does not correspond to a
1:      *         Differentiated Services Code Point or setting the DSCP is not
1:      *         supported.
1:      */
1:     public static int getDSCP(String value) throws IllegalArgumentException {
1:         int intValue = -1;
1: 
1:         // Check the names first.
0: 	if (DIFF_SERV_NAMES.containsKey(value)) {
1:             intValue = DIFF_SERV_NAMES.get(value);
0: 	} else {
1:             try {
1:                 intValue = Integer.parseInt(value);
0:                 if (intValue >= MAX_DIFF_SERV || intValue < MIN_DIFF_SERV) {
0:                     throw new IllegalArgumentException("Differentiated Services "
0:                             + "value: " + intValue + " must be between "
0:                             + MIN_DIFF_SERV + " and " + (MAX_DIFF_SERV - 1) + ".");
1:                 }
1:             } catch (NumberFormatException e) {
1:                 // value must have been a malformed name.
0: 	        throw new IllegalArgumentException("No such Differentiated "
0:                         + "Services name: " + value);
1:             }
1:         }
1: 
1:         return adjustDSCPForECN(intValue);
1:      }
1: 
1:     /**
1:      * The Differentiated Services values use only 6 of the 8 bits in the field
1:      * in the TCP/IP packet header. Make sure any values the system has set for
1:      * the other two bits (the ECN bits) are maintained.
1:      *
0:      * @param The Differentiated Services Code Point.
1:      * @return A Differentiated Services Code Point that respects the ECN bits
1:      *         set on the system.
1:      * @throws IllegalArgumentException if setting Differentiated Services is
1:      *         not supported.
1:      */
0:     private static int adjustDSCPForECN(int value)
1:             throws IllegalArgumentException {
0: 	// The only way to see if there are any values set for the ECN is to
1:         // read the traffic class automatically set by the system and isolate
1:         // the ECN bits.
0: 	Socket socket = new Socket();
1:         try {
1:             int systemTrafficClass = socket.getTrafficClass();
0:             // The 7th and 8th bits of the system traffic class are the ECN bits.
0:             return value | (systemTrafficClass & 192);
1:         } catch (SocketException e) {
0:             throw new IllegalArgumentException("Setting Differentiated Services "
0:                     + "not supported: " + e);
1:         }
1:     }
1: 
0:     // TODO: Add getter methods for ToS values.
1: }
============================================================================