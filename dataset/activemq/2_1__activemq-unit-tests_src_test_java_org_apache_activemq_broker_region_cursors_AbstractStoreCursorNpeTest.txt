1:b40dc4c: /**
1:b40dc4c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b40dc4c:  * contributor license agreements.  See the NOTICE file distributed with
1:b40dc4c:  * this work for additional information regarding copyright ownership.
1:b40dc4c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b40dc4c:  * (the "License"); you may not use this file except in compliance with
1:b40dc4c:  * the License.  You may obtain a copy of the License at
1:b40dc4c:  *
1:b40dc4c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b40dc4c:  *
1:b40dc4c:  * Unless required by applicable law or agreed to in writing, software
1:b40dc4c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b40dc4c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b40dc4c:  * See the License for the specific language governing permissions and
1:b40dc4c:  * limitations under the License.
1:b40dc4c:  */
1:b40dc4c: package org.apache.activemq.broker.region.cursors;
1:b40dc4c: 
1:b40dc4c: import java.util.concurrent.ExecutorService;
1:b40dc4c: import java.util.concurrent.Executors;
1:b40dc4c: 
1:b40dc4c: import javax.jms.Connection;
1:b40dc4c: import javax.jms.DeliveryMode;
1:b40dc4c: import javax.jms.MessageConsumer;
1:b40dc4c: import javax.jms.MessageProducer;
1:b40dc4c: import javax.jms.Session;
1:b40dc4c: import javax.jms.TextMessage;
1:b40dc4c: import javax.jms.Topic;
1:b40dc4c: 
1:b40dc4c: import org.apache.activemq.command.ActiveMQTextMessage;
1:b40dc4c: import org.apache.activemq.test.TestSupport;
1:b40dc4c: 
1:b40dc4c: /**
1:b40dc4c:  * This test shows that a null pointer exception will not occur when unsubscribing from a
1:b40dc4c:  * subscription while a producer is sending messages rapidly to the topic.  A null pointer
1:b40dc4c:  * exception was occurring in the setLastCachedId method of AbstractMessageCursor due to
1:b40dc4c:  * a race condition.  If this test is run before the patch that is applied in this commit
1:b40dc4c:  * on AbstractStoreCusor, it will consistently fail with a NPE.
1:b40dc4c:  *
1:b40dc4c:  */
1:b40dc4c: public class AbstractStoreCursorNpeTest extends TestSupport {
1:b40dc4c: 
1:b40dc4c:     protected Connection connection;
1:b40dc4c:     protected Session session;
1:b40dc4c:     protected MessageConsumer consumer;
1:b40dc4c:     protected MessageProducer producer;
1:b40dc4c:     protected Topic destination;
1:b40dc4c: 
1:b40dc4c: 
1:b40dc4c:     public void testSetLastCachedIdNPE() throws Exception {
1:b40dc4c:         connection = createConnection();
1:b40dc4c:         connection.setClientID("clientId");
1:b40dc4c:         connection.start();
1:b40dc4c:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b40dc4c:         destination = session.createTopic("test.topic");
1:b40dc4c:         producer = session.createProducer(destination);
1:b40dc4c:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:b40dc4c: 
1:b40dc4c: 
1:b40dc4c:         Connection durableCon = createConnection();
1:b40dc4c:         durableCon.setClientID("testCons");
1:b40dc4c:         durableCon.start();
1:b40dc4c:         final Session durSession = durableCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b40dc4c: 
1:b40dc4c:         //In a new thread rapidly subscribe and unsubscribe to a durable
1:b40dc4c:         ExecutorService executorService = Executors.newCachedThreadPool();
1:b40dc4c:         executorService.execute(new Runnable() {
1:b40dc4c:             @Override
1:b40dc4c:             public void run() {
1:b40dc4c:                 try{
1:b40dc4c:                     //Repeatedly create a durable subscription and then unsubscribe which used to
1:b40dc4c:                     //cause a NPE while messages were sending
1:b40dc4c:                     while(true) {
1:b40dc4c:                         MessageConsumer cons = durSession.createDurableSubscriber(durSession.createTopic("test.topic"), "sub1");
1:b40dc4c:                         Thread.sleep(100);
1:b40dc4c:                         cons.close();
1:b40dc4c:                         durSession.unsubscribe("sub1");
1:b40dc4c:                     }
1:b40dc4c:                 } catch (Exception ignored) {
1:b40dc4c:                     ignored.printStackTrace();
1:b40dc4c:                 }
1:b40dc4c:             }
1:b40dc4c:         });
1:b40dc4c: 
1:b40dc4c:         TextMessage myMessage = new ActiveMQTextMessage();
1:b40dc4c:         myMessage.setText("test");
1:b40dc4c:         //Make sure that we can send a bunch of messages without a NPE
1:b40dc4c:         //This would fail if the patch is not applied
1:b40dc4c:         for (int i = 0; i < 10000; i++) {
1:b40dc4c:             producer.send(myMessage);
1:b40dc4c:         }
1:b40dc4c:     }
1:b40dc4c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b40dc4c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.test.TestSupport;
1: 
1: /**
1:  * This test shows that a null pointer exception will not occur when unsubscribing from a
1:  * subscription while a producer is sending messages rapidly to the topic.  A null pointer
1:  * exception was occurring in the setLastCachedId method of AbstractMessageCursor due to
1:  * a race condition.  If this test is run before the patch that is applied in this commit
1:  * on AbstractStoreCusor, it will consistently fail with a NPE.
1:  *
1:  */
1: public class AbstractStoreCursorNpeTest extends TestSupport {
1: 
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Topic destination;
1: 
1: 
1:     public void testSetLastCachedIdNPE() throws Exception {
1:         connection = createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = session.createTopic("test.topic");
1:         producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1: 
1:         Connection durableCon = createConnection();
1:         durableCon.setClientID("testCons");
1:         durableCon.start();
1:         final Session durSession = durableCon.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         //In a new thread rapidly subscribe and unsubscribe to a durable
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try{
1:                     //Repeatedly create a durable subscription and then unsubscribe which used to
1:                     //cause a NPE while messages were sending
1:                     while(true) {
1:                         MessageConsumer cons = durSession.createDurableSubscriber(durSession.createTopic("test.topic"), "sub1");
1:                         Thread.sleep(100);
1:                         cons.close();
1:                         durSession.unsubscribe("sub1");
1:                     }
1:                 } catch (Exception ignored) {
1:                     ignored.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         TextMessage myMessage = new ActiveMQTextMessage();
1:         myMessage.setText("test");
1:         //Make sure that we can send a bunch of messages without a NPE
1:         //This would fail if the patch is not applied
1:         for (int i = 0; i < 10000; i++) {
1:             producer.send(myMessage);
1:         }
1:     }
1: }
============================================================================