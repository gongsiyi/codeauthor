1:d29ca2a: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:f392884: import java.io.IOException;
1:f392884: import java.util.Properties;
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:4228281: import org.apache.activemq.util.MarshallingSupport;
1:230a86c: 
1:d29ca2a: /**
1:230a86c:  * When a client connects to a broker, the broker send the client a BrokerInfo
1:230a86c:  * so that the client knows which broker node he's talking to and also any peers
1:230a86c:  * that the node has in his cluster. This is the broker helping the client out
1:d29ca2a:  * in discovering other nodes in the cluster.
1:3953b9a:  *
1:4afa5d6:  * @openwire:marshaller code="2"
1:3953b9a:  *
1:d29ca2a:  */
1:230a86c: public class BrokerInfo extends BaseCommand {
1:4228281:     private static final String PASSIVE_SLAVE_KEY = "passiveSlave";
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.BROKER_INFO;
1:d29ca2a:     BrokerId brokerId;
1:d29ca2a:     String brokerURL;
1:af9f610:     boolean slaveBroker;
1:ef0734b:     boolean masterBroker;
1:ef0734b:     boolean faultTolerantConfiguration;
1:5c4bd06:     boolean networkConnection;
1:5c4bd06:     boolean duplexConnection;
1:d29ca2a:     BrokerInfo peerBrokerInfos[];
1:d29ca2a:     String brokerName;
1:3daf923:     long connectionId;
1:05a8cba:     String brokerUploadUrl;
1:ae73f86:     String networkProperties;
1:c752230:     transient int refCount = 0;
1:3953b9a: 
1:f392884:     public BrokerInfo copy() {
1:f392884:         BrokerInfo copy = new BrokerInfo();
1:f392884:         copy(copy);
1:f392884:         return copy;
1:f392884:     }
1:3953b9a: 
1:f392884:     private void copy(BrokerInfo copy) {
1:f392884:         super.copy(copy);
1:f392884:         copy.brokerId = this.brokerId;
1:f392884:         copy.brokerURL = this.brokerURL;
1:f392884:         copy.slaveBroker = this.slaveBroker;
1:f392884:         copy.masterBroker = this.masterBroker;
1:f392884:         copy.faultTolerantConfiguration = this.faultTolerantConfiguration;
1:f392884:         copy.networkConnection = this.networkConnection;
1:f392884:         copy.duplexConnection = this.duplexConnection;
1:f392884:         copy.peerBrokerInfos = this.peerBrokerInfos;
1:f392884:         copy.brokerName = this.brokerName;
1:f392884:         copy.connectionId = this.connectionId;
1:f392884:         copy.brokerUploadUrl = this.brokerUploadUrl;
1:f392884:         copy.networkProperties = this.networkProperties;
1:3953b9a:     }
1:3daf923: 
1:f392884:     @Override
1:230a86c:     public boolean isBrokerInfo() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:3953b9a:     @Override
1:230a86c:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:3daf923:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:230a86c:     public BrokerId getBrokerId() {
1:d29ca2a:         return brokerId;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setBrokerId(BrokerId brokerId) {
1:230a86c:         this.brokerId = brokerId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:230a86c:     public String getBrokerURL() {
1:d29ca2a:         return brokerURL;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setBrokerURL(String brokerURL) {
1:230a86c:         this.brokerURL = brokerURL;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:e5959da:      * @openwire:property version=1 testSize=0
1:d29ca2a:      */
1:230a86c:     public BrokerInfo[] getPeerBrokerInfos() {
1:d29ca2a:         return peerBrokerInfos;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setPeerBrokerInfos(BrokerInfo[] peerBrokerInfos) {
1:230a86c:         this.peerBrokerInfos = peerBrokerInfos;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:230a86c:     public String getBrokerName() {
1:d29ca2a:         return brokerName;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setBrokerName(String brokerName) {
1:230a86c:         this.brokerName = brokerName;
1:d29ca2a:     }
1:d29ca2a: 
1:3953b9a:     @Override
1:230a86c:     public Response visit(CommandVisitor visitor) throws Exception {
1:ef0734b:         return visitor.processBrokerInfo(this);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:230a86c:     public boolean isSlaveBroker() {
1:af9f610:         return slaveBroker;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void setSlaveBroker(boolean slaveBroker) {
1:230a86c:         this.slaveBroker = slaveBroker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:ef0734b:      */
1:230a86c:     public boolean isMasterBroker() {
1:ef0734b:         return masterBroker;
1:d29ca2a:     }
1:f392884: 
1:5c4bd06:     /**
1:230a86c:      * @param masterBroker The masterBroker to set.
1:ef0734b:      */
1:230a86c:     public void setMasterBroker(boolean masterBroker) {
1:230a86c:         this.masterBroker = masterBroker;
1:f392884:     }
1:f392884: 
1:ef0734b:     /**
3:ef0734b:      * @openwire:property version=1
1:ef0734b:      * @return Returns the faultTolerantConfiguration.
1:ef0734b:      */
1:230a86c:     public boolean isFaultTolerantConfiguration() {
1:ef0734b:         return faultTolerantConfiguration;
1:ae73f86:     }
1:4228281: 
1:ef0734b:     /**
1:230a86c:      * @param faultTolerantConfiguration The faultTolerantConfiguration to set.
1:ef0734b:      */
1:230a86c:     public void setFaultTolerantConfiguration(boolean faultTolerantConfiguration) {
1:230a86c:         this.faultTolerantConfiguration = faultTolerantConfiguration;
3:ef0734b:     }
1:4228281: 
1:ef0734b:     /**
1:5c4bd06:      * @openwire:property version=2
1:5c4bd06:      * @return the duplexConnection
1:5c4bd06:      */
1:230a86c:     public boolean isDuplexConnection() {
1:5c4bd06:         return this.duplexConnection;
1:5c4bd06:     }
1:4228281: 
1:5c4bd06:     /**
1:5c4bd06:      * @param duplexConnection the duplexConnection to set
1:5c4bd06:      */
1:230a86c:     public void setDuplexConnection(boolean duplexConnection) {
1:230a86c:         this.duplexConnection = duplexConnection;
1:5c4bd06:     }
1:ae73f86: 
1:5c4bd06:     /**
1:5c4bd06:      * @openwire:property version=2
1:5c4bd06:      * @return the networkConnection
1:5c4bd06:      */
1:230a86c:     public boolean isNetworkConnection() {
1:5c4bd06:         return this.networkConnection;
1:5c4bd06:     }
1:ae73f86: 
1:5c4bd06:     /**
1:5c4bd06:      * @param networkConnection the networkConnection to set
1:5c4bd06:      */
1:230a86c:     public void setNetworkConnection(boolean networkConnection) {
1:230a86c:         this.networkConnection = networkConnection;
1:5c4bd06:     }
8:5c4bd06: 
1:ef0734b:     /**
1:3daf923:      * The broker assigns a each connection it accepts a connection id.
1:3953b9a:      *
1:3daf923:      * @openwire:property version=2
1:3daf923:      */
1:230a86c:     public long getConnectionId() {
1:230a86c:         return connectionId;
1:230a86c:     }
1:3daf923: 
1:230a86c:     public void setConnectionId(long connectionId) {
1:230a86c:         this.connectionId = connectionId;
1:230a86c:     }
1:3daf923: 
1:af9f610:     /**
1:230a86c:      * The URL to use when uploading BLOBs to the broker or some other external
1:230a86c:      * file/http server
1:3953b9a:      *
1:05a8cba:      * @openwire:property version=3
1:af9f610:      */
1:05a8cba:     public String getBrokerUploadUrl() {
1:05a8cba:         return brokerUploadUrl;
1:3daf923:     }
1:3daf923: 
1:05a8cba:     public void setBrokerUploadUrl(String brokerUploadUrl) {
1:05a8cba:         this.brokerUploadUrl = brokerUploadUrl;
1:3daf923:     }
1:ae73f86: 
1:ae73f86:     /**
1:230a86c:      * @openwire:property version=3 cache=false
1:ae73f86:      * @return the networkProperties
1:ae73f86:      */
1:230a86c:     public String getNetworkProperties() {
1:ae73f86:         return this.networkProperties;
1:ae73f86:     }
1:ae73f86: 
1:ae73f86:     /**
1:ae73f86:      * @param networkProperties the networkProperties to set
1:ae73f86:      */
1:230a86c:     public void setNetworkProperties(String networkProperties) {
1:230a86c:         this.networkProperties = networkProperties;
1:230a86c:     }
1:3953b9a: 
1:4228281:     public boolean isPassiveSlave() {
1:4228281:         boolean result = false;
1:4228281:         Properties props = getProperties();
1:4228281:         if (props != null) {
1:4228281:             result = Boolean.parseBoolean(props.getProperty(PASSIVE_SLAVE_KEY, "false"));
1:4228281:         }
1:4228281:         return result;
1:4228281:     }
1:3953b9a: 
1:4228281:     public void setPassiveSlave(boolean value) {
1:4228281:         Properties props = new Properties();
1:4228281:         props.put(PASSIVE_SLAVE_KEY, Boolean.toString(value));
1:4228281:         try {
1:4228281:             this.networkProperties=MarshallingSupport.propertiesToString(props);
1:4228281:         } catch (IOException e) {
1:c9addfb:             e.printStackTrace();
1:4228281:         }
1:4228281:     }
1:3953b9a: 
1:4228281:     public Properties getProperties() {
1:4228281:         Properties result = null;
1:4228281:         try {
1:4228281:             result = MarshallingSupport.stringToProperties(getNetworkProperties());
1:4228281:         } catch (IOException e) {
1:c9addfb:            e.printStackTrace();
1:4228281:         }
1:4228281:         return result;
1:4228281:     }
1:c752230: 
1:c752230:     public int getRefCount() {
1:c752230:         return refCount;
1:c752230:     }
1:c752230: 
1:c752230:     public void incrementRefCount() {
1:c752230:         refCount++;
1:c752230:     }
1:c752230:     public int decrementRefCount() {
1:c752230:         return --refCount;
1:c752230:     }
1:ef0734b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:3953b9a
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:  * When a client connects to a broker, the broker send the client a BrokerInfo
1:  * so that the client knows which broker node he's talking to and also any peers
1:  * that the node has in his cluster. This is the broker helping the client out
1: public class BrokerInfo extends BaseCommand {
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.BROKER_INFO;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isBrokerInfo() {
1:     public byte getDataStructureType() {
1:     public BrokerId getBrokerId() {
1:     public void setBrokerId(BrokerId brokerId) {
1:         this.brokerId = brokerId;
1:     public String getBrokerURL() {
1:     public void setBrokerURL(String brokerURL) {
1:         this.brokerURL = brokerURL;
1:     public BrokerInfo[] getPeerBrokerInfos() {
1:     public void setPeerBrokerInfos(BrokerInfo[] peerBrokerInfos) {
1:         this.peerBrokerInfos = peerBrokerInfos;
1:     public String getBrokerName() {
1:     public void setBrokerName(String brokerName) {
1:         this.brokerName = brokerName;
1:     public Response visit(CommandVisitor visitor) throws Exception {
1:     public boolean isSlaveBroker() {
1:     public void setSlaveBroker(boolean slaveBroker) {
1:         this.slaveBroker = slaveBroker;
1:     public boolean isMasterBroker() {
1:      * @param masterBroker The masterBroker to set.
1:     public void setMasterBroker(boolean masterBroker) {
1:         this.masterBroker = masterBroker;
1:     public boolean isFaultTolerantConfiguration() {
1:      * @param faultTolerantConfiguration The faultTolerantConfiguration to set.
1:     public void setFaultTolerantConfiguration(boolean faultTolerantConfiguration) {
1:         this.faultTolerantConfiguration = faultTolerantConfiguration;
1:     public boolean isDuplexConnection() {
1:     public void setDuplexConnection(boolean duplexConnection) {
1:         this.duplexConnection = duplexConnection;
1:     public boolean isNetworkConnection() {
1:     public void setNetworkConnection(boolean networkConnection) {
1:         this.networkConnection = networkConnection;
/////////////////////////////////////////////////////////////////////////
1:     public long getConnectionId() {
1:         return connectionId;
1:     }
1:     public void setConnectionId(long connectionId) {
1:         this.connectionId = connectionId;
1:     }
1:      * The URL to use when uploading BLOBs to the broker or some other external
1:      * file/http server
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @openwire:property version=3 cache=false
1:     public String getNetworkProperties() {
1:     public void setNetworkProperties(String networkProperties) {
1:         this.networkProperties = networkProperties;
1:     }
commit:3daf923
/////////////////////////////////////////////////////////////////////////
1:     long connectionId;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * The broker assigns a each connection it accepts a connection id.
0:      * 
1:      * @openwire:property version=2
1:      */
0: 	public long getConnectionId() {
0: 		return connectionId;
1: 	}
1: 
0: 	public void setConnectionId(long connectionId) {
0: 		this.connectionId = connectionId;
1: 	}
1: 
1:   
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public Response visit(CommandVisitor visitor) throws Exception {
commit:90e21b4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: 
1: /**
0:  * When a client connects to a broker, the broker send the client a BrokerInfo
0:  * so that the client knows which broker node he's talking to and also any peers
0:  * that the node has in his cluster.  This is the broker helping the client out
1:  * in discovering other nodes in the cluster.
0:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.7 $
1:  */
0: public class BrokerInfo extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.BROKER_INFO;
1:     BrokerId brokerId;
1:     String brokerURL;
0:     RedeliveryPolicy redeliveryPolicy;
1:     
1:     BrokerInfo peerBrokerInfos[];
1:     String brokerName;
1: 	
0:     public boolean isBrokerInfo() {
1:         return true;
1:     }
1: 
0:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
0:     public BrokerId getBrokerId() {
1:         return brokerId;
1:     }
0:     public void setBrokerId(BrokerId brokerId) {
0:         this.brokerId = brokerId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public String getBrokerURL() {
1:         return brokerURL;
1:     }
0:     public void setBrokerURL(String brokerURL) {
0:         this.brokerURL = brokerURL;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public BrokerInfo[] getPeerBrokerInfos() {
1:         return peerBrokerInfos;
1:     }
0:     public void setPeerBrokerInfos(BrokerInfo[] peerBrokerInfos) {
0:         this.peerBrokerInfos = peerBrokerInfos;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public RedeliveryPolicy getRedeliveryPolicy() {
0:         return redeliveryPolicy;
1:     }
0:     public void setRedeliveryPolicy(RedeliveryPolicy redeliveryPolicy) {
0:         this.redeliveryPolicy = redeliveryPolicy;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public String getBrokerName() {
1:         return brokerName;
1:     }
0:     public void setBrokerName(String brokerName) {
0:         this.brokerName = brokerName;
1:     }
1: 	
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         return visitor.processBrokerInfo( this );
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c752230
/////////////////////////////////////////////////////////////////////////
1:     transient int refCount = 0;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getRefCount() {
1:         return refCount;
1:     }
1: 
1:     public void incrementRefCount() {
1:         refCount++;
1:     }
1:     public int decrementRefCount() {
1:         return --refCount;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:c9addfb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             e.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:            e.printStackTrace();
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public BrokerInfo copy() {
1:         BrokerInfo copy = new BrokerInfo();
1:         copy(copy);
1:         return copy;
1:     }
1:     
1:     private void copy(BrokerInfo copy) {
1:         super.copy(copy);
1:         copy.brokerId = this.brokerId;
1:         copy.brokerURL = this.brokerURL;
1:         copy.slaveBroker = this.slaveBroker;
1:         copy.masterBroker = this.masterBroker;
1:         copy.faultTolerantConfiguration = this.faultTolerantConfiguration;
1:         copy.networkConnection = this.networkConnection;
1:         copy.duplexConnection = this.duplexConnection;
1:         copy.peerBrokerInfos = this.peerBrokerInfos;
1:         copy.brokerName = this.brokerName;
1:         copy.connectionId = this.connectionId;
1:         copy.brokerUploadUrl = this.brokerUploadUrl;
1:         copy.networkProperties = this.networkProperties;
1:     } 
1:     @Override
commit:4228281
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.plugin.StatisticsBrokerPlugin;
1: import org.apache.activemq.util.MarshallingSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import java.io.IOException;
0: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
0:     private static Log LOG = LogFactory.getLog(BrokerInfo.class);
1:     private static final String PASSIVE_SLAVE_KEY = "passiveSlave";
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isPassiveSlave() {
1:         boolean result = false;
1:         Properties props = getProperties();
1:         if (props != null) {
1:             result = Boolean.parseBoolean(props.getProperty(PASSIVE_SLAVE_KEY, "false"));
1:         }
1:         return result;
1:     }
1:     
1:     public void setPassiveSlave(boolean value) {
1:         Properties props = new Properties();
1:         props.put(PASSIVE_SLAVE_KEY, Boolean.toString(value));
1:         try {
1:             this.networkProperties=MarshallingSupport.propertiesToString(props);
1:         } catch (IOException e) {
0:             LOG.error("Failed to marshall props to a String",e);
1:         }
1:     }
1:     
1:     public Properties getProperties() {
1:         Properties result = null;
1:         try {
1:             result = MarshallingSupport.stringToProperties(getNetworkProperties());
1:         } catch (IOException e) {
0:             LOG.error("Failed to marshall properties", e);
1:         }
1:         return result;
1:     }
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
1:     String networkProperties;
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     /**
0:      *  @openwire:property version=3 cache=false
1:      * @return the networkProperties
1:      */
0:     public String getNetworkProperties(){
1:         return this.networkProperties;
1:     }
1: 
1:     
1:     /**
1:      * @param networkProperties the networkProperties to set
1:      */
0:     public void setNetworkProperties(String networkProperties){
0:         this.networkProperties=networkProperties;
1:     }    
commit:5c4bd06
/////////////////////////////////////////////////////////////////////////
1:     boolean networkConnection;
1:     boolean duplexConnection;
/////////////////////////////////////////////////////////////////////////
1: 
1:     
1:     /**
1:      * @openwire:property version=2
1:      * @return the duplexConnection
1:      */
0:     public boolean isDuplexConnection(){
1:         return this.duplexConnection;
1:     }
1: 
1:     
1:     /**
1:      * @param duplexConnection the duplexConnection to set
1:      */
0:     public void setDuplexConnection(boolean duplexConnection){
0:         this.duplexConnection=duplexConnection;
1:     }
1: 
1:     
1:     /**
1:      * @openwire:property version=2
1:      * @return the networkConnection
1:      */
0:     public boolean isNetworkConnection(){
1:         return this.networkConnection;
1:     }
1: 
1:     
1:     /**
1:      * @param networkConnection the networkConnection to set
1:      */
0:     public void setNetworkConnection(boolean networkConnection){
0:         this.networkConnection=networkConnection;
1:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0:  * When a client connects to a broker, the broker send the client a BrokerInfo so that the client knows which broker
0:  * node he's talking to and also any peers that the node has in his cluster. This is the broker helping the client out
0: public class BrokerInfo extends BaseCommand{
1:     boolean masterBroker;
1:     boolean faultTolerantConfiguration;
0: 
0:     public boolean isBrokerInfo(){
0:     public byte getDataStructureType(){
0: 
0:     public BrokerId getBrokerId(){
0: 
0:     public void setBrokerId(BrokerId brokerId){
0:         this.brokerId=brokerId;
0:     public String getBrokerURL(){
0: 
0:     public void setBrokerURL(String brokerURL){
0:         this.brokerURL=brokerURL;
0:     public BrokerInfo[] getPeerBrokerInfos(){
0: 
0:     public void setPeerBrokerInfos(BrokerInfo[] peerBrokerInfos){
0:         this.peerBrokerInfos=peerBrokerInfos;
0:     public String getBrokerName(){
0: 
0:     public void setBrokerName(String brokerName){
0:         this.brokerName=brokerName;
0: 
0:     public Response visit(CommandVisitor visitor) throws Exception{
1:         return visitor.processBrokerInfo(this);
1:      * @openwire:property version=1
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public boolean isMasterBroker(){
1:         return masterBroker;
1:     }
0: 
1:     /**
0:      * @param masterBroker
0:      *            The masterBroker to set.
1:      */
0:     public void setMasterBroker(boolean masterBroker){
0:         this.masterBroker=masterBroker;
1:     }
0: 
1:     /**
1:      * @openwire:property version=1
1:      * @return Returns the faultTolerantConfiguration.
1:      */
0:     public boolean isFaultTolerantConfiguration(){
1:         return faultTolerantConfiguration;
1:     }
0: 
1:     /**
0:      * @param faultTolerantConfiguration
0:      *            The faultTolerantConfiguration to set.
1:      */
0:     public void setFaultTolerantConfiguration(boolean faultTolerantConfiguration){
0:         this.faultTolerantConfiguration=faultTolerantConfiguration;
1:     }
commit:af9f610
/////////////////////////////////////////////////////////////////////////
1:     boolean slaveBroker;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @openwire:property version=1 cache=true
1:      */
0:     public boolean isSlaveBroker(){
1:         return slaveBroker;
0:     }
0: 
0:    
0:     public void setSlaveBroker(boolean slaveBroker){
0:         this.slaveBroker=slaveBroker;
0:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
1:     String brokerUploadUrl;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * The URL to use when uploading BLOBs to the broker or some other external file/http server
0:      *
1:      * @openwire:property version=3
0:      */
1:     public String getBrokerUploadUrl() {
1:         return brokerUploadUrl;
0:     }
0: 
1:     public void setBrokerUploadUrl(String brokerUploadUrl) {
1:         this.brokerUploadUrl = brokerUploadUrl;
0:     }
commit:e5959da
/////////////////////////////////////////////////////////////////////////
1:      * @openwire:property version=1 testSize=0
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="2"
============================================================================