1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.advisory;
1:d29ca2a: 
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:d29ca2a: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageListener;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: 
1:b52624e: import org.apache.activemq.ActiveMQMessageConsumer;
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.RemoveInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An object which can be used to listen to the number of active consumers
1:d29ca2a:  * available on a given destination.
1:0bbc0ac:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class ConsumerEventSource implements Service, MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerEventSource.class);
1:d29ca2a: 
1:d29ca2a:     private final Connection connection;
1:d29ca2a:     private final ActiveMQDestination destination;
1:d29ca2a:     private ConsumerListener listener;
1:d29ca2a:     private AtomicBoolean started = new AtomicBoolean(false);
1:d29ca2a:     private AtomicInteger consumerCount = new AtomicInteger();
1:d29ca2a:     private Session session;
1:b52624e:     private ActiveMQMessageConsumer consumer;
1:d29ca2a: 
1:d29ca2a:     public ConsumerEventSource(Connection connection, Destination destination) throws JMSException {
1:d29ca2a:         this.connection = connection;
1:d29ca2a:         this.destination = ActiveMQDestination.transform(destination);
4:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setConsumerListener(ConsumerListener listener) {
1:d29ca2a:         this.listener = listener;
1:d29ca2a:     }
1:d29ca2a:     
1:b52624e:     public String getConsumerId() {
1:b52624e:         return consumer != null ? consumer.getConsumerId().toString() : "NOT_SET";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         if (started.compareAndSet(false, true)) {
1:d29ca2a:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:             ActiveMQTopic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(destination);
1:b52624e:             consumer = (ActiveMQMessageConsumer) session.createConsumer(advisoryTopic);
1:d29ca2a:             consumer.setMessageListener(this);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:         if (started.compareAndSet(true, false)) {
1:d29ca2a:             if (session != null) {
1:d29ca2a:                 session.close();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onMessage(Message message) {
1:d29ca2a:         if (message instanceof ActiveMQMessage) {
1:74a7a8b:             ActiveMQMessage activeMessage = (ActiveMQMessage)message;
1:d29ca2a:             Object command = activeMessage.getDataStructure();
1:d29ca2a:             int count = 0;
1:d29ca2a:             if (command instanceof ConsumerInfo) {
1:d29ca2a:                 count = consumerCount.incrementAndGet();
1:d29ca2a:                 count = extractConsumerCountFromMessage(message, count);
1:74a7a8b:                 fireConsumerEvent(new ConsumerStartedEvent(this, destination, (ConsumerInfo)command, count));
1:74a7a8b:             } else if (command instanceof RemoveInfo) {
1:74a7a8b:                 RemoveInfo removeInfo = (RemoveInfo)command;
1:d29ca2a:                 if (removeInfo.isConsumerRemove()) {
1:d29ca2a:                     count = consumerCount.decrementAndGet();
1:d29ca2a:                     count = extractConsumerCountFromMessage(message, count);
1:74a7a8b:                     fireConsumerEvent(new ConsumerStoppedEvent(this, destination, (ConsumerId)removeInfo.getObjectId(), count));
1:d29ca2a:                 }
1:74a7a8b:             } else {
1:fc00993:                 LOG.warn("Unknown command: " + command);
1:d29ca2a:             }
1:74a7a8b:         } else {
1:fc00993:             LOG.warn("Unknown message type: " + message + ". Message ignored");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Lets rely by default on the broker telling us what the consumer count is
1:d29ca2a:      * as it can ensure that we are up to date at all times and have not
1:d29ca2a:      * received messages out of order etc.
1:d29ca2a:      */
1:d29ca2a:     protected int extractConsumerCountFromMessage(Message message, int count) {
1:d29ca2a:         try {
1:d29ca2a:             Object value = message.getObjectProperty("consumerCount");
1:d29ca2a:             if (value instanceof Number) {
1:74a7a8b:                 Number n = (Number)value;
1:d29ca2a:                 return n.intValue();
1:d29ca2a:             }
1:fc00993:             LOG.warn("No consumerCount header available on the message: " + message);
1:74a7a8b:         } catch (Exception e) {
1:fc00993:             LOG.warn("Failed to extract consumerCount from message: " + message + ".Reason: " + e, e);
1:d29ca2a:         }
1:d29ca2a:         return count;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void fireConsumerEvent(ConsumerEvent event) {
1:d29ca2a:         if (listener != null) {
1:d29ca2a:             listener.onConsumerEvent(event);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ConsumerEventSource.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Unknown command: " + command);
1:             LOG.warn("Unknown message type: " + message + ". Message ignored");
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("No consumerCount header available on the message: " + message);
1:             LOG.warn("Failed to extract consumerCount from message: " + message + ".Reason: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage activeMessage = (ActiveMQMessage)message;
1:                 fireConsumerEvent(new ConsumerStartedEvent(this, destination, (ConsumerInfo)command, count));
1:             } else if (command instanceof RemoveInfo) {
1:                 RemoveInfo removeInfo = (RemoveInfo)command;
1:                     fireConsumerEvent(new ConsumerStoppedEvent(this, destination, (ConsumerId)removeInfo.getObjectId(), count));
1:             } else {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:                 Number n = (Number)value;
1:         } catch (Exception e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.RemoveInfo;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.Session;
1: 
1: /**
1:  * An object which can be used to listen to the number of active consumers
1:  * available on a given destination.
1:  * 
0:  * @version $Revision$
1:  */
1: public class ConsumerEventSource implements Service, MessageListener {
0:     private static final Log log = LogFactory.getLog(ConsumerEventSource.class);
1: 
1:     private final Connection connection;
1:     private final ActiveMQDestination destination;
1:     private ConsumerListener listener;
1:     private AtomicBoolean started = new AtomicBoolean(false);
1:     private AtomicInteger consumerCount = new AtomicInteger();
1:     private Session session;
0:     private MessageConsumer consumer;
1: 
1:     public ConsumerEventSource(Connection connection, Destination destination) throws JMSException {
1:         this.connection = connection;
1:         this.destination = ActiveMQDestination.transform(destination);
1:     }
1: 
1:     public void setConsumerListener(ConsumerListener listener) {
1:         this.listener = listener;
1:     }
1: 
1:     public void start() throws Exception {
1:         if (started.compareAndSet(false, true)) {
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             ActiveMQTopic advisoryTopic = AdvisorySupport.getConsumerAdvisoryTopic(destination);
0:             consumer = session.createConsumer(advisoryTopic);
1:             consumer.setMessageListener(this);
1:         }
1:     }
1: 
1:     public void stop() throws Exception {
1:         if (started.compareAndSet(true, false)) {
1:             if (session != null) {
1:                 session.close();
1:             }
1:         }
1:     }
1: 
1:     public void onMessage(Message message) {
1:         if (message instanceof ActiveMQMessage) {
0:             ActiveMQMessage activeMessage = (ActiveMQMessage) message;
1:             Object command = activeMessage.getDataStructure();
1:             int count = 0;
1:             if (command instanceof ConsumerInfo) {
1:                 count = consumerCount.incrementAndGet();
1:                 count = extractConsumerCountFromMessage(message, count);
0:                 fireConsumerEvent(new ConsumerStartedEvent(this, destination, (ConsumerInfo) command, count));
1:             }
0:             else if (command instanceof RemoveInfo) {
0:                 RemoveInfo removeInfo = (RemoveInfo) command;
1:                 if (removeInfo.isConsumerRemove()) {
1:                     count = consumerCount.decrementAndGet();
1:                     count = extractConsumerCountFromMessage(message, count);
0:                     fireConsumerEvent(new ConsumerStoppedEvent(this, destination, (ConsumerId) removeInfo.getObjectId(), count));
1:                 }
1:             }
0:             else {
0:                 log.warn("Unknown command: " + command);
1:             }
1:         }
0:         else {
0:             log.warn("Unknown message type: " + message + ". Message ignored");
1:         }
1:     }
1: 
1:     /**
1:      * Lets rely by default on the broker telling us what the consumer count is
1:      * as it can ensure that we are up to date at all times and have not
1:      * received messages out of order etc.
1:      */
1:     protected int extractConsumerCountFromMessage(Message message, int count) {
1:         try {
1:             Object value = message.getObjectProperty("consumerCount");
1:             if (value instanceof Number) {
0:                 Number n = (Number) value;
1:                 return n.intValue();
1:             }
0:             log.warn("No consumerCount header available on the message: " + message);
1:         }
0:         catch (Exception e) {
0:             log.warn("Failed to extract consumerCount from message: " + message + ".Reason: " + e, e);
1:         }
1:         return count;
1:     }
1: 
1:     protected void fireConsumerEvent(ConsumerEvent event) {
1:         if (listener != null) {
1:             listener.onConsumerEvent(event);
1:         }
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerEventSource.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:4213e42
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:b52624e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageConsumer;
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQMessageConsumer consumer;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getConsumerId() {
1:         return consumer != null ? consumer.getConsumerId().toString() : "NOT_SET";
0:     }
1:             consumer = (ActiveMQMessageConsumer) session.createConsumer(advisoryTopic);
============================================================================