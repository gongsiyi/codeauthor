1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:1a88ac6: 
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:1a88ac6: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.net.URI;
1:1a88ac6: import java.util.HashMap;
1:1a88ac6: import java.util.Map;
1:1a88ac6: 
1:f812e34: import junit.framework.TestCase;
1:f812e34: import org.apache.activemq.openwire.OpenWireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:f812e34: 
1:1a88ac6: public class SslTransportFactoryTest extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SslTransportFactoryTest.class);
1:1a88ac6: 
1:1a88ac6:     private SslTransportFactory factory;
1:6e34afc:     private boolean verbose;
1:1a88ac6: 
1:69fad2a:     @Override
1:1a88ac6:     protected void setUp() throws Exception {
1:1a88ac6:         factory = new SslTransportFactory();
1:1a88ac6:     }
1:1a88ac6: 
1:69fad2a:     @Override
1:1a88ac6:     protected void tearDown() throws Exception {
1:1a88ac6:         super.tearDown();
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void testBindServerOptions() throws IOException {
1:1a88ac6: 
1:1a88ac6:         SslTransportServer sslTransportServer = null;
1:1a88ac6: 
1:1a88ac6:         for (int i = 0; i < 4; ++i) {
1:ecf89a6:             final boolean wantClientAuth = (i & 0x1) == 1;
1:ecf89a6:             final boolean needClientAuth = (i & 0x2) == 1;
1:1a88ac6: 
1:f812e34:             String options = "wantClientAuth=" + (wantClientAuth ? "true" : "false") + "&needClientAuth="
1:f812e34:                              + (needClientAuth ? "true" : "false");
1:1a88ac6: 
1:1a88ac6:             try {
1:5d99c99:                 sslTransportServer = (SslTransportServer)factory.doBind(new URI(
1:f812e34:                                                                                             "ssl://localhost:61616?"
1:f812e34:                                                                                                 + options));
1:f812e34:             } catch (Exception e) {
1:1a88ac6:                 fail("Unable to bind to address: " + e.getMessage());
1:1a88ac6:             }
1:1a88ac6: 
1:1a88ac6:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.",
1:f812e34:                          sslTransportServer.getWantClientAuth(), wantClientAuth);
1:1a88ac6: 
1:1a88ac6:             assertEquals("Created ServerSocket did not have correct needClientAuth status.",
1:f812e34:                          sslTransportServer.getNeedClientAuth(), needClientAuth);
1:1a88ac6: 
1:1a88ac6:             try {
1:1a88ac6:                 sslTransportServer.stop();
1:f812e34:             } catch (Exception e) {
1:1a88ac6:                 fail("Unable to stop TransportServer: " + e.getMessage());
1:1a88ac6:             }
1:1a88ac6:         }
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     private int getMthNaryDigit(int number, int digitIdx, int numBase) {
1:f812e34:         return (number / ((int)Math.pow(numBase, digitIdx))) % numBase;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     public void testCompositeConfigure() throws IOException {
1:1a88ac6:         // The 5 options being tested.
1:1a88ac6:         int optionSettings[] = new int[5];
1:1a88ac6: 
1:f812e34:         String optionNames[] = {"wantClientAuth", "needClientAuth", "socket.wantClientAuth",
1:f812e34:                                 "socket.needClientAuth", "socket.useClientMode"};
1:1a88ac6: 
1:f812e34:         // Using a trinary interpretation of i to set all possible values of
1:f812e34:         // stub options for socket and transport.
1:f812e34:         // 2 transport options, 3 socket options, 3 settings for each option =>
1:f812e34:         // 3^5 = 243 combos.
1:1a88ac6:         for (int i = 0; i < 243; ++i) {
1:933eb2f:             Map<String, String> options = new HashMap<String, String>();
1:1a88ac6: 
1:1a88ac6:             for (int j = 0; j < 5; ++j) {
1:1a88ac6:                 // -1 since the option range is [-1,1], not [0,2].
1:1a88ac6:                 optionSettings[j] = getMthNaryDigit(i, j, 3) - 1;
1:1a88ac6: 
1:69fad2a:                 //We now always set options to a default we default verifyHostName to true
1:69fad2a:                 //so we setSSLParameters so make the not set value = 0
1:69fad2a:                 if (optionSettings[j] == -1) {
1:69fad2a:                     optionSettings[j] = 0;
1:69fad2a:                 }
1:69fad2a: 
1:6e34afc:                 if (optionSettings[j] != -1) {
1:74a7a8b:                     options.put(optionNames[j], optionSettings[j] == 1 ? "true" : "false");
1:1a88ac6:                 }
1:1a88ac6:             }
1:1a88ac6: 
1:1a88ac6:             StubSSLSocket socketStub = new StubSSLSocket(null);
1:1a88ac6:             StubSslTransport transport = null;
1:1a88ac6: 
1:1a88ac6:             try {
1:1a88ac6:                 transport = new StubSslTransport(null, socketStub);
1:f812e34:             } catch (Exception e) {
1:1a88ac6:                 fail("Unable to create StubSslTransport: " + e.getMessage());
1:1a88ac6:             }
1:1a88ac6: 
1:6e34afc:             if (verbose) {
1:fc00993:                 LOG.info("");
1:fc00993:                 LOG.info("Iteration: " + i);
1:fc00993:                 LOG.info("Map settings: " + options);
1:6e34afc:                 for (int x = 0; x < optionSettings.length; x++) {
1:fc00993:                     LOG.info("optionSetting[" + x + "] = " + optionSettings[x]);
5:6e34afc:                 }
1:6e34afc:             }
1:1a88ac6: 
1:1a88ac6:             factory.compositeConfigure(transport, new OpenWireFormat(), options);
1:1a88ac6: 
1:6e34afc:             // lets start the transport to force the introspection
1:6e34afc:             try {
1:6e34afc:                 transport.start();
1:f812e34:             } catch (Exception e) {
1:6e34afc:                 // ignore bad connection
1:1a88ac6:             }
1:1a88ac6: 
1:6e34afc:             if (socketStub.getWantClientAuthStatus() != optionSettings[2]) {
1:fc00993:                 LOG.info("sheiite");
1:1a88ac6:             }
1:aa1aa58: 
1:f812e34:             assertEquals("wantClientAuth was not properly set for iteration: " + i, optionSettings[0],
1:f812e34:                          transport.getWantClientAuthStatus());
1:f812e34:             assertEquals("needClientAuth was not properly set for iteration: " + i, optionSettings[1],
1:f812e34:                          transport.getNeedClientAuthStatus());
1:f812e34:             assertEquals("socket.wantClientAuth was not properly set for iteration: " + i, optionSettings[2],
1:f812e34:                          socketStub.getWantClientAuthStatus());
1:f812e34:             assertEquals("socket.needClientAuth was not properly set for iteration: " + i, optionSettings[3],
1:f812e34:                          socketStub.getNeedClientAuthStatus());
1:f812e34:             assertEquals("socket.useClientMode was not properly set for iteration: " + i, optionSettings[4],
1:f812e34:                          socketStub.getUseClientModeStatus());
1:1a88ac6:         }
1:6e34afc:     }
1:6e34afc: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 //We now always set options to a default we default verifyHostName to true
1:                 //so we setSSLParameters so make the not set value = 0
1:                 if (optionSettings[j] == -1) {
1:                     optionSettings[j] = 0;
1:                 }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SslTransportFactoryTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:                 sslTransportServer = (SslTransportServer)factory.doBind(new URI(
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>();
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             final boolean wantClientAuth = (i & 0x1) == 1;
1:             final boolean needClientAuth = (i & 0x2) == 1;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SslTransportFactoryTest.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("");
1:                 LOG.info("Iteration: " + i);
1:                 LOG.info("Map settings: " + options);
1:                     LOG.info("optionSetting[" + x + "] = " + optionSettings[x]);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("sheiite");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:                     options.put(optionNames[j], optionSettings[j] == 1 ? "true" : "false");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:             String options = "wantClientAuth=" + (wantClientAuth ? "true" : "false") + "&needClientAuth="
1:                              + (needClientAuth ? "true" : "false");
0:                 sslTransportServer = (SslTransportServer)factory.doBind("brokerId", new URI(
1:                                                                                             "ssl://localhost:61616?"
1:                                                                                                 + options));
1:             } catch (Exception e) {
1:                          sslTransportServer.getWantClientAuth(), wantClientAuth);
1:                          sslTransportServer.getNeedClientAuth(), needClientAuth);
1:             } catch (Exception e) {
1:         return (number / ((int)Math.pow(numBase, digitIdx))) % numBase;
1:         String optionNames[] = {"wantClientAuth", "needClientAuth", "socket.wantClientAuth",
1:                                 "socket.needClientAuth", "socket.useClientMode"};
1:         // Using a trinary interpretation of i to set all possible values of
1:         // stub options for socket and transport.
1:         // 2 transport options, 3 socket options, 3 settings for each option =>
1:         // 3^5 = 243 combos.
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("wantClientAuth was not properly set for iteration: " + i, optionSettings[0],
1:                          transport.getWantClientAuthStatus());
1:             assertEquals("needClientAuth was not properly set for iteration: " + i, optionSettings[1],
1:                          transport.getNeedClientAuthStatus());
1:             assertEquals("socket.wantClientAuth was not properly set for iteration: " + i, optionSettings[2],
1:                          socketStub.getWantClientAuthStatus());
1:             assertEquals("socket.needClientAuth was not properly set for iteration: " + i, optionSettings[3],
1:                          socketStub.getNeedClientAuthStatus());
1:             assertEquals("socket.useClientMode was not properly set for iteration: " + i, optionSettings[4],
1:                          socketStub.getUseClientModeStatus());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.tcp;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.openwire.OpenWireFormat;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class SslTransportFactoryTest extends TestCase {
1:     private SslTransportFactory factory;
1:     
1:     protected void setUp() throws Exception {
1:         factory = new SslTransportFactory();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1:     
1:     public void testBindServerOptions() throws IOException {
1:                 
1:         SslTransportServer sslTransportServer = null;
1:         
1:         for (int i = 0; i < 4; ++i) {
0:             final boolean wantClientAuth = ((i & 0x1) == 1);
0:             final boolean needClientAuth = ((i & 0x2) == 1);
1:             
0:             String options = "wantClientAuth=" + (wantClientAuth ? "true" : "false") +
0:                 "&needClientAuth=" + (needClientAuth ? "true" : "false");
1:         
1:             try {
0:                 sslTransportServer = (SslTransportServer)
0:                     factory.doBind("brokerId", new URI("ssl://localhost:61616?" + options));
0:             } catch (Exception e) {
1:                 fail("Unable to bind to address: " + e.getMessage());
1:             }
1:             
1:             assertEquals("Created ServerSocket did not have correct wantClientAuth status.",
0:                 sslTransportServer.getWantClientAuth(), wantClientAuth);
1:             
1:             assertEquals("Created ServerSocket did not have correct needClientAuth status.",
0:                 sslTransportServer.getNeedClientAuth(), needClientAuth);
1:             
1:             try {
1:                 sslTransportServer.stop();
0:             } catch (Exception e) {
1:                 fail("Unable to stop TransportServer: " + e.getMessage());
1:             }
1:         }
1:     }
1:     
1:     private int getMthNaryDigit(int number, int digitIdx, int numBase) {
0:         return (number / ((int)Math.pow(numBase, digitIdx)) ) % numBase;
1:     }
1:     
1:     public void testCompositeConfigure() throws IOException {
1:         // The 5 options being tested.
1:         int optionSettings[] = new int[5];
1:         
0:         String optionNames[] = {
0:           "wantClientAuth",
0:           "needClientAuth",
0:           "socket.wantClientAuth",
0:           "socket.needClientAuth",
0:           "socket.useClientMode"
0:         };
1:         
0:         // Using a trinary interpretation of i to set all possible values of stub options for socket and transport.
0:         // 2 transport options, 3 socket options, 3 settings for each option => 3^5 = 243 combos.
1:         for (int i = 0; i < 243; ++i) {
0:             Map options = new HashMap();
1:             
1:             for (int j = 0; j < 5; ++j) {
1:                 // -1 since the option range is [-1,1], not [0,2].
1:                 optionSettings[j] = getMthNaryDigit(i, j, 3) - 1;
1:                 
0:                 if ( optionSettings[j] != -1) {
0:                     options.put(optionNames[j], (optionSettings[j] == 1 ? "true" : "false"));
1:                 }
1:             }
1:             
1:             StubSSLSocket socketStub = new StubSSLSocket(null);
1:             StubSslTransport transport = null;
1:             
1:             try {
1:                 transport = new StubSslTransport(null, socketStub);
0:             } catch (Exception e) {
1:                 fail("Unable to create StubSslTransport: " + e.getMessage());
1:             }
1:             
1:             factory.compositeConfigure(transport, new OpenWireFormat(), options);
1:             
0:             if (socketStub.getWantClientAuthStatus() != optionSettings[2])
0:                 System.out.println("sheiite");
1:             
0:             assertEquals("wantClientAuth was not properly set",
0:                 optionSettings[0], transport.getWantClientAuthStatus());
0:             assertEquals("needClientAuth was not properly set",
0:                 optionSettings[1], transport.getNeedClientAuthStatus());
0:             assertEquals("socket.wantClientAuth was not properly set",
0:                 optionSettings[2], socketStub.getWantClientAuthStatus());
0:             assertEquals("socket.needClientAuth was not properly set",
0:                 optionSettings[3], socketStub.getNeedClientAuthStatus());
0:             assertEquals("socket.useClientMode was not properly set",
0:                 optionSettings[4], socketStub.getUseClientModeStatus());
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:7230da3
/////////////////////////////////////////////////////////////////////////
0:                 log.info("");
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(SslTransportFactoryTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:                 log.info();
0:                 log.info("Iteration: " + i);
0:                 log.info("Map settings: " + options);
0:                     log.info("optionSetting[" + x + "] = " + optionSettings[x]);
/////////////////////////////////////////////////////////////////////////
0:                 log.info("sheiite");
commit:6e34afc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private boolean verbose;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0:                     "&needClientAuth=" + (needClientAuth ? "true" : "false");
0: 
0:                         factory.doBind("brokerId", new URI("ssl://localhost:61616?" + options));
1:             }
0:             catch (Exception e) {
0: 
0:                     sslTransportServer.getWantClientAuth(), wantClientAuth);
0: 
0:                     sslTransportServer.getNeedClientAuth(), needClientAuth);
0: 
1:             }
0:             catch (Exception e) {
0: 
0:         return (number / ((int) Math.pow(numBase, digitIdx))) % numBase;
0: 
0: 
0:                 "wantClientAuth",
0:                 "needClientAuth",
0:                 "socket.wantClientAuth",
0:                 "socket.needClientAuth",
0:                 "socket.useClientMode"
0: 
0: 
0: 
1:                 if (optionSettings[j] != -1) {
0: 
0: 
1:             }
0:             catch (Exception e) {
0: 
1:             if (verbose) {
0:                 System.out.println();
0:                 System.out.println("Iteration: " + i);
0:                 System.out.println("Map settings: " + options);
1:                 for (int x = 0; x < optionSettings.length; x++) {
0:                     System.out.println("optionSetting[" + x + "] = " + optionSettings[x]);
1:                 }
1:             }
0: 
0: 
1:             // lets start the transport to force the introspection
1:             try {
1:                 transport.start();
1:             }
0:             catch (Exception e) {
1:                 // ignore bad connection
1:             }
0: 
1:             if (socketStub.getWantClientAuthStatus() != optionSettings[2]) {
1:             }
0: 
0:             assertEquals("wantClientAuth was not properly set for iteration: " + i,
0:                     optionSettings[0], transport.getWantClientAuthStatus());
0:             assertEquals("needClientAuth was not properly set for iteration: " + i,
0:                     optionSettings[1], transport.getNeedClientAuthStatus());
0:             assertEquals("socket.wantClientAuth was not properly set for iteration: " + i,
0:                     optionSettings[2], socketStub.getWantClientAuthStatus());
0:             assertEquals("socket.needClientAuth was not properly set for iteration: " + i,
0:                     optionSettings[3], socketStub.getNeedClientAuthStatus());
0:             assertEquals("socket.useClientMode was not properly set for iteration: " + i,
0:                     optionSettings[4], socketStub.getUseClientModeStatus());
============================================================================