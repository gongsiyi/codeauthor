3:fcb5d9e: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:fcb5d9e:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fcb5d9e:  *
1:fcb5d9e:  * Unless required by applicable law or agreed to in writing, software
1:fcb5d9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fcb5d9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fcb5d9e:  * See the License for the specific language governing permissions and
1:fcb5d9e:  * limitations under the License.
1:fcb5d9e:  */
1:fcb5d9e: package org.apache.activemq.openwire.tool;
1:bd0ad68: 
1:fcb5d9e: import java.io.File;
1:fcb5d9e: import java.io.FileWriter;
1:fcb5d9e: import java.io.PrintWriter;
1:fcb5d9e: import java.util.ArrayList;
1:fcb5d9e: import java.util.HashSet;
1:bd0ad68: import java.util.Iterator;
1:fcb5d9e: import java.util.List;
1:fcb5d9e: import java.util.Set;
19:fcb5d9e: 
1:fcb5d9e: import org.apache.tools.ant.Project;
1:fcb5d9e: import org.apache.tools.ant.taskdefs.FixCRLF;
1:fcb5d9e: import org.codehaus.jam.JClass;
1:fcb5d9e: import org.codehaus.jam.JProperty;
1:fcb5d9e: import org.codehaus.jam.JamClassIterator;
1:fcb5d9e: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:fcb5d9e:  */
1:bd0ad68: public abstract class SingleSourceGenerator extends OpenWireGenerator {
1:540dd5c: 
1:540dd5c:     protected Set<String> manuallyMaintainedClasses = new HashSet<String>();
1:fcb5d9e:     protected File destFile;
1:fcb5d9e: 
1:fcb5d9e:     protected JClass jclass;
1:fcb5d9e:     protected JClass superclass;
1:fcb5d9e:     protected String simpleName;
1:fcb5d9e:     protected String className;
1:fcb5d9e:     protected String baseClass;
1:540dd5c:     protected List<JClass> sortedClasses;
1:bd0ad68: 
1:bd0ad68:     public SingleSourceGenerator() {
1:fcb5d9e:         initialiseManuallyMaintainedClasses();
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     public Object run() {
1:540dd5c: 
1:bd0ad68:         if (destFile == null) {
1:bd0ad68:             throw new IllegalArgumentException("No destFile defined!");
1:540dd5c:         }
1:bd0ad68:         destFile.getParentFile().mkdirs();
1:bd0ad68: 
1:bd0ad68:         PrintWriter out = null;
1:bd0ad68:         try {
1:540dd5c:             out = new PrintWriter(new FileWriter(destFile));
1:540dd5c: 
1:540dd5c:             ArrayList<JClass> classes = new ArrayList<JClass>();
1:540dd5c:             JamClassIterator iter = getClasses();
1:bd0ad68:             while (iter.hasNext()) {
1:540dd5c:                 jclass = iter.nextClass();
1:bd0ad68:                 if (isValidClass(jclass)) {
1:540dd5c:                     classes.add(jclass);
1:bd0ad68:                 }
1:bd0ad68:             }
1:540dd5c:             sortedClasses = sort(classes);
1:540dd5c: 
1:540dd5c:             generateSetup(out);
1:540dd5c:             for (Iterator<JClass> iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:540dd5c:                 jclass = iterator.next();
1:bd0ad68:                 simpleName = jclass.getSimpleName();
1:bd0ad68:                 superclass = jclass.getSuperclass();
1:bd0ad68:                 className = getClassName(jclass);
1:bd0ad68:                 baseClass = getBaseClassName(jclass);
1:bd0ad68: 
1:bd0ad68:                 System.out.println(getClass().getName() + " processing class: " + simpleName);
1:bd0ad68:                 generateFile(out);
1:540dd5c:             }
1:bd0ad68:             generateTearDown(out);
1:540dd5c: 
1:bd0ad68:         } catch (Exception e) {
1:bd0ad68:             throw new RuntimeException(e);
1:bd0ad68:         } finally {
1:bd0ad68:             if (out != null) {
1:bd0ad68:                 out.close();
1:bd0ad68:             }
28:fcb5d9e:         }
1:540dd5c: 
1:540dd5c:         // Use the FixCRLF Ant Task to make sure the file has consistent
1:540dd5c:         // newlines
1:bd0ad68:         // so that SVN does not complain on checkin.
1:bd0ad68:         Project project = new Project();
1:bd0ad68:         project.init();
1:bd0ad68:         FixCRLF fixCRLF = new FixCRLF();
1:bd0ad68:         fixCRLF.setProject(project);
1:bd0ad68:         fixCRLF.setSrcdir(destFile.getParentFile());
1:bd0ad68:         fixCRLF.setIncludes(destFile.getName());
1:bd0ad68:         fixCRLF.execute();
1:fcb5d9e:         return null;
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected List<JClass> sort(List<JClass> classes) {
1:540dd5c:         return classes;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void generateTearDown(PrintWriter out) {
1:540dd5c:     }
1:bd0ad68: 
1:bd0ad68:     protected void generateSetup(PrintWriter out) {
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     /**
1:fcb5d9e:      * Returns all the valid properties available on the current class
1:fcb5d9e:      */
1:540dd5c:     public List<JProperty> getProperties() {
1:540dd5c:         List<JProperty> answer = new ArrayList<JProperty>();
1:fcb5d9e:         JProperty[] properties = jclass.getDeclaredProperties();
1:fcb5d9e:         for (int i = 0; i < properties.length; i++) {
1:fcb5d9e:             JProperty property = properties[i];
1:fcb5d9e:             if (isValidProperty(property)) {
1:fcb5d9e:                 answer.add(property);
1:bd0ad68:             }
1:bd0ad68:         }
1:fcb5d9e:         return answer;
1:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     protected boolean isValidClass(JClass jclass) {
1:540dd5c:         if (jclass == null || jclass.getAnnotation("openwire:marshaller") == null) {
1:fcb5d9e:             return false;
1:fcb5d9e:         }
1:bd0ad68:         return true;
1:540dd5c:         // return !manuallyMaintainedClasses.contains(jclass.getSimpleName());
1:fcb5d9e:     }
1:bd0ad68: 
1:bd0ad68:     protected abstract void generateFile(PrintWriter out) throws Exception;
1:fcb5d9e: 
1:fcb5d9e:     protected String getBaseClassName(JClass jclass) {
1:fcb5d9e:         String answer = "BaseDataStructure";
1:fcb5d9e:         if (superclass != null) {
1:fcb5d9e:             String name = superclass.getSimpleName();
1:fcb5d9e:             if (name != null && !name.equals("Object")) {
1:fcb5d9e:                 answer = name;
1:fcb5d9e:             }
1:fcb5d9e:         }
1:fcb5d9e:         return answer;
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     protected String getClassName(JClass jclass) {
1:fcb5d9e:         return jclass.getSimpleName();
1:fcb5d9e:     }
1:540dd5c: 
1:fcb5d9e:     public boolean isAbstractClass() {
1:f50bf9c:         return jclass != null && jclass.isAbstract();
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     public String getAbstractClassText() {
1:fcb5d9e:         return isAbstractClass() ? "abstract " : "";
1:fcb5d9e:     }
1:540dd5c: 
1:fcb5d9e:     public boolean isMarshallerAware() {
1:fcb5d9e:         return isMarshallAware(jclass);
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     protected void initialiseManuallyMaintainedClasses() {
1:540dd5c:         String[] names = {
1:540dd5c:             "ActiveMQDestination", "ActiveMQTempDestination", "ActiveMQQueue", "ActiveMQTopic", "ActiveMQTempQueue", "ActiveMQTempTopic", "BaseCommand", "ActiveMQMessage", "ActiveMQTextMessage",
1:540dd5c:             "ActiveMQMapMessage", "ActiveMQBytesMessage", "ActiveMQStreamMessage", "ActiveMQStreamMessage", "DataStructureSupport", "WireFormatInfo", "ActiveMQObjectMessage"
1:540dd5c:         };
1:fcb5d9e: 
1:fcb5d9e:         for (int i = 0; i < names.length; i++) {
1:fcb5d9e:             manuallyMaintainedClasses.add(names[i]);
1:fcb5d9e:         }
1:fcb5d9e:     }
1:fcb5d9e: 
1:540dd5c:     public String getBaseClass() {
1:540dd5c:         return baseClass;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setBaseClass(String baseClass) {
1:540dd5c:         this.baseClass = baseClass;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public String getClassName() {
1:540dd5c:         return className;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setClassName(String className) {
1:540dd5c:         this.className = className;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public File getDestFile() {
1:540dd5c:         return destFile;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setDestFile(File destFile) {
1:540dd5c:         this.destFile = destFile;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public JClass getJclass() {
1:540dd5c:         return jclass;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setJclass(JClass jclass) {
1:540dd5c:         this.jclass = jclass;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public Set<String> getManuallyMaintainedClasses() {
1:540dd5c:         return manuallyMaintainedClasses;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) {
1:540dd5c:         this.manuallyMaintainedClasses = manuallyMaintainedClasses;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public String getSimpleName() {
1:540dd5c:         return simpleName;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setSimpleName(String simpleName) {
1:540dd5c:         this.simpleName = simpleName;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public JClass getSuperclass() {
1:540dd5c:         return superclass;
1:540dd5c:     }
1:fcb5d9e: 
1:540dd5c:     public void setSuperclass(JClass superclass) {
1:540dd5c:         this.superclass = superclass;
1:540dd5c:     }
1:fcb5d9e: 
1:fcb5d9e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected Set<String> manuallyMaintainedClasses = new HashSet<String>();
/////////////////////////////////////////////////////////////////////////
1:     protected List<JClass> sortedClasses;
1: 
1:         }
1:             out = new PrintWriter(new FileWriter(destFile));
1: 
1:             ArrayList<JClass> classes = new ArrayList<JClass>();
1:             JamClassIterator iter = getClasses();
1:                 jclass = iter.nextClass();
1:                     classes.add(jclass);
1:             sortedClasses = sort(classes);
1: 
1:             generateSetup(out);
1:             for (Iterator<JClass> iterator = sortedClasses.iterator(); iterator.hasNext();) {
1:                 jclass = iterator.next();
/////////////////////////////////////////////////////////////////////////
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Use the FixCRLF Ant Task to make sure the file has consistent
1:         // newlines
/////////////////////////////////////////////////////////////////////////
1:     protected List<JClass> sort(List<JClass> classes) {
1:         return classes;
1:     }
1: 
1:     protected void generateTearDown(PrintWriter out) {
1:     }
1:     }
1:     /**
1:     public List<JProperty> getProperties() {
1:         List<JProperty> answer = new ArrayList<JProperty>();
/////////////////////////////////////////////////////////////////////////
1:         if (jclass == null || jclass.getAnnotation("openwire:marshaller") == null) {
1:         // return !manuallyMaintainedClasses.contains(jclass.getSimpleName());
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         String[] names = {
1:             "ActiveMQDestination", "ActiveMQTempDestination", "ActiveMQQueue", "ActiveMQTopic", "ActiveMQTempQueue", "ActiveMQTempTopic", "BaseCommand", "ActiveMQMessage", "ActiveMQTextMessage",
1:             "ActiveMQMapMessage", "ActiveMQBytesMessage", "ActiveMQStreamMessage", "ActiveMQStreamMessage", "DataStructureSupport", "WireFormatInfo", "ActiveMQObjectMessage"
1:         };
1:     public String getBaseClass() {
1:         return baseClass;
1:     }
1:     public void setBaseClass(String baseClass) {
1:         this.baseClass = baseClass;
1:     }
1:     public String getClassName() {
1:         return className;
1:     }
1:     public void setClassName(String className) {
1:         this.className = className;
1:     }
1:     public File getDestFile() {
1:         return destFile;
1:     }
1:     public void setDestFile(File destFile) {
1:         this.destFile = destFile;
1:     }
1:     public JClass getJclass() {
1:         return jclass;
1:     }
1:     public void setJclass(JClass jclass) {
1:         this.jclass = jclass;
1:     }
1:     public Set<String> getManuallyMaintainedClasses() {
1:         return manuallyMaintainedClasses;
1:     }
1:     public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) {
1:         this.manuallyMaintainedClasses = manuallyMaintainedClasses;
1:     }
1:     public String getSimpleName() {
1:         return simpleName;
1:     }
1:     public void setSimpleName(String simpleName) {
1:         this.simpleName = simpleName;
1:     }
1:     public JClass getSuperclass() {
1:         return superclass;
1:     }
1:     public void setSuperclass(JClass superclass) {
1:         this.superclass = superclass;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1: public abstract class SingleSourceGenerator extends OpenWireGenerator {
1: 	
/////////////////////////////////////////////////////////////////////////
0: 	protected List sortedClasses;
1:     public SingleSourceGenerator() {
1:     	
1:         if (destFile == null) {
1:             throw new IllegalArgumentException("No destFile defined!");
1:         }        
1:         destFile.getParentFile().mkdirs();
1:         PrintWriter out = null;
1:         try {
0:         	out =  new PrintWriter(new FileWriter(destFile));
1:         	
0:         	ArrayList classes = new ArrayList();        	
0:    	     	JamClassIterator iter = getClasses();
1:             while (iter.hasNext()) {
0: 				jclass = iter.nextClass();				
1:                 if (isValidClass(jclass)) {
0:                 	classes.add(jclass);
1:                 }
1:             }
0:    	        sortedClasses = sort(classes);
1:    	        
0:         	generateSetup(out);
0:    	        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {
0: 				jclass = (JClass) iterator.next();				
1:                 simpleName = jclass.getSimpleName();
1:                 superclass = jclass.getSuperclass();
1:                 className = getClassName(jclass);
1:                 baseClass = getBaseClassName(jclass);
1: 
1:                 System.out.println(getClass().getName() + " processing class: " + simpleName);
1:                 generateFile(out);
1:             }        
1:             generateTearDown(out);
1:         	
1:         } catch (Exception e) {
1:             throw new RuntimeException(e);
1:         } finally {
1:             if (out != null) {
1:                 out.close();
1:         
0:         // Use the FixCRLF Ant Task to make sure the file has consistent newlines
1:         // so that SVN does not complain on checkin.
1:         Project project = new Project();
1:         project.init();
1:         FixCRLF fixCRLF = new FixCRLF();
1:         fixCRLF.setProject(project);
1:         fixCRLF.setSrcdir(destFile.getParentFile());
1:         fixCRLF.setIncludes(destFile.getName());
1:         fixCRLF.execute();
1:     
0:     protected List sort(List classes) {
0: 		return classes;
1: 	}
0: 	protected void generateTearDown(PrintWriter out) {
1: 	}
1: 
1:     protected void generateSetup(PrintWriter out) {
1: 	}
1: 
1: 	/**
/////////////////////////////////////////////////////////////////////////
0:         if (jclass==null || jclass.getAnnotation("openwire:marshaller") == null) {
1:         return true;
0:         //return !manuallyMaintainedClasses.contains(jclass.getSimpleName());
1:     protected abstract void generateFile(PrintWriter out) throws Exception;
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:fcb5d9e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.tools.ant.Project;
1: import org.apache.tools.ant.taskdefs.FixCRLF;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: import org.codehaus.jam.JamClassIterator;
1: 
1: /**
1:  * 
0:  * @version $Revision: 386442 $
1:  */
0: public abstract class OpenWireClassesScript extends OpenWireScript {
0:     protected Set manuallyMaintainedClasses = new HashSet();
0:     protected File destDir;
1:     protected File destFile;
1: 
1:     protected JClass jclass;
1:     protected JClass superclass;
1:     protected String simpleName;
1:     protected String className;
1:     protected String baseClass;
0:     protected StringBuffer buffer;
1: 
0:     public OpenWireClassesScript() {
1:         initialiseManuallyMaintainedClasses();
1:     }
1: 
1:     public Object run() {
0:         if (destDir == null) {
0:             throw new IllegalArgumentException("No destDir defined!");
1:         }
0:         System.out.println(getClass().getName() + " generating files in: " + destDir);
0:         destDir.mkdirs();
0:         buffer = new StringBuffer();
1: 
0:         JamClassIterator iter = getClasses();
0:         while (iter.hasNext()) {
0:             jclass = iter.nextClass();
0:             if (isValidClass(jclass)) {
0:                 processClass(jclass);
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     /**
1:      * Returns all the valid properties available on the current class
1:      */
0:     public List getProperties() {
0:         List answer = new ArrayList();
1:         JProperty[] properties = jclass.getDeclaredProperties();
1:         for (int i = 0; i < properties.length; i++) {
1:             JProperty property = properties[i];
1:             if (isValidProperty(property)) {
1:                 answer.add(property);
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     protected boolean isValidClass(JClass jclass) {
0:         if (jclass.getAnnotation("openwire:marshaller") == null) {
1:             return false;
1:         }
0:         return !manuallyMaintainedClasses.contains(jclass.getSimpleName());
1:     }
1: 
0:     protected void processClass(JClass jclass) {
0:         simpleName = jclass.getSimpleName();
0:         superclass = jclass.getSuperclass();
1: 
0:         System.out.println(getClass().getName() + " processing class: " + simpleName);
1: 
0:         className = getClassName(jclass);
1: 
0:         destFile = new File(destDir, className + filePostFix);
1: 
0:         baseClass = getBaseClassName(jclass);
1: 
0:         PrintWriter out = null;
0:         try {
0:             out = new PrintWriter(new FileWriter(destFile));
0:             generateFile(out);
1:         }
0:         catch (Exception e) {
0:             throw new RuntimeException(e);
1:         }
0:         finally {
0:             if (out != null) {
0:                 out.close();
1:             }
1:         }
1:         
0:         // Use the FixCRLF Ant Task to make sure the file has consistent newlines
0:         // so that SVN does not complain on checkin.
0:         Project project = new Project();
0:         project.init();
0:         FixCRLF fixCRLF = new FixCRLF();
0:         fixCRLF.setProject(project);
0:         fixCRLF.setSrcdir(destFile.getParentFile());
0:         fixCRLF.setIncludes(destFile.getName());
0:         fixCRLF.execute();
1:     }
1: 
0:     protected abstract void generateFile(PrintWriter out);
1: 
1:     protected String getBaseClassName(JClass jclass) {
1:         String answer = "BaseDataStructure";
1:         if (superclass != null) {
1:             String name = superclass.getSimpleName();
1:             if (name != null && !name.equals("Object")) {
1:                 answer = name;
1:             }
1:         }
1:         return answer;
1:     }
1: 
1:     protected String getClassName(JClass jclass) {
1:         return jclass.getSimpleName();
1:     }
1:     
1:     public boolean isAbstractClass() {
0:         return jclass != null & jclass.isAbstract();
1:     }
1: 
1:     public String getAbstractClassText() {
1:         return isAbstractClass() ? "abstract " : "";
1:     }
1:     
1:     public boolean isMarshallerAware() {
1:         return isMarshallAware(jclass);
1:     }
1: 
1:     protected void initialiseManuallyMaintainedClasses() {
0:         String[] names = { "ActiveMQDestination", "ActiveMQTempDestination", "ActiveMQQueue", "ActiveMQTopic", "ActiveMQTempQueue", "ActiveMQTempTopic",
0:                 "BaseCommand", "ActiveMQMessage", "ActiveMQTextMessage", "ActiveMQMapMessage", "ActiveMQBytesMessage", "ActiveMQStreamMessage",
0:                 "ActiveMQStreamMessage", "DataStructureSupport", "WireFormatInfo", "ActiveMQObjectMessage" };
1: 
1:         for (int i = 0; i < names.length; i++) {
1:             manuallyMaintainedClasses.add(names[i]);
1:         }
1:     }
1: 
0: 	public String getBaseClass() {
0: 		return baseClass;
1: 	}
1: 
0: 	public void setBaseClass(String baseClass) {
0: 		this.baseClass = baseClass;
1: 	}
1: 
0: 	public String getClassName() {
0: 		return className;
1: 	}
1: 
0: 	public void setClassName(String className) {
0: 		this.className = className;
1: 	}
1: 
0: 	public File getDestDir() {
0: 		return destDir;
1: 	}
1: 
0: 	public void setDestDir(File destDir) {
0: 		this.destDir = destDir;
1: 	}
1: 
0: 	public File getDestFile() {
0: 		return destFile;
1: 	}
1: 
0: 	public void setDestFile(File destFile) {
0: 		this.destFile = destFile;
1: 	}
1: 
0: 	public JClass getJclass() {
0: 		return jclass;
1: 	}
1: 
0: 	public void setJclass(JClass jclass) {
0: 		this.jclass = jclass;
1: 	}
1: 
0: 	public Set getManuallyMaintainedClasses() {
0: 		return manuallyMaintainedClasses;
1: 	}
1: 
0: 	public void setManuallyMaintainedClasses(Set manuallyMaintainedClasses) {
0: 		this.manuallyMaintainedClasses = manuallyMaintainedClasses;
1: 	}
1: 
0: 	public String getSimpleName() {
0: 		return simpleName;
1: 	}
1: 
0: 	public void setSimpleName(String simpleName) {
0: 		this.simpleName = simpleName;
1: 	}
1: 
0: 	public JClass getSuperclass() {
0: 		return superclass;
1: 	}
1: 
0: 	public void setSuperclass(JClass superclass) {
0: 		this.superclass = superclass;
1: 	}
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f50bf9c
/////////////////////////////////////////////////////////////////////////
1:         return jclass != null && jclass.isAbstract();
============================================================================