1:41cdadb: /**
1:41cdadb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41cdadb:  * contributor license agreements.  See the NOTICE file distributed with
1:41cdadb:  * this work for additional information regarding copyright ownership.
1:41cdadb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41cdadb:  * (the "License"); you may not use this file except in compliance with
1:41cdadb:  * the License.  You may obtain a copy of the License at
1:41cdadb:  *
1:41cdadb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:41cdadb:  *
1:41cdadb:  * Unless required by applicable law or agreed to in writing, software
1:41cdadb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41cdadb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41cdadb:  * See the License for the specific language governing permissions and
1:41cdadb:  * limitations under the License.
1:41cdadb:  */
1:41cdadb: package org.apache.activemq.store.kahadb;
3:41cdadb: 
1:4743a20: import static org.junit.Assert.assertNotNull;
1:4743a20: import static org.junit.Assert.assertNull;
1:4743a20: 
1:41cdadb: import java.util.concurrent.TimeUnit;
1:4743a20: 
1:41cdadb: import javax.jms.ConnectionFactory;
1:41cdadb: import javax.jms.DeliveryMode;
1:41cdadb: import javax.jms.Destination;
1:41cdadb: import javax.jms.MessageConsumer;
1:41cdadb: import javax.jms.MessageProducer;
1:41cdadb: import javax.jms.Session;
1:4743a20: 
1:41cdadb: import org.apache.activemq.ActiveMQConnection;
1:41cdadb: import org.apache.activemq.ActiveMQConnectionFactory;
1:41cdadb: import org.apache.activemq.broker.BrokerService;
1:41cdadb: import org.apache.activemq.broker.region.BaseDestination;
1:41cdadb: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:41cdadb: import org.apache.activemq.broker.region.policy.PolicyMap;
1:41cdadb: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:41cdadb: import org.apache.activemq.command.ActiveMQQueue;
1:41cdadb: import org.junit.After;
1:41cdadb: import org.junit.Before;
1:41cdadb: import org.junit.Test;
1:41cdadb: 
1:41cdadb: public class KahaDBStoreRecoveryExpiryTest {
1:41cdadb: 
1:41cdadb:     private BrokerService broker;
1:41cdadb:     private ActiveMQConnection connection;
1:4743a20:     private final Destination destination = new ActiveMQQueue("Test");
1:41cdadb:     private Session session;
1:41cdadb: 
1:41cdadb:     @Test
1:41cdadb:     public void testRestartWitExpired() throws Exception  {
1:41cdadb:         publishMessages(1, 0);
1:41cdadb:         publishMessages(1, 2000);
1:41cdadb:         publishMessages(1, 0);
1:41cdadb:         restartBroker(3000);
1:41cdadb:         consumeMessages(2);
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     @Test
1:41cdadb:     public void testRestartWitExpiredLargerThanBatchRecovery() throws Exception  {
1:41cdadb:         publishMessages(BaseDestination.MAX_PAGE_SIZE + 10, 2000);
1:41cdadb:         publishMessages(10, 0);
1:41cdadb:         restartBroker(3000);
1:41cdadb:         consumeMessages(10);
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     private void consumeMessages(int count) throws Exception {
1:41cdadb:         MessageConsumer consumer = session.createConsumer(destination);
1:41cdadb:         for (int i=0; i<count; i++) {
1:41cdadb:             assertNotNull("got message "+ i, consumer.receive(4000));
1:41cdadb:         }
1:41cdadb:         assertNull("none left over", consumer.receive(2000));
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     private void restartBroker(int restartDelay) throws Exception {
1:41cdadb:         stopBroker();
1:41cdadb:         TimeUnit.MILLISECONDS.sleep(restartDelay);
1:41cdadb:         startBroker();
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     @After
1:41cdadb:     public void stopBroker() throws Exception {
1:41cdadb:         broker.stop();
1:41cdadb:         broker.waitUntilStopped();
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     private void publishMessages(int count, int expiry) throws Exception {
1:41cdadb:         MessageProducer producer = session.createProducer(destination);
1:41cdadb:         for (int i=0; i<count; i++) {
1:41cdadb:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 5, expiry);
1:41cdadb:         }
1:41cdadb:     }
1:41cdadb: 
1:41cdadb:     @Before
1:41cdadb:     public void startBroker() throws Exception {
1:41cdadb:         broker = new BrokerService();
1:41cdadb:         ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).setIndexCacheSize(0);
1:41cdadb:         PolicyMap policyMap = new PolicyMap();
1:41cdadb:         PolicyEntry defaultEntry = new PolicyEntry();
1:41cdadb:         defaultEntry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:41cdadb:         policyMap.setDefaultEntry(defaultEntry);
1:41cdadb:         broker.setDestinationPolicy(policyMap);
1:41cdadb:         broker.setUseJmx(false);
1:41cdadb:         broker.start();
1:41cdadb: 
1:41cdadb:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:41cdadb:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:41cdadb:         connection.setWatchTopicAdvisories(false);
1:41cdadb:         connection.start();
1:41cdadb: 
1:41cdadb:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41cdadb:     }
1:41cdadb: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Destination destination = new ActiveMQQueue("Test");
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:41cdadb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.BaseDestination;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: import static junit.framework.Assert.assertNotNull;
0: import static junit.framework.Assert.assertNull;
1: 
1: public class KahaDBStoreRecoveryExpiryTest {
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnection connection;
0:     private Destination destination = new ActiveMQQueue("Test");
1:     private Session session;
1: 
1:     @Test
1:     public void testRestartWitExpired() throws Exception  {
1:         publishMessages(1, 0);
1:         publishMessages(1, 2000);
1:         publishMessages(1, 0);
1:         restartBroker(3000);
1:         consumeMessages(2);
1:     }
1: 
1:     @Test
1:     public void testRestartWitExpiredLargerThanBatchRecovery() throws Exception  {
1:         publishMessages(BaseDestination.MAX_PAGE_SIZE + 10, 2000);
1:         publishMessages(10, 0);
1:         restartBroker(3000);
1:         consumeMessages(10);
1:     }
1: 
1:     private void consumeMessages(int count) throws Exception {
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         for (int i=0; i<count; i++) {
1:             assertNotNull("got message "+ i, consumer.receive(4000));
1:         }
1:         assertNull("none left over", consumer.receive(2000));
1:     }
1: 
1:     private void restartBroker(int restartDelay) throws Exception {
1:         stopBroker();
1:         TimeUnit.MILLISECONDS.sleep(restartDelay);
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     private void publishMessages(int count, int expiry) throws Exception {
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i=0; i<count; i++) {
1:             producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 5, expiry);
1:         }
1:     }
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).setIndexCacheSize(0);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.setUseJmx(false);
1:         broker.start();
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setWatchTopicAdvisories(false);
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: }
============================================================================