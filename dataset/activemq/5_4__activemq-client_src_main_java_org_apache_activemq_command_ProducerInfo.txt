1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
6:d29ca2a: 
1:6683eb6: import java.util.concurrent.atomic.AtomicLong;
1:6683eb6: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * 
1:4afa5d6:  * @openwire:marshaller code="6"
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class ProducerInfo extends BaseCommand {
1:d29ca2a: 
1:f812e34:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PRODUCER_INFO;
1:d29ca2a: 
1:d29ca2a:     protected ProducerId producerId;
1:d29ca2a:     protected ActiveMQDestination destination;
1:d29ca2a:     protected BrokerId[] brokerPath;
1:3daf923:     protected boolean dispatchAsync;
1:ec14f65:     protected int windowSize;
1:6683eb6:     protected AtomicLong sentCount = new AtomicLong();
1:f812e34: 
1:d29ca2a:     public ProducerInfo() {
6:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ProducerInfo(ProducerId producerId) {
1:d29ca2a:         this.producerId = producerId;
1:ec14f65:     }
1:d29ca2a: 
1:d29ca2a:     public ProducerInfo(SessionInfo sessionInfo, long producerId) {
1:d29ca2a:         this.producerId = new ProducerId(sessionInfo.getSessionId(), producerId);
1:3daf923:     }
1:d29ca2a: 
1:d29ca2a:     public ProducerInfo copy() {
1:d29ca2a:         ProducerInfo info = new ProducerInfo();
1:d29ca2a:         copy(info);
1:d29ca2a:         return info;
1:3daf923:     }
1:d29ca2a: 
1:d29ca2a:     public void copy(ProducerInfo info) {
1:d29ca2a:         super.copy(info);
1:d29ca2a:         info.producerId = producerId;
1:d29ca2a:         info.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:f812e34: 
1:3daf923:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ProducerId getProducerId() {
1:d29ca2a:         return producerId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setProducerId(ProducerId producerId) {
1:d29ca2a:         this.producerId = producerId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public RemoveInfo createRemoveCommand() {
1:d29ca2a:         RemoveInfo command = new RemoveInfo(getProducerId());
1:d29ca2a:         command.setResponseRequired(isResponseRequired());
1:d29ca2a:         return command;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * The route of brokers the command has moved through.
1:3daf923:      * 
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public BrokerId[] getBrokerPath() {
1:d29ca2a:         return brokerPath;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setBrokerPath(BrokerId[] brokerPath) {
1:d29ca2a:         this.brokerPath = brokerPath;
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:f812e34:         return visitor.processAddProducer(this);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * If the broker should dispatch messages from this producer async. Since
1:f812e34:      * sync dispatch could potentally block the producer thread, this could be
1:f812e34:      * an important setting for the producer.
1:d29ca2a:      * 
1:3daf923:      * @openwire:property version=2
1:3daf923:      */
1:f812e34:     public boolean isDispatchAsync() {
1:f812e34:         return dispatchAsync;
1:f812e34:     }
1:3daf923: 
1:f812e34:     public void setDispatchAsync(boolean dispatchAsync) {
1:f812e34:         this.dispatchAsync = dispatchAsync;
1:f812e34:     }
1:3daf923: 
1:ec14f65:     /**
1:f812e34:      * Used to configure the producer window size. A producer will send up to
1:f812e34:      * the configured window size worth of payload data to the broker before
1:f812e34:      * waiting for an Ack that allows him to send more.
1:ec14f65:      * 
1:ec14f65:      * @openwire:property version=3
1:ec14f65:      */
1:f812e34:     public int getWindowSize() {
1:f812e34:         return windowSize;
1:f812e34:     }
1:ec14f65: 
1:f812e34:     public void setWindowSize(int windowSize) {
1:f812e34:         this.windowSize = windowSize;
1:07ec890:     }
1:07ec890: 
1:6683eb6:     public long getSentCount(){
1:6683eb6:         return sentCount.get();
1:6683eb6:     }
1:6683eb6: 
1:6683eb6:     public void incrementSentCount(){
1:6683eb6:         sentCount.incrementAndGet();
1:6683eb6:     }
1:6683eb6: 
1:6683eb6:     public void resetSentCount(){
1:6683eb6:         sentCount.set(0);
1:f812e34:     }
1:ec14f65: 
1:ec14f65: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:rajdavies
-------------------------------------------------------------------------------
commit:6683eb6
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected AtomicLong sentCount = new AtomicLong();
/////////////////////////////////////////////////////////////////////////
1:     public long getSentCount(){
1:         return sentCount.get();
1:     }
1: 
1:     public void incrementSentCount(){
1:         sentCount.incrementAndGet();
1:     }
1: 
1:     public void resetSentCount(){
1:         sentCount.set(0);
author:Rob Davies
-------------------------------------------------------------------------------
commit:07ec890
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.management.CountStatisticImpl;
/////////////////////////////////////////////////////////////////////////
0:     protected CountStatisticImpl sentCount = new CountStatisticImpl("sentCount","number of messages sent to a broker");
/////////////////////////////////////////////////////////////////////////
0:     public CountStatisticImpl getSentCount(){
0:         return sentCount;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PRODUCER_INFO;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     }
1: 
1: 
1: 
1:      * The route of brokers the command has moved through.
1: 
1:         return visitor.processAddProducer(this);
1:      * If the broker should dispatch messages from this producer async. Since
1:      * sync dispatch could potentally block the producer thread, this could be
1:      * an important setting for the producer.
1:     public boolean isDispatchAsync() {
1:         return dispatchAsync;
1:     }
1:     public void setDispatchAsync(boolean dispatchAsync) {
1:         this.dispatchAsync = dispatchAsync;
1:     }
1:      * Used to configure the producer window size. A producer will send up to
1:      * the configured window size worth of payload data to the broker before
1:      * waiting for an Ack that allows him to send more.
1:     public int getWindowSize() {
1:         return windowSize;
1:     }
1:     public void setWindowSize(int windowSize) {
1:         this.windowSize = windowSize;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec14f65
/////////////////////////////////////////////////////////////////////////
1:     protected int windowSize;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Used to configure the producer window size.  A producer will
0:      * send up to the configured window size worth of payload data to
0:      * the broker before waiting for an Ack that allows him to send more.
1:      * 
1:      * @openwire:property version=3
1:      */
0: 	public int getWindowSize() {
0: 		return windowSize;
1: 	}
1: 
0: 	public void setWindowSize(int windowSize) {
0: 		this.windowSize = windowSize;
1: 	}
1: 
commit:3daf923
/////////////////////////////////////////////////////////////////////////
1:     protected boolean dispatchAsync;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * If the broker should dispatch messages from this producer async.  Since sync
0:      * dispatch could potentally block the producer thread, this could be an important
0:      * setting for the producer.
1:      * 
1:      * @openwire:property version=2
1:      */
0: 	public boolean isDispatchAsync() {
0: 		return dispatchAsync;
1: 	}
1: 
0: 	public void setDispatchAsync(boolean dispatchAsync) {
0: 		this.dispatchAsync = dispatchAsync;
1: 	}
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.13 $
1:  */
1: public class ProducerInfo extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.PRODUCER_INFO;
1: 
1:     protected ProducerId producerId;
1:     protected ActiveMQDestination destination;
1:     protected BrokerId[] brokerPath;
1:     
1:     public ProducerInfo() {
1:     }
1: 
1:     public ProducerInfo(ProducerId producerId) {
1:         this.producerId = producerId;
1:     }
1: 
1:     public ProducerInfo(SessionInfo sessionInfo, long producerId) {
1:         this.producerId = new ProducerId(sessionInfo.getSessionId(), producerId);
1:     }
1: 
1:     public ProducerInfo copy() {
1:         ProducerInfo info = new ProducerInfo();
1:         copy(info);
1:         return info;
1:     }
1: 
1:     public void copy(ProducerInfo info) {
1:         super.copy(info);
1:         info.producerId = producerId;
1:         info.destination = destination;
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ProducerId getProducerId() {
1:         return producerId;
1:     }
1:     public void setProducerId(ProducerId producerId) {
1:         this.producerId = producerId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }    
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1:     
1:     public RemoveInfo createRemoveCommand() {
1:         RemoveInfo command = new RemoveInfo(getProducerId());
1:         command.setResponseRequired(isResponseRequired());
1:         return command;
1:     }
1:     
1:     /**
0:      * The route of brokers the command has moved through. 
1:      * 
1:      * @openwire:property version=1 cache=true
1:      */
1:     public BrokerId[] getBrokerPath() {
1:         return brokerPath;
1:     }
1:     public void setBrokerPath(BrokerId[] brokerPath) {
1:         this.brokerPath = brokerPath;
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         return visitor.processAddProducer( this );
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="6"
============================================================================