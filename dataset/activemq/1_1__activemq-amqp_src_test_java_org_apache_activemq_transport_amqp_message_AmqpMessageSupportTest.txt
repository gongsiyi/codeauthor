1:d54e21b: /*
1:d54e21b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d54e21b:  * contributor license agreements.  See the NOTICE file distributed with
1:d54e21b:  * this work for additional information regarding copyright ownership.
1:d54e21b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d54e21b:  * (the "License"); you may not use this file except in compliance with
1:d54e21b:  * the License.  You may obtain a copy of the License at
1:d54e21b:  *
1:d54e21b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d54e21b:  *
1:d54e21b:  * Unless required by applicable law or agreed to in writing, software
1:d54e21b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d54e21b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d54e21b:  * See the License for the specific language governing permissions and
1:d54e21b:  * limitations under the License.
1:d54e21b:  */
1:d54e21b: package org.apache.activemq.transport.amqp.message;
1:d54e21b: 
1:d54e21b: import static org.junit.Assert.assertFalse;
1:d54e21b: import static org.junit.Assert.assertNotNull;
1:d54e21b: import static org.junit.Assert.assertNull;
1:d54e21b: import static org.junit.Assert.assertTrue;
1:d54e21b: 
1:d54e21b: import java.util.HashMap;
1:d54e21b: import java.util.Map;
1:d54e21b: 
1:d54e21b: import org.apache.qpid.proton.Proton;
1:d54e21b: import org.apache.qpid.proton.amqp.Symbol;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:d54e21b: import org.apache.qpid.proton.message.Message;
1:d54e21b: import org.junit.Test;
1:d54e21b: 
1:d54e21b: public class AmqpMessageSupportTest {
1:d54e21b: 
1:d54e21b:     //---------- getSymbol ---------------------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testGetSymbol() {
1:d54e21b:         assertNotNull(AmqpMessageSupport.getSymbol("x-opt-something-or-other"));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //---------- getMessageAnnotation ----------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testGetMessageAnnotationWhenMessageHasAnnotationsMap() {
1:d54e21b:         Map<Symbol, Object> messageAnnotationsMap = new HashMap<Symbol,Object>();
1:d54e21b:         messageAnnotationsMap.put(Symbol.valueOf("x-opt-test"), Boolean.TRUE);
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotationsMap));
1:d54e21b: 
1:d54e21b:         assertNotNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testGetMessageAnnotationWhenMessageHasEmptyAnnotationsMap() {
1:d54e21b:         Map<Symbol, Object> messageAnnotationsMap = new HashMap<Symbol,Object>();
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotationsMap));
1:d54e21b: 
1:d54e21b:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testGetMessageAnnotationWhenMessageHasNoAnnotationsMap() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testGetMessageAnnotationWhenMessageIsNull() {
1:d54e21b:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", null));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //---------- isContentType -----------------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testIsContentTypeWithNullStringValueAndNullMessageContentType() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         assertTrue(AmqpMessageSupport.isContentType(null, message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testIsContentTypeWithNonNullStringValueAndNullMessageContentType() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         assertFalse(AmqpMessageSupport.isContentType("test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeNotEqual() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setContentType("fails");
1:d54e21b:         assertFalse(AmqpMessageSupport.isContentType("test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeEqual() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setContentType("test");
1:d54e21b:         assertTrue(AmqpMessageSupport.isContentType("test", message));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testIsContentTypeWithNullStringValueAndNonNullMessageContentType() {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setContentType("test");
1:d54e21b:         assertFalse(AmqpMessageSupport.isContentType(null, message));
1:d54e21b:     }
1:d54e21b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.qpid.proton.Proton;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.message.Message;
1: import org.junit.Test;
1: 
1: public class AmqpMessageSupportTest {
1: 
1:     //---------- getSymbol ---------------------------------------------------//
1: 
1:     @Test
1:     public void testGetSymbol() {
1:         assertNotNull(AmqpMessageSupport.getSymbol("x-opt-something-or-other"));
1:     }
1: 
1:     //---------- getMessageAnnotation ----------------------------------------//
1: 
1:     @Test
1:     public void testGetMessageAnnotationWhenMessageHasAnnotationsMap() {
1:         Map<Symbol, Object> messageAnnotationsMap = new HashMap<Symbol,Object>();
1:         messageAnnotationsMap.put(Symbol.valueOf("x-opt-test"), Boolean.TRUE);
1:         Message message = Proton.message();
1:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotationsMap));
1: 
1:         assertNotNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:     }
1: 
1:     @Test
1:     public void testGetMessageAnnotationWhenMessageHasEmptyAnnotationsMap() {
1:         Map<Symbol, Object> messageAnnotationsMap = new HashMap<Symbol,Object>();
1:         Message message = Proton.message();
1:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotationsMap));
1: 
1:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:     }
1: 
1:     @Test
1:     public void testGetMessageAnnotationWhenMessageHasNoAnnotationsMap() {
1:         Message message = Proton.message();
1:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", message));
1:     }
1: 
1:     @Test
1:     public void testGetMessageAnnotationWhenMessageIsNull() {
1:         assertNull(AmqpMessageSupport.getMessageAnnotation("x-opt-test", null));
1:     }
1: 
1:     //---------- isContentType -----------------------------------------------//
1: 
1:     @Test
1:     public void testIsContentTypeWithNullStringValueAndNullMessageContentType() {
1:         Message message = Proton.message();
1:         assertTrue(AmqpMessageSupport.isContentType(null, message));
1:     }
1: 
1:     @Test
1:     public void testIsContentTypeWithNonNullStringValueAndNullMessageContentType() {
1:         Message message = Proton.message();
1:         assertFalse(AmqpMessageSupport.isContentType("test", message));
1:     }
1: 
1:     @Test
1:     public void testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeNotEqual() {
1:         Message message = Proton.message();
1:         message.setContentType("fails");
1:         assertFalse(AmqpMessageSupport.isContentType("test", message));
1:     }
1: 
1:     @Test
1:     public void testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeEqual() {
1:         Message message = Proton.message();
1:         message.setContentType("test");
1:         assertTrue(AmqpMessageSupport.isContentType("test", message));
1:     }
1: 
1:     @Test
1:     public void testIsContentTypeWithNullStringValueAndNonNullMessageContentType() {
1:         Message message = Proton.message();
1:         message.setContentType("test");
1:         assertFalse(AmqpMessageSupport.isContentType(null, message));
1:     }
1: }
============================================================================