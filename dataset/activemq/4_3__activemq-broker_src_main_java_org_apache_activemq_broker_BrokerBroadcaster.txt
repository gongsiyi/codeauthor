1:af9f610: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:af9f610:  */
1:af9f610: package org.apache.activemq.broker;
3:af9f610: 
1:af9f610: import java.util.ArrayList;
1:af9f610: import java.util.List;
1:af9f610: import org.apache.activemq.broker.region.Destination;
1:0def1d4: import org.apache.activemq.broker.region.Subscription;
1:af9f610: import org.apache.activemq.command.ActiveMQDestination;
1:4098942: import org.apache.activemq.command.BrokerInfo;
1:af9f610: import org.apache.activemq.command.ConnectionInfo;
1:af9f610: import org.apache.activemq.command.ConsumerInfo;
1:af9f610: import org.apache.activemq.command.Message;
1:af9f610: import org.apache.activemq.command.MessageAck;
1:af9f610: import org.apache.activemq.command.ProducerInfo;
1:af9f610: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:af9f610: import org.apache.activemq.command.SessionInfo;
1:af9f610: import org.apache.activemq.command.TransactionId;
1:230a86c: 
1:af9f610: /**
1:af9f610:  * Used to add listeners for Broker actions
1:b0c2a40:  * 
1:7f883f6:  * 
1:af9f610:  */
1:230a86c: public class BrokerBroadcaster extends BrokerFilter {
1:230a86c:     protected volatile Broker[] listeners = new Broker[0];
1:af9f610: 
1:230a86c:     public BrokerBroadcaster(Broker next) {
1:af9f610:         super(next);
2:af9f610:     }
1:4098942: 
1:204f91f:     @Override
1:230a86c:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:230a86c:         next.acknowledge(consumerExchange, ack);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].acknowledge(consumerExchange, ack);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:230a86c:         next.addConnection(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].addConnection(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:230a86c:         Subscription answer = next.addConsumer(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].addConsumer(context, info);
1:af9f610:         }
1:0def1d4:         return answer;
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:230a86c:         next.addProducer(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].addProducer(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:230a86c:         next.commitTransaction(context, xid, onePhase);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].commitTransaction(context, xid, onePhase);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:230a86c:         next.removeSubscription(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeSubscription(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:230a86c:         int result = next.prepareTransaction(context, xid);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:af9f610:             // TODO decide what to do with return values
1:230a86c:             brokers[i].prepareTransaction(context, xid);
1:af9f610:         }
1:af9f610:         return result;
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:230a86c:         next.removeConnection(context, info, error);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeConnection(context, info, error);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:230a86c:         next.removeConsumer(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeConsumer(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:230a86c:         next.removeProducer(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeProducer(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:230a86c:         next.rollbackTransaction(context, xid);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].rollbackTransaction(context, xid);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:230a86c:         next.send(producerExchange, messageSend);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].send(producerExchange, messageSend);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:230a86c:         next.beginTransaction(context, xid);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].beginTransaction(context, xid);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:230a86c:         next.forgetTransaction(context, transactionId);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].forgetTransaction(context, transactionId);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:204f91f:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean createIfTemporary) throws Exception {
1:204f91f:         Destination result = next.addDestination(context, destination,createIfTemporary);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:204f91f:             brokers[i].addDestination(context, destination,createIfTemporary);
1:af9f610:         }
1:af9f610:         return result;
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:230a86c:         next.removeDestination(context, destination, timeout);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeDestination(context, destination, timeout);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void start() throws Exception {
1:af9f610:         next.start();
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:af9f610:             brokers[i].start();
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void stop() throws Exception {
1:af9f610:         next.stop();
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:af9f610:             brokers[i].stop();
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:230a86c:         next.addSession(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].addSession(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:230a86c:         next.removeSession(context, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:230a86c:             brokers[i].removeSession(context, info);
1:af9f610:         }
1:af9f610:     }
1:af9f610: 
1:204f91f:     @Override
1:230a86c:     public void gc() {
1:4098942:         next.gc();
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:af9f610:             brokers[i].gc();
1:4098942:         }
1:af9f610:     }
1:230a86c: 
1:204f91f:     @Override
1:230a86c:     public void addBroker(Connection connection, BrokerInfo info) {
1:230a86c:         next.addBroker(connection, info);
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:4098942:             brokers[i].addBroker(connection, info);
1:230a86c:         }
1:4098942:     }
1:4098942: 
1:230a86c:     protected Broker[] getListeners() {
1:af9f610:         return listeners;
1:af9f610:     }
1:af9f610: 
1:230a86c:     public synchronized void addListener(Broker broker) {
1:933eb2f:         List<Broker> tmp = getListenersAsList();
1:af9f610:         tmp.add(broker);
1:933eb2f:         listeners = tmp.toArray(new Broker[tmp.size()]);
1:af9f610:     }
1:af9f610: 
1:230a86c:     public synchronized void removeListener(Broker broker) {
1:933eb2f:         List<Broker> tmp = getListenersAsList();
1:af9f610:         tmp.remove(broker);
1:933eb2f:         listeners = tmp.toArray(new Broker[tmp.size()]);
1:af9f610:     }
1:af9f610: 
1:933eb2f:     protected List<Broker> getListenersAsList() {
1:933eb2f:         List<Broker> tmp = new ArrayList<Broker>();
1:230a86c:         Broker brokers[] = getListeners();
1:230a86c:         for (int i = 0; i < brokers.length; i++) {
1:af9f610:             tmp.add(brokers[i]);
1:af9f610:         }
1:af9f610:         return tmp;
1:af9f610:     }
1:af9f610: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         List<Broker> tmp = getListenersAsList();
1:         listeners = tmp.toArray(new Broker[tmp.size()]);
1:         List<Broker> tmp = getListenersAsList();
1:         listeners = tmp.toArray(new Broker[tmp.size()]);
1:     protected List<Broker> getListenersAsList() {
1:         List<Broker> tmp = new ArrayList<Broker>();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class BrokerBroadcaster extends BrokerFilter {
1:     protected volatile Broker[] listeners = new Broker[0];
1:     public BrokerBroadcaster(Broker next) {
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         next.acknowledge(consumerExchange, ack);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].acknowledge(consumerExchange, ack);
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:         next.addConnection(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].addConnection(context, info);
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         Subscription answer = next.addConsumer(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].addConsumer(context, info);
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         next.addProducer(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].addProducer(context, info);
1:     public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception {
1:         next.commitTransaction(context, xid, onePhase);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].commitTransaction(context, xid, onePhase);
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:         next.removeSubscription(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeSubscription(context, info);
1:     public int prepareTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         int result = next.prepareTransaction(context, xid);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].prepareTransaction(context, xid);
1:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
1:         next.removeConnection(context, info, error);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeConnection(context, info, error);
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:         next.removeConsumer(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeConsumer(context, info);
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:         next.removeProducer(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeProducer(context, info);
1:     public void rollbackTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         next.rollbackTransaction(context, xid);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].rollbackTransaction(context, xid);
1:     public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:         next.send(producerExchange, messageSend);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].send(producerExchange, messageSend);
1:     public void beginTransaction(ConnectionContext context, TransactionId xid) throws Exception {
1:         next.beginTransaction(context, xid);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].beginTransaction(context, xid);
1:     public void forgetTransaction(ConnectionContext context, TransactionId transactionId) throws Exception {
1:         next.forgetTransaction(context, transactionId);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].forgetTransaction(context, transactionId);
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         Destination result = next.addDestination(context, destination);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
0:             brokers[i].addDestination(context, destination);
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         next.removeDestination(context, destination, timeout);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeDestination(context, destination, timeout);
1:     public void start() throws Exception {
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:     public void stop() throws Exception {
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:     public void addSession(ConnectionContext context, SessionInfo info) throws Exception {
1:         next.addSession(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].addSession(context, info);
1:     public void removeSession(ConnectionContext context, SessionInfo info) throws Exception {
1:         next.removeSession(context, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:             brokers[i].removeSession(context, info);
1:     public void gc() {
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1: 
1:     public void addBroker(Connection connection, BrokerInfo info) {
1:         next.addBroker(connection, info);
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
1:         }
1:     protected Broker[] getListeners() {
1:     public synchronized void addListener(Broker broker) {
0:         List tmp = getListenersAsList();
0:         listeners = (Broker[])tmp.toArray(new Broker[tmp.size()]);
1:     public synchronized void removeListener(Broker broker) {
0:         List tmp = getListenersAsList();
0:         listeners = (Broker[])tmp.toArray(new Broker[tmp.size()]);
0:     protected List getListenersAsList() {
0:         List tmp = new ArrayList();
1:         Broker brokers[] = getListeners();
1:         for (int i = 0; i < brokers.length; i++) {
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context,MessageAck ack) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void addConnection(ConnectionContext context,ConnectionInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void addConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void addProducer(ConnectionContext context,ProducerInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void commitTransaction(ConnectionContext context,TransactionId xid,boolean onePhase) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void removeSubscription(ConnectionContext context,RemoveSubscriptionInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public int prepareTransaction(ConnectionContext context,TransactionId xid) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void removeConnection(ConnectionContext context,ConnectionInfo info,Throwable error) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void removeConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void removeProducer(ConnectionContext context,ProducerInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void rollbackTransaction(ConnectionContext context,TransactionId xid) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void send(ConnectionContext context,Message messageSend) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void beginTransaction(ConnectionContext context,TransactionId xid) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void forgetTransaction(ConnectionContext context,TransactionId transactionId) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:                     throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void addSession(ConnectionContext context,SessionInfo info) throws Exception{
/////////////////////////////////////////////////////////////////////////
0:     public void removeSession(ConnectionContext context,SessionInfo info) throws Exception{
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean createIfTemporary) throws Exception {
1:         Destination result = next.addDestination(context, destination,createIfTemporary);
1:             brokers[i].addDestination(context, destination,createIfTemporary);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange,MessageAck ack) throws Exception{
0:         next.acknowledge(consumerExchange,ack);
0:             brokers[i].acknowledge(consumerExchange,ack);
/////////////////////////////////////////////////////////////////////////
0:     public void send(ProducerBrokerExchange producerExchange,Message messageSend) throws Exception{
0:         next.send(producerExchange,messageSend);
0:             brokers[i].send(producerExchange,messageSend);
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
/////////////////////////////////////////////////////////////////////////
0:     protected volatile Broker[] listeners=new Broker[0];
/////////////////////////////////////////////////////////////////////////
1:         next.gc();
1:     }
1:     
0:     public void addBroker(Connection connection,BrokerInfo info){
0:         next.addBroker(connection,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             brokers[i].addBroker(connection, info);
1:         }    
1:     
0:     public synchronized void addListener(Broker broker){
0:         List tmp=getListenersAsList();
0:     public synchronized void removeListener(Broker broker){
0:         List tmp=getListenersAsList();
0:     protected List getListenersAsList(){
commit:af9f610
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.TransactionId;
1: /**
1:  * Used to add listeners for Broker actions
0:  * 
0:  * @version $Revision: 1.10 $
1:  */
0: public class BrokerBroadcaster extends BrokerFilter{
0:     protected transient volatile Broker[] listeners=new Broker[0];
1: 
0:     public BrokerBroadcaster(Broker next){
1:         super(next);
1:     }
1: 
0:     public void acknowledge(ConnectionContext context,MessageAck ack) throws Throwable{
0:         next.acknowledge(context,ack);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].acknowledge(context,ack);
1:         }
1:     }
1: 
0:     public void addConnection(ConnectionContext context,ConnectionInfo info) throws Throwable{
0:         next.addConnection(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].addConnection(context,info);
1:         }
1:     }
1: 
0:     public void addConsumer(ConnectionContext context,ConsumerInfo info) throws Throwable{
0:         next.addConsumer(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].addConsumer(context,info);
1:         }
1:     }
1: 
0:     public void addProducer(ConnectionContext context,ProducerInfo info) throws Throwable{
0:         next.addProducer(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].addProducer(context,info);
1:         }
1:     }
1: 
0:     public void commitTransaction(ConnectionContext context,TransactionId xid,boolean onePhase) throws Throwable{
0:         next.commitTransaction(context,xid,onePhase);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].commitTransaction(context,xid,onePhase);
1:         }
1:     }
1: 
0:     public void removeSubscription(ConnectionContext context,RemoveSubscriptionInfo info) throws Throwable{
0:         next.removeSubscription(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeSubscription(context,info);
1:         }
1:     }
1: 
0:     public int prepareTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
0:         int result=next.prepareTransaction(context,xid);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             // TODO decide what to do with return values
0:             brokers[i].prepareTransaction(context,xid);
1:         }
1:         return result;
1:     }
1: 
0:     public void removeConnection(ConnectionContext context,ConnectionInfo info,Throwable error) throws Throwable{
0:         next.removeConnection(context,info,error);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeConnection(context,info,error);
1:         }
1:     }
1: 
0:     public void removeConsumer(ConnectionContext context,ConsumerInfo info) throws Throwable{
0:         next.removeConsumer(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeConsumer(context,info);
1:         }
1:     }
1: 
0:     public void removeProducer(ConnectionContext context,ProducerInfo info) throws Throwable{
0:         next.removeProducer(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeProducer(context,info);
1:         }
1:     }
1: 
0:     public void rollbackTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
0:         next.rollbackTransaction(context,xid);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].rollbackTransaction(context,xid);
1:         }
1:     }
1: 
0:     public void send(ConnectionContext context,Message messageSend) throws Throwable{
0:         next.send(context,messageSend);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].send(context,messageSend);
1:         }
1:     }
1: 
0:     public void beginTransaction(ConnectionContext context,TransactionId xid) throws Throwable{
0:         next.beginTransaction(context,xid);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].beginTransaction(context,xid);
1:         }
1:     }
1: 
0:     public void forgetTransaction(ConnectionContext context,TransactionId transactionId) throws Throwable{
0:         next.forgetTransaction(context,transactionId);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].forgetTransaction(context,transactionId);
1:         }
1:     }
1: 
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Throwable{
0:         Destination result=next.addDestination(context,destination);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].addDestination(context,destination);
1:         }
1:         return result;
1:     }
1: 
0:     public void removeDestination(ConnectionContext context,ActiveMQDestination destination,long timeout)
0:                     throws Throwable{
0:         next.removeDestination(context,destination,timeout);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeDestination(context,destination,timeout);
1:         }
1:     }
1: 
0:     public void start() throws Exception{
1:         next.start();
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             brokers[i].start();
1:         }
1:     }
1: 
0:     public void stop() throws Exception{
1:         next.stop();
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             brokers[i].stop();
1:         }
1:     }
1: 
0:     public void addSession(ConnectionContext context,SessionInfo info) throws Throwable{
0:         next.addSession(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].addSession(context,info);
1:         }
1:     }
1: 
0:     public void removeSession(ConnectionContext context,SessionInfo info) throws Throwable{
0:         next.removeSession(context,info);
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
0:             brokers[i].removeSession(context,info);
1:         }
1:     }
1: 
0:     public void gc(){
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             brokers[i].gc();
1:         }
0:         next.gc();
1:     }
1: 
0:     protected Broker[] getListeners(){
1:         return listeners;
1:     }
1: 
0:     public synchronized void addInteceptor(Broker broker){
0:         List tmp=getInterceptorsAsList();
1:         tmp.add(broker);
0:         listeners=(Broker[]) tmp.toArray(new Broker[tmp.size()]);
1:     }
1: 
0:     public synchronized void removeInterceptor(Broker broker){
0:         List tmp=getInterceptorsAsList();
1:         tmp.remove(broker);
0:         listeners=(Broker[]) tmp.toArray(new Broker[tmp.size()]);
1:     }
1: 
0:     protected List getInterceptorsAsList(){
0:         List tmp=new ArrayList();
0:         Broker brokers[]=getListeners();
0:         for(int i=0;i<brokers.length;i++){
1:             tmp.add(brokers[i]);
1:         }
1:         return tmp;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public Subscription addConsumer(ConnectionContext context,ConsumerInfo info) throws Exception{
0:         Subscription answer = next.addConsumer(context,info);
1:         return answer;
============================================================================