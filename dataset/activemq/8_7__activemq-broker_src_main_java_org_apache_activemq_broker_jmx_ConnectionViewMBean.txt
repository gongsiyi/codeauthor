1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:d29ca2a: 
1:0efaaec: import javax.management.ObjectName;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.Service;
1:93ca044: 
1:d29ca2a: public interface ConnectionViewMBean extends Service {
1:5e05df1: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is slow
1:d29ca2a:      */
1:ced6909:     @MBeanInfo("Connection is slow.")
1:fc00993:     boolean isSlow();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return if after being marked, the Connection is still writing
1:d29ca2a:      */
1:ced6909:     @MBeanInfo("Connection is blocked.")
1:fc00993:     boolean isBlocked();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is connected
1:d29ca2a:      */
1:ced6909:     @MBeanInfo("Connection is connected to the broker.")
1:fc00993:     boolean isConnected();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is active
1:d29ca2a:      */
1:ced6909:     @MBeanInfo("Connection is active (both connected and receiving messages).")
1:fc00993:     boolean isActive();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Resets the statistics
1:d29ca2a:      */
1:ced6909:     @MBeanInfo("Resets the statistics")
1:fc00993:     void resetStatistics();
1:d29ca2a: 
2:0efaaec:     /**
1:0f1dcce:      * Returns the source address for this connection
1:d29ca2a:      *
1:c255d1d:      * @return the source address for this connection
2:0efaaec:      */
1:aaa81de:     @MBeanInfo("source address for this connection")
1:fc00993:     String getRemoteAddress();
1:0efaaec: 
1:c255d1d:     /**
1:aaa81de:      * Returns the client identifier for this connection
1:aaa81de:      *
1:aaa81de:      * @return the the client identifier for this connection
1:aaa81de:      */
1:aaa81de:     @MBeanInfo("client id for this connection")
1:aaa81de:     String getClientId();
1:aaa81de: 
1:aaa81de:     /**
1:c255d1d:      * Returns the number of messages to be dispatched to this connection
1:c255d1d:      * @return the  number of messages pending dispatch
1:c255d1d:      */
1:c255d1d:     @MBeanInfo("The number of messages pending dispatch")
1:c255d1d:     public int getDispatchQueueSize();
1:c255d1d: 
1:d29ca2a:     /**
1:f5dcc9d:      * Returns the User Name used to authorize creation of this Connection.
1:f5dcc9d:      * This value can be null if display of user name information is disabled.
1:d29ca2a:      *
1:f5dcc9d:      * @return the name of the user that created this Connection
1:d29ca2a:      */
1:f5dcc9d:     @MBeanInfo("User Name used to authorize creation of this connection")
1:f5dcc9d:     String getUserName();
1:d29ca2a: 
1:d29ca2a:     /**
1:0efaaec:      * Returns the ObjectNames of all the Consumers created by this Connection.
1:d29ca2a:      *
1:0efaaec:      * @return the ObjectNames of all Consumers created by this Connection.
1:d29ca2a:      */
1:0efaaec:     @MBeanInfo("The ObjectNames of all Consumers created by this Connection")
1:0efaaec:     ObjectName[] getConsumers();
1:d29ca2a: 
1:d29ca2a:     /**
1:0efaaec:      * Returns the ObjectNames of all the Producers created by this Connection.
1:d29ca2a:      *
1:0efaaec:      * @return the ObjectNames of all Producers created by this Connection.
1:d29ca2a:      */
1:0efaaec:     @MBeanInfo("The ObjectNames of all Producers created by this Connection")
1:0efaaec:     ObjectName[] getProducers();
1:d29ca2a: 
1:93ca044:     /**
1:93ca044:      * Returns the number of active transactions established on this Connection.
1:93ca044:      *
1:93ca044:      * @return the number of active transactions established on this Connection..
1:93ca044:      */
1:93ca044:     @MBeanInfo("The number of active transactions established on this Connection.")
1:93ca044:     public int getActiveTransactionCount();
1:93ca044: 
1:93ca044:     /**
1:93ca044:      * Returns the number of active transactions established on this Connection.
1:93ca044:      *
1:93ca044:      * @return the number of active transactions established on this Connection..
1:93ca044:      */
1:93ca044:     @MBeanInfo("The age in ms of the oldest active transaction established on this Connection.")
1:93ca044:     public Long getOldestActiveTransactionDuration();
1:5e05df1: 
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:93ca044
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnectionState;
0: import org.apache.activemq.state.TransactionState;
1: 
0: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Returns the number of active transactions established on this Connection.
1:      *
1:      * @return the number of active transactions established on this Connection..
1:      */
1:     @MBeanInfo("The number of active transactions established on this Connection.")
1:     public int getActiveTransactionCount();
1: 
1:     /**
1:      * Returns the number of active transactions established on this Connection.
1:      *
1:      * @return the number of active transactions established on this Connection..
1:      */
1:     @MBeanInfo("The age in ms of the oldest active transaction established on this Connection.")
1:     public Long getOldestActiveTransactionDuration();
author:Gary Tully
-------------------------------------------------------------------------------
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("source address for this connection")
1:      * Returns the client identifier for this connection
1:      *
1:      * @return the the client identifier for this connection
1:      */
1:     @MBeanInfo("client id for this connection")
1:     String getClientId();
1: 
1:     /**
commit:c255d1d
/////////////////////////////////////////////////////////////////////////
1:      * @return the source address for this connection
1:     /**
1:      * Returns the number of messages to be dispatched to this connection
1:      * @return the  number of messages pending dispatch
1:      */
1:     @MBeanInfo("The number of messages pending dispatch")
1:     public int getDispatchQueueSize();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     boolean isSlow();
1:     boolean isBlocked();
1:     boolean isConnected();
1:     boolean isActive();
0:     int getDispatchQueueSize();
1:     void resetStatistics();
0:     long getEnqueueCount();
0:     long getDequeueCount();
1:     String getRemoteAddress();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.Service;
1: 
1: public interface ConnectionViewMBean extends Service {
1:     /**
1:      * @return true if the Connection is slow
1:      */
0:     public boolean isSlow();
1: 
1:     /**
1:      * @return if after being marked, the Connection is still writing
1:      */
0:     public boolean isBlocked();
1: 
1:     /**
1:      * @return true if the Connection is connected
1:      */
0:     public boolean isConnected();
1: 
1:     /**
1:      * @return true if the Connection is active
1:      */
0:     public boolean isActive();
1: 
1:     /**
0:      * Returns the number of messages to be dispatched to this connection
1:      */
0:     public int getDispatchQueueSize();
1:     
1:     /**
1:      * Resets the statistics
1:      */
0:     public void resetStatistics();
1: 
1:     /**
0:      * Returns the number of messages enqueued on this connection
1:      * 
0:      * @return the number of messages enqueued on this connection
1:      */
0:     public long getEnqueueCount();
1: 
1:     /**
0:      * Returns the number of messages dequeued on this connection
1:      * 
0:      * @return the number of messages dequeued on this connection
1:      */
0:     public long getDequeueCount();
1: 
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0efaaec
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * Returns the ObjectNames of all the Consumers created by this Connection.
0:      *
1:      * @return the ObjectNames of all Consumers created by this Connection.
1:      */
1:     @MBeanInfo("The ObjectNames of all Consumers created by this Connection")
1:     ObjectName[] getConsumers();
0: 
1:     /**
1:      * Returns the ObjectNames of all the Producers created by this Connection.
0:      *
1:      * @return the ObjectNames of all Producers created by this Connection.
1:      */
1:     @MBeanInfo("The ObjectNames of all Producers created by this Connection")
1:     ObjectName[] getProducers();
0: 
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Returns the User Name used to authorize creation of this Connection.
1:      * This value can be null if display of user name information is disabled.
0:      *
1:      * @return the name of the user that created this Connection
0:      */
1:     @MBeanInfo("User Name used to authorize creation of this connection")
1:     String getUserName();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0a95b7e
/////////////////////////////////////////////////////////////////////////
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Connection is slow.")
1:     @MBeanInfo("Connection is blocked.")
1:     @MBeanInfo("Connection is connected to the broker.")
1:     @MBeanInfo("Connection is active (both connected and receiving messages).")
0:     @MBeanInfo("The number of messages dispatched to this connection")
1:     @MBeanInfo("Resets the statistics")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Number of messages enqueued on this connection")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Number of messages dequeued on this connection")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Source address for this connection")
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * Returns the source address for this connection
0:      * 
0:      * @return the souce address for this connection
0:      */
0:     public String getRemoteAddress();
============================================================================