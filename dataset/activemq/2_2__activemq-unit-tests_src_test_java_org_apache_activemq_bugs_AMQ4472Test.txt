1:705b3c5: /**
1:705b3c5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:705b3c5:  * contributor license agreements.  See the NOTICE file distributed with
1:705b3c5:  * this work for additional information regarding copyright ownership.
1:705b3c5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:705b3c5:  * (the "License"); you may not use this file except in compliance with
1:705b3c5:  * the License.  You may obtain a copy of the License at
1:705b3c5:  *
1:705b3c5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:705b3c5:  *
1:705b3c5:  * Unless required by applicable law or agreed to in writing, software
1:705b3c5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:705b3c5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:705b3c5:  * See the License for the specific language governing permissions and
1:705b3c5:  * limitations under the License.
1:705b3c5:  */
1:705b3c5: package org.apache.activemq.bugs;
1:705b3c5: 
1:705b3c5: import javax.jms.Connection;
1:705b3c5: import javax.jms.Destination;
1:705b3c5: import javax.jms.JMSException;
1:705b3c5: import javax.jms.Message;
1:705b3c5: import javax.jms.MessageConsumer;
1:705b3c5: import javax.jms.MessageProducer;
1:705b3c5: import javax.jms.Session;
1:705b3c5: import javax.jms.TextMessage;
1:705b3c5: import org.apache.activemq.ActiveMQConnectionFactory;
1:705b3c5: import org.junit.Test;
1:705b3c5: import org.slf4j.Logger;
1:705b3c5: import org.slf4j.LoggerFactory;
1:705b3c5: 
1:705b3c5: 
1:705b3c5: import static org.junit.Assert.assertEquals;
1:705b3c5: import static org.junit.Assert.assertNotNull;
1:705b3c5: 
1:705b3c5: public class AMQ4472Test {
1:705b3c5:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4472Test.class);
1:705b3c5: 
1:705b3c5:     @Test
1:705b3c5:     public void testLostMessage() {
1:705b3c5:         Connection connection = null;
1:705b3c5:         try {
1:163ad5d:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false");
1:705b3c5:             connection = connectionFactory.createConnection();
1:705b3c5:             connection.start();
1:705b3c5: 
1:705b3c5:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:705b3c5:             Destination test_data_destination = session.createQueue("test"+System.currentTimeMillis());
1:705b3c5: 
1:705b3c5:             MessageConsumer consumer = session.createConsumer(test_data_destination);
1:705b3c5:             LOG.info("Consumer 1 connected");
1:705b3c5: 
1:705b3c5:             MessageProducer producer = session.createProducer(test_data_destination);
1:705b3c5:             producer.send(session.createTextMessage("Message 1"));
1:705b3c5: 
1:705b3c5:             // committing the session prior to the close
1:705b3c5:             session.commit();
1:705b3c5: 
1:705b3c5:             // starting a new transaction
1:705b3c5:             producer.send(session.createTextMessage("Message 2"));
1:705b3c5: 
1:705b3c5:             // in a new transaction, with prefetch>0, the message
1:705b3c5:             // 1 will be pending till second commit
1:705b3c5:             LOG.info("Closing consumer 1...");
1:705b3c5:             consumer.close();
1:705b3c5: 
1:705b3c5:             // create a consumer
1:705b3c5:             consumer = session.createConsumer(test_data_destination);
1:705b3c5:             LOG.info("Consumer 2 connected");
1:705b3c5: 
1:705b3c5:             // retrieve message previously committed to tmp queue
1:705b3c5:             Message message = consumer.receive(10000);
1:705b3c5:             if (message != null) {
1:705b3c5:                 LOG.info("Got message 1:", message);
1:705b3c5:                 assertEquals("expected message", "Message 1", ((TextMessage) message).getText());
1:705b3c5:                 session.commit();
1:705b3c5:             } else {
1:705b3c5:                 LOG.error("Expected message but it never arrived");
1:705b3c5:             }
1:705b3c5:             assertNotNull(message);
1:705b3c5:         } catch (Exception e) {
1:705b3c5:             e.printStackTrace();
1:705b3c5:         } finally {
1:705b3c5:             try {
1:705b3c5:                 connection.close();
1:705b3c5:             } catch (JMSException e) {
1:705b3c5:             }
1:705b3c5:         }
1:705b3c5:     }
1:705b3c5: 
1:705b3c5: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:163ad5d
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false");
author:Gary Tully
-------------------------------------------------------------------------------
commit:705b3c5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: public class AMQ4472Test {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4472Test.class);
1: 
1:     @Test
1:     public void testLostMessage() {
1:         Connection connection = null;
1:         try {
0:             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false&jms.prefetchPolicy.all=0");
1:             connection = connectionFactory.createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:             Destination test_data_destination = session.createQueue("test"+System.currentTimeMillis());
1: 
1:             MessageConsumer consumer = session.createConsumer(test_data_destination);
1:             LOG.info("Consumer 1 connected");
1: 
1:             MessageProducer producer = session.createProducer(test_data_destination);
1:             producer.send(session.createTextMessage("Message 1"));
1: 
1:             // committing the session prior to the close
1:             session.commit();
1: 
1:             // starting a new transaction
1:             producer.send(session.createTextMessage("Message 2"));
1: 
1:             // in a new transaction, with prefetch>0, the message
1:             // 1 will be pending till second commit
1:             LOG.info("Closing consumer 1...");
1:             consumer.close();
1: 
1:             // create a consumer
1:             consumer = session.createConsumer(test_data_destination);
1:             LOG.info("Consumer 2 connected");
1: 
1:             // retrieve message previously committed to tmp queue
1:             Message message = consumer.receive(10000);
1:             if (message != null) {
1:                 LOG.info("Got message 1:", message);
1:                 assertEquals("expected message", "Message 1", ((TextMessage) message).getText());
1:                 session.commit();
1:             } else {
1:                 LOG.error("Expected message but it never arrived");
1:             }
1:             assertNotNull(message);
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:             }
1:         }
1:     }
1: 
1: }
============================================================================