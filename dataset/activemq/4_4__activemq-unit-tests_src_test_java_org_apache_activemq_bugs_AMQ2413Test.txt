2:960e65d: /**
1:960e65d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:960e65d:  * contributor license agreements.  See the NOTICE file distributed with
1:960e65d:  * this work for additional information regarding copyright ownership.
1:960e65d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:960e65d:  * (the "License"); you may not use this file except in compliance with
1:960e65d:  * the License.  You may obtain a copy of the License at
5:960e65d:  *
1:960e65d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:960e65d:  *
1:960e65d:  * Unless required by applicable law or agreed to in writing, software
1:960e65d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:960e65d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:960e65d:  * See the License for the specific language governing permissions and
1:960e65d:  * limitations under the License.
2:960e65d:  */
1:960e65d: package org.apache.activemq.bugs;
11:960e65d: 
1:960e65d: import java.io.File;
1:960e65d: import java.util.ArrayList;
1:acc3d4f: import java.util.HashMap;
1:acc3d4f: import java.util.Vector;
1:960e65d: import java.util.concurrent.Semaphore;
1:960e65d: import java.util.concurrent.TimeUnit;
1:960e65d: import java.util.concurrent.TimeoutException;
1:960e65d: import java.util.concurrent.atomic.AtomicBoolean;
1:960e65d: import java.util.concurrent.atomic.AtomicInteger;
1:960e65d: 
1:960e65d: import javax.jms.BytesMessage;
1:960e65d: import javax.jms.Connection;
1:960e65d: import javax.jms.DeliveryMode;
1:960e65d: import javax.jms.JMSException;
1:960e65d: import javax.jms.Message;
1:960e65d: import javax.jms.MessageConsumer;
1:960e65d: import javax.jms.MessageListener;
1:960e65d: import javax.jms.MessageProducer;
1:960e65d: import javax.jms.Session;
1:960e65d: 
1:6205a0f: import junit.framework.Test;
1:6205a0f: 
1:960e65d: import org.apache.activemq.ActiveMQConnection;
1:960e65d: import org.apache.activemq.ActiveMQConnectionFactory;
1:960e65d: import org.apache.activemq.CombinationTestSupport;
1:960e65d: import org.apache.activemq.broker.BrokerService;
1:960e65d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:960e65d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:960e65d: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:acc3d4f: import org.apache.activemq.command.MessageId;
1:acc3d4f: import org.apache.activemq.command.ProducerId;
1:acc3d4f: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:960e65d: 
1:960e65d: public class AMQ2413Test extends CombinationTestSupport implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2413Test.class);
1:960e65d:     BrokerService broker;
1:960e65d:     private ActiveMQConnectionFactory factory;
1:960e65d: 
1:a866d93:     private static final int HANG_THRESHOLD = 60;
1:8e0cc67:     private static final int SEND_COUNT = 1000;
1:960e65d:     private static final int RECEIVER_THINK_TIME = 1;
1:960e65d:     private static final int CONSUMER_COUNT = 1;
1:960e65d:     private static final int PRODUCER_COUNT = 50;
1:acc3d4f:     private static final int TO_SEND = SEND_COUNT / PRODUCER_COUNT;
1:960e65d: 
1:960e65d:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:960e65d:     public int ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:960e65d:     public boolean useVMCursor = false;
1:960e65d:     public boolean useOptimizeAcks = false;
1:960e65d: 
1:5219fa1:     private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
1:960e65d:     AtomicInteger count = new AtomicInteger(0);
1:960e65d:     Semaphore receivedMessages;
1:960e65d:     AtomicBoolean running = new AtomicBoolean(false);
1:960e65d: 
1:960e65d:     public void initCombos() {
1:960e65d:         addCombinationValues("deliveryMode", new Object[] { DeliveryMode.PERSISTENT, DeliveryMode.NON_PERSISTENT });
1:960e65d:         addCombinationValues("ackMode", new Object[] { Session.DUPS_OK_ACKNOWLEDGE, Session.AUTO_ACKNOWLEDGE });
1:960e65d:         addCombinationValues("useVMCursor", new Object[] { true, false });
1:5219fa1:         // addCombinationValues("useOptimizeAcks", new Object[] {true, false});
4:960e65d:     }
1:960e65d: 
1:5219fa1:     @Override
1:960e65d:     protected void setUp() throws Exception {
1:960e65d:         broker = new BrokerService();
1:960e65d:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "AMQ2401Test");
1:960e65d:         broker.setDeleteAllMessagesOnStartup(true);
1:acc3d4f: 
1:acc3d4f:         KahaDBPersistenceAdapter kahaDb = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:acc3d4f:         kahaDb.setConcurrentStoreAndDispatchQueues(false);
1:960e65d:         broker.addConnector("tcp://0.0.0.0:2401");
1:960e65d:         PolicyMap policies = new PolicyMap();
1:960e65d:         PolicyEntry entry = new PolicyEntry();
1:960e65d:         entry.setMemoryLimit(1024 * 1024);
1:960e65d:         entry.setProducerFlowControl(true);
1:960e65d:         if (useVMCursor) {
1:960e65d:             entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:960e65d:         }
1:960e65d:         entry.setQueue(">");
1:960e65d:         policies.setDefaultEntry(entry);
1:960e65d:         broker.setDestinationPolicy(policies);
1:960e65d:         broker.start();
1:960e65d:         broker.waitUntilStarted();
1:960e65d: 
1:960e65d:         count.set(0);
1:960e65d:         receivedMessages = new Semaphore(0);
1:960e65d: 
1:960e65d:         factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:2401");
1:5219fa1:         // factory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false&broker.persistent=false");
1:a866d93:         setAutoFail(true);
1:960e65d:         super.setUp();
1:960e65d:     }
1:960e65d: 
1:5219fa1:     @Override
1:960e65d:     protected void tearDown() throws Exception {
1:960e65d:         running.set(false);
1:5219fa1:         for (Service service : services) {
1:960e65d:             service.close();
1:960e65d:         }
1:5219fa1: 
1:960e65d:         broker.stop();
1:960e65d:         broker.waitUntilStopped();
1:5219fa1: 
1:960e65d:         super.tearDown();
1:960e65d:     }
1:960e65d: 
1:960e65d:     public void testReceipt() throws Exception {
1:960e65d: 
1:960e65d:         running.set(true);
1:960e65d:         TestProducer p = null;
1:960e65d:         TestConsumer c = null;
1:960e65d:         try {
1:960e65d: 
1:960e65d:             for (int i = 0; i < CONSUMER_COUNT; i++) {
1:960e65d:                 TestConsumer consumer = new TestConsumer();
1:960e65d:                 consumer.start();
1:960e65d:                 services.add(consumer);
1:960e65d:             }
1:960e65d:             for (int i = 0; i < PRODUCER_COUNT; i++) {
1:960e65d:                 TestProducer producer = new TestProducer(i);
1:960e65d:                 producer.start();
1:960e65d:                 services.add(producer);
1:960e65d:             }
1:a866d93:             waitForMessageReceipt();
1:960e65d: 
1:960e65d:         } finally {
1:960e65d:             if (p != null) {
1:960e65d:                 p.close();
1:960e65d:             }
1:960e65d: 
1:960e65d:             if (c != null) {
1:960e65d:                 c.close();
1:960e65d:             }
1:960e65d:         }
1:960e65d: 
1:960e65d:     }
1:960e65d: 
1:960e65d:     /*
1:960e65d:      * (non-Javadoc)
1:5219fa1:      *
1:960e65d:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:960e65d:      */
1:5219fa1:     @Override
1:960e65d:     public void onMessage(Message message) {
1:960e65d:         receivedMessages.release();
1:960e65d:         if (count.incrementAndGet() % 100 == 0) {
1:acc3d4f:             LOG.info("Received message " + count);
1:960e65d:         }
1:acc3d4f:         track(message);
1:960e65d:         if (RECEIVER_THINK_TIME > 0) {
1:960e65d:             try {
1:5219fa1:                 Thread.sleep(RECEIVER_THINK_TIME);
1:960e65d:             } catch (InterruptedException e) {
1:960e65d:                 Thread.currentThread().interrupt();
1:960e65d:             }
1:960e65d:         }
1:960e65d: 
1:960e65d:     }
1:960e65d: 
1:acc3d4f:     HashMap<ProducerId, boolean[]> tracker = new HashMap<ProducerId, boolean[]>();
1:5219fa1: 
1:acc3d4f:     private synchronized void track(Message message) {
1:acc3d4f:         try {
1:acc3d4f:             MessageId id = new MessageId(message.getJMSMessageID());
1:acc3d4f:             ProducerId pid = id.getProducerId();
1:5219fa1:             int seq = (int) id.getProducerSequenceId();
1:acc3d4f:             boolean[] ids = tracker.get(pid);
1:acc3d4f:             if (ids == null) {
1:acc3d4f:                 ids = new boolean[TO_SEND + 1];
1:acc3d4f:                 ids[seq] = true;
1:acc3d4f:                 tracker.put(pid, ids);
1:acc3d4f:             } else {
1:acc3d4f:                 assertTrue("not already received: " + id, !ids[seq]);
1:acc3d4f:                 ids[seq] = true;
1:acc3d4f:             }
1:acc3d4f:         } catch (Exception e) {
1:8bf987b:             LOG.error(e.toString());
1:acc3d4f:         }
1:acc3d4f:     }
1:acc3d4f: 
1:960e65d:     /**
1:960e65d:      * @throws InterruptedException
1:960e65d:      * @throws TimeoutException
1:5219fa1:      *
1:960e65d:      */
1:a866d93:     private void waitForMessageReceipt() throws InterruptedException, TimeoutException {
1:960e65d:         try {
1:960e65d:             while (count.get() < SEND_COUNT) {
1:960e65d:                 if (!receivedMessages.tryAcquire(HANG_THRESHOLD, TimeUnit.SECONDS)) {
1:5219fa1:                     if (count.get() == SEND_COUNT)
1:5219fa1:                         break;
1:acc3d4f:                     verifyTracking();
1:ab6bd79:                     throw new TimeoutException("@count=" + count.get() + " Message not received for more than " + HANG_THRESHOLD + " seconds");
1:960e65d:                 }
1:960e65d:             }
1:960e65d:         } finally {
1:960e65d:             running.set(false);
1:960e65d:         }
1:960e65d:     }
1:960e65d: 
1:acc3d4f:     private void verifyTracking() {
1:acc3d4f:         Vector<MessageId> missing = new Vector<MessageId>();
1:acc3d4f:         for (ProducerId pid : tracker.keySet()) {
1:acc3d4f:             boolean[] ids = tracker.get(pid);
1:5219fa1:             for (int i = 1; i < TO_SEND + 1; i++) {
1:acc3d4f:                 if (!ids[i]) {
1:acc3d4f:                     missing.add(new MessageId(pid, i));
1:acc3d4f:                 }
1:acc3d4f:             }
1:acc3d4f:         }
1:acc3d4f:         assertTrue("No missing messages: " + missing, missing.isEmpty());
1:acc3d4f:     }
1:acc3d4f: 
1:960e65d:     private interface Service {
1:960e65d:         public void start() throws Exception;
1:960e65d: 
1:960e65d:         public void close();
1:960e65d:     }
1:960e65d: 
1:960e65d:     private class TestProducer implements Runnable, Service {
2:960e65d:         Thread thread;
1:960e65d:         BytesMessage message;
1:960e65d:         Connection connection;
1:960e65d:         Session session;
1:960e65d:         MessageProducer producer;
1:960e65d: 
1:960e65d:         TestProducer(int id) throws Exception {
1:960e65d:             thread = new Thread(this, "TestProducer-" + id);
1:960e65d:             connection = factory.createConnection();
1:960e65d:             connection.start();
1:960e65d:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:960e65d:             producer = session.createProducer(session.createQueue("AMQ2401Test"));
1:960e65d:         }
1:960e65d: 
1:5219fa1:         @Override
1:960e65d:         public void start() {
1:960e65d:             thread.start();
1:960e65d:         }
1:960e65d: 
1:5219fa1:         @Override
1:960e65d:         public void run() {
1:acc3d4f: 
1:acc3d4f:             int i = 1;
1:acc3d4f:             for (; i <= TO_SEND; i++) {
1:960e65d:                 try {
1:960e65d: 
1:960e65d:                     if (+i % 100 == 0) {
1:5219fa1:                         LOG.info(Thread.currentThread().getName() + " Sending message " + i);
1:960e65d:                     }
1:960e65d:                     message = session.createBytesMessage();
1:960e65d:                     message.writeBytes(new byte[1024]);
1:960e65d:                     producer.setDeliveryMode(deliveryMode);
1:960e65d:                     producer.send(message);
1:960e65d:                 } catch (JMSException jmse) {
1:960e65d:                     jmse.printStackTrace();
1:960e65d:                     break;
1:960e65d:                 }
1:960e65d:             }
1:5219fa1:             LOG.info(Thread.currentThread().getName() + " Sent: " + (i - 1));
1:960e65d:         }
1:960e65d: 
1:5219fa1:         @Override
1:960e65d:         public void close() {
1:960e65d:             try {
1:960e65d:                 connection.close();
1:960e65d:             } catch (JMSException e) {
1:960e65d:                 // TODO Auto-generated catch block
1:960e65d:                 e.printStackTrace();
1:960e65d:             }
1:960e65d:         }
1:960e65d:     }
1:5219fa1: 
1:960e65d:     private class TestConsumer implements Runnable, Service {
1:960e65d:         ActiveMQConnection connection;
1:960e65d:         Session session;
1:960e65d:         MessageConsumer consumer;
1:960e65d: 
1:960e65d:         TestConsumer() throws Exception {
1:960e65d:             factory.setOptimizeAcknowledge(false);
1:960e65d:             connection = (ActiveMQConnection) factory.createConnection();
1:960e65d:             if (useOptimizeAcks) {
1:960e65d:                 connection.setOptimizeAcknowledge(true);
1:960e65d:             }
1:960e65d: 
1:960e65d:             session = connection.createSession(false, ackMode);
1:960e65d:             consumer = session.createConsumer(session.createQueue("AMQ2401Test"));
1:960e65d: 
1:960e65d:             consumer.setMessageListener(AMQ2413Test.this);
1:960e65d:         }
1:960e65d: 
1:5219fa1:         @Override
1:960e65d:         public void start() throws Exception {
1:960e65d:             connection.start();
1:960e65d:         }
1:960e65d: 
1:5219fa1:         @Override
1:960e65d:         public void close() {
1:960e65d:             try {
1:960e65d:                 connection.close();
1:960e65d:             } catch (JMSException e) {
1:960e65d:                 // TODO Auto-generated catch block
1:960e65d:                 e.printStackTrace();
1:960e65d:             }
1:960e65d:         }
1:960e65d: 
1:960e65d:         /*
1:960e65d:          * (non-Javadoc)
1:5219fa1:          *
1:960e65d:          * @see java.lang.Runnable#run()
1:960e65d:          */
1:5219fa1:         @Override
1:960e65d:         public void run() {
1:960e65d:             while (running.get()) {
1:960e65d:                 try {
1:960e65d:                     onMessage(consumer.receive());
1:960e65d:                 } catch (Exception e) {
1:960e65d:                     e.printStackTrace();
1:960e65d:                 }
1:960e65d:             }
1:960e65d:         }
1:960e65d:     }
1:960e65d: 
1:960e65d:     public static Test suite() {
1:5219fa1:         return suite(AMQ2413Test.class);
1:5219fa1:     }
1:8bf987b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
/////////////////////////////////////////////////////////////////////////
1:         // addCombinationValues("useOptimizeAcks", new Object[] {true, false});
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         // factory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false&broker.persistent=false");
1:     @Override
1:         for (Service service : services) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 Thread.sleep(RECEIVER_THINK_TIME);
/////////////////////////////////////////////////////////////////////////
1: 
1:             int seq = (int) id.getProducerSequenceId();
/////////////////////////////////////////////////////////////////////////
1:      *
1:                     if (count.get() == SEND_COUNT)
1:                         break;
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 1; i < TO_SEND + 1; i++) {
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
1:                         LOG.info(Thread.currentThread().getName() + " Sending message " + i);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info(Thread.currentThread().getName() + " Sent: " + (i - 1));
1:         @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:          *
1:         @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:         return suite(AMQ2413Test.class);
1:     }
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:8e0cc67
/////////////////////////////////////////////////////////////////////////
1:     private static final int SEND_COUNT = 1000;
commit:acc3d4f
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(AMQ2413Test.class);
/////////////////////////////////////////////////////////////////////////
1:     private static final int TO_SEND = SEND_COUNT / PRODUCER_COUNT;
/////////////////////////////////////////////////////////////////////////
1: 
1:         KahaDBPersistenceAdapter kahaDb = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         kahaDb.setConcurrentStoreAndDispatchQueues(false);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received message " + count);
1:         track(message);
/////////////////////////////////////////////////////////////////////////
1:     HashMap<ProducerId, boolean[]> tracker = new HashMap<ProducerId, boolean[]>();
1:     private synchronized void track(Message message) {
1:         try {
1:             MessageId id = new MessageId(message.getJMSMessageID());
1:             ProducerId pid = id.getProducerId();
0:             int seq = (int)id.getProducerSequenceId();
1:             boolean[] ids = tracker.get(pid);
1:             if (ids == null) {
1:                 ids = new boolean[TO_SEND + 1];
1:                 ids[seq] = true;
1:                 tracker.put(pid, ids);
1:             } else {
1:                 assertTrue("not already received: " + id, !ids[seq]);
1:                 ids[seq] = true;
1:             }
1:         } catch (Exception e) {
0:             LOG.error(e);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                     verifyTracking();
/////////////////////////////////////////////////////////////////////////
1:     private void verifyTracking() {
1:         Vector<MessageId> missing = new Vector<MessageId>();
1:         for (ProducerId pid : tracker.keySet()) {
1:             boolean[] ids = tracker.get(pid);
0:             for (int i=1; i<TO_SEND + 1; i++) {
1:                 if (!ids[i]) {
1:                     missing.add(new MessageId(pid, i));
1:                 }
1:             }
1:         }
1:         assertTrue("No missing messages: " + missing, missing.isEmpty());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             int i = 1;
1:             for (; i <= TO_SEND; i++) {
0:                         LOG.info(thread.currentThread().getName() + " Sending message " + i);
/////////////////////////////////////////////////////////////////////////
0:             LOG.info(thread.currentThread().getName() + " Sent: " + (i-1));
commit:a866d93
/////////////////////////////////////////////////////////////////////////
1:     private static final int HANG_THRESHOLD = 60;
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
/////////////////////////////////////////////////////////////////////////
1:             waitForMessageReceipt();
/////////////////////////////////////////////////////////////////////////
1:     private void waitForMessageReceipt() throws InterruptedException, TimeoutException {
commit:ab6bd79
/////////////////////////////////////////////////////////////////////////
1:                     throw new TimeoutException("@count=" + count.get() + " Message not received for more than " + HANG_THRESHOLD + " seconds");
commit:6205a0f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final int HANG_THRESHOLD = 30;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2413Test.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error(e.toString());
/////////////////////////////////////////////////////////////////////////
1: }
commit:bf61beb
/////////////////////////////////////////////////////////////////////////
commit:7414829
/////////////////////////////////////////////////////////////////////////
0:                     if (count.get() == SEND_COUNT) break;
author:Robert Davies
-------------------------------------------------------------------------------
commit:960e65d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
0: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: 
0: import junit.framework.Test;
0: import junit.framework.TestCase;
1: 
1: /**
0:  * An AMQ-1282 Test
1:  * 
1:  */
1: public class AMQ2413Test extends CombinationTestSupport implements MessageListener {
1:     BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1: 
0:     private static final int HANG_THRESHOLD = 5;
0:     private static final int SEND_COUNT = 10000;
1:     private static final int RECEIVER_THINK_TIME = 1;
1:     private static final int CONSUMER_COUNT = 1;
1:     private static final int PRODUCER_COUNT = 50;
1: 
1:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     public int ackMode = Session.DUPS_OK_ACKNOWLEDGE;
1:     public boolean useVMCursor = false;
1:     public boolean useOptimizeAcks = false;
1: 
0:     private ArrayList<Service> services = new ArrayList<Service>(CONSUMER_COUNT + PRODUCER_COUNT);
1:     AtomicInteger count = new AtomicInteger(0);
1:     Semaphore receivedMessages;
1:     AtomicBoolean running = new AtomicBoolean(false);
1: 
1:     public void initCombos() {
1:         addCombinationValues("deliveryMode", new Object[] { DeliveryMode.PERSISTENT, DeliveryMode.NON_PERSISTENT });
1:         addCombinationValues("ackMode", new Object[] { Session.DUPS_OK_ACKNOWLEDGE, Session.AUTO_ACKNOWLEDGE });
1:         addCombinationValues("useVMCursor", new Object[] { true, false });
0:         //addCombinationValues("useOptimizeAcks", new Object[] {true, false});
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "AMQ2401Test");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://0.0.0.0:2401");
1:         PolicyMap policies = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setMemoryLimit(1024 * 1024);
1:         entry.setProducerFlowControl(true);
1:         if (useVMCursor) {
1:             entry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         }
1:         entry.setQueue(">");
1:         policies.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(policies);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         count.set(0);
1:         receivedMessages = new Semaphore(0);
1: 
1:         factory = new ActiveMQConnectionFactory("tcp://0.0.0.0:2401");
0:         //factory = new ActiveMQConnectionFactory("vm://localhost?broker.useJmx=false&broker.persistent=false");
1: 
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         running.set(false);
0:         for(Service service : services)
0:         {
1:             service.close();
1:         }
1:         
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         
1:         super.tearDown();
1:     }
1: 
0:     public void initCombosForTestFoo() {
0:         addCombinationValues("age", new Object[] { new Integer(21), new Integer(30) });
0:         addCombinationValues("color", new Object[] { "blue", "green" });
1:     }
1: 
1:     public void testReceipt() throws Exception {
1: 
1:         running.set(true);
1:         TestProducer p = null;
1:         TestConsumer c = null;
1:         try {
1: 
1:             for (int i = 0; i < CONSUMER_COUNT; i++) {
1:                 TestConsumer consumer = new TestConsumer();
1:                 consumer.start();
1:                 services.add(consumer);
1:             }
1:             for (int i = 0; i < PRODUCER_COUNT; i++) {
1:                 TestProducer producer = new TestProducer(i);
1:                 producer.start();
1:                 services.add(producer);
1:             }
0:             waitForMessageReceipt(300000);
1: 
1:         } finally {
1:             if (p != null) {
1:                 p.close();
1:             }
1: 
1:             if (c != null) {
1:                 c.close();
1:             }
1:         }
1: 
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
1:      * 
1:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:      */
1:     public void onMessage(Message message) {
1:         receivedMessages.release();
1:         if (count.incrementAndGet() % 100 == 0) {
0:             System.out.println("Received message " + count);
1:         }
1:         if (RECEIVER_THINK_TIME > 0) {
1:             try {
0:                 Thread.currentThread().sleep(RECEIVER_THINK_TIME);
1:             } catch (InterruptedException e) {
1:                 Thread.currentThread().interrupt();
1:             }
1:         }
1: 
1:     }
1: 
1:     /**
1:      * @throws InterruptedException
1:      * @throws TimeoutException
1:      * 
1:      */
0:     private void waitForMessageReceipt(long timeout) throws InterruptedException, TimeoutException {
0:         // TODO Auto-generated method stub
1:         try {
1:             while (count.get() < SEND_COUNT) {
1:                 if (!receivedMessages.tryAcquire(HANG_THRESHOLD, TimeUnit.SECONDS)) {
0:                     throw new TimeoutException("Message not received for more than " + HANG_THRESHOLD + " seconds");
1:                 }
1:             }
1:         } finally {
1:             running.set(false);
1:         }
1:     }
1: 
1:     private interface Service {
1:         public void start() throws Exception;
1: 
1:         public void close();
1:     }
1: 
1:     private class TestProducer implements Runnable, Service {
1:         Thread thread;
1:         BytesMessage message;
0:         int id;
1:         Connection connection;
1:         Session session;
1:         MessageProducer producer;
1: 
1:         TestProducer(int id) throws Exception {
0:             this.id = id;
1:             thread = new Thread(this, "TestProducer-" + id);
1:             connection = factory.createConnection();
1:             connection.start();
1:             session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:             producer = session.createProducer(session.createQueue("AMQ2401Test"));
1: 
1:         }
1: 
1:         public void start() {
1:             thread.start();
1:         }
1: 
1:         public void run() {
1: 
0:             int count = SEND_COUNT / PRODUCER_COUNT;
0:             for (int i = 1; i <= count; i++) {
1:                 try {
1: 
1:                     if (+i % 100 == 0) {
0:                         System.out.println(thread.currentThread().getName() + " Sending message " + i);
1:                     }
1:                     message = session.createBytesMessage();
1:                     message.writeBytes(new byte[1024]);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     producer.send(message);
1:                 } catch (JMSException jmse) {
1:                     jmse.printStackTrace();
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         public void close() {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:                 // TODO Auto-generated catch block
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     private class TestConsumer implements Runnable, Service {
1:         ActiveMQConnection connection;
1:         Session session;
1:         MessageConsumer consumer;
1:         Thread thread;
1: 
1:         TestConsumer() throws Exception {
1:             factory.setOptimizeAcknowledge(false);
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             if (useOptimizeAcks) {
1:                 connection.setOptimizeAcknowledge(true);
1:             }
1: 
1:             session = connection.createSession(false, ackMode);
1:             consumer = session.createConsumer(session.createQueue("AMQ2401Test"));
1: 
1:             consumer.setMessageListener(AMQ2413Test.this);
1:         }
1: 
1:         public void start() throws Exception {
1:             connection.start();
1:         }
1: 
1:         public void close() {
1:             try {
1:                 connection.close();
1:             } catch (JMSException e) {
1:                 // TODO Auto-generated catch block
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         /*
1:          * (non-Javadoc)
1:          * 
1:          * @see java.lang.Runnable#run()
1:          */
1:         public void run() {
1:             while (running.get()) {
1:                 try {
1:                     onMessage(consumer.receive());
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:         }
1: 
1:     }
1:     
1:     public static Test suite() {
0:        return suite(AMQ2413Test.class);
1:      }
1: }
============================================================================