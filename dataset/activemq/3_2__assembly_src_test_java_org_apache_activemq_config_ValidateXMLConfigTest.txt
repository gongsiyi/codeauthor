1:d3fb1aa: /**
1:d3fb1aa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d3fb1aa:  * contributor license agreements.  See the NOTICE file distributed with
1:d3fb1aa:  * this work for additional information regarding copyright ownership.
1:d3fb1aa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d3fb1aa:  * (the "License"); you may not use this file except in compliance with
1:d3fb1aa:  * the License.  You may obtain a copy of the License at
1:d3fb1aa:  *
1:d3fb1aa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d3fb1aa:  *
1:d3fb1aa:  * Unless required by applicable law or agreed to in writing, software
1:d3fb1aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d3fb1aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d3fb1aa:  * See the License for the specific language governing permissions and
1:d3fb1aa:  * limitations under the License.
1:d3fb1aa:  */
1:d3fb1aa: package org.apache.activemq.config;
3:d3fb1aa: 
1:d3fb1aa: import static org.junit.Assert.fail;
1:d3fb1aa: 
1:d3fb1aa: import java.io.File;
1:d3fb1aa: import java.io.FileFilter;
1:d3fb1aa: import java.io.IOException;
1:d3fb1aa: import java.io.InputStream;
1:c643e7f: import java.util.HashSet;
1:d3fb1aa: 
1:d3fb1aa: import javax.xml.parsers.DocumentBuilder;
1:d3fb1aa: import javax.xml.parsers.DocumentBuilderFactory;
1:d3fb1aa: 
1:d3fb1aa: import org.junit.Test;
1:d3fb1aa: import org.xml.sax.EntityResolver;
1:d3fb1aa: import org.xml.sax.ErrorHandler;
1:d3fb1aa: import org.xml.sax.InputSource;
1:d3fb1aa: import org.xml.sax.SAXException;
1:d3fb1aa: import org.xml.sax.SAXParseException;
1:d3fb1aa: 
1:d3fb1aa: 
1:d3fb1aa: public class ValidateXMLConfigTest {
1:d3fb1aa:     private static final String SCHEMA_LANGUAGE_ATTRIBUTE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
1:d3fb1aa:     private static final String XSD_SCHEMA_LANGUAGE = "http://www.w3.org/2001/XMLSchema";
1:d3fb1aa: 
1:d3fb1aa:     
1:d3fb1aa:     @Test
1:d3fb1aa:     public void validateDefaultConfig() throws Exception {
1:d3fb1aa:         validateXML("src/release/conf/activemq.xml");
1:d3fb1aa:     }
1:d3fb1aa:     
1:d3fb1aa:     @Test
1:d3fb1aa:     public void validateExampleConfig() throws Exception {
1:d3fb1aa:         // resource:copy-resource brings all config files into target/conf
1:d3fb1aa:         File sampleConfDir = new File("target/conf");
1:c643e7f: 
1:bdb24ee:         final HashSet<String> skipped = new HashSet<String>(java.util.Arrays.asList(new String[]{
1:c643e7f:             "resin-web.xml", "web.xml"
1:c643e7f:         }));
1:c643e7f: 
1:d3fb1aa:         for (File xmlFile : sampleConfDir.listFiles(new FileFilter() {
1:d3fb1aa:             public boolean accept(File pathname) {
1:c643e7f:                 return pathname.isFile() && pathname.getName().endsWith("xml") && !skipped.contains(pathname.getName());
1:d3fb1aa:             }})) {
1:c643e7f: 
1:d3fb1aa:             validateXML(xmlFile);
1:d3fb1aa:         }
1:d3fb1aa:     }
1:d3fb1aa:     
1:d3fb1aa:     private void validateXML(String fileName) throws Exception {
1:d3fb1aa:         File xmlFile = new File(fileName);
1:d3fb1aa:         validateXML(xmlFile);
1:d3fb1aa:     }
1:d3fb1aa:         
1:d3fb1aa:     private void validateXML(File file) throws Exception {
1:d3fb1aa:         getDocumentBuilder(file.getAbsolutePath()).parse(file);
1:d3fb1aa:     }
1:d3fb1aa:     
1:d3fb1aa:     private DocumentBuilder getDocumentBuilder(final String fileName) throws Exception {
1:d3fb1aa:         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
1:d3fb1aa:         factory.setValidating(true);
1:d3fb1aa:         factory.setNamespaceAware(true);       
1:d3fb1aa:         factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);
1:d3fb1aa:         
1:d3fb1aa:         DocumentBuilder builder = factory.newDocumentBuilder();
1:d3fb1aa:        
1:d3fb1aa:         builder.setEntityResolver(new EntityResolver() {
1:d3fb1aa: 
1:d3fb1aa:             public InputSource resolveEntity(String publicId, String systemId)
1:d3fb1aa:                     throws SAXException, IOException {
1:d3fb1aa:                 System.err.println("resolve: " + publicId + ", sys: " +  systemId);
1:d3fb1aa:                 InputSource source = null;
1:d3fb1aa:                 if (systemId.endsWith("activemq-core.xsd")) {
1:d3fb1aa:                    InputStream stream = this.getClass().getClassLoader().getResourceAsStream("activemq.xsd");
1:d3fb1aa:                    source = new InputSource(stream);
1:d3fb1aa:                    source.setPublicId(publicId);
1:d3fb1aa:                    source.setSystemId(systemId);
1:d3fb1aa:                 }
1:d3fb1aa:                 return source;       
1:d3fb1aa:             }
1:d3fb1aa:         });
1:d3fb1aa:         
1:d3fb1aa:         builder.setErrorHandler(new ErrorHandler() {
1:d3fb1aa:             public void error(SAXParseException exception) throws SAXException {
1:d3fb1aa:                 fail(fileName + ", " + exception.toString());
1:d3fb1aa:             }
1:d3fb1aa:             public void fatalError(SAXParseException exception)
1:d3fb1aa:                     throws SAXException {
1:d3fb1aa:                 fail(fileName + ", " + exception.toString());
1:d3fb1aa:             }
1:d3fb1aa:             public void warning(SAXParseException exception)
1:d3fb1aa:                     throws SAXException {
1:d3fb1aa:                 fail(fileName + ", " + exception.toString());
1:d3fb1aa:             }
1:d3fb1aa:         });
1:d3fb1aa:         
1:d3fb1aa:         return builder;
1:d3fb1aa:     }
1:d3fb1aa:     
1:d3fb1aa:     
1:d3fb1aa: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bdb24ee
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final HashSet<String> skipped = new HashSet<String>(java.util.Arrays.asList(new String[]{
commit:c643e7f
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
0: import scala.actors.threadpool.Arrays;
/////////////////////////////////////////////////////////////////////////
1: 
0:         final HashSet<String> skipped = new HashSet<String>(Arrays.asList(new String[]{
1:             "resin-web.xml", "web.xml"
1:         }));
1: 
1:                 return pathname.isFile() && pathname.getName().endsWith("xml") && !skipped.contains(pathname.getName());
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:d3fb1aa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.config;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: import javax.xml.parsers.DocumentBuilder;
1: import javax.xml.parsers.DocumentBuilderFactory;
1: 
1: import org.junit.Test;
1: import org.xml.sax.EntityResolver;
1: import org.xml.sax.ErrorHandler;
1: import org.xml.sax.InputSource;
1: import org.xml.sax.SAXException;
1: import org.xml.sax.SAXParseException;
1: 
1: 
1: public class ValidateXMLConfigTest {
1:     private static final String SCHEMA_LANGUAGE_ATTRIBUTE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
1:     private static final String XSD_SCHEMA_LANGUAGE = "http://www.w3.org/2001/XMLSchema";
1: 
1:     
1:     @Test
1:     public void validateDefaultConfig() throws Exception {
1:         validateXML("src/release/conf/activemq.xml");
1:     }
1:     
1:     @Test
1:     public void validateExampleConfig() throws Exception {
1:         // resource:copy-resource brings all config files into target/conf
1:         File sampleConfDir = new File("target/conf");
1:         
1:         for (File xmlFile : sampleConfDir.listFiles(new FileFilter() {
1:             public boolean accept(File pathname) {
0:                 return pathname.isFile() && pathname.getName().endsWith("xml");
1:             }})) {
1:             
1:             validateXML(xmlFile);
1:         }
1:     }
1:     
1:     private void validateXML(String fileName) throws Exception {
1:         File xmlFile = new File(fileName);
1:         validateXML(xmlFile);
1:     }
1:         
1:     private void validateXML(File file) throws Exception {
1:         getDocumentBuilder(file.getAbsolutePath()).parse(file);
1:     }
1:     
1:     private DocumentBuilder getDocumentBuilder(final String fileName) throws Exception {
1:         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
1:         factory.setValidating(true);
1:         factory.setNamespaceAware(true);       
1:         factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);
1:         
1:         DocumentBuilder builder = factory.newDocumentBuilder();
1:        
1:         builder.setEntityResolver(new EntityResolver() {
1: 
1:             public InputSource resolveEntity(String publicId, String systemId)
1:                     throws SAXException, IOException {
1:                 System.err.println("resolve: " + publicId + ", sys: " +  systemId);
1:                 InputSource source = null;
1:                 if (systemId.endsWith("activemq-core.xsd")) {
1:                    InputStream stream = this.getClass().getClassLoader().getResourceAsStream("activemq.xsd");
1:                    source = new InputSource(stream);
1:                    source.setPublicId(publicId);
1:                    source.setSystemId(systemId);
1:                 }
1:                 return source;       
1:             }
1:         });
1:         
1:         builder.setErrorHandler(new ErrorHandler() {
1:             public void error(SAXParseException exception) throws SAXException {
1:                 fail(fileName + ", " + exception.toString());
1:             }
1:             public void fatalError(SAXParseException exception)
1:                     throws SAXException {
1:                 fail(fileName + ", " + exception.toString());
1:             }
1:             public void warning(SAXParseException exception)
1:                     throws SAXException {
1:                 fail(fileName + ", " + exception.toString());
1:             }
1:         });
1:         
1:         return builder;
1:     }
1:     
1:     
1: }
============================================================================