1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
6:a107823: 
1:5f1adbe: import java.util.ArrayList;
1:5f1adbe: import java.util.HashSet;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: import java.util.Set;
1:5f1adbe: import java.util.StringTokenizer;
1:5f1adbe: 
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: 
1:a107823: import org.apache.activemq.console.util.AmqMessagesUtil;
1:a107823: import org.apache.activemq.console.util.JmxMBeansUtil;
1:a107823: 
1:a107823: public class BrowseCommand extends AbstractJmxCommand {
1:5f1adbe: 
1:a107823:     public static final String QUEUE_PREFIX = "queue:";
1:a107823:     public static final String TOPIC_PREFIX = "topic:";
1:a107823: 
1:a107823:     public static final String VIEW_GROUP_HEADER = "header:";
1:a107823:     public static final String VIEW_GROUP_CUSTOM = "custom:";
1:5f1adbe:     public static final String VIEW_GROUP_BODY = "body:";
1:a107823: 
1:5f1adbe:     protected String[] helpFile = new String[] {
1:5f1adbe:         "Task Usage: Main browse [browse-options] <destinations>", "Description: Display selected destination's messages.", 
1:5f1adbe:         "", 
1:5f1adbe:         "Browse Options:",
1:5f1adbe:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to", 
1:5f1adbe:         "                                  the messages selector format.",
1:5f1adbe:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom", 
1:5f1adbe:         "                                  message header, or the message body.",
1:5f1adbe:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.", 
1:5f1adbe:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:87eba29:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
1:0dec0b6:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:0dec0b6:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:0dec0b6:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:5f1adbe:         "    --version                     Display the version information.",
1:5f1adbe:         "    -h,-?,--help                  Display the browse broker help information.", 
1:5f1adbe:         "", 
1:5f1adbe:         "Examples:",
1:5f1adbe:         "    Main browse FOO.BAR", 
1:5f1adbe:         "        - Print the message header, custom message header, and message body of all messages in the", 
1:5f1adbe:         "          queue FOO.BAR",
1:5f1adbe:         "",
1:5f1adbe:         "    Main browse -Vheader,body queue:FOO.BAR",
1:5f1adbe:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
1:5f1adbe:         "",
1:5f1adbe:         "    Main browse -Vheader --view custom:MyField queue:FOO.BAR",
1:5f1adbe:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
1:5f1adbe:         "",
1:e282571:         "    Main browse --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.BAR", 
1:5f1adbe:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
1:e282571:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR.", 
1:e282571:         "          SLQ92 syntax is also supported.",
1:5f1adbe:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''", 
1:e282571:         "          Use double quotes \"\" around the entire message selector string.",
1:5f1adbe:         ""
1:5f1adbe:     };
1:5f1adbe: 
1:5f1adbe:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:5f1adbe:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:5f1adbe:     private final Set<String> groupViews = new HashSet<String>(10);
1:5f1adbe:     private final Set queryViews = new HashSet(10);
1:a107823: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "browse";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Used to browse a destination";
1:60646c9:     }
1:60646c9: 
1:a107823:     /**
1:5f1adbe:      * Execute the browse command, which allows you to browse the messages in a
1:5f1adbe:      * given JMS destination
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void runTask(List<String> tokens) throws Exception {
1:73f9131:         // If there is no queue name specified, let's select all
1:73f9131:         if (tokens.isEmpty()) {
1:73f9131:             tokens.add("*");
1:73f9131:         }
1:a107823: 
1:73f9131:         // Iterate through the queue names
1:73f9131:         for (Iterator<String> i = tokens.iterator(); i.hasNext(); ) {
1:73f9131:             List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "Type=Queue,Destination=" + i.next() + ",*");
1:a107823: 
1:73f9131:             // Iterate through the queue result
1:73f9131:             for (Iterator j = queueList.iterator(); j.hasNext(); ) {
1:73f9131:                 List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), ((ObjectInstance) j.next()).getObjectName()).query(queryAddObjects);
1:73f9131:                 context.printMessage(JmxMBeansUtil.filterMessagesView(messages, groupViews, queryViews));
7:a107823:             }
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Handle the --msgsel, --xmsgsel, --view, -V options.
1:5f1adbe:      * 
1:a107823:      * @param token - option token to handle
1:a107823:      * @param tokens - succeeding command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:a107823: 
1:a107823:         // If token is an additive message selector option
1:a107823:         if (token.startsWith("--msgsel")) {
1:a107823: 
1:5f1adbe:             // If no message selector is specified, or next token is a new
1:5f1adbe:             // option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 queryAddObjects.add(queryTokens.nextToken());
1:a107823:             }
1:5f1adbe:         } else if (token.startsWith("--xmsgsel")) {
1:5f1adbe:             // If token is a substractive message selector option
1:a107823: 
1:5f1adbe:             // If no message selector is specified, or next token is a new
1:5f1adbe:             // option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 querySubObjects.add(queryTokens.nextToken());
1:a107823:             }
1:a107823: 
1:5f1adbe:         } else if (token.startsWith("--view")) {
1:5f1adbe:             // If token is a view option
1:a107823: 
1:a107823:             // If no view specified, or next token is a new option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             // Add the attributes to view
1:a107823:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (viewTokens.hasMoreTokens()) {
1:a107823:                 String viewToken = viewTokens.nextToken();
1:a107823: 
1:a107823:                 // If view is explicitly specified to belong to the JMS header
1:a107823:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
1:a107823:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
1:a107823: 
1:5f1adbe:                     // If view is explicitly specified to belong to the JMS
1:5f1adbe:                     // custom header
1:a107823:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
1:a107823:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
1:a107823: 
1:5f1adbe:                     // If view is explicitly specified to belong to the JMS body
1:a107823:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
1:a107823:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
1:a107823: 
1:5f1adbe:                     // If no view explicitly specified, let's check the view for
1:5f1adbe:                     // each group
1:a107823:                 } else {
1:a107823:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
1:a107823:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
1:5f1adbe:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken);
1:a107823:                 }
1:a107823:             }
1:5f1adbe:         } else if (token.startsWith("-V")) {
1:5f1adbe:             // If token is a predefined group view option
1:a107823:             String viewGroup = token.substring(2);
1:a107823:             // If option is a header group view
1:a107823:             if (viewGroup.equals("header")) {
1:a107823:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
1:a107823: 
1:5f1adbe:                 // If option is a custom header group view
1:a107823:             } else if (viewGroup.equals("custom")) {
1:a107823:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
1:a107823: 
1:5f1adbe:                 // If option is a body group view
1:a107823:             } else if (viewGroup.equals("body")) {
1:a107823:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
1:a107823: 
1:5f1adbe:                 // Unknown group view
1:5f1adbe:             } else {
1:54eb93e:                 context.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
1:a107823:             }
1:a107823:         } else {
1:5f1adbe:             // Let super class handle unknown option
1:a107823:             super.handleOption(token, tokens);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print the help messages for the browse command
1:a107823:      */
1:a107823:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1:         // If there is no queue name specified, let's select all
1:         if (tokens.isEmpty()) {
1:             tokens.add("*");
1:         }
1:         // Iterate through the queue names
1:         for (Iterator<String> i = tokens.iterator(); i.hasNext(); ) {
1:             List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "Type=Queue,Destination=" + i.next() + ",*");
1:             // Iterate through the queue result
1:             for (Iterator j = queueList.iterator(); j.hasNext(); ) {
1:                 List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), ((ObjectInstance) j.next()).getObjectName()).query(queryAddObjects);
1:                 context.printMessage(JmxMBeansUtil.filterMessagesView(messages, groupViews, queryViews));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "browse";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Used to browse a destination";
1:     }
1: 
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                     context.printMessage(JmxMBeansUtil.filterMessagesView(messages, groupViews, queryViews));
0:             context.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.StringTokenizer;
1: 
1: import javax.management.ObjectInstance;
1: 
1: 
1:     public static final String VIEW_GROUP_BODY = "body:";
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: Main browse [browse-options] <destinations>", "Description: Display selected destination's messages.", 
1:         "", 
1:         "Browse Options:",
1:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to", 
1:         "                                  the messages selector format.",
1:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom", 
1:         "                                  message header, or the message body.",
1:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.", 
1:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:         "    --version                     Display the version information.", 
1:         "    -h,-?,--help                  Display the browse broker help information.", 
1:         "", 
1:         "Examples:",
1:         "    Main browse FOO.BAR", 
1:         "        - Print the message header, custom message header, and message body of all messages in the", 
1:         "          queue FOO.BAR",
1:         "",
1:         "    Main browse -Vheader,body queue:FOO.BAR",
1:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
1:         "",
1:         "    Main browse -Vheader --view custom:MyField queue:FOO.BAR",
1:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
1:         "",
0:         "    Main browse --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR", 
1:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
0:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR", 
1:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''", 
1:         ""
1:     };
1: 
1:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:     private final Set<String> groupViews = new HashSet<String>(10);
1:     private final Set queryViews = new HashSet(10);
1:      * Execute the browse command, which allows you to browse the messages in a
1:      * given JMS destination
1:      * 
1:     protected void runTask(List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             for (Iterator<String> i = tokens.iterator(); i.hasNext();) {
0:                 for (Iterator j = queueList.iterator(); j.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:             // If no message selector is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--xmsgsel")) {
1:             // If token is a substractive message selector option
1:             // If no message selector is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--view")) {
1:             // If token is a view option
/////////////////////////////////////////////////////////////////////////
1:                     // If view is explicitly specified to belong to the JMS
1:                     // custom header
1:                     // If view is explicitly specified to belong to the JMS body
1:                     // If no view explicitly specified, let's check the view for
1:                     // each group
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken);
1:         } else if (token.startsWith("-V")) {
1:             // If token is a predefined group view option
1:                 // If option is a custom header group view
1:                 // If option is a body group view
1:                 // Unknown group view
1:         } else {
1:             // Let super class handle unknown option
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.AmqMessagesUtil;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
1: 
0: import javax.management.ObjectInstance;
0: import java.util.List;
0: import java.util.StringTokenizer;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.Iterator;
1: 
1: public class BrowseCommand extends AbstractJmxCommand {
1:     public static final String QUEUE_PREFIX = "queue:";
1:     public static final String TOPIC_PREFIX = "topic:";
1: 
1:     public static final String VIEW_GROUP_HEADER = "header:";
1:     public static final String VIEW_GROUP_CUSTOM = "custom:";
0:     public static final String VIEW_GROUP_BODY   = "body:";
1: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  groupViews      = new HashSet(10);
0:     private final Set  queryViews      = new HashSet(10);
1: 
1:     /**
0:      * Execute the browse command, which allows you to browse the messages in a given JMS destination
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If there is no queue name specified, let's select all
0:             if (tokens.isEmpty()) {
0:                 tokens.add("*");
1:             }
1: 
0:             // Iterate through the queue names
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 List queueList = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), "Type=Queue,Destination=" + i.next() + ",*");
1: 
0:                 // Iterate through the queue result
0:                 for (Iterator j=queueList.iterator(); j.hasNext();) {
0:                     List messages = JmxMBeansUtil.createMessageQueryFilter(useJmxServiceUrl(), ((ObjectInstance)j.next()).getObjectName()).query(queryAddObjects);
0:                     GlobalWriter.printMessage(JmxMBeansUtil.filterMessagesView(messages, groupViews, queryViews));
1:                 }
1:             }
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
1:      * Handle the --msgsel, --xmsgsel, --view, -V options.
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1: 
1:         // If token is an additive message selector option
1:         if (token.startsWith("--msgsel")) {
1: 
0:             // If no message selector is specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 queryAddObjects.add(queryTokens.nextToken());
1:             }
1:         }
1: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
1: 
0:             // If no message selector is specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 querySubObjects.add(queryTokens.nextToken());
1:             }
1: 
1:         }
1: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
1: 
1:             // If no view specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
1:                 return;
1:             }
1: 
1:             // Add the attributes to view
1:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (viewTokens.hasMoreTokens()) {
1:                 String viewToken = viewTokens.nextToken();
1: 
1:                 // If view is explicitly specified to belong to the JMS header
1:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
1: 
0:                 // If view is explicitly specified to belong to the JMS custom header
1:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
1: 
0:                 // If view is explicitly specified to belong to the JMS body
1:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
1: 
0:                 // If no view explicitly specified, let's check the view for each group
1:                 } else {
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
1:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX   + viewToken);
1:                 }
1:             }
1:         }
1: 
0:         // If token is a predefined group view option
0:         else if (token.startsWith("-V")) {
1:             String viewGroup = token.substring(2);
1:             // If option is a header group view
1:             if (viewGroup.equals("header")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
1: 
0:             // If option is a custom header group view
1:             } else if (viewGroup.equals("custom")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
1: 
0:             // If option is a body group view
1:             } else if (viewGroup.equals("body")) {
1:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
1: 
0:             // Unknown group view
1:             } else {
0:                 GlobalWriter.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
1:             }
1:         }
1: 
0:         // Let super class handle unknown option
0:         else {
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main browse [browse-options] <destinations>",
0:         "Description: Display selected destination's messages.",
0:         "",
0:         "Browse Options:",
0:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
0:         "                                  the messages selector format.",
0:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom",
0:         "                                  message header, or the message body.",
0:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main browse FOO.BAR",
0:         "        - Print the message header, custom message header, and message body of all messages in the",
0:         "          queue FOO.BAR",
0:         "",
0:         "    Main browse -Vheader,body queue:FOO.BAR",
0:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse -Vheader --view custom:MyField queue:FOO.BAR",
0:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR",
0:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
0:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR",
0:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
0:     };
1: }
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:e282571
/////////////////////////////////////////////////////////////////////////
1:         "    Main browse --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.BAR", 
1:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR.", 
1:         "          SLQ92 syntax is also supported.",
1:         "          Use double quotes \"\" around the entire message selector string.",
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:87eba29
/////////////////////////////////////////////////////////////////////////
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
0:         "    --version                     Display the version information.",
/////////////////////////////////////////////////////////////////////////
0:                 List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "Type=Queue,Destination=" + i.next() + ",*");
0:                     List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), ((ObjectInstance)j.next()).getObjectName()).query(queryAddObjects);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.console.util.AmqMessagesUtil;
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: import javax.management.ObjectInstance;
0: import java.util.StringTokenizer;
0: public class BrowseCommand extends AbstractJmxCommand {
/////////////////////////////////////////////////////////////////////////
0:             // If there is no queue name specified, let's select all
0:                 tokens.add("*");
0:             // Iterate through the queue names
0:                 List queueList = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), "Type=Queue,Destination=" + i.next() + ",*");
0:                 // Iterate through the queue result
0:                 for (Iterator j=queueList.iterator(); j.hasNext();) {
0:                     List messages = JmxMBeansUtil.createMessageQueryFilter(useJmxServiceUrl(), ((ObjectInstance)j.next()).getObjectName()).query(queryAddObjects);
0:                     GlobalWriter.printMessage(JmxMBeansUtil.filterMessagesView(messages, groupViews, queryViews));
/////////////////////////////////////////////////////////////////////////
0:         "Task Usage: Main browse [browse-options] <destinations>",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    Main browse FOO.BAR",
0:         "    Main browse -Vheader,body queue:FOO.BAR",
0:         "    Main browse -Vheader --view custom:MyField queue:FOO.BAR",
0:         "    Main browse --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR",
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.util.AmqMessagesUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.broker.console.AmqMessagesUtil;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
0: 
0: import javax.jms.Destination;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.HashSet;
0: import java.util.StringTokenizer;
0: import java.util.Iterator;
0: 
0: public class BrowseCommand extends AbstractAmqCommand {
0:     public static final String QUEUE_PREFIX = "queue:";
0:     public static final String TOPIC_PREFIX = "topic:";
0: 
0:     public static final String VIEW_GROUP_HEADER = "header:";
0:     public static final String VIEW_GROUP_CUSTOM = "custom:";
0:     public static final String VIEW_GROUP_BODY   = "body:";
0: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  groupViews      = new HashSet(10);
0:     private final Set  queryViews      = new HashSet(10);
0: 
0:     /**
0:      * Execute the browse command, which allows you to browse the messages in a given JMS destination
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If no destination specified
0:             if (tokens.isEmpty()) {
0:                 GlobalWriter.printException(new IllegalArgumentException("No JMS destination specified."));
0:                 return;
0:             }
0: 
0:             // If no broker url specified
0:             if (getBrokerUrl() == null) {
0:                 GlobalWriter.printException(new IllegalStateException("No broker url specified. Use the --amqurl option to specify a broker url."));
0:                 return;
0:             }
0: 
0:             // Display the messages for each destination
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 String destName = (String)i.next();
0:                 Destination dest;
0: 
0:                 // If destination has been explicitly specified as a queue
0:                 if (destName.startsWith(QUEUE_PREFIX)) {
0:                     dest = new ActiveMQQueue(destName.substring(QUEUE_PREFIX.length()));
0: 
0:                 // If destination has been explicitly specified as a topic
0:                 } else if (destName.startsWith(TOPIC_PREFIX)) {
0:                     dest = new ActiveMQTopic(destName.substring(TOPIC_PREFIX.length()));
0: 
0:                 // By default destination is assumed to be a queue
0:                 } else {
0:                     dest = new ActiveMQQueue(destName);
0:                 }
0: 
0:                 // Query for the messages to view
0:                 List addMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, queryAddObjects);
0: 
0:                 // Query for the messages to remove from view
0:                 if (querySubObjects.size() > 0) {
0:                     List subMsgs = AmqMessagesUtil.getMessages(getBrokerUrl(), dest, querySubObjects);
0:                     addMsgs.removeAll(subMsgs);
0:                 }
0: 
0:                 // Display the messages
0:                 GlobalWriter.printMessage(AmqMessagesUtil.filterMessagesView(addMsgs, groupViews, queryViews));
0:             }
0: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute browse task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Handle the --msgsel, --xmsgsel, --view, -V options.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0: 
0:         // If token is an additive message selector option
0:         if (token.startsWith("--msgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 queryAddObjects.add(queryTokens.nextToken());
0:             }
0:         }
0: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 querySubObjects.add(queryTokens.nextToken());
0:             }
0: 
0:         }
0: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
0: 
0:             // If no view specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
0:                 return;
0:             }
0: 
0:             // Add the attributes to view
0:             StringTokenizer viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (viewTokens.hasMoreTokens()) {
0:                 String viewToken = viewTokens.nextToken();
0: 
0:                 // If view is explicitly specified to belong to the JMS header
0:                 if (viewToken.equals(VIEW_GROUP_HEADER)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken.substring(VIEW_GROUP_HEADER.length()));
0: 
0:                 // If view is explicitly specified to belong to the JMS custom header
0:                 } else if (viewToken.equals(VIEW_GROUP_CUSTOM)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken.substring(VIEW_GROUP_CUSTOM.length()));
0: 
0:                 // If view is explicitly specified to belong to the JMS body
0:                 } else if (viewToken.equals(VIEW_GROUP_BODY)) {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX + viewToken.substring(VIEW_GROUP_BODY.length()));
0: 
0:                 // If no view explicitly specified, let's check the view for each group
0:                 } else {
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + viewToken);
0:                     queryViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX   + viewToken);
0:                 }
0:             }
0:         }
0: 
0:         // If token is a predefined group view option
0:         else if (token.startsWith("-V")) {
0:             String viewGroup = token.substring(2);
0:             // If option is a header group view
0:             if (viewGroup.equals("header")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_HEADER_PREFIX);
0: 
0:             // If option is a custom header group view
0:             } else if (viewGroup.equals("custom")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX);
0: 
0:             // If option is a body group view
0:             } else if (viewGroup.equals("body")) {
0:                 groupViews.add(AmqMessagesUtil.JMS_MESSAGE_BODY_PREFIX);
0: 
0:             // Unknown group view
0:             } else {
0:                 GlobalWriter.printInfo("Unknown group view: " + viewGroup + ". Ignoring group view option.");
0:             }
0:         }
0: 
0:         // Let super class handle unknown option
0:         else {
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main browse --amqurl <broker url> [browse-options] <destinations>",
0:         "Description: Display selected destination's messages.",
0:         "",
0:         "Browse Options:",
0:         "    --amqurl <url>                Set the broker URL to connect to.",
0:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
0:         "                                  the messages selector format.",
0:         "    -V<header|custom|body>        Predefined view that allows you to view the message header, custom",
0:         "                                  message header, or the message body.",
0:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the message to view.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main browse --amqurl tcp://localhost:61616 FOO.BAR",
0:         "        - Print the message header, custom message header, and message body of all messages in the",
0:         "          queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 -Vheader,body queue:FOO.BAR",
0:         "        - Print only the message header and message body of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 -Vheader --view custom:MyField queue:FOO.BAR",
0:         "        - Print the message header and the custom field 'MyField' of all messages in the queue FOO.BAR",
0:         "",
0:         "    Main browse --amqurl tcp://localhost:61616 --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.BAR",
0:         "        - Print all the message fields that has a JMSMessageID in the header field that matches the",
0:         "          wildcard *:10, and has a JMSPriority field > 5 in the queue FOO.BAR",
0:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
0:     };
0: }
============================================================================