1:f798865: /**
1:f798865:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f798865:  * contributor license agreements.  See the NOTICE file distributed with
1:f798865:  * this work for additional information regarding copyright ownership.
1:f798865:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f798865:  * (the "License"); you may not use this file except in compliance with
1:f798865:  * the License.  You may obtain a copy of the License at
1:f798865:  *
1:f798865:  *      http://www.apache.org/licenses/LICENSE-2.0
1:007bd4c:  *
1:f798865:  * Unless required by applicable law or agreed to in writing, software
1:f798865:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f798865:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f798865:  * See the License for the specific language governing permissions and
1:f798865:  * limitations under the License.
1:f798865:  */
1:f798865: package org.apache.activemq.broker.region.policy;
3:f798865: 
1:f798865: import org.apache.activemq.broker.region.MessageReference;
1:f798865: 
1:f798865: import java.io.IOException;
1:f798865: import java.util.HashMap;
1:f798865: import java.util.Iterator;
1:f798865: import java.util.LinkedList;
1:f798865: 
1:f798865: 
1:f798865: /**
1:f7ef792:  * An eviction strategy which evicts the oldest message within messages with the same property value
1:f798865:  *
1:f798865:  *
1:f798865:  * @org.apache.xbean.XBean
1:f798865:  *
1:f798865:  */
1:f798865: public class UniquePropertyMessageEvictionStrategy extends MessageEvictionStrategySupport {
1:a798c85: 
1:f798865:     protected String propertyName;
1:f798865: 
1:f798865:     public String getPropertyName() {
1:f798865:         return propertyName;
1:f798865:     }
1:f798865: 
1:f798865:     public void setPropertyName(String propertyName) {
1:f798865:         this.propertyName = propertyName;
1:f798865:     }
1:f798865: 
1:f798865:     @Override
1:f798865:     public MessageReference[] evictMessages(LinkedList messages) throws IOException {
1:a798c85:         MessageReference oldest = (MessageReference)messages.getFirst();
1:f798865:         HashMap<Object, MessageReference> pivots = new HashMap<Object, MessageReference>();
1:f798865:         Iterator iter = messages.iterator();
1:f798865: 
1:f798865:         for (int i = 0; iter.hasNext(); i++) {
1:f798865:             MessageReference reference = (MessageReference) iter.next();
1:f798865:             if (propertyName != null && reference.getMessage().getProperty(propertyName) != null) {
1:f798865:                 Object key = reference.getMessage().getProperty(propertyName);
1:f798865:                 if (pivots.containsKey(key)) {
1:f798865:                     MessageReference pivot = pivots.get(key);
1:f798865:                     if (reference.getMessage().getTimestamp() > pivot.getMessage().getTimestamp()) {
1:f798865:                          pivots.put(key, reference);
1:f798865:                     }
2:f798865:                 } else {
1:f798865:                     pivots.put(key, reference);
1:f798865:                 }
1:f798865:             }
1:f798865:         }
1:f798865: 
1:f798865:         if (!pivots.isEmpty()) {
1:f798865:             for (MessageReference ref : pivots.values()) {
1:f798865:                 messages.remove(ref);
1:f798865:             }
1:a798c85: 
1:007bd4c:             if (messages.size() != 0) {
1:007bd4c:                 return (MessageReference[])messages.toArray(new MessageReference[messages.size()]);
1:007bd4c:             }
1:f798865:         }
1:a798c85:         return new MessageReference[] {oldest};
1:007bd4c: 
1:f798865:     }
1:f798865: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f7ef792
/////////////////////////////////////////////////////////////////////////
1:  * An eviction strategy which evicts the oldest message within messages with the same property value
commit:a798c85
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(UniquePropertyMessageEvictionStrategy.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         MessageReference oldest = (MessageReference)messages.getFirst();
/////////////////////////////////////////////////////////////////////////
1: 
1:         return new MessageReference[] {oldest};
commit:007bd4c
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             if (messages.size() != 0) {
1:                 return (MessageReference[])messages.toArray(new MessageReference[messages.size()]);
1:             }
0:         return new MessageReference[] {(MessageReference) messages.removeFirst()};
1: 
commit:f798865
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
1: 
1: import java.io.IOException;
0: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: 
1: 
1: /**
0:  * An eviction strategy which evicts the oldest message with the lowest priority first.
1:  *
1:  * @org.apache.xbean.XBean
1:  *
0:  * messageEvictionStrategy
1:  */
1: public class UniquePropertyMessageEvictionStrategy extends MessageEvictionStrategySupport {
1: 
1:     protected String propertyName;
1: 
1:     public String getPropertyName() {
1:         return propertyName;
1:     }
1: 
1:     public void setPropertyName(String propertyName) {
1:         this.propertyName = propertyName;
1:     }
1: 
1:     @Override
1:     public MessageReference[] evictMessages(LinkedList messages) throws IOException {
1:         HashMap<Object, MessageReference> pivots = new HashMap<Object, MessageReference>();
1:         Iterator iter = messages.iterator();
1: 
1:         for (int i = 0; iter.hasNext(); i++) {
1:             MessageReference reference = (MessageReference) iter.next();
1:             if (propertyName != null && reference.getMessage().getProperty(propertyName) != null) {
1:                 Object key = reference.getMessage().getProperty(propertyName);
1:                 if (pivots.containsKey(key)) {
1:                     MessageReference pivot = pivots.get(key);
1:                     if (reference.getMessage().getTimestamp() > pivot.getMessage().getTimestamp()) {
1:                          pivots.put(key, reference);
1:                     }
1:                 } else {
1:                     pivots.put(key, reference);
1:                 }
1:             }
1:         }
1: 
1:         if (!pivots.isEmpty()) {
1:             for (MessageReference ref : pivots.values()) {
1:                 messages.remove(ref);
1:             }
0:             return (MessageReference[])messages.toArray(new MessageReference[messages.size()]);
1:         } else {
0:             return new MessageReference[] {(MessageReference) messages.removeFirst()};
1:         }
1: 
1:     }
1: }
============================================================================