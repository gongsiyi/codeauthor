1:c4d8d86: /**
1:c4d8d86:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4d8d86:  * contributor license agreements.  See the NOTICE file distributed with
1:c4d8d86:  * this work for additional information regarding copyright ownership.
1:c4d8d86:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4d8d86:  * (the "License"); you may not use this file except in compliance with
1:c4d8d86:  * the License.  You may obtain a copy of the License at
3:c4d8d86:  *
1:c4d8d86:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:c4d8d86:  * Unless required by applicable law or agreed to in writing, software
1:c4d8d86:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4d8d86:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4d8d86:  * See the License for the specific language governing permissions and
1:c4d8d86:  * limitations under the License.
1:c4d8d86:  */
1:c4d8d86: package org.apache.activemq.util;
3:c4d8d86: 
1:c4d8d86: import java.io.BufferedInputStream;
1:c4d8d86: import java.io.IOException;
1:c4d8d86: import java.io.InputStream;
1:c4d8d86: import java.util.Properties;
1:c4d8d86: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:c4d8d86: 
1:c4d8d86: import org.apache.activemq.transport.LogWriter;
1:c4d8d86: import org.apache.activemq.transport.TransportLoggerView;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c4d8d86: 
1:c4d8d86: /**
1:c4d8d86:  * Class used to find a LogWriter implementation, and returning
1:c4d8d86:  * a LogWriter object, taking as argument the name of a log writer.
1:c4d8d86:  * The mapping between the log writer names and the classes
1:c4d8d86:  * implementing LogWriter is specified by the files in the
1:c4d8d86:  * resources/META-INF/services/org/apache/activemq/transport/logwriters
1:c4d8d86:  * directory.
1:9ef4259:  *
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:9ef4259:  *
1:c4d8d86:  */
1:c4d8d86: public class LogWriterFinder {
1:9ef4259: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(TransportLoggerView.class);
1:c4d8d86: 
1:c4d8d86:     private final String path;
1:9ef4259:     private final ConcurrentMap classMap = new ConcurrentHashMap();
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Builds a LogWriterFinder that will look for the mappings between
1:c4d8d86:      * LogWriter names and classes in the directory "path".
1:c4d8d86:      * @param path The directory where the files that map log writer names to
1:9ef4259:      * LogWriter classes are.
1:c4d8d86:      */
1:c4d8d86:     public LogWriterFinder(String path) {
1:c4d8d86:         this.path = path;
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Returns a LogWriter object, given a log writer name (for example "default", or "custom").
1:c4d8d86:      * Uses a ConcurrentHashMap to cache the Class objects that have already been loaded.
1:c4d8d86:      * @param logWriterName a log writer name (for example "default", or "custom").
1:c4d8d86:      * @return a LogWriter object to be used by the TransportLogger class.
1:c4d8d86:      * @throws IllegalAccessException
1:c4d8d86:      * @throws InstantiationException
1:c4d8d86:      * @throws IOException
1:c4d8d86:      * @throws ClassNotFoundException
1:c4d8d86:      */
1:c4d8d86:     public LogWriter newInstance(String logWriterName)
1:c4d8d86:     throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException
1:c4d8d86:     {
1:c4d8d86:         Class clazz = (Class) classMap.get(logWriterName);
1:c4d8d86:         if (clazz == null) {
1:c4d8d86:             clazz = newInstance(doFindLogWriterProperties(logWriterName));
1:c4d8d86:             classMap.put(logWriterName, clazz);
1:c4d8d86:         }
1:c4d8d86:         return (LogWriter)clazz.newInstance();
1:c4d8d86:     }
1:9ef4259: 
1:c4d8d86:     /**
1:c4d8d86:      * Loads and returns a class given a Properties object with a "class" property.
1:c4d8d86:      * @param properties a Properties object with a "class" property.
1:c4d8d86:      * @return a Class object.
1:c4d8d86:      * @throws ClassNotFoundException
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:c4d8d86:     private Class newInstance(Properties properties) throws ClassNotFoundException, IOException {
1:c4d8d86: 
1:c4d8d86:         String className = properties.getProperty("class");
1:c4d8d86:         if (className == null) {
1:c4d8d86:             throw new IOException("Expected property is missing: " + "class");
1:c4d8d86:         }
1:c4d8d86:         Class clazz;
1:c4d8d86:         try {
1:c4d8d86:             clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
1:c4d8d86:         } catch (ClassNotFoundException e) {
1:c4d8d86:             clazz = LogWriterFinder.class.getClassLoader().loadClass(className);
1:c4d8d86:         }
1:c4d8d86: 
1:c4d8d86:         return clazz;
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Given a log writer name, returns a Properties object with a "class" property
1:c4d8d86:      * whose value is a String with the name of the class to be loaded.
1:c4d8d86:      * @param logWriterName a log writer name.
1:c4d8d86:      * @return a Properties object with a "class" property
1:c4d8d86:      * @throws IOException
1:c4d8d86:      */
1:c4d8d86:     protected Properties doFindLogWriterProperties (String logWriterName) throws IOException {
1:c4d8d86: 
1:c4d8d86:         String uri = path + logWriterName;
1:c4d8d86: 
1:c4d8d86:         // lets try the thread context class loader first
1:c4d8d86:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:c4d8d86:         if (classLoader == null) classLoader = getClass().getClassLoader();
1:c4d8d86:         InputStream in = classLoader.getResourceAsStream(uri);
1:c4d8d86:         if (in == null) {
1:c4d8d86:             in = LogWriterFinder.class.getClassLoader().getResourceAsStream(uri);
1:c4d8d86:             if (in == null) {
1:c4d8d86:                 log.error("Could not find log writer for resource: " + uri);
1:c4d8d86:                 throw new IOException("Could not find log writer for resource: " + uri);
1:c4d8d86:             }
1:c4d8d86:         }
1:c4d8d86: 
1:c4d8d86:         // lets load the file
1:c4d8d86:         BufferedInputStream reader = null;
1:c4d8d86:         Properties properties = new Properties();
1:c4d8d86:         try {
1:c4d8d86:             reader = new BufferedInputStream(in);
1:c4d8d86:             properties.load(reader);
1:c4d8d86:             return properties;
1:c4d8d86:         } finally {
1:c4d8d86:             try {
1:c4d8d86:                 reader.close();
1:c4d8d86:             } catch (Exception e) {
1:c4d8d86:             }
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86: 
1:c4d8d86: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
1:     private final ConcurrentMap classMap = new ConcurrentHashMap();
1:      * LogWriter classes are.
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.util.Properties;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.transport.LogWriter;
1: import org.apache.activemq.transport.TransportLoggerView;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Class used to find a LogWriter implementation, and returning
1:  * a LogWriter object, taking as argument the name of a log writer.
1:  * The mapping between the log writer names and the classes
1:  * implementing LogWriter is specified by the files in the
1:  * resources/META-INF/services/org/apache/activemq/transport/logwriters
1:  * directory.
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
0:  * @version $Revision$
1:  */
1: public class LogWriterFinder {
1:     
0:     private static final Log log = LogFactory.getLog(TransportLoggerView.class);
1: 
1:     private final String path;
0:     private final ConcurrentHashMap classMap = new ConcurrentHashMap();
1: 
1:     /**
1:      * Builds a LogWriterFinder that will look for the mappings between
1:      * LogWriter names and classes in the directory "path".
1:      * @param path The directory where the files that map log writer names to
0:      * LogWriter classes are. 
1:      */
1:     public LogWriterFinder(String path) {
1:         this.path = path;
1:     }
1: 
1:     /**
1:      * Returns a LogWriter object, given a log writer name (for example "default", or "custom").
1:      * Uses a ConcurrentHashMap to cache the Class objects that have already been loaded.
1:      * @param logWriterName a log writer name (for example "default", or "custom").
1:      * @return a LogWriter object to be used by the TransportLogger class.
1:      * @throws IllegalAccessException
1:      * @throws InstantiationException
1:      * @throws IOException
1:      * @throws ClassNotFoundException
1:      */
1:     public LogWriter newInstance(String logWriterName)
1:     throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException
1:     {
1:         Class clazz = (Class) classMap.get(logWriterName);
1:         if (clazz == null) {
1:             clazz = newInstance(doFindLogWriterProperties(logWriterName));
1:             classMap.put(logWriterName, clazz);
1:         }
1:         return (LogWriter)clazz.newInstance();
1:     }
1:     
1:     /**
1:      * Loads and returns a class given a Properties object with a "class" property.
1:      * @param properties a Properties object with a "class" property.
1:      * @return a Class object.
1:      * @throws ClassNotFoundException
1:      * @throws IOException
1:      */
1:     private Class newInstance(Properties properties) throws ClassNotFoundException, IOException {
1: 
1:         String className = properties.getProperty("class");
1:         if (className == null) {
1:             throw new IOException("Expected property is missing: " + "class");
1:         }
1:         Class clazz;
1:         try {
1:             clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
1:         } catch (ClassNotFoundException e) {
1:             clazz = LogWriterFinder.class.getClassLoader().loadClass(className);
1:         }
1: 
1:         return clazz;
1:     }
1: 
1:     /**
1:      * Given a log writer name, returns a Properties object with a "class" property
1:      * whose value is a String with the name of the class to be loaded.
1:      * @param logWriterName a log writer name.
1:      * @return a Properties object with a "class" property
1:      * @throws IOException
1:      */
1:     protected Properties doFindLogWriterProperties (String logWriterName) throws IOException {
1: 
1:         String uri = path + logWriterName;
1: 
1:         // lets try the thread context class loader first
1:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
1:         if (classLoader == null) classLoader = getClass().getClassLoader();
1:         InputStream in = classLoader.getResourceAsStream(uri);
1:         if (in == null) {
1:             in = LogWriterFinder.class.getClassLoader().getResourceAsStream(uri);
1:             if (in == null) {
1:                 log.error("Could not find log writer for resource: " + uri);
1:                 throw new IOException("Could not find log writer for resource: " + uri);
1:             }
1:         }
1: 
1:         // lets load the file
1:         BufferedInputStream reader = null;
1:         Properties properties = new Properties();
1:         try {
1:             reader = new BufferedInputStream(in);
1:             properties.load(reader);
1:             return properties;
1:         } finally {
1:             try {
1:                 reader.close();
1:             } catch (Exception e) {
1:             }
1:         }
1:     }
1: 
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(TransportLoggerView.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.util;
0: 
0: import java.io.BufferedInputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.util.Properties;
0: import java.util.concurrent.ConcurrentHashMap;
0: 
0: import org.apache.activemq.transport.LogWriter;
0: import org.apache.activemq.transport.TransportLoggerView;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: /**
0:  * Class used to find a LogWriter implementation, and returning
0:  * a LogWriter object, taking as argument the name of a log writer.
0:  * The mapping between the log writer names and the classes
0:  * implementing LogWriter is specified by the files in the
0:  * resources/META-INF/services/org/apache/activemq/transport/logwriters
0:  * directory.
0:  */
0: public class LogWriterFinder {
0:     
0:     private static final Log log = LogFactory.getLog(TransportLoggerView.class);
0: 
0:     private final String path;
0:     private final ConcurrentHashMap classMap = new ConcurrentHashMap();
0: 
0:     /**
0:      * Builds a LogWriterFinder that will look for the mappings between
0:      * LogWriter names and classes in the directory "path".
0:      * @param path The directory where the files that map log writer names to
0:      * LogWriter classes are. 
0:      */
0:     public LogWriterFinder(String path) {
0:         this.path = path;
0:     }
0: 
0:     /**
0:      * Returns a LogWriter object, given a log writer name (for example "default", or "detailed").
0:      * Uses a ConcurrentHashMap to cache the Class objects that have already been loaded.
0:      * @param logWriterName a log writer name (for example "default", or "detailed").
0:      * @return a LogWriter object to be used by the TransportLogger class.
0:      * @throws IllegalAccessException
0:      * @throws InstantiationException
0:      * @throws IOException
0:      * @throws ClassNotFoundException
0:      */
0:     public LogWriter newInstance(String logWriterName)
0:     throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException
0:     {
0:         Class clazz = (Class) classMap.get(logWriterName);
0:         if (clazz == null) {
0:             clazz = newInstance(doFindLogWriterProperties(logWriterName));
0:             classMap.put(logWriterName, clazz);
0:         }
0:         return (LogWriter)clazz.newInstance();
0:     }
0:     
0:     /**
0:      * Loads and returns a class given a Properties object with a "class" property.
0:      * @param properties a Properties object with a "class" property.
0:      * @return a Class object.
0:      * @throws ClassNotFoundException
0:      * @throws IOException
0:      */
0:     private Class newInstance(Properties properties) throws ClassNotFoundException, IOException {
0: 
0:         String className = properties.getProperty("class");
0:         if (className == null) {
0:             throw new IOException("Expected property is missing: " + "class");
0:         }
0:         Class clazz;
0:         try {
0:             clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
0:         } catch (ClassNotFoundException e) {
0:             clazz = LogWriterFinder.class.getClassLoader().loadClass(className);
0:         }
0: 
0:         return clazz;
0:     }
0: 
0:     /**
0:      * Given a log writer name, returns a Properties object with a "class" property
0:      * whose value is a String with the name of the class to be loaded.
0:      * @param logWriterName a log writer name.
0:      * @return a Properties object with a "class" property
0:      * @throws IOException
0:      */
0:     protected Properties doFindLogWriterProperties (String logWriterName) throws IOException {
0: 
0:         String uri = path + logWriterName;
0: 
0:         // lets try the thread context class loader first
0:         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
0:         if (classLoader == null) classLoader = getClass().getClassLoader();
0:         InputStream in = classLoader.getResourceAsStream(uri);
0:         if (in == null) {
0:             in = LogWriterFinder.class.getClassLoader().getResourceAsStream(uri);
0:             if (in == null) {
0:                 log.error("Could not find log writer for resource: " + uri);
0:                 throw new IOException("Could not find log writer for resource: " + uri);
0:             }
0:         }
0: 
0:         // lets load the file
0:         BufferedInputStream reader = null;
0:         Properties properties = new Properties();
0:         try {
0:             reader = new BufferedInputStream(in);
0:             properties.load(reader);
0:             return properties;
0:         } finally {
0:             try {
0:                 reader.close();
0:             } catch (Exception e) {
0:             }
0:         }
0:     }
0: 
0: 
0: }
============================================================================