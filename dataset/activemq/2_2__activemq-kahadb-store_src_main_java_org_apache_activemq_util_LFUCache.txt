1:aa3ab12: /**
1:aa3ab12:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:aa3ab12:  * contributor license agreements.  See the NOTICE file distributed with
1:aa3ab12:  * this work for additional information regarding copyright ownership.
1:aa3ab12:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:aa3ab12:  * (the "License"); you may not use this file except in compliance with
1:aa3ab12:  * the License.  You may obtain a copy of the License at
1:aa3ab12:  *
1:aa3ab12:  *      http://www.apache.org/licenses/LICENSE-2.0
1:aa3ab12:  *
1:aa3ab12:  * Unless required by applicable law or agreed to in writing, software
1:aa3ab12:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aa3ab12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aa3ab12:  * See the License for the specific language governing permissions and
1:aa3ab12:  * limitations under the License.
1:aa3ab12:  */
1:1aab71b: package org.apache.activemq.util;
1:aa3ab12: 
1:aa3ab12: import java.util.Collection;
1:aa3ab12: import java.util.HashMap;
1:aa3ab12: import java.util.Iterator;
1:aa3ab12: import java.util.LinkedHashSet;
1:aa3ab12: import java.util.Map;
1:aa3ab12: import java.util.Set;
1:aa3ab12: 
1:aa3ab12: /**
1:aa3ab12:  * LFU cache implementation based on http://dhruvbird.com/lfu.pdf, with some notable differences:
1:aa3ab12:  * <ul>
1:aa3ab12:  * <li>
1:aa3ab12:  * Frequency list is stored as an array with no next/prev pointers between nodes: looping over the array should be faster and more CPU-cache friendly than
1:aa3ab12:  * using an ad-hoc linked-pointers structure.
1:aa3ab12:  * </li>
1:aa3ab12:  * <li>
1:aa3ab12:  * The max frequency is capped at the cache size to avoid creating more and more frequency list entries, and all elements residing in the max frequency entry
1:aa3ab12:  * are re-positioned in the frequency entry linked set in order to put most recently accessed elements ahead of less recently ones,
1:aa3ab12:  * which will be collected sooner.
1:aa3ab12:  * </li>
1:aa3ab12:  * <li>
1:aa3ab12:  * The eviction factor determines how many elements (more specifically, the percentage of) will be evicted.
1:aa3ab12:  * </li>
1:aa3ab12:  * </ul>
1:aa3ab12:  * As a consequence, this cache runs in *amortized* O(1) time (considering the worst case of having the lowest frequency at 0 and having to evict all
1:aa3ab12:  * elements).
1:aa3ab12:  *
1:aa3ab12:  * @author Sergio Bossa
1:aa3ab12:  */
1:aa3ab12: public class LFUCache<Key, Value> implements Map<Key, Value> {
1:aa3ab12: 
1:aa3ab12:     private final Map<Key, CacheNode<Key, Value>> cache;
1:aa3ab12:     private final LinkedHashSet[] frequencyList;
1:aa3ab12:     private int lowestFrequency;
1:aa3ab12:     private int maxFrequency;
1:aa3ab12:     //
1:aa3ab12:     private final int maxCacheSize;
1:aa3ab12:     private final float evictionFactor;
1:aa3ab12: 
1:aa3ab12:     public LFUCache(int maxCacheSize, float evictionFactor) {
1:aa3ab12:         if (evictionFactor <= 0 || evictionFactor >= 1) {
1:aa3ab12:             throw new IllegalArgumentException("Eviction factor must be greater than 0 and lesser than or equal to 1");
1:aa3ab12:         }
1:aa3ab12:         this.cache = new HashMap<Key, CacheNode<Key, Value>>(maxCacheSize);
1:aa3ab12:         this.frequencyList = new LinkedHashSet[maxCacheSize];
1:aa3ab12:         this.lowestFrequency = 0;
1:aa3ab12:         this.maxFrequency = maxCacheSize - 1;
1:aa3ab12:         this.maxCacheSize = maxCacheSize;
1:aa3ab12:         this.evictionFactor = evictionFactor;
1:aa3ab12:         initFrequencyList();
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Value put(Key k, Value v) {
1:aa3ab12:         Value oldValue = null;
1:aa3ab12:         CacheNode<Key, Value> currentNode = cache.get(k);
1:aa3ab12:         if (currentNode == null) {
1:aa3ab12:             if (cache.size() == maxCacheSize) {
1:aa3ab12:                 doEviction();
1:aa3ab12:             }
1:aa3ab12:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[0];
1:aa3ab12:             currentNode = new CacheNode(k, v, 0);
1:aa3ab12:             nodes.add(currentNode);
1:aa3ab12:             cache.put(k, currentNode);
1:aa3ab12:             lowestFrequency = 0;
1:aa3ab12:         } else {
1:aa3ab12:             oldValue = currentNode.v;
1:aa3ab12:             currentNode.v = v;
1:aa3ab12:         }
1:aa3ab12:         return oldValue;
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12: 
1:aa3ab12:     public void putAll(Map<? extends Key, ? extends Value> map) {
1:aa3ab12:         for (Map.Entry<? extends Key, ? extends Value> me : map.entrySet()) {
1:aa3ab12:             put(me.getKey(), me.getValue());
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Value get(Object k) {
1:aa3ab12:         CacheNode<Key, Value> currentNode = cache.get(k);
1:aa3ab12:         if (currentNode != null) {
1:aa3ab12:             int currentFrequency = currentNode.frequency;
1:aa3ab12:             if (currentFrequency < maxFrequency) {
1:aa3ab12:                 int nextFrequency = currentFrequency + 1;
1:aa3ab12:                 LinkedHashSet<CacheNode<Key, Value>> currentNodes = frequencyList[currentFrequency];
1:aa3ab12:                 LinkedHashSet<CacheNode<Key, Value>> newNodes = frequencyList[nextFrequency];
1:aa3ab12:                 moveToNextFrequency(currentNode, nextFrequency, currentNodes, newNodes);
1:aa3ab12:                 cache.put((Key) k, currentNode);
1:aa3ab12:                 if (lowestFrequency == currentFrequency && currentNodes.isEmpty()) {
1:aa3ab12:                     lowestFrequency = nextFrequency;
1:aa3ab12:                 }
1:aa3ab12:             } else {
1:aa3ab12:                 // Hybrid with LRU: put most recently accessed ahead of others:
1:aa3ab12:                 LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[currentFrequency];
1:aa3ab12:                 nodes.remove(currentNode);
1:aa3ab12:                 nodes.add(currentNode);
1:aa3ab12:             }
1:aa3ab12:             return currentNode.v;
1:aa3ab12:         } else {
1:aa3ab12:             return null;
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Value remove(Object k) {
1:aa3ab12:         CacheNode<Key, Value> currentNode = cache.remove(k);
1:aa3ab12:         if (currentNode != null) {
1:aa3ab12:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[currentNode.frequency];
1:aa3ab12:             nodes.remove(currentNode);
1:aa3ab12:             if (lowestFrequency == currentNode.frequency) {
1:aa3ab12:                 findNextLowestFrequency();
1:aa3ab12:             }
1:aa3ab12:             return currentNode.v;
1:aa3ab12:         } else {
1:aa3ab12:             return null;
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public int frequencyOf(Key k) {
1:aa3ab12:         CacheNode<Key, Value> node = cache.get(k);
1:aa3ab12:         if (node != null) {
1:aa3ab12:             return node.frequency + 1;
1:aa3ab12:         } else {
1:aa3ab12:             return 0;
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public void clear() {
1:aa3ab12:         for (int i = 0; i <= maxFrequency; i++) {
1:aa3ab12:             frequencyList[i].clear();
1:aa3ab12:         }
1:aa3ab12:         cache.clear();
1:aa3ab12:         lowestFrequency = 0;
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Set<Key> keySet() {
1:aa3ab12:         return this.cache.keySet();
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Collection<Value> values() {
1:aa3ab12:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public Set<Entry<Key, Value>> entrySet() {
1:aa3ab12:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public int size() {
1:aa3ab12:         return cache.size();
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public boolean isEmpty() {
1:aa3ab12:         return this.cache.isEmpty();
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public boolean containsKey(Object o) {
1:aa3ab12:         return this.cache.containsKey(o);
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     public boolean containsValue(Object o) {
1:aa3ab12:         return false;  //To change body of implemented methods use File | Settings | File Templates.
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12: 
1:aa3ab12:     private void initFrequencyList() {
1:aa3ab12:         for (int i = 0; i <= maxFrequency; i++) {
1:aa3ab12:             frequencyList[i] = new LinkedHashSet<CacheNode<Key, Value>>();
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     private void doEviction() {
1:aa3ab12:         int currentlyDeleted = 0;
1:aa3ab12:         float target = maxCacheSize * evictionFactor;
1:aa3ab12:         while (currentlyDeleted < target) {
1:aa3ab12:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[lowestFrequency];
1:aa3ab12:             if (nodes.isEmpty()) {
1:aa3ab12:                 throw new IllegalStateException("Lowest frequency constraint violated!");
1:aa3ab12:             } else {
1:aa3ab12:                 Iterator<CacheNode<Key, Value>> it = nodes.iterator();
1:aa3ab12:                 while (it.hasNext() && currentlyDeleted++ < target) {
1:aa3ab12:                     CacheNode<Key, Value> node = it.next();
1:aa3ab12:                     it.remove();
1:aa3ab12:                     cache.remove(node.k);
1:aa3ab12:                 }
1:aa3ab12:                 if (!it.hasNext()) {
1:aa3ab12:                     findNextLowestFrequency();
1:aa3ab12:                 }
1:aa3ab12:             }
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     private void moveToNextFrequency(CacheNode<Key, Value> currentNode, int nextFrequency, LinkedHashSet<CacheNode<Key, Value>> currentNodes, LinkedHashSet<CacheNode<Key, Value>> newNodes) {
1:aa3ab12:         currentNodes.remove(currentNode);
1:aa3ab12:         newNodes.add(currentNode);
1:aa3ab12:         currentNode.frequency = nextFrequency;
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     private void findNextLowestFrequency() {
1:aa3ab12:         while (lowestFrequency <= maxFrequency && frequencyList[lowestFrequency].isEmpty()) {
1:aa3ab12:             lowestFrequency++;
1:aa3ab12:         }
1:aa3ab12:         if (lowestFrequency > maxFrequency) {
1:aa3ab12:             lowestFrequency = 0;
1:aa3ab12:         }
1:aa3ab12:     }
1:aa3ab12: 
1:aa3ab12:     private static class CacheNode<Key, Value> {
1:aa3ab12: 
1:aa3ab12:         public final Key k;
1:aa3ab12:         public Value v;
1:aa3ab12:         public int frequency;
1:aa3ab12: 
1:aa3ab12:         public CacheNode(Key k, Value v, int frequency) {
1:aa3ab12:             this.k = k;
1:aa3ab12:             this.v = v;
1:aa3ab12:             this.frequency = frequency;
1:aa3ab12:         }
1:aa3ab12: 
1:aa3ab12:     }
1:aa3ab12: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
commit:715010a
author:Robert Davies
-------------------------------------------------------------------------------
commit:aa3ab12
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.LinkedHashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: /**
1:  * LFU cache implementation based on http://dhruvbird.com/lfu.pdf, with some notable differences:
1:  * <ul>
1:  * <li>
1:  * Frequency list is stored as an array with no next/prev pointers between nodes: looping over the array should be faster and more CPU-cache friendly than
1:  * using an ad-hoc linked-pointers structure.
1:  * </li>
1:  * <li>
1:  * The max frequency is capped at the cache size to avoid creating more and more frequency list entries, and all elements residing in the max frequency entry
1:  * are re-positioned in the frequency entry linked set in order to put most recently accessed elements ahead of less recently ones,
1:  * which will be collected sooner.
1:  * </li>
1:  * <li>
1:  * The eviction factor determines how many elements (more specifically, the percentage of) will be evicted.
1:  * </li>
1:  * </ul>
1:  * As a consequence, this cache runs in *amortized* O(1) time (considering the worst case of having the lowest frequency at 0 and having to evict all
1:  * elements).
1:  *
1:  * @author Sergio Bossa
1:  */
1: public class LFUCache<Key, Value> implements Map<Key, Value> {
1: 
1:     private final Map<Key, CacheNode<Key, Value>> cache;
1:     private final LinkedHashSet[] frequencyList;
1:     private int lowestFrequency;
1:     private int maxFrequency;
1:     //
1:     private final int maxCacheSize;
1:     private final float evictionFactor;
1: 
1:     public LFUCache(int maxCacheSize, float evictionFactor) {
1:         if (evictionFactor <= 0 || evictionFactor >= 1) {
1:             throw new IllegalArgumentException("Eviction factor must be greater than 0 and lesser than or equal to 1");
1:         }
1:         this.cache = new HashMap<Key, CacheNode<Key, Value>>(maxCacheSize);
1:         this.frequencyList = new LinkedHashSet[maxCacheSize];
1:         this.lowestFrequency = 0;
1:         this.maxFrequency = maxCacheSize - 1;
1:         this.maxCacheSize = maxCacheSize;
1:         this.evictionFactor = evictionFactor;
1:         initFrequencyList();
1:     }
1: 
1:     public Value put(Key k, Value v) {
1:         Value oldValue = null;
1:         CacheNode<Key, Value> currentNode = cache.get(k);
1:         if (currentNode == null) {
1:             if (cache.size() == maxCacheSize) {
1:                 doEviction();
1:             }
1:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[0];
1:             currentNode = new CacheNode(k, v, 0);
1:             nodes.add(currentNode);
1:             cache.put(k, currentNode);
1:             lowestFrequency = 0;
1:         } else {
1:             oldValue = currentNode.v;
1:             currentNode.v = v;
1:         }
1:         return oldValue;
1:     }
1: 
1: 
1:     public void putAll(Map<? extends Key, ? extends Value> map) {
1:         for (Map.Entry<? extends Key, ? extends Value> me : map.entrySet()) {
1:             put(me.getKey(), me.getValue());
1:         }
1:     }
1: 
1:     public Value get(Object k) {
1:         CacheNode<Key, Value> currentNode = cache.get(k);
1:         if (currentNode != null) {
1:             int currentFrequency = currentNode.frequency;
1:             if (currentFrequency < maxFrequency) {
1:                 int nextFrequency = currentFrequency + 1;
1:                 LinkedHashSet<CacheNode<Key, Value>> currentNodes = frequencyList[currentFrequency];
1:                 LinkedHashSet<CacheNode<Key, Value>> newNodes = frequencyList[nextFrequency];
1:                 moveToNextFrequency(currentNode, nextFrequency, currentNodes, newNodes);
1:                 cache.put((Key) k, currentNode);
1:                 if (lowestFrequency == currentFrequency && currentNodes.isEmpty()) {
1:                     lowestFrequency = nextFrequency;
1:                 }
1:             } else {
1:                 // Hybrid with LRU: put most recently accessed ahead of others:
1:                 LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[currentFrequency];
1:                 nodes.remove(currentNode);
1:                 nodes.add(currentNode);
1:             }
1:             return currentNode.v;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     public Value remove(Object k) {
1:         CacheNode<Key, Value> currentNode = cache.remove(k);
1:         if (currentNode != null) {
1:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[currentNode.frequency];
1:             nodes.remove(currentNode);
1:             if (lowestFrequency == currentNode.frequency) {
1:                 findNextLowestFrequency();
1:             }
1:             return currentNode.v;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     public int frequencyOf(Key k) {
1:         CacheNode<Key, Value> node = cache.get(k);
1:         if (node != null) {
1:             return node.frequency + 1;
1:         } else {
1:             return 0;
1:         }
1:     }
1: 
1:     public void clear() {
1:         for (int i = 0; i <= maxFrequency; i++) {
1:             frequencyList[i].clear();
1:         }
1:         cache.clear();
1:         lowestFrequency = 0;
1:     }
1: 
1:     public Set<Key> keySet() {
1:         return this.cache.keySet();
1:     }
1: 
1:     public Collection<Value> values() {
1:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     public Set<Entry<Key, Value>> entrySet() {
1:         return null;  //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1:     public int size() {
1:         return cache.size();
1:     }
1: 
1:     public boolean isEmpty() {
1:         return this.cache.isEmpty();
1:     }
1: 
1:     public boolean containsKey(Object o) {
1:         return this.cache.containsKey(o);
1:     }
1: 
1:     public boolean containsValue(Object o) {
1:         return false;  //To change body of implemented methods use File | Settings | File Templates.
1:     }
1: 
1: 
1:     private void initFrequencyList() {
1:         for (int i = 0; i <= maxFrequency; i++) {
1:             frequencyList[i] = new LinkedHashSet<CacheNode<Key, Value>>();
1:         }
1:     }
1: 
1:     private void doEviction() {
1:         int currentlyDeleted = 0;
1:         float target = maxCacheSize * evictionFactor;
1:         while (currentlyDeleted < target) {
1:             LinkedHashSet<CacheNode<Key, Value>> nodes = frequencyList[lowestFrequency];
1:             if (nodes.isEmpty()) {
1:                 throw new IllegalStateException("Lowest frequency constraint violated!");
1:             } else {
1:                 Iterator<CacheNode<Key, Value>> it = nodes.iterator();
1:                 while (it.hasNext() && currentlyDeleted++ < target) {
1:                     CacheNode<Key, Value> node = it.next();
1:                     it.remove();
1:                     cache.remove(node.k);
1:                 }
1:                 if (!it.hasNext()) {
1:                     findNextLowestFrequency();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private void moveToNextFrequency(CacheNode<Key, Value> currentNode, int nextFrequency, LinkedHashSet<CacheNode<Key, Value>> currentNodes, LinkedHashSet<CacheNode<Key, Value>> newNodes) {
1:         currentNodes.remove(currentNode);
1:         newNodes.add(currentNode);
1:         currentNode.frequency = nextFrequency;
1:     }
1: 
1:     private void findNextLowestFrequency() {
1:         while (lowestFrequency <= maxFrequency && frequencyList[lowestFrequency].isEmpty()) {
1:             lowestFrequency++;
1:         }
1:         if (lowestFrequency > maxFrequency) {
1:             lowestFrequency = 0;
1:         }
1:     }
1: 
1:     private static class CacheNode<Key, Value> {
1: 
1:         public final Key k;
1:         public Value v;
1:         public int frequency;
1: 
1:         public CacheNode(Key k, Value v, int frequency) {
1:             this.k = k;
1:             this.v = v;
1:             this.frequency = frequency;
1:         }
1: 
1:     }
1: }
============================================================================