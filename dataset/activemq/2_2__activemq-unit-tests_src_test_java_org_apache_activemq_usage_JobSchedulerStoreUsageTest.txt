1:f21992e: /**
1:f21992e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f21992e:  * contributor license agreements.  See the NOTICE file distributed with
1:f21992e:  * this work for additional information regarding copyright ownership.
1:f21992e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f21992e:  * (the "License"); you may not use this file except in compliance with
1:f21992e:  * the License.  You may obtain a copy of the License at
1:f21992e:  *
1:f21992e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f21992e:  *
1:f21992e:  * Unless required by applicable law or agreed to in writing, software
1:f21992e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f21992e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f21992e:  * See the License for the specific language governing permissions and
1:f21992e:  * limitations under the License.
1:f21992e:  */
2:f21992e: 
1:f21992e: package org.apache.activemq.usage;
1:f21992e: 
1:f21992e: import java.io.File;
1:f21992e: 
1:f21992e: import javax.jms.Connection;
1:f21992e: import javax.jms.Destination;
1:f21992e: import javax.jms.Message;
1:f21992e: import javax.jms.Session;
1:f21992e: 
1:f21992e: import org.apache.activemq.ActiveMQConnectionFactory;
1:f21992e: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f21992e: import org.apache.activemq.ScheduledMessage;
1:f21992e: import org.apache.activemq.broker.BrokerService;
1:f21992e: import org.apache.activemq.util.IOHelper;
1:f21992e: import org.apache.activemq.util.ProducerThread;
1:f21992e: import org.apache.activemq.util.Wait;
1:f21992e: import org.slf4j.Logger;
1:f21992e: import org.slf4j.LoggerFactory;
1:f21992e: 
1:1359e8e: import static org.junit.Assert.assertNotEquals;
1:1359e8e: 
1:f21992e: public class JobSchedulerStoreUsageTest extends EmbeddedBrokerTestSupport {
1:f21992e: 
1:f21992e:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreUsageTest.class);
1:f21992e: 
1:f21992e:     final int WAIT_TIME_MILLS = 20*1000;
1:f21992e: 
1:f21992e:     @Override
1:f21992e:     protected BrokerService createBroker() throws Exception {
1:f21992e:         File schedulerDirectory = new File("target/scheduler");
1:f21992e: 
1:f21992e:         IOHelper.mkdirs(schedulerDirectory);
1:f21992e:         IOHelper.deleteChildren(schedulerDirectory);
1:f21992e: 
1:f21992e:         BrokerService broker = super.createBroker();
1:f21992e:         broker.setSchedulerSupport(true);
1:f21992e:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:f21992e:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(7 * 1024);
1:f21992e:         broker.deleteAllMessages();
1:f21992e:         return broker;
1:f21992e:     }
1:f21992e: 
1:f21992e:     @Override
1:f21992e:     protected boolean isPersistent() {
1:f21992e:         return true;
1:f21992e:     }
1:f21992e: 
1:1359e8e:     public void testBlockAndChangeViaJmxReleases() throws Exception {
1:f21992e: 
1:f21992e:         LOG.info("Initial scheduler usage: {}", broker.getAdminView().getJobSchedulerStorePercentUsage());
1:f21992e: 
1:f21992e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:f21992e:         Connection conn = factory.createConnection();
1:f21992e:         conn.start();
1:f21992e:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f21992e:         Destination dest = sess.createQueue(this.getClass().getName());
1:f21992e:         final ProducerThread producer = new ProducerThread(sess, dest) {
1:f21992e:             @Override
1:f21992e:             protected Message createMessage(int i) throws Exception {
1:f21992e:                 Message message = super.createMessage(i);
1:f21992e:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, WAIT_TIME_MILLS / 2);
1:f21992e:                 return message;
1:f21992e:             }
1:f21992e:         };
1:f21992e:         producer.setMessageCount(100);
1:f21992e:         producer.start();
1:f21992e: 
1:f21992e:         assertEquals(7 * 1024, broker.getAdminView().getJobSchedulerStoreLimit());
1:f21992e: 
1:1359e8e:         assertTrue("Usage exhausted", Wait.waitFor(new Wait.Condition() {
1:1359e8e:             @Override
1:1359e8e:             public boolean isSatisified() throws Exception {
1:1359e8e:                 LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1:1359e8e:                 return broker.getAdminView().getJobSchedulerStorePercentUsage() > 100;
1:1359e8e:             }
1:1359e8e:         }));
1:1359e8e: 
1:1359e8e:         LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1:f21992e: 
1:1359e8e:         assertNotEquals("Producer has not sent all messages", producer.getMessageCount(), producer.getSentCount());
1:f21992e: 
1:f21992e:         broker.getAdminView().setJobSchedulerStoreLimit(1024 * 1024 * 33);
1:f21992e: 
1:1359e8e:         LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1:f21992e: 
1:f21992e:         Wait.waitFor(new Wait.Condition() {
1:f21992e:             @Override
1:f21992e:             public boolean isSatisified() throws Exception {
1:f21992e:                 return producer.getSentCount() == producer.getMessageCount();
1:f21992e:             }
1:1359e8e:         });
1:f21992e: 
1:1359e8e:         assertEquals("Producer sent all messages", producer.getMessageCount(), producer.getSentCount());
1:f21992e: 
1:f21992e:         assertTrue(broker.getAdminView().getJobSchedulerStorePercentUsage() < 100);
1:f21992e:     }
1:f21992e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1359e8e
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testBlockAndChangeViaJmxReleases() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("Usage exhausted", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1:                 return broker.getAdminView().getJobSchedulerStorePercentUsage() > 100;
1:             }
1:         }));
1:         LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1: 
1:         assertNotEquals("Producer has not sent all messages", producer.getMessageCount(), producer.getSentCount());
1:         LOG.info("scheduler store usage %" + broker.getAdminView().getJobSchedulerStorePercentUsage() + " producerSent count:" +  producer.getSentCount());
1:         });
1:         assertEquals("Producer sent all messages", producer.getMessageCount(), producer.getSentCount());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:f21992e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usage;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.ProducerThread;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JobSchedulerStoreUsageTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreUsageTest.class);
1: 
1:     final int WAIT_TIME_MILLS = 20*1000;
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         File schedulerDirectory = new File("target/scheduler");
1: 
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1: 
1:         BrokerService broker = super.createBroker();
1:         broker.setSchedulerSupport(true);
1:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(7 * 1024);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
0:     public void testJmx() throws Exception {
1: 
1:         LOG.info("Initial scheduler usage: {}", broker.getAdminView().getJobSchedulerStorePercentUsage());
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = sess.createQueue(this.getClass().getName());
1:         final ProducerThread producer = new ProducerThread(sess, dest) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
1:                 Message message = super.createMessage(i);
1:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, WAIT_TIME_MILLS / 2);
1:                 return message;
1:             }
1:         };
1:         producer.setMessageCount(100);
1:         producer.start();
1: 
1:         assertEquals(7 * 1024, broker.getAdminView().getJobSchedulerStoreLimit());
1: 
0:         // wait for the producer to block
0:         Thread.sleep(WAIT_TIME_MILLS / 2);
1: 
0:         assertTrue(broker.getAdminView().getJobSchedulerStorePercentUsage() > 100);
1: 
1:         broker.getAdminView().setJobSchedulerStoreLimit(1024 * 1024 * 33);
1: 
0:         Thread.sleep(WAIT_TIME_MILLS);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return producer.getSentCount() == producer.getMessageCount();
1:             }
0:         }, WAIT_TIME_MILLS * 2);
1: 
0:         assertEquals("Producer didn't send all messages", producer.getMessageCount(), producer.getSentCount());
1: 
0:         LOG.info("Final scheduler usage: {}", broker.getAdminView().getJobSchedulerStorePercentUsage());
1: 
1:         assertTrue(broker.getAdminView().getJobSchedulerStorePercentUsage() < 100);
1:     }
1: }
============================================================================