1:4800a7a: /**
1:4800a7a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4800a7a:  * contributor license agreements.  See the NOTICE file distributed with
1:4800a7a:  * this work for additional information regarding copyright ownership.
1:4800a7a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4800a7a:  * (the "License"); you may not use this file except in compliance with
1:4800a7a:  * the License.  You may obtain a copy of the License at
1:4800a7a:  *
1:4800a7a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4800a7a:  *
1:4800a7a:  * Unless required by applicable law or agreed to in writing, software
1:4800a7a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4800a7a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4800a7a:  * See the License for the specific language governing permissions and
1:4800a7a:  * limitations under the License.
1:4800a7a:  */
1:4800a7a: 
1:4800a7a: package org.apache.activemq.broker;
1:4800a7a: 
1:4800a7a: import org.junit.Before;
1:4800a7a: import org.junit.Test;
1:4800a7a: 
1:4800a7a: import java.io.IOException;
1:4800a7a: import java.net.URI;
1:4800a7a: import java.net.URISyntaxException;
1:4800a7a: import java.util.HashMap;
1:4800a7a: import java.util.Map;
1:4800a7a: import java.util.concurrent.atomic.AtomicReference;
1:4800a7a: 
1:4800a7a: import static org.junit.Assert.*;
1:4800a7a: 
1:4800a7a: public class PublishedAddressPolicyTest {
1:4800a7a:     PublishedAddressPolicy underTest = new PublishedAddressPolicy();
1:4800a7a: 
1:4800a7a:     final AtomicReference<URI> uriAtomicReference = new AtomicReference<>();
1:4800a7a: 
1:4800a7a:     final TransportConnector dummyTransportConnector = new TransportConnector() {
1:4800a7a:         @Override
1:4800a7a:         public URI getConnectUri() throws IOException, URISyntaxException {
1:4800a7a:             return uriAtomicReference.get();
1:4800a7a:         }
1:4800a7a:     };
1:4800a7a: 
1:4800a7a:     @Before
1:4800a7a:     public void setTransport() throws Exception {
1:4800a7a:         URI ok = new URI("tcp://bob:88");
1:4800a7a:         uriAtomicReference.set(ok);
1:4800a7a:     }
1:4800a7a: 
1:4800a7a:     @Test
1:4800a7a:     public void testDefaultReturnsHost() throws Exception {
1:4800a7a:         assertTrue("contains bob", underTest.getPublishableConnectString(dummyTransportConnector).contains("bob"));
1:4800a7a:     }
1:4800a7a: 
1:4800a7a:     @Test
1:4800a7a:     public void testHostMap() throws Exception {
1:4800a7a:         HashMap<String, String> hostMap = new HashMap<>();
1:4800a7a:         hostMap.put("bob", "pat");
1:4800a7a:         underTest.setHostMapping(hostMap);
1:4800a7a:         assertTrue("contains pat", underTest.getPublishableConnectString(dummyTransportConnector).contains("pat"));
1:4800a7a:     }
1:4800a7a: 
1:4800a7a:     @Test
1:4800a7a:     public void testPortMap() throws Exception {
1:4800a7a:         Map<Integer, Integer> portMap = new HashMap<Integer, Integer>();
1:4800a7a:         portMap.put(88, 77);
1:4800a7a:         underTest.setPortMapping(portMap);
1:4800a7a:         assertTrue("contains 77", underTest.getPublishableConnectString(dummyTransportConnector).contains("77"));
1:4800a7a:     }
1:4800a7a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4800a7a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class PublishedAddressPolicyTest {
1:     PublishedAddressPolicy underTest = new PublishedAddressPolicy();
1: 
1:     final AtomicReference<URI> uriAtomicReference = new AtomicReference<>();
1: 
1:     final TransportConnector dummyTransportConnector = new TransportConnector() {
1:         @Override
1:         public URI getConnectUri() throws IOException, URISyntaxException {
1:             return uriAtomicReference.get();
1:         }
1:     };
1: 
1:     @Before
1:     public void setTransport() throws Exception {
1:         URI ok = new URI("tcp://bob:88");
1:         uriAtomicReference.set(ok);
1:     }
1: 
1:     @Test
1:     public void testDefaultReturnsHost() throws Exception {
1:         assertTrue("contains bob", underTest.getPublishableConnectString(dummyTransportConnector).contains("bob"));
1:     }
1: 
1:     @Test
1:     public void testHostMap() throws Exception {
1:         HashMap<String, String> hostMap = new HashMap<>();
1:         hostMap.put("bob", "pat");
1:         underTest.setHostMapping(hostMap);
1:         assertTrue("contains pat", underTest.getPublishableConnectString(dummyTransportConnector).contains("pat"));
1:     }
1: 
1:     @Test
1:     public void testPortMap() throws Exception {
1:         Map<Integer, Integer> portMap = new HashMap<Integer, Integer>();
1:         portMap.put(88, 77);
1:         underTest.setPortMapping(portMap);
1:         assertTrue("contains 77", underTest.getPublishableConnectString(dummyTransportConnector).contains("77"));
1:     }
1: }
============================================================================