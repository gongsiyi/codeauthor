1:88fbb05: /**
1:88fbb05:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88fbb05:  * contributor license agreements.  See the NOTICE file distributed with
1:88fbb05:  * this work for additional information regarding copyright ownership.
1:88fbb05:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88fbb05:  * (the "License"); you may not use this file except in compliance with
1:88fbb05:  * the License.  You may obtain a copy of the License at
1:88fbb05:  *
1:88fbb05:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88fbb05:  *
1:88fbb05:  * Unless required by applicable law or agreed to in writing, software
1:88fbb05:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88fbb05:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88fbb05:  * See the License for the specific language governing permissions and
1:88fbb05:  * limitations under the License.
1:88fbb05:  */
1:88fbb05: package org.apache.activemq.broker.cluster;
10:58cf400: 
1:ba3e913: import java.util.ArrayList;
1:1a01d13: import java.util.List;
1:58cf400: 
1:88fbb05: import org.apache.activemq.broker.Broker;
1:88fbb05: import org.apache.activemq.broker.BrokerFilter;
1:88fbb05: import org.apache.activemq.broker.ConnectionContext;
1:58cf400: import org.apache.activemq.broker.region.Subscription;
1:ceb7e1a: import org.apache.activemq.command.ActiveMQDestination;
1:58cf400: import org.apache.activemq.command.ConsumerId;
1:58cf400: import org.apache.activemq.command.ConsumerInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:58cf400: 
1:88fbb05: /**
1:58cf400:  * Monitors for client connections that may fail to another broker - but this
1:58cf400:  * broker isn't aware they've gone. Can occur with network glitches or client
1:58cf400:  * error
1:b0c2a40:  * 
1:88fbb05:  * 
1:88fbb05:  */
1:ba3e913: public class ConnectionSplitBroker extends BrokerFilter{
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionSplitBroker.class);
1:ba3e913:     private List<ConsumerInfo>networkConsumerList = new ArrayList<ConsumerInfo>();
1:88fbb05:     public ConnectionSplitBroker(Broker next) {
1:88fbb05:         super(next);
15:58cf400:     }
1:ba3e913: 
1:58cf400:         
1:b32ff4d:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info)
1:b32ff4d:             throws Exception {
1:ceb7e1a:         ActiveMQDestination dest = info.getDestination();
1:b32ff4d: 
1:b32ff4d:         synchronized (networkConsumerList) {
1:b32ff4d:             if (info.isNetworkSubscription()) {
1:b32ff4d:                 networkConsumerList.add(info);
1:b32ff4d:             } else {
1:b32ff4d:                 if (!networkConsumerList.isEmpty()) {
1:b32ff4d:                     List<ConsumerInfo> gcList = new ArrayList<ConsumerInfo>();
1:b32ff4d:                     for (ConsumerInfo nc : networkConsumerList) {
1:b32ff4d:                         if (!nc.isNetworkConsumersEmpty()) {
1:b32ff4d:                             
1:b32ff4d:                             for (ConsumerId id : nc.getNetworkConsumerIds()) {
1:b32ff4d:                                 
1:b32ff4d:                                 if (id.equals(info.getConsumerId())) {
1:b32ff4d:                                     nc.removeNetworkConsumerId(id);
1:b32ff4d:                                     if (nc.isNetworkConsumersEmpty()) {
1:b32ff4d:                                         gcList.add(nc);
1:b32ff4d:                                     }
1:ceb7e1a:                                 }
1:5dc188e:                             }
1:ba3e913:                         }
1:ba3e913:                     }
1:b32ff4d:                     for (ConsumerInfo nc : gcList) {
1:b32ff4d:                         networkConsumerList.remove(nc);
1:b32ff4d:                         super.removeConsumer(context, nc);
1:e1bbde7:                         LOG.warn("Removed stale network consumer {}", nc);
1:ceb7e1a:                     }
1:5dc188e:                 }
1:ba3e913:             }
1:ba3e913:         }
1:b32ff4d: 
1:58cf400:         return super.addConsumer(context, info);
1:ba3e913:     }
1:58cf400: 
1:ba3e913:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:ceb7e1a:         if (info.isNetworkSubscription()) {
1:ba3e913: 
1:ceb7e1a:             synchronized (networkConsumerList) {
1:ba3e913:                 networkConsumerList.remove(info);
1:58cf400:             }
1:58cf400:         }
1:58cf400:         super.removeConsumer(context, info);
1:58cf400:     }
1:58cf400: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                         LOG.warn("Removed stale network consumer {}", nc);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionSplitBroker.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:b32ff4d
/////////////////////////////////////////////////////////////////////////
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info)
1:             throws Exception {
1: 
1:         synchronized (networkConsumerList) {
1:             if (info.isNetworkSubscription()) {
1:                 networkConsumerList.add(info);
1:             } else {
1:                 if (!networkConsumerList.isEmpty()) {
1:                     List<ConsumerInfo> gcList = new ArrayList<ConsumerInfo>();
1:                     for (ConsumerInfo nc : networkConsumerList) {
1:                         if (!nc.isNetworkConsumersEmpty()) {
1:                             
1:                             for (ConsumerId id : nc.getNetworkConsumerIds()) {
1:                                 
1:                                 if (id.equals(info.getConsumerId())) {
1:                                     nc.removeNetworkConsumerId(id);
1:                                     if (nc.isNetworkConsumersEmpty()) {
1:                                         gcList.add(nc);
1:                     }
1:                     for (ConsumerInfo nc : gcList) {
1:                         networkConsumerList.remove(nc);
1:                         super.removeConsumer(context, nc);
0:                         LOG.warn("Removed stale network consumer " + nc);
1: 
commit:ceb7e1a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination dest = info.getDestination();
0:         boolean validDestination = dest != null && !dest.isTemporary();
0:         if (validDestination) {
1:             synchronized (networkConsumerList) {
1:                 if (info.isNetworkSubscription()) {
0:                     networkConsumerList.add(info);
0:                 } else {
0:                     if(!networkConsumerList.isEmpty()) {
0:                         List<ConsumerInfo> gcList = new ArrayList<ConsumerInfo>();
0:                         for (ConsumerInfo nc : networkConsumerList) {
0:                             if (!nc.isNetworkConsumersEmpty()) {
0:                                 for (ConsumerId id : nc.getNetworkConsumerIds()) {
0:                                     if (id.equals(info.getConsumerId())) {
0:                                         nc.removeNetworkConsumerId(id);
0:                                         if (nc.isNetworkConsumersEmpty()) {
0:                                             gcList.add(nc);
1:                                         }
0:                             } else {
0:                                 gcList.add(nc);
0:                         for (ConsumerInfo nc : gcList) {
0:                             networkConsumerList.remove(nc);
0:                             super.removeConsumer(context, nc);
0:                             LOG.warn("Removed stale network consumer " + nc);
1:                         }
commit:5dc188e
/////////////////////////////////////////////////////////////////////////
0:                 if(!networkConsumerList.isEmpty()) {
0:                     List<ConsumerInfo> gcList = new ArrayList<ConsumerInfo>();
0:                     for (ConsumerInfo nc : networkConsumerList) {
0:                         if (!nc.isNetworkConsumersEmpty()) {
0:                             for (ConsumerId id : nc.getNetworkConsumerIds()) {
0:                                 if (id.equals(info.getConsumerId())) {
0:                                     nc.removeNetworkConsumerId(id);
0:                                     if (nc.isNetworkConsumersEmpty()) {
0:                                         gcList.add(nc);
1:                                     }
0:                         } else {
0:                             gcList.add(nc);
0:                     for (ConsumerInfo nc : gcList) {
0:                         networkConsumerList.remove(nc);
0:                         super.removeConsumer(context, nc);
0:                         LOG.warn("Removed stale network consumer " + nc);
1:                     }
commit:ba3e913
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: public class ConnectionSplitBroker extends BrokerFilter{
0:     private static final Log LOG = LogFactory.getLog(ConnectionSplitBroker.class);
1:     private List<ConsumerInfo>networkConsumerList = new ArrayList<ConsumerInfo>();
1:         
0:         synchronized (networkConsumerList) {
0:             if (info.isNetworkSubscription()) {
0:                 networkConsumerList.add(info);
0:             } else {
0:                 List<ConsumerInfo> gcList = new ArrayList<ConsumerInfo>();
0:                 for (ConsumerInfo nc : networkConsumerList) {
0:                     if (!nc.isNetworkConsumersEmpty()) {
0:                         for (ConsumerId id : nc.getNetworkConsumerIds()) {
0:                             if (id.equals(info.getConsumerId())) {
0:                                 nc.removeNetworkConsumerId(id);
0:                                 if (nc.isNetworkConsumersEmpty()) {
0:                                     gcList.add(nc);
1:                                 }
1:                             }
1:                         }
0:                     } else {
0:                         gcList.add(nc);
1:                     }
0:                 for (ConsumerInfo nc : gcList) {
0:                     networkConsumerList.remove(nc);
0:                     super.removeConsumer(context, nc);
0:                     LOG.warn("Removed stale network consumer" + nc);
1:                 }
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1: 
0:             synchronized (networkConsumerList) {
1:                 networkConsumerList.remove(info);
commit:58cf400
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1:  * Monitors for client connections that may fail to another broker - but this
1:  * broker isn't aware they've gone. Can occur with network glitches or client
1:  * error
0: public class ConnectionSplitBroker extends BrokerFilter implements
0:         MessageListener {
0:     private static final Log LOG = LogFactory
0:             .getLog(ConnectionSplitBroker.class);
1: 
1: 
0:     private Map<ConnectionId, ConnectionContext> clientMap = new ConcurrentHashMap<ConnectionId, ConnectionContext>();
0:     private Map<ConsumerId,ConsumerInfo>consumerMap = new ConcurrentHashMap<ConsumerId,ConsumerInfo>();
0:     public void addConnection(ConnectionContext context, ConnectionInfo info)
0:             throws Exception {
0:         if (info != null) {
0:             removeStaleConnection(info);
0:             clientMap.put(info.getConnectionId(), context);
1:         }
0:     public void removeConnection(ConnectionContext context,
0:             ConnectionInfo info, Throwable error) throws Exception {
0:         if (info != null) {
0:             clientMap.remove(info.getConnectionId());
1:         }
0:         super.removeConnection(context, info, error);
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception{
1:        
0:         if (info.isNetworkSubscription()) {
0:             List<ConsumerId>list = info.getNetworkConsumerIds();
0:             for (ConsumerId id:list) {
0:                 consumerMap.put(id,info);
1:             }
0:         }else {
0:             ConsumerInfo networkInfo = consumerMap.get(info.getConsumerId());
0:             if (networkInfo != null) {
0:                 networkInfo.removeNetworkConsumerId(info.getConsumerId());
0:                 if (networkInfo.isNetworkConsumersEmpty()) {
0:                     consumerMap.remove(info.getConsumerId());
0:                     super.removeConsumer(context,networkInfo);
1:                 }
1:                 
1:             }
1:         }
1:         return super.addConsumer(context, info);
1:    
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception{
0:         if (info.isNetworkSubscription()) {
0:             List<ConsumerId>list = info.getNetworkConsumerIds();
0:             for (ConsumerId id:list) {
0:                 consumerMap.remove(id);
1:             }
1:         super.removeConsumer(context, info);
1:     }
1: 
0:     public void start() throws Exception {
0:         super.start();
0:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(
0:                 getBrokerService().getVmConnectorURI());
0:         fac.setCloseTimeout(1);
0:         fac.setWarnAboutUnstartedConnectionTimeout(10000);
0:         fac.setWatchTopicAdvisories(false);
0:         fac.setAlwaysSessionAsync(true);
0:         fac.setClientID(getBrokerId().toString() + ":" + getBrokerName()
0:                 + ":ConnectionSplitBroker");
0:         connection = fac.createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false,
0:                 Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(AdvisorySupport
0:                 .getConnectionAdvisoryTopic());
0:         consumer.setMessageListener(this);
1:     }
1: 
0:     public synchronized void stop() throws Exception {
0:         if (connection != null) {
0:             connection.stop();
0:             connection = null;
1:         }
0:         super.stop();
1:     }
1: 
0:     public void onMessage(javax.jms.Message m) {
0:         ActiveMQMessage message = (ActiveMQMessage) m;
1: 
0:         DataStructure o = message.getDataStructure();
0:         if (o != null && o.getClass() == ConnectionInfo.class) {
0:             ConnectionInfo info = (ConnectionInfo) o;
1:             
0:             String brokerId = null;
0:             try {
0:                 brokerId = message
0:                         .getStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID);
0:                 if (brokerId != null
0:                         && !brokerId.equals(getBrokerId().getValue())) {
0:                     // see if it already exits
0:                     removeStaleConnection(info);
1:                 }
0:             } catch (JMSException e) {
0:                 LOG.warn("Failed to get message property "
0:                         + AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, e);
1:             }
1: 
1:         }
1: 
1:     }
1: 
0:     protected boolean contains(BrokerId[] brokerPath, BrokerId brokerId) {
0:         if (brokerPath != null) {
0:             for (int i = 0; i < brokerPath.length; i++) {
0:                 if (brokerId.equals(brokerPath[i])) {
0:                     return true;
0:         return false;
1:     }
1:     
0:     protected void removeStaleConnection(ConnectionInfo info) {
0:      // see if it already exits
0:         ConnectionContext old = clientMap.remove(info
0:                 .getConnectionId());
0:         if (old != null && old.getConnection() != null) {
0:             String str = "connectionId=" + old.getConnectionId()
0:                     + ",clientId=" + old.getClientId();
0:             LOG.warn("Removing stale connection: " + str);
0:             try {
0:                 // remove connection states
0:                 TransportConnection connection = (TransportConnection) old
0:                         .getConnection();
0:                 connection.processRemoveConnection(old
0:                         .getConnectionId());
0:                 connection.stopAsync();
0:             } catch (Exception e) {
0:                 LOG.error("Failed to remove stale connection: "
0:                         + str, e);
1:             }
1:         }
1:     }
commit:5e747b0
/////////////////////////////////////////////////////////////////////////
0: 	        		         //remove connection states
0: 	        		         TransportConnection connection = (TransportConnection) old.getConnection();
0:                              connection.processRemoveConnection(old.getConnectionId());
0:                              connection.stopAsync();
0:                             LOG.error("Failed to remove stale connection: " + str,e);
commit:1a01d13
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnection;
0: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
0:     private Map <ConnectionId,ConnectionContext>clientMap = new ConcurrentHashMap<ConnectionId,ConnectionContext>();
0:     		clientMap.put(info.getConnectionId(),context);
/////////////////////////////////////////////////////////////////////////
0:     	fac.setClientID(getBrokerId().toString()+":" + getBrokerName() + ":ConnectionSplitBroker");
/////////////////////////////////////////////////////////////////////////
0: 				if (brokerId != null && !brokerId.equals(getBrokerId().getValue())) {
0: 	        		 //see if it already exits
0: 	        		 ConnectionContext old = clientMap.remove(info.getConnectionId());
0: 	        		 if (old != null && old.getConnection() != null) {
0: 	        		     String str = "connectionId=" + old.getConnectionId() +",clientId="+old.getClientId();
0: 	        		     LOG.warn("Removing stale connection: " + str);
0: 	        		     try {
0:                             old.getConnection().stop();
0:                         } catch (Exception e) {
0:                             LOG.error("Failed to remove stale connection: " + str);
0:                         }
0: 	        		 }
commit:88fbb05
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.cluster;
0: 
0: import java.util.Map;
0: import java.util.concurrent.ConcurrentHashMap;
0: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.Session;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.advisory.AdvisoryBroker;
0: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.BrokerId;
0: import org.apache.activemq.command.ConnectionId;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.DataStructure;
0: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
1: /**
0:  * Monitors for client connections that may fail to another
0:  * broker - but this broker isn't aware they've gone.
0:  * Can occur with network glitches or client error
1:  * 
0:  * @version $Revision$
1:  */
0: public class ConnectionSplitBroker extends BrokerFilter implements MessageListener{
0: 	private static final Log LOG = LogFactory.getLog(ConnectionSplitBroker.class);
0:     private Connection connection;
0:     private Map <ConnectionId,ConnectionInfo>clientMap = new ConcurrentHashMap<ConnectionId,ConnectionInfo>();
1:     public ConnectionSplitBroker(Broker next) {
1:         super(next);
0:     }
0: 
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
0:     	if (info != null){
0:     		clientMap.put(info.getConnectionId(),info);
0:     	}
0:         super.addConnection(context, info);
0:     }
0: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error)
0:         throws Exception {
0:     	if (info != null){
0:     		clientMap.remove(info.getConnectionId());
0:     	}
0:     	super.removeConnection(context, info, error);
0:     }
0:     
0:     public void start() throws Exception{
0:     	super.start();
0:     	ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(getBrokerService().getVmConnectorURI());
0:     	fac.setCloseTimeout(1);
0:     	fac.setWarnAboutUnstartedConnectionTimeout(10000);
0:     	fac.setWatchTopicAdvisories(false);
0:     	fac.setAlwaysSessionAsync(true);
0:     	connection = fac.createConnection();
0:     	connection.start();
0:     	Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     	MessageConsumer consumer = session.createConsumer(AdvisorySupport.getConnectionAdvisoryTopic());
0:     	consumer.setMessageListener(this);
0:     }
0:     
0:     public synchronized void stop() throws Exception{
0:     	if (connection != null){
0:     		connection.stop();
0:     		connection = null;
0:     	}
0:     	super.stop();
0:     }
0: 
0: 	public void onMessage(javax.jms.Message m) {
0: 		ActiveMQMessage message = (ActiveMQMessage) m;
0: 		
0: 		DataStructure o = message.getDataStructure();
0:         if (o != null && o.getClass() == ConnectionInfo.class) {
0:         	ConnectionInfo info = (ConnectionInfo) o;
0:         	 String brokerId=null;
0: 			try {
0: 				brokerId = message.getStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID);
0: 				if (brokerId != null && brokerId.equals(getBrokerId().getValue())) {
0: 	        		 
0: 	        	 }
0: 			} catch (JMSException e) {
0: 				LOG.warn("Failed to get message property "+ AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID,e);
0: 			}
0:         	 
0:         }
0: 		
0: 	}
0:         
0:         protected  boolean contains(BrokerId[] brokerPath, BrokerId brokerId) {
0:             if (brokerPath != null) {
0:                 for (int i = 0; i < brokerPath.length; i++) {
0:                     if (brokerId.equals(brokerPath[i])) {
0:                         return true;
0:                     }
0:                 }
0:             }
0:             return false;
0:         }
0: 
0: 
0: 
0: }
============================================================================