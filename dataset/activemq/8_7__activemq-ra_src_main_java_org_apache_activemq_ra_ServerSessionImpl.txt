2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
3:40a7d3b: 
1:40a7d3b: import java.lang.reflect.Method;
1:40a7d3b: 
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.ServerSession;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.resource.spi.endpoint.MessageEndpoint;
1:40a7d3b: import javax.resource.spi.work.Work;
1:40a7d3b: import javax.resource.spi.work.WorkEvent;
1:40a7d3b: import javax.resource.spi.work.WorkException;
1:40a7d3b: import javax.resource.spi.work.WorkListener;
1:40a7d3b: import javax.resource.spi.work.WorkManager;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.ActiveMQSession;
1:fd4bb60: import org.apache.activemq.ActiveMQSession.DeliveryListener;
1:540dd5c: import org.apache.activemq.TransactionContext;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:40a7d3b: 
1:40a7d3b: /**
1:b0c2a40:  * 
1:40a7d3b:  */
1:40a7d3b: public class ServerSessionImpl implements ServerSession, InboundContext, Work, DeliveryListener {
1:40a7d3b: 
1:40a7d3b:     public static final Method ON_MESSAGE_METHOD;
1:540dd5c:     private static int nextLogId;
1:40a7d3b: 
1:40a7d3b:     static {
1:40a7d3b:         try {
1:540dd5c:             ON_MESSAGE_METHOD = MessageListener.class.getMethod("onMessage", new Class[] {
1:540dd5c:                 Message.class
1:540dd5c:             });
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             throw new ExceptionInInitializerError(e);
11:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: 
1:40a7d3b:     private int serverSessionId = getNextLogId();
1:8bf987b:     private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
1:540dd5c: 
1:40a7d3b:     private ActiveMQSession session;
1:40a7d3b:     private WorkManager workManager;
1:40a7d3b:     private MessageEndpoint endpoint;
1:40a7d3b:     private MessageProducer messageProducer;
1:40a7d3b:     private final ServerSessionPoolImpl pool;
1:40a7d3b: 
1:40a7d3b:     private Object runControlMutex = new Object();
1:540dd5c:     private boolean runningFlag;
1:540dd5c:     /**
1:540dd5c:      * True if an error was detected that cause this session to be stale. When a
1:540dd5c:      * session is stale, it should not be used again for proccessing.
1:40a7d3b:      */
1:40a7d3b:     private boolean stale;
1:40a7d3b:     /**
1:40a7d3b:      * Does the TX commit need to be managed by the RA?
1:40a7d3b:      */
1:40a7d3b:     private final boolean useRAManagedTx;
1:40a7d3b:     /**
1:40a7d3b:      * The maximum number of messages to batch
1:40a7d3b:      */
1:40a7d3b:     private final int batchSize;
1:40a7d3b:     /**
1:40a7d3b:      * The current number of messages in the batch
1:40a7d3b:      */
1:40a7d3b:     private int currentBatchSize;
1:40a7d3b: 
1:40a7d3b:     public ServerSessionImpl(ServerSessionPoolImpl pool, ActiveMQSession session, WorkManager workManager, MessageEndpoint endpoint, boolean useRAManagedTx, int batchSize) throws JMSException {
1:40a7d3b:         this.pool = pool;
1:40a7d3b:         this.session = session;
1:40a7d3b:         this.workManager = workManager;
1:40a7d3b:         this.endpoint = endpoint;
1:40a7d3b:         this.useRAManagedTx = useRAManagedTx;
1:540dd5c:         this.session.setMessageListener((MessageListener)endpoint);
1:40a7d3b:         this.session.setDeliveryListener(this);
1:40a7d3b:         this.batchSize = batchSize;
1:40a7d3b:     }
1:40a7d3b: 
1:540dd5c:     private static synchronized int getNextLogId() {
1:540dd5c:         return nextLogId++;
1:540dd5c:     }
1:540dd5c: 
1:40a7d3b:     public Session getSession() throws JMSException {
1:40a7d3b:         return session;
1:40a7d3b:     }
1:40a7d3b: 
1:58e5b9a:     protected boolean isStale() {
1:5ebee0a:         return stale || !session.isRunning() || !session.isClosed();
1:58e5b9a:     }
1:58e5b9a: 
1:40a7d3b:     public MessageProducer getMessageProducer() throws JMSException {
1:40a7d3b:         if (messageProducer == null) {
1:40a7d3b:             messageProducer = getSession().createProducer(null);
1:40a7d3b:         }
1:40a7d3b:         return messageProducer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.jms.ServerSession#start()
1:40a7d3b:      */
1:40a7d3b:     public void start() throws JMSException {
1:40a7d3b: 
1:40a7d3b:         synchronized (runControlMutex) {
1:40a7d3b:             if (runningFlag) {
1:40a7d3b:                 log.debug("Start request ignored, already running.");
1:40a7d3b:                 return;
1:40a7d3b:             }
1:40a7d3b:             runningFlag = true;
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         // We get here because we need to start a async worker.
1:40a7d3b:         log.debug("Starting run.");
1:40a7d3b:         try {
1:540dd5c:             workManager.scheduleWork(this, WorkManager.INDEFINITE, null, new WorkListener() {
1:540dd5c:                 // The work listener is useful only for debugging...
1:540dd5c:                 public void workAccepted(WorkEvent event) {
1:540dd5c:                     log.debug("Work accepted: " + event);
1:540dd5c:                 }
1:40a7d3b: 
1:540dd5c:                 public void workRejected(WorkEvent event) {
1:540dd5c:                     log.debug("Work rejected: " + event);
1:540dd5c:                 }
1:40a7d3b: 
1:540dd5c:                 public void workStarted(WorkEvent event) {
1:540dd5c:                     log.debug("Work started: " + event);
1:540dd5c:                 }
1:40a7d3b: 
1:540dd5c:                 public void workCompleted(WorkEvent event) {
1:540dd5c:                     log.debug("Work completed: " + event);
1:540dd5c:                 }
1:40a7d3b: 
1:540dd5c:             });
1:540dd5c:         } catch (WorkException e) {
1:540dd5c:             throw (JMSException)new JMSException("Start failed: " + e).initCause(e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see java.lang.Runnable#run()
1:40a7d3b:      */
1:d0da99a:     public void run() {
1:5ebee0a:         log.debug("{} Running", this);
1:58e5b9a:         currentBatchSize = 0;
1:40a7d3b:         while (true) {
1:5ebee0a:             log.debug("{} run loop", this);
1:40a7d3b:             try {
1:540dd5c:                 InboundContextSupport.register(this);
1:5ebee0a:                 if (session.isClosed()) {
1:5ebee0a:                     stale = true;
1:5ebee0a:                 } else if (session.isRunning() ) {
1:519d8f7:                     session.run();
1:464402c:                 } else {
1:e8818fa:                     log.debug("JMS Session {} with unconsumed {} is no longer running (maybe due to loss of connection?), marking ServerSession as stale", session, session.getUnconsumedMessages().size());
1:464402c:                     stale = true;
1:464402c:                 }
1:540dd5c:             } catch (Throwable e) {
1:540dd5c:                 stale = true;
1:17e87ad:                 if ( log.isDebugEnabled() ) {
1:5ebee0a:                     log.debug("Endpoint {} failed to process message.", this, e);
1:17e87ad:                 } else if ( log.isInfoEnabled() ) {
1:5ebee0a:                     log.info("Endpoint {} failed to process message. Reason: " + e.getMessage(), this);
1:58e5b9a:                 }
1:540dd5c:             } finally {
1:540dd5c:                 InboundContextSupport.unregister(this);
1:540dd5c:                 log.debug("run loop end");
1:40a7d3b:                 synchronized (runControlMutex) {
1:40a7d3b:                     // This endpoint may have gone stale due to error
1:540dd5c:                     if (stale) {
1:5ebee0a:                         log.debug("Session {} stale, removing from pool", this);
1:40a7d3b:                         runningFlag = false;
1:40a7d3b:                         pool.removeFromPool(this);
1:40a7d3b:                         break;
1:40a7d3b:                     }
1:540dd5c:                     if (!session.hasUncomsumedMessages()) {
1:40a7d3b:                         runningFlag = false;
1:5ebee0a:                         log.debug("Session {} has no unconsumed message, returning to pool", this);
1:40a7d3b:                         pool.returnToPool(this);
1:40a7d3b:                         break;
1:5ebee0a:                     } else {
1:5ebee0a:                         log.debug("Session has session has more work to do b/c of unconsumed", this);
1:540dd5c:                     }
1:40a7d3b:                 }
1:40a7d3b:             }
1:40a7d3b:         }
1:5ebee0a:         log.debug("{} Run finished", this);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * The ActiveMQSession's run method will call back to this method before
1:40a7d3b:      * dispactching a message to the MessageListener.
1:40a7d3b:      */
1:40a7d3b:     public void beforeDelivery(ActiveMQSession session, Message msg) {
1:40a7d3b:         if (currentBatchSize == 0) {
1:40a7d3b:             try {
1:40a7d3b:                 endpoint.beforeDelivery(ON_MESSAGE_METHOD);
1:40a7d3b:             } catch (Throwable e) {
1:40a7d3b:                 throw new RuntimeException("Endpoint before delivery notification failure", e);
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * The ActiveMQSession's run method will call back to this method after
1:40a7d3b:      * dispactching a message to the MessageListener.
1:40a7d3b:      */
1:40a7d3b:     public void afterDelivery(ActiveMQSession session, Message msg) {
1:40a7d3b:         if (++currentBatchSize >= batchSize || !session.hasUncomsumedMessages()) {
2:40a7d3b:             currentBatchSize = 0;
1:40a7d3b:             try {
1:40a7d3b:                 endpoint.afterDelivery();
1:40a7d3b:             } catch (Throwable e) {
1:1408e7f:                 throw new RuntimeException("Endpoint after delivery notification failure: " + e, e);
1:40a7d3b:             } finally {
1:9d0ca02:                 TransactionContext transactionContext = session.getTransactionContext();
1:540dd5c:                 if (transactionContext != null && transactionContext.isInLocalTransaction()) {
1:540dd5c:                     if (!useRAManagedTx) {
1:540dd5c:                         // Sanitiy Check: If the local transaction has not been
1:540dd5c:                         // commited..
1:40a7d3b:                         // Commit it now.
1:58e5b9a:                         log.warn("Local transaction had not been commited. Commiting now.");
1:40a7d3b:                     }
1:40a7d3b:                     try {
1:40a7d3b:                         session.commit();
1:40a7d3b:                     } catch (JMSException e) {
1:40a7d3b:                         log.info("Commit failed:", e);
1:40a7d3b:                     }
1:40a7d3b:                 }
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.work.Work#release()
1:40a7d3b:      */
1:40a7d3b:     public void release() {
1:40a7d3b:         log.debug("release called");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see java.lang.Object#toString()
1:40a7d3b:      */
1:58e5b9a:     @Override
1:40a7d3b:     public String toString() {
1:e8818fa:         return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void close() {
1:40a7d3b:         try {
1:40a7d3b:             endpoint.release();
1:40a7d3b:         } catch (Throwable e) {
1:58e5b9a:             log.debug("Endpoint did not release properly: " + e.getMessage(), e);
1:40a7d3b:         }
1:40a7d3b:         try {
1:40a7d3b:             session.close();
1:40a7d3b:         } catch (Throwable e) {
1:58e5b9a:             log.debug("Session did not close properly: " + e.getMessage(), e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5ebee0a
/////////////////////////////////////////////////////////////////////////
1:         return stale || !session.isRunning() || !session.isClosed();
/////////////////////////////////////////////////////////////////////////
1:         log.debug("{} Running", this);
1:             log.debug("{} run loop", this);
1:                 if (session.isClosed()) {
1:                     stale = true;
1:                 } else if (session.isRunning() ) {
/////////////////////////////////////////////////////////////////////////
1:                     log.debug("Endpoint {} failed to process message.", this, e);
1:                     log.info("Endpoint {} failed to process message. Reason: " + e.getMessage(), this);
/////////////////////////////////////////////////////////////////////////
1:                         log.debug("Session {} stale, removing from pool", this);
1:                         log.debug("Session {} has no unconsumed message, returning to pool", this);
1:                     } else {
1:                         log.debug("Session has session has more work to do b/c of unconsumed", this);
1:         log.debug("{} Run finished", this);
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1:                     log.debug("JMS Session {} with unconsumed {} is no longer running (maybe due to loss of connection?), marking ServerSession as stale", session, session.getUnconsumedMessages().size());
0:                     log.debug("Endpoint {} failed to process message.", session, e);
0:                     log.info("Endpoint {} failed to process message. Reason: " + e.getMessage(), session);
/////////////////////////////////////////////////////////////////////////
0:                         log.debug("Session has no unconsumed message, returning to pool");
/////////////////////////////////////////////////////////////////////////
1:         return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
commit:519d8f7
/////////////////////////////////////////////////////////////////////////
1:                     session.run();
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Gary Tully
-------------------------------------------------------------------------------
commit:1408e7f
/////////////////////////////////////////////////////////////////////////
1:                 throw new RuntimeException("Endpoint after delivery notification failure: " + e, e);
commit:17e87ad
/////////////////////////////////////////////////////////////////////////
1:                 if ( log.isDebugEnabled() ) {
0:                     log.debug("Endpoint failed to process message.", e);
1:                 } else if ( log.isInfoEnabled() ) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TransactionContext;
/////////////////////////////////////////////////////////////////////////
1:     private static int nextLogId;
1:             ON_MESSAGE_METHOD = MessageListener.class.getMethod("onMessage", new Class[] {
1:                 Message.class
1:             });
1:         } catch (Exception e) {
0:     private final Log log = LogFactory.getLog(ServerSessionImpl.class.getName() + ":" + serverSessionId);
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean runningFlag;
1:     /**
1:      * True if an error was detected that cause this session to be stale. When a
1:      * session is stale, it should not be used again for proccessing.
/////////////////////////////////////////////////////////////////////////
1:         this.session.setMessageListener((MessageListener)endpoint);
1:     private static synchronized int getNextLogId() {
1:         return nextLogId++;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             workManager.scheduleWork(this, WorkManager.INDEFINITE, null, new WorkListener() {
1:                 // The work listener is useful only for debugging...
1:                 public void workAccepted(WorkEvent event) {
1:                     log.debug("Work accepted: " + event);
1:                 }
1:                 public void workRejected(WorkEvent event) {
1:                     log.debug("Work rejected: " + event);
1:                 }
1:                 public void workStarted(WorkEvent event) {
1:                     log.debug("Work started: " + event);
1:                 }
1:                 public void workCompleted(WorkEvent event) {
1:                     log.debug("Work completed: " + event);
1:                 }
1:             });
1:         } catch (WorkException e) {
1:             throw (JMSException)new JMSException("Start failed: " + e).initCause(e);
/////////////////////////////////////////////////////////////////////////
0:         log.debug("Running");
0:             log.debug("run loop start");
1:                 InboundContextSupport.register(this);
1:             } catch (Throwable e) {
1:                 stale = true;
1:             } finally {
1:                 InboundContextSupport.unregister(this);
1:                 log.debug("run loop end");
1:                     if (stale) {
1:                     if (!session.hasUncomsumedMessages()) {
1:                     }
1:      * The ActiveMQSession's run method will call back to this method before
/////////////////////////////////////////////////////////////////////////
1:      * The ActiveMQSession's run method will call back to this method after
/////////////////////////////////////////////////////////////////////////
1:                 if (transactionContext != null && transactionContext.isInLocalTransaction()) {
1:                     if (!useRAManagedTx) {
1:                         // Sanitiy Check: If the local transaction has not been
1:                         // commited..
/////////////////////////////////////////////////////////////////////////
0:         return "ServerSessionImpl:" + serverSessionId;
0:             log.debug("Endpoint did not release properly: " + e, e);
0:             log.debug("Session did not close properly: " + e, e);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.ActiveMQSession.DeliveryListener;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
author:Robert Davies
-------------------------------------------------------------------------------
commit:58e5b9a
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isStale() {
0:         return stale || !session.isRunning();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         currentBatchSize = 0;
0:                 if ( session.isRunning() ) {
/////////////////////////////////////////////////////////////////////////
0:                 if ( log.isInfoEnabled() ) {
0:                     log.info("Endpoint failed to process message. Reason: " + e.getMessage());                    
0:                 } else if ( log.isDebugEnabled() ) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                         log.warn("Local transaction had not been commited. Commiting now.");
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             log.debug("Endpoint did not release properly: " + e.getMessage(), e);
1:             log.debug("Session did not close properly: " + e.getMessage(), e);
commit:464402c
/////////////////////////////////////////////////////////////////////////
0:                 if ( session.isRunning() ) {
1:                 } else {
0:                     log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
1:                     stale = true;
1:                 }
commit:d0da99a
/////////////////////////////////////////////////////////////////////////
1:     public void run() {
author:James Strachan
-------------------------------------------------------------------------------
commit:9d0ca02
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.TransactionContext;
/////////////////////////////////////////////////////////////////////////
1:                 TransactionContext transactionContext = session.getTransactionContext();
0:                 if( transactionContext != null && transactionContext.isInLocalTransaction() ) {
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
1:  * 
0:  * Copyright 2004 Protique Ltd
0:  * Copyright 2005 LogicBlaze Inc.
1:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, 
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
1:  * See the License for the specific language governing permissions and 
1:  * limitations under the License. 
1:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: import java.lang.reflect.Method;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.ServerSession;
1: import javax.jms.Session;
1: import javax.resource.spi.endpoint.MessageEndpoint;
1: import javax.resource.spi.work.Work;
1: import javax.resource.spi.work.WorkEvent;
1: import javax.resource.spi.work.WorkException;
1: import javax.resource.spi.work.WorkListener;
1: import javax.resource.spi.work.WorkManager;
1: 
0: import org.activemq.ActiveMQSession;
0: import org.activemq.ActiveMQSession.DeliveryListener;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ServerSessionImpl implements ServerSession, InboundContext, Work, DeliveryListener {
1: 
1:     public static final Method ON_MESSAGE_METHOD;
1: 
1:     static {
1:         try {
0:             ON_MESSAGE_METHOD = MessageListener.class.getMethod("onMessage", new Class[]{Message.class});
1:         }
0:         catch (Exception e) {
1:             throw new ExceptionInInitializerError(e);
1:         }
1:     }
1: 
0:     private static int nextLogId=0;
0:     synchronized static private int getNextLogId() {
0:         return nextLogId++;
1:     }
1: 
1:     private int serverSessionId = getNextLogId();
0:     private final Log log = LogFactory.getLog( ServerSessionImpl.class.getName()+":"+serverSessionId );
1:     
1:     private ActiveMQSession session;
1:     private WorkManager workManager;
1:     private MessageEndpoint endpoint;
1:     private MessageProducer messageProducer;
1:     private final ServerSessionPoolImpl pool;
1: 
1:     private Object runControlMutex = new Object();
0:     private boolean runningFlag = false;
1:     /** 
0:      * True if an error was detected that cause this session to be stale.  When a session 
0:      * is stale, it should not be used again for proccessing.
1:      */
1:     private boolean stale;
1:     /**
1:      * Does the TX commit need to be managed by the RA?
1:      */
1:     private final boolean useRAManagedTx;
1:     /**
1:      * The maximum number of messages to batch
1:      */
1:     private final int batchSize;
1:     /**
1:      * The current number of messages in the batch
1:      */
1:     private int currentBatchSize;
1: 
1:     public ServerSessionImpl(ServerSessionPoolImpl pool, ActiveMQSession session, WorkManager workManager, MessageEndpoint endpoint, boolean useRAManagedTx, int batchSize) throws JMSException {
1:         this.pool = pool;
1:         this.session = session;
1:         this.workManager = workManager;
1:         this.endpoint = endpoint;
1:         this.useRAManagedTx = useRAManagedTx;
0:         this.session.setMessageListener((MessageListener) endpoint);
1:         this.session.setDeliveryListener(this);
1:         this.batchSize = batchSize;
1:     }
1: 
1:     public Session getSession() throws JMSException {
1:         return session;
1:     }
1: 
1:     public MessageProducer getMessageProducer() throws JMSException {
1:         if (messageProducer == null) {
1:             messageProducer = getSession().createProducer(null);
1:         }
1:         return messageProducer;
1:     }
1: 
1:     /**
1:      * @see javax.jms.ServerSession#start()
1:      */
1:     public void start() throws JMSException {
1: 
1:         synchronized (runControlMutex) {
1:             if (runningFlag) {
1:                 log.debug("Start request ignored, already running.");
1:                 return;
1:             }
1:             runningFlag = true;
1:         }
1: 
1:         // We get here because we need to start a async worker.
1:         log.debug("Starting run.");
1:         try {
0:             workManager.scheduleWork(this, WorkManager.INDEFINITE, null,
0:                     new WorkListener() {
0:                         //The work listener is useful only for debugging...
0:                         public void workAccepted(WorkEvent event) {
0:                             log.debug("Work accepted: " + event);
1:                         }
1: 
0:                         public void workRejected(WorkEvent event) {
0:                             log.debug("Work rejected: " + event);
1:                         }
1: 
0:                         public void workStarted(WorkEvent event) {
0:                             log.debug("Work started: " + event);
1:                         }
1: 
0:                         public void workCompleted(WorkEvent event) {
0:                             log.debug("Work completed: " + event);
1:                         }
1: 
0:                     });
1:         }
0:         catch (WorkException e) {
0:             throw (JMSException) new JMSException("Start failed: " + e).initCause(e);
1:         }
1:     }
1: 
1:     /**
1:      * @see java.lang.Runnable#run()
1:      */
0:     synchronized public void run() {
0:         log.debug("Running"); 
1:         while (true) {
0:             log.debug("run loop start");            
1:             try {
0:                 InboundContextSupport.register(this);                
1:                 currentBatchSize = 0;
0:                 session.run();
1:             }
0:             catch (Throwable e) {
0:                 stale=true;
0:                 log.debug("Endpoint failed to process message.", e);
0:                 log.info("Endpoint failed to process message. Reason: " + e);
1:             }            
0:             finally {
0:                 InboundContextSupport.unregister(this);                
0:                 log.debug("run loop end");            
1:                 synchronized (runControlMutex) {
1:                     // This endpoint may have gone stale due to error
0:                     if( stale) {
1:                         runningFlag = false;
1:                         pool.removeFromPool(this);
1:                         break;
1:                     }
0:                     if( !session.hasUncomsumedMessages() ) {
1:                         runningFlag = false;
1:                         pool.returnToPool(this);
1:                         break;
1:                     }                
1:                 }
1:             }
1:         }
0:         log.debug("Run finished");
1:     }
1: 
1: 
1:     /**
0:      * The ActiveMQSession's run method will call back to this method before 
1:      * dispactching a message to the MessageListener.
1:      */
1:     public void beforeDelivery(ActiveMQSession session, Message msg) {
1:         if (currentBatchSize == 0) {
1:             try {
1:                 endpoint.beforeDelivery(ON_MESSAGE_METHOD);
1:             } catch (Throwable e) {
1:                 throw new RuntimeException("Endpoint before delivery notification failure", e);
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * The ActiveMQSession's run method will call back to this method after 
1:      * dispactching a message to the MessageListener.
1:      */
1:     public void afterDelivery(ActiveMQSession session, Message msg) {
1:         if (++currentBatchSize >= batchSize || !session.hasUncomsumedMessages()) {
1:             currentBatchSize = 0;
1:             try {
1:                 endpoint.afterDelivery();
1:             } catch (Throwable e) {
0:                 throw new RuntimeException("Endpoint after delivery notification failure", e);
1:             } finally {
0:                 if( session.getTransactionContext().isInLocalTransaction() ) {
0:                     if( !useRAManagedTx ) {
0:                         // Sanitiy Check: If the local transaction has not been commited..
1:                         // Commit it now.
0:                         log.warn("Local transaction had not been commited.  Commiting now.");
1:                     }
1:                     try {
1:                         session.commit();
1:                     } catch (JMSException e) {
1:                         log.info("Commit failed:", e);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.work.Work#release()
1:      */
1:     public void release() {
1:         log.debug("release called");
1:     }
1: 
1:     /**
1:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
0:         return "ServerSessionImpl:"+serverSessionId;
1:     }
1: 
1:     public void close() {
1:         try {
1:             endpoint.release();
1:         } catch (Throwable e) {
0:             log.debug("Endpoint did not release properly: "+e,e);
1:         }
1:         try {
1:             session.close();
1:         } catch (Throwable e) {
0:             log.debug("Session did not close properly: "+e,e);
1:         }
1:     }
1: 
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
============================================================================