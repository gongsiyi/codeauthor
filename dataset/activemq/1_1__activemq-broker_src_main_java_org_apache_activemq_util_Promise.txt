1:5a192e7: /**
1:5a192e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a192e7:  * contributor license agreements.  See the NOTICE file distributed with
1:5a192e7:  * this work for additional information regarding copyright ownership.
1:5a192e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a192e7:  * (the "License"); you may not use this file except in compliance with
1:5a192e7:  * the License.  You may obtain a copy of the License at
1:5a192e7:  *
1:5a192e7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a192e7:  *
1:5a192e7:  * Unless required by applicable law or agreed to in writing, software
1:5a192e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a192e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a192e7:  * See the License for the specific language governing permissions and
1:5a192e7:  * limitations under the License.
1:5a192e7:  */
1:5a192e7: package org.apache.activemq.util;
1:5a192e7: 
1:5a192e7: 
1:5a192e7: import java.util.ArrayList;
1:5a192e7: import java.util.concurrent.*;
1:5a192e7: 
1:5a192e7: /**
1:5a192e7:  * <p>
1:5a192e7:  *   Used to implement callback based result passing of a promised computation.
1:5a192e7:  *   Can be converted to a future using the future() method.
1:5a192e7:  * </p>
1:5a192e7:  *
1:5a192e7:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:5a192e7:  */
1:5a192e7: public class Promise<T> extends PromiseCallback<T> {
1:5a192e7: 
1:5a192e7:     ArrayList<PromiseCallback<T>> callbacks = new ArrayList<PromiseCallback<T>>(1);
1:5a192e7:     T value;
1:5a192e7:     Throwable error;
1:5a192e7:     Future<T> future=null;
1:5a192e7: 
1:5a192e7:     private class PromiseFuture extends PromiseCallback<T> implements Future<T> {
1:5a192e7:         CountDownLatch latch = new CountDownLatch(1);
1:5a192e7: 
1:5a192e7:         public boolean cancel(boolean mayInterruptIfRunning) {
1:5a192e7:             return false;
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         public boolean isCancelled() {
1:5a192e7:             return false;
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         public boolean isDone() {
1:5a192e7:             return latch.getCount() == 0;
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         public T get() throws InterruptedException, ExecutionException {
1:5a192e7:             latch.await();
1:5a192e7:             return value();
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
1:5a192e7:             if (latch.await(timeout, unit)) {
1:5a192e7:                 return value();
1:5a192e7:             } else {
1:5a192e7:                 throw new TimeoutException();
1:5a192e7:             }
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         public void onComplete(T value, Throwable error) {
1:5a192e7:             latch.countDown();
1:5a192e7:         }
1:5a192e7: 
1:5a192e7:         private T value() throws ExecutionException {
1:5a192e7:             if( error!=null ) {
1:5a192e7:                 throw new ExecutionException(error);
1:5a192e7:             }
1:5a192e7:             return value;
1:5a192e7:         }
1:5a192e7:     }
1:5a192e7: 
1:5a192e7:     public Future<T> future() {
1:5a192e7:         if( future == null ) {
1:5a192e7:             PromiseFuture future = new PromiseFuture();
1:5a192e7:             watch(future);
1:5a192e7:             this.future = future;
1:5a192e7:         }
1:5a192e7:         return future;
1:5a192e7:     }
1:5a192e7: 
1:5a192e7:     public void watch(PromiseCallback<T> callback) {
1:5a192e7:         if (callback == null)
1:5a192e7:             throw new IllegalArgumentException("callback cannot be null");
1:5a192e7:         boolean queued = false;
1:5a192e7:         synchronized (this) {
1:5a192e7:             if (callbacks != null) {
1:5a192e7:                 callbacks.add(callback);
1:5a192e7:                 queued = true;
1:5a192e7:             }
1:5a192e7:         }
1:5a192e7:         if (!queued) {
1:5a192e7:             callback.onComplete(value, error);
1:5a192e7:         }
1:5a192e7:     }
1:5a192e7: 
1:5a192e7:     @Override
1:5a192e7:     public void onComplete(T value, Throwable error) {
1:5a192e7:         if( value!=null && error !=null ) {
1:5a192e7:             throw new IllegalArgumentException("You can not have both a vaule and error");
1:5a192e7:         }
1:5a192e7:         ArrayList<PromiseCallback<T>> callbacks;
1:5a192e7:         synchronized (this) {
1:5a192e7:             callbacks = this.callbacks;
1:5a192e7:             if (callbacks != null) {
1:5a192e7:                 this.value = value;
1:5a192e7:                 this.error = error;
1:5a192e7:                 this.callbacks = null;
1:5a192e7:             }
1:5a192e7:         }
1:5a192e7:         if (callbacks != null) {
1:5a192e7:             for (PromiseCallback callback : callbacks) {
1:5a192e7:                 callback.onComplete(this.value, this.error);
1:5a192e7:             }
1:5a192e7:         }
1:5a192e7:     }
1:5a192e7: 
1:5a192e7: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5a192e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.concurrent.*;
1: 
1: /**
1:  * <p>
1:  *   Used to implement callback based result passing of a promised computation.
1:  *   Can be converted to a future using the future() method.
1:  * </p>
1:  *
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class Promise<T> extends PromiseCallback<T> {
1: 
1:     ArrayList<PromiseCallback<T>> callbacks = new ArrayList<PromiseCallback<T>>(1);
1:     T value;
1:     Throwable error;
1:     Future<T> future=null;
1: 
1:     private class PromiseFuture extends PromiseCallback<T> implements Future<T> {
1:         CountDownLatch latch = new CountDownLatch(1);
1: 
1:         public boolean cancel(boolean mayInterruptIfRunning) {
1:             return false;
1:         }
1: 
1:         public boolean isCancelled() {
1:             return false;
1:         }
1: 
1:         public boolean isDone() {
1:             return latch.getCount() == 0;
1:         }
1: 
1:         public T get() throws InterruptedException, ExecutionException {
1:             latch.await();
1:             return value();
1:         }
1: 
1:         public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
1:             if (latch.await(timeout, unit)) {
1:                 return value();
1:             } else {
1:                 throw new TimeoutException();
1:             }
1:         }
1: 
1:         public void onComplete(T value, Throwable error) {
1:             latch.countDown();
1:         }
1: 
1:         private T value() throws ExecutionException {
1:             if( error!=null ) {
1:                 throw new ExecutionException(error);
1:             }
1:             return value;
1:         }
1:     }
1: 
1:     public Future<T> future() {
1:         if( future == null ) {
1:             PromiseFuture future = new PromiseFuture();
1:             watch(future);
1:             this.future = future;
1:         }
1:         return future;
1:     }
1: 
1:     public void watch(PromiseCallback<T> callback) {
1:         if (callback == null)
1:             throw new IllegalArgumentException("callback cannot be null");
1:         boolean queued = false;
1:         synchronized (this) {
1:             if (callbacks != null) {
1:                 callbacks.add(callback);
1:                 queued = true;
1:             }
1:         }
1:         if (!queued) {
1:             callback.onComplete(value, error);
1:         }
1:     }
1: 
1:     @Override
1:     public void onComplete(T value, Throwable error) {
1:         if( value!=null && error !=null ) {
1:             throw new IllegalArgumentException("You can not have both a vaule and error");
1:         }
1:         ArrayList<PromiseCallback<T>> callbacks;
1:         synchronized (this) {
1:             callbacks = this.callbacks;
1:             if (callbacks != null) {
1:                 this.value = value;
1:                 this.error = error;
1:                 this.callbacks = null;
1:             }
1:         }
1:         if (callbacks != null) {
1:             for (PromiseCallback callback : callbacks) {
1:                 callback.onComplete(this.value, this.error);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================