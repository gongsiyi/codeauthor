1:fc00993: /**
1:4102acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4102acc:  * contributor license agreements.  See the NOTICE file distributed with
1:4102acc:  * this work for additional information regarding copyright ownership.
1:4102acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4102acc:  * (the "License"); you may not use this file except in compliance with
1:4102acc:  * the License.  You may obtain a copy of the License at
2:4102acc:  *
1:4102acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4102acc:  *
1:4102acc:  * Unless required by applicable law or agreed to in writing, software
1:4102acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4102acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4102acc:  * See the License for the specific language governing permissions and
1:4102acc:  * limitations under the License.
1:4102acc:  */
1:4102acc: package org.apache.activemq.camel;
2:4102acc: 
1:74a7a8b: import javax.jms.IllegalStateException;
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageConsumer;
1:74a7a8b: import javax.jms.MessageListener;
1:74a7a8b: 
1:4102acc: import org.apache.activemq.ActiveMQSession;
1:4102acc: import org.apache.activemq.util.JMSExceptionSupport;
1:4102acc: import org.apache.camel.Consumer;
1:4102acc: import org.apache.camel.Endpoint;
1:4102acc: import org.apache.camel.Exchange;
1:4102acc: import org.apache.camel.PollingConsumer;
1:4102acc: import org.apache.camel.Processor;
1:4102acc: 
1:4102acc: /**
1:74a7a8b:  * A JMS {@link javax.jms.MessageConsumer} which consumes message exchanges from
1:74a7a8b:  * a Camel {@link Endpoint}
1:b0c2a40:  * 
1:74a7a8b:  * 
1:4102acc:  */
1:4102acc: public class CamelMessageConsumer implements MessageConsumer {
1:4102acc:     private final CamelDestination destination;
1:4102acc:     private final Endpoint endpoint;
1:4102acc:     private final ActiveMQSession session;
1:4102acc:     private final String messageSelector;
1:4102acc:     private final boolean noLocal;
1:4102acc:     private MessageListener messageListener;
1:4102acc:     private Consumer consumer;
1:4102acc:     private PollingConsumer pollingConsumer;
1:4102acc:     private boolean closed;
1:4102acc: 
1:4102acc:     public CamelMessageConsumer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session, String messageSelector, boolean noLocal) {
1:4102acc:         this.destination = destination;
1:4102acc:         this.endpoint = endpoint;
1:4102acc:         this.session = session;
1:4102acc:         this.messageSelector = messageSelector;
1:4102acc:         this.noLocal = noLocal;
8:4102acc:     }
1:4102acc: 
1:4102acc:     public void close() throws JMSException {
1:4102acc:         if (!closed) {
1:4102acc:             closed = true;
1:4102acc:             try {
1:4102acc:                 if (consumer != null) {
1:4102acc:                     consumer.stop();
1:4102acc:                 }
1:4102acc:                 if (pollingConsumer != null) {
1:4102acc:                     pollingConsumer.stop();
1:4102acc:                 }
1:74a7a8b:             } catch (JMSException e) {
1:4102acc:                 throw e;
1:74a7a8b:             } catch (Exception e) {
1:4102acc:                 throw JMSExceptionSupport.create(e);
1:4102acc:             }
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     public MessageListener getMessageListener() throws JMSException {
1:4102acc:         return messageListener;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public void setMessageListener(MessageListener messageListener) throws JMSException {
1:4102acc:         this.messageListener = messageListener;
1:4102acc:         if (messageListener != null && consumer == null) {
1:4102acc:             consumer = createConsumer();
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     public Message receive() throws JMSException {
1:4102acc:         Exchange exchange = getPollingConsumer().receive();
1:4102acc:         return createMessage(exchange);
1:4102acc:     }
1:4102acc: 
1:4102acc:     public Message receive(long timeoutMillis) throws JMSException {
1:4102acc:         Exchange exchange = getPollingConsumer().receive(timeoutMillis);
1:4102acc:         return createMessage(exchange);
1:4102acc:     }
1:4102acc: 
1:4102acc:     public Message receiveNoWait() throws JMSException {
1:4102acc:         Exchange exchange = getPollingConsumer().receiveNoWait();
1:4102acc:         return createMessage(exchange);
1:4102acc:     }
1:4102acc: 
1:4102acc:     // Properties
1:74a7a8b:     // -----------------------------------------------------------------------
1:4102acc: 
1:4102acc:     public CamelDestination getDestination() {
1:4102acc:         return destination;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public Endpoint getEndpoint() {
1:4102acc:         return endpoint;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public String getMessageSelector() {
1:4102acc:         return messageSelector;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public boolean isNoLocal() {
1:4102acc:         return noLocal;
1:4102acc:     }
1:4102acc: 
1:4102acc:     public ActiveMQSession getSession() {
1:4102acc:         return session;
1:4102acc:     }
1:4102acc: 
1:4102acc:     // Implementation methods
1:74a7a8b:     // -----------------------------------------------------------------------
1:4102acc: 
1:4102acc:     protected PollingConsumer getPollingConsumer() throws JMSException {
1:4102acc:         try {
1:4102acc:             if (pollingConsumer == null) {
1:4102acc:                 pollingConsumer = endpoint.createPollingConsumer();
1:4102acc:                 pollingConsumer.start();
1:4102acc:             }
1:4102acc:             return pollingConsumer;
1:74a7a8b:         } catch (JMSException e) {
1:4102acc:             throw e;
1:74a7a8b:         } catch (Exception e) {
1:4102acc:             throw JMSExceptionSupport.create(e);
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected Message createMessage(Exchange exchange) throws JMSException {
1:4102acc:         if (exchange != null) {
1:4102acc:             Message message = destination.getBinding().makeJmsMessage(exchange, session);
1:4102acc:             return message;
1:74a7a8b:         } else {
1:4102acc:             return null;
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected Consumer createConsumer() throws JMSException {
1:4102acc:         try {
1:4102acc:             Consumer answer = endpoint.createConsumer(new Processor() {
1:4102acc:                 public void process(Exchange exchange) throws Exception {
1:4102acc:                     Message message = createMessage(exchange);
1:4102acc:                     getMessageListener().onMessage(message);
1:4102acc:                 }
1:4102acc:             });
1:4102acc:             answer.start();
1:4102acc:             return answer;
1:74a7a8b:         } catch (JMSException e) {
1:4102acc:             throw e;
1:74a7a8b:         } catch (Exception e) {
1:4102acc:             throw JMSExceptionSupport.create(e);
1:4102acc:         }
1:4102acc:     }
1:4102acc: 
1:4102acc:     protected void checkClosed() throws javax.jms.IllegalStateException {
1:4102acc:         if (closed) {
1:4102acc:             throw new IllegalStateException("The producer is closed");
1:4102acc:         }
1:4102acc:     }
1:4102acc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * A JMS {@link javax.jms.MessageConsumer} which consumes message exchanges from
1:  * a Camel {@link Endpoint}
1:  * 
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException e) {
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:     // -----------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:     // -----------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:         } catch (Exception e) {
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:4102acc
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: import org.apache.camel.Consumer;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.PollingConsumer;
1: import org.apache.camel.Processor;
1: 
0: import javax.jms.*;
0: import javax.jms.IllegalStateException;
1: 
1: /**
0:  * A JMS {@link javax.jms.MessageConsumer} which consumes message exchanges from a
0:  * Camel {@link Endpoint}
1:  *
0:  * @version $Revision: $
1:  */
1: public class CamelMessageConsumer implements MessageConsumer {
1:     private final CamelDestination destination;
1:     private final Endpoint endpoint;
1:     private final ActiveMQSession session;
1:     private final String messageSelector;
1:     private final boolean noLocal;
1:     private MessageListener messageListener;
1:     private Consumer consumer;
1:     private PollingConsumer pollingConsumer;
1:     private boolean closed;
1: 
1:     public CamelMessageConsumer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session, String messageSelector, boolean noLocal) {
1:         this.destination = destination;
1:         this.endpoint = endpoint;
1:         this.session = session;
1:         this.messageSelector = messageSelector;
1:         this.noLocal = noLocal;
1:     }
1: 
1:     public void close() throws JMSException {
1:         if (!closed) {
1:             closed = true;
1:             try {
1:                 if (consumer != null) {
1:                     consumer.stop();
1:                 }
1:                 if (pollingConsumer != null) {
1:                     pollingConsumer.stop();
1:                 }
1:             }
0:             catch (JMSException e) {
1:                 throw e;
1:             }
0:             catch (Exception e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:     }
1: 
1:     public MessageListener getMessageListener() throws JMSException {
1:         return messageListener;
1:     }
1: 
1:     public void setMessageListener(MessageListener messageListener) throws JMSException {
1:         this.messageListener = messageListener;
1:         if (messageListener != null && consumer == null) {
1:             consumer = createConsumer();
1:         }
1:     }
1: 
1:     public Message receive() throws JMSException {
1:         Exchange exchange = getPollingConsumer().receive();
1:         return createMessage(exchange);
1:     }
1: 
1:     public Message receive(long timeoutMillis) throws JMSException {
1:         Exchange exchange = getPollingConsumer().receive(timeoutMillis);
1:         return createMessage(exchange);
1:     }
1: 
1:     public Message receiveNoWait() throws JMSException {
1:         Exchange exchange = getPollingConsumer().receiveNoWait();
1:         return createMessage(exchange);
1:     }
1: 
1:     // Properties
0:     //-----------------------------------------------------------------------
1: 
1:     public CamelDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public Endpoint getEndpoint() {
1:         return endpoint;
1:     }
1: 
1:     public String getMessageSelector() {
1:         return messageSelector;
1:     }
1: 
1:     public boolean isNoLocal() {
1:         return noLocal;
1:     }
1: 
1:     public ActiveMQSession getSession() {
1:         return session;
1:     }
1: 
1:     // Implementation methods
0:     //-----------------------------------------------------------------------
1: 
1:     protected PollingConsumer getPollingConsumer() throws JMSException {
1:         try {
1:             if (pollingConsumer == null) {
1:                 pollingConsumer = endpoint.createPollingConsumer();
1:                 pollingConsumer.start();
1:             }
1:             return pollingConsumer;
1:         }
0:         catch (JMSException e) {
1:             throw e;
1:         }
0:         catch (Exception e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     protected Message createMessage(Exchange exchange) throws JMSException {
1:         if (exchange != null) {
1:             Message message = destination.getBinding().makeJmsMessage(exchange, session);
1:             return message;
1:         }
0:         else {
1:             return null;
1:         }
1:     }
1: 
1:     protected Consumer createConsumer() throws JMSException {
1:         try {
1:             Consumer answer = endpoint.createConsumer(new Processor() {
1:                 public void process(Exchange exchange) throws Exception {
1:                     Message message = createMessage(exchange);
1:                     getMessageListener().onMessage(message);
1:                 }
1:             });
1:             answer.start();
1:             return answer;
1:         }
0:         catch (JMSException e) {
1:             throw e;
1:         }
0:         catch (Exception e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     protected void checkClosed() throws javax.jms.IllegalStateException {
1:         if (closed) {
1:             throw new IllegalStateException("The producer is closed");
1:         }
1:     }
1: }
============================================================================