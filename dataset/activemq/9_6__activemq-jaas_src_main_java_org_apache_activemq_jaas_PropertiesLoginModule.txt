1:1559808: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:1559808:  */
1:a107823: package org.apache.activemq.jaas;
14:a107823: 
1:a107823: import java.io.IOException;
1:540dd5c: import java.security.Principal;
1:a107823: import java.util.HashSet;
1:a107823: import java.util.Map;
1:59cd018: import java.util.Properties;
1:a107823: import java.util.Set;
1:a107823: 
1:a107823: import javax.security.auth.Subject;
1:a107823: import javax.security.auth.callback.Callback;
1:a107823: import javax.security.auth.callback.CallbackHandler;
1:a107823: import javax.security.auth.callback.NameCallback;
1:a107823: import javax.security.auth.callback.PasswordCallback;
1:a107823: import javax.security.auth.callback.UnsupportedCallbackException;
1:a107823: import javax.security.auth.login.FailedLoginException;
1:540dd5c: import javax.security.auth.login.LoginException;
1:a107823: import javax.security.auth.spi.LoginModule;
1:a107823: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a107823: 
1:59cd018: public class PropertiesLoginModule extends PropertiesLoader implements LoginModule {
1:a107823: 
1:59cd018:     private static final String USER_FILE_PROP_NAME = "org.apache.activemq.jaas.properties.user";
1:59cd018:     private static final String GROUP_FILE_PROP_NAME = "org.apache.activemq.jaas.properties.group";
1:a107823: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PropertiesLoginModule.class);
1:a107823: 
1:a107823:     private Subject subject;
1:a107823:     private CallbackHandler callbackHandler;
1:a107823: 
1:59cd018:     private Properties users;
1:8d63083:     private Map<String,Set<String>> groups;
1:a107823:     private String user;
1:1559808:     private final Set<Principal> principals = new HashSet<Principal>();
1:6f68a94:     private boolean loginSucceeded;
1:d3676e4: 
1:1667d80:     @Override
1:a107823:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:a107823:         this.subject = subject;
1:a107823:         this.callbackHandler = callbackHandler;
1:6f68a94:         loginSucceeded = false;
1:59cd018:         init(options);
1:59cd018:         users = load(USER_FILE_PROP_NAME, "user", options).getProps();
1:8d63083:         groups = load(GROUP_FILE_PROP_NAME, "group", options).invertedPropertiesValuesMap();
1:4ab47eb:     }
1:4ab47eb: 
1:1667d80:     @Override
1:a107823:     public boolean login() throws LoginException {
1:a107823:         Callback[] callbacks = new Callback[2];
1:4ab47eb: 
1:a107823:         callbacks[0] = new NameCallback("Username: ");
1:a107823:         callbacks[1] = new PasswordCallback("Password: ", false);
1:bc47020:         try {
1:a107823:             callbackHandler.handle(callbacks);
2:d3676e4:         } catch (IOException ioe) {
1:a107823:             throw new LoginException(ioe.getMessage());
1:a107823:         } catch (UnsupportedCallbackException uce) {
1:a107823:             throw new LoginException(uce.getMessage() + " not available to obtain information from user");
1:bc47020:         }
1:1559808:         user = ((NameCallback) callbacks[0]).getName();
1:1559808:         char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
1:540dd5c:         if (tmpPassword == null) {
1:540dd5c:             tmpPassword = new char[0];
1:bc47020:         }
1:4ab47eb:         if (user == null) {
1:4ab47eb:             throw new FailedLoginException("user name is null");
1:4ab47eb:         }
1:a107823:         String password = users.getProperty(user);
1:a107823: 
1:540dd5c:         if (password == null) {
1:540dd5c:             throw new FailedLoginException("User does exist");
1:d3676e4:         }
1:540dd5c:         if (!password.equals(new String(tmpPassword))) {
1:540dd5c:             throw new FailedLoginException("Password does not match");
1:d3676e4:         }
1:6f68a94:         loginSucceeded = true;
1:a107823: 
1:4ab47eb:         if (debug) {
1:540dd5c:             LOG.debug("login " + user);
1:4ab47eb:         }
1:6f68a94:         return loginSucceeded;
1:a345cd3:     }
1:a345cd3: 
1:1667d80:     @Override
1:a107823:     public boolean commit() throws LoginException {
1:6f68a94:         boolean result = loginSucceeded;
1:6f68a94:         if (result) {
1:6f68a94:             principals.add(new UserPrincipal(user));
1:6f68a94: 
1:8d63083:             Set<String> matchedGroups = groups.get(user);
1:8d63083:             if (matchedGroups != null) {
1:8d63083:                 for (String entry : matchedGroups) {
1:8d63083:                     principals.add(new GroupPrincipal(entry));
1:6f68a94:                 }
1:a345cd3:             }
1:a107823: 
1:6f68a94:             subject.getPrincipals().addAll(principals);
1:d3676e4:         }
1:a107823: 
1:6f68a94:         // will whack loginSucceeded
1:a107823:         clear();
1:a107823: 
1:a345cd3:         if (debug) {
1:6f68a94:             LOG.debug("commit, result: " + result);
1:d3676e4:         }
1:6f68a94:         return result;
1:d3676e4:     }
1:a107823: 
1:1667d80:     @Override
1:a107823:     public boolean abort() throws LoginException {
1:a107823:         clear();
1:a107823: 
1:a345cd3:         if (debug) {
1:540dd5c:             LOG.debug("abort");
1:d3676e4:         }
3:a107823:         return true;
1:d3676e4:     }
1:a107823: 
1:1667d80:     @Override
1:a107823:     public boolean logout() throws LoginException {
1:a107823:         subject.getPrincipals().removeAll(principals);
1:a107823:         principals.clear();
1:6f68a94:         clear();
3:d3676e4:         if (debug) {
1:540dd5c:             LOG.debug("logout");
1:d3676e4:         }
1:a107823:         return true;
1:d3676e4:     }
1:a107823: 
1:a107823:     private void clear() {
1:a107823:         user = null;
1:6f68a94:         loginSucceeded = false;
1:1559808:     }
1:1559808: 
3:540dd5c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8d63083
/////////////////////////////////////////////////////////////////////////
1:     private Map<String,Set<String>> groups;
/////////////////////////////////////////////////////////////////////////
1:         groups = load(GROUP_FILE_PROP_NAME, "group", options).invertedPropertiesValuesMap();
/////////////////////////////////////////////////////////////////////////
1:             Set<String> matchedGroups = groups.get(user);
1:             if (matchedGroups != null) {
1:                 for (String entry : matchedGroups) {
1:                     principals.add(new GroupPrincipal(entry));
commit:59cd018
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1: public class PropertiesLoginModule extends PropertiesLoader implements LoginModule {
1:     private static final String USER_FILE_PROP_NAME = "org.apache.activemq.jaas.properties.user";
1:     private static final String GROUP_FILE_PROP_NAME = "org.apache.activemq.jaas.properties.group";
1:     private Properties users;
0:     private Properties groups;
1:         init(options);
1:         users = load(USER_FILE_PROP_NAME, "user", options).getProps();
0:         groups = load(GROUP_FILE_PROP_NAME, "group", options).getProps();
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<Object, Object> entry : groups.entrySet()) {
0:                 String name = (String) entry.getKey();
0:                 String[] userList = ((String)entry.getValue()).split(",");
/////////////////////////////////////////////////////////////////////////
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bc47020
/////////////////////////////////////////////////////////////////////////
0:     private boolean decrypt = true;
/////////////////////////////////////////////////////////////////////////
0:             if( decrypt ) {
1:                 try {
0:                     EncryptionSupport.decrypt(users.getPrincipals());
0:                 } catch(NoClassDefFoundError e) {
0:                     // this Happens whe jasypt is not on the classpath..
0:                     decrypt = false;
0:                     LOG.info("jasypt is not on the classpath: password decryption disabled.");
1:                 }
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1559808
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static volatile PrincipalProperties users;
0:     private static volatile PrincipalProperties groups;
1:     private final Set<Principal> principals = new HashSet<Principal>();
/////////////////////////////////////////////////////////////////////////
0:         debug = "true".equalsIgnoreCase((String) options.get("debug"));
0:             reload = "true".equalsIgnoreCase((String) options.get("reload"));
0:             baseDir = new File((String) options.get("baseDir"));
0:         String usersFile = (String) options.get(USER_FILE) + "";
0:         if (reload || users == null || uf.lastModified() > users.getReloadTime()) {
0:             users = new PrincipalProperties("user", uf, LOG);
0:         String groupsFile = (String) options.get(GROUP_FILE) + "";
0:         if (reload || groups == null || gf.lastModified() > groups.getReloadTime()) {
0:             groups = new PrincipalProperties("group", gf, LOG);
/////////////////////////////////////////////////////////////////////////
1:         user = ((NameCallback) callbacks[0]).getName();
1:         char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
/////////////////////////////////////////////////////////////////////////
0:             for (Map.Entry<String, String> entry : groups.entries()) {
0:                 String name = entry.getKey();
0:                 String[] userList = entry.getValue().split(",");
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * For test-usage only.
1:      */
0:     static void resetUsersAndGroupsCache() {
0:         users = null;
0:         groups = null;
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:1667d80
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
0:             for (Enumeration<?> enumeration = groups.keys(); enumeration.hasMoreElements();) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:4ab47eb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (options.get("baseDir") != null) {
0:             baseDir = new File((String)options.get("baseDir"));
1:         }
1: 
0:         File uf = baseDir != null ? new File(baseDir, usersFile) : new File(usersFile);
1: 
0:                 LOG.debug("Reloading users from " + uf.getAbsolutePath());
/////////////////////////////////////////////////////////////////////////
0:         File gf = baseDir != null ? new File(baseDir, groupsFile) : new File(groupsFile);
0:                 LOG.debug("Reloading groups from " + gf.getAbsolutePath());
/////////////////////////////////////////////////////////////////////////
1:                 if (debug) {
0:                     LOG.debug("Using basedir=" + baseDir.getAbsolutePath());
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         if (user == null) {
1:             throw new FailedLoginException("user name is null");
1:         }
commit:6f68a94
/////////////////////////////////////////////////////////////////////////
1:     private boolean loginSucceeded;
1:         loginSucceeded = false;
/////////////////////////////////////////////////////////////////////////
1:         loginSucceeded = true;
1:         return loginSucceeded;
1:         boolean result = loginSucceeded;
1:         if (result) {
1:             principals.add(new UserPrincipal(user));
0:             for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
0:                 String name = (String)enumeration.nextElement();
0:                 String[] userList = ((String)groups.getProperty(name) + "").split(",");
0:                 for (int i = 0; i < userList.length; i++) {
0:                     if (user.equals(userList[i])) {
0:                         principals.add(new GroupPrincipal(name));
0:                         break;
1:                     }
1: 
1:             subject.getPrincipals().addAll(principals);
1:         // will whack loginSucceeded
1:             LOG.debug("commit, result: " + result);
1:         return result;
/////////////////////////////////////////////////////////////////////////
1:         clear();
/////////////////////////////////////////////////////////////////////////
1:         loginSucceeded = false;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a345cd3
/////////////////////////////////////////////////////////////////////////
0:     private boolean reload = false;
0:     private static long usersReloadTime = 0;
0:     private static long groupsReloadTime = 0;
/////////////////////////////////////////////////////////////////////////
0:         setBaseDir();
0:         usersFile = (String) options.get(USER_FILE) + "";
0:         File uf = new File(baseDir, usersFile);
0:         if (reload || users == null || uf.lastModified() > usersReloadTime) {
1:             if (debug) {
0:                 LOG.debug("Reloading users from " + usersFile);
1:             }
0:                 usersReloadTime = System.currentTimeMillis();
1: 
0:         groupsFile = (String) options.get(GROUP_FILE) + "";
0:         File gf = new File(baseDir, groupsFile);
0:         if (reload || groups == null || gf.lastModified() > groupsReloadTime) {
1:             if (debug) {
0:                 LOG.debug("Reloading groups from " + groupsFile);
1:             }
0:                 groupsReloadTime = System.currentTimeMillis();
commit:d3676e4
/////////////////////////////////////////////////////////////////////////
0:     private boolean reload = true;
0:     private static String usersFile;
0:     private static String groupsFile;
0:     private static Properties users;
0:     private static Properties groups;
1: 
0:         debug = "true".equalsIgnoreCase((String)options.get("debug"));
0:         if (options.get("reload") != null) {
0:             reload = "true".equalsIgnoreCase((String)options.get("reload"));
0:         if (reload || users == null) {
0:             setBaseDir();
0:             usersFile = (String)options.get(USER_FILE) + "";
0:             File uf = new File(baseDir, usersFile);
0:             try {
0:                 users = new Properties();
0:                 java.io.FileInputStream in = new java.io.FileInputStream(uf);
0:                 users.load(in);
0:                 in.close();
1:             } catch (IOException ioe) {
0:                 LOG.warn("Unable to load user properties file " + uf);
1:             }
1:             if (debug) {
0:                 LOG.debug("Using usersFile=" + usersFile);
1:             }
1:         }
0:         if (reload || groups == null) {
0:             setBaseDir();
0:             groupsFile = (String)options.get(GROUP_FILE) + "";
0:             File gf = new File(baseDir, groupsFile);
0:             try {
0:                 groups = new Properties();
0:                 java.io.FileInputStream in = new java.io.FileInputStream(gf);
0:                 groups.load(in);
0:                 in.close();
1:             } catch (IOException ioe) {
0:                 LOG.warn("Unable to load group properties file " + gf);
1:             }
1:             if (debug) {
0:                 LOG.debug("Using groupsFile=" + groupsFile);
1:             }
1:         }
1:     }
0:     private void setBaseDir() {
0:         if (baseDir == null) {
0:             if (System.getProperty("java.security.auth.login.config") != null) {
0:                 baseDir = new File(System.getProperty("java.security.auth.login.config")).getParentFile();
0:             } else {
0:                 baseDir = new File(".");
1:             }
1:             if (debug) {
0:                 LOG.debug("Using basedir=" + baseDir);
1:             }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(PropertiesLoginModule.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
1: import javax.security.auth.login.LoginException;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(PropertiesLoginModule.class);
/////////////////////////////////////////////////////////////////////////
0:     private Set<Principal> principals = new HashSet<Principal>();
0:         if (System.getProperty("java.security.auth.login.config") != null) {
0:             baseDir = new File(System.getProperty("java.security.auth.login.config")).getParentFile();
0:         debug = "true".equalsIgnoreCase((String)options.get("debug"));
0:         usersFile = (String)options.get(USER_FILE) + "";
0:         groupsFile = (String)options.get(GROUP_FILE) + "";
0:             LOG.debug("Initialized debug=" + debug + " usersFile=" + usersFile + " groupsFile=" + groupsFile + " basedir=" + baseDir);
0:         File f = new File(baseDir, usersFile);
0:             java.io.FileInputStream in = new java.io.FileInputStream(f);
/////////////////////////////////////////////////////////////////////////
0:             java.io.FileInputStream in = new java.io.FileInputStream(f);
/////////////////////////////////////////////////////////////////////////
0:         user = ((NameCallback)callbacks[0]).getName();
0:         char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
1:         if (tmpPassword == null) {
1:             tmpPassword = new char[0];
1:         }
1:         if (password == null) {
1:             throw new FailedLoginException("User does exist");
1:         }
1:         if (!password.equals(new String(tmpPassword))) {
1:             throw new FailedLoginException("Password does not match");
1:         }
1:             LOG.debug("login " + user);
/////////////////////////////////////////////////////////////////////////
0:             String name = (String)enumeration.nextElement();
0:             String[] userList = ((String)groups.getProperty(name) + "").split(",");
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("commit");
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("abort");
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("logout");
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:25a5063
/////////////////////////////////////////////////////////////////////////
commit:a107823
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.jaas;
1: 
0: import java.io.File;
1: import java.io.IOException;
0: import java.util.Enumeration;
1: import java.util.HashSet;
1: import java.util.Map;
0: import java.util.Properties;
1: import java.util.Set;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.Callback;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.callback.NameCallback;
1: import javax.security.auth.callback.PasswordCallback;
1: import javax.security.auth.callback.UnsupportedCallbackException;
0: import javax.security.auth.login.LoginException;
1: import javax.security.auth.login.FailedLoginException;
1: import javax.security.auth.spi.LoginModule;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
0: /**
0:  * @version $Rev: $ $Date: $
0:  */
0: public class PropertiesLoginModule implements LoginModule {
1: 
0:     private final String USER_FILE = "org.apache.activemq.jaas.properties.user";
0:     private final String GROUP_FILE = "org.apache.activemq.jaas.properties.group";
1: 
0:     private static final Log log = LogFactory.getLog(PropertiesLoginModule.class);
1: 
1:     private Subject subject;
1:     private CallbackHandler callbackHandler;
1: 
0:     private boolean debug;
0:     private String usersFile;
0:     private String groupsFile;
0:     private Properties users = new Properties();
0:     private Properties groups = new Properties();
1:     private String user;
0:     private Set principals = new HashSet();
0:     private File baseDir;
1: 
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:         this.subject = subject;
1:         this.callbackHandler = callbackHandler;
1: 
0:         if( System.getProperty("java.security.auth.login.config")!=null ) {
0:             baseDir=new File(System.getProperty("java.security.auth.login.config")).getParentFile();
0:         } else {
0:             baseDir = new File(".");
0:         }
0:         System.out.println("setting based dir="+baseDir);
1: 
0:         debug = "true".equalsIgnoreCase((String) options.get("debug"));
0:         usersFile = (String) options.get(USER_FILE)+"";
0:         groupsFile = (String) options.get(GROUP_FILE)+"";
1: 
0:         if (debug) {
0:             log.debug("Initialized debug=" + debug + " usersFile=" + usersFile + " groupsFile=" + groupsFile+" basedir="+baseDir);
0:         }
0:     }
1: 
1:     public boolean login() throws LoginException {
0:         File f = new File(baseDir,usersFile);
0:         try {
0:             users.load(new java.io.FileInputStream(f));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load user properties file " + f);
0:         }
0:         f = new File(baseDir, groupsFile);
0:         try {
0:             groups.load(new java.io.FileInputStream(f));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load group properties file " + f);
0:         }
1: 
1:         Callback[] callbacks = new Callback[2];
1: 
1:         callbacks[0] = new NameCallback("Username: ");
1:         callbacks[1] = new PasswordCallback("Password: ", false);
0:         try {
1:             callbackHandler.handle(callbacks);
0:         } catch (IOException ioe) {
1:             throw new LoginException(ioe.getMessage());
1:         } catch (UnsupportedCallbackException uce) {
1:             throw new LoginException(uce.getMessage() + " not available to obtain information from user");
0:         }
0:         user = ((NameCallback) callbacks[0]).getName();
0:         char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
0:         if (tmpPassword == null) tmpPassword = new char[0];
1: 
1:         String password = users.getProperty(user);
1: 
0:         if (password == null) throw new FailedLoginException("User does exist");
0:         if (!password.equals(new String(tmpPassword))) throw new FailedLoginException("Password does not match");
1: 
0:         users.clear();
1: 
0:         if (debug) {
0:             log.debug("login " + user);
0:         }
1:         return true;
0:     }
1: 
1:     public boolean commit() throws LoginException {
0:         principals.add(new UserPrincipal(user));
1: 
0:         for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
0:             String name = (String) enumeration.nextElement();
0:             String[] userList = ((String) groups.getProperty(name) + "").split(",");
0:             for (int i = 0; i < userList.length; i++) {
0:                 if (user.equals(userList[i])) {
0:                     principals.add(new GroupPrincipal(name));
0:                     break;
0:                 }
0:             }
0:         }
1: 
0:         subject.getPrincipals().addAll(principals);
1: 
1:         clear();
1: 
0:         if (debug) {
0:             log.debug("commit");
0:         }
1:         return true;
0:     }
1: 
1:     public boolean abort() throws LoginException {
1:         clear();
1: 
0:         if (debug) {
0:             log.debug("abort");
0:         }
1:         return true;
0:     }
1: 
1:     public boolean logout() throws LoginException {
1:         subject.getPrincipals().removeAll(principals);
1:         principals.clear();
1: 
0:         if (debug) {
0:             log.debug("logout");
0:         }
1:         return true;
0:     }
1: 
1:     private void clear() {
0:         groups.clear();
1:         user = null;
0:     }
0: }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:2d0361b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.jaas;
/////////////////////////////////////////////////////////////////////////
0:     private final String USER_FILE = "org.apache.activemq.jaas.properties.user";
0:     private final String GROUP_FILE = "org.apache.activemq.jaas.properties.group";
author:Robert Davies
-------------------------------------------------------------------------------
commit:b266786
/////////////////////////////////////////////////////////////////////////
0:     private static final String USER_FILE = "org.apache.activemq.jaas.properties.user";
0:     private static final String GROUP_FILE = "org.apache.activemq.jaas.properties.group";
/////////////////////////////////////////////////////////////////////////
0:         	java.io.FileInputStream in = new java.io.FileInputStream(f);
0:             users.load(in);
0:             in.close();
0:         	java.io.FileInputStream in = new java.io.FileInputStream(f);
0:             groups.load(in);
0:             in.close();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0:  *
0:  * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.activemq.jaas;
0: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.Enumeration;
0: import java.util.HashSet;
0: import java.util.Map;
0: import java.util.Properties;
0: import java.util.Set;
0: 
0: import javax.security.auth.Subject;
0: import javax.security.auth.callback.Callback;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.callback.NameCallback;
0: import javax.security.auth.callback.PasswordCallback;
0: import javax.security.auth.callback.UnsupportedCallbackException;
0: import javax.security.auth.login.LoginException;
0: import javax.security.auth.login.FailedLoginException;
0: import javax.security.auth.spi.LoginModule;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
0: /**
0:  * @version $Rev: $ $Date: $
0:  */
0: public class PropertiesLoginModule implements LoginModule {
0: 
0:     private final String USER_FILE = "org.activemq.jaas.properties.user";
0:     private final String GROUP_FILE = "org.activemq.jaas.properties.group";
0: 
0:     private static final Log log = LogFactory.getLog(PropertiesLoginModule.class);
0: 
0:     private Subject subject;
0:     private CallbackHandler callbackHandler;
0: 
0:     private boolean debug;
0:     private String usersFile;
0:     private String groupsFile;
0:     private Properties users = new Properties();
0:     private Properties groups = new Properties();
0:     private String user;
0:     private Set principals = new HashSet();
0:     private File baseDir;
0: 
0:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
0:         this.subject = subject;
0:         this.callbackHandler = callbackHandler;
0: 
0:         if( System.getProperty("java.security.auth.login.config")!=null ) {
0:             baseDir=new File(System.getProperty("java.security.auth.login.config")).getParentFile();
0:         } else {
0:             baseDir = new File(".");
0:         }
0:         System.out.println("setting based dir="+baseDir);
0: 
0:         debug = "true".equalsIgnoreCase((String) options.get("debug"));
0:         usersFile = (String) options.get(USER_FILE)+"";
0:         groupsFile = (String) options.get(GROUP_FILE)+"";
0: 
0:         if (debug) {
0:             log.debug("Initialized debug=" + debug + " usersFile=" + usersFile + " groupsFile=" + groupsFile+" basedir="+baseDir);
0:         }
0:     }
0: 
0:     public boolean login() throws LoginException {
0:         File f = new File(baseDir,usersFile);
0:         try {
0:             users.load(new java.io.FileInputStream(f));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load user properties file " + f);
0:         }
0:         f = new File(baseDir, groupsFile);
0:         try {
0:             groups.load(new java.io.FileInputStream(f));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load group properties file " + f);
0:         }
0: 
0:         Callback[] callbacks = new Callback[2];
0: 
0:         callbacks[0] = new NameCallback("Username: ");
0:         callbacks[1] = new PasswordCallback("Password: ", false);
0:         try {
0:             callbackHandler.handle(callbacks);
0:         } catch (IOException ioe) {
0:             throw new LoginException(ioe.getMessage());
0:         } catch (UnsupportedCallbackException uce) {
0:             throw new LoginException(uce.getMessage() + " not available to obtain information from user");
0:         }
0:         user = ((NameCallback) callbacks[0]).getName();
0:         char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
0:         if (tmpPassword == null) tmpPassword = new char[0];
0: 
0:         String password = users.getProperty(user);
0: 
0:         if (password == null) throw new FailedLoginException("User does exist");
0:         if (!password.equals(new String(tmpPassword))) throw new FailedLoginException("Password does not match");
0: 
0:         users.clear();
0: 
0:         if (debug) {
0:             log.debug("login " + user);
0:         }
0:         return true;
0:     }
0: 
0:     public boolean commit() throws LoginException {
0:         principals.add(new UserPrincipal(user));
0: 
0:         for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
0:             String name = (String) enumeration.nextElement();
0:             String[] userList = ((String) groups.getProperty(name) + "").split(",");
0:             for (int i = 0; i < userList.length; i++) {
0:                 if (user.equals(userList[i])) {
0:                     principals.add(new GroupPrincipal(name));
0:                     break;
0:                 }
0:             }
0:         }
0: 
0:         subject.getPrincipals().addAll(principals);
0: 
0:         clear();
0: 
0:         if (debug) {
0:             log.debug("commit");
0:         }
0:         return true;
0:     }
0: 
0:     public boolean abort() throws LoginException {
0:         clear();
0: 
0:         if (debug) {
0:             log.debug("abort");
0:         }
0:         return true;
0:     }
0: 
0:     public boolean logout() throws LoginException {
0:         subject.getPrincipals().removeAll(principals);
0:         principals.clear();
0: 
0:         if (debug) {
0:             log.debug("logout");
0:         }
0:         return true;
0:     }
0: 
0:     private void clear() {
0:         groups.clear();
0:         user = null;
0:     }
0: }
============================================================================