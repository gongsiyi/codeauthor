1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
5:d29ca2a: 
1:86cbdfd: import java.util.concurrent.atomic.AtomicLong;
1:6d8e2c5: import org.apache.activemq.usage.MemoryUsage;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Simple CacheFilter that increases/decreases usage on a UsageManager as
1:d29ca2a:  * objects are added/removed from the Cache.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class UsageManagerCacheFilter extends CacheFilter {
1:d29ca2a: 
1:d29ca2a:     private final AtomicLong totalUsage = new AtomicLong(0);
1:6d8e2c5:     private final MemoryUsage usage;
1:d29ca2a: 
1:6d8e2c5:     public UsageManagerCacheFilter(Cache next, MemoryUsage um) {
1:d29ca2a:         super(next);
1:6d8e2c5:         this.usage = um;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object put(Object key, Object value) {
1:6d8e2c5:         long usageValue = getUsageOfAddedObject(value);
1:d29ca2a:         Object rc = super.put(key, value);
1:f812e34:         if (rc != null) {
1:6d8e2c5:             usageValue -= getUsageOfRemovedObject(rc);
1:d29ca2a:         }
1:6d8e2c5:         totalUsage.addAndGet(usageValue);
1:6d8e2c5:         usage.increaseUsage(usageValue);
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public Object remove(Object key) {
1:d29ca2a:         Object rc = super.remove(key);
1:f812e34:         if (rc != null) {
1:6d8e2c5:             long usageValue = getUsageOfRemovedObject(rc);
1:6d8e2c5:             totalUsage.addAndGet(-usageValue);
1:6d8e2c5:             usage.decreaseUsage(usageValue);
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected long getUsageOfAddedObject(Object value) {
1:d29ca2a:         return 1;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected long getUsageOfRemovedObject(Object value) {
1:d29ca2a:         return 1;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void close() {
1:6d8e2c5:         usage.decreaseUsage(totalUsage.get());
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         if (rc != null) {
1: 
1:         if (rc != null) {
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicLong;
1: 
1: /**
1:  * Simple CacheFilter that increases/decreases usage on a UsageManager as
1:  * objects are added/removed from the Cache.
1:  * 
0:  * @version $Revision$
1:  */
1: public class UsageManagerCacheFilter extends CacheFilter {
1: 
1:     private final AtomicLong totalUsage = new AtomicLong(0);
0:     private final UsageManager um;
1: 
0:     public UsageManagerCacheFilter(Cache next, UsageManager um) {
1:         super(next);
0:         this.um = um;
1:     }
1: 
1:     public Object put(Object key, Object value) {
0:         long usage = getUsageOfAddedObject(value);
1:         Object rc = super.put(key, value);
0:         if( rc !=null ) {
0:             usage -= getUsageOfRemovedObject(rc);
1:         }
0:         totalUsage.addAndGet(usage);
0:         um.increaseUsage(usage);
1:         return rc;
1:     }
1:     
1:     public Object remove(Object key) {
1:         Object rc = super.remove(key);
0:         if( rc !=null ) {
0:             long usage = getUsageOfRemovedObject(rc);
0:             totalUsage.addAndGet(-usage);
0:             um.decreaseUsage(usage);
1:         }
1:         return rc;
1:     }
1:     
1:     
1:     protected long getUsageOfAddedObject(Object value) {
1:         return 1;
1:     }
1:     
1:     protected long getUsageOfRemovedObject(Object value) {
1:         return 1;
1:     }
1: 
1:     public void close() {
0:         um.decreaseUsage(totalUsage.get());
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.MemoryUsage;
/////////////////////////////////////////////////////////////////////////
1:     private final MemoryUsage usage;
1:     public UsageManagerCacheFilter(Cache next, MemoryUsage um) {
1:         this.usage = um;
1:         long usageValue = getUsageOfAddedObject(value);
1:             usageValue -= getUsageOfRemovedObject(rc);
1:         totalUsage.addAndGet(usageValue);
1:         usage.increaseUsage(usageValue);
1:             long usageValue = getUsageOfRemovedObject(rc);
1:             totalUsage.addAndGet(-usageValue);
1:             usage.decreaseUsage(usageValue);
/////////////////////////////////////////////////////////////////////////
1:         usage.decreaseUsage(totalUsage.get());
============================================================================