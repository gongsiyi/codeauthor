1:999dc0d: /**
1:999dc0d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:999dc0d:  * contributor license agreements.  See the NOTICE file distributed with
1:999dc0d:  * this work for additional information regarding copyright ownership.
1:999dc0d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:999dc0d:  * (the "License"); you may not use this file except in compliance with
1:999dc0d:  * the License.  You may obtain a copy of the License at
1:999dc0d:  *
1:999dc0d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:999dc0d:  *
1:999dc0d:  * Unless required by applicable law or agreed to in writing, software
1:999dc0d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:999dc0d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:999dc0d:  * See the License for the specific language governing permissions and
1:999dc0d:  * limitations under the License.
1:999dc0d:  */
1:999dc0d: package org.apache.activemq.broker.jmx;
1:999dc0d: 
1:999dc0d: import static org.junit.Assert.*;
1:999dc0d: 
1:999dc0d: import java.io.File;
1:999dc0d: import java.util.NoSuchElementException;
1:999dc0d: import java.util.concurrent.CountDownLatch;
1:999dc0d: 
1:999dc0d: import org.apache.activemq.broker.BrokerService;
1:999dc0d: import org.apache.activemq.store.kahadb.KahaDBStore;
1:999dc0d: import org.apache.activemq.util.Wait;
1:999dc0d: import org.junit.After;
1:999dc0d: import org.junit.Before;
1:999dc0d: import org.junit.Test;
1:999dc0d: import org.slf4j.Logger;
1:999dc0d: import org.slf4j.LoggerFactory;
1:999dc0d: 
1:999dc0d: /**
1:999dc0d:  * Used to verify that the BrokerView accessed while the BrokerSerivce is waiting
1:999dc0d:  * for a Slow Store startup to complete doesn't throw unexpected NullPointerExceptions.
1:999dc0d:  */
1:999dc0d: public class BrokerViewSlowStoreStartupTest {
1:999dc0d: 
1:999dc0d:     private static final Logger LOG = LoggerFactory.getLogger(BrokerViewSlowStoreStartupTest.class);
1:999dc0d: 
1:999dc0d:     private final CountDownLatch holdStoreStart = new CountDownLatch(1);
1:999dc0d:     private final String brokerName = "brokerViewTest";
1:999dc0d: 
1:999dc0d:     private BrokerService broker;
1:999dc0d:     private Thread startThread;
1:999dc0d: 
1:999dc0d:     private BrokerService createBroker() throws Exception {
1:999dc0d:         BrokerService broker = new BrokerService();
1:999dc0d:         broker.setBrokerName(brokerName);
1:999dc0d: 
1:999dc0d:         KahaDBStore kaha = new KahaDBStore() {
1:999dc0d: 
1:999dc0d:             @Override
1:999dc0d:             public void start() throws Exception {
1:999dc0d:                 LOG.info("Test KahaDB class is waiting for signal to complete its start()");
1:999dc0d:                 holdStoreStart.await();
1:999dc0d:                 super.start();
1:999dc0d:                 LOG.info("Test KahaDB class is completed its start()");
1:999dc0d:             }
1:999dc0d:         };
1:999dc0d: 
1:999dc0d:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:999dc0d:         kaha.deleteAllMessages();
1:999dc0d: 
1:999dc0d:         broker.setPersistenceAdapter(kaha);
1:999dc0d:         broker.setUseJmx(true);
1:999dc0d: 
1:999dc0d:         return broker;
1:999dc0d:     }
1:999dc0d: 
1:999dc0d:     @Before
1:999dc0d:     public void setUp() throws Exception {
1:999dc0d:         broker = createBroker();
1:999dc0d: 
1:999dc0d:         startThread = new Thread(new Runnable() {
1:999dc0d: 
1:999dc0d:             @Override
1:999dc0d:             public void run() {
1:999dc0d:                 try {
1:999dc0d:                     broker.start();
1:999dc0d:                 } catch(Exception e) {
1:f609c50:                     e.printStackTrace();
1:999dc0d:                 }
1:999dc0d:             }
1:999dc0d:         });
1:999dc0d:         startThread.start();
1:999dc0d:     }
1:999dc0d: 
1:999dc0d:     @After
1:999dc0d:     public void tearDown() throws Exception {
1:999dc0d: 
1:999dc0d:         // ensure we don't keep the broker held if an exception occurs somewhere.
1:999dc0d:         holdStoreStart.countDown();
1:999dc0d: 
1:999dc0d:         startThread.join();
1:999dc0d: 
1:999dc0d:         if (broker != null) {
1:999dc0d:             broker.stop();
1:999dc0d:             broker.waitUntilStopped();
1:999dc0d:         }
1:999dc0d:     }
1:999dc0d: 
1:999dc0d:     @Test(timeout=120000)
1:999dc0d:     public void testBrokerViewOnSlowStoreStart() throws Exception {
1:999dc0d: 
1:999dc0d:         // Ensure we have an Admin View.
1:999dc0d:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:999dc0d:             @Override
1:999dc0d:             public boolean isSatisified() throws Exception {
1:999dc0d:                 return (broker.getAdminView()) != null;
1:999dc0d:             }
1:999dc0d:         }));
1:999dc0d: 
1:f609c50:         final BrokerView view = broker.getAdminView();
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getBrokerName();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getBrokerId();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalEnqueueCount();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalDequeueCount();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalConsumerCount();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalProducerCount();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalMessageCount();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalMessagesCached();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.resetStatistics();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.enableStatistics();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.disableStatistics();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.isStatisticsEnabled();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTopics();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getQueues();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryTopics();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryQueues();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTopicSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getDurableTopicSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getQueueSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryTopicSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryQueueSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getInactiveDurableTopicSubscribers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTopicProducers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getQueueProducers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryTopicProducers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTemporaryQueueProducers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getDynamicDestinationProducers();
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.removeConnector("tcp");
1:999dc0d:             fail("Should have thrown an NoSuchElementException");
1:999dc0d:         } catch(NoSuchElementException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.removeNetworkConnector("tcp");
1:999dc0d:             fail("Should have thrown an NoSuchElementException");
1:999dc0d:         } catch(NoSuchElementException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.addTopic("TEST");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.addQueue("TEST");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.removeTopic("TEST");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.removeQueue("TEST");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.createDurableSubscriber("1", "2", "3","4");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.destroyDurableSubscriber("1", "2");
1:999dc0d:             fail("Should have thrown an IllegalStateException");
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         holdStoreStart.countDown();
1:999dc0d:         startThread.join();
1:999dc0d: 
1:f609c50:         Wait.waitFor(new Wait.Condition() {
1:f609c50:             @Override
1:f609c50:             public boolean isSatisified() throws Exception {
1:f609c50:                 return view.getBroker() != null;
1:f609c50:             }
1:f609c50:         });
1:999dc0d:         assertNotNull(view.getBroker());
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getBrokerName();
1:999dc0d:         } catch(Exception e) {
1:999dc0d:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getBrokerId();
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:999dc0d:         }
1:999dc0d: 
1:999dc0d:         try {
1:999dc0d:             view.getTotalEnqueueCount();
1:999dc0d:         } catch(IllegalStateException e) {
1:999dc0d:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:999dc0d:         }
1:999dc0d:     }
1:999dc0d: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f609c50
/////////////////////////////////////////////////////////////////////////
1:                     e.printStackTrace();
/////////////////////////////////////////////////////////////////////////
1:         final BrokerView view = broker.getAdminView();
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getBroker() != null;
1:             }
1:         });
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:999dc0d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.File;
1: import java.util.NoSuchElementException;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Used to verify that the BrokerView accessed while the BrokerSerivce is waiting
1:  * for a Slow Store startup to complete doesn't throw unexpected NullPointerExceptions.
1:  */
1: public class BrokerViewSlowStoreStartupTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(BrokerViewSlowStoreStartupTest.class);
1: 
1:     private final CountDownLatch holdStoreStart = new CountDownLatch(1);
1:     private final String brokerName = "brokerViewTest";
1: 
1:     private BrokerService broker;
1:     private Thread startThread;
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1: 
1:         KahaDBStore kaha = new KahaDBStore() {
1: 
1:             @Override
1:             public void start() throws Exception {
1:                 LOG.info("Test KahaDB class is waiting for signal to complete its start()");
1:                 holdStoreStart.await();
1:                 super.start();
1:                 LOG.info("Test KahaDB class is completed its start()");
1:             }
1:         };
1: 
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         kaha.deleteAllMessages();
1: 
1:         broker.setPersistenceAdapter(kaha);
1:         broker.setUseJmx(true);
1: 
1:         return broker;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1: 
1:         startThread = new Thread(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     broker.start();
1:                 } catch(Exception e) {
1:                 }
1:             }
1:         });
1:         startThread.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:         // ensure we don't keep the broker held if an exception occurs somewhere.
1:         holdStoreStart.countDown();
1: 
1:         startThread.join();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout=120000)
1:     public void testBrokerViewOnSlowStoreStart() throws Exception {
1: 
1:         // Ensure we have an Admin View.
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return (broker.getAdminView()) != null;
1:             }
1:         }));
1: 
0:         BrokerView view = broker.getAdminView();
1: 
1:         try {
1:             view.getBrokerName();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getBrokerId();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalEnqueueCount();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalDequeueCount();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalConsumerCount();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalProducerCount();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalMessageCount();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTotalMessagesCached();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.resetStatistics();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.enableStatistics();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.disableStatistics();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.isStatisticsEnabled();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTopics();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getQueues();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryTopics();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryQueues();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTopicSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getDurableTopicSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getQueueSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryTopicSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryQueueSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getInactiveDurableTopicSubscribers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTopicProducers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getQueueProducers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryTopicProducers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getTemporaryQueueProducers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.getDynamicDestinationProducers();
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.removeConnector("tcp");
1:             fail("Should have thrown an NoSuchElementException");
1:         } catch(NoSuchElementException e) {
1:         }
1: 
1:         try {
1:             view.removeNetworkConnector("tcp");
1:             fail("Should have thrown an NoSuchElementException");
1:         } catch(NoSuchElementException e) {
1:         }
1: 
1:         try {
1:             view.addTopic("TEST");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.addQueue("TEST");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.removeTopic("TEST");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.removeQueue("TEST");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.createDurableSubscriber("1", "2", "3","4");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         try {
1:             view.destroyDurableSubscriber("1", "2");
1:             fail("Should have thrown an IllegalStateException");
1:         } catch(IllegalStateException e) {
1:         }
1: 
1:         holdStoreStart.countDown();
1:         startThread.join();
1: 
1:         assertNotNull(view.getBroker());
1: 
1:         try {
1:             view.getBrokerName();
1:         } catch(Exception e) {
1:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:         }
1: 
1:         try {
1:             view.getBrokerId();
1:         } catch(IllegalStateException e) {
1:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:         }
1: 
1:         try {
1:             view.getTotalEnqueueCount();
1:         } catch(IllegalStateException e) {
1:             fail("caught an exception getting the Broker property: " + e.getClass().getName());
1:         }
1:     }
1: }
============================================================================