1:0168a82: /**
1:0168a82:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0168a82:  * contributor license agreements.  See the NOTICE file distributed with
1:0168a82:  * this work for additional information regarding copyright ownership.
1:0168a82:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0168a82:  * (the "License"); you may not use this file except in compliance with
1:0168a82:  * the License.  You may obtain a copy of the License at
1:0168a82:  *
1:0168a82:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0168a82:  *
1:0168a82:  * Unless required by applicable law or agreed to in writing, software
1:0168a82:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0168a82:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0168a82:  * See the License for the specific language governing permissions and
1:0168a82:  * limitations under the License.
1:0168a82:  */
1:0168a82: package org.apache.activemq.store.jdbc;
2:0168a82: 
1:0168a82: import static org.junit.Assert.assertEquals;
1:0168a82: import static org.junit.Assert.assertNotNull;
1:0168a82: import static org.junit.Assert.fail;
1:0168a82: 
1:0168a82: import java.sql.PreparedStatement;
1:0168a82: import java.sql.ResultSet;
1:0168a82: import java.util.ArrayList;
1:0168a82: import java.util.List;
1:0168a82: 
1:0168a82: import javax.jms.Destination;
1:0168a82: import javax.jms.MessageProducer;
1:0168a82: import javax.jms.Session;
1:0168a82: 
1:0168a82: import org.apache.activemq.ActiveMQConnection;
1:0168a82: import org.apache.activemq.ActiveMQConnectionFactory;
1:0168a82: import org.apache.activemq.broker.BrokerService;
1:0168a82: import org.apache.activemq.command.Message;
1:0168a82: import org.apache.activemq.openwire.OpenWireFormat;
1:0168a82: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
1:0168a82: import org.apache.activemq.util.ByteSequence;
1:0168a82: import org.apache.activemq.wireformat.WireFormat;
1:0168a82: import org.apache.derby.jdbc.EmbeddedDataSource;
1:0168a82: import org.junit.After;
1:0168a82: import org.junit.Before;
1:0168a82: import org.junit.Test;
1:0168a82: import org.slf4j.Logger;
1:0168a82: import org.slf4j.LoggerFactory;
1:0168a82: 
1:0168a82: public class JDBCTablePrefixAssignedTest {
1:0168a82: 
1:0168a82:     private static final Logger LOG = LoggerFactory.getLogger(JDBCTablePrefixAssignedTest.class);
1:0168a82: 
1:0168a82:     private BrokerService service;
1:0168a82: 
1:0168a82:     @Before
1:0168a82:     public void setUp() throws Exception {
1:0168a82:         service = createBroker();
1:0168a82:         service.start();
1:0168a82:         service.waitUntilStarted();
1:0168a82:     }
1:0168a82: 
1:0168a82:     @After
1:0168a82:     public void tearDown() throws Exception {
1:0168a82:         service.stop();
1:0168a82:         service.waitUntilStopped();
1:0168a82:     }
1:0168a82: 
1:0168a82:     @Test
1:0168a82:     public void testTablesHave() throws Exception {
1:0168a82: 
1:0168a82:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0168a82:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:0168a82: 
1:0168a82:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0168a82:         Destination destination = session.createQueue("TEST.FOO");
1:0168a82:         MessageProducer producer = session.createProducer(destination);
1:0168a82: 
1:0168a82:         for (int i = 0; i < 10; ++i) {
1:0168a82:             producer.send(session.createTextMessage("test"));
1:0168a82:         }
1:0168a82:         producer.close();
1:0168a82:         connection.close();
1:0168a82: 
1:0168a82:         List<Message> queuedMessages = null;
1:0168a82:         try {
1:0168a82:             queuedMessages = dumpMessages();
1:0168a82:         } catch (Exception ex) {
1:0168a82:             LOG.info("Caught ex: ", ex);
1:0168a82:             fail("Should not have thrown an exception");
1:0168a82:         }
1:0168a82: 
1:0168a82:         assertNotNull(queuedMessages);
1:0168a82:         assertEquals("Should have found 10 messages", 10, queuedMessages.size());
1:0168a82:     }
1:0168a82: 
1:0168a82:     protected List<Message> dumpMessages() throws Exception {
1:0168a82:         WireFormat wireFormat = new OpenWireFormat();
1:0168a82:         java.sql.Connection conn = ((JDBCPersistenceAdapter) service.getPersistenceAdapter()).getDataSource().getConnection();
1:0168a82:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM MYPREFIX_ACTIVEMQ_MSGS");
1:0168a82:         ResultSet result = statement.executeQuery();
1:0168a82:         ArrayList<Message> results = new ArrayList<Message>();
1:0168a82:         while(result.next()) {
1:0168a82:             long id = result.getLong(1);
1:0168a82:             Message message = (Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
1:0168a82:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:0168a82:             results.add(message);
1:0168a82:         }
1:0168a82:         statement.close();
1:0168a82:         conn.close();
1:0168a82: 
1:0168a82:         return results;
1:0168a82:     }
1:0168a82: 
1:0168a82:     protected BrokerService createBroker() throws Exception {
1:0168a82:         BrokerService broker = new BrokerService();
1:0168a82:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
1:0168a82:         DefaultJDBCAdapter adapter = new DefaultJDBCAdapter();
1:0168a82:         jdbc.setAdapter(adapter);
1:0168a82: 
1:0168a82:         Statements statements = new Statements();
1:0168a82:         statements.setTablePrefix("MYPREFIX_");
1:0168a82:         jdbc.setStatements(statements);
1:0168a82: 
1:0168a82:         jdbc.setUseLock(false);
1:0168a82:         jdbc.deleteAllMessages();
1:0168a82:         broker.setPersistenceAdapter(jdbc);
1:0168a82:         return broker;
1:0168a82:     }
1:0168a82: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0168a82
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JDBCTablePrefixAssignedTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCTablePrefixAssignedTest.class);
1: 
1:     private BrokerService service;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         service = createBroker();
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         service.stop();
1:         service.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testTablesHave() throws Exception {
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue("TEST.FOO");
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         for (int i = 0; i < 10; ++i) {
1:             producer.send(session.createTextMessage("test"));
1:         }
1:         producer.close();
1:         connection.close();
1: 
1:         List<Message> queuedMessages = null;
1:         try {
1:             queuedMessages = dumpMessages();
1:         } catch (Exception ex) {
1:             LOG.info("Caught ex: ", ex);
1:             fail("Should not have thrown an exception");
1:         }
1: 
1:         assertNotNull(queuedMessages);
1:         assertEquals("Should have found 10 messages", 10, queuedMessages.size());
1:     }
1: 
1:     protected List<Message> dumpMessages() throws Exception {
1:         WireFormat wireFormat = new OpenWireFormat();
1:         java.sql.Connection conn = ((JDBCPersistenceAdapter) service.getPersistenceAdapter()).getDataSource().getConnection();
1:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM MYPREFIX_ACTIVEMQ_MSGS");
1:         ResultSet result = statement.executeQuery();
1:         ArrayList<Message> results = new ArrayList<Message>();
1:         while(result.next()) {
1:             long id = result.getLong(1);
1:             Message message = (Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
1:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:             results.add(message);
1:         }
1:         statement.close();
1:         conn.close();
1: 
1:         return results;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
1: 
1:         DefaultJDBCAdapter adapter = new DefaultJDBCAdapter();
1:         jdbc.setAdapter(adapter);
1: 
1:         Statements statements = new Statements();
1:         statements.setTablePrefix("MYPREFIX_");
1:         jdbc.setStatements(statements);
1: 
1:         jdbc.setUseLock(false);
0:         jdbc.setDataSource(dataSource);
1:         jdbc.deleteAllMessages();
1:         broker.setPersistenceAdapter(jdbc);
1:         return broker;
1:     }
1: }
============================================================================