1:7a68ad5: /**
1:7a68ad5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a68ad5:  * contributor license agreements.  See the NOTICE file distributed with
1:7a68ad5:  * this work for additional information regarding copyright ownership.
1:7a68ad5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a68ad5:  * (the "License"); you may not use this file except in compliance with
1:7a68ad5:  * the License.  You may obtain a copy of the License at
1:7a68ad5:  *
1:7a68ad5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7a68ad5:  *
1:7a68ad5:  * Unless required by applicable law or agreed to in writing, software
1:7a68ad5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a68ad5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a68ad5:  * See the License for the specific language governing permissions and
1:7a68ad5:  * limitations under the License.
1:7a68ad5:  */
1:7a68ad5: package org.apache.activemq.bugs;
1:7a68ad5: 
1:7a68ad5: import static org.junit.Assert.assertEquals;
1:7a68ad5: 
1:7a68ad5: import java.io.File;
1:7a68ad5: 
1:7a68ad5: import javax.jms.Connection;
1:7a68ad5: import javax.jms.Session;
1:7a68ad5: import javax.jms.Topic;
1:7a68ad5: import javax.jms.TopicSubscriber;
1:7a68ad5: 
1:7a68ad5: import org.apache.activemq.ActiveMQConnectionFactory;
1:7a68ad5: import org.apache.activemq.broker.BrokerService;
1:7a68ad5: import org.apache.activemq.broker.TransportConnector;
1:7a68ad5: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7a68ad5: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7a68ad5: import org.apache.activemq.command.ActiveMQDestination;
1:7a68ad5: import org.apache.activemq.command.ActiveMQTopic;
1:7a68ad5: import org.apache.activemq.store.kahadb.KahaDBStore;
1:7a68ad5: import org.junit.After;
1:7a68ad5: import org.junit.Before;
1:7a68ad5: import org.junit.Test;
1:7a68ad5: import org.slf4j.Logger;
1:7a68ad5: import org.slf4j.LoggerFactory;
1:7a68ad5: 
1:7a68ad5: public class AMQ4814Test {
1:7a68ad5: 
1:7a68ad5:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4814Test.class);
1:7a68ad5: 
1:7a68ad5:     private static final String CONNECTION_URL = "tcp://127.0.0.1:0";
1:7a68ad5:     private static final String KAHADB_DIRECTORY = "./target/activemq-data/";
1:7a68ad5: 
1:7a68ad5:     private BrokerService broker;
1:7a68ad5:     private String connectionURI;
1:7a68ad5: 
1:7a68ad5:     @Before
1:7a68ad5:     public void setup() throws Exception {
1:7a68ad5: 
1:7a68ad5:         PolicyMap pm = new PolicyMap();
1:7a68ad5:         PolicyEntry pe = new PolicyEntry();
1:7a68ad5:         pe.setGcInactiveDestinations(true);
1:7a68ad5:         pe.setInactiveTimeoutBeforeGC(1000L);
1:7a68ad5: 
1:7a68ad5:         pe.setProducerFlowControl(false);
1:7a68ad5: 
1:7a68ad5:         ActiveMQDestination d = new ActiveMQTopic(">");
1:7a68ad5:         pe.setDestination(d);
1:7a68ad5:         pm.put(d, pe);
1:7a68ad5: 
1:7a68ad5:         KahaDBStore kaha = new KahaDBStore();
1:7a68ad5:         kaha.setDirectory(new File(KAHADB_DIRECTORY + "-LEAKTEST"));
1:7a68ad5: 
1:7a68ad5:         broker = new BrokerService();
1:7a68ad5:         broker.setBrokerName("broker1");
1:7a68ad5:         broker.setUseJmx(false);
1:7a68ad5:         broker.setPersistenceAdapter(kaha);
1:7a68ad5:         broker.setDestinationPolicy(pm);
1:7a68ad5:         broker.setSchedulePeriodForDestinationPurge(1000);
1:7a68ad5:         broker.setTimeBeforePurgeTempDestinations(1000);
1:7a68ad5:         broker.setMaxPurgedDestinationsPerSweep(5000);
1:7a68ad5:         broker.setOfflineDurableSubscriberTaskSchedule(1000L);
1:7a68ad5:         broker.setOfflineDurableSubscriberTimeout(1000L);
1:7a68ad5:         broker.setKeepDurableSubsActive(true);
1:7a68ad5: 
1:7a68ad5:         TransportConnector connector = broker.addConnector(CONNECTION_URL);
1:7a68ad5: 
1:7a68ad5:         broker.deleteAllMessages();
1:7a68ad5:         broker.start();
1:7a68ad5:         broker.waitUntilStarted();
1:7a68ad5: 
1:7a68ad5:         connectionURI = connector.getPublishableConnectString();
1:7a68ad5:     }
1:7a68ad5: 
1:7a68ad5:     @After
1:7a68ad5:     public void tearDown() throws Exception {
1:7a68ad5:         if (broker != null) {
1:7a68ad5:             broker.stop();
1:7a68ad5:             broker.waitUntilStopped();
1:7a68ad5:             broker = null;
1:7a68ad5:         }
1:7a68ad5:     }
1:7a68ad5: 
1:7a68ad5:     @Test(timeout=60000)
1:7a68ad5:     public void testDurableTopicResourcesAreRemoved() throws Exception {
1:7a68ad5: 
1:7a68ad5:         LOG.info("Test starting.");
1:7a68ad5: 
1:7a68ad5:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:7a68ad5: 
1:7a68ad5:         for (int i = 0; i < 2; ++i) {
1:7a68ad5:             LOG.info("Test main loop starting iteration: {}", i + 1);
1:7a68ad5:             Connection connection = factory.createConnection();
1:7a68ad5:             connection.setClientID("client_id");
1:7a68ad5:             connection.start();
1:7a68ad5: 
1:7a68ad5:             for (int j = 0; j < 8; j++) {
1:7a68ad5:                 LOG.info("Test sub loop starting iteration: {}", j + 1);
1:7a68ad5:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a68ad5:                 String topicName = "durabletopic_" + j;
1:7a68ad5:                 String subscriberName = "subscriber_" + j;
1:7a68ad5:                 Topic topic = session.createTopic(topicName);
1:7a68ad5: 
1:7a68ad5:                 TopicSubscriber subscriber = session.createDurableSubscriber(topic, subscriberName);
1:7a68ad5:                 subscriber.close();
1:7a68ad5:                 session.unsubscribe(subscriberName);
1:7a68ad5:                 session.close();
1:7a68ad5:             }
1:7a68ad5: 
1:7a68ad5:             connection.stop();
1:7a68ad5:             connection.close();
1:7a68ad5:             connection = null;
1:7a68ad5: 
1:7a68ad5:             Thread.sleep(10);
1:7a68ad5:         }
1:7a68ad5: 
1:7a68ad5:         assertEquals(0, broker.getSystemUsage().getMemoryUsage().getNumUsageListeners());
1:7a68ad5: 
1:7a68ad5:         LOG.info("Test completed.");
1:7a68ad5:     }
1:7a68ad5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7a68ad5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4814Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4814Test.class);
1: 
1:     private static final String CONNECTION_URL = "tcp://127.0.0.1:0";
1:     private static final String KAHADB_DIRECTORY = "./target/activemq-data/";
1: 
1:     private BrokerService broker;
1:     private String connectionURI;
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         PolicyMap pm = new PolicyMap();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setGcInactiveDestinations(true);
1:         pe.setInactiveTimeoutBeforeGC(1000L);
1: 
1:         pe.setProducerFlowControl(false);
1: 
1:         ActiveMQDestination d = new ActiveMQTopic(">");
1:         pe.setDestination(d);
1:         pm.put(d, pe);
1: 
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File(KAHADB_DIRECTORY + "-LEAKTEST"));
1: 
1:         broker = new BrokerService();
1:         broker.setBrokerName("broker1");
1:         broker.setUseJmx(false);
1:         broker.setPersistenceAdapter(kaha);
1:         broker.setDestinationPolicy(pm);
1:         broker.setSchedulePeriodForDestinationPurge(1000);
1:         broker.setTimeBeforePurgeTempDestinations(1000);
1:         broker.setMaxPurgedDestinationsPerSweep(5000);
1:         broker.setOfflineDurableSubscriberTaskSchedule(1000L);
1:         broker.setOfflineDurableSubscriberTimeout(1000L);
1:         broker.setKeepDurableSubsActive(true);
1: 
1:         TransportConnector connector = broker.addConnector(CONNECTION_URL);
1: 
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionURI = connector.getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     @Test(timeout=60000)
1:     public void testDurableTopicResourcesAreRemoved() throws Exception {
1: 
1:         LOG.info("Test starting.");
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1: 
1:         for (int i = 0; i < 2; ++i) {
1:             LOG.info("Test main loop starting iteration: {}", i + 1);
1:             Connection connection = factory.createConnection();
1:             connection.setClientID("client_id");
1:             connection.start();
1: 
1:             for (int j = 0; j < 8; j++) {
1:                 LOG.info("Test sub loop starting iteration: {}", j + 1);
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 String topicName = "durabletopic_" + j;
1:                 String subscriberName = "subscriber_" + j;
1:                 Topic topic = session.createTopic(topicName);
1: 
1:                 TopicSubscriber subscriber = session.createDurableSubscriber(topic, subscriberName);
1:                 subscriber.close();
1:                 session.unsubscribe(subscriberName);
1:                 session.close();
1:             }
1: 
1:             connection.stop();
1:             connection.close();
1:             connection = null;
1: 
1:             Thread.sleep(10);
1:         }
1: 
1:         assertEquals(0, broker.getSystemUsage().getMemoryUsage().getNumUsageListeners());
1: 
1:         LOG.info("Test completed.");
1:     }
1: }
============================================================================