1:a5050a8: /**
1:a5050a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a5050a8:  * contributor license agreements.  See the NOTICE file distributed with
1:a5050a8:  * this work for additional information regarding copyright ownership.
1:a5050a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a5050a8:  * (the "License"); you may not use this file except in compliance with
1:a5050a8:  * the License.  You may obtain a copy of the License at
1:a5050a8:  *
1:a5050a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a5050a8:  *
1:a5050a8:  * Unless required by applicable law or agreed to in writing, software
1:a5050a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a5050a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5050a8:  * See the License for the specific language governing permissions and
1:a5050a8:  * limitations under the License.
1:a5050a8:  */
1:a5050a8: package org.apache.activemq.store.kahadb;
1:a5050a8: 
1:a5050a8: import static org.junit.Assert.assertEquals;
1:2731f04: import static org.junit.Assert.assertNotNull;
1:a5050a8: 
1:a5050a8: import java.io.File;
1:a5050a8: import java.io.IOException;
1:2731f04: import java.util.Arrays;
1:2731f04: import java.util.Collection;
1:a5050a8: 
1:a5050a8: import org.apache.activemq.broker.BrokerService;
1:a5050a8: import org.apache.activemq.command.ActiveMQQueue;
1:a5050a8: import org.apache.activemq.command.ActiveMQTextMessage;
1:a5050a8: import org.apache.activemq.command.MessageId;
1:a5050a8: import org.apache.activemq.store.MessageStore;
1:a5050a8: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1:a5050a8: import org.apache.activemq.store.kahadb.data.KahaDestination;
1:a5050a8: import org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand;
1:a5050a8: import org.apache.activemq.store.kahadb.disk.journal.Location;
1:a5050a8: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:a5050a8: import org.junit.After;
1:a5050a8: import org.junit.Before;
1:a5050a8: import org.junit.Rule;
1:a5050a8: import org.junit.Test;
1:a5050a8: import org.junit.rules.TemporaryFolder;
1:2731f04: import org.junit.runner.RunWith;
1:2731f04: import org.junit.runners.Parameterized;
1:2731f04: import org.junit.runners.Parameterized.Parameters;
1:a5050a8: import org.slf4j.Logger;
1:a5050a8: import org.slf4j.LoggerFactory;
1:a5050a8: 
1:2731f04: @RunWith(Parameterized.class)
1:a5050a8: public class MessageDatabaseSizeTest {
1:a5050a8: 
1:a5050a8:     private static final Logger LOG = LoggerFactory.getLogger(MessageDatabaseSizeTest.class);
1:a5050a8: 
1:2731f04:     @Parameters(name = "subStatsEnabled={0}")
1:2731f04:     public static Collection<Object[]> data() {
1:2731f04:         return Arrays.asList(new Object[][] {
1:2731f04:                 // Subscription stats on
1:2731f04:                 {true},
1:2731f04:                 // Subscription stats off
1:2731f04:                 {false}
1:2731f04:         });
1:2731f04:     }
1:2731f04: 
1:a5050a8:     @Rule
1:a5050a8:     public TemporaryFolder dataDir = new TemporaryFolder(new File("target"));
1:a5050a8:     private final String payload = new String(new byte[1024]);
1:a5050a8: 
1:a5050a8:     private BrokerService broker = null;
1:a5050a8:     private final ActiveMQQueue destination = new ActiveMQQueue("Test");
1:a5050a8:     private KahaDBPersistenceAdapter adapter;
1:2731f04:     private boolean subStatsEnabled;
1:2731f04: 
1:2731f04:     public MessageDatabaseSizeTest(boolean subStatsEnabled) {
1:2731f04:         super();
1:2731f04:         this.subStatsEnabled = subStatsEnabled;
1:2731f04:     }
1:2731f04: 
1:a5050a8: 
1:a5050a8:     protected void startBroker() throws Exception {
1:a5050a8:         broker = new BrokerService();
1:a5050a8:         broker.setDeleteAllMessagesOnStartup(true);
1:a5050a8:         broker.setPersistent(true);
1:a5050a8:         broker.setUseJmx(true);
1:a5050a8:         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:a5050a8:         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:2731f04:         adapter.setEnableSubscriptionStatistics(subStatsEnabled);
1:a5050a8:         broker.start();
1:a5050a8:         LOG.info("Starting broker..");
1:a5050a8:     }
1:a5050a8: 
1:a5050a8:     @Before
1:a5050a8:     public void start() throws Exception {
1:a5050a8:         startBroker();
1:a5050a8:     }
1:a5050a8: 
1:a5050a8:     @After
1:a5050a8:     public void tearDown() throws Exception {
1:a5050a8:         if (broker != null) {
1:a5050a8:             broker.stop();
1:a5050a8:             broker.waitUntilStopped();
1:a5050a8:         }
1:a5050a8:     }
1:a5050a8: 
1:a5050a8:     /**
1:a5050a8:      * Test that when only updating the index and not rewriting the message to the journal
1:a5050a8:      * that the size doesn't change
1:a5050a8:      *
1:a5050a8:      * This was broken before AMQ-6356
1:a5050a8:      */
1:a5050a8:     @Test
1:a5050a8:     public void testUpdateMessageSameLocation() throws Exception {
1:a5050a8:         final KahaDBStore store = adapter.getStore();
1:a5050a8:         MessageId messageId = new MessageId("111:222:333");
1:a5050a8:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1:a5050a8: 
1:a5050a8:         //Add a single message and update once so we can compare the size consistently
1:a5050a8:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:a5050a8:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:a5050a8:         messageStore.updateMessage(textMessage);
1:a5050a8: 
1:a5050a8:         Location location = findMessageLocation(messageId.toString(), store.convert(destination));
1:a5050a8:         long existingSize = messageStore.getMessageSize();
1:a5050a8: 
1:a5050a8:         //Process the update command for the index and verify the size doesn't change
1:a5050a8:         KahaUpdateMessageCommand updateMessageCommand = (KahaUpdateMessageCommand) store.load(location);
1:a5050a8:         store.process(updateMessageCommand, location);
1:a5050a8:         assertEquals(existingSize, messageStore.getMessageSize());
1:a5050a8:     }
1:a5050a8: 
1:2731f04:     @Test
1:2731f04:     public void testUpdateMessageSameLocationDifferentSize() throws Exception {
1:2731f04:         final KahaDBStore store = adapter.getStore();
1:2731f04:         MessageId messageId = new MessageId("111:222:333");
1:2731f04:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1:2731f04: 
1:2731f04:         //Add a single message and update once so we can compare the size consistently
1:2731f04:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:2731f04:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:2731f04:         textMessage.setText("new size of message");
1:2731f04:         messageStore.updateMessage(textMessage);
1:2731f04: 
1:2731f04:         assertNotNull(findMessageLocation(messageId.toString(), store.convert(destination)));
1:2731f04: 
1:2731f04:     }
1:2731f04: 
1:a5050a8:     /**
1:a5050a8:      * Test that when updating an existing message to a different location in the
1:a5050a8:      * journal that the index size doesn't change
1:a5050a8:      */
1:a5050a8:     @Test
1:a5050a8:     public void testUpdateMessageDifferentLocation() throws Exception {
1:a5050a8:         final KahaDBStore store = adapter.getStore();
1:a5050a8:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1:a5050a8: 
1:a5050a8:         //Add a single message and update once so we can compare the size consistently
1:a5050a8:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:a5050a8:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:a5050a8:         messageStore.updateMessage(textMessage);
1:a5050a8: 
1:a5050a8:         //Update again and make sure the size is the same
1:a5050a8:         long existingSize = messageStore.getMessageSize();
1:a5050a8:         messageStore.updateMessage(textMessage);
1:a5050a8:         assertEquals(existingSize, messageStore.getMessageSize());
1:a5050a8:     }
1:a5050a8: 
1:a5050a8:     private ActiveMQTextMessage getMessage(final MessageId messageId) throws Exception {
1:a5050a8:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:a5050a8:         textMessage.setMessageId(messageId);
1:a5050a8:         textMessage.setText(payload);
1:a5050a8: 
1:a5050a8:         return textMessage;
1:a5050a8:     }
1:a5050a8: 
1:a5050a8:     private Location findMessageLocation(final String key, final KahaDestination destination) throws IOException {
1:a5050a8:         final KahaDBStore store = adapter.getStore();
1:a5050a8:         return store.pageFile.tx().execute(new Transaction.CallableClosure<Location, IOException>() {
1:a5050a8:             @Override
1:a5050a8:             public Location execute(Transaction tx) throws IOException {
1:a5050a8:                 StoredDestination sd = store.getStoredDestination(destination, tx);
1:a5050a8:                 Long sequence = sd.messageIdIndex.get(tx, key);
1:a5050a8:                 if (sequence == null) {
1:a5050a8:                     return null;
1:a5050a8:                 }
1:a5050a8:                 return sd.orderIndex.get(tx, sequence).location;
1:a5050a8:             }
1:a5050a8:         });
1:a5050a8:     }
1:a5050a8: 
1:a5050a8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2731f04
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import java.util.Arrays;
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1:     @Parameters(name = "subStatsEnabled={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 // Subscription stats on
1:                 {true},
1:                 // Subscription stats off
1:                 {false}
1:         });
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean subStatsEnabled;
1: 
1:     public MessageDatabaseSizeTest(boolean subStatsEnabled) {
1:         super();
1:         this.subStatsEnabled = subStatsEnabled;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         adapter.setEnableSubscriptionStatistics(subStatsEnabled);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testUpdateMessageSameLocationDifferentSize() throws Exception {
1:         final KahaDBStore store = adapter.getStore();
1:         MessageId messageId = new MessageId("111:222:333");
1:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1: 
1:         //Add a single message and update once so we can compare the size consistently
1:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:         textMessage.setText("new size of message");
1:         messageStore.updateMessage(textMessage);
1: 
1:         assertNotNull(findMessageLocation(messageId.toString(), store.convert(destination)));
1: 
1:     }
1: 
commit:a5050a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.kahadb.MessageDatabase.StoredDestination;
1: import org.apache.activemq.store.kahadb.data.KahaDestination;
1: import org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand;
1: import org.apache.activemq.store.kahadb.disk.journal.Location;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MessageDatabaseSizeTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageDatabaseSizeTest.class);
1: 
1:     @Rule
1:     public TemporaryFolder dataDir = new TemporaryFolder(new File("target"));
1:     private final String payload = new String(new byte[1024]);
1: 
1:     private BrokerService broker = null;
1:     private final ActiveMQQueue destination = new ActiveMQQueue("Test");
1:     private KahaDBPersistenceAdapter adapter;
1: 
1:     protected void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
1: 
1:     @Before
1:     public void start() throws Exception {
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * Test that when only updating the index and not rewriting the message to the journal
1:      * that the size doesn't change
1:      *
1:      * This was broken before AMQ-6356
1:      */
1:     @Test
1:     public void testUpdateMessageSameLocation() throws Exception {
1:         final KahaDBStore store = adapter.getStore();
1:         MessageId messageId = new MessageId("111:222:333");
1:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1: 
1:         //Add a single message and update once so we can compare the size consistently
1:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:         messageStore.updateMessage(textMessage);
1: 
1:         Location location = findMessageLocation(messageId.toString(), store.convert(destination));
1:         long existingSize = messageStore.getMessageSize();
1: 
1:         //Process the update command for the index and verify the size doesn't change
1:         KahaUpdateMessageCommand updateMessageCommand = (KahaUpdateMessageCommand) store.load(location);
1:         store.process(updateMessageCommand, location);
1:         assertEquals(existingSize, messageStore.getMessageSize());
1:     }
1: 
1:     /**
1:      * Test that when updating an existing message to a different location in the
1:      * journal that the index size doesn't change
1:      */
1:     @Test
1:     public void testUpdateMessageDifferentLocation() throws Exception {
1:         final KahaDBStore store = adapter.getStore();
1:         ActiveMQTextMessage textMessage = getMessage(new MessageId("111:222:333"));
1: 
1:         //Add a single message and update once so we can compare the size consistently
1:         MessageStore messageStore = store.createQueueMessageStore(destination);
1:         messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);
1:         messageStore.updateMessage(textMessage);
1: 
1:         //Update again and make sure the size is the same
1:         long existingSize = messageStore.getMessageSize();
1:         messageStore.updateMessage(textMessage);
1:         assertEquals(existingSize, messageStore.getMessageSize());
1:     }
1: 
1:     private ActiveMQTextMessage getMessage(final MessageId messageId) throws Exception {
1:         ActiveMQTextMessage textMessage = new ActiveMQTextMessage();
1:         textMessage.setMessageId(messageId);
1:         textMessage.setText(payload);
1: 
1:         return textMessage;
1:     }
1: 
1:     private Location findMessageLocation(final String key, final KahaDestination destination) throws IOException {
1:         final KahaDBStore store = adapter.getStore();
1:         return store.pageFile.tx().execute(new Transaction.CallableClosure<Location, IOException>() {
1:             @Override
1:             public Location execute(Transaction tx) throws IOException {
1:                 StoredDestination sd = store.getStoredDestination(destination, tx);
1:                 Long sequence = sd.messageIdIndex.get(tx, key);
1:                 if (sequence == null) {
1:                     return null;
1:                 }
1:                 return sd.orderIndex.get(tx, sequence).location;
1:             }
1:         });
1:     }
1: 
1: }
============================================================================