1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
3:40a7d3b: 
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.LocalTransaction;
1:40a7d3b: import javax.transaction.xa.XAException;
1:40a7d3b: import javax.transaction.xa.XAResource;
1:40a7d3b: import javax.transaction.xa.Xid;
1:40a7d3b: 
1:fd4bb60: import org.apache.activemq.TransactionContext;
1:221a751: import org.slf4j.Logger;
1:221a751: import org.slf4j.LoggerFactory;
1:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * Used to provide a LocalTransaction and XAResource to a JMS session.
1:40a7d3b:  */
1:40a7d3b: public class LocalAndXATransaction implements XAResource, LocalTransaction {
1:221a751:     private static final Logger LOG = LoggerFactory.getLogger(LocalAndXATransaction.class);
1:40a7d3b: 
1:e8818fa:     private TransactionContext transactionContext;
1:40a7d3b:     private boolean inManagedTx;
1:540dd5c: 
1:40a7d3b:     public LocalAndXATransaction(TransactionContext transactionContext) {
1:540dd5c:         this.transactionContext = transactionContext;
7:40a7d3b:     }
1:40a7d3b: 
1:e8818fa:     public void setTransactionContext(TransactionContext transactionContext) {
1:e8818fa:         this.transactionContext = transactionContext;
1:e8818fa:     }
1:e8818fa: 
1:40a7d3b:     public void setInManagedTx(boolean inManagedTx) throws JMSException {
1:540dd5c:         this.inManagedTx = inManagedTx;
1:540dd5c:         if (!inManagedTx) {
1:40a7d3b:             transactionContext.cleanup();
1:540dd5c:         }
1:540dd5c:     }
1:40a7d3b: 
1:40a7d3b:     public void begin() throws ResourceException {
1:40a7d3b:         try {
1:40a7d3b:             transactionContext.begin();
1:40a7d3b:             setInManagedTx(true);
1:40a7d3b:         } catch (JMSException e) {
1:40a7d3b:             throw new ResourceException("begin failed.", e);
1:86cbdfd:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void commit() throws ResourceException {
1:40a7d3b:         try {
1:40a7d3b:             transactionContext.commit();
1:40a7d3b:         } catch (JMSException e) {
1:40a7d3b:             throw new ResourceException("commit failed.", e);
1:40a7d3b:         } finally {
1:40a7d3b:             try {
1:40a7d3b:                 setInManagedTx(false);
1:40a7d3b:             } catch (JMSException e) {
1:540dd5c:                 throw new ResourceException("commit failed.", e);
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void rollback() throws ResourceException {
1:40a7d3b:         try {
1:40a7d3b:             transactionContext.rollback();
1:40a7d3b:         } catch (JMSException e) {
1:540dd5c:             throw new ResourceException("rollback failed.", e);
1:40a7d3b:         } finally {
1:40a7d3b:             try {
1:40a7d3b:                 setInManagedTx(false);
1:40a7d3b:             } catch (JMSException e) {
1:40a7d3b:                 throw new ResourceException("rollback failed.", e);
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void commit(Xid arg0, boolean arg1) throws XAException {
1:40a7d3b:         transactionContext.commit(arg0, arg1);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void end(Xid arg0, int arg1) throws XAException {
1:221a751:         LOG.debug("{} end {} with {}", new Object[]{this, arg0, arg1});
1:40a7d3b:         try {
1:40a7d3b:             transactionContext.end(arg0, arg1);
1:40a7d3b:         } finally {
1:40a7d3b:             try {
1:40a7d3b:                 setInManagedTx(false);
1:40a7d3b:             } catch (JMSException e) {
1:40a7d3b:                 throw (XAException)new XAException(XAException.XAER_PROTO).initCause(e);
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void forget(Xid arg0) throws XAException {
1:40a7d3b:         transactionContext.forget(arg0);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getTransactionTimeout() throws XAException {
1:40a7d3b:         return transactionContext.getTransactionTimeout();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isSameRM(XAResource xaresource) throws XAException {
1:221a751:         boolean isSame = false;
1:221a751:         if (xaresource != null) {
1:221a751:             // Do we have to unwrap?
1:221a751:             if (xaresource instanceof LocalAndXATransaction) {
1:221a751:                 xaresource = ((LocalAndXATransaction)xaresource).transactionContext;
1:221a751:             }
1:221a751:             isSame = transactionContext.isSameRM(xaresource);
1:40a7d3b:         }
1:221a751:         LOG.trace("{} isSameRM({}) = {}", new Object[]{this, xaresource, isSame});
1:221a751:         return isSame;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int prepare(Xid arg0) throws XAException {
1:40a7d3b:         return transactionContext.prepare(arg0);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public Xid[] recover(int arg0) throws XAException {
1:f42d56c:         Xid[] answer = null;
1:e1cd19e:         LOG.trace("{} recover({})", new Object[]{this, arg0});
1:f42d56c:         answer = transactionContext.recover(arg0);
1:f42d56c:         LOG.trace("{} recover({}) = {}", new Object[]{this, arg0, answer});
1:f42d56c:         return answer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void rollback(Xid arg0) throws XAException {
1:40a7d3b:         transactionContext.rollback(arg0);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean setTransactionTimeout(int arg0) throws XAException {
1:40a7d3b:         return transactionContext.setTransactionTimeout(arg0);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void start(Xid arg0, int arg1) throws XAException {
1:221a751:         LOG.trace("{} start {} with {}", new Object[]{this, arg0, arg1});
1:40a7d3b:         transactionContext.start(arg0, arg1);
1:40a7d3b:         try {
1:40a7d3b:             setInManagedTx(true);
1:40a7d3b:         } catch (JMSException e) {
1:40a7d3b:             throw (XAException)new XAException(XAException.XAER_PROTO).initCause(e);
1:540dd5c:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isInManagedTx() {
1:40a7d3b:         return inManagedTx;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void cleanup() {
1:40a7d3b:         transactionContext.cleanup();
1:540dd5c:         inManagedTx = false;
1:40a7d3b:     }
1:e1cd19e: 
1:e1cd19e:     @Override
1:e1cd19e:     public String toString() {
1:e1cd19e:         return "[" + super.toString() + "," + transactionContext + "]";
1:e1cd19e:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:e1cd19e
/////////////////////////////////////////////////////////////////////////
1:         LOG.trace("{} recover({})", new Object[]{this, arg0});
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return "[" + super.toString() + "," + transactionContext + "]";
1:     }
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1:     private TransactionContext transactionContext;
1:     public void setTransactionContext(TransactionContext transactionContext) {
1:         this.transactionContext = transactionContext;
1:     }
1: 
commit:f42d56c
/////////////////////////////////////////////////////////////////////////
1:         Xid[] answer = null;
1:         answer = transactionContext.recover(arg0);
1:         LOG.trace("{} recover({}) = {}", new Object[]{this, arg0, answer});
1:         return answer;
commit:221a751
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LocalAndXATransaction.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("{} end {} with {}", new Object[]{this, arg0, arg1});
/////////////////////////////////////////////////////////////////////////
1:         boolean isSame = false;
1:         if (xaresource != null) {
1:             // Do we have to unwrap?
1:             if (xaresource instanceof LocalAndXATransaction) {
1:                 xaresource = ((LocalAndXATransaction)xaresource).transactionContext;
1:             }
1:             isSame = transactionContext.isSameRM(xaresource);
1:         LOG.trace("{} isSameRM({}) = {}", new Object[]{this, xaresource, isSame});
1:         return isSame;
/////////////////////////////////////////////////////////////////////////
1:         LOG.trace("{} start {} with {}", new Object[]{this, arg0, arg1});
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0:     private final TransactionContext transactionContext;
1: 
1:         this.transactionContext = transactionContext;
1:         this.inManagedTx = inManagedTx;
1:         if (!inManagedTx) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 throw new ResourceException("commit failed.", e);
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 throw new ResourceException("rollback failed.", e);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             }
/////////////////////////////////////////////////////////////////////////
0:         if (xaresource == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:         inManagedTx = false;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TransactionContext;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
0:  **/
0: package org.activemq.ra;
1: 
1: import javax.jms.JMSException;
1: import javax.resource.ResourceException;
1: import javax.resource.spi.LocalTransaction;
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: 
0: import org.activemq.TransactionContext;
1: 
1: /**
1:  * Used to provide a LocalTransaction and XAResource to a JMS session.
1:  */
1: public class LocalAndXATransaction implements XAResource, LocalTransaction {
1: 
0:     final private TransactionContext transactionContext;
1:     private boolean inManagedTx;
1:     
1:     public LocalAndXATransaction(TransactionContext transactionContext) {
0:         this.transactionContext=transactionContext;
1:     }
1: 
1:     public void setInManagedTx(boolean inManagedTx) throws JMSException {
0:         this.inManagedTx=inManagedTx;
0:         if( !inManagedTx )
1:             transactionContext.cleanup();
1:     }
1: 
1:     public void begin() throws ResourceException {
1:         try {
1:             transactionContext.begin();
1:             setInManagedTx(true);
1:         } catch (JMSException e) {
1:             throw new ResourceException("begin failed.", e);
1:         }
1:     }
1: 
1:     public void commit() throws ResourceException {
1:         try {
1:             transactionContext.commit();
1:         } catch (JMSException e) {
1:             throw new ResourceException("commit failed.", e);
1:         } finally {
1:             try {
1:                 setInManagedTx(false);
1:             } catch (JMSException e) {
0:                 throw new ResourceException("commit failed.",e);
1:             }            
1:         }
1:     }
1: 
1:     public void rollback() throws ResourceException {
1:         try {
1:             transactionContext.rollback();
1:         } catch (JMSException e) {
1:             throw new ResourceException("rollback failed.", e);
1:         } finally {
1:             try {
1:                 setInManagedTx(false);
1:             } catch (JMSException e) {
0:                 throw new ResourceException("rollback failed.",e);
1:             }            
1:         }
1:     }
1: 
1:     public void commit(Xid arg0, boolean arg1) throws XAException {
1:         transactionContext.commit(arg0, arg1);
1:     }
1: 
1:     public void end(Xid arg0, int arg1) throws XAException {
1:         try {
1:             transactionContext.end(arg0, arg1);
1:         } finally {
1:             try {
1:                 setInManagedTx(false);
1:             } catch (JMSException e) {
1:                 throw (XAException)new XAException(XAException.XAER_PROTO).initCause(e);
1:             }            
1:         }
1:     }
1: 
1:     public void forget(Xid arg0) throws XAException {
1:         transactionContext.forget(arg0);
1:     }
1: 
1:     public int getTransactionTimeout() throws XAException {
1:         return transactionContext.getTransactionTimeout();
1:     }
1: 
1:     public boolean isSameRM(XAResource xaresource) throws XAException {
0:         if (xaresource == null)
0:             return false;
0:         // Do we have to unwrap?
0:         if (xaresource instanceof LocalAndXATransaction) {
0:             xaresource = ((LocalAndXATransaction)xaresource).transactionContext;
1:         }
0:         return transactionContext.isSameRM(xaresource);
1:     }
1: 
1:     public int prepare(Xid arg0) throws XAException {
1:         return transactionContext.prepare(arg0);
1:     }
1: 
1:     public Xid[] recover(int arg0) throws XAException {
0:         return transactionContext.recover(arg0);
1:     }
1: 
1:     public void rollback(Xid arg0) throws XAException {
1:         transactionContext.rollback(arg0);
1:     }
1: 
1:     public boolean setTransactionTimeout(int arg0) throws XAException {
1:         return transactionContext.setTransactionTimeout(arg0);
1:     }
1: 
1:     
1:     public void start(Xid arg0, int arg1) throws XAException {
1:         transactionContext.start(arg0, arg1);
1:         try {
1:             setInManagedTx(true);
1:         } catch (JMSException e) {
1:             throw (XAException)new XAException(XAException.XAER_PROTO).initCause(e);
1:         }            
1:     }
1: 
1:     public boolean isInManagedTx() {
1:         return inManagedTx;
1:     }
1: 
1:     public void cleanup() {
1:         transactionContext.cleanup();
0:         inManagedTx=false;
1:     }
1: }
============================================================================