1:755ffd5: /**
1:755ffd5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:755ffd5:  * contributor license agreements.  See the NOTICE file distributed with
1:755ffd5:  * this work for additional information regarding copyright ownership.
1:755ffd5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:755ffd5:  * (the "License"); you may not use this file except in compliance with
1:755ffd5:  * the License.  You may obtain a copy of the License at
1:755ffd5:  *
1:755ffd5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:755ffd5:  *
1:755ffd5:  * Unless required by applicable law or agreed to in writing, software
1:755ffd5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:755ffd5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:755ffd5:  * See the License for the specific language governing permissions and
1:755ffd5:  * limitations under the License.
1:755ffd5:  */
1:755ffd5: package org.apache.activemq.web;
9:755ffd5: 
1:166ab43: import java.util.LinkedList;
1:166ab43: 
1:755ffd5: import javax.jms.Message;
1:755ffd5: import javax.jms.MessageConsumer;
1:bef96a9: 
1:166ab43: import org.apache.activemq.MessageAvailableListener;
1:755ffd5: import org.eclipse.jetty.continuation.Continuation;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:bef96a9: 
1:755ffd5: /*
1:755ffd5:  * Listen for available messages and wakeup any continuations.
1:755ffd5:  */
1:755ffd5: public class AjaxListener implements MessageAvailableListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AjaxListener.class);
1:166ab43: 
1:166ab43:     private final long maximumReadTimeout;
1:166ab43:     private final AjaxWebClient client;
1:755ffd5:     private long lastAccess;
1:755ffd5:     private Continuation continuation;
1:166ab43:     private final LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
1:755ffd5: 
1:755ffd5:     AjaxListener(AjaxWebClient client, long maximumReadTimeout) {
1:755ffd5:         this.client = client;
1:755ffd5:         this.maximumReadTimeout = maximumReadTimeout;
1:bef96a9:         access();
3:755ffd5:     }
1:88fc7fe: 
1:755ffd5:     public void access() {
1:755ffd5:         lastAccess = System.currentTimeMillis();
1:755ffd5:     }
1:88fc7fe: 
1:755ffd5:     public synchronized void setContinuation(Continuation continuation) {
1:755ffd5:         this.continuation = continuation;
1:bef96a9:     }
1:c6ede16: 
1:c6ede16:     public LinkedList<UndeliveredAjaxMessage> getUndeliveredMessages() {
1:c6ede16:         return undeliveredMessages;
1:755ffd5:     }
1:166ab43: 
1:166ab43:     @Override
1:755ffd5:     public synchronized void onMessageAvailable(MessageConsumer consumer) {
1:6d15c34:         LOG.debug("Message for consumer: {} continuation: {}", consumer, continuation);
1:6d15c34: 
1:755ffd5:         if (continuation != null) {
1:755ffd5:             try {
1:755ffd5:                 Message message = consumer.receive(10);
1:166ab43:                 LOG.debug("message is " + message);
1:166ab43:                 if (message != null) {
1:b558116:                     if (!continuation.isResumed()) {
1:6d15c34:                         LOG.debug("Resuming suspended continuation {}", continuation);
1:166ab43:                         continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage(message, consumer));
1:88fc7fe:                         continuation.resume();
1:88fc7fe:                     } else {
1:6d15c34:                         LOG.debug("Message available, but continuation is already resumed. Buffer for next time.");
1:166ab43:                         bufferMessageForDelivery(message, consumer);
1:88fc7fe:                     }
1:88fc7fe:                 }
1:755ffd5:             } catch (Exception e) {
1:6d15c34:                 LOG.warn("Error receiving message " + e.getMessage() + ". This exception is ignored.", e);
1:88fc7fe:             }
1:166ab43: 
1:755ffd5:         } else if (System.currentTimeMillis() - lastAccess > 2 * this.maximumReadTimeout) {
1:755ffd5:             new Thread() {
1:166ab43:                 @Override
1:755ffd5:                 public void run() {
1:6d15c34:                     LOG.debug("Closing consumers on client: {}", client);
1:755ffd5:                     client.closeConsumers();
1:6d15c34:                 }
1:755ffd5:             }.start();
1:bef96a9:         } else {
1:bef96a9:             try {
1:bef96a9:                 Message message = consumer.receive(10);
1:166ab43:                 bufferMessageForDelivery(message, consumer);
1:bef96a9:             } catch (Exception e) {
1:6d15c34:                 LOG.warn("Error receiving message " + e.getMessage() + ". This exception is ignored.", e);
1:88fc7fe:             }
1:88fc7fe:         }
1:bef96a9:     }
1:166ab43: 
1:166ab43:     public void bufferMessageForDelivery(Message message, MessageConsumer consumer) {
1:166ab43:         if (message != null) {
1:166ab43:             synchronized (undeliveredMessages) {
1:166ab43:                 undeliveredMessages.addLast(new UndeliveredAjaxMessage(message, consumer));
1:bef96a9:             }
1:755ffd5:         }
1:755ffd5:     }
1:755ffd5: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b558116
/////////////////////////////////////////////////////////////////////////
1:                     if (!continuation.isResumed()) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:6d15c34
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Message for consumer: {} continuation: {}", consumer, continuation);
1: 
0:                     if (!continuation.isResumed() && !continuation.isInitial()) {
1:                         LOG.debug("Resuming suspended continuation {}", continuation);
1:                         LOG.debug("Message available, but continuation is already resumed. Buffer for next time.");
1:                 LOG.warn("Error receiving message " + e.getMessage() + ". This exception is ignored.", e);
1:                     LOG.debug("Closing consumers on client: {}", client);
1:                 }
1:                 LOG.warn("Error receiving message " + e.getMessage() + ". This exception is ignored.", e);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:166ab43
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
1: 
1: import org.apache.activemq.MessageAvailableListener;
1: 
1:     private final long maximumReadTimeout;
1:     private final AjaxWebClient client;
1:     private final LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("message is " + message);
1:                 if (message != null) {
0:                     if (!continuation.isResumed()) {
0:                         LOG.debug("Resuming suspended continuation " + continuation);
1:                         continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage(message, consumer));
0:                         LOG.debug("Message available, but continuation is already resumed.  Buffer for next time.");
1:                         bufferMessageForDelivery(message, consumer);
1: 
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 bufferMessageForDelivery(message, consumer);
1: 
1:     public void bufferMessageForDelivery(Message message, MessageConsumer consumer) {
1:         if (message != null) {
1:             synchronized (undeliveredMessages) {
1:                 undeliveredMessages.addLast(new UndeliveredAjaxMessage(message, consumer));
author:Alex Dean
-------------------------------------------------------------------------------
commit:c6ede16
/////////////////////////////////////////////////////////////////////////
0:     private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
/////////////////////////////////////////////////////////////////////////
1:     public LinkedList<UndeliveredAjaxMessage> getUndeliveredMessages() {
1:         return undeliveredMessages;
1:     
/////////////////////////////////////////////////////////////////////////
0:                         continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage( message, consumer ) );
0:                         bufferMessageForDelivery( message, consumer );
/////////////////////////////////////////////////////////////////////////
0:                 bufferMessageForDelivery( message, consumer );
0:     public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) {
0:             synchronized( undeliveredMessages ) {
0:                 undeliveredMessages.addLast( new UndeliveredAjaxMessage( message, consumer ) );
commit:88fc7fe
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug( "message is " + message );
0:                 if( message != null ) {
0:                     if( continuation.isSuspended() ) {
0:                         LOG.debug( "Resuming suspended continuation " + continuation );
0:                         continuation.setAttribute("message", message);
0:                         continuation.setAttribute("consumer", consumer);
1:                         continuation.resume();
1:                     } else {
0:                         LOG.debug( "Message available, but continuation is already resumed.  Buffer for next time." );
0:                         bufferMessageForDelivery( message );
1:                     }
1:                 }
1:             
/////////////////////////////////////////////////////////////////////////
0:                 bufferMessageForDelivery( message );
1:     
0:     public void bufferMessageForDelivery( Message message ) {
0:         if( message != null ) {
0:             synchronized( unconsumedMessages ) {
0:                 unconsumedMessages.addLast(message);
1:             }
1:         }
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AjaxListener.class);
commit:bef96a9
/////////////////////////////////////////////////////////////////////////
0: import java.util.LinkedList;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private LinkedList<Message> unconsumedMessages = new LinkedList<Message>();
1:         access();
/////////////////////////////////////////////////////////////////////////
0:     public LinkedList<Message> getUnconsumedMessages() {
0:         return unconsumedMessages;
1:     }
1: 
0:             LOG.debug("message for " + consumer + " continuation=" + continuation);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             try {
1:                 Message message = consumer.receive(10);
0:                 if (message != null) {
0:                     unconsumedMessages.addLast(message);
1:                 }
1:             } catch (Exception e) {
0:                 LOG.error("Error receiving message " + e, e);
1:             }
commit:755ffd5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: 
1: import org.eclipse.jetty.continuation.Continuation;
0: import org.eclipse.jetty.continuation.ContinuationSupport;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import org.apache.activemq.MessageAvailableListener;
1: 
1: /*
1:  * Listen for available messages and wakeup any continuations.
1:  */
1: public class AjaxListener implements MessageAvailableListener {
0:     private static final Log LOG = LogFactory.getLog(AjaxListener.class);
1:     
0:     private long maximumReadTimeout;
0:     private AjaxWebClient client;
1:     private long lastAccess;
1:     private Continuation continuation;
1: 
1:     AjaxListener(AjaxWebClient client, long maximumReadTimeout) {
1:         this.client = client;
1:         this.maximumReadTimeout = maximumReadTimeout;
1:     }
1: 
1:     public void access() {
1:         lastAccess = System.currentTimeMillis();
1:     }
1: 
1:     public synchronized void setContinuation(Continuation continuation) {
1:         this.continuation = continuation;
1:     }
1: 
1:     public synchronized void onMessageAvailable(MessageConsumer consumer) {
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("message for " + consumer + "continuation=" + continuation);
1:         }
1:         if (continuation != null) {
1:             try {
1:                 Message message = consumer.receive(10);
0:                 continuation.setAttribute("message", message);
0:                 continuation.setAttribute("consumer", consumer);
1:             } catch (Exception e) {
0:                 LOG.error("Error receiving message " + e, e);
1:             }
0:             continuation.resume();
1:         } else if (System.currentTimeMillis() - lastAccess > 2 * this.maximumReadTimeout) {
1:             new Thread() {
1:                 public void run() {
1:                     client.closeConsumers();
0:                 };
1:             }.start();
1:         }
1:     }
1: }
============================================================================