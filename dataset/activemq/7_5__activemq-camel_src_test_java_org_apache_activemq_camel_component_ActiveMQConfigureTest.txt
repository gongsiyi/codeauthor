1:5f96839: /**
1:5f96839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f96839:  * contributor license agreements.  See the NOTICE file distributed with
1:5f96839:  * this work for additional information regarding copyright ownership.
1:5f96839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f96839:  * (the "License"); you may not use this file except in compliance with
1:5f96839:  * the License.  You may obtain a copy of the License at
1:5f96839:  *
1:5f96839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f96839:  *
1:5f96839:  * Unless required by applicable law or agreed to in writing, software
1:5f96839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f96839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f96839:  * See the License for the specific language governing permissions and
1:5f96839:  * limitations under the License.
1:5f96839:  */
1:5f96839: package org.apache.activemq.camel.component;
1:5f96839: 
1:5f96839: import org.apache.activemq.spring.ActiveMQConnectionFactory;
1:5f96839: import org.apache.activemq.pool.PooledConnectionFactory;
1:5f96839: import org.apache.camel.Endpoint;
1:5cbddda: import org.apache.camel.component.jms.JmsConfiguration;
1:5f96839: import org.apache.camel.component.jms.JmsConsumer;
1:5f96839: import org.apache.camel.component.jms.JmsEndpoint;
1:5f96839: import org.apache.camel.component.jms.JmsProducer;
1:d4da85f: import org.apache.camel.processor.CamelLogProcessor;
1:5e6f8a1: import org.apache.camel.test.junit4.CamelTestSupport;
1:5e6f8a1: import org.junit.Test;
1:5f96839: import org.springframework.jms.core.JmsTemplate;
1:5f96839: import org.springframework.jms.listener.AbstractMessageListenerContainer;
1:80722e4: import org.springframework.jms.connection.SingleConnectionFactory;
1:5f96839: 
1:5f96839: /**
1:0bbc0ac:  * 
1:5f96839:  */
1:5e6f8a1: public class ActiveMQConfigureTest extends CamelTestSupport {
1:5e6f8a1: 
1:5e6f8a1:     @Test
1:5f96839:     public void testJmsTemplateUsesPoolingConnectionFactory() throws Exception {
1:5f96839:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo");
1:c1f4dc9:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
1:5f96839: 
1:e24a791:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
1:80722e4:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
1:5f96839:         assertIsInstanceOf(PooledConnectionFactory.class, template.getConnectionFactory());
1:5f96839:     }
1:5f96839: 
1:5e6f8a1:     @Test
1:80722e4:     public void testJmsTemplateUsesSingleConnectionFactory() throws Exception {
1:53756f3:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?useSingleConnection=true");
1:c1f4dc9:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
1:5f96839: 
1:e24a791:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
1:5f96839:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
1:80722e4:         SingleConnectionFactory connectionFactory = assertIsInstanceOf(SingleConnectionFactory.class, template.getConnectionFactory());
1:80722e4:         assertIsInstanceOf(ActiveMQConnectionFactory.class, connectionFactory.getTargetConnectionFactory());
1:80722e4:     }
1:5f96839: 
1:5e6f8a1:     @Test
1:5cbddda:     public void testSessionTransactedWithoutTransactionManager() throws Exception {
1:5cbddda:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?transacted=true&lazyCreateTransactionManager=false");
1:5cbddda:         JmsConfiguration configuration = endpoint.getConfiguration();
1:5cbddda:         
1:5cbddda:         assertIsInstanceOf(ActiveMQConfiguration.class, configuration);
1:5cbddda: 
1:5cbddda:         assertTrue("The JMS sessions are not transacted!", endpoint.isTransacted());
1:5cbddda:         assertTrue("The JMS sessions are not transacted!", configuration.isTransacted());
1:5cbddda: 
1:5cbddda:         assertNull("A transaction manager has been lazy-created!", endpoint.getTransactionManager());
1:5cbddda:         assertNull("A transaction manager has been lazy-created!", configuration.getTransactionManager());
1:5cbddda:     }
1:5cbddda: 
1:5cbddda:     @Test
1:80722e4:     public void testJmsTemplateDoesNotUsePoolingConnectionFactory() throws Exception {
1:53756f3:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?usePooledConnection=false");
1:c1f4dc9:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
3:80722e4: 
1:e24a791:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
1:80722e4:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
1:c8666f8:         assertIsInstanceOf(ActiveMQConnectionFactory.class, template.getConnectionFactory());
1:80722e4:     }
1:80722e4: 
1:5e6f8a1:     @Test
1:5f96839:     public void testListenerContainerUsesSpringConnectionFactory() throws Exception {
1:5f96839:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:topic:test.foo");
1:d4da85f:         JmsConsumer consumer = endpoint.createConsumer(new CamelLogProcessor());
1:5f96839: 
1:5f96839:         AbstractMessageListenerContainer listenerContainer = consumer.getListenerContainer();
1:5f96839:         assertEquals("pubSubDomain", true, listenerContainer.isPubSubDomain());
1:53756f3:         assertIsInstanceOf(PooledConnectionFactory.class, listenerContainer.getConnectionFactory());
1:5f96839:     }
1:5f96839: 
1:5f96839:     @Override
1:5f96839:     protected JmsEndpoint resolveMandatoryEndpoint(String uri) {
1:5f96839:         Endpoint endpoint = super.resolveMandatoryEndpoint(uri);
1:5f96839:         return assertIsInstanceOf(JmsEndpoint.class, endpoint);
1:5f96839:     }
1:5f96839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.processor.CamelLogProcessor;
/////////////////////////////////////////////////////////////////////////
1:         JmsConsumer consumer = endpoint.createConsumer(new CamelLogProcessor());
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:5cbddda
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.component.jms.JmsConfiguration;
/////////////////////////////////////////////////////////////////////////
1:     public void testSessionTransactedWithoutTransactionManager() throws Exception {
1:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?transacted=true&lazyCreateTransactionManager=false");
1:         JmsConfiguration configuration = endpoint.getConfiguration();
1:         
1:         assertIsInstanceOf(ActiveMQConfiguration.class, configuration);
1: 
1:         assertTrue("The JMS sessions are not transacted!", endpoint.isTransacted());
1:         assertTrue("The JMS sessions are not transacted!", configuration.isTransacted());
1: 
1:         assertNull("A transaction manager has been lazy-created!", endpoint.getTransactionManager());
1:         assertNull("A transaction manager has been lazy-created!", configuration.getTransactionManager());
1:     }
1: 
1:     @Test
author:Willem Ning Jiang
-------------------------------------------------------------------------------
commit:5e6f8a1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.junit4.CamelTestSupport;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQConfigureTest extends CamelTestSupport {
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8ba02a3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.processor.CamelLogger;
/////////////////////////////////////////////////////////////////////////
0:         JmsConsumer consumer = endpoint.createConsumer(new CamelLogger());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c1f4dc9
/////////////////////////////////////////////////////////////////////////
1:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
/////////////////////////////////////////////////////////////////////////
1:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
/////////////////////////////////////////////////////////////////////////
1:         JmsProducer producer = (JmsProducer) endpoint.createProducer();
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c8666f8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertIsInstanceOf(ActiveMQConnectionFactory.class, template.getConnectionFactory());
commit:5f96839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component;
1: 
1: import org.apache.activemq.pool.PooledConnectionFactory;
1: import org.apache.activemq.spring.ActiveMQConnectionFactory;
0: import org.apache.camel.ContextTestSupport;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.component.jms.JmsConsumer;
1: import org.apache.camel.component.jms.JmsEndpoint;
1: import org.apache.camel.component.jms.JmsProducer;
0: import org.apache.camel.processor.Logger;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.listener.AbstractMessageListenerContainer;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class ActiveMQConfigureTest extends ContextTestSupport {
1:     
1:     public void testJmsTemplateUsesPoolingConnectionFactory() throws Exception {
1:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo");
0:         JmsProducer producer = endpoint.createProducer();
1: 
0:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getTemplate());
1:         assertIsInstanceOf(PooledConnectionFactory.class, template.getConnectionFactory());
1:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
1:     }
1: 
1:     public void testListenerContainerUsesSpringConnectionFactory() throws Exception {
1:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:topic:test.foo");
0:         JmsConsumer consumer = endpoint.createConsumer(new Logger());
1: 
1:         AbstractMessageListenerContainer listenerContainer = consumer.getListenerContainer();
0:         assertIsInstanceOf(ActiveMQConnectionFactory.class, listenerContainer.getConnectionFactory());
1:         assertEquals("pubSubDomain", true, listenerContainer.isPubSubDomain());
1: 
1:     }
1: 
1:     @Override
1:     protected JmsEndpoint resolveMandatoryEndpoint(String uri) {
1:         Endpoint endpoint = super.resolveMandatoryEndpoint(uri);
1:         return assertIsInstanceOf(JmsEndpoint.class, endpoint);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:e24a791
/////////////////////////////////////////////////////////////////////////
1:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
/////////////////////////////////////////////////////////////////////////
1:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
/////////////////////////////////////////////////////////////////////////
1:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getInOutTemplate());
commit:53756f3
/////////////////////////////////////////////////////////////////////////
0:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo");
/////////////////////////////////////////////////////////////////////////
1:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?useSingleConnection=true");
/////////////////////////////////////////////////////////////////////////
1:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?usePooledConnection=false");
/////////////////////////////////////////////////////////////////////////
1:         assertIsInstanceOf(PooledConnectionFactory.class, listenerContainer.getConnectionFactory());
commit:80722e4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.pool.PooledConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.jms.connection.SingleConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?usePooledConnection=true");
0:         JmsProducer producer = endpoint.createProducer();
1: 
0:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getTemplate());
1:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
0:         assertIsInstanceOf(PooledConnectionFactory.class, template.getConnectionFactory());
1:     }
1: 
1:     public void testJmsTemplateUsesSingleConnectionFactory() throws Exception {
1:         SingleConnectionFactory connectionFactory = assertIsInstanceOf(SingleConnectionFactory.class, template.getConnectionFactory());
1:         assertIsInstanceOf(ActiveMQConnectionFactory.class, connectionFactory.getTargetConnectionFactory());
1:     }
1: 
1:     public void testJmsTemplateDoesNotUsePoolingConnectionFactory() throws Exception {
0:         JmsEndpoint endpoint = resolveMandatoryEndpoint("activemq:test.foo?useSingleConnection=false");
0:         JmsProducer producer = endpoint.createProducer();
1: 
0:         JmsTemplate template = assertIsInstanceOf(JmsTemplate.class, producer.getTemplate());
1:         assertEquals("pubSubDomain", false, template.isPubSubDomain());
0:         assertIsInstanceOf(ActiveMQConnectionFactory.class, template.getConnectionFactory());
/////////////////////////////////////////////////////////////////////////
0:         SingleConnectionFactory connectionFactory = assertIsInstanceOf(SingleConnectionFactory.class, listenerContainer.getConnectionFactory());
0:         assertIsInstanceOf(ActiveMQConnectionFactory.class, connectionFactory.getTargetConnectionFactory());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
============================================================================