1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.jdbc;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.sql.SQLException;
1:d29ca2a: import java.util.Set;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:64f3492: import org.apache.activemq.command.ActiveMQTopic;
1:266d23e: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:a6a6a70: import org.apache.activemq.command.ProducerId;
1:d29ca2a: import org.apache.activemq.command.SubscriptionInfo;
1:64f3492: import org.apache.activemq.command.XATransactionId;
1:9b64c37: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:f812e34: public interface JDBCAdapter {
1:4843dd4: 
1:fc00993:     void setStatements(Statements statementProvider);
1:4843dd4:     
1:fc00993:     void doCreateTables(TransactionContext c) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doDropTables(TransactionContext c) throws SQLException, IOException;
1:d29ca2a: 
1:64f3492:     void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority, XATransactionId xid) throws SQLException, IOException;
1:d29ca2a: 
1:24a7626:     void doAddMessageReference(TransactionContext c, long sequence, MessageId messageId, ActiveMQDestination destination, long expirationTime, String messageRef) throws SQLException, IOException;
1:d29ca2a: 
1:24a7626:     byte[] doGetMessage(TransactionContext c, MessageId id) throws SQLException, IOException;
1:d29ca2a:     
1:1cec28c:     byte[] doGetMessageById(TransactionContext c, long storeSequenceId) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     String doGetMessageReference(TransactionContext c, long id) throws SQLException, IOException;
1:d29ca2a: 
1:64f3492:     void doRemoveMessage(TransactionContext c, long seq, XATransactionId xid) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doRecover(TransactionContext c, ActiveMQDestination destination, JDBCMessageRecoveryListener listener) throws Exception;
1:d29ca2a: 
1:64f3492:     void doSetLastAck(TransactionContext c, ActiveMQDestination destination, XATransactionId xid, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doRecoverSubscription(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, JDBCMessageRecoveryListener listener)
1:f812e34:         throws Exception;
1:d29ca2a: 
1:4f5e620:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long priority, int maxReturned,
1:fc00993:                                JDBCMessageRecoveryListener listener) throws Exception;
1:f812e34: 
1:4679c8a:     void doRecoverNextMessagesWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long priority, int maxReturned,
2:f812e34:                                JDBCMessageRecoveryListener listener) throws Exception;
1:f812e34: 
1:4679c8a:     void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive, boolean isPrioritizeMessages) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     SubscriptionInfo doGetSubscriberEntry(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
1:d29ca2a: 
1:4f5e620:     long[] getStoreSequenceId(TransactionContext c, ActiveMQDestination destination, MessageId messageID) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doRemoveAllMessages(TransactionContext c, ActiveMQDestination destinationName) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doDeleteSubscription(TransactionContext c, ActiveMQDestination destinationName, String clientId, String subscriptionName) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
1:d29ca2a: 
1:1cec28c:     long doGetLastMessageStoreSequenceId(TransactionContext c) throws SQLException, IOException;
1:d29ca2a: 
1:933eb2f:     Set<ActiveMQDestination> doGetDestinations(TransactionContext c) throws SQLException, IOException;
1:d29ca2a: 
1:fc00993:     void setUseExternalMessageReferences(boolean useExternalMessageReferences);
1:d29ca2a: 
1:fc00993:     SubscriptionInfo[] doGetAllSubscriptions(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
1:d29ca2a: 
1:4679c8a:     int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, boolean isPrioritizeMessages) throws SQLException, IOException;
1:4679c8a: 
1:fc00993:     int doGetMessageCount(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
1:fc00993: 
1:a2697b8:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long[] lastRecoveredEntries, long maxSeq, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
1:12f0195: 
1:fc00993:     long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
1:8732f70: 
1:ae840c4:     void doMessageIdScan(TransactionContext c, int limit, JDBCMessageIdScanListener listener) throws SQLException, IOException;
1:a6a6a70: 
1:a6a6a70:     long doGetLastProducerSequenceId(TransactionContext c, ProducerId id) throws SQLException, IOException;
1:4fbf92d: 
1:64f3492:     void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, XATransactionId xid, String clientId, String subscriptionName, long re, long re1) throws SQLException, IOException;
1:fa4481c: 
1:4fbf92d:     public int getMaxRows();
1:4fbf92d: 
1:4fbf92d:     public void setMaxRows(int maxRows);
1:b6f63b0: 
1:b6f63b0:     void doRecordDestination(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
1:64f3492: 
1:64f3492:     void doRecoverPreparedOps(TransactionContext c, JdbcMemoryTransactionStore jdbcMemoryTransactionStore) throws SQLException, IOException;
1:64f3492: 
1:3155c62:     void doCommitAddOp(TransactionContext c, long preparedSequence, long sequence) throws SQLException, IOException;
1:64f3492: 
1:64f3492:     void doClearLastAck(TransactionContext c, ActiveMQDestination destination, byte priority, String subId, String subName) throws SQLException, IOException;
1:266d23e: 
1:266d23e:     void doUpdateMessage(TransactionContext c, ActiveMQDestination destination, MessageId id, byte[] data) throws SQLException, IOException;
1:78c959a: 
1:78c959a:     String limitQuery(String query);
1:f812e34: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:78c959a
/////////////////////////////////////////////////////////////////////////
1: 
1:     String limitQuery(String query);
author:gtully
-------------------------------------------------------------------------------
commit:a2697b8
/////////////////////////////////////////////////////////////////////////
1:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long[] lastRecoveredEntries, long maxSeq, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
commit:3155c62
/////////////////////////////////////////////////////////////////////////
1:     void doCommitAddOp(TransactionContext c, long preparedSequence, long sequence) throws SQLException, IOException;
commit:6348d11
/////////////////////////////////////////////////////////////////////////
0:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long maxSeq, long nextSeq, long priority, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1: 
1:     void doUpdateMessage(TransactionContext c, ActiveMQDestination destination, MessageId id, byte[] data) throws SQLException, IOException;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     Set<ActiveMQDestination> doGetDestinations(TransactionContext c) throws SQLException, IOException;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
1:     void setStatements(Statements statementProvider);
1:     void doCreateTables(TransactionContext c) throws SQLException, IOException;
1:     void doDropTables(TransactionContext c) throws SQLException, IOException;
0:     void doAddMessage(TransactionContext c, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration) throws SQLException, IOException;
0:     void doAddMessageReference(TransactionContext c, MessageId messageId, ActiveMQDestination destination, long expirationTime, String messageRef) throws SQLException, IOException;
0:     byte[] doGetMessage(TransactionContext c, long seq) throws SQLException, IOException;
1:     String doGetMessageReference(TransactionContext c, long id) throws SQLException, IOException;
0:     void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
1:     void doRecover(TransactionContext c, ActiveMQDestination destination, JDBCMessageRecoveryListener listener) throws Exception;
0:     void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq) throws SQLException, IOException;
1:     void doRecoverSubscription(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, JDBCMessageRecoveryListener listener)
0:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, int maxReturned,
1:                                JDBCMessageRecoveryListener listener) throws Exception;
0:     void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive) throws SQLException, IOException;
1:     SubscriptionInfo doGetSubscriberEntry(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
0:     long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException, IOException;
1:     void doRemoveAllMessages(TransactionContext c, ActiveMQDestination destinationName) throws SQLException, IOException;
1:     void doDeleteSubscription(TransactionContext c, ActiveMQDestination destinationName, String clientId, String subscriptionName) throws SQLException, IOException;
1:     void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
0:     long doGetLastMessageBrokerSequenceId(TransactionContext c) throws SQLException, IOException;
0:     Set doGetDestinations(TransactionContext c) throws SQLException, IOException;
1:     void setUseExternalMessageReferences(boolean useExternalMessageReferences);
1:     SubscriptionInfo[] doGetAllSubscriptions(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
0:     int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
1:     int doGetMessageCount(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
0:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
1: 
1:     long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public interface JDBCAdapter {
0:     public abstract void doCreateTables(TransactionContext c) throws SQLException, IOException;
0:     public abstract void doDropTables(TransactionContext c) throws SQLException, IOException;
0:     public abstract void doAddMessage(TransactionContext c, MessageId messageID,
0:                                       ActiveMQDestination destination, byte[] data, long expiration)
0:         throws SQLException, IOException;
0:     public abstract void doAddMessageReference(TransactionContext c, MessageId messageId,
0:                                                ActiveMQDestination destination, long expirationTime,
0:                                                String messageRef) throws SQLException, IOException;
0:     public abstract byte[] doGetMessage(TransactionContext c, long seq) throws SQLException, IOException;
0:     public abstract String doGetMessageReference(TransactionContext c, long id) throws SQLException,
0:         IOException;
0:     public abstract void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
0:     public abstract void doRecover(TransactionContext c, ActiveMQDestination destination,
1:                                    JDBCMessageRecoveryListener listener) throws Exception;
0:     public abstract void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
0:                                       String subscriptionName, long seq) throws SQLException, IOException;
0:     public abstract void doRecoverSubscription(TransactionContext c, ActiveMQDestination destination,
0:                                                String clientId, String subscriptionName,
1:                                                JDBCMessageRecoveryListener listener) throws Exception;
0:     public abstract void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination,
0:                                                String clientId, String subscriptionName, long seq,
0:                                                int maxReturned, JDBCMessageRecoveryListener listener)
1:         throws Exception;
0:     public abstract void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo,
0:                                               boolean retroactive) throws SQLException, IOException;
0:     public abstract SubscriptionInfo doGetSubscriberEntry(TransactionContext c,
0:                                                           ActiveMQDestination destination, String clientId,
0:                                                           String subscriptionName) throws SQLException,
0:         IOException;
0:     public abstract long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException,
0:         IOException;
0:     public abstract void doRemoveAllMessages(TransactionContext c, ActiveMQDestination destinationName)
0:         throws SQLException, IOException;
0:     public abstract void doDeleteSubscription(TransactionContext c, ActiveMQDestination destinationName,
0:                                               String clientId, String subscriptionName) throws SQLException,
0:         IOException;
0:     public abstract void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
0:     public abstract long doGetLastMessageBrokerSequenceId(TransactionContext c) throws SQLException,
0:         IOException;
0:     public abstract Set doGetDestinations(TransactionContext c) throws SQLException, IOException;
0:     public abstract SubscriptionInfo[] doGetAllSubscriptions(TransactionContext c,
0:                                                              ActiveMQDestination destination)
0:         throws SQLException, IOException;
0:     public int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination,
0:                                                   String clientId, String subscriptionName)
0:         throws SQLException, IOException;
0:     public int doGetMessageCount(TransactionContext c, ActiveMQDestination destination) throws SQLException,
0:         IOException;
1: 
0:     public void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq,
0:                                       int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
1: 
0:     public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c,
0:                                                          ActiveMQDestination destination, String clientId,
0:                                                          String subscriberName) throws SQLException,
0:         IOException;
1: }
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:     public abstract void doSetSubscriberEntry(TransactionContext c,SubscriptionInfo subscriptionInfo,boolean retroactive) throws SQLException,IOException;
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:             throws Exception;
0:             String subscriptionName, JDBCMessageRecoveryListener listener) throws Exception;
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void setStatements(Statements statementProvider);
1:     
commit:9b64c37
/////////////////////////////////////////////////////////////////////////
0:     public abstract SubscriptionInfo[] doGetAllSubscriptions(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.IOException;
1: import java.sql.SQLException;
1: import java.util.Set;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public interface JDBCAdapter {
1: 
0:     public abstract void doCreateTables(TransactionContext c) throws SQLException, IOException;
1: 
0:     public abstract void doDropTables(TransactionContext c) throws SQLException, IOException;
1: 
0:     public abstract void doAddMessage(TransactionContext c, MessageId messageID, ActiveMQDestination destination, byte[] data,
0:             long expiration) throws SQLException, IOException;
0:     public abstract void doAddMessageReference(TransactionContext c, MessageId messageId, ActiveMQDestination destination, long expirationTime, String messageRef) throws SQLException, IOException;
1: 
0:     public abstract byte[] doGetMessage(TransactionContext c, long seq) throws SQLException, IOException;
0:     public abstract String doGetMessageReference(TransactionContext c, long id) throws SQLException, IOException;
1: 
0:     public abstract void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
1: 
0:     public abstract void doRecover(TransactionContext c, ActiveMQDestination destination, JDBCMessageRecoveryListener listener)
0:             throws Throwable;
1: 
0:     public abstract void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq) throws SQLException,
0:             IOException;
1: 
0:     public abstract void doRecoverSubscription(TransactionContext c, ActiveMQDestination destination, String clientId,
0:             String subscriptionName, JDBCMessageRecoveryListener listener) throws Throwable;
1: 
0:     public abstract void doSetSubscriberEntry(TransactionContext c, ActiveMQDestination destination, String clientId,
0:             String subscriptionName, String selector, boolean retroactive) throws SQLException, IOException;
1: 
0:     public abstract SubscriptionInfo doGetSubscriberEntry(TransactionContext c, ActiveMQDestination destination, 
0:             String clientId, String subscriptionName)
0:             throws SQLException, IOException;
1: 
0:     public abstract long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException, IOException;
1: 
0:     public abstract void doRemoveAllMessages(TransactionContext c, ActiveMQDestination destinationName) throws SQLException, IOException;
1: 
0:     public abstract void doDeleteSubscription(TransactionContext c, ActiveMQDestination destinationName, String clientId, String subscriptionName)
0:             throws SQLException, IOException;
1: 
0:     public abstract void doDeleteOldMessages(TransactionContext c)
0:         throws SQLException, IOException;
1: 
0:     public abstract long doGetLastMessageBrokerSequenceId(TransactionContext c) throws SQLException, IOException;
1: 
0:     public abstract Set doGetDestinations(TransactionContext c) throws SQLException, IOException;
1: 
0:     public abstract void setUseExternalMessageReferences(boolean useExternalMessageReferences);
1: 
1: 
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.XATransactionId;
/////////////////////////////////////////////////////////////////////////
1:     void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority, XATransactionId xid) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
1:     void doRemoveMessage(TransactionContext c, long seq, XATransactionId xid) throws SQLException, IOException;
1:     void doSetLastAck(TransactionContext c, ActiveMQDestination destination, XATransactionId xid, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
1:     void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, XATransactionId xid, String clientId, String subscriptionName, long re, long re1) throws SQLException, IOException;
1: 
1:     void doRecoverPreparedOps(TransactionContext c, JdbcMemoryTransactionStore jdbcMemoryTransactionStore) throws SQLException, IOException;
1: 
0:     void doCommitAddOp(TransactionContext c, long storeSequenceIdForMessageId) throws SQLException, IOException;
1: 
1:     void doClearLastAck(TransactionContext c, ActiveMQDestination destination, byte priority, String subId, String subName) throws SQLException, IOException;
commit:b6f63b0
/////////////////////////////////////////////////////////////////////////
1: 
1:     void doRecordDestination(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
commit:fe31092
/////////////////////////////////////////////////////////////////////////
0:     void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
commit:4fbf92d
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxRows();
1: 
1:     public void setMaxRows(int maxRows);
commit:4679c8a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     void doRecoverNextMessagesWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long priority, int maxReturned,
0:                                JDBCMessageRecoveryListener listener) throws Exception;
1: 
1:     void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive, boolean isPrioritizeMessages) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
0:     void doDeleteOldMessages(TransactionContext c, boolean isPrioritizedMessages) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
1:     int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, boolean isPrioritizeMessages) throws SQLException, IOException;
0:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, long priority, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
commit:fa4481c
/////////////////////////////////////////////////////////////////////////
0:     long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
1: 
0:     void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long re, long re1) throws SQLException, IOException;
commit:3432a75
/////////////////////////////////////////////////////////////////////////
0:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, long priority, int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
0:     long[] doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerId;
/////////////////////////////////////////////////////////////////////////
0:     long getStoreSequenceId(TransactionContext c, ActiveMQDestination destination, MessageId messageID) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
1: 
1:     long doGetLastProducerSequenceId(TransactionContext c, ProducerId id) throws SQLException, IOException;
commit:8732f70
/////////////////////////////////////////////////////////////////////////
1: 
0:     void doMessageIdScan(TransactionContext c, ActiveMQDestination destination, long limit, JDBCMessageIdScanListener listener) throws SQLException, IOException;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4f5e620
/////////////////////////////////////////////////////////////////////////
0:     void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
1:     void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long priority, int maxReturned,
1:     long[] getStoreSequenceId(TransactionContext c, ActiveMQDestination destination, MessageId messageID) throws SQLException, IOException;
commit:12f0195
/////////////////////////////////////////////////////////////////////////
1:     
0:     void setPrioritizedMessages(boolean prioritizedMessages);
0:     void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority) throws SQLException, IOException;
commit:1cec28c
/////////////////////////////////////////////////////////////////////////
0:     
1:     byte[] doGetMessageById(TransactionContext c, long storeSequenceId) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
1:     long doGetLastMessageStoreSequenceId(TransactionContext c) throws SQLException, IOException;
commit:24a7626
/////////////////////////////////////////////////////////////////////////
0:     void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration) throws SQLException, IOException;
1:     void doAddMessageReference(TransactionContext c, long sequence, MessageId messageId, ActiveMQDestination destination, long expirationTime, String messageRef) throws SQLException, IOException;
1:     byte[] doGetMessage(TransactionContext c, MessageId id) throws SQLException, IOException;
/////////////////////////////////////////////////////////////////////////
0:     long getStoreSequenceId(TransactionContext c, MessageId messageID) throws SQLException, IOException;
commit:ae840c4
/////////////////////////////////////////////////////////////////////////
1:     void doMessageIdScan(TransactionContext c, int limit, JDBCMessageIdScanListener listener) throws SQLException, IOException;
author:Robert Davies
-------------------------------------------------------------------------------
commit:4597ddd
/////////////////////////////////////////////////////////////////////////
0:     
0:     public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c,ActiveMQDestination destination,String clientId, String subscriberName) throws SQLException,IOException;
commit:5367f1e
/////////////////////////////////////////////////////////////////////////
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:     
0:     public int doGetMessageCount(TransactionContext c, ActiveMQDestination destination) throws SQLException, IOException;
0:     
0:     public void doRecoverNextMessages(TransactionContext c,ActiveMQDestination destination,long nextSeq,int maxReturned,
0:             JDBCMessageRecoveryListener listener) throws Exception;
0: }
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
0: public interface JDBCAdapter{
0: 
0:     public abstract void doCreateTables(TransactionContext c) throws SQLException,IOException;
0:     public abstract void doDropTables(TransactionContext c) throws SQLException,IOException;
0:     public abstract void doAddMessage(TransactionContext c,MessageId messageID,ActiveMQDestination destination,
0:             byte[] data,long expiration) throws SQLException,IOException;
0:     public abstract void doAddMessageReference(TransactionContext c,MessageId messageId,
0:             ActiveMQDestination destination,long expirationTime,String messageRef) throws SQLException,IOException;
0:     public abstract byte[] doGetMessage(TransactionContext c,long seq) throws SQLException,IOException;
0:     public abstract String doGetMessageReference(TransactionContext c,long id) throws SQLException,IOException;
0:     public abstract void doRemoveMessage(TransactionContext c,long seq) throws SQLException,IOException;
0:     public abstract void doRecover(TransactionContext c,ActiveMQDestination destination,
0:             JDBCMessageRecoveryListener listener) throws Exception;
0:     public abstract void doSetLastAck(TransactionContext c,ActiveMQDestination destination,String clientId,
0:             String subscriptionName,long seq) throws SQLException,IOException;
0:     public abstract void doRecoverSubscription(TransactionContext c,ActiveMQDestination destination,String clientId,
0:             String subscriptionName,JDBCMessageRecoveryListener listener) throws Exception;
0:     public abstract void doRecoverNextMessages(TransactionContext c,ActiveMQDestination destination,String clientId,
0:             String subscriptionName,long seq,int maxReturned,JDBCMessageRecoveryListener listener) throws Exception;
0:     public abstract void doSetSubscriberEntry(TransactionContext c,ActiveMQDestination destination,String clientId,
0:             String subscriptionName,String selector,boolean retroactive) throws SQLException,IOException;
0:     public abstract SubscriptionInfo doGetSubscriberEntry(TransactionContext c,ActiveMQDestination destination,
0:             String clientId,String subscriptionName) throws SQLException,IOException;
0:     public abstract long getBrokerSequenceId(TransactionContext c,MessageId messageID) throws SQLException,IOException;
0:     public abstract void doRemoveAllMessages(TransactionContext c,ActiveMQDestination destinationName)
0:             throws SQLException,IOException;
0: 
0:     public abstract void doDeleteSubscription(TransactionContext c,ActiveMQDestination destinationName,String clientId,
0:             String subscriptionName) throws SQLException,IOException;
0: 
0:     public abstract void doDeleteOldMessages(TransactionContext c) throws SQLException,IOException;
0: 
0:     public abstract long doGetLastMessageBrokerSequenceId(TransactionContext c) throws SQLException,IOException;
0: 
0:     public abstract Set doGetDestinations(TransactionContext c) throws SQLException,IOException;
0:     public abstract SubscriptionInfo[] doGetAllSubscriptions(TransactionContext c,ActiveMQDestination destination)
0:             throws SQLException,IOException;
0:     public int doGetDurableSubscriberMessageCount(TransactionContext c,ActiveMQDestination destination,String clientId,
0:             String subscriptionName) throws SQLException,IOException;
0:     public void doGetPrevDurableSubscriberMessageIdStatement(TransactionContext c,ActiveMQDestination destination,
0:             String clientId,String subscriberName,long id,JDBCMessageRecoveryListener listener) throws Exception;
0: 
0:     public void doGetNextDurableSubscriberMessageIdStatement(TransactionContext c,ActiveMQDestination destination,
0:             String clientId,String subscriberName,long id,JDBCMessageRecoveryListener listener) throws Exception;
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0:     
0:     public abstract void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, String clientId,
0:                     String subscriptionName, long seq,int maxReturned,JDBCMessageRecoveryListener listener) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:     public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c, ActiveMQDestination destination,String clientId,String subscriberName) throws SQLException, IOException;
0:     
0:     public int doGetDurableSubscriberMessageCount(TransactionContext c,ActiveMQDestination destination,String clientId,String subscriptionName) throws SQLException, IOException;
============================================================================