1:08695ab: /**
1:08695ab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:08695ab:  * contributor license agreements.  See the NOTICE file distributed with
1:08695ab:  * this work for additional information regarding copyright ownership.
1:08695ab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:08695ab:  * (the "License"); you may not use this file except in compliance with
1:08695ab:  * the License.  You may obtain a copy of the License at
1:08695ab:  *
1:08695ab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:08695ab:  *
1:08695ab:  * Unless required by applicable law or agreed to in writing, software
1:08695ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:08695ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:08695ab:  * See the License for the specific language governing permissions and
1:08695ab:  * limitations under the License.
1:08695ab:  */
1:08695ab: package org.apache.activemq.transport.nio;
5:08695ab: 
1:08695ab: import junit.framework.TestCase;
1:08695ab: import org.apache.activemq.ActiveMQConnection;
1:08695ab: import org.apache.activemq.ActiveMQConnectionFactory;
1:08695ab: import org.apache.activemq.broker.BrokerService;
1:08695ab: import org.apache.activemq.broker.jmx.DestinationView;
1:e67d486: import org.apache.activemq.broker.jmx.ProducerViewMBean;
1:08695ab: import org.apache.activemq.broker.jmx.QueueView;
1:08695ab: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:08695ab: import org.apache.activemq.broker.region.policy.PolicyMap;
1:08695ab: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:08695ab: import org.apache.activemq.command.ActiveMQDestination;
1:08695ab: import org.apache.activemq.command.ActiveMQQueue;
1:08695ab: import org.slf4j.Logger;
1:08695ab: import org.slf4j.LoggerFactory;
1:08695ab: 
1:08695ab: import javax.jms.*;
1:08695ab: import javax.management.ObjectName;
1:08695ab: import java.util.ArrayList;
1:08695ab: import java.util.List;
1:08695ab: import java.util.Map;
1:08695ab: import java.util.concurrent.ExecutorService;
1:08695ab: import java.util.concurrent.Executors;
1:08695ab: 
1:08695ab: /*
1:08695ab:  demonstrates that with nio it does not make sense to block on the broker but thread pool
1:08695ab:  shold grow past initial corepoolsize of 10
1:08695ab:  */
1:08695ab: public class NIOAsyncSendWithPFCTest extends TestCase {
1:08695ab: 
1:08695ab:     private static final Logger LOG = LoggerFactory.getLogger(NIOAsyncSendWithPFCTest.class);
1:08695ab: 
1:08695ab:     private static String TRANSPORT_URL = "nio://0.0.0.0:0";
1:08695ab:     private static final String DESTINATION_ONE = "testQ1";
1:08695ab:     private static final String DESTINATION_TWO = "testQ2";
1:08695ab:     private static final int MESSAGES_TO_SEND = 100;
1:08695ab:     private static int NUMBER_OF_PRODUCERS = 10;
1:08695ab: 
1:08695ab:     protected BrokerService createBroker() throws Exception {
1:08695ab: 
1:08695ab:         BrokerService broker = new BrokerService();
1:08695ab:         broker.setDeleteAllMessagesOnStartup(true);
1:08695ab: 
1:08695ab:         PolicyMap policyMap = new PolicyMap();
1:08695ab:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:08695ab:         PolicyEntry pe = new PolicyEntry();
1:08695ab: 
1:08695ab: 
1:08695ab:         pe.setMemoryLimit(256000);
1:08695ab:         pe.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:08695ab: 
1:08695ab: 
1:08695ab:         pe.setQueue(">");
1:08695ab:         entries.add(pe);
1:08695ab:         policyMap.setPolicyEntries(entries);
1:08695ab:         broker.setDestinationPolicy(policyMap);
1:08695ab: 
1:08695ab: 
1:08695ab:         broker.addConnector(TRANSPORT_URL);
1:08695ab:         broker.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue(DESTINATION_ONE)});
1:08695ab: 
1:08695ab:         broker.start();
1:08695ab:         TRANSPORT_URL = broker.getTransportConnectorByScheme("nio").getPublishableConnectString();
1:08695ab:         return broker;
1:08695ab:     }
1:e67d486: 
1:08695ab:     /**
1:08695ab:      * Test creates 10 producer who send to a single destination using Async mode.
1:08695ab:      * Producer flow control kicks in for that destination. When producer flow control is blocking sends
1:08695ab:      * Test tries to create another JMS connection to the nio.
1:08695ab:      */
1:08695ab:     public void testAsyncSendPFCNewConnection() throws Exception {
1:08695ab: 
1:08695ab: 
1:08695ab:         BrokerService broker = createBroker();
1:08695ab:         broker.waitUntilStarted();
1:08695ab: 
1:08695ab: 
1:08695ab:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:08695ab:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1:08695ab: 
1:08695ab:         try {
1:08695ab: 
1:08695ab:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1:e67d486: 
1:08695ab:                 executorService.submit(new ProducerTask());
1:08695ab: 
1:e67d486:             }
1:08695ab: 
1:08695ab:             //wait till producer follow control kicks in
1:08695ab:             waitForProducerFlowControl(broker, queueView);
1:08695ab: 
1:08695ab: 
1:08695ab:             try {
1:e67d486:                 sendMessages(1, DESTINATION_TWO, false);
2:08695ab:             } catch (Exception ex) {
1:08695ab:                 LOG.error("Ex on send  new connection", ex);
1:08695ab:                 fail("*** received the following exception when creating addition producer new connection:" + ex);
1:08695ab:             }
1:08695ab: 
1:08695ab: 
1:08695ab:         } finally {
1:08695ab:             broker.stop();
1:08695ab:             broker.waitUntilStopped();
1:08695ab:         }
1:08695ab: 
1:08695ab: 
1:08695ab:     }
1:08695ab: 
1:08695ab: 
1:08695ab:     public void testAsyncSendPFCExistingConnection() throws Exception {
1:08695ab: 
1:08695ab: 
1:08695ab:         BrokerService broker = createBroker();
1:08695ab:         broker.waitUntilStarted();
1:08695ab: 
1:08695ab:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL + "?wireFormat.maxInactivityDuration=5000");
1:08695ab:         ActiveMQConnection exisitngConnection = (ActiveMQConnection) connectionFactory.createConnection();
1:08695ab: 
1:08695ab: 
1:08695ab:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:08695ab:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1:08695ab: 
1:08695ab:         try {
1:08695ab: 
1:08695ab:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1:08695ab: 
1:08695ab:                 executorService.submit(new ProducerTask());
1:08695ab: 
1:08695ab:             }
1:08695ab: 
1:08695ab:             //wait till producer follow control kicks in
1:08695ab:             waitForProducerFlowControl(broker, queueView);
1:e67d486:             assertTrue("Producer view blocked", getProducerView(broker, DESTINATION_ONE).isProducerBlocked());
1:08695ab: 
1:08695ab:             try {
1:08695ab:                 Session producerSession = exisitngConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:08695ab:             } catch (Exception ex) {
1:08695ab:                 LOG.error("Ex on create session", ex);
1:08695ab:                 fail("*** received the following exception when creating producer session:" + ex);
1:08695ab:             }
1:08695ab: 
1:08695ab: 
1:08695ab:         } finally {
1:08695ab:             broker.stop();
1:08695ab:             broker.waitUntilStopped();
1:08695ab:         }
1:08695ab: 
1:08695ab: 
1:08695ab: 
1:08695ab:     }
1:08695ab: 
1:e67d486:     public void testSyncSendPFCExistingConnection() throws Exception {
1:e67d486: 
1:e67d486:         BrokerService broker = createBroker();
1:e67d486:         broker.waitUntilStarted();
1:e67d486: 
1:e67d486:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:e67d486:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1:e67d486: 
1:e67d486:         try {
1:e67d486: 
1:e67d486:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1:e67d486: 
1:e67d486:                 executorService.submit(new ProducerTask(true));
1:e67d486: 
1:e67d486:             }
1:e67d486: 
1:e67d486:             //wait till producer follow control kicks in
1:e67d486:             waitForProducerFlowControl(broker, queueView);
1:e67d486:             assertTrue("Producer view blocked", getProducerView(broker, DESTINATION_ONE).isProducerBlocked());
1:e67d486: 
1:e67d486: 
1:e67d486:         } finally {
1:e67d486:             broker.stop();
1:e67d486:             broker.waitUntilStopped();
1:e67d486:         }
1:08695ab: 
1:08695ab:     }
1:08695ab: 
1:08695ab:     private void waitForProducerFlowControl(BrokerService broker, QueueView queueView) throws Exception {
1:08695ab: 
1:08695ab: 
1:08695ab:         boolean blockingAllSends;
1:08695ab:         do {
1:e67d486:             blockingAllSends = queueView.getBlockedSends() >= 10;
1:e67d486:             LOG.info("Blocking all sends:" + queueView.getBlockedSends());
1:08695ab:             Thread.sleep(1000);
1:08695ab: 
1:08695ab:         } while (!blockingAllSends);
1:08695ab:     }
1:08695ab: 
1:08695ab:     class ProducerTask implements Runnable {
1:e67d486:         boolean sync = false;
1:e67d486: 
1:e67d486:         ProducerTask() {
1:e67d486:             this(false);
1:e67d486:         }
1:e67d486: 
1:e67d486:         ProducerTask(boolean sync) {
1:e67d486:             this.sync = sync;
1:e67d486:         }
1:08695ab: 
1:08695ab: 
1:08695ab:         @Override
1:08695ab:         public void run() {
1:08695ab:             try {
1:08695ab:                 //send X messages
1:e67d486:                 sendMessages(MESSAGES_TO_SEND, DESTINATION_ONE, sync);
1:08695ab:             } catch (Exception e) {
1:08695ab:                 e.printStackTrace();
1:08695ab:             }
1:08695ab:         }
1:08695ab:     }
1:08695ab: 
1:08695ab: 
1:e67d486:     private Long sendMessages(int messageCount, String destination, boolean sync) throws Exception {
1:08695ab: 
1:08695ab:         long numberOfMessageSent = 0;
1:08695ab: 
1:08695ab: 
1:08695ab:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1:08695ab: 
1:08695ab: 
1:08695ab:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:e67d486:         if (sync) {
1:e67d486:             connection.setUseAsyncSend(false);
1:e67d486:             connection.setAlwaysSyncSend(true);
1:e67d486:         } else {
1:e67d486:             connection.setUseAsyncSend(true);
1:e67d486:         }
1:08695ab:         connection.start();
1:08695ab: 
1:08695ab:         try {
1:08695ab: 
1:08695ab:             Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:08695ab:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(destination));
1:08695ab: 
1:08695ab:             Message sendMessage = createTextMessage(producerSession);
1:08695ab: 
1:08695ab:             for (int i = 0; i < messageCount; i++) {
1:08695ab: 
1:08695ab:                 jmsProducer.send(sendMessage);
1:08695ab:                 numberOfMessageSent++;
1:08695ab: 
1:08695ab:             }
1:08695ab: 
1:08695ab:             LOG.info(" Finished after producing : " + numberOfMessageSent);
2:08695ab:             return numberOfMessageSent;
1:08695ab: 
1:e67d486:         } catch (JMSException expected) {
1:e67d486:             LOG.debug("Exception received producing ", expected);
1:08695ab:         } finally {
1:08695ab:             if (connection != null) {
1:e67d486:                 try {
1:e67d486:                     connection.close();
1:e67d486:                 } catch (JMSException ignored) {}
1:08695ab:             }
1:08695ab:         }
1:e67d486:         return numberOfMessageSent;
1:08695ab:     }
1:08695ab: 
1:08695ab:     private TextMessage createTextMessage(Session session) throws JMSException {
1:08695ab:         StringBuffer buffer = new StringBuffer();
1:08695ab: 
1:08695ab:         for (int i = 0; i < 1000; i++) {
1:08695ab: 
1:08695ab:             buffer.append("1234567890");
1:08695ab:         }
1:08695ab: 
1:08695ab:         return session.createTextMessage(buffer.toString());
1:08695ab: 
1:08695ab:     }
1:08695ab: 
1:08695ab: 
1:08695ab:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:08695ab:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1:08695ab: 
1:08695ab:         for (ObjectName key : queueViews.keySet()) {
1:08695ab:             DestinationView destinationView = queueViews.get(key);
1:08695ab: 
1:08695ab:             if (destinationView instanceof QueueView) {
1:08695ab:                 QueueView queueView = (QueueView) destinationView;
1:08695ab: 
1:08695ab:                 if (queueView.getName().equals(queueName)) {
1:08695ab:                     return queueView;
1:08695ab:                 }
1:08695ab: 
1:08695ab:             }
1:08695ab:         }
1:08695ab:         return null;
1:08695ab:     }
1:08695ab: 
1:e67d486:     private ProducerViewMBean getProducerView(BrokerService broker, String qName) throws Exception {
1:e67d486:         ObjectName[] qProducers = broker.getAdminView().getQueueProducers();
1:e67d486:         for (ObjectName name : qProducers) {
1:e67d486:             ProducerViewMBean proxy = (ProducerViewMBean) broker.getManagementContext()
1:e67d486:                     .newProxyInstance(name, ProducerViewMBean.class, true);
1:e67d486: 
1:e67d486:             LOG.info("" + proxy.getProducerId() + ", dest: " + proxy.getDestinationName() + ", blocked: " + proxy.isProducerBlocked());
1:e67d486: 
1:e67d486:             if (proxy.getDestinationName().contains(qName)) {
1:e67d486:                 return proxy;
1:e67d486:             }
1:e67d486:         }
1:e67d486:         return null;
1:e67d486:     }
1:e67d486: 
1:08695ab: }
1:08695ab: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e67d486
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.ProducerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:                 sendMessages(1, DESTINATION_TWO, false);
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Producer view blocked", getProducerView(broker, DESTINATION_ONE).isProducerBlocked());
/////////////////////////////////////////////////////////////////////////
1:     public void testSyncSendPFCExistingConnection() throws Exception {
1: 
1:         BrokerService broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1: 
1:         try {
1: 
1:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1: 
1:                 executorService.submit(new ProducerTask(true));
1: 
1:             }
1: 
1:             //wait till producer follow control kicks in
1:             waitForProducerFlowControl(broker, queueView);
1:             assertTrue("Producer view blocked", getProducerView(broker, DESTINATION_ONE).isProducerBlocked());
1: 
1: 
1:         } finally {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1:     }
1: 
1:             blockingAllSends = queueView.getBlockedSends() >= 10;
1:             LOG.info("Blocking all sends:" + queueView.getBlockedSends());
1:         boolean sync = false;
1: 
1:         ProducerTask() {
1:             this(false);
1:         }
1: 
1:         ProducerTask(boolean sync) {
1:             this.sync = sync;
1:         }
1:                 sendMessages(MESSAGES_TO_SEND, DESTINATION_ONE, sync);
/////////////////////////////////////////////////////////////////////////
1:     private Long sendMessages(int messageCount, String destination, boolean sync) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         if (sync) {
1:             connection.setUseAsyncSend(false);
1:             connection.setAlwaysSyncSend(true);
1:         } else {
1:             connection.setUseAsyncSend(true);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException expected) {
1:             LOG.debug("Exception received producing ", expected);
1:                 try {
1:                     connection.close();
1:                 } catch (JMSException ignored) {}
1:         return numberOfMessageSent;
/////////////////////////////////////////////////////////////////////////
1:     private ProducerViewMBean getProducerView(BrokerService broker, String qName) throws Exception {
1:         ObjectName[] qProducers = broker.getAdminView().getQueueProducers();
1:         for (ObjectName name : qProducers) {
1:             ProducerViewMBean proxy = (ProducerViewMBean) broker.getManagementContext()
1:                     .newProxyInstance(name, ProducerViewMBean.class, true);
1: 
1:             LOG.info("" + proxy.getProducerId() + ", dest: " + proxy.getDestinationName() + ", blocked: " + proxy.isProducerBlocked());
1: 
1:             if (proxy.getDestinationName().contains(qName)) {
1:                 return proxy;
1:             }
1:         }
1:         return null;
1:     }
1: 
commit:634b420
/////////////////////////////////////////////////////////////////////////
commit:08695ab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationView;
1: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: /*
1:  demonstrates that with nio it does not make sense to block on the broker but thread pool
1:  shold grow past initial corepoolsize of 10
1:  */
1: public class NIOAsyncSendWithPFCTest extends TestCase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NIOAsyncSendWithPFCTest.class);
1: 
1:     private static String TRANSPORT_URL = "nio://0.0.0.0:0";
1:     private static final String DESTINATION_ONE = "testQ1";
1:     private static final String DESTINATION_TWO = "testQ2";
1:     private static final int MESSAGES_TO_SEND = 100;
1:     private static int NUMBER_OF_PRODUCERS = 10;
1: 
1:     protected BrokerService createBroker() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1: 
1:         pe.setMemoryLimit(256000);
1:         pe.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1: 
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1: 
1:         broker.addConnector(TRANSPORT_URL);
1:         broker.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue(DESTINATION_ONE)});
1: 
1:         broker.start();
1:         TRANSPORT_URL = broker.getTransportConnectorByScheme("nio").getPublishableConnectString();
1:         return broker;
1:     }
1: 
1:     /**
1:      * Test creates 10 producer who send to a single destination using Async mode.
1:      * Producer flow control kicks in for that destination. When producer flow control is blocking sends
1:      * Test tries to create another JMS connection to the nio.
1:      */
1:     public void testAsyncSendPFCNewConnection() throws Exception {
1: 
1: 
1:         BrokerService broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1: 
1:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1: 
1:         try {
1: 
1:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1: 
1:                 executorService.submit(new ProducerTask());
1: 
1:             }
1: 
1:             //wait till producer follow control kicks in
1:             waitForProducerFlowControl(broker, queueView);
1: 
1: 
1:             try {
0:                 sendMessagesAsync(1, DESTINATION_TWO);
1:             } catch (Exception ex) {
1:                 LOG.error("Ex on send  new connection", ex);
1:                 fail("*** received the following exception when creating addition producer new connection:" + ex);
1:             }
1: 
1: 
1:         } finally {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1: 
1:     }
1: 
1: 
1:     public void testAsyncSendPFCExistingConnection() throws Exception {
1: 
1: 
1:         BrokerService broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL + "?wireFormat.maxInactivityDuration=5000");
1:         ActiveMQConnection exisitngConnection = (ActiveMQConnection) connectionFactory.createConnection();
1: 
1: 
1:         ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_OF_PRODUCERS);
1:         QueueView queueView = getQueueView(broker, DESTINATION_ONE);
1: 
1:         try {
1: 
1:             for (int i = 0; i < NUMBER_OF_PRODUCERS; i++) {
1: 
1:                 executorService.submit(new ProducerTask());
1: 
1:             }
1: 
1: 
1:             //wait till producer follow control kicks in
1:             waitForProducerFlowControl(broker, queueView);
1: 
1: 
0:             TestSupport.dumpAllThreads("Blocked");
1: 
1:             try {
1:                 Session producerSession = exisitngConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             } catch (Exception ex) {
1:                 LOG.error("Ex on create session", ex);
1:                 fail("*** received the following exception when creating producer session:" + ex);
1:             }
1: 
1: 
1:         } finally {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1: 
1: 
1:     }
1: 
1:     private void waitForProducerFlowControl(BrokerService broker, QueueView queueView) throws Exception {
1: 
1: 
1:         boolean blockingAllSends;
1:         do {
0:             blockingAllSends = queueView.getBlockedSends() > 10;
1:             Thread.sleep(1000);
1: 
1:         } while (!blockingAllSends);
1:     }
1: 
1:     class ProducerTask implements Runnable {
1: 
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 //send X messages
0:                 sendMessagesAsync(MESSAGES_TO_SEND, DESTINATION_ONE);
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
1: 
0:     private Long sendMessagesAsync(int messageCount, String destination) throws Exception {
1: 
1:         long numberOfMessageSent = 0;
1: 
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "admin", TRANSPORT_URL);
1: 
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
0:         connection.setUseAsyncSend(true);
1:         connection.start();
1: 
1:         try {
1: 
1:             Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(destination));
1: 
1:             Message sendMessage = createTextMessage(producerSession);
1: 
1:             for (int i = 0; i < messageCount; i++) {
1: 
1:                 jmsProducer.send(sendMessage);
1:                 numberOfMessageSent++;
1: 
1:             }
1: 
1:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:             return numberOfMessageSent;
1: 
1:         } catch (Exception ex) {
0:             LOG.info("Exception received producing ", ex);
0:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:             return numberOfMessageSent;
1:         } finally {
1:             if (connection != null) {
0:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1:     private TextMessage createTextMessage(Session session) throws JMSException {
1:         StringBuffer buffer = new StringBuffer();
1: 
1:         for (int i = 0; i < 1000; i++) {
1: 
1:             buffer.append("1234567890");
1:         }
1: 
1:         return session.createTextMessage(buffer.toString());
1: 
1:     }
1: 
1: 
1:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1: 
1:         for (ObjectName key : queueViews.keySet()) {
1:             DestinationView destinationView = queueViews.get(key);
1: 
1:             if (destinationView instanceof QueueView) {
1:                 QueueView queueView = (QueueView) destinationView;
1: 
1:                 if (queueView.getName().equals(queueName)) {
1:                     return queueView;
1:                 }
1: 
1:             }
1:         }
1:         return null;
1:     }
1: 
1: }
1: 
============================================================================