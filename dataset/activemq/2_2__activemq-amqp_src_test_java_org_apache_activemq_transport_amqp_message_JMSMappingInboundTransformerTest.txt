1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
19:6e69319: 
1:d54e21b: import static org.junit.Assert.assertEquals;
1:d54e21b: import static org.junit.Assert.assertNotNull;
1:d54e21b: import static org.junit.Assert.assertNull;
1:6e69319: import static org.junit.Assert.assertTrue;
1:6e69319: 
1:d54e21b: import java.nio.charset.Charset;
1:d54e21b: import java.nio.charset.StandardCharsets;
1:d54e21b: import java.util.ArrayList;
1:d88c4e4: import java.util.Arrays;
1:6e69319: import java.util.HashMap;
1:d54e21b: import java.util.List;
1:6e69319: import java.util.Map;
1:d54e21b: import java.util.UUID;
1:6e69319: 
1:6e69319: import javax.jms.Destination;
1:d88c4e4: import javax.jms.MapMessage;
1:6e69319: import javax.jms.Queue;
1:6e69319: import javax.jms.TemporaryQueue;
1:6e69319: import javax.jms.TemporaryTopic;
1:6e69319: import javax.jms.TextMessage;
1:6e69319: import javax.jms.Topic;
1:6e69319: 
1:d54e21b: import org.apache.activemq.command.ActiveMQBytesMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQMapMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQObjectMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQStreamMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQTextMessage;
1:d54e21b: import org.apache.qpid.proton.Proton;
1:d54e21b: import org.apache.qpid.proton.amqp.Binary;
1:6e69319: import org.apache.qpid.proton.amqp.Symbol;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.Data;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:6e69319: import org.apache.qpid.proton.message.Message;
1:6e69319: import org.junit.Test;
1:6e69319: 
1:6e69319: public class JMSMappingInboundTransformerTest {
1:6e69319: 
1:d54e21b:     //----- Null Body Section ------------------------------------------------//
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with no body section, but with the content type set to
1:d54e21b:      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
11:6e69319:     @Test
1:d54e21b:     public void testCreateBytesMessageFromNoBodySectionAndContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:6e69319: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setContentType(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE);
1:6e69319: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with no body section, and no content-type results in a BytesMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateBytesMessageFromNoBodySectionAndNoContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with no body section, but with the content type set to
1:d54e21b:      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:     */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateObjectMessageFromNoBodySectionAndContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromNoBodySectionAndContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setContentType("text/plain");
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with no body section, and with the content type set to
1:d54e21b:      * an unknown value results in a plain Message when not otherwise annotated to
1:d54e21b:      * indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     public void testCreateGenericMessageFromNoBodySectionAndUnknownContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setContentType("unknown-content-type");
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- Data Body Section ------------------------------------------------//
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a data body containing nothing, but with the content type set to
1:d54e21b:      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage when not
1:d54e21b:      * otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateBytesMessageFromDataWithEmptyBinaryAndContentType() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new Data(binary));
1:d54e21b:         message.setContentType(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE);
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with an empty data body section, and with the content type
1:d54e21b:      * set to an unknown value results in a BytesMessage when not otherwise annotated
1:d54e21b:      * to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     public void testCreateBytesMessageFromDataWithUnknownContentType() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new Data(binary));
1:d54e21b:         message.setContentType("unknown-content-type");
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a receiving a data body containing nothing and no content type being set
1:d54e21b:      * results in a BytesMessage when not otherwise annotated to indicate the type of
1:d54e21b:      * JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateBytesMessageFromDataWithEmptyBinaryAndNoContentType() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new Data(binary));
1:d54e21b: 
1:d54e21b:         assertNull(message.getContentType());
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that receiving a data body containing nothing, but with the content type set to
1:d54e21b:      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateObjectMessageFromDataWithContentTypeAndEmptyBinary() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new Data(binary));
1:d54e21b:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeTextPlain() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeTextJson() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeTextHtml() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeTextFoo() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationJson() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationJsonVariant() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationJavascript() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationEcmascript() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationXml() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationXmlVariant() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromDataWithContentTypeApplicationXmlDtd() throws Exception {
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=us-ascii", StandardCharsets.US_ASCII);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=utf-8", StandardCharsets.UTF_8);
1:d54e21b:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd", StandardCharsets.UTF_8);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private void doCreateTextMessageFromDataWithContentTypeTestImpl(String contentType, Charset expectedCharset) throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new Data(binary));
1:d54e21b:         message.setContentType(contentType);
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         if (StandardCharsets.UTF_8.equals(expectedCharset)) {
1:d54e21b:             assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:d54e21b:         } else {
1:d54e21b:             assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- AmqpValue transformations ----------------------------------------//
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-value body containing a string results in a TextMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromAmqpValueWithString() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setBody(new AmqpValue("content"));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-value body containing a null results in an TextMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateTextMessageFromAmqpValueWithNull() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setBody(new AmqpValue(null));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that a message with an AmqpValue section containing a Binary, but with the content type
1:d54e21b:      * set to {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:     */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateObjectMessageFromAmqpValueWithBinaryAndContentType() throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b: 
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setBody(new AmqpValue(new Binary(new byte[0])));
1:d54e21b:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-value body containing a map results in an MapMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateAmqpMapMessageFromAmqpValueWithMap() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Map<String, String> map = new HashMap<String,String>();
1:d54e21b:         message.setBody(new AmqpValue(map));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQMapMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d88c4e4:      * Test that an amqp-value body containing a map that has an AMQP Binary as one of the
1:d88c4e4:      * entries encoded into the Map results in an MapMessage where a byte array can be read
1:d88c4e4:      * from the entry.
1:d88c4e4:      *
1:d88c4e4:      * @throws Exception if an error occurs during the test.
1:d88c4e4:      */
1:d88c4e4:     @Test
1:d88c4e4:     public void testCreateAmqpMapMessageFromAmqpValueWithMapContainingBinaryEntry() throws Exception {
1:d88c4e4:         final String ENTRY_NAME = "bytesEntry";
1:d88c4e4: 
1:d88c4e4:         Message message = Proton.message();
1:d88c4e4:         Map<String, Object> map = new HashMap<String, Object>();
1:d88c4e4: 
1:d88c4e4:         byte[] inputBytes = new byte[] { 1, 2, 3, 4, 5 };
1:d88c4e4:         map.put(ENTRY_NAME, new Binary(inputBytes));
1:d88c4e4: 
1:d88c4e4:         message.setBody(new AmqpValue(map));
1:d88c4e4: 
1:d88c4e4:         EncodedMessage em = encodeMessage(message);
1:d88c4e4: 
1:d88c4e4:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d88c4e4:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d88c4e4: 
1:d88c4e4:         assertNotNull("Message should not be null", jmsMessage);
1:d88c4e4:         assertEquals("Unexpected message class type", ActiveMQMapMessage.class, jmsMessage.getClass());
1:d88c4e4: 
1:d88c4e4:         MapMessage mapMessage = (MapMessage) jmsMessage;
1:d88c4e4:         byte[] outputBytes = mapMessage.getBytes(ENTRY_NAME);
1:d88c4e4:         assertNotNull(outputBytes);
1:d88c4e4:         assertTrue(Arrays.equals(inputBytes, outputBytes));
1:d88c4e4:     }
1:d88c4e4: 
1:d88c4e4:     /**
1:d54e21b:      * Test that an amqp-value body containing a list results in an StreamMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateAmqpStreamMessageFromAmqpValueWithList() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         List<String> list = new ArrayList<String>();
1:d54e21b:         message.setBody(new AmqpValue(list));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQStreamMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-sequence body containing a list results in an StreamMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateAmqpStreamMessageFromAmqpSequence() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         List<String> list = new ArrayList<String>();
1:d54e21b:         message.setBody(new AmqpSequence(list));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQStreamMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-value body containing a binary value results in BytesMessage
1:d54e21b:      * when not otherwise annotated to indicate the type of JMS message it is.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateAmqpBytesMessageFromAmqpValueWithBinary() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         Binary binary = new Binary(new byte[0]);
1:d54e21b:         message.setBody(new AmqpValue(binary));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     /**
1:d54e21b:      * Test that an amqp-value body containing a value which can't be categorized results in
1:d54e21b:      * an exception from the transformer and then try the transformer's own fallback transformer
1:d54e21b:      * to result in an BytesMessage.
1:d54e21b:      *
1:d54e21b:      * @throws Exception if an error occurs during the test.
1:d54e21b:      */
1:d54e21b:     @Test
1:d54e21b:     public void testCreateBytesMessageFromAmqpValueWithUncategorisedContent() throws Exception {
1:d54e21b:         Message message = Proton.message();
1:d54e21b:         message.setBody(new AmqpValue(UUID.randomUUID()));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:6e69319: 
1:6e69319:         javax.jms.Message jmsMessage = transformer.transform(em);
1:6e69319: 
1:d54e21b:         assertNotNull("Message should not be null", jmsMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:d54e21b:     }
1:6e69319: 
1:d54e21b:     @Test
1:d54e21b:     public void testTransformMessageWithAmqpValueStringCreatesTextMessage() throws Exception {
1:d54e21b:         String contentString = "myTextMessageContent";
1:d54e21b:         Message message = Message.Factory.create();
1:d54e21b:         message.setBody(new AmqpValue(contentString));
1:d54e21b: 
1:d54e21b:         EncodedMessage em = encodeMessage(message);
1:d54e21b: 
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:d54e21b:         javax.jms.Message jmsMessage = transformer.transform(em);
1:d54e21b: 
1:d54e21b:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1:d54e21b:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:d54e21b: 
1:d54e21b:         TextMessage textMessage = (TextMessage) jmsMessage;
1:d54e21b: 
1:d54e21b:         assertNotNull(textMessage.getText());
1:d54e21b:         assertEquals(contentString, textMessage.getText());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- Destination Conversions ------------------------------------------//
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithNoToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(null, Destination.class);
16:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithQueueStringToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTemporaryQueueStringToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTopicStringToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTemporaryTopicStringToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class);
1:6e69319:     }
1:6e69319: 
1:37b1b6a:     private void doTransformWithToTypeDestinationTypeAnnotationTestImpl(Object toTypeAnnotationValue, Class<? extends Destination> expectedClass) throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:6e69319: 
1:6e69319:         String toAddress = "toAddress";
2:6e69319:         Message amqp = Message.Factory.create();
1:6e69319:         amqp.setBody(new AmqpValue("myTextMessageContent"));
1:6e69319:         amqp.setAddress(toAddress);
1:6e69319:         if (toTypeAnnotationValue != null) {
1:6e69319:             Map<Symbol, Object> map = new HashMap<Symbol, Object>();
1:6e69319:             map.put(Symbol.valueOf("x-opt-to-type"), toTypeAnnotationValue);
1:6e69319:             MessageAnnotations ma = new MessageAnnotations(map);
1:6e69319:             amqp.setMessageAnnotations(ma);
1:6e69319:         }
1:6e69319: 
2:6e69319:         EncodedMessage em = encodeMessage(amqp);
1:6e69319: 
1:6e69319:         javax.jms.Message jmsMessage = transformer.transform(em);
2:6e69319:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1:6e69319:     }
1:6e69319: 
1:d54e21b:     //----- ReplyTo Conversions ----------------------------------------------//
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithNoReplyToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(null, Destination.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithQueueStringReplyToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTemporaryQueueStringReplyToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTopicStringReplyToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testTransformWithTemporaryTopicStringReplyToTypeDestinationTypeAnnotation() throws Exception {
1:37b1b6a:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class);
1:6e69319:     }
1:6e69319: 
1:37b1b6a:     private void doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(Object replyToTypeAnnotationValue, Class<? extends Destination> expectedClass) throws Exception {
1:63d62a7:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:6e69319: 
1:6e69319:         String replyToAddress = "replyToAddress";
1:6e69319:         Message amqp = Message.Factory.create();
1:6e69319:         amqp.setBody(new AmqpValue("myTextMessageContent"));
1:6e69319:         amqp.setReplyTo(replyToAddress);
1:6e69319:         if (replyToTypeAnnotationValue != null) {
1:6e69319:             Map<Symbol, Object> map = new HashMap<Symbol, Object>();
1:6e69319:             map.put(Symbol.valueOf("x-opt-reply-type"), replyToTypeAnnotationValue);
1:6e69319:             MessageAnnotations ma = new MessageAnnotations(map);
1:6e69319:             amqp.setMessageAnnotations(ma);
1:6e69319:         }
1:6e69319: 
1:6e69319:         EncodedMessage em = encodeMessage(amqp);
1:6e69319: 
1:6e69319:         javax.jms.Message jmsMessage = transformer.transform(em);
1:6e69319:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1:6e69319:     }
1:6e69319: 
1:d54e21b:     //----- Utility Methods --------------------------------------------------//
1:d54e21b: 
1:6e69319:     private EncodedMessage encodeMessage(Message message) {
1:6e69319:         byte[] encodeBuffer = new byte[1024 * 8];
1:6e69319:         int encodedSize;
1:6e69319:         while (true) {
1:6e69319:             try {
1:6e69319:                 encodedSize = message.encode(encodeBuffer, 0, encodeBuffer.length);
1:6e69319:                 break;
1:6e69319:             } catch (java.nio.BufferOverflowException e) {
1:6e69319:                 encodeBuffer = new byte[encodeBuffer.length * 2];
1:6e69319:             }
1:6e69319:         }
1:6e69319: 
1:6e69319:         long messageFormat = 0;
1:6e69319:         return new EncodedMessage(messageFormat, encodeBuffer, 0, encodedSize);
1:6e69319:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d88c4e4
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import javax.jms.MapMessage;
/////////////////////////////////////////////////////////////////////////
1:      * Test that an amqp-value body containing a map that has an AMQP Binary as one of the
1:      * entries encoded into the Map results in an MapMessage where a byte array can be read
1:      * from the entry.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateAmqpMapMessageFromAmqpValueWithMapContainingBinaryEntry() throws Exception {
1:         final String ENTRY_NAME = "bytesEntry";
1: 
1:         Message message = Proton.message();
1:         Map<String, Object> map = new HashMap<String, Object>();
1: 
1:         byte[] inputBytes = new byte[] { 1, 2, 3, 4, 5 };
1:         map.put(ENTRY_NAME, new Binary(inputBytes));
1: 
1:         message.setBody(new AmqpValue(map));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQMapMessage.class, jmsMessage.getClass());
1: 
1:         MapMessage mapMessage = (MapMessage) jmsMessage;
1:         byte[] outputBytes = mapMessage.getBytes(ENTRY_NAME);
1:         assertNotNull(outputBytes);
1:         assertTrue(Arrays.equals(inputBytes, outputBytes));
1:     }
1: 
1:     /**
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import java.nio.charset.Charset;
1: import java.nio.charset.StandardCharsets;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.qpid.proton.Proton;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1: import org.apache.qpid.proton.amqp.messaging.Data;
/////////////////////////////////////////////////////////////////////////
1:     //----- Null Body Section ------------------------------------------------//
1: 
1:     /**
1:      * Test that a message with no body section, but with the content type set to
1:      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     public void testCreateBytesMessageFromNoBodySectionAndContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         Message message = Message.Factory.create();
1:         message.setContentType(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE);
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a message with no body section, and no content-type results in a BytesMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateBytesMessageFromNoBodySectionAndNoContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1: 
1:         Message message = Message.Factory.create();
1: 
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a message with no body section, but with the content type set to
1:      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:     */
1:     @Test
1:     public void testCreateObjectMessageFromNoBodySectionAndContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1: 
1:         Message message = Message.Factory.create();
1:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1: 
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromNoBodySectionAndContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1: 
1:         Message message = Message.Factory.create();
1:         message.setContentType("text/plain");
1: 
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a message with no body section, and with the content type set to
1:      * an unknown value results in a plain Message when not otherwise annotated to
1:      * indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     public void testCreateGenericMessageFromNoBodySectionAndUnknownContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1: 
1:         Message message = Message.Factory.create();
1:         message.setContentType("unknown-content-type");
1: 
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     //----- Data Body Section ------------------------------------------------//
1: 
1:     /**
1:      * Test that a data body containing nothing, but with the content type set to
1:      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage when not
1:      * otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateBytesMessageFromDataWithEmptyBinaryAndContentType() throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new Data(binary));
1:         message.setContentType(AmqpMessageSupport.OCTET_STREAM_CONTENT_TYPE);
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a message with an empty data body section, and with the content type
1:      * set to an unknown value results in a BytesMessage when not otherwise annotated
1:      * to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     public void testCreateBytesMessageFromDataWithUnknownContentType() throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new Data(binary));
1:         message.setContentType("unknown-content-type");
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a receiving a data body containing nothing and no content type being set
1:      * results in a BytesMessage when not otherwise annotated to indicate the type of
1:      * JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateBytesMessageFromDataWithEmptyBinaryAndNoContentType() throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new Data(binary));
1: 
1:         assertNull(message.getContentType());
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that receiving a data body containing nothing, but with the content type set to
1:      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateObjectMessageFromDataWithContentTypeAndEmptyBinary() throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new Data(binary));
1:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeTextPlain() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/plain", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeTextJson() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeTextHtml() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/html", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeTextFoo() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("text/foo", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationJson() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationJsonVariant() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+json", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationJavascript() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/javascript", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationEcmascript() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/ecmascript", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationXml() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationXmlVariant() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/something+xml", StandardCharsets.UTF_8);
1:     }
1: 
1:     @Test
1:     public void testCreateTextMessageFromDataWithContentTypeApplicationXmlDtd() throws Exception {
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=iso-8859-1", StandardCharsets.ISO_8859_1);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=us-ascii", StandardCharsets.US_ASCII);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd;charset=utf-8", StandardCharsets.UTF_8);
1:         doCreateTextMessageFromDataWithContentTypeTestImpl("application/xml-dtd", StandardCharsets.UTF_8);
1:     }
1: 
1:     private void doCreateTextMessageFromDataWithContentTypeTestImpl(String contentType, Charset expectedCharset) throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new Data(binary));
1:         message.setContentType(contentType);
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         if (StandardCharsets.UTF_8.equals(expectedCharset)) {
1:             assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:         } else {
1:             assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:         }
1:     }
1: 
1:     //----- AmqpValue transformations ----------------------------------------//
1: 
1:     /**
1:      * Test that an amqp-value body containing a string results in a TextMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateTextMessageFromAmqpValueWithString() throws Exception {
1:         Message message = Proton.message();
1:         message.setBody(new AmqpValue("content"));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-value body containing a null results in an TextMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateTextMessageFromAmqpValueWithNull() throws Exception {
1:         Message message = Proton.message();
1:         message.setBody(new AmqpValue(null));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that a message with an AmqpValue section containing a Binary, but with the content type
1:      * set to {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:     */
1:     @Test
1:     public void testCreateObjectMessageFromAmqpValueWithBinaryAndContentType() throws Exception {
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1: 
1:         Message message = Message.Factory.create();
1:         message.setBody(new AmqpValue(new Binary(new byte[0])));
1:         message.setContentType(AmqpMessageSupport.SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
1: 
1:         EncodedMessage em = encodeMessage(message);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQObjectMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-value body containing a map results in an MapMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateAmqpMapMessageFromAmqpValueWithMap() throws Exception {
1:         Message message = Proton.message();
1:         Map<String, String> map = new HashMap<String,String>();
1:         message.setBody(new AmqpValue(map));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQMapMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-value body containing a list results in an StreamMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateAmqpStreamMessageFromAmqpValueWithList() throws Exception {
1:         Message message = Proton.message();
1:         List<String> list = new ArrayList<String>();
1:         message.setBody(new AmqpValue(list));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQStreamMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-sequence body containing a list results in an StreamMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateAmqpStreamMessageFromAmqpSequence() throws Exception {
1:         Message message = Proton.message();
1:         List<String> list = new ArrayList<String>();
1:         message.setBody(new AmqpSequence(list));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQStreamMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-value body containing a binary value results in BytesMessage
1:      * when not otherwise annotated to indicate the type of JMS message it is.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateAmqpBytesMessageFromAmqpValueWithBinary() throws Exception {
1:         Message message = Proton.message();
1:         Binary binary = new Binary(new byte[0]);
1:         message.setBody(new AmqpValue(binary));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     }
1: 
1:     /**
1:      * Test that an amqp-value body containing a value which can't be categorized results in
1:      * an exception from the transformer and then try the transformer's own fallback transformer
1:      * to result in an BytesMessage.
1:      *
1:      * @throws Exception if an error occurs during the test.
1:      */
1:     @Test
1:     public void testCreateBytesMessageFromAmqpValueWithUncategorisedContent() throws Exception {
1:         Message message = Proton.message();
1:         message.setBody(new AmqpValue(UUID.randomUUID()));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         assertNotNull("Message should not be null", jmsMessage);
1:         assertEquals("Unexpected message class type", ActiveMQBytesMessage.class, jmsMessage.getClass());
1:     @Test
1:     public void testTransformMessageWithAmqpValueStringCreatesTextMessage() throws Exception {
1:         String contentString = "myTextMessageContent";
1:         Message message = Message.Factory.create();
1:         message.setBody(new AmqpValue(contentString));
1: 
1:         EncodedMessage em = encodeMessage(message);
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(vendor);
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1:         assertEquals("Unexpected message class type", ActiveMQTextMessage.class, jmsMessage.getClass());
1: 
1:         TextMessage textMessage = (TextMessage) jmsMessage;
1: 
1:         assertNotNull(textMessage.getText());
1:         assertEquals(contentString, textMessage.getText());
1:     }
1: 
1:     //----- Destination Conversions ------------------------------------------//
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
0:         ActiveMQJMSVendor mockVendor = createMockVendor(mockTextMessage);
/////////////////////////////////////////////////////////////////////////
1:     //----- ReplyTo Conversions ----------------------------------------------//
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
0:         ActiveMQJMSVendor mockVendor = createMockVendor(mockTextMessage);
/////////////////////////////////////////////////////////////////////////
1:     //----- Utility Methods --------------------------------------------------//
0:     private ActiveMQTextMessage createMockTextMessage() {
0:         return Mockito.mock(ActiveMQTextMessage.class);
0:     private ActiveMQJMSVendor createMockVendor(ActiveMQTextMessage mockTextMessage) {
0:         ActiveMQJMSVendor mockVendor = Mockito.mock(ActiveMQJMSVendor.class);
0:         Mockito.when(mockVendor.createTextMessage(Mockito.any(String.class))).thenReturn(mockTextMessage);
0:     private ActiveMQJMSVendor createVendor() {
0:         return ActiveMQJMSVendor.INSTANCE;
1:     }
1: 
commit:2ec586f
/////////////////////////////////////////////////////////////////////////
0:         // TODO - No need to really test this bit ?
0:         // Mockito.verify(mockVendor).createDestination(toAddress, expectedClass);
/////////////////////////////////////////////////////////////////////////
0:         // TODO - No need to really test this bit ?
0:         // Mockito.verify(mockVendor).createDestination(replyToAddress, expectedClass);
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.jms.Destination;
1: import javax.jms.Queue;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.message.Message;
1: import org.junit.Test;
0: import org.mockito.Mockito;
1: 
1: public class JMSMappingInboundTransformerTest {
1: 
1:     @Test
0:     public void testTransformMessageWithAmqpValueStringCreatesTextMessage() throws Exception {
0:         TextMessage mockTextMessage = createMockTextMessage();
0:         JMSVendor mockVendor = createMockVendor(mockTextMessage);
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(mockVendor);
1: 
0:         String contentString = "myTextMessageContent";
1:         Message amqp = Message.Factory.create();
0:         amqp.setBody(new AmqpValue(contentString));
1: 
1:         EncodedMessage em = encodeMessage(amqp);
1: 
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1: 
1:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
0:         Mockito.verify(mockTextMessage).setText(contentString);
0:         assertSame("Expected provided mock message, got a different one", mockTextMessage, jmsMessage);
1:     }
1: 
0:     // ======= JMSDestination Handling =========
1: 
0:     // --- String type annotation ---
1:     @Test
1:     public void testTransformWithNoToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(null, Destination.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithQueueStringToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTemporaryQueueStringToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTopicStringToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTemporaryTopicStringToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class, false);
1:     }
1: 
0:     // --- byte type annotation ---
1: 
1:     @Test
0:     public void testTransformWithNoToTypeDestinationTypeAnnotationUsingByteAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(null, Queue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithQueueByteToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(JMSVendor.QUEUE_TYPE, Queue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTemporaryQueueByteToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TEMP_QUEUE_TYPE, TemporaryQueue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTopicByteToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TOPIC_TYPE, Topic.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTemporaryTopicByteToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TEMP_TOPIC_TYPE, TemporaryTopic.class, true);
1:     }
1: 
0:     private void doTransformWithToTypeDestinationTypeAnnotationTestImpl(Object toTypeAnnotationValue, Class<? extends Destination> expectedClass,
0:         boolean byteType) throws Exception {
0:         TextMessage mockTextMessage = createMockTextMessage();
0:         JMSVendor mockVendor = createMockVendor(mockTextMessage);
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(mockVendor);
0:         if (byteType) {
0:             transformer.setUseByteDestinationTypeAnnotations(true);
1:         }
1: 
1:         String toAddress = "toAddress";
1:         Message amqp = Message.Factory.create();
1:         amqp.setBody(new AmqpValue("myTextMessageContent"));
1:         amqp.setAddress(toAddress);
1:         if (toTypeAnnotationValue != null) {
1:             Map<Symbol, Object> map = new HashMap<Symbol, Object>();
1:             map.put(Symbol.valueOf("x-opt-to-type"), toTypeAnnotationValue);
1:             MessageAnnotations ma = new MessageAnnotations(map);
1:             amqp.setMessageAnnotations(ma);
1:         }
1: 
1:         EncodedMessage em = encodeMessage(amqp);
1: 
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1: 
0:         // Verify that createDestination was called with the provided 'to'
0:         // address and 'Destination' class
0:         Mockito.verify(mockVendor).createDestination(toAddress, expectedClass);
1:     }
1: 
0:     // ======= JMSReplyTo Handling =========
1: 
0:     // --- String type annotation ---
1:     @Test
1:     public void testTransformWithNoReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(null, Destination.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithQueueStringReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTemporaryQueueStringReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTopicStringReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class, false);
1:     }
1: 
1:     @Test
1:     public void testTransformWithTemporaryTopicStringReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class, false);
1:     }
1: 
0:     // --- byte type annotation ---
1:     @Test
0:     public void testTransformWithNoReplyToTypeDestinationTypeAnnotationUsingByteAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(null, Queue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithQueueByteReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(JMSVendor.QUEUE_TYPE, Queue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTemporaryQueueByteReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TEMP_QUEUE_TYPE, TemporaryQueue.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTopicByteReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TOPIC_TYPE, Topic.class, true);
1:     }
1: 
1:     @Test
0:     public void testTransformWithTemporaryTopicByteReplyToTypeDestinationTypeAnnotation() throws Exception {
0:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(JMSVendor.TEMP_TOPIC_TYPE, TemporaryTopic.class, true);
1:     }
1: 
0:     private void doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(Object replyToTypeAnnotationValue, Class<? extends Destination> expectedClass,
0:         boolean byteType) throws Exception {
0:         TextMessage mockTextMessage = createMockTextMessage();
0:         JMSVendor mockVendor = createMockVendor(mockTextMessage);
0:         JMSMappingInboundTransformer transformer = new JMSMappingInboundTransformer(mockVendor);
0:         if (byteType) {
0:             transformer.setUseByteDestinationTypeAnnotations(true);
1:         }
1: 
1:         String replyToAddress = "replyToAddress";
1:         Message amqp = Message.Factory.create();
1:         amqp.setBody(new AmqpValue("myTextMessageContent"));
1:         amqp.setReplyTo(replyToAddress);
1:         if (replyToTypeAnnotationValue != null) {
1:             Map<Symbol, Object> map = new HashMap<Symbol, Object>();
1:             map.put(Symbol.valueOf("x-opt-reply-type"), replyToTypeAnnotationValue);
1:             MessageAnnotations ma = new MessageAnnotations(map);
1:             amqp.setMessageAnnotations(ma);
1:         }
1: 
1:         EncodedMessage em = encodeMessage(amqp);
1: 
1:         javax.jms.Message jmsMessage = transformer.transform(em);
1:         assertTrue("Expected TextMessage", jmsMessage instanceof TextMessage);
1: 
0:         // Verify that createDestination was called with the provided 'replyTo'
0:         // address and 'Destination' class
0:         Mockito.verify(mockVendor).createDestination(replyToAddress, expectedClass);
1:     }
1: 
0:     // ======= Utility Methods =========
1: 
0:     private TextMessage createMockTextMessage() {
0:         TextMessage mockTextMessage = Mockito.mock(TextMessage.class);
1: 
0:         return mockTextMessage;
1:     }
1: 
0:     private JMSVendor createMockVendor(TextMessage mockTextMessage) {
0:         JMSVendor mockVendor = Mockito.mock(JMSVendor.class);
0:         Mockito.when(mockVendor.createTextMessage()).thenReturn(mockTextMessage);
1: 
0:         return mockVendor;
1:     }
1: 
1:     private EncodedMessage encodeMessage(Message message) {
1:         byte[] encodeBuffer = new byte[1024 * 8];
1:         int encodedSize;
1:         while (true) {
1:             try {
1:                 encodedSize = message.encode(encodeBuffer, 0, encodeBuffer.length);
1:                 break;
1:             } catch (java.nio.BufferOverflowException e) {
1:                 encodeBuffer = new byte[encodeBuffer.length * 2];
1:             }
1:         }
1: 
1:         long messageFormat = 0;
1:         return new EncodedMessage(messageFormat, encodeBuffer, 0, encodedSize);
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:37b1b6a
/////////////////////////////////////////////////////////////////////////
1:         doTransformWithToTypeDestinationTypeAnnotationTestImpl(null, Destination.class);
1:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class);
1:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class);
1:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class);
1:         doTransformWithToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class);
1:     private void doTransformWithToTypeDestinationTypeAnnotationTestImpl(Object toTypeAnnotationValue, Class<? extends Destination> expectedClass) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(null, Destination.class);
1:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue", Queue.class);
1:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("queue,temporary", TemporaryQueue.class);
1:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic", Topic.class);
1:         doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl("topic,temporary", TemporaryTopic.class);
1:     private void doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl(Object replyToTypeAnnotationValue, Class<? extends Destination> expectedClass) throws Exception {
============================================================================