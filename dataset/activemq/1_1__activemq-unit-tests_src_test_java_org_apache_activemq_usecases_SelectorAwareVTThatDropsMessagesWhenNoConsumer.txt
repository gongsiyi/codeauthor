1:9fc2661: /**
1:9fc2661:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9fc2661:  * contributor license agreements.  See the NOTICE file distributed with
1:9fc2661:  * this work for additional information regarding copyright ownership.
1:9fc2661:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9fc2661:  * (the "License"); you may not use this file except in compliance with
1:9fc2661:  * the License.  You may obtain a copy of the License at
1:9fc2661:  *
1:9fc2661:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9fc2661:  *
1:9fc2661:  * Unless required by applicable law or agreed to in writing, software
1:9fc2661:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9fc2661:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9fc2661:  * See the License for the specific language governing permissions and
1:9fc2661:  * limitations under the License.
1:9fc2661:  */
1:9fc2661: package org.apache.activemq.usecases;
1:9fc2661: 
1:9fc2661: import org.apache.activemq.ActiveMQConnectionFactory;
1:9fc2661: import org.apache.activemq.broker.BrokerFactory;
1:9fc2661: import org.apache.activemq.broker.BrokerService;
1:9fc2661: import org.apache.activemq.broker.region.DestinationInterceptor;
1:9fc2661: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:9fc2661: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:9fc2661: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:9fc2661: import org.apache.activemq.util.Wait;
1:9fc2661: import org.junit.After;
1:9fc2661: import org.junit.Before;
1:9fc2661: import org.junit.Test;
1:9fc2661: import org.slf4j.Logger;
1:9fc2661: import org.slf4j.LoggerFactory;
1:9fc2661: 
1:9fc2661: import javax.jms.Connection;
1:9fc2661: import javax.jms.Destination;
1:9fc2661: import javax.jms.Message;
1:9fc2661: import javax.jms.MessageConsumer;
1:9fc2661: import javax.jms.MessageListener;
1:9fc2661: import javax.jms.MessageProducer;
1:9fc2661: import javax.jms.Queue;
1:9fc2661: import javax.jms.Session;
1:9fc2661: import javax.jms.TextMessage;
1:9fc2661: import java.util.concurrent.atomic.AtomicInteger;
1:9fc2661: 
1:9fc2661: import static org.junit.Assert.assertEquals;
1:9fc2661: 
1:9fc2661: public class SelectorAwareVTThatDropsMessagesWhenNoConsumer {
1:9fc2661:     protected static final Logger LOG = LoggerFactory.getLogger(SelectorAwareVTThatDropsMessagesWhenNoConsumer.class);
1:1a8e17f:     private static final String QUEUE_NAME="TestQ";
1:9fc2661:     private static final String CONSUMER_QUEUE="Consumer.Orders.VirtualOrders." + QUEUE_NAME;
1:9fc2661:     private static final String PRODUCER_DESTINATION_NAME = "VirtualOrders." + QUEUE_NAME;
1:9fc2661: 
1:9fc2661:     final AtomicInteger receivedCount = new AtomicInteger(0);
1:9fc2661: 
1:9fc2661:     private BrokerService broker;
1:9fc2661: 
1:9fc2661:     @Before
1:9fc2661:     public void setUp() {
1:9fc2661:         setupBroker("broker://()/localhost?");
1:9fc2661:     }
1:9fc2661: 
1:9fc2661:     @After
1:9fc2661:     public void tearDown() throws Exception {
1:9fc2661:         if (broker != null) {
1:9fc2661:             broker.stop();
1:9fc2661:             broker.waitUntilStopped();
1:9fc2661:         }
1:9fc2661:     }
1:9fc2661: 
1:9fc2661:     @Test(timeout = 60 * 1000)
1:1a8e17f:     public void verifyNoDispatchDuringDisconnect() throws Exception{
1:9fc2661:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:9fc2661:         Connection connection = factory.createConnection();
1:9fc2661:         connection.start();
1:9fc2661:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9fc2661: 
1:9fc2661:         Queue consumerQueue = session.createQueue(CONSUMER_QUEUE);
1:9fc2661:         MessageListener listenerA = new CountingListener(receivedCount);
1:9fc2661:         MessageConsumer consumerA = session.createConsumer(consumerQueue);
1:9fc2661:         consumerA.setMessageListener(listenerA);
1:9fc2661: 
1:9fc2661:         Destination producerDestination = session.createTopic(PRODUCER_DESTINATION_NAME);
1:9fc2661:         MessageProducer producer = session.createProducer(producerDestination);
1:9fc2661:         TextMessage message = session.createTextMessage("bla");
1:9fc2661:         producer.send(message);
1:9fc2661:         producer.send(message);
1:9fc2661: 
1:9fc2661:         Wait.waitFor(new Wait.Condition() {
1:9fc2661:             @Override
1:9fc2661:             public boolean isSatisified() throws Exception {
1:9fc2661:                 return receivedCount.get() == 2;
1:9fc2661:             }
1:9fc2661:         });
1:9fc2661: 
1:9fc2661:         consumerA.close();
1:9fc2661: 
1:9fc2661:         producer.send(message);
1:9fc2661:         producer.send(message);
1:9fc2661: 
1:9fc2661:         assertEquals(2, receivedCount.get());
1:9fc2661: 
1:9fc2661:         LOG.debug("Restarting consumerA");
1:9fc2661:         consumerA = session.createConsumer(consumerQueue);
1:9fc2661:         consumerA.setMessageListener(listenerA);
1:9fc2661: 
1:9fc2661:         producer.send(message);
1:9fc2661: 
1:9fc2661:         Wait.waitFor(new Wait.Condition() {
1:9fc2661:             @Override
1:9fc2661:             public boolean isSatisified() throws Exception {
1:9fc2661:                 return receivedCount.get() == 3;
1:9fc2661:             }
1:9fc2661:         });
1:9fc2661: 
1:9fc2661:         assertEquals(3, receivedCount.get());
1:9fc2661:         connection.close();
1:9fc2661:     }
1:9fc2661: 
1:9fc2661:     /**
1:9fc2661:      * Setup broker with VirtualTopic configured
1:9fc2661:      */
1:9fc2661:     private void setupBroker(String uri) {
1:9fc2661:         try {
1:9fc2661:             broker = BrokerFactory.createBroker(uri);
1:9fc2661: 
1:9fc2661:             VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:9fc2661:             VirtualTopic virtualTopic = new VirtualTopic();
1:9fc2661:             virtualTopic.setName("VirtualOrders.>");
1:9fc2661:             virtualTopic.setSelectorAware(true);
1:9fc2661:             VirtualDestination[] virtualDestinations = { virtualTopic };
1:9fc2661:             interceptor.setVirtualDestinations(virtualDestinations);
1:9fc2661:             broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1:9fc2661: 
1:9fc2661:             broker.setUseJmx(false);
1:9fc2661:             broker.start();
1:9fc2661:             broker.waitUntilStarted();
1:9fc2661:         } catch (Exception e) {
1:9fc2661:             LOG.error("Failed creating broker", e);
1:9fc2661:         }
1:9fc2661:     }
1:9fc2661: 
1:9fc2661:     class CountingListener implements MessageListener {
1:9fc2661:         AtomicInteger counter;
1:9fc2661: 
1:9fc2661:         public CountingListener(AtomicInteger counter) {
1:9fc2661:             this.counter = counter;
1:9fc2661:         }
1:9fc2661: 
1:9fc2661:         @Override
1:9fc2661:         public void onMessage(Message message) {
1:9fc2661:             counter.incrementAndGet();
1:9fc2661:         }
1:9fc2661:     }
1:9fc2661: }
1:9fc2661: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1a8e17f
/////////////////////////////////////////////////////////////////////////
1:     private static final String QUEUE_NAME="TestQ";
/////////////////////////////////////////////////////////////////////////
1:     public void verifyNoDispatchDuringDisconnect() throws Exception{
commit:9fc2661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class SelectorAwareVTThatDropsMessagesWhenNoConsumer {
1:     protected static final Logger LOG = LoggerFactory.getLogger(SelectorAwareVTThatDropsMessagesWhenNoConsumer.class);
0:     private static final String QUEUE_NAME="AMQ4899TestQueue";
1:     private static final String CONSUMER_QUEUE="Consumer.Orders.VirtualOrders." + QUEUE_NAME;
1:     private static final String PRODUCER_DESTINATION_NAME = "VirtualOrders." + QUEUE_NAME;
1: 
1:     final AtomicInteger receivedCount = new AtomicInteger(0);
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() {
1:         setupBroker("broker://()/localhost?");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
0:     public void testVirtualTopicMultipleSelectors() throws Exception{
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue consumerQueue = session.createQueue(CONSUMER_QUEUE);
1:         MessageListener listenerA = new CountingListener(receivedCount);
1:         MessageConsumer consumerA = session.createConsumer(consumerQueue);
1:         consumerA.setMessageListener(listenerA);
1: 
1:         Destination producerDestination = session.createTopic(PRODUCER_DESTINATION_NAME);
1:         MessageProducer producer = session.createProducer(producerDestination);
1:         TextMessage message = session.createTextMessage("bla");
1:         producer.send(message);
1:         producer.send(message);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receivedCount.get() == 2;
1:             }
1:         });
1: 
1:         consumerA.close();
1: 
1:         producer.send(message);
1:         producer.send(message);
1: 
1:         assertEquals(2, receivedCount.get());
1: 
1:         LOG.debug("Restarting consumerA");
1:         consumerA = session.createConsumer(consumerQueue);
1:         consumerA.setMessageListener(listenerA);
1: 
1:         producer.send(message);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receivedCount.get() == 3;
1:             }
1:         });
1: 
1:         assertEquals(3, receivedCount.get());
1:         connection.close();
1:     }
1: 
1:     /**
1:      * Setup broker with VirtualTopic configured
1:      */
1:     private void setupBroker(String uri) {
1:         try {
1:             broker = BrokerFactory.createBroker(uri);
1: 
1:             VirtualDestinationInterceptor interceptor = new VirtualDestinationInterceptor();
1:             VirtualTopic virtualTopic = new VirtualTopic();
1:             virtualTopic.setName("VirtualOrders.>");
1:             virtualTopic.setSelectorAware(true);
1:             VirtualDestination[] virtualDestinations = { virtualTopic };
1:             interceptor.setVirtualDestinations(virtualDestinations);
1:             broker.setDestinationInterceptors(new DestinationInterceptor[]{interceptor});
1: 
1:             broker.setUseJmx(false);
1:             broker.start();
1:             broker.waitUntilStarted();
1:         } catch (Exception e) {
1:             LOG.error("Failed creating broker", e);
1:         }
1:     }
1: 
1:     class CountingListener implements MessageListener {
1:         AtomicInteger counter;
1: 
1:         public CountingListener(AtomicInteger counter) {
1:             this.counter = counter;
1:         }
1: 
1:         @Override
1:         public void onMessage(Message message) {
1:             counter.incrementAndGet();
1:         }
1:     }
1: }
1: 
============================================================================