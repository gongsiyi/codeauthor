1:2b5b890: /*
1:2b5b890:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b5b890:  * contributor license agreements.  See the NOTICE file distributed with
1:2b5b890:  * this work for additional information regarding copyright ownership.
1:2b5b890:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b5b890:  * (the "License"); you may not use this file except in compliance with
1:2b5b890:  * the License.  You may obtain a copy of the License at
1:2b5b890:  *
1:2b5b890:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2b5b890:  *
1:2b5b890:  * Unless required by applicable law or agreed to in writing, software
1:2b5b890:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b5b890:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b5b890:  * See the License for the specific language governing permissions and
1:2b5b890:  * limitations under the License.
1:2b5b890:  */
1:2b5b890: 
1:2b5b890: package org.apache.activemq;
1:2b5b890: 
1:2b5b890: import org.apache.activemq.broker.jmx.ManagementContext;
1:2b5b890: import org.apache.activemq.util.DefaultTestAppender;
1:2b5b890: import org.apache.activemq.util.Wait;
1:2b5b890: import org.apache.log4j.Appender;
1:2b5b890: import org.apache.log4j.spi.LoggingEvent;
1:2b5b890: import org.junit.*;
1:2b5b890: 
1:2b5b890: import static org.junit.Assert.assertFalse;
1:2b5b890: 
1:2b5b890: import java.util.concurrent.*;
1:2b5b890: 
1:2b5b890: import org.apache.activemq.broker.BrokerService;
1:2b5b890: 
1:2b5b890: import javax.management.JMException;
1:2b5b890: import javax.management.ObjectName;
1:2b5b890: 
1:2b5b890: public class TcpTransportCloseConnectionTest {
1:2b5b890: 
1:2b5b890:     static boolean transportConnectionFailed = false;
1:2b5b890: 
1:2b5b890:     private BrokerService broker;
1:2b5b890: 
1:2b5b890:     private final String uri = "tcp://localhost:0?wireFormat.maxInactivityDuration=500";
1:2b5b890: 
1:2b5b890:     static final Appender appender = new DefaultTestAppender() {
1:2b5b890:         @Override
1:2b5b890:         public void doAppend(LoggingEvent event) {
1:2b5b890:             if(event.getMessage().toString().contains("Transport Connection")
1:2b5b890:                     && event.getMessage().toString().contains("failed")
1:2b5b890:                     && (event.getMessage().toString().contains("java.net.SocketException") || event.getMessage().toString().contains("java.io.EOFException"))) {
1:2b5b890:                 transportConnectionFailed = true;
1:2b5b890:             }
1:2b5b890:         }
1:2b5b890:     };
1:2b5b890: 
1:2b5b890:     class CustomManagementContext extends ManagementContext {
1:2b5b890:         @Override
1:2b5b890:         public void unregisterMBean(ObjectName name) throws JMException {
1:2b5b890:             try {
1:2b5b890:                 //Sleep for a second to emulate the MBean server being hung up of an unregister MBean call.
1:2b5b890:                 TimeUnit.SECONDS.sleep(1);
1:2b5b890:             }
1:2b5b890:             catch(Throwable t) {
1:2b5b890:             }
1:2b5b890:             super.unregisterMBean(name);
1:2b5b890:         }
1:2b5b890:     }
1:2b5b890: 
1:2b5b890:     @BeforeClass
1:2b5b890:     public static void setUp() throws Exception {
1:2b5b890:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1:2b5b890:     }
1:2b5b890: 
1:2b5b890:     @AfterClass
1:2b5b890:     public static void setDown() throws Exception {
1:2b5b890:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:2b5b890:     }
1:2b5b890: 
1:2b5b890:     @Before
1:2b5b890:     public void startBroker() throws Exception {
1:2b5b890:         broker = new BrokerService();
1:2b5b890:         broker.setPersistent(false);
1:2b5b890:         broker.addConnector(uri);
1:2b5b890:         ManagementContext customManagementContext = new CustomManagementContext();
1:2b5b890:         broker.setManagementContext(customManagementContext);
1:2b5b890:         broker.start();
1:2b5b890:     }
1:2b5b890: 
1:2b5b890:     @After
1:2b5b890:     public void tearDown() throws Exception {
1:2b5b890:         if (broker != null) {
1:2b5b890:             broker.stop();
1:2b5b890:             broker.waitUntilStopped();
1:2b5b890:         }
1:2b5b890:     }
1:2b5b890: 
1:2b5b890:     @Test
1:2b5b890:     public void tesCloseConnectionTest() throws Exception {
1:2b5b890:         final ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:2b5b890:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1:2b5b890: 
1:2b5b890:         ActiveMQConnection connection = (ActiveMQConnection) activeMQConnectionFactory.createConnection();
1:2b5b890:         connection.start();
1:2b5b890:         connection.close();
1:2b5b890: 
1:2b5b890:         assertFalse("The Transport has not failed", Wait.waitFor(new Wait.Condition() {
1:2b5b890:             @Override
1:2b5b890:             public boolean isSatisified() throws Exception {
1:2b5b890:                 return transportConnectionFailed;
1:2b5b890:             }
1:2b5b890:         }, 2 * 1000));
1:2b5b890: 
1:2b5b890:     }
1:2b5b890: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2b5b890
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.activemq.util.Wait;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.*;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: import java.util.concurrent.*;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: 
1: import javax.management.JMException;
1: import javax.management.ObjectName;
1: 
1: public class TcpTransportCloseConnectionTest {
1: 
1:     static boolean transportConnectionFailed = false;
1: 
1:     private BrokerService broker;
1: 
1:     private final String uri = "tcp://localhost:0?wireFormat.maxInactivityDuration=500";
1: 
1:     static final Appender appender = new DefaultTestAppender() {
1:         @Override
1:         public void doAppend(LoggingEvent event) {
1:             if(event.getMessage().toString().contains("Transport Connection")
1:                     && event.getMessage().toString().contains("failed")
1:                     && (event.getMessage().toString().contains("java.net.SocketException") || event.getMessage().toString().contains("java.io.EOFException"))) {
1:                 transportConnectionFailed = true;
1:             }
1:         }
1:     };
1: 
1:     class CustomManagementContext extends ManagementContext {
1:         @Override
1:         public void unregisterMBean(ObjectName name) throws JMException {
1:             try {
1:                 //Sleep for a second to emulate the MBean server being hung up of an unregister MBean call.
1:                 TimeUnit.SECONDS.sleep(1);
1:             }
1:             catch(Throwable t) {
1:             }
1:             super.unregisterMBean(name);
1:         }
1:     }
1: 
1:     @BeforeClass
1:     public static void setUp() throws Exception {
1:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1:     }
1: 
1:     @AfterClass
1:     public static void setDown() throws Exception {
1:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:     }
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.addConnector(uri);
1:         ManagementContext customManagementContext = new CustomManagementContext();
1:         broker.setManagementContext(customManagementContext);
1:         broker.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void tesCloseConnectionTest() throws Exception {
1:         final ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:         activeMQConnectionFactory.setWatchTopicAdvisories(false);
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) activeMQConnectionFactory.createConnection();
1:         connection.start();
1:         connection.close();
1: 
1:         assertFalse("The Transport has not failed", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return transportConnectionFailed;
1:             }
1:         }, 2 * 1000));
1: 
1:     }
1: }
============================================================================