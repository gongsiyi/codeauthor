1:5a299b7: /**
1:5a299b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a299b7:  * contributor license agreements.  See the NOTICE file distributed with
1:5a299b7:  * this work for additional information regarding copyright ownership.
1:5a299b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a299b7:  * (the "License"); you may not use this file except in compliance with
1:5a299b7:  * the License.  You may obtain a copy of the License at
1:5a299b7:  *
1:5a299b7:  * http://www.apache.org/licenses/LICENSE-2.0
1:5a299b7:  *
1:5a299b7:  * Unless required by applicable law or agreed to in writing, software
1:5a299b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a299b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a299b7:  * See the License for the specific language governing permissions and
1:5a299b7:  * limitations under the License.
1:5a299b7:  */
1:5a299b7: package org.apache.activemq.leveldb.test;
1:5a299b7: 
1:5a299b7: import org.apache.activemq.leveldb.replicated.MasterLevelDBStore;
1:9752e1d: import org.apache.commons.io.FileUtils;
1:9752e1d: import org.junit.After;
1:49a2d96: import org.junit.Test;
1:5a299b7: 
1:a6e35a6: import java.io.File;
1:5a299b7: import java.net.BindException;
1:5a299b7: import java.net.InetSocketAddress;
1:5a299b7: import java.net.Socket;
1:5a299b7: import java.net.URI;
1:5a299b7: import java.util.concurrent.ExecutorService;
1:5a299b7: import java.util.concurrent.Executors;
1:5a299b7: 
1:49a2d96: import static org.junit.Assert.*;
1:49a2d96: 
1:49a2d96: 
1:5a299b7: /**
1:5a299b7:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:5a299b7:  */
1:49a2d96: public class MasterLevelDBStoreTest {
1:5a299b7: 
1:9752e1d:     MasterLevelDBStore store;
1:9752e1d: 
1:4ca5519:     @Test(timeout = 1000*60*10)
1:5a299b7:     public void testStoppingStoreStopsTransport() throws Exception {
1:9752e1d:         store = new MasterLevelDBStore();
1:a6e35a6:         store.setDirectory(new File("target/activemq-data/master-leveldb-store-test"));
1:5a299b7:         store.setReplicas(0);
1:5a299b7: 
1:5a299b7:         ExecutorService threads = Executors.newFixedThreadPool(1);
1:5a299b7:         threads.execute(new Runnable() {
1:5a299b7:             @Override
1:5a299b7:             public void run() {
1:5a299b7:                 try {
1:5a299b7:                     store.start();
1:5a299b7:                 } catch (Exception e) {
1:5a299b7:                     e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:5a299b7:                 }
1:5a299b7:             }
1:5a299b7:         });
1:9752e1d: 
1:5a299b7:         // give some time to come up..
1:5a299b7:         Thread.sleep(2000);
1:5a299b7:         String address = store.transport_server().getBoundAddress();
1:5a299b7:         URI bindAddress = new URI(address);
1:5a299b7:         System.out.println(address);
1:5a299b7:         Socket socket = new Socket();
1:5a299b7:         try {
1:5a299b7:             socket.bind(new InetSocketAddress(bindAddress.getHost(), bindAddress.getPort()));
1:5a299b7:             fail("We should not have been able to connect...");
1:5a299b7:         } catch (BindException e) {
1:5a299b7:             System.out.println("Good. We cannot bind.");
1:5a299b7:         }
1:5a299b7: 
1:5a299b7: 
1:5a299b7:         threads.execute(new Runnable() {
1:5a299b7:             @Override
1:5a299b7:             public void run() {
1:5a299b7:                 try {
1:5a299b7:                     store.stop();
1:5a299b7:                 } catch (Exception e) {
1:5a299b7:                     e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:5a299b7:                 }
1:5a299b7:             }
1:5a299b7:         });
1:5a299b7: 
1:5a299b7:         Thread.sleep(2000);
1:5a299b7:         try {
1:5a299b7:             socket.bind(new InetSocketAddress(bindAddress.getHost(), bindAddress.getPort()));
1:5a299b7:             System.out.println("Can bind, so protocol server must have been shut down.");
1:5a299b7: 
1:5a299b7:         } catch (IllegalStateException e) {
1:5a299b7:             fail("Server protocol port is still opened..");
1:5a299b7:         }
1:5a299b7: 
1:5a299b7:     }
1:5a299b7: 
1:9752e1d:     @After
1:9752e1d:     public void stop() throws Exception {
1:9752e1d:         if (store.isStarted()) {
1:9752e1d:             store.stop();
1:f1df9f8:             FileUtils.deleteQuietly(store.directory());
1:9752e1d:         }
1:9752e1d:     }
1:5a299b7: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:a6e35a6
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:         store.setDirectory(new File("target/activemq-data/master-leveldb-store-test"));
author:gtully
-------------------------------------------------------------------------------
commit:f1df9f8
/////////////////////////////////////////////////////////////////////////
1:             FileUtils.deleteQuietly(store.directory());
commit:5ebe71c
/////////////////////////////////////////////////////////////////////////
0:             FileUtils.deleteDirectory(store.directory());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9752e1d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.FileUtils;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     MasterLevelDBStore store;
1: 
1:         store = new MasterLevelDBStore();
/////////////////////////////////////////////////////////////////////////
1: 
1:     @After
1:     public void stop() throws Exception {
1:         if (store.isStarted()) {
1:             store.stop();
1:         }
0:         FileUtils.deleteDirectory(store.directory());
1:     }
author:Kevin Earls
-------------------------------------------------------------------------------
commit:4ca5519
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*10)
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:49a2d96
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
1: 
1: 
1: public class MasterLevelDBStoreTest {
0:     @Test(timeout = 1000*60*60)
author:Christian Posta
-------------------------------------------------------------------------------
commit:5a299b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.leveldb.test;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.leveldb.replicated.MasterLevelDBStore;
1: 
1: import java.net.BindException;
1: import java.net.InetSocketAddress;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
0: public class MasterLevelDBStoreTest extends TestCase {
1: 
1:     public void testStoppingStoreStopsTransport() throws Exception {
0:         final MasterLevelDBStore store = new MasterLevelDBStore();
1:         store.setReplicas(0);
1: 
1:         ExecutorService threads = Executors.newFixedThreadPool(1);
1:         threads.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     store.start();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:                 }
1:             }
1:         });
1: 
1:         // give some time to come up..
1:         Thread.sleep(2000);
1:         String address = store.transport_server().getBoundAddress();
1:         URI bindAddress = new URI(address);
1:         System.out.println(address);
1:         Socket socket = new Socket();
1:         try {
1:             socket.bind(new InetSocketAddress(bindAddress.getHost(), bindAddress.getPort()));
1:             fail("We should not have been able to connect...");
1:         } catch (BindException e) {
1:             System.out.println("Good. We cannot bind.");
1:         }
1: 
1: 
1:         threads.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     store.stop();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
1:                 }
1:             }
1:         });
1: 
1:         Thread.sleep(2000);
1:         try {
1:             socket.bind(new InetSocketAddress(bindAddress.getHost(), bindAddress.getPort()));
1:             System.out.println("Can bind, so protocol server must have been shut down.");
1: 
1:         } catch (IllegalStateException e) {
1:             fail("Server protocol port is still opened..");
1:         }
1: 
1:     }
1: }
============================================================================