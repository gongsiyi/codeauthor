1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.broker.BrokerContext;
1:bbc039f: import org.apache.activemq.spring.Utils;
1:bbc039f: import org.slf4j.Logger;
1:bbc039f: import org.slf4j.LoggerFactory;
1:bbc039f: import org.springframework.beans.factory.FactoryBean;
1:bbc039f: import org.springframework.core.io.Resource;
1:bbc039f: import org.w3c.dom.Document;
1:bbc039f: import org.w3c.dom.Element;
1:bbc039f: import org.w3c.dom.Node;
1:bbc039f: import org.w3c.dom.NodeList;
1:bbc039f: 
1:bbc039f: import java.io.IOException;
1:bbc039f: import java.net.MalformedURLException;
1:bbc039f: import java.util.LinkedList;
1:bbc039f: import java.util.List;
1:bbc039f: import java.util.Map;
1:bbc039f: import java.util.Properties;
1:bbc039f: import java.util.regex.Matcher;
1:bbc039f: import java.util.regex.Pattern;
1:bbc039f: 
1:bbc039f: public class PropertiesPlaceHolderUtil {
1:bbc039f: 
1:bbc039f:     public static final Logger LOG = LoggerFactory.getLogger(PropertiesPlaceHolderUtil.class);
1:bbc039f: 
1:bbc039f:     static final Pattern pattern = Pattern.compile("\\$\\{([^\\}]+)\\}");
1:bbc039f:     final Properties properties;
1:bbc039f: 
1:bbc039f:     public PropertiesPlaceHolderUtil(Properties properties) {
1:bbc039f:         this.properties = properties;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void filter(Properties toFilter) {
1:bbc039f:         for (Map.Entry<Object, Object> entry : toFilter.entrySet()) {
1:bbc039f:             String val = (String) entry.getValue();
1:bbc039f:             String newVal = filter(val);
1:bbc039f:             if (!val.equals(newVal)) {
1:bbc039f:                 toFilter.put(entry.getKey(), newVal);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public String filter(String str) {
1:bbc039f:         int start = 0;
1:bbc039f:         while (true) {
1:bbc039f:             Matcher matcher = pattern.matcher(str);
1:bbc039f:             if (!matcher.find(start)) {
1:bbc039f:                 break;
1:bbc039f:             }
1:bbc039f:             String group = matcher.group(1);
1:bbc039f:             String property = properties.getProperty(group);
1:bbc039f:             if (property != null) {
1:bbc039f:                 str = matcher.replaceFirst(Matcher.quoteReplacement(property));
1:bbc039f:             } else {
1:bbc039f:                 start = matcher.end();
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         return replaceBytePostfix(str);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     static Pattern[] byteMatchers = new Pattern[] {
1:bbc039f:             Pattern.compile("^\\s*(\\d+)\\s*(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:bbc039f:             Pattern.compile("^\\s*(\\d+)\\s*k(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:bbc039f:             Pattern.compile("^\\s*(\\d+)\\s*m(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:bbc039f:             Pattern.compile("^\\s*(\\d+)\\s*g(b)?\\s*$", Pattern.CASE_INSENSITIVE)};
1:bbc039f: 
1:bbc039f:     // xbean can Xb, Xkb, Xmb, Xg etc
1:bbc039f:     private String replaceBytePostfix(String str) {
1:bbc039f:         try {
1:bbc039f:             for (int i=0; i< byteMatchers.length; i++) {
1:bbc039f:                 Matcher matcher = byteMatchers[i].matcher(str);
1:bbc039f:                 if (matcher.matches()) {
1:bbc039f:                     long value = Long.parseLong(matcher.group(1));
1:bbc039f:                     for (int j=1; j<=i; j++) {
1:bbc039f:                         value *= 1024;
1:bbc039f:                     }
1:bbc039f:                     return String.valueOf(value);
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         } catch (NumberFormatException ignored) {
1:bbc039f:             LOG.debug("nfe on: " + str, ignored);
1:bbc039f:         }
1:bbc039f:         return str;
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     public void mergeProperties(Document doc, Properties initialProperties, BrokerContext brokerContext) {
1:bbc039f:         // find resources
1:bbc039f:         //        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
1:bbc039f:         //            <property name="locations" || name="properties">
1:bbc039f:         //              ...
1:bbc039f:         //            </property>
1:bbc039f:         //          </bean>
1:bbc039f:         LinkedList<String> resources = new LinkedList<String>();
1:bbc039f:         LinkedList<String> propertiesClazzes = new LinkedList<String>();
1:bbc039f:         NodeList beans = doc.getElementsByTagNameNS("*", "bean");
1:bbc039f:         for (int i = 0; i < beans.getLength(); i++) {
1:bbc039f:             Node bean = beans.item(0);
1:bbc039f:             if (bean.hasAttributes() && bean.getAttributes().getNamedItem("class").getTextContent().contains("PropertyPlaceholderConfigurer")) {
1:bbc039f:                 if (bean.hasChildNodes()) {
1:bbc039f:                     NodeList beanProps = bean.getChildNodes();
1:bbc039f:                     for (int j = 0; j < beanProps.getLength(); j++) {
1:bbc039f:                         Node beanProp = beanProps.item(j);
1:bbc039f:                         if (Node.ELEMENT_NODE == beanProp.getNodeType() && beanProp.hasAttributes() && beanProp.getAttributes().getNamedItem("name") != null) {
1:bbc039f:                             String propertyName = beanProp.getAttributes().getNamedItem("name").getTextContent();
1:bbc039f:                             if ("locations".equals(propertyName)) {
1:bbc039f: 
1:bbc039f:                                 // interested in value or list/value of locations property
1:bbc039f:                                 Element beanPropElement = (Element) beanProp;
1:bbc039f:                                 NodeList values = beanPropElement.getElementsByTagNameNS("*", "value");
1:bbc039f:                                 for (int k = 0; k < values.getLength(); k++) {
1:bbc039f:                                     Node value = values.item(k);
1:bbc039f:                                     resources.add(value.getFirstChild().getTextContent());
1:bbc039f:                                 }
1:bbc039f:                             } else if ("properties".equals(propertyName)) {
1:bbc039f: 
1:bbc039f:                                 // bean or beanFactory
1:bbc039f:                                 Element beanPropElement = (Element) beanProp;
1:bbc039f:                                 NodeList values = beanPropElement.getElementsByTagNameNS("*", "bean");
1:bbc039f:                                 for (int k = 0; k < values.getLength(); k++) {
1:bbc039f:                                     Node value = values.item(k);
1:bbc039f:                                     if (value.hasAttributes()) {
1:bbc039f:                                         Node beanClassTypeNode = value.getAttributes().getNamedItem("class");
1:bbc039f:                                         if (beanClassTypeNode != null) {
1:bbc039f:                                             propertiesClazzes.add(beanClassTypeNode.getFirstChild().getTextContent());
1:bbc039f:                                         }
1:bbc039f:                                     }
1:bbc039f:                                 }
1:bbc039f:                             }
1:bbc039f:                         }
1:bbc039f:                     }
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         for (String value : propertiesClazzes) {
1:bbc039f:             try {
1:bbc039f:                 Object springBean = getClass().getClassLoader().loadClass(value).newInstance();
1:bbc039f:                 if (springBean instanceof FactoryBean) {
1:bbc039f:                     // can't access the factory or created properties from spring context so we got to recreate
1:bbc039f:                     initialProperties.putAll((Properties) FactoryBean.class.getMethod("getObject", (Class<?>[]) null).invoke(springBean));
1:bbc039f:                 }
1:bbc039f:             } catch (Throwable e) {
1:bbc039f:                 LOG.debug("unexpected exception processing properties bean class: " + propertiesClazzes, e);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         List<Resource> propResources = new LinkedList<Resource>();
1:bbc039f:         for (String value : resources) {
1:bbc039f:             try {
1:bbc039f:                 if (!value.isEmpty()) {
1:bbc039f:                     propResources.add(Utils.resourceFromString(filter(value)));
1:bbc039f:                 }
1:bbc039f:             } catch (MalformedURLException e) {
1:bbc039f:                 LOG.info("failed to resolve resource: " + value, e);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         for (Resource resource : propResources) {
1:bbc039f:             Properties properties = new Properties();
1:bbc039f:             try {
1:bbc039f:                 properties.load(resource.getInputStream());
1:bbc039f:             } catch (IOException e) {
1:bbc039f:                 LOG.info("failed to load properties resource: " + resource, e);
1:bbc039f:             }
1:bbc039f:             initialProperties.putAll(properties);
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.spring.Utils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.beans.factory.FactoryBean;
1: import org.springframework.core.io.Resource;
1: import org.w3c.dom.Document;
1: import org.w3c.dom.Element;
1: import org.w3c.dom.Node;
1: import org.w3c.dom.NodeList;
1: 
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: public class PropertiesPlaceHolderUtil {
1: 
1:     public static final Logger LOG = LoggerFactory.getLogger(PropertiesPlaceHolderUtil.class);
1: 
1:     static final Pattern pattern = Pattern.compile("\\$\\{([^\\}]+)\\}");
1:     final Properties properties;
1: 
1:     public PropertiesPlaceHolderUtil(Properties properties) {
1:         this.properties = properties;
1:     }
1: 
1:     public void filter(Properties toFilter) {
1:         for (Map.Entry<Object, Object> entry : toFilter.entrySet()) {
1:             String val = (String) entry.getValue();
1:             String newVal = filter(val);
1:             if (!val.equals(newVal)) {
1:                 toFilter.put(entry.getKey(), newVal);
1:             }
1:         }
1:     }
1: 
1:     public String filter(String str) {
1:         int start = 0;
1:         while (true) {
1:             Matcher matcher = pattern.matcher(str);
1:             if (!matcher.find(start)) {
1:                 break;
1:             }
1:             String group = matcher.group(1);
1:             String property = properties.getProperty(group);
1:             if (property != null) {
1:                 str = matcher.replaceFirst(Matcher.quoteReplacement(property));
1:             } else {
1:                 start = matcher.end();
1:             }
1:         }
1:         return replaceBytePostfix(str);
1:     }
1: 
1:     static Pattern[] byteMatchers = new Pattern[] {
1:             Pattern.compile("^\\s*(\\d+)\\s*(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:             Pattern.compile("^\\s*(\\d+)\\s*k(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:             Pattern.compile("^\\s*(\\d+)\\s*m(b)?\\s*$", Pattern.CASE_INSENSITIVE),
1:             Pattern.compile("^\\s*(\\d+)\\s*g(b)?\\s*$", Pattern.CASE_INSENSITIVE)};
1: 
1:     // xbean can Xb, Xkb, Xmb, Xg etc
1:     private String replaceBytePostfix(String str) {
1:         try {
1:             for (int i=0; i< byteMatchers.length; i++) {
1:                 Matcher matcher = byteMatchers[i].matcher(str);
1:                 if (matcher.matches()) {
1:                     long value = Long.parseLong(matcher.group(1));
1:                     for (int j=1; j<=i; j++) {
1:                         value *= 1024;
1:                     }
1:                     return String.valueOf(value);
1:                 }
1:             }
1:         } catch (NumberFormatException ignored) {
1:             LOG.debug("nfe on: " + str, ignored);
1:         }
1:         return str;
1:     }
1: 
1:     public void mergeProperties(Document doc, Properties initialProperties, BrokerContext brokerContext) {
1:         // find resources
1:         //        <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
1:         //            <property name="locations" || name="properties">
1:         //              ...
1:         //            </property>
1:         //          </bean>
1:         LinkedList<String> resources = new LinkedList<String>();
1:         LinkedList<String> propertiesClazzes = new LinkedList<String>();
1:         NodeList beans = doc.getElementsByTagNameNS("*", "bean");
1:         for (int i = 0; i < beans.getLength(); i++) {
1:             Node bean = beans.item(0);
1:             if (bean.hasAttributes() && bean.getAttributes().getNamedItem("class").getTextContent().contains("PropertyPlaceholderConfigurer")) {
1:                 if (bean.hasChildNodes()) {
1:                     NodeList beanProps = bean.getChildNodes();
1:                     for (int j = 0; j < beanProps.getLength(); j++) {
1:                         Node beanProp = beanProps.item(j);
1:                         if (Node.ELEMENT_NODE == beanProp.getNodeType() && beanProp.hasAttributes() && beanProp.getAttributes().getNamedItem("name") != null) {
1:                             String propertyName = beanProp.getAttributes().getNamedItem("name").getTextContent();
1:                             if ("locations".equals(propertyName)) {
1: 
1:                                 // interested in value or list/value of locations property
1:                                 Element beanPropElement = (Element) beanProp;
1:                                 NodeList values = beanPropElement.getElementsByTagNameNS("*", "value");
1:                                 for (int k = 0; k < values.getLength(); k++) {
1:                                     Node value = values.item(k);
1:                                     resources.add(value.getFirstChild().getTextContent());
1:                                 }
1:                             } else if ("properties".equals(propertyName)) {
1: 
1:                                 // bean or beanFactory
1:                                 Element beanPropElement = (Element) beanProp;
1:                                 NodeList values = beanPropElement.getElementsByTagNameNS("*", "bean");
1:                                 for (int k = 0; k < values.getLength(); k++) {
1:                                     Node value = values.item(k);
1:                                     if (value.hasAttributes()) {
1:                                         Node beanClassTypeNode = value.getAttributes().getNamedItem("class");
1:                                         if (beanClassTypeNode != null) {
1:                                             propertiesClazzes.add(beanClassTypeNode.getFirstChild().getTextContent());
1:                                         }
1:                                     }
1:                                 }
1:                             }
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:         for (String value : propertiesClazzes) {
1:             try {
1:                 Object springBean = getClass().getClassLoader().loadClass(value).newInstance();
1:                 if (springBean instanceof FactoryBean) {
1:                     // can't access the factory or created properties from spring context so we got to recreate
1:                     initialProperties.putAll((Properties) FactoryBean.class.getMethod("getObject", (Class<?>[]) null).invoke(springBean));
1:                 }
1:             } catch (Throwable e) {
1:                 LOG.debug("unexpected exception processing properties bean class: " + propertiesClazzes, e);
1:             }
1:         }
1:         List<Resource> propResources = new LinkedList<Resource>();
1:         for (String value : resources) {
1:             try {
1:                 if (!value.isEmpty()) {
1:                     propResources.add(Utils.resourceFromString(filter(value)));
1:                 }
1:             } catch (MalformedURLException e) {
1:                 LOG.info("failed to resolve resource: " + value, e);
1:             }
1:         }
1:         for (Resource resource : propResources) {
1:             Properties properties = new Properties();
1:             try {
1:                 properties.load(resource.getInputStream());
1:             } catch (IOException e) {
1:                 LOG.info("failed to load properties resource: " + resource, e);
1:             }
1:             initialProperties.putAll(properties);
1:         }
1:     }
1: 
1: }
============================================================================