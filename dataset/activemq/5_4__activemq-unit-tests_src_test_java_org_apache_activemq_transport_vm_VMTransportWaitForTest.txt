1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:43880af: package org.apache.activemq.transport.vm;
1:b8830dd: 
1:b8830dd: import static org.junit.Assert.assertFalse;
1:b8830dd: import static org.junit.Assert.assertTrue;
1:b8830dd: import static org.junit.Assert.fail;
1:b8830dd: 
1:5016c4d: import java.io.IOException;
1:43880af: import java.net.URI;
1:43880af: import java.util.concurrent.CountDownLatch;
1:43880af: import java.util.concurrent.TimeUnit;
7:43880af: 
1:43880af: import javax.jms.JMSException;
1:43880af: 
1:43880af: import org.apache.activemq.ActiveMQConnectionFactory;
1:5016c4d: import org.apache.activemq.broker.BrokerRegistry;
1:43880af: import org.apache.activemq.broker.BrokerService;
1:5016c4d: import org.junit.After;
1:b8830dd: import org.junit.Test;
1:cf62d58: import org.slf4j.Logger;
1:cf62d58: import org.slf4j.LoggerFactory;
1:43880af: 
1:b8830dd: public class VMTransportWaitForTest {
1:cf62d58:     static final Logger LOG = LoggerFactory.getLogger(VMTransportWaitForTest.class);
1:43880af: 
1:5016c4d:     private static final int WAIT_TIME = 20000;
1:5016c4d:     private static final int SHORT_WAIT_TIME = 5000;
1:5016c4d: 
1:b8830dd:     private static final String VM_BROKER_URI_NO_WAIT =
1:43880af:         "vm://localhost?broker.persistent=false&create=false";
1:b8830dd: 
1:b8830dd:     private static final String VM_BROKER_URI_WAIT_FOR_START =
1:5016c4d:         VM_BROKER_URI_NO_WAIT + "&waitForStart=" + WAIT_TIME;
1:5016c4d: 
1:5016c4d:     private static final String VM_BROKER_URI_SHORT_WAIT_FOR_START =
1:5016c4d:         VM_BROKER_URI_NO_WAIT + "&waitForStart=" + SHORT_WAIT_TIME;
1:b8830dd: 
1:43880af:     CountDownLatch started = new CountDownLatch(1);
1:43880af:     CountDownLatch gotConnection = new CountDownLatch(1);
1:43880af: 
1:5016c4d:     @After
1:5016c4d:     public void after() throws IOException {
1:5016c4d:         BrokerRegistry.getInstance().unbind("localhost");
1:5016c4d:     }
1:5016c4d: 
1:b8830dd:     @Test(timeout=90000)
1:43880af:     public void testWaitFor() throws Exception {
2:43880af:         try {
1:43880af:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_NO_WAIT));
2:43880af:             cf.createConnection();
1:43880af:             fail("expect broker not exist exception");
1:43880af:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
2:43880af:         }
1:5016c4d: 
1:b8830dd:         // spawn a thread that will wait for an embedded broker to start via
1:b8830dd:         // vm://..
1:a9b8d98:         Thread t = new Thread("ClientConnectionThread") {
1:b8830dd:             @Override
1:43880af:             public void run() {
1:b8830dd:                 try {
1:b8830dd:                     started.countDown();
1:b8830dd:                     ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_WAIT_FOR_START));
1:b8830dd:                     cf.createConnection();
1:b8830dd:                     gotConnection.countDown();
1:b8830dd:                 } catch (Exception e) {
1:b8830dd:                     e.printStackTrace();
1:b8830dd:                     fail("unexpected exception: " + e);
1:b8830dd:                 }
1:43880af:             }
1:43880af:         };
1:43880af:         t.start();
1:43880af:         started.await(20, TimeUnit.SECONDS);
1:43880af:         Thread.yield();
1:43880af:         assertFalse("has not got connection", gotConnection.await(2, TimeUnit.SECONDS));
1:b8830dd: 
1:43880af:         BrokerService broker = new BrokerService();
1:43880af:         broker.setPersistent(false);
1:43880af:         broker.start();
1:a9b8d98:         assertTrue("has got connection", gotConnection.await(5, TimeUnit.SECONDS));
1:b8830dd:         broker.stop();
1:43880af:     }
1:5016c4d: 
1:5016c4d:     @Test(timeout=90000)
1:5016c4d:     public void testWaitForNoBrokerInRegistry() throws Exception {
1:5016c4d: 
1:5016c4d:         long startTime = System.currentTimeMillis();
1:5016c4d: 
1:5016c4d:         try {
1:5016c4d:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_SHORT_WAIT_FOR_START));
1:5016c4d:             cf.createConnection();
1:5016c4d:             fail("expect broker not exist exception");
1:5016c4d:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
1:5016c4d:         }
1:5016c4d: 
1:5016c4d:         long endTime = System.currentTimeMillis();
1:5016c4d: 
1:cf62d58:         LOG.info("Total wait time was: {}", endTime - startTime);
1:5016c4d:         assertTrue(endTime - startTime >= SHORT_WAIT_TIME - 100);
1:5016c4d:     }
1:5016c4d: 
1:5016c4d:     @Test(timeout=90000)
1:5016c4d:     public void testWaitForNotStartedButInRegistry() throws Exception {
1:5016c4d: 
1:5016c4d:         BrokerService broker = new BrokerService();
1:5016c4d:         broker.setPersistent(false);
1:5016c4d:         BrokerRegistry.getInstance().bind("localhost", broker);
1:5016c4d: 
1:5016c4d:         long startTime = System.currentTimeMillis();
1:5016c4d: 
1:5016c4d:         try {
1:5016c4d:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_SHORT_WAIT_FOR_START));
1:5016c4d:             cf.createConnection();
1:5016c4d:             fail("expect broker not exist exception");
1:5016c4d:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
1:5016c4d:         }
1:5016c4d: 
1:5016c4d:         long endTime = System.currentTimeMillis();
1:43880af: 
1:cf62d58:         LOG.info("Total wait time was: {}", endTime - startTime);
1:5016c4d:         assertTrue(endTime - startTime >= SHORT_WAIT_TIME - 100);
1:5016c4d:     }
1:43880af: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(VMTransportWaitForTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total wait time was: {}", endTime - startTime);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total wait time was: {}", endTime - startTime);
commit:a9b8d98
/////////////////////////////////////////////////////////////////////////
1:         Thread t = new Thread("ClientConnectionThread") {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("has got connection", gotConnection.await(5, TimeUnit.SECONDS));
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5016c4d
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.junit.After;
0: import org.mortbay.log.Log;
1:     private static final int WAIT_TIME = 20000;
1:     private static final int SHORT_WAIT_TIME = 5000;
1: 
1:         VM_BROKER_URI_NO_WAIT + "&waitForStart=" + WAIT_TIME;
1: 
1:     private static final String VM_BROKER_URI_SHORT_WAIT_FOR_START =
1:         VM_BROKER_URI_NO_WAIT + "&waitForStart=" + SHORT_WAIT_TIME;
1:     @After
1:     public void after() throws IOException {
1:         BrokerRegistry.getInstance().unbind("localhost");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout=90000)
1:     public void testWaitForNoBrokerInRegistry() throws Exception {
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         try {
1:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_SHORT_WAIT_FOR_START));
1:             cf.createConnection();
1:             fail("expect broker not exist exception");
1:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
1:         }
1: 
1:         long endTime = System.currentTimeMillis();
1: 
0:         Log.info("Total wait time was: {}", endTime - startTime);
1:         assertTrue(endTime - startTime >= SHORT_WAIT_TIME - 100);
1:     }
1: 
1:     @Test(timeout=90000)
1:     public void testWaitForNotStartedButInRegistry() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         BrokerRegistry.getInstance().bind("localhost", broker);
1: 
1:         long startTime = System.currentTimeMillis();
1: 
1:         try {
1:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_SHORT_WAIT_FOR_START));
1:             cf.createConnection();
1:             fail("expect broker not exist exception");
1:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
1:         }
1: 
1:         long endTime = System.currentTimeMillis();
1: 
0:         Log.info("Total wait time was: {}", endTime - startTime);
1:         assertTrue(endTime - startTime >= SHORT_WAIT_TIME - 100);
1:     }
commit:b8830dd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import org.junit.Test;
1: public class VMTransportWaitForTest {
1:     private static final String VM_BROKER_URI_NO_WAIT =
1: 
1:     private static final String VM_BROKER_URI_WAIT_FOR_START =
1: 
1:     @Test(timeout=90000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         // spawn a thread that will wait for an embedded broker to start via
1:         // vm://..
1:             @Override
1:                 try {
1:                     started.countDown();
1:                     ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_WAIT_FOR_START));
1:                     cf.createConnection();
1:                     gotConnection.countDown();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                     fail("unexpected exception: " + e);
1:                 }
1: 
1:         broker.stop();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:e80bf00
/////////////////////////////////////////////////////////////////////////
0:                         fail("unexpected exception: " + e);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("has got connection", gotConnection.await(400, TimeUnit.MILLISECONDS));
commit:43880af
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.vm;
1: 
1: import java.net.URI;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.JMSException;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
0: public class VMTransportWaitForTest extends TestCase {
1: 
0:     private static final String VM_BROKER_URI_NO_WAIT = 
1:         "vm://localhost?broker.persistent=false&create=false";
1:     
0:     private static final String VM_BROKER_URI_WAIT_FOR_START = 
0:         VM_BROKER_URI_NO_WAIT + "&waitForStart=20000";
1:     
1:     CountDownLatch started = new CountDownLatch(1);
1:     CountDownLatch gotConnection = new CountDownLatch(1);
1: 
1:     public void testWaitFor() throws Exception {
1:         try {
1:             ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_NO_WAIT));
1:             cf.createConnection();
1:             fail("expect broker not exist exception");
1:         } catch (JMSException expectedOnNoBrokerAndNoCreate) {
1:         }
1:         
0:         // spawn a thread that will wait for an embedded broker to start via vm://..
0:         Thread t = new Thread() {
1:             public void run() {
1:                     try {
0:                         started.countDown();
0:                         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM_BROKER_URI_WAIT_FOR_START));
1:                         cf.createConnection();
0:                         gotConnection.countDown();
1:                    
0:                     } catch (Exception e) {
0:                         e.printStackTrace();
0:                         fail("unexpected exception:" + e);
1:                     }
1:             }
1:         };
1:         t.start();
1:         started.await(20, TimeUnit.SECONDS);
1:         Thread.yield();
1:         assertFalse("has not got connection", gotConnection.await(2, TimeUnit.SECONDS));
1:         
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
0:         broker.addConnector("tcp://localhost:61616");
1:         broker.start();
0:         assertTrue("has got connection", gotConnection.await(200, TimeUnit.MILLISECONDS));
0:         broker.stop(); 
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================