1:6519c3e: /**
1:6519c3e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6519c3e:  * contributor license agreements.  See the NOTICE file distributed with
1:6519c3e:  * this work for additional information regarding copyright ownership.
1:6519c3e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6519c3e:  * (the "License"); you may not use this file except in compliance with
1:6519c3e:  * the License.  You may obtain a copy of the License at
1:6519c3e:  *
1:6519c3e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6519c3e:  *
1:6519c3e:  * Unless required by applicable law or agreed to in writing, software
1:6519c3e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6519c3e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6519c3e:  * See the License for the specific language governing permissions and
1:6519c3e:  * limitations under the License.
1:6519c3e:  */
1:6519c3e: package org.apache.activemq.usecases;
4:6519c3e: 
1:4743a20: import static org.junit.Assert.assertTrue;
1:4743a20: 
1:6519c3e: import java.text.SimpleDateFormat;
1:6519c3e: import java.util.Date;
1:6519c3e: import java.util.Vector;
1:6519c3e: import java.util.concurrent.TimeUnit;
1:6519c3e: import java.util.concurrent.atomic.AtomicBoolean;
1:4743a20: 
1:6519c3e: import javax.jms.Connection;
1:6519c3e: import javax.jms.DeliveryMode;
1:6519c3e: import javax.jms.JMSException;
1:6519c3e: import javax.jms.Message;
1:6519c3e: import javax.jms.MessageConsumer;
1:6519c3e: import javax.jms.MessageListener;
1:6519c3e: import javax.jms.MessageProducer;
1:6519c3e: import javax.jms.Session;
1:6519c3e: import javax.jms.TextMessage;
1:6519c3e: import javax.jms.Topic;
1:4743a20: 
1:6519c3e: import org.apache.activemq.ActiveMQConnectionFactory;
1:6519c3e: import org.apache.activemq.broker.BrokerService;
1:6519c3e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6519c3e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6519c3e: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:6519c3e: import org.junit.After;
1:6519c3e: import org.junit.Before;
1:6519c3e: import org.junit.Test;
1:4743a20: import org.slf4j.Logger;
1:4743a20: import org.slf4j.LoggerFactory;
1:6519c3e: 
1:6519c3e: public class JdbcDurableSubDupTest {
1:6519c3e: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JdbcDurableSubDupTest.class);
1:6519c3e:     final int prefetchVal = 150;
1:3ddb71c:     String urlOptions = "jms.watchTopicAdvisories=false";
1:3ddb71c:     String url = null;
1:6519c3e:     String queueName = "topicTest?consumer.prefetchSize=" + prefetchVal;
1:6519c3e:     String xmlMessage = "<Example 01234567890123456789012345678901234567890123456789 MessageText>";
1:6519c3e: 
1:6519c3e:     String selector = "";
1:6519c3e:     String clntVersion = "87";
1:6519c3e:     String clntId = "timsClntId345" + clntVersion;
1:6519c3e:     String subscriptionName = "subscriptionName-y" + clntVersion;
1:6519c3e:     SimpleDateFormat dtf = new SimpleDateFormat("HH:mm:ss");
1:6519c3e: 
1:6519c3e:     final int TO_RECEIVE = 5000;
1:6519c3e:     BrokerService broker = null;
1:4743a20:     Vector<Throwable> exceptions = new Vector<Throwable>();
1:6519c3e:     final int MAX_MESSAGES = 100000;
1:6519c3e:     int[] dupChecker = new int[MAX_MESSAGES];
1:6519c3e: 
1:6519c3e:     @Before
1:6519c3e:     public void startBroker() throws Exception {
1:6519c3e:         exceptions.clear();
1:6519c3e:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:6519c3e:             dupChecker[i] = 0;
1:6519c3e:         }
1:6519c3e:         broker = new BrokerService();
1:6519c3e:         broker.setAdvisorySupport(false);
1:6519c3e:         broker.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:6519c3e:         PolicyEntry policyEntry = new PolicyEntry();
1:99be769:         policyEntry.setMaxAuditDepth(3000);
1:6519c3e:         policyEntry.setMaxPageSize(150);
1:6519c3e:         policyEntry.setPrioritizedMessages(true);
1:6519c3e:         PolicyMap policyMap = new PolicyMap();
1:6519c3e:         policyMap.setDefaultEntry(policyEntry);
1:6519c3e:         broker.setDestinationPolicy(policyMap);
1:6519c3e: 
1:3ddb71c:         broker.addConnector("tcp://localhost:0");
1:6519c3e:         broker.setDeleteAllMessagesOnStartup(true);
1:6519c3e:         broker.start();
1:6519c3e:         broker.waitUntilStarted();
1:3ddb71c:         url = broker.getTransportConnectors().get(0).getConnectUri().toString() + "?" + urlOptions;
1:6519c3e:     }
1:6519c3e: 
1:6519c3e:     @After
1:6519c3e:     public void stopBroker() throws Exception {
1:6519c3e:         if (broker != null) {
1:6519c3e:             broker.stop();
1:6519c3e:         }
1:6519c3e:     }
1:6519c3e: 
1:6519c3e:     @Test
1:6519c3e:     public void testNoDupsOnSlowConsumerReconnect() throws Exception {
1:6519c3e:         JmsConsumerDup consumer = new JmsConsumerDup();
1:6519c3e:         consumer.done.set(true);
1:6519c3e:         consumer.run();
1:6519c3e: 
1:6519c3e:         consumer.done.set(false);
1:6519c3e: 
1:6519c3e:         LOG.info("serial production then consumption");
1:6519c3e:         JmsProvider provider = new JmsProvider();
1:6519c3e:         provider.run();
1:6519c3e: 
1:6519c3e:         consumer.run();
1:6519c3e: 
1:6519c3e:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:6519c3e: 
1:6519c3e:         for (int i = 0; i < TO_RECEIVE; i++) {
1:6519c3e:             assertTrue("got message " + i, dupChecker[i] == 1);
1:6519c3e:         }
1:6519c3e:     }
1:4743a20: 
1:6519c3e:     @Test
1:6519c3e:     public void testNoDupsOnSlowConsumerLargePriorityGapReconnect() throws Exception {
1:6519c3e:         JmsConsumerDup consumer = new JmsConsumerDup();
1:6519c3e:         consumer.done.set(true);
1:6519c3e:         consumer.run();
1:6519c3e: 
1:6519c3e:         consumer.done.set(false);
1:6519c3e:         JmsProvider provider = new JmsProvider();
1:6519c3e:         provider.priorityModulator = 2500;
1:6519c3e:         provider.run();
1:6519c3e: 
1:6519c3e:         consumer.run();
1:6519c3e: 
1:6519c3e:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:6519c3e:         for (int i = 0; i < TO_RECEIVE; i++) {
1:6519c3e:             assertTrue("got message " + i, dupChecker[i] == 1);
1:6519c3e:         }
1:6519c3e: 
1:6519c3e:     }
1:6519c3e: 
1:6519c3e:     class JmsConsumerDup implements MessageListener {
1:6519c3e:         long count = 0;
1:6519c3e: 
1:6519c3e:         AtomicBoolean done = new AtomicBoolean(false);
1:6519c3e: 
1:6519c3e:         public void run() {
1:6519c3e:             Connection connection = null;
1:6519c3e:             Session session;
1:6519c3e:             Topic topic;
1:6519c3e:             ActiveMQConnectionFactory factory;
1:6519c3e:             MessageConsumer consumer;
1:6519c3e: 
1:6519c3e:             factory = new ActiveMQConnectionFactory(url);
1:6519c3e: 
1:6519c3e:             try {
1:6519c3e:                 connection = factory.createConnection("MyUsername", "MyPassword");
1:6519c3e:                 connection.setClientID(clntId);
1:6519c3e:                 connection.start();
1:6519c3e:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6519c3e:                 topic = session.createTopic(queueName);
1:6519c3e:                 consumer = session.createDurableSubscriber(topic, subscriptionName, selector, false);
1:6519c3e:                 consumer.setMessageListener(this);
1:6519c3e:                 LOG.info("Waiting for messages...");
1:6519c3e: 
1:6519c3e:                 while (!done.get()) {
1:6519c3e:                     TimeUnit.SECONDS.sleep(5);
1:6519c3e:                     if (count == TO_RECEIVE || !exceptions.isEmpty()) {
1:6519c3e:                         done.set(true);
1:6519c3e:                     }
1:6519c3e:                 }
1:6519c3e:             } catch (Exception e) {
1:6519c3e:                 LOG.error("caught", e);
1:6519c3e:                 exceptions.add(e);
1:6519c3e:                 throw new RuntimeException(e);
1:6519c3e:             } finally {
1:6519c3e:                 if (connection != null) {
1:6519c3e:                     try {
1:6519c3e:                         LOG.info("consumer done (" + exceptions.isEmpty() + "), closing connection");
1:6519c3e:                         connection.close();
1:6519c3e:                     } catch (JMSException e) {
1:6519c3e:                         e.printStackTrace();
1:6519c3e:                     }
1:6519c3e:                 }
1:6519c3e:             }
1:6519c3e:         }
1:6519c3e: 
1:4743a20:         @Override
1:6519c3e:         public void onMessage(Message message) {
1:6519c3e:             ++count;
1:6519c3e: 
1:6519c3e:             try {
1:6519c3e:                 Thread.sleep(0L);
1:6519c3e:             } catch (InterruptedException e) {
1:6519c3e:             }
1:6519c3e:             ;
1:6519c3e: 
1:6519c3e:             try {
1:6519c3e:                 TextMessage m = (TextMessage) message;
1:6519c3e: 
1:6519c3e:                 if (count%100 == 0) {
1:6519c3e:                     LOG.info("Rcvd Msg #-" + count + " " + m.getText()
1:6519c3e:                             + " Sent->" + dtf.format(new Date(m.getJMSTimestamp()))
1:6519c3e:                             + " Recv->" + dtf.format(new Date())
1:6519c3e:                             + " Expr->" + dtf.format(new Date(m.getJMSExpiration()))
1:6519c3e:                             + ", mid: " + m.getJMSMessageID()
1:6519c3e:                     );
1:6519c3e:                 }
1:6519c3e:                 int i = m.getIntProperty("SeqNo");
1:6519c3e: 
1:6519c3e:                 //check for duplicate messages
1:6519c3e:                 if (i < MAX_MESSAGES) {
1:6519c3e:                     if (dupChecker[i] == 1) {
1:6519c3e:                         LOG.error("Duplicate message received at count: " + count + ", id: " + m.getJMSMessageID());
1:6519c3e:                         exceptions.add(new RuntimeException("Got Duplicate at: " + m.getJMSMessageID()));
1:6519c3e: 
1:6519c3e:                     } else {
1:6519c3e:                         dupChecker[i] = 1;
1:6519c3e:                     }
1:6519c3e:                 }
1:6519c3e:             } catch (JMSException e) {
1:6519c3e:                 LOG.error("caught ", e);
1:6519c3e:                 exceptions.add(e);
1:6519c3e:             }
1:6519c3e:         }
1:6519c3e:     }
1:6519c3e: 
1:6519c3e: 
1:6519c3e:     class JmsProvider implements Runnable {
1:6519c3e: 
1:6519c3e:         int priorityModulator = 10;
1:6519c3e: 
1:4743a20:         @Override
1:6519c3e:         public void run() {
1:6519c3e: 
1:6519c3e:             Connection connection;
1:6519c3e:             Session session;
1:6519c3e:             Topic topic;
1:6519c3e: 
1:6519c3e:             ActiveMQConnectionFactory factory;
1:6519c3e:             MessageProducer messageProducer;
1:6519c3e:             long timeToLive = 0l;
1:6519c3e: 
1:6519c3e:             TextMessage message = null;
1:6519c3e: 
1:6519c3e:             factory = new ActiveMQConnectionFactory(url);
1:6519c3e: 
1:6519c3e:             try {
1:6519c3e:                 connection = factory.createConnection("MyUserName", "MyPassword");
1:6519c3e:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6519c3e:                 topic = session.createTopic(queueName);
1:6519c3e:                 messageProducer = session.createProducer(topic);
1:6519c3e:                 messageProducer.setPriority(3);
1:6519c3e:                 messageProducer.setTimeToLive(timeToLive);
1:6519c3e:                 messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:6519c3e: 
1:6519c3e:                 int msgSeqNo = 0;
1:6519c3e:                 int NUM_MSGS = 1000;
1:6519c3e:                 int NUM_GROUPS = TO_RECEIVE/NUM_MSGS;
1:6519c3e:                 for (int n = 0; n < NUM_GROUPS; n++) {
1:6519c3e: 
1:6519c3e:                     message = session.createTextMessage();
1:6519c3e: 
1:6519c3e:                     for (int i = 0; i < NUM_MSGS; i++) {
1:6519c3e:                         int priority = 0;
1:6519c3e:                         if (priorityModulator <= 10) {
1:6519c3e:                             priority = msgSeqNo % priorityModulator;
1:6519c3e:                         } else {
1:6519c3e:                             priority = (msgSeqNo >= priorityModulator) ? 9 : 0;
1:6519c3e:                         }
1:6519c3e:                         message.setText(xmlMessage + msgSeqNo + "-" + priority);
1:6519c3e:                         message.setJMSPriority(priority);
1:6519c3e:                         message.setIntProperty("SeqNo", msgSeqNo);
1:6519c3e:                         if (i > 0 && i%100 == 0) {
1:6519c3e:                             LOG.info("Sending message: " + message.getText());
1:6519c3e:                         }
1:6519c3e:                         messageProducer.send(message, DeliveryMode.PERSISTENT, message.getJMSPriority(), timeToLive);
1:6519c3e:                         msgSeqNo++;
1:6519c3e:                     }
1:6519c3e:                     try {
1:6519c3e:                         Thread.sleep(1000L);
1:6519c3e:                     } catch (InterruptedException e) {
1:6519c3e:                         e.printStackTrace();
1:6519c3e:                         exceptions.add(e);
1:6519c3e:                     }
1:6519c3e:                 }
1:6519c3e: 
1:6519c3e:             } catch (JMSException e) {
1:6519c3e:                 LOG.error("caught ", e);
1:6519c3e:                 e.printStackTrace();
1:6519c3e:                 exceptions.add(e);
1:6519c3e: 
1:6519c3e:             }
1:6519c3e:         }
1:6519c3e: 
1:6519c3e:     }
1:6519c3e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     Vector<Throwable> exceptions = new Vector<Throwable>();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:99be769
/////////////////////////////////////////////////////////////////////////
1:         policyEntry.setMaxAuditDepth(3000);
commit:3ddb71c
/////////////////////////////////////////////////////////////////////////
1:     String urlOptions = "jms.watchTopicAdvisories=false";
1:     String url = null;
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:0");
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString() + "?" + urlOptions;
commit:6519c3e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: import java.util.Vector;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
0: import static org.junit.Assert.assertTrue;
1: 
1: public class JdbcDurableSubDupTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(JdbcDurableSubDupTest.class);
1:     final int prefetchVal = 150;
0:     String url = "tcp://localhost:61616?jms.watchTopicAdvisories=false";
1:     String queueName = "topicTest?consumer.prefetchSize=" + prefetchVal;
1:     String xmlMessage = "<Example 01234567890123456789012345678901234567890123456789 MessageText>";
1: 
1:     String selector = "";
1:     String clntVersion = "87";
1:     String clntId = "timsClntId345" + clntVersion;
1:     String subscriptionName = "subscriptionName-y" + clntVersion;
1:     SimpleDateFormat dtf = new SimpleDateFormat("HH:mm:ss");
1: 
1:     final int TO_RECEIVE = 5000;
1:     BrokerService broker = null;
0:     Vector<Throwable> exceptions = new Vector();
1:     final int MAX_MESSAGES = 100000;
1:     int[] dupChecker = new int[MAX_MESSAGES];
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         exceptions.clear();
1:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:             dupChecker[i] = 0;
1:         }
1:         broker = new BrokerService();
1:         broker.setAdvisorySupport(false);
1:         broker.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:         PolicyEntry policyEntry = new PolicyEntry();
0:         policyEntry.setMaxAuditDepth(2000);
1:         policyEntry.setMaxPageSize(150);
1:         policyEntry.setPrioritizedMessages(true);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
0:         broker.addConnector("tcp://localhost:61616");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testNoDupsOnSlowConsumerReconnect() throws Exception {
1:         JmsConsumerDup consumer = new JmsConsumerDup();
1:         consumer.done.set(true);
1:         consumer.run();
1: 
1:         consumer.done.set(false);
1: 
1:         LOG.info("serial production then consumption");
1:         JmsProvider provider = new JmsProvider();
1:         provider.run();
1: 
1:         consumer.run();
1: 
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1: 
1:         for (int i = 0; i < TO_RECEIVE; i++) {
1:             assertTrue("got message " + i, dupChecker[i] == 1);
1:         }
1:     }
1: 
1:     @Test
1:     public void testNoDupsOnSlowConsumerLargePriorityGapReconnect() throws Exception {
1:         JmsConsumerDup consumer = new JmsConsumerDup();
1:         consumer.done.set(true);
1:         consumer.run();
1: 
1:         consumer.done.set(false);
1:         JmsProvider provider = new JmsProvider();
1:         provider.priorityModulator = 2500;
1:         provider.run();
1: 
1:         consumer.run();
1: 
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:         for (int i = 0; i < TO_RECEIVE; i++) {
1:             assertTrue("got message " + i, dupChecker[i] == 1);
1:         }
1:         
1:     }
1: 
1:     class JmsConsumerDup implements MessageListener {
1:         long count = 0;
1: 
1:         AtomicBoolean done = new AtomicBoolean(false);
1: 
1:         public void run() {
1:             Connection connection = null;
1:             Session session;
1:             Topic topic;
1:             ActiveMQConnectionFactory factory;
1:             MessageConsumer consumer;
1: 
1:             factory = new ActiveMQConnectionFactory(url);
1: 
1:             try {
1:                 connection = factory.createConnection("MyUsername", "MyPassword");
1:                 connection.setClientID(clntId);
1:                 connection.start();
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 topic = session.createTopic(queueName);
1:                 consumer = session.createDurableSubscriber(topic, subscriptionName, selector, false);
1:                 consumer.setMessageListener(this);
1:                 LOG.info("Waiting for messages...");
1: 
1:                 while (!done.get()) {
1:                     TimeUnit.SECONDS.sleep(5);
1:                     if (count == TO_RECEIVE || !exceptions.isEmpty()) {
1:                         done.set(true);
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 LOG.error("caught", e);
1:                 exceptions.add(e);
1:                 throw new RuntimeException(e);
1:             } finally {
1:                 if (connection != null) {
1:                     try {
1:                         LOG.info("consumer done (" + exceptions.isEmpty() + "), closing connection");
1:                         connection.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         public void onMessage(Message message) {
1:             ++count;
1: 
1:             try {
1:                 Thread.sleep(0L);
1:             } catch (InterruptedException e) {
1:             }
1:             ;
1: 
1:             try {
1:                 TextMessage m = (TextMessage) message;
1: 
1:                 if (count%100 == 0) {
1:                     LOG.info("Rcvd Msg #-" + count + " " + m.getText()
1:                             + " Sent->" + dtf.format(new Date(m.getJMSTimestamp()))
1:                             + " Recv->" + dtf.format(new Date())
1:                             + " Expr->" + dtf.format(new Date(m.getJMSExpiration()))
1:                             + ", mid: " + m.getJMSMessageID()
1:                     );
1:                 }
1:                 int i = m.getIntProperty("SeqNo");
1: 
1:                 //check for duplicate messages
1:                 if (i < MAX_MESSAGES) {
1:                     if (dupChecker[i] == 1) {
1:                         LOG.error("Duplicate message received at count: " + count + ", id: " + m.getJMSMessageID());
1:                         exceptions.add(new RuntimeException("Got Duplicate at: " + m.getJMSMessageID()));
1: 
1:                     } else {
1:                         dupChecker[i] = 1;
1:                     }
1:                 }
1:             } catch (JMSException e) {
1:                 LOG.error("caught ", e);
1:                 exceptions.add(e);
1:             }
1:         }
1:     }
1: 
1: 
1:     class JmsProvider implements Runnable {
1: 
1:         int priorityModulator = 10;
1: 
1:         public void run() {
1: 
1:             Connection connection;
1:             Session session;
1:             Topic topic;
1: 
1:             ActiveMQConnectionFactory factory;
1:             MessageProducer messageProducer;
1:             long timeToLive = 0l;
1: 
1:             TextMessage message = null;
1: 
1:             factory = new ActiveMQConnectionFactory(url);
1: 
1:             try {
1:                 connection = factory.createConnection("MyUserName", "MyPassword");
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 topic = session.createTopic(queueName);
1:                 messageProducer = session.createProducer(topic);
1:                 messageProducer.setPriority(3);
1:                 messageProducer.setTimeToLive(timeToLive);
1:                 messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:                 int msgSeqNo = 0;
1:                 int NUM_MSGS = 1000;
1:                 int NUM_GROUPS = TO_RECEIVE/NUM_MSGS;
1:                 for (int n = 0; n < NUM_GROUPS; n++) {
1: 
1:                     message = session.createTextMessage();
1: 
1:                     for (int i = 0; i < NUM_MSGS; i++) {
1:                         int priority = 0;
1:                         if (priorityModulator <= 10) {
1:                             priority = msgSeqNo % priorityModulator;
1:                         } else {
1:                             priority = (msgSeqNo >= priorityModulator) ? 9 : 0;
1:                         }
1:                         message.setText(xmlMessage + msgSeqNo + "-" + priority);
1:                         message.setJMSPriority(priority);
1:                         message.setIntProperty("SeqNo", msgSeqNo);
1:                         if (i > 0 && i%100 == 0) {
1:                             LOG.info("Sending message: " + message.getText());
1:                         }
1:                         messageProducer.send(message, DeliveryMode.PERSISTENT, message.getJMSPriority(), timeToLive);
1:                         msgSeqNo++;
1:                     }
1:                     try {
1:                         Thread.sleep(1000L);
1:                     } catch (InterruptedException e) {
1:                         e.printStackTrace();
1:                         exceptions.add(e);
1:                     }
1:                 }
1: 
1:             } catch (JMSException e) {
1:                 LOG.error("caught ", e);
1:                 e.printStackTrace();
1:                 exceptions.add(e);
1: 
1:             }
1:         }
1: 
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(JdbcDurableSubDupTest.class);
============================================================================