2:d29ca2a: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:3ac0537: import java.net.URI;
1:31c55f7: import java.security.cert.X509Certificate;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:f812e34: 
1:d29ca2a: /**
1:31c55f7:  *
1:d29ca2a:  */
1:f812e34: public class TransportFilter implements TransportListener, Transport {
1:fc00993:     protected final Transport next;
1:b4b8499:     protected TransportListener transportListener;
1:d29ca2a: 
1:f812e34:     public TransportFilter(Transport next) {
1:f812e34:         this.next = next;
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public TransportListener getTransportListener() {
1:436fe42:         return transportListener;
1:3ac0537:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void setTransportListener(TransportListener channelListener) {
1:f812e34:         this.transportListener = channelListener;
1:fc00993:         if (channelListener == null) {
1:d29ca2a:             next.setTransportListener(null);
1:fc00993:         } else {
1:d29ca2a:             next.setTransportListener(this);
1:fc00993:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see org.apache.activemq.Service#start()
1:f392884:      * @throws IOException
1:f392884:      *             if the next channel has not been set.
1:d29ca2a:      */
1:31c55f7:     @Override
1:f812e34:     public void start() throws Exception {
1:fc00993:         if (next == null) {
1:d29ca2a:             throw new IOException("The next channel has not been set.");
1:fc00993:         }
1:fc00993:         if (transportListener == null) {
1:d29ca2a:             throw new IOException("The command listener has not been set.");
1:fc00993:         }
1:d29ca2a:         next.start();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see org.apache.activemq.Service#stop()
1:d29ca2a:      */
1:31c55f7:     @Override
1:f812e34:     public void stop() throws Exception {
1:d29ca2a:         next.stop();
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void onCommand(Object command) {
1:436fe42:         transportListener.onCommand(command);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the next.
1:d29ca2a:      */
1:f812e34:     public Transport getNext() {
1:d29ca2a:         return next;
1:d29ca2a:     }
1:d29ca2a: 
1:f392884:     @Override
1:f812e34:     public String toString() {
1:d29ca2a:         return next.toString();
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void oneway(Object command) throws IOException {
1:d29ca2a:         next.oneway(command);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:f812e34:         return next.asyncRequest(command, null);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public Object request(Object command) throws IOException {
1:d29ca2a:         return next.request(command);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public Object request(Object command, int timeout) throws IOException {
1:f812e34:         return next.request(command, timeout);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void onException(IOException error) {
1:436fe42:         transportListener.onException(error);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void transportInterupted() {
1:ef0734b:         transportListener.transportInterupted();
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public void transportResumed() {
1:ef0734b:         transportListener.transportResumed();
1:3ac0537:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:933eb2f:     public <T> T narrow(Class<T> target) {
1:f812e34:         if (target.isAssignableFrom(getClass())) {
1:933eb2f:             return target.cast(this);
1:c7469c4:         }
1:d29ca2a:         return next.narrow(target);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public String getRemoteAddress() {
1:f812e34:         return next.getRemoteAddress();
1:f812e34:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:c7469c4:      * @return
1:c7469c4:      * @see org.apache.activemq.transport.Transport#isFaultTolerant()
1:d29ca2a:      */
1:31c55f7:     @Override
1:f812e34:     public boolean isFaultTolerant() {
1:c7469c4:         return next.isFaultTolerant();
1:86cbdfd:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f392884:     public boolean isDisposed() {
1:f392884:         return next.isDisposed();
1:d29ca2a:     }
1:f392884: 
1:31c55f7:     @Override
1:f392884:     public boolean isConnected() {
1:ecc87ea:         return next.isConnected();
1:f392884:     }
1:ecc87ea: 
1:31c55f7:     @Override
1:f392884:     public void reconnect(URI uri) throws IOException {
1:f392884:         next.reconnect(uri);
1:f392884:     }
1:8978ac0: 
1:31c55f7:     @Override
1:8978ac0:     public int getReceiveCounter() {
1:8978ac0:         return next.getReceiveCounter();
1:8978ac0:     }
1:f392884: 
1:31c55f7:     @Override
1:f392884:     public boolean isReconnectSupported() {
1:f392884:         return next.isReconnectSupported();
1:f392884:     }
1:f392884: 
1:31c55f7:     @Override
1:f392884:     public boolean isUpdateURIsSupported() {
1:f392884:         return next.isUpdateURIsSupported();
1:f392884:     }
1:f392884: 
1:31c55f7:     @Override
1:f392884:     public void updateURIs(boolean rebalance,URI[] uris) throws IOException {
1:f392884:         next.updateURIs(rebalance,uris);
1:f392884:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:31c55f7:         return next.getPeerCertificates();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:31c55f7:         next.setPeerCertificates(certificates);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public WireFormat getWireFormat() {
1:31c55f7:         return next.getWireFormat();
1:31c55f7:     }
1:ecc87ea: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: 
1: import org.apache.activemq.wireformat.WireFormat;
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:         return next.getPeerCertificates();
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:         next.setPeerCertificates(certificates);
1:     }
1: 
1:     @Override
1:     public WireFormat getWireFormat() {
1:         return next.getWireFormat();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getReceiveCounter() {
1:         return next.getReceiveCounter();
1:     }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public <T> T narrow(Class<T> target) {
1:             return target.cast(this);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected final Transport next;
/////////////////////////////////////////////////////////////////////////
1:         if (channelListener == null) {
1:         } else {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (next == null) {
1:         }
1:         if (transportListener == null) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: public class TransportFilter implements TransportListener, Transport {
1:     public TransportFilter(Transport next) {
1:         this.next = next;
1:     public TransportListener getTransportListener() {
1:     public void setTransportListener(TransportListener channelListener) {
1:         this.transportListener = channelListener;
0:         if (channelListener == null)
/////////////////////////////////////////////////////////////////////////
0:      * @throws IOException if the next channel has not been set.
1:     public void start() throws Exception {
0:         if (next == null)
0:         if (transportListener == null)
/////////////////////////////////////////////////////////////////////////
1:     public void stop() throws Exception {
1:     public void onCommand(Object command) {
1:     public Transport getNext() {
1:     public String toString() {
1:     public void oneway(Object command) throws IOException {
1:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:         return next.asyncRequest(command, null);
1:     public Object request(Object command) throws IOException {
1:     public Object request(Object command, int timeout) throws IOException {
1:         return next.request(command, timeout);
1:     public void onException(IOException error) {
1:     public void transportInterupted() {
1:     public void transportResumed() {
0:     public Object narrow(Class target) {
1:         if (target.isAssignableFrom(getClass())) {
1:     public String getRemoteAddress() {
1:         return next.getRemoteAddress();
1:     }
1:     public boolean isFaultTolerant() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void onCommand(Object command){
/////////////////////////////////////////////////////////////////////////
0:     public void oneway(Object command) throws IOException{
0:     public FutureResponse asyncRequest(Object command,ResponseCallback responseCallback) throws IOException{
0:     public Object request(Object command) throws IOException{
0:     public Object request(Object command,int timeout) throws IOException{
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:b4b8499
/////////////////////////////////////////////////////////////////////////
1:     protected TransportListener transportListener;
commit:84fd773
/////////////////////////////////////////////////////////////////////////
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
0:         return next.asyncRequest(command, null);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Response;
1: 
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public class TransportFilter implements Transport, TransportListener {
1: 
0:     final protected Transport next;
0:     protected TransportListener commandListener;
1: 
0:     public TransportFilter(Transport next) {
0:         this.next = next;
1:     }
1: 
1:     /**
1:      */
0:     public void setTransportListener(TransportListener channelListener) {
0:         this.commandListener = channelListener;
0:         if (channelListener == null)
1:             next.setTransportListener(null);
0:         else
1:             next.setTransportListener(this);
1:     }
1: 
1: 
1:     /**
1:      * @see org.apache.activemq.Service#start()
0:      * @throws IOException if the next channel has not been set.
1:      */
0:     public void start() throws Exception {
0:         if( next == null )
1:             throw new IOException("The next channel has not been set.");
0:         if( commandListener == null )
1:             throw new IOException("The command listener has not been set.");
1:         next.start();
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.Service#stop()
1:      */
0:     public void stop() throws Exception {
1:         next.stop();
1:     }    
1: 
0:     public void onCommand(Command command) {
0:         commandListener.onCommand(command);
1:     }
1: 
1:     /**
1:      * @return Returns the next.
1:      */
0:     public Transport getNext() {
1:         return next;
1:     }
1: 
1:     /**
0:      * @return Returns the packetListener.
1:      */
0:     public TransportListener getCommandListener() {
0:         return commandListener;
1:     }
1:     
0:     public String toString() {
1:         return next.toString();
1:     }
1: 
0:     public void oneway(Command command) throws IOException {
1:         next.oneway(command);
1:     }
1: 
0:     public FutureResponse asyncRequest(Command command) throws IOException {
0:         return next.asyncRequest(command);
1:     }
1: 
0:     public Response request(Command command) throws IOException {
1:         return next.request(command);
1:     }
1: 
0:     public void onException(IOException error) {
0:         commandListener.onException(error);
1:     }
1: 
0:     public Object narrow(Class target) {
0:         if( target.isAssignableFrom(getClass()) ) {
0:             return this;
1:         }
1:         return next.narrow(target);
1:     }  
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException
1:      *             if the next channel has not been set.
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDisposed() {
1:         return next.isDisposed();
1:     }
1: 
1:     public boolean isConnected() {
1:     public void reconnect(URI uri) throws IOException {
1:         next.reconnect(uri);
1:     }
1: 
1:     public boolean isReconnectSupported() {
1:         return next.isReconnectSupported();
1:     }
1: 
1:     public boolean isUpdateURIsSupported() {
1:         return next.isUpdateURIsSupported();
1:     }
1: 
1:     public void updateURIs(boolean rebalance,URI[] uris) throws IOException {
1:         next.updateURIs(rebalance,uris);
1:     }
commit:ecc87ea
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	public boolean isConnected() {
1:         return next.isConnected();
1:     }
commit:3ac0537
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0: 
0: 	public boolean isDisposed() {
0: 		return next.isDisposed();
1: 	}
0: 
0: 	public void reconnect(URI uri) throws IOException {
0: 		next.reconnect(uri);
1: 	}
commit:c7469c4
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * @return
1:      * @see org.apache.activemq.transport.Transport#isFaultTolerant()
0:      */
0:     public boolean isFaultTolerant(){
1:         return next.isFaultTolerant();
1:     }
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: public class TransportFilter implements TransportListener,Transport{
0:     public TransportFilter(Transport next){
0:         this.next=next;
0:     public TransportListener getTransportListener(){
0: 
0:     public void setTransportListener(TransportListener channelListener){
0:         this.transportListener=channelListener;
0:         if(channelListener==null)
0:      * @throws IOException
0:      *             if the next channel has not been set.
0:     public void start() throws Exception{
0:         if(next==null)
0:         if(transportListener==null)
/////////////////////////////////////////////////////////////////////////
0:     public void stop() throws Exception{
0:     }
0:     public void onCommand(Command command){
0:     public Transport getNext(){
0:     public String toString(){
0:     public void oneway(Command command) throws IOException{
0:     public FutureResponse asyncRequest(Command command,ResponseCallback responseCallback) throws IOException{
0:         return next.asyncRequest(command,null);
0:     public Response request(Command command) throws IOException{
0: 
0:     public Response request(Command command,int timeout) throws IOException{
0:     public void onException(IOException error){
0:     public void transportInterupted(){
1:         transportListener.transportInterupted();
0:     }
0: 
0:     public void transportResumed(){
1:         transportListener.transportResumed();
0:     }
0: 
0:     public Object narrow(Class target){
0:         if(target.isAssignableFrom(getClass())){
0:     }
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Response request(Command command,int timeout) throws IOException {
0:         return next.request(command,timeout);
0:     }
commit:f915da5
/////////////////////////////////////////////////////////////////////////
0: public class TransportFilter extends DefaultTransportListener implements Transport {
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
0: 
0: 	public String getRemoteAddress() {
0: 		return next.getRemoteAddress();
0: 	}
commit:436fe42
/////////////////////////////////////////////////////////////////////////
0:     private TransportListener transportListener;
0:     public TransportListener getTransportListener() {
1:         return transportListener;
0:     }
0:     
0:         this.transportListener = channelListener;
/////////////////////////////////////////////////////////////////////////
0:         if( transportListener == null )
/////////////////////////////////////////////////////////////////////////
1:         transportListener.onCommand(command);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:         transportListener.onException(error);
============================================================================