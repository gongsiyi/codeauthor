1:4c38438: /**
1:4c38438:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c38438:  * contributor license agreements.  See the NOTICE file distributed with
1:4c38438:  * this work for additional information regarding copyright ownership.
1:4c38438:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c38438:  * (the "License"); you may not use this file except in compliance with
1:4c38438:  * the License.  You may obtain a copy of the License at
1:4c38438:  *
1:4c38438:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c38438:  *
1:4c38438:  * Unless required by applicable law or agreed to in writing, software
1:4c38438:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c38438:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c38438:  * See the License for the specific language governing permissions and
1:4c38438:  * limitations under the License.
1:4c38438:  */
1:4c38438: package org.apache.activemq.transport.mqtt;
2:4c38438: 
1:4c38438: import java.io.IOException;
1:4c38438: import java.net.Socket;
1:4c38438: import java.net.URI;
1:4c38438: import java.net.URISyntaxException;
1:4c38438: import java.net.UnknownHostException;
1:4c38438: import java.util.HashMap;
1:4c38438: import java.util.Map;
1:4c38438: 
1:4c38438: import javax.net.ServerSocketFactory;
1:4c38438: import javax.net.SocketFactory;
1:413e484: 
1:4c38438: import org.apache.activemq.broker.BrokerService;
1:4c38438: import org.apache.activemq.broker.BrokerServiceAware;
1:4c38438: import org.apache.activemq.transport.MutexTransport;
1:4c38438: import org.apache.activemq.transport.Transport;
1:4c38438: import org.apache.activemq.transport.nio.NIOTransportFactory;
1:4c38438: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:4c38438: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:4c38438: import org.apache.activemq.util.IntrospectionSupport;
1:4c38438: import org.apache.activemq.wireformat.WireFormat;
1:4c38438: 
1:4c38438: /**
1:4c38438:  * A <a href="http://mqtt.org/">MQTT</a> over NIO transport factory
1:4c38438:  */
1:4c38438: public class MQTTNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware {
1:4c38438: 
1:bc4f4e9:     private BrokerService brokerService = null;
1:4c38438: 
1:413e484:     @Override
1:4c38438:     protected String getDefaultWireFormatType() {
1:4c38438:         return "mqtt";
1:4c38438:     }
1:4c38438: 
1:413e484:     @Override
1:4c38438:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:d2ddd1d:         TcpTransportServer result = new TcpTransportServer(this, location, serverSocketFactory) {
1:413e484:             @Override
1:4c38438:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:4c38438:                 return new MQTTNIOTransport(format, socket);
1:4c38438:             }
1:4c38438:         };
1:d2ddd1d:         result.setAllowLinkStealing(true);
1:d2ddd1d:         return result;
1:4c38438:     }
1:4c38438: 
1:413e484:     @Override
1:4c38438:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:4c38438:         return new MQTTNIOTransport(wf, socketFactory, location, localLocation);
1:4c38438:     }
1:4c38438: 
1:04ee70a:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             InitBuffer initBuffer) throws IOException {
1:04ee70a:         return new MQTTNIOTransport(wireFormat, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:4c38438:     @SuppressWarnings("rawtypes")
1:4c38438:     @Override
1:4c38438:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:4c38438:         transport = super.serverConfigure(transport, format, options);
1:4c38438: 
1:4c38438:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:4c38438:         if (mutex != null) {
1:4c38438:             mutex.setSyncOnCommand(true);
1:4c38438:         }
1:4c38438: 
1:4c38438:         return transport;
1:4c38438:     }
1:4c38438: 
1:413e484:     @Override
1:4c38438:     @SuppressWarnings("rawtypes")
1:4c38438:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:bc4f4e9:         transport = new MQTTTransportFilter(transport, format, brokerService);
1:4c38438:         IntrospectionSupport.setProperties(transport, options);
1:4c38438:         return super.compositeConfigure(transport, format, options);
1:4c38438:     }
1:4c38438: 
1:413e484:     @Override
1:4c38438:     public void setBrokerService(BrokerService brokerService) {
1:bc4f4e9:         this.brokerService = brokerService;
1:4c38438:     }
1:4c38438: 
1:413e484:     @Override
1:4c38438:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:4c38438:         MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format);
1:4c38438:         MQTTTransportFilter filter = transport.narrow(MQTTTransportFilter.class);
1:4c38438:         filter.setInactivityMonitor(monitor);
1:4c38438:         return monitor;
1:4c38438:     }
1:4c38438: }
1:4c38438: 
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             InitBuffer initBuffer) throws IOException {
1:         return new MQTTNIOTransport(wireFormat, socket, initBuffer);
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:bc4f4e9
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService brokerService = null;
/////////////////////////////////////////////////////////////////////////
1:         transport = new MQTTTransportFilter(transport, format, brokerService);
1:         this.brokerService = brokerService;
author:Rob Davies
-------------------------------------------------------------------------------
commit:d2ddd1d
/////////////////////////////////////////////////////////////////////////
1:         TcpTransportServer result = new TcpTransportServer(this, location, serverSocketFactory) {
1:         result.setAllowLinkStealing(true);
1:         return result;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Robert Davies
-------------------------------------------------------------------------------
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.nio.NIOTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: /**
1:  * A <a href="http://mqtt.org/">MQTT</a> over NIO transport factory
1:  */
1: public class MQTTNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware {
1: 
0:     private BrokerContext brokerContext = null;
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "mqtt";
1:     }
1: 
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 return new MQTTNIOTransport(format, socket);
1:             }
1:         };
1:     }
1: 
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new MQTTNIOTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     @Override
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = super.serverConfigure(transport, format, options);
1: 
1:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:         if (mutex != null) {
1:             mutex.setSyncOnCommand(true);
1:         }
1: 
1:         return transport;
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         transport = new MQTTTransportFilter(transport, format, brokerContext);
1:         IntrospectionSupport.setProperties(transport, options);
1:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
1:     public void setBrokerService(BrokerService brokerService) {
0:         this.brokerContext = brokerService.getBrokerContext();
1:     }
1: 
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format);
1:         MQTTTransportFilter filter = transport.narrow(MQTTTransportFilter.class);
1:         filter.setInactivityMonitor(monitor);
1:         return monitor;
1:     }
1: 
1: }
1: 
============================================================================