1:dcedd9f: /**
1:dcedd9f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dcedd9f:  * contributor license agreements.  See the NOTICE file distributed with
1:dcedd9f:  * this work for additional information regarding copyright ownership.
1:dcedd9f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dcedd9f:  * (the "License"); you may not use this file except in compliance with
1:dcedd9f:  * the License.  You may obtain a copy of the License at
1:dcedd9f:  *
1:dcedd9f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dcedd9f:  *
1:dcedd9f:  * Unless required by applicable law or agreed to in writing, software
1:dcedd9f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dcedd9f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dcedd9f:  * See the License for the specific language governing permissions and
1:dcedd9f:  * limitations under the License.
1:dcedd9f:  */
1:dcedd9f: package org.apache.activemq.bugs;
14:dcedd9f: 
1:dcedd9f: import java.io.IOException;
1:dcedd9f: import java.sql.PreparedStatement;
1:dcedd9f: import java.sql.ResultSet;
1:dcedd9f: import java.sql.SQLException;
1:dcedd9f: import java.util.ArrayList;
1:dcedd9f: import java.util.List;
1:e16815a: import javax.jms.Connection;
1:e16815a: import javax.jms.DeliveryMode;
1:e16815a: import javax.jms.Destination;
1:e16815a: import javax.jms.JMSException;
1:e16815a: import javax.jms.MessageConsumer;
1:e16815a: import javax.jms.MessageProducer;
1:e16815a: import javax.jms.Session;
1:e16815a: import javax.jms.TextMessage;
1:e16815a: import junit.framework.TestCase;
1:e16815a: import org.apache.activemq.ActiveMQConnectionFactory;
1:e16815a: import org.apache.activemq.broker.BrokerService;
1:30ff378: import org.apache.activemq.broker.TransportConnection;
1:e16815a: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:e16815a: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:e16815a: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1:e16815a: import org.apache.activemq.store.jdbc.TransactionContext;
1:e16815a: import org.apache.activemq.util.IOHelper;
1:e16815a: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1:e16815a: import org.apache.derby.jdbc.EmbeddedDataSource;
1:30ff378: import org.apache.log4j.Level;
1:e16815a: import org.slf4j.Logger;
1:e16815a: import org.slf4j.LoggerFactory;
1:dcedd9f: 
1:dcedd9f: /**
1:dcedd9f:  * Test to demostrate a message trapped in the JDBC store and not
1:dcedd9f:  * delivered to consumer
1:dcedd9f:  *
1:dcedd9f:  * The test throws issues the commit to the DB but throws
1:dcedd9f:  * an exception back to the broker. This scenario could happen when a network
1:dcedd9f:  * cable is disconnected - message is committed to DB but broker does not know.
1:dcedd9f:  *
1:dcedd9f:  *
1:dcedd9f:  */
1:dcedd9f: 
1:dcedd9f: public class TrapMessageInJDBCStoreTest extends TestCase {
1:dcedd9f: 
1:dcedd9f:     private static final String MY_TEST_Q = "MY_TEST_Q";
1:dcedd9f:     private static final Logger LOG = LoggerFactory
1:dcedd9f:             .getLogger(TrapMessageInJDBCStoreTest.class);
1:dcedd9f:     private String transportUrl = "tcp://127.0.0.1:0";
1:dcedd9f:     private BrokerService broker;
1:dcedd9f:     private TestTransactionContext testTransactionContext;
1:dcedd9f:     private TestJDBCPersistenceAdapter jdbc;
1:a3f1aa0:     private java.sql.Connection checkOnStoreConnection;
1:dcedd9f: 
1:dcedd9f:     protected BrokerService createBroker(boolean withJMX) throws Exception {
1:dcedd9f:         BrokerService broker = new BrokerService();
1:dcedd9f: 
1:dcedd9f:         broker.setUseJmx(withJMX);
1:dcedd9f: 
1:dcedd9f:         EmbeddedDataSource embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:a3f1aa0:         checkOnStoreConnection = embeddedDataSource.getConnection();
1:a3f1aa0: 
1:dcedd9f: 
1:dcedd9f:         //wire in a TestTransactionContext (wrapper to TransactionContext) that has an executeBatch()
1:dcedd9f:         // method that can be configured to throw a SQL exception on demand
1:dcedd9f:         jdbc = new TestJDBCPersistenceAdapter();
1:dcedd9f:         jdbc.setDataSource(embeddedDataSource);
1:4648dbe:         jdbc.setCleanupPeriod(0);
1:dcedd9f:         testTransactionContext = new TestTransactionContext(jdbc);
1:dcedd9f: 
1:dcedd9f:         jdbc.setLockKeepAlivePeriod(1000l);
1:dcedd9f:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:dcedd9f:         leaseDatabaseLocker.setLockAcquireSleepInterval(2000l);
1:dcedd9f:         jdbc.setLocker(leaseDatabaseLocker);
1:dcedd9f: 
1:dcedd9f:         broker.setPersistenceAdapter(jdbc);
1:dcedd9f: 
1:e16815a:         broker.setIoExceptionHandler(new LeaseLockerIOExceptionHandler());
1:dcedd9f: 
1:dcedd9f:         transportUrl = broker.addConnector(transportUrl).getPublishableConnectString();
1:dcedd9f:         return broker;
4:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f:     /**
1:dcedd9f:      *
1:dcedd9f:      * sends 3 messages to the queue. When the second message is being committed to the JDBCStore, $
1:dcedd9f:      * it throws a dummy SQL exception - the message has been committed to the embedded DB before the exception
1:dcedd9f:      * is thrown
1:dcedd9f:      *
1:dcedd9f:      * Excepted correct outcome: receive 3 messages and the DB should contain no messages
1:dcedd9f:      *
1:dcedd9f:      * @throws Exception
1:dcedd9f:      */
1:dcedd9f: 
1:dcedd9f:     public void testDBCommitException() throws Exception {
1:dcedd9f: 
1:30ff378:         org.apache.log4j.Logger serviceLogger = org.apache.log4j.Logger.getLogger(TransportConnection.class.getName() + ".Service");
1:30ff378:         serviceLogger.setLevel (Level.TRACE);
1:30ff378: 
1:dcedd9f:         broker = this.createBroker(false);
1:dcedd9f:         broker.deleteAllMessages();
1:dcedd9f:         broker.start();
1:dcedd9f:         broker.waitUntilStarted();
1:dcedd9f: 
1:a3f1aa0:         try {
1:a3f1aa0:             LOG.info("***Broker started...");
1:dcedd9f: 
1:a3f1aa0:             // failover but timeout in 5 seconds so the test does not hang
1:a3f1aa0:             String failoverTransportURL = "failover:(" + transportUrl
1:a3f1aa0:                     + ")?timeout=5000";
1:dcedd9f: 
1:dcedd9f: 
1:a3f1aa0:             sendMessage(MY_TEST_Q, failoverTransportURL);
1:dcedd9f: 
1:a3f1aa0:             //check db contents
1:a3f1aa0:             ArrayList<Long> dbSeq = dbMessageCount(checkOnStoreConnection);
1:a3f1aa0:             LOG.info("*** after send: db contains message seq " + dbSeq);
1:4648dbe: 
1:a3f1aa0:             List<TextMessage> consumedMessages = consumeMessages(MY_TEST_Q, failoverTransportURL);
1:4648dbe: 
1:a3f1aa0:             assertEquals("number of consumed messages", 3, consumedMessages.size());
1:dcedd9f: 
1:a3f1aa0:             //check db contents
1:a3f1aa0:             dbSeq = dbMessageCount(checkOnStoreConnection);
1:a3f1aa0:             LOG.info("*** after consume - db contains message seq " + dbSeq);
1:dcedd9f: 
1:a3f1aa0:             assertEquals("number of messages in DB after test", 0, dbSeq.size());
1:dcedd9f: 
1:a3f1aa0:         } finally {
1:a3f1aa0:             try {
1:a3f1aa0:                 checkOnStoreConnection.close();
1:a3f1aa0:             } catch (Exception ignored) {}
1:a3f1aa0:             broker.stop();
1:a3f1aa0:             broker.waitUntilStopped();
1:a3f1aa0:         }
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f:     public List<TextMessage> consumeMessages(String queue,
1:dcedd9f:                                       String transportURL) throws JMSException {
1:dcedd9f:         Connection connection = null;
1:dcedd9f:         LOG.debug("*** consumeMessages() called ...");
1:dcedd9f: 
1:dcedd9f:         try {
1:dcedd9f: 
1:dcedd9f:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:dcedd9f:                     transportURL);
1:dcedd9f: 
1:dcedd9f:             connection = factory.createConnection();
1:dcedd9f:             connection.start();
1:dcedd9f:             Session session = connection.createSession(false,
1:dcedd9f:                     Session.AUTO_ACKNOWLEDGE);
1:dcedd9f:             Destination destination = session.createQueue(queue);
1:dcedd9f: 
1:dcedd9f:             ArrayList<TextMessage> consumedMessages = new ArrayList<TextMessage>();
1:dcedd9f: 
1:dcedd9f:             MessageConsumer messageConsumer = session.createConsumer(destination);
1:dcedd9f: 
1:dcedd9f:             while(true){
1:4648dbe:                 TextMessage textMessage= (TextMessage) messageConsumer.receive(4000);
1:dcedd9f:                 LOG.debug("*** consumed Messages :"+textMessage);
1:dcedd9f: 
1:dcedd9f:                 if(textMessage==null){
1:dcedd9f:                     return consumedMessages;
1:dcedd9f:                 }
1:dcedd9f:                 consumedMessages.add(textMessage);
1:dcedd9f:             }
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f:         } finally {
1:dcedd9f:             if (connection != null) {
1:dcedd9f:                 connection.close();
1:dcedd9f:             }
1:dcedd9f:         }
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f:     public void sendMessage(String queue, String transportURL)
1:4648dbe:             throws Exception {
1:dcedd9f:         Connection connection = null;
1:dcedd9f: 
1:dcedd9f:         try {
1:dcedd9f: 
1:dcedd9f:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:dcedd9f:                     transportURL);
1:dcedd9f: 
1:dcedd9f:             connection = factory.createConnection();
1:dcedd9f:             Session session = connection.createSession(false,
1:dcedd9f:                     Session.AUTO_ACKNOWLEDGE);
1:dcedd9f:             Destination destination = session.createQueue(queue);
1:dcedd9f:             MessageProducer producer = session.createProducer(destination);
1:dcedd9f:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:dcedd9f: 
1:dcedd9f:             TextMessage m = session.createTextMessage("1");
1:dcedd9f: 
1:dcedd9f:             LOG.debug("*** send message 1 to broker...");
2:dcedd9f:             producer.send(m);
1:dcedd9f: 
1:dcedd9f:             // trigger SQL exception in transactionContext
1:dcedd9f:             LOG.debug("***  send message 2 to broker");
1:dcedd9f:             m.setText("2");
1:4648dbe:             producer.send(m);
1:dcedd9f: 
1:4648dbe:             //check db contents
1:a3f1aa0:             ArrayList<Long> dbSeq = dbMessageCount(checkOnStoreConnection);
1:4648dbe:             LOG.info("*** after send 2 - db contains message seq " + dbSeq);
1:4648dbe:             assertEquals("number of messages in DB after send 2",2,dbSeq.size());
1:dcedd9f: 
1:dcedd9f:             LOG.debug("***  send  message 3 to broker");
1:dcedd9f:             m.setText("3");
1:dcedd9f:             producer.send(m);
1:dcedd9f:             LOG.debug("*** Finished sending messages to broker");
1:dcedd9f: 
1:dcedd9f:         } finally {
1:dcedd9f:             if (connection != null) {
1:dcedd9f:                 connection.close();
1:dcedd9f:             }
1:dcedd9f:         }
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f:     /**
1:dcedd9f:      *  query the DB to see what messages are left in the store
1:dcedd9f:      * @return
1:dcedd9f:      * @throws SQLException
1:dcedd9f:      * @throws IOException
1:a3f1aa0:      * @param checkOnStoreConnection
1:dcedd9f:      */
1:a3f1aa0:     private ArrayList<Long> dbMessageCount(java.sql.Connection checkOnStoreConnection) throws SQLException, IOException {
1:a3f1aa0:         PreparedStatement statement = checkOnStoreConnection.prepareStatement("SELECT MSGID_SEQ FROM ACTIVEMQ_MSGS");
1:dcedd9f: 
1:dcedd9f:         try{
1:dcedd9f: 
1:dcedd9f:             ResultSet result = statement.executeQuery();
1:dcedd9f:             ArrayList<Long> dbSeq = new ArrayList<Long>();
1:dcedd9f: 
1:dcedd9f:             while (result.next()){
1:dcedd9f:                 dbSeq.add(result.getLong(1));
1:dcedd9f:             }
1:dcedd9f: 
1:dcedd9f:             return dbSeq;
1:dcedd9f: 
1:dcedd9f:         }finally{
1:dcedd9f:             statement.close();
1:dcedd9f:         }
1:dcedd9f: 
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f: 	/*
1:dcedd9f:      * Mock classes used for testing
1:dcedd9f: 	 */
1:dcedd9f: 
1:dcedd9f:     public class TestJDBCPersistenceAdapter extends JDBCPersistenceAdapter {
1:dcedd9f:         public TransactionContext getTransactionContext() throws IOException {
1:dcedd9f:             return testTransactionContext;
1:dcedd9f:         }
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f:     public class TestTransactionContext extends TransactionContext {
1:dcedd9f: 
1:4648dbe:         private int count;
1:dcedd9f: 
1:dcedd9f:         public TestTransactionContext(
1:dcedd9f:                 JDBCPersistenceAdapter jdbcPersistenceAdapter)
1:dcedd9f:                 throws IOException {
1:dcedd9f:             super(jdbcPersistenceAdapter);
1:dcedd9f:         }
1:dcedd9f: 
1:dcedd9f:         public void executeBatch() throws SQLException {
1:dcedd9f:             super.executeBatch();
1:4648dbe:             count++;
1:4648dbe:             LOG.debug("ExecuteBatchOverride: count:" + count, new RuntimeException("executeBatch"));
1:dcedd9f: 
1:4648dbe:             // throw on second add message
1:4648dbe:             if (count == 16){
1:4648dbe:                 throw new SQLException("TEST SQL EXCEPTION from executeBatch after super.execution: count:" + count);
1:dcedd9f:             }
1:dcedd9f:         }
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f: 
1:dcedd9f:     }
1:dcedd9f: 
1:dcedd9f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a3f1aa0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private java.sql.Connection checkOnStoreConnection;
/////////////////////////////////////////////////////////////////////////
1:         checkOnStoreConnection = embeddedDataSource.getConnection();
1: 
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             LOG.info("***Broker started...");
1:             // failover but timeout in 5 seconds so the test does not hang
1:             String failoverTransportURL = "failover:(" + transportUrl
1:                     + ")?timeout=5000";
1:             sendMessage(MY_TEST_Q, failoverTransportURL);
1:             //check db contents
1:             ArrayList<Long> dbSeq = dbMessageCount(checkOnStoreConnection);
1:             LOG.info("*** after send: db contains message seq " + dbSeq);
1:             List<TextMessage> consumedMessages = consumeMessages(MY_TEST_Q, failoverTransportURL);
1:             assertEquals("number of consumed messages", 3, consumedMessages.size());
1:             //check db contents
1:             dbSeq = dbMessageCount(checkOnStoreConnection);
1:             LOG.info("*** after consume - db contains message seq " + dbSeq);
1:             assertEquals("number of messages in DB after test", 0, dbSeq.size());
1:         } finally {
1:             try {
1:                 checkOnStoreConnection.close();
1:             } catch (Exception ignored) {}
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
/////////////////////////////////////////////////////////////////////////
1:             ArrayList<Long> dbSeq = dbMessageCount(checkOnStoreConnection);
/////////////////////////////////////////////////////////////////////////
1:      * @param checkOnStoreConnection
1:     private ArrayList<Long> dbMessageCount(java.sql.Connection checkOnStoreConnection) throws SQLException, IOException {
1:         PreparedStatement statement = checkOnStoreConnection.prepareStatement("SELECT MSGID_SEQ FROM ACTIVEMQ_MSGS");
/////////////////////////////////////////////////////////////////////////
commit:30ff378
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnection;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.log4j.Level;
0: import org.slf4j.impl.Log4jLoggerAdapter;
/////////////////////////////////////////////////////////////////////////
1:         org.apache.log4j.Logger serviceLogger = org.apache.log4j.Logger.getLogger(TransportConnection.class.getName() + ".Service");
1:         serviceLogger.setLevel (Level.TRACE);
1: 
commit:165959e
/////////////////////////////////////////////////////////////////////////
commit:4648dbe
/////////////////////////////////////////////////////////////////////////
1:         jdbc.setCleanupPeriod(0);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("*** after send: db contains message seq " +dbSeq );
0:         List<TextMessage> consumedMessages = consumeMessages(MY_TEST_Q,failoverTransportURL);
1: 
0:         assertEquals("number of consumed messages",3,consumedMessages.size());
1: 
1:         //check db contents
0:         dbSeq = dbMessageCount();
0:         LOG.info("*** after consume - db contains message seq " + dbSeq);
/////////////////////////////////////////////////////////////////////////
1:                 TextMessage textMessage= (TextMessage) messageConsumer.receive(4000);
/////////////////////////////////////////////////////////////////////////
1:             throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             producer.send(m);
0:             //check db contents
0:             ArrayList<Long> dbSeq = dbMessageCount();
1:             LOG.info("*** after send 2 - db contains message seq " + dbSeq);
1:             assertEquals("number of messages in DB after send 2",2,dbSeq.size());
/////////////////////////////////////////////////////////////////////////
1:         private int count;
/////////////////////////////////////////////////////////////////////////
1:             count++;
1:             LOG.debug("ExecuteBatchOverride: count:" + count, new RuntimeException("executeBatch"));
1:             // throw on second add message
1:             if (count == 16){
1:                 throw new SQLException("TEST SQL EXCEPTION from executeBatch after super.execution: count:" + count);
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1: import org.apache.activemq.store.jdbc.TransactionContext;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:         broker.setIoExceptionHandler(new LeaseLockerIOExceptionHandler());
commit:cfe099d
/////////////////////////////////////////////////////////////////////////
0:                 throw new SQLException("TEST SQL EXCEPTION from executeBatch after super. execution");
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8f13847
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:dcedd9f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import junit.framework.Assert;
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.store.jdbc.*;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.derby.jdbc.EmbeddedDataSource;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import javax.jms.Message;
1: import java.io.IOException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.util.ArrayList;
1: import java.util.List;
0: import java.util.concurrent.Executor;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.ScheduledExecutorService;
0: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Test to demostrate a message trapped in the JDBC store and not
1:  * delivered to consumer
1:  *
1:  * The test throws issues the commit to the DB but throws
1:  * an exception back to the broker. This scenario could happen when a network
1:  * cable is disconnected - message is committed to DB but broker does not know.
1:  *
1:  *
1:  */
1: 
1: public class TrapMessageInJDBCStoreTest extends TestCase {
1: 
1:     private static final String MY_TEST_Q = "MY_TEST_Q";
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(TrapMessageInJDBCStoreTest.class);
1:     private String transportUrl = "tcp://127.0.0.1:0";
1:     private BrokerService broker;
1:     private TestTransactionContext testTransactionContext;
1:     private TestJDBCPersistenceAdapter jdbc;
1: 
1:     protected BrokerService createBroker(boolean withJMX) throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         broker.setUseJmx(withJMX);
1: 
1:         EmbeddedDataSource embeddedDataSource = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
0:         embeddedDataSource.setCreateDatabase("create");
1: 
1:         //wire in a TestTransactionContext (wrapper to TransactionContext) that has an executeBatch()
1:         // method that can be configured to throw a SQL exception on demand
1:         jdbc = new TestJDBCPersistenceAdapter();
1:         jdbc.setDataSource(embeddedDataSource);
1:         testTransactionContext = new TestTransactionContext(jdbc);
1: 
1:         jdbc.setLockKeepAlivePeriod(1000l);
1:         LeaseDatabaseLocker leaseDatabaseLocker = new LeaseDatabaseLocker();
1:         leaseDatabaseLocker.setLockAcquireSleepInterval(2000l);
1:         jdbc.setLocker(leaseDatabaseLocker);
1: 
1:         broker.setPersistenceAdapter(jdbc);
1: 
0:         broker.setIoExceptionHandler(new JDBCIOExceptionHandler());
1: 
1:         transportUrl = broker.addConnector(transportUrl).getPublishableConnectString();
1:         return broker;
1:     }
1: 
1:     /**
1:      *
1:      * sends 3 messages to the queue. When the second message is being committed to the JDBCStore, $
1:      * it throws a dummy SQL exception - the message has been committed to the embedded DB before the exception
1:      * is thrown
1:      *
1:      * Excepted correct outcome: receive 3 messages and the DB should contain no messages
1:      *
1:      * @throws Exception
1:      */
1: 
1:     public void testDBCommitException() throws Exception {
1: 
1:         broker = this.createBroker(false);
1:         broker.deleteAllMessages();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
0:         LOG.info("***Broker started...");
1: 
0:         // failover but timeout in 5 seconds so the test does not hang
0:         String failoverTransportURL = "failover:(" + transportUrl
0:                 + ")?timeout=5000";
1: 
1: 
0:         sendMessage(MY_TEST_Q, failoverTransportURL);
1: 
0:         List<TextMessage> consumedMessages = consumeMessages(MY_TEST_Q,failoverTransportURL);
1: 
0:         //check db contents
0:         ArrayList<Long> dbSeq = dbMessageCount();
1: 
0:         LOG.debug("*** db contains message seq " +dbSeq );
1: 
0:         assertEquals("number of messages in DB after test",0,dbSeq.size());
0:         assertEquals("number of consumed messages",3,consumedMessages.size());
1: 
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
1: 
1: 
1:     public List<TextMessage> consumeMessages(String queue,
1:                                       String transportURL) throws JMSException {
1:         Connection connection = null;
1:         LOG.debug("*** consumeMessages() called ...");
1: 
1:         try {
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                     transportURL);
1: 
1:             connection = factory.createConnection();
1:             connection.start();
1:             Session session = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(queue);
1: 
1:             ArrayList<TextMessage> consumedMessages = new ArrayList<TextMessage>();
1: 
1:             MessageConsumer messageConsumer = session.createConsumer(destination);
1: 
1:             while(true){
0:                 TextMessage textMessage= (TextMessage) messageConsumer.receive(100);
1:                 LOG.debug("*** consumed Messages :"+textMessage);
1: 
1:                 if(textMessage==null){
1:                     return consumedMessages;
1:                 }
1:                 consumedMessages.add(textMessage);
1:             }
1: 
1: 
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     public void sendMessage(String queue, String transportURL)
0:             throws JMSException {
1:         Connection connection = null;
1: 
1:         try {
1: 
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                     transportURL);
1: 
1:             connection = factory.createConnection();
1:             Session session = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(queue);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:             TextMessage m = session.createTextMessage("1");
1: 
0:             testTransactionContext.throwSQLException = false;
0:             jdbc.throwSQLException = false;
1: 
1: 
1:             LOG.debug("*** send message 1 to broker...");
1:             producer.send(m);
1: 
0:             testTransactionContext.throwSQLException = true;
0:             jdbc.throwSQLException = true;
1: 
1:             // trigger SQL exception in transactionContext
1:             LOG.debug("***  send message 2 to broker");
1:             m.setText("2");
1: 
0:             // need to reset the flag in a seperate thread during the send
0:             ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
0:             executor.schedule(new Runnable() {
0:                 @Override
0:                 public void run() {
0:                     testTransactionContext.throwSQLException = false;
0:                     jdbc.throwSQLException = false;
1:                 }
0:             }, 2 , TimeUnit.SECONDS);
1: 
1:              producer.send(m);
1: 
1: 
1:             LOG.debug("***  send  message 3 to broker");
1:             m.setText("3");
1:             producer.send(m);
1:             LOG.debug("*** Finished sending messages to broker");
1: 
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      *  query the DB to see what messages are left in the store
1:      * @return
1:      * @throws SQLException
1:      * @throws IOException
1:      */
0:     private ArrayList<Long> dbMessageCount() throws SQLException, IOException {
0:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
0:         PreparedStatement statement = conn.prepareStatement("SELECT MSGID_SEQ FROM ACTIVEMQ_MSGS");
1: 
1:         try{
1: 
1:             ResultSet result = statement.executeQuery();
1:             ArrayList<Long> dbSeq = new ArrayList<Long>();
1: 
1:             while (result.next()){
1:                 dbSeq.add(result.getLong(1));
1:             }
1: 
1:             return dbSeq;
1: 
1:         }finally{
1:             statement.close();
0:             conn.close();
1: 
1:         }
1: 
1:     }
1: 
1: 	/*
1:      * Mock classes used for testing
1: 	 */
1: 
1:     public class TestJDBCPersistenceAdapter extends JDBCPersistenceAdapter {
1: 
0:         public boolean throwSQLException;
1: 
1:         public TransactionContext getTransactionContext() throws IOException {
1:             return testTransactionContext;
1:         }
1: 
0:         @Override
0:         public void checkpoint(boolean sync) throws IOException {
0:             if (throwSQLException) {
0:                 throw new IOException("checkpoint failed");
1:             }
0:             super.checkpoint(sync);
1:         }
1:     }
1: 
1:     public class TestTransactionContext extends TransactionContext {
1: 
0:         public boolean throwSQLException;
1: 
1:         public TestTransactionContext(
1:                 JDBCPersistenceAdapter jdbcPersistenceAdapter)
1:                 throws IOException {
1:             super(jdbcPersistenceAdapter);
1:         }
1: 
1:         public void executeBatch() throws SQLException {
0:             //call
1:             super.executeBatch();
1: 
0:             if (throwSQLException){
0:                 throw new SQLException("TEST SQL EXCEPTION from executeBatch");
1:             }
1: 
1: 
1:         }
1: 
1: 
1: 
1: 
1:     }
1: 
1: }
============================================================================