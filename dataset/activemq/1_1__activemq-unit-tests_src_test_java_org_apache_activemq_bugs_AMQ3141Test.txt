1:3d82d74: /**
1:3d82d74:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3d82d74:  * contributor license agreements.  See the NOTICE file distributed with
1:3d82d74:  * this work for additional information regarding copyright ownership.
1:3d82d74:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3d82d74:  * (the "License"); you may not use this file except in compliance with
1:3d82d74:  * the License.  You may obtain a copy of the License at
1:3d82d74:  *
1:3d82d74:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3d82d74:  *
1:3d82d74:  * Unless required by applicable law or agreed to in writing, software
1:3d82d74:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3d82d74:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3d82d74:  * See the License for the specific language governing permissions and
1:3d82d74:  * limitations under the License.
1:3d82d74:  */
1:3d82d74: package org.apache.activemq.bugs;
1:3d82d74: 
1:3d82d74: import static org.junit.Assert.assertTrue;
1:3d82d74: 
1:3d82d74: import java.io.File;
1:3d82d74: import java.util.concurrent.CountDownLatch;
1:3d82d74: import java.util.concurrent.TimeUnit;
1:3d82d74: 
1:3d82d74: import javax.jms.Connection;
1:3d82d74: import javax.jms.ConnectionFactory;
1:3d82d74: import javax.jms.Message;
1:3d82d74: import javax.jms.MessageConsumer;
1:3d82d74: import javax.jms.MessageListener;
1:3d82d74: import javax.jms.MessageProducer;
1:3d82d74: import javax.jms.Session;
1:3d82d74: 
1:3d82d74: import org.apache.activemq.ActiveMQConnectionFactory;
1:3d82d74: import org.apache.activemq.ScheduledMessage;
1:3d82d74: import org.apache.activemq.broker.BrokerService;
1:3d82d74: import org.apache.activemq.util.IOHelper;
1:3d82d74: import org.junit.After;
1:3d82d74: import org.junit.Before;
1:3d82d74: import org.junit.Test;
1:3d82d74: 
1:3d82d74: public class AMQ3141Test {
1:3d82d74: 
1:3d82d74:     private static final int MAX_MESSAGES = 100;
1:3d82d74: 
1:3d82d74:     private static final long DELAY_IN_MS = 100;
1:3d82d74: 
1:3d82d74:     private static final String QUEUE_NAME = "target.queue";
1:3d82d74: 
1:3d82d74:     private BrokerService broker;
1:3d82d74: 
1:3d82d74:     private final CountDownLatch messageCountDown = new CountDownLatch(MAX_MESSAGES);
1:3d82d74: 
1:3d82d74:     private ConnectionFactory factory;
1:3d82d74: 
1:3d82d74:     @Before
1:3d82d74:     public void setup() throws Exception {
1:3d82d74: 
1:3d82d74:         broker = new BrokerService();
1:8b61c39:         broker.setPersistent(true);
1:3d82d74:         broker.setSchedulerSupport(true);
1:3d82d74:         broker.setDataDirectory("target");
1:3d82d74:         broker.setUseJmx(false);
1:3d82d74:         broker.addConnector("vm://localhost");
1:3d82d74: 
1:3d82d74:         File schedulerDirectory = new File("target/test/ScheduledDB");
1:3d82d74:         IOHelper.mkdirs(schedulerDirectory);
1:3d82d74:         IOHelper.deleteChildren(schedulerDirectory);
1:3d82d74:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:3d82d74: 
1:3d82d74:         broker.start();
1:3d82d74:         broker.waitUntilStarted();
1:3d82d74: 
1:3d82d74:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:3d82d74:     }
1:3d82d74: 
1:3d82d74:     private void sendMessages() throws Exception {
1:3d82d74:         Connection connection = factory.createConnection();
1:3d82d74:         connection.start();
1:3d82d74:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3d82d74:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:3d82d74:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:3d82d74:             Message message = session.createTextMessage();
1:3d82d74:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELAY_IN_MS);
1:3d82d74:             producer.send(message);
1:3d82d74:         }
1:3d82d74:         connection.close();
1:3d82d74:     }
1:3d82d74: 
1:3d82d74:     @Test
1:3d82d74:     public void testNoMissingMessagesOnShortScheduleDelay() throws Exception {
1:3d82d74: 
1:3d82d74:         Connection connection = factory.createConnection();
1:3d82d74:         connection.start();
1:3d82d74:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3d82d74:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:3d82d74: 
1:3d82d74:         consumer.setMessageListener(new MessageListener() {
1:8b61c39:             @Override
1:3d82d74:             public void onMessage(Message message) {
1:3d82d74:                 messageCountDown.countDown();
1:3d82d74:             }
1:3d82d74:         });
1:3d82d74:         sendMessages();
1:3d82d74: 
1:3d82d74:         boolean receiveComplete = messageCountDown.await(5, TimeUnit.SECONDS);
1:3d82d74: 
1:3d82d74:         connection.close();
1:3d82d74: 
1:3d82d74:         assertTrue("expect all messages received but " + messageCountDown.getCount() + " are missing", receiveComplete);
1:3d82d74:     }
1:3d82d74: 
1:3d82d74:     @After
1:3d82d74:     public void tearDown() throws Exception {
1:3d82d74:         broker.stop();
1:3d82d74:     }
1:3d82d74: 
1:3d82d74: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b61c39
/////////////////////////////////////////////////////////////////////////
1:         broker.setPersistent(true);
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
commit:3d82d74
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3141Test {
1: 
1:     private static final int MAX_MESSAGES = 100;
1: 
1:     private static final long DELAY_IN_MS = 100;
1: 
1:     private static final String QUEUE_NAME = "target.queue";
1: 
1:     private BrokerService broker;
1: 
1:     private final CountDownLatch messageCountDown = new CountDownLatch(MAX_MESSAGES);
1: 
1:     private ConnectionFactory factory;
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         broker = new BrokerService();
0:         broker.setPersistent(false);
1:         broker.setSchedulerSupport(true);
1:         broker.setDataDirectory("target");
1:         broker.setUseJmx(false);
1:         broker.addConnector("vm://localhost");
1: 
1:         File schedulerDirectory = new File("target/test/ScheduledDB");
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:         for (int i = 0; i < MAX_MESSAGES; i++) {
1:             Message message = session.createTextMessage();
1:             message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELAY_IN_MS);
1:             producer.send(message);
1:         }
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testNoMissingMessagesOnShortScheduleDelay() throws Exception {
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1: 
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 messageCountDown.countDown();
1:             }
1:         });
1:         sendMessages();
1: 
1:         boolean receiveComplete = messageCountDown.await(5, TimeUnit.SECONDS);
1: 
1:         connection.close();
1: 
1:         assertTrue("expect all messages received but " + messageCountDown.getCount() + " are missing", receiveComplete);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1: }
============================================================================