2:400b1fc: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
2:400b1fc:  */
1:400b1fc: package org.apache.activemq.network;
1:74a7a8b: 
1:400b1fc: import org.apache.activemq.command.Command;
1:400b1fc: import org.apache.activemq.transport.Transport;
1:f812e34: 
1:400b1fc: /**
1:400b1fc:  * A demand forwarding bridge which works with multicast style transports where
1:400b1fc:  * a single Transport could be communicating with multiple remote brokers
1:7f883f6:  *
1:400b1fc:  * @org.apache.xbean.XBean
1:0bbc0ac:  *
1:400b1fc:  */
1:400b1fc: public class CompositeDemandForwardingBridge extends DemandForwardingBridgeSupport {
1:a9c49a7: 
1:f812e34:     public CompositeDemandForwardingBridge(NetworkBridgeConfiguration configuration, Transport localBroker,
1:f812e34:                                            Transport remoteBroker) {
1:f812e34:         super(configuration, localBroker, remoteBroker);
1:400b1fc:         remoteBrokerName = remoteBroker.toString();
1:a9c49a7:     }
1:f812e34: 
1:400b1fc:     protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
16:400b1fc:     }
1:400b1fc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CompositeDemandForwardingBridge.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Incoming command does not have a from endpoint: " + command);
0:                     LOG.info("Disconnecting loop back connection.");
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("Incoming command does not have a from endpoint: " + command);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
1:     public CompositeDemandForwardingBridge(NetworkBridgeConfiguration configuration, Transport localBroker,
1:                                            Transport remoteBroker) {
1:         super(configuration, localBroker, remoteBroker);
0:         remoteBrokerNameKnownLatch.countDown();
0:             BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
1: 
0:             // lets associate the incoming endpoint with a broker ID so we can
0:             // refer to it later
0:             } else {
/////////////////////////////////////////////////////////////////////////
0:         } else {
0:         if (answer != null) {
0:         } else {
0:             throw new IOException("No broker ID is available for endpoint: " + from + " from command: "
0:                                   + command);
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected BrokerId[] getRemoteBrokerPath() {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:58d4605
/////////////////////////////////////////////////////////////////////////
0:     	remoteBrokerNameKnownLatch.countDown();
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:174c405
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:af1b232
/////////////////////////////////////////////////////////////////////////
commit:5d42b72
/////////////////////////////////////////////////////////////////////////
0:             if (!disposed.get()) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(CompositeDemandForwardingBridge.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0:     public CompositeDemandForwardingBridge(NetworkBridgeConfiguration configuration,Transport localBroker, Transport remoteBroker) {
0:         super(configuration,localBroker, remoteBroker);
/////////////////////////////////////////////////////////////////////////
0:         return new NetworkBridgeFilter(getFromBrokerId(info), configuration.getNetworkTTL());
commit:a9c49a7
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected BrokerId[] getRemoteBrokerPath(){
0:         return remoteBrokerPath;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import org.apache.activemq.command.BrokerId;
0: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.Endpoint;
0: import org.apache.activemq.command.NetworkBridgeFilter;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.util.ServiceSupport;
0: 
0: import java.io.IOException;
0: 
1: /**
1:  * A demand forwarding bridge which works with multicast style transports where
1:  * a single Transport could be communicating with multiple remote brokers
0:  * 
1:  * @org.apache.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
1: public class CompositeDemandForwardingBridge extends DemandForwardingBridgeSupport {
0: 
0:     protected final BrokerId remoteBrokerPath[] = new BrokerId[] { null };
0:     protected Object brokerInfoMutex = new Object();
0: 
0:     public CompositeDemandForwardingBridge(Transport localBroker, Transport remoteBroker) {
0:         super(localBroker, remoteBroker);
1:         remoteBrokerName = remoteBroker.toString();
1:     }
0: 
0:     protected void serviceRemoteBrokerInfo(Command command) throws IOException {
0:         synchronized (brokerInfoMutex) {
0:             BrokerInfo remoteBrokerInfo = (BrokerInfo) command;
0:             BrokerId remoteBrokerId = remoteBrokerInfo.getBrokerId();
0:             
0:             // lets associate the incoming endpoint with a broker ID so we can refer to it later
0:             Endpoint from = command.getFrom();
0:             if (from == null) {
0:                 log.warn("Incoming command does not have a from endpoint: " + command);
1:             }
0:             else {
0:                 from.setBrokerInfo(remoteBrokerInfo);
1:             }
0:             if (localBrokerId != null) {
0:                 if (localBrokerId.equals(remoteBrokerId)) {
0:                     log.info("Disconnecting loop back connection.");
0:                     // waitStarted();
0:                     ServiceSupport.dispose(this);
1:                 }
1:             }
0:             if (!disposed) {
0:                 triggerLocalStartBridge();
1:             }
1:         }
1:     }
0: 
0:     protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException {
0:         info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getFromBrokerId(info)));
1:     }
0: 
1:     /**
0:      * Returns the broker ID that the command came from
1:      */
0:     protected BrokerId getFromBrokerId(Command command) throws IOException {
0:         BrokerId answer = null;
0:         Endpoint from = command.getFrom();
0:         if (from == null) {
0:             log.warn("Incoming command does not have a from endpoint: " + command);
1:         }
0:         else {
0:             answer = from.getBrokerId();
1:         }
0:         if (answer != null) { 
0:             return answer;
1:         }
0:         else {
0:             throw new IOException("No broker ID is available for endpoint: " + from + " from command: " + command);
1:         }
1:     }
0: 
1:     protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
0:         // TODO is there much we can do here?
1:     }
0: 
0:     protected NetworkBridgeFilter createNetworkBridgeFilter(ConsumerInfo info) throws IOException {
0:         return new NetworkBridgeFilter(getFromBrokerId(info), networkTTL);
1:     }
0: 
1: }
============================================================================