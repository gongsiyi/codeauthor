1:fcb5d9e: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:fcb5d9e:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fcb5d9e:  *
1:fcb5d9e:  * Unless required by applicable law or agreed to in writing, software
1:fcb5d9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fcb5d9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fcb5d9e:  * See the License for the specific language governing permissions and
1:fcb5d9e:  * limitations under the License.
1:fcb5d9e:  */
1:fcb5d9e: package org.apache.activemq.openwire.tool;
5:fcb5d9e: 
1:bd0ad68: import org.codehaus.jam.JAnnotation;
1:fcb5d9e: import org.codehaus.jam.JAnnotationValue;
1:fcb5d9e: import org.codehaus.jam.JClass;
1:fcb5d9e: import org.codehaus.jam.JField;
1:fcb5d9e: import org.codehaus.jam.JMethod;
1:fcb5d9e: import org.codehaus.jam.JProperty;
1:fcb5d9e: import org.codehaus.jam.JamClassIterator;
1:fcb5d9e: import org.codehaus.jam.JamService;
1:fcb5d9e: 
1:fcb5d9e: /**
1:b0c2a40:  * 
1:fcb5d9e:  */
1:bd0ad68: public abstract class OpenWireGenerator {
1:fcb5d9e: 
1:bd0ad68:     protected int openwireVersion;
1:fcb5d9e:     protected String filePostFix = ".java";
1:bd0ad68:     protected JamService jam;
1:bd0ad68: 
1:540dd5c:     public boolean isValidProperty(JProperty it) {
1:fcb5d9e:         JMethod getter = it.getGetter();
1:540dd5c:         return getter != null && it.getSetter() != null && !getter.isStatic() && getter.getAnnotation("openwire:property") != null;
16:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     public boolean isCachedProperty(JProperty it) {
1:fcb5d9e:         JMethod getter = it.getGetter();
1:540dd5c:         if (!isValidProperty(it)) {
1:fcb5d9e:             return false;
1:540dd5c:         }
1:fcb5d9e:         JAnnotationValue value = getter.getAnnotation("openwire:property").getValue("cache");
1:fcb5d9e:         return value != null && value.asBoolean();
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     public boolean isAbstract(JClass j) {
1:fcb5d9e:         JField[] fields = j.getFields();
1:fcb5d9e:         for (int i = 0; i < fields.length; i++) {
1:fcb5d9e:             JField field = fields[i];
1:fcb5d9e:             if (field.isStatic() && field.isPublic() && field.isFinal() && field.getSimpleName().equals("DATA_STRUCTURE_TYPE")) {
1:fcb5d9e:                 return false;
1:bd0ad68:             }
1:bd0ad68:         }
1:fcb5d9e:         return true;
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     public boolean isThrowable(JClass j) {
1:fcb5d9e:         if (j.getQualifiedName().equals(Throwable.class.getName())) {
1:fcb5d9e:             return true;
1:bd0ad68:         }
1:fcb5d9e:         return j.getSuperclass() != null && isThrowable(j.getSuperclass());
1:bd0ad68:     }
1:fcb5d9e: 
1:fcb5d9e:     public boolean isMarshallAware(JClass j) {
1:fcb5d9e:         if (filePostFix.endsWith("java")) {
1:fcb5d9e:             JClass[] interfaces = j.getInterfaces();
1:fcb5d9e:             for (int i = 0; i < interfaces.length; i++) {
1:fcb5d9e:                 if (interfaces[i].getQualifiedName().equals("org.apache.activemq.command.MarshallAware")) {
1:fcb5d9e:                     return true;
1:bd0ad68:                 }
1:fcb5d9e:             }
1:fcb5d9e:             return false;
1:bd0ad68:         } else {
1:fcb5d9e:             String simpleName = j.getSimpleName();
1:fcb5d9e:             return simpleName.equals("ActiveMQMessage") || simpleName.equals("WireFormatInfo");
1:fcb5d9e:         }
1:fcb5d9e:         /*
1:fcb5d9e:          * else { // is it a message type String simpleName = j.getSimpleName();
1:fcb5d9e:          * JClass superclass = j.getSuperclass(); return
1:fcb5d9e:          * simpleName.equals("ActiveMQMessage") || (superclass != null &&
1:fcb5d9e:          * superclass.getSimpleName().equals("ActiveMQMessage")); }
1:fcb5d9e:          */
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     public JamService getJam() {
1:bd0ad68:         return jam;
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     public JamClassIterator getClasses() {
1:fcb5d9e:         return getJam().getClasses();
1:fcb5d9e:     }
1:fcb5d9e: 
1:bd0ad68:     public int getOpenwireVersion() {
1:fcb5d9e:         return openwireVersion;
1:fcb5d9e:     }
1:fcb5d9e: 
1:bd0ad68:     public void setOpenwireVersion(int openwireVersion) {
1:fcb5d9e:         this.openwireVersion = openwireVersion;
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     /**
1:fcb5d9e:      * Converts the Java type to a C# type name
1:fcb5d9e:      */
1:fcb5d9e:     public String toCSharpType(JClass type) {
1:fcb5d9e:         String name = type.getSimpleName();
1:fcb5d9e:         if (name.equals("String")) {
1:fcb5d9e:             return "string";
1:540dd5c:         } else if (name.equals("Throwable") || name.equals("Exception")) {
1:fcb5d9e:             return "BrokerError";
1:540dd5c:         } else if (name.equals("ByteSequence")) {
1:fcb5d9e:             return "byte[]";
1:540dd5c:         } else if (name.equals("boolean")) {
1:fcb5d9e:             return "bool";
1:540dd5c:         } else {
1:fcb5d9e:             return name;
1:fcb5d9e:         }
1:fcb5d9e:     }
1:fcb5d9e: 
1:bd0ad68:     public String getOpenWireOpCode(JClass element) {
1:540dd5c:         if (element != null) {
1:540dd5c:             JAnnotation annotation = element.getAnnotation("openwire:marshaller");
1:540dd5c:             return stringValue(annotation, "code", "0");
1:540dd5c:         }
1:540dd5c:         return "0";
1:bd0ad68:     }
1:540dd5c: 
1:bd0ad68:     protected String stringValue(JAnnotation annotation, String name) {
1:540dd5c:         return stringValue(annotation, name, null);
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected String stringValue(JAnnotation annotation, String name, String defaultValue) {
1:bd0ad68:         if (annotation != null) {
1:bd0ad68:             JAnnotationValue value = annotation.getValue(name);
1:bd0ad68:             if (value != null) {
1:bd0ad68:                 return value.asString();
1:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68:         return defaultValue;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setJam(JamService jam) {
1:540dd5c:         this.jam = jam;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public String decapitalize(String text) {
1:540dd5c:         if (text == null) {
1:540dd5c:             return null;
1:540dd5c:         }
1:540dd5c:         return text.substring(0, 1).toLowerCase() + text.substring(1);
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public String capitalize(String text) {
1:540dd5c:         if (text == null) {
1:540dd5c:             return null;
1:540dd5c:         }
1:540dd5c:         return text.substring(0, 1).toUpperCase() + text.substring(1);
1:540dd5c:     }
1:86cbdfd: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     public boolean isValidProperty(JProperty it) {
1:         return getter != null && it.getSetter() != null && !getter.isStatic() && getter.getAnnotation("openwire:property") != null;
1:         if (!isValidProperty(it)) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         } else if (name.equals("Throwable") || name.equals("Exception")) {
1:         } else if (name.equals("ByteSequence")) {
1:         } else if (name.equals("boolean")) {
1:         } else {
1:         if (element != null) {
1:             JAnnotation annotation = element.getAnnotation("openwire:marshaller");
1:             return stringValue(annotation, "code", "0");
1:         }
1:         return "0";
1: 
1:         return stringValue(annotation, name, null);
1:     }
1: 
1:     protected String stringValue(JAnnotation annotation, String name, String defaultValue) {
/////////////////////////////////////////////////////////////////////////
1:     }
1:     public void setJam(JamService jam) {
1:         this.jam = jam;
1:     }
1:     public String decapitalize(String text) {
1:         if (text == null) {
1:             return null;
1:         }
1:         return text.substring(0, 1).toLowerCase() + text.substring(1);
1:     }
1: 
1:     public String capitalize(String text) {
1:         if (text == null) {
1:             return null;
1:         }
1:         return text.substring(0, 1).toUpperCase() + text.substring(1);
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: import org.codehaus.jam.JAnnotation;
/////////////////////////////////////////////////////////////////////////
1: public abstract class OpenWireGenerator {
1:     protected int openwireVersion;
1:     protected JamService jam;
1:     
0: 	public boolean isValidProperty(JProperty it) {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         return jam;
1:     public int getOpenwireVersion() {
1:     public void setOpenwireVersion(int openwireVersion) {
/////////////////////////////////////////////////////////////////////////
1:     public String getOpenWireOpCode(JClass element) {
0:     	if (element != null) {
0: 			JAnnotation annotation = element.getAnnotation("openwire:marshaller");
0: 			return stringValue(annotation, "code", "0");
1: 		}
0: 		return "0";
1:     
1:     protected String stringValue(JAnnotation annotation, String name) {
0: 		return stringValue(annotation, name, null);
1: 	}
1: 	
0: 	protected String stringValue(JAnnotation annotation, String name, String defaultValue) {
1:         if (annotation != null) {
1:             JAnnotationValue value = annotation.getValue(name);
1:             if (value != null) {
1:                 return value.asString();
1:             }
1:         }
1:         return defaultValue;
1: 	}
1: 
0: 	public void setJam(JamService jam) {
0: 		this.jam = jam;
1: 	}
1: 	
0: 	public String decapitalize(String text) {
0: 		if (text == null) {
0: 			return null;
1: 		}
0: 		return text.substring(0, 1).toLowerCase() + text.substring(1);
1: 	}
1: 
0: 	public String capitalize(String text) {
0: 		if (text == null) {
0: 			return null;
1: 		}
0: 		return text.substring(0, 1).toUpperCase() + text.substring(1);
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:fcb5d9e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
0: import org.codehaus.gram.GramSupport;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JField;
1: import org.codehaus.jam.JMethod;
1: import org.codehaus.jam.JProperty;
1: import org.codehaus.jam.JamClassIterator;
1: import org.codehaus.jam.JamService;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public abstract class OpenWireScript extends GramSupport {
1: 
0:     private String openwireVersion;
1:     protected String filePostFix = ".java";
1: 
0:     public boolean isValidProperty(JProperty it) {
1:         JMethod getter = it.getGetter();
0:         return getter != null && it.getSetter() != null && getter.isStatic() == false && getter.getAnnotation("openwire:property") != null;
1:     }
1: 
1:     public boolean isCachedProperty(JProperty it) {
1:         JMethod getter = it.getGetter();
0:         if (!isValidProperty(it))
1:             return false;
1:         JAnnotationValue value = getter.getAnnotation("openwire:property").getValue("cache");
1:         return value != null && value.asBoolean();
1:     }
1: 
1:     public boolean isAbstract(JClass j) {
1:         JField[] fields = j.getFields();
1:         for (int i = 0; i < fields.length; i++) {
1:             JField field = fields[i];
1:             if (field.isStatic() && field.isPublic() && field.isFinal() && field.getSimpleName().equals("DATA_STRUCTURE_TYPE")) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     public boolean isThrowable(JClass j) {
1:         if (j.getQualifiedName().equals(Throwable.class.getName())) {
1:             return true;
1:         }
1:         return j.getSuperclass() != null && isThrowable(j.getSuperclass());
1:     }
1: 
1:     public boolean isMarshallAware(JClass j) {
1:         if (filePostFix.endsWith("java")) {
1:             JClass[] interfaces = j.getInterfaces();
1:             for (int i = 0; i < interfaces.length; i++) {
1:                 if (interfaces[i].getQualifiedName().equals("org.apache.activemq.command.MarshallAware")) {
1:                     return true;
1:                 }
1:             }
1:             return false;
1:         }
0:         else {
1:             String simpleName = j.getSimpleName();
1:             return simpleName.equals("ActiveMQMessage") || simpleName.equals("WireFormatInfo");
1:         }
1:         /*
1:          * else { // is it a message type String simpleName = j.getSimpleName();
1:          * JClass superclass = j.getSuperclass(); return
1:          * simpleName.equals("ActiveMQMessage") || (superclass != null &&
1:          * superclass.getSimpleName().equals("ActiveMQMessage")); }
1:          */
1:     }
1: 
1:     public JamService getJam() {
0:         return (JamService) getBinding().getVariable("jam");
1:     }
1: 
1:     public JamClassIterator getClasses() {
1:         return getJam().getClasses();
1:     }
1: 
0:     public String getOpenwireVersion() {
0:         if (openwireVersion == null) {
0:             openwireVersion = (String) getProperty("version");
1:         }
1:         return openwireVersion;
1:     }
1: 
0:     public void setOpenwireVersion(String openwireVersion) {
1:         this.openwireVersion = openwireVersion;
1:     }
1: 
1:     /**
1:      * Converts the Java type to a C# type name
1:      */
1:     public String toCSharpType(JClass type) {
1:         String name = type.getSimpleName();
1:         if (name.equals("String")) {
1:             return "string";
1:         }
0:         else if (name.equals("Throwable") || name.equals("Exception")) {
1:             return "BrokerError";
1:         }
0:         else if (name.equals("ByteSequence")) {
1:             return "byte[]";
1:         }
0:         else if (name.equals("boolean")) {
1:             return "bool";
1:         }
0:         else {
1:             return name;
1:         }
1:     }
1: 
0:     public String getOpenWireOpCode(JClass aClass) {
0:         return annotationValue(aClass, "openwire:marshaller", "code", "0");
1:     }
1: }
============================================================================