1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
1:bf07137: 
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: import org.apache.activemq.filter.MessageEvaluationContext;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Function which splits a string into a list of strings given a regular expression for the separator.
1:bf07137:  */
1:bf07137: 
1:bf07137: public class splitFunction implements FilterFunction {
1:bf07137:     /**
1:bf07137:      * Check whether the given expression is valid for this function.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return true - if two or three arguments are passed to the function; false - otherwise.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean isValid(FunctionCallExpression expr) {
1:bf07137:         if ((expr.getNumArguments() >= 2) && (expr.getNumArguments() <= 3))
1:bf07137:             return true;
1:bf07137: 
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Indicate that this function does not return a boolean value.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return false - indicating this filter function never evaluates to a boolean result.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evaluate the given expression for this function in the given context.  A list of zero or more strings
1:bf07137:      * results from the evaluation.  The result of the evaluation of the first argument is split with the regular
1:bf07137:      * expression which results from the evaluation of the second argument.  If a third argument is given, it
1:bf07137:      * is an integer which limits the split.  String#split() performs the split.
1:bf07137:      * <p/>
1:bf07137:      * The first two arguments must be Strings.  If a third is given, it must be an Integer.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return List - a list of Strings resulting from the split.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message_ctx)
1:bf07137:             throws javax.jms.JMSException {
1:bf07137:         String src;
1:bf07137:         String split_pat;
1:bf07137:         String[] result;
1:bf07137: 
1:bf07137:         src = (String) expr.getArgument(0).evaluate(message_ctx);
1:bf07137:         split_pat = (String) expr.getArgument(1).evaluate(message_ctx);
1:bf07137: 
1:bf07137:         if (expr.getNumArguments() > 2) {
1:bf07137:             Integer limit;
1:bf07137: 
1:bf07137:             limit = (Integer) expr.getArgument(2).evaluate(message_ctx);
1:bf07137: 
1:bf07137:             result = src.split(split_pat, limit.intValue());
1:bf07137:         } else {
1:bf07137:             result = src.split(split_pat);
1:bf07137:         }
1:bf07137: 
1:bf07137:         return java.util.Arrays.asList(result);
1:bf07137:     }
1:bf07137: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import org.apache.activemq.filter.FunctionCallExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
1:  * Function which splits a string into a list of strings given a regular expression for the separator.
1:  */
1: 
1: public class splitFunction implements FilterFunction {
1:     /**
1:      * Check whether the given expression is valid for this function.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return true - if two or three arguments are passed to the function; false - otherwise.
1:      */
1: 
1:     public boolean isValid(FunctionCallExpression expr) {
1:         if ((expr.getNumArguments() >= 2) && (expr.getNumArguments() <= 3))
1:             return true;
1: 
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Indicate that this function does not return a boolean value.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return false - indicating this filter function never evaluates to a boolean result.
1:      */
1: 
1:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Evaluate the given expression for this function in the given context.  A list of zero or more strings
1:      * results from the evaluation.  The result of the evaluation of the first argument is split with the regular
1:      * expression which results from the evaluation of the second argument.  If a third argument is given, it
1:      * is an integer which limits the split.  String#split() performs the split.
1:      * <p/>
1:      * The first two arguments must be Strings.  If a third is given, it must be an Integer.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return List - a list of Strings resulting from the split.
1:      */
1: 
1:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message_ctx)
1:             throws javax.jms.JMSException {
1:         String src;
1:         String split_pat;
1:         String[] result;
1: 
1:         src = (String) expr.getArgument(0).evaluate(message_ctx);
1:         split_pat = (String) expr.getArgument(1).evaluate(message_ctx);
1: 
1:         if (expr.getNumArguments() > 2) {
1:             Integer limit;
1: 
1:             limit = (Integer) expr.getArgument(2).evaluate(message_ctx);
1: 
1:             result = src.split(split_pat, limit.intValue());
1:         } else {
1:             result = src.split(split_pat);
1:         }
1: 
1:         return java.util.Arrays.asList(result);
1:     }
1: }
============================================================================