1:86dc4d5: /**
1:86dc4d5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:86dc4d5:  * contributor license agreements.  See the NOTICE file distributed with
1:86dc4d5:  * this work for additional information regarding copyright ownership.
1:86dc4d5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:86dc4d5:  * (the "License"); you may not use this file except in compliance with
1:86dc4d5:  * the License.  You may obtain a copy of the License at
1:86dc4d5:  *
1:86dc4d5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:86dc4d5:  *
1:86dc4d5:  * Unless required by applicable law or agreed to in writing, software
1:86dc4d5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:86dc4d5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86dc4d5:  * See the License for the specific language governing permissions and
1:86dc4d5:  * limitations under the License.
1:86dc4d5:  */
1:86dc4d5: package org.apache.activemq.camel;
1:86dc4d5: 
1:35384de: import java.util.concurrent.atomic.AtomicLong;
1:86dc4d5: import javax.jms.Connection;
1:86dc4d5: import javax.jms.MessageProducer;
1:86dc4d5: import javax.jms.Session;
1:86dc4d5: import javax.jms.TextMessage;
1:86dc4d5: import org.apache.activemq.ActiveMQConnectionFactory;
1:86dc4d5: import org.apache.activemq.broker.BrokerService;
1:86dc4d5: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:86dc4d5: import org.apache.activemq.broker.region.policy.PolicyMap;
1:86dc4d5: import org.apache.activemq.command.ActiveMQQueue;
1:86dc4d5: import org.apache.activemq.command.ActiveMQTextMessage;
1:c6ed5ff: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:86dc4d5: import org.apache.activemq.util.Wait;
1:86dc4d5: import org.apache.camel.Exchange;
1:86dc4d5: import org.apache.camel.Processor;
1:86dc4d5: import org.apache.camel.component.jms.JmsMessage;
1:d4da85f: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:86dc4d5: import org.junit.Test;
1:86dc4d5: import org.slf4j.Logger;
1:86dc4d5: import org.slf4j.LoggerFactory;
1:86dc4d5: import org.springframework.context.support.AbstractXmlApplicationContext;
1:86dc4d5: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:86dc4d5: 
1:86dc4d5: public class TransactedConsumeTest extends CamelSpringTestSupport {
1:86dc4d5:     private static final Logger LOG = LoggerFactory.getLogger(TransactedConsumeTest.class);
1:86dc4d5:     BrokerService broker = null;
1:35384de:     int messageCount = 100000;
1:86dc4d5: 
1:86dc4d5:     @Test
1:86dc4d5:     public void testConsume() throws Exception {
1:86dc4d5: 
1:86dc4d5:         LOG.info("Wait for dequeue message...");
1:86dc4d5: 
1:86dc4d5:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:86dc4d5:             @Override
1:86dc4d5:             public boolean isSatisified() throws Exception {
1:86dc4d5:                 return broker.getAdminView().getTotalDequeueCount() >= messageCount;
1:86dc4d5:             }
1:86dc4d5:         }, 20 * 60 * 1000));
1:35384de:         long duration = System.currentTimeMillis() - firstConsumed.get();
1:35384de:         LOG.info("Done message consumption in " + duration + "millis");
1:86dc4d5:     }
1:86dc4d5: 
1:86dc4d5:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:86dc4d5:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://test");
1:86dc4d5:         factory.setWatchTopicAdvisories(false);
1:86dc4d5:         Connection connection = factory.createConnection();
1:86dc4d5:         connection.start();
1:86dc4d5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86dc4d5:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:86dc4d5:         for (int i=0; i<messageCount;i++) {
1:86dc4d5:             TextMessage message = session.createTextMessage("Some Text, messageCount:" + i);
1:86dc4d5:             message.setJMSCorrelationID("pleaseCorrelate");
1:86dc4d5:             producer.send(message);
1:86dc4d5:         }
1:86dc4d5:         LOG.info("Sent: " + messageCount);
1:86dc4d5:         connection.close();
1:86dc4d5:     }
1:86dc4d5: 
1:86dc4d5:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:86dc4d5:         BrokerService brokerService = new BrokerService();
1:86dc4d5:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:86dc4d5:         brokerService.setBrokerName("test");
1:86dc4d5: 
1:86dc4d5:         PolicyMap policyMap = new PolicyMap();
1:86dc4d5:         PolicyEntry defaultPolicy = new PolicyEntry();
1:86dc4d5:         policyMap.setDefaultEntry(defaultPolicy);
1:86dc4d5:         brokerService.setDestinationPolicy(policyMap);
1:86dc4d5: 
1:86dc4d5:         brokerService.setAdvisorySupport(false);
1:86dc4d5:         brokerService.setDataDirectory("target/data");
1:c6ed5ff:         //AMQPersistenceAdapter amq = new AMQPersistenceAdapter();
1:c6ed5ff:         //amq.setDirectory(new File("target/data"));
1:c6ed5ff:         //brokerService.setPersistenceAdapter(amq);
1:c6ed5ff:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter)
1:c6ed5ff:                 brokerService.getPersistenceAdapter();
1:c6ed5ff:         kahaDBPersistenceAdapter.setEnableJournalDiskSyncs(false);
1:86dc4d5:         brokerService.addConnector("tcp://localhost:61616");
1:86dc4d5:         return brokerService;
1:86dc4d5:     }
1:86dc4d5: 
1:86dc4d5:     @Override
1:86dc4d5:     protected AbstractXmlApplicationContext createApplicationContext() {
1:86dc4d5: 
1:86dc4d5:         deleteDirectory("target/data");
1:86dc4d5: 
1:86dc4d5:         // make broker available to recovery processing on app context start
1:86dc4d5:         try {
1:86dc4d5:             broker = createBroker(true);
1:86dc4d5:             broker.start();
1:86dc4d5:         } catch (Exception e) {
1:86dc4d5:             throw new RuntimeException("Failed to start broker", e);
1:86dc4d5:         }
1:86dc4d5: 
1:86dc4d5:         try {
1:86dc4d5:             sendJMSMessageToKickOffRoute();
1:86dc4d5:         } catch (Exception e) {
1:86dc4d5:             throw new RuntimeException("Failed to fill q", e);
1:86dc4d5:         }
1:86dc4d5: 
1:86dc4d5:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/transactedconsume.xml");
1:86dc4d5:     }
1:86dc4d5: 
1:35384de:     static AtomicLong firstConsumed = new AtomicLong();
1:35384de:     static AtomicLong consumed = new AtomicLong();
1:35384de: 
1:86dc4d5:     static class ConnectionLog implements Processor  {
1:86dc4d5: 
1:86dc4d5:         @Override
1:86dc4d5:         public void process(Exchange exchange) throws Exception {
1:35384de:             if (consumed.getAndIncrement() == 0) {
1:35384de:                 firstConsumed.set(System.currentTimeMillis());
1:35384de:             }
1:86dc4d5:             ActiveMQTextMessage m = (ActiveMQTextMessage) ((JmsMessage)exchange.getIn()).getJmsMessage();
1:35384de:             //Thread.currentThread().sleep(500);
1:35384de:             if (consumed.get() %500 == 0) {
1:35384de:                 LOG.info("received on " + m.getConnection().toString());
1:35384de:             }
1:86dc4d5:         }
1:86dc4d5:     }
1:86dc4d5: 
1:86dc4d5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
author:Gary Tully
-------------------------------------------------------------------------------
commit:c6ed5ff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         //AMQPersistenceAdapter amq = new AMQPersistenceAdapter();
1:         //amq.setDirectory(new File("target/data"));
1:         //brokerService.setPersistenceAdapter(amq);
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter)
1:                 brokerService.getPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setEnableJournalDiskSyncs(false);
commit:35384de
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: import java.util.concurrent.atomic.AtomicLong;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:     int messageCount = 100000;
/////////////////////////////////////////////////////////////////////////
1:         long duration = System.currentTimeMillis() - firstConsumed.get();
1:         LOG.info("Done message consumption in " + duration + "millis");
/////////////////////////////////////////////////////////////////////////
0:         AMQPersistenceAdapter amq = new AMQPersistenceAdapter();
0:         amq.setDirectory(new File("target/data"));
0:         brokerService.setPersistenceAdapter(amq);
/////////////////////////////////////////////////////////////////////////
1:     static AtomicLong firstConsumed = new AtomicLong();
1:     static AtomicLong consumed = new AtomicLong();
1: 
1:             if (consumed.getAndIncrement() == 0) {
1:                 firstConsumed.set(System.currentTimeMillis());
1:             }
1:             //Thread.currentThread().sleep(500);
1:             if (consumed.get() %500 == 0) {
1:                 LOG.info("received on " + m.getConnection().toString());
1:             }
commit:86dc4d5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.util.Wait;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.Processor;
1: import org.apache.camel.component.jms.JmsMessage;
0: import org.apache.camel.test.junit4.CamelSpringTestSupport;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: public class TransactedConsumeTest extends CamelSpringTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(TransactedConsumeTest.class);
1:     BrokerService broker = null;
0:     int messageCount = 1000;
1: 
1:     @Test
1:     public void testConsume() throws Exception {
1: 
1:         LOG.info("Wait for dequeue message...");
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTotalDequeueCount() >= messageCount;
1:             }
1:         }, 20 * 60 * 1000));
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://test");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("scp_transacted"));
1:         for (int i=0; i<messageCount;i++) {
1:             TextMessage message = session.createTextMessage("Some Text, messageCount:" + i);
1:             message.setJMSCorrelationID("pleaseCorrelate");
1:             producer.send(message);
1:         }
1:         LOG.info("Sent: " + messageCount);
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName("test");
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultPolicy = new PolicyEntry();
0:        // defaultPolicy.setStrictOrderDispatch(false);
1:         policyMap.setDefaultEntry(defaultPolicy);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDataDirectory("target/data");
1:         brokerService.addConnector("tcp://localhost:61616");
1:         return brokerService;
1:     }
1: 
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1: 
1:         deleteDirectory("target/data");
1: 
1:         // make broker available to recovery processing on app context start
1:         try {
1:             broker = createBroker(true);
1:             broker.start();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1: 
1:         try {
1:             sendJMSMessageToKickOffRoute();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to fill q", e);
1:         }
1: 
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/transactedconsume.xml");
1:     }
1: 
1:     static class ConnectionLog implements Processor  {
1: 
1:         @Override
1:         public void process(Exchange exchange) throws Exception {
1:             ActiveMQTextMessage m = (ActiveMQTextMessage) ((JmsMessage)exchange.getIn()).getJmsMessage();
0:             Thread.currentThread().sleep(10);
0:             LOG.info("received on " + m.getConnection().toString());
1:         }
1:     }
1: 
1: }
============================================================================