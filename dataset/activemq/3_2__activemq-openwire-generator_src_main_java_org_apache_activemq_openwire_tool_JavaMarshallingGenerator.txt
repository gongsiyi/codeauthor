2:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
2:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
3:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.FileWriter;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.ArrayList;
1:bd0ad68: import java.util.Collections;
1:bd0ad68: import java.util.Comparator;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JAnnotation;
1:bd0ad68: import org.codehaus.jam.JAnnotationValue;
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JPackage;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class JavaMarshallingGenerator extends MultiSourceGenerator {
1:bd0ad68: 
1:540dd5c:     protected List<JClass> concreteClasses = new ArrayList<JClass>();
1:540dd5c:     protected File factoryFile;
1:540dd5c:     protected String factoryFileName = "MarshallerFactory";
1:540dd5c:     protected String indent = "    ";
1:540dd5c:     protected String targetDir = "src/main/java";
1:bd0ad68: 
1:540dd5c:     public Object run() {
1:540dd5c:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/org/apache/activemq/openwire/v" + getOpenwireVersion());
1:540dd5c:         }
1:540dd5c:         Object answer = super.run();
1:540dd5c:         processFactory();
1:540dd5c:         return answer;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:bd0ad68: 
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("package org.apache.activemq.openwire.v" + getOpenwireVersion() + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("import java.io.DataInput;");
1:540dd5c:         out.println("import java.io.DataOutput;");
1:540dd5c:         out.println("import java.io.IOException;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("import org.apache.activemq.openwire.*;");
1:540dd5c:         out.println("import org.apache.activemq.command.*;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
1:540dd5c:             JPackage pkg = getJclass().getImportedPackages()[i];
1:540dd5c:             for (int j = 0; j < pkg.getClasses().length; j++) {
1:540dd5c:                 JClass clazz = pkg.getClasses()[j];
1:540dd5c:                 out.println("import " + clazz.getQualifiedName() + ";");
1:540dd5c:             }
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Marshalling code for Open Wire Format for " + getClassName() + "");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:540dd5c:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:540dd5c:         out.println(" *        this file.");
1:540dd5c:         out.println(" *");
1:b0c2a40:         out.println(" * ");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("public " + getAbstractClassText() + "class " + getClassName() + " extends " + getBaseClass() + " {");
1:540dd5c:         out.println("");
1:bd0ad68: 
1:540dd5c:         if (!isAbstractClass()) {
1:bd0ad68: 
1:540dd5c:             out.println("    /**");
1:540dd5c:             out.println("     * Return the type of Data Structure we marshal");
1:540dd5c:             out.println("     * @return short representation of the type data structure");
1:540dd5c:             out.println("     */");
1:540dd5c:             out.println("    public byte getDataStructureType() {");
1:540dd5c:             out.println("        return " + getJclass().getSimpleName() + ".DATA_STRUCTURE_TYPE;");
1:540dd5c:             out.println("    }");
1:540dd5c:             out.println("    ");
1:540dd5c:             out.println("    /**");
1:540dd5c:             out.println("     * @return a new object instance");
1:540dd5c:             out.println("     */");
1:540dd5c:             out.println("    public DataStructure createObject() {");
1:540dd5c:             out.println("        return new " + getJclass().getSimpleName() + "();");
1:540dd5c:             out.println("    }");
1:540dd5c:             out.println("");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Un-marshal an object instance from the data input stream");
1:540dd5c:         out.println("     *");
1:540dd5c:         out.println("     * @param o the object to un-marshal");
1:540dd5c:         out.println("     * @param dataIn the data input stream to build the object from");
1:540dd5c:         out.println("     * @throws IOException");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {");
1:540dd5c:         out.println("        super.tightUnmarshal(wireFormat, o, dataIn, bs);");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.beforeUnmarshall(wireFormat);");
1:540dd5c:             out.println("        ");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateTightUnmarshalBody(out);
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.afterUnmarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Write the booleans that this object uses to a BooleanStream");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.beforeMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        int rc = super.tightMarshal1(wireFormat, o, bs);");
1:540dd5c:         int baseSize = generateTightMarshal1Body(out);
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        return rc + " + baseSize + ";");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Write a object instance to data output stream");
1:540dd5c:         out.println("     *");
1:540dd5c:         out.println("     * @param o the instance to be marshaled");
1:540dd5c:         out.println("     * @param dataOut the output stream");
1:540dd5c:         out.println("     * @throws IOException thrown if an error occurs");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {");
1:540dd5c:         out.println("        super.tightMarshal2(wireFormat, o, dataOut, bs);");
1:540dd5c:         if (!getProperties().isEmpty()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateTightMarshal2Body(out);
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.afterMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Un-marshal an object instance from the data input stream");
1:540dd5c:         out.println("     *");
1:540dd5c:         out.println("     * @param o the object to un-marshal");
1:540dd5c:         out.println("     * @param dataIn the data input stream to build the object from");
1:540dd5c:         out.println("     * @throws IOException");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {");
1:540dd5c:         out.println("        super.looseUnmarshal(wireFormat, o, dataIn);");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.beforeUnmarshall(wireFormat);");
1:540dd5c:             out.println("        ");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateLooseUnmarshalBody(out);
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.afterUnmarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Write the booleans that this object uses to a BooleanStream");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.beforeMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        super.looseMarshal(wireFormat, o, dataOut);");
1:bd0ad68: 
1:540dd5c:         generateLooseMarshalBody(out);
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     private void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void processFactory() {
1:540dd5c:         if (factoryFile == null) {
1:540dd5c:             factoryFile = new File(destDir, factoryFileName + filePostFix);
1:540dd5c:         }
1:540dd5c:         PrintWriter out = null;
1:540dd5c:         try {
1:540dd5c:             out = new PrintWriter(new FileWriter(factoryFile));
1:540dd5c:             generateFactory(out);
1:540dd5c:         } catch (Exception e) {
1:540dd5c:             throw new RuntimeException(e);
1:540dd5c:         } finally {
1:540dd5c:             if (out != null) {
1:540dd5c:                 out.close();
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFactory(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("package org.apache.activemq.openwire.v" + getOpenwireVersion() + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("import org.apache.activemq.openwire.DataStreamMarshaller;");
1:540dd5c:         out.println("import org.apache.activemq.openwire.OpenWireFormat;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * MarshallerFactory for Open Wire Format.");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:540dd5c:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:540dd5c:         out.println(" *        this file.");
1:540dd5c:         out.println(" *");
1:b0c2a40:         out.println(" * ");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("public class MarshallerFactory {");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    /**");
1:540dd5c:         out.println("     * Creates a Map of command type -> Marshallers");
1:540dd5c:         out.println("     */");
1:540dd5c:         out.println("    static final private DataStreamMarshaller marshaller[] = new DataStreamMarshaller[256];");
1:540dd5c:         out.println("    static {");
1:540dd5c:         out.println("");
1:bd0ad68: 
1:540dd5c:         List<JClass> list = new ArrayList<JClass>(getConcreteClasses());
1:c454fe3:         Collections.sort(list, new Comparator<JClass>() {
1:c454fe3:             public int compare(JClass c1, JClass c2) {
1:540dd5c:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:540dd5c:             }
1:540dd5c:         });
1:bd0ad68: 
1:540dd5c:         for (Iterator<JClass> iter = list.iterator(); iter.hasNext();) {
1:540dd5c:             JClass jclass = iter.next();
1:540dd5c:             out.println("        add(new " + jclass.getSimpleName() + "Marshaller());");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    static private void add(DataStreamMarshaller dsm) {");
1:540dd5c:         out.println("        marshaller[dsm.getDataStructureType()] = dsm;");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("    ");
1:540dd5c:         out.println("    static public DataStreamMarshaller[] createMarshallerMap(OpenWireFormat wireFormat) {");
1:540dd5c:         out.println("        return marshaller;");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void processClass(JClass jclass) {
1:540dd5c:         super.processClass(jclass);
1:bd0ad68: 
1:540dd5c:         if (!jclass.isAbstract()) {
1:540dd5c:             concreteClasses.add(jclass);
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected String getClassName(JClass jclass) {
1:540dd5c:         return super.getClassName(jclass) + "Marshaller";
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected String getBaseClassName(JClass jclass) {
1:540dd5c:         String answer = "BaseDataStreamMarshaller";
1:540dd5c:         JClass superclass = jclass.getSuperclass();
1:540dd5c:         if (superclass != null) {
1:540dd5c:             String superName = superclass.getSimpleName();
1:540dd5c:             if (!superName.equals("Object") && !superName.equals("JNDIBaseStorable") && !superName.equals("DataStructureSupport")) {
1:540dd5c:                 answer = superName + "Marshaller";
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:         return answer;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void initialiseManuallyMaintainedClasses() {
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateTightUnmarshalBody(PrintWriter out) {
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             JClass propertyType = property.getType();
1:540dd5c:             String propertyTypeName = propertyType.getSimpleName();
1:bd0ad68: 
1:540dd5c:             if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
1:540dd5c:                 generateTightUnmarshalBodyForArrayProperty(out, property, size);
1:540dd5c:             } else {
1:540dd5c:                 generateTightUnmarshalBodyForProperty(out, property, size);
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:540dd5c:         String setter = property.getSetter().getSimpleName();
1:540dd5c:         String type = property.getType().getSimpleName();
1:540dd5c: 
1:540dd5c:         if (type.equals("boolean")) {
1:540dd5c:             out.println("        info." + setter + "(bs.readBoolean());");
1:540dd5c:         } else if (type.equals("byte")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readByte());");
1:540dd5c:         } else if (type.equals("char")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readChar());");
1:540dd5c:         } else if (type.equals("short")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readShort());");
1:540dd5c:         } else if (type.equals("int")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readInt());");
1:540dd5c:         } else if (type.equals("long")) {
1:540dd5c:             out.println("        info." + setter + "(tightUnmarshalLong(wireFormat, dataIn, bs));");
1:540dd5c:         } else if (type.equals("String")) {
1:540dd5c:             out.println("        info." + setter + "(tightUnmarshalString(dataIn, bs));");
1:540dd5c:         } else if (type.equals("byte[]")) {
1:540dd5c:             if (size != null) {
1:540dd5c:                 out.println("        info." + setter + "(tightUnmarshalConstByteArray(dataIn, bs, " + size.asInt() + "));");
1:540dd5c:             } else {
1:540dd5c:                 out.println("        info." + setter + "(tightUnmarshalByteArray(dataIn, bs));");
1:540dd5c:             }
1:540dd5c:         } else if (type.equals("ByteSequence")) {
1:540dd5c:             out.println("        info." + setter + "(tightUnmarshalByteSequence(dataIn, bs));");
1:540dd5c:         } else if (isThrowable(property.getType())) {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalThrowable(wireFormat, dataIn, bs));");
1:540dd5c:         } else if (isCachedProperty(property)) {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalCachedObject(wireFormat, dataIn, bs));");
1:540dd5c:         } else {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalNestedObject(wireFormat, dataIn, bs));");
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:540dd5c:         JClass propertyType = property.getType();
1:540dd5c:         String arrayType = propertyType.getArrayComponentType().getQualifiedName();
1:540dd5c:         String setter = property.getSetter().getSimpleName();
1:540dd5c:         out.println();
1:540dd5c:         if (size != null) {
1:540dd5c:             out.println("        {");
1:540dd5c:             out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
1:540dd5c:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:540dd5c:             out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
1:540dd5c:             out.println("            }");
1:540dd5c:             out.println("            info." + setter + "(value);");
1:540dd5c:             out.println("        }");
1:540dd5c:         } else {
1:540dd5c:             out.println("        if (bs.readBoolean()) {");
1:540dd5c:             out.println("            short size = dataIn.readShort();");
1:540dd5c:             out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
1:540dd5c:             out.println("            for( int i=0; i < size; i++ ) {");
1:540dd5c:             out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
1:540dd5c:             out.println("            }");
1:540dd5c:             out.println("            info." + setter + "(value);");
1:540dd5c:             out.println("        }");
1:540dd5c:             out.println("        else {");
1:540dd5c:             out.println("            info." + setter + "(null);");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected int generateTightMarshal1Body(PrintWriter out) {
1:540dd5c:         List properties = getProperties();
1:540dd5c:         int baseSize = 0;
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             JClass propertyType = property.getType();
1:540dd5c:             String type = propertyType.getSimpleName();
1:540dd5c:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:bd0ad68: 
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("        bs.writeBoolean(" + getter + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 baseSize += 2;
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 baseSize += 2;
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 baseSize += 4;
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("        rc+=tightMarshalLong1(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:540dd5c:                 out.println("        rc += tightMarshalString1(" + getter + ", bs);");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size == null) {
1:540dd5c:                     out.println("        rc += tightMarshalByteArray1(" + getter + ", bs);");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        rc += tightMarshalConstByteArray1(" + getter + ", bs, " + size.asInt() + ");");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("ByteSequence")) {
1:540dd5c:                 out.println("        rc += tightMarshalByteSequence1(" + getter + ", bs);");
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("        rc += tightMarshalObjectArrayConstSize1(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        rc += tightMarshalObjectArray1(wireFormat, " + getter + ", bs);");
1:540dd5c:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:540dd5c:                 out.println("        rc += tightMarshalThrowable1(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else {
1:540dd5c:                 if (isCachedProperty(property)) {
1:540dd5c:                     out.println("        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:         return baseSize;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateTightMarshal2Body(PrintWriter out) {
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             JClass propertyType = property.getType();
1:540dd5c:             String type = propertyType.getSimpleName();
1:540dd5c:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:bd0ad68: 
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("        bs.readBoolean();");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("        dataOut.writeByte(" + getter + ");");
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("        dataOut.writeChar(" + getter + ");");
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("        dataOut.writeShort(" + getter + ");");
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("        dataOut.writeInt(" + getter + ");");
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("        tightMarshalLong2(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:540dd5c:                 out.println("        tightMarshalString2(" + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("        tightMarshalConstByteArray2(" + getter + ", dataOut, bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        tightMarshalByteArray2(" + getter + ", dataOut, bs);");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("ByteSequence")) {
1:540dd5c:                 out.println("        tightMarshalByteSequence2(" + getter + ", dataOut, bs);");
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("        tightMarshalObjectArrayConstSize2(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        tightMarshalObjectArray2(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:540dd5c:                 out.println("        tightMarshalThrowable2(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else {
1:540dd5c:                 if (isCachedProperty(property)) {
1:540dd5c:                     out.println("        tightMarshalCachedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        tightMarshalNestedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLooseMarshalBody(PrintWriter out) {
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             JClass propertyType = property.getType();
1:540dd5c:             String type = propertyType.getSimpleName();
1:540dd5c:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:bd0ad68: 
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("        dataOut.writeBoolean(" + getter + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("        dataOut.writeByte(" + getter + ");");
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("        dataOut.writeChar(" + getter + ");");
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("        dataOut.writeShort(" + getter + ");");
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("        dataOut.writeInt(" + getter + ");");
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("        looseMarshalLong(wireFormat, " + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("String")) {
1:540dd5c:                 out.println("        looseMarshalString(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("        looseMarshalConstByteArray(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        looseMarshalByteArray(wireFormat, " + getter + ", dataOut);");
1:540dd5c:                 }
1:540dd5c:             } else if (type.equals("ByteSequence")) {
1:540dd5c:                 out.println("        looseMarshalByteSequence(wireFormat, " + getter + ", dataOut);");
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:540dd5c:                 if (size != null) {
1:540dd5c:                     out.println("        looseMarshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        looseMarshalObjectArray(wireFormat, " + getter + ", dataOut);");
1:540dd5c:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:540dd5c:                 out.println("        looseMarshalThrowable(wireFormat, " + getter + ", dataOut);");
1:540dd5c:             } else {
1:540dd5c:                 if (isCachedProperty(property)) {
1:540dd5c:                     out.println("        looseMarshalCachedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        looseMarshalNestedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLooseUnmarshalBody(PrintWriter out) {
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             JAnnotationValue size = annotation.getValue("size");
1:540dd5c:             JClass propertyType = property.getType();
1:540dd5c:             String propertyTypeName = propertyType.getSimpleName();
1:bd0ad68: 
1:540dd5c:             if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
1:540dd5c:                 generateLooseUnmarshalBodyForArrayProperty(out, property, size);
1:540dd5c:             } else {
1:540dd5c:                 generateLooseUnmarshalBodyForProperty(out, property, size);
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:540dd5c:         String setter = property.getSetter().getSimpleName();
1:540dd5c:         String type = property.getType().getSimpleName();
1:bd0ad68: 
1:540dd5c:         if (type.equals("boolean")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readBoolean());");
1:540dd5c:         } else if (type.equals("byte")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readByte());");
1:540dd5c:         } else if (type.equals("char")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readChar());");
1:540dd5c:         } else if (type.equals("short")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readShort());");
1:540dd5c:         } else if (type.equals("int")) {
1:540dd5c:             out.println("        info." + setter + "(dataIn.readInt());");
1:540dd5c:         } else if (type.equals("long")) {
1:540dd5c:             out.println("        info." + setter + "(looseUnmarshalLong(wireFormat, dataIn));");
1:540dd5c:         } else if (type.equals("String")) {
1:540dd5c:             out.println("        info." + setter + "(looseUnmarshalString(dataIn));");
1:540dd5c:         } else if (type.equals("byte[]")) {
1:540dd5c:             if (size != null) {
1:540dd5c:                 out.println("        info." + setter + "(looseUnmarshalConstByteArray(dataIn, " + size.asInt() + "));");
1:540dd5c:             } else {
1:540dd5c:                 out.println("        info." + setter + "(looseUnmarshalByteArray(dataIn));");
1:540dd5c:             }
1:540dd5c:         } else if (type.equals("ByteSequence")) {
1:540dd5c:             out.println("        info." + setter + "(looseUnmarshalByteSequence(dataIn));");
1:540dd5c:         } else if (isThrowable(property.getType())) {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalThrowable(wireFormat, dataIn));");
1:540dd5c:         } else if (isCachedProperty(property)) {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalCachedObject(wireFormat, dataIn));");
1:540dd5c:         } else {
1:540dd5c:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalNestedObject(wireFormat, dataIn));");
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:540dd5c:         JClass propertyType = property.getType();
1:540dd5c:         String arrayType = propertyType.getArrayComponentType().getQualifiedName();
1:540dd5c:         String setter = property.getSetter().getSimpleName();
1:540dd5c:         out.println();
1:540dd5c:         if (size != null) {
1:540dd5c:             out.println("        {");
1:540dd5c:             out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
1:540dd5c:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:540dd5c:             out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
1:540dd5c:             out.println("            }");
1:540dd5c:             out.println("            info." + setter + "(value);");
1:540dd5c:             out.println("        }");
1:540dd5c:         } else {
1:540dd5c:             out.println("        if (dataIn.readBoolean()) {");
1:540dd5c:             out.println("            short size = dataIn.readShort();");
1:540dd5c:             out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
1:540dd5c:             out.println("            for( int i=0; i < size; i++ ) {");
1:540dd5c:             out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
1:540dd5c:             out.println("            }");
1:540dd5c:             out.println("            info." + setter + "(value);");
1:540dd5c:             out.println("        }");
1:540dd5c:             out.println("        else {");
1:540dd5c:             out.println("            info." + setter + "(null);");
1:540dd5c:             out.println("        }");
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     /**
1:540dd5c:      * Returns whether or not the given annotation has a mandatory flag on it or
1:540dd5c:      * not
1:540dd5c:      */
1:540dd5c:     protected String getMandatoryFlag(JAnnotation annotation) {
1:540dd5c:         JAnnotationValue value = annotation.getValue("mandatory");
1:540dd5c:         if (value != null) {
1:540dd5c:             String text = value.asString();
1:540dd5c:             if (text != null && text.equalsIgnoreCase("true")) {
1:540dd5c:                 return "true";
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c:         return "false";
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public List<JClass> getConcreteClasses() {
1:540dd5c:         return concreteClasses;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setConcreteClasses(List<JClass> concreteClasses) {
1:540dd5c:         this.concreteClasses = concreteClasses;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public File getFactoryFile() {
1:540dd5c:         return factoryFile;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setFactoryFile(File factoryFile) {
1:540dd5c:         this.factoryFile = factoryFile;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public String getFactoryFileName() {
1:540dd5c:         return factoryFileName;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setFactoryFileName(String factoryFileName) {
1:540dd5c:         this.factoryFileName = factoryFileName;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public String getIndent() {
1:540dd5c:         return indent;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setIndent(String indent) {
1:540dd5c:         this.indent = indent;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setTargetDir(String sourceDir) {
1:540dd5c:         this.targetDir = sourceDir;
1:540dd5c:     }
80:bd0ad68: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c454fe3
/////////////////////////////////////////////////////////////////////////
1:         Collections.sort(list, new Comparator<JClass>() {
1:             public int compare(JClass c1, JClass c2) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:         out.println(" * ");
/////////////////////////////////////////////////////////////////////////
1:         out.println(" * ");
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     protected List<JClass> concreteClasses = new ArrayList<JClass>();
1:     protected File factoryFile;
1:     protected String factoryFileName = "MarshallerFactory";
1:     protected String indent = "    ";
1:     protected String targetDir = "src/main/java";
1:     public Object run() {
1:         if (destDir == null) {
1:             destDir = new File(targetDir + "/org/apache/activemq/openwire/v" + getOpenwireVersion());
1:         }
1:         Object answer = super.run();
1:         processFactory();
1:         return answer;
1:     }
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("");
1:         out.println("package org.apache.activemq.openwire.v" + getOpenwireVersion() + ";");
1:         out.println("");
1:         out.println("import java.io.DataInput;");
1:         out.println("import java.io.DataOutput;");
1:         out.println("import java.io.IOException;");
1:         out.println("");
1:         out.println("import org.apache.activemq.openwire.*;");
1:         out.println("import org.apache.activemq.command.*;");
1:         out.println("");
1:         out.println("");
1:         for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
1:             JPackage pkg = getJclass().getImportedPackages()[i];
1:             for (int j = 0; j < pkg.getClasses().length; j++) {
1:                 JClass clazz = pkg.getClasses()[j];
1:                 out.println("import " + clazz.getQualifiedName() + ";");
1:             }
1:         }
1:         out.println("");
1:         out.println("/**");
1:         out.println(" * Marshalling code for Open Wire Format for " + getClassName() + "");
1:         out.println(" *");
1:         out.println(" *");
1:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:         out.println(" *        this file.");
1:         out.println(" *");
0:         out.println(" * @version $Revision$");
1:         out.println(" */");
1:         out.println("public " + getAbstractClassText() + "class " + getClassName() + " extends " + getBaseClass() + " {");
1:         out.println("");
1:         if (!isAbstractClass()) {
1:             out.println("    /**");
1:             out.println("     * Return the type of Data Structure we marshal");
1:             out.println("     * @return short representation of the type data structure");
1:             out.println("     */");
1:             out.println("    public byte getDataStructureType() {");
1:             out.println("        return " + getJclass().getSimpleName() + ".DATA_STRUCTURE_TYPE;");
1:             out.println("    }");
1:             out.println("    ");
1:             out.println("    /**");
1:             out.println("     * @return a new object instance");
1:             out.println("     */");
1:             out.println("    public DataStructure createObject() {");
1:             out.println("        return new " + getJclass().getSimpleName() + "();");
1:             out.println("    }");
1:             out.println("");
1:         }
1:         out.println("    /**");
1:         out.println("     * Un-marshal an object instance from the data input stream");
1:         out.println("     *");
1:         out.println("     * @param o the object to un-marshal");
1:         out.println("     * @param dataIn the data input stream to build the object from");
1:         out.println("     * @throws IOException");
1:         out.println("     */");
1:         out.println("    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {");
1:         out.println("        super.tightUnmarshal(wireFormat, o, dataIn, bs);");
1:         if (!getProperties().isEmpty()) {
1:             out.println("");
1:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.beforeUnmarshall(wireFormat);");
1:             out.println("        ");
1:         }
1:         generateTightUnmarshalBody(out);
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.afterUnmarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("");
1:         out.println("    /**");
1:         out.println("     * Write the booleans that this object uses to a BooleanStream");
1:         out.println("     */");
1:         out.println("    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {");
1:         if (!getProperties().isEmpty()) {
1:             out.println("");
1:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.beforeMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("        int rc = super.tightMarshal1(wireFormat, o, bs);");
1:         int baseSize = generateTightMarshal1Body(out);
1:         out.println("");
1:         out.println("        return rc + " + baseSize + ";");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    /**");
1:         out.println("     * Write a object instance to data output stream");
1:         out.println("     *");
1:         out.println("     * @param o the instance to be marshaled");
1:         out.println("     * @param dataOut the output stream");
1:         out.println("     * @throws IOException thrown if an error occurs");
1:         out.println("     */");
1:         out.println("    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {");
1:         out.println("        super.tightMarshal2(wireFormat, o, dataOut, bs);");
1:         if (!getProperties().isEmpty()) {
1:             out.println("");
1:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:         }
1:         generateTightMarshal2Body(out);
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.afterMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    /**");
1:         out.println("     * Un-marshal an object instance from the data input stream");
1:         out.println("     *");
1:         out.println("     * @param o the object to un-marshal");
1:         out.println("     * @param dataIn the data input stream to build the object from");
1:         out.println("     * @throws IOException");
1:         out.println("     */");
1:         out.println("    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {");
1:         out.println("        super.looseUnmarshal(wireFormat, o, dataIn);");
1:         if (!getProperties().isEmpty()) {
1:             out.println("");
1:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.beforeUnmarshall(wireFormat);");
1:             out.println("        ");
1:         }
1:         generateLooseUnmarshalBody(out);
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.afterUnmarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("");
1:         out.println("    /**");
1:         out.println("     * Write the booleans that this object uses to a BooleanStream");
1:         out.println("     */");
1:         out.println("    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {");
1:         if (!getProperties().isEmpty()) {
1:             out.println("");
1:             out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.beforeMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("        super.looseMarshal(wireFormat, o, dataOut);");
1:         generateLooseMarshalBody(out);
1:         out.println("");
1:         out.println("    }");
1:         out.println("}");
1:     }
1:     private void generateLicence(PrintWriter out) {
1:         out.println("/**");
1:         out.println(" *");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     }
1:     protected void processFactory() {
1:         if (factoryFile == null) {
1:             factoryFile = new File(destDir, factoryFileName + filePostFix);
1:         }
1:         PrintWriter out = null;
1:         try {
1:             out = new PrintWriter(new FileWriter(factoryFile));
1:             generateFactory(out);
1:         } catch (Exception e) {
1:             throw new RuntimeException(e);
1:         } finally {
1:             if (out != null) {
1:                 out.close();
1:             }
1:         }
1:     }
1:     protected void generateFactory(PrintWriter out) {
1:         generateLicence(out);
1:         out.println("");
1:         out.println("package org.apache.activemq.openwire.v" + getOpenwireVersion() + ";");
1:         out.println("");
1:         out.println("import org.apache.activemq.openwire.DataStreamMarshaller;");
1:         out.println("import org.apache.activemq.openwire.OpenWireFormat;");
1:         out.println("");
1:         out.println("/**");
1:         out.println(" * MarshallerFactory for Open Wire Format.");
1:         out.println(" *");
1:         out.println(" *");
1:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:         out.println(" *        this file.");
1:         out.println(" *");
0:         out.println(" * @version $Revision$");
1:         out.println(" */");
1:         out.println("public class MarshallerFactory {");
1:         out.println("");
1:         out.println("    /**");
1:         out.println("     * Creates a Map of command type -> Marshallers");
1:         out.println("     */");
1:         out.println("    static final private DataStreamMarshaller marshaller[] = new DataStreamMarshaller[256];");
1:         out.println("    static {");
1:         out.println("");
1:         List<JClass> list = new ArrayList<JClass>(getConcreteClasses());
0:         Collections.sort(list, new Comparator() {
0:             public int compare(Object o1, Object o2) {
0:                 JClass c1 = (JClass)o1;
0:                 JClass c2 = (JClass)o2;
1:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:             }
1:         });
1:         for (Iterator<JClass> iter = list.iterator(); iter.hasNext();) {
1:             JClass jclass = iter.next();
1:             out.println("        add(new " + jclass.getSimpleName() + "Marshaller());");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    static private void add(DataStreamMarshaller dsm) {");
1:         out.println("        marshaller[dsm.getDataStructureType()] = dsm;");
1:         out.println("    }");
1:         out.println("    ");
1:         out.println("    static public DataStreamMarshaller[] createMarshallerMap(OpenWireFormat wireFormat) {");
1:         out.println("        return marshaller;");
1:         out.println("    }");
1:         out.println("}");
1:     }
1:     protected void processClass(JClass jclass) {
1:         super.processClass(jclass);
1:         if (!jclass.isAbstract()) {
1:             concreteClasses.add(jclass);
1:         }
1:     }
1:     protected String getClassName(JClass jclass) {
1:         return super.getClassName(jclass) + "Marshaller";
1:     }
1:     protected String getBaseClassName(JClass jclass) {
1:         String answer = "BaseDataStreamMarshaller";
1:         JClass superclass = jclass.getSuperclass();
1:         if (superclass != null) {
1:             String superName = superclass.getSimpleName();
1:             if (!superName.equals("Object") && !superName.equals("JNDIBaseStorable") && !superName.equals("DataStructureSupport")) {
1:                 answer = superName + "Marshaller";
1:             }
1:         }
1:         return answer;
1:     }
1:     protected void initialiseManuallyMaintainedClasses() {
1:     }
1:     protected void generateTightUnmarshalBody(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String propertyTypeName = propertyType.getSimpleName();
1:             if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
1:                 generateTightUnmarshalBodyForArrayProperty(out, property, size);
1:             } else {
1:                 generateTightUnmarshalBodyForProperty(out, property, size);
1:             }
1:         }
1:     }
1: 
1:     protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         String setter = property.getSetter().getSimpleName();
1:         String type = property.getType().getSimpleName();
1: 
1:         if (type.equals("boolean")) {
1:             out.println("        info." + setter + "(bs.readBoolean());");
1:         } else if (type.equals("byte")) {
1:             out.println("        info." + setter + "(dataIn.readByte());");
1:         } else if (type.equals("char")) {
1:             out.println("        info." + setter + "(dataIn.readChar());");
1:         } else if (type.equals("short")) {
1:             out.println("        info." + setter + "(dataIn.readShort());");
1:         } else if (type.equals("int")) {
1:             out.println("        info." + setter + "(dataIn.readInt());");
1:         } else if (type.equals("long")) {
1:             out.println("        info." + setter + "(tightUnmarshalLong(wireFormat, dataIn, bs));");
1:         } else if (type.equals("String")) {
1:             out.println("        info." + setter + "(tightUnmarshalString(dataIn, bs));");
1:         } else if (type.equals("byte[]")) {
1:             if (size != null) {
1:                 out.println("        info." + setter + "(tightUnmarshalConstByteArray(dataIn, bs, " + size.asInt() + "));");
1:             } else {
1:                 out.println("        info." + setter + "(tightUnmarshalByteArray(dataIn, bs));");
1:             }
1:         } else if (type.equals("ByteSequence")) {
1:             out.println("        info." + setter + "(tightUnmarshalByteSequence(dataIn, bs));");
1:         } else if (isThrowable(property.getType())) {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalThrowable(wireFormat, dataIn, bs));");
1:         } else if (isCachedProperty(property)) {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalCachedObject(wireFormat, dataIn, bs));");
1:         } else {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalNestedObject(wireFormat, dataIn, bs));");
1:         }
1:     }
1:     protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         JClass propertyType = property.getType();
1:         String arrayType = propertyType.getArrayComponentType().getQualifiedName();
1:         String setter = property.getSetter().getSimpleName();
1:         out.println();
1:         if (size != null) {
1:             out.println("        {");
1:             out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
1:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("            }");
1:             out.println("            info." + setter + "(value);");
1:             out.println("        }");
1:         } else {
1:             out.println("        if (bs.readBoolean()) {");
1:             out.println("            short size = dataIn.readShort();");
1:             out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
1:             out.println("            for( int i=0; i < size; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("            }");
1:             out.println("            info." + setter + "(value);");
1:             out.println("        }");
1:             out.println("        else {");
1:             out.println("            info." + setter + "(null);");
1:             out.println("        }");
1:         }
1:     }
1:     protected int generateTightMarshal1Body(PrintWriter out) {
1:         List properties = getProperties();
1:         int baseSize = 0;
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:             if (type.equals("boolean")) {
1:                 out.println("        bs.writeBoolean(" + getter + ");");
1:             } else if (type.equals("byte")) {
1:                 baseSize += 1;
1:             } else if (type.equals("char")) {
1:                 baseSize += 2;
1:             } else if (type.equals("short")) {
1:                 baseSize += 2;
1:             } else if (type.equals("int")) {
1:                 baseSize += 4;
1:             } else if (type.equals("long")) {
1:                 out.println("        rc+=tightMarshalLong1(wireFormat, " + getter + ", bs);");
1:             } else if (type.equals("String")) {
1:                 out.println("        rc += tightMarshalString1(" + getter + ", bs);");
1:             } else if (type.equals("byte[]")) {
1:                 if (size == null) {
1:                     out.println("        rc += tightMarshalByteArray1(" + getter + ", bs);");
1:                 } else {
1:                     out.println("        rc += tightMarshalConstByteArray1(" + getter + ", bs, " + size.asInt() + ");");
1:                 }
1:             } else if (type.equals("ByteSequence")) {
1:                 out.println("        rc += tightMarshalByteSequence1(" + getter + ", bs);");
1:             } else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        rc += tightMarshalObjectArrayConstSize1(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:                 } else {
1:                     out.println("        rc += tightMarshalObjectArray1(wireFormat, " + getter + ", bs);");
1:                 }
1:             } else if (isThrowable(propertyType)) {
1:                 out.println("        rc += tightMarshalThrowable1(wireFormat, " + getter + ", bs);");
1:             } else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:                 } else {
1:                     out.println("        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:                 }
1:             }
1:         }
1:         return baseSize;
1:     }
1:     protected void generateTightMarshal2Body(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:             if (type.equals("boolean")) {
1:                 out.println("        bs.readBoolean();");
1:             } else if (type.equals("byte")) {
1:                 out.println("        dataOut.writeByte(" + getter + ");");
1:             } else if (type.equals("char")) {
1:                 out.println("        dataOut.writeChar(" + getter + ");");
1:             } else if (type.equals("short")) {
1:                 out.println("        dataOut.writeShort(" + getter + ");");
1:             } else if (type.equals("int")) {
1:                 out.println("        dataOut.writeInt(" + getter + ");");
1:             } else if (type.equals("long")) {
1:                 out.println("        tightMarshalLong2(wireFormat, " + getter + ", dataOut, bs);");
1:             } else if (type.equals("String")) {
1:                 out.println("        tightMarshalString2(" + getter + ", dataOut, bs);");
1:             } else if (type.equals("byte[]")) {
1:                 if (size != null) {
1:                     out.println("        tightMarshalConstByteArray2(" + getter + ", dataOut, bs, " + size.asInt() + ");");
1:                 } else {
1:                     out.println("        tightMarshalByteArray2(" + getter + ", dataOut, bs);");
1:                 }
1:             } else if (type.equals("ByteSequence")) {
1:                 out.println("        tightMarshalByteSequence2(" + getter + ", dataOut, bs);");
1:             } else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        tightMarshalObjectArrayConstSize2(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:                 } else {
1:                     out.println("        tightMarshalObjectArray2(wireFormat, " + getter + ", dataOut, bs);");
1:                 }
1:             } else if (isThrowable(propertyType)) {
1:                 out.println("        tightMarshalThrowable2(wireFormat, " + getter + ", dataOut, bs);");
1:             } else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        tightMarshalCachedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:                 } else {
1:                     out.println("        tightMarshalNestedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:                 }
1:             }
1:         }
1:     }
1:     protected void generateLooseMarshalBody(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getGetter().getSimpleName() + "()";
1:             if (type.equals("boolean")) {
1:                 out.println("        dataOut.writeBoolean(" + getter + ");");
1:             } else if (type.equals("byte")) {
1:                 out.println("        dataOut.writeByte(" + getter + ");");
1:             } else if (type.equals("char")) {
1:                 out.println("        dataOut.writeChar(" + getter + ");");
1:             } else if (type.equals("short")) {
1:                 out.println("        dataOut.writeShort(" + getter + ");");
1:             } else if (type.equals("int")) {
1:                 out.println("        dataOut.writeInt(" + getter + ");");
1:             } else if (type.equals("long")) {
1:                 out.println("        looseMarshalLong(wireFormat, " + getter + ", dataOut);");
1:             } else if (type.equals("String")) {
1:                 out.println("        looseMarshalString(" + getter + ", dataOut);");
1:             } else if (type.equals("byte[]")) {
1:                 if (size != null) {
1:                     out.println("        looseMarshalConstByteArray(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:                 } else {
1:                     out.println("        looseMarshalByteArray(wireFormat, " + getter + ", dataOut);");
1:                 }
1:             } else if (type.equals("ByteSequence")) {
1:                 out.println("        looseMarshalByteSequence(wireFormat, " + getter + ", dataOut);");
1:             } else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        looseMarshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:                 } else {
1:                     out.println("        looseMarshalObjectArray(wireFormat, " + getter + ", dataOut);");
1:                 }
1:             } else if (isThrowable(propertyType)) {
1:                 out.println("        looseMarshalThrowable(wireFormat, " + getter + ", dataOut);");
1:             } else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        looseMarshalCachedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:                 } else {
1:                     out.println("        looseMarshalNestedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:                 }
1:             }
1:         }
1:     }
1:     protected void generateLooseUnmarshalBody(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String propertyTypeName = propertyType.getSimpleName();
1:             if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
1:                 generateLooseUnmarshalBodyForArrayProperty(out, property, size);
1:             } else {
1:                 generateLooseUnmarshalBodyForProperty(out, property, size);
1:             }
1:         }
1:     }
1:     protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         String setter = property.getSetter().getSimpleName();
1:         String type = property.getType().getSimpleName();
1:         if (type.equals("boolean")) {
1:             out.println("        info." + setter + "(dataIn.readBoolean());");
1:         } else if (type.equals("byte")) {
1:             out.println("        info." + setter + "(dataIn.readByte());");
1:         } else if (type.equals("char")) {
1:             out.println("        info." + setter + "(dataIn.readChar());");
1:         } else if (type.equals("short")) {
1:             out.println("        info." + setter + "(dataIn.readShort());");
1:         } else if (type.equals("int")) {
1:             out.println("        info." + setter + "(dataIn.readInt());");
1:         } else if (type.equals("long")) {
1:             out.println("        info." + setter + "(looseUnmarshalLong(wireFormat, dataIn));");
1:         } else if (type.equals("String")) {
1:             out.println("        info." + setter + "(looseUnmarshalString(dataIn));");
1:         } else if (type.equals("byte[]")) {
1:             if (size != null) {
1:                 out.println("        info." + setter + "(looseUnmarshalConstByteArray(dataIn, " + size.asInt() + "));");
1:             } else {
1:                 out.println("        info." + setter + "(looseUnmarshalByteArray(dataIn));");
1:             }
1:         } else if (type.equals("ByteSequence")) {
1:             out.println("        info." + setter + "(looseUnmarshalByteSequence(dataIn));");
1:         } else if (isThrowable(property.getType())) {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalThrowable(wireFormat, dataIn));");
1:         } else if (isCachedProperty(property)) {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalCachedObject(wireFormat, dataIn));");
1:         } else {
1:             out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalNestedObject(wireFormat, dataIn));");
1:         }
1:     }
1:     protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         JClass propertyType = property.getType();
1:         String arrayType = propertyType.getArrayComponentType().getQualifiedName();
1:         String setter = property.getSetter().getSimpleName();
1:         out.println();
1:         if (size != null) {
1:             out.println("        {");
1:             out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
1:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
1:             out.println("            }");
1:             out.println("            info." + setter + "(value);");
1:             out.println("        }");
1:         } else {
1:             out.println("        if (dataIn.readBoolean()) {");
1:             out.println("            short size = dataIn.readShort();");
1:             out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
1:             out.println("            for( int i=0; i < size; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
1:             out.println("            }");
1:             out.println("            info." + setter + "(value);");
1:             out.println("        }");
1:             out.println("        else {");
1:             out.println("            info." + setter + "(null);");
1:             out.println("        }");
1:         }
1:     }
1:     /**
1:      * Returns whether or not the given annotation has a mandatory flag on it or
1:      * not
1:      */
1:     protected String getMandatoryFlag(JAnnotation annotation) {
1:         JAnnotationValue value = annotation.getValue("mandatory");
1:         if (value != null) {
1:             String text = value.asString();
1:             if (text != null && text.equalsIgnoreCase("true")) {
1:                 return "true";
1:             }
1:         }
1:         return "false";
1:     }
1:     public List<JClass> getConcreteClasses() {
1:         return concreteClasses;
1:     }
1:     public void setConcreteClasses(List<JClass> concreteClasses) {
1:         this.concreteClasses = concreteClasses;
1:     }
1:     public File getFactoryFile() {
1:         return factoryFile;
1:     }
1:     public void setFactoryFile(File factoryFile) {
1:         this.factoryFile = factoryFile;
1:     }
1:     public String getFactoryFileName() {
1:         return factoryFileName;
1:     }
1:     public void setFactoryFileName(String factoryFileName) {
1:         this.factoryFileName = factoryFileName;
1:     }
1:     public String getIndent() {
1:         return indent;
1:     }
1:     public void setIndent(String indent) {
1:         this.indent = indent;
1:     }
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1:     public void setTargetDir(String sourceDir) {
1:         this.targetDir = sourceDir;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.FileWriter;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JPackage;
1: import org.codehaus.jam.JProperty;
1: 
1: /**
1:  * 
0:  * @version $Revision: 384826 $
1:  */
1: public class JavaMarshallingGenerator extends MultiSourceGenerator {
1: 
0: 	protected List concreteClasses = new ArrayList();
0: 	protected File factoryFile;
0: 	protected String factoryFileName = "MarshallerFactory";
0: 	protected String indent = "    ";
0: 	protected String targetDir="src/main/java";
1: 	
0: 	public Object run() {
0: 		if (destDir == null) {
0: 			destDir = new File(targetDir+"/org/apache/activemq/openwire/v" + getOpenwireVersion());
1: 		}
0: 		Object answer = super.run();
0: 		processFactory();
0: 		return answer;
1: 	}
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
1: 
0: 		generateLicence(out);
0: out.println("");
0: out.println("package org.apache.activemq.openwire.v" + getOpenwireVersion() + ";");
0: out.println("");
0: out.println("import java.io.DataInputStream;");
0: out.println("import java.io.DataOutputStream;");
0: out.println("import java.io.IOException;");
0: out.println("");
0: out.println("import org.apache.activemq.openwire.*;");
0: out.println("import org.apache.activemq.command.*;");
0: out.println("");
0: out.println("");
0: 		for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
0: 			JPackage pkg = getJclass().getImportedPackages()[i];
0: 			for (int j = 0; j < pkg.getClasses().length; j++) {
0: 				JClass clazz = pkg.getClasses()[j];
0: out.println("import " + clazz.getQualifiedName() + ";");
1: 			}
1: 		}
1: 
0: out.println("");
0: out.println("/**");
0: out.println(" * Marshalling code for Open Wire Format for "+getClassName()+"");
0: out.println(" *");
0: out.println(" *");
0: out.println(" * NOTE!: This file is auto generated - do not modify!");
0: out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
0: out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
0: out.println(" *        this file.");
0: out.println(" *");
0: out.println(" * @version $Revision$");
0: out.println(" */");
0: out.println("public " + getAbstractClassText() + "class " + getClassName() + " extends " + getBaseClass() + " {");
0: out.println("");
1: 
0: 		if (!isAbstractClass()) {
1: 
0: out.println("    /**");
0: out.println("     * Return the type of Data Structure we marshal");
0: out.println("     * @return short representation of the type data structure");
0: out.println("     */");
0: out.println("    public byte getDataStructureType() {");
0: out.println("        return "+getJclass().getSimpleName()+".DATA_STRUCTURE_TYPE;");
0: out.println("    }");
0: out.println("    ");
0: out.println("    /**");
0: out.println("     * @return a new object instance");
0: out.println("     */");
0: out.println("    public DataStructure createObject() {");
0: out.println("        return new "+getJclass().getSimpleName()+"();");
0: out.println("    }");
0: out.println("");
1: 		}
1: 
0: out.println("    /**");
0: out.println("     * Un-marshal an object instance from the data input stream");
0: out.println("     *");
0: out.println("     * @param o the object to un-marshal");
0: out.println("     * @param dataIn the data input stream to build the object from");
0: out.println("     * @throws IOException");
0: out.println("     */");
0: out.println("    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {");
0: out.println("        super.tightUnmarshal(wireFormat, o, dataIn, bs);");
1: 
0: 		if (!getProperties().isEmpty()) {
0: out.println("");
0: out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1: 		}
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.beforeUnmarshall(wireFormat);");
0: out.println("        ");
1: 		}
1: 
0: 		generateTightUnmarshalBody(out);
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.afterUnmarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("");
0: out.println("    /**");
0: out.println("     * Write the booleans that this object uses to a BooleanStream");
0: out.println("     */");
0: out.println("    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {");
1: 
0: 		if (!getProperties().isEmpty()) {
0: out.println("");
0: out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1: 		}
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.beforeMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("        int rc = super.tightMarshal1(wireFormat, o, bs);");
0: 		int baseSize = generateTightMarshal1Body(out);
1: 
0: out.println("");
0: out.println("        return rc + " + baseSize + ";");
0: out.println("    }");
0: out.println("");
0: out.println("    /**");
0: out.println("     * Write a object instance to data output stream");
0: out.println("     *");
0: out.println("     * @param o the instance to be marshaled");
0: out.println("     * @param dataOut the output stream");
0: out.println("     * @throws IOException thrown if an error occurs");
0: out.println("     */");
0: out.println("    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {");
0: out.println("        super.tightMarshal2(wireFormat, o, dataOut, bs);");
0: 		if (!getProperties().isEmpty()) {
0: out.println("");
0: out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1: 		}
1: 
0: 		generateTightMarshal2Body(out);
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.afterMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("    /**");
0: out.println("     * Un-marshal an object instance from the data input stream");
0: out.println("     *");
0: out.println("     * @param o the object to un-marshal");
0: out.println("     * @param dataIn the data input stream to build the object from");
0: out.println("     * @throws IOException");
0: out.println("     */");
0: out.println("    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {");
0: out.println("        super.looseUnmarshal(wireFormat, o, dataIn);");
1: 
0: 		if (!getProperties().isEmpty()) {
0: out.println("");
0: out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1: 		}
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.beforeUnmarshall(wireFormat);");
0: out.println("        ");
1: 		}
1: 
0: 		generateLooseUnmarshalBody(out);
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.afterUnmarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("");
0: out.println("    /**");
0: out.println("     * Write the booleans that this object uses to a BooleanStream");
0: out.println("     */");
0: out.println("    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {");
1: 
0: 		if (!getProperties().isEmpty()) {
0: out.println("");
0: out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ")o;");
1: 		}
1: 
0: 		if (isMarshallerAware()) {
0: out.println("");
0: out.println("        info.beforeMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("        super.looseMarshal(wireFormat, o, dataOut);");
1: 
0: 		generateLooseMarshalBody(out);
1: 
0: out.println("");
0: out.println("    }");
0: out.println("}");
1: 	}
1: 
0: 	private void generateLicence(PrintWriter out) {
0: out.println("/**");
0: out.println(" *");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 
0: 	protected void processFactory() {
0: 		if (factoryFile == null) {
0: 			factoryFile = new File(destDir, factoryFileName + filePostFix);
1: 		}
0: 		PrintWriter out = null;
0: 		try {
0: 			out = new PrintWriter(new FileWriter(factoryFile));
0: 			generateFactory(out);
0: 		} catch (Exception e) {
0: 			throw new RuntimeException(e);
0: 		} finally {
0: 			if (out != null) {
0: 				out.close();
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void generateFactory(PrintWriter out) {
0: 		generateLicence(out);
0: out.println("");
0: out.println("package org.apache.activemq.openwire.v"+getOpenwireVersion()+";");
0: out.println("");
0: out.println("import org.apache.activemq.openwire.DataStreamMarshaller;");
0: out.println("import org.apache.activemq.openwire.OpenWireFormat;");
0: out.println("");
0: out.println("/**");
0: out.println(" * MarshallerFactory for Open Wire Format.");
0: out.println(" *");
0: out.println(" *");
0: out.println(" * NOTE!: This file is auto generated - do not modify!");
0: out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
0: out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
0: out.println(" *        this file.");
0: out.println(" *");
0: out.println(" * @version $Revision$");
0: out.println(" */");
0: out.println("public class MarshallerFactory {");
0: out.println("");
0: out.println("    /**");
0: out.println("     * Creates a Map of command type -> Marshallers");
0: out.println("     */");
0: out.println("    static final private DataStreamMarshaller marshaller[] = new DataStreamMarshaller[256];");
0: out.println("    static {");
0: out.println("");
1: 
0: 		List list = new ArrayList(getConcreteClasses());
0: 		Collections.sort(list, new Comparator(){
0: 			public int compare(Object o1, Object o2) {
0: 				JClass c1 = (JClass) o1;
0: 				JClass c2 = (JClass) o2;
0: 				return c1.getSimpleName().compareTo(c2.getSimpleName());
0: 			}});
1: 		
0: 		for (Iterator iter = list.iterator(); iter.hasNext();) {
0: 			JClass jclass = (JClass) iter.next();
0: out.println("        add(new " + jclass.getSimpleName() + "Marshaller());");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("    static private void add(DataStreamMarshaller dsm) {");
0: out.println("        marshaller[dsm.getDataStructureType()] = dsm;");
0: out.println("    }");
0: out.println("    ");
0: out.println("    static public DataStreamMarshaller[] createMarshallerMap(OpenWireFormat wireFormat) {");
0: out.println("        return marshaller;");
0: out.println("    }");
0: out.println("}");
1: 	}
1: 
0: 	protected void processClass(JClass jclass) {
0: 		super.processClass(jclass);
1: 
0: 		if (!jclass.isAbstract()) {
0: 			concreteClasses.add(jclass);
1: 		}
1: 	}
1: 
0: 	protected String getClassName(JClass jclass) {
0: 		return super.getClassName(jclass) + "Marshaller";
1: 	}
1: 
0: 	protected String getBaseClassName(JClass jclass) {
0: 		String answer = "BaseDataStreamMarshaller";
0: 		JClass superclass = jclass.getSuperclass();
0: 		if (superclass != null) {
0: 			String superName = superclass.getSimpleName();
0: 			if (!superName.equals("Object") && !superName.equals("JNDIBaseStorable") && !superName.equals("DataStructureSupport")) {
0: 				answer = superName + "Marshaller";
1: 			}
1: 		}
0: 		return answer;
1: 	}
1: 
0: 	protected void initialiseManuallyMaintainedClasses() {
1: 	}
1: 
0: 	protected void generateTightUnmarshalBody(PrintWriter out) {
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
0: 			JClass propertyType = property.getType();
0: 			String propertyTypeName = propertyType.getSimpleName();
1: 
0: 			if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
0: 				generateTightUnmarshalBodyForArrayProperty(out, property, size);
0: 			} else {
0: 				generateTightUnmarshalBodyForProperty(out, property, size);
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
0: 		String setter = property.getSetter().getSimpleName();
0: 		String type = property.getType().getSimpleName();
1: 
0: 		if (type.equals("boolean")) {
0: 			out.println("        info." + setter + "(bs.readBoolean());");
0: 		} else if (type.equals("byte")) {
0: 			out.println("        info." + setter + "(dataIn.readByte());");
0: 		} else if (type.equals("char")) {
0: 			out.println("        info." + setter + "(dataIn.readChar());");
0: 		} else if (type.equals("short")) {
0: 			out.println("        info." + setter + "(dataIn.readShort());");
0: 		} else if (type.equals("int")) {
0: 			out.println("        info." + setter + "(dataIn.readInt());");
0: 		} else if (type.equals("long")) {
0: 			out.println("        info." + setter + "(tightUnmarshalLong(wireFormat, dataIn, bs));");
0: 		} else if (type.equals("String")) {
0: 			out.println("        info." + setter + "(tightUnmarshalString(dataIn, bs));");
0: 		} else if (type.equals("byte[]")) {
0: 			if (size != null) {
0: 				out.println("        info." + setter + "(tightUnmarshalConstByteArray(dataIn, bs, " + size.asInt() + "));");
0: 			} else {
0: 				out.println("        info." + setter + "(tightUnmarshalByteArray(dataIn, bs));");
1: 			}
0: 		} else if (type.equals("ByteSequence")) {
0: 			out.println("        info." + setter + "(tightUnmarshalByteSequence(dataIn, bs));");
0: 		} else if (isThrowable(property.getType())) {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalThrowable(wireFormat, dataIn, bs));");
0: 		} else if (isCachedProperty(property)) {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalCachedObject(wireFormat, dataIn, bs));");
0: 		} else {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") tightUnmarsalNestedObject(wireFormat, dataIn, bs));");
1: 		}
1: 	}
1: 
0: 	protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
0: 		JClass propertyType = property.getType();
0: 		String arrayType = propertyType.getArrayComponentType().getQualifiedName();
0: 		String setter = property.getSetter().getSimpleName();
0: 		out.println();
0: 		if (size != null) {
0: 			out.println("        {");
0: 			out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
0: 			out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
0: 			out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
0: 			out.println("            }");
0: 			out.println("            info." + setter + "(value);");
0: 			out.println("        }");
0: 		} else {
0: 			out.println("        if (bs.readBoolean()) {");
0: 			out.println("            short size = dataIn.readShort();");
0: 			out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
0: 			out.println("            for( int i=0; i < size; i++ ) {");
0: 			out.println("                value[i] = (" + arrayType + ") tightUnmarsalNestedObject(wireFormat,dataIn, bs);");
0: 			out.println("            }");
0: 			out.println("            info." + setter + "(value);");
0: 			out.println("        }");
0: 			out.println("        else {");
0: 			out.println("            info." + setter + "(null);");
0: 			out.println("        }");
1: 		}
1: 	}
1: 
0: 	protected int generateTightMarshal1Body(PrintWriter out) {
0: 		List properties = getProperties();
0: 		int baseSize = 0;
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
0: 			JClass propertyType = property.getType();
0: 			String type = propertyType.getSimpleName();
0: 			String getter = "info." + property.getGetter().getSimpleName() + "()";
1: 
0: 			if (type.equals("boolean")) {
0: 				out.println("        bs.writeBoolean(" + getter + ");");
0: 			} else if (type.equals("byte")) {
0: 				baseSize += 1;
0: 			} else if (type.equals("char")) {
0: 				baseSize += 2;
0: 			} else if (type.equals("short")) {
0: 				baseSize += 2;
0: 			} else if (type.equals("int")) {
0: 				baseSize += 4;
0: 			} else if (type.equals("long")) {
0: 				out.println("        rc+=tightMarshalLong1(wireFormat, " + getter + ", bs);");
0: 			} else if (type.equals("String")) {
0: 				out.println("        rc += tightMarshalString1(" + getter + ", bs);");
0: 			} else if (type.equals("byte[]")) {
0: 				if (size == null) {
0: 					out.println("        rc += tightMarshalByteArray1(" + getter + ", bs);");
0: 				} else {
0: 					out.println("        rc += tightMarshalConstByteArray1(" + getter + ", bs, " + size.asInt() + ");");
1: 				}
0: 			} else if (type.equals("ByteSequence")) {
0: 				out.println("        rc += tightMarshalByteSequence1(" + getter + ", bs);");
0: 			} else if (propertyType.isArrayType()) {
0: 				if (size != null) {
0: 					out.println("        rc += tightMarshalObjectArrayConstSize1(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
0: 				} else {
0: 					out.println("        rc += tightMarshalObjectArray1(wireFormat, " + getter + ", bs);");
1: 				}
0: 			} else if (isThrowable(propertyType)) {
0: 				out.println("        rc += tightMarshalThrowable1(wireFormat, " + getter + ", bs);");
0: 			} else {
0: 				if (isCachedProperty(property)) {
0: 					out.println("        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
0: 				} else {
0: 					out.println("        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1: 				}
1: 			}
1: 		}
0: 		return baseSize;
1: 	}
1: 
0: 	protected void generateTightMarshal2Body(PrintWriter out) {
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
0: 			JClass propertyType = property.getType();
0: 			String type = propertyType.getSimpleName();
0: 			String getter = "info." + property.getGetter().getSimpleName() + "()";
1: 
0: 			if (type.equals("boolean")) {
0: 				out.println("        bs.readBoolean();");
0: 			} else if (type.equals("byte")) {
0: 				out.println("        dataOut.writeByte(" + getter + ");");
0: 			} else if (type.equals("char")) {
0: 				out.println("        dataOut.writeChar(" + getter + ");");
0: 			} else if (type.equals("short")) {
0: 				out.println("        dataOut.writeShort(" + getter + ");");
0: 			} else if (type.equals("int")) {
0: 				out.println("        dataOut.writeInt(" + getter + ");");
0: 			} else if (type.equals("long")) {
0: 				out.println("        tightMarshalLong2(wireFormat, " + getter + ", dataOut, bs);");
0: 			} else if (type.equals("String")) {
0: 				out.println("        tightMarshalString2(" + getter + ", dataOut, bs);");
0: 			} else if (type.equals("byte[]")) {
0: 				String mandatory = getMandatoryFlag(annotation);
0: 				if (size != null) {
0: 					out.println("        tightMarshalConstByteArray2(" + getter + ", dataOut, bs, " + size.asInt() + ");");
0: 				} else {
0: 					out.println("        tightMarshalByteArray2(" + getter + ", dataOut, bs);");
1: 				}
0: 			} else if (type.equals("ByteSequence")) {
0: 				out.println("        tightMarshalByteSequence2(" + getter + ", dataOut, bs);");
0: 			} else if (propertyType.isArrayType()) {
0: 				if (size != null) {
0: 					out.println("        tightMarshalObjectArrayConstSize2(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
0: 				} else {
0: 					out.println("        tightMarshalObjectArray2(wireFormat, " + getter + ", dataOut, bs);");
1: 				}
0: 			} else if (isThrowable(propertyType)) {
0: 				out.println("        tightMarshalThrowable2(wireFormat, " + getter + ", dataOut, bs);");
0: 			} else {
0: 				if (isCachedProperty(property)) {
0: 					out.println("        tightMarshalCachedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
0: 				} else {
0: 					out.println("        tightMarshalNestedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1: 				}
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void generateLooseMarshalBody(PrintWriter out) {
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
0: 			JClass propertyType = property.getType();
0: 			String type = propertyType.getSimpleName();
0: 			String getter = "info." + property.getGetter().getSimpleName() + "()";
1: 
0: 			if (type.equals("boolean")) {
0: 				out.println("        dataOut.writeBoolean(" + getter + ");");
0: 			} else if (type.equals("byte")) {
0: 				out.println("        dataOut.writeByte(" + getter + ");");
0: 			} else if (type.equals("char")) {
0: 				out.println("        dataOut.writeChar(" + getter + ");");
0: 			} else if (type.equals("short")) {
0: 				out.println("        dataOut.writeShort(" + getter + ");");
0: 			} else if (type.equals("int")) {
0: 				out.println("        dataOut.writeInt(" + getter + ");");
0: 			} else if (type.equals("long")) {
0: 				out.println("        looseMarshalLong(wireFormat, " + getter + ", dataOut);");
0: 			} else if (type.equals("String")) {
0: 				out.println("        looseMarshalString(" + getter + ", dataOut);");
0: 			} else if (type.equals("byte[]")) {
0: 				if (size != null) {
0: 					out.println("        looseMarshalConstByteArray(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
0: 				} else {
0: 					out.println("        looseMarshalByteArray(wireFormat, " + getter + ", dataOut);");
1: 				}
0: 			} else if (type.equals("ByteSequence")) {
0: 				out.println("        looseMarshalByteSequence(wireFormat, " + getter + ", dataOut);");
0: 			} else if (propertyType.isArrayType()) {
0: 				if (size != null) {
0: 					out.println("        looseMarshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
0: 				} else {
0: 					out.println("        looseMarshalObjectArray(wireFormat, " + getter + ", dataOut);");
1: 				}
0: 			} else if (isThrowable(propertyType)) {
0: 				out.println("        looseMarshalThrowable(wireFormat, " + getter + ", dataOut);");
0: 			} else {
0: 				if (isCachedProperty(property)) {
0: 					out.println("        looseMarshalCachedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
0: 				} else {
0: 					out.println("        looseMarshalNestedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1: 				}
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void generateLooseUnmarshalBody(PrintWriter out) {
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");
0: 			JAnnotationValue size = annotation.getValue("size");
0: 			JClass propertyType = property.getType();
0: 			String propertyTypeName = propertyType.getSimpleName();
1: 
0: 			if (propertyType.isArrayType() && !propertyTypeName.equals("byte[]")) {
0: 				generateLooseUnmarshalBodyForArrayProperty(out, property, size);
0: 			} else {
0: 				generateLooseUnmarshalBodyForProperty(out, property, size);
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
0: 		String setter = property.getSetter().getSimpleName();
0: 		String type = property.getType().getSimpleName();
1: 
0: 		if (type.equals("boolean")) {
0: 			out.println("        info." + setter + "(dataIn.readBoolean());");
0: 		} else if (type.equals("byte")) {
0: 			out.println("        info." + setter + "(dataIn.readByte());");
0: 		} else if (type.equals("char")) {
0: 			out.println("        info." + setter + "(dataIn.readChar());");
0: 		} else if (type.equals("short")) {
0: 			out.println("        info." + setter + "(dataIn.readShort());");
0: 		} else if (type.equals("int")) {
0: 			out.println("        info." + setter + "(dataIn.readInt());");
0: 		} else if (type.equals("long")) {
0: 			out.println("        info." + setter + "(looseUnmarshalLong(wireFormat, dataIn));");
0: 		} else if (type.equals("String")) {
0: 			out.println("        info." + setter + "(looseUnmarshalString(dataIn));");
0: 		} else if (type.equals("byte[]")) {
0: 			if (size != null) {
0: 				out.println("        info." + setter + "(looseUnmarshalConstByteArray(dataIn, " + size.asInt() + "));");
0: 			} else {
0: 				out.println("        info." + setter + "(looseUnmarshalByteArray(dataIn));");
1: 			}
0: 		} else if (type.equals("ByteSequence")) {
0: 			out.println("        info." + setter + "(looseUnmarshalByteSequence(dataIn));");
0: 		} else if (isThrowable(property.getType())) {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalThrowable(wireFormat, dataIn));");
0: 		} else if (isCachedProperty(property)) {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalCachedObject(wireFormat, dataIn));");
0: 		} else {
0: 			out.println("        info." + setter + "((" + property.getType().getQualifiedName() + ") looseUnmarsalNestedObject(wireFormat, dataIn));");
1: 		}
1: 	}
1: 
0: 	protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
0: 		JClass propertyType = property.getType();
0: 		String arrayType = propertyType.getArrayComponentType().getQualifiedName();
0: 		String setter = property.getSetter().getSimpleName();
0: 		out.println();
0: 		if (size != null) {
0: 			out.println("        {");
0: 			out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size.asInt() + "];");
0: 			out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
0: 			out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
0: 			out.println("            }");
0: 			out.println("            info." + setter + "(value);");
0: 			out.println("        }");
0: 		} else {
0: 			out.println("        if (dataIn.readBoolean()) {");
0: 			out.println("            short size = dataIn.readShort();");
0: 			out.println("            " + arrayType + " value[] = new " + arrayType + "[size];");
0: 			out.println("            for( int i=0; i < size; i++ ) {");
0: 			out.println("                value[i] = (" + arrayType + ") looseUnmarsalNestedObject(wireFormat,dataIn);");
0: 			out.println("            }");
0: 			out.println("            info." + setter + "(value);");
0: 			out.println("        }");
0: 			out.println("        else {");
0: 			out.println("            info." + setter + "(null);");
0: 			out.println("        }");
1: 		}
1: 	}
1: 
1: 	/**
0: 	 * Returns whether or not the given annotation has a mandatory flag on it or
0: 	 * not
1: 	 */
0: 	protected String getMandatoryFlag(JAnnotation annotation) {
0: 		JAnnotationValue value = annotation.getValue("mandatory");
0: 		if (value != null) {
0: 			String text = value.asString();
0: 			if (text != null && text.equalsIgnoreCase("true")) {
0: 				return "true";
1: 			}
1: 		}
0: 		return "false";
1: 	}
1: 
0: 	public List getConcreteClasses() {
0: 		return concreteClasses;
1: 	}
1: 
0: 	public void setConcreteClasses(List concreteClasses) {
0: 		this.concreteClasses = concreteClasses;
1: 	}
1: 
0: 	public File getFactoryFile() {
0: 		return factoryFile;
1: 	}
1: 
0: 	public void setFactoryFile(File factoryFile) {
0: 		this.factoryFile = factoryFile;
1: 	}
1: 
0: 	public String getFactoryFileName() {
0: 		return factoryFileName;
1: 	}
1: 
0: 	public void setFactoryFileName(String factoryFileName) {
0: 		this.factoryFileName = factoryFileName;
1: 	}
1: 
0: 	public String getIndent() {
0: 		return indent;
1: 	}
1: 
0: 	public void setIndent(String indent) {
0: 		this.indent = indent;
1: 	}
1: 
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String sourceDir) {
0: 		this.targetDir = sourceDir;
1: 	}
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:9c3dc34
/////////////////////////////////////////////////////////////////////////
0: out.println("import java.io.DataInput;");
0: out.println("import java.io.DataOutput;");
/////////////////////////////////////////////////////////////////////////
0: out.println("    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {");
/////////////////////////////////////////////////////////////////////////
0: out.println("    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {");
/////////////////////////////////////////////////////////////////////////
0: out.println("    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {");
/////////////////////////////////////////////////////////////////////////
0: out.println("    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {");
============================================================================