1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
9:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:cafe4cb: 
1:5e05df1: import java.io.IOException;
1:5e05df1: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.broker.region.ConnectionStatistics;
1:d29ca2a: import org.apache.activemq.command.Command;
1:f392884: import org.apache.activemq.command.ConnectionControl;
1:d29ca2a: import org.apache.activemq.command.Response;
1:93ca044: 
1:d29ca2a: /**
1:5e05df1:  *
1:d29ca2a:  */
1:d29ca2a: public interface Connection extends Service {
1:cafe4cb: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the connector that created this connection.
1:d29ca2a:      */
1:fc00993:     Connector getConnector();
3:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends a message to the client.
1:5e05df1:      *
1:f812e34:      * @param message the message to send to the client.
1:d29ca2a:      */
1:fc00993:     void dispatchSync(Command message);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends a message to the client.
1:5e05df1:      *
1:d29ca2a:      * @param command
1:d29ca2a:      */
1:fc00993:     void dispatchAsync(Command command);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Services a client command and submits it to the broker.
1:5e05df1:      *
1:d29ca2a:      * @param command
1:f392884:      * @return Response
1:d29ca2a:      */
1:fc00993:     Response service(Command command);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Handles an unexpected error associated with a connection.
1:5e05df1:      *
1:d29ca2a:      * @param error
1:d29ca2a:      */
1:fc00993:     void serviceException(Throwable error);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is slow
1:d29ca2a:      */
1:fc00993:     boolean isSlow();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return if after being marked, the Connection is still writing
1:d29ca2a:      */
1:fc00993:     boolean isBlocked();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is connected
1:d29ca2a:      */
1:fc00993:     boolean isConnected();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return true if the Connection is active
1:d29ca2a:      */
1:fc00993:     boolean isActive();
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the number of messages to be dispatched to this connection
1:d29ca2a:      */
1:fc00993:     int getDispatchQueueSize();
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the statistics for this connection
1:d29ca2a:      */
1:fc00993:     ConnectionStatistics getStatistics();
1:f812e34: 
1:ef0734b:     /**
1:ef0734b:      * @return true if the Connection will process control commands
1:ef0734b:      */
1:fc00993:     boolean isManageable();
1:d29ca2a: 
1:0f1dcce:     /**
1:0f1dcce:      * @return the source address for this connection
1:0f1dcce:      */
1:fc00993:     String getRemoteAddress();
1:f812e34: 
1:fc00993:     void serviceExceptionAsync(IOException e);
1:d29ca2a: 
1:fc00993:     String getConnectionId();
1:5e05df1: 
1:25b6812:     /**
1:25b6812:      * return true if a network connection
1:5e05df1:      *
1:5e05df1:      * @return if this is a network connection
1:25b6812:      */
1:25b6812:     boolean isNetworkConnection();
1:5e05df1: 
1:f392884:     /**
1:f392884:      * @return true if a fault tolerant connection
1:f392884:      */
1:f392884:     boolean isFaultTolerantConnection();
1:5e05df1: 
1:f392884:     void updateClient(ConnectionControl control);
1:93ca044: 
1:d29ca2a: 
1:93ca044:     /**
1:93ca044:      * Returns the number of active transactions established on this Connection.
1:93ca044:      *
1:93ca044:      * @return the number of active transactions established on this Connection..
1:93ca044:      */
1:93ca044:     public int getActiveTransactionCount();
1:93ca044: 
1:93ca044:     /**
1:93ca044:      * Returns the number of active transactions established on this Connection.
1:93ca044:      *
1:93ca044:      * @return the number of active transactions established on this Connection..
1:93ca044:      */
1:93ca044:     public Long getOldestActiveTransactionDuration();
1:93ca044: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1:      * @return if this is a network connection
1: 
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:93ca044
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the number of active transactions established on this Connection.
1:      *
1:      * @return the number of active transactions established on this Connection..
1:      */
1:     public int getActiveTransactionCount();
1: 
1:     /**
1:      * Returns the number of active transactions established on this Connection.
1:      *
1:      * @return the number of active transactions established on this Connection..
1:      */
1:     public Long getOldestActiveTransactionDuration();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Connector getConnector();
1:     void dispatchSync(Command message);
1:     void dispatchAsync(Command command);
1:     Response service(Command command);
1:     void serviceException(Throwable error);
1:     boolean isSlow();
1:     boolean isBlocked();
1:     boolean isConnected();
1:     boolean isActive();
1:     int getDispatchQueueSize();
1:     ConnectionStatistics getStatistics();
1:     boolean isManageable();
1:     String getRemoteAddress();
1:     void serviceExceptionAsync(IOException e);
1:     String getConnectionId();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param message the message to send to the client.
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:     public String getRemoteAddress();
0:     public void serviceExceptionAsync(IOException e);
1: 
0:     public String getConnectionId();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:cafe4cb
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0: 	public void serviceExceptionAsync(IOException e);
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.region.ConnectionStatistics;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.Response;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
1: public interface Connection extends Service {
1: 
1:     /**
1:      * @return the connector that created this connection.
1:      */
0:     public Connector getConnector();
1: 
1:     /**
1:      * Sends a message to the client.
1:      * 
0:      * @param message
0:      *            the message to send to the client.
1:      */
0:     public void dispatchSync(Command message);
1: 
1:     /**
1:      * Sends a message to the client.
1:      * 
1:      * @param command
1:      */
0:     public void dispatchAsync(Command command);
1: 
1:     /**
1:      * Services a client command and submits it to the broker.
1:      * 
1:      * @param command
1:      */
0:     public Response service(Command command);
1: 
1:     /**
1:      * Handles an unexpected error associated with a connection.
1:      * 
1:      * @param error
1:      */
0:     public void serviceException(Throwable error);
1: 
1:     /**
1:      * @return true if the Connection is slow
1:      */
0:     public boolean isSlow();
1: 
1:     /**
1:      * @return if after being marked, the Connection is still writing
1:      */
0:     public boolean isBlocked();
1: 
1:     /**
1:      * @return true if the Connection is connected
1:      */
0:     public boolean isConnected();
1: 
1:     /**
1:      * @return true if the Connection is active
1:      */
0:     public boolean isActive();
1: 
1:     /**
1:      * Returns the number of messages to be dispatched to this connection
1:      */
0:     public int getDispatchQueueSize();
1:     
1:     /**
1:      * Returns the statistics for this connection
1:      */
0:     public ConnectionStatistics getStatistics();
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConnectionControl;
/////////////////////////////////////////////////////////////////////////
1:      * @return Response
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if a fault tolerant connection
1:      */
1:     boolean isFaultTolerantConnection();
0:     
1:     void updateClient(ConnectionControl control);
commit:25b6812
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * return true if a network connection
0:      * @return
1:      */
1:     boolean isNetworkConnection();
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return true if the Connection will process control commands
1:      */
0:     public boolean isManageable();
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:015cd8a
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public String getConnectionId();
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the source address for this connection
1:      */
0: 	public String getRemoteAddress();
0: 
============================================================================