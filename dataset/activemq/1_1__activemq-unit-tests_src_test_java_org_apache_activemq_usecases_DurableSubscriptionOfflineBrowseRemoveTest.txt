1:11579bb: /**
1:11579bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11579bb:  * contributor license agreements.  See the NOTICE file distributed with
1:11579bb:  * this work for additional information regarding copyright ownership.
1:11579bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11579bb:  * (the "License"); you may not use this file except in compliance with
1:11579bb:  * the License.  You may obtain a copy of the License at
1:11579bb:  *
1:11579bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:11579bb:  *
1:11579bb:  * Unless required by applicable law or agreed to in writing, software
1:11579bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:11579bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11579bb:  * See the License for the specific language governing permissions and
1:11579bb:  * limitations under the License.
1:11579bb:  */
1:11579bb: package org.apache.activemq.usecases;
1:11579bb: 
1:11579bb: import java.io.IOException;
1:11579bb: import java.util.ArrayList;
1:11579bb: import java.util.Collection;
1:11579bb: import java.util.LinkedList;
1:11579bb: import java.util.List;
1:11579bb: import javax.jms.Connection;
1:11579bb: import javax.jms.Message;
1:11579bb: import javax.jms.MessageProducer;
1:11579bb: import javax.jms.Session;
1:11579bb: import javax.management.ObjectName;
1:11579bb: import javax.management.openmbean.CompositeData;
1:11579bb: import org.apache.activemq.ActiveMQConnectionFactory;
1:11579bb: import org.apache.activemq.TestSupport;
1:cc9b9b0: import org.apache.activemq.broker.BrokerPlugin;
1:11579bb: import org.apache.activemq.broker.BrokerService;
1:11579bb: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:cc9b9b0: import org.apache.activemq.filter.DestinationMapEntry;
1:cc9b9b0: import org.apache.activemq.security.AuthenticationUser;
1:cc9b9b0: import org.apache.activemq.security.AuthorizationEntry;
1:cc9b9b0: import org.apache.activemq.security.AuthorizationPlugin;
1:cc9b9b0: import org.apache.activemq.security.DefaultAuthorizationMap;
1:cc9b9b0: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:11579bb: import org.apache.activemq.store.PersistenceAdapter;
1:11579bb: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:11579bb: import org.junit.Test;
1:11579bb: import org.junit.runner.RunWith;
1:11579bb: import org.junit.runners.Parameterized;
1:11579bb: import org.slf4j.Logger;
1:11579bb: import org.slf4j.LoggerFactory;
1:11579bb: 
1:11579bb: 
1:11579bb: import static org.junit.Assert.*;
1:11579bb: 
1:11579bb: 
1:11579bb: @RunWith(value = Parameterized.class)
1:11579bb: public class DurableSubscriptionOfflineBrowseRemoveTest extends DurableSubscriptionOfflineTestBase {
1:11579bb: 
1:11579bb:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineBrowseRemoveTest.class);
1:11579bb: 
1:cc9b9b0:     public static final String IDENTITY = "milly";
1:11579bb:     public boolean keepDurableSubsActive;
1:11579bb: 
1:11579bb:     @Parameterized.Parameters(name = "PA-{0}.KeepSubsActive-{1}")
1:11579bb:     public static Collection<Object[]> getTestParameters() {
1:11579bb:         List<Object[]> testParameters = new ArrayList<Object[]>();
1:11579bb:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.KahaDB, Boolean.TRUE});
1:11579bb:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.KahaDB, Boolean.FALSE});
1:11579bb: 
1:11579bb:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.JDBC, Boolean.TRUE});
1:11579bb:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.JDBC, Boolean.FALSE});
1:11579bb: 
1:11579bb:         // leveldb needs some work on finding index from green messageId
1:11579bb:         return testParameters;
1:11579bb:     }
1:11579bb: 
1:11579bb:     public DurableSubscriptionOfflineBrowseRemoveTest(TestSupport.PersistenceAdapterChoice adapter, boolean keepDurableSubsActive) {
1:11579bb:         this.defaultPersistenceAdapter = adapter;
1:11579bb:         this.usePrioritySupport = true;
1:11579bb:         this.keepDurableSubsActive = keepDurableSubsActive;
1:11579bb:     }
1:11579bb: 
1:11579bb:     @Override
1:cc9b9b0:     public void configurePlugins(BrokerService brokerService) throws Exception {
1:cc9b9b0:         List<DestinationMapEntry> authorizationEntries = new ArrayList<>();
1:cc9b9b0: 
1:cc9b9b0:         AuthorizationEntry entry = new AuthorizationEntry();
1:cc9b9b0:         entry.setTopic(">");
1:cc9b9b0:         entry.setRead(IDENTITY);
1:cc9b9b0:         entry.setWrite(IDENTITY);
1:cc9b9b0:         entry.setAdmin(IDENTITY);
1:cc9b9b0:         authorizationEntries.add(entry);
1:cc9b9b0: 
1:cc9b9b0:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:cc9b9b0:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:cc9b9b0: 
1:cc9b9b0:         List<AuthenticationUser> users = new ArrayList<>();
1:cc9b9b0:         users.add(new AuthenticationUser(IDENTITY, IDENTITY, IDENTITY));
1:cc9b9b0: 
1:cc9b9b0:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:cc9b9b0: 
1:cc9b9b0: 
1:cc9b9b0:         broker.setPlugins(new BrokerPlugin[]{authenticationPlugin, authorizationPlugin});
1:cc9b9b0: 
1:cc9b9b0:     }
1:cc9b9b0:     @Override
1:11579bb:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:11579bb:         broker.setKeepDurableSubsActive(keepDurableSubsActive);
1:11579bb:         return super.setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:11579bb:     }
1:11579bb: 
1:11579bb:     @Override
1:11579bb:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:11579bb:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:cc9b9b0:         connectionFactory.setUserName(IDENTITY);
1:cc9b9b0:         connectionFactory.setPassword(IDENTITY);
1:11579bb:         connectionFactory.setWatchTopicAdvisories(false);
1:11579bb:         return connectionFactory;
1:11579bb:     }
1:11579bb: 
1:11579bb:     @Test(timeout = 60 * 1000)
1:11579bb:     public void testBrowseRemoveBrowseOfflineSub() throws Exception {
1:11579bb:         // create durable subscription
1:11579bb:         Connection con = createConnection();
1:11579bb:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:11579bb:         session.createDurableSubscriber(topic, "SubsId");
1:11579bb:         session.close();
1:11579bb:         con.close();
1:11579bb: 
1:11579bb:         // send messages
1:11579bb:         con = createConnection();
1:11579bb:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:11579bb:         MessageProducer producer = session.createProducer(null);
1:11579bb: 
1:11579bb:         for (int i = 0; i < 10; i++) {
1:11579bb:             Message message = session.createMessage();
1:11579bb:             message.setStringProperty("filter", "true");
1:11579bb:             producer.send(topic, message);
1:11579bb:         }
1:11579bb: 
1:11579bb:         session.close();
1:11579bb:         con.close();
1:11579bb: 
1:11579bb:         // browse the durable sub
1:11579bb:         ObjectName[] subs = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:11579bb:         assertEquals(1, subs.length);
1:11579bb:         ObjectName subName = subs[0];
1:11579bb:         DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:11579bb:                 broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:11579bb:         CompositeData[] data  = sub.browse();
1:11579bb:         assertNotNull(data);
1:11579bb:         assertEquals(10, data.length);
1:11579bb: 
1:11579bb:         LinkedList<String> idToRemove = new LinkedList<>();
1:11579bb:         idToRemove.add((String)data[5].get("JMSMessageID"));
1:11579bb:         idToRemove.add((String)data[9].get("JMSMessageID"));
1:11579bb:         idToRemove.add((String)data[0].get("JMSMessageID"));
1:11579bb: 
1:11579bb:         LOG.info("Removing: " + idToRemove);
1:11579bb:         for (String id: idToRemove) {
1:11579bb:             sub.removeMessage(id);
1:11579bb:         }
1:11579bb: 
1:11579bb:         if (defaultPersistenceAdapter.compareTo(TestSupport.PersistenceAdapterChoice.JDBC) == 0) {
1:11579bb:             for (int i=0; i<10; i++) {
1:11579bb:                 // each iteration does one priority
1:11579bb:                 ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).cleanup();
1:11579bb:             }
1:11579bb:         }
1:11579bb: 
1:11579bb:         data  = sub.browse();
1:11579bb:         assertNotNull(data);
1:11579bb:         assertEquals(7, data.length);
1:11579bb: 
1:11579bb:         for (CompositeData c: data) {
1:11579bb:             String id = (String)c.get("JMSMessageID");
1:11579bb:             for (String removedId : idToRemove) {
1:11579bb:                 assertNotEquals(id, removedId);
1:11579bb:             }
1:11579bb:         }
1:11579bb: 
1:11579bb:         // remove non existent
1:11579bb:         LOG.info("Repeat remove: " + idToRemove.getFirst());
1:11579bb:         sub.removeMessage(idToRemove.getFirst());
1:11579bb: 
1:11579bb:     }
1:11579bb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cc9b9b0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
/////////////////////////////////////////////////////////////////////////
1:     public static final String IDENTITY = "milly";
/////////////////////////////////////////////////////////////////////////
1:     public void configurePlugins(BrokerService brokerService) throws Exception {
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setTopic(">");
1:         entry.setRead(IDENTITY);
1:         entry.setWrite(IDENTITY);
1:         entry.setAdmin(IDENTITY);
1:         authorizationEntries.add(entry);
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         List<AuthenticationUser> users = new ArrayList<>();
1:         users.add(new AuthenticationUser(IDENTITY, IDENTITY, IDENTITY));
1: 
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1: 
1:         broker.setPlugins(new BrokerPlugin[]{authenticationPlugin, authorizationPlugin});
1: 
1:     }
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         connectionFactory.setUserName(IDENTITY);
1:         connectionFactory.setPassword(IDENTITY);
commit:11579bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.LinkedList;
1: import java.util.List;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.*;
1: 
1: 
1: @RunWith(value = Parameterized.class)
1: public class DurableSubscriptionOfflineBrowseRemoveTest extends DurableSubscriptionOfflineTestBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOfflineBrowseRemoveTest.class);
1: 
1:     public boolean keepDurableSubsActive;
1: 
1:     @Parameterized.Parameters(name = "PA-{0}.KeepSubsActive-{1}")
1:     public static Collection<Object[]> getTestParameters() {
1:         List<Object[]> testParameters = new ArrayList<Object[]>();
1:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.KahaDB, Boolean.TRUE});
1:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.KahaDB, Boolean.FALSE});
1: 
1:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.JDBC, Boolean.TRUE});
1:         testParameters.add(new Object[]{TestSupport.PersistenceAdapterChoice.JDBC, Boolean.FALSE});
1: 
1:         // leveldb needs some work on finding index from green messageId
1:         return testParameters;
1:     }
1: 
1:     public DurableSubscriptionOfflineBrowseRemoveTest(TestSupport.PersistenceAdapterChoice adapter, boolean keepDurableSubsActive) {
1:         this.defaultPersistenceAdapter = adapter;
1:         this.usePrioritySupport = true;
1:         this.keepDurableSubsActive = keepDurableSubsActive;
1:     }
1: 
1:     @Override
1:     public PersistenceAdapter setDefaultPersistenceAdapter(BrokerService broker) throws IOException {
1:         broker.setKeepDurableSubsActive(keepDurableSubsActive);
1:         return super.setPersistenceAdapter(broker, defaultPersistenceAdapter);
1:     }
1: 
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testBrowseRemoveBrowseOfflineSub() throws Exception {
1:         // create durable subscription
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1:         session.close();
1:         con.close();
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:         }
1: 
1:         session.close();
1:         con.close();
1: 
1:         // browse the durable sub
1:         ObjectName[] subs = broker.getAdminView().getInactiveDurableTopicSubscribers();
1:         assertEquals(1, subs.length);
1:         ObjectName subName = subs[0];
1:         DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:                 broker.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:         CompositeData[] data  = sub.browse();
1:         assertNotNull(data);
1:         assertEquals(10, data.length);
1: 
1:         LinkedList<String> idToRemove = new LinkedList<>();
1:         idToRemove.add((String)data[5].get("JMSMessageID"));
1:         idToRemove.add((String)data[9].get("JMSMessageID"));
1:         idToRemove.add((String)data[0].get("JMSMessageID"));
1: 
1:         LOG.info("Removing: " + idToRemove);
1:         for (String id: idToRemove) {
1:             sub.removeMessage(id);
1:         }
1: 
1:         if (defaultPersistenceAdapter.compareTo(TestSupport.PersistenceAdapterChoice.JDBC) == 0) {
1:             for (int i=0; i<10; i++) {
1:                 // each iteration does one priority
1:                 ((JDBCPersistenceAdapter)broker.getPersistenceAdapter()).cleanup();
1:             }
1:         }
1: 
1:         data  = sub.browse();
1:         assertNotNull(data);
1:         assertEquals(7, data.length);
1: 
1:         for (CompositeData c: data) {
1:             String id = (String)c.get("JMSMessageID");
1:             for (String removedId : idToRemove) {
1:                 assertNotEquals(id, removedId);
1:             }
1:         }
1: 
1:         // remove non existent
1:         LOG.info("Repeat remove: " + idToRemove.getFirst());
1:         sub.removeMessage(idToRemove.getFirst());
1: 
1:     }
1: }
============================================================================