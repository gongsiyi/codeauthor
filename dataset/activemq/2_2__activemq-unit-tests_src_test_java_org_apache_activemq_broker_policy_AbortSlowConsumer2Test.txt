1:bec711c: /**
1:bec711c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bec711c:  * contributor license agreements.  See the NOTICE file distributed with
1:bec711c:  * this work for additional information regarding copyright ownership.
1:bec711c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bec711c:  * (the "License"); you may not use this file except in compliance with
1:bec711c:  * the License.  You may obtain a copy of the License at
1:bec711c:  *
1:bec711c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bec711c:  *
1:bec711c:  * Unless required by applicable law or agreed to in writing, software
1:bec711c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bec711c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bec711c:  * See the License for the specific language governing permissions and
1:bec711c:  * limitations under the License.
1:bec711c:  */
1:bec711c: package org.apache.activemq.broker.policy;
6:bec711c: 
1:9bf9e1c: import java.util.Arrays;
1:9bf9e1c: import java.util.Collection;
1:9bf9e1c: import java.util.Map.Entry;
1:9bf9e1c: import javax.jms.Connection;
1:9bf9e1c: import javax.jms.MessageConsumer;
1:bec711c: import org.apache.activemq.util.MessageIdList;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.Parameterized;
1:bec711c: 
1:bec711c: @RunWith(value = Parameterized.class)
1:bec711c: public class AbortSlowConsumer2Test extends AbortSlowConsumerBase {
1:bec711c: 
1:9bf9e1c:     @Parameterized.Parameters(name = "isTopic({0})")
1:bec711c:     public static Collection<Object[]> getTestParameters() {
1:9bf9e1c:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
2:bec711c:     }
1:bec711c: 
1:bec711c:     public AbortSlowConsumer2Test(Boolean isTopic) {
1:bec711c:         this.topic = isTopic;
1:bec711c:     }
1:bec711c: 
1:bec711c:     @Test(timeout = 60 * 1000)
1:bec711c:     public void testLittleSlowConsumerIsNotAborted() throws Exception {
1:bec711c:         startConsumers(destination);
1:bec711c:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:bec711c:         consumertoAbort.getValue().setProcessingDelay(500);
1:bec711c:         for (Connection c : connections) {
1:bec711c:             c.setExceptionListener(this);
1:bec711c:         }
1:bec711c:         startProducers(destination, 12);
1:bec711c:         allMessagesList.waitForMessagesToArrive(10);
1:bec711c:         allMessagesList.assertAtLeastMessagesReceived(10);
1:bec711c:     }
1:bec711c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:9bf9e1c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.Map.Entry;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1:     @Parameterized.Parameters(name = "isTopic({0})")
1:         return Arrays.asList(new Object[][]{{Boolean.TRUE}, {Boolean.FALSE}});
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.util.MessageIdList;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import java.util.ArrayList;
0: import java.util.Collection;
0: import java.util.List;
0: import java.util.Map.Entry;
1: 
1: @RunWith(value = Parameterized.class)
1: public class AbortSlowConsumer2Test extends AbortSlowConsumerBase {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowConsumer2Test.class);
1: 
0:     @Parameterized.Parameters(name = "{0}")
1:     public static Collection<Object[]> getTestParameters() {
1: 
0:         List<Object[]> testParameters = new ArrayList<Object[]>();
0:         Boolean[] booleanValues = {Boolean.TRUE, Boolean.FALSE};
0:         for (Boolean topic : booleanValues) {
0:             Boolean[] value = {topic};
0:             testParameters.add(value);
1:         }
1: 
0:         return testParameters;
1:     }
1: 
1:     public AbortSlowConsumer2Test(Boolean isTopic) {
1:         this.topic = isTopic;
1:     }
1: 
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testLittleSlowConsumerIsNotAborted() throws Exception {
1:         startConsumers(destination);
1:         Entry<MessageConsumer, MessageIdList> consumertoAbort = consumers.entrySet().iterator().next();
1:         consumertoAbort.getValue().setProcessingDelay(500);
1:         for (Connection c : connections) {
1:             c.setExceptionListener(this);
1:         }
1:         startProducers(destination, 12);
1:         allMessagesList.waitForMessagesToArrive(10);
1:         allMessagesList.assertAtLeastMessagesReceived(10);
1:     }
1: }
============================================================================