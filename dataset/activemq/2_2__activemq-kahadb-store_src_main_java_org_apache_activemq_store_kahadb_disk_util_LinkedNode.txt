1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Provides a base class for you to extend when you want object to maintain a
1:456a2ba:  * doubly linked list to other objects without using a collection class.
1:456a2ba:  * 
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:456a2ba: public class LinkedNode<T extends LinkedNode<T>> {
1:456a2ba: 
1:456a2ba:     protected LinkedNodeList<T> list;
1:456a2ba:     protected T next;
1:456a2ba:     protected T prev;
1:456a2ba: 
1:456a2ba:     public LinkedNode() {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     @SuppressWarnings("unchecked")
1:456a2ba:     private T getThis() {
1:456a2ba:         return (T) this;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getHeadNode() {
1:456a2ba:         return list.head;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getTailNode() {
1:456a2ba:         return list.head.prev;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getNext() {
1:456a2ba:         return isTailNode() ? null : next;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getPrevious() {
1:456a2ba:         return isHeadNode() ? null : prev;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getNextCircular() {
1:456a2ba:         return next;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getPreviousCircular() {
1:456a2ba:         return prev;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isHeadNode() {
1:456a2ba:         return list.head == this;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isTailNode() {
1:456a2ba:         return list.head.prev == this;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param node
1:456a2ba:      *            the node to link after this node.
1:456a2ba:      * @return this
1:456a2ba:      */
1:456a2ba:     public void linkAfter(T node) {
1:456a2ba:         if (node == this) {
1:456a2ba:             throw new IllegalArgumentException("You cannot link to yourself");
1:456a2ba:         }
1:456a2ba:         if (node.list != null) {
1:456a2ba:             throw new IllegalArgumentException("You only insert nodes that are not in a list");
1:456a2ba:         }
1:456a2ba:         if (list == null) {
1:456a2ba:             throw new IllegalArgumentException("This node is not yet in a list");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         node.list = list;
1:456a2ba: 
1:456a2ba:         // given we linked this<->next and are inserting node in between
1:456a2ba:         node.prev = getThis(); // link this<-node
1:456a2ba:         node.next = next; // link node->next
1:456a2ba:         next.prev = node; // link node<-next
1:456a2ba:         next = node; // this->node
2:456a2ba:         list.size++;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param rightList
1:456a2ba:      *            the node to link after this node.
1:456a2ba:      * @return this
1:456a2ba:      */
1:456a2ba:     public void linkAfter(LinkedNodeList<T> rightList) {
1:456a2ba: 
1:456a2ba:         if (rightList == list) {
1:456a2ba:             throw new IllegalArgumentException("You cannot link to yourself");
1:456a2ba:         }
1:456a2ba:         if (list == null) {
1:456a2ba:             throw new IllegalArgumentException("This node is not yet in a list");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         T rightHead = rightList.head;
1:456a2ba:         T rightTail = rightList.head.prev;
1:456a2ba:         list.reparent(rightList);
1:456a2ba: 
1:456a2ba:         // given we linked this<->next and are inserting list in between
1:456a2ba:         rightHead.prev = getThis(); // link this<-list
1:456a2ba:         rightTail.next = next; // link list->next
1:456a2ba:         next.prev = rightTail; // link list<-next
1:456a2ba:         next = rightHead; // this->list
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param node
1:456a2ba:      *            the node to link after this node.
1:456a2ba:      * @return
1:456a2ba:      * @return this
1:456a2ba:      */
1:456a2ba:     public void linkBefore(T node) {
1:456a2ba: 
1:456a2ba:         if (node == this) {
1:456a2ba:             throw new IllegalArgumentException("You cannot link to yourself");
1:456a2ba:         }
1:456a2ba:         if (node.list != null) {
1:456a2ba:             throw new IllegalArgumentException("You only insert nodes that are not in a list");
1:456a2ba:         }
1:456a2ba:         if (list == null) {
1:456a2ba:             throw new IllegalArgumentException("This node is not yet in a list");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         node.list = list;
1:456a2ba: 
1:456a2ba:         // given we linked prev<->this and are inserting node in between
1:456a2ba:         node.next = getThis(); // node->this
1:456a2ba:         node.prev = prev; // prev<-node
1:456a2ba:         prev.next = node; // prev->node
1:456a2ba:         prev = node; // node<-this
1:456a2ba: 
1:456a2ba:         if (this == list.head) {
1:456a2ba:             list.head = node;
1:456a2ba:         }
1:456a2ba:         list.size++;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param leftList
1:456a2ba:      *            the node to link after this node.
1:456a2ba:      * @return
1:456a2ba:      * @return this
1:456a2ba:      */
1:456a2ba:     public void linkBefore(LinkedNodeList<T> leftList) {
1:456a2ba: 
1:456a2ba:         if (leftList == list) {
1:456a2ba:             throw new IllegalArgumentException("You cannot link to yourself");
1:456a2ba:         }
1:456a2ba:         if (list == null) {
1:456a2ba:             throw new IllegalArgumentException("This node is not yet in a list");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         T leftHead = leftList.head;
1:456a2ba:         T leftTail = leftList.head.prev;
1:456a2ba:         list.reparent(leftList);
1:456a2ba: 
1:456a2ba:         // given we linked prev<->this and are inserting list in between
1:456a2ba:         leftTail.next = getThis(); // list->this
1:456a2ba:         leftHead.prev = prev; // prev<-list
1:456a2ba:         prev.next = leftHead; // prev->list
1:456a2ba:         prev = leftTail; // list<-this
1:456a2ba: 
1:456a2ba:         if (isHeadNode()) {
1:456a2ba:             list.head = leftHead;
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void linkToTail(LinkedNodeList<T> target) {
1:456a2ba:         if (list != null) {
2:456a2ba:             throw new IllegalArgumentException("This node is already linked to a node");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         if (target.head == null) {
1:456a2ba:             next = prev = target.head = getThis();
1:456a2ba:             list = target;
1:456a2ba:             list.size++;
1:456a2ba:         } else {
1:456a2ba:             target.head.prev.linkAfter(getThis());
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void linkToHead(LinkedNodeList<T> target) {
1:456a2ba:         if (list != null) {
1:bf59b7d:             throw new IllegalArgumentException("This node is already linked to a list");
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         if (target.head == null) {
1:456a2ba:             next = prev = target.head = getThis();
1:456a2ba:             list = target;
1:456a2ba:             list.size++;
1:456a2ba:         } else {
1:456a2ba:             target.head.linkBefore(getThis());
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Removes this node out of the linked list it is chained in.
1:456a2ba:      */
1:42824ff:     public boolean unlink() {
1:456a2ba: 
1:456a2ba:         // If we are allready unlinked...
1:456a2ba:         if (list == null) {
1:42824ff:             return false;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         if (getThis() == prev) {
1:456a2ba:             // We are the only item in the list
1:456a2ba:             list.head = null;
1:456a2ba:         } else {
1:456a2ba:             // given we linked prev<->this<->next
1:456a2ba:             next.prev = prev; // prev<-next
1:456a2ba:             prev.next = next; // prev->next
1:456a2ba: 
1:456a2ba:             if (isHeadNode()) {
1:456a2ba:                 list.head = next;
1:456a2ba:             }
1:456a2ba:         }
3:456a2ba:         list.size--;
1:456a2ba:         list = null;
1:42824ff:         return true;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Splits the list into 2 lists. This node becomes the tail of this list.
1:456a2ba:      * Then 2nd list is returned.
1:456a2ba:      * 
1:456a2ba:      * @return An empty list if this is a tail node.
1:456a2ba:      */
1:456a2ba:     public LinkedNodeList<T> splitAfter() {
1:456a2ba: 
1:456a2ba:         if (isTailNode()) {
1:456a2ba:             return new LinkedNodeList<T>();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Create the new list
1:456a2ba:         LinkedNodeList<T> newList = new LinkedNodeList<T>();
1:456a2ba:         newList.head = next;
1:456a2ba: 
1:456a2ba:         // Update the head and tail of the new list so that they point to each
1:456a2ba:         // other.
1:456a2ba:         newList.head.prev = list.head.prev; // new list: tail<-head
1:456a2ba:         newList.head.prev.next = newList.head; // new list: tail->head
1:456a2ba:         next = list.head; // old list: tail->head
1:456a2ba:         list.head.prev = getThis(); // old list: tail<-head
1:456a2ba: 
1:456a2ba:         // Update all the nodes in the new list so that they know of their new
1:456a2ba:         // list owner.
1:456a2ba:         T n = newList.head;
1:456a2ba:         do {
1:456a2ba:             n.list = newList;
1:456a2ba:             n = n.next;
3:456a2ba:             newList.size++;
1:456a2ba:             list.size--;
1:456a2ba:         } while (n != newList.head);
1:456a2ba: 
1:456a2ba:         return newList;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Splits the list into 2 lists. This node becomes the head of this list.
1:456a2ba:      * Then 2nd list is returned.
1:456a2ba:      * 
1:456a2ba:      * @return An empty list if this is a head node.
1:456a2ba:      */
1:456a2ba:     public LinkedNodeList<T> splitBefore() {
1:456a2ba: 
1:456a2ba:         if (isHeadNode()) {
1:456a2ba:             return new LinkedNodeList<T>();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Create the new list
1:456a2ba:         LinkedNodeList<T> newList = new LinkedNodeList<T>();
1:456a2ba:         newList.head = list.head;
1:456a2ba:         list.head = getThis();
1:456a2ba: 
1:456a2ba:         T newListTail = prev;
1:456a2ba: 
1:456a2ba:         prev = newList.head.prev; // old list: tail<-head
1:456a2ba:         prev.next = getThis(); // old list: tail->head
1:456a2ba:         newList.head.prev = newListTail; // new list: tail<-head
1:456a2ba:         newListTail.next = newList.head; // new list: tail->head
1:456a2ba: 
1:456a2ba:         // Update all the nodes in the new list so that they know of their new
1:456a2ba:         // list owner.
1:456a2ba:         T n = newList.head;
1:456a2ba:         do {
1:456a2ba:             n.list = newList;
1:456a2ba:             n = n.next;
1:456a2ba:             newList.size++;
1:456a2ba:             list.size--;
1:456a2ba:         } while (n != newList.head);
1:456a2ba: 
1:456a2ba:         return newList;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isLinked() {
1:456a2ba:         return list != null;
1:456a2ba:     }
1:456a2ba: 
1:42824ff: 	public LinkedNodeList<T> getList() {
1:42824ff: 		return list;
1:42824ff: 	}
1:42824ff: 
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:42824ff
/////////////////////////////////////////////////////////////////////////
1:     public boolean unlink() {
1:             return false;
/////////////////////////////////////////////////////////////////////////
1:         return true;
/////////////////////////////////////////////////////////////////////////
1: 	public LinkedNodeList<T> getList() {
1: 		return list;
1: 	}
1: 
commit:47e6d04
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: /**
1:  * Provides a base class for you to extend when you want object to maintain a
1:  * doubly linked list to other objects without using a collection class.
1:  * 
1:  * @author chirino
1:  */
1: public class LinkedNode<T extends LinkedNode<T>> {
1: 
1:     protected LinkedNodeList<T> list;
1:     protected T next;
1:     protected T prev;
1: 
1:     public LinkedNode() {
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private T getThis() {
1:         return (T) this;
1:     }
1: 
1:     public T getHeadNode() {
1:         return list.head;
1:     }
1: 
1:     public T getTailNode() {
1:         return list.head.prev;
1:     }
1: 
1:     public T getNext() {
1:         return isTailNode() ? null : next;
1:     }
1: 
1:     public T getPrevious() {
1:         return isHeadNode() ? null : prev;
1:     }
1: 
1:     public T getNextCircular() {
1:         return next;
1:     }
1: 
1:     public T getPreviousCircular() {
1:         return prev;
1:     }
1: 
1:     public boolean isHeadNode() {
1:         return list.head == this;
1:     }
1: 
1:     public boolean isTailNode() {
1:         return list.head.prev == this;
1:     }
1: 
1:     /**
1:      * @param node
1:      *            the node to link after this node.
1:      * @return this
1:      */
1:     public void linkAfter(T node) {
1:         if (node == this) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (node.list != null) {
1:             throw new IllegalArgumentException("You only insert nodes that are not in a list");
1:         }
1:         if (list == null) {
1:             throw new IllegalArgumentException("This node is not yet in a list");
1:         }
1: 
1:         node.list = list;
1: 
1:         // given we linked this<->next and are inserting node in between
1:         node.prev = getThis(); // link this<-node
1:         node.next = next; // link node->next
1:         next.prev = node; // link node<-next
1:         next = node; // this->node
1:         list.size++;
1:     }
1: 
1:     /**
1:      * @param rightList
1:      *            the node to link after this node.
1:      * @return this
1:      */
1:     public void linkAfter(LinkedNodeList<T> rightList) {
1: 
1:         if (rightList == list) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (list == null) {
1:             throw new IllegalArgumentException("This node is not yet in a list");
1:         }
1: 
1:         T rightHead = rightList.head;
1:         T rightTail = rightList.head.prev;
1:         list.reparent(rightList);
1: 
1:         // given we linked this<->next and are inserting list in between
1:         rightHead.prev = getThis(); // link this<-list
1:         rightTail.next = next; // link list->next
1:         next.prev = rightTail; // link list<-next
1:         next = rightHead; // this->list
1:         list.size++;
1:     }
1: 
1:     /**
1:      * @param node
1:      *            the node to link after this node.
1:      * @return
1:      * @return this
1:      */
1:     public void linkBefore(T node) {
1: 
1:         if (node == this) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (node.list != null) {
1:             throw new IllegalArgumentException("You only insert nodes that are not in a list");
1:         }
1:         if (list == null) {
1:             throw new IllegalArgumentException("This node is not yet in a list");
1:         }
1: 
1:         node.list = list;
1: 
1:         // given we linked prev<->this and are inserting node in between
1:         node.next = getThis(); // node->this
1:         node.prev = prev; // prev<-node
1:         prev.next = node; // prev->node
1:         prev = node; // node<-this
1: 
1:         if (this == list.head) {
1:             list.head = node;
1:         }
1:         list.size++;
1:     }
1: 
1:     /**
1:      * @param leftList
1:      *            the node to link after this node.
1:      * @return
1:      * @return this
1:      */
1:     public void linkBefore(LinkedNodeList<T> leftList) {
1: 
1:         if (leftList == list) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (list == null) {
1:             throw new IllegalArgumentException("This node is not yet in a list");
1:         }
1: 
1:         T leftHead = leftList.head;
1:         T leftTail = leftList.head.prev;
1:         list.reparent(leftList);
1: 
1:         // given we linked prev<->this and are inserting list in between
1:         leftTail.next = getThis(); // list->this
1:         leftHead.prev = prev; // prev<-list
1:         prev.next = leftHead; // prev->list
1:         prev = leftTail; // list<-this
1: 
1:         if (isHeadNode()) {
1:             list.head = leftHead;
1:         }
1:     }
1: 
1:     public void linkToTail(LinkedNodeList<T> target) {
1:         if (list != null) {
1:             throw new IllegalArgumentException("This node is already linked to a node");
1:         }
1: 
1:         if (target.head == null) {
1:             next = prev = target.head = getThis();
1:             list = target;
1:             list.size++;
1:         } else {
1:             target.head.prev.linkAfter(getThis());
1:         }
1:     }
1: 
1:     public void linkToHead(LinkedNodeList<T> target) {
1:         if (list != null) {
1:             throw new IllegalArgumentException("This node is already linked to a node");
1:         }
1: 
1:         if (target.head == null) {
1:             next = prev = target.head = getThis();
1:             list = target;
1:             list.size++;
1:         } else {
1:             target.head.linkBefore(getThis());
1:         }
1:     }
1: 
1:     /**
1:      * Removes this node out of the linked list it is chained in.
1:      */
0:     public void unlink() {
1: 
1:         // If we are allready unlinked...
1:         if (list == null) {
0:             return;
1:         }
1: 
1:         if (getThis() == prev) {
1:             // We are the only item in the list
1:             list.head = null;
1:         } else {
1:             // given we linked prev<->this<->next
1:             next.prev = prev; // prev<-next
1:             prev.next = next; // prev->next
1: 
1:             if (isHeadNode()) {
1:                 list.head = next;
1:             }
1:         }
1:         list.size--;
1:         list = null;
1:     }
1: 
1:     /**
1:      * Splits the list into 2 lists. This node becomes the tail of this list.
1:      * Then 2nd list is returned.
1:      * 
1:      * @return An empty list if this is a tail node.
1:      */
1:     public LinkedNodeList<T> splitAfter() {
1: 
1:         if (isTailNode()) {
1:             return new LinkedNodeList<T>();
1:         }
1: 
1:         // Create the new list
1:         LinkedNodeList<T> newList = new LinkedNodeList<T>();
1:         newList.head = next;
1: 
1:         // Update the head and tail of the new list so that they point to each
1:         // other.
1:         newList.head.prev = list.head.prev; // new list: tail<-head
1:         newList.head.prev.next = newList.head; // new list: tail->head
1:         next = list.head; // old list: tail->head
1:         list.head.prev = getThis(); // old list: tail<-head
1: 
1:         // Update all the nodes in the new list so that they know of their new
1:         // list owner.
1:         T n = newList.head;
1:         newList.size++;
1:         list.size--;
1:         do {
1:             n.list = newList;
1:             n = n.next;
1:             newList.size++;
1:             list.size--;
1:         } while (n != newList.head);
1: 
1:         return newList;
1:     }
1: 
1:     /**
1:      * Splits the list into 2 lists. This node becomes the head of this list.
1:      * Then 2nd list is returned.
1:      * 
1:      * @return An empty list if this is a head node.
1:      */
1:     public LinkedNodeList<T> splitBefore() {
1: 
1:         if (isHeadNode()) {
1:             return new LinkedNodeList<T>();
1:         }
1: 
1:         // Create the new list
1:         LinkedNodeList<T> newList = new LinkedNodeList<T>();
1:         newList.head = list.head;
1:         list.head = getThis();
1: 
1:         T newListTail = prev;
1: 
1:         prev = newList.head.prev; // old list: tail<-head
1:         prev.next = getThis(); // old list: tail->head
1:         newList.head.prev = newListTail; // new list: tail<-head
1:         newListTail.next = newList.head; // new list: tail->head
1: 
1:         // Update all the nodes in the new list so that they know of their new
1:         // list owner.
1:         T n = newList.head;
1:         newList.size++;
1:         list.size--;
1:         do {
1:             n.list = newList;
1:             n = n.next;
1:             newList.size++;
1:             list.size--;
1:         } while (n != newList.head);
1: 
1:         return newList;
1:     }
1: 
1:     public boolean isLinked() {
1:         return list != null;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf59b7d
/////////////////////////////////////////////////////////////////////////
1:             throw new IllegalArgumentException("This node is already linked to a list");
commit:e11ece1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
============================================================================