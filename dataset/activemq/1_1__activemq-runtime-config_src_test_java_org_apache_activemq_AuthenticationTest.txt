1:67a7d30: /**
1:67a7d30:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:67a7d30:  * contributor license agreements.  See the NOTICE file distributed with
1:67a7d30:  * this work for additional information regarding copyright ownership.
1:67a7d30:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:67a7d30:  * (the "License"); you may not use this file except in compliance with
1:67a7d30:  * the License.  You may obtain a copy of the License at
1:67a7d30:  *
1:67a7d30:  *      http://www.apache.org/licenses/LICENSE-2.0
1:67a7d30:  *
1:67a7d30:  * Unless required by applicable law or agreed to in writing, software
1:67a7d30:  * distributed under the License is distributed on an "AS IS" BASIS,
1:67a7d30:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:67a7d30:  * See the License for the specific language governing permissions and
1:67a7d30:  * limitations under the License.
1:67a7d30:  */
1:67a7d30: package org.apache.activemq;
1:67a7d30: 
1:67a7d30: import javax.jms.JMSException;
1:67a7d30: import javax.jms.Session;
1:67a7d30: import org.junit.Test;
1:67a7d30: 
1:67a7d30: import static org.junit.Assert.assertTrue;
1:67a7d30: import static org.junit.Assert.fail;
1:67a7d30: 
1:67a7d30: public class AuthenticationTest extends RuntimeConfigTestSupport {
1:67a7d30: 
1:67a7d30:     String configurationSeed = "authenticationTest";
1:67a7d30: 
1:67a7d30:     @Test
1:67a7d30:     public void testMod() throws Exception {
1:67a7d30:         final String brokerConfig = configurationSeed + "-authentication-broker";
1:67a7d30:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:67a7d30:         startBroker(brokerConfig);
1:67a7d30:         assertTrue("broker alive", brokerService.isStarted());
1:67a7d30: 
1:67a7d30:         assertAllowed("test_user_password", "USERS.A");
1:67a7d30:         assertDenied("another_test_user_password", "USERS.A");
1:67a7d30: 
1:67a7d30:         // anonymous
1:67a7d30:         assertDenied(null, "USERS.A");
1:67a7d30: 
1:67a7d30:         applyNewConfig(brokerConfig, configurationSeed + "-two-users", SLEEP);
1:67a7d30: 
1:67a7d30:         assertAllowed("test_user_password", "USERS.A");
1:67a7d30:         assertAllowed("another_test_user_password", "USERS.A");
1:67a7d30:         assertAllowed(null, "USERS.A");
1:67a7d30: 
1:67a7d30:     }
1:67a7d30: 
1:67a7d30:     private void assertDenied(String userPass, String destination) {
1:67a7d30:         try {
1:67a7d30:             assertAllowed(userPass, destination);
1:67a7d30:             fail("Expected not allowed exception");
1:67a7d30:         } catch (JMSException expected) {
1:67a7d30:             LOG.debug("got:" + expected, expected);
1:67a7d30:         }
1:67a7d30:     }
1:67a7d30: 
1:67a7d30:     private void assertAllowed(String userPass, String dest) throws JMSException {
1:67a7d30:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:67a7d30:         connection.start();
1:67a7d30:         try {
1:67a7d30:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:67a7d30:             session.createConsumer(session.createQueue(dest));
1:67a7d30:         } finally {
1:67a7d30:             connection.close();
1:67a7d30:         }
1:67a7d30:     }
1:67a7d30: 
1:67a7d30: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:67a7d30
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class AuthenticationTest extends RuntimeConfigTestSupport {
1: 
1:     String configurationSeed = "authenticationTest";
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         final String brokerConfig = configurationSeed + "-authentication-broker";
1:         applyNewConfig(brokerConfig, configurationSeed + "-users");
1:         startBroker(brokerConfig);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertAllowed("test_user_password", "USERS.A");
1:         assertDenied("another_test_user_password", "USERS.A");
1: 
1:         // anonymous
1:         assertDenied(null, "USERS.A");
1: 
1:         applyNewConfig(brokerConfig, configurationSeed + "-two-users", SLEEP);
1: 
1:         assertAllowed("test_user_password", "USERS.A");
1:         assertAllowed("another_test_user_password", "USERS.A");
1:         assertAllowed(null, "USERS.A");
1: 
1:     }
1: 
1:     private void assertDenied(String userPass, String destination) {
1:         try {
1:             assertAllowed(userPass, destination);
1:             fail("Expected not allowed exception");
1:         } catch (JMSException expected) {
1:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
1:     private void assertAllowed(String userPass, String dest) throws JMSException {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createConsumer(session.createQueue(dest));
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1: }
============================================================================