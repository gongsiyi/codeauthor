1:5f1adbe: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:d754e76:  *
1:d754e76:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d754e76:  *
1:d754e76:  * Unless required by applicable law or agreed to in writing, software
1:d754e76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d754e76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d754e76:  * See the License for the specific language governing permissions and
1:d754e76:  * limitations under the License.
1:d754e76:  */
1:d754e76: package org.apache.activemq.web.view;
1:d754e76: 
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.io.PrintWriter;
1:540dd5c: import java.util.Date;
1:540dd5c: import java.util.List;
1:d754e76: 
1:d754e76: import javax.jms.JMSException;
1:d754e76: import javax.jms.Message;
1:d754e76: import javax.jms.QueueBrowser;
1:d754e76: import javax.jms.TextMessage;
1:d754e76: import javax.servlet.ServletException;
1:d754e76: import javax.servlet.http.HttpServletRequest;
1:d754e76: import javax.servlet.http.HttpServletResponse;
1:d754e76: 
1:540dd5c: import com.sun.syndication.feed.synd.SyndContent;
1:540dd5c: import com.sun.syndication.feed.synd.SyndContentImpl;
1:540dd5c: import com.sun.syndication.feed.synd.SyndEntry;
1:540dd5c: import com.sun.syndication.feed.synd.SyndEntryImpl;
1:540dd5c: import com.sun.syndication.feed.synd.SyndFeed;
1:540dd5c: import com.sun.syndication.feed.synd.SyndFeedImpl;
1:540dd5c: import com.sun.syndication.io.FeedException;
1:540dd5c: import com.sun.syndication.io.SyndFeedOutput;
1:d754e76: 
1:d754e76: /**
1:d754e76:  * This renderer uses XStream to render messages on a queue as full XML elements
1:b0c2a40:  * 
1:d754e76:  * 
1:d754e76:  */
1:d754e76: public class RssMessageRenderer extends SimpleMessageRenderer {
1:d754e76: 
1:540dd5c:     // private String feedType = "atom_0.3";
1:d754e76:     private String feedType = "rss_2.0";
1:d754e76:     private SyndFeed feed;
1:d754e76:     private String description = "This feed is auto-generated by Apache ActiveMQ";
1:d754e76:     private String entryContentType = "text/plain";
1:d754e76: 
1:540dd5c:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException {
1:d754e76:         SyndFeed feed = getFeed(browser, request);
1:d754e76: 
1:540dd5c:         List<SyndEntry> entries = feed.getEntries();
1:d754e76:         SyndEntry entry = createEntry(browser, message, request);
1:d754e76:         SyndContent description = createEntryContent(browser, message, request);
1:d754e76:         entry.setDescription(description);
1:d754e76:         entries.add(entry);
2:d754e76:     }
1:d754e76: 
1:d754e76:     // Properties
1:d754e76:     // -------------------------------------------------------------------------
1:d754e76:     public String getDescription() {
1:d754e76:         return description;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public void setDescription(String feedDescription) {
1:d754e76:         this.description = feedDescription;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public String getFeedType() {
1:d754e76:         return feedType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public void setFeedType(String feedType) {
1:d754e76:         this.feedType = feedType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public String getEntryContentType() {
1:d754e76:         return entryContentType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public void setEntryContentType(String entryContentType) {
1:d754e76:         this.entryContentType = entryContentType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     // Implementation methods
1:d754e76:     // -------------------------------------------------------------------------
1:d754e76: 
1:540dd5c:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
1:d754e76:         // now lets actually write out the content
1:d754e76:         SyndFeed feed = getFeed(browser, request);
1:d754e76:         SyndFeedOutput output = new SyndFeedOutput();
1:d754e76:         try {
1:d754e76:             output.output(feed, writer);
1:540dd5c:         } catch (FeedException e) {
1:d754e76:             throw new ServletException(e);
1:d754e76:         }
1:d754e76:     }
1:d754e76: 
1:540dd5c:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException {
1:d754e76:     }
1:d754e76: 
1:d754e76:     public SyndFeed getFeed(QueueBrowser browser, HttpServletRequest request) throws JMSException {
1:d754e76:         if (feed == null) {
1:d754e76:             feed = createFeed(browser, request);
1:d754e76:         }
1:d754e76:         return feed;
1:d754e76:     }
1:d754e76: 
1:d754e76:     protected SyndEntry createEntry(QueueBrowser browser, Message message, HttpServletRequest request) throws JMSException {
1:d754e76:         SyndEntry entry = new SyndEntryImpl();
1:d754e76:         String title = message.getJMSMessageID();
1:d754e76:         entry.setTitle(title);
1:60bcc52:         String link = request.getRequestURI() + "?msgId=" + title;
1:d754e76:         entry.setLink(link);
1:4a015a9:         entry.setPublishedDate(new Date(message.getJMSTimestamp()));
1:d754e76:         return entry;
1:d754e76:     }
1:d754e76: 
1:d754e76:     protected SyndContent createEntryContent(QueueBrowser browser, Message message, HttpServletRequest request) throws JMSException {
1:d754e76:         SyndContent description = new SyndContentImpl();
1:d754e76:         description.setType(entryContentType);
1:d754e76: 
1:d754e76:         if (message instanceof TextMessage) {
1:540dd5c:             String text = ((TextMessage)message).getText();
1:d754e76:             description.setValue(text);
1:d754e76:         }
1:d754e76:         return description;
1:d754e76:     }
1:d754e76: 
1:d754e76:     protected SyndFeed createFeed(QueueBrowser browser, HttpServletRequest request) throws JMSException {
1:d754e76:         SyndFeed feed = new SyndFeedImpl();
1:d754e76:         feed.setFeedType(feedType);
1:d754e76: 
1:d754e76:         String title = browser.getQueue().toString();
1:d754e76:         String selector = browser.getMessageSelector();
1:d754e76:         if (selector != null) {
1:d754e76:             title += " with selector: " + selector;
1:d754e76:         }
1:d754e76:         feed.setTitle(title);
1:d754e76:         feed.setLink(request.getRequestURI());
1:d754e76:         feed.setDescription(getDescription());
1:d754e76:         return feed;
1:d754e76:     }
1:d754e76: 
1:d754e76: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4a015a9
/////////////////////////////////////////////////////////////////////////
1:         entry.setPublishedDate(new Date(message.getJMSTimestamp()));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Date;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import com.sun.syndication.feed.synd.SyndContent;
1: import com.sun.syndication.feed.synd.SyndContentImpl;
1: import com.sun.syndication.feed.synd.SyndEntry;
1: import com.sun.syndication.feed.synd.SyndEntryImpl;
1: import com.sun.syndication.feed.synd.SyndFeed;
1: import com.sun.syndication.feed.synd.SyndFeedImpl;
1: import com.sun.syndication.io.FeedException;
1: import com.sun.syndication.io.SyndFeedOutput;
/////////////////////////////////////////////////////////////////////////
1:     // private String feedType = "atom_0.3";
1:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException {
1:         List<SyndEntry> entries = feed.getEntries();
/////////////////////////////////////////////////////////////////////////
1:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
1:         } catch (FeedException e) {
1:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException {
/////////////////////////////////////////////////////////////////////////
1:             String text = ((TextMessage)message).getText();
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
1: /**
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:60bcc52
/////////////////////////////////////////////////////////////////////////
1:         String link = request.getRequestURI() + "?msgId=" + title;
commit:d754e76
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.view;
1: 
0: import com.sun.syndication.feed.synd.SyndContent;
0: import com.sun.syndication.feed.synd.SyndContentImpl;
0: import com.sun.syndication.feed.synd.SyndEntry;
0: import com.sun.syndication.feed.synd.SyndEntryImpl;
0: import com.sun.syndication.feed.synd.SyndFeed;
0: import com.sun.syndication.feed.synd.SyndFeedImpl;
0: import com.sun.syndication.io.FeedException;
0: import com.sun.syndication.io.SyndFeedOutput;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.QueueBrowser;
1: import javax.jms.TextMessage;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Date;
0: import java.util.List;
1: 
1: /**
1:  * This renderer uses XStream to render messages on a queue as full XML elements
1:  * 
0:  * @version $Revision: $
1:  */
1: public class RssMessageRenderer extends SimpleMessageRenderer {
1: 
0:     //private String feedType = "atom_0.3";
1:     private String feedType = "rss_2.0";
1:     private SyndFeed feed;
1:     private String description = "This feed is auto-generated by Apache ActiveMQ";
1:     private String entryContentType = "text/plain";
1: 
0:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response,
0:             QueueBrowser browser, Message message) throws JMSException {
1:         SyndFeed feed = getFeed(browser, request);
1: 
0:         List entries = feed.getEntries();
1:         SyndEntry entry = createEntry(browser, message, request);
1:         SyndContent description = createEntryContent(browser, message, request);
1:         entry.setDescription(description);
1:         entries.add(entry);
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public String getDescription() {
1:         return description;
1:     }
1: 
1:     public void setDescription(String feedDescription) {
1:         this.description = feedDescription;
1:     }
1: 
1:     public String getFeedType() {
1:         return feedType;
1:     }
1: 
1:     public void setFeedType(String feedType) {
1:         this.feedType = feedType;
1:     }
1: 
1:     public String getEntryContentType() {
1:         return entryContentType;
1:     }
1: 
1:     public void setEntryContentType(String entryContentType) {
1:         this.entryContentType = entryContentType;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1: 
0:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request)
0:             throws IOException, JMSException, ServletException {
1:         // now lets actually write out the content
1:         SyndFeed feed = getFeed(browser, request);
1:         SyndFeedOutput output = new SyndFeedOutput();
1:         try {
1:             output.output(feed, writer);
1:         }
0:         catch (FeedException e) {
1:             throw new ServletException(e);
1:         }
1:     }
1: 
0:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request)
0:             throws IOException, JMSException {
1:     }
1: 
1:     public SyndFeed getFeed(QueueBrowser browser, HttpServletRequest request) throws JMSException {
1:         if (feed == null) {
1:             feed = createFeed(browser, request);
1:         }
1:         return feed;
1:     }
1: 
1:     protected SyndEntry createEntry(QueueBrowser browser, Message message, HttpServletRequest request) throws JMSException {
1:         SyndEntry entry = new SyndEntryImpl();
1:         String title = message.getJMSMessageID();
1:         entry.setTitle(title);
0:         String link = request.getRequestURI() + "/" + title;
1:         entry.setLink(link);
0:         entry.setPublishedDate(new Date());
1:         return entry;
1:     }
1: 
1:     protected SyndContent createEntryContent(QueueBrowser browser, Message message, HttpServletRequest request) throws JMSException {
1:         SyndContent description = new SyndContentImpl();
1:         description.setType(entryContentType);
1: 
1:         if (message instanceof TextMessage) {
0:             String text = ((TextMessage) message).getText();
1:             description.setValue(text);
1:         }
1:         return description;
1:     }
1: 
1:     protected SyndFeed createFeed(QueueBrowser browser, HttpServletRequest request) throws JMSException {
1:         SyndFeed feed = new SyndFeedImpl();
1:         feed.setFeedType(feedType);
1: 
1:         String title = browser.getQueue().toString();
1:         String selector = browser.getMessageSelector();
1:         if (selector != null) {
1:             title += " with selector: " + selector;
1:         }
1:         feed.setTitle(title);
1:         feed.setLink(request.getRequestURI());
1:         feed.setDescription(getDescription());
1:         return feed;
1:     }
1: 
1: }
============================================================================