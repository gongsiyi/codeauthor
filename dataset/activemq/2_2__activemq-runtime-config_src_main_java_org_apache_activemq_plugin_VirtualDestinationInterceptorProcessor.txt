1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
7:bbc039f: 
1:43c3cae: import java.util.ArrayList;
1:43c3cae: import java.util.List;
1:43c3cae: 
1:bbc039f: import org.apache.activemq.broker.region.CompositeDestinationInterceptor;
1:bbc039f: import org.apache.activemq.broker.region.DestinationInterceptor;
1:bbc039f: import org.apache.activemq.broker.region.RegionBroker;
1:43c3cae: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1:43c3cae: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:43c3cae: import org.apache.activemq.schema.core.DtoCompositeQueue;
1:43c3cae: import org.apache.activemq.schema.core.DtoCompositeTopic;
1:bbc039f: import org.apache.activemq.schema.core.DtoVirtualDestinationInterceptor;
1:bbc039f: import org.apache.activemq.schema.core.DtoVirtualTopic;
1:bbc039f: 
1:bbc039f: public class VirtualDestinationInterceptorProcessor extends DefaultConfigurationProcessor {
1:bbc039f: 
1:bbc039f:     public VirtualDestinationInterceptorProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:bbc039f:         super(plugin, configurationClass);
4:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void addNew(Object o) {
1:bbc039f:         final DtoVirtualDestinationInterceptor dto = (DtoVirtualDestinationInterceptor) o;
1:bbc039f: 
1:43c3cae:         plugin.addDestinationWork.add(new UpdateVirtualDestinationsTask(plugin) {
1:bbc039f: 
1:43c3cae:             @Override
1:43c3cae:             protected VirtualDestination[] getVirtualDestinations() {
1:43c3cae:                 return fromDto(dto);
1:bbc039f:             }
1:43c3cae: 
1:bbc039f:         });
1:43c3cae: 
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void remove(Object o) {
1:bbc039f:         // whack it
2:bbc039f:         plugin.addDestinationWork.add(new Runnable() {
1:43c3cae:             @Override
2:bbc039f:             public void run() {
2:bbc039f:                 List<DestinationInterceptor> interceptorsList = new ArrayList<DestinationInterceptor>();
1:bbc039f:                 for (DestinationInterceptor candidate : plugin.getBrokerService().getDestinationInterceptors()) {
1:bbc039f:                     if (!(candidate instanceof VirtualDestinationInterceptor)) {
1:bbc039f:                         interceptorsList.add(candidate);
1:bbc039f:                     }
1:bbc039f:                 }
2:bbc039f:                 DestinationInterceptor[] destinationInterceptors = interceptorsList.toArray(new DestinationInterceptor[]{});
2:bbc039f:                 plugin.getBrokerService().setDestinationInterceptors(destinationInterceptors);
1:bbc039f:                 ((CompositeDestinationInterceptor) ((RegionBroker) plugin.getBrokerService().getRegionBroker()).getDestinationInterceptor()).setInterceptors(destinationInterceptors);
1:bbc039f:                 plugin.info("removed VirtualDestinationInterceptor from: " + interceptorsList);
1:bbc039f:             }
1:bbc039f:         });
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     private VirtualDestination[] fromDto(DtoVirtualDestinationInterceptor virtualDestinationInterceptor) {
1:bbc039f:         List<VirtualDestination> answer = new ArrayList<VirtualDestination>();
1:bbc039f:         for (Object vd : filter(virtualDestinationInterceptor, DtoVirtualDestinationInterceptor.VirtualDestinations.class)) {
1:bbc039f:             for (Object vt : filter(vd, DtoVirtualTopic.class)) {
1:bbc039f:                 answer.add(fromDto(vt, new VirtualTopic()));
1:bbc039f:             }
1:bbc039f:             for (Object vt : filter(vd, DtoCompositeTopic.class)) {
1:bbc039f:                 answer.add(fromDto(vt, new CompositeTopic()));
1:bbc039f:             }
1:bbc039f:             for (Object vt : filter(vd, DtoCompositeQueue.class)) {
1:bbc039f:                 answer.add(fromDto(vt, new CompositeQueue()));
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         VirtualDestination[] array = new VirtualDestination[answer.size()];
1:bbc039f:         answer.toArray(array);
1:bbc039f:         return array;
1:bbc039f:     }
1:43c3cae: 
1:43c3cae: 
1:bbc039f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.schema.core.DtoCompositeQueue;
1: import org.apache.activemq.schema.core.DtoCompositeTopic;
/////////////////////////////////////////////////////////////////////////
1:         plugin.addDestinationWork.add(new UpdateVirtualDestinationsTask(plugin) {
1:             @Override
1:             protected VirtualDestination[] getVirtualDestinations() {
1:                 return fromDto(dto);
1: 
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.broker.region.CompositeDestinationInterceptor;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.RegionBroker;
0: import org.apache.activemq.broker.region.virtual.*;
1: import org.apache.activemq.schema.core.DtoVirtualDestinationInterceptor;
1: import org.apache.activemq.schema.core.DtoVirtualTopic;
0: import org.apache.activemq.schema.core.DtoCompositeTopic;
0: import org.apache.activemq.schema.core.DtoCompositeQueue;
1: 
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.List;
1: 
1: public class VirtualDestinationInterceptorProcessor extends DefaultConfigurationProcessor {
1: 
1:     public VirtualDestinationInterceptorProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         super(plugin, configurationClass);
1:     }
1: 
1:     @Override
1:     public void addNew(Object o) {
1:         final DtoVirtualDestinationInterceptor dto = (DtoVirtualDestinationInterceptor) o;
1:         plugin.addDestinationWork.add(new Runnable() {
1:             public void run() {
1: 
0:                 boolean updatedExistingInterceptor = false;
0:                 RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService().getRegionBroker();
1: 
0:                 for (DestinationInterceptor destinationInterceptor : plugin.getBrokerService().getDestinationInterceptors()) {
0:                     if (destinationInterceptor instanceof VirtualDestinationInterceptor) {
0:                         // update existing interceptor
0:                         final VirtualDestinationInterceptor virtualDestinationInterceptor =
0:                                 (VirtualDestinationInterceptor) destinationInterceptor;
1: 
0:                         virtualDestinationInterceptor.setVirtualDestinations(fromDto(dto));
0:                         plugin.info("applied updates to: " + virtualDestinationInterceptor);
0:                         updatedExistingInterceptor = true;
1:                     }
1:                 }
1: 
0:                 if (!updatedExistingInterceptor) {
0:                     // add
0:                     VirtualDestinationInterceptor virtualDestinationInterceptor =
0:                             new VirtualDestinationInterceptor();
0:                     virtualDestinationInterceptor.setVirtualDestinations(fromDto(dto));
1: 
1:                     List<DestinationInterceptor> interceptorsList = new ArrayList<DestinationInterceptor>();
0:                     interceptorsList.addAll(Arrays.asList(plugin.getBrokerService().getDestinationInterceptors()));
0:                     interceptorsList.add(virtualDestinationInterceptor);
1: 
1:                     DestinationInterceptor[] destinationInterceptors = interceptorsList.toArray(new DestinationInterceptor[]{});
1:                     plugin.getBrokerService().setDestinationInterceptors(destinationInterceptors);
1: 
0:                     ((CompositeDestinationInterceptor) regionBroker.getDestinationInterceptor()).setInterceptors(destinationInterceptors);
0:                     plugin.info("applied new: " + interceptorsList);
1:                 }
0:                 regionBroker.reapplyInterceptor();
1:             }
1:         });
1:     }
1: 
1:     @Override
1:     public void remove(Object o) {
1:         // whack it
1:         plugin.addDestinationWork.add(new Runnable() {
1:             public void run() {
1:                 List<DestinationInterceptor> interceptorsList = new ArrayList<DestinationInterceptor>();
1:                 for (DestinationInterceptor candidate : plugin.getBrokerService().getDestinationInterceptors()) {
1:                     if (!(candidate instanceof VirtualDestinationInterceptor)) {
1:                         interceptorsList.add(candidate);
1:                     }
1:                 }
1:                 DestinationInterceptor[] destinationInterceptors = interceptorsList.toArray(new DestinationInterceptor[]{});
1:                 plugin.getBrokerService().setDestinationInterceptors(destinationInterceptors);
1:                 ((CompositeDestinationInterceptor) ((RegionBroker) plugin.getBrokerService().getRegionBroker()).getDestinationInterceptor()).setInterceptors(destinationInterceptors);
1:                 plugin.info("removed VirtualDestinationInterceptor from: " + interceptorsList);
1:             }
1:         });
1:     }
1: 
1:     private VirtualDestination[] fromDto(DtoVirtualDestinationInterceptor virtualDestinationInterceptor) {
1:         List<VirtualDestination> answer = new ArrayList<VirtualDestination>();
1:         for (Object vd : filter(virtualDestinationInterceptor, DtoVirtualDestinationInterceptor.VirtualDestinations.class)) {
1:             for (Object vt : filter(vd, DtoVirtualTopic.class)) {
1:                 answer.add(fromDto(vt, new VirtualTopic()));
1:             }
1:             for (Object vt : filter(vd, DtoCompositeTopic.class)) {
1:                 answer.add(fromDto(vt, new CompositeTopic()));
1:             }
1:             for (Object vt : filter(vd, DtoCompositeQueue.class)) {
1:                 answer.add(fromDto(vt, new CompositeQueue()));
1:             }
1:         }
1:         VirtualDestination[] array = new VirtualDestination[answer.size()];
1:         answer.toArray(array);
1:         return array;
1:     }
1: }
============================================================================