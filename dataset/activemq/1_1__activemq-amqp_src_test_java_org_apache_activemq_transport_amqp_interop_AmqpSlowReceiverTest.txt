1:25c99a6: /**
1:25c99a6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25c99a6:  * contributor license agreements.  See the NOTICE file distributed with
1:25c99a6:  * this work for additional information regarding copyright ownership.
1:25c99a6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25c99a6:  * (the "License"); you may not use this file except in compliance with
1:25c99a6:  * the License.  You may obtain a copy of the License at
1:25c99a6:  *
1:25c99a6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25c99a6:  *
1:25c99a6:  * Unless required by applicable law or agreed to in writing, software
1:25c99a6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25c99a6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25c99a6:  * See the License for the specific language governing permissions and
1:25c99a6:  * limitations under the License.
1:25c99a6:  */
1:25c99a6: package org.apache.activemq.transport.amqp.interop;
1:25c99a6: 
1:25c99a6: import static org.junit.Assert.assertEquals;
1:25c99a6: import static org.junit.Assert.assertNotNull;
1:25c99a6: import static org.junit.Assert.assertTrue;
1:25c99a6: import static org.junit.Assert.fail;
1:25c99a6: 
1:25c99a6: import java.lang.reflect.UndeclaredThrowableException;
1:25c99a6: import java.util.concurrent.TimeUnit;
1:25c99a6: 
1:25c99a6: import javax.management.InstanceNotFoundException;
1:25c99a6: import javax.management.ObjectName;
1:25c99a6: import javax.management.openmbean.CompositeData;
1:25c99a6: import javax.management.openmbean.TabularData;
1:25c99a6: 
1:25c99a6: import org.apache.activemq.broker.BrokerService;
1:25c99a6: import org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyViewMBean;
1:25c99a6: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:25c99a6: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:25c99a6: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:25c99a6: import org.apache.activemq.broker.region.policy.PolicyMap;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:25c99a6: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:25c99a6: import org.apache.activemq.util.Wait;
1:25c99a6: import org.junit.Test;
1:25c99a6: 
1:25c99a6: /**
1:25c99a6:  * Test the handling of consumer abort when the AbortSlowConsumerStrategy is used.
1:25c99a6:  */
1:25c99a6: public class AmqpSlowReceiverTest extends AmqpClientTestSupport {
1:25c99a6: 
1:25c99a6:     private final long DEFAULT_CHECK_PERIOD = 1000;
1:25c99a6:     private final long DEFAULT_MAX_SLOW_DURATION = 3000;
1:25c99a6: 
1:25c99a6:     private AbortSlowConsumerStrategy strategy;
1:25c99a6: 
1:25c99a6:     @Test(timeout = 60 * 1000)
1:25c99a6:     public void testSlowConsumerIsAborted() throws Exception {
1:25c99a6: 
1:25c99a6:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:25c99a6:         AmqpSession session = connection.createSession();
1:25c99a6:         final AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:25c99a6:         receiver.flow(100);
1:25c99a6: 
1:25c99a6:         assertEquals(1, brokerService.getAdminView().getQueueSubscribers().length);
1:25c99a6: 
1:25c99a6:         sendMessages(getTestName(), 100, false);
1:25c99a6: 
1:25c99a6:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:25c99a6:         assertNotNull(message);
1:25c99a6:         message.accept();
1:25c99a6: 
1:25c99a6:         assertTrue("Receiver should be closed", Wait.waitFor(new Wait.Condition() {
1:25c99a6: 
1:25c99a6:             @Override
1:25c99a6:             public boolean isSatisified() throws Exception {
1:25c99a6:                 return receiver.isClosed();
1:25c99a6:             }
1:25c99a6:         }));
1:25c99a6: 
1:25c99a6:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:25c99a6:     }
1:25c99a6: 
1:25c99a6:     @Test
1:25c99a6:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
1:25c99a6:         strategy.setMaxSlowDuration(60*1000); // so jmx does the abort
1:25c99a6: 
1:25c99a6:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:25c99a6:         AmqpSession session = connection.createSession();
1:25c99a6:         final AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:25c99a6:         receiver.flow(100);
1:25c99a6: 
1:25c99a6:         sendMessages(getTestName(), 100, false);
1:25c99a6: 
1:25c99a6:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:25c99a6:         assertNotNull(message);
1:25c99a6:         message.accept();
1:25c99a6: 
1:25c99a6:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:25c99a6:         ObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();
1:25c99a6:         assertNotNull(slowConsumerPolicyMBeanName);
1:25c99a6: 
1:25c99a6:         AbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)
1:25c99a6:                 brokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);
1:25c99a6: 
1:25c99a6:         TimeUnit.SECONDS.sleep(3);
1:25c99a6: 
1:25c99a6:         TabularData slowOnes = abortPolicy.getSlowConsumers();
1:25c99a6:         assertEquals("one slow consumers", 1, slowOnes.size());
1:25c99a6: 
1:25c99a6:         LOG.info("slow ones:"  + slowOnes);
1:25c99a6: 
1:25c99a6:         CompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();
1:25c99a6:         LOG.info("Slow one: " + slowOne);
1:25c99a6: 
1:25c99a6:         assertTrue("we have an object name", slowOne.get("subscription") instanceof ObjectName);
1:25c99a6:         abortPolicy.abortConsumer((ObjectName)slowOne.get("subscription"));
1:25c99a6: 
1:25c99a6:         assertTrue("Receiver should be closed", Wait.waitFor(new Wait.Condition() {
1:25c99a6: 
1:25c99a6:             @Override
1:25c99a6:             public boolean isSatisified() throws Exception {
1:25c99a6:                 return receiver.isClosed();
1:25c99a6:             }
1:25c99a6:         }));
1:25c99a6: 
1:25c99a6:         slowOnes = abortPolicy.getSlowConsumers();
1:25c99a6:         assertEquals("no slow consumers left", 0, slowOnes.size());
1:25c99a6: 
1:25c99a6:         // verify mbean gone with destination
1:25c99a6:         brokerService.getAdminView().removeQueue(getTestName());
1:25c99a6: 
1:25c99a6:         try {
1:25c99a6:             abortPolicy.getSlowConsumers();
1:25c99a6:             fail("expect not found post destination removal");
1:25c99a6:         } catch(UndeclaredThrowableException expected) {
1:25c99a6:             assertTrue("correct exception: " + expected.getCause(),
1:25c99a6:                     expected.getCause() instanceof InstanceNotFoundException);
1:25c99a6:         }
1:25c99a6:     }
1:25c99a6: 
1:25c99a6:     @Override
1:25c99a6:     protected boolean isUseOpenWireConnector() {
1:25c99a6:         return true;
1:25c99a6:     }
1:25c99a6: 
1:25c99a6:     @Override
1:25c99a6:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:25c99a6:         strategy = new AbortSlowConsumerStrategy();
1:25c99a6:         strategy.setAbortConnection(false);
1:25c99a6:         strategy.setCheckPeriod(DEFAULT_CHECK_PERIOD);
1:25c99a6:         strategy.setMaxSlowDuration(DEFAULT_MAX_SLOW_DURATION);
1:25c99a6: 
1:25c99a6:         PolicyEntry policy = new PolicyEntry();
1:25c99a6:         policy.setSlowConsumerStrategy(strategy);
1:25c99a6:         policy.setQueuePrefetch(10);
1:25c99a6:         policy.setTopicPrefetch(10);
1:25c99a6: 
1:25c99a6:         PolicyMap pMap = new PolicyMap();
1:25c99a6:         pMap.setDefaultEntry(policy);
1:25c99a6: 
1:25c99a6:         brokerService.setDestinationPolicy(pMap);
1:25c99a6:     }
1:25c99a6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.lang.reflect.UndeclaredThrowableException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.management.InstanceNotFoundException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.TabularData;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: /**
1:  * Test the handling of consumer abort when the AbortSlowConsumerStrategy is used.
1:  */
1: public class AmqpSlowReceiverTest extends AmqpClientTestSupport {
1: 
1:     private final long DEFAULT_CHECK_PERIOD = 1000;
1:     private final long DEFAULT_MAX_SLOW_DURATION = 3000;
1: 
1:     private AbortSlowConsumerStrategy strategy;
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSlowConsumerIsAborted() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1:         final AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(100);
1: 
1:         assertEquals(1, brokerService.getAdminView().getQueueSubscribers().length);
1: 
1:         sendMessages(getTestName(), 100, false);
1: 
1:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(message);
1:         message.accept();
1: 
1:         assertTrue("Receiver should be closed", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receiver.isClosed();
1:             }
1:         }));
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueueSubscribers().length);
1:     }
1: 
1:     @Test
1:     public void testSlowConsumerIsAbortedViaJmx() throws Exception {
1:         strategy.setMaxSlowDuration(60*1000); // so jmx does the abort
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1:         final AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(100);
1: 
1:         sendMessages(getTestName(), 100, false);
1: 
1:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(message);
1:         message.accept();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         ObjectName slowConsumerPolicyMBeanName = queue.getSlowConsumerStrategy();
1:         assertNotNull(slowConsumerPolicyMBeanName);
1: 
1:         AbortSlowConsumerStrategyViewMBean abortPolicy = (AbortSlowConsumerStrategyViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(slowConsumerPolicyMBeanName, AbortSlowConsumerStrategyViewMBean.class, true);
1: 
1:         TimeUnit.SECONDS.sleep(3);
1: 
1:         TabularData slowOnes = abortPolicy.getSlowConsumers();
1:         assertEquals("one slow consumers", 1, slowOnes.size());
1: 
1:         LOG.info("slow ones:"  + slowOnes);
1: 
1:         CompositeData slowOne = (CompositeData) slowOnes.values().iterator().next();
1:         LOG.info("Slow one: " + slowOne);
1: 
1:         assertTrue("we have an object name", slowOne.get("subscription") instanceof ObjectName);
1:         abortPolicy.abortConsumer((ObjectName)slowOne.get("subscription"));
1: 
1:         assertTrue("Receiver should be closed", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receiver.isClosed();
1:             }
1:         }));
1: 
1:         slowOnes = abortPolicy.getSlowConsumers();
1:         assertEquals("no slow consumers left", 0, slowOnes.size());
1: 
1:         // verify mbean gone with destination
1:         brokerService.getAdminView().removeQueue(getTestName());
1: 
1:         try {
1:             abortPolicy.getSlowConsumers();
1:             fail("expect not found post destination removal");
1:         } catch(UndeclaredThrowableException expected) {
1:             assertTrue("correct exception: " + expected.getCause(),
1:                     expected.getCause() instanceof InstanceNotFoundException);
1:         }
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:         strategy = new AbortSlowConsumerStrategy();
1:         strategy.setAbortConnection(false);
1:         strategy.setCheckPeriod(DEFAULT_CHECK_PERIOD);
1:         strategy.setMaxSlowDuration(DEFAULT_MAX_SLOW_DURATION);
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setSlowConsumerStrategy(strategy);
1:         policy.setQueuePrefetch(10);
1:         policy.setTopicPrefetch(10);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         brokerService.setDestinationPolicy(pMap);
1:     }
1: }
============================================================================