1:e6285b7: /**
1:e6285b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e6285b7:  * contributor license agreements.  See the NOTICE file distributed with
1:e6285b7:  * this work for additional information regarding copyright ownership.
1:e6285b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e6285b7:  * (the "License"); you may not use this file except in compliance with
1:e6285b7:  * the License.  You may obtain a copy of the License at
1:e6285b7:  *
1:e6285b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e6285b7:  *
1:e6285b7:  * Unless required by applicable law or agreed to in writing, software
1:e6285b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6285b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6285b7:  * See the License for the specific language governing permissions and
1:e6285b7:  * limitations under the License.
1:e6285b7:  */
1:e6285b7: package org.apache.activemq.transport.nio;
1:e6285b7: 
1:e6285b7: import java.io.IOException;
1:e6285b7: import java.net.Socket;
1:e6285b7: import java.net.URI;
1:e6285b7: import java.net.URISyntaxException;
1:e6285b7: 
1:e6285b7: import javax.net.ServerSocketFactory;
1:e6285b7: import javax.net.ssl.SSLContext;
1:e6285b7: 
1:e6285b7: import org.apache.activemq.transport.Transport;
1:e6285b7: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:e6285b7: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:e6285b7: import org.apache.activemq.wireformat.WireFormat;
1:e6285b7: 
1:e6285b7: public class NIOSSLTransportServer extends TcpTransportServer {
1:e6285b7: 
1:e6285b7:     private SSLContext context;
1:e6285b7: 
1:e6285b7:     public NIOSSLTransportServer(SSLContext context, TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:e6285b7:         super(transportFactory, location, serverSocketFactory);
1:e6285b7: 
1:e6285b7:         this.context = context;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     private boolean needClientAuth;
1:e6285b7:     private boolean wantClientAuth;
1:e6285b7: 
1:e6285b7:     @Override
1:e6285b7:     protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:04ee70a:         NIOSSLTransport transport = new NIOSSLTransport(format, socket, null, null, null);
1:e6285b7:         if (context != null) {
1:e6285b7:             transport.setSslContext(context);
1:e6285b7:         }
1:e6285b7: 
1:e6285b7:         transport.setNeedClientAuth(needClientAuth);
1:e6285b7:         transport.setWantClientAuth(wantClientAuth);
1:e6285b7: 
1:e6285b7:         return transport;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     @Override
1:e6285b7:     public boolean isSslServer() {
1:e6285b7:         return true;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     public boolean isNeedClientAuth() {
1:e6285b7:         return this.needClientAuth;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     public void setNeedClientAuth(boolean value) {
1:e6285b7:         this.needClientAuth = value;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     public boolean isWantClientAuth() {
1:e6285b7:         return this.wantClientAuth;
1:e6285b7:     }
1:e6285b7: 
1:e6285b7:     public void setWantClientAuth(boolean value) {
1:e6285b7:         this.wantClientAuth = value;
1:e6285b7:     }
1:e6285b7: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:         NIOSSLTransport transport = new NIOSSLTransport(format, socket, null, null, null);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e6285b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.ssl.SSLContext;
1: 
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
1: public class NIOSSLTransportServer extends TcpTransportServer {
1: 
1:     private SSLContext context;
1: 
1:     public NIOSSLTransportServer(SSLContext context, TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         super(transportFactory, location, serverSocketFactory);
1: 
1:         this.context = context;
1:     }
1: 
1:     private boolean needClientAuth;
1:     private boolean wantClientAuth;
1: 
1:     @Override
1:     protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
0:         NIOSSLTransport transport = new NIOSSLTransport(format, socket);
1:         if (context != null) {
1:             transport.setSslContext(context);
1:         }
1: 
1:         transport.setNeedClientAuth(needClientAuth);
1:         transport.setWantClientAuth(wantClientAuth);
1: 
1:         return transport;
1:     }
1: 
1:     @Override
1:     public boolean isSslServer() {
1:         return true;
1:     }
1: 
1:     public boolean isNeedClientAuth() {
1:         return this.needClientAuth;
1:     }
1: 
1:     public void setNeedClientAuth(boolean value) {
1:         this.needClientAuth = value;
1:     }
1: 
1:     public boolean isWantClientAuth() {
1:         return this.wantClientAuth;
1:     }
1: 
1:     public void setWantClientAuth(boolean value) {
1:         this.wantClientAuth = value;
1:     }
1: }
============================================================================