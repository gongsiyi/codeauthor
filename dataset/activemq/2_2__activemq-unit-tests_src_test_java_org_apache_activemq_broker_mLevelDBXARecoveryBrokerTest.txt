1:f75520f: /**
1:f75520f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f75520f:  * contributor license agreements.  See the NOTICE file distributed with
1:f75520f:  * this work for additional information regarding copyright ownership.
1:f75520f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f75520f:  * (the "License"); you may not use this file except in compliance with
1:f75520f:  * the License.  You may obtain a copy of the License at
1:f75520f:  *
1:f75520f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f75520f:  *
1:f75520f:  * Unless required by applicable law or agreed to in writing, software
1:f75520f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f75520f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f75520f:  * See the License for the specific language governing permissions and
1:f75520f:  * limitations under the License.
1:f75520f:  */
1:f75520f: package org.apache.activemq.broker;
1:f75520f: 
1:f75520f: import junit.framework.Test;
1:f75520f: import org.apache.activemq.command.ActiveMQDestination;
1:f75520f: import org.apache.activemq.command.ActiveMQQueue;
1:f75520f: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:f75520f: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:f75520f: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:f75520f: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1:f75520f: 
1:f75520f: import java.util.LinkedList;
1:f75520f: import java.util.List;
1:f75520f: 
1:f75520f: public class mLevelDBXARecoveryBrokerTest extends XARecoveryBrokerTest {
1:f75520f: 
1:f75520f:     @Override
1:f75520f:     protected void configureBroker(BrokerService broker) throws Exception {
1:f75520f:         super.configureBroker(broker);
1:f75520f: 
1:f75520f:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:f75520f:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:f75520f:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:f75520f:         defaultEntry.setPersistenceAdapter(new LevelDBPersistenceAdapter());
1:f75520f:         adapters.add(defaultEntry);
1:f75520f: 
1:f75520f:         FilteredKahaDBPersistenceAdapter special = new FilteredKahaDBPersistenceAdapter();
1:f75520f:         special.setDestination(new ActiveMQQueue("special"));
1:f75520f:         special.setPersistenceAdapter(new LevelDBPersistenceAdapter());
1:f75520f:         adapters.add(special);
1:f75520f: 
1:f75520f:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:f75520f:         broker.setPersistenceAdapter(mKahaDB);
1:f75520f:     }
1:f75520f: 
1:f75520f:     public static Test suite() {
1:f75520f:         return suite(mLevelDBXARecoveryBrokerTest.class);
1:f75520f:     }
1:f75520f: 
1:f75520f:     public static void main(String[] args) {
1:f75520f:         junit.textui.TestRunner.run(suite());
1:f75520f:     }
1:f75520f: 
1:f75520f:     protected ActiveMQDestination createDestination() {
1:f75520f:         return new ActiveMQQueue("test,special");
1:f75520f:     }
1:f75520f: 
1:f75520f:     public void testQueuePersistentPreparedAcksAvailableAfterRestartAndRollback() throws Exception {
1:f75520f:         // super.testQueuePersistentPreparedAcksAvailableAfterRestartAndRollback();
1:f75520f:     }
1:f75520f:     public void testQueuePersistentUncommittedAcksLostOnRestart() throws Exception {
1:f75520f:         // super.testQueuePersistentUncommittedAcksLostOnRestart();
1:f75520f:     }
1:314d5a5:     public void testQueuePersistentPreparedAcksNotLostOnRestart() throws Exception {
1:314d5a5:         // pending acks are not tracked in leveldb
1:314d5a5:     }
1:51ec459:     public void testQueuePersistentPreparedAcksAvailableAfterRollback() throws Exception {
1:51ec459:         // pending acks are not tracked in leveldb
1:51ec459:     }
1:f75520f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:51ec459
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentPreparedAcksAvailableAfterRollback() throws Exception {
1:         // pending acks are not tracked in leveldb
1:     }
commit:314d5a5
/////////////////////////////////////////////////////////////////////////
1:     public void testQueuePersistentPreparedAcksNotLostOnRestart() throws Exception {
1:         // pending acks are not tracked in leveldb
1:     }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:f75520f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import junit.framework.Test;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: public class mLevelDBXARecoveryBrokerTest extends XARecoveryBrokerTest {
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         super.configureBroker(broker);
1: 
1:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:         defaultEntry.setPersistenceAdapter(new LevelDBPersistenceAdapter());
1:         adapters.add(defaultEntry);
1: 
1:         FilteredKahaDBPersistenceAdapter special = new FilteredKahaDBPersistenceAdapter();
1:         special.setDestination(new ActiveMQQueue("special"));
1:         special.setPersistenceAdapter(new LevelDBPersistenceAdapter());
1:         adapters.add(special);
1: 
1:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:         broker.setPersistenceAdapter(mKahaDB);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(mLevelDBXARecoveryBrokerTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     protected ActiveMQDestination createDestination() {
1:         return new ActiveMQQueue("test,special");
1:     }
1: 
1:     public void testQueuePersistentPreparedAcksAvailableAfterRestartAndRollback() throws Exception {
1:         // super.testQueuePersistentPreparedAcksAvailableAfterRestartAndRollback();
1:     }
1:     public void testQueuePersistentUncommittedAcksLostOnRestart() throws Exception {
1:         // super.testQueuePersistentUncommittedAcksLostOnRestart();
1:     }
1: }
============================================================================