4:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
4:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
9:cdd5150: 
1:283cdd0: import java.io.DataInput;
1:283cdd0: import java.io.DataInputStream;
1:283cdd0: import java.io.DataOutput;
1:283cdd0: import java.io.DataOutputStream;
1:283cdd0: import java.io.IOException;
1:e102e64: import java.io.OutputStream;
1:e102e64: import java.nio.ByteBuffer;
1:e102e64: import java.nio.channels.Channels;
1:e102e64: import java.nio.channels.WritableByteChannel;
1:e102e64: 
1:3306467: import org.apache.activemq.transport.amqp.message.InboundTransformer;
1:cdd5150: import org.apache.activemq.util.ByteArrayInputStream;
1:cdd5150: import org.apache.activemq.util.ByteArrayOutputStream;
1:cdd5150: import org.apache.activemq.util.ByteSequence;
1:cdd5150: import org.apache.activemq.wireformat.WireFormat;
1:cdd5150: import org.fusesource.hawtbuf.Buffer;
1:0752d84: import org.slf4j.Logger;
1:0752d84: import org.slf4j.LoggerFactory;
1:283cdd0: 
1:cdd5150: public class AmqpWireFormat implements WireFormat {
1:cdd5150: 
1:0752d84:     private static final Logger LOG = LoggerFactory.getLogger(AmqpWireFormat.class);
1:0752d84: 
1:b2e6a41:     public static final long DEFAULT_MAX_FRAME_SIZE = Long.MAX_VALUE;
1:b2e6a41:     public static final int NO_AMQP_MAX_FRAME_SIZE = -1;
1:4b4cf7c:     public static final int DEFAULT_CONNECTION_TIMEOUT = 30000;
1:4b4cf7c:     public static final int DEFAULT_IDLE_TIMEOUT = 30000;
1:3306467:     public static final int DEFAULT_PRODUCER_CREDIT = 1000;
1:dbed28e:     public static final boolean DEFAULT_ALLOW_NON_SASL_CONNECTIONS = false;
1:b8cfab9:     public static final int DEFAULT_ANQP_FRAME_SIZE = 128 * 1024;
1:8b36701: 
1:61a3eab:     private static final int SASL_PROTOCOL = 3;
1:cdd5150: 
1:cdd5150:     private int version = 1;
1:283cdd0:     private long maxFrameSize = DEFAULT_MAX_FRAME_SIZE;
1:2e2d5dd:     private int maxAmqpFrameSize = DEFAULT_ANQP_FRAME_SIZE;
1:4b4cf7c:     private int connectAttemptTimeout = DEFAULT_CONNECTION_TIMEOUT;
1:4b4cf7c:     private int idelTimeout = DEFAULT_IDLE_TIMEOUT;
1:3306467:     private int producerCredit = DEFAULT_PRODUCER_CREDIT;
1:cd32c60:     private String transformer = InboundTransformer.TRANSFORMER_JMS;
1:c49db02:     private boolean allowNonSaslConnections = DEFAULT_ALLOW_NON_SASL_CONNECTIONS;
1:cdd5150: 
1:61a3eab:     private boolean magicRead = false;
1:61a3eab:     private ResetListener resetListener;
1:61a3eab: 
1:61a3eab:     public interface ResetListener {
1:61a3eab:         void onProtocolReset();
1:61a3eab:     }
1:61a3eab: 
1:283cdd0:     @Override
1:cdd5150:     public ByteSequence marshal(Object command) throws IOException {
1:cdd5150:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:cdd5150:         DataOutputStream dos = new DataOutputStream(baos);
1:cdd5150:         marshal(command, dos);
1:cdd5150:         dos.close();
1:cdd5150:         return baos.toByteSequence();
1:4881a84:     }
1:61a3eab: 
1:283cdd0:     @Override
1:cdd5150:     public Object unmarshal(ByteSequence packet) throws IOException {
1:cdd5150:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:cdd5150:         DataInputStream dis = new DataInputStream(stream);
1:cdd5150:         return unmarshal(dis);
1:4881a84:     }
1:4881a84: 
1:283cdd0:     @Override
1:cdd5150:     public void marshal(Object command, DataOutput dataOut) throws IOException {
1:e102e64:         if (command instanceof ByteBuffer) {
1:e102e64:             ByteBuffer buffer = (ByteBuffer) command;
1:4881a84: 
1:e102e64:             if (dataOut instanceof OutputStream) {
1:e102e64:                 WritableByteChannel channel = Channels.newChannel((OutputStream) dataOut);
1:e102e64:                 channel.write(buffer);
1:e102e64:             } else {
1:e102e64:                 while (buffer.hasRemaining()) {
1:e102e64:                     dataOut.writeByte(buffer.get());
1:78cb112:                 }
1:e102e64:             }
1:e102e64:         } else {
1:e102e64:             Buffer frame = (Buffer) command;
1:e102e64:             frame.writeTo(dataOut);
1:e102e64:         }
1:e102e64:     }
1:78cb112: 
1:283cdd0:     @Override
1:cdd5150:     public Object unmarshal(DataInput dataIn) throws IOException {
1:283cdd0:         if (!magicRead) {
1:cdd5150:             Buffer magic = new Buffer(8);
1:cdd5150:             magic.readFrom(dataIn);
1:cdd5150:             magicRead = true;
1:61a3eab:             return new AmqpHeader(magic, false);
1:cdd5150:         } else {
1:cdd5150:             int size = dataIn.readInt();
1:283cdd0:             if (size > maxFrameSize) {
1:cdd5150:                 throw new AmqpProtocolException("Frame size exceeded max frame length.");
1:a5c2f3f:             } else if (size <= 0) {
1:a5c2f3f:                 throw new AmqpProtocolException("Frame size value was invalid: " + size);
5:cdd5150:             }
1:cdd5150:             Buffer frame = new Buffer(size);
1:cdd5150:             frame.bigEndianEditor().writeInt(size);
1:cdd5150:             frame.readFrom(dataIn);
1:cdd5150:             frame.clear();
1:cdd5150:             return frame;
1:cdd5150:         }
1:cdd5150:     }
1:78cb112: 
1:61a3eab:     /**
1:61a3eab:      * Given an AMQP header validate that the AMQP magic is present and
1:61a3eab:      * if so that the version and protocol values align with what we support.
1:61a3eab:      *
1:c599844:      * In the case where authentication occurs the client sends us two AMQP
1:c599844:      * headers, the first being the SASL initial header which triggers the
1:c599844:      * authentication process and then if that succeeds we should get a second
1:c599844:      * AMQP header that does not contain the SASL protocol ID indicating the
1:c599844:      * connection process should follow the normal path.  We validate that the
1:c599844:      * header align with these expectations.
1:c599844:      *
1:61a3eab:      * @param header
1:61a3eab:      *        the header instance received from the client.
1:c599844:      * @param authenticated
1:c599844:      *        has the client already authenticated already.
1:61a3eab:      *
1:61a3eab:      * @return true if the header is valid against the current WireFormat.
1:61a3eab:      */
1:c599844:     public boolean isHeaderValid(AmqpHeader header, boolean authenticated) {
1:61a3eab:         if (!header.hasValidPrefix()) {
1:0752d84:             LOG.trace("AMQP Header arrived with invalid prefix: {}", header);
1:61a3eab:             return false;
1:c49db02:         }
1:c49db02: 
1:c599844:         if (!(header.getProtocolId() == 0 || header.getProtocolId() == SASL_PROTOCOL)) {
1:0752d84:             LOG.trace("AMQP Header arrived with invalid protocol ID: {}", header);
1:c49db02:             return false;
1:61a3eab:         }
1:61a3eab: 
1:c599844:         if (!authenticated && !isAllowNonSaslConnections() && header.getProtocolId() != SASL_PROTOCOL) {
1:0752d84:             LOG.trace("AMQP Header arrived without SASL and server requires SASL: {}", header);
1:61a3eab:             return false;
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         if (header.getMajor() != 1 || header.getMinor() != 0 || header.getRevision() != 0) {
1:0752d84:             LOG.trace("AMQP Header arrived invalid version: {}", header);
1:61a3eab:             return false;
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         return true;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     /**
1:61a3eab:      * Returns an AMQP Header object that represents the minimally protocol
1:61a3eab:      * versions supported by this transport.  A client that attempts to
1:61a3eab:      * connect with an AMQP version that doesn't at least meat this value
1:61a3eab:      * will receive this prior to the connection being closed.
1:61a3eab:      *
1:61a3eab:      * @return the minimal AMQP version needed from the client.
1:61a3eab:      */
1:61a3eab:     public AmqpHeader getMinimallySupportedHeader() {
1:61a3eab:         AmqpHeader header = new AmqpHeader();
1:61a3eab:         if (!isAllowNonSaslConnections()) {
1:61a3eab:             header.setProtocolId(3);
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         return header;
1:61a3eab:     }
1:61a3eab: 
1:283cdd0:     @Override
1:cdd5150:     public void setVersion(int version) {
1:cdd5150:         this.version = version;
1:cdd5150:     }
1:283cdd0: 
1:283cdd0:     @Override
1:cdd5150:     public int getVersion() {
1:cdd5150:         return this.version;
1:cdd5150:     }
1:cdd5150: 
1:61a3eab:     public void resetMagicRead() {
1:61a3eab:         this.magicRead = false;
1:61a3eab:         if (resetListener != null) {
1:61a3eab:             resetListener.onProtocolReset();
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void setProtocolResetListener(ResetListener listener) {
1:61a3eab:         this.resetListener = listener;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public boolean isMagicRead() {
1:61a3eab:         return this.magicRead;
1:61a3eab:     }
1:61a3eab: 
1:8387295:     public long getMaxFrameSize() {
1:8387295:         return maxFrameSize;
1:8387295:     }
1:8387295: 
1:8387295:     public void setMaxFrameSize(long maxFrameSize) {
1:8387295:         this.maxFrameSize = maxFrameSize;
1:8387295:     }
1:b2e6a41: 
1:b2e6a41:     public int getMaxAmqpFrameSize() {
1:b2e6a41:         return maxAmqpFrameSize;
1:b2e6a41:     }
1:b2e6a41: 
1:b2e6a41:     public void setMaxAmqpFrameSize(int maxAmqpFrameSize) {
1:b2e6a41:         this.maxAmqpFrameSize = maxAmqpFrameSize;
1:78cb112:     }
1:61a3eab: 
1:61a3eab:     public boolean isAllowNonSaslConnections() {
1:61a3eab:         return allowNonSaslConnections;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void setAllowNonSaslConnections(boolean allowNonSaslConnections) {
1:61a3eab:         this.allowNonSaslConnections = allowNonSaslConnections;
1:61a3eab:     }
1:8b36701: 
1:4b4cf7c:     public int getConnectAttemptTimeout() {
1:8b36701:         return connectAttemptTimeout;
1:8b36701:     }
1:8b36701: 
1:4b4cf7c:     public void setConnectAttemptTimeout(int connectAttemptTimeout) {
1:8b36701:         this.connectAttemptTimeout = connectAttemptTimeout;
1:8b36701:     }
1:3306467: 
1:3306467:     public void setProducerCredit(int producerCredit) {
1:3306467:         this.producerCredit = producerCredit;
1:3306467:     }
1:3306467: 
1:3306467:     public int getProducerCredit() {
1:3306467:         return producerCredit;
1:3306467:     }
1:3306467: 
1:3306467:     public String getTransformer() {
1:3306467:         return transformer;
1:3306467:     }
1:3306467: 
1:3306467:     public void setTransformer(String transformer) {
1:3306467:         this.transformer = transformer;
1:3306467:     }
1:4b4cf7c: 
1:4b4cf7c:     public int getIdleTimeout() {
1:4b4cf7c:         return idelTimeout;
1:4b4cf7c:     }
1:4b4cf7c: 
1:4b4cf7c:     public void setIdleTimeout(int idelTimeout) {
1:4b4cf7c:         this.idelTimeout = idelTimeout;
1:4b4cf7c:     }
1:b2e6a41: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b8cfab9
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_ANQP_FRAME_SIZE = 128 * 1024;
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
0:     public static final int DEFAULT_ANQP_FRAME_SIZE = NO_AMQP_MAX_FRAME_SIZE;
1:     private int maxAmqpFrameSize = DEFAULT_ANQP_FRAME_SIZE;
commit:0752d84
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpWireFormat.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:             LOG.trace("AMQP Header arrived with invalid prefix: {}", header);
1:             LOG.trace("AMQP Header arrived with invalid protocol ID: {}", header);
1:             LOG.trace("AMQP Header arrived without SASL and server requires SASL: {}", header);
1:             LOG.trace("AMQP Header arrived invalid version: {}", header);
commit:dbed28e
/////////////////////////////////////////////////////////////////////////
1:     public static final boolean DEFAULT_ALLOW_NON_SASL_CONNECTIONS = false;
commit:c599844
/////////////////////////////////////////////////////////////////////////
1:      * In the case where authentication occurs the client sends us two AMQP
1:      * headers, the first being the SASL initial header which triggers the
1:      * authentication process and then if that succeeds we should get a second
1:      * AMQP header that does not contain the SASL protocol ID indicating the
1:      * connection process should follow the normal path.  We validate that the
1:      * header align with these expectations.
1:      *
1:      * @param authenticated
1:      *        has the client already authenticated already.
1:     public boolean isHeaderValid(AmqpHeader header, boolean authenticated) {
1:         if (!(header.getProtocolId() == 0 || header.getProtocolId() == SASL_PROTOCOL)) {
1:         if (!authenticated && !isAllowNonSaslConnections() && header.getProtocolId() != SASL_PROTOCOL) {
commit:c49db02
/////////////////////////////////////////////////////////////////////////
0:     public static final boolean DEFAULT_ALLOW_NON_SASL_CONNECTIONS = true;
/////////////////////////////////////////////////////////////////////////
1:     private boolean allowNonSaslConnections = DEFAULT_ALLOW_NON_SASL_CONNECTIONS;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (!(header.getProtocolId() == 0 || header.getProtocolId() == 3)) {
1:             return false;
1:         }
1: 
commit:cd32c60
/////////////////////////////////////////////////////////////////////////
1:     private String transformer = InboundTransformer.TRANSFORMER_JMS;
commit:4b4cf7c
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_CONNECTION_TIMEOUT = 30000;
1:     public static final int DEFAULT_IDLE_TIMEOUT = 30000;
/////////////////////////////////////////////////////////////////////////
1:     private int connectAttemptTimeout = DEFAULT_CONNECTION_TIMEOUT;
1:     private int idelTimeout = DEFAULT_IDLE_TIMEOUT;
/////////////////////////////////////////////////////////////////////////
1:     public int getConnectAttemptTimeout() {
1:     public void setConnectAttemptTimeout(int connectAttemptTimeout) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getIdleTimeout() {
1:         return idelTimeout;
1:     }
1: 
1:     public void setIdleTimeout(int idelTimeout) {
1:         this.idelTimeout = idelTimeout;
1:     }
commit:a5c2f3f
/////////////////////////////////////////////////////////////////////////
1:             } else if (size <= 0) {
1:                 throw new AmqpProtocolException("Frame size value was invalid: " + size);
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.message.InboundTransformer;
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_PRODUCER_CREDIT = 1000;
/////////////////////////////////////////////////////////////////////////
1:     private int producerCredit = DEFAULT_PRODUCER_CREDIT;
0:     private String transformer = InboundTransformer.TRANSFORMER_NATIVE;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setProducerCredit(int producerCredit) {
1:         this.producerCredit = producerCredit;
1:     }
1: 
1:     public int getProducerCredit() {
1:         return producerCredit;
1:     }
1: 
1:     public String getTransformer() {
1:         return transformer;
1:     }
1: 
1:     public void setTransformer(String transformer) {
1:         this.transformer = transformer;
1:     }
commit:8b36701
/////////////////////////////////////////////////////////////////////////
0:     public static final long DEFAULT_CONNECTION_TIMEOUT = 30000L;
1: 
0:     private long connectAttemptTimeout = DEFAULT_CONNECTION_TIMEOUT;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public long getConnectAttemptTimeout() {
1:         return connectAttemptTimeout;
1:     }
1: 
0:     public void setConnectAttemptTimeout(long connectAttemptTimeout) {
1:         this.connectAttemptTimeout = connectAttemptTimeout;
1:     }
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1:     private static final int SASL_PROTOCOL = 3;
1:     private boolean magicRead = false;
1:     private ResetListener resetListener;
1: 
1:     public interface ResetListener {
1:         void onProtocolReset();
1:     }
1: 
0:     private boolean allowNonSaslConnections = true;
1: 
/////////////////////////////////////////////////////////////////////////
1:             return new AmqpHeader(magic, false);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Given an AMQP header validate that the AMQP magic is present and
1:      * if so that the version and protocol values align with what we support.
1:      *
1:      * @param header
1:      *        the header instance received from the client.
1:      *
1:      * @return true if the header is valid against the current WireFormat.
1:      */
0:     public boolean isHeaderValid(AmqpHeader header) {
1:         if (!header.hasValidPrefix()) {
1:             return false;
1:         }
1: 
0:         if (!isAllowNonSaslConnections() && header.getProtocolId() != SASL_PROTOCOL) {
1:             return false;
1:         }
1: 
1:         if (header.getMajor() != 1 || header.getMinor() != 0 || header.getRevision() != 0) {
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: 
1:     /**
1:      * Returns an AMQP Header object that represents the minimally protocol
1:      * versions supported by this transport.  A client that attempts to
1:      * connect with an AMQP version that doesn't at least meat this value
1:      * will receive this prior to the connection being closed.
1:      *
1:      * @return the minimal AMQP version needed from the client.
1:      */
1:     public AmqpHeader getMinimallySupportedHeader() {
1:         AmqpHeader header = new AmqpHeader();
1:         if (!isAllowNonSaslConnections()) {
1:             header.setProtocolId(3);
1:         }
1: 
1:         return header;
1:     }
1: 
1:     public void resetMagicRead() {
1:         this.magicRead = false;
1:         if (resetListener != null) {
1:             resetListener.onProtocolReset();
1:         }
1:     }
1: 
1:     public void setProtocolResetListener(ResetListener listener) {
1:         this.resetListener = listener;
1:     }
1: 
1:     public boolean isMagicRead() {
1:         return this.magicRead;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isAllowNonSaslConnections() {
1:         return allowNonSaslConnections;
1:     }
1: 
1:     public void setAllowNonSaslConnections(boolean allowNonSaslConnections) {
1:         this.allowNonSaslConnections = allowNonSaslConnections;
1:     }
commit:0b148ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4881a84
/////////////////////////////////////////////////////////////////////////
0:     private boolean useByteDestinationTypeAnnotation = false;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isUseByteDestinationTypeAnnotation() {
0:         return useByteDestinationTypeAnnotation;
1:     }
1: 
0:     public void setUseByteDestinationTypeAnnotation(boolean useByteDestinationTypeAnnotation) {
0:         this.useByteDestinationTypeAnnotation = useByteDestinationTypeAnnotation;
1:     }
commit:78cb112
/////////////////////////////////////////////////////////////////////////
0:     private String anonymousNodeName = "$relay";
/////////////////////////////////////////////////////////////////////////
1: 
0:     public String getAnonymousNodeName() {
0:         return anonymousNodeName;
1:     }
1: 
0:     public void setAnonymousNodeName(String anonymousNodeName) {
0:         this.anonymousNodeName = anonymousNodeName;
1:     }
commit:b2e6a41
/////////////////////////////////////////////////////////////////////////
1:     public static final long DEFAULT_MAX_FRAME_SIZE = Long.MAX_VALUE;
1:     public static final int NO_AMQP_MAX_FRAME_SIZE = -1;
0:     private int maxAmqpFrameSize = NO_AMQP_MAX_FRAME_SIZE;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxAmqpFrameSize() {
1:         return maxAmqpFrameSize;
1:     }
1: 
1:     public void setMaxAmqpFrameSize(int maxAmqpFrameSize) {
1:         this.maxAmqpFrameSize = maxAmqpFrameSize;
1:     }
commit:e102e64
/////////////////////////////////////////////////////////////////////////
1: import java.io.OutputStream;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.Channels;
1: import java.nio.channels.WritableByteChannel;
/////////////////////////////////////////////////////////////////////////
1:         if (command instanceof ByteBuffer) {
1:             ByteBuffer buffer = (ByteBuffer) command;
1: 
1:             if (dataOut instanceof OutputStream) {
1:                 WritableByteChannel channel = Channels.newChannel((OutputStream) dataOut);
1:                 channel.write(buffer);
1:             } else {
1:                 while (buffer.hasRemaining()) {
1:                     dataOut.writeByte(buffer.get());
1:                 }
1:             }
1:         } else {
1:             Buffer frame = (Buffer) command;
1:             frame.writeTo(dataOut);
1:         }
commit:283cdd0
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataInputStream;
1: import java.io.DataOutput;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0:     public static final int DEFAULT_MAX_FRAME_SIZE = 1024 * 1024 * 1;
1:     private long maxFrameSize = DEFAULT_MAX_FRAME_SIZE;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1: 
1:     @Override
1:         if (!magicRead) {
1:             if (size > maxFrameSize) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:741b739
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:8387295
/////////////////////////////////////////////////////////////////////////
0:     private long maxFrameSize = 1024*1024*100;
/////////////////////////////////////////////////////////////////////////
0:             if( size > maxFrameSize) {
/////////////////////////////////////////////////////////////////////////
1:     public long getMaxFrameSize() {
1:         return maxFrameSize;
1:     }
1: 
1:     public void setMaxFrameSize(long maxFrameSize) {
1:         this.maxFrameSize = maxFrameSize;
1:     }
commit:dc4ceb4
/////////////////////////////////////////////////////////////////////////
0:             return new AmqpHeader(magic);
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.fusesource.hawtbuf.Buffer;
1: 
0: import java.io.*;
1: 
1: /**
1:  */
1: public class AmqpWireFormat implements WireFormat {
1: 
1: 
1:     private int version = 1;
0:     private long maxFrameLength = 1024*1024*100;
1: 
1:     public ByteSequence marshal(Object command) throws IOException {
1:         ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:         DataOutputStream dos = new DataOutputStream(baos);
1:         marshal(command, dos);
1:         dos.close();
1:         return baos.toByteSequence();
1:     }
1: 
1:     public Object unmarshal(ByteSequence packet) throws IOException {
1:         ByteArrayInputStream stream = new ByteArrayInputStream(packet);
1:         DataInputStream dis = new DataInputStream(stream);
1:         return unmarshal(dis);
1:     }
1: 
1:     public void marshal(Object command, DataOutput dataOut) throws IOException {
0:         Buffer frame = (Buffer) command;
0:         frame.writeTo(dataOut);
1:     }
1: 
0:     boolean magicRead = false;
1:     public Object unmarshal(DataInput dataIn) throws IOException {
0:         if( !magicRead ) {
1:             Buffer magic = new Buffer(8);
1:             magic.readFrom(dataIn);
1:             magicRead = true;
0:             return magic;
1:         } else {
1:             int size = dataIn.readInt();
0:             if( size > maxFrameLength ) {
1:                 throw new AmqpProtocolException("Frame size exceeded max frame length.");
1:             }
1:             Buffer frame = new Buffer(size);
1:             frame.bigEndianEditor().writeInt(size);
1:             frame.readFrom(dataIn);
1:             frame.clear();
1:             return frame;
1:         }
1:     }
1: 
1:     /**
1:      */
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1: 
1:     /**
0:      * @return the version of the wire format
1:      */
1:     public int getVersion() {
1:         return this.version;
1:     }
1: 
1: 
1: }
============================================================================