1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
1:5f1adbe: 
1:1787eda: import javax.management.ObjectName;
1:5f1adbe: import org.apache.activemq.console.util.JmxMBeansUtil;
13:a107823: 
1:eece06b: import java.util.*;
1:eece06b: 
1:a107823: public class QueryCommand extends AbstractJmxCommand {
1:a107823:     // Predefined type=identifier query
1:a107823:     private static final Properties PREDEFINED_OBJNAME_QUERY = new Properties();
1:a107823: 
1:a107823:     static {
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "brokerName=%1");
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "connector=clientConnectors,connectionViewType=*,connectionName=%1,*");
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "connector=clientConnectors,connectorName=%1");
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "connector=networkConnectors,networkConnectorName=%1");
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "destinationType=Queue,destinationName=%1");
1:1787eda:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "destinationType=Topic,destinationName=%1");
2:a107823:     };
1:a107823: 
1:5f1adbe:     protected String[] helpFile = new String[] {
1:5f1adbe:         "Task Usage: Main query [query-options]",
1:5f1adbe:         "Description: Display selected broker component's attributes and statistics.",
1:5f1adbe:         "",
1:5f1adbe:         "Query Options:",
1:5f1adbe:         "    -Q<type>=<name>               Add to the search list the specific object type matched",
1:5f1adbe:         "                                  by the defined object identifier.",
1:5f1adbe:         "    -xQ<type>=<name>              Remove from the search list the specific object type",
1:5f1adbe:         "                                  matched by the object identifier.",
1:5f1adbe:         "    --objname <query>             Add to the search list objects matched by the query similar",
1:5f1adbe:         "                                  to the JMX object name format.",
1:5f1adbe:         "    --xobjname <query>            Remove from the search list objects matched by the query",
1:5f1adbe:         "                                  similar to the JMX object name format.",
1:5f1adbe:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the object to view.",
1:5f1adbe:         "                                  By default all attributes will be displayed.",
1:1787eda:         "    --invoke <operation>          Specify the operation to invoke on matching objects",
1:5f1adbe:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:87eba29:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
1:0dec0b6:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:0dec0b6:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:0dec0b6:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:5f1adbe:         "    --version                     Display the version information.",
1:5f1adbe:         "    -h,-?,--help                  Display the query broker help information.",
1:5f1adbe:         "", "Examples:",
1:5f1adbe:         "    query",
1:5f1adbe:         "        - Print all the attributes of all registered objects queues, topics, connections, etc).",
1:5f1adbe:         "",
1:5f1adbe:         "    query -QQueue=TEST.FOO",
1:5f1adbe:         "        - Print all the attributes of the queue with destination name TEST.FOO.",
1:5f1adbe:         "",
1:5f1adbe:         "    query -QTopic=*",
1:5f1adbe:         "        - Print all the attributes of all registered topics.",
1:5f1adbe:         "",
1:5f1adbe:         "    query --view EnqueueCount,DequeueCount", 
1:5f1adbe:         "        - Print the attributes EnqueueCount and DequeueCount of all registered objects.",
1:5f1adbe:         "",
1:5f1adbe:         "    query -QTopic=* --view EnqueueCount,DequeueCount",
1:5f1adbe:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics.",
1:5f1adbe:         "",
1:5f1adbe:         "    query -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount",
1:5f1adbe:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics and",
1:5f1adbe:         "          queues.",
1:5f1adbe:         "",
1:5f1adbe:         "    query -QTopic=* -xQTopic=ActiveMQ.Advisory.*", 
1:5f1adbe:         "        - Print all attributes of all topics except those that has a name that begins",
1:5f1adbe:         "          with \"ActiveMQ.Advisory\".",
1:5f1adbe:         "",
1:1787eda:         "    query --objname type=Broker,brokerName=*,connector=clientConnectors,connectorName=* -xQNetworkConnector=*",
1:5f1adbe:         "        - Print all attributes of all connectors, connections excluding network connectors",
1:5f1adbe:         "          that belongs to the broker that begins with local.", 
1:5f1adbe:         "", 
1:5f1adbe:         "    query -QQueue=* -xQQueue=????", 
1:5f1adbe:         "        - Print all attributes of all queues except those that are 4 letters long.",
1:5f1adbe:         "",
1:1787eda:         "    query -QQueue=* --invoke pause",
1:1787eda:         "        - Pause all queues.",
1:1787eda:         "",
1:1787eda: 
1:5f1adbe:     };
1:5f1adbe: 
1:5f1adbe:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:5f1adbe:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:eece06b:     private final Set queryViews = new LinkedHashSet();
1:1787eda:     private final List<String> opAndParams = new ArrayList<String>(10);
1:a107823: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "query";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Display selected broker component's attributes and statistics.";
1:60646c9:     }
1:60646c9: 
1:a107823:     /**
1:a107823:      * Queries the mbeans registered in the specified JMX context
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void runTask(List<String> tokens) throws Exception {
1:73f9131:         // Query for the mbeans to add
1:73f9131:         Map<Object, List> addMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), queryAddObjects, queryViews);
1:73f9131:         // Query for the mbeans to sub
1:73f9131:         if (querySubObjects.size() > 0) {
1:73f9131:             Map<Object, List> subMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), querySubObjects, queryViews);
1:73f9131:             addMBeans.keySet().removeAll(subMBeans.keySet());
1:73f9131:         }
1:1787eda: 
1:73f9131:         if (opAndParams.isEmpty()) {
1:73f9131:             context.printMBean(JmxMBeansUtil.filterMBeansView(new ArrayList(addMBeans.values()), queryViews));
1:73f9131:         } else {
1:73f9131:             context.print(doInvoke(addMBeans.keySet(), opAndParams));
1:1787eda:         }
6:a107823:     }
1:a107823: 
1:1787eda:     private Collection doInvoke(Set<Object> mBeans, List<String> opAndParams) throws Exception {
1:1787eda:         LinkedList<String> results = new LinkedList<>();
1:1787eda:         for (Object objectName : mBeans) {
1:1787eda:             Object result = createJmxConnection().invoke((ObjectName) objectName, opAndParams.get(0),
1:1787eda:                     params(opAndParams), stringSignature(opAndParams));
1:1787eda:             results.add("[" + objectName + "]." + opAndParams.get(0) + " = " + result);
1:1787eda:         }
1:1787eda:         return results;
1:1787eda:     }
1:1787eda: 
1:1787eda:     private Object[] params(List<String> opAndParams) {
1:1787eda:         if (opAndParams.size() > 1) {
1:1787eda:             return opAndParams.subList(1, opAndParams.size()).toArray();
1:1787eda:         } else {
1:1787eda:             return null;
1:1787eda:         }
1:1787eda:     }
1:1787eda: 
1:1787eda:     private String[] stringSignature(List<String> opAndParams) {
1:1787eda:         if (opAndParams.size() > 1) {
1:1787eda:             String[] sig = new String[opAndParams.size() - 1];
1:1787eda:             Arrays.fill(sig, String.class.getName());
1:1787eda:             return sig;
1:1787eda:         } else {
1:1787eda:             return null;
1:1787eda:         }
1:1787eda:     }
1:1787eda: 
1:1787eda: 
1:a107823:     /**
1:1787eda:      * Handle the -Q, -xQ, --objname, --xobjname, --view --invoke options.
1:5f1adbe:      * 
1:a107823:      * @param token - option token to handle
1:a107823:      * @param tokens - succeeding command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:a107823:         // If token is a additive predefined query define option
1:a107823:         if (token.startsWith("-Q")) {
1:a107823:             String key = token.substring(2);
1:a107823:             String value = "";
1:a107823:             int pos = key.indexOf("=");
1:a107823:             if (pos >= 0) {
1:a107823:                 value = key.substring(pos + 1);
1:a107823:                 key = key.substring(0, pos);
1:a107823:             }
1:a107823: 
1:a107823:             // If additive query
1:a107823:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
1:a107823:             if (predefQuery == null) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Unknown query object type: " + key));
1:a107823:                 return;
1:a107823:             }
1:a107823:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
1:2df306c:             StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND_OPTION_DELIMETER);
1:2df306c:             while (queryTokens.hasMoreTokens()) {
1:2df306c:                 queryAddObjects.add(queryTokens.nextToken());
1:a107823:             }
1:1787eda:             normaliseObjectName(queryAddObjects);
1:5f1adbe:         } else if (token.startsWith("-xQ")) {
1:5f1adbe:             // If token is a substractive predefined query define option
1:a107823:             String key = token.substring(3);
1:a107823:             String value = "";
1:a107823:             int pos = key.indexOf("=");
1:a107823:             if (pos >= 0) {
1:a107823:                 value = key.substring(pos + 1);
1:a107823:                 key = key.substring(0, pos);
1:a107823:             }
1:a107823: 
1:a107823:             // If subtractive query
1:a107823:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
1:a107823:             if (predefQuery == null) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Unknown query object type: " + key));
1:a107823:                 return;
1:a107823:             }
1:a107823:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
1:2df306c:             StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND_OPTION_DELIMETER);
1:2df306c:             while (queryTokens.hasMoreTokens()) {
1:2df306c:                 querySubObjects.add(queryTokens.nextToken());
1:a107823:             }
1:1787eda:             normaliseObjectName(querySubObjects);
1:5f1adbe:         } else if (token.startsWith("--objname")) {
1:5f1adbe:             // If token is an additive object name query option
1:a107823: 
1:5f1adbe:             // If no object name query is specified, or next token is a new
1:5f1adbe:             // option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Object name query not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 queryAddObjects.add(queryTokens.nextToken());
1:a107823:             }
1:5f1adbe:         } else if (token.startsWith("--xobjname")) {
1:5f1adbe:             // If token is a substractive object name query option
1:a107823: 
1:5f1adbe:             // If no object name query is specified, or next token is a new
1:5f1adbe:             // option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Object name query not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 querySubObjects.add(queryTokens.nextToken());
1:a107823:             }
1:5f1adbe:         } else if (token.startsWith("--view")) {
1:5f1adbe:             // If token is a view option
1:a107823: 
1:a107823:             // If no view specified, or next token is a new option
1:a107823:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:a107823:             // Add the attributes to view
1:a107823:             Enumeration viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (viewTokens.hasMoreElements()) {
1:a107823:                 queryViews.add(viewTokens.nextElement());
1:a107823:             }
1:1787eda:         } else if (token.startsWith("--invoke")) {
1:1787eda: 
1:1787eda:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:1787eda:                 context.printException(new IllegalArgumentException("operation to invoke is not specified"));
1:1787eda:                 return;
1:1787eda:             }
1:1787eda: 
1:1787eda:             // add op and params
1:1787eda:             Enumeration viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:1787eda:             while (viewTokens.hasMoreElements()) {
1:1787eda:                 opAndParams.add((String)viewTokens.nextElement());
1:1787eda:             }
1:1787eda: 
1:1787eda:         } else {
1:5f1adbe:             // Let super class handle unknown option
1:a107823:             super.handleOption(token, tokens);
1:a107823:         }
1:a107823:     }
1:a107823: 
1:1787eda:     private void normaliseObjectName(List<String> queryAddObjects) {
1:1787eda:         ensurePresent(queryAddObjects, "type", "Broker");
1:1787eda:         ensurePresent(queryAddObjects, "brokerName", "*");
1:1787eda: 
1:1787eda:         // -QQueue && -QTopic
1:1787eda:         ensureUnique(queryAddObjects, "destinationType", "?????");
1:1787eda:         ensureUnique(queryAddObjects, "destinationName", "*");
1:1787eda:     }
1:1787eda: 
1:1787eda:     private void ensurePresent(List<String> queryAddObjects, String id, String wildcard) {
1:1787eda:         List<String> matches = findMatchingKeys(queryAddObjects, id);
1:1787eda:         if (matches.size() == 0) {
1:1787eda:             queryAddObjects.add(id + "=" + wildcard);
1:1787eda:         }
1:1787eda:     }
1:1787eda: 
1:1787eda:     private void ensureUnique(List<String> queryAddObjects, String id, String wildcard) {
1:1787eda:         List<String> matches = findMatchingKeys(queryAddObjects, id);
1:1787eda:         if (matches.size() > 1) {
1:1787eda:             queryAddObjects.removeAll(matches);
1:1787eda:             queryAddObjects.add(id + "=" + wildcard);
1:1787eda:         }
1:1787eda:     }
1:1787eda: 
1:1787eda:     private List<String> findMatchingKeys(List<String> queryAddObjects, String id) {
1:1787eda:         List<String> matches = new LinkedList<>();
1:1787eda:         for (String prop : queryAddObjects) {
1:1787eda:             String[] keyValue = prop.split("=");
1:1787eda:             if (keyValue.length == 2 && keyValue[0].equals(id)) {
1:1787eda:                 matches.add(prop);
1:1787eda:             }
1:1787eda:         }
1:1787eda:         return matches;
1:1787eda:     }
1:1787eda: 
1:a107823:     /**
1:a107823:      * Print the help messages for the browse command
1:a107823:      */
1:a107823:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:a107823:     }
1:5f1adbe: 
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1:         // Query for the mbeans to add
1:         Map<Object, List> addMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), queryAddObjects, queryViews);
1:         // Query for the mbeans to sub
1:         if (querySubObjects.size() > 0) {
1:             Map<Object, List> subMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), querySubObjects, queryViews);
1:             addMBeans.keySet().removeAll(subMBeans.keySet());
1:         }
1:         if (opAndParams.isEmpty()) {
1:             context.printMBean(JmxMBeansUtil.filterMBeansView(new ArrayList(addMBeans.values()), queryViews));
1:         } else {
1:             context.print(doInvoke(addMBeans.keySet(), opAndParams));
commit:eece06b
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Set queryViews = new LinkedHashSet();
/////////////////////////////////////////////////////////////////////////
0:             Map<String,List> addMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), queryAddObjects, queryViews);
0:                 Map<String,List> subMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), querySubObjects, queryViews);
0:                 addMBeans.keySet().removeAll(subMBeans.keySet());
0:             context.printMBean(JmxMBeansUtil.filterMBeansView(new ArrayList(addMBeans.values()), queryViews));
author:gtully
-------------------------------------------------------------------------------
commit:1787eda
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "brokerName=%1");
1:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "connector=clientConnectors,connectionViewType=*,connectionName=%1,*");
1:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "connector=clientConnectors,connectorName=%1");
1:         PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "connector=networkConnectors,networkConnectorName=%1");
1:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "destinationType=Queue,destinationName=%1");
1:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "destinationType=Topic,destinationName=%1");
/////////////////////////////////////////////////////////////////////////
1:         "    --invoke <operation>          Specify the operation to invoke on matching objects",
/////////////////////////////////////////////////////////////////////////
1:         "    query --objname type=Broker,brokerName=*,connector=clientConnectors,connectorName=* -xQNetworkConnector=*",
1:         "    query -QQueue=* --invoke pause",
1:         "        - Pause all queues.",
1:         "",
1: 
1:     private final List<String> opAndParams = new ArrayList<String>(10);
/////////////////////////////////////////////////////////////////////////
0:             Map<Object,List> addMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), queryAddObjects, queryViews);
0:                 Map<Object,List> subMBeans = JmxMBeansUtil.queryMBeansAsMap(createJmxConnection(), querySubObjects, queryViews);
1: 
0:             if (opAndParams.isEmpty()) {
0:                 context.printMBean(JmxMBeansUtil.filterMBeansView(new ArrayList(addMBeans.values()), queryViews));
1:             } else {
0:                 context.print(doInvoke(addMBeans.keySet(), opAndParams));
1:             }
1:     private Collection doInvoke(Set<Object> mBeans, List<String> opAndParams) throws Exception {
1:         LinkedList<String> results = new LinkedList<>();
1:         for (Object objectName : mBeans) {
1:             Object result = createJmxConnection().invoke((ObjectName) objectName, opAndParams.get(0),
1:                     params(opAndParams), stringSignature(opAndParams));
1:             results.add("[" + objectName + "]." + opAndParams.get(0) + " = " + result);
1:         }
1:         return results;
1:     }
1: 
1:     private Object[] params(List<String> opAndParams) {
1:         if (opAndParams.size() > 1) {
1:             return opAndParams.subList(1, opAndParams.size()).toArray();
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1:     private String[] stringSignature(List<String> opAndParams) {
1:         if (opAndParams.size() > 1) {
1:             String[] sig = new String[opAndParams.size() - 1];
1:             Arrays.fill(sig, String.class.getName());
1:             return sig;
1:         } else {
1:             return null;
1:         }
1:     }
1: 
1: 
1:      * Handle the -Q, -xQ, --objname, --xobjname, --view --invoke options.
/////////////////////////////////////////////////////////////////////////
1:             normaliseObjectName(queryAddObjects);
/////////////////////////////////////////////////////////////////////////
1:             normaliseObjectName(querySubObjects);
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--invoke")) {
1: 
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
1:                 context.printException(new IllegalArgumentException("operation to invoke is not specified"));
1:                 return;
1:             }
1: 
1:             // add op and params
1:             Enumeration viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (viewTokens.hasMoreElements()) {
1:                 opAndParams.add((String)viewTokens.nextElement());
1:             }
1: 
1:     private void normaliseObjectName(List<String> queryAddObjects) {
1:         ensurePresent(queryAddObjects, "type", "Broker");
1:         ensurePresent(queryAddObjects, "brokerName", "*");
1: 
1:         // -QQueue && -QTopic
1:         ensureUnique(queryAddObjects, "destinationType", "?????");
1:         ensureUnique(queryAddObjects, "destinationName", "*");
1:     }
1: 
1:     private void ensurePresent(List<String> queryAddObjects, String id, String wildcard) {
1:         List<String> matches = findMatchingKeys(queryAddObjects, id);
1:         if (matches.size() == 0) {
1:             queryAddObjects.add(id + "=" + wildcard);
1:         }
1:     }
1: 
1:     private void ensureUnique(List<String> queryAddObjects, String id, String wildcard) {
1:         List<String> matches = findMatchingKeys(queryAddObjects, id);
1:         if (matches.size() > 1) {
1:             queryAddObjects.removeAll(matches);
1:             queryAddObjects.add(id + "=" + wildcard);
1:         }
1:     }
1: 
1:     private List<String> findMatchingKeys(List<String> queryAddObjects, String id) {
1:         List<String> matches = new LinkedList<>();
1:         for (String prop : queryAddObjects) {
1:             String[] keyValue = prop.split("=");
1:             if (keyValue.length == 2 && keyValue[0].equals(id)) {
1:                 matches.add(prop);
1:             }
1:         }
1:         return matches;
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1a1ebd9
/////////////////////////////////////////////////////////////////////////
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "type=Broker,brokerName=%1");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "type=Broker,connector=clientConnectors,connectionName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "type=Broker,brokerName=*,connector=clientConnectors,connectorName=%1");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "type=Broker,brokerName=%1,connector=networkConnectors,networkConnectorName=*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "type=Broker,brokerName=*,destinationType=Queue,destinationName=%1");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "type=Broker,brokerName=*,destinationType=Topic,destinationName=%1,*");
commit:87eba29
/////////////////////////////////////////////////////////////////////////
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "query";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Display selected broker component's attributes and statistics.";
1:     }
1: 
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
0:             context.printException(new RuntimeException("Failed to execute query task. Reason: " + e));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Unknown query object type: " + key));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Unknown query object type: " + key));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Object name query not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Object name query not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Attributes to view not specified"));
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import java.util.Properties;
0: import java.util.Set;
0: import java.util.StringTokenizer;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "Type=Broker,BrokerName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "Type=Connection,Connection=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "Type=Connector,ConnectorName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "Type=Queue,Destination=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "Type=Topic,Destination=%1,*");
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: Main query [query-options]",
1:         "Description: Display selected broker component's attributes and statistics.",
1:         "",
1:         "Query Options:",
1:         "    -Q<type>=<name>               Add to the search list the specific object type matched",
1:         "                                  by the defined object identifier.",
1:         "    -xQ<type>=<name>              Remove from the search list the specific object type",
1:         "                                  matched by the object identifier.",
1:         "    --objname <query>             Add to the search list objects matched by the query similar",
1:         "                                  to the JMX object name format.",
1:         "    --xobjname <query>            Remove from the search list objects matched by the query",
1:         "                                  similar to the JMX object name format.",
1:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the object to view.",
1:         "                                  By default all attributes will be displayed.",
1:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:         "    --version                     Display the version information.",
1:         "    -h,-?,--help                  Display the query broker help information.",
1:         "", "Examples:",
1:         "    query",
1:         "        - Print all the attributes of all registered objects queues, topics, connections, etc).",
1:         "",
1:         "    query -QQueue=TEST.FOO",
1:         "        - Print all the attributes of the queue with destination name TEST.FOO.",
1:         "",
1:         "    query -QTopic=*",
1:         "        - Print all the attributes of all registered topics.",
1:         "",
1:         "    query --view EnqueueCount,DequeueCount", 
1:         "        - Print the attributes EnqueueCount and DequeueCount of all registered objects.",
1:         "",
1:         "    query -QTopic=* --view EnqueueCount,DequeueCount",
1:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics.",
1:         "",
1:         "    query -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount",
1:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics and",
1:         "          queues.",
1:         "",
1:         "    query -QTopic=* -xQTopic=ActiveMQ.Advisory.*", 
1:         "        - Print all attributes of all topics except those that has a name that begins",
1:         "          with \"ActiveMQ.Advisory\".",
1:         "",
0:         "    query --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*",
1:         "        - Print all attributes of all connectors, connections excluding network connectors",
1:         "          that belongs to the broker that begins with local.", 
1:         "", 
1:         "    query -QQueue=* -xQQueue=????", 
1:         "        - Print all attributes of all queues except those that are 4 letters long.",
1:         "",
1:     };
1: 
1:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:     private final List<String> querySubObjects = new ArrayList<String>(10);
0:     private final Set queryViews = new HashSet(10);
1:      * 
1:     protected void runTask(List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("-xQ")) {
1:             // If token is a substractive predefined query define option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--objname")) {
1:             // If token is an additive object name query option
1:             // If no object name query is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--xobjname")) {
1:             // If token is a substractive object name query option
1:             // If no object name query is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--view")) {
1:             // If token is a view option
/////////////////////////////////////////////////////////////////////////
0:         } else {
1:             // Let super class handle unknown option
/////////////////////////////////////////////////////////////////////////
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: 
0: import java.util.List;
0: import java.util.Properties;
0: import java.util.ArrayList;
0: import java.util.Enumeration;
0: import java.util.StringTokenizer;
0: import java.util.Set;
0: import java.util.HashSet;
1: 
1: public class QueryCommand extends AbstractJmxCommand {
1:     // Predefined type=identifier query
1:     private static final Properties PREDEFINED_OBJNAME_QUERY = new Properties();
1: 
1:     static {
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker",           "Type=Broker,BrokerName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection",       "Type=Connection,Connection=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector",        "Type=Connector,ConnectorName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "Type=NetworkConnector,BrokerName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue",            "Type=Queue,Destination=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic",            "Type=Topic,Destination=%1,*");
1:     };
1: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  queryViews      = new HashSet(10);
1: 
1:     /**
1:      * Queries the mbeans registered in the specified JMX context
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // Query for the mbeans to add
0:             List addMBeans = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), queryAddObjects, queryViews);
1: 
0:             // Query for the mbeans to sub
0:             if (querySubObjects.size() > 0) {
0:                 List subMBeans = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), querySubObjects, queryViews);
0:                 addMBeans.removeAll(subMBeans);
1:             }
1: 
1: 
0:             GlobalWriter.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
1: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute query task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
0:      * Handle the -Q, -xQ, --objname, --xobjname, --view options.
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1:         // If token is a additive predefined query define option
1:         if (token.startsWith("-Q")) {
1:             String key = token.substring(2);
1:             String value = "";
1:             int pos = key.indexOf("=");
1:             if (pos >= 0) {
1:                 value = key.substring(pos + 1);
1:                 key = key.substring(0, pos);
1:             }
1: 
1:             // If additive query
1:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
1:             if (predefQuery == null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Unknown query object type: " + key));
1:                 return;
1:             }
1:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
0:             queryAddObjects.add(queryStr);
1:         }
1: 
0:         // If token is a substractive predefined query define option
0:         else if (token.startsWith("-xQ")) {
1:             String key = token.substring(3);
1:             String value = "";
1:             int pos = key.indexOf("=");
1:             if (pos >= 0) {
1:                 value = key.substring(pos + 1);
1:                 key = key.substring(0, pos);
1:             }
1: 
1:             // If subtractive query
1:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
1:             if (predefQuery == null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Unknown query object type: " + key));
1:                 return;
1:             }
1:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
0:             querySubObjects.add(queryStr);
1:         }
1: 
0:         // If token is an additive object name query option
0:         else if (token.startsWith("--objname")) {
1: 
0:             // If no object name query is specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Object name query not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 queryAddObjects.add(queryTokens.nextToken());
1:             }
1:         }
1: 
0:         // If token is a substractive object name query option
0:         else if (token.startsWith("--xobjname")) {
1: 
0:             // If no object name query is specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Object name query not specified"));
1:                 return;
1:             }
1: 
1:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 querySubObjects.add(queryTokens.nextToken());
1:             }
1:         }
1: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
1: 
1:             // If no view specified, or next token is a new option
1:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
1:                 return;
1:             }
1: 
1:             // Add the attributes to view
1:             Enumeration viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (viewTokens.hasMoreElements()) {
1:                 queryViews.add(viewTokens.nextElement());
1:             }
1:         }
1: 
0:         // Let super class handle unknown option
0:         else {
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1:     
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main query [query-options]",
0:         "Description: Display selected broker component's attributes and statistics.",
0:         "",
0:         "Query Options:",
0:         "    -Q<type>=<name>               Add to the search list the specific object type matched",
0:         "                                  by the defined object identifier.",
0:         "    -xQ<type>=<name>              Remove from the search list the specific object type",
0:         "                                  matched by the object identifier.",
0:         "    --objname <query>             Add to the search list objects matched by the query similar",
0:         "                                  to the JMX object name format.",
0:         "    --xobjname <query>            Remove from the search list objects matched by the query",
0:         "                                  similar to the JMX object name format.",
0:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the object to view.",
0:         "                                  By default all attributes will be displayed.",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the query broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main query",
0:         "        - Print all the attributes of all registered objects queues, topics, connections, etc).",
0:         "",
0:         "    Main query -QQueue=TEST.FOO",
0:         "        - Print all the attributes of the queue with destination name TEST.FOO.",
0:         "",
0:         "    Main query -QTopic=*",
0:         "        - Print all the attributes of all registered topics.",
0:         "",
0:         "    Main query --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered objects.",
0:         "",
0:         "    Main -QTopic=* --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics.",
0:         "",
0:         "    Main -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics and",
0:         "          queues.",
0:         "",
0:         "    Main -QTopic=* -xQTopic=ActiveMQ.Advisory.*",
0:         "        - Print all attributes of all topics except those that has a name that begins",
0:         "          with \"ActiveMQ.Advisory\".",
0:         "",
0:         "    Main --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*",
0:         "        - Print all attributes of all connectors, connections excluding network connectors",
0:         "          that belongs to the broker that begins with local.",
0:         "",
0:         "    Main -QQueue=* -xQQueue=????",
0:         "        - Print all attributes of all queues except those that are 4 letters long.",
0:         "",
1:     };
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
/////////////////////////////////////////////////////////////////////////
0:             List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
0:                 List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:2df306c
/////////////////////////////////////////////////////////////////////////
1:             StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 queryAddObjects.add(queryTokens.nextToken());
0:             }
/////////////////////////////////////////////////////////////////////////
1:             StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 querySubObjects.add(queryTokens.nextToken());
0:             }
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.broker.console.JmxMBeansUtil;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: 
0: import java.util.List;
0: import java.util.Properties;
0: import java.util.ArrayList;
0: import java.util.Enumeration;
0: import java.util.StringTokenizer;
0: import java.util.Set;
0: import java.util.HashSet;
0: 
0: public class QueryCommand extends AbstractJmxCommand {
0:     // Predefined type=identifier query
0:     private static final Properties PREDEFINED_OBJNAME_QUERY = new Properties();
0: 
0:     static {
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Broker",           "Type=Broker,BrokerName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connection",       "Type=Connection,Connection=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Connector",        "Type=Connector,ConnectorName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "Type=NetworkConnector,BrokerName=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Queue",            "Type=Queue,Destination=%1,*");
0:         PREDEFINED_OBJNAME_QUERY.setProperty("Topic",            "Type=Topic,Destination=%1,*");
0:     };
0: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0:     private final Set  queryViews      = new HashSet(10);
0: 
0:     /**
0:      * Queries the mbeans registered in the specified JMX context
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // Query for the mbeans to add
0:             List addMBeans = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), queryAddObjects, queryViews);
0: 
0:             // Query for the mbeans to sub
0:             if (querySubObjects.size() > 0) {
0:                 List subMBeans = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), querySubObjects, queryViews);
0:                 addMBeans.removeAll(subMBeans);
0:             }
0: 
0: 
0:             GlobalWriter.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
0: 
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute query task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Handle the -Q, -xQ, --objname, --xobjname, --view options.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0:         // If token is a additive predefined query define option
0:         if (token.startsWith("-Q")) {
0:             String key = token.substring(2);
0:             String value = "";
0:             int pos = key.indexOf("=");
0:             if (pos >= 0) {
0:                 value = key.substring(pos + 1);
0:                 key = key.substring(0, pos);
0:             }
0: 
0:             // If additive query
0:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
0:             if (predefQuery == null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Unknown query object type: " + key));
0:                 return;
0:             }
0:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
0:             queryAddObjects.add(queryStr);
0:         }
0: 
0:         // If token is a substractive predefined query define option
0:         else if (token.startsWith("-xQ")) {
0:             String key = token.substring(3);
0:             String value = "";
0:             int pos = key.indexOf("=");
0:             if (pos >= 0) {
0:                 value = key.substring(pos + 1);
0:                 key = key.substring(0, pos);
0:             }
0: 
0:             // If subtractive query
0:             String predefQuery = PREDEFINED_OBJNAME_QUERY.getProperty(key);
0:             if (predefQuery == null) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Unknown query object type: " + key));
0:                 return;
0:             }
0:             String queryStr = JmxMBeansUtil.createQueryString(predefQuery, value);
0:             querySubObjects.add(queryStr);
0:         }
0: 
0:         // If token is an additive object name query option
0:         else if (token.startsWith("--objname")) {
0: 
0:             // If no object name query is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Object name query not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 queryAddObjects.add(queryTokens.nextToken());
0:             }
0:         }
0: 
0:         // If token is a substractive object name query option
0:         else if (token.startsWith("--xobjname")) {
0: 
0:             // If no object name query is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Object name query not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 querySubObjects.add(queryTokens.nextToken());
0:             }
0:         }
0: 
0:         // If token is a view option
0:         else if (token.startsWith("--view")) {
0: 
0:             // If no view specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Attributes to view not specified"));
0:                 return;
0:             }
0: 
0:             // Add the attributes to view
0:             Enumeration viewTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (viewTokens.hasMoreElements()) {
0:                 queryViews.add(viewTokens.nextElement());
0:             }
0:         }
0: 
0:         // Let super class handle unknown option
0:         else {
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0:     
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main query [query-options]",
0:         "Description: Display selected broker component's attributes and statistics.",
0:         "",
0:         "Query Options:",
0:         "    -Q<type>=<name>               Add to the search list the specific object type matched",
0:         "                                  by the defined object identifier.",
0:         "    -xQ<type>=<name>              Remove from the search list the specific object type",
0:         "                                  matched by the object identifier.",
0:         "    --objname <query>             Add to the search list objects matched by the query similar",
0:         "                                  to the JMX object name format.",
0:         "    --xobjname <query>            Remove from the search list objects matched by the query",
0:         "                                  similar to the JMX object name format.",
0:         "    --view <attr1>,<attr2>,...    Select the specific attribute of the object to view.",
0:         "                                  By default all attributes will be displayed.",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the query broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main query",
0:         "        - Print all the attributes of all registered objects queues, topics, connections, etc).",
0:         "",
0:         "    Main query -QQueue=TEST.FOO",
0:         "        - Print all the attributes of the queue with destination name TEST.FOO.",
0:         "",
0:         "    Main query -QTopic=*",
0:         "        - Print all the attributes of all registered topics.",
0:         "",
0:         "    Main query --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered objects.",
0:         "",
0:         "    Main -QTopic=* --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics.",
0:         "",
0:         "    Main -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount",
0:         "        - Print the attributes EnqueueCount and DequeueCount of all registered topics and",
0:         "          queues.",
0:         "",
0:         "    Main -QTopic=* -xQTopic=ActiveMQ.Advisory.*",
0:         "        - Print all attributes of all topics except those that has a name that begins",
0:         "          with \"ActiveMQ.Advisory\".",
0:         "",
0:         "    Main --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*",
0:         "        - Print all attributes of all connectors, connections excluding network connectors",
0:         "          that belongs to the broker that begins with local.",
0:         "",
0:         "    Main -QQueue=* -xQQueue=????",
0:         "        - Print all attributes of all queues except those that are 4 letters long.",
0:         "",
0:     };
0: }
author:James Strachan
-------------------------------------------------------------------------------
commit:540ebc6
/////////////////////////////////////////////////////////////////////////
0:         "    query",
0:         "    query -QQueue=TEST.FOO",
0:         "    query -QTopic=*",
0:         "    query --view EnqueueCount,DequeueCount",
0:         "    query -QTopic=* --view EnqueueCount,DequeueCount",
0:         "    query -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount",
0:         "    query -QTopic=* -xQTopic=ActiveMQ.Advisory.*",
0:         "    query --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*",
0:         "    query -QQueue=* -xQQueue=????",
============================================================================