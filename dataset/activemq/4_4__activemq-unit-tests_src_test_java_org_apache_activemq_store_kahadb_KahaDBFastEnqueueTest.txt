1:323eeda: /**
1:323eeda:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:323eeda:  * contributor license agreements.  See the NOTICE file distributed with
1:323eeda:  * this work for additional information regarding copyright ownership.
1:323eeda:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:323eeda:  * (the "License"); you may not use this file except in compliance with
1:323eeda:  * the License.  You may obtain a copy of the License at
1:323eeda:  *
1:323eeda:  *      http://www.apache.org/licenses/LICENSE-2.0
1:323eeda:  *
1:323eeda:  * Unless required by applicable law or agreed to in writing, software
1:323eeda:  * distributed under the License is distributed on an "AS IS" BASIS,
1:323eeda:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:323eeda:  * See the License for the specific language governing permissions and
1:323eeda:  * limitations under the License.
1:323eeda:  */
1:323eeda: package org.apache.activemq.store.kahadb;
3:323eeda: 
1:4743a20: import static org.junit.Assert.assertEquals;
1:4743a20: import static org.junit.Assert.assertNotNull;
1:4743a20: import static org.junit.Assert.assertNull;
1:4743a20: import static org.junit.Assert.assertTrue;
1:4743a20: 
1:323eeda: import java.util.Vector;
1:323eeda: import java.util.concurrent.ExecutorService;
1:323eeda: import java.util.concurrent.Executors;
1:323eeda: import java.util.concurrent.TimeUnit;
1:323eeda: import java.util.concurrent.atomic.AtomicLong;
1:4743a20: 
1:323eeda: import javax.jms.BytesMessage;
1:323eeda: import javax.jms.DeliveryMode;
1:323eeda: import javax.jms.Destination;
1:323eeda: import javax.jms.Message;
1:323eeda: import javax.jms.MessageConsumer;
1:323eeda: import javax.jms.MessageProducer;
1:323eeda: import javax.jms.Session;
1:4743a20: 
1:323eeda: import org.apache.activemq.ActiveMQConnection;
1:323eeda: import org.apache.activemq.ActiveMQConnectionFactory;
1:323eeda: import org.apache.activemq.broker.BrokerService;
1:323eeda: import org.apache.activemq.command.ActiveMQQueue;
1:323eeda: import org.apache.activemq.command.ConnectionControl;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.journal.FileAppender;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:323eeda: import org.junit.After;
1:89f22da: import org.junit.Before;
1:bb4a2f7: import org.junit.Test;
1:323eeda: import org.slf4j.Logger;
1:323eeda: import org.slf4j.LoggerFactory;
1:323eeda: 
1:323eeda: public class KahaDBFastEnqueueTest {
1:323eeda:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBFastEnqueueTest.class);
1:323eeda:     private BrokerService broker;
1:323eeda:     private ActiveMQConnectionFactory connectionFactory;
1:323eeda:     KahaDBPersistenceAdapter kahaDBPersistenceAdapter;
1:4743a20:     private final Destination destination = new ActiveMQQueue("Test");
1:4743a20:     private final String payloadString = new String(new byte[6*1024]);
1:4743a20:     private final boolean useBytesMessage= true;
1:384388f:     private final int parallelProducer = 20;
1:4743a20:     private final Vector<Exception> exceptions = new Vector<Exception>();
1:89f22da:     long toSend = 10000;
1:323eeda: 
1:384388f:     // use with:
1:384388f:     // -Xmx4g -Dorg.apache.kahadb.journal.appender.WRITE_STAT_WINDOW=10000 -Dorg.apache.kahadb.journal.CALLER_BUFFER_APPENDER=true
1:89f22da:     @Test
1:323eeda:     public void testPublishNoConsumer() throws Exception {
1:323eeda: 
1:89f22da:         startBroker(true, 10);
1:323eeda: 
1:323eeda:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:323eeda:         long start = System.currentTimeMillis();
1:323eeda:         ExecutorService executorService = Executors.newCachedThreadPool();
1:323eeda:         for (int i=0; i< parallelProducer; i++) {
1:323eeda:             executorService.execute(new Runnable() {
1:323eeda:                 @Override
1:323eeda:                 public void run() {
1:323eeda:                     try {
1:323eeda:                         publishMessages(sharedCount, 0);
1:323eeda:                     } catch (Exception e) {
1:323eeda:                         exceptions.add(e);
1:323eeda:                     }
1:323eeda:                 }
1:323eeda:             });
1:323eeda:         }
1:323eeda:         executorService.shutdown();
1:323eeda:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:323eeda:         assertTrue("Producers done in time", executorService.isTerminated());
1:323eeda:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:323eeda:         long totalSent  = toSend * payloadString.length();
1:323eeda: 
1:89f22da:         double duration =  System.currentTimeMillis() - start;
1:89f22da:         stopBroker();
1:89f22da:         LOG.info("Duration:                " + duration + "ms");
1:89f22da:         LOG.info("Rate:                       " + (toSend * 1000/duration) + "m/s");
1:89f22da:         LOG.info("Total send:             " + totalSent);
1:89f22da:         LOG.info("Total journal write: " + kahaDBPersistenceAdapter.getStore().getJournal().length());
1:a604424:         LOG.info("Total index size " + kahaDBPersistenceAdapter.getStore().getPageFile().getDiskSize());
1:a604424:         LOG.info("Total store size: " + kahaDBPersistenceAdapter.size());
1:89f22da:         LOG.info("Journal writes %:    " + kahaDBPersistenceAdapter.getStore().getJournal().length() / (double)totalSent * 100 + "%");
1:89f22da: 
1:89f22da:         restartBroker(0, 1200000);
1:89f22da:         consumeMessages(toSend);
1:89f22da:     }
1:89f22da: 
1:89f22da:     @Test
1:89f22da:     public void testPublishNoConsumerNoCheckpoint() throws Exception {
1:89f22da: 
1:89f22da:         toSend = 100;
1:89f22da:         startBroker(true, 0);
1:89f22da: 
1:89f22da:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:89f22da:         long start = System.currentTimeMillis();
1:89f22da:         ExecutorService executorService = Executors.newCachedThreadPool();
1:89f22da:         for (int i=0; i< parallelProducer; i++) {
1:89f22da:             executorService.execute(new Runnable() {
1:89f22da:                 @Override
1:89f22da:                 public void run() {
1:89f22da:                     try {
1:89f22da:                         publishMessages(sharedCount, 0);
1:89f22da:                     } catch (Exception e) {
1:89f22da:                         exceptions.add(e);
1:89f22da:                     }
1:89f22da:                 }
1:89f22da:             });
1:89f22da:         }
1:89f22da:         executorService.shutdown();
1:89f22da:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:89f22da:         assertTrue("Producers done in time", executorService.isTerminated());
1:89f22da:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:89f22da:         long totalSent  = toSend * payloadString.length();
1:89f22da: 
1:89f22da:         broker.getAdminView().gc();
1:89f22da: 
1:323eeda: 
1:323eeda:         double duration =  System.currentTimeMillis() - start;
1:323eeda:         stopBroker();
1:89f22da:         LOG.info("Duration:                " + duration + "ms");
1:89f22da:         LOG.info("Rate:                       " + (toSend * 1000/duration) + "m/s");
1:89f22da:         LOG.info("Total send:             " + totalSent);
1:89f22da:         LOG.info("Total journal write: " + kahaDBPersistenceAdapter.getStore().getJournal().length());
1:a604424:         LOG.info("Total index size " + kahaDBPersistenceAdapter.getStore().getPageFile().getDiskSize());
1:a604424:         LOG.info("Total store size: " + kahaDBPersistenceAdapter.size());
1:89f22da:         LOG.info("Journal writes %:    " + kahaDBPersistenceAdapter.getStore().getJournal().length() / (double)totalSent * 100 + "%");
1:323eeda: 
1:89f22da:         restartBroker(0, 0);
1:bb4a2f7:         consumeMessages(toSend);
1:323eeda:     }
1:323eeda: 
1:323eeda:     private void consumeMessages(long count) throws Exception {
1:323eeda:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:323eeda:         connection.setWatchTopicAdvisories(false);
1:323eeda:         connection.start();
1:323eeda:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:323eeda:         MessageConsumer consumer = session.createConsumer(destination);
1:323eeda:         for (int i=0; i<count; i++) {
1:323eeda:             assertNotNull("got message "+ i, consumer.receive(10000));
1:323eeda:         }
1:323eeda:         assertNull("none left over", consumer.receive(2000));
1:323eeda:     }
1:323eeda: 
1:89f22da:     private void restartBroker(int restartDelay, int checkpoint) throws Exception {
1:323eeda:         stopBroker();
1:323eeda:         TimeUnit.MILLISECONDS.sleep(restartDelay);
1:89f22da:         startBroker(false, checkpoint);
1:89f22da:     }
1:89f22da: 
1:89f22da:     @Before
1:89f22da:     public void setProps() {
1:89f22da:         System.setProperty(Journal.CALLER_BUFFER_APPENDER, Boolean.toString(true));
1:89f22da:         System.setProperty(FileAppender.PROPERTY_LOG_WRITE_STAT_WINDOW, "10000");
1:323eeda:     }
1:323eeda: 
1:323eeda:     @After
1:323eeda:     public void stopBroker() throws Exception {
1:384388f:         if (broker != null) {
1:384388f:             broker.stop();
1:384388f:             broker.waitUntilStopped();
1:384388f:         }
1:89f22da:         System.clearProperty(Journal.CALLER_BUFFER_APPENDER);
1:89f22da:         System.clearProperty(FileAppender.PROPERTY_LOG_WRITE_STAT_WINDOW);
1:323eeda:     }
1:323eeda: 
1:323eeda:     final double sampleRate = 100000;
1:323eeda:     private void publishMessages(AtomicLong count, int expiry) throws Exception {
1:323eeda:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:323eeda:         connection.setWatchTopicAdvisories(false);
1:323eeda:         connection.start();
1:323eeda:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:323eeda: 
1:323eeda:         MessageProducer producer = session.createProducer(destination);
1:323eeda:         Long start = System.currentTimeMillis();
1:323eeda:         long i = 0l;
1:323eeda:         while ( (i=count.getAndDecrement()) > 0) {
1:323eeda:             Message message = null;
1:323eeda:             if (useBytesMessage) {
1:323eeda:                 message = session.createBytesMessage();
1:323eeda:                 ((BytesMessage) message).writeBytes(payloadString.getBytes());
1:323eeda:             } else {
1:323eeda:                 message = session.createTextMessage(payloadString);
1:323eeda:             }
1:323eeda:             producer.send(message, DeliveryMode.PERSISTENT, 5, expiry);
1:323eeda:             if (i != toSend && i%sampleRate == 0) {
1:323eeda:                 long now = System.currentTimeMillis();
1:323eeda:                 LOG.info("Remainder: " + i + ", rate: " + sampleRate * 1000 / (now - start) + "m/s" );
1:323eeda:                 start = now;
1:323eeda:             }
1:323eeda:         }
1:323eeda:         connection.syncSendPacket(new ConnectionControl());
1:323eeda:         connection.close();
1:323eeda:     }
1:323eeda: 
1:89f22da:     public void startBroker(boolean deleteAllMessages, int checkPointPeriod) throws Exception {
1:323eeda:         broker = new BrokerService();
1:323eeda:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:323eeda:         kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter)broker.getPersistenceAdapter();
1:323eeda:         kahaDBPersistenceAdapter.setEnableJournalDiskSyncs(false);
1:323eeda:         // defer checkpoints which require a sync
1:89f22da:         kahaDBPersistenceAdapter.setCleanupInterval(checkPointPeriod);
1:89f22da:         kahaDBPersistenceAdapter.setCheckpointInterval(checkPointPeriod);
1:323eeda: 
1:323eeda:         // optimise for disk best batch rate
1:bb4a2f7:         kahaDBPersistenceAdapter.setJournalMaxWriteBatchSize(24*1024*1024); //4mb default
1:bb4a2f7:         kahaDBPersistenceAdapter.setJournalMaxFileLength(128*1024*1024); // 32mb default
1:323eeda:         // keep index in memory
1:323eeda:         kahaDBPersistenceAdapter.setIndexCacheSize(500000);
1:323eeda:         kahaDBPersistenceAdapter.setIndexWriteBatchSize(500000);
1:bb4a2f7:         kahaDBPersistenceAdapter.setEnableIndexRecoveryFile(false);
1:bb4a2f7:         kahaDBPersistenceAdapter.setEnableIndexDiskSyncs(false);
1:323eeda: 
1:323eeda:         broker.addConnector("tcp://0.0.0.0:0");
1:323eeda:         broker.start();
1:323eeda: 
1:323eeda:         String options = "?jms.watchTopicAdvisories=false&jms.useAsyncSend=true&jms.alwaysSessionAsync=false&jms.dispatchAsync=false&socketBufferSize=131072&ioBufferSize=16384&wireFormat.tightEncodingEnabled=false&wireFormat.cacheSize=8192";
1:323eeda:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + options);
1:323eeda:     }
1:384388f: 
1:89f22da:     @Test
1:384388f:     public void testRollover() throws Exception {
1:384388f:         byte flip = 0x1;
1:384388f:         for (long i=0; i<Short.MAX_VALUE; i++) {
1:384388f:             assertEquals("0 @:" + i, 0, flip ^= 1);
1:384388f:             assertEquals("1 @:" + i, 1, flip ^= 1);
1:384388f:         }
1:384388f:     }
1:323eeda: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Destination destination = new ActiveMQQueue("Test");
1:     private final String payloadString = new String(new byte[6*1024]);
1:     private final boolean useBytesMessage= true;
1:     private final Vector<Exception> exceptions = new Vector<Exception>();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.FileAppender;
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a604424
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total index size " + kahaDBPersistenceAdapter.getStore().getPageFile().getDiskSize());
1:         LOG.info("Total store size: " + kahaDBPersistenceAdapter.size());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total index size " + kahaDBPersistenceAdapter.getStore().getPageFile().getDiskSize());
1:         LOG.info("Total store size: " + kahaDBPersistenceAdapter.size());
author:Gary Tully
-------------------------------------------------------------------------------
commit:89f22da
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.kaha.impl.async.DataFileAppenderTest;
0: import org.apache.kahadb.journal.FileAppender;
0: import org.apache.kahadb.journal.Journal;
1: import org.junit.Before;
/////////////////////////////////////////////////////////////////////////
1:     long toSend = 10000;
1:     @Test
1:         startBroker(true, 10);
/////////////////////////////////////////////////////////////////////////
1:         double duration =  System.currentTimeMillis() - start;
1:         stopBroker();
1:         LOG.info("Duration:                " + duration + "ms");
1:         LOG.info("Rate:                       " + (toSend * 1000/duration) + "m/s");
1:         LOG.info("Total send:             " + totalSent);
1:         LOG.info("Total journal write: " + kahaDBPersistenceAdapter.getStore().getJournal().length());
1:         LOG.info("Journal writes %:    " + kahaDBPersistenceAdapter.getStore().getJournal().length() / (double)totalSent * 100 + "%");
1: 
1:         restartBroker(0, 1200000);
1:         consumeMessages(toSend);
1:     }
1: 
1:     @Test
1:     public void testPublishNoConsumerNoCheckpoint() throws Exception {
1: 
1:         toSend = 100;
1:         startBroker(true, 0);
1: 
1:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:         long start = System.currentTimeMillis();
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         for (int i=0; i< parallelProducer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         publishMessages(sharedCount, 0);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1:         executorService.shutdown();
1:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:         assertTrue("Producers done in time", executorService.isTerminated());
1:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:         long totalSent  = toSend * payloadString.length();
1: 
1:         broker.getAdminView().gc();
1: 
1:         LOG.info("Duration:                " + duration + "ms");
1:         LOG.info("Rate:                       " + (toSend * 1000/duration) + "m/s");
1:         LOG.info("Total send:             " + totalSent);
1:         LOG.info("Total journal write: " + kahaDBPersistenceAdapter.getStore().getJournal().length());
1:         LOG.info("Journal writes %:    " + kahaDBPersistenceAdapter.getStore().getJournal().length() / (double)totalSent * 100 + "%");
1:         restartBroker(0, 0);
/////////////////////////////////////////////////////////////////////////
1:     private void restartBroker(int restartDelay, int checkpoint) throws Exception {
1:         startBroker(false, checkpoint);
1:     }
1: 
1:     @Before
1:     public void setProps() {
1:         System.setProperty(Journal.CALLER_BUFFER_APPENDER, Boolean.toString(true));
1:         System.setProperty(FileAppender.PROPERTY_LOG_WRITE_STAT_WINDOW, "10000");
/////////////////////////////////////////////////////////////////////////
1:         System.clearProperty(Journal.CALLER_BUFFER_APPENDER);
1:         System.clearProperty(FileAppender.PROPERTY_LOG_WRITE_STAT_WINDOW);
/////////////////////////////////////////////////////////////////////////
1:     public void startBroker(boolean deleteAllMessages, int checkPointPeriod) throws Exception {
1:         kahaDBPersistenceAdapter.setCleanupInterval(checkPointPeriod);
1:         kahaDBPersistenceAdapter.setCheckpointInterval(checkPointPeriod);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
commit:384388f
/////////////////////////////////////////////////////////////////////////
1:     private final int parallelProducer = 20;
0:     final long toSend = 500000;
0:     @Ignore("too slow, exploring getting broker disk bound")
1:     // use with:
1:     // -Xmx4g -Dorg.apache.kahadb.journal.appender.WRITE_STAT_WINDOW=10000 -Dorg.apache.kahadb.journal.CALLER_BUFFER_APPENDER=true
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testRollover() throws Exception {
1:         byte flip = 0x1;
1:         for (long i=0; i<Short.MAX_VALUE; i++) {
1:             assertEquals("0 @:" + i, 0, flip ^= 1);
1:             assertEquals("1 @:" + i, 1, flip ^= 1);
1:         }
1:     }
commit:bb4a2f7
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
0:     final long toSend = 1000;//500000;
/////////////////////////////////////////////////////////////////////////
0:         restartBroker(0);
1:         consumeMessages(toSend);
/////////////////////////////////////////////////////////////////////////
1:         kahaDBPersistenceAdapter.setJournalMaxWriteBatchSize(24*1024*1024); //4mb default
1:         kahaDBPersistenceAdapter.setJournalMaxFileLength(128*1024*1024); // 32mb default
1:         kahaDBPersistenceAdapter.setEnableIndexRecoveryFile(false);
1:         kahaDBPersistenceAdapter.setEnableIndexDiskSyncs(false);
commit:323eeda
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.BytesMessage;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionControl;
1: import org.junit.After;
0: import org.junit.Ignore;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static junit.framework.Assert.*;
1: 
1: public class KahaDBFastEnqueueTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(KahaDBFastEnqueueTest.class);
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory connectionFactory;
1:     KahaDBPersistenceAdapter kahaDBPersistenceAdapter;
0:     private Destination destination = new ActiveMQQueue("Test");
0:     private String payloadString = new String(new byte[6*1024]);
0:     private boolean useBytesMessage= true;
0:     private final int parallelProducer = 2;
0:     private Vector<Exception> exceptions = new Vector<Exception>();
0:     final long toSend = 500000;
1: 
0:     @Ignore("not ready yet, exploring getting broker disk bound")
1:     public void testPublishNoConsumer() throws Exception {
1: 
0:         startBroker(true);
1: 
1:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:         long start = System.currentTimeMillis();
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         for (int i=0; i< parallelProducer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         publishMessages(sharedCount, 0);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1:         executorService.shutdown();
1:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:         assertTrue("Producers done in time", executorService.isTerminated());
1:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:         long totalSent  = toSend * payloadString.length();
1: 
0:         //System.out.println("Pre shutdown: Index totalWritten:       " + kahaDBPersistenceAdapter.getStore().getPageFile().totalWritten);
1: 
1:         double duration =  System.currentTimeMillis() - start;
1:         stopBroker();
0:         System.out.println("Duration:                " + duration + "ms");
0:         System.out.println("Rate:                       " + (toSend * 1000/duration) + "m/s");
0:         System.out.println("Total send:             " + totalSent);
0:         System.out.println("Total journal write: " + kahaDBPersistenceAdapter.getStore().getJournal().length());
0:         //System.out.println("Total index write:   " + kahaDBPersistenceAdapter.getStore().getPageFile().totalWritten);
0:         System.out.println("Journal writes %:    " + kahaDBPersistenceAdapter.getStore().getJournal().length() / (double)totalSent * 100 + "%");
0:         //System.out.println("Index writes %:       " + kahaDBPersistenceAdapter.getStore().getPageFile().totalWritten / (double)totalSent * 100 + "%");
1: 
0:         //restartBroker(0);
0:         //consumeMessages(toSend);
1:     }
1: 
1:     private void consumeMessages(long count) throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setWatchTopicAdvisories(false);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         for (int i=0; i<count; i++) {
1:             assertNotNull("got message "+ i, consumer.receive(10000));
1:         }
1:         assertNull("none left over", consumer.receive(2000));
1:     }
1: 
0:     private void restartBroker(int restartDelay) throws Exception {
1:         stopBroker();
1:         TimeUnit.MILLISECONDS.sleep(restartDelay);
0:         startBroker(false);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
1:     }
1: 
1:     final double sampleRate = 100000;
1:     private void publishMessages(AtomicLong count, int expiry) throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setWatchTopicAdvisories(false);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         Long start = System.currentTimeMillis();
1:         long i = 0l;
1:         while ( (i=count.getAndDecrement()) > 0) {
1:             Message message = null;
1:             if (useBytesMessage) {
1:                 message = session.createBytesMessage();
1:                 ((BytesMessage) message).writeBytes(payloadString.getBytes());
1:             } else {
1:                 message = session.createTextMessage(payloadString);
1:             }
1:             producer.send(message, DeliveryMode.PERSISTENT, 5, expiry);
1:             if (i != toSend && i%sampleRate == 0) {
1:                 long now = System.currentTimeMillis();
1:                 LOG.info("Remainder: " + i + ", rate: " + sampleRate * 1000 / (now - start) + "m/s" );
1:                 start = now;
1:             }
1:         }
1:         connection.syncSendPacket(new ConnectionControl());
1:         connection.close();
1:     }
1: 
0:     public void startBroker(boolean deleteAllMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter)broker.getPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setEnableJournalDiskSyncs(false);
1:         // defer checkpoints which require a sync
0:         kahaDBPersistenceAdapter.setCleanupInterval(20 * 60 * 1000);
0:         kahaDBPersistenceAdapter.setCheckpointInterval(20 * 60 * 1000);
1: 
1:         // optimise for disk best batch rate
0:         //kahaDBPersistenceAdapter.setJournalMaxWriteBatchSize(128*1024); //4mb default
0:         kahaDBPersistenceAdapter.setJournalMaxFileLength(1024*1024*1024); // 32mb default
1:         // keep index in memory
1:         kahaDBPersistenceAdapter.setIndexCacheSize(500000);
1:         kahaDBPersistenceAdapter.setIndexWriteBatchSize(500000);
1: 
0:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1: 
1:         String options = "?jms.watchTopicAdvisories=false&jms.useAsyncSend=true&jms.alwaysSessionAsync=false&jms.dispatchAsync=false&socketBufferSize=131072&ioBufferSize=16384&wireFormat.tightEncodingEnabled=false&wireFormat.cacheSize=8192";
1:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + options);
1:     }
1: }
============================================================================