1:fcb5d9e: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:fcb5d9e:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fcb5d9e:  *
1:fcb5d9e:  * Unless required by applicable law or agreed to in writing, software
1:fcb5d9e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fcb5d9e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fcb5d9e:  * See the License for the specific language governing permissions and
1:fcb5d9e:  * limitations under the License.
2:fcb5d9e:  */
1:fcb5d9e: package org.apache.activemq.openwire.tool;
18:fcb5d9e: 
1:540dd5c: import java.io.File;
1:540dd5c: import java.io.PrintWriter;
1:540dd5c: import java.util.ArrayList;
1:540dd5c: import java.util.Collections;
1:540dd5c: import java.util.Comparator;
1:540dd5c: import java.util.Iterator;
1:540dd5c: import java.util.List;
1:540dd5c: 
1:fcb5d9e: import org.codehaus.jam.JAnnotation;
1:fcb5d9e: import org.codehaus.jam.JAnnotationValue;
1:fcb5d9e: import org.codehaus.jam.JClass;
1:fcb5d9e: import org.codehaus.jam.JProperty;
1:fcb5d9e: 
1:fcb5d9e: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CSharpMarshallingGenerator extends JavaMarshallingGenerator {
1:bd0ad68: 
1:540dd5c:     protected String targetDir = "./src/main/csharp";
1:fcb5d9e: 
1:fcb5d9e:     public Object run() {
1:fcb5d9e:         filePostFix = ".cs";
1:fcb5d9e:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/ActiveMQ/OpenWire/V" + getOpenwireVersion());
1:540dd5c:         }
1:fcb5d9e:         return super.run();
1:bd0ad68:     }
1:540dd5c: 
1:540dd5c:     // ////////////////////////////////////////////////////////////////////////////////////
1:fcb5d9e:     // This section is for the tight wire format encoding generator
1:540dd5c:     // ////////////////////////////////////////////////////////////////////////////////////
1:bd0ad68: 
1:fcb5d9e:     protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:bd0ad68: 
1:fcb5d9e:         String propertyName = property.getSimpleName();
1:fcb5d9e:         String type = property.getType().getSimpleName();
1:bd0ad68: 
1:fcb5d9e:         if (type.equals("boolean")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = bs.ReadBoolean();");
1:540dd5c:         } else if (type.equals("byte")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadByte();");
1:540dd5c:         } else if (type.equals("char")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadChar();");
1:540dd5c:         } else if (type.equals("short")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadInt16();");
1:540dd5c:         } else if (type.equals("int")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadInt32();");
1:540dd5c:         } else if (type.equals("long")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = TightUnmarshalLong(wireFormat, dataIn, bs);");
1:540dd5c:         } else if (type.equals("String")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = TightUnmarshalString(dataIn, bs);");
1:540dd5c:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:             if (size != null) {
1:fcb5d9e:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, " + size.asInt() + ");");
1:540dd5c:             } else {
1:fcb5d9e:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, bs.ReadBoolean());");
1:bd0ad68:             }
1:540dd5c:         } else if (isThrowable(property.getType())) {
1:fcb5d9e:             out.println("        info." + propertyName + " = TightUnmarshalBrokerError(wireFormat, dataIn, bs);");
1:540dd5c:         } else if (isCachedProperty(property)) {
1:fcb5d9e:             out.println("        info." + propertyName + " = (" + type + ") TightUnmarshalCachedObject(wireFormat, dataIn, bs);");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("        info." + propertyName + " = (" + type + ") TightUnmarshalNestedObject(wireFormat, dataIn, bs);");
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:fcb5d9e:         JClass propertyType = property.getType();
1:fcb5d9e:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:fcb5d9e:         String propertyName = property.getSimpleName();
1:fcb5d9e:         out.println();
1:fcb5d9e:         if (size != null) {
1:bd0ad68:             out.println("        {");
1:fcb5d9e:             out.println("            " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:fcb5d9e:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:fcb5d9e:             out.println("                value[i] = (" + arrayType + ") TightUnmarshalNestedObject(wireFormat,dataIn, bs);");
1:fcb5d9e:             out.println("            }");
1:fcb5d9e:             out.println("            info." + propertyName + " = value;");
1:fcb5d9e:             out.println("        }");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("        if (bs.ReadBoolean()) {");
1:fcb5d9e:             out.println("            short size = dataIn.ReadInt16();");
1:fcb5d9e:             out.println("            " + arrayType + "[] value = new " + arrayType + "[size];");
1:fcb5d9e:             out.println("            for( int i=0; i < size; i++ ) {");
1:fcb5d9e:             out.println("                value[i] = (" + arrayType + ") TightUnmarshalNestedObject(wireFormat,dataIn, bs);");
1:fcb5d9e:             out.println("            }");
1:fcb5d9e:             out.println("            info." + propertyName + " = value;");
1:fcb5d9e:             out.println("        }");
1:fcb5d9e:             out.println("        else {");
1:fcb5d9e:             out.println("            info." + propertyName + " = null;");
1:fcb5d9e:             out.println("        }");
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     protected int generateTightMarshal1Body(PrintWriter out) {
1:fcb5d9e:         List properties = getProperties();
1:fcb5d9e:         int baseSize = 0;
1:fcb5d9e:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:fcb5d9e:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:fcb5d9e:             JAnnotationValue size = annotation.getValue("size");
1:fcb5d9e:             JClass propertyType = property.getType();
1:fcb5d9e:             String type = propertyType.getSimpleName();
1:fcb5d9e:             String getter = "info." + property.getSimpleName();
1:bd0ad68: 
1:fcb5d9e:             if (type.equals("boolean")) {
1:fcb5d9e:                 out.println("        bs.WriteBoolean(" + getter + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:fcb5d9e:                 baseSize += 1;
1:540dd5c:             } else if (type.equals("char")) {
1:fcb5d9e:                 baseSize += 2;
1:540dd5c:             } else if (type.equals("short")) {
1:fcb5d9e:                 baseSize += 2;
1:540dd5c:             } else if (type.equals("int")) {
1:fcb5d9e:                 baseSize += 4;
1:540dd5c:             } else if (type.equals("long")) {
1:fcb5d9e:                 out.println("        rc += TightMarshalLong1(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:fcb5d9e:                 out.print("");
1:fcb5d9e:                 out.println("        rc += TightMarshalString1(" + getter + ", bs);");
1:540dd5c:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:                 if (size == null) {
1:fcb5d9e:                     out.println("        bs.WriteBoolean(" + getter + "!=null);");
1:fcb5d9e:                     out.println("        rc += " + getter + "==null ? 0 : " + getter + ".Length+4;");
1:540dd5c:                 } else {
1:fcb5d9e:                     baseSize += size.asInt();
1:bd0ad68:                 }
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("        rc += TightMarshalObjectArrayConstSize1(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        rc += TightMarshalObjectArray1(wireFormat, " + getter + ", bs);");
1:bd0ad68:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:fcb5d9e:                 out.println("        rc += TightMarshalBrokerError1(wireFormat, " + getter + ", bs);");
1:540dd5c:             } else {
1:fcb5d9e:                 if (isCachedProperty(property)) {
1:fcb5d9e:                     out.println("        rc += TightMarshalCachedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        rc += TightMarshalNestedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:bd0ad68:                 }
1:bd0ad68:             }
1:bd0ad68:         }
1:fcb5d9e:         return baseSize;
1:bd0ad68:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateTightMarshal2Body(PrintWriter out) {
1:fcb5d9e:         List properties = getProperties();
1:fcb5d9e:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:fcb5d9e:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:fcb5d9e:             JAnnotationValue size = annotation.getValue("size");
1:fcb5d9e:             JClass propertyType = property.getType();
1:fcb5d9e:             String type = propertyType.getSimpleName();
1:fcb5d9e:             String getter = "info." + property.getSimpleName();
1:bd0ad68: 
1:fcb5d9e:             if (type.equals("boolean")) {
1:fcb5d9e:                 out.println("        bs.ReadBoolean();");
1:540dd5c:             } else if (type.equals("byte")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("char")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("short")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("int")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("long")) {
1:fcb5d9e:                 out.println("        TightMarshalLong2(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("String")) {
1:fcb5d9e:                 out.println("        TightMarshalString2(" + getter + ", dataOut, bs);");
1:540dd5c:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("        dataOut.Write(" + getter + ", 0, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        if(bs.ReadBoolean()) {");
1:fcb5d9e:                     out.println("           dataOut.Write(" + getter + ".Length);");
1:fcb5d9e:                     out.println("           dataOut.Write(" + getter + ");");
1:fcb5d9e:                     out.println("        }");
1:bd0ad68:                 }
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("        TightMarshalObjectArrayConstSize2(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        TightMarshalObjectArray2(wireFormat, " + getter + ", dataOut, bs);");
1:bd0ad68:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:fcb5d9e:                 out.println("        TightMarshalBrokerError2(wireFormat, " + getter + ", dataOut, bs);");
1:540dd5c:             } else {
1:fcb5d9e:                 if (isCachedProperty(property)) {
1:fcb5d9e:                     out.println("        TightMarshalCachedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        TightMarshalNestedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:bd0ad68:                 }
1:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68:     }
1:540dd5c: 
1:540dd5c:     // ////////////////////////////////////////////////////////////////////////////////////
1:fcb5d9e:     // This section is for the loose wire format encoding generator
1:540dd5c:     // ////////////////////////////////////////////////////////////////////////////////////
1:540dd5c: 
1:fcb5d9e:     protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:bd0ad68: 
1:fcb5d9e:         String propertyName = property.getSimpleName();
1:fcb5d9e:         String type = property.getType().getSimpleName();
1:bd0ad68: 
1:fcb5d9e:         if (type.equals("boolean")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadBoolean();");
1:540dd5c:         } else if (type.equals("byte")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadByte();");
1:540dd5c:         } else if (type.equals("char")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadChar();");
1:540dd5c:         } else if (type.equals("short")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadInt16();");
1:540dd5c:         } else if (type.equals("int")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = dataIn.ReadInt32();");
1:540dd5c:         } else if (type.equals("long")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = LooseUnmarshalLong(wireFormat, dataIn);");
1:540dd5c:         } else if (type.equals("String")) {
1:fcb5d9e:             out.println("        info." + propertyName + " = LooseUnmarshalString(dataIn);");
1:540dd5c:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:             if (size != null) {
1:fcb5d9e:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, " + size.asInt() + ");");
1:540dd5c:             } else {
1:fcb5d9e:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, dataIn.ReadBoolean());");
84:fcb5d9e:             }
1:540dd5c:         } else if (isThrowable(property.getType())) {
1:fcb5d9e:             out.println("        info." + propertyName + " = LooseUnmarshalBrokerError(wireFormat, dataIn);");
1:540dd5c:         } else if (isCachedProperty(property)) {
1:fcb5d9e:             out.println("        info." + propertyName + " = (" + type + ") LooseUnmarshalCachedObject(wireFormat, dataIn);");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("        info." + propertyName + " = (" + type + ") LooseUnmarshalNestedObject(wireFormat, dataIn);");
1:fcb5d9e:         }
1:fcb5d9e:     }
1:bd0ad68: 
1:fcb5d9e:     protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:fcb5d9e:         JClass propertyType = property.getType();
1:fcb5d9e:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:fcb5d9e:         String propertyName = property.getSimpleName();
1:fcb5d9e:         out.println();
1:fcb5d9e:         if (size != null) {
2:fcb5d9e:             out.println("        {");
1:fcb5d9e:             out.println("            " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:fcb5d9e:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:fcb5d9e:             out.println("                value[i] = (" + arrayType + ") LooseUnmarshalNestedObject(wireFormat,dataIn);");
1:fcb5d9e:             out.println("            }");
1:fcb5d9e:             out.println("            info." + propertyName + " = value;");
1:fcb5d9e:             out.println("        }");
1:540dd5c:         } else {
1:fcb5d9e:             out.println("        if (dataIn.ReadBoolean()) {");
1:fcb5d9e:             out.println("            short size = dataIn.ReadInt16();");
1:fcb5d9e:             out.println("            " + arrayType + "[] value = new " + arrayType + "[size];");
1:fcb5d9e:             out.println("            for( int i=0; i < size; i++ ) {");
1:fcb5d9e:             out.println("                value[i] = (" + arrayType + ") LooseUnmarshalNestedObject(wireFormat,dataIn);");
1:fcb5d9e:             out.println("            }");
1:fcb5d9e:             out.println("            info." + propertyName + " = value;");
1:fcb5d9e:             out.println("        }");
1:fcb5d9e:             out.println("        else {");
1:fcb5d9e:             out.println("            info." + propertyName + " = null;");
1:fcb5d9e:             out.println("        }");
1:fcb5d9e:         }
1:fcb5d9e:     }
1:fcb5d9e: 
1:fcb5d9e:     protected void generateLooseMarshalBody(PrintWriter out) {
1:fcb5d9e:         List properties = getProperties();
1:fcb5d9e:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:fcb5d9e:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:fcb5d9e:             JAnnotationValue size = annotation.getValue("size");
1:fcb5d9e:             JClass propertyType = property.getType();
1:fcb5d9e:             String type = propertyType.getSimpleName();
1:fcb5d9e:             String getter = "info." + property.getSimpleName();
1:fcb5d9e: 
1:fcb5d9e:             if (type.equals("boolean")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("char")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("short")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("int")) {
1:fcb5d9e:                 out.println("        dataOut.Write(" + getter + ");");
1:540dd5c:             } else if (type.equals("long")) {
1:fcb5d9e:                 out.println("        LooseMarshalLong(wireFormat, " + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("String")) {
1:fcb5d9e:                 out.println("        LooseMarshalString(" + getter + ", dataOut);");
1:540dd5c:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("        dataOut.Write(" + getter + ", 0, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        dataOut.Write(" + getter + "!=null);");
1:fcb5d9e:                     out.println("        if(" + getter + "!=null) {");
1:fcb5d9e:                     out.println("           dataOut.Write(" + getter + ".Length);");
1:fcb5d9e:                     out.println("           dataOut.Write(" + getter + ");");
1:fcb5d9e:                     out.println("        }");
1:fcb5d9e:                 }
1:540dd5c:             } else if (propertyType.isArrayType()) {
1:fcb5d9e:                 if (size != null) {
1:fcb5d9e:                     out.println("        LooseMarshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        LooseMarshalObjectArray(wireFormat, " + getter + ", dataOut);");
1:fcb5d9e:                 }
1:540dd5c:             } else if (isThrowable(propertyType)) {
1:fcb5d9e:                 out.println("        LooseMarshalBrokerError(wireFormat, " + getter + ", dataOut);");
1:540dd5c:             } else {
1:fcb5d9e:                 if (isCachedProperty(property)) {
1:fcb5d9e:                     out.println("        LooseMarshalCachedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:540dd5c:                 } else {
1:fcb5d9e:                     out.println("        LooseMarshalNestedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:fcb5d9e:                 }
1:fcb5d9e:             }
1:fcb5d9e:         }
1:fcb5d9e:     }
1:fcb5d9e: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public void setTargetDir(String targetDir) {
1:540dd5c:         this.targetDir = targetDir;
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     private void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println("//        activemq-core module");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using System;");
1:540dd5c:         out.println("using System.Collections;");
1:540dd5c:         out.println("using System.IO;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using ActiveMQ.Commands;");
1:540dd5c:         out.println("using ActiveMQ.OpenWire;");
1:540dd5c:         out.println("using ActiveMQ.OpenWire.V" + getOpenwireVersion() + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace ActiveMQ.OpenWire.V" + getOpenwireVersion() + "");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("  /// <summary>");
1:540dd5c:         out.println("  ///  Marshalling code for Open Wire Format for " + jclass.getSimpleName() + "");
1:540dd5c:         out.println("  /// </summary>");
1:540dd5c:         out.println("  " + getAbstractClassText() + "class " + getClassName() + " : " + getBaseClass() + "");
1:540dd5c:         out.println("  {");
1:bd0ad68: 
1:540dd5c:         if (!isAbstractClass()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    public override DataStructure CreateObject() ");
1:540dd5c:             out.println("    {");
1:540dd5c:             out.println("        return new " + jclass.getSimpleName() + "();");
1:540dd5c:             out.println("    }");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    public override byte GetDataStructureType() ");
1:540dd5c:             out.println("    {");
1:540dd5c:             out.println("        return " + jclass.getSimpleName() + ".ID_" + jclass.getSimpleName() + ";");
1:540dd5c:             out.println("    }");
1:bd0ad68:         }
1:bd0ad68: 
1:540dd5c:         /*
1:540dd5c:          * Generate the tight encoding marshallers
1:540dd5c:          */
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    // Un-marshal an object instance from the data input stream");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    public override void TightUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn, BooleanStream bs) ");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("        base.TightUnmarshal(wireFormat, o, dataIn, bs);");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.BeforeUnmarshall(wireFormat);");
1:540dd5c:             out.println("");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateTightUnmarshalBody(out);
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.AfterUnmarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    //");
1:540dd5c:         out.println("    // Write the booleans that this object uses to a BooleanStream");
1:540dd5c:         out.println("    //");
1:540dd5c:         out.println("    public override int TightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) {");
1:540dd5c:         out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.BeforeMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        int rc = base.TightMarshal1(wireFormat, info, bs);");
1:bd0ad68: 
1:540dd5c:         int baseSize = generateTightMarshal1Body(out);
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        return rc + " + baseSize + ";");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    // Write a object instance to data output stream");
1:540dd5c:         out.println("    //");
1:540dd5c:         out.println("    public override void TightMarshal2(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut, BooleanStream bs) {");
1:540dd5c:         out.println("        base.TightMarshal2(wireFormat, o, dataOut, bs);");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateTightMarshal2Body(out);
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.AfterMarshall(wireFormat);");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    // Un-marshal an object instance from the data input stream");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    public override void LooseUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn) ");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("        base.LooseUnmarshal(wireFormat, o, dataIn);");
1:bd0ad68: 
1:540dd5c:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.BeforeUnmarshall(wireFormat);");
1:540dd5c:             out.println("");
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         generateLooseUnmarshalBody(out);
1:540dd5c: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.AfterUnmarshall(wireFormat);");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    // ");
1:540dd5c:         out.println("    // Write a object instance to data output stream");
1:540dd5c:         out.println("    //");
1:540dd5c:         out.println("    public override void LooseMarshal(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut) {");
1:540dd5c: 
1:540dd5c:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.BeforeMarshall(wireFormat);");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        base.LooseMarshal(wireFormat, o, dataOut);");
1:540dd5c: 
1:540dd5c:         generateLooseMarshalBody(out);
1:540dd5c: 
1:540dd5c:         if (isMarshallerAware()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        info.AfterMarshall(wireFormat);");
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("  }");
1:540dd5c:         out.println("}");
1:540dd5c: 
1:540dd5c:     }
1:540dd5c: 
1:bd0ad68:     public void generateFactory(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println("//        activemq-core module");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using System;");
1:540dd5c:         out.println("using System.Collections;");
1:540dd5c:         out.println("using System.IO;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using ActiveMQ.Commands;");
1:540dd5c:         out.println("using ActiveMQ.OpenWire;");
1:540dd5c:         out.println("using ActiveMQ.OpenWire.V" + getOpenwireVersion() + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace ActiveMQ.OpenWire.V" + getOpenwireVersion() + "");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    /// <summary>");
1:540dd5c:         out.println("    /// Used to create marshallers for a specific version of the wire protocol");
1:540dd5c:         out.println("    /// </summary>");
1:540dd5c:         out.println("    public class MarshallerFactory : IMarshallerFactory");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("        public void configure(OpenWireFormat format) ");
1:540dd5c:         out.println("        {");
1:540dd5c:         out.println("            format.clearMarshallers();");
1:bd0ad68: 
1:c454fe3:         List<JClass> list = new ArrayList<JClass>(getConcreteClasses());
1:c454fe3:         Collections.sort(list, new Comparator<JClass>() {
1:c454fe3:             public int compare(JClass c1, JClass c2) {
1:540dd5c:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:540dd5c:             }
1:540dd5c:         });
1:bd0ad68: 
1:540dd5c:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:540dd5c:             JClass jclass = (JClass)iter.next();
1:540dd5c:             out.println("            format.addMarshaller(new " + jclass.getSimpleName() + "Marshaller());");
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("        }");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("}");
1:bd0ad68: 
1:540dd5c:     }
1:bd0ad68: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c454fe3
/////////////////////////////////////////////////////////////////////////
1:         List<JClass> list = new ArrayList<JClass>(getConcreteClasses());
1:         Collections.sort(list, new Comparator<JClass>() {
1:             public int compare(JClass c1, JClass c2) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Comparator;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1:     protected String targetDir = "./src/main/csharp";
1:             destDir = new File(targetDir + "/ActiveMQ/OpenWire/V" + getOpenwireVersion());
1:         }
1: 
1:     // ////////////////////////////////////////////////////////////////////////////////////
1:     // ////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         } else if (type.equals("byte")) {
1:         } else if (type.equals("char")) {
1:         } else if (type.equals("short")) {
1:         } else if (type.equals("int")) {
1:         } else if (type.equals("long")) {
1:         } else if (type.equals("String")) {
1:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             } else {
1:         } else if (isThrowable(property.getType())) {
1:         } else if (isCachedProperty(property)) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:             } else if (type.equals("String")) {
1:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 } else {
1:             } else if (propertyType.isArrayType()) {
1:                 } else {
1:             } else if (isThrowable(propertyType)) {
1:             } else {
1:                 } else {
/////////////////////////////////////////////////////////////////////////
1:             JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:             } else if (type.equals("String")) {
1:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 } else {
1:             } else if (propertyType.isArrayType()) {
1:                 } else {
1:             } else if (isThrowable(propertyType)) {
1:             } else {
1:                 } else {
1: 
1:     // ////////////////////////////////////////////////////////////////////////////////////
1:     // ////////////////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else if (type.equals("byte")) {
1:         } else if (type.equals("char")) {
1:         } else if (type.equals("short")) {
1:         } else if (type.equals("int")) {
1:         } else if (type.equals("long")) {
1:         } else if (type.equals("String")) {
1:         } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             } else {
1:         } else if (isThrowable(property.getType())) {
1:         } else if (isCachedProperty(property)) {
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             JProperty property = (JProperty)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             } else if (type.equals("byte")) {
1:             } else if (type.equals("char")) {
1:             } else if (type.equals("short")) {
1:             } else if (type.equals("int")) {
1:             } else if (type.equals("long")) {
1:             } else if (type.equals("String")) {
1:             } else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 } else {
1:             } else if (propertyType.isArrayType()) {
1:                 } else {
1:             } else if (isThrowable(propertyType)) {
1:             } else {
1:                 } else {
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
1:     private void generateLicence(PrintWriter out) {
1:         out.println("/**");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     }
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("");
1:         out.println("//");
1:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:         out.println("//        activemq-core module");
1:         out.println("//");
1:         out.println("");
1:         out.println("using System;");
1:         out.println("using System.Collections;");
1:         out.println("using System.IO;");
1:         out.println("");
1:         out.println("using ActiveMQ.Commands;");
1:         out.println("using ActiveMQ.OpenWire;");
1:         out.println("using ActiveMQ.OpenWire.V" + getOpenwireVersion() + ";");
1:         out.println("");
1:         out.println("namespace ActiveMQ.OpenWire.V" + getOpenwireVersion() + "");
1:         out.println("{");
1:         out.println("  /// <summary>");
1:         out.println("  ///  Marshalling code for Open Wire Format for " + jclass.getSimpleName() + "");
1:         out.println("  /// </summary>");
1:         out.println("  " + getAbstractClassText() + "class " + getClassName() + " : " + getBaseClass() + "");
1:         out.println("  {");
1:         if (!isAbstractClass()) {
1:             out.println("");
1:             out.println("");
1:             out.println("    public override DataStructure CreateObject() ");
1:             out.println("    {");
1:             out.println("        return new " + jclass.getSimpleName() + "();");
1:             out.println("    }");
1:             out.println("");
1:             out.println("    public override byte GetDataStructureType() ");
1:             out.println("    {");
1:             out.println("        return " + jclass.getSimpleName() + ".ID_" + jclass.getSimpleName() + ";");
1:             out.println("    }");
1:         /*
1:          * Generate the tight encoding marshallers
1:          */
1:         out.println("");
1:         out.println("    // ");
1:         out.println("    // Un-marshal an object instance from the data input stream");
1:         out.println("    // ");
1:         out.println("    public override void TightUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn, BooleanStream bs) ");
1:         out.println("    {");
1:         out.println("        base.TightUnmarshal(wireFormat, o, dataIn, bs);");
1:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:             out.println("");
1:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.BeforeUnmarshall(wireFormat);");
1:             out.println("");
1:         }
1:         generateTightUnmarshalBody(out);
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.AfterUnmarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    //");
1:         out.println("    // Write the booleans that this object uses to a BooleanStream");
1:         out.println("    //");
1:         out.println("    public override int TightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) {");
1:         out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.BeforeMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("        int rc = base.TightMarshal1(wireFormat, info, bs);");
1:         int baseSize = generateTightMarshal1Body(out);
1:         out.println("");
1:         out.println("        return rc + " + baseSize + ";");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    // ");
1:         out.println("    // Write a object instance to data output stream");
1:         out.println("    //");
1:         out.println("    public override void TightMarshal2(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut, BooleanStream bs) {");
1:         out.println("        base.TightMarshal2(wireFormat, o, dataOut, bs);");
1:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:             out.println("");
1:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:         }
1:         generateTightMarshal2Body(out);
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.AfterMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    // ");
1:         out.println("    // Un-marshal an object instance from the data input stream");
1:         out.println("    // ");
1:         out.println("    public override void LooseUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn) ");
1:         out.println("    {");
1:         out.println("        base.LooseUnmarshal(wireFormat, o, dataIn);");
1:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:             out.println("");
1:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:         }
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.BeforeUnmarshall(wireFormat);");
1:             out.println("");
1:         }
1:         generateLooseUnmarshalBody(out);
1: 
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.AfterUnmarshall(wireFormat);");
1:         }
1: 
1:         out.println("");
1:         out.println("    }");
1:         out.println("");
1:         out.println("    // ");
1:         out.println("    // Write a object instance to data output stream");
1:         out.println("    //");
1:         out.println("    public override void LooseMarshal(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut) {");
1: 
1:         if (!getProperties().isEmpty() || isMarshallerAware()) {
1:             out.println("");
1:             out.println("        " + jclass.getSimpleName() + " info = (" + jclass.getSimpleName() + ")o;");
1:         }
1: 
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.BeforeMarshall(wireFormat);");
1:         }
1: 
1:         out.println("");
1:         out.println("        base.LooseMarshal(wireFormat, o, dataOut);");
1: 
1:         generateLooseMarshalBody(out);
1: 
1:         if (isMarshallerAware()) {
1:             out.println("");
1:             out.println("        info.AfterMarshall(wireFormat);");
1:         }
1:         out.println("");
1:         out.println("    }");
1:         out.println("  }");
1:         out.println("}");
1: 
1:     }
1: 
1:         generateLicence(out);
1:         out.println("");
1:         out.println("//");
1:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:         out.println("//        activemq-core module");
1:         out.println("//");
1:         out.println("");
1:         out.println("using System;");
1:         out.println("using System.Collections;");
1:         out.println("using System.IO;");
1:         out.println("");
1:         out.println("using ActiveMQ.Commands;");
1:         out.println("using ActiveMQ.OpenWire;");
1:         out.println("using ActiveMQ.OpenWire.V" + getOpenwireVersion() + ";");
1:         out.println("");
1:         out.println("namespace ActiveMQ.OpenWire.V" + getOpenwireVersion() + "");
1:         out.println("{");
1:         out.println("    /// <summary>");
1:         out.println("    /// Used to create marshallers for a specific version of the wire protocol");
1:         out.println("    /// </summary>");
1:         out.println("    public class MarshallerFactory : IMarshallerFactory");
1:         out.println("    {");
1:         out.println("        public void configure(OpenWireFormat format) ");
1:         out.println("        {");
1:         out.println("            format.clearMarshallers();");
0:         List list = new ArrayList(getConcreteClasses());
0:         Collections.sort(list, new Comparator() {
0:             public int compare(Object o1, Object o2) {
0:                 JClass c1 = (JClass)o1;
0:                 JClass c2 = (JClass)o2;
1:                 return c1.getSimpleName().compareTo(c2.getSimpleName());
1:             }
1:         });
1:         for (Iterator iter = list.iterator(); iter.hasNext();) {
1:             JClass jclass = (JClass)iter.next();
1:             out.println("            format.addMarshaller(new " + jclass.getSimpleName() + "Marshaller());");
1:         }
1:         out.println("");
1:         out.println("        }");
1:         out.println("    }");
1:         out.println("}");
1: 
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:7967851
/////////////////////////////////////////////////////////////////////////
0: out.println("    public class MarshallerFactory : IMarshallerFactory");
0: out.println("            format.clearMarshallers();");
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: public class CSharpMarshallingGenerator extends JavaMarshallingGenerator {
1: 
0: 	protected String targetDir="./src/main/csharp";
0:             destDir = new File(targetDir+"/ActiveMQ/OpenWire/V"+getOpenwireVersion());
1:         }        
/////////////////////////////////////////////////////////////////////////
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String targetDir) {
0: 		this.targetDir = targetDir;
1: 	}
1: 
0: 	private void generateLicence(PrintWriter out) {
0: out.println("/*");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
0: 		generateLicence(out);
0: out.println("");
0: out.println("//");
0: out.println("// NOTE!: This file is autogenerated - do not modify!");
0: out.println("//        if you need to make a change, please see the Groovy scripts in the");
0: out.println("//        activemq-core module");
0: out.println("//");
0: out.println("");
0: out.println("using System;");
0: out.println("using System.Collections;");
0: out.println("using System.IO;");
0: out.println("");
0: out.println("using ActiveMQ.Commands;");
0: out.println("using ActiveMQ.OpenWire;");
0: out.println("using ActiveMQ.OpenWire.V"+getOpenwireVersion()+";");
0: out.println("");
0: out.println("namespace ActiveMQ.OpenWire.V"+getOpenwireVersion()+"");
0: out.println("{");
0: out.println("  /// <summary>");
0: out.println("  ///  Marshalling code for Open Wire Format for "+jclass.getSimpleName()+"");
0: out.println("  /// </summary>");
0: out.println("  "+getAbstractClassText()+"class "+getClassName()+" : "+getBaseClass()+"");
0: out.println("  {");
1: 
0: 		if( !isAbstractClass() ) {
0: out.println("");
0: out.println("");
0: out.println("    public override DataStructure CreateObject() ");
0: out.println("    {");
0: out.println("        return new "+jclass.getSimpleName()+"();");
0: out.println("    }");
0: out.println("");
0: out.println("    public override byte GetDataStructureType() ");
0: out.println("    {");
0: out.println("        return "+jclass.getSimpleName()+".ID_"+jclass.getSimpleName()+";");
0: out.println("    }");
1: 		}
1: 
0: /*
0:  * Generate the tight encoding marshallers
1:  */ 
0: out.println("");
0: out.println("    // ");
0: out.println("    // Un-marshal an object instance from the data input stream");
0: out.println("    // ");
0: out.println("    public override void TightUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn, BooleanStream bs) ");
0: out.println("    {");
0: out.println("        base.TightUnmarshal(wireFormat, o, dataIn, bs);");
1:  
0: 		if( !getProperties().isEmpty() || isMarshallerAware() ) {
0: out.println("");
0: out.println("        "+jclass.getSimpleName()+" info = ("+jclass.getSimpleName()+")o;");
1: 		}
1: 
0: 		if( isMarshallerAware() ){
0: out.println("");
0: out.println("        info.BeforeUnmarshall(wireFormat);");
0: out.println("");
1:         }
1: 
0: generateTightUnmarshalBody(out);
1: 
0: 		if( isMarshallerAware() ){
0: out.println("");
0: out.println("        info.AfterUnmarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("    //");
0: out.println("    // Write the booleans that this object uses to a BooleanStream");
0: out.println("    //");
0: out.println("    public override int TightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) {");
0: out.println("        "+jclass.getSimpleName()+" info = ("+jclass.getSimpleName()+")o;");
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.BeforeMarshall(wireFormat);");
1: 		}
1: 		
0: out.println("");
0: out.println("        int rc = base.TightMarshal1(wireFormat, info, bs);");
1: 
0: int baseSize = generateTightMarshal1Body(out);
1:     
0: out.println("");
0: out.println("        return rc + "+baseSize+";");
0: out.println("    }");
0: out.println("");
0: out.println("    // ");
0: out.println("    // Write a object instance to data output stream");
0: out.println("    //");
0: out.println("    public override void TightMarshal2(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut, BooleanStream bs) {");
0: out.println("        base.TightMarshal2(wireFormat, o, dataOut, bs);");
1: 
0: 		if( !getProperties().isEmpty() || isMarshallerAware() ) {
0: out.println("");
0: out.println("        "+jclass.getSimpleName()+" info = ("+jclass.getSimpleName()+")o;");
1: 		}
1: 
0: 		generateTightMarshal2Body(out);
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.AfterMarshall(wireFormat);");
1: 		}
1: 		
0: out.println("");
0: out.println("    }");
1: 
0: out.println("");
0: out.println("    // ");
0: out.println("    // Un-marshal an object instance from the data input stream");
0: out.println("    // ");
0: out.println("    public override void LooseUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn) ");
0: out.println("    {");
0: out.println("        base.LooseUnmarshal(wireFormat, o, dataIn);");
1:  
0: 		if( !getProperties().isEmpty() || isMarshallerAware() )  {
0: out.println("");
0: out.println("        "+jclass.getSimpleName()+" info = ("+jclass.getSimpleName()+")o;");		
1: 		}
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.BeforeUnmarshall(wireFormat);");
0: out.println("");
1: 		}
1: 
0: 		generateLooseUnmarshalBody(out);
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.AfterUnmarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("    }");
0: out.println("");
0: out.println("    // ");
0: out.println("    // Write a object instance to data output stream");
0: out.println("    //");
0: out.println("    public override void LooseMarshal(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut) {");
1: 
0: 		if( !getProperties().isEmpty() || isMarshallerAware() ) {
0: out.println("");
0: out.println("        "+jclass.getSimpleName()+" info = ("+jclass.getSimpleName()+")o;");
1: 		}
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.BeforeMarshall(wireFormat);");
1: 		}
1: 
0: out.println("");
0: out.println("        base.LooseMarshal(wireFormat, o, dataOut);");
1: 
0: 		generateLooseMarshalBody(out);
1: 
0: 		if( isMarshallerAware() ) {
0: out.println("");
0: out.println("        info.AfterMarshall(wireFormat);");
1: 		}
0: out.println("");
0: out.println("    }");
0: out.println("  }");
0: out.println("}");
1: 		
1: 	}
1: 	
1: 	
1:     public void generateFactory(PrintWriter out) {
0: 		generateLicence(out);
0: out.println("");
0: out.println("//");
0: out.println("// NOTE!: This file is autogenerated - do not modify!");
0: out.println("//        if you need to make a change, please see the Groovy scripts in the");
0: out.println("//        activemq-core module");
0: out.println("//");
0: out.println("");
0: out.println("using System;");
0: out.println("using System.Collections;");
0: out.println("using System.IO;");
0: out.println("");
0: out.println("using ActiveMQ.Commands;");
0: out.println("using ActiveMQ.OpenWire;");
0: out.println("using ActiveMQ.OpenWire.V"+getOpenwireVersion()+";");
0: out.println("");
0: out.println("namespace ActiveMQ.OpenWire.V"+getOpenwireVersion()+"");
0: out.println("{");
0: out.println("	/// <summary>");
0: out.println("	/// Used to create marshallers for a specific version of the wire protocol");
0: out.println("	/// </summary>");
0: out.println("    public class MarshallerFactory");
0: out.println("    {");
0: out.println("        public void configure(OpenWireFormat format) ");
1: out.println("        {");
1: 
0: 		List list = new ArrayList(getConcreteClasses());
0: 		Collections.sort(list, new Comparator(){
0: 			public int compare(Object o1, Object o2) {
0: 				JClass c1 = (JClass) o1;
0: 				JClass c2 = (JClass) o2;
0: 				return c1.getSimpleName().compareTo(c2.getSimpleName());
0: 			}});
1: 		
0: 		for (Iterator iter = list.iterator(); iter.hasNext();) {
0: 			JClass jclass = (JClass) iter.next();
0: out.println("            format.addMarshaller(new "+jclass.getSimpleName()+"Marshaller());");
1: 	    }        
1: 
0: out.println("");
0: out.println("    	}");
0: out.println("    }");
0: out.println("}");
1: 
1: 	}	
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:fcb5d9e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JAnnotationValue;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
0: import java.io.*;
0: import java.util.*;
1: 
1: /**
1:  *
0:  * @version $Revision: 384390 $
1:  */
0: public abstract class OpenWireCSharpMarshallingScript extends OpenWireJavaMarshallingScript {
1: 
1:     public Object run() {
1:         filePostFix = ".cs";
1:         if (destDir == null) {
0:             destDir = new File("../activemq-dotnet/src/main/csharp/ActiveMQ/OpenWire/V"+getOpenwireVersion());
1:         }
1:         
1:         return super.run();
1:     }
1:     
0:     //////////////////////////////////////////////////////////////////////////////////////
1:     // This section is for the tight wire format encoding generator
0:     //////////////////////////////////////////////////////////////////////////////////////
1: 
1:     protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1: 
1:         String propertyName = property.getSimpleName();
1:         String type = property.getType().getSimpleName();
1: 
1:         if (type.equals("boolean")) {
1:             out.println("        info." + propertyName + " = bs.ReadBoolean();");
1:         }
0:         else if (type.equals("byte")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadByte();");
1:         }
0:         else if (type.equals("char")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadChar();");
1:         }
0:         else if (type.equals("short")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadInt16();");
1:         }
0:         else if (type.equals("int")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadInt32();");
1:         }
0:         else if (type.equals("long")) {
1:             out.println("        info." + propertyName + " = TightUnmarshalLong(wireFormat, dataIn, bs);");
1:         }
0:         else if (type.equals("String")) {
1:             out.println("        info." + propertyName + " = TightUnmarshalString(dataIn, bs);");
1:         }
0:         else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             if (size != null) {
1:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, " + size.asInt() + ");");
1:             }
0:             else {
1:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, bs.ReadBoolean());");
1:             }
1:         }
0:         else if (isThrowable(property.getType())) {
1:             out.println("        info." + propertyName + " = TightUnmarshalBrokerError(wireFormat, dataIn, bs);");
1:         }
0:         else if (isCachedProperty(property)) {
1:             out.println("        info." + propertyName + " = (" + type + ") TightUnmarshalCachedObject(wireFormat, dataIn, bs);");
1:         }
0:         else {
1:             out.println("        info." + propertyName + " = (" + type + ") TightUnmarshalNestedObject(wireFormat, dataIn, bs);");
1:         }
1:     }
1: 
1:     protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         JClass propertyType = property.getType();
1:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:         String propertyName = property.getSimpleName();
1:         out.println();
1:         if (size != null) {
1:             out.println("        {");
1:             out.println("            " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") TightUnmarshalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("            }");
1:             out.println("            info." + propertyName + " = value;");
1:             out.println("        }");
1:         }
0:         else {
1:             out.println("        if (bs.ReadBoolean()) {");
1:             out.println("            short size = dataIn.ReadInt16();");
1:             out.println("            " + arrayType + "[] value = new " + arrayType + "[size];");
1:             out.println("            for( int i=0; i < size; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") TightUnmarshalNestedObject(wireFormat,dataIn, bs);");
1:             out.println("            }");
1:             out.println("            info." + propertyName + " = value;");
1:             out.println("        }");
1:             out.println("        else {");
1:             out.println("            info." + propertyName + " = null;");
1:             out.println("        }");
1:         }
1:     }
1: 
1:     protected int generateTightMarshal1Body(PrintWriter out) {
1:         List properties = getProperties();
1:         int baseSize = 0;
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getSimpleName();
1: 
1:             if (type.equals("boolean")) {
1:                 out.println("        bs.WriteBoolean(" + getter + ");");
1:             }
0:             else if (type.equals("byte")) {
1:                 baseSize += 1;
1:             }
0:             else if (type.equals("char")) {
1:                 baseSize += 2;
1:             }
0:             else if (type.equals("short")) {
1:                 baseSize += 2;
1:             }
0:             else if (type.equals("int")) {
1:                 baseSize += 4;
1:             }
0:             else if (type.equals("long")) {
1:                 out.println("        rc += TightMarshalLong1(wireFormat, " + getter + ", bs);");
1:             }
0:             else if (type.equals("String")) {
1:                 out.print("");
1:                 out.println("        rc += TightMarshalString1(" + getter + ", bs);");
1:             }
0:             else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 if (size == null) {
1:                     out.println("        bs.WriteBoolean(" + getter + "!=null);");
1:                     out.println("        rc += " + getter + "==null ? 0 : " + getter + ".Length+4;");
1:                 }
0:                 else {
1:                     baseSize += size.asInt();
1:                 }
1:             }
0:             else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        rc += TightMarshalObjectArrayConstSize1(wireFormat, " + getter + ", bs, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("        rc += TightMarshalObjectArray1(wireFormat, " + getter + ", bs);");
1:                 }
1:             }
0:             else if (isThrowable(propertyType)) {
1:                 out.println("        rc += TightMarshalBrokerError1(wireFormat, " + getter + ", bs);");
1:             }
0:             else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        rc += TightMarshalCachedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:                 }
0:                 else {
1:                     out.println("        rc += TightMarshalNestedObject1(wireFormat, (DataStructure)" + getter + ", bs);");
1:                 }
1:             }
1:         }
1:         return baseSize;
1:     }
1: 
1:     protected void generateTightMarshal2Body(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getSimpleName();
1: 
1:             if (type.equals("boolean")) {
1:                 out.println("        bs.ReadBoolean();");
1:             }
0:             else if (type.equals("byte")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("char")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("short")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("int")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("long")) {
1:                 out.println("        TightMarshalLong2(wireFormat, " + getter + ", dataOut, bs);");
1:             }
0:             else if (type.equals("String")) {
1:                 out.println("        TightMarshalString2(" + getter + ", dataOut, bs);");
1:             }
0:             else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 if (size != null) {
1:                     out.println("        dataOut.Write(" + getter + ", 0, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("        if(bs.ReadBoolean()) {");
1:                     out.println("           dataOut.Write(" + getter + ".Length);");
1:                     out.println("           dataOut.Write(" + getter + ");");
1:                     out.println("        }");
1:                 }
1:             }
0:             else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        TightMarshalObjectArrayConstSize2(wireFormat, " + getter + ", dataOut, bs, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("        TightMarshalObjectArray2(wireFormat, " + getter + ", dataOut, bs);");
1:                 }
1:             }
0:             else if (isThrowable(propertyType)) {
1:                 out.println("        TightMarshalBrokerError2(wireFormat, " + getter + ", dataOut, bs);");
1:             }
0:             else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        TightMarshalCachedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:                 }
0:                 else {
1:                     out.println("        TightMarshalNestedObject2(wireFormat, (DataStructure)" + getter + ", dataOut, bs);");
1:                 }
1:             }
1:         }
1:     }
1:     
0:     //////////////////////////////////////////////////////////////////////////////////////
1:     // This section is for the loose wire format encoding generator
0:     //////////////////////////////////////////////////////////////////////////////////////
1:     
1:     protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1: 
1:         String propertyName = property.getSimpleName();
1:         String type = property.getType().getSimpleName();
1: 
1:         if (type.equals("boolean")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadBoolean();");
1:         }
0:         else if (type.equals("byte")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadByte();");
1:         }
0:         else if (type.equals("char")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadChar();");
1:         }
0:         else if (type.equals("short")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadInt16();");
1:         }
0:         else if (type.equals("int")) {
1:             out.println("        info." + propertyName + " = dataIn.ReadInt32();");
1:         }
0:         else if (type.equals("long")) {
1:             out.println("        info." + propertyName + " = LooseUnmarshalLong(wireFormat, dataIn);");
1:         }
0:         else if (type.equals("String")) {
1:             out.println("        info." + propertyName + " = LooseUnmarshalString(dataIn);");
1:         }
0:         else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:             if (size != null) {
1:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, " + size.asInt() + ");");
1:             }
0:             else {
1:                 out.println("        info." + propertyName + " = ReadBytes(dataIn, dataIn.ReadBoolean());");
1:             }
1:         }
0:         else if (isThrowable(property.getType())) {
1:             out.println("        info." + propertyName + " = LooseUnmarshalBrokerError(wireFormat, dataIn);");
1:         }
0:         else if (isCachedProperty(property)) {
1:             out.println("        info." + propertyName + " = (" + type + ") LooseUnmarshalCachedObject(wireFormat, dataIn);");
1:         }
0:         else {
1:             out.println("        info." + propertyName + " = (" + type + ") LooseUnmarshalNestedObject(wireFormat, dataIn);");
1:         }
1:     }
1: 
1:     protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {
1:         JClass propertyType = property.getType();
1:         String arrayType = propertyType.getArrayComponentType().getSimpleName();
1:         String propertyName = property.getSimpleName();
1:         out.println();
1:         if (size != null) {
1:             out.println("        {");
1:             out.println("            " + arrayType + "[] value = new " + arrayType + "[" + size.asInt() + "];");
1:             out.println("            " + "for( int i=0; i < " + size.asInt() + "; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") LooseUnmarshalNestedObject(wireFormat,dataIn);");
1:             out.println("            }");
1:             out.println("            info." + propertyName + " = value;");
1:             out.println("        }");
1:         }
0:         else {
1:             out.println("        if (dataIn.ReadBoolean()) {");
1:             out.println("            short size = dataIn.ReadInt16();");
1:             out.println("            " + arrayType + "[] value = new " + arrayType + "[size];");
1:             out.println("            for( int i=0; i < size; i++ ) {");
1:             out.println("                value[i] = (" + arrayType + ") LooseUnmarshalNestedObject(wireFormat,dataIn);");
1:             out.println("            }");
1:             out.println("            info." + propertyName + " = value;");
1:             out.println("        }");
1:             out.println("        else {");
1:             out.println("            info." + propertyName + " = null;");
1:             out.println("        }");
1:         }
1:     }
1: 
1: 
1:     protected void generateLooseMarshalBody(PrintWriter out) {
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
0:             JProperty property = (JProperty) iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             JAnnotationValue size = annotation.getValue("size");
1:             JClass propertyType = property.getType();
1:             String type = propertyType.getSimpleName();
1:             String getter = "info." + property.getSimpleName();
1: 
1:             if (type.equals("boolean")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("byte")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("char")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("short")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("int")) {
1:                 out.println("        dataOut.Write(" + getter + ");");
1:             }
0:             else if (type.equals("long")) {
1:                 out.println("        LooseMarshalLong(wireFormat, " + getter + ", dataOut);");
1:             }
0:             else if (type.equals("String")) {
1:                 out.println("        LooseMarshalString(" + getter + ", dataOut);");
1:             }
0:             else if (type.equals("byte[]") || type.equals("ByteSequence")) {
1:                 if (size != null) {
1:                     out.println("        dataOut.Write(" + getter + ", 0, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("        dataOut.Write(" + getter + "!=null);");
1:                     out.println("        if(" + getter + "!=null) {");
1:                     out.println("           dataOut.Write(" + getter + ".Length);");
1:                     out.println("           dataOut.Write(" + getter + ");");
1:                     out.println("        }");
1:                 }
1:             }
0:             else if (propertyType.isArrayType()) {
1:                 if (size != null) {
1:                     out.println("        LooseMarshalObjectArrayConstSize(wireFormat, " + getter + ", dataOut, " + size.asInt() + ");");
1:                 }
0:                 else {
1:                     out.println("        LooseMarshalObjectArray(wireFormat, " + getter + ", dataOut);");
1:                 }
1:             }
0:             else if (isThrowable(propertyType)) {
1:                 out.println("        LooseMarshalBrokerError(wireFormat, " + getter + ", dataOut);");
1:             }
0:             else {
1:                 if (isCachedProperty(property)) {
1:                     out.println("        LooseMarshalCachedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:                 }
0:                 else {
1:                     out.println("        LooseMarshalNestedObject(wireFormat, (DataStructure)" + getter + ", dataOut);");
1:                 }
1:             }
1:         }
1:     }
1: 
1: }
============================================================================