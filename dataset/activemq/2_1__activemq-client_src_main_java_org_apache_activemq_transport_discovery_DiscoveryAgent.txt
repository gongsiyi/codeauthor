1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery;
4:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.DiscoveryEvent;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An agent used to discover other instances of a service. 
1:d29ca2a:  * 
1:d29ca2a:  * We typically use a discovery agent to auto-discover JMS clients and JMS brokers on a network
1:b0c2a40:  *
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public interface DiscoveryAgent extends Service {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Sets the discovery listener
1:d29ca2a:      * @param listener
1:d29ca2a:      */
1:fc00993:     void setDiscoveryListener(DiscoveryListener listener);
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * register a service
1:d29ca2a:      * @param name
1:d29ca2a:      * @param details
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     void registerService(String name) throws IOException;
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * A process actively using a service may see it go down before the DiscoveryAgent notices the
1:d29ca2a:      * service's failure.  That process can use this method to notify the DiscoveryAgent of the failure
1:d29ca2a:      * so that other listeners of this DiscoveryAgent can also be made aware of the failure.
1:d29ca2a:      */
1:d29ca2a:     void serviceFailed(DiscoveryEvent event) throws IOException;
1:d29ca2a:     
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:43b808d
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void setDiscoveryListener(DiscoveryListener listener);
/////////////////////////////////////////////////////////////////////////
0:     void setBrokerName(String brokerName);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.command.DiscoveryEvent;
1: 
1: /**
1:  * An agent used to discover other instances of a service. 
1:  * 
1:  * We typically use a discovery agent to auto-discover JMS clients and JMS brokers on a network
1:  *
0:  * @version $Revision$
1:  */
1: public interface DiscoveryAgent extends Service {
1: 
1:     /**
1:      * Sets the discovery listener
1:      * @param listener
1:      */
0:     public void setDiscoveryListener(DiscoveryListener listener);
1: 
1:     /**
1:      * register a service
1:      * @param name
1:      * @param details
1:      * @throws JMSException
1:      */
1:     void registerService(String name) throws IOException;
1:     
1:     /**
1:      * A process actively using a service may see it go down before the DiscoveryAgent notices the
1:      * service's failure.  That process can use this method to notify the DiscoveryAgent of the failure
1:      * so that other listeners of this DiscoveryAgent can also be made aware of the failure.
1:      */
1:     void serviceFailed(DiscoveryEvent event) throws IOException;
1: 
0:     String getGroup();    
1:     
0:     void setGroup(String group);
1: 
0:     public void setBrokerName(String brokerName);
1:     
1: }
============================================================================