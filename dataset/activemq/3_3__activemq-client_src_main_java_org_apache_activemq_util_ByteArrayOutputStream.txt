1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
2:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.util;
1:88acb0e: 
1:88acb0e: import java.io.OutputStream;
1:88acb0e: 
1:88acb0e: 
1:88acb0e: /**
1:88acb0e:  * Very similar to the java.io.ByteArrayOutputStream but this version 
1:88acb0e:  * is not thread safe and the resulting data is returned in a ByteSequence
1:88acb0e:  * to avoid an extra byte[] allocation.
1:88acb0e:  */
1:88acb0e: public class ByteArrayOutputStream extends OutputStream {
1:88acb0e: 
1:88acb0e:     byte buffer[];
1:88acb0e:     int size;
1:88acb0e: 
1:88acb0e:     public ByteArrayOutputStream() {
1:2241f20:         this(1028);
1:88acb0e:     }
1:88acb0e:     public ByteArrayOutputStream(int capacity) {
1:88acb0e:         buffer = new byte[capacity];
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public void write(int b) {
1:88acb0e:         int newsize = size + 1;
1:88acb0e:         checkCapacity(newsize);
1:88acb0e:         buffer[size] = (byte) b;
1:88acb0e:         size = newsize;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public void write(byte b[], int off, int len) {
1:88acb0e:         int newsize = size + len;
1:88acb0e:         checkCapacity(newsize);
1:88acb0e:         System.arraycopy(b, off, buffer, size, len);
1:88acb0e:         size = newsize;
1:88acb0e:     }
1:88acb0e:     
1:88acb0e:     /**
1:88acb0e:      * Ensures the the buffer has at least the minimumCapacity specified. 
1:e32ff5c:      * @param minimumCapacity
1:88acb0e:      */
1:88acb0e:     private void checkCapacity(int minimumCapacity) {
1:88acb0e:         if (minimumCapacity > buffer.length) {
1:88acb0e:             byte b[] = new byte[Math.max(buffer.length << 1, minimumCapacity)];
1:88acb0e:             System.arraycopy(buffer, 0, b, 0, size);
1:88acb0e:             buffer = b;
1:88acb0e:         }
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public void reset() {
1:88acb0e:         size = 0;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public ByteSequence toByteSequence() {
1:88acb0e:         return new ByteSequence(buffer, 0, size);
1:88acb0e:     }
1:88acb0e:     
1:88acb0e:     public byte[] toByteArray() {
1:88acb0e:         byte rc[] = new byte[size];
1:88acb0e:         System.arraycopy(buffer, 0, rc, 0, size);
1:88acb0e:         return rc;
1:88acb0e:     }
1:88acb0e:     
1:88acb0e:     public int size() {
1:88acb0e:         return size;
1:88acb0e:     }
1:e32ff5c: 
1:e32ff5c:     public boolean endsWith(final byte[] array) {
1:e32ff5c:         int i = 0;
1:e32ff5c:         int start = size - array.length;
1:e32ff5c:         if (start < 0) {
1:e32ff5c:             return false;
1:88acb0e:         }
1:e32ff5c:         while (start < size) {
1:e32ff5c:             if (buffer[start++] != array[i++]) {
1:e32ff5c:                 return false;
1:e32ff5c:             }
1:e32ff5c:         }
1:e32ff5c:         return true;
1:e32ff5c:     }
1:e32ff5c: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.OutputStream;
1: 
1: 
1: /**
1:  * Very similar to the java.io.ByteArrayOutputStream but this version 
1:  * is not thread safe and the resulting data is returned in a ByteSequence
1:  * to avoid an extra byte[] allocation.
1:  */
1: public class ByteArrayOutputStream extends OutputStream {
1: 
1:     byte buffer[];
1:     int size;
1: 
1:     public ByteArrayOutputStream() {
0:         this(512);
1:     }
1:     public ByteArrayOutputStream(int capacity) {
1:         buffer = new byte[capacity];
1:     }
1: 
1:     public void write(int b) {
1:         int newsize = size + 1;
1:         checkCapacity(newsize);
1:         buffer[size] = (byte) b;
1:         size = newsize;
1:     }
1: 
1:     public void write(byte b[], int off, int len) {
1:         int newsize = size + len;
1:         checkCapacity(newsize);
1:         System.arraycopy(b, off, buffer, size, len);
1:         size = newsize;
1:     }
1:     
1:     /**
1:      * Ensures the the buffer has at least the minimumCapacity specified. 
0:      * @param i
1:      */
1:     private void checkCapacity(int minimumCapacity) {
1:         if (minimumCapacity > buffer.length) {
1:             byte b[] = new byte[Math.max(buffer.length << 1, minimumCapacity)];
1:             System.arraycopy(buffer, 0, b, 0, size);
1:             buffer = b;
1:         }
1:     }
1: 
1:     public void reset() {
1:         size = 0;
1:     }
1: 
1:     public ByteSequence toByteSequence() {
1:         return new ByteSequence(buffer, 0, size);
1:     }
1:     
1:     public byte[] toByteArray() {
1:         byte rc[] = new byte[size];
1:         System.arraycopy(buffer, 0, rc, 0, size);
1:         return rc;
1:     }
1:     
1:     public int size() {
1:         return size;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e32ff5c
/////////////////////////////////////////////////////////////////////////
1:      * @param minimumCapacity
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean endsWith(final byte[] array) {
1:         int i = 0;
1:         int start = size - array.length;
1:         if (start < 0) {
1:             return false;
1:         }
1:         while (start < size) {
1:             if (buffer[start++] != array[i++]) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:2241f20
/////////////////////////////////////////////////////////////////////////
1:         this(1028);
============================================================================