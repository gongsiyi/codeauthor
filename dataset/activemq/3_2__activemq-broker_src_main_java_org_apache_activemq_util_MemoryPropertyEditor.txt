2:802296d: /**
1:802296d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:802296d:  * contributor license agreements.  See the NOTICE file distributed with
1:802296d:  * this work for additional information regarding copyright ownership.
1:802296d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:802296d:  * (the "License"); you may not use this file except in compliance with
1:802296d:  * the License.  You may obtain a copy of the License at
3:802296d:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:802296d:  *
1:802296d:  * Unless required by applicable law or agreed to in writing, software
1:802296d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:802296d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:802296d:  * See the License for the specific language governing permissions and
1:802296d:  * limitations under the License.
1:802296d:  */
1:ac66a09: package org.apache.activemq.util;
1:ac66a09: 
1:ac66a09: import java.beans.PropertyEditorSupport;
1:ac66a09: import java.util.regex.Matcher;
1:ac66a09: import java.util.regex.Pattern;
1:ac66a09: 
1:f812e34: /**
1:1802116:  * Used by xbean to set longs.
1:1802116:  * <p/>
1:1802116:  * <b>Important: </b> Do not use this for other purposes than xbean, as property editors
1:1802116:  * are not thread safe, and they are slow to use.
1:1802116:  * <p/>
1:f812e34:  * Converts string values like "20 Mb", "1024kb", and "1g" to long values in
1:f812e34:  * bytes.
1:802296d:  */
1:ac66a09: public class MemoryPropertyEditor extends PropertyEditorSupport {
1:f812e34:     public void setAsText(String text) throws IllegalArgumentException {
1:ac66a09: 
1:f812e34:         Pattern p = Pattern.compile("^\\s*(\\d+)\\s*(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:f812e34:         Matcher m = p.matcher(text);
1:f812e34:         if (m.matches()) {
1:f812e34:             setValue(Long.valueOf(Long.parseLong(m.group(1))));
1:f812e34:             return;
1:f812e34:         }
1:ac66a09: 
1:f812e34:         p = Pattern.compile("^\\s*(\\d+)\\s*k(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:f812e34:         m = p.matcher(text);
1:f812e34:         if (m.matches()) {
1:f812e34:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024));
1:f812e34:             return;
1:f812e34:         }
1:ac66a09: 
1:f812e34:         p = Pattern.compile("^\\s*(\\d+)\\s*m(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:f812e34:         m = p.matcher(text);
1:f812e34:         if (m.matches()) {
1:f812e34:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024));
1:f812e34:             return;
1:f812e34:         }
1:ac66a09: 
1:f812e34:         p = Pattern.compile("^\\s*(\\d+)\\s*g(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:f812e34:         m = p.matcher(text);
1:f812e34:         if (m.matches()) {
1:f812e34:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024 * 1024));
1:f812e34:             return;
1:f812e34:         }
1:ac66a09: 
1:f812e34:         throw new IllegalArgumentException("Could convert not to a memory size: " + text);
1:f812e34:     }
1:ac66a09: 
1:f812e34:     public String getAsText() {
1:f812e34:         Long value = (Long)getValue();
1:ecf89a6:         return value != null ? value.toString() : "";
1:f812e34:     }
1:ac66a09: 
7:ac66a09: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         return value != null ? value.toString() : "";
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Converts string values like "20 Mb", "1024kb", and "1g" to long values in
1:  * bytes.
1:     public void setAsText(String text) throws IllegalArgumentException {
1:         Pattern p = Pattern.compile("^\\s*(\\d+)\\s*(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:         Matcher m = p.matcher(text);
1:         if (m.matches()) {
1:             setValue(Long.valueOf(Long.parseLong(m.group(1))));
1:             return;
1:         }
1:         p = Pattern.compile("^\\s*(\\d+)\\s*k(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:         m = p.matcher(text);
1:         if (m.matches()) {
1:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024));
1:             return;
1:         }
1:         p = Pattern.compile("^\\s*(\\d+)\\s*m(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:         m = p.matcher(text);
1:         if (m.matches()) {
1:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024));
1:             return;
1:         }
1:         p = Pattern.compile("^\\s*(\\d+)\\s*g(b)?\\s*$", Pattern.CASE_INSENSITIVE);
1:         m = p.matcher(text);
1:         if (m.matches()) {
1:             setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024 * 1024));
1:             return;
1:         }
1:         throw new IllegalArgumentException("Could convert not to a memory size: " + text);
1:     }
1:     public String getAsText() {
1:         Long value = (Long)getValue();
0:         return (value != null ? value.toString() : "");
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:802296d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: /** 
0:  * Converts string values like "20 Mb", "1024kb", and "1g"
0:  * to long values in bytes.
1:  * 
1:  */
commit:ac66a09
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
1: 
1: import java.beans.PropertyEditorSupport;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: public class MemoryPropertyEditor extends PropertyEditorSupport {
0: 	public void setAsText(String text) throws IllegalArgumentException {
1: 
0: 		Pattern p = Pattern.compile("^\\s*(\\d+)\\s*(b)?\\s*$",Pattern.CASE_INSENSITIVE);
0: 		Matcher m = p.matcher(text);
0: 		if (m.matches()) {
0: 			setValue(new Long(Long.parseLong(m.group(1))));
0: 			return;
1: 		}
1: 
0: 		p = Pattern.compile("^\\s*(\\d+)\\s*k(b)?\\s*$",Pattern.CASE_INSENSITIVE);
0: 		m = p.matcher(text);
0: 		if (m.matches()) {
0: 			setValue(new Long(Long.parseLong(m.group(1)) * 1024));
0: 			return;
1: 		}
1: 
0: 		p = Pattern.compile("^\\s*(\\d+)\\s*m(b)?\\s*$", Pattern.CASE_INSENSITIVE);
0: 		m = p.matcher(text);
0: 		if (m.matches()) {
0: 			setValue(new Long(Long.parseLong(m.group(1)) * 1024 * 1024 ));
0: 			return;
1: 		}
1: 
0: 		p = Pattern.compile("^\\s*(\\d+)\\s*g(b)?\\s*$", Pattern.CASE_INSENSITIVE);
0: 		m = p.matcher(text);
0: 		if (m.matches()) {
0: 			setValue(new Long(Long.parseLong(m.group(1)) * 1024 * 1024 * 1024 ));
0: 			return;
1: 		}
1: 
0: 		throw new IllegalArgumentException(
0: 				"Could convert not to a memory size: " + text);
1: 	}
1: 
0: 	public String getAsText() {
0: 		Long value = (Long) getValue();
0: 		return (value != null ? value.toString() : "");
1: 	}
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:1802116
/////////////////////////////////////////////////////////////////////////
1:  * Used by xbean to set longs.
1:  * <p/>
1:  * <b>Important: </b> Do not use this for other purposes than xbean, as property editors
1:  * are not thread safe, and they are slow to use.
1:  * <p/>
commit:b749228
/////////////////////////////////////////////////////////////////////////
0: @Deprecated
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0: 			setValue(Long.valueOf(Long.parseLong(m.group(1))));
0: 			setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024));
0: 			setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024 ));
0: 			setValue(Long.valueOf(Long.parseLong(m.group(1)) * 1024 * 1024 * 1024 ));
============================================================================