1:cfc6917: /**
1:cfc6917:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfc6917:  * contributor license agreements.  See the NOTICE file distributed with
1:cfc6917:  * this work for additional information regarding copyright ownership.
1:cfc6917:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfc6917:  * (the "License"); you may not use this file except in compliance with
1:cfc6917:  * the License.  You may obtain a copy of the License at
2:cfc6917:  *
1:cfc6917:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cfc6917:  *
1:cfc6917:  * Unless required by applicable law or agreed to in writing, software
1:cfc6917:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfc6917:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfc6917:  * See the License for the specific language governing permissions and
1:cfc6917:  * limitations under the License.
1:cfc6917:  */
1:cfc6917: package org.apache.activemq.transport.mqtt;
3:cfc6917: 
1:cfc6917: import java.io.IOException;
1:cfc6917: import java.security.cert.X509Certificate;
1:d350ce6: import java.util.concurrent.atomic.AtomicBoolean;
1:413e484: 
1:cfc6917: import javax.jms.JMSException;
1:7b5f956: 
1:bc4f4e9: import org.apache.activemq.broker.BrokerService;
1:cfc6917: import org.apache.activemq.command.Command;
1:cfc6917: import org.apache.activemq.transport.Transport;
1:cfc6917: import org.apache.activemq.transport.TransportFilter;
1:cfc6917: import org.apache.activemq.transport.TransportListener;
1:f09b920: import org.apache.activemq.transport.nio.NIOSSLTransport;
1:cfc6917: import org.apache.activemq.transport.tcp.SslTransport;
1:cfc6917: import org.apache.activemq.util.IOExceptionSupport;
1:cfc6917: import org.apache.activemq.wireformat.WireFormat;
1:413e484: import org.fusesource.mqtt.codec.CONNACK;
1:413e484: import org.fusesource.mqtt.codec.CONNECT;
1:413e484: import org.fusesource.mqtt.codec.DISCONNECT;
1:413e484: import org.fusesource.mqtt.codec.MQTTFrame;
1:413e484: import org.fusesource.mqtt.codec.PINGREQ;
1:413e484: import org.fusesource.mqtt.codec.PINGRESP;
1:413e484: import org.fusesource.mqtt.codec.PUBACK;
1:413e484: import org.fusesource.mqtt.codec.PUBCOMP;
1:413e484: import org.fusesource.mqtt.codec.PUBLISH;
1:413e484: import org.fusesource.mqtt.codec.PUBREC;
1:413e484: import org.fusesource.mqtt.codec.PUBREL;
1:413e484: import org.fusesource.mqtt.codec.SUBACK;
1:413e484: import org.fusesource.mqtt.codec.SUBSCRIBE;
1:413e484: import org.fusesource.mqtt.codec.UNSUBSCRIBE;
1:cfc6917: import org.slf4j.Logger;
1:cfc6917: import org.slf4j.LoggerFactory;
1:cfc6917: 
1:cfc6917: /**
1:4c38438:  * The MQTTTransportFilter normally sits on top of a TcpTransport that has been
1:4c38438:  * configured with the StompWireFormat and is used to convert MQTT commands to
1:cfc6917:  * ActiveMQ commands. All of the conversion work is done by delegating to the
1:0f5b406:  * MQTTProtocolConverter
1:cfc6917:  */
1:cfc6917: public class MQTTTransportFilter extends TransportFilter implements MQTTTransport {
1:cfc6917:     private static final Logger LOG = LoggerFactory.getLogger(MQTTTransportFilter.class);
1:cfc6917:     private static final Logger TRACE = LoggerFactory.getLogger(MQTTTransportFilter.class.getPackage().getName() + ".MQTTIO");
1:cfc6917:     private final MQTTProtocolConverter protocolConverter;
1:cfc6917:     private MQTTInactivityMonitor monitor;
1:cfc6917:     private MQTTWireFormat wireFormat;
1:d350ce6:     private final AtomicBoolean stopped = new AtomicBoolean();
1:cfc6917: 
1:cfc6917:     private boolean trace;
1:4ba4aa2:     private final Object sendLock = new Object();
1:cfc6917: 
1:bc4f4e9:     public MQTTTransportFilter(Transport next, WireFormat wireFormat, BrokerService brokerService) {
1:cfc6917:         super(next);
1:bc4f4e9:         this.protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:cfc6917: 
1:cfc6917:         if (wireFormat instanceof MQTTWireFormat) {
1:cfc6917:             this.wireFormat = (MQTTWireFormat) wireFormat;
1:cfc6917:         }
1:cfc6917:     }
1:667237f: 
1:7b5f956:     @Override
1:cfc6917:     public void oneway(Object o) throws IOException {
1:cfc6917:         try {
1:cfc6917:             final Command command = (Command) o;
1:cfc6917:             protocolConverter.onActiveMQCommand(command);
1:0f5b406:         } catch (Exception e) {
1:cfc6917:             throw IOExceptionSupport.create(e);
1:cfc6917:         }
1:cfc6917:     }
1:cfc6917: 
1:7b5f956:     @Override
1:cfc6917:     public void onCommand(Object command) {
1:cfc6917:         try {
1:e2a7d6a:             MQTTFrame frame = (MQTTFrame) command;
1:cfc6917:             if (trace) {
1:e2a7d6a:                 TRACE.trace("Received: " + toString(frame));
1:cfc6917:             }
1:e2a7d6a:             protocolConverter.onMQTTCommand(frame);
1:cfc6917:         } catch (IOException e) {
1:4ba4aa2:             onException(e);
2:cfc6917:         } catch (JMSException e) {
1:cfc6917:             onException(IOExceptionSupport.create(e));
1:cfc6917:         }
1:cfc6917:     }
1:cfc6917: 
1:7b5f956:     @Override
1:cfc6917:     public void sendToActiveMQ(Command command) {
1:cfc6917:         TransportListener l = transportListener;
1:cfc6917:         if (l != null) {
1:cfc6917:             l.onCommand(command);
1:cfc6917:         }
1:cfc6917:     }
1:cfc6917: 
1:7b5f956:     @Override
1:cfc6917:     public void sendToMQTT(MQTTFrame command) throws IOException {
1:d350ce6:         if( !stopped.get() ) {
1:cfc6917:             if (trace) {
1:e2a7d6a:                 TRACE.trace("Sending : " + toString(command));
1:cfc6917:             }
1:cfc6917:             Transport n = next;
1:cfc6917:             if (n != null) {
1:4ba4aa2:                 // sync access to underlying transport buffer
1:4ba4aa2:                 synchronized (sendLock) {
1:4ba4aa2:                     n.oneway(command);
1:4ba4aa2:                 }
1:cfc6917:             }
1:cfc6917:         }
1:cfc6917:     }
1:cfc6917: 
1:e2a7d6a:     static private String toString(MQTTFrame frame) {
1:e2a7d6a:         if( frame == null )
1:e2a7d6a:             return null;
1:e2a7d6a:         try {
1:e2a7d6a:             switch (frame.messageType()) {
1:e2a7d6a:                 case PINGREQ.TYPE: return new PINGREQ().decode(frame).toString();
1:e2a7d6a:                 case PINGRESP.TYPE: return new PINGRESP().decode(frame).toString();
1:e2a7d6a:                 case CONNECT.TYPE: return new CONNECT().decode(frame).toString();
1:e2a7d6a:                 case DISCONNECT.TYPE: return new DISCONNECT().decode(frame).toString();
1:e2a7d6a:                 case SUBSCRIBE.TYPE: return new SUBSCRIBE().decode(frame).toString();
1:e2a7d6a:                 case UNSUBSCRIBE.TYPE: return new UNSUBSCRIBE().decode(frame).toString();
1:e2a7d6a:                 case PUBLISH.TYPE: return new PUBLISH().decode(frame).toString();
1:e2a7d6a:                 case PUBACK.TYPE: return new PUBACK().decode(frame).toString();
1:e2a7d6a:                 case PUBREC.TYPE: return new PUBREC().decode(frame).toString();
1:e2a7d6a:                 case PUBREL.TYPE: return new PUBREL().decode(frame).toString();
1:e2a7d6a:                 case PUBCOMP.TYPE: return new PUBCOMP().decode(frame).toString();
1:e2a7d6a:                 case CONNACK.TYPE: return new CONNACK().decode(frame).toString();
1:e2a7d6a:                 case SUBACK.TYPE: return new SUBACK().decode(frame).toString();
1:e2a7d6a:                 default: return frame.toString();
1:e2a7d6a:             }
1:e2a7d6a:         } catch (Throwable e) {
1:457dbd8:             LOG.warn(e.getMessage(), e);
1:e2a7d6a:             return frame.toString();
1:e2a7d6a:         }
1:e2a7d6a:     }
1:e2a7d6a: 
1:7b5f956:     @Override
1:4b7131f:     public void start() throws Exception {
1:4b7131f:         if (monitor != null) {
1:4b7131f:             monitor.startConnectChecker(getConnectAttemptTimeout());
1:4b7131f:         }
1:4b7131f:         super.start();
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     @Override
1:d350ce6:     public void stop() throws Exception {
1:4b7131f:         if (stopped.compareAndSet(false, true)) {
1:d350ce6:             super.stop();
1:d350ce6:         }
1:d350ce6:     }
1:cfc6917: 
1:d350ce6:     @Override
1:cfc6917:     public X509Certificate[] getPeerCertificates() {
1:f09b920:         X509Certificate[] peerCerts = null;
1:cfc6917:         if (next instanceof SslTransport) {
1:f09b920:             peerCerts = ((SslTransport) next).getPeerCertificates();
1:cfc6917:         }
1:f09b920:         if (next instanceof  NIOSSLTransport) {
1:f09b920:             peerCerts = ((NIOSSLTransport)next).getPeerCertificates();
1:f09b920:         }
1:f09b920:         if (trace && peerCerts != null) {
1:f09b920:             LOG.debug("Peer Identity has been verified\n");
1:f09b920:         }
1:f09b920:         return peerCerts;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     public boolean isTrace() {
1:cfc6917:         return trace;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     public void setTrace(boolean trace) {
1:cfc6917:         this.trace = trace;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     @Override
1:cfc6917:     public MQTTInactivityMonitor getInactivityMonitor() {
1:cfc6917:         return monitor;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     public void setInactivityMonitor(MQTTInactivityMonitor monitor) {
1:cfc6917:         this.monitor = monitor;
1:cfc6917:     }
1:cfc6917: 
1:cfc6917:     @Override
1:cfc6917:     public MQTTWireFormat getWireFormat() {
1:cfc6917:         return this.wireFormat;
1:cfc6917:     }
1:cfc6917: 
1:4ba4aa2:     @Override
1:4ba4aa2:     public void onException(IOException error) {
1:4c38438:         protocolConverter.onTransportError();
1:4ba4aa2:         super.onException(error);
1:4c38438:     }
1:4c38438: 
1:d212d3c:     public long getDefaultKeepAlive() {
1:d212d3c:         return protocolConverter != null ? protocolConverter.getDefaultKeepAlive() : -1;
1:cfc6917:     }
1:cfc6917: 
1:d212d3c:     public void setDefaultKeepAlive(long defaultHeartBeat) {
1:d212d3c:         protocolConverter.setDefaultKeepAlive(defaultHeartBeat);
1:d350ce6:     }
1:667237f: 
1:4b7131f:     /**
1:4b7131f:      * @return the timeout value used to fail a connection if no CONNECT frame read.
1:4b7131f:      */
1:4b7131f:     public long getConnectAttemptTimeout() {
1:27edaff:         return wireFormat.getConnectAttemptTimeout();
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     /**
1:4b7131f:      * Sets the timeout value used to fail a connection if no CONNECT frame is read
1:4b7131f:      * in the given interval.
1:4b7131f:      *
1:4b7131f:      * @param connectTimeout
1:4b7131f:      *        the connection frame received timeout value.
1:4b7131f:      */
1:4b7131f:     public void setConnectAttemptTimeout(long connectTimeout) {
1:e1c707e:         wireFormat.setConnectAttemptTimeout(connectTimeout);
1:4b7131f:     }
1:4b7131f: 
1:73908d6:     public boolean getPublishDollarTopics() {
1:73908d6:         return protocolConverter != null && protocolConverter.getPublishDollarTopics();
1:73908d6:     }
1:73908d6: 
1:73908d6:     public void setPublishDollarTopics(boolean publishDollarTopics) {
1:73908d6:         protocolConverter.setPublishDollarTopics(publishDollarTopics);
1:413e484:     }
1:413e484: 
1:59f8cfc:     public String getSubscriptionStrategy() {
1:59f8cfc:         return protocolConverter != null ? protocolConverter.getSubscriptionStrategy() : "default";
1:413e484:     }
1:413e484: 
1:59f8cfc:     public void setSubscriptionStrategy(String name) {
1:59f8cfc:         protocolConverter.setSubscriptionStrategy(name);
1:73908d6:     }
1:73908d6: 
1:667237f:     public int getActiveMQSubscriptionPrefetch() {
1:667237f:         return protocolConverter.getActiveMQSubscriptionPrefetch();
1:667237f:     }
1:667237f: 
1:667237f:     /**
1:667237f:      * set the default prefetch size when mapping the MQTT subscription to an ActiveMQ one
1:667237f:      * The default = 1
1:667237f:      * @param activeMQSubscriptionPrefetch set the prefetch for the corresponding ActiveMQ subscription
1:667237f:      */
1:667237f:     public void setActiveMQSubscriptionPrefetch(int activeMQSubscriptionPrefetch) {
1:667237f:         protocolConverter.setActiveMQSubscriptionPrefetch(activeMQSubscriptionPrefetch);
1:667237f:     }
1:3454a8b: 
1:3454a8b:     /**
1:3454a8b:      * @return the maximum number of bytes a single MQTT message frame is allowed to be.
1:3454a8b:      */
1:3454a8b:     public int getMaxFrameSize() {
1:3454a8b:         return wireFormat.getMaxFrameSize();
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     /**
1:3454a8b:      * Sets the maximum frame size for an incoming MQTT frame.  The protocl limit is
1:3454a8b:      * 256 megabytes and this value cannot be set higher.
1:3454a8b:      *
1:3454a8b:      * @param maxFrameSize
1:3454a8b:      *        the maximum allowed frame size for a single MQTT frame.
1:3454a8b:      */
1:3454a8b:     public void setMaxFrameSize(int maxFrameSize) {
1:3454a8b:         wireFormat.setMaxFrameSize(maxFrameSize);
1:3454a8b:     }
1:f8bfff0: 
1:f8bfff0:     @Override
1:f8bfff0:     public void setPeerCertificates(X509Certificate[] certificates) {}
2:d212d3c: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {}
commit:f09b920
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.nio.NIOSSLTransport;
/////////////////////////////////////////////////////////////////////////
1:         X509Certificate[] peerCerts = null;
1:             peerCerts = ((SslTransport) next).getPeerCertificates();
1:         if (next instanceof  NIOSSLTransport) {
1:             peerCerts = ((NIOSSLTransport)next).getPeerCertificates();
1:         }
1:         if (trace && peerCerts != null) {
1:             LOG.debug("Peer Identity has been verified\n");
1:         }
1:         return peerCerts;
commit:4ba4aa2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final Object sendLock = new Object();
/////////////////////////////////////////////////////////////////////////
1:             onException(e);
/////////////////////////////////////////////////////////////////////////
1:                 // sync access to underlying transport buffer
1:                 synchronized (sendLock) {
1:                     n.oneway(command);
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void onException(IOException error) {
1:         super.onException(error);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:457dbd8
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn(e.getMessage(), e);
author:gtully
-------------------------------------------------------------------------------
commit:e1c707e
/////////////////////////////////////////////////////////////////////////
1:         wireFormat.setConnectAttemptTimeout(connectTimeout);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27edaff
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return wireFormat.getConnectAttemptTimeout();
/////////////////////////////////////////////////////////////////////////
0:         this.setConnectAttemptTimeout(connectTimeout);
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the maximum number of bytes a single MQTT message frame is allowed to be.
1:      */
1:     public int getMaxFrameSize() {
1:         return wireFormat.getMaxFrameSize();
1:     }
1: 
1:     /**
1:      * Sets the maximum frame size for an incoming MQTT frame.  The protocl limit is
1:      * 256 megabytes and this value cannot be set higher.
1:      *
1:      * @param maxFrameSize
1:      *        the maximum allowed frame size for a single MQTT frame.
1:      */
1:     public void setMaxFrameSize(int maxFrameSize) {
1:         wireFormat.setMaxFrameSize(maxFrameSize);
1:     }
commit:4b7131f
/////////////////////////////////////////////////////////////////////////
0:     private long connectAttemptTimeout = MQTTWireFormat.DEFAULT_CONNECTION_TIMEOUT;
/////////////////////////////////////////////////////////////////////////
1:     public void start() throws Exception {
1:         if (monitor != null) {
1:             monitor.startConnectChecker(getConnectAttemptTimeout());
1:         }
1:         super.start();
1:     }
1: 
1:     @Override
1:         if (stopped.compareAndSet(false, true)) {
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the timeout value used to fail a connection if no CONNECT frame read.
1:      */
1:     public long getConnectAttemptTimeout() {
0:         return connectAttemptTimeout;
1:     }
1: 
1:     /**
1:      * Sets the timeout value used to fail a connection if no CONNECT frame is read
1:      * in the given interval.
1:      *
1:      * @param connectTimeout
1:      *        the connection frame received timeout value.
1:      */
1:     public void setConnectAttemptTimeout(long connectTimeout) {
0:         this.connectAttemptTimeout = connectTimeout;
1:     }
1: 
commit:59f8cfc
/////////////////////////////////////////////////////////////////////////
1:     public String getSubscriptionStrategy() {
1:         return protocolConverter != null ? protocolConverter.getSubscriptionStrategy() : "default";
1:     public void setSubscriptionStrategy(String name) {
1:         protocolConverter.setSubscriptionStrategy(name);
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.mqtt.codec.CONNACK;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.DISCONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.fusesource.mqtt.codec.PINGREQ;
1: import org.fusesource.mqtt.codec.PINGRESP;
1: import org.fusesource.mqtt.codec.PUBACK;
1: import org.fusesource.mqtt.codec.PUBCOMP;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.fusesource.mqtt.codec.PUBREC;
1: import org.fusesource.mqtt.codec.PUBREL;
1: import org.fusesource.mqtt.codec.SUBACK;
1: import org.fusesource.mqtt.codec.SUBSCRIBE;
1: import org.fusesource.mqtt.codec.UNSUBSCRIBE;
/////////////////////////////////////////////////////////////////////////
0:     public String getSubscriptionStrategyName() {
0:         return protocolConverter != null ? protocolConverter.getSubscriptionStrategyName() : "default";
1:     }
1: 
0:     public void setSubscriptionStrategyName(String name) {
0:         protocolConverter.setSubscriptionStrategyName(name);
1:     }
1: 
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:73908d6
/////////////////////////////////////////////////////////////////////////
1:     public boolean getPublishDollarTopics() {
1:         return protocolConverter != null && protocolConverter.getPublishDollarTopics();
1:     }
1: 
1:     public void setPublishDollarTopics(boolean publishDollarTopics) {
1:         protocolConverter.setPublishDollarTopics(publishDollarTopics);
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e2a7d6a
/////////////////////////////////////////////////////////////////////////
0: import java.net.ProtocolException;
/////////////////////////////////////////////////////////////////////////
0: import org.fusesource.mqtt.codec.*;
/////////////////////////////////////////////////////////////////////////
1:             MQTTFrame frame = (MQTTFrame) command;
1:                 TRACE.trace("Received: " + toString(frame));
1:             protocolConverter.onMQTTCommand(frame);
/////////////////////////////////////////////////////////////////////////
1:                 TRACE.trace("Sending : " + toString(command));
/////////////////////////////////////////////////////////////////////////
1:     static private String toString(MQTTFrame frame) {
1:         if( frame == null )
1:             return null;
1:         try {
1:             switch (frame.messageType()) {
1:                 case PINGREQ.TYPE: return new PINGREQ().decode(frame).toString();
1:                 case PINGRESP.TYPE: return new PINGRESP().decode(frame).toString();
1:                 case CONNECT.TYPE: return new CONNECT().decode(frame).toString();
1:                 case DISCONNECT.TYPE: return new DISCONNECT().decode(frame).toString();
1:                 case SUBSCRIBE.TYPE: return new SUBSCRIBE().decode(frame).toString();
1:                 case UNSUBSCRIBE.TYPE: return new UNSUBSCRIBE().decode(frame).toString();
1:                 case PUBLISH.TYPE: return new PUBLISH().decode(frame).toString();
1:                 case PUBACK.TYPE: return new PUBACK().decode(frame).toString();
1:                 case PUBREC.TYPE: return new PUBREC().decode(frame).toString();
1:                 case PUBREL.TYPE: return new PUBREL().decode(frame).toString();
1:                 case PUBCOMP.TYPE: return new PUBCOMP().decode(frame).toString();
1:                 case CONNACK.TYPE: return new CONNACK().decode(frame).toString();
1:                 case SUBACK.TYPE: return new SUBACK().decode(frame).toString();
1:                 default: return frame.toString();
1:             }
1:         } catch (Throwable e) {
0:             e.printStackTrace();
1:             return frame.toString();
1:         }
1:     }
1: 
commit:bc4f4e9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     public MQTTTransportFilter(Transport next, WireFormat wireFormat, BrokerService brokerService) {
1:         this.protocolConverter = new MQTTProtocolConverter(this, brokerService);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7b5f956
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:667237f
/////////////////////////////////////////////////////////////////////////
1:     public int getActiveMQSubscriptionPrefetch() {
1:         return protocolConverter.getActiveMQSubscriptionPrefetch();
1:     }
1: 
1:     /**
1:      * set the default prefetch size when mapping the MQTT subscription to an ActiveMQ one
1:      * The default = 1
1:      * @param activeMQSubscriptionPrefetch set the prefetch for the corresponding ActiveMQ subscription
1:      */
1: 
1:     public void setActiveMQSubscriptionPrefetch(int activeMQSubscriptionPrefetch) {
1:         protocolConverter.setActiveMQSubscriptionPrefetch(activeMQSubscriptionPrefetch);
1:     }
1: 
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1:  * The MQTTTransportFilter normally sits on top of a TcpTransport that has been
1:  * configured with the StompWireFormat and is used to convert MQTT commands to
/////////////////////////////////////////////////////////////////////////
0:             handleException(e);
/////////////////////////////////////////////////////////////////////////
0:     public void handleException(IOException e) {
1:         protocolConverter.onTransportError();
0:         super.onException(e);
1:     }
1: 
commit:0f5b406
/////////////////////////////////////////////////////////////////////////
1:  * MQTTProtocolConverter
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
commit:cfc6917
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.IOException;
1: import java.security.cert.X509Certificate;
1: 
1: import javax.jms.JMSException;
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.tcp.SslTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * The StompTransportFilter normally sits on top of a TcpTransport that has been
0:  * configured with the StompWireFormat and is used to convert STOMP commands to
1:  * ActiveMQ commands. All of the conversion work is done by delegating to the
0:  * MQTTProtocolConverter.
1:  *
0:  * @author <a href="http://hiramchirino.com">chirino</a>
1:  */
1: public class MQTTTransportFilter extends TransportFilter implements MQTTTransport {
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTTransportFilter.class);
1:     private static final Logger TRACE = LoggerFactory.getLogger(MQTTTransportFilter.class.getPackage().getName() + ".MQTTIO");
1:     private final MQTTProtocolConverter protocolConverter;
1:     private MQTTInactivityMonitor monitor;
1:     private MQTTWireFormat wireFormat;
1: 
1:     private boolean trace;
1: 
0:     public MQTTTransportFilter(Transport next, WireFormat wireFormat, BrokerContext brokerContext) {
1:         super(next);
0:         this.protocolConverter = new MQTTProtocolConverter(this, brokerContext);
1: 
1:         if (wireFormat instanceof MQTTWireFormat) {
1:             this.wireFormat = (MQTTWireFormat) wireFormat;
1:         }
1:     }
1: 
1:     public void oneway(Object o) throws IOException {
1:         try {
1:             final Command command = (Command) o;
1:             protocolConverter.onActiveMQCommand(command);
1:         } catch (JMSException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public void onCommand(Object command) {
1:         try {
1:             if (trace) {
0:                 TRACE.trace("Received: \n" + command);
1:             }
1: 
0:             protocolConverter.onMQTTCommand((MQTTFrame) command);
1:         } catch (IOException e) {
0:             onException(e);
1:         } catch (JMSException e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     public void sendToActiveMQ(Command command) {
1:         TransportListener l = transportListener;
1:         if (l != null) {
1:             l.onCommand(command);
1:         }
1:     }
1: 
1:     public void sendToMQTT(MQTTFrame command) throws IOException {
1:         if (trace) {
0:             TRACE.trace("Sending: \n" + command);
1:         }
1:         Transport n = next;
1:         if (n != null) {
0:             n.oneway(command);
1:         }
1:     }
1: 
1:     public X509Certificate[] getPeerCertificates() {
1:         if (next instanceof SslTransport) {
0:             X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
0:             if (trace && peerCerts != null) {
0:                 LOG.debug("Peer Identity has been verified\n");
1:             }
0:             return peerCerts;
1:         }
0:         return null;
1:     }
1: 
1:     public boolean isTrace() {
1:         return trace;
1:     }
1: 
1:     public void setTrace(boolean trace) {
1:         this.trace = trace;
1:     }
1: 
1:     @Override
1:     public MQTTInactivityMonitor getInactivityMonitor() {
1:         return monitor;
1:     }
1: 
1:     public void setInactivityMonitor(MQTTInactivityMonitor monitor) {
1:         this.monitor = monitor;
1:     }
1: 
1:     @Override
1:     public MQTTWireFormat getWireFormat() {
1:         return this.wireFormat;
1:     }
1: 
1: 
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d350ce6
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean stopped = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
1:         if( !stopped.get() ) {
0:             if (trace) {
0:                 TRACE.trace("Sending: \n" + command);
1:             }
0:             Transport n = next;
0:             if (n != null) {
0:                 n.oneway(command);
1:             }
1:     }
0: 
1:     @Override
1:     public void stop() throws Exception {
0:         if( stopped.compareAndSet(false, true) ) {
1:             super.stop();
commit:c5cf038
author:Christian Posta
-------------------------------------------------------------------------------
commit:d212d3c
/////////////////////////////////////////////////////////////////////////
1:     public long getDefaultKeepAlive() {
1:         return protocolConverter != null ? protocolConverter.getDefaultKeepAlive() : -1;
1:     }
0: 
1:     public void setDefaultKeepAlive(long defaultHeartBeat) {
1:         protocolConverter.setDefaultKeepAlive(defaultHeartBeat);
1:     }
0: 
============================================================================