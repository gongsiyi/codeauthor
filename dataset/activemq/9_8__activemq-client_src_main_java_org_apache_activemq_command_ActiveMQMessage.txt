1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
6:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.UnsupportedEncodingException;
1:d29ca2a: import java.util.Enumeration;
1:d29ca2a: import java.util.HashMap;
1:ca067a6: import java.util.List;
1:b5bba09: import java.util.Map;
1:d29ca2a: import java.util.Vector;
1:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageFormatException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:ca067a6: import org.apache.activemq.ActiveMQConnection;
1:7ae2055: import org.apache.activemq.ScheduledMessage;
1:e3154c3: import org.apache.activemq.broker.scheduler.CronParser;
1:d29ca2a: import org.apache.activemq.filter.PropertyExpression;
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: import org.apache.activemq.util.Callback;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.TypeConversionSupport;
1:a6e3064: import org.fusesource.hawtbuf.UTF8Buffer;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  *
1:4afa5d6:  * @openwire:marshaller code="23"
1:d29ca2a:  */
1:7ae2055: public class ActiveMQMessage extends Message implements org.apache.activemq.Message, ScheduledMessage {
1:d29ca2a:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_MESSAGE;
1:eee1db6:     public static final String DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY = "dlqDeliveryFailureCause";
1:6f124c1:     public static final String BROKER_PATH_PROPERTY = "JMSActiveMQBrokerPath";
1:d29ca2a: 
1:ecf89a6:     private static final Map<String, PropertySetter> JMS_PROPERTY_SETERS = new HashMap<String, PropertySetter>();
1:ecf89a6: 
1:ecf89a6:     protected transient Callback acknowledgeCallback;
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:543935b:     @Override
1:d29ca2a:     public Message copy() {
1:d29ca2a:         ActiveMQMessage copy = new ActiveMQMessage();
1:d29ca2a:         copy(copy);
1:d29ca2a:         return copy;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected void copy(ActiveMQMessage copy) {
1:d29ca2a:         super.copy(copy);
1:d29ca2a:         copy.acknowledgeCallback = acknowledgeCallback;
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public int hashCode() {
1:dc168c0:         MessageId id = getMessageId();
1:dc168c0:         if (id != null) {
1:230a86c:             return id.hashCode();
1:230a86c:         } else {
1:dc168c0:             return super.hashCode();
1:d29ca2a:         }
1:e121ccc:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public boolean equals(Object o) {
1:ecf89a6:         if (this == o) {
2:d29ca2a:             return true;
1:ecf89a6:         }
1:ecf89a6:         if (o == null || o.getClass() != getClass()) {
3:d29ca2a:             return false;
1:ecf89a6:         }
1:d29ca2a: 
1:d29ca2a:         ActiveMQMessage msg = (ActiveMQMessage) o;
1:d29ca2a:         MessageId oMsg = msg.getMessageId();
1:d29ca2a:         MessageId thisMsg = this.getMessageId();
1:d29ca2a:         return thisMsg != null && oMsg != null && oMsg.equals(thisMsg);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void acknowledge() throws JMSException {
1:d29ca2a:         if (acknowledgeCallback != null) {
1:d29ca2a:             try {
1:d29ca2a:                 acknowledgeCallback.execute();
1:d29ca2a:             } catch (JMSException e) {
1:d29ca2a:                 throw e;
2:d29ca2a:             } catch (Throwable e) {
1:d29ca2a:                 throw JMSExceptionSupport.create(e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d29ca2a:     public void clearBody() throws JMSException {
1:d29ca2a:         setContent(null);
1:d29ca2a:         readOnlyBody = false;
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public String getJMSMessageID() {
1:d29ca2a:         MessageId messageId = this.getMessageId();
1:d29ca2a:         if (messageId == null) {
2:d29ca2a:             return null;
1:d29ca2a:         }
1:d29ca2a:         return messageId.toString();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Seems to be invalid because the parameter doesn't initialize MessageId
1:230a86c:      * instance variables ProducerId and ProducerSequenceId
1:230a86c:      *
1:d29ca2a:      * @param value
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:543935b:     @Override
1:d29ca2a:     public void setJMSMessageID(String value) throws JMSException {
1:230a86c:         if (value != null) {
1:d29ca2a:             try {
1:d29ca2a:                 MessageId id = new MessageId(value);
1:d29ca2a:                 this.setMessageId(id);
1:230a86c:             } catch (NumberFormatException e) {
1:230a86c:                 // we must be some foreign JMS provider or strange user-supplied
1:230a86c:                 // String
1:da77d2c:                 // so lets set the IDs to be 1
1:da77d2c:                 MessageId id = new MessageId();
1:da77d2c:                 id.setTextView(value);
1:b2b4fc8:                 this.setMessageId(id);
1:d29ca2a:             }
1:d29ca2a:         } else {
1:d29ca2a:             this.setMessageId(null);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * This will create an object of MessageId. For it to be valid, the instance
1:230a86c:      * variable ProducerId and producerSequenceId must be initialized.
1:230a86c:      *
1:d29ca2a:      * @param producerId
1:d29ca2a:      * @param producerSequenceId
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     public void setJMSMessageID(ProducerId producerId, long producerSequenceId) throws JMSException {
1:d29ca2a:         MessageId id = null;
1:d29ca2a:         try {
1:d29ca2a:             id = new MessageId(producerId, producerSequenceId);
1:d29ca2a:             this.setMessageId(id);
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:             throw JMSExceptionSupport.create("Invalid message id '" + id + "', reason: " + e.getMessage(), e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d29ca2a:     public long getJMSTimestamp() {
1:d29ca2a:         return this.getTimestamp();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSTimestamp(long timestamp) {
1:d29ca2a:         this.setTimestamp(timestamp);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public String getJMSCorrelationID() {
1:d29ca2a:         return this.getCorrelationId();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSCorrelationID(String correlationId) {
1:d29ca2a:         this.setCorrelationId(correlationId);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
1:d29ca2a:         return encodeString(this.getCorrelationId());
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSCorrelationIDAsBytes(byte[] correlationId) throws JMSException {
1:d29ca2a:         this.setCorrelationId(decodeString(correlationId));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return "jms/message";
1:e121ccc:     }
1:d29ca2a: 
1:fc00993:     protected static String decodeString(byte[] data) throws JMSException {
1:d29ca2a:         try {
1:d29ca2a:             if (data == null) {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a:             return new String(data, "UTF-8");
1:d29ca2a:         } catch (UnsupportedEncodingException e) {
1:d29ca2a:             throw new JMSException("Invalid UTF-8 encoding: " + e.getMessage());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     protected static byte[] encodeString(String data) throws JMSException {
1:d29ca2a:         try {
1:d29ca2a:             if (data == null) {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a:             return data.getBytes("UTF-8");
1:d29ca2a:         } catch (UnsupportedEncodingException e) {
1:d29ca2a:             throw new JMSException("Invalid UTF-8 encoding: " + e.getMessage());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d29ca2a:     public Destination getJMSReplyTo() {
1:d29ca2a:         return this.getReplyTo();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSReplyTo(Destination destination) throws JMSException {
1:d29ca2a:         this.setReplyTo(ActiveMQDestination.transform(destination));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public Destination getJMSDestination() {
1:d29ca2a:         return this.getDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSDestination(Destination destination) throws JMSException {
1:d29ca2a:         this.setDestination(ActiveMQDestination.transform(destination));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public int getJMSDeliveryMode() {
1:d29ca2a:         return this.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSDeliveryMode(int mode) {
1:230a86c:         this.setPersistent(mode == DeliveryMode.PERSISTENT);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public boolean getJMSRedelivered() {
1:d29ca2a:         return this.isRedelivered();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSRedelivered(boolean redelivered) {
1:d29ca2a:         this.setRedelivered(redelivered);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public String getJMSType() {
1:d29ca2a:         return this.getType();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSType(String type) {
1:d29ca2a:         this.setType(type);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public long getJMSExpiration() {
1:d29ca2a:         return this.getExpiration();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSExpiration(long expiration) {
1:d29ca2a:         this.setExpiration(expiration);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public int getJMSPriority() {
1:d29ca2a:         return this.getPriority();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setJMSPriority(int priority) {
1:d29ca2a:         this.setPriority((byte) priority);
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:d29ca2a:     public void clearProperties() {
1:d29ca2a:         super.clearProperties();
1:d29ca2a:         readOnlyProperties = false;
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public boolean propertyExists(String name) throws JMSException {
1:d29ca2a:         try {
1:7f7a95b:             return (this.getProperties().containsKey(name) || getObjectProperty(name)!= null);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7ae2055:     @Override
1:41c9366:     @SuppressWarnings("rawtypes")
1:d29ca2a:     public Enumeration getPropertyNames() throws JMSException {
1:d29ca2a:         try {
1:7f7a95b:             Vector<String> result = new Vector<String>(this.getProperties().keySet());
1:dcbb195:             if( getRedeliveryCounter()!=0 ) {
1:dcbb195:                 result.add("JMSXDeliveryCount");
1:dcbb195:             }
1:dcbb195:             if( getGroupID()!=null ) {
1:dcbb195:                 result.add("JMSXGroupID");
1:dcbb195:             }
1:dcbb195:             if( getGroupID()!=null ) {
1:dcbb195:                 result.add("JMSXGroupSeq");
1:dcbb195:             }
1:dcbb195:             if( getUserID()!=null ) {
1:dcbb195:                 result.add("JMSXUserID");
1:dcbb195:             }
1:e121ccc:             return result.elements();
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:e121ccc:     /**
1:e121ccc:      * return all property names, including standard JMS properties and JMSX properties
1:e121ccc:      * @return  Enumeration of all property names on this message
1:e121ccc:      * @throws JMSException
1:e121ccc:      */
1:41c9366:     @SuppressWarnings("rawtypes")
1:e121ccc:     public Enumeration getAllPropertyNames() throws JMSException {
1:e121ccc:         try {
1:e121ccc:             Vector<String> result = new Vector<String>(this.getProperties().keySet());
1:e121ccc:             result.addAll(JMS_PROPERTY_SETERS.keySet());
1:7f7a95b:             return result.elements();
1:e121ccc:         } catch (IOException e) {
1:e121ccc:             throw JMSExceptionSupport.create(e);
1:cf3db57:         }
1:cf3db57:     }
1:d29ca2a: 
1:d29ca2a:     interface PropertySetter {
1:fc00993:         void set(Message message, Object value) throws MessageFormatException;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     static {
1:d29ca2a:         JMS_PROPERTY_SETERS.put("JMSXDeliveryCount", new PropertySetter() {
1:543935b:             @Override
1:d29ca2a:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSXDeliveryCount cannot be set from a " + value.getClass().getName() + ".");
1:d29ca2a:                 }
1:230a86c:                 message.setRedeliveryCounter(rc.intValue() - 1);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         JMS_PROPERTY_SETERS.put("JMSXGroupID", new PropertySetter() {
1:543935b:             @Override
1:d29ca2a:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSXGroupID cannot be set from a " + value.getClass().getName() + ".");
1:d29ca2a:                 }
1:d29ca2a:                 message.setGroupID(rc);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         JMS_PROPERTY_SETERS.put("JMSXGroupSeq", new PropertySetter() {
1:543935b:             @Override
1:d29ca2a:             public void set(Message message, Object value) throws MessageFormatException {
1:fc58b6f:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSXGroupSeq cannot be set from a " + value.getClass().getName() + ".");
1:d29ca2a:                 }
1:d29ca2a:                 message.setGroupSequence(rc.intValue());
1:d29ca2a:             }
1:d29ca2a:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSCorrelationID", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSCorrelationID cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSCorrelationID(rc);
1:07d4e8c:             }
1:07d4e8c:         });
1:fc58b6f:         JMS_PROPERTY_SETERS.put("JMSDeliveryMode", new PropertySetter() {
1:543935b:             @Override
1:fc58b6f:             public void set(Message message, Object value) throws MessageFormatException {
1:b1bc593:                 Integer rc = null;
1:b1bc593:                 try {
1:b1bc593:                     rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:b1bc593:                 } catch (NumberFormatException nfe) {
1:b1bc593:                     if (value instanceof String) {
1:b1bc593:                         if (((String) value).equalsIgnoreCase("PERSISTENT")) {
1:b1bc593:                             rc = DeliveryMode.PERSISTENT;
1:b1bc593:                         } else if (((String) value).equalsIgnoreCase("NON_PERSISTENT")) {
1:b1bc593:                             rc = DeliveryMode.NON_PERSISTENT;
1:b1bc593:                         } else {
1:b1bc593:                             throw nfe;
1:b1bc593:                         }
1:b1bc593:                     }
1:b1bc593:                 }
1:fc58b6f:                 if (rc == null) {
1:fc58b6f:                     Boolean bool = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
1:fc58b6f:                     if (bool == null) {
1:fc58b6f:                         throw new MessageFormatException("Property JMSDeliveryMode cannot be set from a " + value.getClass().getName() + ".");
1:b1bc593:                     } else {
1:fc58b6f:                         rc = bool.booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
1:d29ca2a:                     }
1:41c9366:                 }
1:fc58b6f:                 ((ActiveMQMessage) message).setJMSDeliveryMode(rc);
1:332aae3:             }
1:fc58b6f:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSExpiration", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSExpiration cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSExpiration(rc.longValue());
1:07d4e8c:             }
1:07d4e8c:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSPriority", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSPriority cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSPriority(rc.intValue());
1:07d4e8c:             }
1:07d4e8c:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSRedelivered", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSRedelivered cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSRedelivered(rc.booleanValue());
1:07d4e8c:             }
1:07d4e8c:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSReplyTo", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 ActiveMQDestination rc = (ActiveMQDestination) TypeConversionSupport.convert(value, ActiveMQDestination.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSReplyTo cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setReplyTo(rc);
1:07d4e8c:             }
1:07d4e8c:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSTimestamp", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSTimestamp cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSTimestamp(rc.longValue());
1:07d4e8c:             }
1:07d4e8c:         });
1:07d4e8c:         JMS_PROPERTY_SETERS.put("JMSType", new PropertySetter() {
1:543935b:             @Override
1:07d4e8c:             public void set(Message message, Object value) throws MessageFormatException {
1:13af1e3:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
1:230a86c:                 if (rc == null) {
1:230a86c:                     throw new MessageFormatException("Property JMSType cannot be set from a " + value.getClass().getName() + ".");
1:07d4e8c:                 }
1:13af1e3:                 ((ActiveMQMessage) message).setJMSType(rc);
1:07d4e8c:             }
1:07d4e8c:         });
1:332aae3:     }
1:230a86c: 
1:543935b:     @Override
1:230a86c:     public void setObjectProperty(String name, Object value) throws JMSException {
1:230a86c:         setObjectProperty(name, value, true);
1:fc58b6f:     }
1:d29ca2a: 
1:332aae3:     public void setObjectProperty(String name, Object value, boolean checkReadOnly) throws JMSException {
1:230a86c: 
1:332aae3:         if (checkReadOnly) {
1:d29ca2a:             checkReadOnlyProperties();
1:332aae3:         }
1:d29ca2a:         if (name == null || name.equals("")) {
1:d29ca2a:             throw new IllegalArgumentException("Property name cannot be empty or null");
1:d29ca2a:         }
1:230a86c: 
1:a6e3064:         if (value instanceof UTF8Buffer) {
1:a6e3064:             value = value.toString();
1:a6e3064:         }
1:a6e3064: 
1:d29ca2a:         checkValidObject(value);
1:e75affa:         value = convertScheduled(name, value);
1:ecf89a6:         PropertySetter setter = JMS_PROPERTY_SETERS.get(name);
1:230a86c: 
1:13af1e3:         if (setter != null && value != null) {
1:230a86c:             setter.set(this, value);
1:d29ca2a:         } else {
1:d29ca2a:             try {
1:d29ca2a:                 this.setProperty(name, value);
1:d29ca2a:             } catch (IOException e) {
1:d29ca2a:                 throw JMSExceptionSupport.create(e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     public void setProperties(Map<String, ?> properties) throws JMSException {
1:41c9366:         for (Map.Entry<String, ?> entry : properties.entrySet()) {
1:230a86c:             // Lets use the object property method as we may contain standard
1:230a86c:             // extension headers like JMSXGroupID
1:543935b:             setObjectProperty(entry.getKey(), entry.getValue());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:ca067a6:     protected void checkValidObject(Object value) throws MessageFormatException {
1:74a7a8b: 
1:ecf89a6:         boolean valid = value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long;
1:74a7a8b:         valid = valid || value instanceof Float || value instanceof Double || value instanceof Character || value instanceof String || value == null;
1:74a7a8b: 
1:74a7a8b:         if (!valid) {
1:d29ca2a: 
1:ca067a6:             ActiveMQConnection conn = getConnection();
1:ca067a6:             // conn is null if we are in the broker rather than a JMS client
1:ca067a6:             if (conn == null || conn.isNestedMapAndListEnabled()) {
1:ca067a6:                 if (!(value instanceof Map || value instanceof List)) {
1:230a86c:                     throw new MessageFormatException("Only objectified primitive objects, String, Map and List types are allowed but was: " + value + " type: " + value.getClass());
1:fc58b6f:                 }
1:230a86c:             } else {
1:230a86c:                 throw new MessageFormatException("Only objectified primitive objects and String types are allowed but was: " + value + " type: " + value.getClass());
1:fc58b6f:             }
1:fc58b6f:         }
1:05a8cba:     }
1:d29ca2a: 
1:543935b:     protected void checkValidScheduled(String name, Object value) throws MessageFormatException {
1:e3154c3:         if (AMQ_SCHEDULED_DELAY.equals(name) || AMQ_SCHEDULED_PERIOD.equals(name) || AMQ_SCHEDULED_REPEAT.equals(name)) {
1:e3154c3:             if (value instanceof Long == false && value instanceof Integer == false) {
1:e3154c3:                 throw new MessageFormatException(name + " should be long or int value");
1:e3154c3:             }
1:e3154c3:         }
1:e3154c3:         if (AMQ_SCHEDULED_CRON.equals(name)) {
1:e3154c3:             CronParser.validate(value.toString());
1:e3154c3:         }
1:e3154c3:     }
1:d29ca2a: 
1:543935b:     protected Object convertScheduled(String name, Object value) throws MessageFormatException {
1:e75affa:         Object result = value;
1:e75affa:         if (AMQ_SCHEDULED_DELAY.equals(name)){
1:e75affa:             result = TypeConversionSupport.convert(value, Long.class);
1:e75affa:         }
1:e75affa:         else if (AMQ_SCHEDULED_PERIOD.equals(name)){
1:e75affa:             result = TypeConversionSupport.convert(value, Long.class);
1:e75affa:         }
1:e75affa:         else if (AMQ_SCHEDULED_REPEAT.equals(name)){
1:e75affa:             result = TypeConversionSupport.convert(value, Integer.class);
1:e75affa:         }
1:e75affa:         return result;
1:e75affa:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public Object getObjectProperty(String name) throws JMSException {
1:d29ca2a:         if (name == null) {
1:d29ca2a:             throw new NullPointerException("Property name cannot be null");
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // PropertyExpression handles converting message headers to properties.
1:d29ca2a:         PropertyExpression expression = new PropertyExpression(name);
1:d29ca2a:         return expression.evaluate(this);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:230a86c:     public boolean getBooleanProperty(String name) throws JMSException {
2:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             return false;
1:ecf89a6:         }
1:13af1e3:         Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a boolean");
1:d29ca2a:         }
1:d29ca2a:         return rc.booleanValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public byte getByteProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NumberFormatException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Byte rc = (Byte) TypeConversionSupport.convert(value, Byte.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a byte");
1:d29ca2a:         }
1:d29ca2a:         return rc.byteValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public short getShortProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NumberFormatException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Short rc = (Short) TypeConversionSupport.convert(value, Short.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a short");
1:d29ca2a:         }
1:d29ca2a:         return rc.shortValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public int getIntProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NumberFormatException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as an integer");
1:d29ca2a:         }
1:d29ca2a:         return rc.intValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public long getLongProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NumberFormatException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a long");
1:d29ca2a:         }
1:d29ca2a:         return rc.longValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public float getFloatProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NullPointerException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Float rc = (Float) TypeConversionSupport.convert(value, Float.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a float");
1:d29ca2a:         }
1:d29ca2a:         return rc.floatValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public double getDoubleProperty(String name) throws JMSException {
1:d29ca2a:         Object value = getObjectProperty(name);
1:ecf89a6:         if (value == null) {
1:230a86c:             throw new NullPointerException("property " + name + " was null");
1:ecf89a6:         }
1:13af1e3:         Double rc = (Double) TypeConversionSupport.convert(value, Double.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a double");
1:d29ca2a:         }
1:d29ca2a:         return rc.doubleValue();
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public String getStringProperty(String name) throws JMSException {
1:3df3302:         Object value = null;
1:d29ca2a:         if (name.equals("JMSXUserID")) {
1:d29ca2a:             value = getUserID();
1:ecf89a6:             if (value == null) {
1:3df3302:                 value = getObjectProperty(name);
1:ecf89a6:             }
1:3df3302:         } else {
1:3df3302:             value = getObjectProperty(name);
1:d29ca2a:         }
1:230a86c:         if (value == null) {
1:230a86c:             return null;
1:d29ca2a:         }
1:13af1e3:         String rc = (String) TypeConversionSupport.convert(value, String.class);
1:230a86c:         if (rc == null) {
1:230a86c:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a String");
1:d29ca2a:         }
1:d29ca2a:         return rc;
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setBooleanProperty(String name, boolean value) throws JMSException {
1:230a86c:         setBooleanProperty(name, value, true);
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void setBooleanProperty(String name, boolean value, boolean checkReadOnly) throws JMSException {
1:d36c0d4:         setObjectProperty(name, Boolean.valueOf(value), checkReadOnly);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setByteProperty(String name, byte value) throws JMSException {
1:d36c0d4:         setObjectProperty(name, Byte.valueOf(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setShortProperty(String name, short value) throws JMSException {
1:d36c0d4:         setObjectProperty(name, Short.valueOf(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setIntProperty(String name, int value) throws JMSException {
1:d36c0d4:         setObjectProperty(name, Integer.valueOf(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setLongProperty(String name, long value) throws JMSException {
1:d36c0d4:         setObjectProperty(name, Long.valueOf(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setFloatProperty(String name, float value) throws JMSException {
1:d29ca2a:         setObjectProperty(name, new Float(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setDoubleProperty(String name, double value) throws JMSException {
1:d29ca2a:         setObjectProperty(name, new Double(value));
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:d29ca2a:     public void setStringProperty(String name, String value) throws JMSException {
1:d29ca2a:         setObjectProperty(name, value);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void checkReadOnlyProperties() throws MessageNotWriteableException {
1:d29ca2a:         if (readOnlyProperties) {
1:d29ca2a:             throw new MessageNotWriteableException("Message properties are read-only");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void checkReadOnlyBody() throws MessageNotWriteableException {
1:d29ca2a:         if (readOnlyBody) {
1:d29ca2a:             throw new MessageNotWriteableException("Message body is read-only");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Callback getAcknowledgeCallback() {
1:d29ca2a:         return acknowledgeCallback;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setAcknowledgeCallback(Callback acknowledgeCallback) {
1:d29ca2a:         this.acknowledgeCallback = acknowledgeCallback;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * Send operation event listener. Used to get the message ready to be sent.
1:d29ca2a:      */
1:8cf4795:     public void onSend() throws JMSException {
1:d29ca2a:         setReadOnlyBody(true);
1:d29ca2a:         setReadOnlyProperties(true);
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     @Override
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:230a86c:         return visitor.processMessage(this);
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @Override
1:41c9366:     public void storeContent() {
1:d29ca2a:     }
1:3003895: 
1:3003895:     @Override
1:3003895:     public void storeContentAndClear() {
1:3003895:         storeContent();
1:3003895:     }
1:f82993d: 
1:f82993d:     @Override
1:f82993d:     protected boolean isContentMarshalled() {
1:f82993d:         //Always return true because ActiveMQMessage only has a content field
1:f82993d:         //which is already marshalled
1:f82993d:         return true;
1:f82993d:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected boolean isContentMarshalled() {
1:         //Always return true because ActiveMQMessage only has a content field
1:         //which is already marshalled
1:         return true;
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b1bc593
/////////////////////////////////////////////////////////////////////////
1:                 Integer rc = null;
1:                 try {
1:                     rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:                 } catch (NumberFormatException nfe) {
1:                     if (value instanceof String) {
1:                         if (((String) value).equalsIgnoreCase("PERSISTENT")) {
1:                             rc = DeliveryMode.PERSISTENT;
1:                         } else if (((String) value).equalsIgnoreCase("NON_PERSISTENT")) {
1:                             rc = DeliveryMode.NON_PERSISTENT;
1:                         } else {
1:                             throw nfe;
1:                         }
1:                     }
1:                 }
1:                     } else {
commit:a6e3064
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.UTF8Buffer;
/////////////////////////////////////////////////////////////////////////
1:         if (value instanceof UTF8Buffer) {
1:             value = value.toString();
1:         }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2b4fc8
/////////////////////////////////////////////////////////////////////////
1:                 this.setMessageId(id);
commit:3003895
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void storeContentAndClear() {
1:         storeContent();
1:     }
commit:dcbb195
/////////////////////////////////////////////////////////////////////////
1:             if( getRedeliveryCounter()!=0 ) {
1:                 result.add("JMSXDeliveryCount");
1:             }
1:             if( getGroupID()!=null ) {
1:                 result.add("JMSXGroupID");
1:             }
1:             if( getGroupID()!=null ) {
1:                 result.add("JMSXGroupSeq");
1:             }
1:             if( getUserID()!=null ) {
1:                 result.add("JMSXUserID");
1:             }
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<String, PropertySetter> JMS_PROPERTY_SETERS = new HashMap<String, PropertySetter>();
1: 
1:     protected transient Callback acknowledgeCallback;
/////////////////////////////////////////////////////////////////////////
1:         if (this == o) {
1:         }
1:         if (o == null || o.getClass() != getClass()) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:             return new Vector<String>(this.getProperties().keySet()).elements();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         PropertySetter setter = JMS_PROPERTY_SETERS.get(name);
/////////////////////////////////////////////////////////////////////////
1:         boolean valid = value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long;
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value == null) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     protected transient Callback acknowledgeCallback;
/////////////////////////////////////////////////////////////////////////
1:     protected static String decodeString(byte[] data) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     protected static byte[] encodeString(String data) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         void set(Message message, Object value) throws MessageFormatException;
0:     private static final HashMap JMS_PROPERTY_SETERS = new HashMap();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         
0:         boolean valid = value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long ;
1:         valid = valid || value instanceof Float || value instanceof Double || value instanceof Character || value instanceof String || value == null;
1:         
1:         if (!valid) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return id.hashCode();
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage msg = (ActiveMQMessage)o;
/////////////////////////////////////////////////////////////////////////
1:      * Seems to be invalid because the parameter doesn't initialize MessageId
1:      * instance variables ProducerId and ProducerSequenceId
1:      * 
1:         if (value != null) {
1:             } catch (NumberFormatException e) {
1:                 // we must be some foreign JMS provider or strange user-supplied
1:                 // String
/////////////////////////////////////////////////////////////////////////
1:      * This will create an object of MessageId. For it to be valid, the instance
1:      * variable ProducerId and producerSequenceId must be initialized.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         this.setPersistent(mode == DeliveryMode.PERSISTENT);
/////////////////////////////////////////////////////////////////////////
0:         this.setPriority((byte)priority);
/////////////////////////////////////////////////////////////////////////
1: 
0:     static final private HashMap JMS_PROPERTY_SETERS = new HashMap();
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSXDeliveryCount cannot be set from a " + value.getClass().getName() + ".");
1:                 message.setRedeliveryCounter(rc.intValue() - 1);
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSXGroupID cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSXGroupSeq cannot be set from a " + value.getClass().getName() + ".");
0:                 String rc = (String)TypeConversionSupport.convert(value, String.class);
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSCorrelationID cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSExpiration cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSPriority cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSRedelivered cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSReplyTo cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSTimestamp cannot be set from a " + value.getClass().getName() + ".");
/////////////////////////////////////////////////////////////////////////
1:                 if (rc == null) {
1:                     throw new MessageFormatException("Property JMSType cannot be set from a " + value.getClass().getName() + ".");
1: 
1:     public void setObjectProperty(String name, Object value) throws JMSException {
1:         setObjectProperty(name, value, true);
1: 
1: 
0:         PropertySetter setter = (PropertySetter)JMS_PROPERTY_SETERS.get(name);
1: 
0:         if (setter != null) {
1:             setter.set(this, value);
/////////////////////////////////////////////////////////////////////////
1: 
0:             Map.Entry entry = (Map.Entry)iter.next();
1: 
1:             // Lets use the object property method as we may contain standard
1:             // extension headers like JMSXGroupID
0:             setObjectProperty((String)entry.getKey(), entry.getValue());
0:         if (!(value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long || value instanceof Float
0:               || value instanceof Double || value instanceof Character || value instanceof String || value == null)) {
1:                     throw new MessageFormatException("Only objectified primitive objects, String, Map and List types are allowed but was: " + value + " type: " + value.getClass());
1:             } else {
1:                 throw new MessageFormatException("Only objectified primitive objects and String types are allowed but was: " + value + " type: " + value.getClass());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean getBooleanProperty(String name) throws JMSException {
0:         if (value == null)
1:             return false;
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a boolean");
0:         if (value == null)
1:             throw new NumberFormatException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a byte");
0:         if (value == null)
1:             throw new NumberFormatException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a short");
0:         if (value == null)
1:             throw new NumberFormatException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as an integer");
0:         if (value == null)
1:             throw new NumberFormatException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a long");
0:         if (value == null)
1:             throw new NullPointerException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a float");
0:         if (value == null)
1:             throw new NullPointerException("property " + name + " was null");
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a double");
1:         if (value == null) {
0:         if (value == null)
1:             return null;
1:         if (rc == null) {
1:             throw new MessageFormatException("Property " + name + " was a " + value.getClass().getName() + " and cannot be read as a String");
1:         setBooleanProperty(name, value, true);
1: 
1:     public void setBooleanProperty(String name, boolean value, boolean checkReadOnly) throws JMSException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Send operation event listener. Used to get the message ready to be sent.
1:         return visitor.processMessage(this);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1:         JMS_PROPERTY_SETERS.put("JMSCorrelationID", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:             	String rc = (String)TypeConversionSupport.convert(value, String.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSCorrelationID cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSCorrelationID(rc);
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSExpiration", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSExpiration cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSExpiration(rc.longValue());
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSPriority", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSPriority cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSPriority(rc.intValue());
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSRedelivered", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSRedelivered cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSRedelivered(rc.booleanValue());
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSReplyTo", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 ActiveMQDestination rc = (ActiveMQDestination)TypeConversionSupport.convert(value, ActiveMQDestination.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSReplyTo cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setReplyTo(rc);
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSTimestamp", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSTimestamp cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSTimestamp(rc.longValue());
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSType", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 String rc = (String)TypeConversionSupport.convert(value, String.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSType cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 ((ActiveMQMessage)message).setJMSType(rc);
1:             }
1:         });
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: import java.io.UnsupportedEncodingException;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Vector;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotWriteableException;
1: 
1: import org.apache.activemq.filter.PropertyExpression;
1: import org.apache.activemq.state.CommandVisitor;
1: import org.apache.activemq.util.Callback;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: import org.apache.activemq.util.TypeConversionSupport;
1: 
1: /**
0:  * @version $Revision$
0:  * @openwire:marshaller
1:  */
0: public class ActiveMQMessage extends Message implements javax.jms.Message {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_MESSAGE;
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
0:     transient protected Callback acknowledgeCallback;
1: 
1:     public Message copy() {
1:         ActiveMQMessage copy = new ActiveMQMessage();
1:         copy(copy);
1:         return copy;
1:     }
1: 
1: 
1:     protected void copy(ActiveMQMessage copy) {
1:         super.copy(copy);
1:         copy.acknowledgeCallback = acknowledgeCallback;
1:     }
1: 
1:     public int hashCode() {
0:         return this.getMessageId().hashCode();
1:     }
1: 
1:     public boolean equals(Object o) {
0:         if (this == o)
1:             return true;
0:         if (o == null || o.getClass() != getClass())
1:             return false;
1: 
1:         ActiveMQMessage msg = (ActiveMQMessage) o;
1:         MessageId oMsg = msg.getMessageId();
1:         MessageId thisMsg = this.getMessageId();
1:         return thisMsg != null && oMsg != null && oMsg.equals(thisMsg);
1:     }
1: 
1:     public void acknowledge() throws JMSException {
1:         if (acknowledgeCallback != null) {
1:             try {
1:                 acknowledgeCallback.execute();
1:             } catch (JMSException e) {
1:                 throw e;
1:             } catch (Throwable e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:     }
1: 
1:     public void clearBody() throws JMSException {
1:         setContent(null);
1:         readOnlyBody = false;
1:     }
1: 
1:     public String getJMSMessageID() {
1:         MessageId messageId = this.getMessageId();
1:         if (messageId == null) {
1:             return null;
1:         }
1:         return messageId.toString();
1:     }
1: 
1:     /**
0:      * Seems to be invalid because the parameter doesn't initialize MessageId instance variables ProducerId and
0:      * ProducerSequenceId
1:      *
1:      * @param value
1:      * @throws JMSException
1:      */
1:     public void setJMSMessageID(String value) throws JMSException {
0:         if( value !=null ) {
1:             try {
1:                 MessageId id = new MessageId(value);
1:                 this.setMessageId(id);
1:             } catch (Throwable e) {
0:                 throw JMSExceptionSupport.create("Invalid message id '" + value + "', reason: " + e.getMessage(), e);
1:             }
1:         } else {
1:             this.setMessageId(null);
1:         }
1:     }
1: 
1:     /**
0:      * This will create an object of MessageId. For it to be valid, the instance variable ProducerId and
0:      * producerSequenceId must be initialized.
1:      *
1:      * @param producerId
1:      * @param producerSequenceId
1:      * @throws JMSException
1:      */
1:     public void setJMSMessageID(ProducerId producerId, long producerSequenceId) throws JMSException {
1:         MessageId id = null;
1:         try {
1:             id = new MessageId(producerId, producerSequenceId);
1:             this.setMessageId(id);
1:         } catch (Throwable e) {
1:             throw JMSExceptionSupport.create("Invalid message id '" + id + "', reason: " + e.getMessage(), e);
1:         }
1:     }
1: 
1:     public long getJMSTimestamp() {
1:         return this.getTimestamp();
1:     }
1: 
1:     public void setJMSTimestamp(long timestamp) {
1:         this.setTimestamp(timestamp);
1:     }
1: 
1:     public String getJMSCorrelationID() {
1:         return this.getCorrelationId();
1:     }
1: 
1:     public void setJMSCorrelationID(String correlationId) {
1:         this.setCorrelationId(correlationId);
1:     }
1: 
1:     public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
1:         return encodeString(this.getCorrelationId());
1:     }
1: 
1:     public void setJMSCorrelationIDAsBytes(byte[] correlationId) throws JMSException {
1:         this.setCorrelationId(decodeString(correlationId));
1:     }
1:     
0:     static protected String decodeString(byte[] data) throws JMSException {
1:         try {
1:             if (data == null) {
1:                 return null;
1:             }
1:             return new String(data, "UTF-8");
1:         } catch (UnsupportedEncodingException e) {
1:             throw new JMSException("Invalid UTF-8 encoding: " + e.getMessage());
1:         }
1:     }
1: 
0:     static protected byte[] encodeString(String data) throws JMSException {
1:         try {
1:             if (data == null) {
1:                 return null;
1:             }
1:             return data.getBytes("UTF-8");
1:         } catch (UnsupportedEncodingException e) {
1:             throw new JMSException("Invalid UTF-8 encoding: " + e.getMessage());
1:         }
1:     }
1: 
1:     public Destination getJMSReplyTo() {
1:         return this.getReplyTo();
1:     }
1: 
1:     public void setJMSReplyTo(Destination destination) throws JMSException {
1:         this.setReplyTo(ActiveMQDestination.transform(destination));
1:     }
1: 
1:     public Destination getJMSDestination() {
1:         return this.getDestination();
1:     }
1: 
1:     public void setJMSDestination(Destination destination) throws JMSException {
1:         this.setDestination(ActiveMQDestination.transform(destination));
1:     }
1: 
1:     public int getJMSDeliveryMode() {
1:         return this.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
1:     }
1: 
1:     public void setJMSDeliveryMode(int mode) {
0:         this.setPersistent(mode==DeliveryMode.PERSISTENT);
1:     }
1: 
1:     public boolean getJMSRedelivered() {
1:         return this.isRedelivered();
1:     }
1: 
1:     public void setJMSRedelivered(boolean redelivered) {
1:         this.setRedelivered(redelivered);
1:     }
1: 
1:     public String getJMSType() {
1:         return this.getType();
1:     }
1: 
1:     public void setJMSType(String type) {
1:         this.setType(type);
1:     }
1: 
1:     public long getJMSExpiration() {
1:         return this.getExpiration();
1:     }
1: 
1:     public void setJMSExpiration(long expiration) {
1:         this.setExpiration(expiration);
1:     }
1: 
1:     public int getJMSPriority() {
1:         return this.getPriority();
1:     }
1: 
1:     public void setJMSPriority(int priority) {
1:         this.setPriority((byte) priority);
1:     }
1: 
1:     public void clearProperties() {
1:         super.clearProperties();
1:         readOnlyProperties = false;
1:     }
1: 
1:     public boolean propertyExists(String name) throws JMSException {
1:         try {
0:             return this.getProperties().containsKey(name);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public Enumeration getPropertyNames() throws JMSException {
1:         try {
0:             return new Vector(this.getProperties().keySet()).elements();
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     interface PropertySetter {
0:         public void set(Message message, Object value) throws MessageFormatException;
1:     }
1:     
0:     static final private HashMap JMS_PROPERTY_SETERS = new HashMap();  
1:     static {
1:         JMS_PROPERTY_SETERS.put("JMSXDeliveryCount", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSXDeliveryCount cannot be set from a "+value.getClass().getName()+".");
1:                 }
0:                 message.setRedeliveryCounter(rc.intValue()-1);
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSXGroupID", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 String rc = (String)TypeConversionSupport.convert(value, String.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSXGroupID cannot be set from a "+value.getClass().getName()+".");
1:                 }
1:                 message.setGroupID(rc);
1:             }
1:         });
1:         JMS_PROPERTY_SETERS.put("JMSXGroupSeq", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
0:                 Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
0:                 if( rc == null ) {
0:                     throw new MessageFormatException("Property JMSXGroupSeq cannot be set from a "+value.getClass().getName()+".");
1:                 }
1:                 message.setGroupSequence(rc.intValue());
1:             }
1:         });
1:     }
1: 
0:     public void setObjectProperty(String name, Object value) throws JMSException {
1:         checkReadOnlyProperties();
1:         if (name == null || name.equals("")) {
1:             throw new IllegalArgumentException("Property name cannot be empty or null");
1:         }
1:         
1:         checkValidObject(value);
0:         PropertySetter setter = (PropertySetter) JMS_PROPERTY_SETERS.get(name);
1:         
0:         if( setter != null ) {
0:             setter.set(this,value);
1:         } else {
1:             try {
1:                 this.setProperty(name, value);
1:             } catch (IOException e) {
1:                 throw JMSExceptionSupport.create(e);
1:             }
1:         }
1:     }
1: 
0:     private void checkValidObject(Object value) throws MessageFormatException {
0:         if(!(value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer ||
0:                 value instanceof Long || value instanceof Float || value instanceof Double || value instanceof String ||
0:                 value == null)) {
0:             throw new MessageFormatException("Only objectified primitive objects and String types are allowed");
1:         }
1:     }
1: 
1:     public Object getObjectProperty(String name) throws JMSException {
1:         if (name == null) {
1:             throw new NullPointerException("Property name cannot be null");
1:         }
1:         
1:         // PropertyExpression handles converting message headers to properties.
1:         PropertyExpression expression = new PropertyExpression(name);
1:         return expression.evaluate(this);
1:     }
1: 
0:     public boolean getBooleanProperty(String name) throws JMSException {        
1:         Object value = getObjectProperty(name);
0:         if( value == null )
1:             return false;        
0:         Boolean rc = (Boolean)TypeConversionSupport.convert(value, Boolean.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a boolean");
1:         }
1:         return rc.booleanValue();
1:     }
1: 
1:     public byte getByteProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NumberFormatException("property "+name+" was null");        
0:         Byte rc = (Byte)TypeConversionSupport.convert(value, Byte.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a byte");
1:         }
1:         return rc.byteValue();
1:     }
1: 
1:     public short getShortProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NumberFormatException("property "+name+" was null");        
0:         Short rc = (Short)TypeConversionSupport.convert(value, Short.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a short");
1:         }
1:         return rc.shortValue();
1:     }
1: 
1:     public int getIntProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NumberFormatException("property "+name+" was null");        
0:         Integer rc = (Integer)TypeConversionSupport.convert(value, Integer.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as an integer");
1:         }
1:         return rc.intValue();
1:     }
1: 
1:     public long getLongProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NumberFormatException("property "+name+" was null");        
0:         Long rc = (Long)TypeConversionSupport.convert(value, Long.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a long");
1:         }
1:         return rc.longValue();
1:     }
1: 
1:     public float getFloatProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NullPointerException("property "+name+" was null");        
0:         Float rc = (Float)TypeConversionSupport.convert(value, Float.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a float");
1:         }
1:         return rc.floatValue();
1:     }
1: 
1:     public double getDoubleProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null )
0:             throw new NullPointerException("property "+name+" was null");        
0:         Double rc = (Double)TypeConversionSupport.convert(value, Double.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a double");
1:         }
1:         return rc.doubleValue();
1:     }
1: 
1:     public String getStringProperty(String name) throws JMSException {
1:         Object value = getObjectProperty(name);
0:         if( value == null ) {
1:             if (name.equals("JMSXUserID")) {
1:                 value = getUserID();
1:             }
1:         }
0:         if( value == null )
1:             return null;        
0:         String rc = (String)TypeConversionSupport.convert(value, String.class);
0:         if( rc == null ) {
0:             throw new MessageFormatException("Property "+name+" was a "+value.getClass().getName()+" and cannot be read as a String");
1:         }
1:         return rc;
1:     }
1: 
1:     public void setBooleanProperty(String name, boolean value) throws JMSException {
0:         setObjectProperty(name, value ? Boolean.TRUE : Boolean.FALSE);
1:     }
1: 
1:     public void setByteProperty(String name, byte value) throws JMSException {
0:         setObjectProperty(name, new Byte(value));
1:     }
1: 
1:     public void setShortProperty(String name, short value) throws JMSException {
0:         setObjectProperty(name, new Short(value));
1:     }
1: 
1:     public void setIntProperty(String name, int value) throws JMSException {
0:         setObjectProperty(name, new Integer(value));
1:     }
1: 
1:     public void setLongProperty(String name, long value) throws JMSException {
0:         setObjectProperty(name, new Long(value));
1:     }
1: 
1:     public void setFloatProperty(String name, float value) throws JMSException {
1:         setObjectProperty(name, new Float(value));
1:     }
1: 
1:     public void setDoubleProperty(String name, double value) throws JMSException {
1:         setObjectProperty(name, new Double(value));
1:     }
1: 
1:     public void setStringProperty(String name, String value) throws JMSException {
1:         setObjectProperty(name, value);
1:     }
1: 
1: 
1:     private void checkReadOnlyProperties() throws MessageNotWriteableException {
1:         if (readOnlyProperties) {
1:             throw new MessageNotWriteableException("Message properties are read-only");
1:         }
1:     }
1: 
1:     protected void checkReadOnlyBody() throws MessageNotWriteableException {
1:         if (readOnlyBody) {
1:             throw new MessageNotWriteableException("Message body is read-only");
1:         }
1:     }
1: 
0:     public boolean isExpired() {
0:         long expireTime = this.getExpiration();
0:         if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
1:             return true;
1:         }
1:         return false;
1:     }
1: 
1:     public Callback getAcknowledgeCallback() {
1:         return acknowledgeCallback;
1:     }
1: 
1:     public void setAcknowledgeCallback(Callback acknowledgeCallback) {
1:         this.acknowledgeCallback = acknowledgeCallback;
1:     }
1:     
1:     /**
0:      * Send operation event listener.  Used to get the message ready to be sent. 
1:      */
0:     public void onSend() {
1:         setReadOnlyBody(true);
1:         setReadOnlyProperties(true);
1:     }
1: 
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         return visitor.processMessage( this );
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:6f124c1
/////////////////////////////////////////////////////////////////////////
1:     public static final String BROKER_PATH_PROPERTY = "JMSActiveMQBrokerPath";
0: 
commit:eee1db6
/////////////////////////////////////////////////////////////////////////
1:     public static final String DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY = "dlqDeliveryFailureCause";
commit:e10f75c
/////////////////////////////////////////////////////////////////////////
0:     public static final String DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY = "DLQ_DELIVERY_FAILURE_CAUSE";
commit:3df3302
/////////////////////////////////////////////////////////////////////////
1:         Object value = null;
0:         if (name.equals("JMSXUserID")) {
0:             value = getUserID();
0:             if (value == null) {
1:                 value = getObjectProperty(name);
1:         } else {
1:             value = getObjectProperty(name);
commit:e121ccc
/////////////////////////////////////////////////////////////////////////
1:             return result.elements();
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
0: 
1:     /**
1:      * return all property names, including standard JMS properties and JMSX properties
1:      * @return  Enumeration of all property names on this message
1:      * @throws JMSException
1:      */
1:     public Enumeration getAllPropertyNames() throws JMSException {
1:         try {
1:             Vector<String> result = new Vector<String>(this.getProperties().keySet());
1:             result.addAll(JMS_PROPERTY_SETERS.keySet());
commit:cf3db57
/////////////////////////////////////////////////////////////////////////
0:             // omit standard jms props as per spec
0:             for (String propName : JMS_PROPERTY_SETERS.keySet()) {
0:                 if (propName.startsWith("JMSX")) {
0:                     result.add(propName);
1:                 }
1:             }
commit:5b8bcf7
/////////////////////////////////////////////////////////////////////////
0:             // omit stand jms props are per spec
commit:7f7a95b
/////////////////////////////////////////////////////////////////////////
1:             return (this.getProperties().containsKey(name) || getObjectProperty(name)!= null);
/////////////////////////////////////////////////////////////////////////
1:             Vector<String> result = new Vector<String>(this.getProperties().keySet());
0:             result.addAll(new Vector<String>(JMS_PROPERTY_SETERS.keySet()));
1:             return result.elements();
commit:ca242f4
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:543935b
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             setObjectProperty(entry.getKey(), entry.getValue());
/////////////////////////////////////////////////////////////////////////
1:     protected void checkValidScheduled(String name, Object value) throws MessageFormatException {
/////////////////////////////////////////////////////////////////////////
1:     protected Object convertScheduled(String name, Object value) throws MessageFormatException {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void setProperties(Map<String, ?> properties) throws JMSException {
1:         for (Map.Entry<String, ?> entry : properties.entrySet()) {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
1:     public void storeContent() {
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:e75affa
/////////////////////////////////////////////////////////////////////////
1:         value = convertScheduled(name, value);
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected Object  convertScheduled(String name, Object value) throws MessageFormatException {
1:         Object result = value;
1:         if (AMQ_SCHEDULED_DELAY.equals(name)){
1:             result = TypeConversionSupport.convert(value, Long.class);
1:         }
1:         else if (AMQ_SCHEDULED_PERIOD.equals(name)){
1:             result = TypeConversionSupport.convert(value, Long.class);
1:         }
1:         else if (AMQ_SCHEDULED_REPEAT.equals(name)){
1:             result = TypeConversionSupport.convert(value, Integer.class);
1:         }
1:         return result;
1:     }
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.scheduler.CronParser;
/////////////////////////////////////////////////////////////////////////
0:         checkValidScheduled(name, value);
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected void  checkValidScheduled(String name, Object value) throws MessageFormatException {
1:         if (AMQ_SCHEDULED_DELAY.equals(name) || AMQ_SCHEDULED_PERIOD.equals(name) || AMQ_SCHEDULED_REPEAT.equals(name)) {
1:             if (value instanceof Long == false && value instanceof Integer == false) {
1:                 throw new MessageFormatException(name + " should be long or int value");
1:             }
1:         }
1:         if (AMQ_SCHEDULED_CRON.equals(name)) {
1:             CronParser.validate(value.toString());
1:         }
1:     }
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ScheduledMessage;
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQMessage extends Message implements org.apache.activemq.Message, ScheduledMessage {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         setObjectProperty(name, Boolean.valueOf(value), checkReadOnly);
1:         setObjectProperty(name, Byte.valueOf(value));
1:         setObjectProperty(name, Short.valueOf(value));
1:         setObjectProperty(name, Integer.valueOf(value));
1:         setObjectProperty(name, Long.valueOf(value));
commit:332aae3
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void setObjectProperty(String name, Object value) throws JMSException{
0:         setObjectProperty(name,value,true);
1:     }
1:     public void setObjectProperty(String name, Object value, boolean checkReadOnly) throws JMSException {
0:         
1:         if (checkReadOnly) {
0:             checkReadOnlyProperties();
1:         }
/////////////////////////////////////////////////////////////////////////
0:         setBooleanProperty(name,value,true);
1:     }
0:     public void setBooleanProperty(String name, boolean value,boolean checkReadOnly) throws JMSException {
0:         setObjectProperty(name, value ? Boolean.TRUE : Boolean.FALSE,checkReadOnly);
author:James Strachan
-------------------------------------------------------------------------------
commit:fc58b6f
/////////////////////////////////////////////////////////////////////////
1:         JMS_PROPERTY_SETERS.put("JMSDeliveryMode", new PropertySetter() {
1:             public void set(Message message, Object value) throws MessageFormatException {
1:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:                 if (rc == null) {
1:                     Boolean bool = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
1:                     if (bool == null) {
1:                         throw new MessageFormatException("Property JMSDeliveryMode cannot be set from a " + value.getClass().getName() + ".");
1:                     }
0:                     else {
1:                         rc = bool.booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT;
1:                     }
1:                 }
1:                 ((ActiveMQMessage) message).setJMSDeliveryMode(rc);
1:             }
1:         });
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQMessage extends Message implements org.apache.activemq.Message {
/////////////////////////////////////////////////////////////////////////
0: 
1:     public String getJMSXMimeType() {
1:         return "jms/message";
1:     }
0: 
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
1:     public void onSend() throws JMSException {
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
/////////////////////////////////////////////////////////////////////////
1:     protected void checkValidObject(Object value) throws MessageFormatException {
0:         if (!(value instanceof Boolean || value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long
0:                 || value instanceof Float || value instanceof Double || value instanceof Character || value instanceof String || value == null)) {
0: 
1:             ActiveMQConnection conn = getConnection();
1:             // conn is null if we are in the broker rather than a JMS client
1:             if (conn == null || conn.isNestedMapAndListEnabled()) {
1:                 if (!(value instanceof Map || value instanceof List)) {
0:                     throw new MessageFormatException("Only objectified primitive objects, String, Map and List types are allowed but was: " + value + " type: "
0:                             + value.getClass());
0:                 }
0:             }
0:             else {
0:                 throw new MessageFormatException("Only objectified primitive objects and String types are allowed but was: " + value + " type: "
0:                         + value.getClass());
0:             }
commit:dc168c0
/////////////////////////////////////////////////////////////////////////
0:     transient int hashCode;
/////////////////////////////////////////////////////////////////////////
1:         MessageId id = getMessageId();
1:         if (id != null) {
0:             return  id.hashCode();
0:         }
0:         else {
1:             return super.hashCode();
0:         }
commit:b5bba09
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void setProperties(Map properties) throws JMSException {
0:         for (Iterator iter = properties.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
0:             
0:             // Lets use the object property method as we may contain standard extension headers like JMSXGroupID
0:             setObjectProperty((String) entry.getKey(), entry.getValue());
0:         }
0:     }
0:     
commit:da77d2c
/////////////////////////////////////////////////////////////////////////
0:             }
0:             catch (NumberFormatException e) {
0:                 // we must be some foreign JMS provider or strange user-supplied String
1:                 // so lets set the IDs to be 1
1:                 MessageId id = new MessageId();
1:                 id.setTextView(value);
0:                 this.setMessageId(messageId);
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="23"
0:  * 
0:  * @version $Revision:$
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:13af1e3
/////////////////////////////////////////////////////////////////////////
0:  * @openwire:marshaller code="23"
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage msg = (ActiveMQMessage) o;
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:         this.setPriority((byte) priority);
/////////////////////////////////////////////////////////////////////////
0: 
1:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
/////////////////////////////////////////////////////////////////////////
1:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
/////////////////////////////////////////////////////////////////////////
1:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
/////////////////////////////////////////////////////////////////////////
1:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
1:                 ((ActiveMQMessage) message).setJMSCorrelationID(rc);
1:                 Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
1:                 ((ActiveMQMessage) message).setJMSExpiration(rc.longValue());
1:                 Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
1:                 ((ActiveMQMessage) message).setJMSPriority(rc.intValue());
1:                 Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
1:                 ((ActiveMQMessage) message).setJMSRedelivered(rc.booleanValue());
1:                 ActiveMQDestination rc = (ActiveMQDestination) TypeConversionSupport.convert(value, ActiveMQDestination.class);
1:                 ((ActiveMQMessage) message).setReplyTo(rc);
1:                 Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
1:                 ((ActiveMQMessage) message).setJMSTimestamp(rc.longValue());
1:                 String rc = (String) TypeConversionSupport.convert(value, String.class);
1:                 ((ActiveMQMessage) message).setJMSType(rc);
/////////////////////////////////////////////////////////////////////////
1:         if (setter != null && value != null) {
/////////////////////////////////////////////////////////////////////////
0:             Map.Entry entry = (Map.Entry) iter.next();
0:             setObjectProperty((String) entry.getKey(), entry.getValue());
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:         Boolean rc = (Boolean) TypeConversionSupport.convert(value, Boolean.class);
/////////////////////////////////////////////////////////////////////////
1:         Byte rc = (Byte) TypeConversionSupport.convert(value, Byte.class);
/////////////////////////////////////////////////////////////////////////
1:         Short rc = (Short) TypeConversionSupport.convert(value, Short.class);
/////////////////////////////////////////////////////////////////////////
0:         Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
/////////////////////////////////////////////////////////////////////////
1:         Long rc = (Long) TypeConversionSupport.convert(value, Long.class);
/////////////////////////////////////////////////////////////////////////
1:         Float rc = (Float) TypeConversionSupport.convert(value, Float.class);
/////////////////////////////////////////////////////////////////////////
1:         Double rc = (Double) TypeConversionSupport.convert(value, Double.class);
/////////////////////////////////////////////////////////////////////////
1:         String rc = (String) TypeConversionSupport.convert(value, String.class);
============================================================================