1:53c4e12: /* ====================================================================
1:53c4e12:    Licensed to the Apache Software Foundation (ASF) under one or more
1:53c4e12:    contributor license agreements.  See the NOTICE file distributed with
1:53c4e12:    this work for additional information regarding copyright ownership.
1:53c4e12:    The ASF licenses this file to You under the Apache License, Version 2.0
1:53c4e12:    (the "License"); you may not use this file except in compliance with
1:53c4e12:    the License.  You may obtain a copy of the License at
2:53c4e12: 
1:53c4e12:        http://www.apache.org/licenses/LICENSE-2.0
1:53c4e12: 
1:53c4e12:    Unless required by applicable law or agreed to in writing, software
1:53c4e12:    distributed under the License is distributed on an "AS IS" BASIS,
1:53c4e12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:53c4e12:    See the License for the specific language governing permissions and
1:53c4e12:    limitations under the License.
1:53c4e12: ==================================================================== */
1:53c4e12: 
1:53c4e12: package org.apache.activemq.bugs.amq1095;
1:53c4e12: 
1:53c4e12: import java.net.URI;
1:53c4e12: import java.util.Iterator;
1:53c4e12: import java.util.LinkedList;
1:53c4e12: import java.util.List;
1:53c4e12: import java.util.Properties;
1:53c4e12: 
1:53c4e12: import javax.jms.Connection;
1:53c4e12: import javax.jms.ConnectionFactory;
1:53c4e12: import javax.jms.Destination;
1:53c4e12: import javax.jms.JMSException;
1:53c4e12: import javax.jms.MessageConsumer;
1:53c4e12: import javax.jms.TextMessage;
1:53c4e12: import javax.naming.Context;
1:53c4e12: import javax.naming.InitialContext;
1:53c4e12: import javax.naming.NamingException;
1:53c4e12: 
1:53c4e12: import junit.framework.TestCase;
1:53c4e12: 
1:53c4e12: import org.apache.activemq.broker.BrokerFactory;
1:53c4e12: import org.apache.activemq.broker.BrokerService;
1:53c4e12: import org.apache.activemq.command.ActiveMQTopic;
1:53c4e12: 
1:53c4e12: /**
1:53c4e12:  * <p>
1:53c4e12:  * Common functionality for ActiveMQ test cases.
1:53c4e12:  * </p>
1:c7d559f:  *
1:53c4e12:  * @author Rainer Klute <a
1:53c4e12:  *         href="mailto:rainer.klute@dp-itsolutions.de">&lt;rainer.klute@dp-itsolutions.de&gt;</a>
1:53c4e12:  * @since 2007-08-10
1:53c4e12:  * @version $Id: ActiveMQTestCase.java 12 2007-08-14 12:02:02Z rke $
1:53c4e12:  */
1:53c4e12: public class ActiveMQTestCase extends TestCase
1:431478a: {
1:53c4e12:     private Context context;
1:53c4e12:     private BrokerService broker;
1:53c4e12:     protected Connection connection;
1:53c4e12:     protected Destination destination;
1:c7d559f:     private final List<MessageConsumer> consumersToEmpty = new LinkedList<MessageConsumer>();
1:53c4e12:     protected final long RECEIVE_TIMEOUT = 500;
1:53c4e12: 
1:53c4e12: 
1:53c4e12:     /** <p>Constructor</p> */
1:53c4e12:     public ActiveMQTestCase()
1:53c4e12:     {}
1:c7d559f: 
1:c7d559f:     /** <p>Constructor</p>
1:53c4e12:      * @param name the test case's name
1:53c4e12:      */
1:53c4e12:     public ActiveMQTestCase(final String name)
3:53c4e12:     {
1:53c4e12:         super(name);
4:53c4e12:     }
1:53c4e12: 
1:53c4e12:     /**
1:53c4e12:      * <p>Sets up the JUnit testing environment.
1:53c4e12:      */
1:c7d559f:     @Override
1:53c4e12:     protected void setUp()
1:53c4e12:     {
1:53c4e12:         URI uri;
1:53c4e12:         try
1:53c4e12:         {
1:53c4e12:             /* Copy all system properties starting with "java.naming." to the initial context. */
1:53c4e12:             final Properties systemProperties = System.getProperties();
1:53c4e12:             final Properties jndiProperties = new Properties();
1:c7d559f:             for (final Iterator<Object> i = systemProperties.keySet().iterator(); i.hasNext();)
1:53c4e12:             {
1:53c4e12:                 final String key = (String) i.next();
1:53c4e12:                 if (key.startsWith("java.naming.") || key.startsWith("topic.") ||
1:53c4e12:                     key.startsWith("queue."))
1:53c4e12:                 {
1:53c4e12:                     final String value = (String) systemProperties.get(key);
1:53c4e12:                     jndiProperties.put(key, value);
1:53c4e12:                 }
1:53c4e12:             }
1:c7d559f:             context = new InitialContext(jndiProperties);
1:53c4e12:             uri = new URI("xbean:org/apache/activemq/bugs/amq1095/activemq.xml");
1:53c4e12:             broker = BrokerFactory.createBroker(uri);
1:53c4e12:             broker.start();
1:53c4e12:         }
1:53c4e12:         catch (Exception ex)
1:53c4e12:         {
1:53c4e12:             throw new RuntimeException(ex);
1:53c4e12:         }
1:53c4e12: 
1:53c4e12:         final ConnectionFactory connectionFactory;
1:53c4e12:         try
1:53c4e12:         {
1:53c4e12:             /* Lookup the connection factory. */
1:53c4e12:             connectionFactory = (ConnectionFactory) context.lookup("TopicConnectionFactory");
1:53c4e12: 
1:53c4e12:             destination = new ActiveMQTopic("TestTopic");
1:53c4e12: 
1:53c4e12:             /* Create a connection: */
1:53c4e12:             connection = connectionFactory.createConnection();
1:53c4e12:             connection.setClientID("sampleClientID");
1:53c4e12:         }
1:53c4e12:         catch (JMSException ex1)
1:53c4e12:         {
1:53c4e12:             ex1.printStackTrace();
1:c7d559f:             fail(ex1.toString());
1:53c4e12:         }
1:53c4e12:         catch (NamingException ex2) {
1:53c4e12:             ex2.printStackTrace();
1:c7d559f:             fail(ex2.toString());
1:53c4e12:         }
1:53c4e12:         catch (Throwable ex3) {
1:53c4e12:             ex3.printStackTrace();
1:c7d559f:             fail(ex3.toString());
1:53c4e12:         }
1:53c4e12:     }
1:53c4e12: 
1:53c4e12: 
1:53c4e12:     /**
1:53c4e12:      * <p>
1:53c4e12:      * Tear down the testing environment by receiving any messages that might be
1:53c4e12:      * left in the topic after a failure and shutting down the broker properly.
1:53c4e12:      * This is quite important for subsequent test cases that assume the topic
1:53c4e12:      * to be empty.
1:53c4e12:      * </p>
1:53c4e12:      */
1:c7d559f:     @Override
1:53c4e12:     protected void tearDown() throws Exception {
1:53c4e12:         TextMessage msg;
1:431478a:         try {
1:c7d559f:             for (final Iterator<MessageConsumer> i = consumersToEmpty.iterator(); i.hasNext();)
1:c7d559f:             {
1:c7d559f:                 final MessageConsumer consumer = i.next();
1:c7d559f:                 if (consumer != null)
1:c7d559f:                     do
1:c7d559f:                         msg = (TextMessage) consumer.receive(RECEIVE_TIMEOUT);
1:c7d559f:                     while (msg != null);
1:c7d559f:             }
1:c7d559f:         } catch (Exception e) {
1:c7d559f:         }
1:53c4e12:         if (connection != null) {
1:53c4e12:             connection.stop();
1:431478a:         }
1:53c4e12:         broker.stop();
1:431478a:     }
1:53c4e12: 
1:53c4e12:     protected void registerToBeEmptiedOnShutdown(final MessageConsumer consumer)
1:53c4e12:     {
1:53c4e12:         consumersToEmpty.add(consumer);
1:53c4e12:     }
1:53c4e12: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private final List<MessageConsumer> consumersToEmpty = new LinkedList<MessageConsumer>();
1: 
1:     /** <p>Constructor</p>
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             for (final Iterator<Object> i = systemProperties.keySet().iterator(); i.hasNext();)
/////////////////////////////////////////////////////////////////////////
1:             context = new InitialContext(jndiProperties);
/////////////////////////////////////////////////////////////////////////
1:             fail(ex1.toString());
1:             fail(ex2.toString());
1:             fail(ex3.toString());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             for (final Iterator<MessageConsumer> i = consumersToEmpty.iterator(); i.hasNext();)
1:             {
1:                 final MessageConsumer consumer = i.next();
1:                 if (consumer != null)
1:                     do
1:                         msg = (TextMessage) consumer.receive(RECEIVE_TIMEOUT);
1:                     while (msg != null);
1:             }
1:         } catch (Exception e) {
1:         }
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:431478a
/////////////////////////////////////////////////////////////////////////
1:         try {
0: 			for (final Iterator i = consumersToEmpty.iterator(); i.hasNext();)
1: 			{
0: 			    final MessageConsumer consumer = (MessageConsumer) i.next();
0: 			    if (consumer != null)
0: 			        do
0: 			            msg = (TextMessage) consumer.receive(RECEIVE_TIMEOUT);
0: 			        while (msg != null);
1: 			}
0: 		} catch (Exception e) {
1: 		}
commit:53c4e12
/////////////////////////////////////////////////////////////////////////
1: /* ====================================================================
1:    Licensed to the Apache Software Foundation (ASF) under one or more
1:    contributor license agreements.  See the NOTICE file distributed with
1:    this work for additional information regarding copyright ownership.
1:    The ASF licenses this file to You under the Apache License, Version 2.0
1:    (the "License"); you may not use this file except in compliance with
1:    the License.  You may obtain a copy of the License at
1: 
1:        http://www.apache.org/licenses/LICENSE-2.0
1: 
1:    Unless required by applicable law or agreed to in writing, software
1:    distributed under the License is distributed on an "AS IS" BASIS,
1:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:    See the License for the specific language governing permissions and
1:    limitations under the License.
1: ==================================================================== */
1: 
1: package org.apache.activemq.bugs.amq1095;
1: 
0: import java.io.File;
1: import java.net.URI;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.Properties;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.TextMessage;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
0: import junit.framework.Assert;
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
1:  * <p>
1:  * Common functionality for ActiveMQ test cases.
1:  * </p>
0:  * 
1:  * @author Rainer Klute <a
1:  *         href="mailto:rainer.klute@dp-itsolutions.de">&lt;rainer.klute@dp-itsolutions.de&gt;</a>
1:  * @since 2007-08-10
1:  * @version $Id: ActiveMQTestCase.java 12 2007-08-14 12:02:02Z rke $
1:  */
1: public class ActiveMQTestCase extends TestCase
1: {
1:     private Context context;
1:     private BrokerService broker;
1:     protected Connection connection;
1:     protected Destination destination;
0:     private List<MessageConsumer> consumersToEmpty = new LinkedList<MessageConsumer>();
1:     protected final long RECEIVE_TIMEOUT = 500;
1: 
1: 
1:     /** <p>Constructor</p> */
1:     public ActiveMQTestCase()
1:     {}
1:     
0:     /** <p>Constructor</p> 
1:      * @param name the test case's name
1:      */
1:     public ActiveMQTestCase(final String name)
1:     {
1:         super(name);
1:     }
1: 
1:     /**
1:      * <p>Sets up the JUnit testing environment.
1:      */
1:     protected void setUp()
1:     {
1:         URI uri;
1:         try
1:         {
1:             /* Copy all system properties starting with "java.naming." to the initial context. */
1:             final Properties systemProperties = System.getProperties();
1:             final Properties jndiProperties = new Properties();
0:             for (final Iterator i = systemProperties.keySet().iterator(); i.hasNext();)
1:             {
1:                 final String key = (String) i.next();
1:                 if (key.startsWith("java.naming.") || key.startsWith("topic.") ||
1:                     key.startsWith("queue."))
1:                 {
1:                     final String value = (String) systemProperties.get(key);
1:                     jndiProperties.put(key, value);
1:                 }
1:             }
0:             context = new InitialContext(jndiProperties); 
1:             uri = new URI("xbean:org/apache/activemq/bugs/amq1095/activemq.xml");
1:             broker = BrokerFactory.createBroker(uri);
1:             broker.start();
1:         }
1:         catch (Exception ex)
1:         {
1:             throw new RuntimeException(ex);
1:         }
1: 
1:         final ConnectionFactory connectionFactory;
1:         try
1:         {
1:             /* Lookup the connection factory. */
1:             connectionFactory = (ConnectionFactory) context.lookup("TopicConnectionFactory");
1: 
1:             destination = new ActiveMQTopic("TestTopic");
1: 
1:             /* Create a connection: */
1:             connection = connectionFactory.createConnection();
1:             connection.setClientID("sampleClientID");
1:         }
1:         catch (JMSException ex1)
1:         {
1:             ex1.printStackTrace();
0:             Assert.fail(ex1.toString());
1:         }
1:         catch (NamingException ex2) {
1:             ex2.printStackTrace();
0:             Assert.fail(ex2.toString());
1:         }
1:         catch (Throwable ex3) {
1:             ex3.printStackTrace();
0:             Assert.fail(ex3.toString());
1:         }
1:     }
1: 
1: 
1:     /**
1:      * <p>
1:      * Tear down the testing environment by receiving any messages that might be
1:      * left in the topic after a failure and shutting down the broker properly.
1:      * This is quite important for subsequent test cases that assume the topic
1:      * to be empty.
1:      * </p>
1:      */
1:     protected void tearDown() throws Exception {
1:         TextMessage msg;
0:         for (final Iterator i = consumersToEmpty.iterator(); i.hasNext();)
1:         {
0:             final MessageConsumer consumer = (MessageConsumer) i.next();
0:             if (consumer != null)
0:                 do
0:                     msg = (TextMessage) consumer.receive(RECEIVE_TIMEOUT);
0:                 while (msg != null);
1:         }
1:         if (connection != null) {
1:             connection.stop();
1:         }
1:         broker.stop();
1:     }
1: 
1:     protected void registerToBeEmptiedOnShutdown(final MessageConsumer consumer)
1:     {
1:         consumersToEmpty.add(consumer);
1:     }
1: }
============================================================================