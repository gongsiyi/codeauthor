1:4b3f07e: /**
1:4b3f07e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b3f07e:  * contributor license agreements.  See the NOTICE file distributed with
1:4b3f07e:  * this work for additional information regarding copyright ownership.
1:4b3f07e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b3f07e:  * (the "License"); you may not use this file except in compliance with
1:4b3f07e:  * the License.  You may obtain a copy of the License at
1:4b3f07e:  *
1:4b3f07e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b3f07e:  *
1:4b3f07e:  * Unless required by applicable law or agreed to in writing, software
1:4b3f07e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b3f07e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b3f07e:  * See the License for the specific language governing permissions and
1:4b3f07e:  * limitations under the License.
1:4b3f07e:  */
1:9e35778: package org.apache.activemq.transport.stomp;
1:9e35778: 
1:9e35778: import static org.junit.Assert.*;
1:9e35778: 
1:9e35778: import java.io.IOException;
1:9e35778: import java.net.Socket;
1:9e35778: 
1:9e35778: import org.apache.activemq.command.ActiveMQQueue;
1:9e35778: import org.apache.log4j.Appender;
1:9e35778: import org.junit.Test;
1:9e35778: import org.slf4j.Logger;
1:9e35778: import org.slf4j.LoggerFactory;
1:9e35778: 
1:9e35778: import javax.jms.Connection;
1:9e35778: import javax.jms.Session;
1:9e35778: import javax.net.SocketFactory;
1:9e35778: import javax.net.ssl.SSLSocketFactory;
1:9e35778: 
1:9e35778: import org.apache.activemq.util.DefaultTestAppender;
1:9e35778: 
1:9e35778: /**
1:9e35778:  * Testcase for AMQ-6526.
1:9e35778:  * Checks if the \<Unknown\> in the Stomp ProtocolException is replaced
1:9e35778:  * with the proper Stomp operation.
4:9e35778:  *
1:9e35778:  */
1:9e35778: public class StompNIOSSLLargeMessageTest extends StompTestSupport {
1:9e35778: 
1:9e35778:     protected static final Logger LOG = LoggerFactory.getLogger(StompNIOSSLLargeMessageTest.class);
1:9e35778:     private Connection connection;
1:9e35778:     private Session session;
1:9e35778:     private ActiveMQQueue queue;
1:9e35778: 
1:9e35778:     // flag to control if the bug in AMQ-XXXX got reproduced.
1:9e35778:     private boolean gotUnknownOperationInLog = false;
1:9e35778: 
1:9e35778:     protected int stompFrameSize = 110000000; //slightly over 105 MB
1:9e35778: 
1:9e35778:     // custom Log4J appender so we can filter the logging output in this test.
1:9e35778:     protected Appender appender = new DefaultTestAppender() {
1:9e35778:         //@Override
1:4b3f07e:         @Override
1:9e35778:         public void doAppend(org.apache.log4j.spi.LoggingEvent event) {
1:9e35778:             if (event.getMessage().toString().contains("<Unknown>") &&
1:9e35778:                 event.getMessage().toString().contains("The maximum data length was exceeded")) {
1:9e35778:                 gotUnknownOperationInLog = true;
1:9e35778:             }
1:9e35778:         }
1:9e35778:     };
1:9e35778: 
1:9e35778: 
1:9e35778:     @Override
1:9e35778:     protected boolean isUseTcpConnector() {
1:9e35778:         return false;
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     @Override
1:9e35778:     protected boolean isUseNioPlusSslConnector() {
1:9e35778:         return true;
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     @Override
1:9e35778:     protected Socket createSocket() throws IOException {
1:9e35778:         SocketFactory factory = SSLSocketFactory.getDefault();
1:9e35778:         return factory.createSocket("127.0.0.1", this.nioSslPort);
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     @Override
1:9e35778:     public void setUp() throws Exception {
1:9e35778:         super.setUp();
1:9e35778: 
1:9e35778:         // register custom Log4J Appender
1:9e35778:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1:9e35778: 
1:9e35778:         stompConnect();
1:9e35778:         connection = cf.createConnection("system", "manager");
1:9e35778:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9e35778:         queue = new ActiveMQQueue(getQueueName());
1:9e35778:         connection.start();
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     @Override
1:9e35778:     public void tearDown() throws Exception {
1:9e35778:         // unregister Log4J appender
1:9e35778:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     /**
1:9e35778:      * Sends a Stomp message larger than maxDataLength bytes.
1:9e35778:      * Expects to receive an exception from the broker.
1:9e35778:      * The broker will throw an Stomp ProtocolException of type
1:4b3f07e:      * "Exception occurred processing: SEND ->
1:4b3f07e:      * org.apache.activemq.transport.stomp.ProtocolException:
1:9e35778:      * The maximum data length was exceeded"
1:4b3f07e:      *
1:4b3f07e:      * Before bug AMQ-6526 this exception would contain \<Unkown\> for the
1:9e35778:      * operation name. With the fix it should print the Stomp operation.
1:4b3f07e:      *
1:9e35778:      * @throws Exception
1:9e35778:      */
1:9e35778:     @Test(timeout = 6000000)
1:9e35778:     public void testSendMessageBytes() throws Exception {
1:9e35778: 
1:9e35778:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
1:9e35778:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:9e35778:         stompConnection.sendFrame(frame);
1:9e35778: 
1:9e35778:         frame = stompConnection.receiveFrame();
1:9e35778:         assertTrue(frame.startsWith("CONNECTED"));
1:9e35778: 
1:9e35778:         frame = "SEND\n" +
1:9e35778:                 "value:newest" + "\n" +
1:9e35778:                 "value:older" + "\n" +
1:9e35778:                 "value:oldest" + "\n" +
1:9e35778:                 "destination:/queue/" + getQueueName() +
1:9e35778:                 "\n\n";
1:9e35778: 
1:9e35778:         byte[] buffer = createLargeByteBuffer(stompFrameSize);
1:9e35778:         try {
1:9e35778:             stompConnection.sendFrame(frame, buffer);
1:9e35778:         } catch (Exception ex) {
1:9e35778:             LOG.error(ex.getMessage());
1:9e35778:         }
1:9e35778:         assertFalse("Stomp ProtocolException still contains <Unknown> operation.", gotUnknownOperationInLog);
1:9e35778:     }
1:9e35778: 
1:9e35778: 
1:9e35778:     /**
1:4b3f07e:      * Creates a large byte buffer and fills it with char 'X' except for the
1:9e35778:      * last byte, it gets value 0x0 assigned.
1:4b3f07e:      *
1:9e35778:      * @param size - the size of the array to be created.
1:9e35778:      * @return
1:9e35778:     */
1:9e35778:     protected byte[] createLargeByteBuffer(int size) {
1:9e35778:         byte[] buffer = new byte[size];
1:9e35778:         for (int i=0; i<size; i++) {
1:9e35778:             buffer[i] = (char) 'X';
1:9e35778:         }
1:4b3f07e:         //insert trailing 0x0
1:9e35778:         buffer[size-1] = 0;
1:4b3f07e:         LOG.info("Created byte buffer of size {} starting with content {}",
1:9e35778:             size,
1:9e35778:             new String(buffer,0,20));
1:9e35778:         return buffer;
1:9e35778:     }
1:9e35778: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4b3f07e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:      * "Exception occurred processing: SEND ->
1:      * org.apache.activemq.transport.stomp.ProtocolException:
1:      *
1:      * Before bug AMQ-6526 this exception would contain \<Unkown\> for the
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * Creates a large byte buffer and fills it with char 'X' except for the
1:      *
/////////////////////////////////////////////////////////////////////////
1:         //insert trailing 0x0
1:         LOG.info("Created byte buffer of size {} starting with content {}",
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:9e35778
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: 
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.log4j.Appender;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.util.DefaultTestAppender;
1: 
1: /**
1:  * Testcase for AMQ-6526.
1:  * Checks if the \<Unknown\> in the Stomp ProtocolException is replaced
1:  * with the proper Stomp operation.
1:  *
1:  */
1: public class StompNIOSSLLargeMessageTest extends StompTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(StompNIOSSLLargeMessageTest.class);
1:     private Connection connection;
1:     private Session session;
1:     private ActiveMQQueue queue;
1: 
1:     // flag to control if the bug in AMQ-XXXX got reproduced.
1:     private boolean gotUnknownOperationInLog = false;
1: 
1:     protected int stompFrameSize = 110000000; //slightly over 105 MB
1: 
1:     // custom Log4J appender so we can filter the logging output in this test.
1:     protected Appender appender = new DefaultTestAppender() {
1:         //@Override
1:         public void doAppend(org.apache.log4j.spi.LoggingEvent event) {
1:             if (event.getMessage().toString().contains("<Unknown>") &&
1:                 event.getMessage().toString().contains("The maximum data length was exceeded")) {
1:                 gotUnknownOperationInLog = true;
1:             }
1:         }
1:     };
1: 
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return false;
1:     }
1: 
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: 
1: 
1:     @Override
1:     protected Socket createSocket() throws IOException {
1:         SocketFactory factory = SSLSocketFactory.getDefault();
1:         return factory.createSocket("127.0.0.1", this.nioSslPort);
1:     }
1: 
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         // register custom Log4J Appender
1:         org.apache.log4j.Logger.getRootLogger().addAppender(appender);
1: 
1:         stompConnect();
1:         connection = cf.createConnection("system", "manager");
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         queue = new ActiveMQQueue(getQueueName());
1:         connection.start();
1:     }
1: 
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         // unregister Log4J appender
1:         org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:     }
1: 
1: 
1:     /**
1:      * Sends a Stomp message larger than maxDataLength bytes.
1:      * Expects to receive an exception from the broker.
1:      * The broker will throw an Stomp ProtocolException of type
0:      * "Exception occurred processing: SEND -> 
0:      * org.apache.activemq.transport.stomp.ProtocolException: 
1:      * The maximum data length was exceeded"
1:      * 
0:      * Before bug AMQ-6526 this exception would contain \<Unkown\> for the 
1:      * operation name. With the fix it should print the Stomp operation.
1:      * 
1:      * @throws Exception
1:      */
1:     @Test(timeout = 6000000)
1:     public void testSendMessageBytes() throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" +
1:                 "accept-version:1.1" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" +
1:                 "value:newest" + "\n" +
1:                 "value:older" + "\n" +
1:                 "value:oldest" + "\n" +
1:                 "destination:/queue/" + getQueueName() +
1:                 "\n\n";
1: 
1:         byte[] buffer = createLargeByteBuffer(stompFrameSize);
1:         try {
1:             stompConnection.sendFrame(frame, buffer);
1:         } catch (Exception ex) {
1:             LOG.error(ex.getMessage());
1:         }
1:         assertFalse("Stomp ProtocolException still contains <Unknown> operation.", gotUnknownOperationInLog);
1:     }
1: 
1: 
1:     /**
0:      * Creates a large byte buffer and fills it with char 'X' except for the 
1:      * last byte, it gets value 0x0 assigned.
1:      * 
1:      * @param size - the size of the array to be created.
1:      * @return
1:     */
1:     protected byte[] createLargeByteBuffer(int size) {
1:         byte[] buffer = new byte[size];
1:         for (int i=0; i<size; i++) {
1:             buffer[i] = (char) 'X';
1:         }
0:         //insert trailing 0x0 
1:         buffer[size-1] = 0;
0:         LOG.info("Created byte buffer of size {} starting with content {}", 
1:             size,
1:             new String(buffer,0,20));
1:         return buffer;
1:     }
1: }
============================================================================