11:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
11:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
8:d29ca2a: 
1:49e8a80: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Destination;
1:bc78238: import javax.jms.ExceptionListener;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicConnection;
1:d29ca2a: import javax.jms.TopicConnectionFactory;
1:d29ca2a: import javax.jms.TopicSession;
1:d29ca2a: import javax.naming.NamingException;
1:d29ca2a: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A Bridge to other JMS Topic providers
1:d29ca2a:  */
1:7c9fec6: public class SimpleJmsTopicConnector extends JmsConnector {
1:7c9fec6:     private static final Logger LOG = LoggerFactory.getLogger(SimpleJmsTopicConnector.class);
1:d29ca2a:     private String outboundTopicConnectionFactoryName;
1:d29ca2a:     private String localConnectionFactoryName;
1:d29ca2a:     private TopicConnectionFactory outboundTopicConnectionFactory;
1:d29ca2a:     private TopicConnectionFactory localTopicConnectionFactory;
1:d29ca2a:     private InboundTopicBridge[] inboundTopicBridges;
1:d29ca2a:     private OutboundTopicBridge[] outboundTopicBridges;
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the inboundTopicBridges.
1:d29ca2a:      */
1:f812e34:     public InboundTopicBridge[] getInboundTopicBridges() {
1:d29ca2a:         return inboundTopicBridges;
1:f812e34:     }
1:5e05df1: 
1:d29ca2a:     /**
1:f812e34:      * @param inboundTopicBridges The inboundTopicBridges to set.
1:d29ca2a:      */
1:f812e34:     public void setInboundTopicBridges(InboundTopicBridge[] inboundTopicBridges) {
1:f812e34:         this.inboundTopicBridges = inboundTopicBridges;
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the outboundTopicBridges.
1:d29ca2a:      */
1:f812e34:     public OutboundTopicBridge[] getOutboundTopicBridges() {
1:d29ca2a:         return outboundTopicBridges;
12:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param outboundTopicBridges The outboundTopicBridges to set.
1:d29ca2a:      */
1:f812e34:     public void setOutboundTopicBridges(OutboundTopicBridge[] outboundTopicBridges) {
1:f812e34:         this.outboundTopicBridges = outboundTopicBridges;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the localTopicConnectionFactory.
1:d29ca2a:      */
1:f812e34:     public TopicConnectionFactory getLocalTopicConnectionFactory() {
1:d29ca2a:         return localTopicConnectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:bc78238:      * @param localTopicConnectionFactory The localTopicConnectionFactory to set.
1:d29ca2a:      */
1:5e05df1:     public void setLocalTopicConnectionFactory(TopicConnectionFactory localTopicConnectionFactory) {
1:5e05df1:         this.localTopicConnectionFactory = localTopicConnectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the outboundTopicConnectionFactory.
1:d29ca2a:      */
1:f812e34:     public TopicConnectionFactory getOutboundTopicConnectionFactory() {
1:d29ca2a:         return outboundTopicConnectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the outboundTopicConnectionFactoryName.
1:d29ca2a:      */
1:f812e34:     public String getOutboundTopicConnectionFactoryName() {
1:d29ca2a:         return outboundTopicConnectionFactoryName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:5e05df1:      * @param foreignTopicConnectionFactoryName The foreignTopicConnectionFactoryName to set.
1:d29ca2a:      */
1:f812e34:     public void setOutboundTopicConnectionFactoryName(String foreignTopicConnectionFactoryName) {
1:f812e34:         this.outboundTopicConnectionFactoryName = foreignTopicConnectionFactoryName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the localConnectionFactoryName.
1:d29ca2a:      */
1:f812e34:     public String getLocalConnectionFactoryName() {
1:d29ca2a:         return localConnectionFactoryName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param localConnectionFactoryName The localConnectionFactoryName to set.
1:d29ca2a:      */
1:f812e34:     public void setLocalConnectionFactoryName(String localConnectionFactoryName) {
1:f812e34:         this.localConnectionFactoryName = localConnectionFactoryName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the localTopicConnection.
1:d29ca2a:      */
1:f812e34:     public TopicConnection getLocalTopicConnection() {
1:bc78238:         return (TopicConnection) localConnection.get();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @param localTopicConnection The localTopicConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setLocalTopicConnection(TopicConnection localTopicConnection) {
1:bc78238:         this.localConnection.set(localTopicConnection);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the outboundTopicConnection.
1:d29ca2a:      */
1:f812e34:     public TopicConnection getOutboundTopicConnection() {
1:bc78238:         return (TopicConnection) foreignConnection.get();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:5e05df1:      * @param foreignTopicConnection The foreignTopicConnection to set.
1:d29ca2a:      */
1:f812e34:     public void setOutboundTopicConnection(TopicConnection foreignTopicConnection) {
1:bc78238:         this.foreignConnection.set(foreignTopicConnection);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:5e05df1:      * @param foreignTopicConnectionFactory The foreignTopicConnectionFactory to set.
1:d29ca2a:      */
1:f812e34:     public void setOutboundTopicConnectionFactory(TopicConnectionFactory foreignTopicConnectionFactory) {
1:f812e34:         this.outboundTopicConnectionFactory = foreignTopicConnectionFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:5e05df1:     @Override
1:bc78238:     protected void initializeForeignConnection() throws NamingException, JMSException {
1:d29ca2a: 
1:03785a4:         TopicConnection newConnection = null;
1:d29ca2a: 
1:03785a4:         try {
1:03785a4:             if (foreignConnection.get() == null) {
1:03785a4:                 // get the connection factories
1:03785a4:                 if (outboundTopicConnectionFactory == null) {
1:03785a4:                     // look it up from JNDI
1:03785a4:                     if (outboundTopicConnectionFactoryName != null) {
1:03785a4:                         outboundTopicConnectionFactory = jndiOutboundTemplate
1:03785a4:                             .lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
1:03785a4:                         if (outboundUsername != null) {
1:03785a4:                             newConnection = outboundTopicConnectionFactory
1:03785a4:                                 .createTopicConnection(outboundUsername, outboundPassword);
1:03785a4:                         } else {
1:03785a4:                             newConnection = outboundTopicConnectionFactory.createTopicConnection();
1:03785a4:                         }
1:03785a4:                     } else {
1:03785a4:                         throw new JMSException("Cannot create foreignConnection - no information");
1:03785a4:                     }
1:03785a4:                 } else {
2:f812e34:                     if (outboundUsername != null) {
2:bc78238:                         newConnection = outboundTopicConnectionFactory
2:f812e34:                             .createTopicConnection(outboundUsername, outboundPassword);
2:f812e34:                     } else {
2:bc78238:                         newConnection = outboundTopicConnectionFactory.createTopicConnection();
1:d29ca2a:                     }
1:d29ca2a:                 }
1:f812e34:             } else {
1:03785a4:                 // Clear if for now in case something goes wrong during the init.
1:03785a4:                 newConnection = (TopicConnection) foreignConnection.getAndSet(null);
1:03785a4:             }
1:03785a4: 
1:03785a4:             // Register for any async error notifications now so we can reset in the
1:03785a4:             // case where there's not a lot of activity and a connection drops.
1:03785a4:             newConnection.setExceptionListener(new ExceptionListener() {
1:03785a4:                 @Override
1:03785a4:                 public void onException(JMSException exception) {
1:03785a4:                     handleConnectionFailure(foreignConnection.get());
1:d29ca2a:                 }
1:03785a4:             });
1:03785a4: 
1:03785a4:             if (outboundClientId != null && outboundClientId.length() > 0) {
1:03785a4:                 newConnection.setClientID(getOutboundClientId());
1:d29ca2a:             }
1:03785a4:             newConnection.start();
1:d29ca2a: 
1:03785a4:             outboundMessageConvertor.setConnection(newConnection);
1:d29ca2a: 
1:03785a4:             // Configure the bridges with the new Outbound connection.
1:03785a4:             initializeInboundDestinationBridgesOutboundSide(newConnection);
1:03785a4:             initializeOutboundDestinationBridgesOutboundSide(newConnection);
1:d29ca2a: 
1:03785a4:             // At this point all looks good, so this our current connection now.
1:03785a4:             foreignConnection.set(newConnection);
1:03785a4:         } catch (Exception ex) {
1:03785a4:             if (newConnection != null) {
1:03785a4:                 try {
1:03785a4:                     newConnection.close();
1:03785a4:                 } catch (Exception ignore) {}
1:d29ca2a:             }
1:d29ca2a: 
1:03785a4:             throw ex;
1:03785a4:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bc78238:     @Override
1:bc78238:     protected void initializeLocalConnection() throws NamingException, JMSException {
1:d29ca2a: 
1:03785a4:         TopicConnection newConnection = null;
1:d29ca2a: 
1:03785a4:         try {
1:03785a4:             if (localConnection.get() == null) {
1:03785a4:                 // get the connection factories
1:03785a4:                 if (localTopicConnectionFactory == null) {
1:03785a4:                     if (embeddedConnectionFactory == null) {
1:03785a4:                         // look it up from JNDI
1:03785a4:                         if (localConnectionFactoryName != null) {
1:03785a4:                             localTopicConnectionFactory = jndiLocalTemplate
1:03785a4:                                 .lookup(localConnectionFactoryName, TopicConnectionFactory.class);
1:03785a4:                             if (localUsername != null) {
1:03785a4:                                 newConnection = localTopicConnectionFactory
1:03785a4:                                     .createTopicConnection(localUsername, localPassword);
1:03785a4:                             } else {
1:03785a4:                                 newConnection = localTopicConnectionFactory.createTopicConnection();
1:03785a4:                             }
1:f812e34:                         } else {
1:03785a4:                             throw new JMSException("Cannot create localConnection - no information");
1:f812e34:                         }
1:f812e34:                     } else {
1:03785a4:                         newConnection = embeddedConnectionFactory.createTopicConnection();
1:d29ca2a:                     }
1:f812e34:                 } else {
1:03785a4:                     if (localUsername != null) {
1:03785a4:                         newConnection = localTopicConnectionFactory.
1:03785a4:                                 createTopicConnection(localUsername, localPassword);
1:03785a4:                     } else {
1:03785a4:                         newConnection = localTopicConnectionFactory.createTopicConnection();
1:03785a4:                     }
1:d29ca2a:                 }
1:03785a4: 
1:f812e34:             } else {
1:03785a4:                 // Clear if for now in case something goes wrong during the init.
1:03785a4:                 newConnection = (TopicConnection) localConnection.getAndSet(null);
1:03785a4:             }
1:03785a4: 
1:03785a4:             // Register for any async error notifications now so we can reset in the
1:03785a4:             // case where there's not a lot of activity and a connection drops.
1:03785a4:             newConnection.setExceptionListener(new ExceptionListener() {
1:03785a4:                 @Override
1:03785a4:                 public void onException(JMSException exception) {
1:03785a4:                     handleConnectionFailure(localConnection.get());
1:d29ca2a:                 }
1:03785a4:             });
1:03785a4: 
1:03785a4:             if (localClientId != null && localClientId.length() > 0) {
1:03785a4:                 newConnection.setClientID(getLocalClientId());
1:03785a4:             }
1:03785a4:             newConnection.start();
1:03785a4: 
1:03785a4:             inboundMessageConvertor.setConnection(newConnection);
1:03785a4: 
1:03785a4:             // Configure the bridges with the new Local connection.
1:03785a4:             initializeInboundDestinationBridgesLocalSide(newConnection);
1:03785a4:             initializeOutboundDestinationBridgesLocalSide(newConnection);
1:03785a4: 
1:03785a4:             // At this point all looks good, so this our current connection now.
1:03785a4:             localConnection.set(newConnection);
1:03785a4:         } catch (Exception ex) {
1:03785a4:             if (newConnection != null) {
1:03785a4:                 try {
1:03785a4:                     newConnection.close();
1:03785a4:                 } catch (Exception ignore) {}
1:d29ca2a:             }
1:f812e34: 
1:03785a4:             throw ex;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:bc78238:     protected void initializeInboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException {
1:f812e34:         if (inboundTopicBridges != null) {
1:bc78238:             TopicSession outboundSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:bc78238:             for (InboundTopicBridge bridge : inboundTopicBridges) {
1:bc78238:                 String TopicName = bridge.getInboundTopicName();
1:bc78238:                 Topic foreignTopic = createForeignTopic(outboundSession, TopicName);
1:bc78238:                 bridge.setConsumer(null);
1:d29ca2a:                 bridge.setConsumerTopic(foreignTopic);
1:bc78238:                 bridge.setConsumerConnection(connection);
1:bc78238:                 bridge.setJmsConnector(this);
1:bc78238:                 addInboundBridge(bridge);
1:d29ca2a:             }
1:d29ca2a:             outboundSession.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bc78238:     protected void initializeInboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException {
1:bc78238:         if (inboundTopicBridges != null) {
1:bc78238:             TopicSession localSession = connection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:bc78238:             for (InboundTopicBridge bridge : inboundTopicBridges) {
1:f812e34:                 String localTopicName = bridge.getLocalTopicName();
1:f812e34:                 Topic activemqTopic = createActiveMQTopic(localSession, localTopicName);
1:d29ca2a:                 bridge.setProducerTopic(activemqTopic);
1:bc78238:                 bridge.setProducerConnection(connection);
1:f812e34:                 if (bridge.getJmsMessageConvertor() == null) {
1:28647f1:                     bridge.setJmsMessageConvertor(getInboundMessageConvertor());
1:d29ca2a:                 }
1:28647f1:                 bridge.setJmsConnector(this);
1:d29ca2a:                 addInboundBridge(bridge);
1:d29ca2a:             }
2:d29ca2a:             localSession.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:bc78238:     protected void initializeOutboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException {
1:f812e34:         if (outboundTopicBridges != null) {
1:bc78238:             TopicSession outboundSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:bc78238:             for (OutboundTopicBridge bridge : outboundTopicBridges) {
1:f812e34:                 String topicName = bridge.getOutboundTopicName();
1:f812e34:                 Topic foreignTopic = createForeignTopic(outboundSession, topicName);
1:d29ca2a:                 bridge.setProducerTopic(foreignTopic);
1:bc78238:                 bridge.setProducerConnection(connection);
1:f812e34:                 if (bridge.getJmsMessageConvertor() == null) {
1:28647f1:                     bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
1:d29ca2a:                 }
1:28647f1:                 bridge.setJmsConnector(this);
1:d29ca2a:                 addOutboundBridge(bridge);
1:d29ca2a:             }
1:d29ca2a:             outboundSession.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bc78238:     protected void initializeOutboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException {
1:bc78238:         if (outboundTopicBridges != null) {
1:bc78238:             TopicSession localSession =
1:bc78238:                     connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:bc78238:             for (OutboundTopicBridge bridge : outboundTopicBridges) {
1:f812e34:                 String localTopicName = bridge.getLocalTopicName();
1:f812e34:                 Topic activemqTopic = createActiveMQTopic(localSession, localTopicName);
1:bc78238:                 bridge.setConsumer(null);
1:d29ca2a:                 bridge.setConsumerTopic(activemqTopic);
1:bc78238:                 bridge.setConsumerConnection(connection);
1:bc78238:                 bridge.setJmsConnector(this);
1:bc78238:                 addOutboundBridge(bridge);
1:d29ca2a:             }
1:d29ca2a:             localSession.close();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
2:bc78238:     @Override
1:f812e34:     protected Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection,
1:f812e34:                                               Connection replyToConsumerConnection) {
1:f812e34:         Topic replyToProducerTopic = (Topic)destination;
1:bc78238:         boolean isInbound = replyToProducerConnection.equals(localConnection.get());
1:f812e34: 
1:f812e34:         if (isInbound) {
1:f812e34:             InboundTopicBridge bridge = (InboundTopicBridge)replyToBridges.get(replyToProducerTopic);
1:f812e34:             if (bridge == null) {
1:f812e34:                 bridge = new InboundTopicBridge() {
1:5e05df1:                     @Override
1:f812e34:                     protected Destination processReplyToDestination(Destination destination) {
1:f812e34:                         return null;
1:f812e34:                     }
1:f812e34:                 };
1:f812e34:                 try {
1:f812e34:                     TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection)
1:f812e34:                         .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:f812e34:                     Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
1:f812e34:                     replyToConsumerSession.close();
1:f812e34:                     bridge.setConsumerTopic(replyToConsumerTopic);
1:f812e34:                     bridge.setProducerTopic(replyToProducerTopic);
1:f812e34:                     bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
1:f812e34:                     bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
1:f812e34:                     bridge.setDoHandleReplyTo(false);
1:f812e34:                     if (bridge.getJmsMessageConvertor() == null) {
1:f812e34:                         bridge.setJmsMessageConvertor(getInboundMessageConvertor());
1:f812e34:                     }
1:f812e34:                     bridge.setJmsConnector(this);
1:f812e34:                     bridge.start();
1:e1bbde7:                     LOG.info("Created replyTo bridge for {}", replyToProducerTopic);
1:f812e34:                 } catch (Exception e) {
1:e1bbde7:                     LOG.error("Failed to create replyTo bridge for topic: {}", replyToProducerTopic, e);
1:f812e34:                     return null;
1:f812e34:                 }
1:f812e34:                 replyToBridges.put(replyToProducerTopic, bridge);
1:f812e34:             }
1:f812e34:             return bridge.getConsumerTopic();
1:f812e34:         } else {
1:f812e34:             OutboundTopicBridge bridge = (OutboundTopicBridge)replyToBridges.get(replyToProducerTopic);
1:f812e34:             if (bridge == null) {
1:f812e34:                 bridge = new OutboundTopicBridge() {
1:5e05df1:                     @Override
1:f812e34:                     protected Destination processReplyToDestination(Destination destination) {
1:f812e34:                         return null;
1:f812e34:                     }
1:f812e34:                 };
1:f812e34:                 try {
1:f812e34:                     TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection)
1:f812e34:                         .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:f812e34:                     Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
1:f812e34:                     replyToConsumerSession.close();
1:f812e34:                     bridge.setConsumerTopic(replyToConsumerTopic);
1:f812e34:                     bridge.setProducerTopic(replyToProducerTopic);
1:f812e34:                     bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
1:f812e34:                     bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
1:f812e34:                     bridge.setDoHandleReplyTo(false);
1:f812e34:                     if (bridge.getJmsMessageConvertor() == null) {
1:f812e34:                         bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
1:f812e34:                     }
1:f812e34:                     bridge.setJmsConnector(this);
1:f812e34:                     bridge.start();
1:e1bbde7:                     LOG.info("Created replyTo bridge for {}", replyToProducerTopic);
2:f812e34:                 } catch (Exception e) {
1:e1bbde7:                     LOG.error("Failed to create replyTo bridge for topic: {}", replyToProducerTopic, e);
1:f812e34:                     return null;
1:f812e34:                 }
1:f812e34:                 replyToBridges.put(replyToProducerTopic, bridge);
1:f812e34:             }
1:f812e34:             return bridge.getConsumerTopic();
1:f812e34:         }
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected Topic createActiveMQTopic(TopicSession session, String topicName) throws JMSException {
1:d29ca2a:         return session.createTopic(topicName);
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     protected Topic createForeignTopic(TopicSession session, String topicName) throws JMSException {
1:d29ca2a:         Topic result = null;
1:d29ca2a: 
1:c176fa8:         if (preferJndiDestinationLookup) {
1:f812e34:             try {
1:c176fa8:                 // look-up the Queue
1:5e05df1:                 result = jndiOutboundTemplate.lookup(topicName, Topic.class);
1:c176fa8:             } catch (NamingException e) {
1:f812e34:                 try {
1:d29ca2a:                     result = session.createTopic(topicName);
1:c176fa8:                 } catch (JMSException e1) {
1:c176fa8:                     String errStr = "Failed to look-up or create Topic for name: " + topicName;
2:c176fa8:                     LOG.error(errStr, e);
2:c176fa8:                     JMSException jmsEx = new JMSException(errStr);
2:c176fa8:                     jmsEx.setLinkedException(e1);
2:c176fa8:                     throw jmsEx;
1:d29ca2a:                 }
1:d29ca2a:             }
1:f812e34:         } else {
3:c176fa8:             try {
2:c176fa8:                 result = session.createTopic(topicName);
1:f812e34:             } catch (JMSException e) {
1:f812e34:                 // look-up the Topic
1:f812e34:                 try {
1:5e05df1:                     result = jndiOutboundTemplate.lookup(topicName, Topic.class);
1:f812e34:                 } catch (NamingException e1) {
1:d29ca2a:                     String errStr = "Failed to look-up Topic for name: " + topicName;
1:fc00993:                     LOG.error(errStr, e);
1:f812e34:                     JMSException jmsEx = new JMSException(errStr);
1:d29ca2a:                     jmsEx.setLinkedException(e1);
1:d29ca2a:                     throw jmsEx;
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
2:d29ca2a:         return result;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:03785a4
/////////////////////////////////////////////////////////////////////////
1:         TopicConnection newConnection = null;
1:         try {
1:             if (foreignConnection.get() == null) {
1:                 // get the connection factories
1:                 if (outboundTopicConnectionFactory == null) {
1:                     // look it up from JNDI
1:                     if (outboundTopicConnectionFactoryName != null) {
1:                         outboundTopicConnectionFactory = jndiOutboundTemplate
1:                             .lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
1:                         if (outboundUsername != null) {
1:                             newConnection = outboundTopicConnectionFactory
1:                                 .createTopicConnection(outboundUsername, outboundPassword);
1:                         } else {
1:                             newConnection = outboundTopicConnectionFactory.createTopicConnection();
1:                         }
1:                     } else {
1:                         throw new JMSException("Cannot create foreignConnection - no information");
1:                     }
1:                 } else {
1:                 // Clear if for now in case something goes wrong during the init.
1:                 newConnection = (TopicConnection) foreignConnection.getAndSet(null);
1:             }
1: 
1:             // Register for any async error notifications now so we can reset in the
1:             // case where there's not a lot of activity and a connection drops.
1:             newConnection.setExceptionListener(new ExceptionListener() {
1:                 @Override
1:                 public void onException(JMSException exception) {
1:                     handleConnectionFailure(foreignConnection.get());
1:             });
1: 
1:             if (outboundClientId != null && outboundClientId.length() > 0) {
1:                 newConnection.setClientID(getOutboundClientId());
1:             newConnection.start();
1:             outboundMessageConvertor.setConnection(newConnection);
1:             // Configure the bridges with the new Outbound connection.
1:             initializeInboundDestinationBridgesOutboundSide(newConnection);
1:             initializeOutboundDestinationBridgesOutboundSide(newConnection);
1:             // At this point all looks good, so this our current connection now.
1:             foreignConnection.set(newConnection);
1:         } catch (Exception ex) {
1:             if (newConnection != null) {
1:                 try {
1:                     newConnection.close();
1:                 } catch (Exception ignore) {}
1:             throw ex;
1:         }
1:         TopicConnection newConnection = null;
1:         try {
1:             if (localConnection.get() == null) {
1:                 // get the connection factories
1:                 if (localTopicConnectionFactory == null) {
1:                     if (embeddedConnectionFactory == null) {
1:                         // look it up from JNDI
1:                         if (localConnectionFactoryName != null) {
1:                             localTopicConnectionFactory = jndiLocalTemplate
1:                                 .lookup(localConnectionFactoryName, TopicConnectionFactory.class);
1:                             if (localUsername != null) {
1:                                 newConnection = localTopicConnectionFactory
1:                                     .createTopicConnection(localUsername, localPassword);
1:                             } else {
1:                                 newConnection = localTopicConnectionFactory.createTopicConnection();
1:                             }
1:                             throw new JMSException("Cannot create localConnection - no information");
1:                         newConnection = embeddedConnectionFactory.createTopicConnection();
1:                     if (localUsername != null) {
1:                         newConnection = localTopicConnectionFactory.
1:                                 createTopicConnection(localUsername, localPassword);
1:                     } else {
1:                         newConnection = localTopicConnectionFactory.createTopicConnection();
1:                     }
1: 
1:                 // Clear if for now in case something goes wrong during the init.
1:                 newConnection = (TopicConnection) localConnection.getAndSet(null);
1:             }
1: 
1:             // Register for any async error notifications now so we can reset in the
1:             // case where there's not a lot of activity and a connection drops.
1:             newConnection.setExceptionListener(new ExceptionListener() {
1:                 @Override
1:                 public void onException(JMSException exception) {
1:                     handleConnectionFailure(localConnection.get());
1:             });
1: 
1:             if (localClientId != null && localClientId.length() > 0) {
1:                 newConnection.setClientID(getLocalClientId());
1:             }
1:             newConnection.start();
1: 
1:             inboundMessageConvertor.setConnection(newConnection);
1: 
1:             // Configure the bridges with the new Local connection.
1:             initializeInboundDestinationBridgesLocalSide(newConnection);
1:             initializeOutboundDestinationBridgesLocalSide(newConnection);
1: 
1:             // At this point all looks good, so this our current connection now.
1:             localConnection.set(newConnection);
1:         } catch (Exception ex) {
1:             if (newConnection != null) {
1:                 try {
1:                     newConnection.close();
1:                 } catch (Exception ignore) {}
1:             throw ex;
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:     public void setLocalTopicConnectionFactory(TopicConnectionFactory localTopicConnectionFactory) {
1:         this.localTopicConnectionFactory = localTopicConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:      * @param foreignTopicConnectionFactoryName The foreignTopicConnectionFactoryName to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param foreignTopicConnection The foreignTopicConnection to set.
1:      * @param foreignTopicConnectionFactory The foreignTopicConnectionFactory to set.
/////////////////////////////////////////////////////////////////////////
0:                     outboundTopicConnectionFactory = jndiOutboundTemplate
/////////////////////////////////////////////////////////////////////////
0:                         localTopicConnectionFactory = jndiLocalTemplate
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                 result = jndiOutboundTemplate.lookup(topicName, Topic.class);
/////////////////////////////////////////////////////////////////////////
1:                     result = jndiOutboundTemplate.lookup(topicName, Topic.class);
/////////////////////////////////////////////////////////////////////////
1: 
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Created replyTo bridge for {}", replyToProducerTopic);
1:                     LOG.error("Failed to create replyTo bridge for topic: {}", replyToProducerTopic, e);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Created replyTo bridge for {}", replyToProducerTopic);
1:                     LOG.error("Failed to create replyTo bridge for topic: {}", replyToProducerTopic, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
/////////////////////////////////////////////////////////////////////////
1: public class SimpleJmsTopicConnector extends JmsConnector {
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleJmsTopicConnector.class);
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JmsTopicConnector.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("Failed to initialize the JMSConnector", e);
/////////////////////////////////////////////////////////////////////////
0:                     LOG.info("Created replyTo bridge for " + replyToProducerTopic);
0:                     LOG.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
/////////////////////////////////////////////////////////////////////////
0:                     LOG.info("Created replyTo bridge for " + replyToProducerTopic);
0:                     LOG.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error(errStr, e);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0: public class JmsTopicConnector extends JmsConnector {
0:     private static final Log log = LogFactory.getLog(JmsTopicConnector.class);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean init() {
0:         boolean result = super.init();
0:         if (result) {
1:             try {
1:             } catch (Exception e) {
0:                 log.error("Failed to initialize the JMSConnector", e);
1:     }
1:     public InboundTopicBridge[] getInboundTopicBridges() {
1:      * @param inboundTopicBridges The inboundTopicBridges to set.
1:     public void setInboundTopicBridges(InboundTopicBridge[] inboundTopicBridges) {
1:         this.inboundTopicBridges = inboundTopicBridges;
1:     public OutboundTopicBridge[] getOutboundTopicBridges() {
1:      * @param outboundTopicBridges The outboundTopicBridges to set.
1:     public void setOutboundTopicBridges(OutboundTopicBridge[] outboundTopicBridges) {
1:         this.outboundTopicBridges = outboundTopicBridges;
1:     public TopicConnectionFactory getLocalTopicConnectionFactory() {
0:      * @param localTopicConnectionFactory The localTopicConnectionFactory to
0:      *                set.
0:     public void setLocalTopicConnectionFactory(TopicConnectionFactory localConnectionFactory) {
0:         this.localTopicConnectionFactory = localConnectionFactory;
1:     public TopicConnectionFactory getOutboundTopicConnectionFactory() {
1:     public String getOutboundTopicConnectionFactoryName() {
0:      * @param outboundTopicConnectionFactoryName The
0:      *                outboundTopicConnectionFactoryName to set.
1:     public void setOutboundTopicConnectionFactoryName(String foreignTopicConnectionFactoryName) {
1:         this.outboundTopicConnectionFactoryName = foreignTopicConnectionFactoryName;
1:     public String getLocalConnectionFactoryName() {
1:      * @param localConnectionFactoryName The localConnectionFactoryName to set.
1:     public void setLocalConnectionFactoryName(String localConnectionFactoryName) {
1:         this.localConnectionFactoryName = localConnectionFactoryName;
1:     public TopicConnection getLocalTopicConnection() {
1:      * @param localTopicConnection The localTopicConnection to set.
1:     public void setLocalTopicConnection(TopicConnection localTopicConnection) {
0:         this.localTopicConnection = localTopicConnection;
1:     public TopicConnection getOutboundTopicConnection() {
0:      * @param outboundTopicConnection The outboundTopicConnection to set.
1:     public void setOutboundTopicConnection(TopicConnection foreignTopicConnection) {
0:         this.outboundTopicConnection = foreignTopicConnection;
0:      * @param outboundTopicConnectionFactory The outboundTopicConnectionFactory
0:      *                to set.
1:     public void setOutboundTopicConnectionFactory(TopicConnectionFactory foreignTopicConnectionFactory) {
1:         this.outboundTopicConnectionFactory = foreignTopicConnectionFactory;
0:     protected void initializeForeignTopicConnection() throws NamingException, JMSException {
0:         if (outboundTopicConnection == null) {
0:             if (outboundTopicConnectionFactory == null) {
0:                 if (outboundTopicConnectionFactoryName != null) {
0:                     outboundTopicConnectionFactory = (TopicConnectionFactory)jndiOutboundTemplate
0:                         .lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
1:                     if (outboundUsername != null) {
0:                         outboundTopicConnection = outboundTopicConnectionFactory
1:                             .createTopicConnection(outboundUsername, outboundPassword);
1:                     } else {
0:                         outboundTopicConnection = outboundTopicConnectionFactory.createTopicConnection();
1:                 } else {
1:             } else {
1:                 if (outboundUsername != null) {
0:                     outboundTopicConnection = outboundTopicConnectionFactory
1:                         .createTopicConnection(outboundUsername, outboundPassword);
1:                 } else {
0:                     outboundTopicConnection = outboundTopicConnectionFactory.createTopicConnection();
0:     protected void initializeLocalTopicConnection() throws NamingException, JMSException {
0:         if (localTopicConnection == null) {
0:             if (localTopicConnectionFactory == null) {
0:                 if (embeddedConnectionFactory == null) {
0:                     if (localConnectionFactoryName != null) {
0:                         localTopicConnectionFactory = (TopicConnectionFactory)jndiLocalTemplate
0:                             .lookup(localConnectionFactoryName, TopicConnectionFactory.class);
0:                         if (localUsername != null) {
0:                             localTopicConnection = localTopicConnectionFactory
0:                                 .createTopicConnection(localUsername, localPassword);
1:                         } else {
0:                             localTopicConnection = localTopicConnectionFactory.createTopicConnection();
1:                     } else {
1:                 } else {
1:             } else {
0:                 if (localUsername != null) {
0:                     localTopicConnection = localTopicConnectionFactory.createTopicConnection(localUsername,
0:                                                                                              localPassword);
1:                 } else {
0:                     localTopicConnection = localTopicConnectionFactory.createTopicConnection();
1: 
0:     protected void initializeInboundJmsMessageConvertor() {
0:         inboundMessageConvertor.setConnection(localTopicConnection);
0:     protected void initializeOutboundJmsMessageConvertor() {
0:         outboundMessageConvertor.setConnection(outboundTopicConnection);
1:     }
1: 
0:     protected void initializeInboundTopicBridges() throws JMSException {
1:         if (inboundTopicBridges != null) {
0:             TopicSession outboundSession = outboundTopicConnection
1:                 .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0:             TopicSession localSession = localTopicConnection.createTopicSession(false,
0:                                                                                 Session.AUTO_ACKNOWLEDGE);
0:             for (int i = 0; i < inboundTopicBridges.length; i++) {
0:                 InboundTopicBridge bridge = inboundTopicBridges[i];
1:                 String localTopicName = bridge.getLocalTopicName();
1:                 Topic activemqTopic = createActiveMQTopic(localSession, localTopicName);
0:                 String topicName = bridge.getInboundTopicName();
1:                 Topic foreignTopic = createForeignTopic(outboundSession, topicName);
1:                 if (bridge.getJmsMessageConvertor() == null) {
/////////////////////////////////////////////////////////////////////////
0:     protected void initializeOutboundTopicBridges() throws JMSException {
1:         if (outboundTopicBridges != null) {
0:             TopicSession outboundSession = outboundTopicConnection
1:                 .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0:             TopicSession localSession = localTopicConnection.createTopicSession(false,
0:                                                                                 Session.AUTO_ACKNOWLEDGE);
0:             for (int i = 0; i < outboundTopicBridges.length; i++) {
0:                 OutboundTopicBridge bridge = outboundTopicBridges[i];
1:                 String localTopicName = bridge.getLocalTopicName();
1:                 Topic activemqTopic = createActiveMQTopic(localSession, localTopicName);
1:                 String topicName = bridge.getOutboundTopicName();
0:                 Topic foreignTopic = createForeignTopic(outboundSession, topicName);
1:                 if (bridge.getJmsMessageConvertor() == null) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection,
1:                                               Connection replyToConsumerConnection) {
1:         Topic replyToProducerTopic = (Topic)destination;
0:         boolean isInbound = replyToProducerConnection.equals(localTopicConnection);
1: 
1:         if (isInbound) {
1:             InboundTopicBridge bridge = (InboundTopicBridge)replyToBridges.get(replyToProducerTopic);
1:             if (bridge == null) {
1:                 bridge = new InboundTopicBridge() {
1:                     protected Destination processReplyToDestination(Destination destination) {
1:                         return null;
1:                     }
1:                 };
1:                 try {
1:                     TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection)
0:                         .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
1:                     replyToConsumerSession.close();
1:                     bridge.setConsumerTopic(replyToConsumerTopic);
1:                     bridge.setProducerTopic(replyToProducerTopic);
1:                     bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
1:                     bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
1:                     bridge.setDoHandleReplyTo(false);
1:                     if (bridge.getJmsMessageConvertor() == null) {
1:                         bridge.setJmsMessageConvertor(getInboundMessageConvertor());
1:                     }
1:                     bridge.setJmsConnector(this);
1:                     bridge.start();
0:                     log.info("Created replyTo bridge for " + replyToProducerTopic);
1:                 } catch (Exception e) {
0:                     log.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
1:                     return null;
1:                 }
1:                 replyToBridges.put(replyToProducerTopic, bridge);
1:             }
1:             return bridge.getConsumerTopic();
0:         } else {
1:             OutboundTopicBridge bridge = (OutboundTopicBridge)replyToBridges.get(replyToProducerTopic);
1:             if (bridge == null) {
1:                 bridge = new OutboundTopicBridge() {
1:                     protected Destination processReplyToDestination(Destination destination) {
1:                         return null;
1:                     }
1:                 };
1:                 try {
1:                     TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection)
0:                         .createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
1:                     replyToConsumerSession.close();
1:                     bridge.setConsumerTopic(replyToConsumerTopic);
1:                     bridge.setProducerTopic(replyToProducerTopic);
1:                     bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
1:                     bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
1:                     bridge.setDoHandleReplyTo(false);
1:                     if (bridge.getJmsMessageConvertor() == null) {
1:                         bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
1:                     }
1:                     bridge.setJmsConnector(this);
1:                     bridge.start();
0:                     log.info("Created replyTo bridge for " + replyToProducerTopic);
1:                 } catch (Exception e) {
0:                     log.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
1:                     return null;
1:                 }
1:                 replyToBridges.put(replyToProducerTopic, bridge);
1:             }
1:             return bridge.getConsumerTopic();
1:         }
1: 
1:     protected Topic createActiveMQTopic(TopicSession session, String topicName) throws JMSException {
1: 
1:     protected Topic createForeignTopic(TopicSession session, String topicName) throws JMSException {
1:         try {
1:         } catch (JMSException e) {
1:             // look-up the Topic
1:             try {
0:                 result = (Topic)jndiOutboundTemplate.lookup(topicName, Topic.class);
1:             } catch (NamingException e1) {
0:                 log.error(errStr, e);
1:                 JMSException jmsEx = new JMSException(errStr);
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicConnectionFactory;
1: import javax.jms.TopicSession;
1: import javax.naming.NamingException;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * A Bridge to other JMS Topic providers
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class JmsTopicConnector extends JmsConnector{
0:     private static final Log log=LogFactory.getLog(JmsTopicConnector.class);
1:     private String outboundTopicConnectionFactoryName;
1:     private String localConnectionFactoryName;
1:     private TopicConnectionFactory outboundTopicConnectionFactory;
1:     private TopicConnectionFactory localTopicConnectionFactory;
0:     private TopicConnection outboundTopicConnection;
0:     private TopicConnection localTopicConnection;
1:     private InboundTopicBridge[] inboundTopicBridges;
1:     private OutboundTopicBridge[] outboundTopicBridges;
0:     private String outboundUsername;
0:     private String outboundPassword;
0:     private String localUsername;
0:     private String localPassword;
1:    
1:    
1:    
1: 
0:     public boolean init(){
0:         boolean result=super.init();
0:         if(result){
0:             try{
0:                 initializeForeignTopicConnection();
0:                 initializeLocalTopicConnection();
0:                 initializeInboundTopicBridges();
0:                 initializeOutboundTopicBridges();
0:             }catch(Exception e){
0:                 log.error("Failed to initialize the JMSConnector",e);
1:             }
1:         }
1:         return result;
1:     }   
1:     
1: 
1:     
1:     /**
1:      * @return Returns the inboundTopicBridges.
1:      */
0:     public InboundTopicBridge[] getInboundTopicBridges(){
1:         return inboundTopicBridges;
1:     }
1: 
1:     /**
0:      * @param inboundTopicBridges
0:      *            The inboundTopicBridges to set.
1:      */
0:     public void setInboundTopicBridges(InboundTopicBridge[] inboundTopicBridges){
0:         this.inboundTopicBridges=inboundTopicBridges;
1:     }
1: 
1:     /**
1:      * @return Returns the outboundTopicBridges.
1:      */
0:     public OutboundTopicBridge[] getOutboundTopicBridges(){
1:         return outboundTopicBridges;
1:     }
1: 
1:     /**
0:      * @param outboundTopicBridges
0:      *            The outboundTopicBridges to set.
1:      */
0:     public void setOutboundTopicBridges(OutboundTopicBridge[] outboundTopicBridges){
0:         this.outboundTopicBridges=outboundTopicBridges;
1:     }
1: 
1:     /**
1:      * @return Returns the localTopicConnectionFactory.
1:      */
0:     public TopicConnectionFactory getLocalTopicConnectionFactory(){
1:         return localTopicConnectionFactory;
1:     }
1: 
1:     /**
0:      * @param localTopicConnectionFactory
0:      *            The localTopicConnectionFactory to set.
1:      */
0:     public void setLocalTopicConnectionFactory(TopicConnectionFactory localConnectionFactory){
0:         this.localTopicConnectionFactory=localConnectionFactory;
1:     }
1: 
1:     /**
1:      * @return Returns the outboundTopicConnectionFactory.
1:      */
0:     public TopicConnectionFactory getOutboundTopicConnectionFactory(){
1:         return outboundTopicConnectionFactory;
1:     }
1: 
1:     /**
1:      * @return Returns the outboundTopicConnectionFactoryName.
1:      */
0:     public String getOutboundTopicConnectionFactoryName(){
1:         return outboundTopicConnectionFactoryName;
1:     }
1: 
1:     /**
0:      * @param outboundTopicConnectionFactoryName
0:      *            The outboundTopicConnectionFactoryName to set.
1:      */
0:     public void setOutboundTopicConnectionFactoryName(String foreignTopicConnectionFactoryName){
0:         this.outboundTopicConnectionFactoryName=foreignTopicConnectionFactoryName;
1:     }
1: 
1:     /**
1:      * @return Returns the localConnectionFactoryName.
1:      */
0:     public String getLocalConnectionFactoryName(){
1:         return localConnectionFactoryName;
1:     }
1: 
1:     /**
0:      * @param localConnectionFactoryName
0:      *            The localConnectionFactoryName to set.
1:      */
0:     public void setLocalConnectionFactoryName(String localConnectionFactoryName){
0:         this.localConnectionFactoryName=localConnectionFactoryName;
1:     }
1: 
1:     /**
1:      * @return Returns the localTopicConnection.
1:      */
0:     public TopicConnection getLocalTopicConnection(){
0:         return localTopicConnection;
1:     }
1: 
1:     /**
0:      * @param localTopicConnection
0:      *            The localTopicConnection to set.
1:      */
0:     public void setLocalTopicConnection(TopicConnection localTopicConnection){
0:         this.localTopicConnection=localTopicConnection;
1:     }
1: 
1:     /**
1:      * @return Returns the outboundTopicConnection.
1:      */
0:     public TopicConnection getOutboundTopicConnection(){
0:         return outboundTopicConnection;
1:     }
1: 
1:     /**
0:      * @param outboundTopicConnection
0:      *            The outboundTopicConnection to set.
1:      */
0:     public void setOutboundTopicConnection(TopicConnection foreignTopicConnection){
0:         this.outboundTopicConnection=foreignTopicConnection;
1:     }
1: 
1:     /**
0:      * @param outboundTopicConnectionFactory
0:      *            The outboundTopicConnectionFactory to set.
1:      */
0:     public void setOutboundTopicConnectionFactory(TopicConnectionFactory foreignTopicConnectionFactory){
0:         this.outboundTopicConnectionFactory=foreignTopicConnectionFactory;
1:     }
1: 
1:     /**
0:      * @return Returns the outboundPassword.
1:      */
0:     public String getOutboundPassword(){
0:         return outboundPassword;
1:     }
1: 
1:     /**
0:      * @param outboundPassword
0:      *            The outboundPassword to set.
1:      */
0:     public void setOutboundPassword(String foreignPassword){
0:         this.outboundPassword=foreignPassword;
1:     }
1: 
1:     /**
0:      * @return Returns the outboundUsername.
1:      */
0:     public String getOutboundUsername(){
0:         return outboundUsername;
1:     }
1: 
1:     /**
0:      * @param outboundUsername
0:      *            The outboundUsername to set.
1:      */
0:     public void setOutboundUsername(String foreignUsername){
0:         this.outboundUsername=foreignUsername;
1:     }
1: 
1:     /**
0:      * @return Returns the localPassword.
1:      */
0:     public String getLocalPassword(){
0:         return localPassword;
1:     }
1: 
1:     /**
0:      * @param localPassword
0:      *            The localPassword to set.
1:      */
0:     public void setLocalPassword(String localPassword){
0:         this.localPassword=localPassword;
1:     }
1: 
1:     /**
0:      * @return Returns the localUsername.
1:      */
0:     public String getLocalUsername(){
0:         return localUsername;
1:     }
1: 
1:     /**
0:      * @param localUsername
0:      *            The localUsername to set.
1:      */
0:     public void setLocalUsername(String localUsername){
0:         this.localUsername=localUsername;
1:     }
1:     
1:     /**
0:      * @return Returns the replyToDestinationCacheSize.
1:      */
0:     public int getReplyToDestinationCacheSize(){
0:         return replyToDestinationCacheSize;
1:     }
1: 
1:     /**
0:      * @param replyToDestinationCacheSize The replyToDestinationCacheSize to set.
1:      */
0:     public void setReplyToDestinationCacheSize(int temporaryTopicCacheSize){
0:         this.replyToDestinationCacheSize=temporaryTopicCacheSize;
1:     }
1: 
0:     protected void initializeForeignTopicConnection() throws NamingException,JMSException{
0:         if(outboundTopicConnection==null){
0:             // get the connection factories
0:             if(outboundTopicConnectionFactory==null){
0:                 // look it up from JNDI
0:                 if(outboundTopicConnectionFactoryName!=null){
0:                     outboundTopicConnectionFactory=(TopicConnectionFactory) jndiTemplate.lookup(
0:                                     outboundTopicConnectionFactoryName,TopicConnectionFactory.class);
0:                     if(outboundUsername!=null){
0:                         outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection(outboundUsername,
0:                                         outboundPassword);
0:                     }else{
0:                         outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection();
1:                     }
0:                 }else {
0:                     throw new JMSException("Cannot create localConnection - no information");
1:                 }
0:             }else {
0:                 if(outboundUsername!=null){
0:                     outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection(outboundUsername,
0:                                     outboundPassword);
0:                 }else{
0:                     outboundTopicConnection=outboundTopicConnectionFactory.createTopicConnection();
1:                 }
1:             }
1:         }
0:         outboundTopicConnection.start();
1:     }
1: 
0:     protected void initializeLocalTopicConnection() throws NamingException,JMSException{
0:         if(localTopicConnection==null){
0:             // get the connection factories
0:             if(localTopicConnectionFactory==null){
0:                 if(embeddedConnectionFactory==null){
0:                     // look it up from JNDI
0:                     if(localConnectionFactoryName!=null){
0:                         localTopicConnectionFactory=(TopicConnectionFactory) jndiTemplate.lookup(
0:                                         localConnectionFactoryName,TopicConnectionFactory.class);
0:                         if(localUsername!=null){
0:                             localTopicConnection=localTopicConnectionFactory.createTopicConnection(localUsername,
0:                                             localPassword);
0:                         }else{
0:                             localTopicConnection=localTopicConnectionFactory.createTopicConnection();
1:                         }
0:                     }else {
0:                         throw new JMSException("Cannot create localConnection - no information");
1:                     }
0:                 }else{
0:                     localTopicConnection = embeddedConnectionFactory.createTopicConnection();
1:                 }
0:             }else {
0:                 if(localUsername!=null){
0:                     localTopicConnection=localTopicConnectionFactory.createTopicConnection(localUsername,
0:                                     localPassword);
0:                 }else{
0:                     localTopicConnection=localTopicConnectionFactory.createTopicConnection();
1:                 }
1:             }
1:         }
0:         localTopicConnection.start();
1:     }
1: 
0:     protected void initializeInboundTopicBridges() throws JMSException{
0:         if(inboundTopicBridges!=null){
0:             TopicSession outboundSession = outboundTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:             TopicSession localSession = localTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:             for(int i=0;i<inboundTopicBridges.length;i++){
0:                 InboundTopicBridge bridge=inboundTopicBridges[i];
0:                 String topicName=bridge.getInboundTopicName();
0:                 Topic activemqTopic=createActiveMQTopic(localSession,topicName);
0:                 Topic foreignTopic=createForeignTopic(outboundSession,topicName);
1:                 bridge.setConsumerTopic(foreignTopic);
1:                 bridge.setProducerTopic(activemqTopic);
0:                 bridge.setProducerConnection(localTopicConnection);
0:                 bridge.setConsumerConnection(outboundTopicConnection);
0:                 if(bridge.getJmsMessageConvertor()==null){
0:                     bridge.setJmsMessageConvertor(getJmsMessageConvertor());
1:                 }
0:                 bridge.setJmsTopicConnector(this);
1:                 addInboundBridge(bridge);
1:             }
1:             outboundSession.close();
1:             localSession.close();
1:         }
1:     }
1: 
0:     protected void initializeOutboundTopicBridges() throws JMSException{
0:         if(outboundTopicBridges!=null){
0:             TopicSession outboundSession = outboundTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:             TopicSession localSession = localTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:             for(int i=0;i<outboundTopicBridges.length;i++){
0:                 OutboundTopicBridge bridge=outboundTopicBridges[i];
0:                 String topicName=bridge.getOutboundTopicName();
0:                 Topic activemqTopic=createActiveMQTopic(localSession,topicName);
0:                 Topic foreignTopic=createForeignTopic(outboundSession,topicName);
1:                 bridge.setConsumerTopic(activemqTopic);
1:                 bridge.setProducerTopic(foreignTopic);
0:                 bridge.setProducerConnection(outboundTopicConnection);
0:                 bridge.setConsumerConnection(localTopicConnection);
0:                 bridge.setDoHandleReplyTo(false);
0:                 if(bridge.getJmsMessageConvertor()==null){
0:                     bridge.setJmsMessageConvertor(getJmsMessageConvertor());
1:                 }
0:                 bridge.setJmsTopicConnector(this);
1:                 addOutboundBridge(bridge);
1:             }
1:             outboundSession.close();
1:             localSession.close();
1:         }
1:     }
1:     
0:     protected Destination createReplyToTopicBridge(Topic topic, TopicConnection consumerConnection, TopicConnection producerConnection){
0:         OutboundTopicBridge bridge = (OutboundTopicBridge) replyToBridges.get(topic);
0:         if (bridge == null){
0:             bridge = new OutboundTopicBridge(){
0:                 //we only handle replyTo destinations - inbound
0:                 protected Destination processReplyToDestination (Destination destination){
0:                     return null;
1:                 }
0:             };
0:             try{
0:                 TopicSession localSession = localTopicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:                 Topic localTopic = localSession.createTemporaryTopic();
1:                 localSession.close();
0:                 bridge.setConsumerTopic(localTopic);
0:                 bridge.setProducerTopic(topic);
0:                 bridge.setProducerConnection(outboundTopicConnection);
0:                 bridge.setConsumerConnection(localTopicConnection);
0:                 bridge.setDoHandleReplyTo(false);
0:                 if(bridge.getJmsMessageConvertor()==null){
0:                     bridge.setJmsMessageConvertor(getJmsMessageConvertor());
1:                 }
0:                 bridge.setJmsTopicConnector(this);
0:                 bridge.start();
0:                 log.info("Created replyTo bridge for " + topic);
0:             }catch(Exception e){
0:                log.error("Failed to create replyTo bridge for topic: " + topic,e);
0:                return null;
1:             }
0:             replyToBridges.put(topic, bridge);
1:         }
0:         return bridge.getConsumerTopic();
1:     }
1:     
0:     protected Topic createActiveMQTopic(TopicSession session,String topicName) throws JMSException{
1:         return session.createTopic(topicName);
1:     }
1:     
0:     protected Topic createForeignTopic(TopicSession session,String topicName) throws JMSException{
1:         Topic result = null;
0:         try{
1:             result = session.createTopic(topicName);
0:         }catch(JMSException e){
0:             //look-up the Topic
0:             try{
0:                 result = (Topic) jndiTemplate.lookup(topicName, Topic.class);
0:             }catch(NamingException e1){
1:                 String errStr = "Failed to look-up Topic for name: " + topicName;
0:                 log.error(errStr,e);
0:                 JMSException jmsEx =  new JMSException(errStr);
1:                 jmsEx.setLinkedException(e1);
1:                 throw jmsEx;
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c176fa8
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
0: 
1:         if (preferJndiDestinationLookup) {
1:                 // look-up the Queue
1:             } catch (NamingException e) {
1:                 try {
1:                     result = session.createTopic(topicName);
1:                 } catch (JMSException e1) {
1:                     String errStr = "Failed to look-up or create Topic for name: " + topicName;
1:                     LOG.error(errStr, e);
1:                     JMSException jmsEx = new JMSException(errStr);
1:                     jmsEx.setLinkedException(e1);
1:                     throw jmsEx;
0:                 }
0:             }
0:         } else {
1:             try {
1:                 result = session.createTopic(topicName);
0:             } catch (JMSException e) {
0:                 // look-up the Topic
1:                 try {
0:                     result = (Topic)jndiOutboundTemplate.lookup(topicName, Topic.class);
0:                 } catch (NamingException e1) {
0:                     String errStr = "Failed to look-up Topic for name: " + topicName;
1:                     LOG.error(errStr, e);
1:                     JMSException jmsEx = new JMSException(errStr);
1:                     jmsEx.setLinkedException(e1);
1:                     throw jmsEx;
0:                 }
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ExceptionListener;
0: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param localTopicConnectionFactory The localTopicConnectionFactory to set.
/////////////////////////////////////////////////////////////////////////
0:      * @param outboundTopicConnectionFactoryName The outboundTopicConnectionFactoryName to set.
/////////////////////////////////////////////////////////////////////////
1:         return (TopicConnection) localConnection.get();
1:         this.localConnection.set(localTopicConnection);
1:         return (TopicConnection) foreignConnection.get();
1:         this.foreignConnection.set(foreignTopicConnection);
0:      * @param outboundTopicConnectionFactory The outboundTopicConnectionFactory to set.
1:     @Override
1:     protected void initializeForeignConnection() throws NamingException, JMSException {
0:         final TopicConnection newConnection;
0: 
0:         if (foreignConnection.get() == null) {
/////////////////////////////////////////////////////////////////////////
1:                         newConnection = outboundTopicConnectionFactory
1:                         newConnection = outboundTopicConnectionFactory.createTopicConnection();
0:                     throw new JMSException("Cannot create foreignConnection - no information");
1:                     newConnection = outboundTopicConnectionFactory
1:                     newConnection = outboundTopicConnectionFactory.createTopicConnection();
0:         } else {
0:             // Clear if for now in case something goes wrong during the init.
0:             newConnection = (TopicConnection) foreignConnection.getAndSet(null);
0: 
0:         if (outboundClientId != null && outboundClientId.length() > 0) {
0:             newConnection.setClientID(getOutboundClientId());
0:         newConnection.start();
0: 
0:         outboundMessageConvertor.setConnection(newConnection);
0: 
0:         // Configure the bridges with the new Outbound connection.
0:         initializeInboundDestinationBridgesOutboundSide(newConnection);
0:         initializeOutboundDestinationBridgesOutboundSide(newConnection);
0: 
0:         // Register for any async error notifications now so we can reset in the
0:         // case where there's not a lot of activity and a connection drops.
0:         newConnection.setExceptionListener(new ExceptionListener() {
1:             @Override
0:             public void onException(JMSException exception) {
0:                 handleConnectionFailure(newConnection);
0:             }
0:         });
0: 
0:         // At this point all looks good, so this our current connection now.
0:         foreignConnection.set(newConnection);
1:     @Override
1:     protected void initializeLocalConnection() throws NamingException, JMSException {
0: 
0:         final TopicConnection newConnection;
0: 
0:         if (localConnection.get() == null) {
/////////////////////////////////////////////////////////////////////////
0:                             newConnection = localTopicConnectionFactory
0:                             newConnection = localTopicConnectionFactory.createTopicConnection();
0:                     newConnection = embeddedConnectionFactory.createTopicConnection();
0:                     newConnection = localTopicConnectionFactory.
0:                             createTopicConnection(localUsername, localPassword);
0:                     newConnection = localTopicConnectionFactory.createTopicConnection();
0: 
0:         } else {
0:             // Clear if for now in case something goes wrong during the init.
0:             newConnection = (TopicConnection) localConnection.getAndSet(null);
0: 
0:             newConnection.setClientID(getLocalClientId());
0:         newConnection.start();
0: 
0:         inboundMessageConvertor.setConnection(newConnection);
0: 
0:         // Configure the bridges with the new Local connection.
0:         initializeInboundDestinationBridgesLocalSide(newConnection);
0:         initializeOutboundDestinationBridgesLocalSide(newConnection);
0: 
0:         // Register for any async error notifications now so we can reset in the
0:         // case where there's not a lot of activity and a connection drops.
0:         newConnection.setExceptionListener(new ExceptionListener() {
0:             @Override
0:             public void onException(JMSException exception) {
0:                 handleConnectionFailure(newConnection);
0:             }
0:         });
0: 
0:         // At this point all looks good, so this our current connection now.
0:         localConnection.set(newConnection);
1:     protected void initializeInboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException {
1:             TopicSession outboundSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:             for (InboundTopicBridge bridge : inboundTopicBridges) {
1:                 String TopicName = bridge.getInboundTopicName();
1:                 Topic foreignTopic = createForeignTopic(outboundSession, TopicName);
1:                 bridge.setConsumer(null);
0:                 bridge.setConsumerTopic(foreignTopic);
1:                 bridge.setConsumerConnection(connection);
1:                 bridge.setJmsConnector(this);
1:                 addInboundBridge(bridge);
0:             }
0:             outboundSession.close();
0:         }
0:     }
0: 
1:     protected void initializeInboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException {
1:         if (inboundTopicBridges != null) {
1:             TopicSession localSession = connection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0: 
1:             for (InboundTopicBridge bridge : inboundTopicBridges) {
1:                 bridge.setProducerConnection(connection);
1:     protected void initializeOutboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException {
1:             TopicSession outboundSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:             for (OutboundTopicBridge bridge : outboundTopicBridges) {
1:                 bridge.setProducerConnection(connection);
/////////////////////////////////////////////////////////////////////////
0:         }
0:     }
0: 
1:     protected void initializeOutboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException {
1:         if (outboundTopicBridges != null) {
1:             TopicSession localSession =
1:                     connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:             for (OutboundTopicBridge bridge : outboundTopicBridges) {
0:                 String localTopicName = bridge.getLocalTopicName();
0:                 Topic activemqTopic = createActiveMQTopic(localSession, localTopicName);
1:                 bridge.setConsumer(null);
0:                 bridge.setConsumerTopic(activemqTopic);
1:                 bridge.setConsumerConnection(connection);
1:                 bridge.setJmsConnector(this);
1:                 addOutboundBridge(bridge);
0:             }
/////////////////////////////////////////////////////////////////////////
1:         boolean isInbound = replyToProducerConnection.equals(localConnection.get());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Logger LOG = LoggerFactory.getLogger(JmsTopicConnector.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:4acbd59
/////////////////////////////////////////////////////////////////////////
0:         if (localClientId != null && localClientId.length() > 0) {
0:             outboundTopicConnection.setClientID(getOutboundClientId());
0:         }
/////////////////////////////////////////////////////////////////////////
0:         if (localClientId != null && localClientId.length() > 0) {
0:             localTopicConnection.setClientID(getLocalClientId());
0:         }
commit:902a8ea
/////////////////////////////////////////////////////////////////////////
0:                 String localTopicName=bridge.getLocalTopicName();          
0:                 Topic activemqTopic=createActiveMQTopic(localSession,localTopicName);
/////////////////////////////////////////////////////////////////////////
0:                 String localTopicName=bridge.getLocalTopicName();
0:                 Topic activemqTopic=createActiveMQTopic(localSession,localTopicName);
commit:28647f1
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:                 initializeInboundJmsMessageConvertor();
0:                 initializeOutboundJmsMessageConvertor();
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected void initializeInboundJmsMessageConvertor(){
0:     	inboundMessageConvertor.setConnection(localTopicConnection);
0:     }
0:     
0:     protected void initializeOutboundJmsMessageConvertor(){
0:     	outboundMessageConvertor.setConnection(outboundTopicConnection);
0:     }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected  Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection, Connection replyToConsumerConnection){
0:     	Topic replyToProducerTopic =(Topic)destination;
0:     	boolean isInbound = replyToProducerConnection.equals(localTopicConnection);
0:     	
0:     	if(isInbound){
0:     		InboundTopicBridge bridge = (InboundTopicBridge) replyToBridges.get(replyToProducerTopic);
0:     		if (bridge == null){
0:     			bridge = new InboundTopicBridge(){
0:     				protected Destination processReplyToDestination (Destination destination){
0:     					return null;
0:     				}
0:     			};
0:     			try{
0:     				TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection).createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:     				Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
0:     				replyToConsumerSession.close();
0:     				bridge.setConsumerTopic(replyToConsumerTopic);
0:     				bridge.setProducerTopic(replyToProducerTopic);
0:     				bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
0:     				bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
0:     				bridge.setDoHandleReplyTo(false);
0:     				if(bridge.getJmsMessageConvertor()==null){
1:     					bridge.setJmsMessageConvertor(getInboundMessageConvertor());
0:     				}
1:     				bridge.setJmsConnector(this);
0:     				bridge.start();
0:     				log.info("Created replyTo bridge for " + replyToProducerTopic);
0:     			}catch(Exception e){
0:     				log.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
0:     				return null;
0:     			}
0:     			replyToBridges.put(replyToProducerTopic, bridge);
0:     		}
0:     		return bridge.getConsumerTopic();
0:     	}else{
0:     		OutboundTopicBridge bridge = (OutboundTopicBridge) replyToBridges.get(replyToProducerTopic);
0:     		if (bridge == null){
0:     			bridge = new OutboundTopicBridge(){
0:     				protected Destination processReplyToDestination (Destination destination){
0:     					return null;
0:     				}
0:     			};
0:     			try{
0:     				TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection).createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:     				Topic replyToConsumerTopic = replyToConsumerSession.createTemporaryTopic();
0:     				replyToConsumerSession.close();
0:     				bridge.setConsumerTopic(replyToConsumerTopic);
0:     				bridge.setProducerTopic(replyToProducerTopic);
0:     				bridge.setProducerConnection((TopicConnection)replyToProducerConnection);
0:     				bridge.setConsumerConnection((TopicConnection)replyToConsumerConnection);
0:     				bridge.setDoHandleReplyTo(false);
0:     				if(bridge.getJmsMessageConvertor()==null){
1:     					bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
0:     				}
1:     				bridge.setJmsConnector(this);
0:     				bridge.start();
0:     				log.info("Created replyTo bridge for " + replyToProducerTopic);
0:     			}catch(Exception e){
0:     				log.error("Failed to create replyTo bridge for topic: " + replyToProducerTopic, e);
0:     				return null;
0:     			}
0:     			replyToBridges.put(replyToProducerTopic, bridge);
0:     		}
0:     		return bridge.getConsumerTopic();
0:     	}		
commit:49e8a80
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 bridge.setJmsConnector(this);
/////////////////////////////////////////////////////////////////////////
0:                 bridge.setJmsConnector(this);
/////////////////////////////////////////////////////////////////////////
0:     protected  Destination createReplyToBridge(Destination destination, Connection consumerConnection, Connection producerConnection){
0:         Topic topic =(Topic)destination;
0:         
/////////////////////////////////////////////////////////////////////////
0:                 bridge.setJmsConnector(this);
commit:6ea186c
/////////////////////////////////////////////////////////////////////////
0:                     bridge.setJmsMessageConvertor(getInboundMessageConvertor());
/////////////////////////////////////////////////////////////////////////
0:                     bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
/////////////////////////////////////////////////////////////////////////
0:                     bridge.setJmsMessageConvertor(getOutboundMessageConvertor());
commit:e1bc55d
/////////////////////////////////////////////////////////////////////////
0:                     outboundTopicConnectionFactory=(TopicConnectionFactory) jndiOutboundTemplate.lookup(
/////////////////////////////////////////////////////////////////////////
0:                         localTopicConnectionFactory=(TopicConnectionFactory) jndiLocalTemplate.lookup(
/////////////////////////////////////////////////////////////////////////
0:                 result = (Topic) jndiOutboundTemplate.lookup(topicName, Topic.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:fbad105
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void restartProducerConnection() throws NamingException, JMSException {
0:         outboundTopicConnection = null;
0:         initializeForeignTopicConnection();
0:     }
============================================================================