1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Helper class for decomposing a Destination into a number of paths
1:b0c2a40:  * 
1:74a7a8b:  * 
1:d29ca2a:  */
1:933eb2f: public final class DestinationPath {
1:d29ca2a:     protected static final char SEPARATOR = '.';
1:d29ca2a: 
1:933eb2f:     private DestinationPath() {    
1:933eb2f:     }
1:933eb2f:     
1:d29ca2a:     public static String[] getDestinationPaths(String subject) {
1:ecf89a6:         List<String> list = new ArrayList<String>();
1:d29ca2a:         int previous = 0;
1:d29ca2a:         int lastIndex = subject.length() - 1;
1:d29ca2a:         while (true) {
1:d29ca2a:             int idx = subject.indexOf(SEPARATOR, previous);
1:d29ca2a:             if (idx < 0) {
1:d29ca2a:                 list.add(subject.substring(previous, lastIndex + 1));
1:d29ca2a:                 break;
2:d29ca2a:             }
1:d29ca2a:             list.add(subject.substring(previous, idx));
1:d29ca2a:             previous = idx + 1;
1:d29ca2a:         }
1:d29ca2a:         String[] answer = new String[list.size()];
1:d29ca2a:         list.toArray(answer);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static String[] getDestinationPaths(Message message) throws JMSException {
1:d29ca2a:         return getDestinationPaths(message.getDestination());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static String[] getDestinationPaths(ActiveMQDestination destination) {
1:d29ca2a:         return getDestinationPaths(destination.getPhysicalName());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Converts the paths to a single String seperated by dots.
1:74a7a8b:      * 
1:d29ca2a:      * @param paths
1:d29ca2a:      * @return
1:d29ca2a:      */
1:d29ca2a:     public static String toString(String[] paths) {
1:d29ca2a:         StringBuffer buffer = new StringBuffer();
1:d29ca2a:         for (int i = 0; i < paths.length; i++) {
1:d29ca2a:             if (i > 0) {
1:d29ca2a:                 buffer.append(SEPARATOR);
1:d29ca2a:             }
1:d29ca2a:             String path = paths[i];
1:d29ca2a:             if (path == null) {
1:d29ca2a:                 buffer.append("*");
1:74a7a8b:             } else {
1:d29ca2a:                 buffer.append(path);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return buffer.toString();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class DestinationPath {
1:     private DestinationPath() {    
1:     }
1:     
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         List<String> list = new ArrayList<String>();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.filter;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: 
1: /**
1:  * Helper class for decomposing a Destination into a number of paths
1:  *
0:  * @version $Revision: 1.3 $
1:  */
0: public class DestinationPath {
1:     protected static final char SEPARATOR = '.';
1: 
1:     public static String[] getDestinationPaths(String subject) {
0:         List list = new ArrayList();
1:         int previous = 0;
1:         int lastIndex = subject.length() - 1;
1:         while (true) {
1:             int idx = subject.indexOf(SEPARATOR, previous);
1:             if (idx < 0) {
1:                 list.add(subject.substring(previous, lastIndex + 1));
1:                 break;
1:             }
1:             list.add(subject.substring(previous, idx));
1:             previous = idx + 1;
1:         }
1:         String[] answer = new String[list.size()];
1:         list.toArray(answer);
1:         return answer;
1:     }
1: 
1:     public static String[] getDestinationPaths(Message message) throws JMSException {
1:         return getDestinationPaths(message.getDestination());
1:     }
1: 
1:     public static String[] getDestinationPaths(ActiveMQDestination destination) {
1:         return getDestinationPaths(destination.getPhysicalName());
1:     }
1: 
1:     /**
1:      * Converts the paths to a single String seperated by dots.
1:      *
1:      * @param paths
1:      * @return
1:      */
1:     public static String toString(String[] paths) {
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i = 0; i < paths.length; i++) {
1:             if (i > 0) {
1:                 buffer.append(SEPARATOR);
1:             }
1:             String path = paths[i];
1:             if (path == null) {
1:                 buffer.append("*");
1:             }
0:             else {
1:                 buffer.append(path);
1:             }
1:         }
1:         return buffer.toString();
1:     }
1: }
============================================================================