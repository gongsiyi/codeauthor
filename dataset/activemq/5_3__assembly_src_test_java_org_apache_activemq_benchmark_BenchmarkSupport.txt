1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:42d194e: package org.apache.activemq.benchmark;
8:40a7d3b: 
1:540dd5c: import java.text.NumberFormat;
1:540dd5c: import java.util.ArrayList;
1:540dd5c: import java.util.List;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: 
1:540dd5c: import org.apache.activemq.ActiveMQConnectionFactory;
1:540dd5c: import org.apache.activemq.util.IdGenerator;
1:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * Abstract base class for some simple benchmark tools
1:540dd5c:  * 
1:40a7d3b:  * @author James Strachan
1:b0c2a40:  * 
2:40a7d3b:  */
1:40a7d3b: public class BenchmarkSupport {
1:40a7d3b: 
1:40a7d3b:     protected int connectionCount = 1;
1:40a7d3b:     protected int batch = 1000;
1:40a7d3b:     protected Destination destination;
1:540dd5c:     protected String[] subjects;
1:40a7d3b: 
1:540dd5c:     private boolean topic = true;
1:540dd5c:     private boolean durable;
1:40a7d3b:     private ActiveMQConnectionFactory factory;
1:40a7d3b:     private String url;
1:40a7d3b:     private int counter;
1:540dd5c:     private List<Object> resources = new ArrayList<Object>();
1:40a7d3b:     private NumberFormat formatter = NumberFormat.getInstance();
1:40a7d3b:     private AtomicInteger connectionCounter = new AtomicInteger(0);
1:40a7d3b:     private IdGenerator idGenerator = new IdGenerator();
1:40a7d3b: 
1:40a7d3b:     public BenchmarkSupport() {
7:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void start() {
1:40a7d3b:         System.out.println("Using: " + connectionCount + " connection(s)");
1:40a7d3b:         subjects = new String[connectionCount];
1:40a7d3b:         for (int i = 0; i < connectionCount; i++) {
1:40a7d3b:             subjects[i] = "BENCHMARK.FEED" + i;
1:40a7d3b:         }
1:40a7d3b:         if (useTimerLoop()) {
1:40a7d3b:             Thread timer = new Thread() {
1:40a7d3b:                 public void run() {
1:40a7d3b:                     timerLoop();
1:40a7d3b:                 }
1:40a7d3b:             };
1:40a7d3b:             timer.start();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public String getUrl() {
1:40a7d3b:         return url;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setUrl(String url) {
1:40a7d3b:         this.url = url;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isTopic() {
1:40a7d3b:         return topic;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setTopic(boolean topic) {
1:40a7d3b:         this.topic = topic;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public ActiveMQConnectionFactory getFactory() {
1:40a7d3b:         return factory;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setFactory(ActiveMQConnectionFactory factory) {
1:40a7d3b:         this.factory = factory;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setSubject(String subject) {
1:40a7d3b:         connectionCount = 1;
1:540dd5c:         subjects = new String[] {
1:540dd5c:             subject
1:540dd5c:         };
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public boolean isDurable() {
1:40a7d3b:         return durable;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setDurable(boolean durable) {
1:40a7d3b:         this.durable = durable;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public int getConnectionCount() {
1:40a7d3b:         return connectionCount;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void setConnectionCount(int connectionCount) {
1:40a7d3b:         this.connectionCount = connectionCount;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected Session createSession() throws JMSException {
1:40a7d3b:         if (factory == null) {
1:40a7d3b:             factory = createFactory();
1:40a7d3b:         }
1:40a7d3b:         Connection connection = factory.createConnection();
1:40a7d3b:         int value = connectionCounter.incrementAndGet();
1:40a7d3b:         System.out.println("Created connection: " + value + " = " + connection);
1:40a7d3b:         if (durable) {
1:40a7d3b:             connection.setClientID(idGenerator.generateId());
1:40a7d3b:         }
1:40a7d3b:         addResource(connection);
1:40a7d3b:         connection.start();
1:40a7d3b: 
1:40a7d3b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:40a7d3b:         addResource(session);
1:40a7d3b:         return session;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected ActiveMQConnectionFactory createFactory() {
1:40a7d3b:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory(getUrl());
1:40a7d3b:         return answer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected synchronized void count(int count) {
1:40a7d3b:         counter += count;
1:40a7d3b:         /*
1:540dd5c:          * if (counter > batch) { counter = 0; long current =
1:540dd5c:          * System.currentTimeMillis(); double end = current - time; end /= 1000;
1:540dd5c:          * time = current; System.out.println("Processed " + batch + " messages
1:540dd5c:          * in " + end + " (secs)"); }
1:540dd5c:          */
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected synchronized int resetCount() {
1:40a7d3b:         int answer = counter;
2:40a7d3b:         counter = 0;
1:40a7d3b:         return answer;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void timerLoop() {
1:40a7d3b:         int times = 0;
1:40a7d3b:         int total = 0;
1:40a7d3b:         int dumpVmStatsFrequency = 10;
1:40a7d3b:         Runtime runtime = Runtime.getRuntime();
1:40a7d3b: 
1:40a7d3b:         while (true) {
1:40a7d3b:             try {
1:40a7d3b:                 Thread.sleep(1000);
1:540dd5c:             } catch (InterruptedException e) {
1:40a7d3b:                 e.printStackTrace();
1:40a7d3b:             }
1:40a7d3b:             int processed = resetCount();
1:40a7d3b:             double average = 0;
1:40a7d3b:             if (processed > 0) {
1:40a7d3b:                 total += processed;
1:40a7d3b:                 times++;
1:40a7d3b:             }
1:40a7d3b:             if (times > 0) {
1:540dd5c:                 average = total / (double)times;
1:40a7d3b:             }
1:40a7d3b: 
1:40a7d3b:             System.out.println(getClass().getName() + " Processed: " + processed + " messages this second. Average: " + average);
1:40a7d3b: 
1:40a7d3b:             if ((times % dumpVmStatsFrequency) == 0 && times != 0) {
1:540dd5c:                 System.out.println("Used memory: " + asMemoryString(runtime.totalMemory() - runtime.freeMemory()) + " Free memory: " + asMemoryString(runtime.freeMemory()) + " Total memory: "
1:540dd5c:                                    + asMemoryString(runtime.totalMemory()) + " Max memory: " + asMemoryString(runtime.maxMemory()));
1:40a7d3b:             }
1:40a7d3b: 
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected String asMemoryString(long value) {
1:40a7d3b:         return formatter.format(value / 1024) + " K";
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected boolean useTimerLoop() {
1:40a7d3b:         return true;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected Destination createDestination(Session session, String subject) throws JMSException {
1:40a7d3b:         if (topic) {
1:40a7d3b:             return session.createTopic(subject);
1:540dd5c:         } else {
1:40a7d3b:             return session.createQueue(subject);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void addResource(Object resource) {
1:40a7d3b:         resources.add(resource);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected static boolean parseBoolean(String text) {
1:40a7d3b:         return text.equalsIgnoreCase("true");
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.text.NumberFormat;
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.util.IdGenerator;
1:  * 
/////////////////////////////////////////////////////////////////////////
1:     protected String[] subjects;
1:     private boolean topic = true;
1:     private boolean durable;
1:     private List<Object> resources = new ArrayList<Object>();
/////////////////////////////////////////////////////////////////////////
1:         subjects = new String[] {
1:             subject
1:         };
/////////////////////////////////////////////////////////////////////////
1:          * if (counter > batch) { counter = 0; long current =
1:          * System.currentTimeMillis(); double end = current - time; end /= 1000;
1:          * time = current; System.out.println("Processed " + batch + " messages
1:          * in " + end + " (secs)"); }
1:          */
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             } catch (InterruptedException e) {
/////////////////////////////////////////////////////////////////////////
1:                 average = total / (double)times;
1:                 System.out.println("Used memory: " + asMemoryString(runtime.totalMemory() - runtime.freeMemory()) + " Free memory: " + asMemoryString(runtime.freeMemory()) + " Total memory: "
1:                                    + asMemoryString(runtime.totalMemory()) + " Max memory: " + asMemoryString(runtime.maxMemory()));
/////////////////////////////////////////////////////////////////////////
1:         } else {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:42d194e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.benchmark;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.util.IdGenerator;
commit:d46d27d
commit:57ca31f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.activemq.benchmark;
0: import org.apache.activemq.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.activemq.util.IdGenerator;
commit:ac87398
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb32fd2
/////////////////////////////////////////////////////////////////////////
0:                 average = total / (double) times;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2004 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 Protique Ltd
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
0:  **/
0: package org.activemq.benchmark;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
0: import org.activemq.ActiveMQConnectionFactory;
0: import org.activemq.util.IdGenerator;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
0: import java.text.NumberFormat;
0: import java.util.ArrayList;
0: import java.util.List;
1: 
1: /**
1:  * Abstract base class for some simple benchmark tools
1:  *
1:  * @author James Strachan
0:  * @version $Revision$
1:  */
1: public class BenchmarkSupport {
1: 
1:     protected int connectionCount = 1;
1:     protected int batch = 1000;
1:     protected Destination destination;
0:     protected boolean embeddedBroker = false;
0:     private boolean topic = true;
0:     private boolean durable = false;
1: 
1:     private ActiveMQConnectionFactory factory;
1:     private String url;
0:     protected String[] subjects;
0:     private long time = System.currentTimeMillis();
1:     private int counter;
0:     private List resources = new ArrayList();
1:     private NumberFormat formatter = NumberFormat.getInstance();
1:     private AtomicInteger connectionCounter = new AtomicInteger(0);
1:     private IdGenerator idGenerator = new IdGenerator();
1: 
1:     public BenchmarkSupport() {
1:     }
1: 
1:     public void start() {
1:         System.out.println("Using: " + connectionCount + " connection(s)");
1:         subjects = new String[connectionCount];
1:         for (int i = 0; i < connectionCount; i++) {
1:             subjects[i] = "BENCHMARK.FEED" + i;
1:         }
1:         if (useTimerLoop()) {
1:             Thread timer = new Thread() {
1:                 public void run() {
1:                     timerLoop();
1:                 }
1:             };
1:             timer.start();
1:         }
1:     }
1: 
1:     public String getUrl() {
1:         return url;
1:     }
1: 
1:     public void setUrl(String url) {
1:         this.url = url;
1:     }
1: 
1:     public boolean isTopic() {
1:         return topic;
1:     }
1: 
1:     public void setTopic(boolean topic) {
1:         this.topic = topic;
1:     }
1: 
1:     public ActiveMQConnectionFactory getFactory() {
1:         return factory;
1:     }
1: 
1:     public void setFactory(ActiveMQConnectionFactory factory) {
1:         this.factory = factory;
1:     }
1: 
1:     public void setSubject(String subject) {
1:         connectionCount = 1;
0:         subjects = new String[]{subject};
1:     }
1: 
1:     public boolean isDurable() {
1:         return durable;
1:     }
1: 
1:     public void setDurable(boolean durable) {
1:         this.durable = durable;
1:     }
1: 
0:     public boolean isEmbeddedBroker() {
0:         return embeddedBroker;
1:     }
1: 
0:     public void setEmbeddedBroker(boolean embeddedBroker) {
0:         this.embeddedBroker = embeddedBroker;
1:     }
1: 
1:     public int getConnectionCount() {
1:         return connectionCount;
1:     }
1: 
1:     public void setConnectionCount(int connectionCount) {
1:         this.connectionCount = connectionCount;
1:     }
1: 
1:     protected Session createSession() throws JMSException {
1:         if (factory == null) {
1:             factory = createFactory();
1:         }
1:         Connection connection = factory.createConnection();
1:         int value = connectionCounter.incrementAndGet();
1:         System.out.println("Created connection: " + value + " = " + connection);
1:         if (durable) {
1:             connection.setClientID(idGenerator.generateId());
1:         }
1:         addResource(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         addResource(session);
1:         return session;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createFactory() {
1:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory(getUrl());
0:         if (embeddedBroker) {
0:             answer.setUseEmbeddedBroker(true);
1:         }
1:         return answer;
1:     }
1: 
1:     protected synchronized void count(int count) {
1:         counter += count;
1:         /*
0:         if (counter > batch) {
1:             counter = 0;
0:             long current = System.currentTimeMillis();
0:             double end = current - time;
0:             end /= 1000;
0:             time = current;
1: 
0:             System.out.println("Processed " + batch + " messages in " + end + " (secs)");
1:         }
1:         */
1:     }
1: 
1:     protected synchronized int resetCount() {
1:         int answer = counter;
1:         counter = 0;
1:         return answer;
1:     }
1: 
1: 
1:     protected void timerLoop() {
1:         int times = 0;
1:         int total = 0;
1:         int dumpVmStatsFrequency = 10;
1:         Runtime runtime = Runtime.getRuntime();
1: 
1:         while (true) {
1:             try {
1:                 Thread.sleep(1000);
1:             }
0:             catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1:             int processed = resetCount();
1:             double average = 0;
1:             if (processed > 0) {
1:                 total += processed;
1:                 times++;
1:             }
1:             if (times > 0) {
0:                 average = total / times;
1:             }
1: 
0:             long oldtime = time;
0:             time = System.currentTimeMillis();
1: 
0:             double diff = time - oldtime;
1: 
1:             System.out.println(getClass().getName() + " Processed: " + processed + " messages this second. Average: " + average);
1: 
1:             if ((times % dumpVmStatsFrequency) == 0 && times != 0) {
0:                 System.out.println("Used memory: " + asMemoryString(runtime.totalMemory() - runtime.freeMemory())
0:                         + " Free memory: " + asMemoryString(runtime.freeMemory())
0:                         + " Total memory: " + asMemoryString(runtime.totalMemory())
0:                         + " Max memory: " + asMemoryString(runtime.maxMemory()));
1:             }
1: 
1:         }
1:     }
1: 
1:     protected String asMemoryString(long value) {
1:         return formatter.format(value / 1024) + " K";
1:     }
1: 
1:     protected boolean useTimerLoop() {
1:         return true;
1:     }
1: 
1:     protected Destination createDestination(Session session, String subject) throws JMSException {
1:         if (topic) {
1:             return session.createTopic(subject);
1:         }
0:         else {
1:             return session.createQueue(subject);
1:         }
1:     }
1: 
1:     protected void addResource(Object resource) {
1:         resources.add(resource);
1:     }
1: 
1:     protected static boolean parseBoolean(String text) {
1:         return text.equalsIgnoreCase("true");
1:     }
1: }
============================================================================