1:0d98623: /**
1:0d98623:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d98623:  * contributor license agreements.  See the NOTICE file distributed with
1:0d98623:  * this work for additional information regarding copyright ownership.
1:0d98623:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d98623:  * (the "License"); you may not use this file except in compliance with
1:0d98623:  * the License.  You may obtain a copy of the License at
1:0d98623:  *
1:0d98623:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0d98623:  *
1:0d98623:  * Unless required by applicable law or agreed to in writing, software
1:0d98623:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0d98623:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d98623:  * See the License for the specific language governing permissions and
1:0d98623:  * limitations under the License.
1:0d98623:  */
1:0d98623: package org.apache.activemq.management;
4:0d98623: 
1:9a6d444: public class SizeStatisticImpl extends StatisticImpl {
1:9a6d444: 
1:0d98623:     private long count;
1:0d98623:     private long maxSize;
1:0d98623:     private long minSize;
1:0d98623:     private long totalSize;
1:0d98623:     private SizeStatisticImpl parent;
1:0d98623: 
1:0d98623:     public SizeStatisticImpl(String name, String description) {
1:0d98623:         this(name, "bytes", description);
1:0d98623:     }
1:0d98623: 
1:0d98623:     public SizeStatisticImpl(SizeStatisticImpl parent, String name, String description) {
1:0d98623:         this(name, description);
1:0d98623:         this.parent = parent;
1:0d98623:     }
1:0d98623: 
1:0d98623:     public SizeStatisticImpl(String name, String unit, String description) {
1:0d98623:         super(name, unit, description);
1:0d98623:     }
1:0d98623: 
1:9a6d444:     @Override
1:0d98623:     public synchronized void reset() {
1:9a6d444:         if (isDoReset()) {
1:0d98623:             super.reset();
1:0d98623:             count = 0;
1:0d98623:             maxSize = 0;
1:0d98623:             minSize = 0;
1:0d98623:             totalSize = 0;
1:0d98623:         }
1:0d98623:     }
1:0d98623: 
1:0d98623:     public synchronized long getCount() {
1:0d98623:         return count;
1:0d98623:     }
1:0d98623: 
1:0d98623:     public synchronized void addSize(long size) {
1:0d98623:         count++;
1:0d98623:         totalSize += size;
1:0d98623:         if (size > maxSize) {
1:0d98623:             maxSize = size;
1:0d98623:         }
1:0d98623:         if (size < minSize || minSize == 0) {
1:0d98623:             minSize = size;
1:0d98623:         }
1:0d98623:         updateSampleTime();
1:0d98623:         if (parent != null) {
1:0d98623:             parent.addSize(size);
1:0d98623:         }
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:785b16b:      * Reset the total size to the new value
1:785b16b:      *
1:785b16b:      * @param size
1:785b16b:      */
1:785b16b:     public synchronized void setTotalSize(long size) {
1:785b16b:         count++;
1:785b16b:         totalSize = size;
1:785b16b:         if (size > maxSize) {
1:785b16b:             maxSize = size;
1:785b16b:         }
1:785b16b:         if (size < minSize || minSize == 0) {
1:785b16b:             minSize = size;
1:785b16b:         }
1:785b16b:         updateSampleTime();
1:785b16b:     }
1:785b16b: 
1:785b16b:     /**
1:9a6d444:      * @return the maximum size of any step
1:0d98623:      */
1:0d98623:     public long getMaxSize() {
1:0d98623:         return maxSize;
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:9a6d444:      * @return the minimum size of any step
1:0d98623:      */
1:0d98623:     public synchronized long getMinSize() {
1:0d98623:         return minSize;
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:9a6d444:      * @return the total size of all the steps added together
1:0d98623:      */
1:0d98623:     public synchronized long getTotalSize() {
1:0d98623:         return totalSize;
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:9a6d444:      * @return the average size calculated by dividing the total size by the
1:9a6d444:      *         number of counts
1:0d98623:      */
1:0d98623:     public synchronized double getAverageSize() {
1:0d98623:         if (count == 0) {
1:0d98623:             return 0;
1:0d98623:         }
1:0d98623:         double d = totalSize;
1:0d98623:         return d / count;
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:9a6d444:      * @return the average size calculated by dividing the total size by the
1:9a6d444:      *         number of counts but excluding the minimum and maximum sizes.
1:0d98623:      */
1:0d98623:     public synchronized double getAverageSizeExcludingMinMax() {
1:0d98623:         if (count <= 2) {
1:0d98623:             return 0;
1:0d98623:         }
1:0d98623:         double d = totalSize - minSize - maxSize;
1:0d98623:         return d / (count - 2);
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:0d98623:      * @return the average number of steps per second
1:0d98623:      */
1:0d98623:     public double getAveragePerSecond() {
1:0d98623:         double d = 1000;
1:0d98623:         double averageSize = getAverageSize();
1:0d98623:         if (averageSize == 0) {
1:0d98623:             return 0;
1:0d98623:         }
1:0d98623:         return d / averageSize;
1:0d98623:     }
1:0d98623: 
1:0d98623:     /**
1:9a6d444:      * @return the average number of steps per second excluding the min & max
1:9a6d444:      *         values
1:0d98623:      */
1:0d98623:     public double getAveragePerSecondExcludingMinMax() {
1:0d98623:         double d = 1000;
1:0d98623:         double average = getAverageSizeExcludingMinMax();
1:0d98623:         if (average == 0) {
1:0d98623:             return 0;
1:0d98623:         }
1:0d98623:         return d / average;
1:0d98623:     }
1:0d98623: 
1:0d98623:     public SizeStatisticImpl getParent() {
1:0d98623:         return parent;
1:0d98623:     }
1:0d98623: 
1:0d98623:     public void setParent(SizeStatisticImpl parent) {
1:0d98623:         this.parent = parent;
1:0d98623:     }
1:0d98623: 
1:9a6d444:     @Override
1:0d98623:     protected synchronized void appendFieldDescription(StringBuffer buffer) {
1:0d98623:         buffer.append(" count: ");
1:0d98623:         buffer.append(Long.toString(count));
1:0d98623:         buffer.append(" maxSize: ");
1:0d98623:         buffer.append(Long.toString(maxSize));
1:0d98623:         buffer.append(" minSize: ");
1:0d98623:         buffer.append(Long.toString(minSize));
1:0d98623:         buffer.append(" totalSize: ");
1:0d98623:         buffer.append(Long.toString(totalSize));
1:489f929:         buffer.append(" averageSize: ");
1:0d98623:         buffer.append(Double.toString(getAverageSize()));
1:0d98623:         buffer.append(" averageTimeExMinMax: ");
1:0d98623:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:0d98623:         buffer.append(" averagePerSecond: ");
1:0d98623:         buffer.append(Double.toString(getAveragePerSecond()));
1:0d98623:         buffer.append(" averagePerSecondExMinMax: ");
1:0d98623:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:0d98623:         super.appendFieldDescription(buffer);
1:0d98623:     }
1:0d98623: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1:      * Reset the total size to the new value
1:      *
1:      * @param size
1:      */
1:     public synchronized void setTotalSize(long size) {
1:         count++;
1:         totalSize = size;
1:         if (size > maxSize) {
1:             maxSize = size;
1:         }
1:         if (size < minSize || minSize == 0) {
1:             minSize = size;
1:         }
1:         updateSampleTime();
1:     }
1: 
1:     /**
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9a6d444
/////////////////////////////////////////////////////////////////////////
1: public class SizeStatisticImpl extends StatisticImpl {
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         if (isDoReset()) {
/////////////////////////////////////////////////////////////////////////
1:      * @return the maximum size of any step
1:      * @return the minimum size of any step
1:      * @return the total size of all the steps added together
1:      * @return the average size calculated by dividing the total size by the
1:      *         number of counts
/////////////////////////////////////////////////////////////////////////
1:      * @return the average size calculated by dividing the total size by the
1:      *         number of counts but excluding the minimum and maximum sizes.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @return the average number of steps per second excluding the min & max
1:      *         values
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
author:rajdavies
-------------------------------------------------------------------------------
commit:489f929
/////////////////////////////////////////////////////////////////////////
1:         buffer.append(" averageSize: ");
author:Robert Davies
-------------------------------------------------------------------------------
commit:0d98623
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.management;
1: 
0: public class SizeStatisticImpl extends StatisticImpl{
1:     private long count;
1:     private long maxSize;
1:     private long minSize;
1:     private long totalSize;
1:     private SizeStatisticImpl parent;
1: 
1:     public SizeStatisticImpl(String name, String description) {
1:         this(name, "bytes", description);
1:     }
1: 
1:     public SizeStatisticImpl(SizeStatisticImpl parent, String name, String description) {
1:         this(name, description);
1:         this.parent = parent;
1:     }
1: 
1:     public SizeStatisticImpl(String name, String unit, String description) {
1:         super(name, unit, description);
1:     }
1: 
1:     public synchronized void reset() {
0:         if(isDoReset()) {
1:             super.reset();
1:             count = 0;
1:             maxSize = 0;
1:             minSize = 0;
1:             totalSize = 0;
1:         }
1:     }
1: 
1:     public synchronized long getCount() {
1:         return count;
1:     }
1: 
1:     public synchronized void addSize(long size) {
1:         count++;
1:         totalSize += size;
1:         if (size > maxSize) {
1:             maxSize = size;
1:         }
1:         if (size < minSize || minSize == 0) {
1:             minSize = size;
1:         }
1:         updateSampleTime();
1:         if (parent != null) {
1:             parent.addSize(size);
1:         }
1:     }
1: 
1:     /**
0:      * @return the maximum time of any step
1:      */
1:     public long getMaxSize() {
1:         return maxSize;
1:     }
1: 
1:     /**
0:      * @return the minimum time of any step
1:      */
1:     public synchronized long getMinSize() {
1:         return minSize;
1:     }
1: 
1:     /**
0:      * @return the total time of all the steps added together
1:      */
1:     public synchronized long getTotalSize() {
1:         return totalSize;
1:     }
1: 
1:     /**
0:      * @return the average time calculated by dividing the
0:      *         total time by the number of counts
1:      */
1:     public synchronized double getAverageSize() {
1:         if (count == 0) {
1:             return 0;
1:         }
1:         double d = totalSize;
1:         return d / count;
1:     }
1: 
1: 
1:     /**
0:      * @return the average time calculated by dividing the
0:      *         total time by the number of counts but excluding the
0:      *         minimum and maximum times.
1:      */
1:     public synchronized double getAverageSizeExcludingMinMax() {
1:         if (count <= 2) {
1:             return 0;
1:         }
1:         double d = totalSize - minSize - maxSize;
1:         return d / (count - 2);
1:     }
1: 
1: 
1:     /**
1:      * @return the average number of steps per second
1:      */
1:     public double getAveragePerSecond() {
1:         double d = 1000;
1:         double averageSize = getAverageSize();
1:         if (averageSize == 0) {
1:             return 0;
1:         }
1:         return d / averageSize;
1:     }
1: 
1:     /**
0:      * @return the average number of steps per second excluding the min & max values
1:      */
1:     public double getAveragePerSecondExcludingMinMax() {
1:         double d = 1000;
1:         double average = getAverageSizeExcludingMinMax();
1:         if (average == 0) {
1:             return 0;
1:         }
1:         return d / average;
1:     }
1: 
1:     public SizeStatisticImpl getParent() {
1:         return parent;
1:     }
1: 
1:     public void setParent(SizeStatisticImpl parent) {
1:         this.parent = parent;
1:     }
1: 
1:     protected synchronized void appendFieldDescription(StringBuffer buffer) {
1:         buffer.append(" count: ");
1:         buffer.append(Long.toString(count));
1:         buffer.append(" maxSize: ");
1:         buffer.append(Long.toString(maxSize));
1:         buffer.append(" minSize: ");
1:         buffer.append(Long.toString(minSize));
1:         buffer.append(" totalSize: ");
1:         buffer.append(Long.toString(totalSize));
0:         buffer.append(" averageTime: ");
1:         buffer.append(Double.toString(getAverageSize()));
1:         buffer.append(" averageTimeExMinMax: ");
1:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:         buffer.append(" averagePerSecond: ");
1:         buffer.append(Double.toString(getAveragePerSecond()));
1:         buffer.append(" averagePerSecondExMinMax: ");
1:         buffer.append(Double.toString(getAveragePerSecondExcludingMinMax()));
1:         super.appendFieldDescription(buffer);
1:     }
1: 
1: }
============================================================================