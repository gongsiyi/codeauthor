1:a2cb4a8: /**
1:a2cb4a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a2cb4a8:  * contributor license agreements.  See the NOTICE file distributed with
1:a2cb4a8:  * this work for additional information regarding copyright ownership.
1:a2cb4a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a2cb4a8:  * (the "License"); you may not use this file except in compliance with
1:a2cb4a8:  * the License.  You may obtain a copy of the License at
1:a2cb4a8:  *
1:a2cb4a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a2cb4a8:  *
1:a2cb4a8:  * Unless required by applicable law or agreed to in writing, software
1:a2cb4a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a2cb4a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a2cb4a8:  * See the License for the specific language governing permissions and
1:a2cb4a8:  * limitations under the License.
1:a2cb4a8:  */
1:a2cb4a8: package org.apache.activemq.bugs;
2:a2cb4a8: 
1:a2cb4a8: import static org.junit.Assert.fail;
1:a2cb4a8: 
1:a2cb4a8: import javax.jms.JMSException;
1:a2cb4a8: import javax.jms.Session;
1:a2cb4a8: 
1:a2cb4a8: import org.apache.activemq.ActiveMQConnection;
1:a2cb4a8: import org.apache.activemq.ActiveMQConnectionFactory;
1:a2cb4a8: import org.apache.activemq.broker.BrokerPlugin;
1:a2cb4a8: import org.apache.activemq.broker.BrokerPluginSupport;
1:a2cb4a8: import org.apache.activemq.broker.BrokerService;
1:a2cb4a8: import org.apache.activemq.broker.ConnectionContext;
1:a2cb4a8: import org.apache.activemq.command.ActiveMQQueue;
1:a2cb4a8: import org.apache.activemq.command.ProducerInfo;
1:a2cb4a8: import org.junit.After;
1:a2cb4a8: import org.junit.Before;
1:a2cb4a8: import org.junit.Test;
1:a2cb4a8: 
1:a2cb4a8: public class AMQ4213Test {
1:a2cb4a8: 
1:a2cb4a8:     private static BrokerService brokerService;
1:a2cb4a8:     private static String TEST_QUEUE = "testQueue";
1:a2cb4a8:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1:a2cb4a8: 
1:5219fa1:     @SuppressWarnings("unchecked")
1:a2cb4a8:     @Before
1:a2cb4a8:     public void setUp() throws Exception {
1:a2cb4a8:         brokerService = new BrokerService();
1:a2cb4a8:         brokerService.setPersistent(false);
1:6380bf3:         brokerService.setUseJmx(false);
1:6380bf3:         brokerService.setAdvisorySupport(false);
1:a2cb4a8: 
1:a2cb4a8:         brokerService.setPlugins(new BrokerPlugin[]{
1:a2cb4a8:             new BrokerPluginSupport() {
1:a2cb4a8: 
1:a2cb4a8:                 @Override
1:a2cb4a8:                 public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:6380bf3:                     throw new javax.jms.JMSSecurityException(brokerService.getVmConnectorURI().toString());
1:a2cb4a8:                 }
1:a2cb4a8:             }
1:a2cb4a8:         });
1:a2cb4a8: 
1:a2cb4a8:         brokerService.start();
1:a2cb4a8:         brokerService.waitUntilStarted();
1:a2cb4a8:     }
1:a2cb4a8: 
1:a2cb4a8:     @After
1:a2cb4a8:     public void tearDown() throws Exception {
1:a2cb4a8:         brokerService.stop();
1:a2cb4a8:         brokerService.waitUntilStopped();
1:a2cb4a8:     }
1:a2cb4a8: 
1:6380bf3:     @Test(timeout = 30000)
1:a2cb4a8:     public void testExceptionOnProducerCreateThrows() throws Exception {
1:6380bf3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
1:a2cb4a8:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:a2cb4a8: 
1:a2cb4a8:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:a2cb4a8: 
1:a2cb4a8:         connection.start();
1:a2cb4a8: 
1:a2cb4a8:         try {
1:a2cb4a8:             session.createProducer(queue);
1:a2cb4a8:             fail("Should not be able to create this producer.");
1:a2cb4a8:         } catch (JMSException ex) {
1:a2cb4a8:         }
1:a2cb4a8:     }
1:a2cb4a8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6380bf3
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:                     throw new javax.jms.JMSSecurityException(brokerService.getVmConnectorURI().toString());
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 30000)
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
commit:ef24cc9
commit:a2cb4a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ4213Test {
1: 
1:     private static BrokerService brokerService;
0:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:     private static String TEST_QUEUE = "testQueue";
1:     private static ActiveMQQueue queue = new ActiveMQQueue(TEST_QUEUE);
1: 
0:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
0:         brokerService.setUseJmx(true);
0:         brokerService.setDeleteAllMessagesOnStartup(true);
0:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1: 
1:         brokerService.setPlugins(new BrokerPlugin[]{
1:             new BrokerPluginSupport() {
1: 
1:                 @Override
1:                 public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:                     throw new javax.jms.JMSSecurityException(connectionUri);
1:                 }
1:             }
1:         });
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
0:     @Test
1:     public void testExceptionOnProducerCreateThrows() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         connection.start();
1: 
1:         try {
1:             session.createProducer(queue);
1:             fail("Should not be able to create this producer.");
1:         } catch (JMSException ex) {
1:         }
1:     }
1: }
============================================================================