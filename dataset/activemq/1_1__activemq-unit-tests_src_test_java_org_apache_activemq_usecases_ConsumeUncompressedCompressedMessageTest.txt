1:56f8e36: /**
1:56f8e36:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:56f8e36:  * contributor license agreements.  See the NOTICE file distributed with
1:56f8e36:  * this work for additional information regarding copyright ownership.
1:56f8e36:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:56f8e36:  * (the "License"); you may not use this file except in compliance with
1:56f8e36:  * the License.  You may obtain a copy of the License at
1:56f8e36:  *
1:56f8e36:  *      http://www.apache.org/licenses/LICENSE-2.0
1:56f8e36:  *
1:56f8e36:  * Unless required by applicable law or agreed to in writing, software
1:56f8e36:  * distributed under the License is distributed on an "AS IS" BASIS,
1:56f8e36:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:56f8e36:  * See the License for the specific language governing permissions and
1:56f8e36:  * limitations under the License.
1:56f8e36:  */
1:56f8e36: 
1:56f8e36: package org.apache.activemq.usecases;
1:56f8e36: 
1:d0d7231: import static org.junit.Assert.assertEquals;
1:d0d7231: import static org.junit.Assert.assertNotNull;
1:d0d7231: import static org.junit.Assert.assertTrue;
1:d0d7231: import static org.junit.Assert.fail;
1:56f8e36: 
1:56f8e36: import java.net.URI;
1:d0d7231: 
1:56f8e36: import javax.jms.JMSException;
1:56f8e36: import javax.jms.MessageConsumer;
1:56f8e36: import javax.jms.MessageProducer;
1:56f8e36: import javax.jms.Queue;
1:56f8e36: import javax.jms.Session;
1:56f8e36: import javax.jms.TextMessage;
1:56f8e36: import javax.management.MalformedObjectNameException;
1:56f8e36: import javax.management.ObjectName;
1:56f8e36: import javax.management.openmbean.CompositeData;
1:56f8e36: 
1:56f8e36: import org.apache.activemq.ActiveMQConnection;
1:56f8e36: import org.apache.activemq.ActiveMQConnectionFactory;
1:56f8e36: import org.apache.activemq.broker.BrokerService;
1:56f8e36: import org.apache.activemq.broker.TransportConnector;
1:56f8e36: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:56f8e36: import org.apache.activemq.command.ActiveMQMessage;
1:56f8e36: import org.junit.After;
1:56f8e36: import org.junit.Before;
1:56f8e36: import org.junit.Test;
1:56f8e36: import org.slf4j.Logger;
1:56f8e36: import org.slf4j.LoggerFactory;
1:56f8e36: 
1:56f8e36: public class ConsumeUncompressedCompressedMessageTest {
1:56f8e36: 
1:56f8e36:     private static final Logger LOG = LoggerFactory.getLogger(ConsumeUncompressedCompressedMessageTest.class);
1:56f8e36: 
1:56f8e36:     private BrokerService broker;
1:56f8e36:     private URI tcpUri;
1:56f8e36: 
1:56f8e36:     ActiveMQConnectionFactory factory;
1:56f8e36:     ActiveMQConnection connection;
1:56f8e36:     Session session;
1:56f8e36:     Queue queue;
1:56f8e36: 
1:56f8e36:     @Before
1:56f8e36:     public void setUp() throws Exception {
1:56f8e36:         broker = createBroker();
1:56f8e36:         broker.start();
1:56f8e36:         broker.waitUntilStarted();
1:56f8e36: 
1:56f8e36:         factory = new ActiveMQConnectionFactory(tcpUri);
1:56f8e36:         factory.setUseCompression(true);
1:56f8e36: 
1:56f8e36:         connection = (ActiveMQConnection) factory.createConnection();
1:56f8e36:         connection.start();
1:56f8e36:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:56f8e36:         queue = session.createQueue("CompressionTestQueue");
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     @After
1:56f8e36:     public void tearDown() throws Exception {
1:56f8e36: 
1:56f8e36:         if(connection != null) {
1:56f8e36:             connection.close();
1:56f8e36:         }
1:56f8e36: 
1:56f8e36:         broker.stop();
1:56f8e36:         broker.waitUntilStopped();
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     protected BrokerService createBroker() throws Exception {
1:56f8e36:         return createBroker(true);
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     protected BrokerService createBroker(boolean delete) throws Exception {
1:56f8e36:         BrokerService answer = new BrokerService();
1:56f8e36:         answer.setPersistent(false);
1:56f8e36:         answer.setDeleteAllMessagesOnStartup(true);
1:56f8e36:         answer.setSchedulerSupport(false);
1:56f8e36:         answer.setUseJmx(true);
1:56f8e36:         TransportConnector connector = answer.addConnector("tcp://localhost:0");
1:56f8e36:         tcpUri = connector.getConnectUri();
1:56f8e36:         return answer;
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     @Test
1:56f8e36:     public void testBrowseAndReceiveCompressedMessages() throws Exception {
1:56f8e36: 
1:d0d7231:         assertTrue(connection.isUseCompression());
1:56f8e36: 
1:56f8e36:         createProducerAndSendMessages(1);
1:56f8e36: 
1:56f8e36:         QueueViewMBean queueView = getProxyToQueueViewMBean();
1:56f8e36: 
1:56f8e36:         assertNotNull(queueView);
1:56f8e36: 
1:56f8e36:         CompositeData[] compdatalist = queueView.browse();
1:56f8e36:         if (compdatalist.length == 0) {
1:56f8e36:             fail("There is no message in the queue:");
1:56f8e36:         }
1:56f8e36: 
1:56f8e36:         CompositeData cdata = compdatalist[0];
1:56f8e36: 
1:56f8e36:         assertComplexData(0, cdata, "Text", "Test Text Message: " + 0);
1:56f8e36: 
1:56f8e36:         assertMessageAreCorrect(1);
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     @Test
1:56f8e36:     public void testReceiveAndResendWithCompressionOff() throws Exception {
1:56f8e36: 
1:56f8e36:         assertTrue(connection.isUseCompression());
1:56f8e36: 
1:56f8e36:         createProducerAndSendMessages(1);
1:56f8e36: 
1:56f8e36:         MessageConsumer consumer = session.createConsumer(queue);
1:56f8e36:         TextMessage message = (TextMessage) consumer.receive(5000);
1:56f8e36: 
1:56f8e36:         assertTrue(((ActiveMQMessage) message).isCompressed());
1:56f8e36: 
1:56f8e36:         LOG.debug("Received Message with Text = " + message.getText());
1:56f8e36: 
1:56f8e36:         connection.setUseCompression(false);
1:56f8e36: 
1:56f8e36:         MessageProducer producer = session.createProducer(queue);
1:56f8e36:         producer.send(message);
1:56f8e36:         producer.close();
1:56f8e36: 
1:56f8e36:         message = (TextMessage) consumer.receive(5000);
1:56f8e36: 
1:56f8e36:         LOG.debug("Received Message with Text = " + message.getText());
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     protected void assertComplexData(int messageIndex, CompositeData cdata, String name, Object expected) {
1:56f8e36:         Object value = cdata.get(name);
1:56f8e36:         assertEquals("Message " + messageIndex + " CData field: " + name, expected, value);
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:56f8e36:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:56f8e36:         MessageProducer producer = session.createProducer(queue);
1:56f8e36:         for (int i = 0; i < numToSend; i++) {
1:56f8e36:             TextMessage message = session.createTextMessage("Test Text Message: " + i);
1:56f8e36:             if (i  != 0 && i % 10000 == 0) {
1:56f8e36:                 LOG.info("sent: " + i);
1:56f8e36:             }
1:56f8e36:             producer.send(message);
1:56f8e36:         }
1:56f8e36:         producer.close();
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     private QueueViewMBean getProxyToQueueViewMBean()
1:56f8e36:             throws MalformedObjectNameException, JMSException {
1:56f8e36:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
1:d0d7231:                 + ":destinationType=Queue,destinationName=" + queue.getQueueName()
1:d0d7231:                 + ",type=Broker,brokerName=localhost");
1:56f8e36:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:56f8e36:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class,
1:56f8e36:                         true);
1:56f8e36:         return proxy;
1:56f8e36:     }
1:56f8e36: 
1:56f8e36:     private void assertMessageAreCorrect(int numToReceive) throws Exception {
1:56f8e36:         MessageConsumer consumer = session.createConsumer(queue);
1:56f8e36: 
1:56f8e36:         try{
1:56f8e36: 
1:56f8e36:             for (int i = 0; i < numToReceive; ++i) {
1:56f8e36:                 TextMessage message = (TextMessage) consumer.receive(5000);
1:56f8e36:                 assertNotNull(message);
1:56f8e36:                 assertEquals("Test Text Message: " + i, message.getText());
1:56f8e36:             }
1:56f8e36: 
1:56f8e36:         } finally {
1:56f8e36:             consumer.close();
1:56f8e36:         }
1:56f8e36:     }
1:56f8e36: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:d0d7231
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(connection.isUseCompression());
/////////////////////////////////////////////////////////////////////////
1:                 + ":destinationType=Queue,destinationName=" + queue.getQueueName()
1:                 + ",type=Broker,brokerName=localhost");
commit:56f8e36
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
0: import static org.junit.Assert.*;
1: 
1: import java.net.URI;
0: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ConsumeUncompressedCompressedMessageTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumeUncompressedCompressedMessageTest.class);
1: 
1:     private BrokerService broker;
1:     private URI tcpUri;
1: 
1:     ActiveMQConnectionFactory factory;
1:     ActiveMQConnection connection;
1:     Session session;
1:     Queue queue;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         factory = new ActiveMQConnectionFactory(tcpUri);
1:         factory.setUseCompression(true);
1: 
1:         connection = (ActiveMQConnection) factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         queue = session.createQueue("CompressionTestQueue");
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:         if(connection != null) {
1:             connection.close();
1:         }
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker(true);
1:     }
1: 
1:     protected BrokerService createBroker(boolean delete) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.setSchedulerSupport(false);
1:         answer.setUseJmx(true);
1:         TransportConnector connector = answer.addConnector("tcp://localhost:0");
1:         tcpUri = connector.getConnectUri();
1:         return answer;
1:     }
1: 
1:     @Test
1:     public void testBrowseAndReceiveCompressedMessages() throws Exception {
1: 
0:         assertTrue(((ActiveMQConnection) connection).isUseCompression());
1: 
1:         createProducerAndSendMessages(1);
1: 
1:         QueueViewMBean queueView = getProxyToQueueViewMBean();
1: 
1:         assertNotNull(queueView);
1: 
1:         CompositeData[] compdatalist = queueView.browse();
1:         if (compdatalist.length == 0) {
1:             fail("There is no message in the queue:");
1:         }
1: 
1:         CompositeData cdata = compdatalist[0];
1: 
1:         assertComplexData(0, cdata, "Text", "Test Text Message: " + 0);
1: 
1:         assertMessageAreCorrect(1);
1:     }
1: 
1:     @Test
1:     public void testReceiveAndResendWithCompressionOff() throws Exception {
1: 
1:         assertTrue(connection.isUseCompression());
1: 
1:         createProducerAndSendMessages(1);
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         TextMessage message = (TextMessage) consumer.receive(5000);
1: 
1:         assertTrue(((ActiveMQMessage) message).isCompressed());
1: 
1:         LOG.debug("Received Message with Text = " + message.getText());
1: 
1:         connection.setUseCompression(false);
1: 
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(message);
1:         producer.close();
1: 
1:         message = (TextMessage) consumer.receive(5000);
1: 
1:         LOG.debug("Received Message with Text = " + message.getText());
1:     }
1: 
1:     protected void assertComplexData(int messageIndex, CompositeData cdata, String name, Object expected) {
1:         Object value = cdata.get(name);
1:         assertEquals("Message " + messageIndex + " CData field: " + name, expected, value);
1:     }
1: 
1:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1:         for (int i = 0; i < numToSend; i++) {
1:             TextMessage message = session.createTextMessage("Test Text Message: " + i);
1:             if (i  != 0 && i % 10000 == 0) {
1:                 LOG.info("sent: " + i);
1:             }
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean()
1:             throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + queue.getQueueName()
0:                 + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class,
1:                         true);
1:         return proxy;
1:     }
1: 
1:     private void assertMessageAreCorrect(int numToReceive) throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         try{
1: 
1:             for (int i = 0; i < numToReceive; ++i) {
1:                 TextMessage message = (TextMessage) consumer.receive(5000);
1:                 assertNotNull(message);
1:                 assertEquals("Test Text Message: " + i, message.getText());
1:             }
1: 
1:         } finally {
1:             consumer.close();
1:         }
1:     }
1: }
============================================================================