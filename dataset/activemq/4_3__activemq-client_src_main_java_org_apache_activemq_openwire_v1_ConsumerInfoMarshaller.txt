1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:33b73ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:5be5a62:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:5be5a62: 
1:d29ca2a: package org.apache.activemq.openwire.v1;
1:446629b: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:d29ca2a: import java.io.IOException;
9:d29ca2a: 
1:74a7a8b: import org.apache.activemq.command.ConsumerInfo;
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:d29ca2a: 
1:90e21b4: /**
1:79d2868:  * Marshalling code for Open Wire Format for ConsumerInfoMarshaller
1:f812e34:  * 
1:f812e34:  * 
1:f812e34:  * NOTE!: This file is auto generated - do not modify! if you need to make a
1:f812e34:  * change, please see the modify the groovy scripts in the under src/gram/script
1:f812e34:  * and then use maven openwire:generate to regenerate this file.
1:b0c2a40:  * 
1:f812e34:  * 
2:d29ca2a:  */
1:d29ca2a: public class ConsumerInfoMarshaller extends BaseCommandMarshaller {
1:d29ca2a: 
3:d29ca2a:     /**
1:d29ca2a:      * Return the type of Data Structure we marshal
1:f812e34:      * 
1:d29ca2a:      * @return short representation of the type data structure
1:d29ca2a:      */
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return ConsumerInfo.DATA_STRUCTURE_TYPE;
2:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * @return a new object instance
1:d29ca2a:      */
1:d29ca2a:     public DataStructure createObject() {
1:d29ca2a:         return new ConsumerInfo();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Un-marshal an object instance from the data input stream
1:f812e34:      * 
1:d29ca2a:      * @param o the object to un-marshal
1:d29ca2a:      * @param dataIn the data input stream to build the object from
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:f812e34:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs)
1:f812e34:         throws IOException {
1:33b73ac:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:d29ca2a: 
1:d29ca2a:         ConsumerInfo info = (ConsumerInfo)o;
1:f812e34:         info.setConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat,
1:f812e34:                                                                                              dataIn, bs));
1:d29ca2a:         info.setBrowser(bs.readBoolean());
1:f812e34:         info
1:f812e34:             .setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(
1:f812e34:                                                                                                        wireFormat,
1:f812e34:                                                                                                        dataIn,
1:f812e34:                                                                                                        bs));
1:d29ca2a:         info.setPrefetchSize(dataIn.readInt());
1:e0a2b8e:         info.setMaximumPendingMessageLimit(dataIn.readInt());
1:d29ca2a:         info.setDispatchAsync(bs.readBoolean());
1:33b73ac:         info.setSelector(tightUnmarshalString(dataIn, bs));
1:333158a:         info.setSubscriptionName(tightUnmarshalString(dataIn, bs));
1:d29ca2a:         info.setNoLocal(bs.readBoolean());
1:d29ca2a:         info.setExclusive(bs.readBoolean());
1:d29ca2a:         info.setRetroactive(bs.readBoolean());
1:d29ca2a:         info.setPriority(dataIn.readByte());
1:d29ca2a: 
1:79d2868:         if (bs.readBoolean()) {
1:d29ca2a:             short size = dataIn.readShort();
1:446629b:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:f812e34:             for (int i = 0; i < size; i++) {
1:f812e34:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat,
1:f812e34:                                                                                            dataIn, bs);
1:d29ca2a:             }
1:d29ca2a:             info.setBrokerPath(value);
1:f812e34:         } else {
1:d29ca2a:             info.setBrokerPath(null);
1:d29ca2a:         }
1:f812e34:         info
1:f812e34:             .setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression)tightUnmarsalNestedObject(
1:f812e34:                                                                                                             wireFormat,
1:f812e34:                                                                                                             dataIn,
1:f812e34:                                                                                                             bs));
1:d29ca2a:         info.setNetworkSubscription(bs.readBoolean());
1:ef0734b:         info.setOptimizedAcknowledge(bs.readBoolean());
1:f1a0614:         info.setNoRangeAcks(bs.readBoolean());
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Write the booleans that this object uses to a BooleanStream
1:d29ca2a:      */
1:33b73ac:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:d29ca2a: 
1:d29ca2a:         ConsumerInfo info = (ConsumerInfo)o;
1:d29ca2a: 
1:33b73ac:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
1:cd0fb61:         bs.writeBoolean(info.isBrowser());
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:cd0fb61:         bs.writeBoolean(info.isDispatchAsync());
1:cd0fb61:         rc += tightMarshalString1(info.getSelector(), bs);
1:333158a:         rc += tightMarshalString1(info.getSubscriptionName(), bs);
1:cd0fb61:         bs.writeBoolean(info.isNoLocal());
1:cd0fb61:         bs.writeBoolean(info.isExclusive());
1:cd0fb61:         bs.writeBoolean(info.isRetroactive());
1:33b73ac:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:cd0fb61:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getAdditionalPredicate(), bs);
1:cd0fb61:         bs.writeBoolean(info.isNetworkSubscription());
1:ef0734b:         bs.writeBoolean(info.isOptimizedAcknowledge());
1:f1a0614:         bs.writeBoolean(info.isNoRangeAcks());
1:d29ca2a: 
1:e0a2b8e:         return rc + 9;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Write a object instance to data output stream
1:f812e34:      * 
1:d29ca2a:      * @param o the instance to be marshaled
1:d29ca2a:      * @param dataOut the output stream
1:d29ca2a:      * @throws IOException thrown if an error occurs
1:d29ca2a:      */
1:f812e34:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs)
1:f812e34:         throws IOException {
1:33b73ac:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:33b73ac: 
1:d29ca2a:         ConsumerInfo info = (ConsumerInfo)o;
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:cd0fb61:         dataOut.writeInt(info.getPrefetchSize());
1:cd0fb61:         dataOut.writeInt(info.getMaximumPendingMessageLimit());
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         tightMarshalString2(info.getSelector(), dataOut, bs);
1:333158a:         tightMarshalString2(info.getSubscriptionName(), dataOut, bs);
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         dataOut.writeByte(info.getPriority());
1:cd0fb61:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:cd0fb61:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut, bs);
1:f1a0614:         bs.readBoolean();
1:cd0fb61:         bs.readBoolean();
6:33b73ac:         bs.readBoolean();
1:33b73ac: 
1:33b73ac:     }
1:33b73ac: 
1:33b73ac:     /**
1:33b73ac:      * Un-marshal an object instance from the data input stream
1:f812e34:      * 
1:33b73ac:      * @param o the object to un-marshal
1:33b73ac:      * @param dataIn the data input stream to build the object from
1:33b73ac:      * @throws IOException
1:33b73ac:      */
1:4821b9d:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:33b73ac:         super.looseUnmarshal(wireFormat, o, dataIn);
1:33b73ac: 
1:33b73ac:         ConsumerInfo info = (ConsumerInfo)o;
1:f812e34:         info.setConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat,
1:f812e34:                                                                                              dataIn));
1:33b73ac:         info.setBrowser(dataIn.readBoolean());
1:f812e34:         info
1:f812e34:             .setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(
1:f812e34:                                                                                                        wireFormat,
1:f812e34:                                                                                                        dataIn));
1:33b73ac:         info.setPrefetchSize(dataIn.readInt());
1:e0a2b8e:         info.setMaximumPendingMessageLimit(dataIn.readInt());
1:33b73ac:         info.setDispatchAsync(dataIn.readBoolean());
1:33b73ac:         info.setSelector(looseUnmarshalString(dataIn));
1:333158a:         info.setSubscriptionName(looseUnmarshalString(dataIn));
1:33b73ac:         info.setNoLocal(dataIn.readBoolean());
1:33b73ac:         info.setExclusive(dataIn.readBoolean());
1:33b73ac:         info.setRetroactive(dataIn.readBoolean());
1:33b73ac:         info.setPriority(dataIn.readByte());
1:33b73ac: 
1:33b73ac:         if (dataIn.readBoolean()) {
1:33b73ac:             short size = dataIn.readShort();
1:446629b:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:f812e34:             for (int i = 0; i < size; i++) {
1:f812e34:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:33b73ac:             }
1:33b73ac:             info.setBrokerPath(value);
1:f812e34:         } else {
1:33b73ac:             info.setBrokerPath(null);
1:33b73ac:         }
1:f812e34:         info
1:f812e34:             .setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression)looseUnmarsalNestedObject(
1:f812e34:                                                                                                             wireFormat,
1:f812e34:                                                                                                             dataIn));
1:33b73ac:         info.setNetworkSubscription(dataIn.readBoolean());
1:ef0734b:         info.setOptimizedAcknowledge(dataIn.readBoolean());
1:f1a0614:         info.setNoRangeAcks(dataIn.readBoolean());
1:33b73ac: 
1:33b73ac:     }
1:33b73ac: 
1:33b73ac:     /**
1:33b73ac:      * Write the booleans that this object uses to a BooleanStream
1:33b73ac:      */
1:4821b9d:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:33b73ac: 
1:33b73ac:         ConsumerInfo info = (ConsumerInfo)o;
1:33b73ac: 
1:33b73ac:         super.looseMarshal(wireFormat, o, dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isBrowser());
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:cd0fb61:         dataOut.writeInt(info.getPrefetchSize());
1:cd0fb61:         dataOut.writeInt(info.getMaximumPendingMessageLimit());
1:cd0fb61:         dataOut.writeBoolean(info.isDispatchAsync());
1:cd0fb61:         looseMarshalString(info.getSelector(), dataOut);
1:333158a:         looseMarshalString(info.getSubscriptionName(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isNoLocal());
1:cd0fb61:         dataOut.writeBoolean(info.isExclusive());
1:cd0fb61:         dataOut.writeBoolean(info.isRetroactive());
1:cd0fb61:         dataOut.writeByte(info.getPriority());
1:cd0fb61:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:cd0fb61:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isNetworkSubscription());
1:ef0734b:         dataOut.writeBoolean(info.isOptimizedAcknowledge());
1:f1a0614:         dataOut.writeBoolean(info.isNoRangeAcks());
1:d29ca2a: 
1:33b73ac:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * 
1:  * NOTE!: This file is auto generated - do not modify! if you need to make a
1:  * change, please see the modify the groovy scripts in the under src/gram/script
1:  * and then use maven openwire:generate to regenerate this file.
1:  * 
1:      * 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs)
1:         throws IOException {
1:         info.setConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat,
1:                                                                                              dataIn, bs));
1:         info
1:             .setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(
1:                                                                                                        wireFormat,
1:                                                                                                        dataIn,
1:                                                                                                        bs));
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat,
1:                                                                                            dataIn, bs);
1:         } else {
1:         info
1:             .setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression)tightUnmarsalNestedObject(
1:                                                                                                             wireFormat,
1:                                                                                                             dataIn,
1:                                                                                                             bs));
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         info.setConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat,
1:                                                                                              dataIn));
1:         info
1:             .setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(
1:                                                                                                        wireFormat,
1:                                                                                                        dataIn));
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:         } else {
1:         info
1:             .setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression)looseUnmarsalNestedObject(
1:                                                                                                             wireFormat,
1:                                                                                                             dataIn));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:333158a
/////////////////////////////////////////////////////////////////////////
1:         info.setSubscriptionName(tightUnmarshalString(dataIn, bs));
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalString1(info.getSubscriptionName(), bs);
/////////////////////////////////////////////////////////////////////////
1:         tightMarshalString2(info.getSubscriptionName(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
1:         info.setSubscriptionName(looseUnmarshalString(dataIn));
/////////////////////////////////////////////////////////////////////////
1:         looseMarshalString(info.getSubscriptionName(), dataOut);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f1a0614
/////////////////////////////////////////////////////////////////////////
1:         info.setNoRangeAcks(bs.readBoolean());
/////////////////////////////////////////////////////////////////////////
1:         bs.writeBoolean(info.isNoRangeAcks());
/////////////////////////////////////////////////////////////////////////
1:         bs.readBoolean();
/////////////////////////////////////////////////////////////////////////
1:         info.setNoRangeAcks(dataIn.readBoolean());
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(info.isNoRangeAcks());
commit:cd0fb61
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
1:         bs.writeBoolean(info.isBrowser());
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:         bs.writeBoolean(info.isDispatchAsync());
1:         rc += tightMarshalString1(info.getSelector(), bs);
0:         rc += tightMarshalString1(info.getSubcriptionName(), bs);
1:         bs.writeBoolean(info.isNoLocal());
1:         bs.writeBoolean(info.isExclusive());
1:         bs.writeBoolean(info.isRetroactive());
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getAdditionalPredicate(), bs);
1:         bs.writeBoolean(info.isNetworkSubscription());
/////////////////////////////////////////////////////////////////////////
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);
1:         bs.readBoolean();
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:         dataOut.writeInt(info.getPrefetchSize());
1:         dataOut.writeInt(info.getMaximumPendingMessageLimit());
1:         bs.readBoolean();
1:         tightMarshalString2(info.getSelector(), dataOut, bs);
0:         tightMarshalString2(info.getSubcriptionName(), dataOut, bs);
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         dataOut.writeByte(info.getPriority());
1:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut, bs);
1:         bs.readBoolean();
/////////////////////////////////////////////////////////////////////////
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);
1:         dataOut.writeBoolean(info.isBrowser());
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:         dataOut.writeInt(info.getPrefetchSize());
1:         dataOut.writeInt(info.getMaximumPendingMessageLimit());
1:         dataOut.writeBoolean(info.isDispatchAsync());
1:         looseMarshalString(info.getSelector(), dataOut);
0:         looseMarshalString(info.getSubcriptionName(), dataOut);
1:         dataOut.writeBoolean(info.isNoLocal());
1:         dataOut.writeBoolean(info.isExclusive());
1:         dataOut.writeBoolean(info.isRetroactive());
1:         dataOut.writeByte(info.getPriority());
1:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut);
1:         dataOut.writeBoolean(info.isNetworkSubscription());
commit:446629b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         info.setConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
/////////////////////////////////////////////////////////////////////////
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
0:         info.setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
/////////////////////////////////////////////////////////////////////////
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
/////////////////////////////////////////////////////////////////////////
0:     rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getAdditionalPredicate(), bs);
/////////////////////////////////////////////////////////////////////////
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
0:     tightMarshalNestedObject2(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
0:         info.setConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
/////////////////////////////////////////////////////////////////////////
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
0:         info.setAdditionalPredicate((org.apache.activemq.filter.BooleanExpression) looseUnmarsalNestedObject(wireFormat, dataIn));
/////////////////////////////////////////////////////////////////////////
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
/////////////////////////////////////////////////////////////////////////
0:     looseMarshalNestedObject(wireFormat, (DataStructure)info.getAdditionalPredicate(), dataOut);
commit:e0a2b8e
/////////////////////////////////////////////////////////////////////////
1:         info.setMaximumPendingMessageLimit(dataIn.readInt());
/////////////////////////////////////////////////////////////////////////
0:             bs.writeBoolean(info.isDispatchAsync());
/////////////////////////////////////////////////////////////////////////
1:         return rc + 9;
/////////////////////////////////////////////////////////////////////////
0:     dataOut.writeInt(info.getMaximumPendingMessageLimit());
/////////////////////////////////////////////////////////////////////////
1:         info.setMaximumPendingMessageLimit(dataIn.readInt());
/////////////////////////////////////////////////////////////////////////
0:     dataOut.writeInt(info.getMaximumPendingMessageLimit());
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
0:         info.setConsumerId((ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setSelector(tightUnmarshalString(dataIn, bs));
0:         info.setSubcriptionName(tightUnmarshalString(dataIn, bs));
/////////////////////////////////////////////////////////////////////////
0:                 value[i] = (BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
/////////////////////////////////////////////////////////////////////////
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getConsumerId(), bs);
0:     bs.writeBoolean(info.isBrowser());
0:     rc += tightMarshalCachedObject1(wireFormat, info.getDestination(), bs);
0:         bs.writeBoolean(info.isDispatchAsync());
0:     rc += tightMarshalString1(info.getSelector(), bs);
0:     rc += tightMarshalString1(info.getSubcriptionName(), bs);
0:     bs.writeBoolean(info.isNoLocal());
0:     bs.writeBoolean(info.isExclusive());
0:     bs.writeBoolean(info.isRetroactive());
1:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
0:     bs.writeBoolean(info.isNetworkSubscription());
0:         return rc + 5;
/////////////////////////////////////////////////////////////////////////
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getConsumerId(), dataOut, bs);
1:     bs.readBoolean();
0:     tightMarshalCachedObject2(wireFormat, info.getDestination(), dataOut, bs);
0:     dataOut.writeInt(info.getPrefetchSize());
1:     bs.readBoolean();
0:     tightMarshalString2(info.getSelector(), dataOut, bs);
0:     tightMarshalString2(info.getSubcriptionName(), dataOut, bs);
1:     bs.readBoolean();
1:     bs.readBoolean();
1:     bs.readBoolean();
0:     dataOut.writeByte(info.getPriority());
0:     tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:     bs.readBoolean();
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         ConsumerInfo info = (ConsumerInfo)o;
0:         info.setConsumerId((ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setBrowser(dataIn.readBoolean());
0:         info.setDestination((ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setPrefetchSize(dataIn.readInt());
1:         info.setDispatchAsync(dataIn.readBoolean());
1:         info.setSelector(looseUnmarshalString(dataIn));
0:         info.setSubcriptionName(looseUnmarshalString(dataIn));
1:         info.setNoLocal(dataIn.readBoolean());
1:         info.setExclusive(dataIn.readBoolean());
1:         info.setRetroactive(dataIn.readBoolean());
1:         info.setPriority(dataIn.readByte());
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
0:             BrokerId value[] = new BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setBrokerPath(value);
1:         }
0:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setNetworkSubscription(dataIn.readBoolean());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
1: 
1:         ConsumerInfo info = (ConsumerInfo)o;
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getConsumerId(), dataOut);
0:     dataOut.writeBoolean(info.isBrowser());
0:     looseMarshalCachedObject(wireFormat, info.getDestination(), dataOut);
0:     dataOut.writeInt(info.getPrefetchSize());
0:     dataOut.writeBoolean(info.isDispatchAsync());
0:     looseMarshalString(info.getSelector(), dataOut);
0:     looseMarshalString(info.getSubcriptionName(), dataOut);
0:     dataOut.writeBoolean(info.isNoLocal());
0:     dataOut.writeBoolean(info.isExclusive());
0:     dataOut.writeBoolean(info.isRetroactive());
0:     dataOut.writeByte(info.getPriority());
0:     looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
0:     dataOut.writeBoolean(info.isNetworkSubscription());
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:90e21b4
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> 
0:  * 
0:  * Copyright 2005 Hiram Chirino
0:  * Copyright 2005 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * 
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: import org.apache.activemq.command.*;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v1;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.openwire.*;
1: 
1: 
1: /**
0:  * Marshalling code for Open Wire Format for ConsumerInfo
0:  *
0:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
0:  *
0:  * @version $Revision$
1:  */
1: public class ConsumerInfoMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return ConsumerInfo.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new ConsumerInfo();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
0:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void unmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         super.unmarshal(wireFormat, o, dataIn, bs);
1: 
1:         ConsumerInfo info = (ConsumerInfo)o;
0:         info.setConsumerId((org.apache.activemq.command.ConsumerId) unmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setBrowser(bs.readBoolean());
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setPrefetchSize(dataIn.readInt());
1:         info.setDispatchAsync(bs.readBoolean());
0:         info.setSelector(readString(dataIn, bs));
0:         info.setSubcriptionName(readString(dataIn, bs));
1:         info.setNoLocal(bs.readBoolean());
1:         info.setExclusive(bs.readBoolean());
1:         info.setRetroactive(bs.readBoolean());
1:         info.setPriority(dataIn.readByte());
1:         
0: 		        if( bs.readBoolean() ) {
1: 		            short size = dataIn.readShort();
0: 		            org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0: 		            for( int i=0; i < size; i++ ) {
0: 		                value[i] = (org.apache.activemq.command.BrokerId)unmarsalNestedObject(wireFormat,dataIn, bs);
1: 		            }
1: 		            info.setBrokerPath(value);
0: 		        } else {
1: 		            info.setBrokerPath(null);
1: 		        }
1:         			
1:         info.setNetworkSubscription(bs.readBoolean());
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public int marshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         ConsumerInfo info = (ConsumerInfo)o;
1: 
0:         int rc = super.marshal1(wireFormat, o, bs);
0:         rc += marshal1CachedObject(wireFormat, info.getConsumerId(), bs);
0:         bs.writeBoolean(info.isBrowser());
0:         rc += marshal1CachedObject(wireFormat, info.getDestination(), bs);
1:         
0:         bs.writeBoolean(info.isDispatchAsync());
0:         rc += writeString(info.getSelector(), bs);
0:         rc += writeString(info.getSubcriptionName(), bs);
0:         bs.writeBoolean(info.isNoLocal());
0:         bs.writeBoolean(info.isExclusive());
0:         bs.writeBoolean(info.isRetroactive());
1:         
0:         rc += marshalObjectArray(wireFormat, info.getBrokerPath(), bs);
0:         bs.writeBoolean(info.isNetworkSubscription());
1: 
0:         return rc+5;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
0:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
0:     public void marshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         super.marshal2(wireFormat, o, dataOut, bs);
1: 
1:         ConsumerInfo info = (ConsumerInfo)o;
0:         marshal2CachedObject(wireFormat, info.getConsumerId(), dataOut, bs);
0:         bs.readBoolean();
0:         marshal2CachedObject(wireFormat, info.getDestination(), dataOut, bs);
0:         dataOut.writeInt(info.getPrefetchSize());
0:         bs.readBoolean();
0:         writeString(info.getSelector(), dataOut, bs);
0:         writeString(info.getSubcriptionName(), dataOut, bs);
0:         bs.readBoolean();
0:         bs.readBoolean();
0:         bs.readBoolean();
0:         dataOut.writeByte(info.getPriority());
0:         marshalObjectArray(wireFormat, info.getBrokerPath(), dataOut, bs);
0:         bs.readBoolean();
1: 
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
commit:ef0734b
/////////////////////////////////////////////////////////////////////////
1:         info.setOptimizedAcknowledge(bs.readBoolean());
/////////////////////////////////////////////////////////////////////////
1:         bs.writeBoolean(info.isOptimizedAcknowledge());
/////////////////////////////////////////////////////////////////////////
0:         bs.readBoolean();
/////////////////////////////////////////////////////////////////////////
1:         info.setOptimizedAcknowledge(dataIn.readBoolean());
/////////////////////////////////////////////////////////////////////////
1:         dataOut.writeBoolean(info.isOptimizedAcknowledge());
author:James Strachan
-------------------------------------------------------------------------------
commit:79d2868
/////////////////////////////////////////////////////////////////////////
1:  * Marshalling code for Open Wire Format for ConsumerInfoMarshaller
/////////////////////////////////////////////////////////////////////////
0:         info.setConsumerId((ConsumerId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
/////////////////////////////////////////////////////////////////////////
0: 
1:         if (bs.readBoolean()) {
0:             short size = dataIn.readShort();
0:             BrokerId value[] = new BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (BrokerId) unmarsalNestedObject(wireFormat,dataIn, bs);
0:             }
0:             info.setBrokerPath(value);
0:         }
0:         else {
0:             info.setBrokerPath(null);
0:         }
/////////////////////////////////////////////////////////////////////////
0:                 bs.writeBoolean(info.isDispatchAsync());
0:                 rc += marshalObjectArray(wireFormat, info.getBrokerPath(), bs);
0:         return rc + 2;
============================================================================