1:31c55f7: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
1:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
1:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.ws;
1:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.nio.ByteBuffer;
1:31c55f7: import java.security.cert.X509Certificate;
1:31c55f7: import java.util.Map;
1:31c55f7: import java.util.concurrent.CountDownLatch;
1:31c55f7: import java.util.concurrent.TimeUnit;
1:31c55f7: import java.util.concurrent.locks.ReentrantLock;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.broker.BrokerService;
1:31c55f7: import org.apache.activemq.broker.BrokerServiceAware;
1:31c55f7: import org.apache.activemq.transport.Transport;
1:31c55f7: import org.apache.activemq.transport.TransportSupport;
1:31c55f7: import org.apache.activemq.transport.ws.WSTransport.WSTransportSink;
1:31c55f7: import org.apache.activemq.util.IOExceptionSupport;
1:31c55f7: import org.apache.activemq.util.IntrospectionSupport;
1:31c55f7: import org.apache.activemq.util.ServiceStopper;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:31c55f7: import org.eclipse.jetty.websocket.api.Session;
1:31c55f7: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:31c55f7: import org.slf4j.Logger;
1:31c55f7: import org.slf4j.LoggerFactory;
1:31c55f7: 
1:31c55f7: /**
1:31c55f7:  * A proxy class that manages sending WebSocket events to the wrapped protocol level
1:31c55f7:  * WebSocket Transport.
1:31c55f7:  */
1:31c55f7: public final class WSTransportProxy extends TransportSupport implements Transport, WebSocketListener, BrokerServiceAware, WSTransportSink {
1:31c55f7: 
1:31c55f7:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportProxy.class);
1:31c55f7: 
1:31c55f7:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
1:31c55f7: 
1:31c55f7:     private final ReentrantLock protocolLock = new ReentrantLock();
1:31c55f7:     private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:31c55f7:     private final String remoteAddress;
1:31c55f7: 
1:31c55f7:     private final Transport transport;
1:31c55f7:     private final WSTransport wsTransport;
1:31c55f7:     private Session session;
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a WebSocket Transport Proxy instance that will pass
1:31c55f7:      * along WebSocket event to the underlying protocol level transport.
1:31c55f7:      *
1:31c55f7:      * @param remoteAddress
1:31c55f7:      *      the provided remote address to report being connected to.
1:31c55f7:      * @param transport
1:31c55f7:      *      The protocol level WebSocket Transport
1:31c55f7:      */
1:31c55f7:     public WSTransportProxy(String remoteAddress, Transport transport) {
1:31c55f7:         this.remoteAddress = remoteAddress;
1:31c55f7:         this.transport = transport;
1:31c55f7:         this.wsTransport = transport.narrow(WSTransport.class);
1:31c55f7: 
1:31c55f7:         if (wsTransport == null) {
1:31c55f7:             throw new IllegalArgumentException("Provided Transport does not contains a WSTransport implementation");
1:31c55f7:         } else {
1:31c55f7:             wsTransport.setTransportSink(this);
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * @return the sub-protocol of the proxied transport.
1:31c55f7:      */
1:31c55f7:     public String getSubProtocol() {
1:31c55f7:         return wsTransport.getSubProtocol();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Apply any configure Transport options on the wrapped Transport and its contained
1:31c55f7:      * wireFormat instance.
1:31c55f7:      */
1:31c55f7:     public void setTransportOptions(Map<String, Object> options) {
1:31c55f7:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1:31c55f7: 
1:31c55f7:         IntrospectionSupport.setProperties(transport, options);
1:31c55f7:         IntrospectionSupport.setProperties(transport.getWireFormat(), wireFormatOptions);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setBrokerService(BrokerService brokerService) {
1:31c55f7:         if (transport instanceof BrokerServiceAware) {
1:31c55f7:             ((BrokerServiceAware) transport).setBrokerService(brokerService);
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void oneway(Object command) throws IOException {
1:31c55f7:         protocolLock.lock();
1:31c55f7:         try {
1:31c55f7:             transport.oneway(command);
1:31c55f7:         } catch (Exception e) {
1:31c55f7:             onException(IOExceptionSupport.create(e));
1:31c55f7:         } finally {
1:31c55f7:             protocolLock.unlock();
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:31c55f7:         return transport.getPeerCertificates();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:31c55f7:         transport.setPeerCertificates(certificates);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public String getRemoteAddress() {
1:31c55f7:         return remoteAddress;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public WireFormat getWireFormat() {
1:31c55f7:         return transport.getWireFormat();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public int getReceiveCounter() {
1:31c55f7:         return transport.getReceiveCounter();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     protected void doStop(ServiceStopper stopper) throws Exception {
1:31c55f7:         transport.stop();
1:31c55f7:         if (session != null && session.isOpen()) {
1:31c55f7:             session.close();
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     protected void doStart() throws Exception {
1:2e49256:         transport.setTransportListener(getTransportListener());
1:31c55f7:         socketTransportStarted.countDown();
1:31c55f7: 
1:31c55f7:         transport.start();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- WebSocket methods being proxied to the WS Transport --------------//
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketBinary(byte[] payload, int offset, int length) {
1:31c55f7:         if (!transportStartedAtLeastOnce()) {
1:31c55f7:             LOG.debug("Waiting for WebSocket to be properly started...");
1:31c55f7:             try {
1:31c55f7:                 socketTransportStarted.await();
1:31c55f7:             } catch (InterruptedException e) {
1:31c55f7:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         protocolLock.lock();
1:31c55f7:         try {
1:31c55f7:             wsTransport.onWebSocketBinary(ByteBuffer.wrap(payload, offset, length));
1:31c55f7:         } catch (Exception e) {
1:31c55f7:             onException(IOExceptionSupport.create(e));
1:31c55f7:         } finally {
1:31c55f7:             protocolLock.unlock();
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketText(String data) {
1:31c55f7:         if (!transportStartedAtLeastOnce()) {
1:31c55f7:             LOG.debug("Waiting for WebSocket to be properly started...");
1:31c55f7:             try {
1:31c55f7:                 socketTransportStarted.await();
1:31c55f7:             } catch (InterruptedException e) {
1:31c55f7:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         protocolLock.lock();
1:31c55f7:         try {
1:31c55f7:             wsTransport.onWebSocketText(data);
1:31c55f7:         } catch (Exception e) {
1:31c55f7:             onException(IOExceptionSupport.create(e));
1:31c55f7:         } finally {
1:31c55f7:             protocolLock.unlock();
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketClose(int statusCode, String reason) {
1:31c55f7:         try {
1:31c55f7:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
1:31c55f7:                 LOG.debug("WebSocket closed: code[{}] message[{}]", statusCode, reason);
1:31c55f7:                 wsTransport.onWebSocketClosed();
1:31c55f7:             }
1:31c55f7:         } catch (Exception e) {
1:31c55f7:             LOG.debug("Failed to close WebSocket cleanly", e);
1:31c55f7:         } finally {
1:31c55f7:             if (protocolLock.isHeldByCurrentThread()) {
1:31c55f7:                 protocolLock.unlock();
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketConnect(Session session) {
1:31c55f7:         this.session = session;
1:2e2d5dd: 
1:2e2d5dd:         if (wsTransport.getMaxFrameSize() > 0) {
1:2e2d5dd:             this.session.getPolicy().setMaxBinaryMessageSize(wsTransport.getMaxFrameSize());
1:2e2d5dd:             this.session.getPolicy().setMaxTextMessageSize(wsTransport.getMaxFrameSize());
1:2e2d5dd:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onWebSocketError(Throwable cause) {
1:31c55f7:         onException(IOExceptionSupport.create(cause));
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onSocketOutboundText(String data) throws IOException {
1:31c55f7:         if (!transportStartedAtLeastOnce()) {
1:31c55f7:             LOG.debug("Waiting for WebSocket to be properly started...");
1:31c55f7:             try {
1:31c55f7:                 socketTransportStarted.await();
1:31c55f7:             } catch (InterruptedException e) {
1:31c55f7:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         LOG.trace("WS Proxy sending string of size {} out", data.length());
1:937b2ac:         try {
1:937b2ac:             session.getRemote().sendStringByFuture(data).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:937b2ac:         } catch (Exception e) {
1:937b2ac:             throw IOExceptionSupport.create(e);
1:31c55f7:         }
1:937b2ac:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void onSocketOutboundBinary(ByteBuffer data) throws IOException {
1:31c55f7:         if (!transportStartedAtLeastOnce()) {
1:31c55f7:             LOG.debug("Waiting for WebSocket to be properly started...");
1:31c55f7:             try {
1:31c55f7:                 socketTransportStarted.await();
1:31c55f7:             } catch (InterruptedException e) {
1:31c55f7:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         LOG.trace("WS Proxy sending {} bytes out", data.remaining());
1:31c55f7:         int limit = data.limit();
1:937b2ac:         try {
1:937b2ac:             session.getRemote().sendBytesByFuture(data).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:937b2ac:         } catch (Exception e) {
1:937b2ac:             throw IOExceptionSupport.create(e);
1:937b2ac:         }
1:31c55f7: 
1:31c55f7:         // Reset back to original limit and move position to match limit indicating
1:31c55f7:         // that we read everything, the websocket sender clears the passed buffer
1:31c55f7:         // which can make it look as if nothing was written.
1:31c55f7:         data.limit(limit);
1:31c55f7:         data.position(limit);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- Internal implementation ------------------------------------------//
1:31c55f7: 
1:31c55f7:     private boolean transportStartedAtLeastOnce() {
1:31c55f7:         return socketTransportStarted.getCount() == 0;
1:31c55f7:     }
1:937b2ac: 
1:937b2ac:     private static int getDefaultSendTimeOut() {
1:937b2ac:         return Integer.getInteger("org.apache.activemq.transport.ws.WSTransportProxy.sendTimeout", 30);
1:31c55f7:     }
1:937b2ac: }
============================================================================
author:Robbie Gemmell
-------------------------------------------------------------------------------
commit:2e49256
/////////////////////////////////////////////////////////////////////////
1:         transport.setTransportListener(getTransportListener());
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1: 
1:         if (wsTransport.getMaxFrameSize() > 0) {
1:             this.session.getPolicy().setMaxBinaryMessageSize(wsTransport.getMaxFrameSize());
1:             this.session.getPolicy().setMaxTextMessageSize(wsTransport.getMaxFrameSize());
1:         }
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: import java.security.cert.X509Certificate;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.locks.ReentrantLock;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportSupport;
1: import org.apache.activemq.transport.ws.WSTransport.WSTransportSink;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A proxy class that manages sending WebSocket events to the wrapped protocol level
1:  * WebSocket Transport.
1:  */
1: public final class WSTransportProxy extends TransportSupport implements Transport, WebSocketListener, BrokerServiceAware, WSTransportSink {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportProxy.class);
1: 
1:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
1: 
1:     private final ReentrantLock protocolLock = new ReentrantLock();
1:     private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:     private final String remoteAddress;
1: 
1:     private final Transport transport;
1:     private final WSTransport wsTransport;
1:     private Session session;
1: 
1:     /**
1:      * Create a WebSocket Transport Proxy instance that will pass
1:      * along WebSocket event to the underlying protocol level transport.
1:      *
1:      * @param remoteAddress
1:      *      the provided remote address to report being connected to.
1:      * @param transport
1:      *      The protocol level WebSocket Transport
1:      */
1:     public WSTransportProxy(String remoteAddress, Transport transport) {
1:         this.remoteAddress = remoteAddress;
1:         this.transport = transport;
1:         this.wsTransport = transport.narrow(WSTransport.class);
1: 
1:         if (wsTransport == null) {
1:             throw new IllegalArgumentException("Provided Transport does not contains a WSTransport implementation");
1:         } else {
1:             wsTransport.setTransportSink(this);
1:         }
1:     }
1: 
1:     /**
1:      * @return the sub-protocol of the proxied transport.
1:      */
1:     public String getSubProtocol() {
1:         return wsTransport.getSubProtocol();
1:     }
1: 
1:     /**
1:      * Apply any configure Transport options on the wrapped Transport and its contained
1:      * wireFormat instance.
1:      */
1:     public void setTransportOptions(Map<String, Object> options) {
1:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1: 
1:         IntrospectionSupport.setProperties(transport, options);
1:         IntrospectionSupport.setProperties(transport.getWireFormat(), wireFormatOptions);
1:     }
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         if (transport instanceof BrokerServiceAware) {
1:             ((BrokerServiceAware) transport).setBrokerService(brokerService);
1:         }
1:     }
1: 
1:     @Override
1:     public void oneway(Object command) throws IOException {
1:         protocolLock.lock();
1:         try {
1:             transport.oneway(command);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         } finally {
1:             protocolLock.unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:         return transport.getPeerCertificates();
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:         transport.setPeerCertificates(certificates);
1:     }
1: 
1:     @Override
1:     public String getRemoteAddress() {
1:         return remoteAddress;
1:     }
1: 
1:     @Override
1:     public WireFormat getWireFormat() {
1:         return transport.getWireFormat();
1:     }
1: 
1:     @Override
1:     public int getReceiveCounter() {
1:         return transport.getReceiveCounter();
1:     }
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         transport.stop();
1:         if (session != null && session.isOpen()) {
1:             session.close();
1:         }
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         socketTransportStarted.countDown();
1: 
0:         transport.setTransportListener(getTransportListener());
1:         transport.start();
1:     }
1: 
1:     //----- WebSocket methods being proxied to the WS Transport --------------//
1: 
1:     @Override
1:     public void onWebSocketBinary(byte[] payload, int offset, int length) {
1:         if (!transportStartedAtLeastOnce()) {
1:             LOG.debug("Waiting for WebSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
1:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         protocolLock.lock();
1:         try {
1:             wsTransport.onWebSocketBinary(ByteBuffer.wrap(payload, offset, length));
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         } finally {
1:             protocolLock.unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketText(String data) {
1:         if (!transportStartedAtLeastOnce()) {
1:             LOG.debug("Waiting for WebSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
1:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         protocolLock.lock();
1:         try {
1:             wsTransport.onWebSocketText(data);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         } finally {
1:             protocolLock.unlock();
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketClose(int statusCode, String reason) {
1:         try {
1:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
1:                 LOG.debug("WebSocket closed: code[{}] message[{}]", statusCode, reason);
1:                 wsTransport.onWebSocketClosed();
1:             }
1:         } catch (Exception e) {
1:             LOG.debug("Failed to close WebSocket cleanly", e);
1:         } finally {
1:             if (protocolLock.isHeldByCurrentThread()) {
1:                 protocolLock.unlock();
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketConnect(Session session) {
1:         this.session = session;
1:     }
1: 
1:     @Override
1:     public void onWebSocketError(Throwable cause) {
1:         onException(IOExceptionSupport.create(cause));
1:     }
1: 
1:     @Override
1:     public void onSocketOutboundText(String data) throws IOException {
1:         if (!transportStartedAtLeastOnce()) {
1:             LOG.debug("Waiting for WebSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
1:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         LOG.trace("WS Proxy sending string of size {} out", data.length());
0:         session.getRemote().sendString(data);
1:     }
1: 
1:     @Override
1:     public void onSocketOutboundBinary(ByteBuffer data) throws IOException {
1:         if (!transportStartedAtLeastOnce()) {
1:             LOG.debug("Waiting for WebSocket to be properly started...");
1:             try {
1:                 socketTransportStarted.await();
1:             } catch (InterruptedException e) {
1:                 LOG.warn("While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         LOG.trace("WS Proxy sending {} bytes out", data.remaining());
1:         int limit = data.limit();
0:         session.getRemote().sendBytes(data);
1: 
1:         // Reset back to original limit and move position to match limit indicating
1:         // that we read everything, the websocket sender clears the passed buffer
1:         // which can make it look as if nothing was written.
1:         data.limit(limit);
1:         data.position(limit);
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private boolean transportStartedAtLeastOnce() {
1:         return socketTransportStarted.getCount() == 0;
1:     }
1: }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:937b2ac
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             session.getRemote().sendStringByFuture(data).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             session.getRemote().sendBytesByFuture(data).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static int getDefaultSendTimeOut() {
1:         return Integer.getInteger("org.apache.activemq.transport.ws.WSTransportProxy.sendTimeout", 30);
1:     }
============================================================================