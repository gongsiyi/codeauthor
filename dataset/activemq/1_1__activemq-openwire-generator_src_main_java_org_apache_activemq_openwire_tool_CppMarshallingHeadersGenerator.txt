1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
6:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CppMarshallingHeadersGenerator extends JavaMarshallingGenerator {
1:bd0ad68: 
1:540dd5c:     protected String targetDir = "./src";
1:bd0ad68: 
1:bd0ad68:     public Object run() {
1:bd0ad68:         filePostFix = getFilePostFix();
1:bd0ad68:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/marshal");
6:bd0ad68:         }
1:bd0ad68:         return super.run();
1:540dd5c:     }
1:540dd5c: 
1:bd0ad68:     protected String getFilePostFix() {
1:bd0ad68:         return ".hpp";
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c:         generateLicence(out);
1:bd0ad68: 
1:540dd5c:         out.println("#ifndef " + className + "_hpp_");
1:540dd5c:         out.println("#define " + className + "_hpp_");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include <string>");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"command/IDataStructure.hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/* we could cut this down  - for now include all possible headers */");
1:540dd5c:         out.println("#include \"command/BrokerId.hpp\"");
1:540dd5c:         out.println("#include \"command/ConnectionId.hpp\"");
1:540dd5c:         out.println("#include \"command/ConsumerId.hpp\"");
1:540dd5c:         out.println("#include \"command/ProducerId.hpp\"");
1:540dd5c:         out.println("#include \"command/SessionId.hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"io/BinaryReader.hpp\"");
1:540dd5c:         out.println("#include \"io/BinaryWriter.hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"command/" + baseClass + ".hpp\"");
1:540dd5c:         out.println("#include \"util/ifr/p.hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#include \"protocol/ProtocolFormat.hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace apache");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("  namespace activemq");
1:540dd5c:         out.println("  {");
1:540dd5c:         out.println("    namespace client");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("      namespace marshal");
1:540dd5c:         out.println("      {");
1:540dd5c:         out.println("        using namespace ifr ;");
1:540dd5c:         out.println("        using namespace apache::activemq::client::command;");
1:540dd5c:         out.println("        using namespace apache::activemq::client::io;");
1:540dd5c:         out.println("        using namespace apache::activemq::client::protocol;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("class " + className + " : public " + baseClass + "");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("public:");
1:540dd5c:         out.println("    " + className + "() ;");
1:540dd5c:         out.println("    virtual ~" + className + "() ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    virtual IDataStructure* createCommand() ;");
1:540dd5c:         out.println("    virtual char getDataStructureType() ;");
1:540dd5c:         out.println("    ");
1:540dd5c:         out.println("    virtual void unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ;");
1:540dd5c:         out.println("    virtual int marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) ;");
1:540dd5c:         out.println("    virtual void marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) ;");
1:540dd5c:         out.println("} ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/* namespace */");
1:540dd5c:         out.println("     }");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("  }");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("#endif /*" + className + "_hpp_*/");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void generateFactory(PrintWriter out) {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("");
1:540dd5c:         out.println("// Marshalling code for Open Wire Format ");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println("//        activemq-openwire module");
1:540dd5c:         out.println("//");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#ifndef MarshallerFactory_hpp_");
1:540dd5c:         out.println("#define MarshallerFactory_hpp_");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("namespace apache");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("  namespace activemq");
1:540dd5c:         out.println("  {");
1:540dd5c:         out.println("    namespace client");
1:540dd5c:         out.println("    {");
1:540dd5c:         out.println("      namespace marshal");
1:540dd5c:         out.println("      {");
1:540dd5c:         out.println("        using namespace ifr ;");
1:540dd5c:         out.println("        using namespace std ;");
1:540dd5c:         out.println("        using namespace apache::activemq::client;");
1:540dd5c:         out.println("        using namespace apache::activemq::client::command;");
1:540dd5c:         out.println("        using namespace apache::activemq::client::io;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" * ");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("class MarshallerFactory");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("public:");
1:540dd5c:         out.println("    MarshallerFactory() ;");
1:540dd5c:         out.println("    virtual ~MarshallerFactory() ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    virtual void configure(ProtocolFormat& format) ;");
1:540dd5c:         out.println("} ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/* namespace */");
1:540dd5c:         out.println("      }");
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("  }");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("#endif /*MarshallerFactory_hpp_*/");
1:540dd5c:         out.println("");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTargetDir(String targetDir) {
1:540dd5c:         this.targetDir = targetDir;
1:540dd5c:     }
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     protected String targetDir = "./src";
1:             destDir = new File(targetDir + "/marshal");
1:     }
1: 
1:     protected void generateLicence(PrintWriter out) {
1:         out.println("/**");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("#ifndef " + className + "_hpp_");
1:         out.println("#define " + className + "_hpp_");
1:         out.println("");
1:         out.println("#include <string>");
1:         out.println("");
1:         out.println("#include \"command/IDataStructure.hpp\"");
1:         out.println("");
1:         out.println("/* we could cut this down  - for now include all possible headers */");
1:         out.println("#include \"command/BrokerId.hpp\"");
1:         out.println("#include \"command/ConnectionId.hpp\"");
1:         out.println("#include \"command/ConsumerId.hpp\"");
1:         out.println("#include \"command/ProducerId.hpp\"");
1:         out.println("#include \"command/SessionId.hpp\"");
1:         out.println("");
1:         out.println("#include \"io/BinaryReader.hpp\"");
1:         out.println("#include \"io/BinaryWriter.hpp\"");
1:         out.println("");
1:         out.println("#include \"command/" + baseClass + ".hpp\"");
1:         out.println("#include \"util/ifr/p.hpp\"");
1:         out.println("");
1:         out.println("#include \"protocol/ProtocolFormat.hpp\"");
1:         out.println("");
1:         out.println("namespace apache");
1:         out.println("{");
1:         out.println("  namespace activemq");
1:         out.println("  {");
1:         out.println("    namespace client");
1:         out.println("    {");
1:         out.println("      namespace marshal");
1:         out.println("      {");
1:         out.println("        using namespace ifr ;");
1:         out.println("        using namespace apache::activemq::client::command;");
1:         out.println("        using namespace apache::activemq::client::io;");
1:         out.println("        using namespace apache::activemq::client::protocol;");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" *");
1:         out.println(" */");
1:         out.println("class " + className + " : public " + baseClass + "");
1:         out.println("{");
1:         out.println("public:");
1:         out.println("    " + className + "() ;");
1:         out.println("    virtual ~" + className + "() ;");
1:         out.println("");
1:         out.println("    virtual IDataStructure* createCommand() ;");
1:         out.println("    virtual char getDataStructureType() ;");
1:         out.println("    ");
1:         out.println("    virtual void unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ;");
1:         out.println("    virtual int marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) ;");
1:         out.println("    virtual void marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) ;");
1:         out.println("} ;");
1:         out.println("");
1:         out.println("/* namespace */");
1:         out.println("     }");
1:         out.println("    }");
1:         out.println("  }");
1:         out.println("}");
1:         out.println("#endif /*" + className + "_hpp_*/");
1:     }
1: 
1:     public void generateFactory(PrintWriter out) {
1:         generateLicence(out);
1:         out.println("");
1:         out.println("// Marshalling code for Open Wire Format ");
1:         out.println("//");
1:         out.println("//");
1:         out.println("// NOTE!: This file is autogenerated - do not modify!");
1:         out.println("//        if you need to make a change, please see the Groovy scripts in the");
1:         out.println("//        activemq-openwire module");
1:         out.println("//");
1:         out.println("");
1:         out.println("#ifndef MarshallerFactory_hpp_");
1:         out.println("#define MarshallerFactory_hpp_");
1:         out.println("");
1:         out.println("");
1:         out.println("namespace apache");
1:         out.println("{");
1:         out.println("  namespace activemq");
1:         out.println("  {");
1:         out.println("    namespace client");
1:         out.println("    {");
1:         out.println("      namespace marshal");
1:         out.println("      {");
1:         out.println("        using namespace ifr ;");
1:         out.println("        using namespace std ;");
1:         out.println("        using namespace apache::activemq::client;");
1:         out.println("        using namespace apache::activemq::client::command;");
1:         out.println("        using namespace apache::activemq::client::io;");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" * ");
1:         out.println(" */");
1:         out.println("class MarshallerFactory");
1:         out.println("{");
1:         out.println("public:");
1:         out.println("    MarshallerFactory() ;");
1:         out.println("    virtual ~MarshallerFactory() ;");
1:         out.println("");
1:         out.println("    virtual void configure(ProtocolFormat& format) ;");
1:         out.println("} ;");
1:         out.println("");
1:         out.println("/* namespace */");
1:         out.println("      }");
1:         out.println("    }");
1:         out.println("  }");
1:         out.println("}");
1:         out.println("");
1:         out.println("#endif /*MarshallerFactory_hpp_*/");
1:         out.println("");
1:     }
1: 
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1: 
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: 
1: /**
1:  *
0:  * @version $Revision: 381410 $
1:  */
1: public class CppMarshallingHeadersGenerator extends JavaMarshallingGenerator {
1: 
0: 	protected String targetDir="./src";
1: 
1:     public Object run() {
1:         filePostFix = getFilePostFix();
1:         if (destDir == null) {
0:             destDir = new File(targetDir+"/marshal");
1:         }
1:         return super.run();
1:     }	   
1:     
1:     protected String getFilePostFix() {
1:         return ".hpp";
1:     }
1:     
1:     
0: 	protected void generateLicence(PrintWriter out) {
0: out.println("/*");
0: out.println(" *");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
0: 		generateLicence(out);
1: 		
0: out.println("#ifndef "+className+"_hpp_");
0: out.println("#define "+className+"_hpp_");
0: out.println("");
0: out.println("#include <string>");
0: out.println("");
0: out.println("#include \"command/IDataStructure.hpp\"");
0: out.println("");
0: out.println("/* we could cut this down  - for now include all possible headers */");
0: out.println("#include \"command/BrokerId.hpp\"");
0: out.println("#include \"command/ConnectionId.hpp\"");
0: out.println("#include \"command/ConsumerId.hpp\"");
0: out.println("#include \"command/ProducerId.hpp\"");
0: out.println("#include \"command/SessionId.hpp\"");
0: out.println("");
0: out.println("#include \"io/BinaryReader.hpp\"");
0: out.println("#include \"io/BinaryWriter.hpp\"");
0: out.println("");
0: out.println("#include \"command/"+baseClass+".hpp\"");
0: out.println("#include \"util/ifr/p.hpp\"");
0: out.println("");
0: out.println("#include \"protocol/ProtocolFormat.hpp\"");
0: out.println("");
0: out.println("namespace apache");
0: out.println("{");
0: out.println("  namespace activemq");
0: out.println("  {");
0: out.println("    namespace client");
0: out.println("    {");
0: out.println("      namespace marshal");
0: out.println("      {");
0: out.println("        using namespace ifr ;");
0: out.println("        using namespace apache::activemq::client::command;");
0: out.println("        using namespace apache::activemq::client::io;");
0: out.println("        using namespace apache::activemq::client::protocol;");
0: out.println("");
0: out.println("/*");
0: out.println(" *");
0: out.println(" */");
0: out.println("class "+className+" : public "+baseClass+"");
0: out.println("{");
0: out.println("public:");
0: out.println("    "+className+"() ;");
0: out.println("    virtual ~"+className+"() ;");
0: out.println("");
0: out.println("    virtual IDataStructure* createCommand() ;");
0: out.println("    virtual char getDataStructureType() ;");
0: out.println("    ");
0: out.println("    virtual void unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ;");
0: out.println("    virtual int marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) ;");
0: out.println("    virtual void marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) ;");
0: out.println("} ;");
0: out.println("");
0: out.println("/* namespace */");
0: out.println("     }");
0: out.println("    }");
0: out.println("  }");
0: out.println("}");
0: out.println("#endif /*"+className+"_hpp_*/");
1:         }
1:  	
0:     public void generateFactory(PrintWriter out) {
0: 		generateLicence(out);
0: out.println("");
0: out.println("// Marshalling code for Open Wire Format ");
0: out.println("//");
0: out.println("//");
0: out.println("// NOTE!: This file is autogenerated - do not modify!");
0: out.println("//        if you need to make a change, please see the Groovy scripts in the");
0: out.println("//        activemq-openwire module");
0: out.println("//");
0: out.println("");
0: out.println("#ifndef MarshallerFactory_hpp_");
0: out.println("#define MarshallerFactory_hpp_");
0: out.println("");
0: out.println("");
0: out.println("namespace apache");
0: out.println("{");
0: out.println("  namespace activemq");
0: out.println("  {");
0: out.println("    namespace client");
0: out.println("    {");
0: out.println("      namespace marshal");
0: out.println("      {");
0: out.println("        using namespace ifr ;");
0: out.println("        using namespace std ;");
0: out.println("        using namespace apache::activemq::client;");
0: out.println("        using namespace apache::activemq::client::command;");
0: out.println("        using namespace apache::activemq::client::io;");
0: out.println("");
0: out.println("/*");
0: out.println(" * ");
0: out.println(" */");
0: out.println("class MarshallerFactory");
0: out.println("{");
0: out.println("public:");
0: out.println("    MarshallerFactory() ;");
0: out.println("    virtual ~MarshallerFactory() ;");
0: out.println("");
0: out.println("	  virtual void configure(ProtocolFormat& format) ;");
0: out.println("} ;");
0: out.println("");
0: out.println("/* namespace */");
0: out.println("      }");
0: out.println("    }");
0: out.println("  }");
0: out.println("}");
0: out.println("");
0: out.println("#endif /*MarshallerFactory_hpp_*/");
0: out.println("");
1:     }
1: 
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String targetDir) {
0: 		this.targetDir = targetDir;
1: 	}
1: }
============================================================================