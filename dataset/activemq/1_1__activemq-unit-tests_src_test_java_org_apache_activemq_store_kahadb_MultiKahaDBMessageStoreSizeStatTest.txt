1:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
1:785b16b:  */
1:785b16b: package org.apache.activemq.store.kahadb;
1:785b16b: 
1:785b16b: import static org.junit.Assert.assertTrue;
1:785b16b: 
1:785b16b: import java.io.File;
1:785b16b: import java.io.IOException;
1:785b16b: import java.util.ArrayList;
1:785b16b: import java.util.List;
1:734fb7d: import java.util.concurrent.atomic.AtomicLong;
1:785b16b: 
1:785b16b: import org.apache.activemq.broker.BrokerService;
1:785b16b: import org.apache.activemq.broker.region.Destination;
1:785b16b: import org.apache.activemq.store.AbstractMessageStoreSizeStatTest;
1:785b16b: import org.apache.commons.io.FileUtils;
1:2262225: import org.junit.Rule;
1:785b16b: import org.junit.Test;
1:2262225: import org.junit.rules.TemporaryFolder;
1:785b16b: import org.slf4j.Logger;
1:785b16b: import org.slf4j.LoggerFactory;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test checks that KahaDB properly sets the new storeMessageSize
1:785b16b:  * statistic.
1:785b16b:  *
1:785b16b:  * AMQ-5748
1:785b16b:  *
1:785b16b:  */
1:785b16b: public class MultiKahaDBMessageStoreSizeStatTest extends
1:785b16b:         AbstractMessageStoreSizeStatTest {
1:785b16b:     protected static final Logger LOG = LoggerFactory
1:785b16b:             .getLogger(MultiKahaDBMessageStoreSizeStatTest.class);
1:785b16b: 
1:2262225:     @Rule
1:2262225:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     protected void setUpBroker(boolean clearDataDir) throws Exception {
1:2262225:         if (clearDataDir && dataFileDir.getRoot().exists())
1:2262225:             FileUtils.cleanDirectory(dataFileDir.getRoot());
1:785b16b:         super.setUpBroker(clearDataDir);
1:785b16b:     }
1:785b16b: 
1:785b16b:     @Override
1:785b16b:     protected void initPersistence(BrokerService brokerService)
1:785b16b:             throws IOException {
1:785b16b:         broker.setPersistent(true);
1:785b16b: 
1:785b16b:         //setup multi-kaha adapter
1:785b16b:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:2262225:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
1:785b16b: 
1:785b16b:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:785b16b:         kahaStore.setJournalMaxFileLength(1024 * 512);
1:785b16b: 
1:785b16b:         //set up a store per destination
1:785b16b:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:785b16b:         filtered.setPersistenceAdapter(kahaStore);
1:785b16b:         filtered.setPerDestination(true);
1:785b16b:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:785b16b:         stores.add(filtered);
1:785b16b: 
1:785b16b:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:785b16b:         broker.setPersistenceAdapter(persistenceAdapter);
1:785b16b:     }
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * Test that the the counter restores size and works after restart and more
1:785b16b:      * messages are published
1:785b16b:      *
1:785b16b:      * @throws Exception
1:785b16b:      */
1:d2bd152:     @Test(timeout=60000)
1:785b16b:     public void testMessageSizeAfterRestartAndPublish() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:785b16b: 
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:785b16b: 
1:785b16b:         // verify the count and size
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:785b16b: 
1:785b16b:         // stop, restart broker and publish more messages
1:785b16b:         stopBroker();
1:785b16b:         this.setUpBroker(false);
1:734fb7d:         dest = publishTestQueueMessages(200, publishedMessageSize);
1:785b16b: 
1:785b16b:         // verify the count and size
1:734fb7d:         verifyStats(dest, 400, publishedMessageSize.get());
1:785b16b: 
1:785b16b:     }
1:785b16b: 
1:d2bd152:     @Test(timeout=60000)
1:785b16b:     public void testMessageSizeAfterRestartAndPublishMultiQueue() throws Exception {
1:734fb7d:         AtomicLong publishedMessageSize = new AtomicLong();
1:734fb7d:         AtomicLong publishedMessageSize2 = new AtomicLong();
1:785b16b: 
1:734fb7d:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:785b16b: 
1:785b16b:         // verify the count and size
1:734fb7d:         verifyStats(dest, 200, publishedMessageSize.get());
1:734fb7d:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get());
1:785b16b: 
1:734fb7d:         Destination dest2 = publishTestQueueMessages(200, "test.queue2", publishedMessageSize2);
1:785b16b: 
1:785b16b:         // verify the count and size
1:734fb7d:         verifyStats(dest2, 200, publishedMessageSize2.get());
1:734fb7d:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get() + publishedMessageSize2.get());
1:785b16b: 
1:785b16b:         // stop, restart broker and publish more messages
1:785b16b:         stopBroker();
1:785b16b:         this.setUpBroker(false);
1:734fb7d:         dest = publishTestQueueMessages(200, publishedMessageSize);
1:734fb7d:         dest2 = publishTestQueueMessages(200, "test.queue2", publishedMessageSize2);
1:785b16b: 
1:785b16b:         // verify the count and size after publishing messages
1:734fb7d:         verifyStats(dest, 400, publishedMessageSize.get());
1:734fb7d:         verifyStats(dest2, 400, publishedMessageSize2.get());
1:785b16b: 
1:734fb7d:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get() + publishedMessageSize2.get());
1:785b16b:         assertTrue(broker.getPersistenceAdapter().size() >=
1:785b16b:                 (dest.getMessageStore().getMessageSize() + dest2.getMessageStore().getMessageSize()));
1:785b16b: 
1:785b16b:     }
1:785b16b: 
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d2bd152
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
commit:8a09b7e
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=30000)
commit:2262225
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TemporaryFolder;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:         if (clearDataDir && dataFileDir.getRoot().exists())
1:             FileUtils.cleanDirectory(dataFileDir.getRoot());
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
commit:d27b192
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     File dataFileDir = new File("target/test-amq-5748/stat-datadb");
0:         if (clearDataDir && dataFileDir.exists())
0:             FileUtils.cleanDirectory(dataFileDir);
/////////////////////////////////////////////////////////////////////////
0:         persistenceAdapter.setDirectory(dataFileDir);
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicLong;
0: import org.junit.Rule;
0: import org.junit.rules.TemporaryFolder;
/////////////////////////////////////////////////////////////////////////
0:     @Rule
0:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
0:         if (clearDataDir && dataFileDir.getRoot().exists())
0:             FileUtils.cleanDirectory(dataFileDir.getRoot());
/////////////////////////////////////////////////////////////////////////
0:         persistenceAdapter.setDirectory(dataFileDir.getRoot());
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=10000)
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:         dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 400, publishedMessageSize.get());
0:     @Test(timeout=10000)
1:         AtomicLong publishedMessageSize = new AtomicLong();
1:         AtomicLong publishedMessageSize2 = new AtomicLong();
1:         Destination dest = publishTestQueueMessages(200, publishedMessageSize);
1:         verifyStats(dest, 200, publishedMessageSize.get());
1:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get());
1:         Destination dest2 = publishTestQueueMessages(200, "test.queue2", publishedMessageSize2);
1:         verifyStats(dest2, 200, publishedMessageSize2.get());
1:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get() + publishedMessageSize2.get());
1:         dest = publishTestQueueMessages(200, publishedMessageSize);
1:         dest2 = publishTestQueueMessages(200, "test.queue2", publishedMessageSize2);
1:         verifyStats(dest, 400, publishedMessageSize.get());
1:         verifyStats(dest2, 400, publishedMessageSize2.get());
1:         assertTrue(broker.getPersistenceAdapter().size() > publishedMessageSize.get() + publishedMessageSize2.get());
commit:a49d46e
/////////////////////////////////////////////////////////////////////////
0:         Destination dest = publishTestQueueMessages(200);
/////////////////////////////////////////////////////////////////////////
0:         dest = publishTestQueueMessages(200);
/////////////////////////////////////////////////////////////////////////
0:         Destination dest = publishTestQueueMessages(200);
0:         Destination dest2 = publishTestQueueMessages(200, "test.queue2");
/////////////////////////////////////////////////////////////////////////
0:         dest = publishTestQueueMessages(200);
0:         dest2 = publishTestQueueMessages(200, "test.queue2");
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.store.AbstractMessageStoreSizeStatTest;
1: import org.apache.commons.io.FileUtils;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This test checks that KahaDB properly sets the new storeMessageSize
1:  * statistic.
1:  *
1:  * AMQ-5748
1:  *
1:  */
1: public class MultiKahaDBMessageStoreSizeStatTest extends
1:         AbstractMessageStoreSizeStatTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MultiKahaDBMessageStoreSizeStatTest.class);
1: 
0:     File dataFileDir = new File("target/test-amq-5748/stat-datadb");
1: 
1:     @Override
1:     protected void setUpBroker(boolean clearDataDir) throws Exception {
0:         if (clearDataDir && dataFileDir.exists())
0:             FileUtils.cleanDirectory(dataFileDir);
1:         super.setUpBroker(clearDataDir);
1:     }
1: 
1:     @Override
1:     protected void initPersistence(BrokerService brokerService)
1:             throws IOException {
1:         broker.setPersistent(true);
1: 
1:         //setup multi-kaha adapter
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
0:         persistenceAdapter.setDirectory(dataFileDir);
1: 
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024 * 512);
1: 
1:         //set up a store per destination
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         filtered.setPersistenceAdapter(kahaStore);
1:         filtered.setPerDestination(true);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     /**
1:      * Test that the the counter restores size and works after restart and more
1:      * messages are published
1:      *
1:      * @throws Exception
1:      */
0:     @Test
1:     public void testMessageSizeAfterRestartAndPublish() throws Exception {
1: 
0:         Destination dest = publishTestMessages(200);
1: 
1:         // verify the count and size
0:         verifyStats(dest, 200, 200 * messageSize);
1: 
1:         // stop, restart broker and publish more messages
1:         stopBroker();
1:         this.setUpBroker(false);
0:         dest = publishTestMessages(200);
1: 
1:         // verify the count and size
0:         verifyStats(dest, 400, 400 * messageSize);
1: 
1:     }
1: 
0:     @Test
1:     public void testMessageSizeAfterRestartAndPublishMultiQueue() throws Exception {
1: 
0:         Destination dest = publishTestMessages(200);
1: 
1:         // verify the count and size
0:         verifyStats(dest, 200, 200 * messageSize);
0:         assertTrue(broker.getPersistenceAdapter().size() > 200 * messageSize);
1: 
0:         Destination dest2 = publishTestMessages(200, "test.queue2");
1: 
1:         // verify the count and size
0:         verifyStats(dest2, 200, 200 * messageSize);
0:         assertTrue(broker.getPersistenceAdapter().size() > 400 * messageSize);
1: 
1:         // stop, restart broker and publish more messages
1:         stopBroker();
1:         this.setUpBroker(false);
0:         dest = publishTestMessages(200);
0:         dest2 = publishTestMessages(200, "test.queue2");
1: 
1:         // verify the count and size after publishing messages
0:         verifyStats(dest, 400, 400 * messageSize);
0:         verifyStats(dest2, 400, 400 * messageSize);
1: 
0:         System.out.println(broker.getPersistenceAdapter().size());
0:         assertTrue(broker.getPersistenceAdapter().size() > 800 * messageSize);
1:         assertTrue(broker.getPersistenceAdapter().size() >=
1:                 (dest.getMessageStore().getMessageSize() + dest2.getMessageStore().getMessageSize()));
1: 
1:     }
1: 
1: }
============================================================================