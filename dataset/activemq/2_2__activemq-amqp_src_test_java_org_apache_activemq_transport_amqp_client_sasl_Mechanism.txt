1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client.sasl;
1:72839b7: 
1:72839b7: import java.util.Map;
1:72839b7: 
1:72839b7: import javax.security.sasl.SaslException;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Interface for all SASL authentication mechanism implementations.
1:72839b7:  */
1:72839b7: public interface Mechanism extends Comparable<Mechanism> {
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Relative priority values used to arrange the found SASL
1:72839b7:      * mechanisms in a preferred order where the level of security
1:72839b7:      * generally defines the preference.
1:72839b7:      */
1:72839b7:     public enum PRIORITY {
1:72839b7:         LOWEST(0),
1:72839b7:         LOW(1),
1:72839b7:         MEDIUM(2),
1:72839b7:         HIGH(3),
1:72839b7:         HIGHEST(4);
1:72839b7: 
1:72839b7:         private final int value;
1:72839b7: 
1:72839b7:         private PRIORITY(int value) {
1:72839b7:             this.value = value;
1:72839b7:         }
1:72839b7: 
1:72839b7:         public int getValue() {
1:72839b7:             return value;
1:72839b7:        }
1:72839b7:     };
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return return the relative priority of this SASL mechanism.
1:72839b7:      */
1:72839b7:     int getPriority();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return the well known name of this SASL mechanism.
1:72839b7:      */
1:72839b7:     String getName();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * @return the response buffer used to answer the initial SASL cycle.
1:72839b7:      * @throws SaslException if an error occurs computing the response.
1:72839b7:      */
1:72839b7:     byte[] getInitialResponse() throws SaslException;
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Create a response based on a given challenge from the remote peer.
1:72839b7:      *
1:72839b7:      * @param challenge
1:72839b7:      *        the challenge that this Mechanism should response to.
1:72839b7:      *
1:72839b7:      * @return the response that answers the given challenge.
1:72839b7:      * @throws SaslException if an error occurs computing the response.
1:72839b7:      */
1:72839b7:     byte[] getChallengeResponse(byte[] challenge) throws SaslException;
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the user name value for this Mechanism.  The Mechanism can ignore this
1:72839b7:      * value if it does not utilize user name in it's authentication processing.
1:72839b7:      *
1:72839b7:      * @param username
1:72839b7:      *        The user name given.
1:72839b7:      */
1:72839b7:     void setUsername(String value);
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Returns the configured user name value for this Mechanism.
1:72839b7:      *
1:72839b7:      * @return the currently set user name value for this Mechanism.
1:72839b7:      */
1:72839b7:     String getUsername();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets the password value for this Mechanism.  The Mechanism can ignore this
1:72839b7:      * value if it does not utilize a password in it's authentication processing.
1:72839b7:      *
1:72839b7:      * @param username
1:72839b7:      *        The user name given.
1:72839b7:      */
1:72839b7:     void setPassword(String value);
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Returns the configured password value for this Mechanism.
1:72839b7:      *
1:72839b7:      * @return the currently set password value for this Mechanism.
1:72839b7:      */
1:72839b7:     String getPassword();
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * Sets any additional Mechanism specific properties using a Map<String, Object>
1:72839b7:      *
1:72839b7:      * @param options
1:72839b7:      *        the map of additional properties that this Mechanism should utilize.
1:72839b7:      */
1:72839b7:     void setProperties(Map<String, Object> options);
1:72839b7: 
1:72839b7:     /**
1:72839b7:      * The currently set Properties for this Mechanism.
1:72839b7:      *
1:72839b7:      * @return the current set of configuration Properties for this Mechanism.
1:72839b7:      */
1:72839b7:     Map<String, Object> getProperties();
1:72839b7: 
1:b5dd0a1:     /**
1:b5dd0a1:      * Using the configured credentials, check if the mechanism applies or not.
1:b5dd0a1:      *
1:b5dd0a1:      * @param username
1:b5dd0a1:      *      The user name that will be used with this mechanism
1:b5dd0a1:      * @param password
1:b5dd0a1:      *      The password that will be used with this mechanism
1:b5dd0a1:      *
1:b5dd0a1:      * @return true if the mechanism works with the provided credentials or not.
1:b5dd0a1:      */
1:b5dd0a1:     boolean isApplicable(String username, String password);
1:b5dd0a1: 
1:b5dd0a1:     /**
1:b5dd0a1:      * Get the currently configured Authentication ID.
1:b5dd0a1:      *
1:b5dd0a1:      * @return the currently set Authentication ID.
1:b5dd0a1:      */
1:ce5628a:     String getAuthzid();
1:ce5628a: 
1:b5dd0a1:     /**
1:b5dd0a1:      * Sets an Authentication ID that some mechanism can use during the
1:b5dd0a1:      * challenge response phase.
1:b5dd0a1:      *
1:b5dd0a1:      * @param authzid
1:b5dd0a1:      *      The Authentication ID to use.
1:b5dd0a1:      */
1:ce5628a:     void setAuthzid(String authzid);
1:b5dd0a1: 
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b5dd0a1
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Using the configured credentials, check if the mechanism applies or not.
1:      *
1:      * @param username
1:      *      The user name that will be used with this mechanism
1:      * @param password
1:      *      The password that will be used with this mechanism
1:      *
1:      * @return true if the mechanism works with the provided credentials or not.
1:      */
1:     boolean isApplicable(String username, String password);
1: 
1:     /**
1:      * Get the currently configured Authentication ID.
1:      *
1:      * @return the currently set Authentication ID.
1:      */
1:     /**
1:      * Sets an Authentication ID that some mechanism can use during the
1:      * challenge response phase.
1:      *
1:      * @param authzid
1:      *      The Authentication ID to use.
1:      */
1: 
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.sasl;
1: 
1: import java.util.Map;
1: 
1: import javax.security.sasl.SaslException;
1: 
1: /**
1:  * Interface for all SASL authentication mechanism implementations.
1:  */
1: public interface Mechanism extends Comparable<Mechanism> {
1: 
1:     /**
1:      * Relative priority values used to arrange the found SASL
1:      * mechanisms in a preferred order where the level of security
1:      * generally defines the preference.
1:      */
1:     public enum PRIORITY {
1:         LOWEST(0),
1:         LOW(1),
1:         MEDIUM(2),
1:         HIGH(3),
1:         HIGHEST(4);
1: 
1:         private final int value;
1: 
1:         private PRIORITY(int value) {
1:             this.value = value;
1:         }
1: 
1:         public int getValue() {
1:             return value;
1:        }
1:     };
1: 
1:     /**
1:      * @return return the relative priority of this SASL mechanism.
1:      */
1:     int getPriority();
1: 
1:     /**
1:      * @return the well known name of this SASL mechanism.
1:      */
1:     String getName();
1: 
1:     /**
1:      * @return the response buffer used to answer the initial SASL cycle.
1:      * @throws SaslException if an error occurs computing the response.
1:      */
1:     byte[] getInitialResponse() throws SaslException;
1: 
1:     /**
1:      * Create a response based on a given challenge from the remote peer.
1:      *
1:      * @param challenge
1:      *        the challenge that this Mechanism should response to.
1:      *
1:      * @return the response that answers the given challenge.
1:      * @throws SaslException if an error occurs computing the response.
1:      */
1:     byte[] getChallengeResponse(byte[] challenge) throws SaslException;
1: 
1:     /**
1:      * Sets the user name value for this Mechanism.  The Mechanism can ignore this
1:      * value if it does not utilize user name in it's authentication processing.
1:      *
1:      * @param username
1:      *        The user name given.
1:      */
1:     void setUsername(String value);
1: 
1:     /**
1:      * Returns the configured user name value for this Mechanism.
1:      *
1:      * @return the currently set user name value for this Mechanism.
1:      */
1:     String getUsername();
1: 
1:     /**
1:      * Sets the password value for this Mechanism.  The Mechanism can ignore this
1:      * value if it does not utilize a password in it's authentication processing.
1:      *
1:      * @param username
1:      *        The user name given.
1:      */
1:     void setPassword(String value);
1: 
1:     /**
1:      * Returns the configured password value for this Mechanism.
1:      *
1:      * @return the currently set password value for this Mechanism.
1:      */
1:     String getPassword();
1: 
1:     /**
1:      * Sets any additional Mechanism specific properties using a Map<String, Object>
1:      *
1:      * @param options
1:      *        the map of additional properties that this Mechanism should utilize.
1:      */
1:     void setProperties(Map<String, Object> options);
1: 
1:     /**
1:      * The currently set Properties for this Mechanism.
1:      *
1:      * @return the current set of configuration Properties for this Mechanism.
1:      */
1:     Map<String, Object> getProperties();
1: 
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:ce5628a
/////////////////////////////////////////////////////////////////////////
1:     String getAuthzid();
1: 
1:     void setAuthzid(String authzid);
============================================================================