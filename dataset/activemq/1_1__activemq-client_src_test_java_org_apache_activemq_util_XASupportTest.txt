1:8e7556f: /**
1:8e7556f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e7556f:  * contributor license agreements.  See the NOTICE file distributed with
1:8e7556f:  * this work for additional information regarding copyright ownership.
1:8e7556f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e7556f:  * (the "License"); you may not use this file except in compliance with
1:8e7556f:  * the License.  You may obtain a copy of the License at
1:8e7556f:  *
1:8e7556f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e7556f:  *
1:8e7556f:  * Unless required by applicable law or agreed to in writing, software
1:8e7556f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e7556f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e7556f:  * See the License for the specific language governing permissions and
1:8e7556f:  * limitations under the License.
1:8e7556f:  */
1:8e7556f: package org.apache.activemq.util;
1:8e7556f: 
1:8e7556f: import static javax.transaction.xa.XAResource.TMENDRSCAN;
1:8e7556f: import static javax.transaction.xa.XAResource.TMFAIL;
1:8e7556f: import static javax.transaction.xa.XAResource.TMJOIN;
1:8e7556f: import static javax.transaction.xa.XAResource.TMNOFLAGS;
1:8e7556f: import static javax.transaction.xa.XAResource.TMONEPHASE;
1:8e7556f: import static javax.transaction.xa.XAResource.TMRESUME;
1:8e7556f: import static javax.transaction.xa.XAResource.TMSTARTRSCAN;
1:8e7556f: import static javax.transaction.xa.XAResource.TMSUCCESS;
1:8e7556f: import static javax.transaction.xa.XAResource.TMSUSPEND;
1:8e7556f: import static org.hamcrest.CoreMatchers.is;
1:8e7556f: import static org.junit.Assert.assertThat;
1:8e7556f: 
1:8e7556f: import java.util.LinkedList;
1:8e7556f: import java.util.List;
1:8e7556f: 
1:8e7556f: import org.junit.Test;
1:8e7556f: import org.junit.runner.RunWith;
1:8e7556f: import org.junit.runners.Parameterized;
1:8e7556f: import org.junit.runners.Parameterized.Parameters;
1:8e7556f: 
1:8e7556f: @RunWith(Parameterized.class)
1:8e7556f: public class XASupportTest {
1:8e7556f: 
1:8e7556f:     private final int flags;
1:8e7556f:     private final String expectedResult;
1:8e7556f: 
1:8e7556f:     public XASupportTest(int flags, String expectedResult) {
1:8e7556f:         this.flags = flags;
1:8e7556f:         this.expectedResult = expectedResult;
1:8e7556f:     }
1:8e7556f: 
1:8e7556f:     @Parameters
1:8e7556f:     public static Iterable<Object[]> parameters() {
1:8e7556f:         List<Object[]> p = new LinkedList<Object[]>();
1:8e7556f: 
1:8e7556f:         // single values from XAResource
1:8e7556f:         add(p, TMENDRSCAN, "TMENDRSCAN");
1:8e7556f:         add(p, TMFAIL, "TMFAIL");
1:8e7556f:         add(p, TMJOIN, "TMJOIN");
1:8e7556f:         add(p, TMNOFLAGS, "TMNOFLAGS");
1:8e7556f:         add(p, TMONEPHASE, "TMONEPHASE");
1:8e7556f:         add(p, TMRESUME, "TMRESUME");
1:8e7556f:         add(p, TMSTARTRSCAN, "TMSTARTRSCAN");
1:8e7556f:         add(p, TMSUCCESS, "TMSUCCESS");
1:8e7556f:         add(p, TMSUSPEND, "TMSUSPEND");
1:8e7556f: 
1:8e7556f:         // combination of multiple flags
1:8e7556f:         add(p, TMONEPHASE | TMSUCCESS, "TMONEPHASE | TMSUCCESS");
1:8e7556f: 
1:8e7556f:         // flags not specified in XAResource
1:8e7556f:         add(p, TMSUCCESS | 0x00400000, "TMSUCCESS | 0x00400000");
1:8e7556f: 
1:8e7556f:         return p;
1:8e7556f:     }
1:8e7556f: 
1:8e7556f:     private static void add(List<Object[]> p, int flags, String expectedResult) {
1:8e7556f:         p.add(new Object[] { flags, expectedResult });
1:8e7556f:     }
1:8e7556f: 
1:8e7556f:     @Test
1:8e7556f:     public void test() throws Exception {
1:8e7556f:         assertThat(XASupport.toString(flags), is(expectedResult));
1:8e7556f:     }
1:8e7556f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8e7556f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import static javax.transaction.xa.XAResource.TMENDRSCAN;
1: import static javax.transaction.xa.XAResource.TMFAIL;
1: import static javax.transaction.xa.XAResource.TMJOIN;
1: import static javax.transaction.xa.XAResource.TMNOFLAGS;
1: import static javax.transaction.xa.XAResource.TMONEPHASE;
1: import static javax.transaction.xa.XAResource.TMRESUME;
1: import static javax.transaction.xa.XAResource.TMSTARTRSCAN;
1: import static javax.transaction.xa.XAResource.TMSUCCESS;
1: import static javax.transaction.xa.XAResource.TMSUSPEND;
1: import static org.hamcrest.CoreMatchers.is;
1: import static org.junit.Assert.assertThat;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class XASupportTest {
1: 
1:     private final int flags;
1:     private final String expectedResult;
1: 
1:     public XASupportTest(int flags, String expectedResult) {
1:         this.flags = flags;
1:         this.expectedResult = expectedResult;
1:     }
1: 
1:     @Parameters
1:     public static Iterable<Object[]> parameters() {
1:         List<Object[]> p = new LinkedList<Object[]>();
1: 
1:         // single values from XAResource
1:         add(p, TMENDRSCAN, "TMENDRSCAN");
1:         add(p, TMFAIL, "TMFAIL");
1:         add(p, TMJOIN, "TMJOIN");
1:         add(p, TMNOFLAGS, "TMNOFLAGS");
1:         add(p, TMONEPHASE, "TMONEPHASE");
1:         add(p, TMRESUME, "TMRESUME");
1:         add(p, TMSTARTRSCAN, "TMSTARTRSCAN");
1:         add(p, TMSUCCESS, "TMSUCCESS");
1:         add(p, TMSUSPEND, "TMSUSPEND");
1: 
1:         // combination of multiple flags
1:         add(p, TMONEPHASE | TMSUCCESS, "TMONEPHASE | TMSUCCESS");
1: 
1:         // flags not specified in XAResource
1:         add(p, TMSUCCESS | 0x00400000, "TMSUCCESS | 0x00400000");
1: 
1:         return p;
1:     }
1: 
1:     private static void add(List<Object[]> p, int flags, String expectedResult) {
1:         p.add(new Object[] { flags, expectedResult });
1:     }
1: 
1:     @Test
1:     public void test() throws Exception {
1:         assertThat(XASupport.toString(flags), is(expectedResult));
1:     }
1: }
============================================================================