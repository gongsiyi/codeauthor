1:18adfef: /**
1:18adfef:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:18adfef:  * contributor license agreements.  See the NOTICE file distributed with
1:18adfef:  * this work for additional information regarding copyright ownership.
1:18adfef:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:18adfef:  * (the "License"); you may not use this file except in compliance with
1:18adfef:  * the License.  You may obtain a copy of the License at
1:18adfef:  *
1:18adfef:  *      http://www.apache.org/licenses/LICENSE-2.0
1:18adfef:  *
1:18adfef:  * Unless required by applicable law or agreed to in writing, software
1:18adfef:  * distributed under the License is distributed on an "AS IS" BASIS,
1:18adfef:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:18adfef:  * See the License for the specific language governing permissions and
1:18adfef:  * limitations under the License.
1:18adfef:  */
1:18adfef: package org.apache.activemq.bugs;
2:18adfef: 
1:18adfef: import java.util.concurrent.CountDownLatch;
1:18adfef: import java.util.concurrent.TimeUnit;
1:18adfef: 
1:18adfef: import javax.jms.Connection;
1:18adfef: import javax.jms.JMSException;
1:18adfef: import javax.jms.Message;
1:18adfef: import javax.jms.MessageConsumer;
1:18adfef: import javax.jms.MessageListener;
1:18adfef: import javax.jms.MessageProducer;
1:18adfef: import javax.jms.Queue;
1:18adfef: import javax.jms.Session;
1:18adfef: 
1:18adfef: import org.apache.activemq.ActiveMQConnectionFactory;
1:18adfef: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:18adfef: 
1:18adfef: public class AMQ2751Test extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2751Test.class);
1:18adfef: 
1:18adfef:     private static String clientIdPrefix = "consumer";
1:18adfef:     private static String queueName = "FOO";
1:18adfef: 
1:18adfef:     public void testRecoverRedelivery() throws Exception {
1:18adfef: 
1:18adfef:         final CountDownLatch redelivery = new CountDownLatch(6);
1:cad663a:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:cad663a:                 "failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
1:18adfef:         try {
1:18adfef: 
1:18adfef:             Connection connection = factory.createConnection();
1:18adfef:             String clientId = clientIdPrefix;
1:18adfef:             connection.setClientID(clientId);
1:18adfef: 
1:18adfef:             final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:18adfef: 
1:18adfef:             Queue queue = session.createQueue(queueName);
1:18adfef: 
1:18adfef:             MessageConsumer consumer = session.createConsumer(queue);
1:18adfef: 
1:18adfef:             consumer.setMessageListener(new MessageListener() {
1:18adfef:                 public void onMessage(Message message) {
1:18adfef:                     try {
1:18adfef:                         LOG.info("Got message: " + message.getJMSMessageID());
1:18adfef:                         if (message.getJMSRedelivered()) {
1:18adfef:                             LOG.info("It's a redelivery.");
1:18adfef:                             redelivery.countDown();
1:cad663a:                         }
1:18adfef:                         LOG.info("calling recover() on the session to force redelivery.");
1:18adfef:                         session.recover();
1:18adfef:                     } catch (JMSException e) {
1:18adfef:                         e.printStackTrace();
2:18adfef:                     }
1:18adfef:                 }
1:18adfef:             });
1:18adfef: 
1:18adfef:             System.out.println("Created queue consumer with clientId " + clientId);
1:18adfef:             connection.start();
1:18adfef: 
1:18adfef:             MessageProducer producer = session.createProducer(queue);
1:18adfef:             producer.send(session.createTextMessage("test"));
1:cad663a: 
1:18adfef:             assertTrue("we got 6 redeliveries", redelivery.await(20, TimeUnit.SECONDS));
1:18adfef: 
1:18adfef:         } finally {
1:18adfef:             broker.stop();
1:18adfef:         }
1:18adfef: 
1:18adfef:     }
1:18adfef: 
1:18adfef:     @Override
1:18adfef:     protected void setUp() throws Exception {
1:cad663a:         bindAddress = "tcp://localhost:0";
1:18adfef:         super.setUp();
1:18adfef:     }
1:18adfef: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:cad663a
/////////////////////////////////////////////////////////////////////////
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 "failover:(" + broker.getTransportConnectors().get(0).getConnectUri() + ")");
/////////////////////////////////////////////////////////////////////////
1:                         }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         bindAddress = "tcp://localhost:0";
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2751Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:18adfef
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class AMQ2751Test extends EmbeddedBrokerTestSupport {
0:     private static final Log LOG = LogFactory.getLog(AMQ2751Test.class);
1: 
1:     private static String clientIdPrefix = "consumer";
1:     private static String queueName = "FOO";
1: 
1:     public void testRecoverRedelivery() throws Exception {
1: 
1:         final CountDownLatch redelivery = new CountDownLatch(6);
0:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("failover:(" + this.bindAddress + ")");
1:         try {
1: 
1:             Connection connection = factory.createConnection();
1:             String clientId = clientIdPrefix;
1:             connection.setClientID(clientId);
1: 
1:             final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:             Queue queue = session.createQueue(queueName);
1: 
1:             MessageConsumer consumer = session.createConsumer(queue);
1: 
1:             consumer.setMessageListener(new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     try {
1:                         LOG.info("Got message: " + message.getJMSMessageID());
1:                         if (message.getJMSRedelivered()) {
1:                             LOG.info("It's a redelivery.");
1:                             redelivery.countDown();
1:                         } 
1:                         LOG.info("calling recover() on the session to force redelivery.");
1:                         session.recover();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1: 
1:             System.out.println("Created queue consumer with clientId " + clientId);
1:             connection.start();
1: 
1:             MessageProducer producer = session.createProducer(queue);
1:             producer.send(session.createTextMessage("test"));
1:             
1:             assertTrue("we got 6 redeliveries", redelivery.await(20, TimeUnit.SECONDS));
1: 
1:         } finally {
1:             broker.stop();
1:         }
1: 
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://0.0.0.0:61617";
1:         super.setUp();
1:     }
1: }
============================================================================