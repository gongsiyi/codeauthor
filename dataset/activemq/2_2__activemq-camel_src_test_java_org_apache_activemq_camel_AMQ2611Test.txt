1:75a32e4: /**
1:75a32e4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:75a32e4:  * contributor license agreements.  See the NOTICE file distributed with
1:75a32e4:  * this work for additional information regarding copyright ownership.
1:75a32e4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:75a32e4:  * (the "License"); you may not use this file except in compliance with
1:75a32e4:  * the License.  You may obtain a copy of the License at
1:75a32e4:  *
1:75a32e4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:75a32e4:  *
1:75a32e4:  * Unless required by applicable law or agreed to in writing, software
1:75a32e4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:75a32e4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:75a32e4:  * See the License for the specific language governing permissions and
1:75a32e4:  * limitations under the License.
1:75a32e4:  */
1:75a32e4: package org.apache.activemq.camel;
10:75a32e4: 
1:75a32e4: import junit.framework.TestCase;
1:75a32e4: 
1:75a32e4: import org.apache.activemq.broker.BrokerService;
1:75a32e4: import org.apache.activemq.camel.component.ActiveMQComponent;
1:75a32e4: import org.apache.camel.Body;
1:75a32e4: import org.apache.camel.CamelContext;
1:75a32e4: import org.apache.camel.ProducerTemplate;
1:75a32e4: import org.apache.camel.builder.RouteBuilder;
1:75a32e4: import org.apache.camel.impl.DefaultCamelContext;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:75a32e4: 
1:75a32e4: public class AMQ2611Test extends TestCase {
1:75a32e4: 
1:75a32e4:     private static final String BROKER_URL = "tcp://localhost:61616";
1:75a32e4:     private static final String QUEUE_NAME = "test.queue";
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(AMQ2611Test.class);
1:75a32e4:     private BrokerService brokerService = null;
1:75a32e4:     private CamelContext camelContext = null;
1:75a32e4: 
1:75a32e4:     private void createBroker() throws Exception {
1:75a32e4:         brokerService = new BrokerService();
1:75a32e4:         brokerService.addConnector(BROKER_URL);
1:75a32e4:         brokerService.start();
2:75a32e4:     }
1:75a32e4: 
1:75a32e4:     public static class Consumer {
1:75a32e4:         public void consume(@Body String message) {
1:75a32e4:             log.info("consume message = " + message);
1:75a32e4:         }
1:75a32e4:     }
1:75a32e4: 
1:75a32e4:     private void createCamelContext() throws Exception {
1:75a32e4:         log.info("creating context and sending message");
1:75a32e4:         camelContext = new DefaultCamelContext();
1:d4da85f:         camelContext.addComponent("activemq", ActiveMQComponent.activeMQComponent(BROKER_URL));
1:75a32e4:         final String queueEndpointName = "activemq:queue" + QUEUE_NAME;
1:75a32e4:         camelContext.addRoutes(new RouteBuilder() {
1:75a32e4:             @Override
1:75a32e4:             public void configure() throws Exception {
1:75a32e4:                 from(queueEndpointName).bean(Consumer.class, "consume");
1:75a32e4:             }
1:75a32e4:         });
1:75a32e4:         camelContext.start();
1:d4da85f:         final ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
1:75a32e4:         producerTemplate.sendBody(queueEndpointName, "message");
1:75a32e4:     }
1:75a32e4: 
1:75a32e4:     private void destroyCamelContext() throws Exception {
1:75a32e4:         log.info("destroying context");
1:75a32e4:         camelContext.stop();
1:75a32e4:         camelContext = null;
1:75a32e4:     }
1:75a32e4: 
1:75a32e4:     public void testConnections() {
1:75a32e4:         try {
1:75a32e4:             createBroker();
1:75a32e4:             int i = 0;
1:75a32e4:             while (i++ < 5) {
1:75a32e4:                 createCamelContext();
1:75a32e4:                 Thread.sleep(1000);
1:75a32e4:                 destroyCamelContext();
1:75a32e4:                 Thread.sleep(1000);
1:75a32e4:                 assertEquals(0, brokerService.getConnectorByName(BROKER_URL).getConnections().size());
1:75a32e4:             }
1:75a32e4:         } catch (Exception e) {
1:75a32e4:             log.warn("run", e);
1:75a32e4:         }
1:75a32e4:     }
1:75a32e4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d4da85f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         camelContext.addComponent("activemq", ActiveMQComponent.activeMQComponent(BROKER_URL));
/////////////////////////////////////////////////////////////////////////
1:         final ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(AMQ2611Test.class);
commit:75a32e4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
0: import java.util.Timer;
0: import java.util.TimerTask;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.camel.component.ActiveMQComponent;
1: import org.apache.camel.Body;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.ProducerTemplate;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.impl.DefaultCamelContext;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class AMQ2611Test extends TestCase {
1: 
1:     private static final String BROKER_URL = "tcp://localhost:61616";
1: 
1:     private static final String QUEUE_NAME = "test.queue";
1: 
0:     private static final Log log = LogFactory.getLog(AMQ2611Test.class);
1: 
1:     private BrokerService brokerService = null;
1: 
0:     private Timer statisticsTimer = null;
1: 
1:     private CamelContext camelContext = null;
1: 
0:     public AMQ2611Test() {
1: 
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.addConnector(BROKER_URL);
1:         brokerService.start();
1:     }
1: 
1:     public static class Consumer {
1:         public void consume(@Body String message) {
1:             log.info("consume message = " + message);
1:         }
1:     }
1: 
1:     private void createCamelContext() throws Exception {
1:         log.info("creating context and sending message");
1:         camelContext = new DefaultCamelContext();
0:         camelContext.addComponent("activemq", ActiveMQComponent
0:                 .activeMQComponent(BROKER_URL));
1:         final String queueEndpointName = "activemq:queue" + QUEUE_NAME;
1:         camelContext.addRoutes(new RouteBuilder() {
1:             @Override
1:             public void configure() throws Exception {
1:                 from(queueEndpointName).bean(Consumer.class, "consume");
1:             }
1:         });
1:         camelContext.start();
0:         final ProducerTemplate producerTemplate = camelContext
0:                 .createProducerTemplate();
1:         producerTemplate.sendBody(queueEndpointName, "message");
1:     }
1: 
1:     private void destroyCamelContext() throws Exception {
1:         log.info("destroying context");
1:         camelContext.stop();
1:         camelContext = null;
1:     }
1: 
1:     public void testConnections() {
1:         try {
1:             createBroker();
1:             int i = 0;
1:             while (i++ < 5) {
1:                 createCamelContext();
1:                 Thread.sleep(1000);
1:                 destroyCamelContext();
1:                 Thread.sleep(1000);
1:                 assertEquals(0, brokerService.getConnectorByName(BROKER_URL).getConnections().size());
1:             }
1:         } catch (Exception e) {
1:             log.warn("run", e);
1:         }
1:     }
1: 
1: }
============================================================================