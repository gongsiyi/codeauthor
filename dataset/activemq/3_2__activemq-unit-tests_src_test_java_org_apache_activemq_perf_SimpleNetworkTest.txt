1:5582cc1: /**
1:5582cc1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5582cc1:  * contributor license agreements.  See the NOTICE file distributed with
1:5582cc1:  * this work for additional information regarding copyright ownership.
1:5582cc1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5582cc1:  * (the "License"); you may not use this file except in compliance with
1:5582cc1:  * the License.  You may obtain a copy of the License at
1:5582cc1:  *
1:5582cc1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5582cc1:  *
1:5582cc1:  * Unless required by applicable law or agreed to in writing, software
1:5582cc1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5582cc1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5582cc1:  * See the License for the specific language governing permissions and
1:5582cc1:  * limitations under the License.
1:5582cc1:  */
1:5582cc1: package org.apache.activemq.perf;
2:5582cc1: 
1:5582cc1: import javax.jms.Connection;
1:7f0583d: import javax.jms.Destination;
1:5582cc1: import javax.jms.Session;
1:5582cc1: 
1:7f0583d: import org.apache.activemq.ActiveMQConnectionFactory;
1:7f0583d: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:5582cc1: import org.apache.activemq.broker.BrokerService;
1:5582cc1: import org.apache.activemq.network.NetworkConnector;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:5582cc1: 
1:5582cc1: 
1:5582cc1: public class SimpleNetworkTest extends SimpleTopicTest {
1:5582cc1: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleNetworkTest.class);
1:cbb290c:     protected String consumerBindAddress = "tcp://localhost:61616";
1:5582cc1:     protected String producerBindAddress = "tcp://localhost:61617";
1:5582cc1:     protected static final String CONSUMER_BROKER_NAME = "Consumer";
1:5582cc1:     protected static final String PRODUCER_BROKER_NAME = "Producer";
1:5582cc1:     protected BrokerService consumerBroker;
1:5582cc1:     protected BrokerService producerBroker;
1:7f0583d:     protected ActiveMQConnectionFactory consumerFactory;
1:7f0583d:     protected ActiveMQConnectionFactory producerFactory;
1:7f0583d:     
1:5582cc1:     
1:5582cc1:     protected void setUp() throws Exception {
1:5582cc1:         if (consumerBroker == null) {
1:cbb290c:            consumerBroker = createConsumerBroker(consumerBindAddress);
2:5582cc1:         }
1:5582cc1:         if (producerBroker == null) {
1:5582cc1:             producerBroker = createProducerBroker(producerBindAddress);
1:5582cc1:         }
1:8bf2d78:         consumerFactory = createConnectionFactory(consumerBindAddress);
1:7f0583d:         consumerFactory.setDispatchAsync(true);
1:7f0583d:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
1:7f0583d:         policy.setQueuePrefetch(100);
1:7f0583d:         consumerFactory.setPrefetchPolicy(policy);
1:7f0583d:         producerFactory = createConnectionFactory(producerBindAddress);
1:5582cc1:         Connection con = consumerFactory.createConnection();
1:5582cc1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7f0583d:         
1:7f0583d:         producers = new PerfProducer[numberofProducers*numberOfDestinations];
1:7f0583d:         consumers = new PerfConsumer[numberOfConsumers*numberOfDestinations];
1:8bf2d78:         
1:7f0583d:         for (int k =0; k < numberOfDestinations;k++) {
1:7f0583d:             Destination destination = createDestination(session, destinationName+":"+k);
1:7f0583d:             LOG.info("Testing against destination: " + destination);
1:7f0583d:             for (int i = 0; i < numberOfConsumers; i++) {
1:8bf2d78:                 consumers[i] = createConsumer(consumerFactory, destination, i);
1:8bf2d78:                 consumers[i].start();
1:5582cc1:             }
1:7f0583d:             for (int i = 0; i < numberofProducers; i++) {
1:7f0583d:                 array = new byte[playloadSize];
1:7f0583d:                 for (int j = i; j < array.length; j++) {
1:7f0583d:                     array[j] = (byte)j;
1:7f0583d:                 }
1:8bf2d78:                 producers[i] = createProducer(producerFactory, destination, i, array);
1:8bf2d78:                 producers[i].start();
1:8bf2d78:                
1:7f0583d:             }
1:5582cc1:         }
1:7f0583d:         con.close();
1:5582cc1:     }
1:5582cc1: 
1:5582cc1:     protected void tearDown() throws Exception {
2:5582cc1:         for (int i = 0; i < numberOfConsumers; i++) {
1:5582cc1:             consumers[i].shutDown();
1:5582cc1:         }
2:5582cc1:         for (int i = 0; i < numberofProducers; i++) {
1:5582cc1:             producers[i].shutDown();
1:5582cc1:         }
1:5582cc1:         
1:5582cc1:         if (producerBroker != null) {
1:5582cc1:             producerBroker.stop();
1:5582cc1:             producerBroker = null;
1:5582cc1:         }
1:5582cc1:         if (consumerBroker != null) {
1:5582cc1:             consumerBroker.stop();
1:5582cc1:             consumerBroker = null;
1:5582cc1:         }
1:5582cc1:     }
1:5582cc1:     
1:5582cc1:     protected BrokerService createConsumerBroker(String uri) throws Exception {
1:5582cc1:         BrokerService answer = new BrokerService();
1:5582cc1:         configureConsumerBroker(answer,uri);
1:5582cc1:         answer.start();
1:5582cc1:         return answer;
1:5582cc1:     }
1:5582cc1:     
1:5582cc1:     protected void configureConsumerBroker(BrokerService answer,String uri) throws Exception {
1:7f0583d:         configureBroker(answer);
1:5582cc1:         answer.setPersistent(false);
1:5582cc1:         answer.setBrokerName(CONSUMER_BROKER_NAME);
1:5582cc1:         answer.setDeleteAllMessagesOnStartup(true);
1:5582cc1:         answer.addConnector(uri);
1:5582cc1:         answer.setUseShutdownHook(false);
1:5582cc1:     }
1:5582cc1:     
1:5582cc1:     protected BrokerService createProducerBroker(String uri) throws Exception {
1:5582cc1:         BrokerService answer = new BrokerService();
1:5582cc1:         configureProducerBroker(answer,uri);
1:5582cc1:         answer.start();
1:5582cc1:         return answer;
1:5582cc1:     }
1:5582cc1:     
1:5582cc1:     protected void configureProducerBroker(BrokerService answer,String uri) throws Exception {
1:7f0583d:         configureBroker(answer);
1:5582cc1:         answer.setBrokerName(PRODUCER_BROKER_NAME);
1:7f0583d:         answer.setMonitorConnectionSplits(false);
1:7f0583d:         //answer.setSplitSystemUsageForProducersConsumers(true);
1:26aeb46:         answer.setPersistent(false);
1:5582cc1:         answer.setDeleteAllMessagesOnStartup(true);
1:cbb290c:         NetworkConnector connector = answer.addNetworkConnector("static://"+consumerBindAddress);
1:7f0583d:         //connector.setNetworkTTL(3);
1:7f0583d:         //connector.setDynamicOnly(true);
1:cbb290c:         connector.setDuplex(true);
1:5582cc1:         answer.addConnector(uri);
1:5582cc1:         answer.setUseShutdownHook(false);
1:5582cc1:     }
1:7f0583d:     
1:7f0583d:     protected void configureBroker(BrokerService service) throws Exception{
1:7f0583d:         
1:7f0583d:     }
1:5582cc1: 
1:5582cc1: 
1:5582cc1: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleNetworkTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:6f69f19
/////////////////////////////////////////////////////////////////////////
commit:8bf2d78
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         consumerFactory = createConnectionFactory(consumerBindAddress);
/////////////////////////////////////////////////////////////////////////
1:         
1:                 consumers[i] = createConsumer(consumerFactory, destination, i);
0:                 consumers[i].setSleepDuration(consumerSleepDuration);
1:                 consumers[i].start();
1:                 producers[i] = createProducer(producerFactory, destination, i, array);
1:                 producers[i].start();
1:                
commit:cbb290c
/////////////////////////////////////////////////////////////////////////
1:     protected String consumerBindAddress = "tcp://localhost:61616";
/////////////////////////////////////////////////////////////////////////
1:            consumerBroker = createConsumerBroker(consumerBindAddress);
/////////////////////////////////////////////////////////////////////////
0:                 consumers[consumerCount] = createConsumer(consumerFactory, destination, consumerCount);
/////////////////////////////////////////////////////////////////////////
0:                 producers[producerCount] = createProducer(producerFactory, destination, i, array);
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector connector = answer.addNetworkConnector("static://"+consumerBindAddress);
1:         connector.setDuplex(true);
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
0:     //protected String consumerBindAddress = "tcp://rexmac.home:61616?wireFormat.maxInactivityDuration=1000,tcp://localhost:61617?wireFormat.maxInactivityDuration=1000";
0:     protected String consumerBindAddress = "tcp://rexmac.home:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=2000&socket.tcpNoDelayEnabled=false";
1:     protected ActiveMQConnectionFactory consumerFactory;
1:     protected ActiveMQConnectionFactory producerFactory;
1:     
0:            // consumerBroker = createConsumerBroker(consumerBindAddress);
0:         //consumerFactory = createConnectionFactory("vm://"+CONSUMER_BROKER_NAME);
0:         //producerFactory = createConnectionFactory("vm://"+ PRODUCER_BROKER_NAME);
0:         consumerFactory = createConnectionFactory("failover://("+consumerBindAddress + "," + producerBindAddress +")?randomize=false&backup=false");
0:         //consumerFactory = createConnectionFactory("failover://("+consumerBindAddress+")?backup=true");
1:         consumerFactory.setDispatchAsync(true);
1:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
1:         policy.setQueuePrefetch(100);
1:         consumerFactory.setPrefetchPolicy(policy);
1:         producerFactory = createConnectionFactory(producerBindAddress);
1:         
1:         producers = new PerfProducer[numberofProducers*numberOfDestinations];
1:         consumers = new PerfConsumer[numberOfConsumers*numberOfDestinations];
0:         int consumerCount = 0;
0:         int producerCount = 0;
1:         for (int k =0; k < numberOfDestinations;k++) {
1:             Destination destination = createDestination(session, destinationName+":"+k);
1:             LOG.info("Testing against destination: " + destination);
1:             for (int i = 0; i < numberOfConsumers; i++) {
0:                 consumers[consumerCount] = createConsumer(factory, destination, consumerCount);
0:                 consumers[consumerCount].setSleepDuration(consumerSleepDuration);
0:                 consumerCount++;
1:             for (int i = 0; i < numberofProducers; i++) {
1:                 array = new byte[playloadSize];
1:                 for (int j = i; j < array.length; j++) {
1:                     array[j] = (byte)j;
1:                 }
0:                 producers[producerCount] = createProducer(factory, destination, i, array);
0:                 producerCount++;
1:             }
1:         con.close();
/////////////////////////////////////////////////////////////////////////
1:         configureBroker(answer);
/////////////////////////////////////////////////////////////////////////
1:         configureBroker(answer);
1:         answer.setMonitorConnectionSplits(false);
1:         //answer.setSplitSystemUsageForProducersConsumers(true);
0:         NetworkConnector connector = answer.addNetworkConnector("static://tcp://rexmac.home:61616?wireFormat.maxInactivityDuration=2000");
1:         //connector.setNetworkTTL(3);
1:         //connector.setDynamicOnly(true);
0:         //connector.setDuplex(true);
1:     
1:     protected void configureBroker(BrokerService service) throws Exception{
1:         
1:     }
commit:26aeb46
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         answer.setPersistent(false);
commit:5582cc1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import junit.framework.TestCase;
1: 
1: 
1: public class SimpleNetworkTest extends SimpleTopicTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(SimpleNetworkTest.class);
0:     protected String consumerBindAddress = "tcp://localhost:61616";
1:     protected String producerBindAddress = "tcp://localhost:61617";
1:     protected static final String CONSUMER_BROKER_NAME = "Consumer";
1:     protected static final String PRODUCER_BROKER_NAME = "Producer";
1:     protected BrokerService consumerBroker;
1:     protected BrokerService producerBroker;
0:     protected ConnectionFactory consumerFactory;
0:     protected ConnectionFactory producerFactory;
1:     
1:     protected void setUp() throws Exception {
1:         if (consumerBroker == null) {
0:             consumerBroker = createConsumerBroker(consumerBindAddress);
1:         }
1:         if (producerBroker == null) {
1:             producerBroker = createProducerBroker(producerBindAddress);
1:         }
0:         consumerFactory = createConnectionFactory("vm://"+CONSUMER_BROKER_NAME);
0:         producerFactory = createConnectionFactory("vm://"+ PRODUCER_BROKER_NAME);
0:         //consumerFactory = createConnectionFactory(consumerBindAddress);
0:         //producerFactory = createConnectionFactory(producerBindAddress);
1:         Connection con = consumerFactory.createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         destination = createDestination(session, destinationName);
0:         LOG.info("Testing against destination: " + destination);
0:         LOG.info("Running " + numberofProducers + " producer(s) and " + numberOfConsumers + " consumer(s)");
0:         con.close();
0:         producers = new PerfProducer[numberofProducers];
0:         consumers = new PerfConsumer[numberOfConsumers];
1:         for (int i = 0; i < numberOfConsumers; i++) {
0:             consumers[i] = createConsumer(consumerFactory, destination, i);
0:             consumers[i].setSleepDuration(consumerSleepDuration);
1:         }
1:         for (int i = 0; i < numberofProducers; i++) {
0:             array = new byte[playloadSize];
0:             for (int j = i; j < array.length; j++) {
0:                 array[j] = (byte)j;
1:             }
0:             producers[i] = createProducer(producerFactory, destination, i, array);
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         for (int i = 0; i < numberOfConsumers; i++) {
1:             consumers[i].shutDown();
1:         }
1:         for (int i = 0; i < numberofProducers; i++) {
1:             producers[i].shutDown();
1:         }
1:         
1:         if (producerBroker != null) {
1:             producerBroker.stop();
1:             producerBroker = null;
1:         }
1:         if (consumerBroker != null) {
1:             consumerBroker.stop();
1:             consumerBroker = null;
1:         }
1:     }
1:     
1:     protected BrokerService createConsumerBroker(String uri) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureConsumerBroker(answer,uri);
1:         answer.start();
1:         return answer;
1:     }
1:     
1:     protected void configureConsumerBroker(BrokerService answer,String uri) throws Exception {
1:         answer.setPersistent(false);
1:         answer.setBrokerName(CONSUMER_BROKER_NAME);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.addConnector(uri);
1:         answer.setUseShutdownHook(false);
1:     }
1:     
1:     protected BrokerService createProducerBroker(String uri) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureProducerBroker(answer,uri);
1:         answer.start();
1:         return answer;
1:     }
1:     
1:     protected void configureProducerBroker(BrokerService answer,String uri) throws Exception {
1:         answer.setBrokerName(PRODUCER_BROKER_NAME);
1:         answer.setDeleteAllMessagesOnStartup(true);
0:         NetworkConnector connector = answer.addNetworkConnector("static://"+consumerBindAddress);
0:         connector.setDuplex(true);
1:         answer.addConnector(uri);
1:         answer.setUseShutdownHook(false);
1:     }
1: 
1: 
1: }
============================================================================