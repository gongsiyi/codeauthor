1:e47edd7: /*
1:e47edd7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e47edd7:  * contributor license agreements.  See the NOTICE file distributed with
1:e47edd7:  * this work for additional information regarding copyright ownership.
1:e47edd7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e47edd7:  * (the "License"); you may not use this file except in compliance with
1:e47edd7:  * the License.  You may obtain a copy of the License at
1:e47edd7:  *
1:e47edd7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e47edd7:  *
1:e47edd7:  * Unless required by applicable law or agreed to in writing, software
1:e47edd7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e47edd7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e47edd7:  * See the License for the specific language governing permissions and
1:e47edd7:  * limitations under the License.
1:e47edd7:  */
1:e47edd7: package org.apache.activemq.transport.http;
1:e47edd7: 
1:e47edd7: import java.io.IOException;
1:e47edd7: 
1:e47edd7: import org.apache.activemq.command.BrokerInfo;
1:e47edd7: import org.apache.activemq.command.ConnectionInfo;
1:e47edd7: import org.apache.activemq.transport.InactivityMonitor;
1:e47edd7: import org.apache.activemq.transport.Transport;
1:e47edd7: import org.slf4j.Logger;
1:e47edd7: import org.slf4j.LoggerFactory;
1:e47edd7: 
1:e47edd7: /**
1:e47edd7:  * Inactivity Monitor specialization for use with HTTP based transports.
1:e47edd7:  */
1:e47edd7: public class HttpInactivityMonitor extends InactivityMonitor {
1:e47edd7: 
1:e47edd7:     private static final Logger LOG = LoggerFactory.getLogger(HttpInactivityMonitor.class);
1:e47edd7: 
1:e47edd7:     /**
1:e47edd7:      * @param next
1:e47edd7:      *      The next Transport in the filter chain.
1:e47edd7:      */
1:e47edd7:     public HttpInactivityMonitor(Transport next) {
1:e47edd7:         super(next, null);
1:e47edd7:     }
1:e47edd7: 
1:e47edd7:     @Override
1:e47edd7:     public void onCommand(Object command) {
1:e47edd7:         if (command.getClass() == ConnectionInfo.class || command.getClass() == BrokerInfo.class) {
1:e47edd7:             synchronized (this) {
1:e47edd7:                 try {
1:e47edd7:                     LOG.trace("Connection {} attempted on HTTP based transport: {}", command, this);
1:e47edd7:                     processInboundWireFormatInfo(null);
1:e47edd7:                 } catch (IOException e) {
1:e47edd7:                     onException(e);
1:e47edd7:                 }
1:e47edd7:             }
1:e47edd7:         }
1:e47edd7: 
1:e47edd7:         super.onCommand(command);
1:e47edd7:     }
1:e47edd7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47edd7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.http;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.transport.InactivityMonitor;
1: import org.apache.activemq.transport.Transport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Inactivity Monitor specialization for use with HTTP based transports.
1:  */
1: public class HttpInactivityMonitor extends InactivityMonitor {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(HttpInactivityMonitor.class);
1: 
1:     /**
1:      * @param next
1:      *      The next Transport in the filter chain.
1:      */
1:     public HttpInactivityMonitor(Transport next) {
1:         super(next, null);
1:     }
1: 
1:     @Override
1:     public void onCommand(Object command) {
1:         if (command.getClass() == ConnectionInfo.class || command.getClass() == BrokerInfo.class) {
1:             synchronized (this) {
1:                 try {
1:                     LOG.trace("Connection {} attempted on HTTP based transport: {}", command, this);
1:                     processInboundWireFormatInfo(null);
1:                 } catch (IOException e) {
1:                     onException(e);
1:                 }
1:             }
1:         }
1: 
1:         super.onCommand(command);
1:     }
1: }
============================================================================