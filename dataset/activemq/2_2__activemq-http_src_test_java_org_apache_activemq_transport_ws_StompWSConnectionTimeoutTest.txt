1:3125cae: /**
1:3125cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3125cae:  * contributor license agreements.  See the NOTICE file distributed with
1:3125cae:  * this work for additional information regarding copyright ownership.
1:3125cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3125cae:  * (the "License"); you may not use this file except in compliance with
1:3125cae:  * the License.  You may obtain a copy of the License at
1:3125cae:  *
1:3125cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3125cae:  *
1:3125cae:  * Unless required by applicable law or agreed to in writing, software
1:3125cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3125cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3125cae:  * See the License for the specific language governing permissions and
1:3125cae:  * limitations under the License.
1:3125cae:  */
1:3125cae: package org.apache.activemq.transport.ws;
2:3125cae: 
1:3125cae: import static org.junit.Assert.assertTrue;
1:3125cae: 
1:3125cae: import java.io.IOException;
1:3125cae: import java.util.Vector;
1:3125cae: import java.util.concurrent.TimeUnit;
1:3125cae: 
1:3125cae: import org.apache.activemq.util.Wait;
1:f44c3d2: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:3125cae: import org.junit.Before;
1:3125cae: import org.junit.Test;
1:3125cae: 
1:3125cae: /**
1:3125cae:  * Test that a STOMP WS connection drops if not CONNECT or STOMP frame sent in time.
1:3125cae:  */
1:3125cae: public class StompWSConnectionTimeoutTest extends WSTransportTestSupport {
1:3125cae: 
1:3125cae:     protected WebSocketClient wsClient;
1:3125cae:     protected StompWSConnection wsStompConnection;
1:3125cae: 
1:3125cae:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     @Before
1:3125cae:     public void setUp() throws Exception {
1:3125cae:         super.setUp();
1:3125cae:         wsStompConnection = new StompWSConnection();
1:3125cae: 
1:f44c3d2:         wsClient = new WebSocketClient();
1:f44c3d2:         wsClient.start();
1:3125cae: 
1:f44c3d2:         wsClient.connect(wsStompConnection, wsConnectUri);
1:3125cae:         if (!wsStompConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:3125cae:             throw new IOException("Could not connect to STOMP WS endpoint");
1:3125cae:         }
1:3125cae:     }
1:3125cae: 
1:3125cae:     protected String getConnectorScheme() {
1:3125cae:         return "ws";
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Test(timeout = 90000)
1:3125cae:     public void testInactivityMonitor() throws Exception {
1:3125cae: 
1:3125cae:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:3125cae:              @Override
1:3125cae:              public boolean isSatisified() throws Exception {
1:3125cae:                  return 1 == broker.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:3125cae:              }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:3125cae: 
1:3125cae:         // and it should be closed due to inactivity
1:3125cae:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:3125cae:             @Override
1:3125cae:             public boolean isSatisified() throws Exception {
1:3125cae:                 return 0 == broker.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:3125cae:             }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(60), TimeUnit.MILLISECONDS.toMillis(500)));
1:3125cae: 
1:3125cae:         assertTrue("no exceptions", exceptions.isEmpty());
1:3125cae:     }
1:3125cae: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.util.Vector;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.util.Wait;
0: import org.eclipse.jetty.websocket.WebSocketClient;
0: import org.eclipse.jetty.websocket.WebSocketClientFactory;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test that a STOMP WS connection drops if not CONNECT or STOMP frame sent in time.
1:  */
1: public class StompWSConnectionTimeoutTest extends WSTransportTestSupport {
1: 
1:     protected WebSocketClient wsClient;
1:     protected StompWSConnection wsStompConnection;
1: 
1:     protected Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
0:         WebSocketClientFactory clientFactory = new WebSocketClientFactory();
0:         clientFactory.start();
1: 
0:         wsClient = clientFactory.newWebSocketClient();
1:         wsStompConnection = new StompWSConnection();
1: 
0:         wsClient.open(wsConnectUri, wsStompConnection);
1:         if (!wsStompConnection.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to STOMP WS endpoint");
1:         }
1:     }
1: 
1:     protected String getConnectorScheme() {
1:         return "ws";
1:     }
1: 
1:     @Test(timeout = 90000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  return 1 == broker.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:              }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == broker.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(60), TimeUnit.MILLISECONDS.toMillis(500)));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
/////////////////////////////////////////////////////////////////////////
0: //        WebSocketClientFactory clientFactory = new WebSocketClientFactory();
0: //        clientFactory.start();
1:         wsClient = new WebSocketClient();
1:         wsClient.start();
0: 
0: 
0: 
1:         wsClient.connect(wsStompConnection, wsConnectUri);
============================================================================