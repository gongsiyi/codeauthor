1:fc519e1: /**
1:fc519e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc519e1:  * contributor license agreements.  See the NOTICE file distributed with
1:fc519e1:  * this work for additional information regarding copyright ownership.
1:fc519e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc519e1:  * (the "License"); you may not use this file except in compliance with
1:fc519e1:  * the License.  You may obtain a copy of the License at
1:fc519e1:  *
1:fc519e1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc519e1:  *
1:fc519e1:  * Unless required by applicable law or agreed to in writing, software
1:fc519e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc519e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc519e1:  * See the License for the specific language governing permissions and
1:fc519e1:  * limitations under the License.
1:fc519e1:  */
1:d5dd937: package org.apache.activemq.store.kahadb.plist;
1:d5dd937: 
1:d5dd937: import org.apache.activemq.broker.BrokerService;
1:d5dd937: import org.apache.activemq.broker.region.*;
1:d5dd937: import org.apache.activemq.broker.region.cursors.FilePendingMessageCursor;
1:d5dd937: import org.apache.activemq.broker.region.cursors.FilePendingMessageCursorTestSupport;
1:d5dd937: import org.apache.activemq.command.ActiveMQMessage;
1:d5dd937: import org.apache.activemq.command.ActiveMQQueue;
1:d5dd937: import org.apache.activemq.command.MessageId;
1:d5dd937: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:d5dd937: import org.apache.activemq.usage.SystemUsage;
1:d5dd937: import org.junit.Test;
1:d5dd937: 
1:d5dd937: import static org.junit.Assert.assertEquals;
1:d5dd937: import static org.junit.Assert.assertFalse;
1:d5dd937: 
1:d5dd937: /**
1:d5dd937:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:d5dd937:  */
1:d5dd937: public class KahaDBFilePendingMessageCursorTest extends FilePendingMessageCursorTestSupport {
1:d5dd937: 
1:d5dd937:     @Test
1:d5dd937:     public void testAddRemoveAddIndexSize() throws Exception {
1:d5dd937:         brokerService = new BrokerService();
1:32e63dc:         brokerService.setUseJmx(false);
1:d5dd937:         SystemUsage usage = brokerService.getSystemUsage();
1:d5dd937:         usage.getMemoryUsage().setLimit(1024*150);
1:d5dd937:         String body = new String(new byte[1024]);
1:d5dd937:         Destination destination = new Queue(brokerService, new ActiveMQQueue("Q"), null, new DestinationStatistics(), null);
1:d5dd937: 
1:768fa17:         brokerService.start();
1:d5dd937:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:d5dd937:         underTest.setSystemUsage(usage);
1:d5dd937: 
1:d5dd937:         LOG.info("start");
1:d5dd937:         final PageFile pageFile =  ((PListImpl)underTest.getDiskList()).getPageFile();
1:d5dd937:         LOG.info("page count: " +pageFile.getPageCount());
1:d5dd937:         LOG.info("free count: " + pageFile.getFreePageCount());
1:d5dd937:         LOG.info("content size: " +pageFile.getPageContentSize());
1:d5dd937: 
1:d5dd937:         final long initialPageCount =  pageFile.getPageCount();
1:d5dd937: 
1:d5dd937:         final int numMessages = 1000;
1:d5dd937: 
1:d5dd937:         for (int j=0; j<10; j++) {
1:d5dd937:             // ensure free pages are reused
1:d5dd937:             for (int i=0; i< numMessages; i++) {
1:d5dd937:                 ActiveMQMessage mqMessage = new ActiveMQMessage();
1:d5dd937:                 mqMessage.setStringProperty("body", body);
1:d5dd937:                 mqMessage.setMessageId(new MessageId("1:2:3:" + i));
1:d5dd937:                 mqMessage.setMemoryUsage(usage.getMemoryUsage());
1:d5dd937:                 mqMessage.setRegionDestination(destination);
1:d5dd937:                 underTest.addMessageLast(new IndirectMessageReference(mqMessage));
1:d5dd937:             }
1:d5dd937:             assertFalse("cursor is not full " + usage.getTempUsage(), underTest.isFull());
1:d5dd937: 
1:d5dd937:             underTest.reset();
1:d5dd937:             long receivedCount = 0;
1:d5dd937:             while(underTest.hasNext()) {
1:d5dd937:                 MessageReference ref = underTest.next();
1:d5dd937:                 underTest.remove();
1:a64976a:                 ref.decrementReferenceCount();
1:d5dd937:                 assertEquals("id is correct", receivedCount++, ref.getMessageId().getProducerSequenceId());
1:d5dd937:             }
1:d5dd937:             assertEquals("got all messages back", receivedCount, numMessages);
1:d5dd937:             LOG.info("page count: " +pageFile.getPageCount());
1:d5dd937:             LOG.info("free count: " + pageFile.getFreePageCount());
1:d5dd937:             LOG.info("content size: " + pageFile.getPageContentSize());
1:d5dd937:         }
1:d5dd937: 
1:d5dd937:         assertEquals("expected page usage", initialPageCount, pageFile.getPageCount() - pageFile.getFreePageCount() );
1:d5dd937: 
1:d5dd937:         LOG.info("Destroy");
1:d5dd937:         underTest.destroy();
1:d5dd937:         LOG.info("page count: " + pageFile.getPageCount());
1:d5dd937:         LOG.info("free count: " + pageFile.getFreePageCount());
1:d5dd937:         LOG.info("content size: " + pageFile.getPageContentSize());
1:d5dd937:         assertEquals("expected page usage", initialPageCount -1, pageFile.getPageCount() - pageFile.getFreePageCount() );
1:d5dd937:     }
1:d5dd937: 
1:d5dd937: 
1:d5dd937: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:768fa17
/////////////////////////////////////////////////////////////////////////
1:         brokerService.start();
commit:a64976a
/////////////////////////////////////////////////////////////////////////
1:                 ref.decrementReferenceCount();
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc519e1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.plist;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.*;
1: import org.apache.activemq.broker.region.cursors.FilePendingMessageCursor;
1: import org.apache.activemq.broker.region.cursors.FilePendingMessageCursorTestSupport;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class KahaDBFilePendingMessageCursorTest extends FilePendingMessageCursorTestSupport {
1: 
1:     @Test
1:     public void testAddRemoveAddIndexSize() throws Exception {
1:         brokerService = new BrokerService();
1:         SystemUsage usage = brokerService.getSystemUsage();
1:         usage.getMemoryUsage().setLimit(1024*150);
1:         String body = new String(new byte[1024]);
1:         Destination destination = new Queue(brokerService, new ActiveMQQueue("Q"), null, new DestinationStatistics(), null);
1: 
1:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:         underTest.setSystemUsage(usage);
1: 
1:         LOG.info("start");
1:         final PageFile pageFile =  ((PListImpl)underTest.getDiskList()).getPageFile();
1:         LOG.info("page count: " +pageFile.getPageCount());
1:         LOG.info("free count: " + pageFile.getFreePageCount());
1:         LOG.info("content size: " +pageFile.getPageContentSize());
1: 
1:         final long initialPageCount =  pageFile.getPageCount();
1: 
1:         final int numMessages = 1000;
1: 
1:         for (int j=0; j<10; j++) {
1:             // ensure free pages are reused
1:             for (int i=0; i< numMessages; i++) {
1:                 ActiveMQMessage mqMessage = new ActiveMQMessage();
1:                 mqMessage.setStringProperty("body", body);
1:                 mqMessage.setMessageId(new MessageId("1:2:3:" + i));
1:                 mqMessage.setMemoryUsage(usage.getMemoryUsage());
1:                 mqMessage.setRegionDestination(destination);
1:                 underTest.addMessageLast(new IndirectMessageReference(mqMessage));
1:             }
1:             assertFalse("cursor is not full " + usage.getTempUsage(), underTest.isFull());
1: 
1:             underTest.reset();
1:             long receivedCount = 0;
1:             while(underTest.hasNext()) {
1:                 MessageReference ref = underTest.next();
1:                 underTest.remove();
1:                 assertEquals("id is correct", receivedCount++, ref.getMessageId().getProducerSequenceId());
1:             }
1:             assertEquals("got all messages back", receivedCount, numMessages);
1:             LOG.info("page count: " +pageFile.getPageCount());
1:             LOG.info("free count: " + pageFile.getFreePageCount());
1:             LOG.info("content size: " + pageFile.getPageContentSize());
1:         }
1: 
1:         assertEquals("expected page usage", initialPageCount, pageFile.getPageCount() - pageFile.getFreePageCount() );
1: 
1:         LOG.info("Destroy");
1:         underTest.destroy();
1:         LOG.info("page count: " + pageFile.getPageCount());
1:         LOG.info("free count: " + pageFile.getFreePageCount());
1:         LOG.info("content size: " + pageFile.getPageContentSize());
1:         assertEquals("expected page usage", initialPageCount -1, pageFile.getPageCount() - pageFile.getFreePageCount() );
1:     }
1: 
1: 
1: }
============================================================================