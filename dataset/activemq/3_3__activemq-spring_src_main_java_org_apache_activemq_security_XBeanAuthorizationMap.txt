1:2f469c1: /**
1:2f469c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2f469c1:  * contributor license agreements.  See the NOTICE file distributed with
1:2f469c1:  * this work for additional information regarding copyright ownership.
1:2f469c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2f469c1:  * (the "License"); you may not use this file except in compliance with
1:2f469c1:  * the License.  You may obtain a copy of the License at
1:2f469c1:  *
1:2f469c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2f469c1:  *
1:2f469c1:  * Unless required by applicable law or agreed to in writing, software
1:2f469c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2f469c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2f469c1:  * See the License for the specific language governing permissions and
1:2f469c1:  * limitations under the License.
1:2f469c1:  */
1:2f469c1: package org.apache.activemq.security;
1:2f469c1: 
1:174fe15: import java.util.List;
1:2f469c1: 
1:2f469c1: import javax.annotation.PostConstruct;
1:174fe15: 
1:174fe15: import org.apache.activemq.filter.DestinationMapEntry;
1:174fe15: import org.springframework.beans.factory.InitializingBean;
1:2f469c1: 
1:2f469c1: 
1:2f469c1: /**
1:2f469c1:  *  @org.apache.xbean.XBean element="authorizationMap"
1:2f469c1:  */
1:2f469c1: public class XBeanAuthorizationMap extends DefaultAuthorizationMap implements InitializingBean {
1:2f469c1: 
1:2f469c1:     protected List<DestinationMapEntry> authorizationEntries;
1:2f469c1: 
1:2f469c1:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:2f469c1:      *
1:2f469c1:      * @org.apache.xbean.InitMethod
1:2f469c1:      */
1:174fe15:     @Override
1:2f469c1:     public void afterPropertiesSet() throws Exception {
1:2f469c1:         for (DestinationMapEntry entry : authorizationEntries) {
1:2f469c1:             if (((XBeanAuthorizationEntry)entry).getGroupClass() == null) {
1:2f469c1:                 ((XBeanAuthorizationEntry)entry).setGroupClass(groupClass);
1:2f469c1:             }
1:2f469c1:             ((XBeanAuthorizationEntry)entry).afterPropertiesSet();
1:2f469c1:         }
1:98f707b: 
1:98f707b:         // also check group class of temp destination ACL
1:5648482:         // use the group class of the <authorizationMap> entry if this temp
1:5648482:         // destination entry has no group class specified.
1:5648482:         if (getTempDestinationAuthorizationEntry() != null) {
1:5648482:             if (getTempDestinationAuthorizationEntry().getGroupClass() == null) {
1:5648482:                 getTempDestinationAuthorizationEntry().setGroupClass(groupClass);
1:5648482:             }
1:98f707b:             getTempDestinationAuthorizationEntry().afterPropertiesSet();
1:98f707b:         }
1:5648482: 
1:2f469c1:         super.setEntries(authorizationEntries);
1:2f469c1:     }
1:2f469c1: 
1:2f469c1:     /**
1:2f469c1:      * Sets the individual entries on the authorization map
1:2f469c1:      *
1:2f469c1:      * @org.apache.xbean.ElementType class="org.apache.activemq.security.AuthorizationEntry"
1:2f469c1:      */
1:174fe15:     @Override
1:2f469c1:     @SuppressWarnings("rawtypes")
1:2f469c1:     public void setAuthorizationEntries(List<DestinationMapEntry> entries) {
1:2f469c1:         this.authorizationEntries = entries;
1:2f469c1:     }
1:2f469c1: 
1:2f469c1: }
============================================================================
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:5648482
/////////////////////////////////////////////////////////////////////////
1:         // use the group class of the <authorizationMap> entry if this temp
1:         // destination entry has no group class specified.
1:         if (getTempDestinationAuthorizationEntry() != null) {
1:             if (getTempDestinationAuthorizationEntry().getGroupClass() == null) {
1:                 getTempDestinationAuthorizationEntry().setGroupClass(groupClass);
1:             }
1: 
commit:98f707b
/////////////////////////////////////////////////////////////////////////
1: 
1:         // also check group class of temp destination ACL
0:         if (getTempDestinationAuthorizationEntry() != null && getTempDestinationAuthorizationEntry().getGroupClass() != null) {
1:             getTempDestinationAuthorizationEntry().afterPropertiesSet();
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.springframework.beans.factory.InitializingBean;
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2f469c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import org.apache.activemq.filter.DestinationMapEntry;
0: import org.springframework.beans.factory.InitializingBean;
1: 
1: import javax.annotation.PostConstruct;
0: import java.util.List;
1: 
1: 
1: /**
1:  *  @org.apache.xbean.XBean element="authorizationMap"
1:  */
1: public class XBeanAuthorizationMap extends DefaultAuthorizationMap implements InitializingBean {
1: 
1:     protected List<DestinationMapEntry> authorizationEntries;
1: 
1:     /**
1:      *
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
1:     public void afterPropertiesSet() throws Exception {
1:         for (DestinationMapEntry entry : authorizationEntries) {
1:             if (((XBeanAuthorizationEntry)entry).getGroupClass() == null) {
1:                 ((XBeanAuthorizationEntry)entry).setGroupClass(groupClass);
1:             }
1:             ((XBeanAuthorizationEntry)entry).afterPropertiesSet();
1:         }
1:         super.setEntries(authorizationEntries);
1:     }
1: 
1:     /**
1:      * Sets the individual entries on the authorization map
1:      *
1:      * @org.apache.xbean.ElementType class="org.apache.activemq.security.AuthorizationEntry"
1:      */
1:     @SuppressWarnings("rawtypes")
1:     public void setAuthorizationEntries(List<DestinationMapEntry> entries) {
1:         this.authorizationEntries = entries;
1:     }
1: 
1: }
============================================================================