1:98c5866: /**
1:98c5866:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:98c5866:  * contributor license agreements.  See the NOTICE file distributed with
1:98c5866:  * this work for additional information regarding copyright ownership.
1:98c5866:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:98c5866:  * (the "License"); you may not use this file except in compliance with
1:98c5866:  * the License.  You may obtain a copy of the License at
1:98c5866:  *
1:98c5866:  *      http://www.apache.org/licenses/LICENSE-2.0
1:98c5866:  *
1:98c5866:  * Unless required by applicable law or agreed to in writing, software
1:98c5866:  * distributed under the License is distributed on an "AS IS" BASIS,
1:98c5866:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c5866:  * See the License for the specific language governing permissions and
1:98c5866:  * limitations under the License.
1:98c5866:  */
1:98c5866: package org.apache.activemq.transport.mqtt.auto;
1:98c5866: 
1:98c5866: import static org.junit.Assert.assertTrue;
1:98c5866: 
1:98c5866: import java.security.cert.X509Certificate;
1:98c5866: import java.util.Arrays;
1:98c5866: import java.util.Collection;
1:98c5866: import java.util.List;
1:98c5866: 
1:98c5866: import org.apache.activemq.broker.Broker;
1:98c5866: import org.apache.activemq.broker.BrokerFilter;
1:98c5866: import org.apache.activemq.broker.BrokerPlugin;
1:98c5866: import org.apache.activemq.broker.ConnectionContext;
1:98c5866: import org.apache.activemq.command.ConnectionInfo;
1:98c5866: import org.apache.activemq.transport.mqtt.MQTTTestSupport;
1:98c5866: import org.fusesource.mqtt.client.BlockingConnection;
1:98c5866: import org.fusesource.mqtt.client.MQTT;
1:98c5866: import org.junit.Test;
1:98c5866: import org.junit.runner.RunWith;
1:98c5866: import org.junit.runners.Parameterized;
1:98c5866: import org.junit.runners.Parameterized.Parameters;
1:98c5866: 
1:98c5866: @RunWith(Parameterized.class)
1:98c5866: public class MQTTAutoSslAuthTest extends MQTTTestSupport  {
1:98c5866: 
1:98c5866:     private final String protocol;
1:98c5866:     private boolean hasCertificate = false;
1:98c5866: 
1:98c5866:     @Parameters(name="scheme={0}")
1:98c5866:     public static Collection<Object[]> data() {
1:98c5866:         return Arrays.asList(new Object[][] {
1:98c5866:                 {"auto+nio+ssl"},
1:98c5866:                 {"auto+ssl"}
1:98c5866:             });
1:98c5866:     }
1:98c5866: 
1:98c5866:     /**
1:98c5866:      * @param isNio
1:98c5866:      */
1:98c5866:     public MQTTAutoSslAuthTest(String protocol) {
1:98c5866:         this.protocol = protocol;
1:1e31df9:         protocolConfig = "transport.needClientAuth=true";
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public boolean isUseSSL() {
1:98c5866:         return true;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     public String getProtocolScheme() {
1:98c5866:         return protocol;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Override
1:98c5866:     protected void createPlugins(List<BrokerPlugin> plugins) throws Exception {
1:98c5866:         super.createPlugins(plugins);
1:98c5866:         plugins.add(new BrokerPlugin() {
1:98c5866: 
1:98c5866:             @Override
1:98c5866:             public Broker installPlugin(Broker broker) throws Exception {
1:98c5866:                 return new BrokerFilter(broker) {
1:98c5866: 
1:98c5866:                     @Override
1:98c5866:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:98c5866:                         super.addConnection(context, info);
1:98c5866:                         //The second time should contain the certificate
1:98c5866:                         hasCertificate = info.getTransportContext() instanceof X509Certificate[];
1:98c5866:                     }
1:98c5866:                 };
1:98c5866:             }
1:98c5866:         });
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Test(timeout = 60 * 1000)
1:98c5866:     public void testMQTT311Connection() throws Exception {
1:98c5866:         MQTT mqtt = createMQTTConnection();
1:98c5866:         mqtt.setClientId("foo");
1:98c5866:         mqtt.setVersion("3.1.1");
1:98c5866:         final BlockingConnection connection = mqtt.blockingConnection();
1:98c5866:         connection.connect();
1:98c5866:         connection.disconnect();
1:98c5866: 
1:98c5866:         assertTrue(hasCertificate);
1:98c5866:     }
1:98c5866: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:         protocolConfig = "transport.needClientAuth=true";
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:         protocolConfig = "transport.needClientAuth=true&transport.verifyHostName=false&";
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt.auto;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.security.cert.X509Certificate;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.transport.mqtt.MQTTTestSupport;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class MQTTAutoSslAuthTest extends MQTTTestSupport  {
1: 
1:     private final String protocol;
1:     private boolean hasCertificate = false;
1: 
1:     @Parameters(name="scheme={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto+nio+ssl"},
1:                 {"auto+ssl"}
1:             });
1:     }
1: 
1:     /**
1:      * @param isNio
1:      */
1:     public MQTTAutoSslAuthTest(String protocol) {
1:         this.protocol = protocol;
0:         protocolConfig = "transport.needClientAuth=true";
1:     }
1: 
1:     @Override
1:     public boolean isUseSSL() {
1:         return true;
1:     }
1: 
1:     @Override
1:     public String getProtocolScheme() {
1:         return protocol;
1:     }
1: 
1:     @Override
1:     protected void createPlugins(List<BrokerPlugin> plugins) throws Exception {
1:         super.createPlugins(plugins);
1:         plugins.add(new BrokerPlugin() {
1: 
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1: 
1:                     @Override
1:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:                         super.addConnection(context, info);
1:                         //The second time should contain the certificate
1:                         hasCertificate = info.getTransportContext() instanceof X509Certificate[];
1:                     }
1:                 };
1:             }
1:         });
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testMQTT311Connection() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("foo");
1:         mqtt.setVersion("3.1.1");
1:         final BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1:         connection.disconnect();
1: 
1:         assertTrue(hasCertificate);
1:     }
1: }
============================================================================