1:634b420: /**
1:634b420:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:634b420:  * contributor license agreements.  See the NOTICE file distributed with
1:634b420:  * this work for additional information regarding copyright ownership.
1:634b420:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:634b420:  * (the "License"); you may not use this file except in compliance with
1:634b420:  * the License.  You may obtain a copy of the License at
1:634b420:  *
1:634b420:  *      http://www.apache.org/licenses/LICENSE-2.0
1:634b420:  *
1:634b420:  * Unless required by applicable law or agreed to in writing, software
1:634b420:  * distributed under the License is distributed on an "AS IS" BASIS,
1:634b420:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:634b420:  * See the License for the specific language governing permissions and
1:634b420:  * limitations under the License.
1:634b420:  */
1:634b420: package org.apache.activemq.bugs;
1:634b420: 
1:634b420: import org.apache.activemq.ActiveMQConnection;
1:634b420: import org.apache.activemq.ActiveMQConnectionFactory;
1:634b420: import org.apache.activemq.broker.BrokerService;
1:634b420: import org.apache.activemq.broker.TransportConnector;
1:634b420: import org.apache.activemq.util.Wait;
1:634b420: import org.junit.After;
1:634b420: import org.junit.Before;
1:634b420: import org.junit.Test;
1:634b420: import org.springframework.jms.support.JmsUtils;
1:634b420: 
1:634b420: import javax.jms.Connection;
1:634b420: import javax.jms.ConnectionFactory;
1:634b420: import java.util.LinkedList;
1:634b420: import java.util.concurrent.ConcurrentLinkedQueue;
1:634b420: import java.util.concurrent.CountDownLatch;
1:634b420: import java.util.concurrent.ExecutorService;
1:634b420: import java.util.concurrent.Executors;
1:634b420: 
1:634b420: import static org.junit.Assert.assertEquals;
1:634b420: import static org.junit.Assert.assertTrue;
1:634b420: 
1:634b420: public class AMQ5486Test {
1:634b420: 
1:634b420:     private static final int maxConnections = 100;
1:634b420:     private static final int maxPoolSize = 10;
1:634b420: 
1:634b420:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:634b420:     private String connectionUri;
1:634b420:     private BrokerService service;
1:634b420:     private TransportConnector connector;
1:634b420:     final ConcurrentLinkedQueue<Connection> connections = new ConcurrentLinkedQueue<Connection>();
1:634b420: 
1:634b420:     @Before
1:634b420:     public void setUp() throws Exception {
1:634b420: 
1:634b420:         // max out the pool and reject work
1:634b420:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize", String.valueOf(maxPoolSize));
1:634b420:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.workQueueCapacity", "0");
1:634b420:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.rejectWork", "true");
1:634b420:         service = new BrokerService();
1:634b420:         service.setPersistent(false);
1:634b420:         service.setUseJmx(false);
1:634b420:         connector = service.addConnector("nio://0.0.0.0:0");
1:634b420:         connectionUri = connector.getPublishableConnectString();
1:634b420:         service.start();
1:634b420:         service.waitUntilStarted();
1:634b420:     }
1:634b420: 
1:634b420:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:634b420:         return new ActiveMQConnectionFactory(connectionUri);
1:634b420:     }
1:634b420: 
1:634b420:     @Test
1:634b420:     public void testFailureOnSelectorThreadPoolExhaustion() throws Exception {
1:634b420:         final ConnectionFactory cf = createConnectionFactory();
1:634b420:         final CountDownLatch startupLatch = new CountDownLatch(1);
1:634b420:         final LinkedList<Exception> exceptions = new LinkedList<Exception>();
1:634b420:         for(int i = 0; i < maxConnections; i++) {
1:634b420:             executor.submit(new Runnable() {
1:634b420:                 @Override
1:634b420:                 public void run() {
1:634b420:                     ActiveMQConnection conn = null;
1:634b420:                     try {
1:634b420:                         startupLatch.await();
1:634b420:                         conn = (ActiveMQConnection) cf.createConnection();
1:634b420:                         conn.start();
1:634b420:                         //conn.syncSendPacket(new TransactionInfo(conn.getConnectionInfo().getConnectionId(), null, TransactionInfo.END));
1:634b420:                         connections.add(conn);
1:634b420:                     } catch (Exception e) {
1:634b420:                         exceptions.add(e);
1:634b420:                         JmsUtils.closeConnection(conn);
1:634b420:                     }
1:634b420:                 }
1:634b420:             });
1:634b420:         }
1:634b420: 
1:634b420:         // No connections at first
1:634b420:         assertEquals(0, connector.getConnections().size());
1:634b420:         // Release the latch to set up connections in parallel
1:634b420:         startupLatch.countDown();
1:634b420: 
1:634b420:         final TransportConnector connector = this.connector;
1:634b420: 
1:634b420: 
1:634b420:         // Expect the max connections is created
1:634b420:         assertTrue("Expected some exceptions",
1:634b420:             Wait.waitFor(new Wait.Condition() {
1:634b420:                 @Override
1:634b420:                 public boolean isSatisified() throws Exception {
1:634b420:                     return !exceptions.isEmpty();
1:634b420:                 }
1:634b420:             })
1:634b420:         );
1:634b420: 
1:634b420:         assertTrue("Expected: more than " + (maxPoolSize - 1) + " connections, found: " + connector.getConnections().size(),
1:634b420:                 Wait.waitFor(new Wait.Condition() {
1:634b420:                     @Override
1:634b420:                     public boolean isSatisified() throws Exception {
1:634b420:                         // selector thread will take one thread from the pool
1:634b420:                         return connector.getConnections().size() >= maxPoolSize - 1;
1:634b420:                     }
1:634b420:                 })
1:634b420:         );
1:634b420:     }
1:634b420: 
1:634b420:     @After
1:634b420:     public void tearDown() throws Exception {
1:634b420:         executor.shutdownNow();
1:634b420: 
1:634b420:         for (Connection connection : connections) {
1:634b420:             JmsUtils.closeConnection(connection);
1:634b420:         }
1:634b420: 
1:634b420:         service.stop();
1:634b420:         service.waitUntilStopped();
1:634b420:     }
1:634b420: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:634b420
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.springframework.jms.support.JmsUtils;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import java.util.LinkedList;
1: import java.util.concurrent.ConcurrentLinkedQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class AMQ5486Test {
1: 
1:     private static final int maxConnections = 100;
1:     private static final int maxPoolSize = 10;
1: 
1:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:     private String connectionUri;
1:     private BrokerService service;
1:     private TransportConnector connector;
1:     final ConcurrentLinkedQueue<Connection> connections = new ConcurrentLinkedQueue<Connection>();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         // max out the pool and reject work
1:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize", String.valueOf(maxPoolSize));
1:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.workQueueCapacity", "0");
1:         System.setProperty("org.apache.activemq.transport.nio.SelectorManager.rejectWork", "true");
1:         service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         connector = service.addConnector("nio://0.0.0.0:0");
1:         connectionUri = connector.getPublishableConnectString();
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @Test
1:     public void testFailureOnSelectorThreadPoolExhaustion() throws Exception {
1:         final ConnectionFactory cf = createConnectionFactory();
1:         final CountDownLatch startupLatch = new CountDownLatch(1);
1:         final LinkedList<Exception> exceptions = new LinkedList<Exception>();
1:         for(int i = 0; i < maxConnections; i++) {
1:             executor.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     ActiveMQConnection conn = null;
1:                     try {
1:                         startupLatch.await();
1:                         conn = (ActiveMQConnection) cf.createConnection();
1:                         conn.start();
1:                         //conn.syncSendPacket(new TransactionInfo(conn.getConnectionInfo().getConnectionId(), null, TransactionInfo.END));
1:                         connections.add(conn);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                         JmsUtils.closeConnection(conn);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         // No connections at first
1:         assertEquals(0, connector.getConnections().size());
1:         // Release the latch to set up connections in parallel
1:         startupLatch.countDown();
1: 
1:         final TransportConnector connector = this.connector;
1: 
1: 
1:         // Expect the max connections is created
1:         assertTrue("Expected some exceptions",
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return !exceptions.isEmpty();
1:                 }
1:             })
1:         );
1: 
1:         assertTrue("Expected: more than " + (maxPoolSize - 1) + " connections, found: " + connector.getConnections().size(),
1:                 Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         // selector thread will take one thread from the pool
1:                         return connector.getConnections().size() >= maxPoolSize - 1;
1:                     }
1:                 })
1:         );
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         executor.shutdownNow();
1: 
1:         for (Connection connection : connections) {
1:             JmsUtils.closeConnection(connection);
1:         }
1: 
1:         service.stop();
1:         service.waitUntilStopped();
1:     }
1: }
============================================================================