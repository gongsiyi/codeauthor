1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:5f1adbe: 
1:5f1adbe: import javax.management.Attribute;
1:5f1adbe: import javax.management.AttributeList;
1:5f1adbe: import javax.management.InstanceNotFoundException;
1:5f1adbe: import javax.management.IntrospectionException;
1:5f1adbe: import javax.management.MBeanAttributeInfo;
1:5f1adbe: import javax.management.MBeanServerConnection;
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: import javax.management.ObjectName;
1:5f1adbe: import javax.management.ReflectionException;
1:d5134de: import java.io.IOException;
1:d5134de: import java.util.ArrayList;
1:d5134de: import java.util.Collection;
1:d5134de: import java.util.Iterator;
1:d5134de: import java.util.List;
1:d5134de: import java.util.Set;
4:a107823: 
1:a107823: public class MBeansAttributeQueryFilter extends AbstractQueryFilter {
1:a107823:     public static final String KEY_OBJECT_NAME_ATTRIBUTE = "Attribute:ObjectName:";
1:a107823: 
1:0dec0b6:     private MBeanServerConnection jmxConnection;
1:5f1adbe:     private Set attribView;
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Create an mbean attributes query filter that is able to select specific
1:5f1adbe:      * mbean attributes based on the object name to get.
1:5f1adbe:      * 
1:0dec0b6:      * @param jmxConnection - JMX connection to use.
1:a107823:      * @param attribView - the attributes to extract
1:a107823:      * @param next - the next query filter
1:a107823:      */
1:0dec0b6:     public MBeansAttributeQueryFilter(MBeanServerConnection jmxConnection, Set attribView, MBeansObjectNameQueryFilter next) {
1:a107823:         super(next);
1:0dec0b6:         this.jmxConnection = jmxConnection;
1:5f1adbe:         this.attribView = attribView;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Filter the query by retrieving the attributes specified, this will modify
1:5f1adbe:      * the collection to a list of AttributeList
1:5f1adbe:      * 
1:a107823:      * @param queries - query list
1:5f1adbe:      * @return List of AttributeList, which includes the ObjectName, which has a
1:5f1adbe:      *         key of MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public List query(List queries) throws Exception {
1:a107823:         return getMBeanAttributesCollection(next.query(queries));
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the specified attributes of the mbean
1:5f1adbe:      * 
1:a107823:      * @param result - collection of ObjectInstances and/or ObjectNames
1:a107823:      * @return List of AttributeList
1:a107823:      * @throws IOException
1:a107823:      * @throws ReflectionException
1:a107823:      * @throws InstanceNotFoundException
1:a107823:      * @throws NoSuchMethodException
1:a107823:      */
1:a107823:     protected List getMBeanAttributesCollection(Collection result) throws IOException, ReflectionException, InstanceNotFoundException, NoSuchMethodException, IntrospectionException {
1:a107823:         List mbeansCollection = new ArrayList();
1:a107823: 
1:5f1adbe:         for (Iterator i = result.iterator(); i.hasNext();) {
1:a107823:             Object mbean = i.next();
1:a107823:             if (mbean instanceof ObjectInstance) {
1:d5134de:                 try {
1:d5134de:                     mbeansCollection.add(getMBeanAttributes(((ObjectInstance)mbean).getObjectName(), attribView));
1:d5134de:                 } catch (InstanceNotFoundException ignore) {
1:d5134de:                     // mbean could have been deleted in the meantime
1:d5134de:                 }
1:a107823:             } else if (mbean instanceof ObjectName) {
1:d5134de:                 try {
1:d5134de:                     mbeansCollection.add(getMBeanAttributes((ObjectName)mbean, attribView));
1:d5134de:                 } catch (InstanceNotFoundException ignore) {
1:d5134de:                     // mbean could have been deleted in the meantime
1:d5134de:                 }
1:a107823:             } else {
1:a107823:                 throw new NoSuchMethodException("Cannot get the mbean attributes for class: " + mbean.getClass().getName());
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return mbeansCollection;
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the specified attributes of the mbean
1:5f1adbe:      * 
1:a107823:      * @param obj - mbean ObjectInstance
1:a107823:      * @param attrView - list of attributes to retrieve
1:a107823:      * @return AttributeList for the mbean
1:a107823:      * @throws ReflectionException
1:a107823:      * @throws InstanceNotFoundException
1:a107823:      * @throws IOException
1:a107823:      */
1:a107823:     protected AttributeList getMBeanAttributes(ObjectInstance obj, Set attrView) throws ReflectionException, InstanceNotFoundException, IOException, IntrospectionException {
1:a107823:         return getMBeanAttributes(obj.getObjectName(), attrView);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Retrieve the specified attributes of the mbean
1:5f1adbe:      * 
1:a107823:      * @param objName - mbean ObjectName
1:a107823:      * @param attrView - list of attributes to retrieve
1:a107823:      * @return AttributeList for the mbean
1:a107823:      * @throws IOException
1:a107823:      * @throws ReflectionException
1:a107823:      * @throws InstanceNotFoundException
1:a107823:      */
1:a107823:     protected AttributeList getMBeanAttributes(ObjectName objName, Set attrView) throws IOException, ReflectionException, InstanceNotFoundException, IntrospectionException {
1:a107823:         // If no attribute view specified, get all attributes
1:a107823:         String[] attribs;
1:a107823:         if (attrView == null || attrView.isEmpty()) {
1:0dec0b6:             MBeanAttributeInfo[] infos = jmxConnection.getMBeanInfo(objName).getAttributes();
1:a107823:             attribs = new String[infos.length];
1:a107823: 
1:5f1adbe:             for (int i = 0; i < infos.length; i++) {
1:a107823:                 if (infos[i].isReadable()) {
1:a107823:                     attribs[i] = infos[i].getName();
1:a107823:                 }
1:a107823:             }
1:a107823: 
1:5f1adbe:             // Get selected attributes
1:a107823:         } else {
1:a107823: 
1:a107823:             attribs = new String[attrView.size()];
1:a107823:             int count = 0;
1:5f1adbe:             for (Iterator i = attrView.iterator(); i.hasNext();) {
1:a107823:                 attribs[count++] = (String)i.next();
1:a107823:             }
1:a107823:         }
1:a107823: 
1:0dec0b6:         AttributeList attribList = jmxConnection.getAttributes(objName, attribs);
1:a107823: 
1:a107823:         attribList.add(0, new Attribute(KEY_OBJECT_NAME_ATTRIBUTE, objName));
1:a107823: 
1:a107823:         return attribList;
1:a107823:     }
1:a107823: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d5134de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     mbeansCollection.add(getMBeanAttributes(((ObjectInstance)mbean).getObjectName(), attribView));
1:                 } catch (InstanceNotFoundException ignore) {
1:                     // mbean could have been deleted in the meantime
1:                 }
1:                 try {
1:                     mbeansCollection.add(getMBeanAttributes((ObjectName)mbean, attribView));
1:                 } catch (InstanceNotFoundException ignore) {
1:                     // mbean could have been deleted in the meantime
1:                 }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:     private MBeanServerConnection jmxConnection;
1:      * @param jmxConnection - JMX connection to use.
1:     public MBeansAttributeQueryFilter(MBeanServerConnection jmxConnection, Set attribView, MBeansObjectNameQueryFilter next) {
1:         this.jmxConnection = jmxConnection;
/////////////////////////////////////////////////////////////////////////
1:             MBeanAttributeInfo[] infos = jmxConnection.getMBeanInfo(objName).getAttributes();
/////////////////////////////////////////////////////////////////////////
1:         AttributeList attribList = jmxConnection.getAttributes(objName, attribs);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.Set;
1: 
1: import javax.management.Attribute;
1: import javax.management.AttributeList;
1: import javax.management.InstanceNotFoundException;
1: import javax.management.IntrospectionException;
1: import javax.management.MBeanAttributeInfo;
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import javax.management.ReflectionException;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1:     private Set attribView;
1:      * Create an mbean attributes query filter that is able to select specific
1:      * mbean attributes based on the object name to get.
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         this.attribView = attribView;
1:      * Filter the query by retrieving the attributes specified, this will modify
1:      * the collection to a list of AttributeList
1:      * 
1:      * @return List of AttributeList, which includes the ObjectName, which has a
1:      *         key of MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = result.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:         JMXConnector jmxConnector = JMXConnectorFactory.connect(jmxServiceUrl);
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < infos.length; i++) {
1:             // Get selected attributes
1:             for (Iterator i = attrView.iterator(); i.hasNext();) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXConnector;
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.MBeanServerConnection;
0: import javax.management.ReflectionException;
0: import javax.management.InstanceNotFoundException;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.management.MBeanAttributeInfo;
0: import javax.management.IntrospectionException;
0: import java.util.Set;
0: import java.util.Collection;
0: import java.util.Iterator;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.io.IOException;
1: 
1: public class MBeansAttributeQueryFilter extends AbstractQueryFilter {
1:     public static final String KEY_OBJECT_NAME_ATTRIBUTE = "Attribute:ObjectName:";
1: 
0:     private JMXServiceURL jmxServiceUrl;
0:     private Set           attribView;
1: 
1:     /**
0:      * Create an mbean attributes query filter that is able to select specific mbean attributes based on the object name to get.
0:      * @param jmxServiceUrl - JMX service url to connect to.
1:      * @param attribView - the attributes to extract
1:      * @param next - the next query filter
1:      */
0:     public MBeansAttributeQueryFilter(JMXServiceURL jmxServiceUrl, Set attribView, MBeansObjectNameQueryFilter next) {
1:         super(next);
0:         this.jmxServiceUrl = jmxServiceUrl;
0:         this.attribView    = attribView;
1:     }
1: 
1:     /**
0:      * Filter the query by retrieving the attributes specified, this will modify the collection to a list of AttributeList
1:      * @param queries - query list
0:      * @return List of AttributeList, which includes the ObjectName, which has a key of MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE
1:      * @throws Exception
1:      */
1:     public List query(List queries) throws Exception {
1:         return getMBeanAttributesCollection(next.query(queries));
1:     }
1: 
1:     /**
1:      * Retrieve the specified attributes of the mbean
1:      * @param result - collection of ObjectInstances and/or ObjectNames
1:      * @return List of AttributeList
1:      * @throws IOException
1:      * @throws ReflectionException
1:      * @throws InstanceNotFoundException
1:      * @throws NoSuchMethodException
1:      */
1:     protected List getMBeanAttributesCollection(Collection result) throws IOException, ReflectionException, InstanceNotFoundException, NoSuchMethodException, IntrospectionException {
1:         List mbeansCollection = new ArrayList();
1: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
1:             Object mbean = i.next();
1:             if (mbean instanceof ObjectInstance) {
0:                 mbeansCollection.add(getMBeanAttributes(((ObjectInstance)mbean).getObjectName(), attribView));
1:             } else if (mbean instanceof ObjectName) {
0:                 mbeansCollection.add(getMBeanAttributes((ObjectName)mbean, attribView));
1:             } else {
1:                 throw new NoSuchMethodException("Cannot get the mbean attributes for class: " + mbean.getClass().getName());
1:             }
1:         }
1: 
1:         return mbeansCollection;
1:     }
1: 
1:     /**
1:      * Retrieve the specified attributes of the mbean
1:      * @param obj - mbean ObjectInstance
1:      * @param attrView - list of attributes to retrieve
1:      * @return AttributeList for the mbean
1:      * @throws ReflectionException
1:      * @throws InstanceNotFoundException
1:      * @throws IOException
1:      */
1:     protected AttributeList getMBeanAttributes(ObjectInstance obj, Set attrView) throws ReflectionException, InstanceNotFoundException, IOException, IntrospectionException {
1:         return getMBeanAttributes(obj.getObjectName(), attrView);
1:     }
1: 
1:     /**
1:      * Retrieve the specified attributes of the mbean
1:      * @param objName - mbean ObjectName
1:      * @param attrView - list of attributes to retrieve
1:      * @return AttributeList for the mbean
1:      * @throws IOException
1:      * @throws ReflectionException
1:      * @throws InstanceNotFoundException
1:      */
1:     protected AttributeList getMBeanAttributes(ObjectName objName, Set attrView) throws IOException, ReflectionException, InstanceNotFoundException, IntrospectionException {
0:         JMXConnector jmxConnector    = JMXConnectorFactory.connect(jmxServiceUrl);
0:         MBeanServerConnection server = jmxConnector.getMBeanServerConnection();
1: 
1:         // If no attribute view specified, get all attributes
1:         String[] attribs;
1:         if (attrView == null || attrView.isEmpty()) {
0:             MBeanAttributeInfo[] infos = server.getMBeanInfo(objName).getAttributes();
1:             attribs = new String[infos.length];
1: 
0:             for (int i=0; i<infos.length; i++) {
1:                 if (infos[i].isReadable()) {
1:                     attribs[i] = infos[i].getName();
1:                 }
1:             }
1: 
0:         // Get selected attributes
1:         } else {
1: 
1:             attribs = new String[attrView.size()];
1:             int count = 0;
0:             for (Iterator i=attrView.iterator(); i.hasNext();) {
1:                 attribs[count++] = (String)i.next();
1:             }
1:         }
1: 
0:         AttributeList attribList = server.getAttributes(objName, attribs);
1: 
0:         jmxConnector.close();
1: 
1:         attribList.add(0, new Attribute(KEY_OBJECT_NAME_ATTRIBUTE, objName));
1: 
1:         return attribList;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import javax.management.remote.JMXServiceURL;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXConnector;
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.MBeanServerConnection;
0: import javax.management.ReflectionException;
0: import javax.management.InstanceNotFoundException;
0: import javax.management.AttributeList;
0: import javax.management.Attribute;
0: import javax.management.MBeanAttributeInfo;
0: import javax.management.IntrospectionException;
0: import java.util.Set;
0: import java.util.Collection;
0: import java.util.Iterator;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.io.IOException;
0: 
0: public class MBeansAttributeQueryFilter extends AbstractQueryFilter {
0:     public static final String KEY_OBJECT_NAME_ATTRIBUTE = "Attribute:ObjectName:";
0: 
0:     private JMXServiceURL jmxServiceUrl;
0:     private Set           attribView;
0: 
0:     /**
0:      * Create an mbean attributes query filter that is able to select specific mbean attributes based on the object name to get.
0:      * @param jmxServiceUrl - JMX service url to connect to.
0:      * @param attribView - the attributes to extract
0:      * @param next - the next query filter
0:      */
0:     public MBeansAttributeQueryFilter(JMXServiceURL jmxServiceUrl, Set attribView, MBeansObjectNameQueryFilter next) {
0:         super(next);
0:         this.jmxServiceUrl = jmxServiceUrl;
0:         this.attribView    = attribView;
0:     }
0: 
0:     /**
0:      * Filter the query by retrieving the attributes specified, this will modify the collection to a list of AttributeList
0:      * @param queries - query list
0:      * @return List of AttributeList, which includes the ObjectName, which has a key of MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         return getMBeanAttributesCollection(next.query(queries));
0:     }
0: 
0:     /**
0:      * Retrieve the specified attributes of the mbean
0:      * @param result - collection of ObjectInstances and/or ObjectNames
0:      * @return List of AttributeList
0:      * @throws IOException
0:      * @throws ReflectionException
0:      * @throws InstanceNotFoundException
0:      * @throws NoSuchMethodException
0:      */
0:     protected List getMBeanAttributesCollection(Collection result) throws IOException, ReflectionException, InstanceNotFoundException, NoSuchMethodException, IntrospectionException {
0:         List mbeansCollection = new ArrayList();
0: 
0:         for (Iterator i=result.iterator(); i.hasNext();) {
0:             Object mbean = i.next();
0:             if (mbean instanceof ObjectInstance) {
0:                 mbeansCollection.add(getMBeanAttributes(((ObjectInstance)mbean).getObjectName(), attribView));
0:             } else if (mbean instanceof ObjectName) {
0:                 mbeansCollection.add(getMBeanAttributes((ObjectName)mbean, attribView));
0:             } else {
0:                 throw new NoSuchMethodException("Cannot get the mbean attributes for class: " + mbean.getClass().getName());
0:             }
0:         }
0: 
0:         return mbeansCollection;
0:     }
0: 
0:     /**
0:      * Retrieve the specified attributes of the mbean
0:      * @param obj - mbean ObjectInstance
0:      * @param attrView - list of attributes to retrieve
0:      * @return AttributeList for the mbean
0:      * @throws ReflectionException
0:      * @throws InstanceNotFoundException
0:      * @throws IOException
0:      */
0:     protected AttributeList getMBeanAttributes(ObjectInstance obj, Set attrView) throws ReflectionException, InstanceNotFoundException, IOException, IntrospectionException {
0:         return getMBeanAttributes(obj.getObjectName(), attrView);
0:     }
0: 
0:     /**
0:      * Retrieve the specified attributes of the mbean
0:      * @param objName - mbean ObjectName
0:      * @param attrView - list of attributes to retrieve
0:      * @return AttributeList for the mbean
0:      * @throws IOException
0:      * @throws ReflectionException
0:      * @throws InstanceNotFoundException
0:      */
0:     protected AttributeList getMBeanAttributes(ObjectName objName, Set attrView) throws IOException, ReflectionException, InstanceNotFoundException, IntrospectionException {
0:         JMXConnector jmxConnector    = JMXConnectorFactory.connect(jmxServiceUrl);
0:         MBeanServerConnection server = jmxConnector.getMBeanServerConnection();
0: 
0:         // If no attribute view specified, get all attributes
0:         String[] attribs;
0:         if (attrView == null || attrView.isEmpty()) {
0:             MBeanAttributeInfo[] infos = server.getMBeanInfo(objName).getAttributes();
0:             attribs = new String[infos.length];
0: 
0:             for (int i=0; i<infos.length; i++) {
0:                 if (infos[i].isReadable()) {
0:                     attribs[i] = infos[i].getName();
0:                 }
0:             }
0: 
0:         // Get selected attributes
0:         } else {
0: 
0:             attribs = new String[attrView.size()];
0:             int count = 0;
0:             for (Iterator i=attrView.iterator(); i.hasNext();) {
0:                 attribs[count++] = (String)i.next();
0:             }
0:         }
0: 
0:         AttributeList attribList = server.getAttributes(objName, attribs);
0: 
0:         jmxConnector.close();
0: 
0:         attribList.add(0, new Attribute(KEY_OBJECT_NAME_ATTRIBUTE, objName));
0: 
0:         return attribList;
0:     }
0: }
============================================================================