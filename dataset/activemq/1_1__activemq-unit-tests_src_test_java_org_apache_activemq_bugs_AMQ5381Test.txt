1:6c4f15e: /**
1:6c4f15e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6c4f15e:  * contributor license agreements.  See the NOTICE file distributed with
1:6c4f15e:  * this work for additional information regarding copyright ownership.
1:6c4f15e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6c4f15e:  * (the "License"); you may not use this file except in compliance with
1:6c4f15e:  * the License.  You may obtain a copy of the License at
1:6c4f15e:  *
1:6c4f15e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c4f15e:  *
1:6c4f15e:  * Unless required by applicable law or agreed to in writing, software
1:6c4f15e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c4f15e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c4f15e:  * See the License for the specific language governing permissions and
1:6c4f15e:  * limitations under the License.
1:6c4f15e:  */
1:6c4f15e: package org.apache.activemq.bugs;
1:6c4f15e: 
1:6c4f15e: import java.io.PrintWriter;
1:6c4f15e: import java.io.StringWriter;
1:6c4f15e: import java.util.Arrays;
1:6c4f15e: import java.util.Random;
1:6c4f15e: 
1:6c4f15e: import javax.jms.Connection;
1:6c4f15e: import javax.jms.JMSException;
1:6c4f15e: import javax.jms.MessageConsumer;
1:6c4f15e: import javax.jms.MessageProducer;
1:6c4f15e: import javax.jms.Queue;
1:6c4f15e: import javax.jms.Session;
1:6c4f15e: 
1:6c4f15e: import org.apache.activemq.ActiveMQConnection;
1:6c4f15e: import org.apache.activemq.ActiveMQConnectionFactory;
1:6c4f15e: import org.apache.activemq.broker.BrokerService;
1:6c4f15e: import org.apache.activemq.command.ActiveMQBytesMessage;
1:6c4f15e: import org.apache.activemq.command.ActiveMQMessage;
1:6c4f15e: import org.junit.After;
1:6c4f15e: import org.junit.Assert;
1:6c4f15e: import org.junit.Before;
1:6c4f15e: import org.junit.Rule;
1:6c4f15e: import org.junit.Test;
1:6c4f15e: import org.junit.rules.TestName;
1:6c4f15e: 
1:6c4f15e: public class AMQ5381Test {
1:6c4f15e: 
1:6c4f15e:     public static final byte[] ORIG_MSG_CONTENT = randomByteArray();
1:6c4f15e:     public static final String AMQ5381_EXCEPTION_MESSAGE = "java.util.zip.DataFormatException: incorrect header check";
1:6c4f15e: 
1:6c4f15e:     private BrokerService brokerService;
1:6c4f15e:     private String brokerURI;
1:6c4f15e: 
1:6c4f15e:     @Rule public TestName name = new TestName();
1:6c4f15e: 
1:6c4f15e:     @Before
1:6c4f15e:     public void startBroker() throws Exception {
1:6c4f15e:         brokerService = new BrokerService();
1:6c4f15e:         brokerService.setPersistent(false);
1:6c4f15e:         brokerService.setUseJmx(false);
1:6c4f15e:         brokerService.addConnector("tcp://localhost:0");
1:6c4f15e:         brokerService.start();
1:6c4f15e:         brokerService.waitUntilStarted();
1:6c4f15e: 
1:6c4f15e:         brokerURI = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     @After
1:6c4f15e:     public void stopBroker() throws Exception {
1:6c4f15e:         if (brokerService != null) {
1:6c4f15e:             brokerService.stop();
1:6c4f15e:         }
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     private ActiveMQConnection createConnection(boolean useCompression) throws Exception {
1:6c4f15e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:6c4f15e:         factory.setUseCompression(useCompression);
1:6c4f15e:         Connection connection = factory.createConnection();
1:6c4f15e:         connection.start();
1:6c4f15e:         return (ActiveMQConnection) connection;
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     @Test
1:6c4f15e:     public void amq5381Test() throws Exception {
1:6c4f15e: 
1:6c4f15e:         // Consumer Configured for (useCompression=true)
1:6c4f15e:         final ActiveMQConnection consumerConnection = createConnection(true);
1:6c4f15e:         final Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6c4f15e:         final Queue consumerQueue = consumerSession.createQueue(name.getMethodName());
1:6c4f15e:         final MessageConsumer consumer = consumerSession.createConsumer(consumerQueue);
1:6c4f15e: 
1:6c4f15e:         // Producer Configured for (useCompression=false)
1:6c4f15e:         final ActiveMQConnection producerConnection = createConnection(false);
1:6c4f15e:         final Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6c4f15e:         final Queue producerQueue = producerSession.createQueue(name.getMethodName());
1:6c4f15e: 
1:6c4f15e:         try {
1:6c4f15e: 
1:6c4f15e:             final ActiveMQBytesMessage messageProduced = (ActiveMQBytesMessage) producerSession.createBytesMessage();
1:6c4f15e:             messageProduced.writeBytes(ORIG_MSG_CONTENT);
1:6c4f15e:             Assert.assertFalse(messageProduced.isReadOnlyBody());
1:6c4f15e: 
1:6c4f15e:             Assert.assertFalse(
1:6c4f15e:                 "Produced Message's 'compressed' flag should remain false until the message is sent (where it will be compressed, if necessary)",
1:6c4f15e:                 messageProduced.isCompressed());
1:6c4f15e: 
1:6c4f15e:             final MessageProducer producer = producerSession.createProducer(null);
1:6c4f15e:             producer.send(producerQueue, messageProduced);
1:6c4f15e: 
1:6c4f15e:             Assert.assertEquals("Once sent, the produced Message's 'compressed' flag should match its Connection's 'useCompression' flag",
1:6c4f15e:                 producerConnection.isUseCompression(), messageProduced.isCompressed());
1:6c4f15e: 
1:6c4f15e:             final ActiveMQBytesMessage messageConsumed = (ActiveMQBytesMessage) consumer.receive();
1:6c4f15e:             Assert.assertNotNull(messageConsumed);
1:6c4f15e:             Assert.assertTrue("Consumed Message should be read-only", messageConsumed.isReadOnlyBody());
1:6c4f15e:             Assert.assertEquals("Consumed Message's 'compressed' flag should match the produced Message's 'compressed' flag",
1:6c4f15e:                                 messageProduced.isCompressed(), messageConsumed.isCompressed());
1:6c4f15e: 
1:6c4f15e:             // ensure consumed message content matches what was originally set
1:6c4f15e:             final byte[] consumedMsgContent = new byte[(int) messageConsumed.getBodyLength()];
1:6c4f15e:             messageConsumed.readBytes(consumedMsgContent);
1:6c4f15e: 
1:6c4f15e:             Assert.assertTrue("Consumed Message content should match the original Message content", Arrays.equals(ORIG_MSG_CONTENT, consumedMsgContent));
1:6c4f15e: 
1:6c4f15e:             // make message writable so the consumer can modify and reuse it
1:6c4f15e:             makeWritable(messageConsumed);
1:6c4f15e: 
1:6c4f15e:             // modify message, attempt to trigger DataFormatException due
1:6c4f15e:             // to old incorrect compression logic
1:6c4f15e:             try {
1:6c4f15e:                 messageConsumed.setStringProperty(this.getClass().getName(), "test");
1:6c4f15e:             } catch (JMSException jmsE) {
1:6c4f15e:                 if (AMQ5381_EXCEPTION_MESSAGE.equals(jmsE.getMessage())) {
1:6c4f15e:                     StringWriter sw = new StringWriter();
1:6c4f15e:                     PrintWriter pw = new PrintWriter(sw);
1:6c4f15e:                     jmsE.printStackTrace(pw);
1:6c4f15e: 
1:6c4f15e:                     Assert.fail("AMQ5381 Error State Achieved: attempted to decompress BytesMessage contents that are not compressed\n" + sw.toString());
1:6c4f15e:                 } else {
1:6c4f15e:                     throw jmsE;
1:6c4f15e:                 }
1:6c4f15e:             }
1:6c4f15e: 
1:6c4f15e:             Assert.assertEquals(
1:6c4f15e:                 "The consumed Message's 'compressed' flag should still match the produced Message's 'compressed' flag after it has been made writable",
1:6c4f15e:                 messageProduced.isCompressed(), messageConsumed.isCompressed());
1:6c4f15e: 
1:6c4f15e:             // simulate re-publishing message
1:6c4f15e:             simulatePublish(messageConsumed);
1:6c4f15e: 
1:6c4f15e:             // ensure consumed message content matches what was originally set
1:6c4f15e:             final byte[] modifiedMsgContent = new byte[(int) messageConsumed.getBodyLength()];
1:6c4f15e:             messageConsumed.readBytes(modifiedMsgContent);
1:6c4f15e: 
1:6c4f15e:             Assert.assertTrue(
1:6c4f15e:                 "After the message properties are modified and it is re-published, its message content should still match the original message content",
1:6c4f15e:                 Arrays.equals(ORIG_MSG_CONTENT, modifiedMsgContent));
1:6c4f15e:         } finally {
1:6c4f15e:             producerSession.close();
1:6c4f15e:             producerConnection.close();
1:6c4f15e:             consumerSession.close();
1:6c4f15e:             consumerConnection.close();
1:6c4f15e:         }
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     protected static final int MAX_RANDOM_BYTE_ARRAY_SIZE_KB = 128;
1:6c4f15e: 
1:6c4f15e:     protected static byte[] randomByteArray() {
1:6c4f15e:         final Random random = new Random();
1:6c4f15e:         final byte[] byteArray = new byte[random.nextInt(MAX_RANDOM_BYTE_ARRAY_SIZE_KB * 1024)];
1:6c4f15e:         random.nextBytes(byteArray);
1:6c4f15e: 
1:6c4f15e:         return byteArray;
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     protected static void makeWritable(final ActiveMQMessage message) {
1:6c4f15e:         message.setReadOnlyBody(false);
1:6c4f15e:         message.setReadOnlyProperties(false);
1:6c4f15e:     }
1:6c4f15e: 
1:6c4f15e:     protected static void simulatePublish(final ActiveMQBytesMessage message) throws JMSException {
1:6c4f15e:         message.reset();
1:6c4f15e:         message.onSend();
1:6c4f15e:     }
1:6c4f15e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6c4f15e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.util.Arrays;
1: import java.util.Random;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class AMQ5381Test {
1: 
1:     public static final byte[] ORIG_MSG_CONTENT = randomByteArray();
1:     public static final String AMQ5381_EXCEPTION_MESSAGE = "java.util.zip.DataFormatException: incorrect header check";
1: 
1:     private BrokerService brokerService;
1:     private String brokerURI;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         brokerURI = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     private ActiveMQConnection createConnection(boolean useCompression) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerURI);
1:         factory.setUseCompression(useCompression);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         return (ActiveMQConnection) connection;
1:     }
1: 
1:     @Test
1:     public void amq5381Test() throws Exception {
1: 
1:         // Consumer Configured for (useCompression=true)
1:         final ActiveMQConnection consumerConnection = createConnection(true);
1:         final Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue consumerQueue = consumerSession.createQueue(name.getMethodName());
1:         final MessageConsumer consumer = consumerSession.createConsumer(consumerQueue);
1: 
1:         // Producer Configured for (useCompression=false)
1:         final ActiveMQConnection producerConnection = createConnection(false);
1:         final Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue producerQueue = producerSession.createQueue(name.getMethodName());
1: 
1:         try {
1: 
1:             final ActiveMQBytesMessage messageProduced = (ActiveMQBytesMessage) producerSession.createBytesMessage();
1:             messageProduced.writeBytes(ORIG_MSG_CONTENT);
1:             Assert.assertFalse(messageProduced.isReadOnlyBody());
1: 
1:             Assert.assertFalse(
1:                 "Produced Message's 'compressed' flag should remain false until the message is sent (where it will be compressed, if necessary)",
1:                 messageProduced.isCompressed());
1: 
1:             final MessageProducer producer = producerSession.createProducer(null);
1:             producer.send(producerQueue, messageProduced);
1: 
1:             Assert.assertEquals("Once sent, the produced Message's 'compressed' flag should match its Connection's 'useCompression' flag",
1:                 producerConnection.isUseCompression(), messageProduced.isCompressed());
1: 
1:             final ActiveMQBytesMessage messageConsumed = (ActiveMQBytesMessage) consumer.receive();
1:             Assert.assertNotNull(messageConsumed);
1:             Assert.assertTrue("Consumed Message should be read-only", messageConsumed.isReadOnlyBody());
1:             Assert.assertEquals("Consumed Message's 'compressed' flag should match the produced Message's 'compressed' flag",
1:                                 messageProduced.isCompressed(), messageConsumed.isCompressed());
1: 
1:             // ensure consumed message content matches what was originally set
1:             final byte[] consumedMsgContent = new byte[(int) messageConsumed.getBodyLength()];
1:             messageConsumed.readBytes(consumedMsgContent);
1: 
1:             Assert.assertTrue("Consumed Message content should match the original Message content", Arrays.equals(ORIG_MSG_CONTENT, consumedMsgContent));
1: 
1:             // make message writable so the consumer can modify and reuse it
1:             makeWritable(messageConsumed);
1: 
1:             // modify message, attempt to trigger DataFormatException due
1:             // to old incorrect compression logic
1:             try {
1:                 messageConsumed.setStringProperty(this.getClass().getName(), "test");
1:             } catch (JMSException jmsE) {
1:                 if (AMQ5381_EXCEPTION_MESSAGE.equals(jmsE.getMessage())) {
1:                     StringWriter sw = new StringWriter();
1:                     PrintWriter pw = new PrintWriter(sw);
1:                     jmsE.printStackTrace(pw);
1: 
1:                     Assert.fail("AMQ5381 Error State Achieved: attempted to decompress BytesMessage contents that are not compressed\n" + sw.toString());
1:                 } else {
1:                     throw jmsE;
1:                 }
1:             }
1: 
1:             Assert.assertEquals(
1:                 "The consumed Message's 'compressed' flag should still match the produced Message's 'compressed' flag after it has been made writable",
1:                 messageProduced.isCompressed(), messageConsumed.isCompressed());
1: 
1:             // simulate re-publishing message
1:             simulatePublish(messageConsumed);
1: 
1:             // ensure consumed message content matches what was originally set
1:             final byte[] modifiedMsgContent = new byte[(int) messageConsumed.getBodyLength()];
1:             messageConsumed.readBytes(modifiedMsgContent);
1: 
1:             Assert.assertTrue(
1:                 "After the message properties are modified and it is re-published, its message content should still match the original message content",
1:                 Arrays.equals(ORIG_MSG_CONTENT, modifiedMsgContent));
1:         } finally {
1:             producerSession.close();
1:             producerConnection.close();
1:             consumerSession.close();
1:             consumerConnection.close();
1:         }
1:     }
1: 
1:     protected static final int MAX_RANDOM_BYTE_ARRAY_SIZE_KB = 128;
1: 
1:     protected static byte[] randomByteArray() {
1:         final Random random = new Random();
1:         final byte[] byteArray = new byte[random.nextInt(MAX_RANDOM_BYTE_ARRAY_SIZE_KB * 1024)];
1:         random.nextBytes(byteArray);
1: 
1:         return byteArray;
1:     }
1: 
1:     protected static void makeWritable(final ActiveMQMessage message) {
1:         message.setReadOnlyBody(false);
1:         message.setReadOnlyProperties(false);
1:     }
1: 
1:     protected static void simulatePublish(final ActiveMQBytesMessage message) throws JMSException {
1:         message.reset();
1:         message.onSend();
1:     }
1: }
============================================================================