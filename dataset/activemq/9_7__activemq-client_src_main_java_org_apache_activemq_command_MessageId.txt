1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
11:d29ca2a: 
1:1753a69: import java.util.concurrent.atomic.AtomicReference;
1:1753a69: 
1:d29ca2a: /**
1:4afa5d6:  * @openwire:marshaller code="110"
1:368dc8f:  *
1:d29ca2a:  */
1:0859f30: public class MessageId implements DataStructure, Comparable<MessageId> {
1:d29ca2a: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_ID;
1:230a86c: 
1:b2b4fc8:     protected String textView;
1:230a86c:     protected ProducerId producerId;
1:d29ca2a:     protected long producerSequenceId;
1:d29ca2a:     protected long brokerSequenceId;
1:230a86c: 
1:fc00993:     private transient String key;
1:fc00993:     private transient int hashCode;
1:d29ca2a: 
1:1753a69:     private transient AtomicReference<Object> dataLocator = new AtomicReference<Object>();
1:1753a69:     private transient Object entryLocator;
1:32e63dc:     private transient Object plistLocator;
1:54e2e3b:     private transient Object futureOrSequenceLong;
1:1753a69: 
1:d29ca2a:     public MessageId() {
1:d29ca2a:         this.producerId = new ProducerId();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public MessageId(ProducerInfo producerInfo, long producerSequenceId) {
1:d29ca2a:         this.producerId = producerInfo.getProducerId();
2:d29ca2a:         this.producerSequenceId = producerSequenceId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public MessageId(String messageKey) {
1:da77d2c:         setValue(messageKey);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public MessageId(String producerId, long producerSequenceId) {
1:230a86c:         this(new ProducerId(producerId), producerSequenceId);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public MessageId(ProducerId producerId, long producerSequenceId) {
1:230a86c:         this.producerId = producerId;
1:230a86c:         this.producerSequenceId = producerSequenceId;
1:d29ca2a:     }
1:230a86c: 
1:da77d2c:     /**
1:da77d2c:      * Sets the value as a String
1:da77d2c:      */
1:da77d2c:     public void setValue(String messageKey) {
1:d29ca2a:         key = messageKey;
1:230a86c:         // Parse off the sequenceId
1:230a86c:         int p = messageKey.lastIndexOf(":");
1:230a86c:         if (p >= 0) {
1:230a86c:             producerSequenceId = Long.parseLong(messageKey.substring(p + 1));
1:230a86c:             messageKey = messageKey.substring(0, p);
1:b2b4fc8:         } else {
1:b2b4fc8:             throw new NumberFormatException();
1:230a86c:         }
1:230a86c:         producerId = new ProducerId(messageKey);
1:d29ca2a:     }
1:230a86c: 
1:da77d2c:     /**
1:01cda85:      * Sets the transient text view of the message which will be ignored if the message is marshaled on a transport; so
1:01cda85:      * is only for in-JVM changes to accommodate foreign JMS message IDs
1:da77d2c:      */
1:da77d2c:     public void setTextView(String key) {
1:b2b4fc8:         this.textView = key;
1:d29ca2a:     }
1:d29ca2a: 
1:b2b4fc8:     /**
1:34e8331:      * @openwire:property version=10
1:b2b4fc8:      * @return
1:b2b4fc8:      */
1:b2b4fc8:     public String getTextView() {
1:b2b4fc8:         return textView;
1:b2b4fc8:     }
1:b2b4fc8: 
1:368dc8f:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:368dc8f:     @Override
1:230a86c:     public boolean equals(Object o) {
1:ecf89a6:         if (this == o) {
1:d29ca2a:             return true;
1:ecf89a6:         }
1:ecf89a6:         if (o == null || o.getClass() != getClass()) {
1:d29ca2a:             return false;
1:ecf89a6:         }
1:230a86c: 
1:01cda85:         MessageId id = (MessageId) o;
1:230a86c:         return producerSequenceId == id.producerSequenceId && producerId.equals(id.producerId);
1:d29ca2a:     }
1:230a86c: 
1:368dc8f:     @Override
1:d29ca2a:     public int hashCode() {
1:230a86c:         if (hashCode == 0) {
1:01cda85:             hashCode = producerId.hashCode() ^ (int) producerSequenceId;
1:d29ca2a:         }
1:d29ca2a:         return hashCode;
1:d29ca2a:     }
1:230a86c: 
1:b2b4fc8:     public String toProducerKey() {
1:01cda85:         if (textView == null) {
1:b2b4fc8:             return toString();
1:b2b4fc8:         } else {
1:b2b4fc8:             return producerId.toString() + ":" + producerSequenceId;
1:b2b4fc8:         }
1:b2b4fc8:     }
1:b2b4fc8: 
1:368dc8f:     @Override
1:d29ca2a:     public String toString() {
1:230a86c:         if (key == null) {
1:01cda85:             if (textView != null) {
1:01cda85:                 if (textView.startsWith("ID:")) {
1:eec7d74:                     key = textView;
1:eec7d74:                 } else {
1:01cda85:                     key = "ID:" + textView;
1:eec7d74:                 }
1:b2b4fc8:             } else {
1:b2b4fc8:                 key = producerId.toString() + ":" + producerSequenceId;
1:b2b4fc8:             }
1:d29ca2a:         }
1:d29ca2a:         return key;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ProducerId getProducerId() {
1:d29ca2a:         return producerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setProducerId(ProducerId producerId) {
1:d29ca2a:         this.producerId = producerId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public long getProducerSequenceId() {
1:d29ca2a:         return producerSequenceId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setProducerSequenceId(long producerSequenceId) {
1:d29ca2a:         this.producerSequenceId = producerSequenceId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public long getBrokerSequenceId() {
1:d29ca2a:         return brokerSequenceId;
1:230a86c:     }
1:230a86c: 
1:d29ca2a:     public void setBrokerSequenceId(long brokerSequenceId) {
1:d29ca2a:         this.brokerSequenceId = brokerSequenceId;
1:d29ca2a:     }
1:d29ca2a: 
1:368dc8f:     @Override
1:d29ca2a:     public boolean isMarshallAware() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public MessageId copy() {
1:7dde85b:         MessageId copy = new MessageId(producerId, producerSequenceId);
1:7dde85b:         copy.key = key;
1:230a86c:         copy.brokerSequenceId = brokerSequenceId;
1:d344aa7:         copy.dataLocator = dataLocator;
1:32e63dc:         copy.entryLocator = entryLocator;
1:54e2e3b:         copy.futureOrSequenceLong = futureOrSequenceLong;
1:32e63dc:         copy.plistLocator = plistLocator;
1:368dc8f:         copy.textView = textView;
1:7dde85b:         return copy;
1:d29ca2a:     }
1:d29ca2a: 
1:0859f30:     /**
1:1753a69:      * @param
1:0859f30:      * @return
1:0859f30:      * @see java.lang.Comparable#compareTo(java.lang.Object)
1:0859f30:      */
1:368dc8f:     @Override
1:230a86c:     public int compareTo(MessageId other) {
1:0859f30:         int result = -1;
1:0859f30:         if (other != null) {
1:0859f30:             result = this.toString().compareTo(other.toString());
1:d29ca2a:         }
1:0859f30:         return result;
1:230a86c:     }
1:1753a69: 
1:1753a69:     /**
1:01cda85:      * @return a locator which aids a message store in loading a message faster. Only used by the message stores.
1:1753a69:      */
1:1753a69:     public Object getDataLocator() {
1:1753a69:         return dataLocator.get();
1:1753a69:     }
1:1753a69: 
1:1753a69:     /**
1:01cda85:      * Sets a locator which aids a message store in loading a message faster. Only used by the message stores.
1:1753a69:      */
1:1753a69:     public void setDataLocator(Object value) {
1:1753a69:         this.dataLocator.set(value);
1:1753a69:     }
1:1753a69: 
1:54e2e3b:     public Object getFutureOrSequenceLong() {
1:54e2e3b:         return futureOrSequenceLong;
1:54e2e3b:     }
1:54e2e3b: 
1:54e2e3b:     public void setFutureOrSequenceLong(Object futureOrSequenceLong) {
1:54e2e3b:         this.futureOrSequenceLong = futureOrSequenceLong;
1:54e2e3b:     }
1:54e2e3b: 
1:1753a69:     public Object getEntryLocator() {
1:1753a69:         return entryLocator;
1:1753a69:     }
1:1753a69: 
1:1753a69:     public void setEntryLocator(Object entryLocator) {
1:1753a69:         this.entryLocator = entryLocator;
1:1753a69:     }
1:32e63dc: 
1:32e63dc:     public Object getPlistLocator() {
1:32e63dc:         return plistLocator;
1:32e63dc:     }
1:32e63dc: 
1:32e63dc:     public void setPlistLocator(Object plistLocator) {
1:32e63dc:         this.plistLocator = plistLocator;
1:32e63dc:     }
1:df06bda: 
1:df06bda:     private Object readResolve() {
1:df06bda:         dataLocator = new AtomicReference<Object>();
1:df06bda:         return this;
1:df06bda:     }
2:0859f30: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:df06bda
/////////////////////////////////////////////////////////////////////////
1: 
1:     private Object readResolve() {
1:         dataLocator = new AtomicReference<Object>();
1:         return this;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:     private transient Object futureOrSequenceLong;
/////////////////////////////////////////////////////////////////////////
1:         copy.futureOrSequenceLong = futureOrSequenceLong;
/////////////////////////////////////////////////////////////////////////
1:     public Object getFutureOrSequenceLong() {
1:         return futureOrSequenceLong;
1:     }
1: 
1:     public void setFutureOrSequenceLong(Object futureOrSequenceLong) {
1:         this.futureOrSequenceLong = futureOrSequenceLong;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:01cda85
/////////////////////////////////////////////////////////////////////////
1:      * Sets the transient text view of the message which will be ignored if the message is marshaled on a transport; so
1:      * is only for in-JVM changes to accommodate foreign JMS message IDs
/////////////////////////////////////////////////////////////////////////
1:         MessageId id = (MessageId) o;
1:             hashCode = producerId.hashCode() ^ (int) producerSequenceId;
1:         if (textView == null) {
/////////////////////////////////////////////////////////////////////////
1:             if (textView != null) {
1:                 if (textView.startsWith("ID:")) {
1:                     key = "ID:" + textView;
/////////////////////////////////////////////////////////////////////////
1:      * @return a locator which aids a message store in loading a message faster. Only used by the message stores.
1:      * Sets a locator which aids a message store in loading a message faster. Only used by the message stores.
commit:368dc8f
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         copy.textView = textView;
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:eec7d74
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 if( textView.startsWith("ID:") ) {
1:                     key = textView;
1:                 } else {
0:                     key = "ID:"+textView;
1:                 }
commit:34e8331
/////////////////////////////////////////////////////////////////////////
1:      * @openwire:property version=10
commit:b2b4fc8
/////////////////////////////////////////////////////////////////////////
1:     protected String textView;
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             throw new NumberFormatException();
/////////////////////////////////////////////////////////////////////////
1:         this.textView = key;
1:     /**
1:      * @return
1:      */
1:     public String getTextView() {
1:         return textView;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String toProducerKey() {
0:         if( textView==null ) {
1:             return toString();
1:         } else {
1:             return producerId.toString() + ":" + producerSequenceId;
1:         }
1:     }
1: 
0:             if( textView!=null ) {
0:                 key = textView;
1:             } else {
1:                 key = producerId.toString() + ":" + producerSequenceId;
1:             }
commit:d344aa7
/////////////////////////////////////////////////////////////////////////
1:         copy.dataLocator = dataLocator;
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
1:     private transient Object plistLocator;
/////////////////////////////////////////////////////////////////////////
1:         copy.entryLocator = entryLocator;
1:         copy.plistLocator = plistLocator;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Object getPlistLocator() {
1:         return plistLocator;
1:     }
1: 
1:     public void setPlistLocator(Object plistLocator) {
1:         this.plistLocator = plistLocator;
1:     }
commit:9a8f6e4
commit:1753a69
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private transient AtomicReference<Object> dataLocator = new AtomicReference<Object>();
1:     private transient Object entryLocator;
1: 
/////////////////////////////////////////////////////////////////////////
0:         copy.dataLocator = dataLocator;
1:      * @param
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * @return a locator which aids a message store in loading a message faster.  Only used
0:      * by the message stores.
1:      */
1:     public Object getDataLocator() {
1:         return dataLocator.get();
1:     }
1: 
1:     /**
0:      * Sets a locator which aids a message store in loading a message faster.  Only used
0:      * by the message stores.
1:      */
1:     public void setDataLocator(Object value) {
1:         this.dataLocator.set(value);
1:     }
1: 
1:     public Object getEntryLocator() {
1:         return entryLocator;
1:     }
1: 
1:     public void setEntryLocator(Object entryLocator) {
1:         this.entryLocator = entryLocator;
1:     }
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (this == o) {
1:         }
1:         if (o == null || o.getClass() != getClass()) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private transient String key;
1:     private transient int hashCode;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_ID;
1: 
1:     protected ProducerId producerId;
1: 
0:     transient private String key;
0:     transient private int hashCode;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         this(new ProducerId(producerId), producerSequenceId);
1: 
1:         this.producerId = producerId;
1:         this.producerSequenceId = producerSequenceId;
1: 
1:         // Parse off the sequenceId
1:         int p = messageKey.lastIndexOf(":");
1:         if (p >= 0) {
1:             producerSequenceId = Long.parseLong(messageKey.substring(p + 1));
1:             messageKey = messageKey.substring(0, p);
1:         }
1:         producerId = new ProducerId(messageKey);
1: 
0:      * Sets the transient text view of the message which will be ignored if the
0:      * message is marshaled on a transport; so is only for in-JVM changes to
0:      * accommodate foreign JMS message IDs
/////////////////////////////////////////////////////////////////////////
1:     public boolean equals(Object o) {
0:         if (this == o)
0:         if (o == null || o.getClass() != getClass())
1: 
0:         MessageId id = (MessageId)o;
1:         return producerSequenceId == id.producerSequenceId && producerId.equals(id.producerId);
1: 
1:         if (hashCode == 0) {
1: 
1:         if (key == null) {
0:             key = producerId.toString() + ":" + producerSequenceId;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public MessageId copy() {
1:         copy.brokerSequenceId = brokerSequenceId;
/////////////////////////////////////////////////////////////////////////
1:     public int compareTo(MessageId other) {
1:     }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: 
1: /**
0:  * @openwire:marshaller
0:  * @version $Revision: 1.12 $
1:  */
0: public class MessageId implements DataStructure {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.MESSAGE_ID;
1:     
0:     protected ProducerId producerId;    
1:     protected long producerSequenceId;
1:     protected long brokerSequenceId;
1:     
0:     transient private String key;    
0:     transient private int hashCode;    
1: 
1:     public MessageId() {
1:         this.producerId = new ProducerId();
1:     }
1:     
1:     public MessageId(ProducerInfo producerInfo, long producerSequenceId) {
1:         this.producerId = producerInfo.getProducerId();
1:         this.producerSequenceId = producerSequenceId;
1:     }
1: 
1:     public MessageId(String messageKey) {
0:         setMessageKey(messageKey);
1:     }
1:     
1:     public MessageId(String producerId, long producerSequenceId) {
0:         this( new ProducerId(producerId), producerSequenceId);
1:     }
1:     
1:     public MessageId(ProducerId producerId, long producerSequenceId) {
0:         this.producerId=producerId;
1:         this.producerSequenceId = producerSequenceId;        
1:     }
1:     
0:     public void setMessageKey(String messageKey) {
1:         key = messageKey;
0:         // Parse off the sequenceId
0:         int p = messageKey.lastIndexOf(":");
0:         if( p >= 0 ) {
0:             producerSequenceId = Long.parseLong(messageKey.substring(p+1));
0:             messageKey = messageKey.substring(0,p);
1:         }
0:         producerId = new ProducerId(messageKey);
1:     }
1:     
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
0:     public boolean equals(Object o) {        
0:         if( this == o )
1:             return true;
0:         if( o==null || o.getClass() != getClass() )
1:             return false;
1:         
0:         MessageId id = (MessageId) o;
0:         return producerSequenceId==id.producerSequenceId && producerId.equals(id.producerId);
1:     }
1:     
1:     public int hashCode() {
0:         if( hashCode == 0 ) {
0:             hashCode = producerId.hashCode() ^ (int)producerSequenceId;
1:         }
1:         return hashCode;
1:     }
1:     
1:     public String toString() {
0:         if(key==null) {
0:             key = producerId.toString()+":"+producerSequenceId;
1:         }
1:         return key;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ProducerId getProducerId() {
1:         return producerId;
1:     }
1:     public void setProducerId(ProducerId producerId) {
1:         this.producerId = producerId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getProducerSequenceId() {
1:         return producerSequenceId;
1:     }
1:     public void setProducerSequenceId(long producerSequenceId) {
1:         this.producerSequenceId = producerSequenceId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getBrokerSequenceId() {
1:         return brokerSequenceId;
1:     }    
1:     public void setBrokerSequenceId(long brokerSequenceId) {
1:         this.brokerSequenceId = brokerSequenceId;
1:     }
1: 
1:     public boolean isMarshallAware() {
1:         return false;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c0a8060
/////////////////////////////////////////////////////////////////////////
0:         copy.dataLocator = new AtomicReference<Object>(dataLocator != null ? dataLocator.get() : null);
commit:64f3492
/////////////////////////////////////////////////////////////////////////
0:         copy.dataLocator = new AtomicReference<Object>(dataLocator.get());
author:Robert Davies
-------------------------------------------------------------------------------
commit:0859f30
/////////////////////////////////////////////////////////////////////////
1: public class MessageId implements DataStructure, Comparable<MessageId> {
/////////////////////////////////////////////////////////////////////////
1:     }
0: 
1:     /**
0:      * @param o
1:      * @return
1:      * @see java.lang.Comparable#compareTo(java.lang.Object)
1:      */
0:     public int compareTo(MessageId other){
1:         int result = -1;
1:         if (other != null) {
1:             result = this.toString().compareTo(other.toString());
1:         }
1:         return result;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:7dde85b
/////////////////////////////////////////////////////////////////////////
0:     
0:     public MessageId copy(){
1:         MessageId copy = new MessageId(producerId, producerSequenceId);
1:         copy.key = key;
0:         copy.brokerSequenceId = brokerSequenceId ;
1:         return copy;
0:     }    
author:James Strachan
-------------------------------------------------------------------------------
commit:da77d2c
/////////////////////////////////////////////////////////////////////////
1:         setValue(messageKey);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Sets the value as a String
1:      */
1:     public void setValue(String messageKey) {
0:             // Parse off the sequenceId
0:             int p = messageKey.lastIndexOf(":");
0:             if( p >= 0 ) {
0:                 producerSequenceId = Long.parseLong(messageKey.substring(p+1));
0:                 messageKey = messageKey.substring(0,p);
0:             }
0:             producerId = new ProducerId(messageKey);
1:     /**
0:      * Sets the transient text view of the message which will be ignored
0:      * if the message is marshaled on a transport; so is only for in-JVM changes
0:      * to accommodate foreign JMS message IDs
1:      */
1:     public void setTextView(String key) {
0:         this.key = key;
0:     }
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="110"
============================================================================