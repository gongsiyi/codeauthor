1:c0ba767: /**
1:c0ba767:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0ba767:  * contributor license agreements.  See the NOTICE file distributed with
1:c0ba767:  * this work for additional information regarding copyright ownership.
1:c0ba767:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0ba767:  * (the "License"); you may not use this file except in compliance with
1:c0ba767:  * the License.  You may obtain a copy of the License at
1:c0ba767:  *
1:c0ba767:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0ba767:  *
1:c0ba767:  * Unless required by applicable law or agreed to in writing, software
1:c0ba767:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0ba767:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0ba767:  * See the License for the specific language governing permissions and
1:c0ba767:  * limitations under the License.
1:c0ba767:  */
1:c0ba767: 
1:c0ba767: import javax.jms.Connection;
1:c0ba767: import javax.jms.Message;
1:c0ba767: import javax.jms.MessageConsumer;
1:c0ba767: import javax.jms.MessageListener;
1:c0ba767: import javax.jms.Session;
1:c0ba767: 
1:c0ba767: import org.apache.activemq.ActiveMQConnectionFactory;
1:c0ba767: import org.apache.activemq.command.ActiveMQObjectMessage;
1:c0ba767: import org.apache.log4j.Logger;
1:c0ba767: import org.apache.log4j.spi.LoggingEvent;
1:c0ba767: 
1:c0ba767: 
1:c0ba767: /**
1:c0ba767:  * A simple example of log4j jms appender in conjuction with ActiveMQ
1:c0ba767:  */
1:c0ba767: public class Log4jJMSAppenderExample implements MessageListener {
1:c0ba767: 
1:c0ba767: 	public Log4jJMSAppenderExample() throws Exception {
1:c0ba767: 		// create a logTopic topic consumer
1:c0ba767: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:c0ba767: 		Connection conn = factory.createConnection();
1:c0ba767: 		Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c0ba767: 		conn.start();
1:c0ba767: 		MessageConsumer consumer = sess.createConsumer(sess.createTopic("logTopic"));
1:c0ba767: 		consumer.setMessageListener(this);
1:c0ba767: 		// log a message
1:c0ba767: 		Logger log = Logger.getLogger(Log4jJMSAppenderExample.class);
1:c0ba767: 		log.info("Test log");
1:c0ba767: 		// clean up
1:c0ba767: 		Thread.sleep(1000);
1:c0ba767: 		consumer.close();
1:c0ba767: 		sess.close();
1:c0ba767: 		conn.close();
1:c0ba767: 		System.exit(1);
1:c0ba767: 	}
1:c0ba767: 	
1:c0ba767: 	public static void main(String[] args) throws Exception {
1:c0ba767: 		new Log4jJMSAppenderExample();
1:c0ba767: 	}
1:c0ba767: 
1:c0ba767: 	public void onMessage(Message message) {
1:c0ba767: 		try {
1:c0ba767: 			// receive log event in your consumer
1:c0ba767: 			LoggingEvent event = (LoggingEvent)((ActiveMQObjectMessage)message).getObject();
1:c0ba767: 			System.out.println("Received log [" + event.getLevel() + "]: "+ event.getMessage());
1:c0ba767: 		} catch (Exception e) {
1:c0ba767: 			e.printStackTrace();
1:c0ba767: 		}
1:c0ba767: 	}
1:c0ba767: 	
1:c0ba767: 	
1:c0ba767: 	
1:c0ba767: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:c0ba767
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: 
1: /**
1:  * A simple example of log4j jms appender in conjuction with ActiveMQ
1:  */
1: public class Log4jJMSAppenderExample implements MessageListener {
1: 
1: 	public Log4jJMSAppenderExample() throws Exception {
1: 		// create a logTopic topic consumer
1: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1: 		Connection conn = factory.createConnection();
1: 		Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		conn.start();
1: 		MessageConsumer consumer = sess.createConsumer(sess.createTopic("logTopic"));
1: 		consumer.setMessageListener(this);
1: 		// log a message
1: 		Logger log = Logger.getLogger(Log4jJMSAppenderExample.class);
1: 		log.info("Test log");
1: 		// clean up
1: 		Thread.sleep(1000);
1: 		consumer.close();
1: 		sess.close();
1: 		conn.close();
1: 		System.exit(1);
1: 	}
1: 	
1: 	public static void main(String[] args) throws Exception {
1: 		new Log4jJMSAppenderExample();
1: 	}
1: 
1: 	public void onMessage(Message message) {
1: 		try {
1: 			// receive log event in your consumer
1: 			LoggingEvent event = (LoggingEvent)((ActiveMQObjectMessage)message).getObject();
1: 			System.out.println("Received log [" + event.getLevel() + "]: "+ event.getMessage());
1: 		} catch (Exception e) {
1: 			e.printStackTrace();
1: 		}
1: 	}
1: 	
1: 	
1: 	
1: }
============================================================================