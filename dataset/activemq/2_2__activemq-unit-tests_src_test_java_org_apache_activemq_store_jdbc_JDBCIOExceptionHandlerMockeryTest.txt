1:7d98b32: /**
1:7d98b32:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d98b32:  * contributor license agreements.  See the NOTICE file distributed with
1:7d98b32:  * this work for additional information regarding copyright ownership.
1:7d98b32:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d98b32:  * (the "License"); you may not use this file except in compliance with
1:7d98b32:  * the License.  You may obtain a copy of the License at
1:7d98b32:  *
1:7d98b32:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d98b32:  *
1:7d98b32:  * Unless required by applicable law or agreed to in writing, software
1:7d98b32:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d98b32:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d98b32:  * See the License for the specific language governing permissions and
1:7d98b32:  * limitations under the License.
1:7d98b32:  */
1:7d98b32: package org.apache.activemq.store.jdbc;
1:7d98b32: 
1:7d98b32: import java.io.IOException;
1:7d98b32: import java.util.HashMap;
1:7d98b32: import org.apache.activemq.broker.BrokerService;
1:7d98b32: import org.apache.activemq.broker.Locker;
1:7d98b32: import org.apache.activemq.broker.SuppressReplyException;
1:e16815a: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1:7d98b32: import org.apache.activemq.util.ServiceStopper;
1:7d98b32: import org.apache.activemq.util.Wait;
1:7d98b32: import org.jmock.Expectations;
1:7d98b32: import org.jmock.Mockery;
1:7d98b32: import org.jmock.States;
1:7d98b32: import org.jmock.lib.legacy.ClassImposteriser;
1:7d98b32: import org.junit.Test;
1:7d98b32: import org.slf4j.Logger;
1:7d98b32: import org.slf4j.LoggerFactory;
1:7d98b32: 
1:7d98b32: 
1:7d98b32: import static org.junit.Assert.assertTrue;
1:7d98b32: import static org.junit.Assert.fail;
1:7d98b32: 
1:7d98b32: public class JDBCIOExceptionHandlerMockeryTest {
1:7d98b32: 
1:7d98b32:     private static final Logger LOG = LoggerFactory.getLogger(JDBCIOExceptionHandlerMockeryTest.class);
1:7d98b32:     private HashMap<Thread, Throwable> exceptions = new HashMap<Thread, Throwable>();
1:7d98b32: 
1:7d98b32:     @Test
1:7d98b32:     public void testShutdownWithoutTransportRestart() throws Exception {
1:7d98b32: 
1:7d98b32:         Mockery context = new Mockery() {{
1:7d98b32:             setImposteriser(ClassImposteriser.INSTANCE);
1:7d98b32:         }};
1:7d98b32: 
1:7d98b32:         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
1:7d98b32:             @Override
1:7d98b32:             public void uncaughtException(Thread t, Throwable e) {
1:7d98b32:                 LOG.error("unexpected exception {} on thread {}", e, t);
1:7d98b32:                 exceptions.put(t, e);
1:7d98b32:             }
1:7d98b32:         });
1:7d98b32: 
1:7d98b32:         final BrokerService brokerService = context.mock(BrokerService.class);
1:7d98b32:         final JDBCPersistenceAdapter jdbcPersistenceAdapter = context.mock(JDBCPersistenceAdapter.class);
1:7d98b32:         final Locker locker = context.mock(Locker.class);
1:7d98b32: 
1:7d98b32:         final States jdbcConn = context.states("jdbc").startsAs("down");
1:7d98b32:         final States broker = context.states("broker").startsAs("started");
1:7d98b32: 
1:7d98b32:         // simulate jdbc up between hasLock and checkpoint, so hasLock fails to verify
1:7d98b32:         context.checking(new Expectations() {{
1:c7291f1:             allowing(brokerService).isStarted();
1:c7291f1:             will(returnValue(true));
1:7d98b32:             allowing(brokerService).isRestartAllowed();
1:7d98b32:             will(returnValue(false));
1:f09000d:             allowing(brokerService).setSystemExitOnShutdown(with(false));
1:7d98b32:             allowing(brokerService).stopAllConnectors(with(any(ServiceStopper.class)));
1:7d98b32:             allowing(brokerService).getPersistenceAdapter();
1:7d98b32:             will(returnValue(jdbcPersistenceAdapter));
1:d70852e:             allowing(jdbcPersistenceAdapter).allowIOResumption();
1:7d98b32:             allowing(jdbcPersistenceAdapter).getLocker();
1:7d98b32:             will(returnValue(locker));
1:7d98b32:             allowing(locker).keepAlive();
1:7d98b32:             when(jdbcConn.is("down"));
1:7d98b32:             will(returnValue(true));
1:7d98b32:             allowing(locker).keepAlive();
1:7d98b32:             when(jdbcConn.is("up"));
1:7d98b32:             will(returnValue(false));
1:7d98b32: 
1:7d98b32:             allowing(jdbcPersistenceAdapter).checkpoint(with(true));
1:7d98b32:             then(jdbcConn.is("up"));
1:7d98b32:             allowing(brokerService).stop();
1:7d98b32:             then(broker.is("stopped"));
1:7d98b32: 
1:7d98b32:         }});
1:7d98b32: 
1:e16815a:         LeaseLockerIOExceptionHandler underTest = new LeaseLockerIOExceptionHandler();
1:7d98b32:         underTest.setBrokerService(brokerService);
1:7d98b32: 
1:7d98b32:         try {
1:7d98b32:             underTest.handle(new IOException());
1:7d98b32:             fail("except suppress reply ex");
1:7d98b32:         } catch (SuppressReplyException expected) {
1:7d98b32:         }
1:7d98b32: 
1:7d98b32:         assertTrue("broker stopped state triggered", Wait.waitFor(new Wait.Condition() {
1:7d98b32:             @Override
1:7d98b32:             public boolean isSatisified() throws Exception {
1:7d98b32:                 LOG.info("broker state {}", broker);
1:7d98b32:                 return broker.is("stopped").isActive();
1:7d98b32:             }
1:7d98b32:         }));
1:7d98b32:         context.assertIsSatisfied();
1:7d98b32: 
1:7d98b32:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:7d98b32:     }
1:7d98b32: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c7291f1
/////////////////////////////////////////////////////////////////////////
1:             allowing(brokerService).isStarted();
1:             will(returnValue(true));
author:gtully
-------------------------------------------------------------------------------
commit:d70852e
/////////////////////////////////////////////////////////////////////////
1:             allowing(jdbcPersistenceAdapter).allowIOResumption();
commit:f09000d
/////////////////////////////////////////////////////////////////////////
1:             allowing(brokerService).setSystemExitOnShutdown(with(false));
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:         LeaseLockerIOExceptionHandler underTest = new LeaseLockerIOExceptionHandler();
commit:7d98b32
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.Locker;
1: import org.apache.activemq.broker.SuppressReplyException;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.Wait;
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.States;
1: import org.jmock.lib.legacy.ClassImposteriser;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class JDBCIOExceptionHandlerMockeryTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCIOExceptionHandlerMockeryTest.class);
1:     private HashMap<Thread, Throwable> exceptions = new HashMap<Thread, Throwable>();
1: 
1:     @Test
1:     public void testShutdownWithoutTransportRestart() throws Exception {
1: 
1:         Mockery context = new Mockery() {{
1:             setImposteriser(ClassImposteriser.INSTANCE);
1:         }};
1: 
1:         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
1:             @Override
1:             public void uncaughtException(Thread t, Throwable e) {
1:                 LOG.error("unexpected exception {} on thread {}", e, t);
1:                 exceptions.put(t, e);
1:             }
1:         });
1: 
1:         final BrokerService brokerService = context.mock(BrokerService.class);
1:         final JDBCPersistenceAdapter jdbcPersistenceAdapter = context.mock(JDBCPersistenceAdapter.class);
1:         final Locker locker = context.mock(Locker.class);
1: 
1:         final States jdbcConn = context.states("jdbc").startsAs("down");
1:         final States broker = context.states("broker").startsAs("started");
1: 
1:         // simulate jdbc up between hasLock and checkpoint, so hasLock fails to verify
1:         context.checking(new Expectations() {{
1:             allowing(brokerService).isRestartAllowed();
1:             will(returnValue(false));
1:             allowing(brokerService).stopAllConnectors(with(any(ServiceStopper.class)));
1:             allowing(brokerService).getPersistenceAdapter();
1:             will(returnValue(jdbcPersistenceAdapter));
1:             allowing(jdbcPersistenceAdapter).getLocker();
1:             will(returnValue(locker));
1:             allowing(locker).keepAlive();
1:             when(jdbcConn.is("down"));
1:             will(returnValue(true));
1:             allowing(locker).keepAlive();
1:             when(jdbcConn.is("up"));
1:             will(returnValue(false));
1: 
1:             allowing(jdbcPersistenceAdapter).checkpoint(with(true));
1:             then(jdbcConn.is("up"));
1:             allowing(brokerService).stop();
1:             then(broker.is("stopped"));
1: 
1:         }});
1: 
0:         JDBCIOExceptionHandler underTest = new JDBCIOExceptionHandler();
1:         underTest.setBrokerService(brokerService);
1: 
1:         try {
1:             underTest.handle(new IOException());
1:             fail("except suppress reply ex");
1:         } catch (SuppressReplyException expected) {
1:         }
1: 
1:         assertTrue("broker stopped state triggered", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("broker state {}", broker);
1:                 return broker.is("stopped").isActive();
1:             }
1:         }));
1:         context.assertIsSatisfied();
1: 
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:     }
1: }
============================================================================