1:f6bf823: /**
1:f6bf823:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f6bf823:  * contributor license agreements.  See the NOTICE file distributed with
1:f6bf823:  * this work for additional information regarding copyright ownership.
1:f6bf823:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f6bf823:  * (the "License"); you may not use this file except in compliance with
1:f6bf823:  * the License.  You may obtain a copy of the License at
1:f6bf823:  *
1:f6bf823:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f6bf823:  *
1:f6bf823:  * Unless required by applicable law or agreed to in writing, software
1:f6bf823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f6bf823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f6bf823:  * See the License for the specific language governing permissions and
1:f6bf823:  * limitations under the License.
1:f6bf823:  */
1:f6bf823: package org.apache.activemq.bugs;
1:f6bf823: 
1:f6bf823: import static org.junit.Assert.assertEquals;
1:f6bf823: 
1:f6bf823: import java.lang.reflect.Field;
1:f6bf823: import java.net.Socket;
1:f6bf823: import java.util.Arrays;
1:f6bf823: import java.util.Collection;
1:f6bf823: 
1:f6bf823: import org.apache.activemq.ActiveMQConnectionFactory;
1:f6bf823: import org.apache.activemq.broker.BrokerService;
1:f6bf823: import org.apache.activemq.broker.TransportConnection;
1:f6bf823: import org.apache.activemq.broker.TransportConnector;
1:f6bf823: import org.apache.activemq.transport.tcp.TcpTransport;
1:f6bf823: import org.junit.After;
1:f6bf823: import org.junit.Before;
1:f6bf823: import org.junit.Test;
1:f6bf823: import org.junit.runner.RunWith;
1:f6bf823: import org.junit.runners.Parameterized;
1:f6bf823: import org.junit.runners.Parameterized.Parameters;
1:f6bf823: 
1:f6bf823: @RunWith(Parameterized.class)
1:f6bf823: public class AMQ6599Test {
1:f6bf823: 
1:f6bf823:     public static final String KEYSTORE_TYPE = "jks";
1:f6bf823:     public static final String PASSWORD = "password";
1:f6bf823:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:f6bf823:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:f6bf823: 
1:f6bf823:     private String uri;
1:f6bf823:     private final String protocol;
1:f6bf823:     private BrokerService brokerService;
1:f6bf823: 
1:f6bf823:     @Parameters(name="protocol={0}")
1:f6bf823:     public static Collection<Object[]> data() {
1:f6bf823:         return Arrays.asList(new Object[][] {
1:f6bf823:                 {"auto+nio+ssl"}, {"auto+ssl"},
1:f6bf823:                 {"nio+ssl"}, {"ssl"},
1:f6bf823:                 {"tcp"}, {"nio"}
1:f6bf823:             });
1:f6bf823:     }
1:f6bf823: 
1:f6bf823:     static {
1:f6bf823:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:f6bf823:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:f6bf823:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:f6bf823:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:f6bf823:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:f6bf823:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:f6bf823:     }
1:f6bf823: 
1:f6bf823:     @Before
1:f6bf823:     public void before() throws Exception {
1:f6bf823:         BrokerService brokerService = new BrokerService();
1:f6bf823:         brokerService.setPersistent(false);
1:f6bf823: 
1:f6bf823:         TransportConnector connector = brokerService.addConnector(protocol +
1:1e31df9:                 "://localhost:0?transport.soTimeout=3500");
1:f6bf823:         connector.setName("connector");
1:f6bf823:         uri = connector.getPublishableConnectString();
1:f6bf823: 
1:f6bf823:         this.brokerService = brokerService;
1:f6bf823:         brokerService.start();
1:f6bf823:         brokerService.waitUntilStarted();
1:f6bf823:     }
1:f6bf823: 
1:f6bf823:     @After
1:f6bf823:     public void after() throws Exception {
1:f6bf823:         brokerService.stop();
1:f6bf823:         brokerService.waitUntilStopped();
1:f6bf823:     }
1:f6bf823: 
1:f6bf823:     public AMQ6599Test(String protocol) {
1:f6bf823:         this.protocol = protocol;
1:f6bf823:     }
1:f6bf823: 
1:f6bf823:     @Test(timeout = 30000)
1:f6bf823:     public void testSoTimeout() throws Exception {
1:f6bf823:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:f6bf823:         factory.setBrokerURL(uri);
1:f6bf823:         factory.createConnection().start();
1:f6bf823: 
1:f6bf823:         //Validate soTimeout value was set on the TcpTransport and the socket
1:f6bf823:         //Before this patch the TcpTransport value did not have the option set which caused NIO not to work right
1:f6bf823:         for (TransportConnection connection : brokerService.getTransportConnectorByName("connector").getConnections()) {
1:f6bf823:             TcpTransport tcpTransport = connection.getTransport().narrow(TcpTransport.class);
1:f6bf823:             Field socketField = TcpTransport.class.getDeclaredField("socket");
1:f6bf823:             socketField.setAccessible(true);
1:f6bf823:             Socket socket = (Socket) socketField.get(tcpTransport);
1:f6bf823:             assertEquals(3500, tcpTransport.getSoTimeout());
1:f6bf823:             assertEquals(3500, socket.getSoTimeout());
1:f6bf823:         }
1:f6bf823:     }
1:f6bf823: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:                 "://localhost:0?transport.soTimeout=3500");
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:                 "://localhost:0?transport.soTimeout=3500&transport.verifyHostName=false");
commit:f6bf823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.lang.reflect.Field;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class AMQ6599Test {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     private String uri;
1:     private final String protocol;
1:     private BrokerService brokerService;
1: 
1:     @Parameters(name="protocol={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto+nio+ssl"}, {"auto+ssl"},
1:                 {"nio+ssl"}, {"ssl"},
1:                 {"tcp"}, {"nio"}
1:             });
1:     }
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1: 
1:         TransportConnector connector = brokerService.addConnector(protocol +
0:                 "://localhost:0?transport.soTimeout=3500");
1:         connector.setName("connector");
1:         uri = connector.getPublishableConnectString();
1: 
1:         this.brokerService = brokerService;
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     public AMQ6599Test(String protocol) {
1:         this.protocol = protocol;
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testSoTimeout() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:         factory.setBrokerURL(uri);
1:         factory.createConnection().start();
1: 
1:         //Validate soTimeout value was set on the TcpTransport and the socket
1:         //Before this patch the TcpTransport value did not have the option set which caused NIO not to work right
1:         for (TransportConnection connection : brokerService.getTransportConnectorByName("connector").getConnections()) {
1:             TcpTransport tcpTransport = connection.getTransport().narrow(TcpTransport.class);
1:             Field socketField = TcpTransport.class.getDeclaredField("socket");
1:             socketField.setAccessible(true);
1:             Socket socket = (Socket) socketField.get(tcpTransport);
1:             assertEquals(3500, tcpTransport.getSoTimeout());
1:             assertEquals(3500, socket.getSoTimeout());
1:         }
1:     }
1: }
============================================================================