1:af1b232: /**
1:af1b232:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:af1b232:  * contributor license agreements.  See the NOTICE file distributed with
1:af1b232:  * this work for additional information regarding copyright ownership.
1:af1b232:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:af1b232:  * (the "License"); you may not use this file except in compliance with
1:af1b232:  * the License.  You may obtain a copy of the License at
1:af1b232:  *
1:af1b232:  *      http://www.apache.org/licenses/LICENSE-2.0
1:af1b232:  *
1:af1b232:  * Unless required by applicable law or agreed to in writing, software
1:af1b232:  * distributed under the License is distributed on an "AS IS" BASIS,
1:af1b232:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:af1b232:  * See the License for the specific language governing permissions and
1:af1b232:  * limitations under the License.
1:af1b232:  */
1:af1b232: package org.apache.activemq.network;
2:af1b232: 
1:a95c6db: import java.util.Arrays;
1:af1b232: import java.util.List;
1:af1b232: 
1:9a8f6e4: import org.apache.activemq.broker.region.Destination;
1:af1b232: import org.apache.activemq.broker.region.Subscription;
1:af1b232: import org.apache.activemq.command.BrokerId;
1:af1b232: import org.apache.activemq.command.ConsumerInfo;
1:af1b232: import org.apache.activemq.command.Message;
1:af1b232: import org.apache.activemq.command.NetworkBridgeFilter;
1:af1b232: import org.apache.activemq.filter.MessageEvaluationContext;
1:af1b232: import org.slf4j.Logger;
1:af1b232: import org.slf4j.LoggerFactory;
1:af1b232: 
1:af1b232: /**
1:a80acbb:  * implement conditional behavior for queue consumers, allows replaying back to
1:a80acbb:  * origin if no consumers are present on the local broker after a configurable
1:a95c6db:  * delay, irrespective of the TTL. Also allows rate limiting of messages
1:a80acbb:  * through the network, useful for static includes
1:af1b232:  *
1:a80acbb:  * @org.apache.xbean.XBean
1:af1b232:  */
1:af1b232: public class ConditionalNetworkBridgeFilterFactory implements NetworkBridgeFilterFactory {
1:af1b232: 
1:af1b232:     boolean replayWhenNoConsumers = false;
1:af1b232:     int replayDelay = 0;
1:af1b232:     int rateLimit = 0;
1:af1b232:     int rateDuration = 1000;
1:82c9f95:     private boolean selectorAware = false;
1:af1b232: 
1:af1b232:     @Override
1:a95c6db:     public NetworkBridgeFilter create(ConsumerInfo info, BrokerId[] remoteBrokerPath, int messageTTL, int consumerTTL) {
1:af1b232:         ConditionalNetworkBridgeFilter filter = new ConditionalNetworkBridgeFilter();
1:af1b232:         filter.setNetworkBrokerId(remoteBrokerPath[0]);
1:a95c6db:         filter.setMessageTTL(messageTTL);
1:a95c6db:         filter.setConsumerTTL(consumerTTL);
1:af1b232:         filter.setAllowReplayWhenNoConsumers(isReplayWhenNoConsumers());
1:af1b232:         filter.setRateLimit(getRateLimit());
1:af1b232:         filter.setRateDuration(getRateDuration());
1:af1b232:         filter.setReplayDelay(getReplayDelay());
1:82c9f95:         filter.setSelectorAware(isSelectorAware());
1:af1b232:         return filter;
7:af1b232:     }
1:82c9f95: 
1:af1b232:     public void setReplayWhenNoConsumers(boolean replayWhenNoConsumers) {
1:af1b232:         this.replayWhenNoConsumers = replayWhenNoConsumers;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public boolean isReplayWhenNoConsumers() {
1:af1b232:         return replayWhenNoConsumers;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public void setRateLimit(int rateLimit) {
1:af1b232:         this.rateLimit = rateLimit;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public int getRateLimit() {
1:af1b232:         return rateLimit;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public int getRateDuration() {
1:af1b232:         return rateDuration;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public void setRateDuration(int rateDuration) {
1:af1b232:         this.rateDuration = rateDuration;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public int getReplayDelay() {
1:af1b232:         return replayDelay;
1:af1b232:     }
1:af1b232: 
1:af1b232:     public void setReplayDelay(int replayDelay) {
1:af1b232:         this.replayDelay = replayDelay;
1:af1b232:     }
1:af1b232: 
1:82c9f95:     public void setSelectorAware(boolean selectorAware) {
1:82c9f95:         this.selectorAware = selectorAware;
1:82c9f95:     }
1:82c9f95: 
1:82c9f95:     public boolean isSelectorAware() {
1:82c9f95:         return selectorAware;
1:82c9f95:     }
1:82c9f95: 
1:af1b232:     private static class ConditionalNetworkBridgeFilter extends NetworkBridgeFilter {
1:af1b232:         final static Logger LOG = LoggerFactory.getLogger(ConditionalNetworkBridgeFilter.class);
1:af1b232:         private int rateLimit;
1:af1b232:         private int rateDuration = 1000;
1:af1b232:         private boolean allowReplayWhenNoConsumers = true;
1:af1b232:         private int replayDelay = 1000;
1:af1b232: 
1:af1b232:         private int matchCount;
1:af1b232:         private long rateDurationEnd;
1:82c9f95:         private boolean selectorAware = false;
1:af1b232: 
1:af1b232:         @Override
1:af1b232:         protected boolean matchesForwardingFilter(Message message, final MessageEvaluationContext mec) {
1:af1b232:             boolean match = true;
1:30a9fe1:             if (mec.getDestination().isQueue() && contains(message.getBrokerPath(), networkBrokerId)) {
1:30a9fe1:                 // potential replay back to origin
1:30a9fe1:                 match = allowReplayWhenNoConsumers && hasNoLocalConsumers(message, mec) && hasNotJustArrived(message);
1:af1b232: 
1:e1bbde7:                 if (match) {
1:e1bbde7:                     LOG.trace("Replaying [{}] for [{}] back to origin in the absence of a local consumer", message.getMessageId(), message.getDestination());
1:e1bbde7:                 } else {
1:e1bbde7:                     LOG.trace("Suppressing replay of [{}] for [{}] back to origin {}", new Object[]{ message.getMessageId(), message.getDestination(), Arrays.asList(message.getBrokerPath())} );
1:a95c6db:                 }
1:a95c6db: 
1:a95c6db:             } else {
1:30a9fe1:                 // use existing filter logic for topics and non replays
1:af1b232:                 match = super.matchesForwardingFilter(message, mec);
1:30a9fe1:             }
1:af1b232: 
1:30a9fe1:             if (match && rateLimitExceeded()) {
1:e1bbde7:                 LOG.trace("Throttled network consumer rejecting [{}] for [{}] {}>{}/{}", new Object[]{
1:e1bbde7:                         message.getMessageId(), message.getDestination(), matchCount, rateLimit, rateDuration
1:e1bbde7:                 });
1:30a9fe1:                 match = false;
1:30a9fe1:             }
1:30a9fe1: 
1:af1b232:             return match;
1:af1b232:         }
1:af1b232: 
1:af1b232:         private boolean hasNotJustArrived(Message message) {
1:a80acbb:             return replayDelay == 0 || (message.getBrokerInTime() + replayDelay < System.currentTimeMillis());
1:af1b232:         }
1:af1b232: 
1:af1b232:         private boolean hasNoLocalConsumers(final Message message, final MessageEvaluationContext mec) {
1:9a8f6e4:             Destination regionDestination = (Destination) mec.getMessageReference().getRegionDestination();
1:9a8f6e4:             List<Subscription> consumers = regionDestination.getConsumers();
1:af1b232:             for (Subscription sub : consumers) {
1:af1b232:                 if (!sub.getConsumerInfo().isNetworkSubscription() && !sub.getConsumerInfo().isBrowser()) {
1:82c9f95: 
1:82c9f95:                     if (!isSelectorAware()) {
1:82c9f95:                         LOG.trace("Not replaying [{}] for [{}] to origin due to existing local consumer: {}", new Object[]{
1:82c9f95:                                 message.getMessageId(), message.getDestination(), sub.getConsumerInfo()
1:82c9f95:                         });
1:82c9f95:                         return false;
1:82c9f95: 
1:82c9f95:                     } else {
1:82c9f95:                         try {
1:82c9f95:                             if (sub.matches(message, mec)) {
1:82c9f95:                                 LOG.trace("Not replaying [{}] for [{}] to origin due to existing selector matching local consumer: {}", new Object[]{
1:82c9f95:                                         message.getMessageId(), message.getDestination(), sub.getConsumerInfo()
1:82c9f95:                                 });
1:82c9f95:                                 return false;
1:82c9f95:                             }
1:82c9f95:                         } catch (Exception ignored) {}
1:82c9f95:                     }
1:af1b232:                 }
1:af1b232:             }
1:af1b232:             return true;
1:af1b232:         }
1:af1b232: 
1:af1b232:         private boolean rateLimitExceeded() {
1:af1b232:             if (rateLimit == 0) {
2:af1b232:                 return false;
1:af1b232:             }
1:af1b232: 
1:af1b232:             if (rateDurationEnd < System.currentTimeMillis()) {
1:af1b232:                 rateDurationEnd = System.currentTimeMillis() + rateDuration;
1:af1b232:                 matchCount = 0;
1:af1b232:             }
1:af1b232:             return ++matchCount > rateLimit;
1:af1b232:         }
1:af1b232: 
1:af1b232:         public void setReplayDelay(int replayDelay) {
1:af1b232:             this.replayDelay = replayDelay;
1:af1b232:         }
1:af1b232: 
1:af1b232:         public void setRateLimit(int rateLimit) {
1:af1b232:             this.rateLimit = rateLimit;
1:af1b232:         }
1:af1b232: 
1:af1b232:         public void setRateDuration(int rateDuration) {
1:af1b232:             this.rateDuration = rateDuration;
1:af1b232:         }
1:af1b232: 
1:af1b232:         public void setAllowReplayWhenNoConsumers(boolean allowReplayWhenNoConsumers) {
1:af1b232:             this.allowReplayWhenNoConsumers = allowReplayWhenNoConsumers;
1:82c9f95:         }
1:82c9f95: 
1:82c9f95:         public void setSelectorAware(boolean selectorAware) {
1:82c9f95:             this.selectorAware = selectorAware;
1:82c9f95:         }
1:af1b232: 
1:82c9f95:         public boolean isSelectorAware() {
1:82c9f95:             return selectorAware;
1:af1b232:         }
1:af1b232:     }
1:af1b232: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:82c9f95
/////////////////////////////////////////////////////////////////////////
1:     private boolean selectorAware = false;
/////////////////////////////////////////////////////////////////////////
1:         filter.setSelectorAware(isSelectorAware());
/////////////////////////////////////////////////////////////////////////
1:     public void setSelectorAware(boolean selectorAware) {
1:         this.selectorAware = selectorAware;
1:     }
1: 
1:     public boolean isSelectorAware() {
1:         return selectorAware;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         private boolean selectorAware = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:                     if (!isSelectorAware()) {
1:                         LOG.trace("Not replaying [{}] for [{}] to origin due to existing local consumer: {}", new Object[]{
1:                                 message.getMessageId(), message.getDestination(), sub.getConsumerInfo()
1:                         });
1:                         return false;
1: 
1:                     } else {
1:                         try {
1:                             if (sub.matches(message, mec)) {
1:                                 LOG.trace("Not replaying [{}] for [{}] to origin due to existing selector matching local consumer: {}", new Object[]{
1:                                         message.getMessageId(), message.getDestination(), sub.getConsumerInfo()
1:                                 });
1:                                 return false;
1:                             }
1:                         } catch (Exception ignored) {}
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
1:         public void setSelectorAware(boolean selectorAware) {
1:             this.selectorAware = selectorAware;
1:         }
1: 
1:         public boolean isSelectorAware() {
1:             return selectorAware;
1:         }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 if (match) {
1:                     LOG.trace("Replaying [{}] for [{}] back to origin in the absence of a local consumer", message.getMessageId(), message.getDestination());
1:                 } else {
1:                     LOG.trace("Suppressing replay of [{}] for [{}] back to origin {}", new Object[]{ message.getMessageId(), message.getDestination(), Arrays.asList(message.getBrokerPath())} );
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Throttled network consumer rejecting [{}] for [{}] {}>{}/{}", new Object[]{
1:                         message.getMessageId(), message.getDestination(), matchCount, rateLimit, rateDuration
1:                 });
/////////////////////////////////////////////////////////////////////////
0:                     LOG.trace("Not replaying [{}] for [{}] to origin due to existing local consumer: {}", new Object[]{
0:                             message.getMessageId(), message.getDestination(), sub.getConsumerInfo()
0:                     });
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:  * delay, irrespective of the TTL. Also allows rate limiting of messages
/////////////////////////////////////////////////////////////////////////
1:     public NetworkBridgeFilter create(ConsumerInfo info, BrokerId[] remoteBrokerPath, int messageTTL, int consumerTTL) {
1:         filter.setMessageTTL(messageTTL);
1:         filter.setConsumerTTL(consumerTTL);
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isTraceEnabled()) {
0:                     if (match) {
0:                         LOG.trace("Replaying [" + message.getMessageId() + "] for [" + message.getDestination()
0:                                 + "] back to origin in the absence of a local consumer");
1:                     } else {
0:                         LOG.trace("Suppressing replay of [" + message.getMessageId() + "] for [" + message.getDestination()
0:                                 + "] back to origin " + Arrays.asList(message.getBrokerPath()));
1: 
1:                     }
commit:30a9fe1
/////////////////////////////////////////////////////////////////////////
1:             if (mec.getDestination().isQueue() && contains(message.getBrokerPath(), networkBrokerId)) {
1:                 // potential replay back to origin
1:                 match = allowReplayWhenNoConsumers && hasNoLocalConsumers(message, mec) && hasNotJustArrived(message);
0:                 if (match && LOG.isTraceEnabled()) {
0:                     LOG.trace("Replaying  [" + message.getMessageId() + "] for [" + message.getDestination()
0:                             + "] back to origin in the absence of a local consumer");
1:                 // use existing filter logic for topics and non replays
1:             if (match && rateLimitExceeded()) {
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("Throttled network consumer rejecting [" + message.getMessageId() + "] for [" + message.getDestination() + " " + matchCount
0:                             + ">" + rateLimit + "/" + rateDuration);
1:                 }
1:                 match = false;
1:             }
1: 
commit:af1b232
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.util.List;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.NetworkBridgeFilter;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * implement conditional behaviour for queue consumers,
0:  * allows replaying back to origin if no consumers are present on the local broker
0:  * after a configurable delay, irrespective of the networkTTL
0:  * Also allows rate limiting of messages through the network, useful for static includes
1:  *
0:  *  @org.apache.xbean.XBean
1:  */
1: 
1: public class ConditionalNetworkBridgeFilterFactory implements NetworkBridgeFilterFactory {
1:     boolean replayWhenNoConsumers = false;
1:     int replayDelay = 0;
1:     int rateLimit = 0;
1:     int rateDuration = 1000;
1: 
1:     @Override
0:     public NetworkBridgeFilter create(ConsumerInfo info, BrokerId[] remoteBrokerPath, int networkTimeToLive) {
1:         ConditionalNetworkBridgeFilter filter = new ConditionalNetworkBridgeFilter();
1:         filter.setNetworkBrokerId(remoteBrokerPath[0]);
0:         filter.setNetworkTTL(networkTimeToLive);
1:         filter.setAllowReplayWhenNoConsumers(isReplayWhenNoConsumers());
1:         filter.setRateLimit(getRateLimit());
1:         filter.setRateDuration(getRateDuration());
1:         filter.setReplayDelay(getReplayDelay());
1:         return filter;
1:     }
1: 
1:     public void setReplayWhenNoConsumers(boolean replayWhenNoConsumers) {
1:         this.replayWhenNoConsumers = replayWhenNoConsumers;
1:     }
1: 
1:     public boolean isReplayWhenNoConsumers() {
1:         return replayWhenNoConsumers;
1:     }
1: 
1:     public void setRateLimit(int rateLimit) {
1:         this.rateLimit = rateLimit;
1:     }
1: 
1:     public int getRateLimit() {
1:         return rateLimit;
1:     }
1: 
1:     public int getRateDuration() {
1:         return rateDuration;
1:     }
1: 
1:     public void setRateDuration(int rateDuration) {
1:         this.rateDuration = rateDuration;
1:     }
1: 
1:     public int getReplayDelay() {
1:         return replayDelay;
1:     }
1: 
1:     public void setReplayDelay(int replayDelay) {
1:         this.replayDelay = replayDelay;
1:     }
1: 
1:     private static class ConditionalNetworkBridgeFilter extends NetworkBridgeFilter {
1:         final static Logger LOG = LoggerFactory.getLogger(ConditionalNetworkBridgeFilter.class);
1:         private int rateLimit;
1:         private int rateDuration = 1000;
1:         private boolean allowReplayWhenNoConsumers = true;
1:         private int replayDelay = 1000;
1: 
1:         private int matchCount;
1:         private long rateDurationEnd;
1: 
1:         @Override
1:         protected boolean matchesForwardingFilter(Message message, final MessageEvaluationContext mec) {
1:             boolean match = true;
0:             if (mec.getDestination().isQueue()) {
0:                 if (contains(message.getBrokerPath(), networkBrokerId)) {
0:                     // potential replay back to origin
0:                     match = allowReplayWhenNoConsumers && hasNoLocalConsumers(message, mec) && hasNotJustArrived(message);
1: 
0:                     if (match && LOG.isTraceEnabled()) {
0:                         LOG.trace("Replaying  [" + message.getMessageId() +"] for [" + message.getDestination() +"] back to origin in the absence of a local consumer");
1:                     }
1:                 }
1: 
0:                 if (match && rateLimitExceeded()) {
0:                     if (LOG.isTraceEnabled()) {
0:                         LOG.trace("Throttled network consumer rejecting [" + message.getMessageId() + "] for [" + message.getDestination() + " " + matchCount + ">" + rateLimit  + "/" + rateDuration);
1:                     }
0:                     match = false;
1:                 }
1: 
0:             } else {
0:                 // use existing logic for topics
1:                 match = super.matchesForwardingFilter(message, mec);
1:             }
1: 
1:             return match;
1:         }
1: 
1:         private boolean hasNotJustArrived(Message message) {
0:             return replayDelay ==0 || (message.getBrokerInTime() + replayDelay < System.currentTimeMillis());
1:         }
1: 
1:         private boolean hasNoLocalConsumers(final Message message, final MessageEvaluationContext mec) {
0:             List<Subscription> consumers = mec.getMessageReference().getRegionDestination().getConsumers();
1:             for (Subscription sub : consumers) {
1:                 if (!sub.getConsumerInfo().isNetworkSubscription() && !sub.getConsumerInfo().isBrowser()) {
0:                     if (LOG.isTraceEnabled()) {
0:                         LOG.trace("Not replaying [" + message.getMessageId() + "] for [" + message.getDestination() +"] to origin due to existing local consumer: " + sub.getConsumerInfo());
1:                     }
1:                     return false;
1:                 }
1:             }
1:             return true;
1:         }
1: 
1:         private boolean rateLimitExceeded() {
1:             if (rateLimit == 0) {
1:                 return false;
1:             }
1: 
1:             if (rateDurationEnd < System.currentTimeMillis()) {
1:                 rateDurationEnd = System.currentTimeMillis() + rateDuration;
1:                 matchCount = 0;
1:             }
1:             return ++matchCount > rateLimit;
1:         }
1: 
1:         public void setReplayDelay(int replayDelay) {
1:             this.replayDelay = replayDelay;
1:         }
1: 
1:         public void setRateLimit(int rateLimit) {
1:             this.rateLimit = rateLimit;
1:         }
1: 
1:         public void setRateDuration(int rateDuration) {
1:             this.rateDuration = rateDuration;
1:         }
1: 
1:         public void setAllowReplayWhenNoConsumers(boolean allowReplayWhenNoConsumers) {
1:             this.allowReplayWhenNoConsumers = allowReplayWhenNoConsumers;
1:         }
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:             Destination regionDestination = (Destination) mec.getMessageReference().getRegionDestination();
1:             List<Subscription> consumers = regionDestination.getConsumers();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:  * implement conditional behavior for queue consumers, allows replaying back to
1:  * origin if no consumers are present on the local broker after a configurable
0:  * delay, irrespective of the networkTTL Also allows rate limiting of messages
1:  * through the network, useful for static includes
1:  * @org.apache.xbean.XBean
0: 
/////////////////////////////////////////////////////////////////////////
0:                         LOG.trace("Replaying  [" + message.getMessageId() + "] for [" + message.getDestination()
0:                                 + "] back to origin in the absence of a local consumer");
0:                         LOG.trace("Throttled network consumer rejecting [" + message.getMessageId() + "] for [" + message.getDestination() + " " + matchCount
0:                                 + ">" + rateLimit + "/" + rateDuration);
/////////////////////////////////////////////////////////////////////////
1:             return replayDelay == 0 || (message.getBrokerInTime() + replayDelay < System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
0:                         LOG.trace("Not replaying [" + message.getMessageId() + "] for [" + message.getDestination()
0:                                 + "] to origin due to existing local consumer: " + sub.getConsumerInfo());
============================================================================