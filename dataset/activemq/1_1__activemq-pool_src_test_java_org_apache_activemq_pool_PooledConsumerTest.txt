1:8641928: /**
1:8641928:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8641928:  * contributor license agreements.  See the NOTICE file distributed with
1:8641928:  * this work for additional information regarding copyright ownership.
1:8641928:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8641928:  * (the "License"); you may not use this file except in compliance with
1:8641928:  * the License.  You may obtain a copy of the License at
1:8641928:  *
1:8641928:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8641928:  *
1:8641928:  * Unless required by applicable law or agreed to in writing, software
1:8641928:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8641928:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8641928:  * See the License for the specific language governing permissions and
1:8641928:  * limitations under the License.
1:8641928:  */
1:8641928: package org.apache.activemq.pool;
1:8641928: 
1:8641928: import org.apache.activemq.broker.BrokerPlugin;
1:8641928: import org.apache.activemq.broker.BrokerService;
1:8641928: import org.apache.activemq.command.ActiveMQDestination;
1:8641928: import org.apache.activemq.command.ActiveMQQueue;
1:8641928: import org.apache.activemq.filter.DestinationMap;
1:8641928: import org.apache.activemq.jaas.GroupPrincipal;
1:8641928: import org.apache.activemq.security.AuthenticationUser;
1:8641928: import org.apache.activemq.security.AuthorizationPlugin;
1:8641928: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:8641928: import org.apache.activemq.security.SimpleAuthorizationMap;
1:8641928: import org.apache.activemq.util.Wait;
1:8641928: import org.junit.After;
1:8641928: import org.junit.Test;
1:8641928: import org.slf4j.Logger;
1:8641928: import org.slf4j.LoggerFactory;
1:8641928: 
1:8641928: import javax.jms.Connection;
1:8641928: import javax.jms.ConnectionFactory;
1:8641928: import javax.jms.JMSException;
1:8641928: import javax.jms.Message;
1:8641928: import javax.jms.MessageConsumer;
1:8641928: import javax.jms.MessageListener;
1:8641928: import javax.jms.Session;
1:8641928: import javax.jms.TextMessage;
1:8641928: import java.util.ArrayList;
1:8641928: import java.util.List;
1:8641928: import java.util.concurrent.ExecutorService;
1:8641928: import java.util.concurrent.Executors;
1:8641928: import java.util.concurrent.TimeUnit;
1:8641928: 
1:8641928: import static org.junit.Assert.assertEquals;
1:8641928: import static org.junit.Assert.assertTrue;
1:8641928: 
1:8641928: public class PooledConsumerTest {
1:8641928: 
1:8641928:     private static final Logger LOGGER = LoggerFactory.getLogger(PooledConsumerTest.class);
1:8641928: 
1:8641928:     public static final String USERNAME = "test";
1:8641928:     public static final String PASSWORD = "test";
1:8641928:     private static final ActiveMQQueue QUEUE = new ActiveMQQueue("TEST");
1:8641928: 
1:8641928:     BrokerService brokerService;
1:8641928: 
1:8641928: 
1:8641928:     class PooledConsumer implements MessageListener {
1:8641928: 
1:8641928:         private ConnectionFactory factory;
1:8641928:         private Connection connection;
1:8641928:         public boolean done = false;
1:8641928: 
1:8641928:         public PooledConsumer(String url) throws JMSException {
1:8641928:             org.apache.activemq.pool.PooledConnectionFactory factory = new org.apache.activemq.pool.PooledConnectionFactory(url);
1:8641928:             factory.setMaxConnections(5);
1:8641928:             factory.setIdleTimeout(0);
1:8641928:             this.factory = factory;
1:8641928:             init();
1:8641928:         }
1:8641928: 
1:8641928:         private void init() throws JMSException {
1:8641928:             if (connection != null) {
1:8641928:                 close();
1:8641928:             }
1:8641928:             connection = factory.createConnection(USERNAME, PASSWORD);
1:8641928:             connection.start();
1:8641928:         }
1:8641928: 
1:8641928:         public void listen() {
1:8641928:             Session session = null;
1:8641928:             MessageConsumer consumer = null;
1:8641928:             boolean success = true;
1:8641928:             while (!done) {
1:8641928:                 try {
1:8641928:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8641928:                     consumer = session.createConsumer(QUEUE);
1:8641928:                     onMessage(consumer.receive());
1:8641928:                     success = true;
1:8641928:                 } catch (JMSException e) {
1:8641928:                     LOGGER.info(e.getMessage());
1:8641928:                     success = false;
1:8641928:                 } finally {
1:8641928:                     try {
1:8641928:                         if (consumer != null) consumer.close();
1:8641928:                         if (session != null) session.close();
1:8641928:                         if (!success) init();
1:8641928:                     } catch (JMSException ignore) {
1:8641928:                         ignore.printStackTrace();
1:8641928:                     }
1:8641928:                 }
1:8641928:                 sleep(50);
1:8641928:             }
1:8641928:         }
1:8641928: 
1:8641928:         private void sleep(long milliseconds) {
1:8641928:             try {
1:8641928:                 TimeUnit.MILLISECONDS.sleep(milliseconds);
1:8641928:             } catch (InterruptedException e) {
1:8641928:             }
1:8641928:         }
1:8641928: 
1:8641928:         @Override
1:8641928:         public void onMessage(Message message) {
1:8641928:             if (message != null) {
1:8641928:                 TextMessage textMessage = (TextMessage) message;
1:8641928:                 try {
1:8641928:                     String response = textMessage.getText();
1:8641928:                     LOGGER.info("Received: '{}'", response);
1:8641928:                 } catch (Exception e) {
1:8641928:                     LOGGER.error(e.getMessage(), e);
1:8641928:                 }
1:8641928:             }
1:8641928:         }
1:8641928: 
1:8641928:         public void close() {
1:8641928:             try {
1:8641928:                 if (connection != null) {
1:8641928:                     connection.close();
1:8641928:                 }
1:8641928:             } catch (JMSException e) {
1:8641928:             }
1:8641928:         }
1:8641928: 
1:8641928:         public void done() {
1:8641928:             done = true;
1:8641928:             close();
1:8641928:         }
1:8641928:     }
1:8641928: 
1:8641928:     public void startBroker(String group, String trasport) throws Exception {
1:8641928:         brokerService = new BrokerService();
1:8641928:         brokerService.addConnector(trasport);
1:8641928:         brokerService.setPersistent(false);
1:8641928:         brokerService.setUseJmx(false);
1:8641928:         brokerService.setAdvisorySupport(false);
1:8641928:         brokerService.setDestinations(new ActiveMQDestination[]{QUEUE});
1:8641928: 
1:8641928:         List<AuthenticationUser> users = new ArrayList<>();
1:8641928:         users.add(new AuthenticationUser("test", "test", group));
1:8641928:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:8641928: 
1:8641928:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:8641928:         SimpleAuthorizationMap simpleAuthorizationMap = new SimpleAuthorizationMap();
1:8641928:         DestinationMap readAcls = new DestinationMap();
1:8641928:         GroupPrincipal USERS = new GroupPrincipal("users");
1:8641928: 
1:8641928:         readAcls.put(QUEUE, USERS);
1:8641928:         simpleAuthorizationMap.setReadACLs(readAcls);
1:8641928:         authorizationPlugin.setMap(simpleAuthorizationMap);
1:8641928:         BrokerPlugin[] plugins = new BrokerPlugin[]{authenticationPlugin, authorizationPlugin};
1:8641928:         brokerService.setPlugins(plugins);
1:8641928: 
1:8641928:         brokerService.start();
1:8641928:     }
1:8641928: 
1:8641928:     @After
1:8641928:     public void stopBroker() throws Exception {
1:8641928:         if (brokerService != null) {
1:8641928:             brokerService.stop();
1:8641928:             brokerService.waitUntilStopped();
1:8641928:         }
1:8641928:     }
1:8641928: 
1:8641928:     @Test
1:8641928:     public void testFailedConsumerNotRetainedByFailover() throws Exception {
1:8641928:         startBroker("test", "tcp://0.0.0.0:0");
1:8641928:         String url = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:8641928:         final PooledConsumer consumer = new PooledConsumer("failover:(" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")?jms.watchTopicAdvisories=false");
1:8641928: 
1:8641928:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:8641928:         executorService.execute(new Runnable() {
1:8641928:             @Override
1:8641928:             public void run() {
1:8641928:                 consumer.listen();
1:8641928:             }
1:8641928:         });
1:8641928: 
1:8641928:         assertTrue("5 connectons - pool fils up", Wait.waitFor(new Wait.Condition() {
1:8641928:             @Override
1:8641928:             public boolean isSatisified() throws Exception {
1:8641928:                 return 5 == brokerService.getTransportConnectorByScheme("tcp").getConnections().size();
1:8641928:             }
1:8641928:         }));
1:8641928: 
1:8641928:         stopBroker();
1:8641928: 
1:8641928:         // with perms
1:8641928:         startBroker("users", url);
1:8641928: 
1:8641928:         assertTrue("5 reconnections from the pool", Wait.waitFor(new Wait.Condition() {
1:8641928:             @Override
1:8641928:             public boolean isSatisified() throws Exception {
1:8641928:                 return 5 == brokerService.getTransportConnectorByScheme("tcp").getConnections().size();
1:8641928:             }
1:8641928:         }));
1:8641928: 
1:8641928:         assertEquals("one consumer", 1, brokerService.getRegionBroker().getDestinationMap().get(QUEUE).getConsumers().size());
1:8641928: 
1:8641928:         consumer.done();
1:8641928:         executorService.shutdownNow();
1:8641928:     }
1:8641928: 
1:8641928: }
1:8641928: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:eab9a0d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:8641928
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
0: import com.google.common.base.Strings;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.security.SimpleAuthorizationMap;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class PooledConsumerTest {
1: 
1:     private static final Logger LOGGER = LoggerFactory.getLogger(PooledConsumerTest.class);
1: 
1:     public static final String USERNAME = "test";
1:     public static final String PASSWORD = "test";
1:     private static final ActiveMQQueue QUEUE = new ActiveMQQueue("TEST");
1: 
1:     BrokerService brokerService;
1: 
1: 
1:     class PooledConsumer implements MessageListener {
1: 
1:         private ConnectionFactory factory;
1:         private Connection connection;
1:         public boolean done = false;
1: 
1:         public PooledConsumer(String url) throws JMSException {
1:             org.apache.activemq.pool.PooledConnectionFactory factory = new org.apache.activemq.pool.PooledConnectionFactory(url);
1:             factory.setMaxConnections(5);
1:             factory.setIdleTimeout(0);
1:             this.factory = factory;
1:             init();
1:         }
1: 
1:         private void init() throws JMSException {
1:             if (connection != null) {
1:                 close();
1:             }
1:             connection = factory.createConnection(USERNAME, PASSWORD);
1:             connection.start();
1:         }
1: 
1:         public void listen() {
1:             Session session = null;
1:             MessageConsumer consumer = null;
1:             boolean success = true;
1:             while (!done) {
1:                 try {
1:                     session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     consumer = session.createConsumer(QUEUE);
1:                     onMessage(consumer.receive());
1:                     success = true;
1:                 } catch (JMSException e) {
1:                     LOGGER.info(e.getMessage());
1:                     success = false;
1:                 } finally {
1:                     try {
1:                         if (consumer != null) consumer.close();
1:                         if (session != null) session.close();
1:                         if (!success) init();
1:                     } catch (JMSException ignore) {
1:                         ignore.printStackTrace();
1:                     }
1:                 }
1:                 sleep(50);
1:             }
1:         }
1: 
1:         private void sleep(long milliseconds) {
1:             try {
1:                 TimeUnit.MILLISECONDS.sleep(milliseconds);
1:             } catch (InterruptedException e) {
1:             }
1:         }
1: 
1:         @Override
1:         public void onMessage(Message message) {
1:             if (message != null) {
1:                 TextMessage textMessage = (TextMessage) message;
1:                 try {
1:                     String response = textMessage.getText();
0:                     LOGGER.info(Strings.repeat("=", 50));
1:                     LOGGER.info("Received: '{}'", response);
0:                     LOGGER.info(Strings.repeat("=", 50));
1:                 } catch (Exception e) {
1:                     LOGGER.error(e.getMessage(), e);
1:                 }
1:             }
1:         }
1: 
1:         public void close() {
1:             try {
1:                 if (connection != null) {
1:                     connection.close();
1:                 }
1:             } catch (JMSException e) {
1:             }
1:         }
1: 
1:         public void done() {
1:             done = true;
1:             close();
1:         }
1:     }
1: 
1:     public void startBroker(String group, String trasport) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.addConnector(trasport);
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDestinations(new ActiveMQDestination[]{QUEUE});
1: 
1:         List<AuthenticationUser> users = new ArrayList<>();
1:         users.add(new AuthenticationUser("test", "test", group));
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1: 
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin();
1:         SimpleAuthorizationMap simpleAuthorizationMap = new SimpleAuthorizationMap();
1:         DestinationMap readAcls = new DestinationMap();
1:         GroupPrincipal USERS = new GroupPrincipal("users");
1: 
1:         readAcls.put(QUEUE, USERS);
1:         simpleAuthorizationMap.setReadACLs(readAcls);
1:         authorizationPlugin.setMap(simpleAuthorizationMap);
1:         BrokerPlugin[] plugins = new BrokerPlugin[]{authenticationPlugin, authorizationPlugin};
1:         brokerService.setPlugins(plugins);
1: 
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testFailedConsumerNotRetainedByFailover() throws Exception {
1:         startBroker("test", "tcp://0.0.0.0:0");
1:         String url = brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:         final PooledConsumer consumer = new PooledConsumer("failover:(" + brokerService.getTransportConnectorByScheme("tcp").getPublishableConnectString() + ")?jms.watchTopicAdvisories=false");
1: 
1:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 consumer.listen();
1:             }
1:         });
1: 
1:         assertTrue("5 connectons - pool fils up", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 5 == brokerService.getTransportConnectorByScheme("tcp").getConnections().size();
1:             }
1:         }));
1: 
1:         stopBroker();
1: 
1:         // with perms
1:         startBroker("users", url);
1: 
1:         assertTrue("5 reconnections from the pool", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 5 == brokerService.getTransportConnectorByScheme("tcp").getConnections().size();
1:             }
1:         }));
1: 
1:         assertEquals("one consumer", 1, brokerService.getRegionBroker().getDestinationMap().get(QUEUE).getConsumers().size());
1: 
1:         consumer.done();
1:         executorService.shutdownNow();
1:     }
1: 
1: }
1: 
============================================================================