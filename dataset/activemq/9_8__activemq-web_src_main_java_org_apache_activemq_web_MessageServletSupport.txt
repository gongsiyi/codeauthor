1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
13:40a7d3b: 
1:f1a084e: package org.apache.activemq.web;
1:4443d32: 
1:540dd5c: import java.io.BufferedReader;
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.util.HashMap;
1:540dd5c: import java.util.Iterator;
1:540dd5c: import java.util.Map;
1:40a7d3b: 
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.TextMessage;
1:40a7d3b: import javax.servlet.ServletConfig;
1:40a7d3b: import javax.servlet.ServletException;
1:40a7d3b: import javax.servlet.http.HttpServlet;
1:40a7d3b: import javax.servlet.http.HttpServletRequest;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.command.ActiveMQDestination;
1:540dd5c: import org.apache.activemq.command.ActiveMQQueue;
1:540dd5c: import org.apache.activemq.command.ActiveMQTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:40a7d3b: 
3:40a7d3b: /**
1:540dd5c:  * A useful base class for any JMS related servlet; there are various ways to
1:540dd5c:  * map JMS operations to web requests so we put most of the common behaviour in
1:540dd5c:  * a reusable base class. This servlet can be configured with the following init
1:ccca44a:  * parameters
1:540dd5c:  * <dl>
1:540dd5c:  * <dt>topic</dt>
1:ccca44a:  * <dd>Set to 'true' if the servlet should default to using topics rather than
1:540dd5c:  * channels</dd>
1:540dd5c:  * <dt>destination</dt>
1:540dd5c:  * <dd>The default destination to use if one is not specifiied</dd>
1:540dd5c:  * <dt></dt>
1:540dd5c:  * <dd></dd>
1:4060ad9:  * </dl>
1:ccca44a:  *
1:ccca44a:  *
2:40a7d3b:  */
1:ccca44a: @SuppressWarnings("serial")
1:40a7d3b: public abstract class MessageServletSupport extends HttpServlet {
1:540dd5c: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(MessageServletSupport.class);
1:e7ca882: 
1:40a7d3b:     private boolean defaultTopicFlag = true;
1:40a7d3b:     private Destination defaultDestination;
1:40a7d3b:     private String destinationParameter = "destination";
1:33cf032:     private String typeParameter = "type";
1:40a7d3b:     private String bodyParameter = "body";
1:33cf032:     private boolean defaultMessagePersistent = true;
1:33cf032:     private int defaultMessagePriority = 5;
1:540dd5c:     private long defaultMessageTimeToLive;
1:1e54538:     private String destinationOptions;
1:40a7d3b: 
1:40a7d3b:     public void init(ServletConfig servletConfig) throws ServletException {
1:40a7d3b:         super.init(servletConfig);
1:1e54538: 
1:1e54538:         destinationOptions = servletConfig.getInitParameter("destinationOptions");
1:540dd5c: 
1:40a7d3b:         String name = servletConfig.getInitParameter("topic");
1:40a7d3b:         if (name != null) {
1:40a7d3b:             defaultTopicFlag = asBoolean(name);
8:40a7d3b:         }
1:1e54538: 
1:540dd5c:         if (LOG.isDebugEnabled()) {
1:540dd5c:             LOG.debug("Defaulting to use topics: " + defaultTopicFlag);
1:4443d32:         }
1:40a7d3b:         name = servletConfig.getInitParameter("destination");
1:40a7d3b:         if (name != null) {
1:40a7d3b:             if (defaultTopicFlag) {
1:40a7d3b:                 defaultDestination = new ActiveMQTopic(name);
1:540dd5c:             } else {
1:40a7d3b:                 defaultDestination = new ActiveMQQueue(name);
1:33cf032:             }
1:4c91a69:         }
1:1e54538: 
1:40a7d3b:         // lets check to see if there's a connection factory set
1:40a7d3b:         WebClient.initContext(getServletContext());
1:40a7d3b:     }
1:ce9f83c: 
1:40a7d3b:     public static boolean asBoolean(String param) {
1:40a7d3b:         return asBoolean(param, false);
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     public static boolean asBoolean(String param, boolean defaultValue) {
1:40a7d3b:         if (param == null) {
1:40a7d3b:             return defaultValue;
1:540dd5c:         } else {
1:40a7d3b:             return param.equalsIgnoreCase("true");
1:40a7d3b:         }
1:40a7d3b:     }
1:33cf032: 
1:ccca44a:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:40a7d3b:     protected void appendParametersToMessage(HttpServletRequest request, TextMessage message) throws JMSException {
1:a184831:         Map parameterMap = request.getParameterMap();
1:a184831:         if (parameterMap == null) {
1:a184831:             return;
1:a184831:         }
1:a184831:         Map parameters = new HashMap(parameterMap);
1:c2aad2a:         String correlationID = asString(parameters.remove("JMSCorrelationID"));
2:4c91a69:         if (correlationID != null) {
1:4c91a69:             message.setJMSCorrelationID(correlationID);
1:4c91a69:         }
1:4c91a69:         Long expiration = asLong(parameters.remove("JMSExpiration"));
2:4c91a69:         if (expiration != null) {
1:4c91a69:             message.setJMSExpiration(expiration.longValue());
1:4c91a69:         }
1:4c91a69:         Destination replyTo = asDestination(parameters.remove("JMSReplyTo"));
1:4c91a69:         if (replyTo != null) {
1:4c91a69:             message.setJMSReplyTo(replyTo);
1:4c91a69:         }
1:540dd5c:         String type = (String)asString(parameters.remove("JMSType"));
1:5af811f:         if (type != null) {
1:4c91a69:             message.setJMSType(type);
1:4c91a69:         }
1:a184831: 
1:4c91a69:         for (Iterator iter = parameters.entrySet().iterator(); iter.hasNext();) {
1:540dd5c:             Map.Entry entry = (Map.Entry)iter.next();
1:540dd5c:             String name = (String)entry.getKey();
1:540dd5c:             if (!destinationParameter.equals(name) && !typeParameter.equals(name) && !bodyParameter.equals(name) && !"JMSDeliveryMode".equals(name) && !"JMSPriority".equals(name)
1:540dd5c:                 && !"JMSTimeToLive".equals(name)) {
1:40a7d3b:                 Object value = entry.getValue();
1:40a7d3b:                 if (value instanceof Object[]) {
1:540dd5c:                     Object[] array = (Object[])value;
1:40a7d3b:                     if (array.length == 1) {
1:40a7d3b:                         value = array[0];
1:540dd5c:                     } else {
1:540dd5c:                         LOG.warn("Can't use property: " + name + " which is of type: " + value.getClass().getName() + " value");
1:40a7d3b:                         value = null;
1:540dd5c:                         int size = array.length;
1:540dd5c:                         for (int i = 0; i < size; i++) {
1:540dd5c:                             LOG.debug("value[" + i + "] = " + array[i]);
1:4c91a69:                         }
1:40a7d3b:                     }
1:40a7d3b:                 }
1:40a7d3b:                 if (value != null) {
1:40a7d3b:                     message.setObjectProperty(name, value);
1:40a7d3b:                 }
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:4c91a69: 
1:33cf032:     protected long getSendTimeToLive(HttpServletRequest request) {
1:33cf032:         String text = request.getParameter("JMSTimeToLive");
1:e7ca882:         if (text != null) {
1:33cf032:             return asLong(text);
1:33cf032:         }
1:33cf032:         return defaultMessageTimeToLive;
1:33cf032:     }
1:33cf032: 
1:33cf032:     protected int getSendPriority(HttpServletRequest request) {
1:33cf032:         String text = request.getParameter("JMSPriority");
2:33cf032:         if (text != null) {
1:33cf032:             return asInt(text);
1:33cf032:         }
1:33cf032:         return defaultMessagePriority;
1:33cf032:     }
1:33cf032: 
1:33cf032:     protected boolean isSendPersistent(HttpServletRequest request) {
1:540dd5c:         String text = request.getParameter("JMSDeliveryMode");
1:540dd5c:         if (text != null) {
1:540dd5c:             return text.trim().equalsIgnoreCase("persistent");
1:540dd5c:         }
1:33cf032:         return defaultMessagePersistent;
1:2b2b3e8:     }
1:4c91a69: 
1:2b2b3e8:     protected boolean isSync(HttpServletRequest request) {
1:2b2b3e8:         String text = request.getParameter("sync");
1:2b2b3e8:         if (text != null) {
1:2b2b3e8:             return true;
1:2b2b3e8:         }
1:2b2b3e8:         return false;
1:ccca44a:     }
1:2b2b3e8: 
1:4c91a69:     protected Destination asDestination(Object value) {
1:4c91a69:         if (value instanceof Destination) {
1:540dd5c:             return (Destination)value;
1:e7ca882:         }
1:4c91a69:         if (value instanceof String) {
1:540dd5c:             String text = (String)value;
1:4c91a69:             return ActiveMQDestination.createDestination(text, ActiveMQDestination.QUEUE_TYPE);
1:e7ca882:         }
1:c2aad2a:         if (value instanceof String[]) {
1:540dd5c:             String text = ((String[])value)[0];
1:9477854:             if (text == null) {
1:9477854:                 return null;
1:9477854:             }
1:c2aad2a:             return ActiveMQDestination.createDestination(text, ActiveMQDestination.QUEUE_TYPE);
1:4c91a69:         }
1:4c91a69:         return null;
1:4c91a69:     }
1:33cf032: 
1:4c91a69:     protected Integer asInteger(Object value) {
1:4c91a69:         if (value instanceof Integer) {
1:540dd5c:             return (Integer)value;
1:4c91a69:         }
1:4c91a69:         if (value instanceof String) {
1:540dd5c:             return Integer.valueOf((String)value);
1:4c91a69:         }
1:c2aad2a:         if (value instanceof String[]) {
1:540dd5c:             return Integer.valueOf(((String[])value)[0]);
1:4c91a69:         }
1:4c91a69:         return null;
1:40a7d3b:     }
1:4c91a69: 
1:4c91a69:     protected Long asLong(Object value) {
1:4c91a69:         if (value instanceof Long) {
1:540dd5c:             return (Long)value;
1:4c91a69:         }
1:4c91a69:         if (value instanceof String) {
1:540dd5c:             return Long.valueOf((String)value);
1:4c91a69:         }
1:c2aad2a:         if (value instanceof String[]) {
1:540dd5c:             return Long.valueOf(((String[])value)[0]);
1:4c91a69:         }
1:4c91a69:         return null;
1:40a7d3b:     }
1:4c91a69: 
1:33cf032:     protected long asLong(String name) {
1:33cf032:         return Long.parseLong(name);
1:33cf032:     }
1:540dd5c: 
1:33cf032:     protected int asInt(String name) {
1:33cf032:         return Integer.parseInt(name);
1:33cf032:     }
1:33cf032: 
1:c2aad2a:     protected String asString(Object value) {
1:c2aad2a:         if (value instanceof String[]) {
1:c2aad2a:             return ((String[])value)[0];
1:40a7d3b:         }
1:40a7d3b: 
1:c2aad2a:         if (value != null) {
1:c2aad2a:             return value.toString();
1:40a7d3b:         }
1:40a7d3b: 
1:c2aad2a:         return null;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return the destination to use for the current request
1:40a7d3b:      */
1:4e5012c:     protected Destination getDestination(WebClient client, HttpServletRequest request) throws JMSException {
1:40a7d3b:         String destinationName = request.getParameter(destinationParameter);
1:d0a4d36:         if (destinationName == null  || destinationName.equals("")) {
1:40a7d3b:             if (defaultDestination == null) {
1:40a7d3b:                 return getDestinationFromURI(client, request);
1:540dd5c:             } else {
1:40a7d3b:                 return defaultDestination;
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         return getDestination(client, request, destinationName);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @return the destination to use for the current request using the relative
1:540dd5c:      *         URI from where this servlet was invoked as the destination name
1:40a7d3b:      */
1:4e5012c:     protected Destination getDestinationFromURI(WebClient client, HttpServletRequest request) throws JMSException {
1:40a7d3b:         String uri = request.getPathInfo();
1:540dd5c:         if (uri == null) {
1:4e5012c:             return null;
1:540dd5c:         }
1:540dd5c: 
1:40a7d3b:         // replace URI separator with JMS destination separator
1:40a7d3b:         if (uri.startsWith("/")) {
1:40a7d3b:             uri = uri.substring(1);
1:540dd5c:             if (uri.length() == 0) {
1:92b9d86:                 return null;
1:540dd5c:             }
1:40a7d3b:         }
1:540dd5c: 
1:40a7d3b:         uri = uri.replace('/', '.');
1:9ed183d:         LOG.debug("destination uri=" + uri);
1:40a7d3b:         return getDestination(client, request, uri);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return the Destination object for the given destination name
1:40a7d3b:      */
1:40a7d3b:     protected Destination getDestination(WebClient client, HttpServletRequest request, String destinationName) throws JMSException {
1:540dd5c: 
1:92b9d86:         // TODO cache destinations ???
1:540dd5c: 
1:540dd5c:         boolean isTopic = defaultTopicFlag;
1:540dd5c:         if (destinationName.startsWith("topic://")) {
1:540dd5c:             isTopic = true;
1:b73b8bc:         } else if (destinationName.startsWith("channel://") || destinationName.startsWith("queue://")) {
1:540dd5c:             isTopic = false;
1:540dd5c:         } else {
1:540dd5c:             isTopic = isTopic(request);
1:40a7d3b:         }
1:554a01a:         if (destinationName.indexOf("://") != -1) {
1:554a01a:             destinationName = destinationName.substring(destinationName.indexOf("://") + 3);
1:554a01a:         }
1:540dd5c: 
1:540dd5c:         if (destinationOptions != null) {
1:1e54538:             destinationName += "?" + destinationOptions;
1:1e54538:         }
1:9ed183d:         LOG.debug(destinationName + " (" + (isTopic ? "topic" : "queue") + ")");
1:540dd5c:         if (isTopic) {
1:40a7d3b:             return client.getSession().createTopic(destinationName);
1:540dd5c:         } else {
1:40a7d3b:             return client.getSession().createQueue(destinationName);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @return true if the current request is for a topic destination, else
1:540dd5c:      *         false if its for a queue
1:40a7d3b:      */
1:4e5012c:     protected boolean isTopic(HttpServletRequest request) {
1:33cf032:         String typeText = request.getParameter(typeParameter);
1:33cf032:         if (typeText == null) {
1:33cf032:             return defaultTopicFlag;
1:40a7d3b:         }
1:33cf032:         return typeText.equalsIgnoreCase("topic");
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @return the text that was posted to the servlet which is used as the body
1:40a7d3b:      *         of the message to be sent
1:40a7d3b:      */
1:40a7d3b:     protected String getPostedMessageBody(HttpServletRequest request) throws IOException {
1:40a7d3b:         String answer = request.getParameter(bodyParameter);
1:ccca44a:         String contentType = request.getContentType();
1:70e2b99:         if (answer == null && contentType != null) {
1:70e2b99:             LOG.debug("Content-Type={}", contentType);
1:40a7d3b:             // lets read the message body instead
1:40a7d3b:             BufferedReader reader = request.getReader();
1:40a7d3b:             StringBuffer buffer = new StringBuffer();
1:40a7d3b:             while (true) {
1:40a7d3b:                 String line = reader.readLine();
1:40a7d3b:                 if (line == null) {
1:40a7d3b:                     break;
1:40a7d3b:                 }
1:40a7d3b:                 buffer.append(line);
1:40a7d3b:                 buffer.append("\n");
1:40a7d3b:             }
1:40a7d3b:             return buffer.toString();
1:40a7d3b:         }
1:40a7d3b:         return answer;
1:40a7d3b:     }
1:ccca44a: 
1:ce9f83c:     protected String getSelector(HttpServletRequest request) throws IOException {
1:ccca44a:         return request.getHeader(WebClient.selectorName);
1:ce9f83c:     }
1:40a7d3b: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:70e2b99
/////////////////////////////////////////////////////////////////////////
1:         if (answer == null && contentType != null) {
1:             LOG.debug("Content-Type={}", contentType);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5af811f
/////////////////////////////////////////////////////////////////////////
1:         if (type != null) {
commit:ccca44a
/////////////////////////////////////////////////////////////////////////
1:  * parameters
1:  * <dd>Set to 'true' if the servlet should default to using topics rather than
1:  *
1:  *
1: @SuppressWarnings("serial")
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
1:         String contentType = request.getContentType();
0:         if (answer == null && contentType != null && contentType.toLowerCase().startsWith("text/xml")) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         return request.getHeader(WebClient.selectorName);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1:  * A useful base class for any JMS related servlet; there are various ways to
1:  * map JMS operations to web requests so we put most of the common behaviour in
1:  * a reusable base class. This servlet can be configured with the following init
0:  * paramters
1:  * <dl>
1:  * <dt>topic</dt>
0:  * <dd>Set to 'true' if the servle should default to using topics rather than
1:  * channels</dd>
1:  * <dt>destination</dt>
1:  * <dd>The default destination to use if one is not specifiied</dd>
1:  * <dt></dt>
1:  * <dd></dd>
1:  * 
0:     private static final transient Log LOG = LogFactory.getLog(MessageServletSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     private long defaultMessageTimeToLive;
1: 
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Defaulting to use topics: " + defaultTopicFlag);
1:             } else {
/////////////////////////////////////////////////////////////////////////
1: 
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         String type = (String)asString(parameters.remove("JMSType"));
1:             Map.Entry entry = (Map.Entry)iter.next();
1:             String name = (String)entry.getKey();
1:             if (!destinationParameter.equals(name) && !typeParameter.equals(name) && !bodyParameter.equals(name) && !"JMSDeliveryMode".equals(name) && !"JMSPriority".equals(name)
1:                 && !"JMSTimeToLive".equals(name)) {
1:                     Object[] array = (Object[])value;
1:                     } else {
1:                         LOG.warn("Can't use property: " + name + " which is of type: " + value.getClass().getName() + " value");
1:                         int size = array.length;
1:                         for (int i = 0; i < size; i++) {
1:                             LOG.debug("value[" + i + "] = " + array[i]);
/////////////////////////////////////////////////////////////////////////
1:         String text = request.getParameter("JMSDeliveryMode");
1:         if (text != null) {
1:             return text.trim().equalsIgnoreCase("persistent");
1:         }
1:             return (Destination)value;
1:             String text = (String)value;
1:             String text = ((String[])value)[0];
/////////////////////////////////////////////////////////////////////////
1:             return (Integer)value;
1:             return Integer.valueOf((String)value);
1:             return Integer.valueOf(((String[])value)[0]);
1:             return (Long)value;
1:             return Long.valueOf((String)value);
1:             return Long.valueOf(((String[])value)[0]);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:      * @return the destination to use for the current request using the relative
1:      *         URI from where this servlet was invoked as the destination name
1:         if (uri == null) {
1:         }
1: 
1:             if (uri.length() == 0) {
1:             }
1: 
0:         System.err.println("destination uri=" + uri);
/////////////////////////////////////////////////////////////////////////
1: 
1:         boolean isTopic = defaultTopicFlag;
1:         if (destinationName.startsWith("topic://")) {
1:             isTopic = true;
0:             destinationName = destinationName.substring(8);
0:         } else if (destinationName.startsWith("channel://")) {
1:             isTopic = false;
0:             destinationName = destinationName.substring(10);
1:         } else {
1:             isTopic = isTopic(request);
1: 
1:         if (destinationOptions != null) {
1: 
1:         if (isTopic) {
1:         } else {
1:      * @return true if the current request is for a topic destination, else
1:      *         false if its for a queue
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:415f35b
/////////////////////////////////////////////////////////////////////////
0:             is_topic=false;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:1e54538
/////////////////////////////////////////////////////////////////////////
1:     private String destinationOptions;
1:         destinationOptions = servletConfig.getInitParameter("destinationOptions");
1:         
/////////////////////////////////////////////////////////////////////////
1:         
0:         if( destinationOptions!=null ) {
1:             destinationName += "?" + destinationOptions;
1:         }
1:         
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:88d5857
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
commit:f1a084e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.web;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(MessageServletSupport.class);
commit:554a01a
/////////////////////////////////////////////////////////////////////////
1:         if (destinationName.indexOf("://") != -1) {
1:             destinationName = destinationName.substring(destinationName.indexOf("://") + 3);
1:         }
commit:b73b8bc
/////////////////////////////////////////////////////////////////////////
1:         } else if (destinationName.startsWith("channel://") || destinationName.startsWith("queue://")) {
0:         destinationName = destinationName.substring(destinationName.indexOf("://") + 3);
commit:a05e84e
/////////////////////////////////////////////////////////////////////////
0:     	return request.getHeader(WebClient.selectorName);
commit:ce9f83c
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected String getSelector(HttpServletRequest request) throws IOException {
0:     	return request.getHeader(WebClient.SELECTOR_NAME);
1:     }
commit:2b2b3e8
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isSync(HttpServletRequest request) {
1:         String text = request.getParameter("sync");
1:         if (text != null) {
1:             return true;
1:         }
1:         return false;
1:     }    
1: 
commit:9ed183d
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("destination uri=" + uri);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug(destinationName + " (" + (isTopic ? "topic" : "queue") + ")");
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:d0a4d36
/////////////////////////////////////////////////////////////////////////
1:         if (destinationName == null  || destinationName.equals("")) {
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:8842445
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
commit:e7ca882
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if (!destinationParameter.equals(name) 
0:             		&& !typeParameter.equals(name) 
0:             		&& !bodyParameter.equals(name)
0:             		&& !"JMSDeliveryMode".equals(name)
0:             		&& !"JMSPriority".equals(name)
0:             		&& !"JMSTimeToLive".equals(name)) {
/////////////////////////////////////////////////////////////////////////
0:                              log.debug("value[" + i + "] = " + array[i]);
/////////////////////////////////////////////////////////////////////////
0:     	String text = request.getParameter("JMSDeliveryMode");
1:     	if (text != null) {
0:     		if (text.trim().equalsIgnoreCase("persistent")) {
0:     			return true;
0:     		} else {
0:     			return false;
1:     		}
1:     	}
commit:4443d32
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(MessageServletSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (log.isDebugEnabled()) {
0:             log.debug("Defaulting to use topics: " + defaultTopicFlag);
1:         }
/////////////////////////////////////////////////////////////////////////
0:                         log.warn("Can't use property: " + name + " which is of type: " + value.getClass().getName() + " value");
0:                             log.debug("value[" + i + "] = " + array[i]);
commit:c1a1dd2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:9477854
/////////////////////////////////////////////////////////////////////////
1:             if (text == null) {
1:                 return null;
1:             }
commit:33cf032
/////////////////////////////////////////////////////////////////////////
1:     private String typeParameter = "type";
1:     private boolean defaultMessagePersistent = true;
1:     private int defaultMessagePriority = 5;
0:     private long defaultMessageTimeToLive = 0;
/////////////////////////////////////////////////////////////////////////
0:             if (!destinationParameter.equals(name) && !typeParameter.equals(name) && !bodyParameter.equals(name)) {
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     protected long getSendTimeToLive(HttpServletRequest request) {
1:         String text = request.getParameter("JMSTimeToLive");
1:         if (text != null) {
1:             return asLong(text);
1:         }
1:         return defaultMessageTimeToLive;
1:     }
1: 
1:     protected int getSendPriority(HttpServletRequest request) {
1:         String text = request.getParameter("JMSPriority");
1:         if (text != null) {
1:             return asInt(text);
1:         }
1:         return defaultMessagePriority;
1:     }
1: 
1:     protected boolean isSendPersistent(HttpServletRequest request) {
1:         return defaultMessagePersistent;
/////////////////////////////////////////////////////////////////////////
1:     protected long asLong(String name) {
1:         return Long.parseLong(name);
1:     }
1:     
1:     protected int asInt(String name) {
1:         return Integer.parseInt(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         String typeText = request.getParameter(typeParameter);
1:         if (typeText == null) {
1:             return defaultTopicFlag;
1:         return typeText.equalsIgnoreCase("topic");
commit:a184831
/////////////////////////////////////////////////////////////////////////
1:         Map parameterMap = request.getParameterMap();
1:         if (parameterMap == null) {
1:             return;
1:         }
1:         Map parameters = new HashMap(parameterMap);
/////////////////////////////////////////////////////////////////////////
1:         
commit:4c91a69
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
0:         Map parameters = new HashMap(request.getParameterMap());
0:         String correlationID = (String) parameters.remove("JMSCorrelationID");
1:         if (correlationID != null) {
1:             message.setJMSCorrelationID(correlationID);
1:         }
1:         Long expiration = asLong(parameters.remove("JMSExpiration"));
1:         if (expiration != null) {
1:             message.setJMSExpiration(expiration.longValue());
1:         }
0:         Integer priority = asInteger(parameters.remove("JMSPriority"));
1:         if (expiration != null) {
0:             message.setJMSPriority(priority.intValue());
1:         }
1:         Destination replyTo = asDestination(parameters.remove("JMSReplyTo"));
1:         if (replyTo != null) {
1:             message.setJMSReplyTo(replyTo);
1:         }
0:         String type = (String) parameters.remove("JMSType");
1:         if (correlationID != null) {
1:             message.setJMSType(type);
1:         }
1: 
1:         for (Iterator iter = parameters.entrySet().iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:     protected Destination asDestination(Object value) {
1:         if (value instanceof Destination) {
0:             return (Destination) value;
1:         }
1:         if (value instanceof String) {
0:             String text = (String) value;
1:             return ActiveMQDestination.createDestination(text, ActiveMQDestination.QUEUE_TYPE);
1:         }
1:         return null;
1:     }
1: 
1:     protected Integer asInteger(Object value) {
1:         if (value instanceof Integer) {
0:             return (Integer) value;
1:         }
1:         if (value instanceof String) {
0:             return Integer.valueOf((String) value);
1:         }
1:         return null;
1:     }
1: 
1:     protected Long asLong(Object value) {
1:         if (value instanceof Long) {
0:             return (Long) value;
1:         }
1:         if (value instanceof String) {
0:             return Long.valueOf((String) value);
1:         }
1:         return null;
1:     }
1: 
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: 
0: package org.activemq.web;
1: 
0: import org.activemq.command.ActiveMQQueue;
0: import org.activemq.command.ActiveMQTopic;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.TextMessage;
1: import javax.servlet.ServletConfig;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
0: import javax.servlet.http.HttpSession;
0: import java.io.BufferedReader;
0: import java.io.IOException;
0: import java.util.Iterator;
0: import java.util.Map;
1: 
1: /**
0:  * A useful base class for any JMS related servlet;
0:  * there are various ways to map JMS operations to web requests
0:  * so we put most of the common behaviour in a reusable base class.
0:  *
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public abstract class MessageServletSupport extends HttpServlet {
1: 
1:     private boolean defaultTopicFlag = true;
1:     private Destination defaultDestination;
1:     private String destinationParameter = "destination";
0:     private String topicParameter = "topic";
1:     private String bodyParameter = "body";
1: 
1: 
1:     public void init(ServletConfig servletConfig) throws ServletException {
1:         super.init(servletConfig);
1: 
1:         String name = servletConfig.getInitParameter("topic");
1:         if (name != null) {
1:             defaultTopicFlag = asBoolean(name);
1:         }
1: 
0:         log("Defaulting to use topics: " + defaultTopicFlag);
1: 
1:         name = servletConfig.getInitParameter("destination");
1:         if (name != null) {
1:             if (defaultTopicFlag) {
1:                 defaultDestination = new ActiveMQTopic(name);
1:             }
0:             else {
1:                 defaultDestination = new ActiveMQQueue(name);
1:             }
1:         }
1: 
1:         // lets check to see if there's a connection factory set
1:         WebClient.initContext(getServletContext());
1:     }
1: 
0:     protected WebClient createWebClient(HttpServletRequest request) {
0:         return new WebClient(getServletContext());
1:     }
1: 
1:     public static boolean asBoolean(String param) {
1:         return asBoolean(param, false);
1:     }
1:     
1:     public static boolean asBoolean(String param, boolean defaultValue) {
1:         if (param == null) {
1:             return defaultValue;
1:         }
0:         else {
1:             return param.equalsIgnoreCase("true");
1:         }
1:     }
1: 
1:     /**
0:      * Helper method to get the client for the current session
0:      *
0:      * @param request is the current HTTP request
0:      * @return the current client or a newly creates
1:      */
0:     protected WebClient getWebClient(HttpServletRequest request) {
0:         HttpSession session = request.getSession(true);
0:         WebClient client = WebClient.getWebClient(session);
0:         if (client == null) {
0:             client = createWebClient(request);
0:             session.setAttribute(WebClient.webClientAttribute, client);
1:         }
0:         return client;
1:     }
1: 
1: 
1:     protected void appendParametersToMessage(HttpServletRequest request, TextMessage message) throws JMSException {
0:         for (Iterator iter = request.getParameterMap().entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
0:             String name = (String) entry.getKey();
0:             if (!destinationParameter.equals(name) && !topicParameter.equals(name) && !bodyParameter.equals(name)) {
1:                 Object value = entry.getValue();
1:                 if (value instanceof Object[]) {
0:                     Object[] array = (Object[]) value;
1:                     if (array.length == 1) {
1:                         value = array[0];
1:                     }
0:                     else {
0:                         log("Can't use property: " + name + " which is of type: " + value.getClass().getName() + " value");
1:                         value = null;
0:                         for (int i = 0, size = array.length; i < size; i++) {
0:                             log("value[" + i + "] = " + array[i]);
1:                         }
1:                     }
1:                 }
1:                 if (value != null) {
1:                     message.setObjectProperty(name, value);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @return the destination to use for the current request
1:      */
0:     protected Destination getDestination(WebClient client, HttpServletRequest request) throws JMSException, NoDestinationSuppliedException {
1:         String destinationName = request.getParameter(destinationParameter);
0:         if (destinationName == null) {
1:             if (defaultDestination == null) {
1:                 return getDestinationFromURI(client, request);
1:             }
0:             else {
1:                 return defaultDestination;
1:             }
1:         }
1: 
1:         return getDestination(client, request, destinationName);
1:     }
1: 
1:     /**
0:      * @return the destination to use for the current request using the relative URI from
0:      *         where this servlet was invoked as the destination name
1:      */
0:     protected Destination getDestinationFromURI(WebClient client, HttpServletRequest request) throws NoDestinationSuppliedException, JMSException {
1:         String uri = request.getPathInfo();
0:         if (uri == null) {
0:             throw new NoDestinationSuppliedException();
1:         }
1:         // replace URI separator with JMS destination separator
1:         if (uri.startsWith("/")) {
1:             uri = uri.substring(1);
1:         }
1:         uri = uri.replace('/', '.');
1:         return getDestination(client, request, uri);
1:     }
1: 
1:     /**
1:      * @return the Destination object for the given destination name
1:      */
1:     protected Destination getDestination(WebClient client, HttpServletRequest request, String destinationName) throws JMSException {
0:         if (isTopic(request)) {
1:             return client.getSession().createTopic(destinationName);
1:         }
0:         else {
1:             return client.getSession().createQueue(destinationName);
1:         }
1:     }
1: 
1:     /**
0:      * @return true if the current request is for a topic destination, else false if its for a queue
1:      */
0:     protected boolean isTopic
0:             (HttpServletRequest
0:             request) {
0:         boolean aTopic = defaultTopicFlag;
0:         String aTopicText = request.getParameter(topicParameter);
0:         if (aTopicText != null) {
0:             aTopic = asBoolean(aTopicText);
1:         }
0:         return aTopic;
1:     }
1: 
0:     protected long asLong(String name) {
0:         return Long.parseLong(name);
1:     }
1: 
1:     /**
1:      * @return the text that was posted to the servlet which is used as the body
1:      *         of the message to be sent
1:      */
1:     protected String getPostedMessageBody(HttpServletRequest request) throws IOException {
1:         String answer = request.getParameter(bodyParameter);
0:         if (answer == null) {
1:             // lets read the message body instead
1:             BufferedReader reader = request.getReader();
1:             StringBuffer buffer = new StringBuffer();
1:             while (true) {
1:                 String line = reader.readLine();
1:                 if (line == null) {
1:                     break;
1:                 }
1:                 buffer.append(line);
1:                 buffer.append("\n");
1:             }
1:             return buffer.toString();
1:         }
1:         return answer;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:c2aad2a
/////////////////////////////////////////////////////////////////////////
1:         String correlationID = asString(parameters.remove("JMSCorrelationID"));
/////////////////////////////////////////////////////////////////////////
0:         String type = (String) asString(parameters.remove("JMSType"));
/////////////////////////////////////////////////////////////////////////
1:         if (value instanceof String[]) {
0:             String text = ((String[]) value)[0];
1:             return ActiveMQDestination.createDestination(text, ActiveMQDestination.QUEUE_TYPE);
0:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value instanceof String[]) {
0:             return Integer.valueOf(((String[]) value)[0]);
0:         }
/////////////////////////////////////////////////////////////////////////
1:         if (value instanceof String[]) {
0:             return Long.valueOf(((String[]) value)[0]);
0:         }
1:         return null;
0:     }
0: 
1:     protected String asString(Object value) {
1:         if (value instanceof String[]) {
1:             return ((String[])value)[0];
0:         }
0: 
1:         if (value != null) {
1:             return value.toString();
0:         }
0: 
author:Gregory John Wilkins
-------------------------------------------------------------------------------
commit:4060ad9
/////////////////////////////////////////////////////////////////////////
0:  * This servlet can be configured with the following init paramters <dl>
0:  * <dt>topic</dt><dd>Set to 'true' if the servle should default to using topics rather than channels</dd>
0:  * <dt>destination</dt><dd>The default destination to use if one is not specifiied</dd>
0:  * <dt></dt><dd></dd>
1:  * </dl>
/////////////////////////////////////////////////////////////////////////
0:         return new WebClient();
/////////////////////////////////////////////////////////////////////////
0:         if (client == null || client.isClosed()) {
commit:92b9d86
/////////////////////////////////////////////////////////////////////////
0:         if (uri == null)
0:         
0:             if (uri.length()==0)
1:                 return null;
0:         
/////////////////////////////////////////////////////////////////////////
0: 
1:         // TODO cache destinations ???
0:         
0:         boolean is_topic=defaultTopicFlag;
0:         if (destinationName.startsWith("topic://"))
0:         {
0:             is_topic=true;
0:             destinationName=destinationName.substring(8);
0:         }
0:         else if (destinationName.startsWith("channel://"))
0:         {
0:             is_topic=true;
0:             destinationName=destinationName.substring(10);
0:         }
0:         else 
0:             is_topic=isTopic(request);
0:              
0:         if (is_topic) {
/////////////////////////////////////////////////////////////////////////
0:         if (answer == null && "text/xml".equals(request.getContentType())) {
commit:4e5012c
/////////////////////////////////////////////////////////////////////////
1:     protected Destination getDestination(WebClient client, HttpServletRequest request) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:     protected Destination getDestinationFromURI(WebClient client, HttpServletRequest request) throws JMSException {
1:             return null;
0:         System.err.println("destination uri="+uri);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isTopic(HttpServletRequest request) {
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:b6b7cce
============================================================================