1:14e636b: /**
1:14e636b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:14e636b:  * contributor license agreements.  See the NOTICE file distributed with
1:14e636b:  * this work for additional information regarding copyright ownership.
1:14e636b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:14e636b:  * (the "License"); you may not use this file except in compliance with
1:14e636b:  * the License.  You may obtain a copy of the License at
1:14e636b:  *
1:14e636b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:14e636b:  *
1:14e636b:  * Unless required by applicable law or agreed to in writing, software
1:14e636b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:14e636b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:14e636b:  * See the License for the specific language governing permissions and
1:14e636b:  * limitations under the License.
1:14e636b:  */
1:14e636b: package org.apache.activemq.transport.failover;
1:14e636b: 
1:14e636b: import static org.junit.Assert.assertTrue;
1:14e636b: 
1:14e636b: import javax.jms.Connection;
1:14e636b: import javax.jms.ConnectionFactory;
1:14e636b: import javax.jms.JMSException;
1:14e636b: import javax.jms.Session;
1:14e636b: 
1:14e636b: import org.apache.activemq.ActiveMQConnectionFactory;
1:14e636b: import org.apache.activemq.broker.BrokerService;
1:14e636b: import org.apache.activemq.util.Wait;
1:14e636b: import org.junit.AfterClass;
1:14e636b: import org.junit.BeforeClass;
1:14e636b: import org.junit.Test;
1:14e636b: 
1:14e636b: /**
1:14e636b:  * Ensures connections aren't leaked when when we use backup=true and randomize=false
1:14e636b:  */
1:14e636b: public class FailoverBackupLeakTest {
1:14e636b: 
1:14e636b:     private static BrokerService s1, s2;
1:14e636b: 
1:14e636b:     @BeforeClass
1:14e636b:     public static void setUp() throws Exception {
1:14e636b:         s1 = buildBroker("broker1");
1:14e636b:         s2 = buildBroker("broker2");
1:14e636b: 
1:14e636b:         s1.start();
1:14e636b:         s1.waitUntilStarted();
1:14e636b:         s2.start();
1:14e636b:         s2.waitUntilStarted();
1:14e636b:     }
1:14e636b: 
1:14e636b:     @AfterClass
1:14e636b:     public static void tearDown() throws Exception {
1:14e636b:         if (s2 != null) {
1:14e636b:             s2.stop();
1:14e636b:             s2.waitUntilStopped();
1:14e636b:         }
1:14e636b:         if (s1 != null) {
1:14e636b:             s1.stop();
1:14e636b:             s1.waitUntilStopped();
1:14e636b:         }
1:14e636b:     }
1:14e636b: 
1:14e636b:     private static String getConnectString(BrokerService service) throws Exception {
1:14e636b:         return service.getTransportConnectors().get(0).getPublishableConnectString();
1:14e636b:     }
1:14e636b: 
1:14e636b:     private static BrokerService buildBroker(String brokerName) throws Exception {
1:14e636b:         BrokerService service = new BrokerService();
1:14e636b:         service.setBrokerName(brokerName);
1:14e636b:         service.setUseJmx(false);
1:14e636b:         service.setPersistent(false);
1:14e636b:         service.setUseShutdownHook(false);
1:14e636b:         service.addConnector("tcp://0.0.0.0:0?transport.closeAsync=false");
1:14e636b:         return service;
1:14e636b:     }
1:14e636b: 
1:14e636b:     @Test
1:14e636b:     public void backupNoRandomize() throws Exception {
1:14e636b:         check("backup=true&randomize=false");
1:14e636b:     }
1:14e636b: 
1:14e636b:     @Test
1:14e636b:     public void priorityBackupNoRandomize() throws Exception {
1:14e636b:         check("priorityBackup=true&randomize=false");
1:14e636b:     }
1:14e636b: 
1:14e636b:     private void check(String connectionProperties) throws Exception {
1:14e636b:         String s1URL = getConnectString(s1), s2URL = getConnectString(s2);
1:14e636b:         String uri = "failover://(" + s1URL + "," + s2URL + ")?" + connectionProperties;
1:14e636b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:14e636b:         for (int i = 0; i < 10; i++) {
1:14e636b:             buildConnection(factory);
1:14e636b:         }
1:14e636b: 
1:205d025:         assertTrue(connectionProperties +  " broker1 connection count not zero: was["+getConnectionCount(s1)+"]", Wait.waitFor(new Wait.Condition() {
1:14e636b: 
1:14e636b:             @Override
1:14e636b:             public boolean isSatisified() throws Exception {
1:14e636b:                 return getConnectionCount(s1) == 0;
1:14e636b:             }
1:14e636b:         }));
1:14e636b: 
1:205d025:         assertTrue(connectionProperties +  " broker2 connection count not zero: was["+getConnectionCount(s2)+"]", Wait.waitFor(new Wait.Condition() {
1:14e636b: 
1:14e636b:             @Override
1:14e636b:             public boolean isSatisified() throws Exception {
1:14e636b:                 return getConnectionCount(s2) == 0;
1:14e636b:             }
1:14e636b:         }));
1:14e636b:     }
1:14e636b: 
1:14e636b:     private int getConnectionCount(BrokerService service) {
1:14e636b:         return service.getTransportConnectors().get(0).getConnections().size();
1:14e636b:     }
1:14e636b: 
1:14e636b:     private void buildConnection(ConnectionFactory local) throws JMSException {
1:14e636b:         Connection conn = null;
1:14e636b:         Session sess = null;
1:14e636b:         try {
1:14e636b:             conn = local.createConnection();
1:14e636b:             sess =  conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:14e636b:         } finally {
1:14e636b:             try { if (sess != null) sess.close(); } catch (JMSException ignore) { }
1:14e636b:             try { if (conn != null) conn.close(); } catch (JMSException ignore) { }
1:14e636b:         }
1:14e636b:     }
1:14e636b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:205d025
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(connectionProperties +  " broker1 connection count not zero: was["+getConnectionCount(s1)+"]", Wait.waitFor(new Wait.Condition() {
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(connectionProperties +  " broker2 connection count not zero: was["+getConnectionCount(s2)+"]", Wait.waitFor(new Wait.Condition() {
commit:14e636b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.junit.AfterClass;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: /**
1:  * Ensures connections aren't leaked when when we use backup=true and randomize=false
1:  */
1: public class FailoverBackupLeakTest {
1: 
1:     private static BrokerService s1, s2;
1: 
1:     @BeforeClass
1:     public static void setUp() throws Exception {
1:         s1 = buildBroker("broker1");
1:         s2 = buildBroker("broker2");
1: 
1:         s1.start();
1:         s1.waitUntilStarted();
1:         s2.start();
1:         s2.waitUntilStarted();
1:     }
1: 
1:     @AfterClass
1:     public static void tearDown() throws Exception {
1:         if (s2 != null) {
1:             s2.stop();
1:             s2.waitUntilStopped();
1:         }
1:         if (s1 != null) {
1:             s1.stop();
1:             s1.waitUntilStopped();
1:         }
1:     }
1: 
1:     private static String getConnectString(BrokerService service) throws Exception {
1:         return service.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     private static BrokerService buildBroker(String brokerName) throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setBrokerName(brokerName);
1:         service.setUseJmx(false);
1:         service.setPersistent(false);
1:         service.setUseShutdownHook(false);
1:         service.addConnector("tcp://0.0.0.0:0?transport.closeAsync=false");
1:         return service;
1:     }
1: 
1:     @Test
1:     public void backupNoRandomize() throws Exception {
1:         check("backup=true&randomize=false");
1:     }
1: 
1:     @Test
1:     public void priorityBackupNoRandomize() throws Exception {
1:         check("priorityBackup=true&randomize=false");
1:     }
1: 
1:     private void check(String connectionProperties) throws Exception {
1:         String s1URL = getConnectString(s1), s2URL = getConnectString(s2);
1:         String uri = "failover://(" + s1URL + "," + s2URL + ")?" + connectionProperties;
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:         for (int i = 0; i < 10; i++) {
1:             buildConnection(factory);
1:         }
1: 
0:         assertTrue(connectionProperties +  " broker1 connection count not zero", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getConnectionCount(s1) == 0;
1:             }
1:         }));
1: 
0:         assertTrue(connectionProperties +  " broker2 connection count not zero", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getConnectionCount(s2) == 0;
1:             }
1:         }));
1:     }
1: 
1:     private int getConnectionCount(BrokerService service) {
1:         return service.getTransportConnectors().get(0).getConnections().size();
1:     }
1: 
1:     private void buildConnection(ConnectionFactory local) throws JMSException {
1:         Connection conn = null;
1:         Session sess = null;
1:         try {
1:             conn = local.createConnection();
1:             sess =  conn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         } finally {
1:             try { if (sess != null) sess.close(); } catch (JMSException ignore) { }
1:             try { if (conn != null) conn.close(); } catch (JMSException ignore) { }
1:         }
1:     }
1: }
============================================================================