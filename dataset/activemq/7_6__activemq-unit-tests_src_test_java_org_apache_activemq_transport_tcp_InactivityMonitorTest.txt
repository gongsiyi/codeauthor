1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
3:ef0c0e1:  *
1:ef0c0e1:  * Unless required by applicable law or agreed to in writing, software
1:ef0c0e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ef0c0e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ef0c0e1:  * See the License for the specific language governing permissions and
1:ef0c0e1:  * limitations under the License.
1:ef0c0e1:  */
1:1229c23: package org.apache.activemq.transport.tcp;
1:ef0c0e1: 
1:1229c23: import java.io.IOException;
1:1229c23: import java.net.URI;
1:ef0c0e1: import java.net.URISyntaxException;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:74a7a8b: 
1:74a7a8b: import javax.net.SocketFactory;
1:ef0c0e1: 
1:1229c23: import org.apache.activemq.CombinationTestSupport;
1:ef0c0e1: import org.apache.activemq.command.WireFormatInfo;
1:ef0c0e1: import org.apache.activemq.openwire.OpenWireFormat;
1:1229c23: import org.apache.activemq.transport.Transport;
1:1229c23: import org.apache.activemq.transport.TransportAcceptListener;
1:1229c23: import org.apache.activemq.transport.TransportFactory;
1:1229c23: import org.apache.activemq.transport.TransportListener;
1:1229c23: import org.apache.activemq.transport.TransportServer;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ef0c0e1: 
1:1229c23: public class InactivityMonitorTest extends CombinationTestSupport implements TransportAcceptListener {
1:13044de: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(InactivityMonitorTest.class);
1:230a86c: 
1:ecf89a6:     public Runnable serverRunOnCommand;
1:ecf89a6:     public Runnable clientRunOnCommand;
1:ecf89a6: 
1:1229c23:     private TransportServer server;
1:1229c23:     private Transport clientTransport;
1:1229c23:     private Transport serverTransport;
1:7a46a1c:     private int serverPort;
1:230a86c: 
1:1229c23:     private final AtomicInteger clientReceiveCount = new AtomicInteger(0);
1:1229c23:     private final AtomicInteger clientErrorCount = new AtomicInteger(0);
1:1229c23:     private final AtomicInteger serverReceiveCount = new AtomicInteger(0);
1:1229c23:     private final AtomicInteger serverErrorCount = new AtomicInteger(0);
1:230a86c: 
1:1229c23:     private final AtomicBoolean ignoreClientError = new AtomicBoolean(false);
1:1229c23:     private final AtomicBoolean ignoreServerError = new AtomicBoolean(false);
1:230a86c: 
1:13044de:     @Override
1:1229c23:     protected void setUp() throws Exception {
1:1229c23:         super.setUp();
1:ef0c0e1:         startTransportServer();
1:ef0c0e1:     }
1:230a86c: 
1:ef0c0e1:     /**
1:ef0c0e1:      * @throws Exception
1:ef0c0e1:      * @throws URISyntaxException
1:ef0c0e1:      */
1:ef0c0e1:     private void startClient() throws Exception, URISyntaxException {
1:7a46a1c:         clientTransport = TransportFactory.connect(new URI("tcp://localhost:" + serverPort + "?trace=true&wireFormat.maxInactivityDuration=1000"));
1:1229c23:         clientTransport.setTransportListener(new TransportListener() {
1:13044de:             @Override
1:9ca56a0:             public void onCommand(Object command) {
1:1229c23:                 clientReceiveCount.incrementAndGet();
1:230a86c:                 if (clientRunOnCommand != null) {
1:1229c23:                     clientRunOnCommand.run();
4:1229c23:                 }
1:1229c23:             }
1:230a86c: 
1:13044de:             @Override
1:1229c23:             public void onException(IOException error) {
1:230a86c:                 if (!ignoreClientError.get()) {
1:fc00993:                     LOG.info("Client transport error:");
3:1229c23:                     error.printStackTrace();
1:1229c23:                     clientErrorCount.incrementAndGet();
1:ef0c0e1:                 }
1:ef0c0e1:             }
1:230a86c: 
1:13044de:             @Override
1:1229c23:             public void transportInterupted() {
1:1229c23:             }
1:230a86c: 
1:13044de:             @Override
1:1229c23:             public void transportResumed() {
1:230a86c:             }
1:230a86c:         });
1:13044de: 
1:1229c23:         clientTransport.start();
1:1229c23:     }
1:13044de: 
1:ef0c0e1:     /**
1:ef0c0e1:      * @throws IOException
1:ef0c0e1:      * @throws URISyntaxException
1:ef0c0e1:      * @throws Exception
1:ef0c0e1:      */
1:ef0c0e1:     private void startTransportServer() throws IOException, URISyntaxException, Exception {
1:7a46a1c:         server = TransportFactory.bind(new URI("tcp://localhost:0?trace=true&wireFormat.maxInactivityDuration=1000"));
1:ef0c0e1:         server.setAcceptListener(this);
1:ef0c0e1:         server.start();
1:7a46a1c: 
1:7a46a1c:         serverPort = server.getSocketAddress().getPort();
1:ef0c0e1:     }
1:230a86c: 
1:13044de:     @Override
1:1229c23:     protected void tearDown() throws Exception {
1:1229c23:         ignoreClientError.set(true);
1:1229c23:         ignoreServerError.set(true);
1:ef0c0e1:         try {
1:fc00993:             if (clientTransport != null) {
1:ef0c0e1:                 clientTransport.stop();
1:fc00993:             }
1:fc00993:             if (serverTransport != null) {
1:ef0c0e1:                 serverTransport.stop();
1:fc00993:             }
1:fc00993:             if (server != null) {
1:ef0c0e1:                 server.stop();
1:fc00993:             }
1:ef0c0e1:         } catch (Throwable e) {
1:ef0c0e1:             e.printStackTrace();
1:ef0c0e1:         }
1:1229c23:         super.tearDown();
1:1229c23:     }
1:230a86c: 
1:13044de:     @Override
1:1229c23:     public void onAccept(Transport transport) {
2:1229c23:         try {
1:fc00993:             LOG.info("[" + getName() + "] Server Accepted a Connection");
1:1229c23:             serverTransport = transport;
1:1229c23:             serverTransport.setTransportListener(new TransportListener() {
1:13044de:                 @Override
1:9ca56a0:                 public void onCommand(Object command) {
1:1229c23:                     serverReceiveCount.incrementAndGet();
1:230a86c:                     if (serverRunOnCommand != null) {
1:1229c23:                         serverRunOnCommand.run();
1:1229c23:                     }
1:1229c23:                 }
1:230a86c: 
1:13044de:                 @Override
1:1229c23:                 public void onException(IOException error) {
1:230a86c:                     if (!ignoreClientError.get()) {
1:fe50dd6:                         LOG.info("Server transport error:", error);
1:1229c23:                         serverErrorCount.incrementAndGet();
1:230a86c:                     }
1:1229c23:                 }
1:230a86c: 
1:13044de:                 @Override
1:1229c23:                 public void transportInterupted() {
1:1229c23:                 }
1:230a86c: 
1:13044de:                 @Override
1:1229c23:                 public void transportResumed() {
1:1229c23:                 }
1:230a86c:             });
1:1229c23:             serverTransport.start();
1:1229c23:         } catch (Exception e) {
1:1229c23:             e.printStackTrace();
1:1229c23:         }
1:1229c23:     }
1:230a86c: 
1:13044de:     @Override
1:1229c23:     public void onAcceptError(Exception error) {
1:8bf987b:         LOG.trace(error.toString());
1:1229c23:     }
1:230a86c: 
1:1229c23:     public void testClientHang() throws Exception {
1:230a86c:         // Manually create a client transport so that it does not send KeepAlive
1:13044de:         // packets.  this should simulate a client hang.
1:7a46a1c:         clientTransport = new TcpTransport(new OpenWireFormat(), SocketFactory.getDefault(), new URI("tcp://localhost:" + serverPort), null);
1:ef0c0e1:         clientTransport.setTransportListener(new TransportListener() {
1:13044de:             @Override
1:9ca56a0:             public void onCommand(Object command) {
1:ef0c0e1:                 clientReceiveCount.incrementAndGet();
1:230a86c:                 if (clientRunOnCommand != null) {
1:ef0c0e1:                     clientRunOnCommand.run();
1:230a86c:                 }
1:ef0c0e1:             }
1:230a86c: 
1:13044de:             @Override
1:ef0c0e1:             public void onException(IOException error) {
1:230a86c:                 if (!ignoreClientError.get()) {
1:fc00993:                     LOG.info("Client transport error:");
1:ef0c0e1:                     error.printStackTrace();
1:ef0c0e1:                     clientErrorCount.incrementAndGet();
1:ef0c0e1:                 }
1:ef0c0e1:             }
1:230a86c: 
1:13044de:             @Override
1:ef0c0e1:             public void transportInterupted() {
1:1229c23:             }
1:ef0c0e1: 
1:13044de:             @Override
1:ef0c0e1:             public void transportResumed() {
1:1229c23:             }
1:230a86c:         });
1:ef0c0e1: 
1:ef0c0e1:         clientTransport.start();
1:ef0c0e1:         WireFormatInfo info = new WireFormatInfo();
1:13044de:         info.setVersion(OpenWireFormat.DEFAULT_LEGACY_VERSION);
1:f559236:         info.setMaxInactivityDuration(1000);
1:ef0c0e1:         clientTransport.oneway(info);
1:230a86c: 
4:1229c23:         assertEquals(0, serverErrorCount.get());
1:6583ef1:         assertEquals(0, clientErrorCount.get());
1:230a86c: 
1:230a86c:         // Server should consider the client timed out right away since the
1:230a86c:         // client is not hart beating fast enough.
1:a593e35:         Thread.sleep(6000);
1:230a86c: 
4:1229c23:         assertEquals(0, clientErrorCount.get());
1:230a86c:         assertTrue(serverErrorCount.get() > 0);
1:1229c23:     }
1:230a86c: 
1:1229c23:     public void testNoClientHang() throws Exception {
1:ef0c0e1:         startClient();
1:230a86c: 
1:ef0c0e1:         assertEquals(0, serverErrorCount.get());
1:ef0c0e1:         assertEquals(0, clientErrorCount.get());
1:230a86c: 
1:ef0c0e1:         Thread.sleep(4000);
1:230a86c: 
1:230a86c:         assertEquals(0, clientErrorCount.get());
1:230a86c:         assertEquals(0, serverErrorCount.get());
1:1229c23:     }
1:ef0c0e1: 
1:1229c23:     /**
1:230a86c:      * Used to test when a operation blocks. This should not cause transport to
1:230a86c:      * get disconnected.
1:7a46a1c:      *
1:230a86c:      * @throws Exception
1:230a86c:      * @throws URISyntaxException
1:1229c23:      */
1:ef0c0e1:     public void initCombosForTestNoClientHangWithServerBlock() throws Exception {
1:ef0c0e1:         startClient();
1:230a86c: 
1:230a86c:         addCombinationValues("clientInactivityLimit", new Object[] {Long.valueOf(1000)});
1:230a86c:         addCombinationValues("serverInactivityLimit", new Object[] {Long.valueOf(1000)});
1:230a86c:         addCombinationValues("serverRunOnCommand", new Object[] {new Runnable() {
1:13044de:             @Override
1:230a86c:             public void run() {
1:230a86c:                 try {
1:fc00993:                     LOG.info("Sleeping");
1:230a86c:                     Thread.sleep(4000);
1:230a86c:                 } catch (InterruptedException e) {
1:230a86c:                 }
1:1229c23:             }
1:230a86c:         }});
1:1229c23:     }
1:230a86c: 
1:1229c23:     public void testNoClientHangWithServerBlock() throws Exception {
1:230a86c: 
1:ef0c0e1:         startClient();
1:230a86c: 
1:6583ef1:         assertEquals(0, serverErrorCount.get());
1:1229c23:         assertEquals(0, clientErrorCount.get());
1:230a86c: 
2:1229c23:         Thread.sleep(4000);
1:ef0c0e1: 
1:1229c23:         assertEquals(0, clientErrorCount.get());
1:1229c23:         assertEquals(0, serverErrorCount.get());
1:1229c23:     }
1:1229c23: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:13044de
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         // packets.  this should simulate a client hang.
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1: 
1:         info.setVersion(OpenWireFormat.DEFAULT_LEGACY_VERSION);
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7a46a1c
/////////////////////////////////////////////////////////////////////////
1:     private int serverPort;
/////////////////////////////////////////////////////////////////////////
1:         clientTransport = TransportFactory.connect(new URI("tcp://localhost:" + serverPort + "?trace=true&wireFormat.maxInactivityDuration=1000"));
/////////////////////////////////////////////////////////////////////////
1:         server = TransportFactory.bind(new URI("tcp://localhost:0?trace=true&wireFormat.maxInactivityDuration=1000"));
1: 
1:         serverPort = server.getSocketAddress().getPort();
/////////////////////////////////////////////////////////////////////////
0:         //
1:         clientTransport = new TcpTransport(new OpenWireFormat(), SocketFactory.getDefault(), new URI("tcp://localhost:" + serverPort), null);
/////////////////////////////////////////////////////////////////////////
1:      *
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(InactivityMonitorTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.trace(error.toString());
author:Gary Tully
-------------------------------------------------------------------------------
commit:a593e35
/////////////////////////////////////////////////////////////////////////
0:         info.setVersion(OpenWireFormat.DEFAULT_VERSION);
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(6000);
commit:fe50dd6
/////////////////////////////////////////////////////////////////////////
1:                         LOG.info("Server transport error:", error);
/////////////////////////////////////////////////////////////////////////
0:         LOG.trace(error);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
0:         server = TransportFactory.bind(new URI("tcp://localhost:61616?trace=true&wireFormat.maxInactivityDuration=1000"));
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     public Runnable serverRunOnCommand;
1:     public Runnable clientRunOnCommand;
1: 
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp.StompTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(InactivityMonitorTest.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Client transport error:");
/////////////////////////////////////////////////////////////////////////
1:             if (clientTransport != null) {
1:             }
1:             if (serverTransport != null) {
1:             }
1:             if (server != null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("[" + getName() + "] Server Accepted a Connection");
/////////////////////////////////////////////////////////////////////////
0:                         LOG.info("Server transport error:");
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Client transport error:");
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Sleeping");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.net.SocketFactory;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (clientRunOnCommand != null) {
1: 
1:                 if (!ignoreClientError.get()) {
1: 
1: 
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (clientTransport != null)
0:             if (serverTransport != null)
0:             if (server != null)
1: 
0:             log.info("[" + getName() + "] Server Accepted a Connection");
1:                     if (serverRunOnCommand != null) {
1: 
1:                     if (!ignoreClientError.get()) {
1: 
1: 
1:                 }
1:             });
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Manually create a client transport so that it does not send KeepAlive
0:         // packets.
1:                 if (clientRunOnCommand != null) {
1: 
1:                 if (!ignoreClientError.get()) {
1: 
1: 
1:             }
1:         });
1: 
1: 
1:         // Server should consider the client timed out right away since the
1:         // client is not hart beating fast enough.
1: 
1:         assertTrue(serverErrorCount.get() > 0);
1: 
1: 
1: 
1: 
1:         assertEquals(0, clientErrorCount.get());
1:         assertEquals(0, serverErrorCount.get());
1:      * Used to test when a operation blocks. This should not cause transport to
1:      * get disconnected.
1:      * 
1:      * @throws Exception
1:      * @throws URISyntaxException
1: 
1:         addCombinationValues("clientInactivityLimit", new Object[] {Long.valueOf(1000)});
1:         addCombinationValues("serverInactivityLimit", new Object[] {Long.valueOf(1000)});
1:         addCombinationValues("serverRunOnCommand", new Object[] {new Runnable() {
1:             public void run() {
1:                 try {
0:                     log.info("Sleeping");
1:                     Thread.sleep(4000);
1:                 } catch (InterruptedException e) {
1:             }
1:         }});
1: 
1: 
1: 
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
1:                 public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:b4b8499
/////////////////////////////////////////////////////////////////////////
0:         clientTransport = new TcpTransport(new OpenWireFormat(), SocketFactory.getDefault(), new URI("tcp://localhost:61616"), null);
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:                     log.info("Client transport error:");
/////////////////////////////////////////////////////////////////////////
0:             log.info("["+getName()+"] Server Accepted a Connection");
/////////////////////////////////////////////////////////////////////////
0:                         log.info("Server transport error:");
/////////////////////////////////////////////////////////////////////////
0:                     log.info("Client transport error:");
/////////////////////////////////////////////////////////////////////////
0:                         log.info("Sleeping");
commit:ef0c0e1
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.net.URISyntaxException;
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.openwire.OpenWireFormat;
/////////////////////////////////////////////////////////////////////////
1:         startTransportServer();
1:     }
1: 
1:     /**
1:      * @throws Exception
1:      * @throws URISyntaxException
1:      */
1:     private void startClient() throws Exception, URISyntaxException {
0:         clientTransport = TransportFactory.connect(new URI("tcp://localhost:61616?trace=true&wireFormat.maxInactivityDuration=1000"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      * @throws Exception
1:      */
1:     private void startTransportServer() throws IOException, URISyntaxException, Exception {
0:         server = TransportFactory.bind("localhost", new URI("tcp://localhost:61616?trace=true&wireFormat.maxInactivityDuration=1000"));
1:         server.setAcceptListener(this);
1:         server.start();
1:     }
1:         try {
0:             if( clientTransport!=null )
1:                 clientTransport.stop();
0:             if( serverTransport!=null )
1:                 serverTransport.stop();
0:             if( server!=null )
1:                 server.stop();
1:         } catch (Throwable e) {
1:             e.printStackTrace();
1:         }
0:             System.out.println("["+getName()+"] Server Accepted a Connection");
/////////////////////////////////////////////////////////////////////////
0:         // 
0:         // Manually create a client transport so that it does not send KeepAlive packets.
0:         // this should simulate a client hang.
0:         clientTransport = new TcpTransport(new OpenWireFormat(), new URI("tcp://localhost:61616"));
1:         clientTransport.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
1:                 clientReceiveCount.incrementAndGet();
0:                 if( clientRunOnCommand !=null ) {
1:                     clientRunOnCommand.run();
1:                 }
1:             }
1:             public void onException(IOException error) {
0:                 if( !ignoreClientError.get() ) {
0:                     System.out.println("Client transport error:");
1:                     error.printStackTrace();
1:                     clientErrorCount.incrementAndGet();
1:                 }
1:             }
1:             public void transportInterupted() {
1:             }
1:             public void transportResumed() {
0:             }});
1:         clientTransport.start();
1:         WireFormatInfo info = new WireFormatInfo();
0:         info.seMaxInactivityDuration(1000);
1:         clientTransport.oneway(info);
1:         
/////////////////////////////////////////////////////////////////////////
1:         startClient();
1:     	assertEquals(0, clientErrorCount.get());
1:     	assertEquals(0, serverErrorCount.get());
0:      * @throws Exception 
0:      * @throws URISyntaxException 
1:     public void initCombosForTestNoClientHangWithServerBlock() throws Exception {
1:         
1:         startClient();
1: 
1:                         Thread.sleep(4000);
1:     
1:         startClient();
1: 
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
0:         server = TransportFactory.bind("localhost", new URI("tcp://localhost:61616?trace=true&maxInactivityDuration="+serverInactivityLimit));
0:         clientTransport = TransportFactory.connect(new URI("tcp://localhost:61616?trace=true&maxInactivityDuration="+clientInactivityLimit));
/////////////////////////////////////////////////////////////////////////
0:         if( clientErrorCount.get() > 0 )
1:         	assertEquals(0, clientErrorCount.get());
0:         if( serverErrorCount.get() > 0 )
1:         	assertEquals(0, serverErrorCount.get());
commit:1229c23
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.tcp;
0: 
1: import java.io.IOException;
1: import java.net.URI;
0: 
1: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportAcceptListener;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.TransportServer;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: 
0: 
1: public class InactivityMonitorTest extends CombinationTestSupport implements TransportAcceptListener {
0:     
1:     private TransportServer server;
1:     private Transport clientTransport;
1:     private Transport serverTransport;
0:     
1:     private final AtomicInteger clientReceiveCount = new AtomicInteger(0);
1:     private final AtomicInteger clientErrorCount = new AtomicInteger(0);
1:     private final AtomicInteger serverReceiveCount = new AtomicInteger(0);
1:     private final AtomicInteger serverErrorCount = new AtomicInteger(0);
0:     
1:     private final AtomicBoolean ignoreClientError = new AtomicBoolean(false);
1:     private final AtomicBoolean ignoreServerError = new AtomicBoolean(false);
0:     
0:     public Runnable serverRunOnCommand;
0:     public Runnable clientRunOnCommand;
0:     
0:     public long clientInactivityLimit;
0:     public long serverInactivityLimit;
0: 
0:     
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         server = TransportFactory.bind("localhost", new URI("tcp://localhost:61616?maxInactivityDuration="+serverInactivityLimit));
0:         server.setAcceptListener(this);
0:         server.start();
0:         clientTransport = TransportFactory.connect(new URI("tcp://localhost:61616?maxInactivityDuration="+clientInactivityLimit));
1:         clientTransport.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
1:                 clientReceiveCount.incrementAndGet();
0:                 if( clientRunOnCommand !=null ) {
1:                     clientRunOnCommand.run();
1:                 }
1:             }
1:             public void onException(IOException error) {
0:                 if( !ignoreClientError.get() ) {
0:                     System.out.println("Client transport error:");
1:                     error.printStackTrace();
1:                     clientErrorCount.incrementAndGet();
1:                 }
1:             }
1:             public void transportInterupted() {
1:             }
1:             public void transportResumed() {
0:             }});
1:         clientTransport.start();
1:     }
0:     
1:     protected void tearDown() throws Exception {
1:         ignoreClientError.set(true);
1:         ignoreServerError.set(true);
0:         clientTransport.stop();
0:         serverTransport.stop();
0:         server.stop();
1:         super.tearDown();
1:     }
0:     
1:     public void onAccept(Transport transport) {
1:         try {
1:             serverTransport = transport;
1:             serverTransport.setTransportListener(new TransportListener() {
0:                 public void onCommand(Command command) {
1:                     serverReceiveCount.incrementAndGet();
0:                     if( serverRunOnCommand !=null ) {
1:                         serverRunOnCommand.run();
1:                     }
1:                 }
1:                 public void onException(IOException error) {
0:                     if( !ignoreClientError.get() ) {
0:                         System.out.println("Server transport error:");
1:                         error.printStackTrace();
1:                         serverErrorCount.incrementAndGet();
1:                     }
1:                 }
1:                 public void transportInterupted() {
1:                 }
1:                 public void transportResumed() {
0:                 }});
1:             serverTransport.start();
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
0: 
1:     public void onAcceptError(Exception error) {
1:         error.printStackTrace();
1:     }
0: 
0:     public void initCombosForTestClientHang() {
0:         addCombinationValues("clientInactivityLimit", new Object[] { new Long(1000*60)});
0:         addCombinationValues("serverInactivityLimit", new Object[] { new Long(1000)});
1:     }
1:     public void testClientHang() throws Exception {
0:         
1:         assertEquals(0, serverErrorCount.get());
1:         assertEquals(0, clientErrorCount.get());
0:         
0:         // Server should consider the client timed out right away since the client is not hart beating fast enough.
0:         Thread.sleep(3000);
0:         
1:         assertEquals(0, clientErrorCount.get());
0:         assertTrue(serverErrorCount.get()>0);
1:     }
0:     
0:     public void initCombosForTestNoClientHang() {
0:         addCombinationValues("clientInactivityLimit", new Object[] { new Long(1000)});
0:         addCombinationValues("serverInactivityLimit", new Object[] { new Long(1000)});
1:     }
1:     public void testNoClientHang() throws Exception {
0:         
1:         assertEquals(0, serverErrorCount.get());
1:         assertEquals(0, clientErrorCount.get());
0:         
1:         Thread.sleep(4000);
0:         
1:         assertEquals(0, clientErrorCount.get());
1:         assertEquals(0, serverErrorCount.get());
1:     }
0: 
1:     /**
0:      * Used to test when a operation blocks.  This should
0:      * not cause transport to get disconnected.
1:      */
0:     public void initCombosForTestNoClientHangWithServerBlock() {
0:         addCombinationValues("clientInactivityLimit", new Object[] { new Long(1000)});
0:         addCombinationValues("serverInactivityLimit", new Object[] { new Long(1000)});
0:         addCombinationValues("serverRunOnCommand", new Object[] { new Runnable() {
0:                 public void run() {
1:                     try {
0:                         System.out.println("Sleeping");
0:                         Thread.sleep(2000);
0:                     } catch (InterruptedException e) {
1:                     }
1:                 }
0:             }});
1:     }
1:     public void testNoClientHangWithServerBlock() throws Exception {
0:         
1:         assertEquals(0, serverErrorCount.get());
1:         assertEquals(0, clientErrorCount.get());
0:         
1:         Thread.sleep(4000);
0:         
1:         assertEquals(0, clientErrorCount.get());
1:         assertEquals(0, serverErrorCount.get());
1:     }
0: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f559236
/////////////////////////////////////////////////////////////////////////
1:         info.setMaxInactivityDuration(1000);
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("clientInactivityLimit", new Object[] { Long.valueOf(1000)});
0:         addCombinationValues("serverInactivityLimit", new Object[] { Long.valueOf(1000)});
author:James Strachan
-------------------------------------------------------------------------------
commit:2440474
/////////////////////////////////////////////////////////////////////////
0: import javax.net.SocketFactory;
0: 
/////////////////////////////////////////////////////////////////////////
0:         clientTransport = new TcpTransport(new OpenWireFormat(), SocketFactory.getDefault(), new URI("tcp://localhost:61616"));
============================================================================