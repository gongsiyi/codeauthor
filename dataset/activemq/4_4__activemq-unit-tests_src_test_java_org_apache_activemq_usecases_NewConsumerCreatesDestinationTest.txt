1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:c13a547:  *
1:c13a547:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:c13a547:  * Unless required by applicable law or agreed to in writing, software
1:c13a547:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c13a547:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c13a547:  * See the License for the specific language governing permissions and
1:c13a547:  * limitations under the License.
1:c13a547:  */
1:c13a547: package org.apache.activemq.usecases;
7:c13a547: 
1:74a7a8b: import java.util.Set;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: 
1:0eae288: import org.apache.activemq.EmbeddedBrokerAndConnectionTestSupport;
1:c13a547: import org.apache.activemq.command.ActiveMQDestination;
1:c13a547: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c13a547: 
1:c13a547: /**
1:4743a20:  *
1:4743a20:  *
1:c13a547:  */
1:0eae288: public class NewConsumerCreatesDestinationTest extends EmbeddedBrokerAndConnectionTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NewConsumerCreatesDestinationTest.class);
1:c13a547: 
1:c13a547:     private ActiveMQQueue wildcard;
1:4743a20: 
1:c13a547:     public void testNewConsumerCausesNewDestinationToBeAutoCreated() throws Exception {
1:c13a547: 
1:c13a547:         // lets create a wildcard thats kinda like those used by Virtual Topics
1:c13a547:         String wildcardText = "org.*" + getDestinationString().substring("org.apache".length());
1:c13a547:         wildcard = new ActiveMQQueue(wildcardText);
1:c13a547: 
1:fc00993:         LOG.info("Using wildcard: " + wildcard);
1:fc00993:         LOG.info("on destination: " + destination);
1:4743a20: 
1:c13a547:         assertDestinationCreated(destination, false);
1:c13a547:         assertDestinationCreated(wildcard, false);
1:4743a20: 
1:c13a547:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c13a547:         session.createConsumer(destination);
1:c13a547: 
1:c13a547:         assertDestinationCreated(destination, true);
1:c13a547:         assertDestinationCreated(wildcard, true);
3:c13a547:     }
1:c13a547: 
1:c13a547:     protected void assertDestinationCreated(Destination destination, boolean expected) throws Exception {
1:4743a20:         Set<?> answer = broker.getBroker().getDestinations((ActiveMQDestination) destination);
1:c13a547:         int size = expected ? 1 : 0;
1:c13a547:         assertEquals("Size of found destinations: " + answer, size, answer.size());
1:c13a547:     }
1:c13a547: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         Set<?> answer = broker.getBroker().getDestinations((ActiveMQDestination) destination);
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(NewConsumerCreatesDestinationTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Using wildcard: " + wildcard);
1:         LOG.info("on destination: " + destination);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
1: import javax.jms.Destination;
1: import javax.jms.Session;
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NewConsumerCreatesDestinationTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(NewConsumerCreatesDestinationTest.class);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Using wildcard: " + wildcard);
0:         log.info("on destination: " + destination);
commit:0eae288
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerAndConnectionTestSupport;
/////////////////////////////////////////////////////////////////////////
1: public class NewConsumerCreatesDestinationTest extends EmbeddedBrokerAndConnectionTestSupport {
/////////////////////////////////////////////////////////////////////////
commit:c13a547
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.Session;
1: 
0: import java.util.Set;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
0: public class NewConsumerCreatesDestinationTest extends EmbeddedBrokerTestSupport {
1: 
0:     private Connection connection;
1:     private ActiveMQQueue wildcard;
1:     
1:     public void testNewConsumerCausesNewDestinationToBeAutoCreated() throws Exception {
0:         connection = createConnection();
1: 
1:         // lets create a wildcard thats kinda like those used by Virtual Topics
1:         String wildcardText = "org.*" + getDestinationString().substring("org.apache".length());
1:         wildcard = new ActiveMQQueue(wildcardText);
1: 
0:         System.out.println("Using wildcard: " + wildcard);
0:         System.out.println("on destination: " + destination);
1:         
1:         assertDestinationCreated(destination, false);
1:         assertDestinationCreated(wildcard, false);
1:         
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createConsumer(destination);
1: 
1:         assertDestinationCreated(destination, true);
1:         assertDestinationCreated(wildcard, true);
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         if (connection != null) {
0:             connection.close();
1:         }
0:         super.tearDown();
1:     }
1: 
1:     protected void assertDestinationCreated(Destination destination, boolean expected) throws Exception {
0:         Set answer = broker.getBroker().getDestinations((ActiveMQDestination) destination);
1:         int size = expected ? 1 : 0;
1:         assertEquals("Size of found destinations: " + answer, size, answer.size());
1:     }
1: }
============================================================================