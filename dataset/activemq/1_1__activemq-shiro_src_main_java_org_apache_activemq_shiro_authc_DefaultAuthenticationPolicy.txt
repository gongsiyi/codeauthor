1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.shiro.ConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.shiro.subject.PrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.SimplePrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class DefaultAuthenticationPolicy implements AuthenticationPolicy {
1:f9451e5: 
1:f9451e5:     private boolean vmConnectionAuthenticationRequired = false;
1:f9451e5:     private String systemAccountUsername = "system";
1:f9451e5:     private String systemAccountRealmName = "iniRealm";
1:f9451e5: 
1:f9451e5:     private boolean anonymousAccessAllowed = false;
1:f9451e5:     private String anonymousAccountUsername = "anonymous";
1:f9451e5:     private String anonymousAccountRealmName = "iniRealm";
1:f9451e5: 
1:f9451e5:     public boolean isVmConnectionAuthenticationRequired() {
1:f9451e5:         return vmConnectionAuthenticationRequired;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setVmConnectionAuthenticationRequired(boolean vmConnectionAuthenticationRequired) {
1:f9451e5:         this.vmConnectionAuthenticationRequired = vmConnectionAuthenticationRequired;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public String getSystemAccountUsername() {
1:f9451e5:         return systemAccountUsername;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setSystemAccountUsername(String systemAccountUsername) {
1:f9451e5:         this.systemAccountUsername = systemAccountUsername;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public String getSystemAccountRealmName() {
1:f9451e5:         return systemAccountRealmName;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setSystemAccountRealmName(String systemAccountRealmName) {
1:f9451e5:         this.systemAccountRealmName = systemAccountRealmName;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public boolean isAnonymousAccessAllowed() {
1:f9451e5:         return anonymousAccessAllowed;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:f9451e5:         this.anonymousAccessAllowed = anonymousAccessAllowed;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public String getAnonymousAccountUsername() {
1:f9451e5:         return anonymousAccountUsername;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAnonymousAccountUsername(String anonymousAccountUsername) {
1:f9451e5:         this.anonymousAccountUsername = anonymousAccountUsername;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public String getAnonymousAccountRealmName() {
1:f9451e5:         return anonymousAccountRealmName;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public void setAnonymousAccountRealmName(String anonymousAccountRealmName) {
1:f9451e5:         this.anonymousAccountRealmName = anonymousAccountRealmName;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}
1:f9451e5:      * otherwise.
1:f9451e5:      *
1:f9451e5:      * @param conn the client's connection context
1:f9451e5:      * @return {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}
1:f9451e5:      *         otherwise.
1:f9451e5:      */
1:f9451e5:     protected boolean credentialsAvailable(ConnectionReference conn) {
1:f9451e5:         return conn.getConnectionInfo().getUserName() != null || conn.getConnectionInfo().getPassword() != null;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isAuthenticationRequired(SubjectConnectionReference conn) {
1:f9451e5:         Subject subject = conn.getSubject();
1:f9451e5: 
1:f9451e5:         if (subject.isAuthenticated()) {
1:f9451e5:             //already authenticated:
1:f9451e5:             return false;
1:f9451e5:         }
1:f9451e5:         //subject is not authenticated.  Authentication is required by default for all accounts other than
1:f9451e5:         //the anonymous user (if enabled) or the vm account (if enabled)
1:f9451e5:         if (isAnonymousAccessAllowed()) {
1:f9451e5:             if (isAnonymousAccount(subject)) {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         if (!isVmConnectionAuthenticationRequired()) {
1:f9451e5:             if (isSystemAccount(subject)) {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return true;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected boolean isAnonymousAccount(Subject subject) {
1:f9451e5:         PrincipalCollection pc = subject.getPrincipals();
1:f9451e5:         return pc != null && matches(pc, anonymousAccountUsername, anonymousAccountRealmName);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected boolean isSystemAccount(Subject subject) {
1:f9451e5:         PrincipalCollection pc = subject.getPrincipals();
1:f9451e5:         return pc != null && matches(pc, systemAccountUsername, systemAccountRealmName);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected boolean matches(PrincipalCollection principals, String username, String realmName) {
1:f9451e5:         Collection realmPrincipals = principals.fromRealm(realmName);
1:f9451e5:         if (realmPrincipals != null && !realmPrincipals.isEmpty()) {
1:f9451e5:             if (realmPrincipals.iterator().next().equals(username)) {
1:f9451e5:                 return true;
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5:         return false;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected boolean isSystemConnection(ConnectionReference conn) {
1:f9451e5:         String remoteAddress = conn.getConnectionContext().getConnection().getRemoteAddress();
1:f9451e5:         return remoteAddress.startsWith("vm:");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public void customizeSubject(Subject.Builder subjectBuilder, ConnectionReference conn) {
1:f9451e5:         // We only need to specify a custom identity or authentication state if a normal authentication will not occur.
1:f9451e5:         // If the client supplied connection credentials, the AuthenticationFilter will perform a normal authentication,
1:f9451e5:         // so we should exit immediately:
1:f9451e5:         if (credentialsAvailable(conn)) {
1:f9451e5:             return;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         //The connection cannot be authenticated, potentially implying a system or anonymous connection.  Check if so:
1:f9451e5:         if (isAssumeIdentity(conn)) {
1:f9451e5:             PrincipalCollection assumedIdentity = createAssumedIdentity(conn);
1:f9451e5:             subjectBuilder.principals(assumedIdentity);
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}
1:f9451e5:      * otherwise.  This method will <em>only</em> be called if there are no connection
1:f9451e5:      * {@link #credentialsAvailable(ConnectionReference) credentialsAvailable}.
1:f9451e5:      * If a client supplies connection credentials, they will always be used to authenticate the client with that
1:f9451e5:      * identity.
1:f9451e5:      * <p/>
1:f9451e5:      * If {@code true} is returned, the assumed identity will be returned by
1:f9451e5:      * {@link #createAssumedIdentity(ConnectionReference) createAssumedIdentity}.
1:f9451e5:      * <h3>Warning</h3>
1:f9451e5:      * This method exists primarily to support the system and anonymous accounts - it is probably unsafe to return
1:f9451e5:      * {@code true} in most other scenarios.
1:f9451e5:      *
1:f9451e5:      * @param conn a reference to the client's connection
1:f9451e5:      * @return {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}
1:f9451e5:      *         otherwise.
1:f9451e5:      */
1:f9451e5:     protected boolean isAssumeIdentity(ConnectionReference conn) {
1:f9451e5:         return isAnonymousAccessAllowed() ||
1:f9451e5:                 (isSystemConnection(conn) && !isVmConnectionAuthenticationRequired());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for
1:f9451e5:      * the specified Connection.
1:f9451e5:      * <p/>
1:f9451e5:      * This method is <em>only</em> called if {@link #isAssumeIdentity(ConnectionReference)} is {@code true}.
1:f9451e5:      *
1:f9451e5:      * @param conn a reference to the client's connection
1:f9451e5:      * @return a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for
1:f9451e5:      *         the specified Connection.
1:f9451e5:      */
1:f9451e5:     protected PrincipalCollection createAssumedIdentity(ConnectionReference conn) {
1:f9451e5: 
1:f9451e5:         //anonymous by default:
1:f9451e5:         String username = anonymousAccountUsername;
1:f9451e5:         String realmName = anonymousAccountRealmName;
1:f9451e5: 
1:f9451e5:         //vm connections are special and should assume the system account:
1:f9451e5:         if (isSystemConnection(conn)) {
1:f9451e5:             username = systemAccountUsername;
1:f9451e5:             realmName = systemAccountRealmName;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return new SimplePrincipalCollection(username, realmName);
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.shiro.ConnectionReference;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.shiro.subject.PrincipalCollection;
1: import org.apache.shiro.subject.SimplePrincipalCollection;
1: import org.apache.shiro.subject.Subject;
1: 
1: import java.util.Collection;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class DefaultAuthenticationPolicy implements AuthenticationPolicy {
1: 
1:     private boolean vmConnectionAuthenticationRequired = false;
1:     private String systemAccountUsername = "system";
1:     private String systemAccountRealmName = "iniRealm";
1: 
1:     private boolean anonymousAccessAllowed = false;
1:     private String anonymousAccountUsername = "anonymous";
1:     private String anonymousAccountRealmName = "iniRealm";
1: 
1:     public boolean isVmConnectionAuthenticationRequired() {
1:         return vmConnectionAuthenticationRequired;
1:     }
1: 
1:     public void setVmConnectionAuthenticationRequired(boolean vmConnectionAuthenticationRequired) {
1:         this.vmConnectionAuthenticationRequired = vmConnectionAuthenticationRequired;
1:     }
1: 
1:     public String getSystemAccountUsername() {
1:         return systemAccountUsername;
1:     }
1: 
1:     public void setSystemAccountUsername(String systemAccountUsername) {
1:         this.systemAccountUsername = systemAccountUsername;
1:     }
1: 
1:     public String getSystemAccountRealmName() {
1:         return systemAccountRealmName;
1:     }
1: 
1:     public void setSystemAccountRealmName(String systemAccountRealmName) {
1:         this.systemAccountRealmName = systemAccountRealmName;
1:     }
1: 
1:     public boolean isAnonymousAccessAllowed() {
1:         return anonymousAccessAllowed;
1:     }
1: 
1:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:         this.anonymousAccessAllowed = anonymousAccessAllowed;
1:     }
1: 
1:     public String getAnonymousAccountUsername() {
1:         return anonymousAccountUsername;
1:     }
1: 
1:     public void setAnonymousAccountUsername(String anonymousAccountUsername) {
1:         this.anonymousAccountUsername = anonymousAccountUsername;
1:     }
1: 
1:     public String getAnonymousAccountRealmName() {
1:         return anonymousAccountRealmName;
1:     }
1: 
1:     public void setAnonymousAccountRealmName(String anonymousAccountRealmName) {
1:         this.anonymousAccountRealmName = anonymousAccountRealmName;
1:     }
1: 
1:     /**
1:      * Returns {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}
1:      * otherwise.
1:      *
1:      * @param conn the client's connection context
1:      * @return {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}
1:      *         otherwise.
1:      */
1:     protected boolean credentialsAvailable(ConnectionReference conn) {
1:         return conn.getConnectionInfo().getUserName() != null || conn.getConnectionInfo().getPassword() != null;
1:     }
1: 
1:     @Override
1:     public boolean isAuthenticationRequired(SubjectConnectionReference conn) {
1:         Subject subject = conn.getSubject();
1: 
1:         if (subject.isAuthenticated()) {
1:             //already authenticated:
1:             return false;
1:         }
1:         //subject is not authenticated.  Authentication is required by default for all accounts other than
1:         //the anonymous user (if enabled) or the vm account (if enabled)
1:         if (isAnonymousAccessAllowed()) {
1:             if (isAnonymousAccount(subject)) {
1:                 return false;
1:             }
1:         }
1: 
1:         if (!isVmConnectionAuthenticationRequired()) {
1:             if (isSystemAccount(subject)) {
1:                 return false;
1:             }
1:         }
1: 
1:         return true;
1:     }
1: 
1:     protected boolean isAnonymousAccount(Subject subject) {
1:         PrincipalCollection pc = subject.getPrincipals();
1:         return pc != null && matches(pc, anonymousAccountUsername, anonymousAccountRealmName);
1:     }
1: 
1:     protected boolean isSystemAccount(Subject subject) {
1:         PrincipalCollection pc = subject.getPrincipals();
1:         return pc != null && matches(pc, systemAccountUsername, systemAccountRealmName);
1:     }
1: 
1:     protected boolean matches(PrincipalCollection principals, String username, String realmName) {
1:         Collection realmPrincipals = principals.fromRealm(realmName);
1:         if (realmPrincipals != null && !realmPrincipals.isEmpty()) {
1:             if (realmPrincipals.iterator().next().equals(username)) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     protected boolean isSystemConnection(ConnectionReference conn) {
1:         String remoteAddress = conn.getConnectionContext().getConnection().getRemoteAddress();
1:         return remoteAddress.startsWith("vm:");
1:     }
1: 
1:     @Override
1:     public void customizeSubject(Subject.Builder subjectBuilder, ConnectionReference conn) {
1:         // We only need to specify a custom identity or authentication state if a normal authentication will not occur.
1:         // If the client supplied connection credentials, the AuthenticationFilter will perform a normal authentication,
1:         // so we should exit immediately:
1:         if (credentialsAvailable(conn)) {
1:             return;
1:         }
1: 
1:         //The connection cannot be authenticated, potentially implying a system or anonymous connection.  Check if so:
1:         if (isAssumeIdentity(conn)) {
1:             PrincipalCollection assumedIdentity = createAssumedIdentity(conn);
1:             subjectBuilder.principals(assumedIdentity);
1:         }
1:     }
1: 
1:     /**
1:      * Returns {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}
1:      * otherwise.  This method will <em>only</em> be called if there are no connection
1:      * {@link #credentialsAvailable(ConnectionReference) credentialsAvailable}.
1:      * If a client supplies connection credentials, they will always be used to authenticate the client with that
1:      * identity.
1:      * <p/>
1:      * If {@code true} is returned, the assumed identity will be returned by
1:      * {@link #createAssumedIdentity(ConnectionReference) createAssumedIdentity}.
1:      * <h3>Warning</h3>
1:      * This method exists primarily to support the system and anonymous accounts - it is probably unsafe to return
1:      * {@code true} in most other scenarios.
1:      *
1:      * @param conn a reference to the client's connection
1:      * @return {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}
1:      *         otherwise.
1:      */
1:     protected boolean isAssumeIdentity(ConnectionReference conn) {
1:         return isAnonymousAccessAllowed() ||
1:                 (isSystemConnection(conn) && !isVmConnectionAuthenticationRequired());
1:     }
1: 
1:     /**
1:      * Returns a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for
1:      * the specified Connection.
1:      * <p/>
1:      * This method is <em>only</em> called if {@link #isAssumeIdentity(ConnectionReference)} is {@code true}.
1:      *
1:      * @param conn a reference to the client's connection
1:      * @return a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for
1:      *         the specified Connection.
1:      */
1:     protected PrincipalCollection createAssumedIdentity(ConnectionReference conn) {
1: 
1:         //anonymous by default:
1:         String username = anonymousAccountUsername;
1:         String realmName = anonymousAccountRealmName;
1: 
1:         //vm connections are special and should assume the system account:
1:         if (isSystemConnection(conn)) {
1:             username = systemAccountUsername;
1:             realmName = systemAccountRealmName;
1:         }
1: 
1:         return new SimplePrincipalCollection(username, realmName);
1:     }
1: }
============================================================================