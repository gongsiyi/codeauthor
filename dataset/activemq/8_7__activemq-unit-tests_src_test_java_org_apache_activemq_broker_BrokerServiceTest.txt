1:c9b8905: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:c9b8905:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c9b8905:  *
1:c9b8905:  * Unless required by applicable law or agreed to in writing, software
1:c9b8905:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c9b8905:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c9b8905:  * See the License for the specific language governing permissions and
1:c9b8905:  * limitations under the License.
1:c9b8905:  */
1:c9b8905: package org.apache.activemq.broker;
10:c9b8905: 
1:41bec0d: import java.io.File;
1:41bec0d: 
1:c9b8905: import org.apache.activemq.network.NetworkConnector;
1:41bec0d: import org.apache.activemq.store.PersistenceAdapter;
1:41bec0d: import org.apache.activemq.util.LargeFile;
1:41bec0d: import org.apache.activemq.util.StoreUtil;
1:41bec0d: import org.junit.runner.RunWith;
1:41bec0d: import static org.powermock.api.mockito.PowerMockito.mockStatic;
1:41bec0d: import static org.powermock.api.mockito.PowerMockito.verifyStatic;
1:41bec0d: import static org.powermock.api.mockito.PowerMockito.when;
1:41bec0d: import org.powermock.core.classloader.annotations.PrepareForTest;
1:41bec0d: import org.powermock.modules.junit4.PowerMockRunner;
1:41bec0d: 
1:41bec0d: import junit.framework.TestCase;
1:f812e34: 
1:c9b8905: /**
1:f812e34:  * Tests for the BrokerService class
1:f812e34:  * 
1:c9b8905:  * @author chirino
1:c9b8905:  */
1:41bec0d: @RunWith(PowerMockRunner.class)
1:41bec0d: @PrepareForTest(StoreUtil.class)
1:c9b8905: public class BrokerServiceTest extends TestCase {
1:f812e34:     public void testAddRemoveTransportsWithJMX() throws Exception {
1:f812e34:         BrokerService service = new BrokerService();
1:f812e34:         service.setUseJmx(true);
2:f812e34:         service.setPersistent(false);
2:f812e34:         TransportConnector connector = service.addConnector("tcp://localhost:0");
2:f812e34:         service.start();
1:f812e34: 
2:f812e34:         service.removeConnector(connector);
2:f812e34:         connector.stop();
1:f812e34:         service.stop();
1:f812e34:     }
1:41bec0d: 
1:f812e34:     public void testAddRemoveTransportsWithoutJMX() throws Exception {
1:0cf3845:         BrokerService service = new BrokerService();
1:41bec0d:         service.setPersistent(false);
1:41bec0d:         service.setUseJmx(false);
1:41bec0d:         TransportConnector connector = service.addConnector("tcp://localhost:0");
1:41bec0d:         service.start();
1:0cf3845: 
1:41bec0d:         service.removeConnector(connector);
1:41bec0d:         connector.stop();
1:f812e34:         service.stop();
1:0cf3845:     }
1:f812e34: 
1:f812e34:     public void testAddRemoveNetworkWithJMX() throws Exception {
1:f812e34:         BrokerService service = new BrokerService();
1:f812e34:         service.setPersistent(false);
1:f812e34:         service.setUseJmx(true);
1:4a7e0b3:         NetworkConnector connector = service.addNetworkConnector("multicast://default?group=group-"+System.currentTimeMillis());
1:f812e34:         service.start();
1:f812e34: 
1:f812e34:         service.removeNetworkConnector(connector);
1:f812e34:         connector.stop();
1:f812e34:         service.stop();
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void testAddRemoveNetworkWithoutJMX() throws Exception {
1:f812e34:         BrokerService service = new BrokerService();
1:f812e34:         service.setPersistent(false);
2:f812e34:         service.setUseJmx(false);
1:4a7e0b3:         NetworkConnector connector = service.addNetworkConnector("multicast://default?group=group-"+System.currentTimeMillis());
1:f812e34:         service.start();
1:f812e34: 
1:f812e34:         service.removeNetworkConnector(connector);
1:f812e34:         connector.stop();
1:f812e34:         service.stop();
1:f812e34:     }
1:f812e34:     
1:41bec0d:     public void testSystemUsage() {
1:f812e34:         BrokerService service = new BrokerService();
1:afcb5fb:         assertEquals( 1024 * 1024 * 1024, service.getSystemUsage().getMemoryUsage().getLimit() );
1:15b2739:         assertEquals( 1024L * 1024 * 1024 * 50, service.getSystemUsage().getTempUsage().getLimit() );
1:15b2739:         assertEquals( 1024L * 1024 * 1024 * 100, service.getSystemUsage().getStoreUsage().getLimit() );
1:f812e34:     }
1:c9b8905: 
1:41bec0d:     public void testLargeFileSystem() throws Exception {
1:41bec0d:         BrokerService service = new BrokerService();
1:41bec0d: 
1:41bec0d:         File dataDirectory = new File(service.getBrokerDataDirectory(), "KahaDB");
1:41bec0d:         File tmpDataDirectory = service.getTmpDataDirectory();
1:41bec0d: 
1:41bec0d:         PersistenceAdapter persistenceAdapter = service.createPersistenceAdapter();
1:41bec0d:         persistenceAdapter.setDirectory(dataDirectory);
1:41bec0d:         service.setPersistenceAdapter(persistenceAdapter);
1:8a28c06:         service.setUseJmx(false);
1:41bec0d: 
1:41bec0d:         mockStatic(StoreUtil.class);
1:41bec0d: 
1:41bec0d:         // Return a simulated handle to a very large file system that will return a negative totalSpace.
1:41bec0d:         when(StoreUtil.findParentDirectory(dataDirectory)).thenReturn(new LargeFile(dataDirectory.getParentFile(), "KahaDB"));
1:8a28c06:         when(StoreUtil.findParentDirectory(tmpDataDirectory)).thenReturn(tmpDataDirectory.getParentFile());
1:41bec0d: 
1:8a28c06:         try {
1:8a28c06:             service.start();
1:8a28c06:             fail("Expect error on negative totalspace");
1:8a28c06:         } catch (Exception expected) {
1:8a28c06:             // verify message
1:8a28c06:             assertTrue(expected.getLocalizedMessage().contains("negative"));
1:8a28c06:         }
1:8a28c06:         finally {
1:8a28c06:             service.stop();
1:8a28c06:         }
1:41bec0d: 
1:8a28c06:         // configure a 2x value for the fs limit so it can start
1:8a28c06:         service.getSystemUsage().getStoreUsage().setTotal( service.getSystemUsage().getStoreUsage().getLimit() * 2);
1:8a28c06: 
1:8a28c06:         service.start(true);
1:41bec0d:         service.stop();
1:41bec0d: 
1:41bec0d:         verifyStatic();
1:41bec0d:     }
5:c9b8905: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8a28c06
/////////////////////////////////////////////////////////////////////////
1:         service.setUseJmx(false);
1:         when(StoreUtil.findParentDirectory(tmpDataDirectory)).thenReturn(tmpDataDirectory.getParentFile());
1:         try {
1:             service.start();
1:             fail("Expect error on negative totalspace");
1:         } catch (Exception expected) {
1:             // verify message
1:             assertTrue(expected.getLocalizedMessage().contains("negative"));
1:         }
1:         finally {
1:             service.stop();
1:         }
1:         // configure a 2x value for the fs limit so it can start
1:         service.getSystemUsage().getStoreUsage().setTotal( service.getSystemUsage().getStoreUsage().getLimit() * 2);
1: 
1:         service.start(true);
commit:afcb5fb
/////////////////////////////////////////////////////////////////////////
1:         assertEquals( 1024 * 1024 * 1024, service.getSystemUsage().getMemoryUsage().getLimit() );
author:William Crowell
-------------------------------------------------------------------------------
commit:41bec0d
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: 
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.LargeFile;
1: import org.apache.activemq.util.StoreUtil;
1: import org.junit.runner.RunWith;
1: import static org.powermock.api.mockito.PowerMockito.mockStatic;
1: import static org.powermock.api.mockito.PowerMockito.verifyStatic;
1: import static org.powermock.api.mockito.PowerMockito.when;
1: import org.powermock.core.classloader.annotations.PrepareForTest;
1: import org.powermock.modules.junit4.PowerMockRunner;
1: 
1: import junit.framework.TestCase;
1: @RunWith(PowerMockRunner.class)
1: @PrepareForTest(StoreUtil.class)
/////////////////////////////////////////////////////////////////////////
1:     public void testSystemUsage() {
1: 
1:     public void testLargeFileSystem() throws Exception {
1:         BrokerService service = new BrokerService();
1: 
1:         File dataDirectory = new File(service.getBrokerDataDirectory(), "KahaDB");
1:         File tmpDataDirectory = service.getTmpDataDirectory();
1: 
1:         PersistenceAdapter persistenceAdapter = service.createPersistenceAdapter();
1:         persistenceAdapter.setDirectory(dataDirectory);
1:         service.setPersistenceAdapter(persistenceAdapter);
1: 
1:         mockStatic(StoreUtil.class);
1: 
1:         // Return a simulated handle to a very large file system that will return a negative totalSpace.
1:         when(StoreUtil.findParentDirectory(dataDirectory)).thenReturn(new LargeFile(dataDirectory.getParentFile(), "KahaDB"));
0:         when(StoreUtil.findParentDirectory(tmpDataDirectory)).thenReturn(tmpDataDirectory);
1: 
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         TransportConnector connector = service.addConnector("tcp://localhost:0");
1:         service.start();
1: 
1:         service.removeConnector(connector);
1:         connector.stop();
1:         service.stop();
1: 
1:         verifyStatic();
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:15b2739
/////////////////////////////////////////////////////////////////////////
0:         assertEquals( 1024 * 1024 * 64, service.getSystemUsage().getMemoryUsage().getLimit() );
1:         assertEquals( 1024L * 1024 * 1024 * 50, service.getSystemUsage().getTempUsage().getLimit() );
1:         assertEquals( 1024L * 1024 * 1024 * 100, service.getSystemUsage().getStoreUsage().getLimit() );
author:Gary Tully
-------------------------------------------------------------------------------
commit:3b19c71
/////////////////////////////////////////////////////////////////////////
0:         assertEquals( service.getSystemUsage().getTempUsage().getLimit(), 1024L * 1024 * 1000 * 50 );
0:         assertEquals( service.getSystemUsage().getStoreUsage().getLimit(), 1024L * 1024 * 1000 * 100 );
commit:4a7e0b3
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector connector = service.addNetworkConnector("multicast://default?group=group-"+System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector connector = service.addNetworkConnector("multicast://default?group=group-"+System.currentTimeMillis());
author:Robert Davies
-------------------------------------------------------------------------------
commit:0cf3845
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void testSystemUsage()
0:     {
1:         BrokerService service = new BrokerService();
0:         assertEquals( service.getSystemUsage().getMemoryUsage().getLimit(), 1024 * 1024 * 64 );
0:         assertEquals( service.getSystemUsage().getTempUsage().getLimit(), 1024L * 1024 * 1024 * 100 );
0:         assertEquals( service.getSystemUsage().getStoreUsage().getLimit(), 1024L * 1024 * 1024 * 100 );
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:a2033b3
/////////////////////////////////////////////////////////////////////////
0:         NetworkConnector connector = service.addNetworkConnector("multicast://group-"+System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
0:         NetworkConnector connector = service.addNetworkConnector("multicast://group-"+System.currentTimeMillis());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1:  * Tests for the BrokerService class
1:  * 
1:     public void testAddRemoveTransportsWithJMX() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setUseJmx(true);
1:         service.setPersistent(false);
1:         TransportConnector connector = service.addConnector("tcp://localhost:0");
1:         service.start();
1: 
1:         service.removeConnector(connector);
1:         connector.stop();
1:         service.stop();
1:     }
1: 
1:     public void testAddRemoveTransportsWithoutJMX() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         TransportConnector connector = service.addConnector("tcp://localhost:0");
1:         service.start();
1: 
1:         service.removeConnector(connector);
1:         connector.stop();
1:         service.stop();
1:     }
1: 
1:     public void testAddRemoveNetworkWithJMX() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(true);
0:         NetworkConnector connector = service.addNetworkConnector("multicast://default");
1:         service.start();
1: 
1:         service.removeNetworkConnector(connector);
1:         connector.stop();
1:         service.stop();
1:     }
1: 
1:     public void testAddRemoveNetworkWithoutJMX() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
0:         NetworkConnector connector = service.addNetworkConnector("multicast://default");
1:         service.start();
1: 
1:         service.removeNetworkConnector(connector);
1:         connector.stop();
1:         service.stop();
1:     }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:c9b8905
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.network.NetworkConnector;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
0:  * Tests for the BrokerService class 
1:  * @author chirino
1:  */
1: public class BrokerServiceTest extends TestCase {
1: 
0: 	public void testAddRemoveTransportsWithJMX() throws Exception {
0: 		BrokerService service = new BrokerService();
0: 		service.setUseJmx(true);
0: 		service.setPersistent(false);
0: 		TransportConnector connector = service.addConnector("tcp://localhost:0");
0: 		service.start();
1: 		
0: 		service.removeConnector(connector);
0: 		connector.stop();
0: 		service.stop();
1: 	}
1: 	
0: 	public void testAddRemoveTransportsWithoutJMX() throws Exception {
0: 		BrokerService service = new BrokerService();
0: 		service.setPersistent(false);
0: 		service.setUseJmx(false);
0: 		TransportConnector connector = service.addConnector("tcp://localhost:0");
0: 		service.start();
1: 		
0: 		service.removeConnector(connector);
0: 		connector.stop();
0: 		service.stop();
1: 	}
1: 	
0: 	public void testAddRemoveNetworkWithJMX() throws Exception {
0: 		BrokerService service = new BrokerService();
0: 		service.setPersistent(false);
0: 		service.setUseJmx(true);
0: 		NetworkConnector connector = service.addNetworkConnector("multicast://default");
0: 		service.start();
1: 		
0: 		service.removeNetworkConnector(connector);
0: 		connector.stop();
0: 		service.stop();
1: 	}
1: 	
0: 	public void testAddRemoveNetworkWithoutJMX() throws Exception {
0: 		BrokerService service = new BrokerService();
0: 		service.setPersistent(false);
0: 		service.setUseJmx(false);
0: 		NetworkConnector connector = service.addNetworkConnector("multicast://default");
0: 		service.start();
1: 		
0: 		service.removeNetworkConnector(connector);
0: 		connector.stop();
0: 		service.stop();
1: 	}
1: }
============================================================================