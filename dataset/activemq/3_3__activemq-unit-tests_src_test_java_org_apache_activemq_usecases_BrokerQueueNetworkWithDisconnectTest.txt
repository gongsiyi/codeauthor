1:8761189: /**
1:8761189:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8761189:  * contributor license agreements.  See the NOTICE file distributed with
1:8761189:  * this work for additional information regarding copyright ownership.
1:8761189:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8761189:  * (the "License"); you may not use this file except in compliance with
1:8761189:  * the License.  You may obtain a copy of the License at
1:8761189:  *
1:8761189:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8761189:  *
1:8761189:  * Unless required by applicable law or agreed to in writing, software
1:8761189:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8761189:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8761189:  * See the License for the specific language governing permissions and
1:8761189:  * limitations under the License.
1:8761189:  */
1:8761189: package org.apache.activemq.usecases;
15:8761189: 
1:8761189: import java.net.URI;
1:8761189: import java.util.List;
1:27d0ff4: import java.util.concurrent.TimeUnit;
1:4743a20: 
1:8761189: import javax.jms.Destination;
1:8761189: import javax.jms.MessageConsumer;
1:8761189: import javax.jms.TextMessage;
1:8761189: 
1:8761189: import junit.framework.Test;
1:8761189: 
1:8761189: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:27d0ff4: import org.apache.activemq.broker.BrokerPlugin;
1:27d0ff4: import org.apache.activemq.broker.BrokerPluginSupport;
1:8761189: import org.apache.activemq.broker.BrokerService;
1:27d0ff4: import org.apache.activemq.broker.ConnectionContext;
1:8761189: import org.apache.activemq.broker.TransportConnector;
1:27d0ff4: import org.apache.activemq.command.ConnectionInfo;
1:8761189: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:8761189: import org.apache.activemq.network.NetworkConnector;
1:27d0ff4: import org.apache.activemq.transport.vm.VMTransportFactory;
1:8761189: import org.apache.activemq.util.MessageIdList;
1:8761189: import org.apache.activemq.util.SocketProxy;
1:27d0ff4: import org.apache.activemq.util.Wait;
1:27d0ff4: import org.apache.commons.logging.Log;
1:27d0ff4: import org.apache.commons.logging.LogFactory;
1:8761189: 
1:8761189: 
1:8761189: public class BrokerQueueNetworkWithDisconnectTest extends JmsMultipleBrokersTestSupport {
1:27d0ff4:     private static final Log LOG = LogFactory.getLog(BrokerQueueNetworkWithDisconnectTest.class);
1:8761189:     private static final int NETWORK_DOWN_TIME = 5000;
1:8761189:     protected static final int MESSAGE_COUNT = 200;
1:8761189:     private static final String HUB = "HubBroker";
1:8761189:     private static final String SPOKE = "SpokeBroker";
1:8761189:     private SocketProxy socketProxy;
1:8761189:     private long networkDownTimeStart;
1:27d0ff4:     public boolean useDuplexNetworkBridge = true;
1:f232cec:     public boolean simulateStalledNetwork;
1:27d0ff4:     private long inactiveDuration = 1000;
1:27d0ff4:     private boolean useSocketProxy = true;
1:8761189: 
1:8761189:     public void initCombosForTestSendOnAReceiveOnBWithTransportDisconnect() {
1:8761189:         addCombinationValues( "useDuplexNetworkBridge", new Object[]{ Boolean.TRUE, Boolean.FALSE} );
1:f232cec:         addCombinationValues( "simulateStalledNetwork", new Object[]{ Boolean.TRUE } );
2:8761189:     }
1:4743a20: 
1:8761189:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:8761189:         bridgeBrokers(SPOKE, HUB);
1:8761189: 
1:27d0ff4:         startAllBrokers();
1:8761189: 
1:8761189:         // Setup destination
1:8761189:         Destination dest = createDestination("TEST.FOO", false);
1:4743a20: 
1:8761189:         // Setup consumers
1:8761189:         MessageConsumer client = createConsumer(HUB, dest);
1:4743a20: 
1:8761189:         // allow subscription information to flow back to Spoke
1:8761189:         sleep(600);
1:4743a20: 
1:8761189:         // Send messages
1:8761189:         sendMessages(SPOKE, dest, MESSAGE_COUNT);
1:8761189: 
1:8761189:         MessageIdList msgs = getConsumerMessages(HUB, client);
1:8761189:         msgs.waitForMessagesToArrive(MESSAGE_COUNT);
1:8761189: 
1:4743a20:         assertTrue("At least message " + MESSAGE_COUNT +
1:8761189:                 " must be recieved, duplicates are expected, count=" + msgs.getMessageCount(),
1:8761189:                 MESSAGE_COUNT <= msgs.getMessageCount());
1:8761189:     }
1:8761189: 
1:4743a20:     @SuppressWarnings("unchecked")
1:27d0ff4:     public void testNoStuckConnectionsWithTransportDisconnect() throws Exception {
1:27d0ff4:         inactiveDuration=60000l;
1:27d0ff4:         useDuplexNetworkBridge = true;
1:27d0ff4: 
1:27d0ff4:         bridgeBrokers(SPOKE, HUB);
1:27d0ff4: 
1:27d0ff4:         final BrokerItem hub = brokers.get(HUB);
1:27d0ff4:         hub.broker.setPlugins(new BrokerPlugin[]{
1:27d0ff4:                 new BrokerPluginSupport() {
1:27d0ff4:                     int sleepCount = 2;
1:4743a20:                     @Override
1:27d0ff4:                     public void removeConnection(ConnectionContext context,
1:27d0ff4:                             ConnectionInfo info, Throwable error)
1:27d0ff4:                             throws Exception {
1:27d0ff4:                         try {
1:27d0ff4:                             while(--sleepCount >= 0) {
1:27d0ff4:                                 LOG.info("sleeping for a bit in close impl to simulate load where reconnect fails due to a pending close");
1:27d0ff4:                                 TimeUnit.SECONDS.sleep(2);
1:27d0ff4:                             }
1:27d0ff4:                         } catch (Exception ignored) {}
1:27d0ff4:                         super.removeConnection(context, info, error);
1:27d0ff4:                     }
1:27d0ff4:                 }
1:27d0ff4:         });
1:27d0ff4:         startAllBrokers();
1:27d0ff4:         waitForBridgeFormation();
1:27d0ff4: 
1:27d0ff4:         // kill the initiator side, leaving remote end intact
1:27d0ff4:         // simulate async network breakage
1:27d0ff4:         // remote side will need to spot duplicate network and stop/kill the original
1:27d0ff4:         for (int i=0; i< 3;  i++) {
1:27d0ff4:             socketProxy.halfClose();
1:27d0ff4:             sleep(10000);
1:27d0ff4:         }
1:4743a20:         // wait for full reformation of bridge
1:27d0ff4:         // verify no extra connections
1:4743a20:         boolean allGood = Wait.waitFor(new Wait.Condition(){
1:4743a20:                     @Override
1:27d0ff4:                     public boolean isSatisified() throws Exception {
1:27d0ff4:                         long numConnections = hub.broker.getTransportConnectors().get(0).getConnections().size();
1:27d0ff4:                         LOG.info("Num connetions:" + numConnections);
1:27d0ff4:                         return numConnections == 1;
1:27d0ff4:                     }});
1:27d0ff4:         if (!allGood) {
1:27d0ff4:             dumpAllThreads("ExtraHubConnection");
1:27d0ff4:         }
1:27d0ff4:         assertTrue("should be only one transport connection for the single duplex network connector", allGood);
1:27d0ff4: 
1:27d0ff4:         allGood = Wait.waitFor(new Wait.Condition(){
1:4743a20:                     @Override
1:27d0ff4:                     public boolean isSatisified() throws Exception {
1:27d0ff4:                         long numVmConnections = VMTransportFactory.SERVERS.get(HUB).getConnectionCount();
1:27d0ff4:                         LOG.info("Num VM connetions:" + numVmConnections);
1:8012f28:                         return numVmConnections == 2;
1:27d0ff4:                     }});
1:27d0ff4:         if (!allGood) {
1:27d0ff4:             dumpAllThreads("ExtraHubVMConnection");
1:27d0ff4:         }
1:8012f28:         assertTrue("should be only 2 vm connections for the single network duplex network connector", allGood);
1:27d0ff4:     }
1:4743a20: 
1:27d0ff4:     public void testTwoDuplexNCsAreAllowed() throws Exception {
1:27d0ff4:         useDuplexNetworkBridge = true;
1:27d0ff4:         useSocketProxy = false;
1:27d0ff4: 
1:27d0ff4:         NetworkConnector connector = bridgeBrokers(SPOKE, HUB);
1:27d0ff4:         connector.setName("FirstDuplex");
1:27d0ff4:         connector = bridgeBrokers(SPOKE, HUB);
1:27d0ff4:         connector.setName("SecondDuplex");
1:27d0ff4: 
1:4743a20:         startAllBrokers();
1:27d0ff4:         waitForBridgeFormation();
1:27d0ff4: 
1:27d0ff4:         BrokerItem hub = brokers.get(HUB);
1:27d0ff4:         assertEquals("Has two transport Connectors", 2, hub.broker.getTransportConnectors().get(0).getConnections().size());
1:27d0ff4:     }
1:4743a20: 
1:27d0ff4:     @Override
1:8761189:     protected void startAllBrokers() throws Exception {
1:8761189:         // Ensure HUB is started first so bridge will be active from the get go
1:8761189:         BrokerItem brokerItem = brokers.get(HUB);
1:8761189:         brokerItem.broker.start();
1:8761189:         brokerItem = brokers.get(SPOKE);
1:8761189:         brokerItem.broker.start();
1:8761189:         sleep(600);
1:8761189:     }
1:27d0ff4: 
1:8761189:     @Override
1:8761189:     public void setUp() throws Exception {
1:8761189:         networkDownTimeStart = 0;
1:27d0ff4:         inactiveDuration = 1000;
1:27d0ff4:         useSocketProxy = true;
1:8761189:         super.setAutoFail(true);
1:8761189:         super.setUp();
1:8761189:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1:8761189:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:8761189:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:8761189:     }
1:4743a20: 
1:4743a20:     @Override
1:27d0ff4:     public void tearDown() throws Exception {
1:27d0ff4:         super.tearDown();
1:27d0ff4:         if (socketProxy != null) {
1:27d0ff4:             socketProxy.close();
1:27d0ff4:         }
1:27d0ff4:     }
1:4743a20: 
1:8761189:     public static Test suite() {
1:8761189:         return suite(BrokerQueueNetworkWithDisconnectTest.class);
1:8761189:     }
1:4743a20: 
1:8761189:     @Override
1:8761189:     protected void onSend(int i, TextMessage msg) {
1:8761189:         sleep(50);
1:8761189:         if (i == 50 || i == 150) {
1:f232cec:             if (simulateStalledNetwork) {
1:8761189:                 socketProxy.pause();
1:8761189:             } else {
1:8761189:                 socketProxy.close();
1:8761189:             }
1:8761189:             networkDownTimeStart = System.currentTimeMillis();
1:8761189:         } else if (networkDownTimeStart > 0) {
1:8761189:              // restart after NETWORK_DOWN_TIME seconds
1:8761189:              if (networkDownTimeStart + NETWORK_DOWN_TIME < System.currentTimeMillis()) {
1:f232cec:                  if (simulateStalledNetwork) {
1:8761189:                      socketProxy.goOn();
1:8761189:                  } else {
1:8761189:                      socketProxy.reopen();
1:8761189:                  }
1:8761189:                  networkDownTimeStart = 0;
1:8761189:              } else {
1:8761189:                  // slow message production to allow bridge to recover and limit message duplication
1:8761189:                  sleep(500);
1:8761189:             }
1:8761189:         }
1:8761189:         super.onSend(i, msg);
1:8761189:     }
1:27d0ff4: 
1:8761189:     private void sleep(int milliSecondTime) {
1:8761189:         try {
1:8761189:             Thread.sleep(milliSecondTime);
1:8761189:         } catch (InterruptedException igonred) {
1:4743a20:         }
1:8761189:     }
1:8761189: 
1:8761189:     @Override
1:9041c3f:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
1:8761189:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:8761189:         URI remoteURI;
1:8761189:         if (!transportConnectors.isEmpty()) {
1:4743a20:             remoteURI = transportConnectors.get(0).getConnectUri();
1:27d0ff4:             if (useSocketProxy) {
1:27d0ff4:                 socketProxy = new SocketProxy(remoteURI);
1:27d0ff4:                 remoteURI = socketProxy.getUrl();
1:27d0ff4:             }
1:4743a20:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:(" + remoteURI
1:27d0ff4:                     + "?wireFormat.maxInactivityDuration=" + inactiveDuration + "&wireFormat.maxInactivityDurationInitalDelay=" + inactiveDuration + ")?useExponentialBackOff=false"));
1:8761189:             connector.setDynamicOnly(dynamicOnly);
1:8761189:             connector.setNetworkTTL(networkTTL);
1:8761189:             localBroker.addNetworkConnector(connector);
1:8761189:             maxSetupTime = 2000;
1:8761189:             if (useDuplexNetworkBridge) {
1:8761189:                 connector.setDuplex(true);
1:8761189:             }
1:8761189:             return connector;
1:8761189:         } else {
1:8761189:             throw new Exception("Remote broker has no registered connectors.");
1:8761189:         }
1:8761189:     }
1:8761189: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         assertTrue("At least message " + MESSAGE_COUNT +
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:         // wait for full reformation of bridge
1:         boolean allGood = Wait.waitFor(new Wait.Condition(){
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         startAllBrokers();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         }
/////////////////////////////////////////////////////////////////////////
1:             remoteURI = transportConnectors.get(0).getConnectUri();
1:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:(" + remoteURI
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:                         return numVmConnections == 2;
1:         assertTrue("should be only 2 vm connections for the single network duplex network connector", allGood);
commit:f232cec
/////////////////////////////////////////////////////////////////////////
1:     public boolean simulateStalledNetwork;
1:         addCombinationValues( "simulateStalledNetwork", new Object[]{ Boolean.TRUE } );
/////////////////////////////////////////////////////////////////////////
1:             if (simulateStalledNetwork) {
/////////////////////////////////////////////////////////////////////////
1:                  if (simulateStalledNetwork) {
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.transport.vm.VMTransportFactory;
1: import org.apache.activemq.util.Wait;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1:     private static final Log LOG = LogFactory.getLog(BrokerQueueNetworkWithDisconnectTest.class);
1:     public boolean useDuplexNetworkBridge = true;
1:     private long inactiveDuration = 1000;
1:     private boolean useSocketProxy = true;
/////////////////////////////////////////////////////////////////////////
1:     public void testNoStuckConnectionsWithTransportDisconnect() throws Exception {
1:         inactiveDuration=60000l;
1:         useDuplexNetworkBridge = true;
1: 
1:         bridgeBrokers(SPOKE, HUB);
1: 
1:         final BrokerItem hub = brokers.get(HUB);
1:         hub.broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     int sleepCount = 2;
1:                     @Override
1:                     public void removeConnection(ConnectionContext context,
1:                             ConnectionInfo info, Throwable error)
1:                             throws Exception {
1:                         try {
1:                             while(--sleepCount >= 0) {
1:                                 LOG.info("sleeping for a bit in close impl to simulate load where reconnect fails due to a pending close");
1:                                 TimeUnit.SECONDS.sleep(2);
1:                             }
1:                         } catch (Exception ignored) {}
1:                         super.removeConnection(context, info, error);
1:                     }
1:                 }
1:         });
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         // kill the initiator side, leaving remote end intact
1:         // simulate async network breakage
1:         // remote side will need to spot duplicate network and stop/kill the original
1:         for (int i=0; i< 3;  i++) {
1:             socketProxy.halfClose();
1:             sleep(10000);
1:         }
0:         // wait for full reformation of bridge       
1:         // verify no extra connections
0:         boolean allGood = Wait.waitFor(new Wait.Condition(){ 
1:                     public boolean isSatisified() throws Exception {
1:                         long numConnections = hub.broker.getTransportConnectors().get(0).getConnections().size();
1:                         LOG.info("Num connetions:" + numConnections);
1:                         return numConnections == 1;
1:                     }});
1:         if (!allGood) {
1:             dumpAllThreads("ExtraHubConnection");
1:         }
1:         assertTrue("should be only one transport connection for the single duplex network connector", allGood);
1: 
1:         allGood = Wait.waitFor(new Wait.Condition(){
1:                     public boolean isSatisified() throws Exception {
1:                         long numVmConnections = VMTransportFactory.SERVERS.get(HUB).getConnectionCount();
1:                         LOG.info("Num VM connetions:" + numVmConnections);
0:                         return numVmConnections == 1;
1:                     }});
1:         if (!allGood) {
1:             dumpAllThreads("ExtraHubVMConnection");
1:         }
0:         assertTrue("should be only one vm connection for the single network duplex network connector", allGood);
1:     }
1:     
1:     public void testTwoDuplexNCsAreAllowed() throws Exception {
1:         useDuplexNetworkBridge = true;
1:         useSocketProxy = false;
1: 
1:         NetworkConnector connector = bridgeBrokers(SPOKE, HUB);
1:         connector.setName("FirstDuplex");
1:         connector = bridgeBrokers(SPOKE, HUB);
1:         connector.setName("SecondDuplex");
1: 
1:         startAllBrokers(); 
1:         waitForBridgeFormation();
1: 
1:         BrokerItem hub = brokers.get(HUB);
1:         assertEquals("Has two transport Connectors", 2, hub.broker.getTransportConnectors().get(0).getConnections().size());
1:     }
/////////////////////////////////////////////////////////////////////////
1:         inactiveDuration = 1000;
1:         useSocketProxy = true;
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         if (socketProxy != null) {
1:             socketProxy.close();
1:         }
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:             if (useSocketProxy) {
1:                 socketProxy = new SocketProxy(remoteURI);
1:                 remoteURI = socketProxy.getUrl();
1:             }
0:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:(" + remoteURI 
1:                     + "?wireFormat.maxInactivityDuration=" + inactiveDuration + "&wireFormat.maxInactivityDurationInitalDelay=" + inactiveDuration + ")?useExponentialBackOff=false"));
/////////////////////////////////////////////////////////////////////////
commit:8761189
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.List;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport.BrokerItem;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.SocketProxy;
1: 
1: 
1: public class BrokerQueueNetworkWithDisconnectTest extends JmsMultipleBrokersTestSupport {
1:     private static final int NETWORK_DOWN_TIME = 5000;
1:     protected static final int MESSAGE_COUNT = 200;
1:     private static final String HUB = "HubBroker";
1:     private static final String SPOKE = "SpokeBroker";
1:     private SocketProxy socketProxy;
1:     private long networkDownTimeStart;
0:     public boolean useDuplexNetworkBridge;
0:     public boolean sumulateStalledNetwork;
1: 
1:    
1:     public void initCombosForTestSendOnAReceiveOnBWithTransportDisconnect() {
1:         addCombinationValues( "useDuplexNetworkBridge", new Object[]{ Boolean.TRUE, Boolean.FALSE} );
0:         addCombinationValues( "sumulateStalledNetwork", new Object[]{ Boolean.TRUE } );
1:     }
1:     
1:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:         bridgeBrokers(SPOKE, HUB);
1: 
0:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", false);
1:         
1:         // Setup consumers
1:         MessageConsumer client = createConsumer(HUB, dest);
1:         
1:         // allow subscription information to flow back to Spoke
1:         sleep(600);
1:         
1:         // Send messages
1:         sendMessages(SPOKE, dest, MESSAGE_COUNT);
1: 
1:         MessageIdList msgs = getConsumerMessages(HUB, client);
1:         msgs.waitForMessagesToArrive(MESSAGE_COUNT);
1: 
0:         assertTrue("At least message " + MESSAGE_COUNT + 
1:                 " must be recieved, duplicates are expected, count=" + msgs.getMessageCount(),
1:                 MESSAGE_COUNT <= msgs.getMessageCount());
1:     }
1: 
1:     
1:     @Override
1:     protected void startAllBrokers() throws Exception {
1:         // Ensure HUB is started first so bridge will be active from the get go
1:         BrokerItem brokerItem = brokers.get(HUB);
1:         brokerItem.broker.start();
1:         brokerItem = brokers.get(SPOKE);
1:         brokerItem.broker.start();
1:         sleep(600);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         networkDownTimeStart = 0;
1:         super.setAutoFail(true);
1:         super.setUp();
1:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:     }
1:     
1:     public static Test suite() {
1:         return suite(BrokerQueueNetworkWithDisconnectTest.class);
1:     }
1:        
1:     @Override
1:     protected void onSend(int i, TextMessage msg) {
1:         sleep(50);
1:         if (i == 50 || i == 150) {
0:             if (sumulateStalledNetwork) {
1:                 socketProxy.pause();
1:             } else {
1:                 socketProxy.close();
1:             }
1:             networkDownTimeStart = System.currentTimeMillis();
1:         } else if (networkDownTimeStart > 0) {
1:              // restart after NETWORK_DOWN_TIME seconds
1:              if (networkDownTimeStart + NETWORK_DOWN_TIME < System.currentTimeMillis()) {
0:                  if (sumulateStalledNetwork) {
1:                      socketProxy.goOn();
1:                  } else {
1:                      socketProxy.reopen();
1:                  }
1:                  networkDownTimeStart = 0;
1:              } else {
1:                  // slow message production to allow bridge to recover and limit message duplication
1:                  sleep(500);
1:             }
1:         }
1:         super.onSend(i, msg);
1:     }
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }    
1:     }
1: 
1: 
1:     @Override
0:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL) throws Exception {
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI;
1:         if (!transportConnectors.isEmpty()) {
0:             remoteURI = ((TransportConnector)transportConnectors.get(0)).getConnectUri();
0:             socketProxy = new SocketProxy(remoteURI);
0:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI("static:(" + socketProxy.getUrl() 
0:                     + "?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000)?useExponentialBackOff=false"));
1:             connector.setDynamicOnly(dynamicOnly);
1:             connector.setNetworkTTL(networkTTL);
1:             localBroker.addNetworkConnector(connector);
1:             maxSetupTime = 2000;
1:             if (useDuplexNetworkBridge) {
1:                 connector.setDuplex(true);
1:             }
1:             return connector;
1:         } else {
1:             throw new Exception("Remote broker has no registered connectors.");
1:         }
1: 
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9041c3f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception {
commit:8b0bb33
/////////////////////////////////////////////////////////////////////////
0:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit) throws Exception {
============================================================================