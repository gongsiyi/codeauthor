1:3953b9a: /**
1:3953b9a:  *
1:3953b9a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3953b9a:  * contributor license agreements.  See the NOTICE file distributed with
1:3953b9a:  * this work for additional information regarding copyright ownership.
1:3953b9a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3953b9a:  * (the "License"); you may not use this file except in compliance with
1:3953b9a:  * the License.  You may obtain a copy of the License at
1:3953b9a:  *
1:3953b9a:  * http://www.apache.org/licenses/LICENSE-2.0
1:3953b9a:  *
1:3953b9a:  * Unless required by applicable law or agreed to in writing, software
1:3953b9a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3953b9a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3953b9a:  * See the License for the specific language governing permissions and
1:3953b9a:  * limitations under the License.
1:3953b9a:  */
1:3953b9a: 
1:3953b9a: package org.apache.activemq.openwire.v12;
1:3953b9a: 
1:3953b9a: import java.io.DataInput;
1:3953b9a: import java.io.DataOutput;
1:3953b9a: import java.io.IOException;
1:3953b9a: 
1:3953b9a: import org.apache.activemq.openwire.*;
1:3953b9a: import org.apache.activemq.command.*;
1:3953b9a: 
1:3953b9a: 
1:3953b9a: 
1:3953b9a: /**
1:3953b9a:  * Marshalling code for Open Wire Format for MessageMarshaller
1:3953b9a:  *
1:3953b9a:  *
1:3953b9a:  * NOTE!: This file is auto generated - do not modify!
1:3953b9a:  *        if you need to make a change, please see the modify the groovy scripts in the
1:3953b9a:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:3953b9a:  *        this file.
1:3953b9a:  *
1:3953b9a:  * 
1:3953b9a:  */
1:3953b9a: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1:3953b9a: 
1:3953b9a:     /**
1:3953b9a:      * Un-marshal an object instance from the data input stream
1:3953b9a:      *
1:3953b9a:      * @param o the object to un-marshal
1:3953b9a:      * @param dataIn the data input stream to build the object from
1:3953b9a:      * @throws IOException
1:3953b9a:      */
1:3953b9a:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:3953b9a:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:3953b9a: 
1:3953b9a:         Message info = (Message)o;
1:3953b9a: 
1:3953b9a:         info.beforeUnmarshall(wireFormat);
1:3953b9a:         
1:3953b9a:         info.setProducerId((org.apache.activemq.command.ProducerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:3953b9a:         info.setGroupSequence(dataIn.readInt());
1:3953b9a:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:3953b9a:         info.setPersistent(bs.readBoolean());
1:3953b9a:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
1:3953b9a:         info.setPriority(dataIn.readByte());
1:3953b9a:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:3953b9a:         info.setType(tightUnmarshalString(dataIn, bs));
1:3953b9a:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:3953b9a:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
1:3953b9a:         info.setDataStructure((org.apache.activemq.command.DataStructure) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:3953b9a:         info.setCompressed(bs.readBoolean());
1:3953b9a:         info.setRedeliveryCounter(dataIn.readInt());
1:3953b9a: 
1:3953b9a:         if (bs.readBoolean()) {
1:3953b9a:             short size = dataIn.readShort();
1:3953b9a:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:3953b9a:             for( int i=0; i < size; i++ ) {
1:3953b9a:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:3953b9a:             }
1:3953b9a:             info.setBrokerPath(value);
1:3953b9a:         }
1:3953b9a:         else {
1:3953b9a:             info.setBrokerPath(null);
1:3953b9a:         }
1:3953b9a:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:3953b9a:         info.setUserID(tightUnmarshalString(dataIn, bs));
1:3953b9a:         info.setRecievedByDFBridge(bs.readBoolean());
1:3953b9a:         info.setDroppable(bs.readBoolean());
1:3953b9a: 
1:3953b9a:         if (bs.readBoolean()) {
1:3953b9a:             short size = dataIn.readShort();
1:3953b9a:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:3953b9a:             for( int i=0; i < size; i++ ) {
1:3953b9a:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:3953b9a:             }
1:3953b9a:             info.setCluster(value);
1:3953b9a:         }
1:3953b9a:         else {
1:3953b9a:             info.setCluster(null);
1:3953b9a:         }
1:3953b9a:         info.setBrokerInTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:3953b9a:         info.setBrokerOutTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:3953b9a:         info.setJMSXGroupFirstForConsumer(bs.readBoolean());
1:3953b9a: 
1:3953b9a:         info.afterUnmarshall(wireFormat);
1:3953b9a: 
1:3953b9a:     }
1:3953b9a: 
1:3953b9a: 
1:3953b9a:     /**
1:3953b9a:      * Write the booleans that this object uses to a BooleanStream
1:3953b9a:      */
1:3953b9a:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:3953b9a: 
1:3953b9a:         Message info = (Message)o;
1:3953b9a: 
1:3953b9a:         info.beforeMarshall(wireFormat);
1:3953b9a: 
1:3953b9a:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:3953b9a:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:3953b9a:         rc += tightMarshalString1(info.getGroupID(), bs);
1:3953b9a:         rc += tightMarshalString1(info.getCorrelationId(), bs);
1:3953b9a:         bs.writeBoolean(info.isPersistent());
1:3953b9a:         rc+=tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:3953b9a:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
1:3953b9a:         rc+=tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:3953b9a:         rc += tightMarshalString1(info.getType(), bs);
1:3953b9a:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:3953b9a:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:3953b9a:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:3953b9a:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:3953b9a:         bs.writeBoolean(info.isCompressed());
1:3953b9a:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:3953b9a:         rc+=tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:3953b9a:         rc += tightMarshalString1(info.getUserID(), bs);
1:3953b9a:         bs.writeBoolean(info.isRecievedByDFBridge());
1:3953b9a:         bs.writeBoolean(info.isDroppable());
1:3953b9a:         rc += tightMarshalObjectArray1(wireFormat, info.getCluster(), bs);
1:3953b9a:         rc+=tightMarshalLong1(wireFormat, info.getBrokerInTime(), bs);
1:3953b9a:         rc+=tightMarshalLong1(wireFormat, info.getBrokerOutTime(), bs);
1:3953b9a:         bs.writeBoolean(info.isJMSXGroupFirstForConsumer());
1:3953b9a: 
1:3953b9a:         return rc + 9;
1:3953b9a:     }
1:3953b9a: 
1:3953b9a:     /**
1:3953b9a:      * Write a object instance to data output stream
1:3953b9a:      *
1:3953b9a:      * @param o the instance to be marshaled
1:3953b9a:      * @param dataOut the output stream
1:3953b9a:      * @throws IOException thrown if an error occurs
1:3953b9a:      */
1:3953b9a:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:3953b9a:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:3953b9a: 
1:3953b9a:         Message info = (Message)o;
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:3953b9a:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:3953b9a:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:3953b9a:         dataOut.writeInt(info.getGroupSequence());
1:3953b9a:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:3953b9a:         bs.readBoolean();
1:3953b9a:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:3953b9a:         dataOut.writeByte(info.getPriority());
1:3953b9a:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:3953b9a:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:3953b9a:         tightMarshalString2(info.getType(), dataOut, bs);
1:3953b9a:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:3953b9a:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:3953b9a:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:3953b9a:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:3953b9a:         bs.readBoolean();
1:3953b9a:         dataOut.writeInt(info.getRedeliveryCounter());
1:3953b9a:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:3953b9a:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:3953b9a:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:3953b9a:         bs.readBoolean();
1:3953b9a:         bs.readBoolean();
1:3953b9a:         tightMarshalObjectArray2(wireFormat, info.getCluster(), dataOut, bs);
1:3953b9a:         tightMarshalLong2(wireFormat, info.getBrokerInTime(), dataOut, bs);
1:3953b9a:         tightMarshalLong2(wireFormat, info.getBrokerOutTime(), dataOut, bs);
1:3953b9a:         bs.readBoolean();
1:3953b9a: 
1:3953b9a:         info.afterMarshall(wireFormat);
1:3953b9a: 
1:3953b9a:     }
1:3953b9a: 
1:3953b9a:     /**
1:3953b9a:      * Un-marshal an object instance from the data input stream
1:3953b9a:      *
1:3953b9a:      * @param o the object to un-marshal
1:3953b9a:      * @param dataIn the data input stream to build the object from
1:3953b9a:      * @throws IOException
1:3953b9a:      */
1:3953b9a:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:3953b9a:         super.looseUnmarshal(wireFormat, o, dataIn);
1:3953b9a: 
1:3953b9a:         Message info = (Message)o;
1:3953b9a: 
1:3953b9a:         info.beforeUnmarshall(wireFormat);
1:3953b9a:         
1:3953b9a:         info.setProducerId((org.apache.activemq.command.ProducerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:3953b9a:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setGroupID(looseUnmarshalString(dataIn));
1:3953b9a:         info.setGroupSequence(dataIn.readInt());
1:3953b9a:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:3953b9a:         info.setPersistent(dataIn.readBoolean());
1:3953b9a:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:3953b9a:         info.setPriority(dataIn.readByte());
1:3953b9a:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalNestedObject(wireFormat, dataIn));
1:3953b9a:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:3953b9a:         info.setType(looseUnmarshalString(dataIn));
1:3953b9a:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:3953b9a:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
1:3953b9a:         info.setDataStructure((org.apache.activemq.command.DataStructure) looseUnmarsalNestedObject(wireFormat, dataIn));
1:3953b9a:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:3953b9a:         info.setCompressed(dataIn.readBoolean());
1:3953b9a:         info.setRedeliveryCounter(dataIn.readInt());
1:3953b9a: 
1:3953b9a:         if (dataIn.readBoolean()) {
1:3953b9a:             short size = dataIn.readShort();
1:3953b9a:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:3953b9a:             for( int i=0; i < size; i++ ) {
1:3953b9a:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:3953b9a:             }
1:3953b9a:             info.setBrokerPath(value);
1:3953b9a:         }
1:3953b9a:         else {
1:3953b9a:             info.setBrokerPath(null);
1:3953b9a:         }
1:3953b9a:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:3953b9a:         info.setUserID(looseUnmarshalString(dataIn));
1:3953b9a:         info.setRecievedByDFBridge(dataIn.readBoolean());
1:3953b9a:         info.setDroppable(dataIn.readBoolean());
1:3953b9a: 
1:3953b9a:         if (dataIn.readBoolean()) {
1:3953b9a:             short size = dataIn.readShort();
1:3953b9a:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:3953b9a:             for( int i=0; i < size; i++ ) {
1:3953b9a:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:3953b9a:             }
1:3953b9a:             info.setCluster(value);
1:3953b9a:         }
1:3953b9a:         else {
1:3953b9a:             info.setCluster(null);
1:3953b9a:         }
1:3953b9a:         info.setBrokerInTime(looseUnmarshalLong(wireFormat, dataIn));
1:3953b9a:         info.setBrokerOutTime(looseUnmarshalLong(wireFormat, dataIn));
1:3953b9a:         info.setJMSXGroupFirstForConsumer(dataIn.readBoolean());
1:3953b9a: 
1:3953b9a:         info.afterUnmarshall(wireFormat);
1:3953b9a: 
1:3953b9a:     }
1:3953b9a: 
1:3953b9a: 
1:3953b9a:     /**
1:3953b9a:      * Write the booleans that this object uses to a BooleanStream
1:3953b9a:      */
1:3953b9a:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:3953b9a: 
1:3953b9a:         Message info = (Message)o;
1:3953b9a: 
1:3953b9a:         info.beforeMarshall(wireFormat);
1:3953b9a: 
1:3953b9a:         super.looseMarshal(wireFormat, o, dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:3953b9a:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:3953b9a:         looseMarshalString(info.getGroupID(), dataOut);
1:3953b9a:         dataOut.writeInt(info.getGroupSequence());
1:3953b9a:         looseMarshalString(info.getCorrelationId(), dataOut);
1:3953b9a:         dataOut.writeBoolean(info.isPersistent());
1:3953b9a:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:3953b9a:         dataOut.writeByte(info.getPriority());
1:3953b9a:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:3953b9a:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:3953b9a:         looseMarshalString(info.getType(), dataOut);
1:3953b9a:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:3953b9a:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:3953b9a:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:3953b9a:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:3953b9a:         dataOut.writeBoolean(info.isCompressed());
1:3953b9a:         dataOut.writeInt(info.getRedeliveryCounter());
1:3953b9a:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:3953b9a:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:3953b9a:         looseMarshalString(info.getUserID(), dataOut);
1:3953b9a:         dataOut.writeBoolean(info.isRecievedByDFBridge());
1:3953b9a:         dataOut.writeBoolean(info.isDroppable());
1:3953b9a:         looseMarshalObjectArray(wireFormat, info.getCluster(), dataOut);
1:3953b9a:         looseMarshalLong(wireFormat, info.getBrokerInTime(), dataOut);
1:3953b9a:         looseMarshalLong(wireFormat, info.getBrokerOutTime(), dataOut);
1:3953b9a:         dataOut.writeBoolean(info.isJMSXGroupFirstForConsumer());
1:3953b9a: 
1:3953b9a:     }
1:3953b9a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:3953b9a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v12;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for MessageMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
1:  * 
1:  */
1: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
1:         info.setProducerId((org.apache.activemq.command.ProducerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:         info.setGroupSequence(dataIn.readInt());
1:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:         info.setPersistent(bs.readBoolean());
1:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setPriority(dataIn.readByte());
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setType(tightUnmarshalString(dataIn, bs));
1:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setCompressed(bs.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1: 
1:         if (bs.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setUserID(tightUnmarshalString(dataIn, bs));
1:         info.setRecievedByDFBridge(bs.readBoolean());
1:         info.setDroppable(bs.readBoolean());
1: 
1:         if (bs.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:             }
1:             info.setCluster(value);
1:         }
1:         else {
1:             info.setCluster(null);
1:         }
1:         info.setBrokerInTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setBrokerOutTime(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setJMSXGroupFirstForConsumer(bs.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:         rc += tightMarshalString1(info.getGroupID(), bs);
1:         rc += tightMarshalString1(info.getCorrelationId(), bs);
1:         bs.writeBoolean(info.isPersistent());
1:         rc+=tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
1:         rc+=tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:         rc += tightMarshalString1(info.getType(), bs);
1:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:         bs.writeBoolean(info.isCompressed());
1:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:         rc+=tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:         rc += tightMarshalString1(info.getUserID(), bs);
1:         bs.writeBoolean(info.isRecievedByDFBridge());
1:         bs.writeBoolean(info.isDroppable());
1:         rc += tightMarshalObjectArray1(wireFormat, info.getCluster(), bs);
1:         rc+=tightMarshalLong1(wireFormat, info.getBrokerInTime(), bs);
1:         rc+=tightMarshalLong1(wireFormat, info.getBrokerOutTime(), bs);
1:         bs.writeBoolean(info.isJMSXGroupFirstForConsumer());
1: 
1:         return rc + 9;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         Message info = (Message)o;
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:         dataOut.writeInt(info.getGroupSequence());
1:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:         bs.readBoolean();
1:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:         dataOut.writeByte(info.getPriority());
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:         tightMarshalString2(info.getType(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:         bs.readBoolean();
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         tightMarshalObjectArray2(wireFormat, info.getCluster(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getBrokerInTime(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getBrokerOutTime(), dataOut, bs);
1:         bs.readBoolean();
1: 
1:         info.afterMarshall(wireFormat);
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
1:         info.setProducerId((org.apache.activemq.command.ProducerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setGroupID(looseUnmarshalString(dataIn));
1:         info.setGroupSequence(dataIn.readInt());
1:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:         info.setPersistent(dataIn.readBoolean());
1:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setPriority(dataIn.readByte());
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setType(looseUnmarshalString(dataIn));
1:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setCompressed(dataIn.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setUserID(looseUnmarshalString(dataIn));
1:         info.setRecievedByDFBridge(dataIn.readBoolean());
1:         info.setDroppable(dataIn.readBoolean());
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setCluster(value);
1:         }
1:         else {
1:             info.setCluster(null);
1:         }
1:         info.setBrokerInTime(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setBrokerOutTime(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setJMSXGroupFirstForConsumer(dataIn.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:         looseMarshalString(info.getGroupID(), dataOut);
1:         dataOut.writeInt(info.getGroupSequence());
1:         looseMarshalString(info.getCorrelationId(), dataOut);
1:         dataOut.writeBoolean(info.isPersistent());
1:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:         dataOut.writeByte(info.getPriority());
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:         looseMarshalString(info.getType(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:         dataOut.writeBoolean(info.isCompressed());
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:         looseMarshalString(info.getUserID(), dataOut);
1:         dataOut.writeBoolean(info.isRecievedByDFBridge());
1:         dataOut.writeBoolean(info.isDroppable());
1:         looseMarshalObjectArray(wireFormat, info.getCluster(), dataOut);
1:         looseMarshalLong(wireFormat, info.getBrokerInTime(), dataOut);
1:         looseMarshalLong(wireFormat, info.getBrokerOutTime(), dataOut);
1:         dataOut.writeBoolean(info.isJMSXGroupFirstForConsumer());
1: 
1:     }
1: }
============================================================================