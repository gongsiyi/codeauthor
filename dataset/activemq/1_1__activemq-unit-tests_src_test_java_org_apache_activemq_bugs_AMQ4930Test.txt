1:a64976a: /**
1:a64976a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a64976a:  * contributor license agreements.  See the NOTICE file distributed with
1:a64976a:  * this work for additional information regarding copyright ownership.
1:a64976a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a64976a:  * (the "License"); you may not use this file except in compliance with
1:a64976a:  * the License.  You may obtain a copy of the License at
1:a64976a:  *
1:a64976a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a64976a:  *
1:a64976a:  * Unless required by applicable law or agreed to in writing, software
1:a64976a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a64976a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a64976a:  * See the License for the specific language governing permissions and
1:a64976a:  * limitations under the License.
1:a64976a:  */
1:a64976a: package org.apache.activemq.bugs;
1:a64976a: 
1:a64976a: import javax.jms.BytesMessage;
1:a64976a: import javax.jms.Connection;
1:a64976a: import javax.jms.DeliveryMode;
1:a64976a: import javax.jms.MessageProducer;
1:a64976a: import javax.jms.Session;
1:a64976a: import junit.framework.TestCase;
1:a64976a: import org.apache.activemq.ActiveMQConnectionFactory;
1:a64976a: import org.apache.activemq.broker.BrokerService;
1:a64976a: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a64976a: import org.apache.activemq.broker.region.Queue;
1:a64976a: import org.apache.activemq.broker.region.RegionBroker;
1:a64976a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a64976a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a64976a: import org.apache.activemq.command.ActiveMQQueue;
1:4165972: import org.apache.activemq.command.Message;
1:a64976a: import org.slf4j.Logger;
1:a64976a: import org.slf4j.LoggerFactory;
1:a64976a: 
1:a64976a: public class AMQ4930Test extends TestCase {
1:a64976a:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4930Test.class);
1:a64976a:     final int messageCount = 150;
1:a64976a:     final int messageSize = 1024*1024;
1:4165972:     final int maxBrowsePageSize = 50;
1:a64976a:     final ActiveMQQueue bigQueue = new ActiveMQQueue("BIG");
1:a64976a:     BrokerService broker;
1:a64976a:     ActiveMQConnectionFactory factory;
1:a64976a: 
1:a64976a:     protected void configureBroker() throws Exception {
1:a64976a:         broker.setDeleteAllMessagesOnStartup(true);
1:a64976a:         broker.setAdvisorySupport(false);
1:13ec994:         broker.getSystemUsage().getMemoryUsage().setLimit(1*1024*1024);
1:a64976a: 
1:a64976a:         PolicyMap pMap = new PolicyMap();
1:a64976a:         PolicyEntry policy = new PolicyEntry();
1:a64976a:         // disable expriy processing as this will call browse in parallel
1:a64976a:         policy.setExpireMessagesPeriod(0);
1:4165972:         policy.setMaxPageSize(maxBrowsePageSize);
1:4165972:         policy.setMaxBrowsePageSize(maxBrowsePageSize);
1:a64976a:         pMap.setDefaultEntry(policy);
1:a64976a: 
1:a64976a:         broker.setDestinationPolicy(pMap);
1:a64976a:     }
1:a64976a: 
1:a64976a:     public void testBrowsePendingNonPersistent() throws Exception {
1:a64976a:         doTestBrowsePending(DeliveryMode.NON_PERSISTENT);
1:a64976a:     }
1:a64976a: 
1:a64976a:     public void testBrowsePendingPersistent() throws Exception {
1:a64976a:         doTestBrowsePending(DeliveryMode.PERSISTENT);
1:a64976a:     }
1:a64976a: 
1:4165972:     public void testWithStatsDisabled() throws Exception {
1:4165972:         ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().setEnabled(false);
1:4165972:         doTestBrowsePending(DeliveryMode.PERSISTENT);
1:4165972:     }
1:4165972: 
1:a64976a:     public void doTestBrowsePending(int deliveryMode) throws Exception {
1:a64976a: 
1:a64976a:         Connection connection = factory.createConnection();
1:a64976a:         connection.start();
1:a64976a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a64976a:         MessageProducer producer = session.createProducer(bigQueue);
1:a64976a:         producer.setDeliveryMode(deliveryMode);
1:a64976a:         BytesMessage bytesMessage = session.createBytesMessage();
1:a64976a:         bytesMessage.writeBytes(new byte[messageSize]);
1:a64976a: 
1:a64976a:         for (int i = 0; i < messageCount; i++) {
1:a64976a:             producer.send(bigQueue, bytesMessage);
1:a64976a:         }
1:a64976a: 
1:a64976a:         final QueueViewMBean queueViewMBean = (QueueViewMBean)
1:a64976a:                 broker.getManagementContext().newProxyInstance(broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1:a64976a: 
1:a64976a:         LOG.info(queueViewMBean.getName() + " Size: " + queueViewMBean.getEnqueueCount());
1:a64976a: 
1:a64976a:         connection.close();
1:a64976a: 
1:a64976a:         assertFalse("Cache disabled on q", queueViewMBean.isCacheEnabled());
1:a64976a: 
1:a64976a:         // ensure repeated browse does now blow mem
1:a64976a: 
1:a64976a:         final Queue underTest = (Queue) ((RegionBroker)broker.getRegionBroker()).getQueueRegion().getDestinationMap().get(bigQueue);
1:a64976a: 
1:a64976a:         // do twice to attempt to pull in 2*maxBrowsePageSize which uses up the system memory limit
1:4165972:         Message[] browsed = underTest.browse();
1:4165972:         LOG.info("Browsed: " + browsed.length);
1:4165972:         assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
1:4165972:         browsed = underTest.browse();
1:4165972:         LOG.info("Browsed: " + browsed.length);
1:4165972:         assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
1:a64976a:         Runtime.getRuntime().gc();
1:a64976a:         long free = Runtime.getRuntime().freeMemory()/1024;
1:a64976a:         LOG.info("free at start of check: " + free);
1:a64976a:         // check for memory growth
1:a64976a:         for (int i=0; i<10; i++) {
1:a64976a:             LOG.info("free: " + Runtime.getRuntime().freeMemory()/1024);
1:4165972:             browsed = underTest.browse();
1:4165972:             LOG.info("Browsed: " + browsed.length);
1:4165972:             assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
1:a64976a:             Runtime.getRuntime().gc();
1:a64976a:             Runtime.getRuntime().gc();
1:862f503:             assertTrue("No growth: " + Runtime.getRuntime().freeMemory()/1024 + " >= " + (free - (free * 0.2)), Runtime.getRuntime().freeMemory()/1024 >= (free - (free * 0.2)));
1:a64976a:         }
1:a64976a:     }
1:a64976a: 
1:a64976a: 
1:a64976a:     protected void setUp() throws Exception {
1:a64976a:         super.setUp();
1:a64976a:         broker = new BrokerService();
1:a64976a:         broker.setBrokerName("thisOne");
1:a64976a:         configureBroker();
1:a64976a:         broker.start();
1:a64976a:         factory = new ActiveMQConnectionFactory("vm://thisOne?jms.alwaysSyncSend=true");
1:a64976a:         factory.setWatchTopicAdvisories(false);
1:a64976a: 
1:a64976a:     }
1:a64976a: 
1:a64976a:     protected void tearDown() throws Exception {
1:a64976a:         super.tearDown();
1:a64976a:         if (broker != null) {
1:a64976a:             broker.stop();
1:a64976a:             broker = null;
1:a64976a:         }
1:a64976a:     }
1:a64976a: 
1:a64976a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:13ec994
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1*1024*1024);
commit:d8cf54b
/////////////////////////////////////////////////////////////////////////
0:         broker.getSystemUsage().getMemoryUsage().setLimit(100*1024*1024);
commit:862f503
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("No growth: " + Runtime.getRuntime().freeMemory()/1024 + " >= " + (free - (free * 0.2)), Runtime.getRuntime().freeMemory()/1024 >= (free - (free * 0.2)));
commit:4165972
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1:     final int maxBrowsePageSize = 50;
/////////////////////////////////////////////////////////////////////////
1:         policy.setMaxPageSize(maxBrowsePageSize);
1:         policy.setMaxBrowsePageSize(maxBrowsePageSize);
/////////////////////////////////////////////////////////////////////////
1:     public void testWithStatsDisabled() throws Exception {
1:         ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().setEnabled(false);
1:         doTestBrowsePending(DeliveryMode.PERSISTENT);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Message[] browsed = underTest.browse();
1:         LOG.info("Browsed: " + browsed.length);
1:         assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
1:         browsed = underTest.browse();
1:         LOG.info("Browsed: " + browsed.length);
1:         assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
1:             browsed = underTest.browse();
1:             LOG.info("Browsed: " + browsed.length);
1:             assertEquals("maxBrowsePageSize", maxBrowsePageSize, browsed.length);
commit:a64976a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ4930Test extends TestCase {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ4930Test.class);
1:     final int messageCount = 150;
1:     final int messageSize = 1024*1024;
1:     final ActiveMQQueue bigQueue = new ActiveMQQueue("BIG");
1:     BrokerService broker;
1:     ActiveMQConnectionFactory factory;
1: 
1:     protected void configureBroker() throws Exception {
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setAdvisorySupport(false);
0:         broker.getSystemUsage().getMemoryUsage().setLimit(1*1024*1024);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         // disable expriy processing as this will call browse in parallel
1:         policy.setExpireMessagesPeriod(0);
0:         policy.setMaxPageSize(50);
0:         policy.setMaxBrowsePageSize(50);
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1:     }
1: 
1:     public void testBrowsePendingNonPersistent() throws Exception {
1:         doTestBrowsePending(DeliveryMode.NON_PERSISTENT);
1:     }
1: 
1:     public void testBrowsePendingPersistent() throws Exception {
1:         doTestBrowsePending(DeliveryMode.PERSISTENT);
1:     }
1: 
1:     public void doTestBrowsePending(int deliveryMode) throws Exception {
1: 
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(bigQueue);
1:         producer.setDeliveryMode(deliveryMode);
1:         BytesMessage bytesMessage = session.createBytesMessage();
1:         bytesMessage.writeBytes(new byte[messageSize]);
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             producer.send(bigQueue, bytesMessage);
0:             LOG.info("Sent: " + i);
1:         }
1: 
1:         final QueueViewMBean queueViewMBean = (QueueViewMBean)
1:                 broker.getManagementContext().newProxyInstance(broker.getAdminView().getQueues()[0], QueueViewMBean.class, false);
1: 
1:         LOG.info(queueViewMBean.getName() + " Size: " + queueViewMBean.getEnqueueCount());
1: 
1:         connection.close();
1: 
1:         assertFalse("Cache disabled on q", queueViewMBean.isCacheEnabled());
1: 
1:         // ensure repeated browse does now blow mem
1: 
1:         final Queue underTest = (Queue) ((RegionBroker)broker.getRegionBroker()).getQueueRegion().getDestinationMap().get(bigQueue);
1: 
1:         // do twice to attempt to pull in 2*maxBrowsePageSize which uses up the system memory limit
0:         underTest.browse();
0:         underTest.browse();
1:         Runtime.getRuntime().gc();
1:         long free = Runtime.getRuntime().freeMemory()/1024;
1:         LOG.info("free at start of check: " + free);
1:         // check for memory growth
1:         for (int i=0; i<10; i++) {
1:             LOG.info("free: " + Runtime.getRuntime().freeMemory()/1024);
0:             underTest.browse();
1:             Runtime.getRuntime().gc();
1:             Runtime.getRuntime().gc();
0:             assertTrue("No growth: " + Runtime.getRuntime().freeMemory()/1024, Runtime.getRuntime().freeMemory()/1024 >= (free - (free * 0.1)));
1:         }
1:     }
1: 
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         broker.setBrokerName("thisOne");
1:         configureBroker();
1:         broker.start();
1:         factory = new ActiveMQConnectionFactory("vm://thisOne?jms.alwaysSyncSend=true");
1:         factory.setWatchTopicAdvisories(false);
1: 
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:             broker = null;
1:         }
1:     }
1: 
1: }
============================================================================