1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.proxy;
8:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.BrokerTestSupport;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.store.PersistenceAdapter;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:d29ca2a: 
1:d29ca2a: public class ProxyTestSupport extends BrokerTestSupport {
1:230a86c: 
1:933eb2f:     protected ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
1:230a86c: 
1:d29ca2a:     protected TransportConnector connector;
1:d29ca2a: 
1:d29ca2a:     protected PersistenceAdapter remotePersistenceAdapter;
1:d29ca2a:     protected BrokerService remoteBroker;
1:6d8e2c5:     protected SystemUsage remoteMemoryManager;
1:d29ca2a:     protected TransportConnector remoteConnector;
1:d29ca2a:     private ProxyConnector proxyConnector;
1:d29ca2a:     private ProxyConnector remoteProxyConnector;
1:d29ca2a: 
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         BrokerService service = new BrokerService();
1:d29ca2a:         service.setBrokerName("broker1");
1:d29ca2a:         service.setPersistent(false);
1:121ecb5:         service.setUseJmx(false);
1:d29ca2a: 
1:d29ca2a:         connector = service.addConnector(getLocalURI());
1:230a86c:         proxyConnector = new ProxyConnector();
1:65e40d0:         proxyConnector.setName("proxy");
1:d29ca2a:         proxyConnector.setBind(new URI(getLocalProxyURI()));
1:230a86c:         proxyConnector.setRemote(new URI("fanout:static://" + getRemoteURI()));
1:d29ca2a:         service.addProxyConnector(proxyConnector);
1:230a86c: 
1:d29ca2a:         return service;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected BrokerService createRemoteBroker() throws Exception {
1:d29ca2a:         BrokerService service = new BrokerService();
1:d29ca2a:         service.setBrokerName("broker2");
1:d29ca2a:         service.setPersistent(false);
1:121ecb5:         service.setUseJmx(false);
1:d29ca2a: 
1:d29ca2a:         remoteConnector = service.addConnector(getRemoteURI());
1:d29ca2a:         remoteProxyConnector = new ProxyConnector();
1:65e40d0:         remoteProxyConnector.setName("remoteProxy");
1:d29ca2a:         remoteProxyConnector.setBind(new URI(getRemoteProxyURI()));
1:230a86c:         remoteProxyConnector.setRemote(new URI("fanout:static://" + getLocalURI()));
1:d29ca2a:         service.addProxyConnector(remoteProxyConnector);
1:230a86c: 
1:d29ca2a:         return service;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:         remoteBroker = createRemoteBroker();
1:d29ca2a:         remoteBroker.start();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:933eb2f:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
1:933eb2f:             StubConnection connection = iter.next();
1:d29ca2a:             connection.stop();
1:d29ca2a:             iter.remove();
1:d29ca2a:         }
1:d29ca2a:         remoteBroker.stop();
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getRemoteURI() {
1:3c4d09d:         return "tcp://localhost:6171";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getLocalURI() {
1:3c4d09d:         return "tcp://localhost:6161";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getRemoteProxyURI() {
1:3c4d09d:         return "tcp://localhost:6162";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getLocalProxyURI() {
1:3c4d09d:         return "tcp://localhost:6172";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected StubConnection createConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected StubConnection createRemoteConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected StubConnection createProxyConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(proxyConnector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected StubConnection createRemoteProxyConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(remoteProxyConnector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:121ecb5
/////////////////////////////////////////////////////////////////////////
1:         service.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1:         service.setUseJmx(false);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3c4d09d
/////////////////////////////////////////////////////////////////////////
1:         return "tcp://localhost:6171";
1:         return "tcp://localhost:6161";
1:         return "tcp://localhost:6162";
1:         return "tcp://localhost:6172";
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
1:             StubConnection connection = iter.next();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         proxyConnector = new ProxyConnector();
1:         proxyConnector.setRemote(new URI("fanout:static://" + getRemoteURI()));
1: 
/////////////////////////////////////////////////////////////////////////
1:         remoteProxyConnector.setRemote(new URI("fanout:static://" + getLocalURI()));
1: 
1: 
0:             StubConnection connection = (StubConnection)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:65e40d0
/////////////////////////////////////////////////////////////////////////
1:         proxyConnector.setName("proxy");
/////////////////////////////////////////////////////////////////////////
1:         remoteProxyConnector.setName("remoteProxy");
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.proxy;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.proxy.ProxyConnector;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: 
1: public class ProxyTestSupport extends BrokerTestSupport {
1:     
0:     protected ArrayList connections = new ArrayList();
1:     
1:     protected TransportConnector connector;
1: 
1:     protected PersistenceAdapter remotePersistenceAdapter;
1:     protected BrokerService remoteBroker;
0:     protected UsageManager remoteMemoryManager;
1:     protected TransportConnector remoteConnector;
1:     private ProxyConnector proxyConnector;
1:     private ProxyConnector remoteProxyConnector;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setBrokerName("broker1");
1:         service.setPersistent(false);
1: 
1:         connector = service.addConnector(getLocalURI());
0:         proxyConnector=new ProxyConnector();
1:         proxyConnector.setBind(new URI(getLocalProxyURI()));
0:         proxyConnector.setRemote(new URI("fanout:static://"+getRemoteURI()));
1:         service.addProxyConnector(proxyConnector);
1:         
1:         return service;
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setBrokerName("broker2");
1:         service.setPersistent(false);
1: 
1:         remoteConnector = service.addConnector(getRemoteURI());
1:         remoteProxyConnector = new ProxyConnector();
1:         remoteProxyConnector.setBind(new URI(getRemoteProxyURI()));
0:         remoteProxyConnector.setRemote(new URI("fanout:static://"+getLocalURI()));
1:         service.addProxyConnector(remoteProxyConnector);
1:         
1:         return service;
1:     }
1:     
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.start();
1:     }
1:     
1:     protected void tearDown() throws Exception {
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:             StubConnection connection = (StubConnection) iter.next();
1:             connection.stop();
1:             iter.remove();
1:         }
1:         remoteBroker.stop();
1:         super.tearDown();
1:     }
1: 
1:     protected String getRemoteURI() {
0:         return "tcp://localhost:7001";
1:     }
1: 
1:     protected String getLocalURI() {
0:         return "tcp://localhost:6001";
1:     }
1: 
1:     protected String getRemoteProxyURI() {
0:         return "tcp://localhost:7002";
1:     }
1: 
1:     protected String getLocalProxyURI() {
0:         return "tcp://localhost:6002";
1:     }
1: 
1:     protected StubConnection createConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1:     protected StubConnection createRemoteConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1:     protected StubConnection createProxyConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(proxyConnector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1:     protected StubConnection createRemoteProxyConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(remoteProxyConnector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     protected SystemUsage remoteMemoryManager;
============================================================================