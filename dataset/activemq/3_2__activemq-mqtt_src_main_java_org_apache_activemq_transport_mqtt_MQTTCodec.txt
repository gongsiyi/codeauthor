2:4c38438: /**
1:4c38438:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c38438:  * contributor license agreements.  See the NOTICE file distributed with
1:4c38438:  * this work for additional information regarding copyright ownership.
1:4c38438:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c38438:  * (the "License"); you may not use this file except in compliance with
1:4c38438:  * the License.  You may obtain a copy of the License at
2:4c38438:  *
1:4c38438:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c38438:  *
1:4c38438:  * Unless required by applicable law or agreed to in writing, software
1:4c38438:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c38438:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c38438:  * See the License for the specific language governing permissions and
1:4c38438:  * limitations under the License.
2:4c38438:  */
1:4c38438: package org.apache.activemq.transport.mqtt;
15:4c38438: 
1:4c38438: import java.io.IOException;
1:4c38438: 
1:4c38438: import org.apache.activemq.transport.tcp.TcpTransport;
1:052d293: import org.fusesource.hawtbuf.Buffer;
1:4c38438: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1:7c04ead: import org.fusesource.mqtt.codec.MQTTFrame;
1:4c38438: 
1:4c38438: public class MQTTCodec {
1:4c38438: 
1:7c04ead:     private final MQTTFrameSink frameSink;
1:3454a8b:     private final MQTTWireFormat wireFormat;
1:052d293: 
1:7c04ead:     private byte header;
1:7c04ead:     private int contentLength = -1;
1:7c04ead: 
1:7c04ead:     private FrameParser currentParser;
1:7c04ead: 
1:052d293:     private final Buffer scratch = new Buffer(8 * 1024);
1:052d293:     private Buffer currentBuffer;
1:7c04ead: 
1:052d293:     /**
1:052d293:      * Sink for newly decoded MQTT Frames.
1:052d293:      */
1:052d293:     public interface MQTTFrameSink {
1:052d293:         void onFrame(MQTTFrame mqttFrame);
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     public MQTTCodec(MQTTFrameSink sink) {
1:3454a8b:         this(sink, null);
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     public MQTTCodec(MQTTFrameSink sink, MQTTWireFormat wireFormat) {
1:7c04ead:         this.frameSink = sink;
1:3454a8b:         this.wireFormat = wireFormat;
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     public MQTTCodec(final TcpTransport transport) {
1:3454a8b:         this(transport, null);
1:3454a8b:     }
1:3454a8b: 
1:3454a8b:     public MQTTCodec(final TcpTransport transport, MQTTWireFormat wireFormat) {
1:3454a8b:         this.wireFormat = wireFormat;
1:7c04ead:         this.frameSink = new MQTTFrameSink() {
1:7c04ead: 
3:7c04ead:             @Override
1:7c04ead:             public void onFrame(MQTTFrame mqttFrame) {
1:7c04ead:                 transport.doConsume(mqttFrame);
1:7c04ead:             }
2:7c04ead:         };
1:7c04ead:     }
1:7c04ead: 
1:4c38438:     public void parse(DataByteArrayInputStream input, int readSize) throws Exception {
1:7c04ead:         if (currentParser == null) {
2:7c04ead:             currentParser = initializeHeaderParser();
24:4c38438:         }
1:7c04ead: 
1:7c04ead:         // Parser stack will run until current incoming data has all been consumed.
1:7c04ead:         currentParser.parse(input, readSize);
1:4c38438:     }
1:4c38438: 
1:7c04ead:     private void processCommand() throws IOException {
1:052d293: 
1:052d293:         Buffer frameContents = null;
1:052d293:         if (currentBuffer == scratch) {
1:052d293:             frameContents = scratch.deepCopy();
1:052d293:         } else {
1:052d293:             frameContents = currentBuffer;
1:052d293:             currentBuffer = null;
1:052d293:         }
1:052d293: 
1:052d293:         MQTTFrame frame = new MQTTFrame(frameContents).header(header);
1:7c04ead:         frameSink.onFrame(frame);
1:7c04ead:     }
1:7c04ead: 
1:3454a8b:     private int getMaxFrameSize() {
1:3454a8b:         return wireFormat != null ? wireFormat.getMaxFrameSize() : MQTTWireFormat.MAX_MESSAGE_LENGTH;
1:3454a8b:     }
1:3454a8b: 
1:7c04ead:     //----- Prepare the current frame parser for use -------------------------//
1:7c04ead: 
1:7c04ead:     private FrameParser initializeHeaderParser() throws IOException {
1:7c04ead:         headerParser.reset();
1:7c04ead:         return headerParser;
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     private FrameParser initializeVariableLengthParser() throws IOException {
1:7c04ead:         variableLengthParser.reset();
1:7c04ead:         return variableLengthParser;
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     private FrameParser initializeContentParser() throws IOException {
1:7c04ead:         contentParser.reset();
1:7c04ead:         return contentParser;
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     //----- Frame parser implementations -------------------------------------//
1:7c04ead: 
1:052d293:     private interface FrameParser {
1:052d293: 
1:052d293:         void parse(DataByteArrayInputStream data, int readSize) throws IOException;
1:052d293: 
1:052d293:         void reset() throws IOException;
1:052d293:     }
1:052d293: 
1:7c04ead:     private final FrameParser headerParser = new FrameParser() {
1:7c04ead: 
1:7c04ead:         @Override
2:7c04ead:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:d9d9d5b:             while (readSize-- > 0) {
1:7c04ead:                 byte b = data.readByte();
1:7c04ead:                 // skip repeating nulls
1:7c04ead:                 if (b == 0) {
1:7c04ead:                     continue;
1:7c04ead:                 }
1:7c04ead: 
1:7c04ead:                 header = b;
1:7c04ead: 
1:7c04ead:                 currentParser = initializeVariableLengthParser();
1:d9d9d5b:                 if (readSize > 0) {
1:d9d9d5b:                     currentParser.parse(data, readSize);
1:052d293:                 }
2:7c04ead:                 return;
1:7c04ead:             }
1:7c04ead:         }
1:7c04ead: 
1:7c04ead:         @Override
2:7c04ead:         public void reset() throws IOException {
1:7c04ead:             header = -1;
1:7c04ead:             contentLength = -1;
1:7c04ead:         }
1:7c04ead:     };
1:7c04ead: 
1:7c04ead:     private final FrameParser variableLengthParser = new FrameParser() {
1:7c04ead: 
1:7c04ead:         private byte digit;
1:7c04ead:         private int multiplier = 1;
1:7c04ead:         private int length;
1:7c04ead: 
1:7c04ead:         @Override
1:7c04ead:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
3:7c04ead:             int i = 0;
3:7c04ead:             while (i++ < readSize) {
1:7c04ead:                 digit = data.readByte();
1:7c04ead:                 length += (digit & 0x7F) * multiplier;
1:7c04ead:                 multiplier <<= 7;
1:7c04ead:                 if ((digit & 0x80) == 0) {
1:7c04ead:                     if (length == 0) {
2:7c04ead:                         processCommand();
1:7c04ead:                         currentParser = initializeHeaderParser();
1:7c04ead:                     } else {
1:3454a8b:                         if (length > getMaxFrameSize()) {
1:3454a8b:                             throw new IOException("The maximum message length was exceeded");
1:3454a8b:                         }
1:3454a8b: 
1:7c04ead:                         currentParser = initializeContentParser();
1:7c04ead:                         contentLength = length;
1:7c04ead:                     }
1:052d293: 
1:052d293:                     readSize = readSize - i;
1:052d293:                     if (readSize > 0) {
1:052d293:                         currentParser.parse(data, readSize);
1:052d293:                     }
1:7c04ead:                     return;
1:7c04ead:                 }
1:7c04ead:             }
1:7c04ead:         }
1:7c04ead: 
1:7c04ead:         @Override
1:7c04ead:         public void reset() throws IOException {
1:7c04ead:             digit = 0;
1:7c04ead:             multiplier = 1;
1:7c04ead:             length = 0;
1:7c04ead:         }
1:7c04ead:     };
1:052d293: 
1:052d293:     private final FrameParser contentParser = new FrameParser() {
1:052d293: 
1:052d293:         private int payLoadRead = 0;
1:052d293: 
1:052d293:         @Override
1:052d293:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:052d293:             if (currentBuffer == null) {
1:052d293:                 if (contentLength < scratch.length()) {
1:052d293:                     currentBuffer = scratch;
1:052d293:                     currentBuffer.length = contentLength;
1:052d293:                 } else {
1:052d293:                     currentBuffer = new Buffer(contentLength);
1:052d293:                 }
1:052d293:             }
1:052d293: 
1:052d293:             int length = Math.min(readSize, contentLength - payLoadRead);
1:052d293:             payLoadRead += data.read(currentBuffer.data, payLoadRead, length);
1:052d293: 
1:052d293:             if (payLoadRead == contentLength) {
1:052d293:                 processCommand();
1:052d293:                 currentParser = initializeHeaderParser();
1:d9d9d5b:                 readSize = readSize - length;
1:052d293:                 if (readSize > 0) {
1:052d293:                     currentParser.parse(data, readSize);
1:052d293:                 }
1:052d293:             }
1:052d293:         }
1:052d293: 
1:052d293:         @Override
1:052d293:         public void reset() throws IOException {
1:052d293:             contentLength = -1;
1:052d293:             payLoadRead = 0;
1:052d293:             scratch.reset();
1:052d293:             currentBuffer = null;
1:052d293:         }
1:052d293:     };
1:7c04ead: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1:     private final MQTTWireFormat wireFormat;
/////////////////////////////////////////////////////////////////////////
1:         this(sink, null);
1:     }
1: 
1:     public MQTTCodec(MQTTFrameSink sink, MQTTWireFormat wireFormat) {
1:         this.wireFormat = wireFormat;
1:         this(transport, null);
1:     }
1: 
1:     public MQTTCodec(final TcpTransport transport, MQTTWireFormat wireFormat) {
1:         this.wireFormat = wireFormat;
/////////////////////////////////////////////////////////////////////////
1:     private int getMaxFrameSize() {
1:         return wireFormat != null ? wireFormat.getMaxFrameSize() : MQTTWireFormat.MAX_MESSAGE_LENGTH;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                         if (length > getMaxFrameSize()) {
1:                             throw new IOException("The maximum message length was exceeded");
1:                         }
1: 
commit:d9d9d5b
/////////////////////////////////////////////////////////////////////////
1:             while (readSize-- > 0) {
/////////////////////////////////////////////////////////////////////////
1:                 if (readSize > 0) {
1:                     currentParser.parse(data, readSize);
/////////////////////////////////////////////////////////////////////////
1:                 readSize = readSize - length;
commit:052d293
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.Buffer;
1: 
1:     private final Buffer scratch = new Buffer(8 * 1024);
1:     private Buffer currentBuffer;
1:     /**
1:      * Sink for newly decoded MQTT Frames.
1:      */
1:     public interface MQTTFrameSink {
1:         void onFrame(MQTTFrame mqttFrame);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Buffer frameContents = null;
1:         if (currentBuffer == scratch) {
1:             frameContents = scratch.deepCopy();
1:         } else {
1:             frameContents = currentBuffer;
1:             currentBuffer = null;
1:         }
1: 
1:         MQTTFrame frame = new MQTTFrame(frameContents).header(header);
/////////////////////////////////////////////////////////////////////////
1:     private interface FrameParser {
1: 
1:         void parse(DataByteArrayInputStream data, int readSize) throws IOException;
1: 
1:         void reset() throws IOException;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:                 if (readSize > 1) {
0:                     currentParser.parse(data, readSize - 1);
1:                 }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:                     readSize = readSize - i;
1:                     if (readSize > 0) {
1:                         currentParser.parse(data, readSize);
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final FrameParser contentParser = new FrameParser() {
1: 
1:         private int payLoadRead = 0;
1: 
1:         @Override
1:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:             if (currentBuffer == null) {
1:                 if (contentLength < scratch.length()) {
1:                     currentBuffer = scratch;
1:                     currentBuffer.length = contentLength;
1:                 } else {
1:                     currentBuffer = new Buffer(contentLength);
1:                 }
1:             }
1: 
1:             int length = Math.min(readSize, contentLength - payLoadRead);
1:             payLoadRead += data.read(currentBuffer.data, payLoadRead, length);
1: 
1:             if (payLoadRead == contentLength) {
1:                 processCommand();
1:                 currentParser = initializeHeaderParser();
0:                 readSize = readSize - payLoadRead;
1:                 if (readSize > 0) {
1:                     currentParser.parse(data, readSize);
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset() throws IOException {
1:             contentLength = -1;
1:             payLoadRead = 0;
1:             scratch.reset();
1:             currentBuffer = null;
1:         }
1:     };
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.mqtt.codec.MQTTFrame;
1:     private final MQTTFrameSink frameSink;
0:     private final DataByteArrayOutputStream currentCommand = new DataByteArrayOutputStream();
1:     private byte header;
1:     private int contentLength = -1;
0:     private int payLoadRead = 0;
0:     public interface MQTTFrameSink {
0:         void onFrame(MQTTFrame mqttFrame);
1:     }
1: 
1:     private FrameParser currentParser;
1: 
0:     // Internal parsers implement this and we switch to the next as we go.
0:     private interface FrameParser {
1: 
0:         void parse(DataByteArrayInputStream data, int readSize) throws IOException;
1: 
0:         void reset() throws IOException;
1:     }
1: 
1:     public MQTTCodec(MQTTFrameSink sink) {
1:         this.frameSink = sink;
1:     }
1: 
1:     public MQTTCodec(final TcpTransport transport) {
1:         this.frameSink = new MQTTFrameSink() {
1: 
1:             @Override
1:             public void onFrame(MQTTFrame mqttFrame) {
1:                 transport.doConsume(mqttFrame);
1:             }
1:         };
1:         if (currentParser == null) {
1:             currentParser = initializeHeaderParser();
1: 
1:         // Parser stack will run until current incoming data has all been consumed.
1:         currentParser.parse(input, readSize);
1:     private void processCommand() throws IOException {
1:         frameSink.onFrame(frame);
1:     //----- Prepare the current frame parser for use -------------------------//
1:     private FrameParser initializeHeaderParser() throws IOException {
1:         headerParser.reset();
1:         return headerParser;
1:     }
1: 
1:     private FrameParser initializeVariableLengthParser() throws IOException {
1:         variableLengthParser.reset();
1:         return variableLengthParser;
1:     }
1: 
1:     private FrameParser initializeContentParser() throws IOException {
1:         contentParser.reset();
1:         return contentParser;
1:     }
1: 
1:     //----- Frame parser implementations -------------------------------------//
1: 
1:     private final FrameParser headerParser = new FrameParser() {
1: 
1:         @Override
1:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:             int i = 0;
1:             while (i++ < readSize) {
1:                 byte b = data.readByte();
1:                 // skip repeating nulls
1:                 if (b == 0) {
1:                     continue;
1:                 }
1: 
1:                 header = b;
1: 
1:                 currentParser = initializeVariableLengthParser();
0:                 currentParser.parse(data, readSize - 1);
1:                 return;
1:         @Override
1:         public void reset() throws IOException {
1:             header = -1;
1:         }
1:     };
0:     private final FrameParser contentParser = new FrameParser() {
1: 
1:         @Override
1:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:             int i = 0;
1:             while (i++ < readSize) {
0:                 currentCommand.write(data.readByte());
0:                 payLoadRead++;
1: 
0:                 if (payLoadRead == contentLength) {
1:                     processCommand();
1:                     currentParser = initializeHeaderParser();
0:                     currentParser.parse(data, readSize - i);
1:                     return;
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset() throws IOException {
1:             contentLength = -1;
0:             payLoadRead = 0;
0:             currentCommand.reset();
1:         }
1:     };
1: 
1:     private final FrameParser variableLengthParser = new FrameParser() {
1: 
1:         private byte digit;
1:         private int multiplier = 1;
1:         private int length;
1: 
1:         @Override
1:         public void parse(DataByteArrayInputStream data, int readSize) throws IOException {
1:             int i = 0;
1:             while (i++ < readSize) {
1:                 digit = data.readByte();
1:                 length += (digit & 0x7F) * multiplier;
1:                 multiplier <<= 7;
1:                 if ((digit & 0x80) == 0) {
1:                     if (length == 0) {
1:                         processCommand();
1:                         currentParser = initializeHeaderParser();
1:                     } else {
1:                         currentParser = initializeContentParser();
1:                         contentLength = length;
1:                     }
0:                     currentParser.parse(data, readSize - i);
1:                     return;
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset() throws IOException {
1:             digit = 0;
1:             multiplier = 1;
1:             length = 0;
1:         }
1:     };
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Robert Davies
-------------------------------------------------------------------------------
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.IOException;
1: 
0: import javax.jms.JMSException;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.fusesource.hawtbuf.DataByteArrayInputStream;
0: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
0: import org.fusesource.mqtt.codec.*;
1: 
1: public class MQTTCodec {
1: 
0:     TcpTransport transport;
1: 
0:     DataByteArrayOutputStream currentCommand = new DataByteArrayOutputStream();
0:     boolean processedHeader = false;
0:     String action;
0:     byte header;
0:     int contentLength = -1;
0:     int previousByte = -1;
0:     int payLoadRead = 0;
1: 
0:     public MQTTCodec(TcpTransport transport) {
0:         this.transport = transport;
1:     }
1: 
1:     public void parse(DataByteArrayInputStream input, int readSize) throws Exception {
0:         int i = 0;
0:         byte b;
0:         while (i++ < readSize) {
0:             b = input.readByte();
0:             // skip repeating nulls
0:             if (!processedHeader && b == 0) {
0:                 previousByte = 0;
0:                 continue;
1:             }
1: 
0:             if (!processedHeader) {
0:                 i += processHeader(b, input);
0:                 if (contentLength == 0) {
0:                     processCommand();
1:                 }
1: 
0:             } else {
1: 
0:                 if (contentLength == -1) {
0:                     // end of command reached, unmarshal
0:                     if (b == 0) {
0:                         processCommand();
0:                     } else {
0:                         currentCommand.write(b);
1:                     }
0:                 } else {
0:                     // read desired content length
0:                     if (payLoadRead == contentLength) {
0:                         processCommand();
0:                         i += processHeader(b, input);
0:                     } else {
0:                         currentCommand.write(b);
0:                         payLoadRead++;
1:                     }
1:                 }
1:             }
1: 
0:             previousByte = b;
1:         }
0:         if (processedHeader && payLoadRead == contentLength) {
0:             processCommand();
1:         }
1:     }
1: 
1:     /**
0:      * sets the content length
1:      *
0:      * @return number of bytes read
1:      */
0:     private int processHeader(byte header, DataByteArrayInputStream input) {
0:         this.header = header;
0:         byte digit;
0:         int multiplier = 1;
0:         int read = 0;
0:         int length = 0;
0:         do {
0:             digit = input.readByte();
0:             length += (digit & 0x7F) * multiplier;
0:             multiplier <<= 7;
0:             read++;
0:         } while ((digit & 0x80) != 0);
1: 
0:         contentLength = length;
0:         processedHeader = true;
0:         return read;
1:     }
1: 
1: 
0:     private void processCommand() throws Exception {
0:         MQTTFrame frame = new MQTTFrame(currentCommand.toBuffer().deepCopy()).header(header);
0:         transport.doConsume(frame);
0:         processedHeader = false;
0:         currentCommand.reset();
0:         contentLength = -1;
0:         payLoadRead = 0;
1:     }
1: 
0:     public static String commandType(byte header) throws IOException, JMSException {
1: 
0:         byte messageType = (byte) ((header & 0xF0) >>> 4);
0:         switch (messageType) {
0:             case PINGREQ.TYPE: {
0:                 return "PINGREQ";
1:             }
0:             case CONNECT.TYPE: {
0:                 return "CONNECT";
1:             }
0:             case DISCONNECT.TYPE: {
0:                 return "DISCONNECT";
1:             }
0:             case SUBSCRIBE.TYPE: {
0:                 return "SUBSCRIBE";
1:             }
0:             case UNSUBSCRIBE.TYPE: {
0:                 return "UNSUBSCRIBE";
1:             }
0:             case PUBLISH.TYPE: {
0:                 return "PUBLISH";
1:             }
0:             case PUBACK.TYPE: {
0:                 return "PUBACK";
1:             }
0:             case PUBREC.TYPE: {
0:                 return "PUBREC";
1:             }
0:             case PUBREL.TYPE: {
0:                 return "PUBREL";
1:             }
0:             case PUBCOMP.TYPE: {
0:                 return "PUBCOMP";
1:             }
0:             default:
0:                 return "UNKNOWN";
1:         }
1: 
1:     }
1: 
1: }
============================================================================