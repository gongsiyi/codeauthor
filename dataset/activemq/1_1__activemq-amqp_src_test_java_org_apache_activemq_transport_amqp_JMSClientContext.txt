1:36bd069: /**
1:36bd069:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:36bd069:  * contributor license agreements.  See the NOTICE file distributed with
1:36bd069:  * this work for additional information regarding copyright ownership.
1:36bd069:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:36bd069:  * (the "License"); you may not use this file except in compliance with
1:36bd069:  * the License.  You may obtain a copy of the License at
1:36bd069:  *
1:36bd069:  *      http://www.apache.org/licenses/LICENSE-2.0
1:36bd069:  *
1:36bd069:  * Unless required by applicable law or agreed to in writing, software
1:36bd069:  * distributed under the License is distributed on an "AS IS" BASIS,
1:36bd069:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:36bd069:  * See the License for the specific language governing permissions and
1:36bd069:  * limitations under the License.
1:36bd069:  */
1:36bd069: package org.apache.activemq.transport.amqp;
2:36bd069: 
1:36bd069: import java.net.URI;
1:36bd069: 
1:36bd069: import javax.jms.Connection;
1:adef03e: import javax.jms.ConnectionFactory;
1:240278d: import javax.jms.ExceptionListener;
1:36bd069: import javax.jms.JMSException;
1:36bd069: import javax.jms.QueueConnection;
1:adef03e: import javax.jms.QueueConnectionFactory;
1:36bd069: import javax.jms.TopicConnection;
1:adef03e: import javax.jms.TopicConnectionFactory;
1:36bd069: 
1:3051882: import org.apache.qpid.jms.JmsConnectionFactory;
1:36bd069: import org.slf4j.Logger;
1:36bd069: import org.slf4j.LoggerFactory;
1:36bd069: 
1:36bd069: /**
1:36bd069:  * Context used for AMQP JMS Clients to create connection instances.
1:36bd069:  */
1:240278d: public class JMSClientContext {
1:36bd069: 
1:240278d:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientContext.class);
1:36bd069: 
1:240278d:     public static final JMSClientContext INSTANCE = new JMSClientContext();
1:36bd069: 
1:36bd069:     //----- Plain JMS Connection Create methods ------------------------------//
1:36bd069: 
1:36bd069:     public Connection createConnection(URI remoteURI) throws JMSException {
1:36bd069:         return createConnection(remoteURI, null, null, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public Connection createConnection(URI remoteURI, String username, String password) throws JMSException {
1:36bd069:         return createConnection(remoteURI, username, password, null, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public Connection createConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:36bd069:         return createConnection(remoteURI, username, password, null, syncPublish);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public Connection createConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:36bd069:         return createConnection(remoteURI, username, password, clientId, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public Connection createConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
1:adef03e:         ConnectionFactory factory = createConnectionFactory(remoteURI, username, password, syncPublish);
1:36bd069: 
1:240278d:         Connection connection = factory.createConnection();
1:240278d:         connection.setExceptionListener(new ExceptionListener() {
1:240278d:             @Override
1:240278d:             public void onException(JMSException exception) {
1:240278d:                 LOG.error("Unexpected exception ", exception);
1:240278d:                 exception.printStackTrace();
1:240278d:             }
1:240278d:         });
1:240278d: 
1:adef03e:         if (clientId != null && !clientId.isEmpty()) {
1:adef03e:             connection.setClientID(clientId);
1:adef03e:         }
1:adef03e: 
1:240278d:         return connection;
1:adef03e:     }
1:adef03e: 
1:36bd069:     //----- JMS TopicConnection Create methods -------------------------------//
1:adef03e: 
1:36bd069:     public TopicConnection createTopicConnection(URI remoteURI) throws JMSException {
1:36bd069:         return createTopicConnection(remoteURI, null, null, true);
1:adef03e:     }
1:36bd069: 
1:36bd069:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password) throws JMSException {
1:36bd069:         return createTopicConnection(remoteURI, username, password, null, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:36bd069:         return createTopicConnection(remoteURI, username, password, null, syncPublish);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:36bd069:         return createTopicConnection(remoteURI, username, password, clientId, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
1:adef03e:         TopicConnectionFactory factory = createTopicConnectionFactory(remoteURI, username, password, syncPublish);
1:36bd069: 
1:240278d:         TopicConnection connection = factory.createTopicConnection();
1:240278d:         connection.setExceptionListener(new ExceptionListener() {
1:240278d:             @Override
1:240278d:             public void onException(JMSException exception) {
1:240278d:                 LOG.error("Unexpected exception ", exception);
1:240278d:                 exception.printStackTrace();
1:240278d:             }
1:240278d:         });
1:240278d: 
1:adef03e:         if (clientId != null && !clientId.isEmpty()) {
1:adef03e:             connection.setClientID(clientId);
1:36bd069:         }
1:36bd069: 
1:240278d:         return connection;
1:36bd069:     }
1:36bd069: 
1:36bd069:     //----- JMS QueueConnection Create methods -------------------------------//
1:36bd069: 
1:36bd069:     public QueueConnection createQueueConnection(URI remoteURI) throws JMSException {
1:36bd069:         return createQueueConnection(remoteURI, null, null, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password) throws JMSException {
1:36bd069:         return createQueueConnection(remoteURI, username, password, null, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:36bd069:         return createQueueConnection(remoteURI, username, password, null, syncPublish);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:36bd069:         return createQueueConnection(remoteURI, username, password, clientId, true);
1:36bd069:     }
1:36bd069: 
1:36bd069:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
1:adef03e:         QueueConnectionFactory factory = createQueueConnectionFactory(remoteURI, username, password, syncPublish);
1:36bd069: 
1:240278d:         QueueConnection connection = factory.createQueueConnection();
1:240278d:         connection.setExceptionListener(new ExceptionListener() {
1:240278d:             @Override
1:240278d:             public void onException(JMSException exception) {
1:240278d:                 LOG.error("Unexpected exception ", exception);
1:240278d:                 exception.printStackTrace();
1:240278d:             }
1:240278d:         });
1:240278d: 
1:adef03e:         if (clientId != null && !clientId.isEmpty()) {
1:adef03e:             connection.setClientID(clientId);
1:36bd069:         }
1:36bd069: 
1:240278d:         return connection;
1:36bd069:     }
1:36bd069: 
1:36bd069:     //------ Internal Implementation bits ------------------------------------//
1:36bd069: 
1:adef03e:     private QueueConnectionFactory createQueueConnectionFactory(
1:adef03e:         URI remoteURI, String username, String password, boolean syncPublish) {
1:adef03e: 
1:adef03e:         return (QueueConnectionFactory) createConnectionFactory(remoteURI, username, password, syncPublish);
1:adef03e:     }
1:adef03e: 
1:adef03e:     private TopicConnectionFactory createTopicConnectionFactory(
1:adef03e:         URI remoteURI, String username, String password, boolean syncPublish) {
1:adef03e: 
1:adef03e:         return (TopicConnectionFactory) createConnectionFactory(remoteURI, username, password, syncPublish);
1:adef03e:     }
1:adef03e: 
1:adef03e:     private ConnectionFactory createConnectionFactory(
1:adef03e:         URI remoteURI, String username, String password, boolean syncPublish) {
1:36bd069: 
1:2e2d5dd:         String clientScheme;
1:2e2d5dd:         boolean useSSL = false;
1:36bd069: 
1:2e2d5dd:         switch (remoteURI.getScheme()) {
1:2e2d5dd:             case "tcp" :
1:2e2d5dd:             case "amqp":
1:2e2d5dd:             case "auto":
1:2e2d5dd:             case "amqp+nio":
1:2e2d5dd:             case "auto+nio":
1:2e2d5dd:                 clientScheme = "amqp://";
1:2e2d5dd:                 break;
1:2e2d5dd:             case "ssl":
1:2e2d5dd:             case "amqp+ssl":
1:2e2d5dd:             case "auto+ssl":
1:2e2d5dd:             case "amqp+nio+ssl":
1:2e2d5dd:             case "auto+nio+ssl":
1:2e2d5dd:                 clientScheme = "amqps://";
1:2e2d5dd:                 useSSL = true;
1:2e2d5dd:                 break;
1:2e2d5dd:             case "ws":
1:2e2d5dd:             case "amqp+ws":
1:2e2d5dd:                 clientScheme = "amqpws://";
1:2e2d5dd:                 break;
1:2e2d5dd:             case "wss":
1:2e2d5dd:             case "amqp+wss":
1:2e2d5dd:                 clientScheme = "amqpwss://";
1:2e2d5dd:                 useSSL = true;
1:2e2d5dd:                 break;
1:2e2d5dd:             default:
1:2e2d5dd:                 clientScheme = "amqp://";
1:2e2d5dd:         }
1:2e2d5dd: 
1:2e2d5dd:         String amqpURI = clientScheme + remoteURI.getHost() + ":" + remoteURI.getPort();
1:36bd069: 
1:36bd069:         if (useSSL) {
1:3051882:             amqpURI += "?transport.verifyHost=false";
1:36bd069:         }
1:36bd069: 
1:3051882:         LOG.debug("In createConnectionFactory using URI: {}", amqpURI);
1:3051882: 
1:3051882:         JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1:3051882: 
1:3051882:         factory.setUsername(username);
1:3051882:         factory.setPassword(password);
1:6ae169e:         factory.setForceSyncSend(syncPublish);
1:36bd069:         factory.setTopicPrefix("topic://");
1:36bd069:         factory.setQueuePrefix("queue://");
1:ce551cf:         factory.setCloseTimeout(60000);
1:36bd069: 
1:36bd069:         return factory;
1:36bd069:     }
1:36bd069: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ce551cf
/////////////////////////////////////////////////////////////////////////
1:         factory.setCloseTimeout(60000);
commit:2e2d5dd
/////////////////////////////////////////////////////////////////////////
1:         String clientScheme;
1:         boolean useSSL = false;
1:         switch (remoteURI.getScheme()) {
1:             case "tcp" :
1:             case "amqp":
1:             case "auto":
1:             case "amqp+nio":
1:             case "auto+nio":
1:                 clientScheme = "amqp://";
1:                 break;
1:             case "ssl":
1:             case "amqp+ssl":
1:             case "auto+ssl":
1:             case "amqp+nio+ssl":
1:             case "auto+nio+ssl":
1:                 clientScheme = "amqps://";
1:                 useSSL = true;
1:                 break;
1:             case "ws":
1:             case "amqp+ws":
1:                 clientScheme = "amqpws://";
1:                 break;
1:             case "wss":
1:             case "amqp+wss":
1:                 clientScheme = "amqpwss://";
1:                 useSSL = true;
1:                 break;
1:             default:
1:                 clientScheme = "amqp://";
1:         }
1: 
1:         String amqpURI = clientScheme + remoteURI.getHost() + ":" + remoteURI.getPort();
commit:6ae169e
/////////////////////////////////////////////////////////////////////////
1:         factory.setForceSyncSend(syncPublish);
commit:3051882
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.jms.JmsConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:         String amqpURI = (useSSL ? "amqps://" : "amqp://") + remoteURI.getHost() + ":" + remoteURI.getPort();
1:             amqpURI += "?transport.verifyHost=false";
1:         LOG.debug("In createConnectionFactory using URI: {}", amqpURI);
1: 
1:         JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1: 
1:         factory.setUsername(username);
1:         factory.setPassword(password);
0:         factory.setAlwaysSyncSend(syncPublish);
commit:adef03e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.TopicConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         ConnectionFactory factory = createConnectionFactory(remoteURI, username, password, syncPublish);
/////////////////////////////////////////////////////////////////////////
1:         if (clientId != null && !clientId.isEmpty()) {
1:             connection.setClientID(clientId);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         TopicConnectionFactory factory = createTopicConnectionFactory(remoteURI, username, password, syncPublish);
/////////////////////////////////////////////////////////////////////////
1:         if (clientId != null && !clientId.isEmpty()) {
1:             connection.setClientID(clientId);
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         QueueConnectionFactory factory = createQueueConnectionFactory(remoteURI, username, password, syncPublish);
/////////////////////////////////////////////////////////////////////////
1:         if (clientId != null && !clientId.isEmpty()) {
1:             connection.setClientID(clientId);
1:         }
1: 
1:     private QueueConnectionFactory createQueueConnectionFactory(
1:         URI remoteURI, String username, String password, boolean syncPublish) {
1: 
1:         return (QueueConnectionFactory) createConnectionFactory(remoteURI, username, password, syncPublish);
1:     }
1: 
1:     private TopicConnectionFactory createTopicConnectionFactory(
1:         URI remoteURI, String username, String password, boolean syncPublish) {
1: 
1:         return (TopicConnectionFactory) createConnectionFactory(remoteURI, username, password, syncPublish);
1:     }
1: 
1:     private ConnectionFactory createConnectionFactory(
1:         URI remoteURI, String username, String password, boolean syncPublish) {
0:             new ConnectionFactoryImpl(remoteURI.getHost(), remoteURI.getPort(), username, password, null, useSSL);
commit:240278d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ExceptionListener;
/////////////////////////////////////////////////////////////////////////
1: public class JMSClientContext {
1:     private static final Logger LOG = LoggerFactory.getLogger(JMSClientContext.class);
1:     public static final JMSClientContext INSTANCE = new JMSClientContext();
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = factory.createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.error("Unexpected exception ", exception);
1:                 exception.printStackTrace();
1:             }
1:         });
1: 
1:         return connection;
/////////////////////////////////////////////////////////////////////////
1:         TopicConnection connection = factory.createTopicConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.error("Unexpected exception ", exception);
1:                 exception.printStackTrace();
1:             }
1:         });
1: 
1:         return connection;
/////////////////////////////////////////////////////////////////////////
1:         QueueConnection connection = factory.createQueueConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 LOG.error("Unexpected exception ", exception);
1:                 exception.printStackTrace();
1:             }
1:         });
1: 
1:         return connection;
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.QueueConnection;
1: import javax.jms.TopicConnection;
1: 
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Context used for AMQP JMS Clients to create connection instances.
1:  */
0: public class JmsClientContext {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(JmsClientContext.class);
1: 
0:     public static final JmsClientContext INSTANCE = new JmsClientContext();
1: 
1:     //----- Plain JMS Connection Create methods ------------------------------//
1: 
1:     public Connection createConnection(URI remoteURI) throws JMSException {
1:         return createConnection(remoteURI, null, null, true);
1:     }
1: 
1:     public Connection createConnection(URI remoteURI, String username, String password) throws JMSException {
1:         return createConnection(remoteURI, username, password, null, true);
1:     }
1: 
1:     public Connection createConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:         return createConnection(remoteURI, username, password, null, syncPublish);
1:     }
1: 
1:     public Connection createConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:         return createConnection(remoteURI, username, password, clientId, true);
1:     }
1: 
1:     public Connection createConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
0:         ConnectionFactoryImpl factory = createConnectionFactory(remoteURI, username, password, clientId, syncPublish);
1: 
0:         return factory.createConnection();
1:     }
1: 
1:     //----- JMS TopicConnection Create methods -------------------------------//
1: 
1:     public TopicConnection createTopicConnection(URI remoteURI) throws JMSException {
1:         return createTopicConnection(remoteURI, null, null, true);
1:     }
1: 
1:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password) throws JMSException {
1:         return createTopicConnection(remoteURI, username, password, null, true);
1:     }
1: 
1:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:         return createTopicConnection(remoteURI, username, password, null, syncPublish);
1:     }
1: 
1:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:         return createTopicConnection(remoteURI, username, password, clientId, true);
1:     }
1: 
1:     public TopicConnection createTopicConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
0:         ConnectionFactoryImpl factory = createConnectionFactory(remoteURI, username, password, clientId, syncPublish);
1: 
0:         return factory.createTopicConnection();
1:     }
1: 
1:     //----- JMS QueueConnection Create methods -------------------------------//
1: 
1:     public QueueConnection createQueueConnection(URI remoteURI) throws JMSException {
1:         return createQueueConnection(remoteURI, null, null, true);
1:     }
1: 
1:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password) throws JMSException {
1:         return createQueueConnection(remoteURI, username, password, null, true);
1:     }
1: 
1:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, boolean syncPublish) throws JMSException {
1:         return createQueueConnection(remoteURI, username, password, null, syncPublish);
1:     }
1: 
1:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, String clientId) throws JMSException {
1:         return createQueueConnection(remoteURI, username, password, clientId, true);
1:     }
1: 
1:     public QueueConnection createQueueConnection(URI remoteURI, String username, String password, String clientId, boolean syncPublish) throws JMSException {
0:         ConnectionFactoryImpl factory = createConnectionFactory(remoteURI, username, password, clientId, syncPublish);
1: 
0:         return factory.createQueueConnection();
1:     }
1: 
1:     //------ Internal Implementation bits ------------------------------------//
1: 
0:     private ConnectionFactoryImpl createConnectionFactory(
0:         URI remoteURI, String username, String password, String clientId, boolean syncPublish) {
1: 
0:         boolean useSSL = remoteURI.getScheme().toLowerCase().contains("ssl");
1: 
0:         LOG.debug("In createConnectionFactory using port {} ssl? {}", remoteURI.getPort(), useSSL);
1: 
0:         ConnectionFactoryImpl factory =
0:             new ConnectionFactoryImpl(remoteURI.getHost(), remoteURI.getPort(), username, password, clientId, useSSL);
1: 
1:         if (useSSL) {
0:             factory.setKeyStorePath(System.getProperty("javax.net.ssl.trustStore"));
0:             factory.setKeyStorePassword("password");
0:             factory.setTrustStorePath(System.getProperty("javax.net.ssl.keyStore"));
0:             factory.setTrustStorePassword("password");
1:         }
1: 
1:         factory.setTopicPrefix("topic://");
1:         factory.setQueuePrefix("queue://");
0:         factory.setSyncPublish(syncPublish);
1: 
1:         return factory;
1:     }
1: }
============================================================================