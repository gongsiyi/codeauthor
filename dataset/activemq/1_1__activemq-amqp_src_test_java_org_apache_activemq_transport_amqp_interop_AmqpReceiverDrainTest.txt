1:8448cf1: /*
1:8448cf1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8448cf1:  * contributor license agreements.  See the NOTICE file distributed with
1:8448cf1:  * this work for additional information regarding copyright ownership.
1:8448cf1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8448cf1:  * (the "License"); you may not use this file except in compliance with
1:8448cf1:  * the License.  You may obtain a copy of the License at
1:8448cf1:  *
1:8448cf1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8448cf1:  *
1:8448cf1:  * Unless required by applicable law or agreed to in writing, software
1:8448cf1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8448cf1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8448cf1:  * See the License for the specific language governing permissions and
1:8448cf1:  * limitations under the License.
1:8448cf1:  */
1:8448cf1: package org.apache.activemq.transport.amqp.interop;
1:8448cf1: 
1:8448cf1: import static org.junit.Assert.assertEquals;
1:8448cf1: import static org.junit.Assert.assertNotNull;
1:8448cf1: import static org.junit.Assert.assertNull;
1:8448cf1: 
1:8448cf1: import java.util.concurrent.TimeUnit;
1:8448cf1: 
1:e050519: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:8448cf1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:e050519: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:8448cf1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:8448cf1: import org.junit.Test;
1:8448cf1: 
1:8448cf1: /**
1:8448cf1:  * Tests various behaviors of broker side drain support.
1:8448cf1:  */
1:8448cf1: public class AmqpReceiverDrainTest extends AmqpClientTestSupport {
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:e050519:     public void testReceiverCanDrainMessagesQueue() throws Exception {
1:e050519:         doTestReceiverCanDrainMessages(false);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testReceiverCanDrainMessagesTopic() throws Exception {
1:e050519:         doTestReceiverCanDrainMessages(true);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestReceiverCanDrainMessages(boolean topic) throws Exception {
1:e050519:         final String destinationName;
1:e050519:         if (topic) {
1:e050519:             destinationName = "topic://" + getTestName();
1:e050519:         } else {
1:e050519:             destinationName = "queue://" + getTestName();
1:e050519:         }
1:e050519: 
2:8448cf1:         int MSG_COUNT = 20;
1:8448cf1: 
1:8448cf1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8448cf1:         AmqpSession session = connection.createSession();
1:8448cf1: 
1:e050519:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:8448cf1: 
1:e050519:         sendMessages(getTestName(), MSG_COUNT, topic);
1:e050519: 
1:e050519:         final DestinationViewMBean destinationView;
1:e050519:         if (topic) {
1:e050519:             destinationView = getProxyToTopic(getTestName());
1:e050519:         } else {
1:e050519:             destinationView = getProxyToQueue(getTestName());
1:e050519:         }
1:e050519: 
1:e050519:         assertEquals(MSG_COUNT, destinationView.getEnqueueCount());
1:e050519:         assertEquals(0, destinationView.getDispatchCount());
1:8448cf1: 
1:8448cf1:         receiver.drain(MSG_COUNT);
1:8448cf1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:8448cf1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:e050519:             assertNotNull("Failed to read message: " + (i + 1), message);
1:e050519:             LOG.info("Read message: {}", message.getMessageId());
1:8448cf1:             message.accept();
1:e050519:         }
1:8448cf1:         receiver.close();
1:8448cf1: 
1:e050519:         assertEquals(MSG_COUNT, destinationView.getDequeueCount());
1:8448cf1: 
1:8448cf1:         connection.close();
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:e050519:     public void testPullWithNoMessageGetDrainedQueue() throws Exception {
1:e050519:         doTestPullWithNoMessageGetDrained(false);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testPullWithNoMessageGetDrainedTopic() throws Exception {
1:e050519:         doTestPullWithNoMessageGetDrained(true);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestPullWithNoMessageGetDrained(boolean topic) throws Exception {
1:e050519: 
1:e050519:         final String destinationName;
1:e050519:         if (topic) {
1:e050519:             destinationName = "topic://" + getTestName();
1:e050519:         } else {
1:e050519:             destinationName = "queue://" + getTestName();
1:e050519:         }
1:8448cf1: 
1:8448cf1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8448cf1:         AmqpSession session = connection.createSession();
1:8448cf1: 
1:e050519:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:8448cf1: 
1:8448cf1:         receiver.flow(10);
1:e050519: 
1:e050519:         final DestinationViewMBean destinationView;
1:e050519:         if (topic) {
1:e050519:             destinationView = getProxyToTopic(getTestName());
1:e050519:         } else {
1:e050519:             destinationView = getProxyToQueue(getTestName());
1:e050519:         }
1:8448cf1: 
1:e050519:         assertEquals(0, destinationView.getEnqueueCount());
1:e050519:         assertEquals(0, destinationView.getDispatchCount());
1:8448cf1: 
1:8448cf1:         assertEquals(10, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1:8448cf1: 
1:8448cf1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         connection.close();
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:e050519:     public void testPullOneFromRemoteQueue() throws Exception {
1:e050519:         doTestPullOneFromRemote(false);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testPullOneFromRemoteTopic() throws Exception {
1:e050519:         doTestPullOneFromRemote(true);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestPullOneFromRemote(boolean topic) throws Exception {
1:e050519: 
1:8448cf1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8448cf1:         AmqpSession session = connection.createSession();
1:e050519: 
1:e050519:         final String destinationName;
1:e050519:         if (topic) {
1:e050519:             destinationName = "topic://" + getTestName();
1:e050519:         } else {
1:e050519:             destinationName = "queue://" + getTestName();
1:e050519:         }
1:e050519: 
1:e050519:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:8448cf1: 
1:e050519:         int MSG_COUNT = 20;
1:e050519:         sendMessages(getTestName(), MSG_COUNT, topic);
1:8448cf1: 
1:e050519:         final DestinationViewMBean destinationView;
1:e050519:         if (topic) {
1:e050519:             destinationView = getProxyToTopic(getTestName());
1:e050519:         } else {
1:e050519:             destinationView = getProxyToQueue(getTestName());
1:8448cf1:         }
1:8448cf1: 
1:e050519:         assertEquals(MSG_COUNT, destinationView.getEnqueueCount());
1:e050519:         assertEquals(0, destinationView.getDispatchCount());
1:8448cf1: 
1:8448cf1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         AmqpMessage message = receiver.pull(5, TimeUnit.SECONDS);
2:8448cf1:         assertNotNull(message);
1:8448cf1:         message.accept();
1:8448cf1: 
1:8448cf1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         receiver.close();
1:8448cf1: 
1:e050519:         assertEquals(MSG_COUNT - 1, destinationView.getEnqueueCount() - destinationView.getDequeueCount());
1:e050519:         assertEquals(1, destinationView.getDispatchCount());
1:8448cf1: 
1:8448cf1:         connection.close();
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Test(timeout = 60000)
1:e050519:     public void testMultipleZeroResultPullsQueue() throws Exception {
1:e050519:         doTestMultipleZeroResultPulls(false);
1:e050519:     }
1:e050519: 
1:e050519:     @Test(timeout = 60000)
1:e050519:     public void testMultipleZeroResultPullsTopic() throws Exception {
1:e050519:         doTestMultipleZeroResultPulls(true);
1:e050519:     }
1:e050519: 
1:e050519:     private void doTestMultipleZeroResultPulls(boolean topic) throws Exception {
1:e050519: 
1:8448cf1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:8448cf1:         AmqpSession session = connection.createSession();
1:e050519: 
1:e050519:         final String destinationName;
1:e050519:         if (topic) {
1:e050519:             destinationName = "topic://" + getTestName();
1:e050519:         } else {
1:e050519:             destinationName = "queue://" + getTestName();
1:e050519:         }
1:8448cf1: 
1:e050519:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:8448cf1: 
1:8448cf1:         receiver.flow(10);
1:8448cf1: 
1:e050519:         if (topic) {
1:e050519:             TopicViewMBean topicView = getProxyToTopic(getTestName());
1:e050519:             assertEquals(0, topicView.getEnqueueCount());
1:e050519:             assertEquals(0, topicView.getDispatchCount());
1:e050519:         } else {
1:e050519:             QueueViewMBean queueView = getProxyToQueue(getTestName());
1:e050519:             assertEquals(0, queueView.getQueueSize());
1:e050519:             assertEquals(0, queueView.getDispatchCount());
1:e050519:         }
1:8448cf1: 
1:8448cf1:         assertEquals(10, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1:8448cf1: 
1:8448cf1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1:8448cf1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1:8448cf1: 
1:8448cf1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1:8448cf1: 
1:8448cf1:         connection.close();
1:8448cf1:     }
1:8448cf1: 
1:8448cf1:     @Override
1:8448cf1:     protected boolean isUseOpenWireConnector() {
1:8448cf1:         return true;
1:8448cf1:     }
1:8448cf1: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e050519
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiverCanDrainMessagesQueue() throws Exception {
1:         doTestReceiverCanDrainMessages(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiverCanDrainMessagesTopic() throws Exception {
1:         doTestReceiverCanDrainMessages(true);
1:     }
1: 
1:     private void doTestReceiverCanDrainMessages(boolean topic) throws Exception {
1:         final String destinationName;
1:         if (topic) {
1:             destinationName = "topic://" + getTestName();
1:         } else {
1:             destinationName = "queue://" + getTestName();
1:         }
1: 
1:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:         sendMessages(getTestName(), MSG_COUNT, topic);
1: 
1:         final DestinationViewMBean destinationView;
1:         if (topic) {
1:             destinationView = getProxyToTopic(getTestName());
1:         } else {
1:             destinationView = getProxyToQueue(getTestName());
1:         }
1: 
1:         assertEquals(MSG_COUNT, destinationView.getEnqueueCount());
1:         assertEquals(0, destinationView.getDispatchCount());
1:             assertNotNull("Failed to read message: " + (i + 1), message);
1:             LOG.info("Read message: {}", message.getMessageId());
1:         assertEquals(MSG_COUNT, destinationView.getDequeueCount());
1:     public void testPullWithNoMessageGetDrainedQueue() throws Exception {
1:         doTestPullWithNoMessageGetDrained(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPullWithNoMessageGetDrainedTopic() throws Exception {
1:         doTestPullWithNoMessageGetDrained(true);
1:     }
1: 
1:     private void doTestPullWithNoMessageGetDrained(boolean topic) throws Exception {
1: 
1:         final String destinationName;
1:         if (topic) {
1:             destinationName = "topic://" + getTestName();
1:         } else {
1:             destinationName = "queue://" + getTestName();
1:         }
1:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:         final DestinationViewMBean destinationView;
1:         if (topic) {
1:             destinationView = getProxyToTopic(getTestName());
1:         } else {
1:             destinationView = getProxyToQueue(getTestName());
1:         }
1: 
1:         assertEquals(0, destinationView.getEnqueueCount());
1:         assertEquals(0, destinationView.getDispatchCount());
/////////////////////////////////////////////////////////////////////////
1:     public void testPullOneFromRemoteQueue() throws Exception {
1:         doTestPullOneFromRemote(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPullOneFromRemoteTopic() throws Exception {
1:         doTestPullOneFromRemote(true);
1:     }
1: 
1:     private void doTestPullOneFromRemote(boolean topic) throws Exception {
1:         final String destinationName;
1:         if (topic) {
1:             destinationName = "topic://" + getTestName();
1:         } else {
1:             destinationName = "queue://" + getTestName();
1:         }
1:         AmqpReceiver receiver = session.createReceiver(destinationName);
1: 
1:         int MSG_COUNT = 20;
1:         sendMessages(getTestName(), MSG_COUNT, topic);
1: 
1:         final DestinationViewMBean destinationView;
1:         if (topic) {
1:             destinationView = getProxyToTopic(getTestName());
1:         } else {
1:             destinationView = getProxyToQueue(getTestName());
1:         }
1: 
1:         assertEquals(MSG_COUNT, destinationView.getEnqueueCount());
1:         assertEquals(0, destinationView.getDispatchCount());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(MSG_COUNT - 1, destinationView.getEnqueueCount() - destinationView.getDequeueCount());
1:         assertEquals(1, destinationView.getDispatchCount());
1:     public void testMultipleZeroResultPullsQueue() throws Exception {
1:         doTestMultipleZeroResultPulls(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMultipleZeroResultPullsTopic() throws Exception {
1:         doTestMultipleZeroResultPulls(true);
1:     }
1: 
1:     private void doTestMultipleZeroResultPulls(boolean topic) throws Exception {
1: 
1:         final String destinationName;
1:         if (topic) {
1:             destinationName = "topic://" + getTestName();
1:         } else {
1:             destinationName = "queue://" + getTestName();
1:         }
1: 
1:         AmqpReceiver receiver = session.createReceiver(destinationName);
1:         if (topic) {
1:             TopicViewMBean topicView = getProxyToTopic(getTestName());
1:             assertEquals(0, topicView.getEnqueueCount());
1:             assertEquals(0, topicView.getDispatchCount());
1:         } else {
1:             QueueViewMBean queueView = getProxyToQueue(getTestName());
1:             assertEquals(0, queueView.getQueueSize());
1:             assertEquals(0, queueView.getDispatchCount());
1:         }
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:8448cf1
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests various behaviors of broker side drain support.
1:  */
1: public class AmqpReceiverDrainTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 60000)
0:     public void testReceiverCanDrainMessages() throws Exception {
1:         int MSG_COUNT = 20;
0:         sendMessages(getTestName(), MSG_COUNT, false);
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getTestName());
0:         assertEquals(MSG_COUNT, queueView.getQueueSize());
0:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         receiver.drain(MSG_COUNT);
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             message.accept();
1:         }
1:         receiver.close();
1: 
0:         assertEquals(0, queueView.getQueueSize());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
0:     public void testPullWithNoMessageGetDrained() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         receiver.flow(10);
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getTestName());
0:         assertEquals(0, queueView.getQueueSize());
0:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         assertEquals(10, receiver.getReceiver().getRemoteCredit());
1: 
1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1: 
1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
0:     public void testPullOneFromRemote() throws Exception {
1:         int MSG_COUNT = 20;
0:         sendMessages(getTestName(), MSG_COUNT, false);
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getTestName());
0:         assertEquals(MSG_COUNT, queueView.getQueueSize());
0:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1: 
1:         AmqpMessage message = receiver.pull(5, TimeUnit.SECONDS);
1:         assertNotNull(message);
1:         message.accept();
1: 
1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1: 
1:         receiver.close();
1: 
0:         assertEquals(MSG_COUNT - 1, queueView.getQueueSize());
0:         assertEquals(1, queueView.getDispatchCount());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
0:     public void testMultipleZeroResultPulls() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
0:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         receiver.flow(10);
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getTestName());
0:         assertEquals(0, queueView.getQueueSize());
0:         assertEquals(0, queueView.getDispatchCount());
1: 
1:         assertEquals(10, receiver.getReceiver().getRemoteCredit());
1: 
1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1: 
1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1: 
1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1:         assertNull(receiver.pull(1, TimeUnit.SECONDS));
1: 
1:         assertEquals(0, receiver.getReceiver().getRemoteCredit());
1: 
1:         connection.close();
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: }
============================================================================