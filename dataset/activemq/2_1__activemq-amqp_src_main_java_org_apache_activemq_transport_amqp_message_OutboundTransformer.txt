1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
14:6e69319: 
1:63d62a7: import org.apache.activemq.command.ActiveMQMessage;
1:d54e21b: 
1:63d62a7: public interface OutboundTransformer {
1:6e69319: 
1:63d62a7:     public abstract EncodedMessage transform(ActiveMQMessage message) throws Exception;
1:6e69319: 
8:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
1: public interface OutboundTransformer {
1:     public abstract EncodedMessage transform(ActiveMQMessage message) throws Exception;
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:     protected final ActiveMQJMSVendor vendor;
0:     protected String prefixVendor;
0:     protected String prefixDeliveryAnnotations = "DA_";
0:     protected String prefixMessageAnnotations= "MA_";
0:     protected String prefixFooter = "FT_";
0:     protected String messageFormatKey;
0:     protected String nativeKey;
0:     protected String firstAcquirerKey;
0:     protected String prefixDeliveryAnnotationsKey;
0:     protected String prefixMessageAnnotationsKey;
0:     protected String contentTypeKey;
0:     protected String contentEncodingKey;
0:     protected String replyToGroupIDKey;
0:     protected String prefixFooterKey;
1: 
0:     public OutboundTransformer(ActiveMQJMSVendor vendor) {
/////////////////////////////////////////////////////////////////////////
0:         contentTypeKey = prefixVendor + "ContentType";
0:         contentEncodingKey = prefixVendor + "ContentEncoding";
0:         replyToGroupIDKey = prefixVendor + "ReplyToGroupID";
0:     public ActiveMQJMSVendor getVendor() {
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import javax.jms.Message;
1: 
0: public abstract class OutboundTransformer {
1: 
0:     JMSVendor vendor;
0:     String prefixVendor;
1: 
0:     String prefixDeliveryAnnotations = "DA_";
0:     String prefixMessageAnnotations= "MA_";
0:     String prefixFooter = "FT_";
1: 
0:     String messageFormatKey;
0:     String nativeKey;
0:     String firstAcquirerKey;
0:     String prefixDeliveryAnnotationsKey;
0:     String prefixMessageAnnotationsKey;
0:     String subjectKey;
0:     String contentTypeKey;
0:     String contentEncodingKey;
0:     String replyToGroupIDKey;
0:     String prefixFooterKey;
1: 
0:     private boolean useByteDestinationTypeAnnotations;
1: 
0:    public OutboundTransformer(JMSVendor vendor) {
0:         this.vendor = vendor;
0:         this.setPrefixVendor("JMS_AMQP_");
1:     }
1: 
0:     public abstract EncodedMessage transform(Message jms) throws Exception;
1: 
0:     public boolean isUseByteDestinationTypeAnnotations()
0:     {
0:         return useByteDestinationTypeAnnotations;
1:     }
1: 
0:     public void setUseByteDestinationTypeAnnotations(boolean useByteDestinationTypeAnnotations)
0:     {
0:         this.useByteDestinationTypeAnnotations = useByteDestinationTypeAnnotations;
1:     }
1: 
0:     public String getPrefixVendor() {
0:         return prefixVendor;
1:     }
1: 
0:     public void setPrefixVendor(String prefixVendor) {
0:         this.prefixVendor = prefixVendor;
1: 
0:         messageFormatKey = prefixVendor + "MESSAGE_FORMAT";
0:         nativeKey = prefixVendor + "NATIVE";
0:         firstAcquirerKey = prefixVendor + "FirstAcquirer";
0:         prefixDeliveryAnnotationsKey = prefixVendor + prefixDeliveryAnnotations;
0:         prefixMessageAnnotationsKey = prefixVendor + prefixMessageAnnotations;
0:         subjectKey =  prefixVendor +"Subject";
0:         contentTypeKey = prefixVendor +"ContentType";
0:         contentEncodingKey = prefixVendor +"ContentEncoding";
0:         replyToGroupIDKey = prefixVendor +"ReplyToGroupID";
0:         prefixFooterKey = prefixVendor + prefixFooter;
1: 
1:     }
1: 
0:     public JMSVendor getVendor() {
0:         return vendor;
1:     }
1: 
0:     public void setVendor(JMSVendor vendor) {
0:         this.vendor = vendor;
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:6b18857
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:37b1b6a
/////////////////////////////////////////////////////////////////////////
0:     public OutboundTransformer(JMSVendor vendor) {
============================================================================