1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
6:d29ca2a: 
1:26bb18b: import java.net.InetSocketAddress;
1:d29ca2a: import java.net.URI;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.BrokerInfo;
1:d29ca2a: 
1:d29ca2a: /**
1:74a7a8b:  * A TransportServer asynchronously accepts {@see Transport} objects and then
1:74a7a8b:  * delivers those objects to a {@see TransportAcceptListener}.
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:d29ca2a: public interface TransportServer extends Service {
1:74a7a8b: 
1:d29ca2a:     /**
1:74a7a8b:      * Registers an {@see TransportAcceptListener} which is notified of accepted
1:74a7a8b:      * channels.
1:74a7a8b:      *
1:74a7a8b:      * @param acceptListener
1:74a7a8b:      */
1:fc00993:     void setAcceptListener(TransportAcceptListener acceptListener);
1:74a7a8b: 
1:74a7a8b:     /**
1:74a7a8b:      * Associates a broker info with the transport server so that the transport
1:74a7a8b:      * can do discovery advertisements of the broker.
1:d29ca2a:      *
1:d29ca2a:      * @param brokerInfo
1:26bb18b:      */
1:fc00993:     void setBrokerInfo(BrokerInfo brokerInfo);
1:26bb18b: 
1:fc00993:     URI getConnectURI();
1:26bb18b: 
1:26bb18b:     /**
1:74a7a8b:      * @return The socket address that this transport is accepting connections
1:74a7a8b:      *         on or null if this does not or is not currently accepting
1:74a7a8b:      *         connections on a socket.
1:d29ca2a:      */
1:fc00993:     InetSocketAddress getSocketAddress();
1:74a7a8b: 
1:d29ca2a:     /**
1:0fffe21:      * For TransportServers that provide SSL connections to their connected peers they should
1:0fffe21:      * return true here if and only if they populate the ConnectionInfo command presented to
1:0fffe21:      * the Broker with the peers certificate chain so that the broker knows it can use that
1:0fffe21:      * information to authenticate the connected peer.
1:d29ca2a:      *
1:0fffe21:      * @return true if this transport server provides SSL level security over its
1:0fffe21:      *          connections.
1:d29ca2a:      */
1:0fffe21:     boolean isSslServer();
1:7e000d5: 
1:7e000d5:     /**
1:7e000d5:      * Some protocols allow link stealing by default (if 2 connections have the same clientID - the youngest wins).
1:7e000d5:      * This is the default for AMQP and MQTT. However, JMS 1.1 spec requires the opposite
1:61b2f6b:      *
1:61b2f6b:      * @return true if allow link stealing is enabled.
1:7e000d5:      */
1:7e000d5:     boolean isAllowLinkStealing();
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return true if allow link stealing is enabled.
author:Rob Davies
-------------------------------------------------------------------------------
commit:7e000d5
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Some protocols allow link stealing by default (if 2 connections have the same clientID - the youngest wins).
1:      * This is the default for AMQP and MQTT. However, JMS 1.1 spec requires the opposite
0:      * @return
1:      */
1:     boolean isAllowLinkStealing();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void setAcceptListener(TransportAcceptListener acceptListener);
/////////////////////////////////////////////////////////////////////////
1:     void setBrokerInfo(BrokerInfo brokerInfo);
1:     URI getConnectURI();
1:     InetSocketAddress getSocketAddress();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * A TransportServer asynchronously accepts {@see Transport} objects and then
1:  * delivers those objects to a {@see TransportAcceptListener}.
1: 
1:      * Registers an {@see TransportAcceptListener} which is notified of accepted
1:      * channels.
1:      * 
1:      * @param acceptListener
1:      */
0:     public void setAcceptListener(TransportAcceptListener acceptListener);
1: 
1:     /**
1:      * Associates a broker info with the transport server so that the transport
1:      * can do discovery advertisements of the broker.
/////////////////////////////////////////////////////////////////////////
1:      * @return The socket address that this transport is accepting connections
1:      *         on or null if this does not or is not currently accepting
1:      *         connections on a socket.
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:26bb18b
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
0:     public void setAcceptListener(TransportAcceptListener acceptListener);
/////////////////////////////////////////////////////////////////////////
0:     public void setBrokerInfo(BrokerInfo brokerInfo);
1: 
1:     
1:     /**
0:      * @return The socket address that this transport is accepting connections on or null if 
0:      * this does not or is not currently accepting connections on a socket.
1:      */
0:     public InetSocketAddress getSocketAddress();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.net.URI;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.command.BrokerInfo;
1: 
1: 
1: /**
0:  * A TransportServer asynchronously accepts {@see Transport} objects
0:  * and then delivers those objects to a {@see TransportAcceptListener}.
1:  * 
0:  * @version $Revision: 1.4 $
1:  */
1: public interface TransportServer extends Service {
1: 	
1: 	/**
0: 	 * Registers an {@see TransportAcceptListener} which is notified of accepted channels.
1: 	 *  
0: 	 * @param acceptListener
1: 	 */
0:     void setAcceptListener(TransportAcceptListener acceptListener);
1:     
1:     /**
0:      * Associates a broker info with the transport server so that the transport can do
0:      * discovery advertisements of the broker.
1:      * 
1:      * @param brokerInfo
1:      */
0:     void setBrokerInfo(BrokerInfo brokerInfo);
1: 
0:     public URI getConnectURI();
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * For TransportServers that provide SSL connections to their connected peers they should
1:      * return true here if and only if they populate the ConnectionInfo command presented to
1:      * the Broker with the peers certificate chain so that the broker knows it can use that
1:      * information to authenticate the connected peer.
0:      *
1:      * @return true if this transport server provides SSL level security over its
1:      *          connections.
0:      */
1:     boolean isSslServer();
============================================================================