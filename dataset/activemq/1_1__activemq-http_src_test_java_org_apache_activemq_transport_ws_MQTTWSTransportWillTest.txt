1:bd442a3: /**
1:bd442a3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd442a3:  * contributor license agreements.  See the NOTICE file distributed with
1:bd442a3:  * this work for additional information regarding copyright ownership.
1:bd442a3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd442a3:  * (the "License"); you may not use this file except in compliance with
1:bd442a3:  * the License.  You may obtain a copy of the License at
1:bd442a3:  *
1:bd442a3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd442a3:  *
1:bd442a3:  * Unless required by applicable law or agreed to in writing, software
1:bd442a3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd442a3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd442a3:  * See the License for the specific language governing permissions and
1:bd442a3:  * limitations under the License.
1:bd442a3:  */
1:bd442a3: package org.apache.activemq.transport.ws;
1:bd442a3: 
1:bd442a3: import static org.junit.Assert.assertEquals;
1:bd442a3: import static org.junit.Assert.assertNotNull;
1:bd442a3: import static org.junit.Assert.assertNull;
1:bd442a3: 
1:bd442a3: import java.io.IOException;
1:bd442a3: import java.util.Arrays;
1:bd442a3: import java.util.Collection;
1:bd442a3: import java.util.concurrent.TimeUnit;
1:bd442a3: 
1:bd442a3: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:bd442a3: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1:bd442a3: import org.eclipse.jetty.websocket.client.WebSocketClient;
1:bd442a3: import org.fusesource.hawtbuf.Buffer;
1:bd442a3: import org.fusesource.hawtbuf.UTF8Buffer;
1:bd442a3: import org.fusesource.mqtt.client.QoS;
1:bd442a3: import org.fusesource.mqtt.client.Topic;
1:bd442a3: import org.fusesource.mqtt.codec.CONNECT;
1:bd442a3: import org.fusesource.mqtt.codec.PUBACK;
1:bd442a3: import org.fusesource.mqtt.codec.PUBLISH;
1:bd442a3: import org.fusesource.mqtt.codec.SUBSCRIBE;
1:bd442a3: import org.junit.After;
1:bd442a3: import org.junit.Before;
1:bd442a3: import org.junit.Test;
1:bd442a3: import org.junit.runner.RunWith;
1:bd442a3: import org.junit.runners.Parameterized;
1:bd442a3: import org.junit.runners.Parameterized.Parameters;
1:bd442a3: 
1:bd442a3: /**
1:bd442a3:  * This shows that last will and testament messages work with MQTT over WS.
1:bd442a3:  * This test is modeled after org.apache.activemq.transport.mqtt.MQTTWillTest
1:bd442a3:  */
1:bd442a3: @RunWith(Parameterized.class)
1:bd442a3: public class MQTTWSTransportWillTest extends WSTransportTestSupport {
1:bd442a3: 
1:bd442a3:     protected WebSocketClient wsClient;
1:bd442a3:     protected MQTTWSConnection wsMQTTConnection1;
1:bd442a3:     protected MQTTWSConnection wsMQTTConnection2;
1:bd442a3:     protected ClientUpgradeRequest request;
1:bd442a3: 
1:bd442a3:     private String willTopic = "willTopic";
1:bd442a3:     private String payload = "last will";
1:bd442a3:     private boolean closeWithDisconnect;
1:bd442a3: 
1:bd442a3:     //Test both with a proper disconnect and without
1:bd442a3:     @Parameters(name="closeWithDisconnect={0}")
1:bd442a3:     public static Collection<Object[]> data() {
1:bd442a3:         return Arrays.asList(new Object[][] {
1:bd442a3:                 {true},
1:bd442a3:                 {false}
1:bd442a3:             });
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     public MQTTWSTransportWillTest(boolean closeWithDisconnect) {
1:bd442a3:         this.closeWithDisconnect = closeWithDisconnect;
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     @Override
1:bd442a3:     @Before
1:bd442a3:     public void setUp() throws Exception {
1:bd442a3:         //turn off advisory support
1:bd442a3:         broker = createBroker(true, false);
1:bd442a3: 
1:bd442a3:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:bd442a3:         wsClient.start();
1:bd442a3: 
1:bd442a3:         request = new ClientUpgradeRequest();
1:bd442a3:         request.setSubProtocols("mqttv3.1");
1:bd442a3: 
1:bd442a3:         wsMQTTConnection1 = new MQTTWSConnection();
1:bd442a3:         wsMQTTConnection2 = new MQTTWSConnection();
1:bd442a3: 
1:bd442a3:         wsClient.connect(wsMQTTConnection1, wsConnectUri, request);
1:bd442a3:         if (!wsMQTTConnection1.awaitConnection(30, TimeUnit.SECONDS)) {
1:bd442a3:             throw new IOException("Could not connect to MQTT WS endpoint");
1:bd442a3:         }
1:bd442a3: 
1:bd442a3:         wsClient.connect(wsMQTTConnection2, wsConnectUri, request);
1:bd442a3:         if (!wsMQTTConnection2.awaitConnection(30, TimeUnit.SECONDS)) {
1:bd442a3:             throw new IOException("Could not connect to MQTT WS endpoint");
1:bd442a3:         }
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     @Override
1:bd442a3:     @After
1:bd442a3:     public void tearDown() throws Exception {
1:bd442a3:         if (wsMQTTConnection1 != null) {
1:bd442a3:             wsMQTTConnection1.close();
1:bd442a3:             wsMQTTConnection1 = null;
1:bd442a3:         }
1:bd442a3:         if (wsMQTTConnection2 != null) {
1:bd442a3:             wsMQTTConnection2.close();
1:bd442a3:             wsMQTTConnection2 = null;
1:bd442a3:         }
1:bd442a3:         wsClient.stop();
1:bd442a3:         wsClient = null;
1:bd442a3:         super.tearDown();
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     @Test(timeout = 60000)
1:bd442a3:     public void testWill() throws Exception {
1:bd442a3: 
1:bd442a3:         //connect with will retain false
1:bd442a3:         CONNECT command = getWillConnectCommand(false);
1:bd442a3: 
1:bd442a3:         //connect both connections
1:bd442a3:         wsMQTTConnection1.connect(command);
1:bd442a3:         wsMQTTConnection2.connect();
1:bd442a3: 
1:bd442a3:         //Subscribe to topics
1:bd442a3:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:bd442a3:         subscribe.topics(new Topic[] {new Topic("#", QoS.EXACTLY_ONCE) });
1:bd442a3:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:bd442a3:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1:bd442a3: 
1:bd442a3:         //Test message send/receive
1:bd442a3:         wsMQTTConnection1.sendFrame(getTestMessage((short) 125).encode());
1:bd442a3:         assertMessageReceived(wsMQTTConnection2);
1:bd442a3: 
1:bd442a3:         //close the first connection without sending a proper disconnect frame first
1:bd442a3:         //if closeWithDisconnect is false
1:bd442a3:         if (closeWithDisconnect) {
1:bd442a3:             wsMQTTConnection1.disconnect();
1:bd442a3:         }
1:bd442a3:         wsMQTTConnection1.close();
1:bd442a3: 
1:bd442a3:         //Make sure LWT message is not received
1:bd442a3:         if (closeWithDisconnect) {
1:bd442a3:             assertNull(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:bd442a3:         //make sure LWT is received
1:bd442a3:         } else {
1:bd442a3:             assertWillTopicReceived(wsMQTTConnection2);
1:bd442a3:         }
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     @Test(timeout = 60 * 1000)
1:bd442a3:     public void testRetainWillMessage() throws Exception {
1:bd442a3: 
1:bd442a3:         //create connection with will retain true
1:bd442a3:         CONNECT command = getWillConnectCommand(true);
1:bd442a3: 
1:bd442a3:         wsMQTTConnection1.connect(command);
1:bd442a3:         wsMQTTConnection2.connect();
1:bd442a3: 
1:bd442a3:         //set to at most once to test will retain
1:bd442a3:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:bd442a3:         subscribe.topics(new Topic[] {new Topic("#", QoS.AT_MOST_ONCE) });
1:bd442a3:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:bd442a3:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1:bd442a3: 
1:bd442a3:         //Test message send/receive
1:bd442a3:         PUBLISH pub = getTestMessage((short) 127);
1:bd442a3:         wsMQTTConnection1.sendFrame(pub.encode());
1:bd442a3:         assertMessageReceived(wsMQTTConnection2);
1:bd442a3:         PUBACK ack = new PUBACK();
1:bd442a3:         ack.messageId(pub.messageId());
1:bd442a3:         wsMQTTConnection2.sendFrame(ack.encode());
1:bd442a3: 
1:bd442a3:         //Properly close connection 2 and improperly close connection 1 for LWT test
1:bd442a3:         wsMQTTConnection2.disconnect();
1:bd442a3:         wsMQTTConnection2.close();
1:bd442a3:         Thread.sleep(1000);
1:bd442a3:         //close the first connection without sending a proper disconnect frame first
1:bd442a3:         //if closeWithoutDisconnect is false
1:bd442a3:         if (closeWithDisconnect) {
1:bd442a3:             wsMQTTConnection1.disconnect();
1:bd442a3:         }
1:bd442a3:         wsMQTTConnection1.close();
1:bd442a3:         Thread.sleep(1000);
1:bd442a3: 
1:bd442a3:         //Do the reconnect of the websocket after close
1:bd442a3:         wsMQTTConnection2 = new MQTTWSConnection();
1:bd442a3:         wsClient.connect(wsMQTTConnection2, wsConnectUri, request);
1:bd442a3:         if (!wsMQTTConnection2.awaitConnection(30, TimeUnit.SECONDS)) {
1:bd442a3:             throw new IOException("Could not connect to MQTT WS endpoint");
1:bd442a3:         }
1:bd442a3: 
1:bd442a3: 
1:bd442a3:         //Make sure the will message is received on reconnect
1:bd442a3:         wsMQTTConnection2.connect();
1:bd442a3:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:bd442a3:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1:bd442a3: 
1:bd442a3:         //Make sure LWT message not received
1:bd442a3:         if (closeWithDisconnect) {
1:bd442a3:             assertNull(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:bd442a3:         //make sure LWT is received
1:bd442a3:         } else {
1:bd442a3:             assertWillTopicReceived(wsMQTTConnection2);
1:bd442a3:         }
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     private PUBLISH getTestMessage(short id) {
1:bd442a3:         PUBLISH publish = new PUBLISH();
1:bd442a3:         publish.dup(false);
1:bd442a3:         publish.messageId(id);
1:bd442a3:         publish.qos(QoS.AT_LEAST_ONCE);
1:bd442a3:         publish.payload(new Buffer("hello world".getBytes()));
1:bd442a3:         publish.topicName(new UTF8Buffer("test"));
1:bd442a3: 
1:bd442a3:         return publish;
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     private CONNECT getWillConnectCommand(boolean willRetain) {
1:bd442a3:         CONNECT command = new CONNECT();
1:bd442a3:         command.clientId(new UTF8Buffer("clientId"));
1:bd442a3:         command.cleanSession(false);
1:bd442a3:         command.version(3);
1:bd442a3:         command.keepAlive((short) 0);
1:bd442a3:         command.willMessage(new UTF8Buffer(payload));
1:bd442a3:         command.willQos(QoS.AT_LEAST_ONCE);
1:bd442a3:         command.willTopic(new UTF8Buffer(willTopic));
1:bd442a3:         command.willRetain(willRetain);
1:bd442a3: 
1:bd442a3:         return command;
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     private void assertMessageReceived(MQTTWSConnection wsMQTTConnection2) throws Exception {
1:bd442a3:         PUBLISH msg = new PUBLISH();
1:bd442a3:         msg.decode(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:bd442a3:         assertNotNull(msg);
1:bd442a3:         assertEquals("hello world", msg.payload().ascii().toString());
1:bd442a3:         assertEquals("test", msg.topicName().toString());
1:bd442a3:     }
1:bd442a3: 
1:bd442a3:     private void assertWillTopicReceived(MQTTWSConnection wsMQTTConnection2) throws Exception {
1:bd442a3:         PUBLISH willMsg = new PUBLISH();
1:bd442a3:         willMsg.decode(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:bd442a3:         assertNotNull(willMsg);
1:bd442a3:         assertEquals(payload, willMsg.payload().ascii().toString());
1:bd442a3:         assertEquals(willTopic,  willMsg.topicName().toString());
1:bd442a3:     }
1:bd442a3: 
1:bd442a3: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bd442a3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
1: import org.eclipse.jetty.websocket.client.WebSocketClient;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.PUBACK;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.fusesource.mqtt.codec.SUBSCRIBE;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * This shows that last will and testament messages work with MQTT over WS.
1:  * This test is modeled after org.apache.activemq.transport.mqtt.MQTTWillTest
1:  */
1: @RunWith(Parameterized.class)
1: public class MQTTWSTransportWillTest extends WSTransportTestSupport {
1: 
1:     protected WebSocketClient wsClient;
1:     protected MQTTWSConnection wsMQTTConnection1;
1:     protected MQTTWSConnection wsMQTTConnection2;
1:     protected ClientUpgradeRequest request;
1: 
1:     private String willTopic = "willTopic";
1:     private String payload = "last will";
1:     private boolean closeWithDisconnect;
1: 
1:     //Test both with a proper disconnect and without
1:     @Parameters(name="closeWithDisconnect={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {true},
1:                 {false}
1:             });
1:     }
1: 
1:     public MQTTWSTransportWillTest(boolean closeWithDisconnect) {
1:         this.closeWithDisconnect = closeWithDisconnect;
1:     }
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         //turn off advisory support
1:         broker = createBroker(true, false);
1: 
1:         wsClient = new WebSocketClient(new SslContextFactory(true));
1:         wsClient.start();
1: 
1:         request = new ClientUpgradeRequest();
1:         request.setSubProtocols("mqttv3.1");
1: 
1:         wsMQTTConnection1 = new MQTTWSConnection();
1:         wsMQTTConnection2 = new MQTTWSConnection();
1: 
1:         wsClient.connect(wsMQTTConnection1, wsConnectUri, request);
1:         if (!wsMQTTConnection1.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1: 
1:         wsClient.connect(wsMQTTConnection2, wsConnectUri, request);
1:         if (!wsMQTTConnection2.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (wsMQTTConnection1 != null) {
1:             wsMQTTConnection1.close();
1:             wsMQTTConnection1 = null;
1:         }
1:         if (wsMQTTConnection2 != null) {
1:             wsMQTTConnection2.close();
1:             wsMQTTConnection2 = null;
1:         }
1:         wsClient.stop();
1:         wsClient = null;
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testWill() throws Exception {
1: 
1:         //connect with will retain false
1:         CONNECT command = getWillConnectCommand(false);
1: 
1:         //connect both connections
1:         wsMQTTConnection1.connect(command);
1:         wsMQTTConnection2.connect();
1: 
1:         //Subscribe to topics
1:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:         subscribe.topics(new Topic[] {new Topic("#", QoS.EXACTLY_ONCE) });
1:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1: 
1:         //Test message send/receive
1:         wsMQTTConnection1.sendFrame(getTestMessage((short) 125).encode());
1:         assertMessageReceived(wsMQTTConnection2);
1: 
1:         //close the first connection without sending a proper disconnect frame first
1:         //if closeWithDisconnect is false
1:         if (closeWithDisconnect) {
1:             wsMQTTConnection1.disconnect();
1:         }
1:         wsMQTTConnection1.close();
1: 
1:         //Make sure LWT message is not received
1:         if (closeWithDisconnect) {
1:             assertNull(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:         //make sure LWT is received
1:         } else {
1:             assertWillTopicReceived(wsMQTTConnection2);
1:         }
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testRetainWillMessage() throws Exception {
1: 
1:         //create connection with will retain true
1:         CONNECT command = getWillConnectCommand(true);
1: 
1:         wsMQTTConnection1.connect(command);
1:         wsMQTTConnection2.connect();
1: 
1:         //set to at most once to test will retain
1:         SUBSCRIBE subscribe = new SUBSCRIBE();
1:         subscribe.topics(new Topic[] {new Topic("#", QoS.AT_MOST_ONCE) });
1:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1: 
1:         //Test message send/receive
1:         PUBLISH pub = getTestMessage((short) 127);
1:         wsMQTTConnection1.sendFrame(pub.encode());
1:         assertMessageReceived(wsMQTTConnection2);
1:         PUBACK ack = new PUBACK();
1:         ack.messageId(pub.messageId());
1:         wsMQTTConnection2.sendFrame(ack.encode());
1: 
1:         //Properly close connection 2 and improperly close connection 1 for LWT test
1:         wsMQTTConnection2.disconnect();
1:         wsMQTTConnection2.close();
1:         Thread.sleep(1000);
1:         //close the first connection without sending a proper disconnect frame first
1:         //if closeWithoutDisconnect is false
1:         if (closeWithDisconnect) {
1:             wsMQTTConnection1.disconnect();
1:         }
1:         wsMQTTConnection1.close();
1:         Thread.sleep(1000);
1: 
1:         //Do the reconnect of the websocket after close
1:         wsMQTTConnection2 = new MQTTWSConnection();
1:         wsClient.connect(wsMQTTConnection2, wsConnectUri, request);
1:         if (!wsMQTTConnection2.awaitConnection(30, TimeUnit.SECONDS)) {
1:             throw new IOException("Could not connect to MQTT WS endpoint");
1:         }
1: 
1: 
1:         //Make sure the will message is received on reconnect
1:         wsMQTTConnection2.connect();
1:         wsMQTTConnection2.sendFrame(subscribe.encode());
1:         wsMQTTConnection2.receive(5, TimeUnit.SECONDS);
1: 
1:         //Make sure LWT message not received
1:         if (closeWithDisconnect) {
1:             assertNull(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:         //make sure LWT is received
1:         } else {
1:             assertWillTopicReceived(wsMQTTConnection2);
1:         }
1:     }
1: 
1:     private PUBLISH getTestMessage(short id) {
1:         PUBLISH publish = new PUBLISH();
1:         publish.dup(false);
1:         publish.messageId(id);
1:         publish.qos(QoS.AT_LEAST_ONCE);
1:         publish.payload(new Buffer("hello world".getBytes()));
1:         publish.topicName(new UTF8Buffer("test"));
1: 
1:         return publish;
1:     }
1: 
1:     private CONNECT getWillConnectCommand(boolean willRetain) {
1:         CONNECT command = new CONNECT();
1:         command.clientId(new UTF8Buffer("clientId"));
1:         command.cleanSession(false);
1:         command.version(3);
1:         command.keepAlive((short) 0);
1:         command.willMessage(new UTF8Buffer(payload));
1:         command.willQos(QoS.AT_LEAST_ONCE);
1:         command.willTopic(new UTF8Buffer(willTopic));
1:         command.willRetain(willRetain);
1: 
1:         return command;
1:     }
1: 
1:     private void assertMessageReceived(MQTTWSConnection wsMQTTConnection2) throws Exception {
1:         PUBLISH msg = new PUBLISH();
1:         msg.decode(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:         assertNotNull(msg);
1:         assertEquals("hello world", msg.payload().ascii().toString());
1:         assertEquals("test", msg.topicName().toString());
1:     }
1: 
1:     private void assertWillTopicReceived(MQTTWSConnection wsMQTTConnection2) throws Exception {
1:         PUBLISH willMsg = new PUBLISH();
1:         willMsg.decode(wsMQTTConnection2.receive(5, TimeUnit.SECONDS));
1:         assertNotNull(willMsg);
1:         assertEquals(payload, willMsg.payload().ascii().toString());
1:         assertEquals(willTopic,  willMsg.topicName().toString());
1:     }
1: 
1: }
============================================================================