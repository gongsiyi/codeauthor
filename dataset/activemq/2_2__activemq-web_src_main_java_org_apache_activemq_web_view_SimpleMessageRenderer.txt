1:5f1adbe: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:d754e76:  *
1:d754e76:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d754e76:  *
1:d754e76:  * Unless required by applicable law or agreed to in writing, software
1:d754e76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d754e76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d754e76:  * See the License for the specific language governing permissions and
1:d754e76:  * limitations under the License.
1:d754e76:  */
1:d754e76: package org.apache.activemq.web.view;
2:d754e76: 
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.io.PrintWriter;
1:540dd5c: import java.util.Enumeration;
1:540dd5c: 
1:d754e76: import javax.jms.JMSException;
1:d754e76: import javax.jms.Message;
1:d754e76: import javax.jms.QueueBrowser;
1:d754e76: import javax.servlet.ServletException;
1:d754e76: import javax.servlet.http.HttpServletRequest;
1:d754e76: import javax.servlet.http.HttpServletResponse;
1:d754e76: 
1:d754e76: /**
1:d754e76:  * A simple rendering of the contents of a queue appear as a list of message
1:d754e76:  * elements which just contain an ID attribute.
1:b0c2a40:  * 
1:d754e76:  * 
1:d754e76:  */
1:d754e76: public class SimpleMessageRenderer implements MessageRenderer {
1:d754e76: 
1:d754e76:     private String contentType = "text/xml";
1:540dd5c:     private int maxMessages;
1:d754e76: 
1:540dd5c:     public void renderMessages(HttpServletRequest request, HttpServletResponse response, QueueBrowser browser) throws IOException, JMSException, ServletException {
1:d754e76:         // lets use XML by default
1:d754e76:         response.setContentType(getContentType());
1:d754e76:         PrintWriter writer = response.getWriter();
1:d754e76:         printHeader(writer, browser, request);
1:d754e76: 
1:d754e76:         Enumeration iter = browser.getEnumeration();
1:d754e76:         for (int counter = 0; iter.hasMoreElements() && (maxMessages <= 0 || counter < maxMessages); counter++) {
1:540dd5c:             Message message = (Message)iter.nextElement();
1:d754e76:             renderMessage(writer, request, response, browser, message);
1:d754e76:         }
1:d754e76: 
1:d754e76:         printFooter(writer, browser, request);
1:d754e76:     }
1:d754e76: 
1:540dd5c:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException, ServletException {
1:d754e76:         // lets just write the message IDs for now
1:d754e76:         writer.print("<message id='");
1:d754e76:         writer.print(message.getJMSMessageID());
1:d754e76:         writer.println("'/>");
1:d754e76:     }
1:d754e76: 
1:d754e76:     // Properties
1:d754e76:     // -------------------------------------------------------------------------
1:d754e76:     public int getMaxMessages() {
1:d754e76:         return maxMessages;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public void setMaxMessages(int maxMessages) {
1:d754e76:         this.maxMessages = maxMessages;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public String getContentType() {
1:d754e76:         return contentType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     public void setContentType(String contentType) {
1:d754e76:         this.contentType = contentType;
1:d754e76:     }
1:d754e76: 
1:d754e76:     // Implementation methods
1:d754e76:     // -------------------------------------------------------------------------
1:d754e76: 
1:540dd5c:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
1:d754e76:         writer.println("");
1:d754e76:         writer.print("<messages queue='");
1:d754e76:         writer.print(browser.getQueue());
1:d754e76:         writer.print("'");
1:d754e76:         String selector = browser.getMessageSelector();
1:d754e76:         if (selector != null) {
1:d754e76:             writer.print(" selector='");
1:d754e76:             writer.print(selector);
1:d754e76:             writer.print("'");
1:d754e76:         }
1:d754e76:         writer.println(">");
1:d754e76:     }
1:d754e76: 
1:540dd5c:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
1:d754e76:         writer.println("</messages>");
1:d754e76:     }
1:d754e76: 
1:d754e76: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Enumeration;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private int maxMessages;
1:     public void renderMessages(HttpServletRequest request, HttpServletResponse response, QueueBrowser browser) throws IOException, JMSException, ServletException {
/////////////////////////////////////////////////////////////////////////
1:             Message message = (Message)iter.nextElement();
1:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException, ServletException {
/////////////////////////////////////////////////////////////////////////
1:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
/////////////////////////////////////////////////////////////////////////
1:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
1: /**
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:d754e76
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.view;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.QueueBrowser;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Enumeration;
1: 
1: /**
1:  * A simple rendering of the contents of a queue appear as a list of message
1:  * elements which just contain an ID attribute.
1:  * 
0:  * @version $Revision: $
1:  */
1: public class SimpleMessageRenderer implements MessageRenderer {
1: 
1:     private String contentType = "text/xml";
0:     private int maxMessages = 0;
1: 
0:     public void renderMessages(HttpServletRequest request, HttpServletResponse response, QueueBrowser browser)
0:             throws IOException, JMSException, ServletException {
1:         // lets use XML by default
1:         response.setContentType(getContentType());
1:         PrintWriter writer = response.getWriter();
1:         printHeader(writer, browser, request);
1: 
1:         Enumeration iter = browser.getEnumeration();
1:         for (int counter = 0; iter.hasMoreElements() && (maxMessages <= 0 || counter < maxMessages); counter++) {
0:             Message message = (Message) iter.nextElement();
1:             renderMessage(writer, request, response, browser, message);
1:         }
1: 
1:         printFooter(writer, browser, request);
1:     }
1: 
0:     public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response,
0:             QueueBrowser browser, Message message) throws JMSException, ServletException {
1:         // lets just write the message IDs for now
1:         writer.print("<message id='");
1:         writer.print(message.getJMSMessageID());
1:         writer.println("'/>");
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public int getMaxMessages() {
1:         return maxMessages;
1:     }
1: 
1:     public void setMaxMessages(int maxMessages) {
1:         this.maxMessages = maxMessages;
1:     }
1: 
1:     public String getContentType() {
1:         return contentType;
1:     }
1: 
1:     public void setContentType(String contentType) {
1:         this.contentType = contentType;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1: 
0:     protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request)
0:             throws IOException, JMSException, ServletException {
1:         writer.println("");
1:         writer.print("<messages queue='");
1:         writer.print(browser.getQueue());
1:         writer.print("'");
1:         String selector = browser.getMessageSelector();
1:         if (selector != null) {
1:             writer.print(" selector='");
1:             writer.print(selector);
1:             writer.print("'");
1:         }
1:         writer.println(">");
1:     }
1: 
0:     protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request)
0:             throws IOException, JMSException, ServletException {
1:         writer.println("</messages>");
1:     }
1: 
1: }
============================================================================