1:833d308: /**
1:833d308:  *
1:833d308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:833d308:  * contributor license agreements.  See the NOTICE file distributed with
1:833d308:  * this work for additional information regarding copyright ownership.
1:833d308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:833d308:  * (the "License"); you may not use this file except in compliance with
1:833d308:  * the License.  You may obtain a copy of the License at
1:833d308:  *
1:833d308:  * http://www.apache.org/licenses/LICENSE-2.0
1:833d308:  *
1:833d308:  * Unless required by applicable law or agreed to in writing, software
1:833d308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:833d308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:833d308:  * See the License for the specific language governing permissions and
1:833d308:  * limitations under the License.
1:833d308:  */
1:833d308: 
1:833d308: package org.apache.activemq.openwire.v11;
1:833d308: 
1:833d308: import java.io.DataInput;
1:833d308: import java.io.DataOutput;
1:833d308: import java.io.IOException;
1:833d308: 
1:833d308: import org.apache.activemq.openwire.*;
1:833d308: import org.apache.activemq.command.*;
1:833d308: 
1:833d308: 
1:833d308: 
1:833d308: /**
1:833d308:  * Marshalling code for Open Wire Format for ConnectionInfoMarshaller
1:833d308:  *
1:833d308:  *
1:833d308:  * NOTE!: This file is auto generated - do not modify!
1:833d308:  *        if you need to make a change, please see the modify the groovy scripts in the
1:833d308:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:833d308:  *        this file.
1:833d308:  *
1:833d308:  * 
1:833d308:  */
1:833d308: public class ConnectionInfoMarshaller extends BaseCommandMarshaller {
1:833d308: 
1:833d308:     /**
1:833d308:      * Return the type of Data Structure we marshal
1:833d308:      * @return short representation of the type data structure
1:833d308:      */
1:833d308:     public byte getDataStructureType() {
1:833d308:         return ConnectionInfo.DATA_STRUCTURE_TYPE;
1:833d308:     }
1:833d308:     
1:833d308:     /**
1:833d308:      * @return a new object instance
1:833d308:      */
1:833d308:     public DataStructure createObject() {
1:833d308:         return new ConnectionInfo();
1:833d308:     }
1:833d308: 
1:833d308:     /**
1:833d308:      * Un-marshal an object instance from the data input stream
1:833d308:      *
1:833d308:      * @param o the object to un-marshal
1:833d308:      * @param dataIn the data input stream to build the object from
1:833d308:      * @throws IOException
1:833d308:      */
1:833d308:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:833d308:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:833d308: 
1:833d308:         ConnectionInfo info = (ConnectionInfo)o;
1:833d308:         info.setConnectionId((org.apache.activemq.command.ConnectionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:833d308:         info.setClientId(tightUnmarshalString(dataIn, bs));
1:833d308:         info.setPassword(tightUnmarshalString(dataIn, bs));
1:833d308:         info.setUserName(tightUnmarshalString(dataIn, bs));
1:833d308: 
1:833d308:         if (bs.readBoolean()) {
1:833d308:             short size = dataIn.readShort();
1:833d308:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:833d308:             for( int i=0; i < size; i++ ) {
1:833d308:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:833d308:             }
1:833d308:             info.setBrokerPath(value);
1:833d308:         }
1:833d308:         else {
1:833d308:             info.setBrokerPath(null);
1:833d308:         }
1:833d308:         info.setBrokerMasterConnector(bs.readBoolean());
1:833d308:         info.setManageable(bs.readBoolean());
1:833d308:         info.setClientMaster(bs.readBoolean());
1:833d308:         info.setFaultTolerant(bs.readBoolean());
1:833d308:         info.setFailoverReconnect(bs.readBoolean());
1:833d308:         info.setClientIp(tightUnmarshalString(dataIn, bs));
1:833d308: 
1:833d308:     }
1:833d308: 
1:833d308: 
1:833d308:     /**
1:833d308:      * Write the booleans that this object uses to a BooleanStream
1:833d308:      */
1:833d308:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:833d308: 
1:833d308:         ConnectionInfo info = (ConnectionInfo)o;
1:833d308: 
1:833d308:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:833d308:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConnectionId(), bs);
1:833d308:         rc += tightMarshalString1(info.getClientId(), bs);
1:833d308:         rc += tightMarshalString1(info.getPassword(), bs);
1:833d308:         rc += tightMarshalString1(info.getUserName(), bs);
1:833d308:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:833d308:         bs.writeBoolean(info.isBrokerMasterConnector());
1:833d308:         bs.writeBoolean(info.isManageable());
1:833d308:         bs.writeBoolean(info.isClientMaster());
1:833d308:         bs.writeBoolean(info.isFaultTolerant());
1:833d308:         bs.writeBoolean(info.isFailoverReconnect());
1:833d308:         rc += tightMarshalString1(info.getClientIp(), bs);
1:833d308: 
1:833d308:         return rc + 0;
1:833d308:     }
1:833d308: 
1:833d308:     /**
1:833d308:      * Write a object instance to data output stream
1:833d308:      *
1:833d308:      * @param o the instance to be marshaled
1:833d308:      * @param dataOut the output stream
1:833d308:      * @throws IOException thrown if an error occurs
1:833d308:      */
1:833d308:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:833d308:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:833d308: 
1:833d308:         ConnectionInfo info = (ConnectionInfo)o;
1:833d308:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConnectionId(), dataOut, bs);
1:833d308:         tightMarshalString2(info.getClientId(), dataOut, bs);
1:833d308:         tightMarshalString2(info.getPassword(), dataOut, bs);
1:833d308:         tightMarshalString2(info.getUserName(), dataOut, bs);
1:833d308:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:833d308:         bs.readBoolean();
1:833d308:         bs.readBoolean();
1:833d308:         bs.readBoolean();
1:833d308:         bs.readBoolean();
1:833d308:         bs.readBoolean();
1:833d308:         tightMarshalString2(info.getClientIp(), dataOut, bs);
1:833d308: 
1:833d308:     }
1:833d308: 
1:833d308:     /**
1:833d308:      * Un-marshal an object instance from the data input stream
1:833d308:      *
1:833d308:      * @param o the object to un-marshal
1:833d308:      * @param dataIn the data input stream to build the object from
1:833d308:      * @throws IOException
1:833d308:      */
1:833d308:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:833d308:         super.looseUnmarshal(wireFormat, o, dataIn);
1:833d308: 
1:833d308:         ConnectionInfo info = (ConnectionInfo)o;
1:833d308:         info.setConnectionId((org.apache.activemq.command.ConnectionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:833d308:         info.setClientId(looseUnmarshalString(dataIn));
1:833d308:         info.setPassword(looseUnmarshalString(dataIn));
1:833d308:         info.setUserName(looseUnmarshalString(dataIn));
1:833d308: 
1:833d308:         if (dataIn.readBoolean()) {
1:833d308:             short size = dataIn.readShort();
1:833d308:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:833d308:             for( int i=0; i < size; i++ ) {
1:833d308:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:833d308:             }
1:833d308:             info.setBrokerPath(value);
1:833d308:         }
1:833d308:         else {
1:833d308:             info.setBrokerPath(null);
1:833d308:         }
1:833d308:         info.setBrokerMasterConnector(dataIn.readBoolean());
1:833d308:         info.setManageable(dataIn.readBoolean());
1:833d308:         info.setClientMaster(dataIn.readBoolean());
1:833d308:         info.setFaultTolerant(dataIn.readBoolean());
1:833d308:         info.setFailoverReconnect(dataIn.readBoolean());
1:833d308:         info.setClientIp(looseUnmarshalString(dataIn));
1:833d308: 
1:833d308:     }
1:833d308: 
1:833d308: 
1:833d308:     /**
1:833d308:      * Write the booleans that this object uses to a BooleanStream
1:833d308:      */
1:833d308:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:833d308: 
1:833d308:         ConnectionInfo info = (ConnectionInfo)o;
1:833d308: 
1:833d308:         super.looseMarshal(wireFormat, o, dataOut);
1:833d308:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConnectionId(), dataOut);
1:833d308:         looseMarshalString(info.getClientId(), dataOut);
1:833d308:         looseMarshalString(info.getPassword(), dataOut);
1:833d308:         looseMarshalString(info.getUserName(), dataOut);
1:833d308:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:833d308:         dataOut.writeBoolean(info.isBrokerMasterConnector());
1:833d308:         dataOut.writeBoolean(info.isManageable());
1:833d308:         dataOut.writeBoolean(info.isClientMaster());
1:833d308:         dataOut.writeBoolean(info.isFaultTolerant());
1:833d308:         dataOut.writeBoolean(info.isFailoverReconnect());
1:833d308:         looseMarshalString(info.getClientIp(), dataOut);
1:833d308: 
1:833d308:     }
1:833d308: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:833d308
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.openwire.v11;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: 
1: /**
1:  * Marshalling code for Open Wire Format for ConnectionInfoMarshaller
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
1:  * 
1:  */
1: public class ConnectionInfoMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Return the type of Data Structure we marshal
1:      * @return short representation of the type data structure
1:      */
1:     public byte getDataStructureType() {
1:         return ConnectionInfo.DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     /**
1:      * @return a new object instance
1:      */
1:     public DataStructure createObject() {
1:         return new ConnectionInfo();
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1: 
1:         ConnectionInfo info = (ConnectionInfo)o;
1:         info.setConnectionId((org.apache.activemq.command.ConnectionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setClientId(tightUnmarshalString(dataIn, bs));
1:         info.setPassword(tightUnmarshalString(dataIn, bs));
1:         info.setUserName(tightUnmarshalString(dataIn, bs));
1: 
1:         if (bs.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setBrokerMasterConnector(bs.readBoolean());
1:         info.setManageable(bs.readBoolean());
1:         info.setClientMaster(bs.readBoolean());
1:         info.setFaultTolerant(bs.readBoolean());
1:         info.setFailoverReconnect(bs.readBoolean());
1:         info.setClientIp(tightUnmarshalString(dataIn, bs));
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         ConnectionInfo info = (ConnectionInfo)o;
1: 
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConnectionId(), bs);
1:         rc += tightMarshalString1(info.getClientId(), bs);
1:         rc += tightMarshalString1(info.getPassword(), bs);
1:         rc += tightMarshalString1(info.getUserName(), bs);
1:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:         bs.writeBoolean(info.isBrokerMasterConnector());
1:         bs.writeBoolean(info.isManageable());
1:         bs.writeBoolean(info.isClientMaster());
1:         bs.writeBoolean(info.isFaultTolerant());
1:         bs.writeBoolean(info.isFailoverReconnect());
1:         rc += tightMarshalString1(info.getClientIp(), bs);
1: 
1:         return rc + 0;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
1:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1: 
1:         ConnectionInfo info = (ConnectionInfo)o;
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConnectionId(), dataOut, bs);
1:         tightMarshalString2(info.getClientId(), dataOut, bs);
1:         tightMarshalString2(info.getPassword(), dataOut, bs);
1:         tightMarshalString2(info.getUserName(), dataOut, bs);
1:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         bs.readBoolean();
1:         tightMarshalString2(info.getClientIp(), dataOut, bs);
1: 
1:     }
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         ConnectionInfo info = (ConnectionInfo)o;
1:         info.setConnectionId((org.apache.activemq.command.ConnectionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setClientId(looseUnmarshalString(dataIn));
1:         info.setPassword(looseUnmarshalString(dataIn));
1:         info.setUserName(looseUnmarshalString(dataIn));
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:             for( int i=0; i < size; i++ ) {
1:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setBrokerMasterConnector(dataIn.readBoolean());
1:         info.setManageable(dataIn.readBoolean());
1:         info.setClientMaster(dataIn.readBoolean());
1:         info.setFaultTolerant(dataIn.readBoolean());
1:         info.setFailoverReconnect(dataIn.readBoolean());
1:         info.setClientIp(looseUnmarshalString(dataIn));
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1: 
1:         ConnectionInfo info = (ConnectionInfo)o;
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getConnectionId(), dataOut);
1:         looseMarshalString(info.getClientId(), dataOut);
1:         looseMarshalString(info.getPassword(), dataOut);
1:         looseMarshalString(info.getUserName(), dataOut);
1:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:         dataOut.writeBoolean(info.isBrokerMasterConnector());
1:         dataOut.writeBoolean(info.isManageable());
1:         dataOut.writeBoolean(info.isClientMaster());
1:         dataOut.writeBoolean(info.isFaultTolerant());
1:         dataOut.writeBoolean(info.isFailoverReconnect());
1:         looseMarshalString(info.getClientIp(), dataOut);
1: 
1:     }
1: }
============================================================================