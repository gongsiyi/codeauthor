1:7809e80: /**
1:7809e80:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7809e80:  * contributor license agreements.  See the NOTICE file distributed with
1:7809e80:  * this work for additional information regarding copyright ownership.
1:7809e80:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7809e80:  * (the "License"); you may not use this file except in compliance with
1:7809e80:  * the License.  You may obtain a copy of the License at
1:7809e80:  *
1:7809e80:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7809e80:  *
1:7809e80:  * Unless required by applicable law or agreed to in writing, software
1:7809e80:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7809e80:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7809e80:  * See the License for the specific language governing permissions and
1:7809e80:  * limitations under the License.
1:7809e80:  */
1:7809e80: package org.apache.activemq.transport.nio;
1:69fad2a: 
1:7809e80: import junit.framework.TestCase;
1:7809e80: import org.apache.activemq.ActiveMQConnectionFactory;
1:7809e80: import org.apache.activemq.broker.BrokerService;
1:7809e80: import org.apache.activemq.broker.TransportConnector;
1:69fad2a: 
1:7809e80: import javax.jms.BytesMessage;
1:7809e80: import javax.jms.Connection;
1:7809e80: import javax.jms.MessageConsumer;
1:7809e80: import javax.jms.MessageProducer;
1:7809e80: import javax.jms.Queue;
1:7809e80: import javax.jms.Session;
11:7809e80: 
1:7809e80: @SuppressWarnings("javadoc")
1:7809e80: public class NIOSSLWindowSizeTest extends TestCase {
1:1e31df9: 	
1:7809e80:     BrokerService broker;
1:7809e80:     Connection connection;
1:7809e80:     Session session;
1:1e31df9:     
1:7809e80:     public static final String KEYSTORE_TYPE = "jks";
1:7809e80:     public static final String PASSWORD = "password";
1:7809e80:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:7809e80:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:69fad2a: 
1:7809e80:     public static final int PRODUCER_COUNT = 1;
1:7809e80:     public static final int CONSUMER_COUNT = 1;
1:7809e80:     public static final int MESSAGE_COUNT = 1;
1:7809e80:     public static final int MESSAGE_SIZE = 65536;
1:69fad2a: 
1:7809e80:     byte[] messageData;
1:1e31df9:     
1:7809e80:     @Override
1:7809e80:     protected void setUp() throws Exception {
1:7809e80:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:7809e80:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:7809e80:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:7809e80:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:7809e80:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:7809e80:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:7809e80: 
1:7809e80:         broker = new BrokerService();
1:7809e80:         broker.setPersistent(false);
1:7809e80:         broker.setUseJmx(false);
1:1e31df9:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true");
1:7809e80:         broker.start();
1:7809e80:         broker.waitUntilStarted();
1:1e31df9:         
1:7809e80:         messageData = new byte[MESSAGE_SIZE];
1:7809e80:         for (int i = 0; i < MESSAGE_SIZE;  i++)
1:7809e80:         {
1:7809e80:         	messageData[i] = (byte) (i & 0xff);
1:69fad2a:         }
1:1e31df9:         
1:7809e80:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:7809e80:         connection = factory.createConnection();
1:1e31df9:         session = connection.createSession(false,  Session.AUTO_ACKNOWLEDGE);        
1:7809e80:         connection.start();
5:7809e80:     }
1:69fad2a: 
1:7809e80:     @Override
1:7809e80:     protected void tearDown() throws Exception {
1:7809e80:     	if (session != null) {
1:7809e80:     		session.close();
1:7809e80:     	}
1:7809e80:         if (connection != null) {
1:7809e80:             connection.close();
1:7809e80:         }
1:7809e80: 
1:7809e80:         if (broker != null) {
1:7809e80:             broker.stop();
1:7809e80:             broker.waitUntilStopped();
1:7809e80:         }
1:7809e80:     }
1:7809e80: 
1:7809e80:     public void testLargePayload() throws Exception {
1:7809e80:         Queue dest = session.createQueue("TEST");
1:7809e80:     	MessageProducer prod = null;
1:7809e80:         try {
1:7809e80:         	prod = session.createProducer(dest);
1:7809e80:         	BytesMessage msg = session.createBytesMessage();
1:7809e80:         	msg.writeBytes(messageData);
1:7809e80:         	prod.send(msg);
1:7809e80:         } finally {
1:7809e80:         	prod.close();
1:1e31df9:         }        
1:7809e80:     	MessageConsumer cons = null;
1:1e31df9:     	try 
1:7809e80:     	{
1:7809e80:     		cons = session.createConsumer(dest);
1:7809e80:     		assertNotNull(cons.receive(30000L));
1:7809e80:         } finally {
1:7809e80:         	cons.close();
1:1e31df9:         }        
1:69fad2a:     }
1:7809e80: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1: 	
1:     
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true");
1:         
1:         
1:         session = connection.createSession(false,  Session.AUTO_ACKNOWLEDGE);        
/////////////////////////////////////////////////////////////////////////
1:         }        
1:     	try 
1:         }        
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false");
1: 
1: 
0:         session = connection.createSession(false,  Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         }
0:     	try
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7809e80
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: @SuppressWarnings("javadoc")
1: public class NIOSSLWindowSizeTest extends TestCase {
1: 	
1:     BrokerService broker;
1:     Connection connection;
1:     Session session;
1:     
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     public static final int PRODUCER_COUNT = 1;
1:     public static final int CONSUMER_COUNT = 1;
1:     public static final int MESSAGE_COUNT = 1;
1:     public static final int MESSAGE_SIZE = 65536;
1: 
1:     byte[] messageData;
1:     
1:     @Override
1:     protected void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
0:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         
1:         messageData = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE;  i++)
1:         {
1:         	messageData[i] = (byte) (i & 0xff);
1:         }
1:         
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:         connection = factory.createConnection();
0:         session = connection.createSession(false,  Session.AUTO_ACKNOWLEDGE);        
1:         connection.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:     	if (session != null) {
1:     		session.close();
1:     	}
1:         if (connection != null) {
1:             connection.close();
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     public void testLargePayload() throws Exception {
1:         Queue dest = session.createQueue("TEST");
1:     	MessageProducer prod = null;
1:         try {
1:         	prod = session.createProducer(dest);
1:         	BytesMessage msg = session.createBytesMessage();
1:         	msg.writeBytes(messageData);
1:         	prod.send(msg);
1:         } finally {
1:         	prod.close();
1:         }        
1:     	MessageConsumer cons = null;
0:     	try 
1:     	{
1:     		cons = session.createConsumer(dest);
1:     		assertNotNull(cons.receive(30000L));
1:         } finally {
1:         	cons.close();
1:         }        
1:     }
1: }
============================================================================