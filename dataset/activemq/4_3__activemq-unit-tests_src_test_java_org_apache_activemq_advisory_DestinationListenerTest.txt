1:f6efc56: /**
1:f6efc56:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f6efc56:  * contributor license agreements.  See the NOTICE file distributed with
1:f6efc56:  * this work for additional information regarding copyright ownership.
1:f6efc56:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f6efc56:  * (the "License"); you may not use this file except in compliance with
1:f6efc56:  * the License.  You may obtain a copy of the License at
1:f6efc56:  *
1:f6efc56:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f6efc56:  *
1:f6efc56:  * Unless required by applicable law or agreed to in writing, software
1:f6efc56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f6efc56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f6efc56:  * See the License for the specific language governing permissions and
1:f6efc56:  * limitations under the License.
1:f6efc56:  */
1:f6efc56: package org.apache.activemq.advisory;
1:5e897d6: 
1:3cbee72: import java.util.ArrayList;
1:3cbee72: import java.util.List;
1:5e897d6: import java.util.Set;
1:5e897d6: 
1:3cbee72: import javax.jms.Session;
1:3cbee72: import javax.jms.MessageProducer;
1:3cbee72: import javax.jms.TextMessage;
1:3cbee72: 
1:f6efc56: import org.apache.activemq.ActiveMQConnection;
1:f6efc56: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f6efc56: import org.apache.activemq.broker.BrokerService;
1:f6efc56: import org.apache.activemq.command.ActiveMQDestination;
1:f6efc56: import org.apache.activemq.command.ActiveMQQueue;
1:f6efc56: import org.apache.activemq.command.ActiveMQTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3cbee72: import static org.hamcrest.MatcherAssert.assertThat;
1:3cbee72: import static org.hamcrest.Matchers.*;
3:f6efc56: 
1:f6efc56: /**
1:0bbc0ac:  * 
1:f6efc56:  */
1:f6efc56: public class DestinationListenerTest extends EmbeddedBrokerTestSupport implements DestinationListener {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(DestinationListenerTest.class);
1:f6efc56:     protected ActiveMQConnection connection;
1:5e897d6:     protected ActiveMQQueue sampleQueue = new ActiveMQQueue("foo.bar");
1:5e897d6:     protected ActiveMQTopic sampleTopic = new ActiveMQTopic("cheese");
1:3cbee72:     protected List<ActiveMQDestination> newDestinations = new ArrayList<ActiveMQDestination>();
1:f6efc56: 
1:3cbee72:     public void testDestiationSourceHasInitialDestinations() throws Exception {
1:f6efc56:         Thread.sleep(1000);
1:5e897d6: 
1:5e897d6:         DestinationSource destinationSource = connection.getDestinationSource();
1:5e897d6:         Set<ActiveMQQueue> queues = destinationSource.getQueues();
1:5e897d6:         Set<ActiveMQTopic> topics = destinationSource.getTopics();
1:5e897d6: 
1:5e897d6:         LOG.info("Queues: " + queues);
1:5e897d6:         LOG.info("Topics: " + topics);
1:5e897d6: 
1:5e897d6:         assertTrue("The queues should not be empty!", !queues.isEmpty());
1:5e897d6:         assertTrue("The topics should not be empty!", !topics.isEmpty());
1:5e897d6: 
1:5e897d6:         assertTrue("queues contains initial queue: " + queues, queues.contains(sampleQueue));
1:5e897d6:         assertTrue("topics contains initial topic: " + queues, topics.contains(sampleTopic));
2:f6efc56:     }
1:f6efc56: 
1:3cbee72:     public void testConsumerForcesNotificationOfNewDestination() throws Exception {
1:3cbee72:         // now lets cause a destination to be created
1:3cbee72:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3cbee72:         ActiveMQQueue newQueue = new ActiveMQQueue("Test.Cheese");
1:3cbee72:         session.createConsumer(newQueue);
1:3cbee72: 
1:3cbee72:         Thread.sleep(3000);
1:3cbee72: 
1:3cbee72:         assertThat(newQueue, isIn(newDestinations));
1:3cbee72: 
1:3cbee72:         LOG.info("New destinations are: " + newDestinations);
1:3cbee72:     }
1:3cbee72: 
1:3cbee72:     public void testProducerForcesNotificationOfNewDestination() throws Exception {
1:3cbee72:         // now lets cause a destination to be created
1:3cbee72:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3cbee72:         ActiveMQQueue newQueue = new ActiveMQQueue("Test.Beer");
1:3cbee72:         MessageProducer producer = session.createProducer(newQueue);
1:3cbee72:         TextMessage message = session.createTextMessage("<hello>world</hello>");
1:3cbee72:         producer.send(message);
1:3cbee72: 
1:3cbee72:         Thread.sleep(3000);
1:3cbee72: 
1:3cbee72:         assertThat(newQueue, isIn(newDestinations));
1:3cbee72: 
1:3cbee72:         LOG.info("New destinations are: " + newDestinations);
1:3cbee72:     }
1:3cbee72: 
1:f6efc56:     public void onDestinationEvent(DestinationEvent event) {
1:f6efc56:         ActiveMQDestination destination = event.getDestination();
1:f6efc56:         if (event.isAddOperation()) {
1:5e897d6:             LOG.info("Added:   " + destination);
1:3cbee72:             newDestinations.add(destination);
1:f6efc56:         }
1:f6efc56:         else {
1:5e897d6:             LOG.info("Removed: " + destination);
1:3cbee72:             newDestinations.remove(destination);
1:f6efc56:         }
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     protected void setUp() throws Exception {
1:f6efc56:         super.setUp();
1:f6efc56: 
1:f6efc56:         connection = (ActiveMQConnection) createConnection();
1:f6efc56:         connection.start();
1:5e897d6:         connection.getDestinationSource().setDestinationListener(this);
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     @Override
1:f6efc56:     protected BrokerService createBroker() throws Exception {
1:f6efc56:         BrokerService broker = super.createBroker();
1:f6efc56:         broker.setDestinations(new ActiveMQDestination[]{
1:5e897d6:                 sampleQueue,
1:5e897d6:                 sampleTopic
1:f6efc56:         });
1:f6efc56:         return broker;
1:f6efc56:     }
1:f6efc56: 
1:f6efc56:     protected void tearDown() throws Exception {
1:f6efc56:         if (connection != null) {
1:f6efc56:             connection.close();
1:f6efc56:         }
1:f6efc56:         super.tearDown();
1:8bf987b:     }
1:f6efc56: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DestinationListenerTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:3cbee72
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import javax.jms.Session;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
1: import static org.hamcrest.MatcherAssert.assertThat;
1: import static org.hamcrest.Matchers.*;
1:     protected List<ActiveMQDestination> newDestinations = new ArrayList<ActiveMQDestination>();
1:     public void testDestiationSourceHasInitialDestinations() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerForcesNotificationOfNewDestination() throws Exception {
1:         // now lets cause a destination to be created
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue newQueue = new ActiveMQQueue("Test.Cheese");
1:         session.createConsumer(newQueue);
1: 
1:         Thread.sleep(3000);
1: 
1:         assertThat(newQueue, isIn(newDestinations));
1: 
1:         LOG.info("New destinations are: " + newDestinations);
1:     }
1: 
1:     public void testProducerForcesNotificationOfNewDestination() throws Exception {
1:         // now lets cause a destination to be created
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQQueue newQueue = new ActiveMQQueue("Test.Beer");
1:         MessageProducer producer = session.createProducer(newQueue);
1:         TextMessage message = session.createTextMessage("<hello>world</hello>");
1:         producer.send(message);
1: 
1:         Thread.sleep(3000);
1: 
1:         assertThat(newQueue, isIn(newDestinations));
1: 
1:         LOG.info("New destinations are: " + newDestinations);
1:     }
1: 
1:             newDestinations.add(destination);
1:             newDestinations.remove(destination);
commit:5e897d6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(DestinationListenerTest.class);
1: 
1:     protected ActiveMQQueue sampleQueue = new ActiveMQQueue("foo.bar");
1:     protected ActiveMQTopic sampleTopic = new ActiveMQTopic("cheese");
1: 
1:         DestinationSource destinationSource = connection.getDestinationSource();
1:         Set<ActiveMQQueue> queues = destinationSource.getQueues();
1:         Set<ActiveMQTopic> topics = destinationSource.getTopics();
1: 
1:         LOG.info("Queues: " + queues);
1:         LOG.info("Topics: " + topics);
1: 
1:         assertTrue("The queues should not be empty!", !queues.isEmpty());
1:         assertTrue("The topics should not be empty!", !topics.isEmpty());
1: 
1:         assertTrue("queues contains initial queue: " + queues, queues.contains(sampleQueue));
1:         assertTrue("topics contains initial topic: " + queues, topics.contains(sampleTopic));
1:             LOG.info("Added:   " + destination);
1:             LOG.info("Removed: " + destination);
/////////////////////////////////////////////////////////////////////////
1:         connection.getDestinationSource().setDestinationListener(this);
1:                 sampleQueue,
1:                 sampleTopic
commit:f6efc56
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class DestinationListenerTest extends EmbeddedBrokerTestSupport implements DestinationListener {
0:     private static final Log LOG = LogFactory.getLog(DestinationListenerTest.class);
1:     protected ActiveMQConnection connection;
0:     protected DestinationSource destinationSource;
1: 
0:     public void testDestiationSource() throws Exception {
1:         Thread.sleep(1000);
0:         System.out.println("Queues: " + destinationSource.getQueues());
0:         System.out.println("Topics: " + destinationSource.getTopics());
1:     }
1: 
1:     public void onDestinationEvent(DestinationEvent event) {
1:         ActiveMQDestination destination = event.getDestination();
1:         if (event.isAddOperation()) {
0:             System.out.println("Added:   " + destination);
1:         }
1:         else {
0:             System.out.println("Removed: " + destination);
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connection = (ActiveMQConnection) createConnection();
1:         connection.start();
1: 
0:         destinationSource = connection.getDestinationSource();
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         broker.setDestinations(new ActiveMQDestination[]{
0:                 new ActiveMQQueue("foo.bar"),
0:                 new ActiveMQTopic("cheese")
1:         });
1:         return broker;
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: }
============================================================================