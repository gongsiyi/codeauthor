1:845e62a: /**
1:845e62a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845e62a:  * contributor license agreements.  See the NOTICE file distributed with
1:845e62a:  * this work for additional information regarding copyright ownership.
1:845e62a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845e62a:  * (the "License"); you may not use this file except in compliance with
1:845e62a:  * the License.  You may obtain a copy of the License at
1:845e62a:  *
1:845e62a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:845e62a:  *
1:845e62a:  * Unless required by applicable law or agreed to in writing, software
1:845e62a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845e62a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845e62a:  * See the License for the specific language governing permissions and
1:845e62a:  * limitations under the License.
1:845e62a:  */
1:845e62a: package org.apache.activemq.broker.util;
1:845e62a: 
1:845e62a: import org.apache.activemq.broker.Broker;
1:845e62a: import org.apache.activemq.broker.BrokerPluginSupport;
1:845e62a: import org.apache.activemq.broker.ConnectionContext;
1:845e62a: import org.apache.activemq.broker.region.Destination;
1:845e62a: import org.apache.activemq.command.ActiveMQDestination;
1:845e62a: import org.slf4j.Logger;
1:845e62a: import org.slf4j.LoggerFactory;
1:845e62a: 
1:845e62a: import java.io.*;
1:845e62a: import java.util.Arrays;
1:845e62a: import java.util.HashSet;
1:845e62a: 
1:845e62a: /**
1:845e62a:  *
1:845e62a:  * A simple plugin that can be used to export/import runtime destinations. It's useful in security constrained
1:845e62a:  * environments where you want to create destinations only through the management APIs and be able to
1:845e62a:  * replicate them to another broker
1:845e62a:  *
1:845e62a:  * @org.apache.xbean.XBean element="destinationsPlugin"
1:845e62a:  */
1:845e62a: public class DestinationsPlugin extends BrokerPluginSupport {
1:845e62a:     private static Logger LOG = LoggerFactory.getLogger(DestinationsPlugin.class);
1:845e62a:     HashSet<ActiveMQDestination> destinations = new HashSet<ActiveMQDestination>();
1:845e62a:     File location;
1:845e62a: 
1:845e62a:     @Override
1:845e62a:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:845e62a:         destinations.add(destination);
1:845e62a:         return super.addDestination(context, destination, createIfTemporary);
1:845e62a:     }
1:845e62a: 
1:845e62a:     @Override
1:845e62a:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:845e62a:         super.removeDestination(context, destination, timeout);
1:845e62a:         destinations.remove(destination);
1:845e62a:     }
1:845e62a: 
1:845e62a:     @Override
1:845e62a:     public void start() throws Exception {
1:845e62a:         super.start();
1:845e62a:         if (location == null) {
1:845e62a:             location = new File(getBrokerService().getBrokerDataDirectory(), "destinations");
1:845e62a:         }
1:845e62a:         importDestinations();
1:845e62a:         destinations.addAll(Arrays.asList(getBrokerService().getBroker().getDestinations()));
1:845e62a:     }
1:845e62a: 
1:845e62a:     @Override
1:845e62a:     public void stop() throws Exception {
1:845e62a:         super.stop();
1:845e62a:         exportDestinations();
1:845e62a:     }
1:845e62a: 
1:845e62a:     protected void importDestinations() throws Exception {
1:845e62a:         BufferedReader reader = null;
1:845e62a:         try {
1:845e62a:             if (location.exists()) {
1:845e62a:                 reader = new BufferedReader(new FileReader(location));
1:845e62a:                 String destination;
1:845e62a:                 Broker broker = getBrokerService().getBroker();
1:845e62a:                 while ((destination = reader.readLine()) != null) {
1:845e62a:                     broker.addDestination(getBrokerService().getAdminConnectionContext(),
1:845e62a:                             ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE),
1:845e62a:                             true);
1:845e62a:                 }
1:845e62a:             }
1:845e62a:         } catch (Exception e) {
1:845e62a:             LOG.warn("Exception loading destinations", e);
1:845e62a:         }  finally {
1:845e62a:             if (reader != null) {
1:845e62a:                 reader.close();
1:845e62a:             }
1:845e62a:         }
1:845e62a:     }
1:845e62a: 
1:845e62a:     protected void exportDestinations() throws Exception {
1:845e62a:         PrintWriter pw = null;
1:845e62a:         try {
1:845e62a:             location.getParentFile().mkdirs();
1:845e62a:             FileOutputStream fos = new FileOutputStream(location);
1:845e62a:             pw = new PrintWriter(fos);
1:845e62a:             for (ActiveMQDestination destination : destinations) {
1:845e62a:                 pw.println(destination);
1:845e62a:             }
1:845e62a:         } catch (Exception e) {
1:845e62a:             LOG.warn("Exception saving destinations", e);
1:845e62a:         } finally {
1:845e62a:             if (pw != null) {
1:845e62a:                 pw.close();
1:845e62a:             }
1:845e62a:         }
1:845e62a:     }
1:845e62a: 
1:845e62a:     public File getLocation() {
1:845e62a:         return location;
1:845e62a:     }
1:845e62a: 
1:845e62a:     public void setLocation(File location) {
1:845e62a:         this.location = location;
1:845e62a:     }
1:845e62a: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:845e62a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.*;
1: import java.util.Arrays;
1: import java.util.HashSet;
1: 
1: /**
1:  *
1:  * A simple plugin that can be used to export/import runtime destinations. It's useful in security constrained
1:  * environments where you want to create destinations only through the management APIs and be able to
1:  * replicate them to another broker
1:  *
1:  * @org.apache.xbean.XBean element="destinationsPlugin"
1:  */
1: public class DestinationsPlugin extends BrokerPluginSupport {
1:     private static Logger LOG = LoggerFactory.getLogger(DestinationsPlugin.class);
1:     HashSet<ActiveMQDestination> destinations = new HashSet<ActiveMQDestination>();
1:     File location;
1: 
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception {
1:         destinations.add(destination);
1:         return super.addDestination(context, destination, createIfTemporary);
1:     }
1: 
1:     @Override
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:         super.removeDestination(context, destination, timeout);
1:         destinations.remove(destination);
1:     }
1: 
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:         if (location == null) {
1:             location = new File(getBrokerService().getBrokerDataDirectory(), "destinations");
1:         }
1:         importDestinations();
1:         destinations.addAll(Arrays.asList(getBrokerService().getBroker().getDestinations()));
1:     }
1: 
1:     @Override
1:     public void stop() throws Exception {
1:         super.stop();
1:         exportDestinations();
1:     }
1: 
1:     protected void importDestinations() throws Exception {
1:         BufferedReader reader = null;
1:         try {
1:             if (location.exists()) {
1:                 reader = new BufferedReader(new FileReader(location));
1:                 String destination;
1:                 Broker broker = getBrokerService().getBroker();
1:                 while ((destination = reader.readLine()) != null) {
1:                     broker.addDestination(getBrokerService().getAdminConnectionContext(),
1:                             ActiveMQDestination.createDestination(destination, ActiveMQDestination.QUEUE_TYPE),
1:                             true);
1:                 }
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Exception loading destinations", e);
1:         }  finally {
1:             if (reader != null) {
1:                 reader.close();
1:             }
1:         }
1:     }
1: 
1:     protected void exportDestinations() throws Exception {
1:         PrintWriter pw = null;
1:         try {
1:             location.getParentFile().mkdirs();
1:             FileOutputStream fos = new FileOutputStream(location);
1:             pw = new PrintWriter(fos);
1:             for (ActiveMQDestination destination : destinations) {
1:                 pw.println(destination);
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Exception saving destinations", e);
1:         } finally {
1:             if (pw != null) {
1:                 pw.close();
1:             }
1:         }
1:     }
1: 
1:     public File getLocation() {
1:         return location;
1:     }
1: 
1:     public void setLocation(File location) {
1:         this.location = location;
1:     }
1: }
============================================================================