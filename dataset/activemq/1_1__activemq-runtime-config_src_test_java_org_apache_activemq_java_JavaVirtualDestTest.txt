1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.java;
1:43c3cae: 
1:43c3cae: import static org.junit.Assert.assertEquals;
1:43c3cae: import static org.junit.Assert.assertSame;
1:43c3cae: import static org.junit.Assert.assertTrue;
1:43c3cae: 
1:43c3cae: import java.util.Arrays;
1:43c3cae: import java.util.Collection;
1:43c3cae: import java.util.concurrent.TimeUnit;
1:43c3cae: 
1:43c3cae: import org.apache.activemq.AbstractVirtualDestTest;
1:43c3cae: import org.apache.activemq.broker.BrokerPlugin;
1:43c3cae: import org.apache.activemq.broker.BrokerService;
1:43c3cae: import org.apache.activemq.broker.region.DestinationInterceptor;
1:43c3cae: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1:43c3cae: import org.apache.activemq.broker.region.virtual.FilteredDestination;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:43c3cae: import org.apache.activemq.command.ActiveMQQueue;
1:43c3cae: import org.apache.activemq.command.ActiveMQTopic;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1:43c3cae: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1:43c3cae: import org.apache.activemq.util.Wait;
1:43c3cae: import org.junit.Test;
1:43c3cae: 
1:43c3cae: public class JavaVirtualDestTest extends AbstractVirtualDestTest {
1:43c3cae: 
1:43c3cae:     public static final int SLEEP = 2; // seconds
1:43c3cae:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1:43c3cae: 
1:43c3cae:     public void startBroker(BrokerService brokerService) throws Exception {
1:43c3cae:         this.brokerService = brokerService;
1:43c3cae:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:43c3cae:         brokerService.setPersistent(false);
1:43c3cae:         brokerService.start();
1:43c3cae:         brokerService.waitUntilStarted();
1:43c3cae: 
1:43c3cae:         javaConfigBroker =
1:43c3cae:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testNew() throws Exception {
1:43c3cae:         startBroker(new BrokerService());
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         // default config has support for VirtualTopic.>
1:43c3cae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("one interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:43c3cae:         assertEquals("default names in place", "VirtualTopic.>",
1:43c3cae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:43c3cae: 
1:43c3cae:         exerciseVirtualTopic("VirtualTopic.Default");
1:43c3cae: 
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertEquals("one interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:43c3cae:         assertEquals("new names in place", "A.>",
1:43c3cae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:43c3cae: 
1:43c3cae:         // apply again - ensure no change
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:43c3cae:     }
1:5db9af8: 
1:43c3cae:     @Test
1:43c3cae:     public void testNewComposite() throws Exception {
1:43c3cae:         startBroker(new BrokerService());
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:43c3cae:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:43c3cae:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1:43c3cae: 
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:43c3cae:     }
1:43c3cae: 
1:5db9af8:     @Test
1:5db9af8:     public void testNewCompositeApplyImmediately() throws Exception {
1:5db9af8:         startBroker(new BrokerService());
1:5db9af8:         assertTrue("broker alive", brokerService.isStarted());
1:5db9af8: 
1:5db9af8:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:5db9af8:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:5db9af8:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1:5db9af8: 
1:5db9af8:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue}, true);
1:5db9af8:         TimeUnit.SECONDS.sleep(SLEEP);
1:5db9af8: 
1:5db9af8:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:5db9af8:     }
1:5db9af8: 
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testModComposite() throws Exception {
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae: 
1:43c3cae:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:43c3cae:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:43c3cae:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1:43c3cae: 
1:43c3cae:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:43c3cae:                 buildInterceptor(new VirtualDestination[]{queue})});
1:43c3cae: 
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:43c3cae: 
1:43c3cae:         //Apply updated config
1:43c3cae:         CompositeQueue newConfig = buildCompositeQueue("VirtualDestination.CompositeQueue", false,
1:43c3cae:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:43c3cae:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{newConfig});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae: 
1:43c3cae:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:43c3cae:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.CompositeQueue");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testNewNoDefaultVirtualTopicSupport() throws Exception {
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setUseVirtualTopics(false);
1:43c3cae:         startBroker(brokerService);
1:43c3cae: 
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("one interceptor", 0, interceptors.length);
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("one interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:         //apply new config again, make sure still just 1 interceptor
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("one interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testNewWithMirrorQueueSupport() throws Exception {
1:43c3cae:         BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setUseMirroredQueues(true);
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("expected interceptor", 2, interceptors.length);
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("expected interceptor", 2, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:43c3cae: 
1:43c3cae:         // apply again - ensure no change
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testRemove() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:43c3cae:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1:43c3cae: 
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("one interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:43c3cae:         assertEquals("configured names in place", "A.>",
1:43c3cae:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1:43c3cae: 
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         //apply empty config - this removes all virtual destinations from the interceptor
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         forceAddDestination("AnyDest");
1:43c3cae: 
1:43c3cae:         assertTrue("getVirtualDestinations empty on time", Wait.waitFor(new Wait.Condition() {
1:43c3cae:             @Override
1:43c3cae:             public boolean isSatisified() {
1:43c3cae:                 return 0 == ((VirtualDestinationInterceptor)brokerService.getDestinationInterceptors()[0]).
1:43c3cae:                         getVirtualDestinations().length;
1:43c3cae:             }
1:43c3cae:         }));
1:43c3cae: 
1:43c3cae:         // reverse the remove, add again
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         // update will happen on addDestination
1:43c3cae:         exerciseVirtualTopic("A.NewOne");
1:43c3cae: 
1:43c3cae:         interceptors  = brokerService.getDestinationInterceptors();
1:43c3cae:         assertEquals("expected interceptor", 1, interceptors.length);
1:43c3cae:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testMod() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:43c3cae:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1:43c3cae: 
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         exerciseVirtualTopic("B.Default");
1:43c3cae: 
1:43c3cae:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:43c3cae:     }
1:43c3cae: 
1:5db9af8:     @Test
1:5db9af8:     public void testModApplyImmediately() throws Exception {
1:5db9af8:         final BrokerService brokerService = new BrokerService();
1:5db9af8:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:5db9af8:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1:5db9af8: 
1:5db9af8:         startBroker(brokerService);
1:5db9af8:         assertTrue("broker alive", brokerService.isStarted());
1:5db9af8: 
1:5db9af8:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:5db9af8:         exerciseVirtualTopic("A.Default");
1:5db9af8: 
1:5db9af8:         //apply new config
1:5db9af8:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)}, true);
1:5db9af8:         TimeUnit.SECONDS.sleep(SLEEP);
1:5db9af8:         exerciseVirtualTopic("B.Default");
1:5db9af8: 
1:5db9af8:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:5db9af8:     }
1:5db9af8: 
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testModWithMirroredQueue() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         brokerService.setUseMirroredQueues(true);
1:43c3cae:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:43c3cae:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1:43c3cae: 
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:43c3cae:         exerciseVirtualTopic("A.Default");
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae:         exerciseVirtualTopic("B.Default");
1:43c3cae: 
1:43c3cae:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testNewFilteredComposite() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         FilteredDestination filteredDestination = new FilteredDestination();
1:43c3cae:         filteredDestination.setSelector("odd = 'yes'");
1:43c3cae:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:43c3cae:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:43c3cae:                 Arrays.asList(filteredDestination));
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Test
1:43c3cae:     public void testModFilteredComposite() throws Exception {
1:43c3cae:         final BrokerService brokerService = new BrokerService();
1:43c3cae:         FilteredDestination filteredDestination = new FilteredDestination();
1:43c3cae:         filteredDestination.setSelector("odd = 'yes'");
1:43c3cae:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:43c3cae:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:43c3cae:                 Arrays.asList(filteredDestination));
1:43c3cae: 
1:43c3cae:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:43c3cae:                 buildInterceptor(new VirtualDestination[]{queue})});
1:43c3cae: 
1:43c3cae:         startBroker(brokerService);
1:43c3cae:         assertTrue("broker alive", brokerService.isStarted());
1:43c3cae: 
1:43c3cae:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:43c3cae: 
1:43c3cae:         filteredDestination = new FilteredDestination();
1:43c3cae:         filteredDestination.setSelector("odd = 'no'");
1:43c3cae:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:43c3cae:         queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:43c3cae:                 Arrays.asList(filteredDestination));
1:43c3cae: 
1:43c3cae:         //apply new config
1:43c3cae:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:43c3cae:         TimeUnit.SECONDS.sleep(SLEEP);
1:43c3cae: 
1:43c3cae:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:43c3cae:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: 
1:43c3cae:     protected static CompositeQueue buildCompositeQueue(String name, Collection<?> forwardTo) {
1:43c3cae:         return buildCompositeQueue(name, true, forwardTo);
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected static CompositeQueue buildCompositeQueue(String name, boolean forwardOnly,
1:43c3cae:             Collection<?> forwardTo) {
1:43c3cae:         CompositeQueue queue = new CompositeQueue();
1:43c3cae:         queue.setForwardOnly(forwardOnly);
1:43c3cae:         queue.setName(name);
1:43c3cae:         queue.setForwardTo(forwardTo);
1:43c3cae:         return queue;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected static VirtualTopic buildVirtualTopic(String name, boolean selectorAware) {
1:43c3cae:         VirtualTopic virtualTopic = new VirtualTopic();
1:43c3cae:         virtualTopic.setSelectorAware(selectorAware);
1:43c3cae:         virtualTopic.setName(name);
1:43c3cae:         return virtualTopic;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected static VirtualDestinationInterceptor buildInterceptor(VirtualDestination[] virtualDestinations) {
1:43c3cae:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:43c3cae:         virtualDestinationInterceptor.setVirtualDestinations(virtualDestinations);
1:43c3cae:         return virtualDestinationInterceptor;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:5db9af8
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testNewCompositeApplyImmediately() throws Exception {
1:         startBroker(new BrokerService());
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1: 
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue}, true);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testModApplyImmediately() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:         exerciseVirtualTopic("A.Default");
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)}, true);
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         exerciseVirtualTopic("B.Default");
1: 
1:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:     }
1: 
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.java;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.AbstractVirtualDestTest;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.CompositeQueue;
1: import org.apache.activemq.broker.region.virtual.FilteredDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationBroker;
1: import org.apache.activemq.plugin.java.JavaRuntimeConfigurationPlugin;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: public class JavaVirtualDestTest extends AbstractVirtualDestTest {
1: 
1:     public static final int SLEEP = 2; // seconds
1:     private JavaRuntimeConfigurationBroker javaConfigBroker;
1: 
1:     public void startBroker(BrokerService brokerService) throws Exception {
1:         this.brokerService = brokerService;
1:         brokerService.setPlugins(new BrokerPlugin[]{new JavaRuntimeConfigurationPlugin()});
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         javaConfigBroker =
1:                 (JavaRuntimeConfigurationBroker) brokerService.getBroker().getAdaptor(JavaRuntimeConfigurationBroker.class);
1:     }
1: 
1:     @Test
1:     public void testNew() throws Exception {
1:         startBroker(new BrokerService());
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         // default config has support for VirtualTopic.>
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("default names in place", "VirtualTopic.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         exerciseVirtualTopic("VirtualTopic.Default");
1: 
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("new names in place", "A.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         // apply again - ensure no change
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:     }
1:     @Test
1:     public void testNewComposite() throws Exception {
1:         startBroker(new BrokerService());
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1: 
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:     }
1: 
1: 
1:     @Test
1:     public void testModComposite() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1: 
1:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.CompositeQueue",
1:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1: 
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{queue})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1: 
1:         //Apply updated config
1:         CompositeQueue newConfig = buildCompositeQueue("VirtualDestination.CompositeQueue", false,
1:                 Arrays.asList(new ActiveMQQueue("VirtualDestination.QueueConsumer"),
1:                 new ActiveMQTopic("VirtualDestination.TopicConsumer")));
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{newConfig});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1: 
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.QueueConsumer");
1:         exerciseCompositeQueue("VirtualDestination.CompositeQueue", "VirtualDestination.CompositeQueue");
1:     }
1: 
1: 
1:     @Test
1:     public void testNewNoDefaultVirtualTopicSupport() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setUseVirtualTopics(false);
1:         startBroker(brokerService);
1: 
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 0, interceptors.length);
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         //apply new config again, make sure still just 1 interceptor
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:     }
1: 
1: 
1:     @Test
1:     public void testNewWithMirrorQueueSupport() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setUseMirroredQueues(true);
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 2, interceptors.length);
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.Default");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 2, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         VirtualDestinationInterceptor newValue = (VirtualDestinationInterceptor) interceptors[0];
1: 
1:         // apply again - ensure no change
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         assertSame("same instance", newValue, brokerService.getDestinationInterceptors()[0]);
1:     }
1: 
1:     @Test
1:     public void testRemove() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         DestinationInterceptor[] interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("one interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1: 
1:         exerciseVirtualTopic("A.Default");
1: 
1:         VirtualDestinationInterceptor defaultValue = (VirtualDestinationInterceptor) interceptors[0];
1:         assertEquals("configured names in place", "A.>",
1:                 defaultValue.getVirtualDestinations()[0].getVirtualDestination().getPhysicalName());
1: 
1:         exerciseVirtualTopic("A.Default");
1: 
1:         //apply empty config - this removes all virtual destinations from the interceptor
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         // update will happen on addDestination
1:         forceAddDestination("AnyDest");
1: 
1:         assertTrue("getVirtualDestinations empty on time", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() {
1:                 return 0 == ((VirtualDestinationInterceptor)brokerService.getDestinationInterceptors()[0]).
1:                         getVirtualDestinations().length;
1:             }
1:         }));
1: 
1:         // reverse the remove, add again
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("A.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         // update will happen on addDestination
1:         exerciseVirtualTopic("A.NewOne");
1: 
1:         interceptors  = brokerService.getDestinationInterceptors();
1:         assertEquals("expected interceptor", 1, interceptors.length);
1:         assertTrue("it is virtual topic interceptor", interceptors[0] instanceof VirtualDestinationInterceptor);
1:     }
1: 
1:     @Test
1:     public void testMod() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:         exerciseVirtualTopic("A.Default");
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         exerciseVirtualTopic("B.Default");
1: 
1:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:     }
1: 
1: 
1:     @Test
1:     public void testModWithMirroredQueue() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         brokerService.setUseMirroredQueues(true);
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{buildVirtualTopic("A.>", false)})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         assertEquals("one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:         exerciseVirtualTopic("A.Default");
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{buildVirtualTopic("B.>", false)});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1:         exerciseVirtualTopic("B.Default");
1: 
1:         assertEquals("still one interceptor", 1, brokerService.getDestinationInterceptors().length);
1:     }
1: 
1:     @Test
1:     public void testNewFilteredComposite() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         FilteredDestination filteredDestination = new FilteredDestination();
1:         filteredDestination.setSelector("odd = 'yes'");
1:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:                 Arrays.asList(filteredDestination));
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1:     }
1: 
1:     @Test
1:     public void testModFilteredComposite() throws Exception {
1:         final BrokerService brokerService = new BrokerService();
1:         FilteredDestination filteredDestination = new FilteredDestination();
1:         filteredDestination.setSelector("odd = 'yes'");
1:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:         CompositeQueue queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:                 Arrays.asList(filteredDestination));
1: 
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] {
1:                 buildInterceptor(new VirtualDestination[]{queue})});
1: 
1:         startBroker(brokerService);
1:         assertTrue("broker alive", brokerService.isStarted());
1: 
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "yes");
1: 
1:         filteredDestination = new FilteredDestination();
1:         filteredDestination.setSelector("odd = 'no'");
1:         filteredDestination.setQueue("VirtualDestination.QueueConsumer");
1:         queue = buildCompositeQueue("VirtualDestination.FilteredCompositeQueue",
1:                 Arrays.asList(filteredDestination));
1: 
1:         //apply new config
1:         javaConfigBroker.setVirtualDestinations(new VirtualDestination[]{queue});
1:         TimeUnit.SECONDS.sleep(SLEEP);
1: 
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:         exerciseFilteredCompositeQueue("VirtualDestination.FilteredCompositeQueue", "VirtualDestination.QueueConsumer", "no");
1:     }
1: 
1: 
1:     protected static CompositeQueue buildCompositeQueue(String name, Collection<?> forwardTo) {
1:         return buildCompositeQueue(name, true, forwardTo);
1:     }
1: 
1:     protected static CompositeQueue buildCompositeQueue(String name, boolean forwardOnly,
1:             Collection<?> forwardTo) {
1:         CompositeQueue queue = new CompositeQueue();
1:         queue.setForwardOnly(forwardOnly);
1:         queue.setName(name);
1:         queue.setForwardTo(forwardTo);
1:         return queue;
1:     }
1: 
1:     protected static VirtualTopic buildVirtualTopic(String name, boolean selectorAware) {
1:         VirtualTopic virtualTopic = new VirtualTopic();
1:         virtualTopic.setSelectorAware(selectorAware);
1:         virtualTopic.setName(name);
1:         return virtualTopic;
1:     }
1: 
1:     protected static VirtualDestinationInterceptor buildInterceptor(VirtualDestination[] virtualDestinations) {
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(virtualDestinations);
1:         return virtualDestinationInterceptor;
1:     }
1: 
1: }
============================================================================