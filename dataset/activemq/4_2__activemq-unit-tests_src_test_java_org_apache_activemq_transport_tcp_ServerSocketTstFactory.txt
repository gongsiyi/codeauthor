1:6b4509c: /**
1:6b4509c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b4509c:  * contributor license agreements.  See the NOTICE file distributed with
1:6b4509c:  * this work for additional information regarding copyright ownership.
1:6b4509c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b4509c:  * (the "License"); you may not use this file except in compliance with
1:6b4509c:  * the License.  You may obtain a copy of the License at
1:6b4509c:  *
1:6b4509c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6b4509c:  *
1:6b4509c:  * Unless required by applicable law or agreed to in writing, software
1:6b4509c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b4509c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b4509c:  * See the License for the specific language governing permissions and
1:6b4509c:  * limitations under the License.
1:6b4509c:  */
1:6b4509c: package org.apache.activemq.transport.tcp;
1:6b4509c: 
1:6b4509c: import java.io.IOException;
1:6b4509c: import java.net.InetAddress;
1:6b4509c: import java.net.ServerSocket;
1:6b4509c: import java.util.Random;
1:6b4509c: import javax.net.ServerSocketFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6b4509c: 
1:6b4509c: /**
1:6b4509c:  */
1:6b4509c: public class ServerSocketTstFactory extends ServerSocketFactory {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ServerSocketTstFactory.class);
1:6b4509c: 
1:6b4509c:     private class ServerSocketTst {
1:6b4509c: 
1:6b4509c: 	private final	ServerSocket	socket;
1:6b4509c: 
1:6b4509c: 	public ServerSocketTst(int port, Random rnd) throws IOException {
1:6b4509c: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port);
1:6b4509c: 	}
1:6b4509c: 
1:6b4509c: 	public ServerSocketTst(int port, int backlog, Random rnd) throws IOException {
1:6b4509c: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port, backlog);
1:6b4509c: 	}
1:6b4509c: 
1:6b4509c: 	public ServerSocketTst(int port, int backlog, InetAddress bindAddr, Random rnd) throws IOException {
1:6b4509c: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port, backlog, bindAddr);
1:6b4509c: 	}
1:6b4509c: 
1:6b4509c: 	public ServerSocket	getSocket() {
1:6b4509c: 		return this.socket;
1:6b4509c: 	}
1:6b4509c:     };
1:6b4509c: 
1:6b4509c:    private final Random	rnd;
1:6b4509c: 
1:6b4509c:    public ServerSocketTstFactory() {
1:6b4509c: 	super();
1:6b4509c: 	LOG.info("Creating a new ServerSocketTstFactory");
1:6b4509c: 	this.rnd = new Random();
1:6b4509c:    }
1:6b4509c: 
1:6b4509c:    public ServerSocket createServerSocket(int port) throws IOException {
1:6b4509c: 	ServerSocketTst	sSock = new ServerSocketTst(port, this.rnd);
1:6b4509c: 	return sSock.getSocket();
1:6b4509c:    }
1:6b4509c: 
1:6b4509c:    public ServerSocket createServerSocket(int port, int backlog) throws IOException {
1:6b4509c: 	ServerSocketTst	sSock = new ServerSocketTst(port, backlog, this.rnd);
1:6b4509c: 	return sSock.getSocket();
1:6b4509c:    }
1:6b4509c: 
1:6b4509c:    public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
1:6b4509c: 	ServerSocketTst	sSock = new ServerSocketTst(port, backlog, ifAddress, this.rnd);
1:6b4509c: 	return sSock.getSocket();
1:6b4509c:    }
1:6b4509c: 
1:6b4509c:    private final static ServerSocketTstFactory server = new ServerSocketTstFactory();
1:6b4509c: 
1:6b4509c:    public static ServerSocketTstFactory getDefault() {
1:6b4509c: 	return server;
1:6b4509c:    }
1:6b4509c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ServerSocketTstFactory.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b4509c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.ServerSocket;
1: import java.util.Random;
1: import javax.net.ServerSocketFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  */
1: public class ServerSocketTstFactory extends ServerSocketFactory {
0:     private static final Log LOG = LogFactory.getLog(ServerSocketTstFactory.class);
1: 
1:     private class ServerSocketTst {
1: 
1: 	private final	ServerSocket	socket;
1: 
1: 	public ServerSocketTst(int port, Random rnd) throws IOException {
1: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port);
1: 	}
1: 
1: 	public ServerSocketTst(int port, int backlog, Random rnd) throws IOException {
1: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port, backlog);
1: 	}
1: 
1: 	public ServerSocketTst(int port, int backlog, InetAddress bindAddr, Random rnd) throws IOException {
1: 		this.socket = ServerSocketFactory.getDefault().createServerSocket(port, backlog, bindAddr);
1: 	}
1: 
1: 	public ServerSocket	getSocket() {
1: 		return this.socket;
1: 	}
1:     };
1: 
1:    private final Random	rnd;
1: 
1:    public ServerSocketTstFactory() {
1: 	super();
1: 	LOG.info("Creating a new ServerSocketTstFactory");
1: 	this.rnd = new Random();
1:    }
1: 
1:    public ServerSocket createServerSocket(int port) throws IOException {
1: 	ServerSocketTst	sSock = new ServerSocketTst(port, this.rnd);
1: 	return sSock.getSocket();
1:    }
1: 
1:    public ServerSocket createServerSocket(int port, int backlog) throws IOException {
1: 	ServerSocketTst	sSock = new ServerSocketTst(port, backlog, this.rnd);
1: 	return sSock.getSocket();
1:    }
1: 
1:    public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException {
1: 	ServerSocketTst	sSock = new ServerSocketTst(port, backlog, ifAddress, this.rnd);
1: 	return sSock.getSocket();
1:    }
1: 
1:    private final static ServerSocketTstFactory server = new ServerSocketTstFactory();
1: 
1:    public static ServerSocketTstFactory getDefault() {
1: 	return server;
1:    }
1: }
============================================================================