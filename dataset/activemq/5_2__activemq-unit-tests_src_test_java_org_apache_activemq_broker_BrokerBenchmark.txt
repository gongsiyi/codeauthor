1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
26:d29ca2a: 
1:f812e34: import java.util.concurrent.Semaphore;
1:f812e34: import java.util.concurrent.atomic.AtomicInteger;
1:d29ca2a: 
1:f812e34: import junit.framework.Test;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * BrokerBenchmark is used to get an idea of the raw performance of a broker.
1:230a86c:  * Since the broker data structures using in message dispatching are under high
1:230a86c:  * contention from client requests, it's performance should be monitored closely
1:230a86c:  * since it typically is the biggest bottleneck in a high performance messaging
1:230a86c:  * fabric. The benchmarks are run under all the following combinations options:
1:230a86c:  * Queue vs. Topic, 1 vs. 10 producer threads, 1 vs. 10 consumer threads, and
1:230a86c:  * Persistent vs. Non-Persistent messages. Message Acking uses client ack style
1:230a86c:  * batch acking since that typically has the best ack performance.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class BrokerBenchmark extends BrokerTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(BrokerBenchmark.class);
1:d29ca2a: 
1:fc00993:     public int produceCount = Integer.parseInt(System.getProperty("PRODUCE_COUNT", "10000"));
1:d29ca2a:     public ActiveMQDestination destination;
1:fc00993:     public int prodcuerCount;
1:fc00993:     public int consumerCount;
1:d29ca2a:     public boolean deliveryMode;
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestPerformance() {
1:74a7a8b:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:230a86c:         addCombinationValues("PRODUCER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
1:230a86c:         addCombinationValues("CONSUMER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
1:230a86c:         addCombinationValues("CONSUMER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Boolean.TRUE});
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void testPerformance() throws Exception {
1:230a86c: 
1:fc00993:         LOG.info("Running Benchmark for destination=" + destination + ", producers=" + prodcuerCount + ", consumers=" + consumerCount + ", deliveryMode=" + deliveryMode);
1:fc00993:         final int consumeCount = destination.isTopic() ? consumerCount * produceCount : produceCount;
1:230a86c: 
1:fc00993:         final Semaphore consumersStarted = new Semaphore(1 - consumerCount);
1:fc00993:         final Semaphore producersFinished = new Semaphore(1 - prodcuerCount);
1:fc00993:         final Semaphore consumersFinished = new Semaphore(1 - consumerCount);
1:fc00993:         final ProgressPrinter printer = new ProgressPrinter(produceCount + consumeCount, 10);
1:230a86c: 
1:d29ca2a:         // Start a producer and consumer
1:230a86c: 
1:d29ca2a:         profilerPause("Benchmark ready.  Start profiler ");
1:230a86c: 
1:d29ca2a:         long start = System.currentTimeMillis();
1:230a86c: 
1:d29ca2a:         final AtomicInteger receiveCounter = new AtomicInteger(0);
1:fc00993:         for (int i = 0; i < consumerCount; i++) {
1:d29ca2a:             new Thread() {
1:d29ca2a:                 public void run() {
1:d29ca2a:                     try {
1:230a86c: 
1:230a86c:                         // Consume the messages
1:d29ca2a:                         StubConnection connection = new StubConnection(broker);
1:d29ca2a:                         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:                         connection.send(connectionInfo);
1:d29ca2a: 
1:d29ca2a:                         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:                         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:d29ca2a:                         consumerInfo.setPrefetchSize(1000);
1:d29ca2a:                         connection.send(sessionInfo);
1:d29ca2a:                         connection.send(consumerInfo);
1:230a86c: 
1:d29ca2a:                         consumersStarted.release();
1:230a86c: 
1:fc00993:                         while (receiveCounter.get() < consumeCount) {
1:230a86c: 
1:230a86c:                             int counter = 0;
1:d29ca2a:                             // Get a least 1 message.
1:d29ca2a:                             Message msg = receiveMessage(connection, 2000);
1:230a86c:                             if (msg != null) {
1:d29ca2a:                                 printer.increment();
1:d29ca2a:                                 receiveCounter.incrementAndGet();
1:230a86c: 
1:d29ca2a:                                 counter++;
1:230a86c: 
1:230a86c:                                 // Try to piggy back a few extra message acks if
1:230a86c:                                 // they are ready.
1:230a86c:                                 Message extra = null;
1:230a86c:                                 while ((extra = receiveMessage(connection, 0)) != null) {
1:230a86c:                                     msg = extra;
1:d29ca2a:                                     printer.increment();
1:d29ca2a:                                     receiveCounter.incrementAndGet();
1:d29ca2a:                                     counter++;
1:d29ca2a:                                 }
1:d29ca2a:                             }
1:230a86c: 
1:230a86c:                             if (msg != null) {
1:74a7a8b:                                 connection.send(createAck(consumerInfo, msg, counter, MessageAck.STANDARD_ACK_TYPE));
1:fc00993:                             } else if (receiveCounter.get() < consumeCount) {
1:fc00993:                                 LOG.info("Consumer stall, waiting for message #" + receiveCounter.get() + 1);
1:d29ca2a:                             }
1:d29ca2a:                         }
1:230a86c: 
1:230a86c:                         connection.send(closeConsumerInfo(consumerInfo));
1:d29ca2a:                     } catch (Throwable e) {
1:d29ca2a:                         e.printStackTrace();
1:d29ca2a:                     } finally {
1:230a86c:                         consumersFinished.release();
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:             }.start();
1:d29ca2a:         }
1:230a86c: 
1:230a86c:         // Make sure that the consumers are started first to avoid sending
1:230a86c:         // messages
1:d29ca2a:         // before a topic is subscribed so that those messages are not missed.
1:d29ca2a:         consumersStarted.acquire();
1:230a86c: 
1:d29ca2a:         // Send the messages in an async thread.
1:fc00993:         for (int i = 0; i < prodcuerCount; i++) {
1:d29ca2a:             new Thread() {
1:d29ca2a:                 public void run() {
1:d29ca2a:                     try {
1:d29ca2a:                         StubConnection connection = new StubConnection(broker);
1:d29ca2a:                         ConnectionInfo connectionInfo = createConnectionInfo();
1:d29ca2a:                         connection.send(connectionInfo);
1:230a86c: 
1:d29ca2a:                         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:d29ca2a:                         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:d29ca2a:                         connection.send(sessionInfo);
1:d29ca2a:                         connection.send(producerInfo);
1:230a86c: 
1:fc00993:                         for (int i = 0; i < produceCount / prodcuerCount; i++) {
1:d29ca2a:                             Message message = createMessage(producerInfo, destination);
1:d29ca2a:                             message.setPersistent(deliveryMode);
1:d29ca2a:                             message.setResponseRequired(false);
1:d29ca2a:                             connection.send(message);
1:d29ca2a:                             printer.increment();
1:d29ca2a:                         }
1:d29ca2a:                     } catch (Throwable e) {
1:d29ca2a:                         e.printStackTrace();
1:d29ca2a:                     } finally {
1:230a86c:                         producersFinished.release();
1:d29ca2a:                     }
1:d29ca2a:                 };
1:d29ca2a:             }.start();
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         producersFinished.acquire();
1:d29ca2a:         long end1 = System.currentTimeMillis();
1:d29ca2a:         consumersFinished.acquire();
1:d29ca2a:         long end2 = System.currentTimeMillis();
1:230a86c: 
1:fc00993:         LOG.info("Results for destination=" + destination + ", producers=" + prodcuerCount + ", consumers=" + consumerCount + ", deliveryMode=" + deliveryMode);
1:fc00993:         LOG.info("Produced at messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
1:fc00993:         LOG.info("Consumed at messages/sec: " + (consumeCount * 1000.0 / (end2 - start)));
1:d29ca2a:         profilerPause("Benchmark done.  Stop profiler ");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(BrokerBenchmark.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(BrokerBenchmark.class);
1:     public int produceCount = Integer.parseInt(System.getProperty("PRODUCE_COUNT", "10000"));
1:     public int prodcuerCount;
1:     public int consumerCount;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Running Benchmark for destination=" + destination + ", producers=" + prodcuerCount + ", consumers=" + consumerCount + ", deliveryMode=" + deliveryMode);
1:         final int consumeCount = destination.isTopic() ? consumerCount * produceCount : produceCount;
1:         final Semaphore consumersStarted = new Semaphore(1 - consumerCount);
1:         final Semaphore producersFinished = new Semaphore(1 - prodcuerCount);
1:         final Semaphore consumersFinished = new Semaphore(1 - consumerCount);
1:         final ProgressPrinter printer = new ProgressPrinter(produceCount + consumeCount, 10);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < consumerCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:                         while (receiveCounter.get() < consumeCount) {
/////////////////////////////////////////////////////////////////////////
1:                             } else if (receiveCounter.get() < consumeCount) {
1:                                 LOG.info("Consumer stall, waiting for message #" + receiveCounter.get() + 1);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < prodcuerCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:                         for (int i = 0; i < produceCount / prodcuerCount; i++) {
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Results for destination=" + destination + ", producers=" + prodcuerCount + ", consumers=" + consumerCount + ", deliveryMode=" + deliveryMode);
1:         LOG.info("Produced at messages/sec: " + (produceCount * 1000.0 / (end1 - start)));
1:         LOG.info("Consumed at messages/sec: " + (consumeCount * 1000.0 / (end2 - start)));
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
/////////////////////////////////////////////////////////////////////////
0:         log.info("Running Benchmark for destination=" + destination + ", producers=" + PRODUCER_COUNT + ", consumers=" + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
0:         final Semaphore consumersStarted = new Semaphore(1 - CONSUMER_COUNT);
0:         final Semaphore producersFinished = new Semaphore(1 - PRODUCER_COUNT);
0:         final Semaphore consumersFinished = new Semaphore(1 - CONSUMER_COUNT);
/////////////////////////////////////////////////////////////////////////
1:                                 connection.send(createAck(consumerInfo, msg, counter, MessageAck.STANDARD_ACK_TYPE));
/////////////////////////////////////////////////////////////////////////
0:         log.info("Results for destination=" + destination + ", producers=" + PRODUCER_COUNT + ", consumers=" + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import junit.framework.Test;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"),
0:                                                           new ActiveMQTopic("TEST")});
1:         addCombinationValues("deliveryMode", new Object[] {Boolean.TRUE});
0:         log.info("Running Benchmark for destination=" + destination + ", producers=" + PRODUCER_COUNT
0:                  + ", consumers=" + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
/////////////////////////////////////////////////////////////////////////
0:                                 connection.send(createAck(consumerInfo, msg, counter,
0:                                                           MessageAck.STANDARD_ACK_TYPE));
/////////////////////////////////////////////////////////////////////////
0:         log.info("Results for destination=" + destination + ", producers=" + PRODUCER_COUNT + ", consumers="
0:                  + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * BrokerBenchmark is used to get an idea of the raw performance of a broker.
1:  * Since the broker data structures using in message dispatching are under high
1:  * contention from client requests, it's performance should be monitored closely
1:  * since it typically is the biggest bottleneck in a high performance messaging
1:  * fabric. The benchmarks are run under all the following combinations options:
1:  * Queue vs. Topic, 1 vs. 10 producer threads, 1 vs. 10 consumer threads, and
1:  * Persistent vs. Non-Persistent messages. Message Acking uses client ack style
1:  * batch acking since that typically has the best ack performance.
0:     public int PRODUCE_COUNT = Integer.parseInt(System.getProperty("PRODUCE_COUNT", "10000"));
0:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST"), new ActiveMQTopic("TEST")});
1:         addCombinationValues("PRODUCER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
1:         addCombinationValues("CONSUMER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
1:         addCombinationValues("CONSUMER_COUNT", new Object[] {new Integer("1"), new Integer("10")});
0:         addCombinationValues("deliveryMode", new Object[] {
0:         // Boolean.FALSE,
0:                              Boolean.TRUE});
1:     public void testPerformance() throws Exception {
1: 
0:         log.info("Running Benchmark for destination=" + destination + ", producers=" + PRODUCER_COUNT + ", consumers=" + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
0:         final int CONSUME_COUNT = destination.isTopic() ? CONSUMER_COUNT * PRODUCE_COUNT : PRODUCE_COUNT;
1: 
0:         final Semaphore consumersStarted = new Semaphore(1 - (CONSUMER_COUNT));
0:         final Semaphore producersFinished = new Semaphore(1 - (PRODUCER_COUNT));
0:         final Semaphore consumersFinished = new Semaphore(1 - (CONSUMER_COUNT));
0:         final ProgressPrinter printer = new ProgressPrinter(PRODUCE_COUNT + CONSUME_COUNT, 10);
1: 
1: 
1: 
1: 
0:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1: 
1:                         // Consume the messages
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:                         while (receiveCounter.get() < CONSUME_COUNT) {
1: 
1:                             int counter = 0;
1:                             if (msg != null) {
1: 
1: 
1:                                 // Try to piggy back a few extra message acks if
1:                                 // they are ready.
1:                                 Message extra = null;
1:                                 while ((extra = receiveMessage(connection, 0)) != null) {
1:                                     msg = extra;
1: 
1:                             if (msg != null) {
0:                             } else if (receiveCounter.get() < CONSUME_COUNT) {
0:                                 log.info("Consumer stall, waiting for message #" + receiveCounter.get() + 1);
1: 
1:                         connection.send(closeConsumerInfo(consumerInfo));
1:                         consumersFinished.release();
1: 
1:         // Make sure that the consumers are started first to avoid sending
1:         // messages
1: 
0:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1: 
1: 
0:                         for (int i = 0; i < PRODUCE_COUNT / PRODUCER_COUNT; i++) {
/////////////////////////////////////////////////////////////////////////
1:                         producersFinished.release();
1: 
1: 
0:         log.info("Results for destination=" + destination + ", producers=" + PRODUCER_COUNT + ", consumers=" + CONSUMER_COUNT + ", deliveryMode=" + deliveryMode);
0:         log.info("Produced at messages/sec: " + (PRODUCE_COUNT * 1000.0 / (end1 - start)));
0:         log.info("Consumed at messages/sec: " + (CONSUME_COUNT * 1000.0 / (end2 - start)));
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Semaphore;
0: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void testPerformance() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: 
0: import junit.framework.Test;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.Semaphore;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * BrokerBenchmark is used to get an idea of the raw performance of a broker.  Since
0:  * the broker data structures using in message dispatching are under high contention from
0:  * client requests, it's performance should be monitored closely since it typically is the 
0:  * biggest bottleneck in a high performance messaging fabric.
1:  * 
0:  * The benchmarks are run under all the following combinations options:
1:  * 
0:  *  Queue vs. Topic, 1 vs. 10 producer threads, 1 vs. 10 consumer threads, and
0:  *  Persistent vs. Non-Persistent messages.
1:  *  
0:  * Message Acking uses client ack style batch acking since that typically has the
0:  * best ack performance.
1:  * 
0:  * @version $Revision: 1.9 $
1:  */
1: public class BrokerBenchmark extends BrokerTestSupport {
1:     
0:     public int PRODUCE_COUNT=Integer.parseInt(System.getProperty("PRODUCE_COUNT","10000"));
1:     public ActiveMQDestination destination;
0:     public int PRODUCER_COUNT;
0:     public int CONSUMER_COUNT;
1:     public boolean deliveryMode;
1: 
1:     public void initCombosForTestPerformance() {
0:         addCombinationValues("destination", new Object[]{
0:                 new ActiveMQQueue("TEST"), 
0:                 new ActiveMQTopic("TEST")
0:                 });
0:         addCombinationValues("PRODUCER_COUNT", new Object[]{
0:                 new Integer("1"), 
0:                 new Integer("10")});
0:         addCombinationValues("CONSUMER_COUNT", new Object[]{
0:                 new Integer("1"), 
0:                 new Integer("10")});
0:         addCombinationValues("CONSUMER_COUNT", new Object[]{
0:                 new Integer("1"), 
0:                 new Integer("10")});
0:         addCombinationValues( "deliveryMode", new Object[]{
0: //                Boolean.FALSE, 
0:                 Boolean.TRUE
0:                 } );
1:     }
1:     
0:     public void testPerformance() throws Throwable {
1:         
0:         System.out.println("Running Benchmark for destination="+destination+", producers="+PRODUCER_COUNT+", consumers="+CONSUMER_COUNT+", deliveryMode="+deliveryMode);
0:         final int CONSUME_COUNT = destination.isTopic() ? CONSUMER_COUNT*PRODUCE_COUNT : PRODUCE_COUNT;
1: 
0:         final Semaphore consumersStarted = new Semaphore(1-(CONSUMER_COUNT));         
0:         final Semaphore producersFinished = new Semaphore(1-(PRODUCER_COUNT)); 
0:         final Semaphore consumersFinished = new Semaphore(1-(CONSUMER_COUNT));         
0:         final ProgressPrinter printer = new ProgressPrinter(PRODUCE_COUNT+CONSUME_COUNT, 10);
1:         
1:         // Start a producer and consumer
1:     
1:         profilerPause("Benchmark ready.  Start profiler ");
1:         
1:         long start = System.currentTimeMillis();
1:         
1:         
1:         final AtomicInteger receiveCounter = new AtomicInteger(0);
0:         for( int i=0; i < CONSUMER_COUNT; i++) {
1:             new Thread() {
1:                 public void run() {
1:                     try {
1:                         
0:                         // Consume the messages     
1:                         StubConnection connection = new StubConnection(broker);
1:                         ConnectionInfo connectionInfo = createConnectionInfo();
1:                         connection.send(connectionInfo);
1: 
1:                         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:                         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:                         consumerInfo.setPrefetchSize(1000);
1:                         connection.send(sessionInfo);
1:                         connection.send(consumerInfo);
1:                         
1:                         consumersStarted.release();
1:                         
0:                         while( receiveCounter.get() < CONSUME_COUNT ) {
1:                 
0:                             int counter=0;
1:                             // Get a least 1 message.
1:                             Message msg = receiveMessage(connection, 2000);
0:                             if( msg!=null ) {
1:                                 printer.increment();
1:                                 receiveCounter.incrementAndGet();
1:                                 
1:                                 counter++;
1:                                 
0:                                 // Try to piggy back a few extra message acks if they are ready.
0:                                 Message extra=null;
0:                                 while( (extra = receiveMessage(connection,0))!=null ) {
0:                                     msg=extra;
1:                                     printer.increment();
1:                                     receiveCounter.incrementAndGet();
1:                                     counter++;
1:                                 }
1:                             }
1:                             
1:                             
0:                             if(msg!=null) {
0:                                 connection.send(createAck(consumerInfo, msg, counter, MessageAck.STANDARD_ACK_TYPE));
0:                             } else if ( receiveCounter.get() < CONSUME_COUNT )  {
0:                                 System.out.println("Consumer stall, waiting for message #"+receiveCounter.get()+1);
1:                             }
1:                         }
1:                         
0:                         connection.send(closeConsumerInfo(consumerInfo));                        
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                     } finally {
0:                         consumersFinished.release();                
1:                     }
1:                 }
1: 
1:             }.start();
1:         }
1:         
0:         // Make sure that the consumers are started first to avoid sending messages
1:         // before a topic is subscribed so that those messages are not missed.
1:         consumersStarted.acquire();
1:         
1:         // Send the messages in an async thread.
0:         for( int i=0; i < PRODUCER_COUNT; i++) {
1:             new Thread() {
1:                 public void run() {
1:                     try {
1:                         StubConnection connection = new StubConnection(broker);
1:                         ConnectionInfo connectionInfo = createConnectionInfo();
1:                         connection.send(connectionInfo);
1:                         
1:                         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:                         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:                         connection.send(sessionInfo);
1:                         connection.send(producerInfo);
1:     
0:                         for(int i=0; i < PRODUCE_COUNT/PRODUCER_COUNT; i++) {
1:                             Message message = createMessage(producerInfo, destination);
1:                             message.setPersistent(deliveryMode);
1:                             message.setResponseRequired(false);
1:                             connection.send(message);
1:                             printer.increment();
1:                         }
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                     } finally {
0:                         producersFinished.release();                
1:                     }
1:                 };
1:             }.start();
1:         }
1:         
1:         producersFinished.acquire();
1:         long end1 = System.currentTimeMillis();
1:         consumersFinished.acquire();
1:         long end2 = System.currentTimeMillis();
1:         
0:         System.out.println("Results for destination="+destination+", producers="+PRODUCER_COUNT+", consumers="+CONSUMER_COUNT+", deliveryMode="+deliveryMode);
0:         System.out.println("Produced at messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
0:         System.out.println("Consumed at messages/sec: "+ (CONSUME_COUNT*1000.0/(end2-start)));        
1:         profilerPause("Benchmark done.  Stop profiler ");
1:     }
1: 
1:     public static Test suite() {
1:         return suite(BrokerBenchmark.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(BrokerBenchmark.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(BrokerBenchmark.class);
0: 
/////////////////////////////////////////////////////////////////////////
0:         log.info("Running Benchmark for destination="+destination+", producers="+PRODUCER_COUNT+", consumers="+CONSUMER_COUNT+", deliveryMode="+deliveryMode);
/////////////////////////////////////////////////////////////////////////
0:                                 log.info("Consumer stall, waiting for message #"+receiveCounter.get()+1);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Results for destination="+destination+", producers="+PRODUCER_COUNT+", consumers="+CONSUMER_COUNT+", deliveryMode="+deliveryMode);
0:         log.info("Produced at messages/sec: "+ (PRODUCE_COUNT*1000.0/(end1-start)));
0:         log.info("Consumed at messages/sec: "+ (CONSUME_COUNT*1000.0/(end2-start)));        
============================================================================