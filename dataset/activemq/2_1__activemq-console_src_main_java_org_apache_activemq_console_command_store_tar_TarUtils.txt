1:3f32507: /*
1:3f32507:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  *  contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  *  this work for additional information regarding copyright ownership.
1:3f32507:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  *  (the "License"); you may not use this file except in compliance with
1:3f32507:  *  the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  *  Unless required by applicable law or agreed to in writing, software
1:3f32507:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  *  See the License for the specific language governing permissions and
1:3f32507:  *  limitations under the License.
1:3f32507:  *
1:3f32507:  */
1:3f32507: 
1:3f32507: /*
1:3f32507:  * This package is based on the work done by Timothy Gerard Endres
1:3f32507:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:3f32507:  */
1:3f32507: 
1:3f32507: package org.apache.activemq.console.command.store.tar;
1:3f32507: 
1:3f32507: /**
1:3f32507:  * This class provides static utility methods to work with byte streams.
1:3f32507:  *
1:3f32507:  */
1:3f32507: // CheckStyle:HideUtilityClassConstructorCheck OFF (bc)
1:3f32507: public class TarUtils {
1:3f32507: 
1:3f32507:     private static final int BYTE_MASK = 255;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Parse an octal string from a header buffer. This is used for the
1:3f32507:      * file permission mode value.
1:3f32507:      *
1:3f32507:      * @param header The header buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The long value of the octal string.
1:3f32507:      */
1:3f32507:     public static long parseOctal(byte[] header, int offset, int length) {
1:3f32507:         long    result = 0;
1:3f32507:         boolean stillPadding = true;
1:3f32507:         int     end = offset + length;
1:3f32507: 
1:3f32507:         for (int i = offset; i < end; ++i) {
1:3f32507:             if (header[i] == 0) {
1:3f32507:                 break;
1:3f32507:             }
1:3f32507: 
1:3f32507:             if (header[i] == (byte) ' ' || header[i] == '0') {
1:3f32507:                 if (stillPadding) {
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (header[i] == (byte) ' ') {
1:3f32507:                     break;
1:3f32507:                 }
1:3f32507:             }
1:3f32507: 
1:3f32507:             stillPadding = false;
1:3f32507:             // CheckStyle:MagicNumber OFF
1:3f32507:             result = (result << 3) + (header[i] - '0');
1:3f32507:             // CheckStyle:MagicNumber ON
1:3f32507:         }
1:3f32507: 
1:3f32507:         return result;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Parse an entry name from a header buffer.
1:3f32507:      *
1:3f32507:      * @param header The header buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The header's entry name.
1:3f32507:      */
1:3f32507:     public static StringBuffer parseName(byte[] header, int offset, int length) {
1:3f32507:         StringBuffer result = new StringBuffer(length);
1:3f32507:         int          end = offset + length;
1:3f32507: 
1:3f32507:         for (int i = offset; i < end; ++i) {
1:3f32507:             if (header[i] == 0) {
1:3f32507:                 break;
1:3f32507:             }
1:3f32507: 
1:3f32507:             result.append((char) header[i]);
1:3f32507:         }
1:3f32507: 
1:3f32507:         return result;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Determine the number of bytes in an entry name.
1:3f32507:      *
1:3f32507:      * @param name The header name from which to parse.
1:3f32507:      * @param buf The buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The number of bytes in a header's entry name.
1:3f32507:      */
1:3f32507:     public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {
1:3f32507:         int i;
1:3f32507: 
1:3f32507:         for (i = 0; i < length && i < name.length(); ++i) {
1:3f32507:             buf[offset + i] = (byte) name.charAt(i);
1:3f32507:         }
1:3f32507: 
1:3f32507:         for (; i < length; ++i) {
1:3f32507:             buf[offset + i] = 0;
1:3f32507:         }
1:3f32507: 
1:3f32507:         return offset + length;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Parse an octal integer from a header buffer.
1:3f32507:      *
1:3f32507:      * @param value The header value
1:3f32507:      * @param buf The buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The integer value of the octal bytes.
1:3f32507:      */
1:3f32507:     public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
1:3f32507:         int    idx = length - 1;
1:3f32507: 
1:3f32507:         buf[offset + idx] = 0;
1:3f32507:         --idx;
1:3f32507:         buf[offset + idx] = (byte) ' ';
1:3f32507:         --idx;
1:3f32507: 
1:3f32507:         if (value == 0) {
1:3f32507:             buf[offset + idx] = (byte) '0';
1:3f32507:             --idx;
1:3f32507:         } else {
1:3f32507:             for (long val = value; idx >= 0 && val > 0; --idx) {
1:3f32507:                 // CheckStyle:MagicNumber OFF
1:3f32507:                 buf[offset + idx] = (byte) ((byte) '0' + (byte) (val & 7));
1:3f32507:                 val = val >> 3;
1:3f32507:                 // CheckStyle:MagicNumber ON
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         for (; idx >= 0; --idx) {
1:3f32507:             buf[offset + idx] = (byte) ' ';
1:3f32507:         }
1:3f32507: 
1:3f32507:         return offset + length;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Parse an octal long integer from a header buffer.
1:3f32507:      *
1:3f32507:      * @param value The header value
1:3f32507:      * @param buf The buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The long value of the octal bytes.
1:3f32507:      */
1:3f32507:     public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {
1:3f32507:         byte[] temp = new byte[length + 1];
1:3f32507: 
1:3f32507:         getOctalBytes(value, temp, 0, length + 1);
1:3f32507:         System.arraycopy(temp, 0, buf, offset, length);
1:3f32507: 
1:3f32507:         return offset + length;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Parse the checksum octal integer from a header buffer.
1:3f32507:      *
1:3f32507:      * @param value The header value
1:3f32507:      * @param buf The buffer from which to parse.
1:3f32507:      * @param offset The offset into the buffer from which to parse.
1:3f32507:      * @param length The number of header bytes to parse.
1:3f32507:      * @return The integer value of the entry's checksum.
1:3f32507:      */
1:3f32507:     public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {
1:3f32507:         getOctalBytes(value, buf, offset, length);
1:3f32507: 
1:3f32507:         buf[offset + length - 1] = (byte) ' ';
1:3f32507:         buf[offset + length - 2] = 0;
1:3f32507: 
1:3f32507:         return offset + length;
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Compute the checksum of a tar entry header.
1:3f32507:      *
1:3f32507:      * @param buf The tar entry's header buffer.
1:3f32507:      * @return The computed checksum.
1:3f32507:      */
1:3f32507:     public static long computeCheckSum(byte[] buf) {
1:3f32507:         long sum = 0;
1:3f32507: 
1:3f32507:         for (int i = 0; i < buf.length; ++i) {
1:3f32507:             sum += BYTE_MASK & buf[i];
1:3f32507:         }
1:3f32507: 
1:3f32507:         return sum;
1:3f32507:     }
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  *
1:  */
1: 
1: /*
1:  * This package is based on the work done by Timothy Gerard Endres
1:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:  */
1: 
1: package org.apache.activemq.console.command.store.tar;
1: 
1: /**
1:  * This class provides static utility methods to work with byte streams.
1:  *
1:  */
1: // CheckStyle:HideUtilityClassConstructorCheck OFF (bc)
1: public class TarUtils {
1: 
1:     private static final int BYTE_MASK = 255;
1: 
1:     /**
1:      * Parse an octal string from a header buffer. This is used for the
1:      * file permission mode value.
1:      *
1:      * @param header The header buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The long value of the octal string.
1:      */
1:     public static long parseOctal(byte[] header, int offset, int length) {
1:         long    result = 0;
1:         boolean stillPadding = true;
1:         int     end = offset + length;
1: 
1:         for (int i = offset; i < end; ++i) {
1:             if (header[i] == 0) {
1:                 break;
1:             }
1: 
1:             if (header[i] == (byte) ' ' || header[i] == '0') {
1:                 if (stillPadding) {
1:                     continue;
1:                 }
1: 
1:                 if (header[i] == (byte) ' ') {
1:                     break;
1:                 }
1:             }
1: 
1:             stillPadding = false;
1:             // CheckStyle:MagicNumber OFF
1:             result = (result << 3) + (header[i] - '0');
1:             // CheckStyle:MagicNumber ON
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Parse an entry name from a header buffer.
1:      *
1:      * @param header The header buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The header's entry name.
1:      */
1:     public static StringBuffer parseName(byte[] header, int offset, int length) {
1:         StringBuffer result = new StringBuffer(length);
1:         int          end = offset + length;
1: 
1:         for (int i = offset; i < end; ++i) {
1:             if (header[i] == 0) {
1:                 break;
1:             }
1: 
1:             result.append((char) header[i]);
1:         }
1: 
1:         return result;
1:     }
1: 
1:     /**
1:      * Determine the number of bytes in an entry name.
1:      *
1:      * @param name The header name from which to parse.
1:      * @param buf The buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The number of bytes in a header's entry name.
1:      */
1:     public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {
1:         int i;
1: 
1:         for (i = 0; i < length && i < name.length(); ++i) {
1:             buf[offset + i] = (byte) name.charAt(i);
1:         }
1: 
1:         for (; i < length; ++i) {
1:             buf[offset + i] = 0;
1:         }
1: 
1:         return offset + length;
1:     }
1: 
1:     /**
1:      * Parse an octal integer from a header buffer.
1:      *
1:      * @param value The header value
1:      * @param buf The buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The integer value of the octal bytes.
1:      */
1:     public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
1:         int    idx = length - 1;
1: 
1:         buf[offset + idx] = 0;
1:         --idx;
1:         buf[offset + idx] = (byte) ' ';
1:         --idx;
1: 
1:         if (value == 0) {
1:             buf[offset + idx] = (byte) '0';
1:             --idx;
1:         } else {
1:             for (long val = value; idx >= 0 && val > 0; --idx) {
1:                 // CheckStyle:MagicNumber OFF
1:                 buf[offset + idx] = (byte) ((byte) '0' + (byte) (val & 7));
1:                 val = val >> 3;
1:                 // CheckStyle:MagicNumber ON
1:             }
1:         }
1: 
1:         for (; idx >= 0; --idx) {
1:             buf[offset + idx] = (byte) ' ';
1:         }
1: 
1:         return offset + length;
1:     }
1: 
1:     /**
1:      * Parse an octal long integer from a header buffer.
1:      *
1:      * @param value The header value
1:      * @param buf The buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The long value of the octal bytes.
1:      */
1:     public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {
1:         byte[] temp = new byte[length + 1];
1: 
1:         getOctalBytes(value, temp, 0, length + 1);
1:         System.arraycopy(temp, 0, buf, offset, length);
1: 
1:         return offset + length;
1:     }
1: 
1:     /**
1:      * Parse the checksum octal integer from a header buffer.
1:      *
1:      * @param value The header value
1:      * @param buf The buffer from which to parse.
1:      * @param offset The offset into the buffer from which to parse.
1:      * @param length The number of header bytes to parse.
1:      * @return The integer value of the entry's checksum.
1:      */
1:     public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {
1:         getOctalBytes(value, buf, offset, length);
1: 
1:         buf[offset + length - 1] = (byte) ' ';
1:         buf[offset + length - 2] = 0;
1: 
1:         return offset + length;
1:     }
1: 
1:     /**
1:      * Compute the checksum of a tar entry header.
1:      *
1:      * @param buf The tar entry's header buffer.
1:      * @return The computed checksum.
1:      */
1:     public static long computeCheckSum(byte[] buf) {
1:         long sum = 0;
1: 
1:         for (int i = 0; i < buf.length; ++i) {
1:             sum += BYTE_MASK & buf[i];
1:         }
1: 
1:         return sum;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
0: /*
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  *
0:  */
0: 
0: /*
0:  * This package is based on the work done by Timothy Gerard Endres
0:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
0:  */
0: 
0: package org.apache.activemq.console.command.store.tar;
0: 
0: /**
0:  * This class provides static utility methods to work with byte streams.
0:  *
0:  */
0: // CheckStyle:HideUtilityClassConstructorCheck OFF (bc)
0: public class TarUtils {
0: 
0:     private static final int BYTE_MASK = 255;
0: 
0:     /**
0:      * Parse an octal string from a header buffer. This is used for the
0:      * file permission mode value.
0:      *
0:      * @param header The header buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The long value of the octal string.
0:      */
0:     public static long parseOctal(byte[] header, int offset, int length) {
0:         long    result = 0;
0:         boolean stillPadding = true;
0:         int     end = offset + length;
0: 
0:         for (int i = offset; i < end; ++i) {
0:             if (header[i] == 0) {
0:                 break;
0:             }
0: 
0:             if (header[i] == (byte) ' ' || header[i] == '0') {
0:                 if (stillPadding) {
0:                     continue;
0:                 }
0: 
0:                 if (header[i] == (byte) ' ') {
0:                     break;
0:                 }
0:             }
0: 
0:             stillPadding = false;
0:             // CheckStyle:MagicNumber OFF
0:             result = (result << 3) + (header[i] - '0');
0:             // CheckStyle:MagicNumber ON
0:         }
0: 
0:         return result;
0:     }
0: 
0:     /**
0:      * Parse an entry name from a header buffer.
0:      *
0:      * @param header The header buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The header's entry name.
0:      */
0:     public static StringBuffer parseName(byte[] header, int offset, int length) {
0:         StringBuffer result = new StringBuffer(length);
0:         int          end = offset + length;
0: 
0:         for (int i = offset; i < end; ++i) {
0:             if (header[i] == 0) {
0:                 break;
0:             }
0: 
0:             result.append((char) header[i]);
0:         }
0: 
0:         return result;
0:     }
0: 
0:     /**
0:      * Determine the number of bytes in an entry name.
0:      *
0:      * @param name The header name from which to parse.
0:      * @param buf The buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The number of bytes in a header's entry name.
0:      */
0:     public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {
0:         int i;
0: 
0:         for (i = 0; i < length && i < name.length(); ++i) {
0:             buf[offset + i] = (byte) name.charAt(i);
0:         }
0: 
0:         for (; i < length; ++i) {
0:             buf[offset + i] = 0;
0:         }
0: 
0:         return offset + length;
0:     }
0: 
0:     /**
0:      * Parse an octal integer from a header buffer.
0:      *
0:      * @param value The header value
0:      * @param buf The buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The integer value of the octal bytes.
0:      */
0:     public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
0:         int    idx = length - 1;
0: 
0:         buf[offset + idx] = 0;
0:         --idx;
0:         buf[offset + idx] = (byte) ' ';
0:         --idx;
0: 
0:         if (value == 0) {
0:             buf[offset + idx] = (byte) '0';
0:             --idx;
0:         } else {
0:             for (long val = value; idx >= 0 && val > 0; --idx) {
0:                 // CheckStyle:MagicNumber OFF
0:                 buf[offset + idx] = (byte) ((byte) '0' + (byte) (val & 7));
0:                 val = val >> 3;
0:                 // CheckStyle:MagicNumber ON
0:             }
0:         }
0: 
0:         for (; idx >= 0; --idx) {
0:             buf[offset + idx] = (byte) ' ';
0:         }
0: 
0:         return offset + length;
0:     }
0: 
0:     /**
0:      * Parse an octal long integer from a header buffer.
0:      *
0:      * @param value The header value
0:      * @param buf The buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The long value of the octal bytes.
0:      */
0:     public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {
0:         byte[] temp = new byte[length + 1];
0: 
0:         getOctalBytes(value, temp, 0, length + 1);
0:         System.arraycopy(temp, 0, buf, offset, length);
0: 
0:         return offset + length;
0:     }
0: 
0:     /**
0:      * Parse the checksum octal integer from a header buffer.
0:      *
0:      * @param value The header value
0:      * @param buf The buffer from which to parse.
0:      * @param offset The offset into the buffer from which to parse.
0:      * @param length The number of header bytes to parse.
0:      * @return The integer value of the entry's checksum.
0:      */
0:     public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {
0:         getOctalBytes(value, buf, offset, length);
0: 
0:         buf[offset + length - 1] = (byte) ' ';
0:         buf[offset + length - 2] = 0;
0: 
0:         return offset + length;
0:     }
0: 
0:     /**
0:      * Compute the checksum of a tar entry header.
0:      *
0:      * @param buf The tar entry's header buffer.
0:      * @return The computed checksum.
0:      */
0:     public static long computeCheckSum(byte[] buf) {
0:         long sum = 0;
0: 
0:         for (int i = 0; i < buf.length; ++i) {
0:             sum += BYTE_MASK & buf[i];
0:         }
0: 
0:         return sum;
0:     }
0: }
============================================================================