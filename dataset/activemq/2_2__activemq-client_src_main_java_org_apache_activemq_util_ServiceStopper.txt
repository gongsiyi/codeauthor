1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
2:d29ca2a: 
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.Service;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A helper class used to stop a bunch of services, catching and logging any
1:d29ca2a:  * exceptions and then throwing the first exception when everything is stoped.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class ServiceStopper {
1:d29ca2a:     private Throwable firstException;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Stops the given service, catching any exceptions that are thrown.
1:d29ca2a:      */
1:d29ca2a:     public void stop(Service service) {
1:d29ca2a:         try {
1:f812e34:             if (service != null) {
1:6412d65:                 service.stop();
1:6412d65:             }
1:f812e34:         } catch (Exception e) {
1:d29ca2a:             onException(service, e);
5:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Performs the given code to stop some service handling the exceptions
1:d29ca2a:      * which may be thrown properly
1:d29ca2a:      */
1:d29ca2a:     public void run(Callback stopClosure) {
1:d29ca2a:         try {
1:d29ca2a:             stopClosure.execute();
1:f812e34:         } catch (Throwable e) {
1:d29ca2a:             onException(stopClosure, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Stops a list of services
1:d29ca2a:      */
1:d29ca2a:     public void stopServices(List services) {
1:d29ca2a:         for (Iterator iter = services.iterator(); iter.hasNext();) {
1:f812e34:             Service service = (Service)iter.next();
1:d29ca2a:             stop(service);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onException(Object owner, Throwable e) {
1:d29ca2a:         logError(owner, e);
1:d29ca2a:         if (firstException == null) {
1:d29ca2a:             firstException = e;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Throws the first exception that was thrown if there was one.
1:d29ca2a:      */
1:d29ca2a:     public void throwFirstException() throws Exception {
1:d29ca2a:         if (firstException != null) {
1:d29ca2a:             if (firstException instanceof Exception) {
1:f812e34:                 Exception e = (Exception)firstException;
1:d29ca2a:                 throw e;
1:f812e34:             } else if (firstException instanceof RuntimeException) {
1:f812e34:                 RuntimeException e = (RuntimeException)firstException;
1:d29ca2a:                 throw e;
1:f812e34:             } else {
1:d29ca2a:                 throw new RuntimeException("Unknown type of exception: " + firstException, firstException);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void logError(Object service, Throwable e) {
1:8bf987b:         Logger log = LoggerFactory.getLogger(service.getClass());
1:d29ca2a:         log.error("Could not stop service: " + service + ". Reason: " + e, e);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.List;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             if (service != null) {
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:             Service service = (Service)iter.next();
/////////////////////////////////////////////////////////////////////////
1:                 Exception e = (Exception)firstException;
1:             } else if (firstException instanceof RuntimeException) {
1:                 RuntimeException e = (RuntimeException)firstException;
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:6412d65
/////////////////////////////////////////////////////////////////////////
0:             if( service!=null ) {
1:                 service.stop();
1:             }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import org.apache.activemq.Service;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
1:  * A helper class used to stop a bunch of services, catching and logging any
1:  * exceptions and then throwing the first exception when everything is stoped.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ServiceStopper {
1:     private Throwable firstException;
1: 
1:     /**
1:      * Stops the given service, catching any exceptions that are thrown.
1:      */
1:     public void stop(Service service) {
1:         try {
0:             service.stop();
1:         }
0:         catch (Exception e) {
1:             onException(service, e);
1:         }
1:     }
1: 
1:     /**
1:      * Performs the given code to stop some service handling the exceptions
1:      * which may be thrown properly
1:      */
1:     public void run(Callback stopClosure) {
1:         try {
1:             stopClosure.execute();
1:         }
0:         catch (Throwable e) {
1:             onException(stopClosure, e);
1:         }
1:     }
1: 
1:     /**
1:      * Stops a list of services
1:      */
1:     public void stopServices(List services) {
1:         for (Iterator iter = services.iterator(); iter.hasNext();) {
0:             Service service = (Service) iter.next();
1:             stop(service);
1:         }
1:     }
1: 
1:     public void onException(Object owner, Throwable e) {
1:         logError(owner, e);
1:         if (firstException == null) {
1:             firstException = e;
1:         }
1:     }
1: 
1:     /**
1:      * Throws the first exception that was thrown if there was one.
1:      */
1:     public void throwFirstException() throws Exception {
1:         if (firstException != null) {
1:             if (firstException instanceof Exception) {
0:                 Exception e = (Exception) firstException;
1:                 throw e;
1:             }
0:             else if (firstException instanceof RuntimeException) {
0:                 RuntimeException e = (RuntimeException) firstException;
1:                 throw e;
1:             }
0:             else {
1:                 throw new RuntimeException("Unknown type of exception: " + firstException, firstException);
1:             }
1:         }
1:     }
1: 
1:     protected void logError(Object service, Throwable e) {
0:         Log log = LogFactory.getLog(service.getClass());
1:         log.error("Could not stop service: " + service + ". Reason: " + e, e);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:         Logger log = LoggerFactory.getLogger(service.getClass());
============================================================================