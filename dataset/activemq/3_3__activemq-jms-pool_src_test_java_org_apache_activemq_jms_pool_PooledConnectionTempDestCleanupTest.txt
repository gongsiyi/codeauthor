1:6687d56: /**
1:6687d56:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6687d56:  * contributor license agreements.  See the NOTICE file distributed with
1:6687d56:  * this work for additional information regarding copyright ownership.
1:6687d56:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6687d56:  * (the "License"); you may not use this file except in compliance with
1:6687d56:  * the License.  You may obtain a copy of the License at
1:6687d56:  *
1:6687d56:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6687d56:  *
1:6687d56:  * Unless required by applicable law or agreed to in writing, software
1:6687d56:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6687d56:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6687d56:  * See the License for the specific language governing permissions and
1:6687d56:  * limitations under the License.
1:6687d56:  */
3:6687d56: 
1:b66559e: package org.apache.activemq.jms.pool;
1:6687d56: 
1:6687d56: import static org.junit.Assert.assertTrue;
1:6687d56: 
1:4e6cbcd: import java.net.URI;
1:4e6cbcd: 
1:6687d56: import javax.jms.Connection;
1:6687d56: import javax.jms.Destination;
1:6687d56: import javax.jms.JMSException;
1:6687d56: import javax.jms.Session;
1:6687d56: import javax.jms.TemporaryQueue;
1:6687d56: 
1:6687d56: import org.apache.activemq.ActiveMQConnectionFactory;
1:6687d56: import org.apache.activemq.broker.BrokerService;
1:4e6cbcd: import org.apache.activemq.broker.TransportConnector;
1:6687d56: import org.apache.activemq.broker.region.RegionBroker;
1:6687d56: import org.junit.After;
1:6687d56: import org.junit.Before;
1:4e6cbcd: import org.junit.Rule;
1:6687d56: import org.junit.Test;
1:4e6cbcd: import org.junit.rules.TestName;
1:6687d56: 
1:6687d56: /**
1:6687d56:  * Test of lingering temporary destinations on pooled connections when the
1:6687d56:  * underlying connections are reused. Also tests that closing one
1:6687d56:  * PooledConnection does not delete the temporary destinations of another
1:6687d56:  * PooledConnection that uses the same underlying ConnectionPool.
1:6687d56:  *
1:6687d56:  * jira: AMQ-3457
1:6687d56:  */
1:e6597c4: public class PooledConnectionTempDestCleanupTest extends JmsPoolTestSupport {
1:6687d56: 
1:4e6cbcd:     @Rule
1:4e6cbcd:     public TestName testName = new TestName();
1:4e6cbcd: 
1:6687d56:     protected ActiveMQConnectionFactory directConnFact;
1:6687d56:     protected Connection directConn1;
1:6687d56:     protected Connection directConn2;
1:6687d56: 
1:6687d56:     protected PooledConnectionFactory pooledConnFact;
1:6687d56:     protected Connection pooledConn1;
1:6687d56:     protected Connection pooledConn2;
1:6687d56: 
1:6687d56:     protected TemporaryQueue tempDest;
1:6687d56:     protected TemporaryQueue otherTempDest;
1:6687d56: 
1:6687d56:     /**
1:6687d56:      * Prepare to run a test case: create, configure, and start the embedded
1:6687d56:      * broker, as well as creating the client connections to the broker.
1:6687d56:      */
1:e6597c4:     @Override
1:6687d56:     @Before
1:e6597c4:     public void setUp() throws java.lang.Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         configureBroker(brokerService);
1:e6597c4:         brokerService.start();
1:e6597c4:         brokerService.waitUntilStarted();
1:6687d56: 
1:6687d56:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
1:4e6cbcd:         directConnFact = new ActiveMQConnectionFactory(getBrokerConnectionURI());
1:b66559e:         pooledConnFact = new PooledConnectionFactory();
1:b66559e:         pooledConnFact.setConnectionFactory(directConnFact);
1:6687d56: 
1:6687d56:         // Prepare the connections
1:6687d56:         directConn1 = directConnFact.createConnection();
1:6687d56:         directConn1.start();
1:6687d56:         directConn2 = directConnFact.createConnection();
1:6687d56:         directConn2.start();
1:6687d56: 
1:6687d56:         pooledConn1 = pooledConnFact.createConnection();
1:6687d56:         pooledConn1.start();
1:6687d56:         pooledConn2 = pooledConnFact.createConnection();
1:6687d56:         pooledConn2.start();
2:6687d56:     }
1:6687d56: 
1:e6597c4:     @Override
1:6687d56:     @After
1:e6597c4:     public void tearDown() throws java.lang.Exception {
2:6687d56:         try {
1:6687d56:             pooledConn1.stop();
2:6687d56:         } catch (JMSException jms_exc) {
1:6687d56:         }
1:6687d56:         try {
1:6687d56:             pooledConn2.stop();
1:6687d56:         } catch (JMSException jms_exc) {
1:6687d56:         }
1:6687d56:         try {
1:6687d56:             directConn1.stop();
1:6687d56:         } catch (JMSException jms_exc) {
1:6687d56:         }
1:6687d56:         try {
1:6687d56:             directConn2.stop();
1:6687d56:         } catch (JMSException jms_exc) {
1:6687d56:         }
1:6687d56: 
1:e6597c4:         super.tearDown();
1:6687d56:     }
1:6687d56: 
1:e6597c4:     protected void configureBroker(BrokerService brokerService) throws Exception {
1:e6597c4:         brokerService.setBrokerName("testbroker1");
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:4e6cbcd: 
1:4e6cbcd:         TransportConnector connector = new TransportConnector();
1:4e6cbcd:         connector.setUri(new URI("tcp://localhost:0"));
1:4e6cbcd:         connector.setName(testName.getMethodName());
1:4e6cbcd: 
1:4e6cbcd:         brokerService.addConnector(connector);
1:4e6cbcd:     }
1:4e6cbcd: 
1:4e6cbcd:     protected String getBrokerConnectionURI() throws Exception {
1:4e6cbcd:         return brokerService.getTransportConnectorByName(testName.getMethodName()).getPublishableConnectString();
1:6687d56:     }
1:6687d56: 
1:6687d56:     /**
1:6687d56:      * Test for lingering temporary destinations after closing a
1:6687d56:      * PooledConnection. Here are the steps:
1:6687d56:      *
1:6687d56:      * 1. create a session on the first pooled connection 2. create a session on
1:6687d56:      * the second pooled connection 3. create a temporary destination on the
1:6687d56:      * first session 4. confirm the temporary destination exists in the broker
1:6687d56:      * 5. close the first connection 6. check that the temporary destination no
1:6687d56:      * longer exists in the broker
1:6687d56:      */
1:e6597c4:     @Test(timeout = 60000)
1:6687d56:     public void testPooledLingeringTempDests() throws java.lang.Exception {
1:6687d56:         Session session1;
1:6687d56:         Session session2;
1:6687d56: 
1:6687d56:         session1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56:         session2 = pooledConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56: 
1:6687d56:         tempDest = session1.createTemporaryQueue();
1:6687d56: 
1:6687d56:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1:6687d56: 
1:6687d56:         pooledConn1.close();
1:6687d56: 
1:6687d56:         assertTrue("FAILED: temp dest from closed pooled connection is lingering", !destinationExists(tempDest));
1:6687d56: 
1:6687d56:         session2.close();
1:6687d56:     }
1:6687d56: 
1:6687d56:     /**
1:6687d56:      * Test that closing one PooledConnection does not delete the temporary
1:6687d56:      * destinations of another.
1:6687d56:      *
1:6687d56:      * 1. create a session on the first pooled connection 2. create a session on
1:6687d56:      * the second pooled connection 3. create a temporary destination on the
1:6687d56:      * first session 4. create a temporary destination on the second session 5.
1:6687d56:      * confirm both temporary destinations exist in the broker 6. close the
1:6687d56:      * first connection 7. check that the first temporary destination no longer
1:6687d56:      * exists in the broker 8. check that the second temporary destination does
1:6687d56:      * still exist in the broker
1:6687d56:      */
1:e6597c4:     @Test(timeout = 60000)
1:6687d56:     public void testPooledTempDestsCleanupOverzealous() throws java.lang.Exception {
1:6687d56:         Session session1;
1:6687d56:         Session session2;
1:6687d56: 
1:6687d56:         session1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56:         session2 = pooledConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56: 
1:6687d56:         tempDest = session1.createTemporaryQueue();
1:6687d56:         otherTempDest = session2.createTemporaryQueue();
1:6687d56: 
1:6687d56:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1:6687d56:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(otherTempDest));
1:6687d56: 
1:6687d56:         pooledConn1.close();
1:6687d56: 
1:6687d56:         // Now confirm the first temporary destination no longer exists and the
1:6687d56:         // second does.
1:6687d56:         assertTrue("FAILED: temp dest from closed pooled connection is lingering", !destinationExists(tempDest));
1:6687d56:         assertTrue("FAILED: second PooledConnectin's temporary destination was incorrectly deleted", destinationExists(otherTempDest));
1:6687d56:     }
1:6687d56: 
1:6687d56:     /**
1:6687d56:      * CONTROL CASE
1:6687d56:      *
1:6687d56:      * Test for lingering temporary destinations after closing a Connection that
1:6687d56:      * is NOT pooled. This demonstrates the standard JMS operation and helps to
1:6687d56:      * validate the test methodology.
1:6687d56:      *
1:6687d56:      * 1. create a session on the first direct connection 2. create a session on
1:6687d56:      * the second direct connection 3. create a temporary destination on the
1:6687d56:      * first session 4. confirm the destination exists in the broker 5. close
1:6687d56:      * the first connection 6. check that the destination no longer exists in
1:6687d56:      * the broker
1:6687d56:      */
1:e6597c4:     @Test(timeout = 60000)
1:6687d56:     public void testDirectLingeringTempDests() throws java.lang.Exception {
1:6687d56:         Session session1;
1:6687d56:         Session session2;
1:6687d56: 
1:6687d56:         session1 = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56:         session2 = directConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6687d56: 
1:6687d56:         tempDest = session1.createTemporaryQueue();
1:6687d56: 
1:6687d56:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1:6687d56: 
1:6687d56:         directConn1.close();
1:6687d56: 
1:6687d56:         // Now confirm the temporary destination no longer exists.
1:6687d56:         assertTrue("CONTROL TEST FAILURE - TEST METHOD IS SUSPECT", (!destinationExists(tempDest)));
1:6687d56: 
1:6687d56:         session2.close();
1:6687d56:     }
1:6687d56: 
1:6687d56:     private boolean destinationExists(Destination dest) throws Exception {
1:e6597c4:         RegionBroker rb = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
1:6687d56:         return rb.getTopicRegion().getDestinationMap().containsKey(dest) || rb.getQueueRegion().getDestinationMap().containsKey(dest)
1:6687d56:                 || rb.getTempTopicRegion().getDestinationMap().containsKey(dest) || rb.getTempQueueRegion().getDestinationMap().containsKey(dest);
1:6687d56:     }
1:6687d56: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4e6cbcd
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TestName testName = new TestName();
1: 
/////////////////////////////////////////////////////////////////////////
1:         directConnFact = new ActiveMQConnectionFactory(getBrokerConnectionURI());
/////////////////////////////////////////////////////////////////////////
1: 
1:         TransportConnector connector = new TransportConnector();
1:         connector.setUri(new URI("tcp://localhost:0"));
1:         connector.setName(testName.getMethodName());
1: 
1:         brokerService.addConnector(connector);
1:     }
1: 
1:     protected String getBrokerConnectionURI() throws Exception {
1:         return brokerService.getTransportConnectorByName(testName.getMethodName()).getPublishableConnectString();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class PooledConnectionTempDestCleanupTest extends JmsPoolTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setUp() throws java.lang.Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         configureBroker(brokerService);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
0:         directConnFact = new ActiveMQConnectionFactory(brokerService.getVmConnectorURI());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void tearDown() throws java.lang.Exception {
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
1:     protected void configureBroker(BrokerService brokerService) throws Exception {
1:         brokerService.setBrokerName("testbroker1");
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         RegionBroker rb = (RegionBroker) brokerService.getBroker().getAdaptor(RegionBroker.class);
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledConnFact = new PooledConnectionFactory();
1:         pooledConnFact.setConnectionFactory(directConnFact);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6687d56
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
0: package org.apache.activemq.pool;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test of lingering temporary destinations on pooled connections when the
1:  * underlying connections are reused. Also tests that closing one
1:  * PooledConnection does not delete the temporary destinations of another
1:  * PooledConnection that uses the same underlying ConnectionPool.
1:  *
1:  * jira: AMQ-3457
1:  */
0: public class PooledConnectionTempDestCleanupTest {
1: 
0:     @SuppressWarnings("unused")
0:     private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionTempDestCleanupTest.class);
1: 
0:     protected BrokerService embeddedBroker;
1: 
1:     protected ActiveMQConnectionFactory directConnFact;
1:     protected Connection directConn1;
1:     protected Connection directConn2;
1: 
1:     protected PooledConnectionFactory pooledConnFact;
1:     protected Connection pooledConn1;
1:     protected Connection pooledConn2;
1: 
1:     protected TemporaryQueue tempDest;
1:     protected TemporaryQueue otherTempDest;
1: 
1:     /**
1:      * Prepare to run a test case: create, configure, and start the embedded
1:      * broker, as well as creating the client connections to the broker.
1:      */
1:     @Before
0:     public void prepTest() throws java.lang.Exception {
0:         embeddedBroker = new BrokerService();
0:         configureBroker(embeddedBroker);
0:         embeddedBroker.start();
0:         embeddedBroker.waitUntilStarted();
1: 
1:         // Create the ActiveMQConnectionFactory and the PooledConnectionFactory.
0:         directConnFact = new ActiveMQConnectionFactory(embeddedBroker.getVmConnectorURI());
0:         pooledConnFact = new PooledConnectionFactory(directConnFact);
1: 
1:         // Prepare the connections
1:         directConn1 = directConnFact.createConnection();
1:         directConn1.start();
1:         directConn2 = directConnFact.createConnection();
1:         directConn2.start();
1: 
1:         pooledConn1 = pooledConnFact.createConnection();
1:         pooledConn1.start();
1:         pooledConn2 = pooledConnFact.createConnection();
1:         pooledConn2.start();
1:     }
1: 
1:     @After
0:     public void cleanupTest() throws java.lang.Exception {
1:         try {
1:             pooledConn1.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
1:             pooledConn2.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
1:             directConn1.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1:         try {
1:             directConn2.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1: 
1:         try {
0:             embeddedBroker.stop();
1:         } catch (JMSException jms_exc) {
1:         }
1:     }
1: 
0:     protected void configureBroker(BrokerService broker_svc) throws Exception {
0:         broker_svc.setBrokerName("testbroker1");
0:         broker_svc.setUseJmx(false);
0:         broker_svc.setPersistent(false);
1:     }
1: 
1:     /**
1:      * Test for lingering temporary destinations after closing a
1:      * PooledConnection. Here are the steps:
1:      *
1:      * 1. create a session on the first pooled connection 2. create a session on
1:      * the second pooled connection 3. create a temporary destination on the
1:      * first session 4. confirm the temporary destination exists in the broker
1:      * 5. close the first connection 6. check that the temporary destination no
1:      * longer exists in the broker
1:      */
0:     @Test
1:     public void testPooledLingeringTempDests() throws java.lang.Exception {
1:         Session session1;
1:         Session session2;
1: 
1:         session1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session2 = pooledConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         tempDest = session1.createTemporaryQueue();
1: 
1:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1: 
1:         pooledConn1.close();
1: 
1:         assertTrue("FAILED: temp dest from closed pooled connection is lingering", !destinationExists(tempDest));
1: 
1:         session2.close();
1:     }
1: 
1:     /**
1:      * Test that closing one PooledConnection does not delete the temporary
1:      * destinations of another.
1:      *
1:      * 1. create a session on the first pooled connection 2. create a session on
1:      * the second pooled connection 3. create a temporary destination on the
1:      * first session 4. create a temporary destination on the second session 5.
1:      * confirm both temporary destinations exist in the broker 6. close the
1:      * first connection 7. check that the first temporary destination no longer
1:      * exists in the broker 8. check that the second temporary destination does
1:      * still exist in the broker
1:      */
0:     @Test
1:     public void testPooledTempDestsCleanupOverzealous() throws java.lang.Exception {
1:         Session session1;
1:         Session session2;
1: 
1:         session1 = pooledConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session2 = pooledConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         tempDest = session1.createTemporaryQueue();
1:         otherTempDest = session2.createTemporaryQueue();
1: 
1:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(otherTempDest));
1: 
1:         pooledConn1.close();
1: 
1:         // Now confirm the first temporary destination no longer exists and the
1:         // second does.
1:         assertTrue("FAILED: temp dest from closed pooled connection is lingering", !destinationExists(tempDest));
1:         assertTrue("FAILED: second PooledConnectin's temporary destination was incorrectly deleted", destinationExists(otherTempDest));
1:     }
1: 
1:     /**
1:      * CONTROL CASE
1:      *
1:      * Test for lingering temporary destinations after closing a Connection that
1:      * is NOT pooled. This demonstrates the standard JMS operation and helps to
1:      * validate the test methodology.
1:      *
1:      * 1. create a session on the first direct connection 2. create a session on
1:      * the second direct connection 3. create a temporary destination on the
1:      * first session 4. confirm the destination exists in the broker 5. close
1:      * the first connection 6. check that the destination no longer exists in
1:      * the broker
1:      */
0:     @Test
1:     public void testDirectLingeringTempDests() throws java.lang.Exception {
1:         Session session1;
1:         Session session2;
1: 
1:         session1 = directConn1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session2 = directConn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         tempDest = session1.createTemporaryQueue();
1: 
1:         assertTrue("TEST METHOD FAILURE - NEW TEMP DESTINATION DOES NOT EXIST", destinationExists(tempDest));
1: 
1:         directConn1.close();
1: 
1:         // Now confirm the temporary destination no longer exists.
1:         assertTrue("CONTROL TEST FAILURE - TEST METHOD IS SUSPECT", (!destinationExists(tempDest)));
1: 
1:         session2.close();
1:     }
1: 
1:     private boolean destinationExists(Destination dest) throws Exception {
0:         RegionBroker rb = (RegionBroker) embeddedBroker.getBroker().getAdaptor(RegionBroker.class);
1:         return rb.getTopicRegion().getDestinationMap().containsKey(dest) || rb.getQueueRegion().getDestinationMap().containsKey(dest)
1:                 || rb.getTempTopicRegion().getDestinationMap().containsKey(dest) || rb.getTempQueueRegion().getDestinationMap().containsKey(dest);
1:     }
1: }
============================================================================