1:8be1486: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:27f7cab:  *
1:27f7cab:  * Unless required by applicable law or agreed to in writing, software
1:27f7cab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27f7cab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27f7cab:  * See the License for the specific language governing permissions and
1:27f7cab:  * limitations under the License.
2:27f7cab:  */
1:27f7cab: package org.apache.activemq.broker.policy;
8:27f7cab: 
1:27f7cab: import javax.jms.Connection;
1:27f7cab: import javax.jms.DeliveryMode;
1:27f7cab: import javax.jms.Destination;
1:27f7cab: import javax.jms.JMSException;
1:27f7cab: import javax.jms.Message;
1:27f7cab: import javax.jms.MessageConsumer;
1:27f7cab: import javax.jms.MessageProducer;
1:1554954: import javax.jms.Queue;
1:1554954: import javax.jms.QueueBrowser;
1:27f7cab: import javax.jms.Session;
1:10c6b29: import javax.jms.TextMessage;
1:27f7cab: import javax.jms.Topic;
1:27f7cab: 
1:74a7a8b: import org.apache.activemq.TestSupport;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:be919fb: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:80f7e38: import org.apache.activemq.broker.region.DestinationStatistics;
1:80f7e38: import org.apache.activemq.broker.region.RegionBroker;
1:0d85869: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:0d85869: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:0d85869: import org.apache.activemq.broker.region.policy.PolicyMap;
1:8be1486: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:27f7cab: public abstract class DeadLetterTestSupport extends TestSupport {
1:8be1486: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterTestSupport.class);
1:27f7cab: 
1:27f7cab:     protected int messageCount = 10;
1:230a86c:     protected long timeToLive;
1:27f7cab:     protected Connection connection;
1:27f7cab:     protected Session session;
1:27f7cab:     protected MessageConsumer consumer;
1:27f7cab:     protected MessageProducer producer;
1:27f7cab:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:230a86c:     protected boolean durableSubscriber;
1:27f7cab:     protected Destination dlqDestination;
1:27f7cab:     protected MessageConsumer dlqConsumer;
1:1554954:     protected QueueBrowser dlqBrowser;
1:27f7cab:     protected BrokerService broker;
1:230a86c:     protected boolean transactedMode;
1:10c6b29:     protected int acknowledgeMode = Session.CLIENT_ACKNOWLEDGE;
1:0142c4d:     protected Destination destination;
1:27f7cab: 
1:8be1486:     @Override
1:27f7cab:     protected void setUp() throws Exception {
1:27f7cab:         super.setUp();
1:27f7cab:         broker = createBroker();
1:27f7cab:         broker.start();
1:27f7cab:         connection = createConnection();
1:27c1719:         connection.setClientID(createClientId());
1:27f7cab: 
1:10c6b29:         session = connection.createSession(transactedMode, acknowledgeMode);
1:27f7cab:         connection.start();
2:27f7cab:     }
1:80f7e38: 
1:27c1719:     protected String createClientId() {
1:27c1719:         return toString();
1:27c1719:     }
1:27c1719: 
1:8be1486:     @Override
1:27f7cab:     protected void tearDown() throws Exception {
1:27f7cab:         if (connection != null) {
1:27f7cab:             connection.close();
1:27f7cab:         }
1:27f7cab:         if (broker != null) {
1:27f7cab:             broker.stop();
1:27f7cab:         }
1:27f7cab:     }
1:1554954: 
1:27f7cab:     protected abstract void doTest() throws Exception;
1:27f7cab: 
1:27f7cab:     protected BrokerService createBroker() throws Exception {
1:27f7cab:         BrokerService broker = new BrokerService();
1:27f7cab:         broker.setPersistent(false);
1:0d85869:         PolicyEntry policy = new PolicyEntry();
1:0d85869:         DeadLetterStrategy defaultDeadLetterStrategy = policy.getDeadLetterStrategy();
1:0d85869:         if(defaultDeadLetterStrategy!=null) {
1:0d85869:             defaultDeadLetterStrategy.setProcessNonPersistent(true);
1:0d85869:         }
1:0d85869:         PolicyMap pMap = new PolicyMap();
1:0d85869:         pMap.setDefaultEntry(policy);
1:0d85869:         broker.setDestinationPolicy(pMap);
1:27f7cab:         return broker;
1:27f7cab:     }
1:27f7cab: 
1:27f7cab:     protected void makeConsumer() throws JMSException {
1:27f7cab:         Destination destination = getDestination();
1:933eb2f:         LOG.info("Consuming from: " + destination);
1:27f7cab:         if (durableSubscriber) {
1:230a86c:             consumer = session.createDurableSubscriber((Topic)destination, destination.toString());
1:230a86c:         } else {
1:27f7cab:             consumer = session.createConsumer(destination);
1:27f7cab:         }
1:27f7cab:     }
1:27f7cab: 
1:7646526:     protected void makeDlqConsumer() throws Exception {
1:27f7cab:         dlqDestination = createDlqDestination();
1:27f7cab: 
1:933eb2f:         LOG.info("Consuming from dead letter on: " + dlqDestination);
1:27f7cab:         dlqConsumer = session.createConsumer(dlqDestination);
1:27f7cab:     }
1:8be1486: 
1:be919fb:     protected void makeDlqBrowser() throws Exception {
1:1554954:         dlqDestination = createDlqDestination();
1:1554954: 
1:1554954:         LOG.info("Browsing dead letter on: " + dlqDestination);
1:be919fb:         dlqBrowser = session.createBrowser((Queue)dlqDestination);
1:be919fb:         verifyIsDlq((Queue) dlqDestination);
1:be919fb:     }
1:be919fb: 
1:8be1486:     protected void verifyIsDlq(final Queue dlqQ) throws Exception {
1:8be1486:         assertTrue("Need to verify a DLQ exists: " + dlqQ.getQueueName(), Wait.waitFor(new Wait.Condition() {
1:8be1486: 
1:8be1486:             @Override
1:8be1486:             public boolean isSatisified() throws Exception {
1:66cfc7b:                 boolean satisfied = false;
1:66cfc7b: 
1:8be1486:                 try {
1:66cfc7b:                     QueueViewMBean dlqView = getProxyToQueue(dlqQ.getQueueName());
1:66cfc7b:                     satisfied = dlqView != null ? dlqView.isDLQ() : false;
1:8be1486:                 } catch (Throwable error) {
1:8be1486:                 }
1:8be1486: 
1:66cfc7b:                 return satisfied;
1:8be1486:             }
1:8be1486:         }));
1:1554954:     }
1:27f7cab: 
1:27f7cab:     protected void sendMessages() throws JMSException {
1:10c6b29:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27f7cab:         producer = session.createProducer(getDestination());
1:27f7cab:         producer.setDeliveryMode(deliveryMode);
1:27f7cab:         producer.setTimeToLive(timeToLive);
1:27f7cab: 
1:933eb2f:         LOG.info("Sending " + messageCount + " messages to: " + getDestination());
1:27f7cab:         for (int i = 0; i < messageCount; i++) {
1:10c6b29:             Message message = createMessage(session, i);
1:27f7cab:             producer.send(message);
1:27f7cab:         }
1:27f7cab:     }
1:27f7cab: 
1:10c6b29:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:10c6b29:         return session.createTextMessage(getMessageText(i));
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected String getMessageText(int i) {
1:10c6b29:         return "message: " + i;
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected void assertMessage(Message message, int i) throws Exception {
1:933eb2f:         LOG.info("Received message: " + message);
1:10c6b29:         assertNotNull("No message received for index: " + i, message);
1:10c6b29:         assertTrue("Should be a TextMessage not: " + message, message instanceof TextMessage);
1:230a86c:         TextMessage textMessage = (TextMessage)message;
1:230a86c:         assertEquals("text of message: " + i, getMessageText(i), textMessage.getText());
1:10c6b29:     }
1:230a86c: 
1:27f7cab:     protected abstract Destination createDlqDestination();
1:10c6b29: 
1:27f7cab:     public void testTransientTopicMessage() throws Exception {
1:27f7cab:         super.topic = true;
1:27f7cab:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:27f7cab:         durableSubscriber = true;
1:27f7cab:         doTest();
1:27f7cab:     }
1:80f7e38: 
1:27f7cab:     public void testDurableTopicMessage() throws Exception {
1:27f7cab:         super.topic = true;
1:27f7cab:         deliveryMode = DeliveryMode.PERSISTENT;
1:27f7cab:         durableSubscriber = true;
1:27f7cab:         doTest();
1:27f7cab:     }
1:27f7cab: 
1:27f7cab:     public void testTransientQueueMessage() throws Exception {
1:27f7cab:         super.topic = false;
1:27f7cab:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:27f7cab:         durableSubscriber = false;
1:27f7cab:         doTest();
1:8be1486:         validateConsumerPrefetch(this.getDestinationString(), 0);
1:27f7cab:     }
1:8be1486: 
1:27f7cab:     public void testDurableQueueMessage() throws Exception {
1:27f7cab:         super.topic = false;
1:27f7cab:         deliveryMode = DeliveryMode.PERSISTENT;
1:27f7cab:         durableSubscriber = false;
1:27f7cab:         doTest();
2:80f7e38:         validateConsumerPrefetch(this.getDestinationString(), 0);
1:27f7cab:     }
1:27f7cab: 
1:27f7cab:     public Destination getDestination() {
1:27f7cab:         if (destination == null) {
1:27f7cab:             destination = createDestination();
1:27f7cab:         }
1:27f7cab:         return destination;
1:27f7cab:     }
1:8be1486: 
1:80f7e38:     private void validateConsumerPrefetch(String destination, long expectedCount) {
1:6509b1f:         try {
1:6509b1f:             Thread.sleep(100);
1:6509b1f:         } catch (InterruptedException e) {
1:6509b1f:         }
1:80f7e38:         RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:80f7e38:         for (org.apache.activemq.broker.region.Destination dest : regionBroker.getQueueRegion().getDestinationMap().values()) {
1:80f7e38:             if (dest.getName().equals(destination)) {
1:80f7e38:                 DestinationStatistics stats = dest.getDestinationStatistics();
1:6509b1f:                 LOG.info(">>>> inflight for : " + dest.getName() + ": " + stats.getInflight().getCount());
1:8be1486:                 assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches",
1:8be1486:                         expectedCount, stats.getInflight().getCount());
1:80f7e38:             }
1:80f7e38:         }
1:80f7e38:     }
1:27f7cab: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:66cfc7b
/////////////////////////////////////////////////////////////////////////
1:                 boolean satisfied = false;
1: 
1:                     QueueViewMBean dlqView = getProxyToQueue(dlqQ.getQueueName());
1:                     satisfied = dlqView != null ? dlqView.isDLQ() : false;
1:                 return satisfied;
commit:8be1486
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void verifyIsDlq(final Queue dlqQ) throws Exception {
1:         assertTrue("Need to verify a DLQ exists: " + dlqQ.getQueueName(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 QueueViewMBean dlqView = null;
1:                 try {
0:                     dlqView = getProxyToQueue(dlqQ.getQueueName());
1:                 } catch (Throwable error) {
1:                 }
1: 
0:                 return dlqView != null ? dlqView.isDLQ() : false;
1:             }
1:         }));
/////////////////////////////////////////////////////////////////////////
1:         validateConsumerPrefetch(this.getDestinationString(), 0);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches",
1:                         expectedCount, stats.getInflight().getCount());
author:gtully
-------------------------------------------------------------------------------
commit:0142c4d
/////////////////////////////////////////////////////////////////////////
1:     protected Destination destination;
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     protected void makeDlqBrowser() throws Exception {
1:         dlqBrowser = session.createBrowser((Queue)dlqDestination);
1:         verifyIsDlq((Queue) dlqDestination);
1:     }
1: 
0:     protected void verifyIsDlq(Queue dlqQ) throws Exception {
0:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQ.getQueueName());
0:         assertTrue("is dlq", queueViewMBean.isDLQ());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:7646526
/////////////////////////////////////////////////////////////////////////
1:     protected void makeDlqConsumer() throws Exception {
author:Kevin Earls
-------------------------------------------------------------------------------
commit:6509b1f
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             Thread.sleep(100);
1:         } catch (InterruptedException e) {
1:         }
1:                 LOG.info(">>>> inflight for : " + dest.getName() + ": " + stats.getInflight().getCount());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:27c1719
/////////////////////////////////////////////////////////////////////////
1:         connection.setClientID(createClientId());
1:     protected String createClientId() {
1:         return toString();
1:     }
1: 
commit:80f7e38
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.RegionBroker;
/////////////////////////////////////////////////////////////////////////
1:         validateConsumerPrefetch(this.getDestinationString(), 0);        
1:         
1:         validateConsumerPrefetch(this.getDestinationString(), 0);
/////////////////////////////////////////////////////////////////////////
1:     
1:     private void validateConsumerPrefetch(String destination, long expectedCount) {
1:         RegionBroker regionBroker = (RegionBroker) broker.getRegionBroker();
1:         for (org.apache.activemq.broker.region.Destination dest : regionBroker.getQueueRegion().getDestinationMap().values()) {
1:             if (dest.getName().equals(destination)) {
1:                 DestinationStatistics stats = dest.getDestinationStatistics();
0:                 LOG.info("inflight for : " + dest.getName() + ": " + stats.getInflight().getCount());
0:                 assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches", 
0:                         expectedCount, stats.getInflight().getCount());      
1:             }
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(DeadLetterTestSupport.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consuming from: " + destination);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consuming from dead letter on: " + dlqDestination);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sending " + messageCount + " messages to: " + getDestination());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Received message: " + message);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private Destination destination;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     protected long timeToLive;
1:     protected boolean durableSubscriber;
1:     protected boolean transactedMode;
/////////////////////////////////////////////////////////////////////////
1:             consumer = session.createDurableSubscriber((Topic)destination, destination.toString());
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         TextMessage textMessage = (TextMessage)message;
1:         assertEquals("text of message: " + i, getMessageText(i), textMessage.getText());
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Consuming from: " + destination);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Consuming from dead letter on: " + dlqDestination);
/////////////////////////////////////////////////////////////////////////
0:         log.info("Sending " + messageCount + " messages to: " + getDestination());
/////////////////////////////////////////////////////////////////////////
0:         log.info("Received message: " + message);
commit:80f5e0c
/////////////////////////////////////////////////////////////////////////
0:     protected long timeToLive = 0;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterTestSupport.class);
commit:1554954
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
/////////////////////////////////////////////////////////////////////////
1:     protected QueueBrowser dlqBrowser;
/////////////////////////////////////////////////////////////////////////
1:     
0:     protected void makeDlqBrowser() throws JMSException {
1:         dlqDestination = createDlqDestination();
1: 
1:         LOG.info("Browsing dead letter on: " + dlqDestination);
0:         dlqBrowser = session.createBrowser((Queue)dlqDestination);    	
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:0d85869
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         PolicyEntry policy = new PolicyEntry();
1:         DeadLetterStrategy defaultDeadLetterStrategy = policy.getDeadLetterStrategy();
1:         if(defaultDeadLetterStrategy!=null) {
1:             defaultDeadLetterStrategy.setProcessNonPersistent(true);
1:         }
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
author:James Strachan
-------------------------------------------------------------------------------
commit:10c6b29
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
0:     protected boolean transactedMode = false;
1:     protected int acknowledgeMode = Session.CLIENT_ACKNOWLEDGE;
/////////////////////////////////////////////////////////////////////////
1:         session = connection.createSession(transactedMode, acknowledgeMode);
/////////////////////////////////////////////////////////////////////////
0:         System.out.println("Consuming from: " + destination);
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Message message = createMessage(session, i);
1:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:         return session.createTextMessage(getMessageText(i));
1:     }
1: 
1:     protected String getMessageText(int i) {
1:         return "message: " + i;
1:     }
1: 
1:     protected void assertMessage(Message message, int i) throws Exception {
0:         System.out.println("Received message: " + message);
1:         assertNotNull("No message received for index: " + i, message);
1:         assertTrue("Should be a TextMessage not: " + message, message instanceof TextMessage);
0:         TextMessage textMessage = (TextMessage) message;
0:         assertEquals("text of message: " + i, getMessageText(i), textMessage .getText());
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
commit:27f7cab
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import org.apache.activemq.TestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
0: /**
0:  * @version $Revision$
1:  */
1: public abstract class DeadLetterTestSupport extends TestSupport {
1: 
1:     protected int messageCount = 10;
0:     protected long timeToLive = 250;
1:     protected Connection connection;
1:     protected Session session;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
0:     private Destination destination;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
0:     protected boolean durableSubscriber = false;
1:     protected Destination dlqDestination;
1:     protected MessageConsumer dlqConsumer;
1:     protected BrokerService broker;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = createBroker();
1:         broker.start();
1:         connection = createConnection();
0:         connection.setClientID(toString());
1: 
0:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected abstract void doTest() throws Exception;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         return broker;
1:     }
1: 
1:     protected void makeConsumer() throws JMSException {
1:         Destination destination = getDestination();
1:         if (durableSubscriber) {
0:             consumer = session.createDurableSubscriber((Topic) destination, destination.toString());
1:         }
0:         else {
1:             consumer = session.createConsumer(destination);
1:         }
1:     }
1: 
0:     protected void makeDlqConsumer() throws JMSException {
1:         dlqDestination = createDlqDestination();
1: 
0:         System.out.println("Consuming from dead letter on: " + dlqDestination);
1:         dlqConsumer = session.createConsumer(dlqDestination);
1:     }
1: 
1:     protected void sendMessages() throws JMSException {
1:         producer = session.createProducer(getDestination());
1:         producer.setDeliveryMode(deliveryMode);
1:         producer.setTimeToLive(timeToLive);
1: 
0:         System.out.println("Sending " + messageCount + " messages to: " + getDestination());
1:         for (int i = 0; i < messageCount; i++) {
0:             Message message = session.createTextMessage("msg: " + i);
1:             producer.send(message);
1:         }
1:     }
1: 
1:     protected abstract Destination createDlqDestination();
1: 
1:     public void testTransientTopicMessage() throws Exception {
1:         super.topic = true;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         durableSubscriber = true;
1:         doTest();
1:     }
1: 
1:     public void testDurableTopicMessage() throws Exception {
1:         super.topic = true;
1:         deliveryMode = DeliveryMode.PERSISTENT;
1:         durableSubscriber = true;
1:         doTest();
1:     }
1: 
1:     public void testTransientQueueMessage() throws Exception {
1:         super.topic = false;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         durableSubscriber = false;
1:         doTest();
1:     }
1: 
1:     public void testDurableQueueMessage() throws Exception {
1:         super.topic = false;
1:         deliveryMode = DeliveryMode.PERSISTENT;
1:         durableSubscriber = false;
1:         doTest();
1:     }
1: 
1:     public Destination getDestination() {
1:         if (destination == null) {
1:             destination = createDestination();
1:         }
1:         return destination;
1:     }
1: 
1: }
============================================================================