2:2e57fb5: /**
1:2e57fb5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2e57fb5:  * contributor license agreements.  See the NOTICE file distributed with
1:2e57fb5:  * this work for additional information regarding copyright ownership.
1:2e57fb5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2e57fb5:  * (the "License"); you may not use this file except in compliance with
1:2e57fb5:  * the License.  You may obtain a copy of the License at
1:2e57fb5:  *
1:2e57fb5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2e57fb5:  *
1:2e57fb5:  * Unless required by applicable law or agreed to in writing, software
1:2e57fb5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e57fb5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e57fb5:  * See the License for the specific language governing permissions and
1:2e57fb5:  * limitations under the License.
1:670d9d8:  */
1:2e57fb5: package org.apache.activemq.pool;
5:07c3db5: 
1:b66559e: import java.io.IOException;
1:b66559e: import java.util.HashMap;
1:55a8ef5: import java.util.Properties;
1:b66559e: import javax.jms.Connection;
1:670d9d8: import javax.jms.JMSException;
1:b66559e: import javax.jms.Session;
1:b66559e: import javax.jms.XAConnection;
1:b66559e: import javax.jms.XASession;
1:b66559e: import javax.naming.NamingException;
1:b66559e: import javax.naming.Reference;
1:b66559e: import javax.transaction.xa.XAResource;
1:2e57fb5: import org.apache.activemq.ActiveMQConnection;
1:2e57fb5: import org.apache.activemq.ActiveMQConnectionFactory;
1:b66559e: import org.apache.activemq.ActiveMQSession;
1:b66559e: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:b66559e: import org.apache.activemq.Service;
1:b66559e: import org.apache.activemq.jms.pool.PooledSession;
1:b66559e: import org.apache.activemq.jms.pool.SessionKey;
1:b66559e: import org.apache.activemq.jms.pool.XaConnectionPool;
1:b66559e: import org.apache.activemq.jndi.JNDIReferenceFactory;
1:b66559e: import org.apache.activemq.jndi.JNDIStorableInterface;
1:b66559e: import org.apache.activemq.transport.TransportListener;
1:670d9d8: import org.apache.activemq.util.IntrospectionSupport;
1:07c3db5: import org.slf4j.Logger;
1:07c3db5: import org.slf4j.LoggerFactory;
1:07c3db5: 
1:670d9d8: /**
1:b66559e:   * Add Service and Referenceable and TransportListener to @link{org.apache.activemq.jms.pool.XaPooledConnectionFactory}
1:b66559e:   *
1:b66559e:   * @org.apache.xbean.XBean element=xaPooledConnectionFactory"
1:b66559e:   */
1:b66559e: public class XaPooledConnectionFactory extends org.apache.activemq.jms.pool.XaPooledConnectionFactory implements JNDIStorableInterface, Service {
1:b66559e:     public static final String POOL_PROPS_PREFIX = "pool";
1:b66559e:     private static final transient Logger LOG = LoggerFactory.getLogger(org.apache.activemq.jms.pool.XaPooledConnectionFactory.class);
1:5c9dcee:     private String brokerUrl;
1:07c3db5: 
1:07c3db5:     public XaPooledConnectionFactory() {
1:07c3db5:         super();
13:07c3db5:     }
1:55a8ef5: 
1:b66559e:     public XaPooledConnectionFactory(ActiveMQXAConnectionFactory connectionFactory) {
1:b66559e:         setConnectionFactory(connectionFactory);
1:07c3db5:     }
1:07c3db5: 
1:b66559e:     @Override
1:b66559e:     protected org.apache.activemq.jms.pool.ConnectionPool createConnectionPool(Connection connection) {
1:b66559e:         return new XaConnectionPool(connection, getTransactionManager()) {
1:55a8ef5: 
1:b66559e:             @Override
1:b66559e:             protected Session makeSession(SessionKey key) throws JMSException {
1:b66559e:                 if (connection instanceof XAConnection) {
1:b66559e:                     return ((XAConnection)connection).createXASession();
1:b66559e:                 } else {
1:b66559e:                     return connection.createSession(key.isTransacted(), key.getAckMode());
1:55a8ef5:                 }
1:55a8ef5:             }
1:07c3db5: 
1:b66559e:             @Override
1:b66559e:             protected XAResource createXaResource(PooledSession session) throws JMSException {
1:b66559e:                 if (session.getInternalSession() instanceof XASession) {
1:b66559e:                     return ((XASession)session.getInternalSession()).getXAResource();
1:b66559e:                 } else {
1:b66559e:                     return ((ActiveMQSession)session.getInternalSession()).getTransactionContext();
1:55a8ef5:                 }
1:07c3db5:             }
1:b66559e: 
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             protected Connection wrap(final Connection connection) {
1:b66559e:                 // Add a transport Listener so that we can notice if this connection
1:b66559e:                 // should be expired due to a connection failure.
1:b66559e:                 ((ActiveMQConnection)connection).addTransportListener(new TransportListener() {
1:b66559e:                     @Override
1:b66559e:                     public void onCommand(Object command) {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void onException(IOException error) {
1:b66559e:                         synchronized (this) {
1:b66559e:                             setHasExpired(true);
1:960186a:                             // only log if not stopped
1:960186a:                             if (!stopped.get()) {
1:960186a:                                 LOG.info("Expiring connection " + connection + " on IOException: " + error.getMessage());
1:960186a:                                 // log stacktrace at debug level
1:960186a:                                 LOG.debug("Expiring connection " + connection + " on IOException: ", error);
1:960186a:                             }
1:b66559e:                         }
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void transportInterupted() {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void transportResumed() {
1:b66559e:                     }
1:b66559e:                 });
1:b66559e: 
1:b66559e:                 // make sure that we set the hasFailed flag, in case the transport already failed
1:b66559e:                 // prior to the addition of our new TransportListener
1:b66559e:                 setHasExpired(((ActiveMQConnection) connection).isTransportFailed());
1:b66559e: 
1:b66559e:                 // may want to return an amq EnhancedConnection
1:b66559e:                 return connection;
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             protected void unWrap(Connection connection) {
1:b66559e:                 if (connection != null) {
1:b66559e:                     ((ActiveMQConnection)connection).cleanUpTempDestinations();
1:b66559e:                 }
1:b66559e:             }
1:b66559e:         };
1:07c3db5:     }
1:07c3db5: 
1:55a8ef5:     protected void buildFromProperties(Properties props) {
1:b66559e:         ActiveMQConnectionFactory activeMQConnectionFactory = props.containsKey("xaAckMode") ?
1:b66559e:                 new ActiveMQXAConnectionFactory() : new ActiveMQConnectionFactory();
1:b66559e:         activeMQConnectionFactory.buildFromProperties(props);
1:b66559e:         setConnectionFactory(activeMQConnectionFactory);
1:b66559e:         IntrospectionSupport.setProperties(this, new HashMap(props), POOL_PROPS_PREFIX);
1:b66559e:     }
1:b66559e: 
1:b66559e:     protected void populateProperties(Properties props) {
1:b66559e:         ((ActiveMQConnectionFactory)getConnectionFactory()).populateProperties(props);
1:b66559e:         IntrospectionSupport.getProperties(this, props, POOL_PROPS_PREFIX);
1:55a8ef5:     }
1:07c3db5: 
2:55a8ef5:     @Override
1:b66559e:     public void setProperties(Properties properties) {
1:b66559e:         buildFromProperties(properties);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public Properties getProperties() {
1:b66559e:         Properties properties = new Properties();
1:b66559e:         populateProperties(properties);
1:b66559e:         return properties;
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public Reference getReference() throws NamingException {
1:b66559e:         return JNDIReferenceFactory.createReference(this.getClass().getName(), this);
1:07c3db5:     }
1:5c9dcee: 
1:5c9dcee:     public void setBrokerUrl(String url) {
1:5c9dcee:         if (brokerUrl == null || !brokerUrl.equals(url)) {
1:5c9dcee:             brokerUrl = url;
1:5c9dcee:             setConnectionFactory(new ActiveMQXAConnectionFactory(brokerUrl));
1:5c9dcee:         }
1:5c9dcee:     }
1:5c9dcee: 
1:5c9dcee:     public String getBrokerUrl() {
1:5c9dcee:         return brokerUrl;
1:5c9dcee:     }
1:07c3db5: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:960186a
/////////////////////////////////////////////////////////////////////////
1:                             // only log if not stopped
1:                             if (!stopped.get()) {
1:                                 LOG.info("Expiring connection " + connection + " on IOException: " + error.getMessage());
1:                                 // log stacktrace at debug level
1:                                 LOG.debug("Expiring connection " + connection + " on IOException: ", error);
1:                             }
author:gtully
-------------------------------------------------------------------------------
commit:5c9dcee
/////////////////////////////////////////////////////////////////////////
1:     private String brokerUrl;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setBrokerUrl(String url) {
1:         if (brokerUrl == null || !brokerUrl.equals(url)) {
1:             brokerUrl = url;
1:             setConnectionFactory(new ActiveMQXAConnectionFactory(brokerUrl));
1:         }
1:     }
1: 
1:     public String getBrokerUrl() {
1:         return brokerUrl;
1:     }
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.HashMap;
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.XAConnection;
1: import javax.jms.XASession;
1: import javax.naming.NamingException;
1: import javax.naming.Reference;
1: import javax.transaction.xa.XAResource;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.Service;
1: import org.apache.activemq.jms.pool.PooledSession;
1: import org.apache.activemq.jms.pool.SessionKey;
1: import org.apache.activemq.jms.pool.XaConnectionPool;
1: import org.apache.activemq.jndi.JNDIReferenceFactory;
1: import org.apache.activemq.jndi.JNDIStorableInterface;
1: import org.apache.activemq.transport.TransportListener;
1:   * Add Service and Referenceable and TransportListener to @link{org.apache.activemq.jms.pool.XaPooledConnectionFactory}
1:   *
1:   * @org.apache.xbean.XBean element=xaPooledConnectionFactory"
1:   */
1: public class XaPooledConnectionFactory extends org.apache.activemq.jms.pool.XaPooledConnectionFactory implements JNDIStorableInterface, Service {
1:     public static final String POOL_PROPS_PREFIX = "pool";
1:     private static final transient Logger LOG = LoggerFactory.getLogger(org.apache.activemq.jms.pool.XaPooledConnectionFactory.class);
1:     public XaPooledConnectionFactory(ActiveMQXAConnectionFactory connectionFactory) {
1:         setConnectionFactory(connectionFactory);
1:     @Override
1:     protected org.apache.activemq.jms.pool.ConnectionPool createConnectionPool(Connection connection) {
1:         return new XaConnectionPool(connection, getTransactionManager()) {
1:             @Override
1:             protected Session makeSession(SessionKey key) throws JMSException {
1:                 if (connection instanceof XAConnection) {
1:                     return ((XAConnection)connection).createXASession();
1:                 } else {
1:                     return connection.createSession(key.isTransacted(), key.getAckMode());
1:             @Override
1:             protected XAResource createXaResource(PooledSession session) throws JMSException {
1:                 if (session.getInternalSession() instanceof XASession) {
1:                     return ((XASession)session.getInternalSession()).getXAResource();
1:                 } else {
1:                     return ((ActiveMQSession)session.getInternalSession()).getTransactionContext();
1: 
1: 
1:             @Override
1:             protected Connection wrap(final Connection connection) {
1:                 // Add a transport Listener so that we can notice if this connection
1:                 // should be expired due to a connection failure.
1:                 ((ActiveMQConnection)connection).addTransportListener(new TransportListener() {
1:                     @Override
1:                     public void onCommand(Object command) {
1:                     }
1: 
1:                     @Override
1:                     public void onException(IOException error) {
1:                         synchronized (this) {
1:                             setHasExpired(true);
0:                             LOG.info("Expiring connection " + connection + " on IOException: " + error);
0:                             LOG.debug("Expiring connection on IOException", error);
1:                         }
1:                     }
1: 
1:                     @Override
1:                     public void transportInterupted() {
1:                     }
1: 
1:                     @Override
1:                     public void transportResumed() {
1:                     }
1:                 });
1: 
1:                 // make sure that we set the hasFailed flag, in case the transport already failed
1:                 // prior to the addition of our new TransportListener
1:                 setHasExpired(((ActiveMQConnection) connection).isTransportFailed());
1: 
1:                 // may want to return an amq EnhancedConnection
1:                 return connection;
1:             }
1: 
1:             @Override
1:             protected void unWrap(Connection connection) {
1:                 if (connection != null) {
1:                     ((ActiveMQConnection)connection).cleanUpTempDestinations();
1:                 }
1:             }
1:         };
1:         ActiveMQConnectionFactory activeMQConnectionFactory = props.containsKey("xaAckMode") ?
1:                 new ActiveMQXAConnectionFactory() : new ActiveMQConnectionFactory();
1:         activeMQConnectionFactory.buildFromProperties(props);
1:         setConnectionFactory(activeMQConnectionFactory);
1:         IntrospectionSupport.setProperties(this, new HashMap(props), POOL_PROPS_PREFIX);
1:     }
1: 
1:     protected void populateProperties(Properties props) {
1:         ((ActiveMQConnectionFactory)getConnectionFactory()).populateProperties(props);
1:         IntrospectionSupport.getProperties(this, props, POOL_PROPS_PREFIX);
1:     public void setProperties(Properties properties) {
1:         buildFromProperties(properties);
1:     }
1: 
1:     @Override
1:     public Properties getProperties() {
1:         Properties properties = new Properties();
1:         populateProperties(properties);
1:         return properties;
1:     }
1: 
1:     @Override
1:     public Reference getReference() throws NamingException {
1:         return JNDIReferenceFactory.createReference(this.getClass().getName(), this);
author:Gary Tully
-------------------------------------------------------------------------------
commit:55a8ef5
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected void buildFromProperties(Properties props) {
0:         super.buildFromProperties(props);
0:         for (String v : new String[]{"tmFromJndi", "tmJndiName"}) {
0:             if (props.containsKey(v)) {
0:                 IntrospectionSupport.setProperty(this, v, props.getProperty(v));
1:             }
1:         }
1:     }
1: 
1:     @Override
0:     protected void populateProperties(Properties props) {
0:         super.populateProperties(props);
0:         props.setProperty("tmFromJndi", String.valueOf(isTmFromJndi()));
0:         props.setProperty("tmJndiName", tmJndiName);
1:     }
commit:07c3db5
/////////////////////////////////////////////////////////////////////////
0: import javax.naming.Binding;
0: import javax.naming.NamingEnumeration;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory,
0:         Serializable, QueueConnectionFactory, TopicConnectionFactory {
0:     private static final transient Logger LOG = LoggerFactory.getLogger(XaPooledConnectionFactory.class);
0:     private String brokerUrl = null;
1: 
1:     public XaPooledConnectionFactory() {
1:         super();
1:     }
1: 
0:     public XaPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         super(connectionFactory);
1:     }
1: 
0:     public XaPooledConnectionFactory(String brokerURL) {
0:         super(brokerURL);
1:     }
1: 
0:     public TransactionManager getTransactionManager() {
0:         if (transactionManager == null && tmFromJndi) {
0:             try {
0:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
0:             } catch (Throwable ignored) {
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("exception on tmFromJndi: " + getTmJndiName(), ignored);
1:                 }
1:             }
1:         }
0:         return transactionManager;
1:     }
1: 
0:     public void setTransactionManager(TransactionManager transactionManager) {
0:         this.transactionManager = transactionManager;
1:     }
1: 
0:     @Override
0:     protected ConnectionPool createConnectionPool(ActiveMQConnection connection) {
0:         return new XaConnectionPool(connection, getTransactionManager());
1:     }
1: 
0:     @Override
0:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
0:         setTmFromJndi(true);
0:         configFromJndiConf(obj);
0:         if (environment != null) {
0:             IntrospectionSupport.setProperties(this, environment);
1:         }
0:         return this;
1:     }
1: 
0:     private void configFromJndiConf(Object rootContextName) {
0:         if (rootContextName instanceof String) {
0:             String name = (String) rootContextName;
0:             name = name.substring(0, name.lastIndexOf('/')) + "/conf" + name.substring(name.lastIndexOf('/'));
0:             try {
0:                 InitialContext ctx = new InitialContext();
0:                 NamingEnumeration bindings = ctx.listBindings(name);
1: 
0:                 while (bindings.hasMore()) {
0:                     Binding bd = (Binding)bindings.next();
0:                     IntrospectionSupport.setProperty(this, bd.getName(), bd.getObject());
1:                 }
1: 
0:             } catch (Exception ignored) {
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("exception on config from jndi: " + name, ignored);
1:                 }
1:             }
1:         }
1:     }
1: 
0:     public void setBrokerUrl(String url) {
0:         if (brokerUrl == null || !brokerUrl.equals(url)) {
0:             brokerUrl = url;
0:             setConnectionFactory(new ActiveMQConnectionFactory(brokerUrl));
1:         }
1:     }
/////////////////////////////////////////////////////////////////////////
commit:670d9d8
/////////////////////////////////////////////////////////////////////////
0: import java.io.Serializable;
0: import java.util.Hashtable;
1: import javax.jms.JMSException;
0: import javax.jms.QueueConnection;
0: import javax.jms.QueueConnectionFactory;
0: import javax.jms.TopicConnection;
0: import javax.jms.TopicConnectionFactory;
0: import javax.naming.Context;
0: import javax.naming.InitialContext;
0: import javax.naming.Name;
0: import javax.naming.spi.ObjectFactory;
1: import org.apache.activemq.util.IntrospectionSupport;
0: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory, Serializable, QueueConnectionFactory, TopicConnectionFactory
0: {
0:     private boolean tmFromJndi = false;
0:     private String tmJndiName = "java:/TransactionManager";
0: 
0:     public String getTmJndiName() {
0:         return tmJndiName;
0:     }
0: 
0:     public void setTmJndiName(String tmJndiName) {
0:         this.tmJndiName = tmJndiName;
0:     }
0: 
0:     public boolean isTmFromJndi() {
0:         return tmFromJndi;
0:     }
0: 
1:     /**
0:      * Allow transaction manager resolution from JNDI (ee deployment)
0:      * @param tmFromJndi
1:      */
0:     public void setTmFromJndi(boolean tmFromJndi) {
0:         this.tmFromJndi = tmFromJndi;
0:     }
/////////////////////////////////////////////////////////////////////////
0:         if (transactionManager == null && tmFromJndi) {
0:             try {
0:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
0:             } catch (Throwable ignored) {
0:                 ignored.printStackTrace();
0:             }
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
0:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
0:         setTmFromJndi(true);
0:         if (environment != null) {
0:             IntrospectionSupport.setProperties(this, environment);
0:         }
0:         return this;
0:     }
0: 
0:     @Override
0:     public QueueConnection createQueueConnection() throws JMSException {
0:         return (QueueConnection) createConnection();
0:     }
0: 
0:     @Override
0:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
0:         return (QueueConnection) createConnection(userName, password);
0:     }
0: 
0:     @Override
0:     public TopicConnection createTopicConnection() throws JMSException {
0:         return (TopicConnection) createConnection();
0:     }
0: 
0:     @Override
0:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
0:         return (TopicConnection) createConnection(userName, password);
0:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b84374
/////////////////////////////////////////////////////////////////////////
0:     @Override
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         return new XaConnectionPool(connection, getTransactionManager());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.pool;
0: 
0: import javax.transaction.TransactionManager;
0: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: 
1: /**
0:  * A pooled connection factory that automatically enlists
0:  * sessions in the current active XA transaction if any.
0:  */
0: public class XaPooledConnectionFactory extends PooledConnectionFactory {
0: 
0:     private TransactionManager transactionManager;
0:     
0:     public XaPooledConnectionFactory() {
0:         super();
0:     }
0: 
0:     public XaPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         super(connectionFactory);
0:     }
0: 
0:     public XaPooledConnectionFactory(String brokerURL) {
0:         super(brokerURL);
0:     }
0: 
0:     public TransactionManager getTransactionManager() {
0:         return transactionManager;
0:     }
0: 
0:     public void setTransactionManager(TransactionManager transactionManager) {
0:         this.transactionManager = transactionManager;
0:     }
0: 
0:     protected ConnectionPool createConnectionPool(ActiveMQConnection connection) {
0:         return new XaConnectionPool(connection, getPoolFactory(), getTransactionManager());
0:     }
0: 
0: }
============================================================================