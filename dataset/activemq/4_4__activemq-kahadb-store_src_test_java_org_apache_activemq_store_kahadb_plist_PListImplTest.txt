1:fc519e1: /**
1:fc519e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc519e1:  * contributor license agreements.  See the NOTICE file distributed with
1:fc519e1:  * this work for additional information regarding copyright ownership.
1:fc519e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc519e1:  * (the "License"); you may not use this file except in compliance with
1:fc519e1:  * the License.  You may obtain a copy of the License at
1:fc519e1:  *
1:fc519e1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc519e1:  *
1:fc519e1:  * Unless required by applicable law or agreed to in writing, software
1:fc519e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc519e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc519e1:  * See the License for the specific language governing permissions and
1:fc519e1:  * limitations under the License.
1:fc519e1:  */
1:32e63dc: package org.apache.activemq.store.kahadb.plist;
1:5a87481: 
1:a82c95c: import static org.junit.Assert.assertEquals;
1:a82c95c: import static org.junit.Assert.assertFalse;
1:a82c95c: import static org.junit.Assert.assertNotEquals;
1:a82c95c: import static org.junit.Assert.assertTrue;
1:32e63dc: 
1:5a87481: import java.io.File;
1:32e63dc: 
1:a82c95c: import org.apache.activemq.store.PListStore;
1:a82c95c: import org.apache.activemq.store.PListTestSupport;
1:a82c95c: import org.apache.activemq.util.IOHelper;
1:a82c95c: import org.junit.Ignore;
1:a82c95c: import org.junit.Test;
1:5a87481: 
1:32e63dc: /**
1:32e63dc:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:32e63dc:  */
1:32e63dc: public class PListImplTest extends PListTestSupport {
1:32e63dc: 
1:32e63dc: 
1:32e63dc:     @Override
1:32e63dc:     protected PListStoreImpl createPListStore() {
1:32e63dc:         return new PListStoreImpl();
1:32e63dc:     }
1:32e63dc: 
1:a82c95c:     @Override
1:32e63dc:     protected PListStore createConcurrentAddIteratePListStore() {
1:32e63dc:         PListStoreImpl store = createPListStore();
1:32e63dc:         store.setIndexPageSize(2 * 1024);
1:32e63dc:         store.setJournalMaxFileLength(1024 * 1024);
1:32e63dc:         store.setCleanupInterval(-1);
1:32e63dc:         store.setIndexEnablePageCaching(false);
1:32e63dc:         store.setIndexWriteBatchSize(100);
1:32e63dc:         return store;
1:32e63dc:     }
1:32e63dc: 
1:32e63dc:     @Override
1:32e63dc:     protected PListStore createConcurrentAddRemovePListStore() {
1:32e63dc:         PListStoreImpl store = createPListStore();
1:32e63dc:         store.setCleanupInterval(400);
1:32e63dc:         store.setJournalMaxFileLength(1024*5);
1:32e63dc:         store.setLazyInit(false);
1:32e63dc:         return store;
1:32e63dc:     }
1:32e63dc: 
1:32e63dc:     @Override
1:32e63dc:     protected PListStore createConcurrentAddRemoveWithPreloadPListStore() {
1:32e63dc:         PListStoreImpl store = createPListStore();
1:32e63dc:         store.setJournalMaxFileLength(1024*5);
1:32e63dc:         store.setCleanupInterval(5000);
1:32e63dc:         store.setIndexWriteBatchSize(500);
1:32e63dc:         return store;
1:32e63dc:     }
1:32e63dc: 
1:32e63dc:     @Override
1:32e63dc:     protected PListStore createConcurrentAddIterateRemovePListStore(boolean enablePageCache) {
1:32e63dc:         PListStoreImpl store = createPListStore();
1:32e63dc:         store.setIndexEnablePageCaching(enablePageCache);
1:32e63dc:         store.setIndexPageSize(2*1024);
1:32e63dc:         return store;
1:32e63dc:     }
1:5a87481: 
1:5a87481:     @Test
1:5a87481:     public void testIndexDir() throws Exception {
1:5a87481:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:5a87481:         assertEquals(pListStore.getDirectory(), pListStore.getIndexDirectory());
1:5a87481:     }
1:5a87481: 
1:5a87481:     @Test
1:5a87481:     public void testSetIndexDir() throws Exception {
1:5a87481:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:5a87481:         final File directory = pListStore.getDirectory();
1:5a87481:         pListStore.stop();
1:5a87481:         pListStore = createPListStore();
1:a82c95c:         pListStore.setDirectory(directory);
1:5a87481:         pListStore.setLazyInit(false);
1:5a87481:         pListStore.setIndexDirectory(new File(directory, "indexDir"));
1:5a87481:         pListStore.start();
1:5a87481:         assertNotEquals(pListStore.getDirectory(), pListStore.getIndexDirectory());
1:5a87481:         pListStore.stop();
1:5a87481:     }
1:a82c95c: 
1:a82c95c:     //Test that when lazy init is true that the directory gets cleaned up on start up
1:a82c95c:     @Test
1:a82c95c:     public void testLazyInitCleanup() throws Exception {
1:a82c95c:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:a82c95c:         File directory = pListStore.getDirectory();
1:a82c95c:         File indexDir = tempFolder.newFolder();
1:a82c95c:         pListStore.stop();
1:a82c95c: 
1:a82c95c:         //Restart one time with index directory so everything gets created
1:a82c95c:         pListStore = createPListStore();
1:a82c95c:         pListStore.setLazyInit(false);
1:a82c95c:         pListStore.setDirectory(directory);
1:a82c95c:         pListStore.setIndexDirectory(indexDir);
1:a82c95c:         pListStore.start();
1:a82c95c:         pListStore.stop();
1:a82c95c: 
1:a82c95c:         assertTrue(directory.exists());
1:a82c95c:         assertTrue(indexDir.exists());
1:a82c95c: 
1:a82c95c:         //restart again with lazy init true and make sure that the directories are cleared
1:a82c95c:         pListStore = createPListStore();
1:a82c95c:         pListStore.setLazyInit(true);
1:a82c95c:         pListStore.setDirectory(directory);
1:a82c95c:         pListStore.setIndexDirectory(indexDir);
1:a82c95c: 
1:a82c95c:         //assert that start cleaned up old data
1:a82c95c:         pListStore.start();
1:a82c95c:         assertFalse(directory.exists());
1:a82c95c:         assertFalse(indexDir.exists());
1:a82c95c: 
1:a82c95c:         //assert that initialize re-created the data dirs
1:a82c95c:         pListStore.intialize();
1:a82c95c:         assertTrue(directory.exists());
1:a82c95c:         assertTrue(indexDir.exists());
1:a82c95c:         pListStore.stop();
1:a82c95c: 
1:a82c95c:     }
1:32e63dc: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a82c95c
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotEquals;
1: import static org.junit.Assert.assertTrue;
1: import org.apache.activemq.store.PListStore;
1: import org.apache.activemq.store.PListTestSupport;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.Ignore;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         pListStore.setDirectory(directory);
1: 
1:     //Test that when lazy init is true that the directory gets cleaned up on start up
1:     @Test
1:     public void testLazyInitCleanup() throws Exception {
1:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:         File directory = pListStore.getDirectory();
1:         File indexDir = tempFolder.newFolder();
1:         pListStore.stop();
1: 
1:         //Restart one time with index directory so everything gets created
1:         pListStore = createPListStore();
1:         pListStore.setLazyInit(false);
1:         pListStore.setDirectory(directory);
1:         pListStore.setIndexDirectory(indexDir);
1:         pListStore.start();
1:         pListStore.stop();
1: 
1:         assertTrue(directory.exists());
1:         assertTrue(indexDir.exists());
1: 
1:         //restart again with lazy init true and make sure that the directories are cleared
1:         pListStore = createPListStore();
1:         pListStore.setLazyInit(true);
1:         pListStore.setDirectory(directory);
1:         pListStore.setIndexDirectory(indexDir);
1: 
1:         //assert that start cleaned up old data
1:         pListStore.start();
1:         assertFalse(directory.exists());
1:         assertFalse(indexDir.exists());
1: 
1:         //assert that initialize re-created the data dirs
1:         pListStore.intialize();
1:         assertTrue(directory.exists());
1:         assertTrue(indexDir.exists());
1:         pListStore.stop();
1: 
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:5a87481
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Test;
1: 
1: import java.io.File;
1: 
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertNotEquals;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testIndexDir() throws Exception {
1:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:         assertEquals(pListStore.getDirectory(), pListStore.getIndexDirectory());
1:     }
1: 
1:     @Test
1:     public void testSetIndexDir() throws Exception {
1:         PListStoreImpl pListStore = (PListStoreImpl)store;
1:         final File directory = pListStore.getDirectory();
1:         pListStore.stop();
1:         pListStore = createPListStore();
1:         pListStore.setLazyInit(false);
1:         pListStore.setIndexDirectory(new File(directory, "indexDir"));
1:         pListStore.start();
1:         assertNotEquals(pListStore.getDirectory(), pListStore.getIndexDirectory());
1:         pListStore.stop();
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc519e1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.plist;
1: 
0: import org.apache.activemq.store.PListStore;
0: import org.apache.activemq.store.PListTestSupport;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class PListImplTest extends PListTestSupport {
1: 
1: 
1:     @Override
1:     protected PListStoreImpl createPListStore() {
1:         return new PListStoreImpl();
1:     }
1: 
1:     protected PListStore createConcurrentAddIteratePListStore() {
1:         PListStoreImpl store = createPListStore();
1:         store.setIndexPageSize(2 * 1024);
1:         store.setJournalMaxFileLength(1024 * 1024);
1:         store.setCleanupInterval(-1);
1:         store.setIndexEnablePageCaching(false);
1:         store.setIndexWriteBatchSize(100);
1:         return store;
1:     }
1: 
1:     @Override
1:     protected PListStore createConcurrentAddRemovePListStore() {
1:         PListStoreImpl store = createPListStore();
1:         store.setCleanupInterval(400);
1:         store.setJournalMaxFileLength(1024*5);
1:         store.setLazyInit(false);
1:         return store;
1:     }
1: 
1:     @Override
1:     protected PListStore createConcurrentAddRemoveWithPreloadPListStore() {
1:         PListStoreImpl store = createPListStore();
1:         store.setJournalMaxFileLength(1024*5);
1:         store.setCleanupInterval(5000);
1:         store.setIndexWriteBatchSize(500);
1:         return store;
1:     }
1: 
1:     @Override
1:     protected PListStore createConcurrentAddIterateRemovePListStore(boolean enablePageCache) {
1:         PListStoreImpl store = createPListStore();
1:         store.setIndexEnablePageCaching(enablePageCache);
1:         store.setIndexPageSize(2*1024);
1:         return store;
1:     }
1: }
============================================================================