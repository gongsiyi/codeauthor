1:11541e8: /**
1:11541e8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:11541e8:  * contributor license agreements.  See the NOTICE file distributed with
1:11541e8:  * this work for additional information regarding copyright ownership.
1:11541e8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:11541e8:  * (the "License"); you may not use this file except in compliance with
1:11541e8:  * the License.  You may obtain a copy of the License at
1:11541e8:  *
1:11541e8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:11541e8:  *
1:11541e8:  * Unless required by applicable law or agreed to in writing, software
1:11541e8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:11541e8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:11541e8:  * See the License for the specific language governing permissions and
1:11541e8:  * limitations under the License.
1:11541e8:  */
1:11541e8: package org.apache.activemq.jndi;
2:11541e8: 
1:016ae05: import static org.junit.Assert.assertEquals;
1:016ae05: import static org.junit.Assert.assertFalse;
1:016ae05: import static org.junit.Assert.assertTrue;
1:016ae05: import static org.junit.Assert.fail;
1:016ae05: 
1:016ae05: import java.util.Arrays;
1:016ae05: import java.util.Collection;
1:11541e8: import java.util.Hashtable;
1:11541e8: 
1:11541e8: import javax.naming.Context;
1:11541e8: import javax.naming.NamingException;
1:11541e8: import javax.naming.spi.InitialContextFactory;
1:11541e8: 
1:016ae05: import org.apache.activemq.ActiveMQConnectionFactory;
1:11541e8: import org.apache.activemq.ActiveMQSslConnectionFactory;
1:016ae05: import org.apache.activemq.ActiveMQXASslConnectionFactory;
1:11541e8: import org.junit.Before;
1:11541e8: import org.junit.Test;
1:016ae05: import org.junit.runner.RunWith;
1:016ae05: import org.junit.runners.Parameterized;
1:016ae05: import org.junit.runners.Parameterized.Parameters;
1:11541e8: 
1:016ae05: @RunWith(Parameterized.class)
1:11541e8: public class ActiveMQSslInitialContextFactoryTest {
1:11541e8: 
1:11541e8:     protected Context context;
1:016ae05:     protected boolean isXa;
1:016ae05: 
1:016ae05:     @Parameters(name = "isXa={0}")
1:016ae05:     public static Collection<Object[]> data() {
1:016ae05:         return Arrays.asList(new Object[][] {
1:016ae05:                 {true},
1:016ae05:                 {false}
1:016ae05:         });
1:016ae05:     }
1:016ae05: 
1:016ae05:     /**
1:016ae05:      * @param isXa
1:016ae05:      */
1:016ae05:     public ActiveMQSslInitialContextFactoryTest(boolean isXa) {
1:016ae05:         super();
1:016ae05:         this.isXa = isXa;
1:016ae05:     }
1:11541e8: 
1:11541e8:     @Before
1:11541e8:     public void setUp() throws Exception {
1:11541e8:         InitialContextFactory factory = new ActiveMQSslInitialContextFactory();
1:11541e8:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:11541e8:         environment.put("java.naming.provider.url", "vm://0");
1:11541e8:         environment.put("connection.ConnectionFactory.userName", "user");
1:11541e8:         environment.put("connection.ConnectionFactory.userPassword", "test");
1:11541e8:         environment.put("connection.ConnectionFactory.keyStore", "keystore.jks");
1:11541e8:         environment.put("connection.ConnectionFactory.keyStorePassword", "test");
1:11541e8:         environment.put("connection.ConnectionFactory.keyStoreType", "JKS");
1:11541e8:         environment.put("connection.ConnectionFactory.trustStore", "truststore.jks");
1:11541e8:         environment.put("connection.ConnectionFactory.trustStorePassword", "test");
1:11541e8:         environment.put("connection.ConnectionFactory.trustStoreType", "JKS");
1:016ae05:         environment.put("xa", Boolean.toString(isXa));
1:016ae05: 
1:11541e8:         context = factory.getInitialContext(environment);
1:11541e8:         assertTrue("No context created", context != null);
1:11541e8:     }
1:11541e8: 
1:11541e8:     @Test
1:016ae05:     public void testCreateXaConnectionFactory() throws NamingException {
1:016ae05:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) context.lookup("ConnectionFactory");
1:016ae05:         assertTrue(factory instanceof ActiveMQSslConnectionFactory);
1:016ae05:         if (isXa) {
1:016ae05:             assertTrue(factory instanceof ActiveMQXASslConnectionFactory);
1:016ae05:         } else {
1:016ae05:             assertFalse(factory instanceof ActiveMQXASslConnectionFactory);
1:016ae05:         }
1:11541e8:     }
1:11541e8: 
1:11541e8:     @Test
1:11541e8:     public void testAssertConnectionFactoryProperties() throws NamingException {
1:11541e8:         Object c = context.lookup("ConnectionFactory");
1:11541e8:         if (c instanceof ActiveMQSslConnectionFactory) {
1:11541e8:             ActiveMQSslConnectionFactory factory = (ActiveMQSslConnectionFactory)c;
1:11541e8:             assertEquals(factory.getKeyStore(), "keystore.jks");
1:11541e8:             assertEquals(factory.getKeyStorePassword(), "test");
1:11541e8:             assertEquals(factory.getKeyStoreType(), "JKS");
1:11541e8:             assertEquals(factory.getTrustStore(), "truststore.jks");
1:11541e8:             assertEquals(factory.getTrustStorePassword(), "test");
1:11541e8:             assertEquals(factory.getTrustStoreType(), "JKS");
1:11541e8:         } else {
1:11541e8:             fail("Did not find an ActiveMQSslConnectionFactory");
1:11541e8:         }
1:11541e8:     }
1:11541e8: 
1:11541e8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQXASslConnectionFactory;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
1:     protected boolean isXa;
1: 
1:     @Parameters(name = "isXa={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {true},
1:                 {false}
1:         });
1:     }
1: 
1:     /**
1:      * @param isXa
1:      */
1:     public ActiveMQSslInitialContextFactoryTest(boolean isXa) {
1:         super();
1:         this.isXa = isXa;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         environment.put("xa", Boolean.toString(isXa));
1: 
1:     public void testCreateXaConnectionFactory() throws NamingException {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) context.lookup("ConnectionFactory");
1:         assertTrue(factory instanceof ActiveMQSslConnectionFactory);
1:         if (isXa) {
1:             assertTrue(factory instanceof ActiveMQXASslConnectionFactory);
1:         } else {
1:             assertFalse(factory instanceof ActiveMQXASslConnectionFactory);
1:         }
author:Michael L. Bloom
-------------------------------------------------------------------------------
commit:11541e8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: 
1: import org.apache.activemq.ActiveMQSslConnectionFactory;
1: import org.junit.Before;
1: import org.junit.Test;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.fail;
1: 
1: public class ActiveMQSslInitialContextFactoryTest {
1: 
1:     protected Context context;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         InitialContextFactory factory = new ActiveMQSslInitialContextFactory();
1:         Hashtable<String, String> environment = new Hashtable<String, String>();
1:         environment.put("java.naming.provider.url", "vm://0");
1:         environment.put("connection.ConnectionFactory.userName", "user");
1:         environment.put("connection.ConnectionFactory.userPassword", "test");
1:         environment.put("connection.ConnectionFactory.keyStore", "keystore.jks");
1:         environment.put("connection.ConnectionFactory.keyStorePassword", "test");
1:         environment.put("connection.ConnectionFactory.keyStoreType", "JKS");
1:         environment.put("connection.ConnectionFactory.trustStore", "truststore.jks");
1:         environment.put("connection.ConnectionFactory.trustStorePassword", "test");
1:         environment.put("connection.ConnectionFactory.trustStoreType", "JKS");
1:         
1:         context = factory.getInitialContext(environment);
1:         assertTrue("No context created", context != null);
1:     }
1: 
1:     @Test
0:     public void testCreateConnectionFactory() throws NamingException {
0:         assertTrue(context.lookup("ConnectionFactory") instanceof ActiveMQSslConnectionFactory);
1:     }
1: 
1:     @Test
1:     public void testAssertConnectionFactoryProperties() throws NamingException {
1:         Object c = context.lookup("ConnectionFactory");
1:         if (c instanceof ActiveMQSslConnectionFactory) {
1:             ActiveMQSslConnectionFactory factory = (ActiveMQSslConnectionFactory)c;
1:             assertEquals(factory.getKeyStore(), "keystore.jks");
1:             assertEquals(factory.getKeyStorePassword(), "test");
1:             assertEquals(factory.getKeyStoreType(), "JKS");
1:             assertEquals(factory.getTrustStore(), "truststore.jks");
1:             assertEquals(factory.getTrustStorePassword(), "test");
1:             assertEquals(factory.getTrustStoreType(), "JKS");
1:         } else {
1:             fail("Did not find an ActiveMQSslConnectionFactory");
1:         }
1:     }
1: 
1: }
============================================================================