1:595e44c: /**
1:595e44c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:595e44c:  * contributor license agreements.  See the NOTICE file distributed with
1:595e44c:  * this work for additional information regarding copyright ownership.
1:595e44c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:595e44c:  * (the "License"); you may not use this file except in compliance with
1:595e44c:  * the License.  You may obtain a copy of the License at
1:595e44c:  *
1:595e44c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:595e44c:  *
1:595e44c:  * Unless required by applicable law or agreed to in writing, software
1:595e44c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:595e44c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:595e44c:  * See the License for the specific language governing permissions and
1:595e44c:  * limitations under the License.
1:595e44c:  */
1:595e44c: package org.apache.activemq.bugs;
1:595e44c: 
1:595e44c: import static org.junit.Assert.assertEquals;
1:595e44c: import static org.junit.Assert.fail;
1:595e44c: 
1:595e44c: import java.io.File;
1:595e44c: import java.util.ArrayList;
1:595e44c: import java.util.List;
1:595e44c: import java.util.concurrent.TimeUnit;
1:595e44c: import java.util.concurrent.atomic.AtomicLong;
1:595e44c: 
1:595e44c: import javax.jms.Connection;
1:595e44c: import javax.jms.ConnectionFactory;
1:595e44c: import javax.jms.JMSException;
1:595e44c: import javax.jms.Message;
1:595e44c: import javax.jms.MessageConsumer;
1:595e44c: import javax.jms.MessageListener;
1:595e44c: import javax.jms.MessageProducer;
1:595e44c: import javax.jms.Session;
1:595e44c: 
1:595e44c: import org.apache.activemq.ActiveMQConnectionFactory;
1:595e44c: import org.apache.activemq.ScheduledMessage;
1:595e44c: import org.apache.activemq.broker.BrokerService;
1:595e44c: import org.apache.activemq.util.IOHelper;
1:595e44c: import org.junit.After;
1:595e44c: import org.junit.Before;
1:595e44c: import org.junit.Test;
1:595e44c: 
1:595e44c: public class AMQ3140Test {
1:595e44c: 
1:595e44c:     private static final int MESSAGES_PER_THREAD = 100;
1:595e44c: 
1:595e44c:     private static final int THREAD_COUNT = 10;
1:595e44c: 
1:595e44c:     private BrokerService broker;
1:595e44c: 
1:595e44c:     private static final String QUEUE_NAME = "test";
1:595e44c: 
1:595e44c:     private static class Sender extends Thread {
1:595e44c: 
1:595e44c:         private static final int DELAY = 3000;
1:595e44c: 
1:595e44c:         @Override
1:595e44c:         public void run() {
1:595e44c:             try {
1:595e44c:                 ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:595e44c:                 Connection connection = cf.createConnection();
1:595e44c:                 connection.start();
1:595e44c:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:595e44c:                 MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:595e44c:                 Message message = session.createTextMessage("test");
1:595e44c:                 for (int i = 0; i < MESSAGES_PER_THREAD; i++) {
1:595e44c:                     message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELAY);
1:595e44c:                     producer.send(message);
1:595e44c:                 }
1:595e44c:                 session.close();
1:595e44c:                 connection.close();
1:595e44c:             } catch (JMSException e) {
1:595e44c:                 fail(e.getMessage());
1:595e44c:             }
1:595e44c:         }
1:595e44c:     }
1:595e44c: 
1:595e44c:     @Before
1:595e44c:     public void setup() throws Exception {
1:595e44c:         File schedulerDirectory = new File("target/test/ScheduledDB");
1:595e44c: 
1:595e44c:         IOHelper.mkdirs(schedulerDirectory);
1:595e44c:         IOHelper.deleteChildren(schedulerDirectory);
1:595e44c: 
1:595e44c:         broker = new BrokerService();
1:595e44c:         broker.setSchedulerSupport(true);
1:8b61c39:         broker.setPersistent(true);
1:595e44c:         broker.setDeleteAllMessagesOnStartup(true);
1:595e44c:         broker.setDataDirectory("target");
1:595e44c:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:595e44c:         broker.setUseJmx(false);
1:595e44c:         broker.addConnector("vm://localhost");
1:595e44c: 
1:595e44c:         broker.start();
1:595e44c:         broker.waitUntilStarted();
1:595e44c:     }
1:595e44c: 
1:595e44c:     @After
1:595e44c:     public void tearDown() throws Exception {
1:595e44c:         broker.stop();
1:595e44c:     }
1:595e44c: 
1:595e44c:     @Test
1:595e44c:     public void noMessageLostOnConcurrentScheduling() throws JMSException, InterruptedException {
1:595e44c: 
1:595e44c:         final AtomicLong receiveCounter = new AtomicLong();
1:595e44c: 
1:595e44c:         ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:595e44c:         Connection connection = cf.createConnection();
1:595e44c:         connection.start();
1:595e44c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:595e44c: 
1:595e44c:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:595e44c:         consumer.setMessageListener(new MessageListener() {
1:595e44c: 
1:8b61c39:             @Override
1:595e44c:             public void onMessage(Message message) {
1:595e44c:                 receiveCounter.incrementAndGet();
1:595e44c:             }
1:595e44c:         });
1:595e44c: 
1:595e44c:         List<Sender> senderThreads = new ArrayList<Sender>();
1:595e44c:         for (int i = 0; i < THREAD_COUNT; i++) {
1:595e44c:             Sender sender = new Sender();
1:595e44c:             senderThreads.add(sender);
1:595e44c:         }
1:595e44c:         for (Sender sender : senderThreads) {
1:595e44c:             sender.start();
1:595e44c:         }
1:595e44c:         for (Sender sender : senderThreads) {
1:595e44c:             sender.join();
1:595e44c:         }
1:595e44c: 
1:595e44c:         // wait until all scheduled messages has been received
1:d1446c3:         TimeUnit.MINUTES.sleep(2);
1:595e44c: 
1:595e44c:         session.close();
1:595e44c:         connection.close();
1:595e44c: 
1:595e44c:         assertEquals(MESSAGES_PER_THREAD * THREAD_COUNT, receiveCounter.get());
1:595e44c:     }
1:595e44c: 
1:595e44c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d1446c3
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.MINUTES.sleep(2);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b61c39
/////////////////////////////////////////////////////////////////////////
1:         broker.setPersistent(true);
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
commit:595e44c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ScheduledMessage;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ3140Test {
1: 
1:     private static final int MESSAGES_PER_THREAD = 100;
1: 
1:     private static final int THREAD_COUNT = 10;
1: 
1:     private BrokerService broker;
1: 
1:     private static final String QUEUE_NAME = "test";
1: 
1:     private static class Sender extends Thread {
1: 
1:         private static final int DELAY = 3000;
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:                 Connection connection = cf.createConnection();
1:                 connection.start();
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 MessageProducer producer = session.createProducer(session.createQueue(QUEUE_NAME));
1:                 Message message = session.createTextMessage("test");
1:                 for (int i = 0; i < MESSAGES_PER_THREAD; i++) {
1:                     message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, DELAY);
1:                     producer.send(message);
1:                 }
1:                 session.close();
1:                 connection.close();
1:             } catch (JMSException e) {
1:                 fail(e.getMessage());
1:             }
1:         }
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         File schedulerDirectory = new File("target/test/ScheduledDB");
1: 
1:         IOHelper.mkdirs(schedulerDirectory);
1:         IOHelper.deleteChildren(schedulerDirectory);
1: 
1:         broker = new BrokerService();
1:         broker.setSchedulerSupport(true);
0:         broker.setPersistent(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setDataDirectory("target");
1:         broker.setSchedulerDirectoryFile(schedulerDirectory);
1:         broker.setUseJmx(false);
1:         broker.addConnector("vm://localhost");
1: 
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test
1:     public void noMessageLostOnConcurrentScheduling() throws JMSException, InterruptedException {
1: 
1:         final AtomicLong receiveCounter = new AtomicLong();
1: 
1:         ConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumer = session.createConsumer(session.createQueue(QUEUE_NAME));
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message message) {
1:                 receiveCounter.incrementAndGet();
1:             }
1:         });
1: 
1:         List<Sender> senderThreads = new ArrayList<Sender>();
1:         for (int i = 0; i < THREAD_COUNT; i++) {
1:             Sender sender = new Sender();
1:             senderThreads.add(sender);
1:         }
1:         for (Sender sender : senderThreads) {
1:             sender.start();
1:         }
1:         for (Sender sender : senderThreads) {
1:             sender.join();
1:         }
1: 
1:         // wait until all scheduled messages has been received
0:         TimeUnit.SECONDS.sleep(10);
1: 
1:         session.close();
1:         connection.close();
1: 
1:         assertEquals(MESSAGES_PER_THREAD * THREAD_COUNT, receiveCounter.get());
1:     }
1: 
1: }
============================================================================