4:cb895f0: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:54c8eeb:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:093c901: 
1:6fc3744: import java.io.File;
1:6fc3744: import java.io.IOException;
1:c1051c8: import java.net.URI;
1:6630e81: import java.util.*;
1:86cbdfd: import java.util.concurrent.atomic.AtomicInteger;
1:f812e34: 
1:6630e81: import javax.management.MalformedObjectNameException;
1:3601e81: import javax.management.ObjectName;
1:6630e81: import javax.management.openmbean.CompositeData;
1:6630e81: import javax.management.openmbean.OpenDataException;
1:093c901: 
1:093c901: import org.apache.activemq.ActiveMQConnectionMetaData;
1:07d4e8c: import org.apache.activemq.broker.BrokerService;
1:ed5d43b: import org.apache.activemq.broker.ConnectionContext;
1:e2ef8b8: import org.apache.activemq.broker.TransportConnector;
1:0def1d4: import org.apache.activemq.broker.region.Subscription;
1:6630e81: import org.apache.activemq.command.*;
1:e2ef8b8: import org.apache.activemq.network.NetworkConnector;
1:df7cb77: import org.apache.activemq.util.BrokerSupport;
1:89f22da: import org.slf4j.Logger;
1:89f22da: import org.slf4j.LoggerFactory;
1:f812e34: 
1:d29ca2a: public class BrokerView implements BrokerViewMBean {
1:46654b2: 
1:89f22da:     private static final Logger LOG = LoggerFactory.getLogger(BrokerView.class);
1:46654b2: 
1:b3873fb:     ManagedRegionBroker broker;
1:46654b2: 
1:f812e34:     private final BrokerService brokerService;
1:e8c8abc:     private final AtomicInteger sessionIdCounter = new AtomicInteger(0);
1:c7c8e53:     private ObjectName jmsJobScheduler;
1:f812e34: 
1:07d4e8c:     public BrokerView(BrokerService brokerService, ManagedRegionBroker managedBroker) throws Exception {
1:07d4e8c:         this.brokerService = brokerService;
1:f812e34:         this.broker = managedBroker;
1:d29ca2a:     }
1:c1051c8: 
1:d680ba1:     public ManagedRegionBroker getBroker() {
1:d680ba1:         return broker;
1:c1051c8:     }
1:82e3ce8: 
1:b3873fb:     public void setBroker(ManagedRegionBroker broker) {
1:b3873fb:         this.broker = broker;
1:c1051c8:     }
1:82e3ce8: 
1:d75e418:     @Override
1:d29ca2a:     public String getBrokerId() {
1:999dc0d:         return safeGetBroker().getBrokerId().toString();
1:c1051c8:     }
1:c1051c8: 
1:d75e418:     @Override
1:89f793e:     public String getBrokerName() {
1:999dc0d:         return safeGetBroker().getBrokerName();
1:c1051c8:     }
1:c1051c8: 
1:d75e418:     @Override
1:093c901:     public String getBrokerVersion() {
1:093c901:         return ActiveMQConnectionMetaData.PROVIDER_VERSION;
1:df6b542:     }
1:c1051c8: 
1:f2225c2:     @Override
1:f2225c2:     public String getUptime() {
1:f2225c2:         return brokerService.getUptime();
1:f2225c2:     }
1:f2225c2: 
1:d75e418:     @Override
1:8e0865d:     public long getUptimeMillis() {
1:8e0865d:         return brokerService.getUptimeMillis();
1:8e0865d:     }
1:8e0865d: 
1:8e0865d:     @Override
1:fde22a8:     public int getCurrentConnectionsCount() {
1:fde22a8:         return brokerService.getCurrentConnections();
1:fde22a8:     }
1:fde22a8: 
1:fde22a8:     @Override
1:fde22a8:     public long getTotalConnectionsCount() {
1:fde22a8:         return brokerService.getTotalConnections();
1:fde22a8:     }
1:fde22a8: 
1:fde22a8:     @Override
1:07d4e8c:     public void gc() throws Exception {
1:f812e34:         brokerService.getBroker().gc();
1:cb895f0:         try {
1:89f22da:             brokerService.getPersistenceAdapter().checkpoint(true);
1:89f22da:         } catch (IOException e) {
1:e1bbde7:             LOG.error("Failed to checkpoint persistence adapter on gc request", e);
1:df6b542:         }
1:c82f6f3:     }
1:c1051c8: 
1:cb895f0:     @Override
1:d29ca2a:     public void start() throws Exception {
1:f812e34:         brokerService.start();
1:cb895f0:     }
1:c1051c8: 
1:d75e418:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:4a16c1f:         brokerService.stop();
1:cb895f0:     }
1:98497b1: 
1:d75e418:     @Override
1:4a16c1f:     public void restart() throws Exception {
1:d4d9855:         if (brokerService.isRestartAllowed()) {
1:d4d9855:             brokerService.requestRestart();
1:d4d9855:             brokerService.stop();
1:d4d9855:         } else {
1:d4d9855:             throw new Exception("Restart is not allowed");
1:d4d9855:         }
1:cb895f0:     }
1:df6b542: 
1:4a16c1f:     @Override
1:46654b2:     public void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval) throws Exception {
1:98497b1:         brokerService.stopGracefully(connectorName, queueName, timeout, pollInterval);
1:98497b1:     }
1:98497b1: 
1:d75e418:     @Override
1:d29ca2a:     public long getTotalEnqueueCount() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getEnqueues().getCount();
1:cb895f0:     }
1:df6b542: 
1:d75e418:     @Override
1:d29ca2a:     public long getTotalDequeueCount() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getDequeues().getCount();
1:093c901:     }
1:c82f6f3: 
1:d75e418:     @Override
1:d29ca2a:     public long getTotalConsumerCount() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getConsumers().getCount();
1:b3873fb:     }
1:cb895f0: 
1:d75e418:     @Override
1:7092b19:     public long getTotalProducerCount() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getProducers().getCount();
1:4a16c1f:     }
1:cb895f0: 
1:d75e418:     @Override
1:07d4e8c:     public long getTotalMessageCount() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getMessages().getCount();
1:f812e34:     }
1:b3873fb: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the average size of a message (bytes)
1:f71e2fe:      */
1:fde22a8:     @Override
1:37eb6b0:     public long getAverageMessageSize() {
1:37eb6b0:         // we are okay with the size without decimals so cast to long
1:37eb6b0:         return (long) safeGetBroker().getDestinationStatistics().getMessageSize().getAverageSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the max size of a message (bytes)
1:f71e2fe:      */
1:fde22a8:     @Override
1:f71e2fe:     public long getMaxMessageSize() {
1:f71e2fe:         return safeGetBroker().getDestinationStatistics().getMessageSize().getMaxSize();
1:f71e2fe:     }
1:f71e2fe: 
1:f71e2fe:     /**
1:f71e2fe:      * @return the min size of a message (bytes)
1:f71e2fe:      */
1:fde22a8:     @Override
1:f71e2fe:     public long getMinMessageSize() {
1:f71e2fe:         return safeGetBroker().getDestinationStatistics().getMessageSize().getMinSize();
1:f71e2fe:     }
1:f71e2fe: 
1:d29ca2a:     public long getTotalMessagesCached() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().getMessagesCached().getCount();
1:ed5d43b:     }
1:f71e2fe: 
1:d75e418:     @Override
1:23cda2d:     public int getMemoryPercentUsage() {
1:2b0024c:         return brokerService.getSystemUsage().getMemoryUsage().getPercentUsage();
1:ed5d43b:     }
1:4a16c1f: 
1:d75e418:     @Override
1:d29ca2a:     public long getMemoryLimit() {
1:2b0024c:         return brokerService.getSystemUsage().getMemoryUsage().getLimit();
1:ed5d43b:     }
1:f812e34: 
1:d75e418:     @Override
1:d29ca2a:     public void setMemoryLimit(long limit) {
1:2b0024c:         brokerService.getSystemUsage().getMemoryUsage().setLimit(limit);
1:ed5d43b:     }
1:83c3dca: 
1:d75e418:     @Override
1:83c3dca:     public long getStoreLimit() {
1:83c3dca:         return brokerService.getSystemUsage().getStoreUsage().getLimit();
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:23cda2d:     public int getStorePercentUsage() {
1:83c3dca:         return brokerService.getSystemUsage().getStoreUsage().getPercentUsage();
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:23cda2d:     public long getTempLimit() {
1:46654b2:         return brokerService.getSystemUsage().getTempUsage().getLimit();
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:23cda2d:     public int getTempPercentUsage() {
1:46654b2:         return brokerService.getSystemUsage().getTempUsage().getPercentUsage();
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:f21992e:     public long getJobSchedulerStoreLimit() {
1:f21992e:         return brokerService.getSystemUsage().getJobSchedulerUsage().getLimit();
1:ed5d43b:     }
1:83c3dca: 
1:d75e418:     @Override
1:f21992e:     public int getJobSchedulerStorePercentUsage() {
1:f21992e:         return brokerService.getSystemUsage().getJobSchedulerUsage().getPercentUsage();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:83c3dca:     public void setStoreLimit(long limit) {
1:83c3dca:         brokerService.getSystemUsage().getStoreUsage().setLimit(limit);
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:23cda2d:     public void setTempLimit(long limit) {
1:83c3dca:         brokerService.getSystemUsage().getTempUsage().setLimit(limit);
1:83c3dca:     }
1:83c3dca: 
1:d75e418:     @Override
1:f21992e:     public void setJobSchedulerStoreLimit(long limit) {
1:f21992e:         brokerService.getSystemUsage().getJobSchedulerUsage().setLimit(limit);
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:d29ca2a:     public void resetStatistics() {
1:999dc0d:         safeGetBroker().getDestinationStatistics().reset();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:ccf3f3c:     public void enableStatistics() {
1:999dc0d:         safeGetBroker().getDestinationStatistics().setEnabled(true);
1:f812e34:     }
1:f812e34: 
1:d75e418:     @Override
1:ccf3f3c:     public void disableStatistics() {
1:999dc0d:         safeGetBroker().getDestinationStatistics().setEnabled(false);
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:f812e34:     public boolean isStatisticsEnabled() {
1:999dc0d:         return safeGetBroker().getDestinationStatistics().isEnabled();
1:f812e34:     }
1:082bbf0: 
1:d75e418:     @Override
1:082bbf0:     public boolean isPersistent() {
1:082bbf0:         return brokerService.isPersistent();
1:082bbf0:     }
1:f812e34: 
1:d75e418:     @Override
1:d29ca2a:     public void terminateJVM(int exitCode) {
1:d29ca2a:         System.exit(exitCode);
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getTopics() {
1:4997427:         return safeGetBroker().getTopicsNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getQueues() {
1:4997427:         return safeGetBroker().getQueuesNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:6630e81:     public String queryQueues(String filter, int page, int pageSize) throws IOException {
1:6630e81:         return DestinationsViewFilter.create(filter)
1:6630e81:                 .setDestinations(safeGetBroker().getQueueViews())
1:6630e81:                 .filter(page, pageSize);
1:6630e81:     }
1:6630e81: 
1:6630e81:     @Override
1:6630e81:     public String queryTopics(String filter, int page, int pageSize) throws IOException {
1:6630e81:         return DestinationsViewFilter.create(filter)
1:6630e81:                 .setDestinations(safeGetBroker().getTopicViews())
1:6630e81:                 .filter(page, pageSize);
1:6630e81:     }
1:6630e81: 
1:6630e81:     public CompositeData[] browseQueue(String queueName) throws OpenDataException, MalformedObjectNameException {
1:6630e81:        return safeGetBroker().getQueueView(queueName).browse();
1:6630e81:     }
1:6630e81: 
1:6630e81:     @Override
1:f812e34:     public ObjectName[] getTemporaryTopics() {
1:4997427:         return safeGetBroker().getTemporaryTopicsNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getTemporaryQueues() {
1:4997427:         return safeGetBroker().getTemporaryQueuesNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getTopicSubscribers() {
1:4997427:         return safeGetBroker().getTopicSubscribersNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getDurableTopicSubscribers() {
1:4997427:         return safeGetBroker().getDurableTopicSubscribersNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getQueueSubscribers() {
1:4997427:         return safeGetBroker().getQueueSubscribersNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getTemporaryTopicSubscribers() {
1:4997427:         return safeGetBroker().getTemporaryTopicSubscribersNonSuppressed();
1:3601e81:     }
1:3601e81: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getTemporaryQueueSubscribers() {
1:4997427:         return safeGetBroker().getTemporaryQueueSubscribersNonSuppressed();
1:f812e34:     }
1:f812e34: 
1:d75e418:     @Override
1:f812e34:     public ObjectName[] getInactiveDurableTopicSubscribers() {
1:4997427:         return safeGetBroker().getInactiveDurableTopicSubscribersNonSuppressed();
1:f812e34:     }
1:f812e34: 
1:d75e418:     @Override
1:7092b19:     public ObjectName[] getTopicProducers() {
1:4997427:         return safeGetBroker().getTopicProducersNonSuppressed();
1:f812e34:     }
1:f812e34: 
1:d75e418:     @Override
1:7092b19:     public ObjectName[] getQueueProducers() {
1:4997427:         return safeGetBroker().getQueueProducersNonSuppressed();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:7092b19:     public ObjectName[] getTemporaryTopicProducers() {
1:4997427:         return safeGetBroker().getTemporaryTopicProducersNonSuppressed();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:7092b19:     public ObjectName[] getTemporaryQueueProducers() {
1:4997427:         return safeGetBroker().getTemporaryQueueProducersNonSuppressed();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:629b18c:     public ObjectName[] getDynamicDestinationProducers() {
1:4997427:         return safeGetBroker().getDynamicDestinationProducersNonSuppressed();
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:e2ef8b8:     public String addConnector(String discoveryAddress) throws Exception {
1:e2ef8b8:         TransportConnector connector = brokerService.addConnector(discoveryAddress);
1:999dc0d:         if (connector == null) {
1:999dc0d:             throw new NoSuchElementException("Not connector matched the given name: " + discoveryAddress);
1:d29ca2a:         }
1:7c2735d:         brokerService.startTransportConnector(connector);
1:e2ef8b8:         return connector.getName();
1:e2ef8b8:     }
1:e2ef8b8: 
1:d75e418:     @Override
1:e2ef8b8:     public String addNetworkConnector(String discoveryAddress) throws Exception {
1:e2ef8b8:         NetworkConnector connector = brokerService.addNetworkConnector(discoveryAddress);
1:999dc0d:         if (connector == null) {
1:999dc0d:             throw new NoSuchElementException("Not connector matched the given name: " + discoveryAddress);
1:d29ca2a:         }
1:c2eb486:         brokerService.registerNetworkConnectorMBean(connector);
2:e2ef8b8:         connector.start();
1:e2ef8b8:         return connector.getName();
1:e2ef8b8:     }
1:e2ef8b8: 
1:d75e418:     @Override
1:e2ef8b8:     public boolean removeConnector(String connectorName) throws Exception {
1:e2ef8b8:         TransportConnector connector = brokerService.getConnectorByName(connectorName);
1:999dc0d:         if (connector == null) {
1:999dc0d:             throw new NoSuchElementException("Not connector matched the given name: " + connectorName);
1:d29ca2a:         }
1:e2ef8b8:         connector.stop();
1:e2ef8b8:         return brokerService.removeConnector(connector);
1:e2ef8b8:     }
1:e2ef8b8: 
1:d75e418:     @Override
1:e2ef8b8:     public boolean removeNetworkConnector(String connectorName) throws Exception {
1:e2ef8b8:         NetworkConnector connector = brokerService.getNetworkConnectorByName(connectorName);
1:999dc0d:         if (connector == null) {
1:999dc0d:             throw new NoSuchElementException("Not connector matched the given name: " + connectorName);
1:d29ca2a:         }
1:e2ef8b8:         connector.stop();
1:e2ef8b8:         return brokerService.removeNetworkConnector(connector);
1:e2ef8b8:     }
1:e2ef8b8: 
1:d75e418:     @Override
1:7f5213b:     public void addTopic(String name) throws Exception {
1:46654b2:         safeGetBroker().getContextBroker()
1:46654b2:             .addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQTopic(name), true);
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:7f5213b:     public void addQueue(String name) throws Exception {
1:46654b2:         safeGetBroker().getContextBroker()
1:46654b2:             .addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQQueue(name), true);
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:7f5213b:     public void removeTopic(String name) throws Exception {
1:999dc0d:         safeGetBroker().getContextBroker().removeDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQTopic(name), 1000);
1:d29ca2a:     }
1:f812e34: 
1:d75e418:     @Override
1:7f5213b:     public void removeQueue(String name) throws Exception {
1:999dc0d:         safeGetBroker().getContextBroker().removeDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQQueue(name), 1000);
1:f21992e:     }
1:f812e34: 
1:d75e418:     @Override
1:46654b2:     public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception {
1:82e3ce8:         ConnectionContext context = getConnectionContext();
1:999dc0d:         context.setBroker(safeGetBroker());
1:ad5ad88:         context.setClientId(clientId);
1:ad5ad88:         ConsumerInfo info = new ConsumerInfo();
1:ad5ad88:         ConsumerId consumerId = new ConsumerId();
1:ad5ad88:         consumerId.setConnectionId(clientId);
1:e8c8abc:         consumerId.setSessionId(sessionIdCounter.incrementAndGet());
1:ad5ad88:         consumerId.setValue(0);
1:ad5ad88:         info.setConsumerId(consumerId);
1:ad5ad88:         info.setDestination(new ActiveMQTopic(topicName));
1:333158a:         info.setSubscriptionName(subscriberName);
1:ad5ad88:         info.setSelector(selector);
1:999dc0d:         Subscription subscription = safeGetBroker().addConsumer(context, info);
1:999dc0d:         safeGetBroker().removeConsumer(context, info);
1:0def1d4:         if (subscription != null) {
1:0def1d4:             return subscription.getObjectName();
1:f21992e:         }
1:0def1d4:         return null;
1:f21992e:     }
1:f812e34: 
1:d75e418:     @Override
1:ad5ad88:     public void destroyDurableSubscriber(String clientId, String subscriberName) throws Exception {
1:ad5ad88:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:ad5ad88:         info.setClientId(clientId);
1:933eb2f:         info.setSubscriptionName(subscriberName);
1:82e3ce8:         ConnectionContext context = getConnectionContext();
1:999dc0d:         context.setBroker(safeGetBroker());
1:ad5ad88:         context.setClientId(clientId);
1:e06685f:         brokerService.getBroker().removeSubscription(context, info);
1:999dc0d:     }
1:ed5d43b: 
1:d75e418:     @Override
1:c4d8d86:     public void reloadLog4jProperties() throws Throwable {
1:25f1fe8:         Log4JConfigView.doReloadLog4jProperties();
1:c4d8d86:     }
1:c4d8d86: 
1:d75e418:     @Override
1:46654b2:     public Map<String, String> getTransportConnectors() {
1:cb895f0:         Map<String, String> answer = new HashMap<String, String>();
1:c4d8d86:         try {
1:cb895f0:             for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:cb895f0:                 answer.put(connector.getName(), connector.getConnectUri().toString());
1:999dc0d:             }
1:cb895f0:         } catch (Exception e) {
1:cb895f0:             LOG.debug("Failed to read URI to build transport connectors map", e);
1:999dc0d:         }
1:cb895f0:         return answer;
1:999dc0d:     }
1:c4d8d86: 
1:d75e418:     @Override
1:cb895f0:     public String getTransportConnectorByType(String type) {
1:cb895f0:         return brokerService.getTransportConnectorURIsAsMap().get(type);
2:b4b3950:     }
1:c4d8d86: 
1:d75e418:     @Override
1:c1051c8:     public String getVMURL() {
1:c1051c8:         URI answer = brokerService.getVmConnectorURI();
1:c1051c8:         return answer != null ? answer.toString() : "";
1:c1051c8:     }
1:6fc3744: 
1:d75e418:     @Override
1:6fc3744:     public String getDataDirectory() {
1:6fc3744:         File file = brokerService.getDataDirectoryFile();
1:6fc3744:         try {
1:46654b2:             return file != null ? file.getCanonicalPath() : "";
1:6fc3744:         } catch (IOException e) {
1:6fc3744:             return "";
1:6fc3744:         }
1:6fc3744:     }
1:c7c8e53: 
1:d75e418:     @Override
1:c7c8e53:     public ObjectName getJMSJobScheduler() {
1:c7c8e53:         return this.jmsJobScheduler;
1:c7c8e53:     }
1:c7c8e53: 
1:c7c8e53:     public void setJMSJobScheduler(ObjectName name) {
1:46654b2:         this.jmsJobScheduler = name;
1:c7c8e53:     }
2:ed5d43b: 
1:d75e418:     @Override
1:d75e418:     public boolean isSlave() {
1:d75e418:         return brokerService.isSlave();
1:d75e418:     }
1:ed5d43b: 
1:999dc0d:     private ManagedRegionBroker safeGetBroker() {
1:999dc0d:         if (broker == null) {
1:999dc0d:             throw new IllegalStateException("Broker is not yet started.");
1:999dc0d:         }
1:ed5d43b: 
1:999dc0d:         return broker;
1:999dc0d:     }
1:ed5d43b: 
1:82e3ce8:     private ConnectionContext getConnectionContext() {
1:82e3ce8:         ConnectionContext context;
1:46654b2:         if (broker == null) {
1:82e3ce8:             context = new ConnectionContext();
1:46654b2:         } else {
1:82e3ce8:             ConnectionContext sharedContext = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:46654b2:             // Make a local copy of the sharedContext. We do this because we do
1:46654b2:             // not want to set a clientId on the
1:46654b2:             // global sharedContext. Taking a copy of the sharedContext is a
1:46654b2:             // good way to make sure that we are not
1:46654b2:             // messing up the shared context
1:82e3ce8:             context = sharedContext.copy();
1:82e3ce8:         }
1:82e3ce8: 
1:82e3ce8:         return context;
1:82e3ce8:     }
1:82e3ce8: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
commit:8e0865d
/////////////////////////////////////////////////////////////////////////
1:     public long getUptimeMillis() {
1:         return brokerService.getUptimeMillis();
1:     }
1: 
1:     @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:6630e81
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
1: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
1:     public String queryQueues(String filter, int page, int pageSize) throws IOException {
1:         return DestinationsViewFilter.create(filter)
1:                 .setDestinations(safeGetBroker().getQueueViews())
1:                 .filter(page, pageSize);
1:     }
1: 
1:     @Override
1:     public String queryTopics(String filter, int page, int pageSize) throws IOException {
1:         return DestinationsViewFilter.create(filter)
1:                 .setDestinations(safeGetBroker().getTopicViews())
1:                 .filter(page, pageSize);
1:     }
1: 
1:     public CompositeData[] browseQueue(String queueName) throws OpenDataException, MalformedObjectNameException {
1:        return safeGetBroker().getQueueView(queueName).browse();
1:     }
1: 
1:     @Override
commit:d4d9855
/////////////////////////////////////////////////////////////////////////
1:         if (brokerService.isRestartAllowed()) {
1:             brokerService.requestRestart();
1:             brokerService.stop();
1:         } else {
1:             throw new Exception("Restart is not allowed");
1:         }
author:Jeff Genender
-------------------------------------------------------------------------------
commit:4997427
/////////////////////////////////////////////////////////////////////////
1:         return safeGetBroker().getTopicsNonSuppressed();
1:         return safeGetBroker().getQueuesNonSuppressed();
1:         return safeGetBroker().getTemporaryTopicsNonSuppressed();
1:         return safeGetBroker().getTemporaryQueuesNonSuppressed();
1:         return safeGetBroker().getTopicSubscribersNonSuppressed();
1:         return safeGetBroker().getDurableTopicSubscribersNonSuppressed();
1:         return safeGetBroker().getQueueSubscribersNonSuppressed();
1:         return safeGetBroker().getTemporaryTopicSubscribersNonSuppressed();
1:         return safeGetBroker().getTemporaryQueueSubscribersNonSuppressed();
1:         return safeGetBroker().getInactiveDurableTopicSubscribersNonSuppressed();
1:         return safeGetBroker().getTopicProducersNonSuppressed();
1:         return safeGetBroker().getQueueProducersNonSuppressed();
1:         return safeGetBroker().getTemporaryTopicProducersNonSuppressed();
1:         return safeGetBroker().getTemporaryQueueProducersNonSuppressed();
1:         return safeGetBroker().getDynamicDestinationProducersNonSuppressed();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:46654b2
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         return brokerService.getSystemUsage().getTempUsage().getLimit();
1:         return brokerService.getSystemUsage().getTempUsage().getPercentUsage();
/////////////////////////////////////////////////////////////////////////
1:         safeGetBroker().getContextBroker()
1:             .addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQTopic(name), true);
1:         safeGetBroker().getContextBroker()
1:             .addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQQueue(name), true);
/////////////////////////////////////////////////////////////////////////
1:     public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, String> getTransportConnectors() {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             return file != null ? file.getCanonicalPath() : "";
/////////////////////////////////////////////////////////////////////////
1:         this.jmsJobScheduler = name;
/////////////////////////////////////////////////////////////////////////
1:         if (broker == null) {
1:         } else {
1:             // Make a local copy of the sharedContext. We do this because we do
1:             // not want to set a clientId on the
1:             // global sharedContext. Taking a copy of the sharedContext is a
1:             // good way to make sure that we are not
1:             // messing up the shared context
commit:82e3ce8
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = getConnectionContext();
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = getConnectionContext();
/////////////////////////////////////////////////////////////////////////
1: 
1:     private ConnectionContext getConnectionContext() {
1:         ConnectionContext context;
0:         if(broker == null) {
1:             context = new ConnectionContext();
1: 
1:         }
0:         else {
1:             ConnectionContext sharedContext = BrokerSupport.getConnectionContext(broker.getContextBroker());
0:             //Make a local copy of the sharedContext. We do this because we do not want to set a clientId on the
0:             //global sharedContext. Taking a copy of the sharedContext is a good way to make sure that we are not
0:             //messing up the shared context
1:             context = sharedContext.copy();
1:         }
1: 
1:         return context;
1:     }
commit:25f1fe8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Log4JConfigView.doReloadLog4jProperties();
commit:fde22a8
/////////////////////////////////////////////////////////////////////////
1:     public int getCurrentConnectionsCount() {
1:         return brokerService.getCurrentConnections();
1:     }
1: 
1:     @Override
1:     public long getTotalConnectionsCount() {
1:         return brokerService.getTotalConnections();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Failed to checkpoint persistence adapter on gc request", e);
author:gtully
-------------------------------------------------------------------------------
commit:7c2735d
/////////////////////////////////////////////////////////////////////////
1:         brokerService.startTransportConnector(connector);
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:37eb6b0
/////////////////////////////////////////////////////////////////////////
1:     public long getAverageMessageSize() {
1:         // we are okay with the size without decimals so cast to long
1:         return (long) safeGetBroker().getDestinationStatistics().getMessageSize().getAverageSize();
commit:f2225c2
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getUptime() {
1:         return brokerService.getUptime();
1:     }
1: 
author:Christian Posta
-------------------------------------------------------------------------------
commit:c2eb486
/////////////////////////////////////////////////////////////////////////
1:         brokerService.registerNetworkConnectorMBean(connector);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the average size of a message (bytes)
1:      */
0:     public double getAverageMessageSize() {
0:         return safeGetBroker().getDestinationStatistics().getMessageSize().getAverageSize();
1:     }
1: 
1:     /**
1:      * @return the max size of a message (bytes)
1:      */
1:     public long getMaxMessageSize() {
1:         return safeGetBroker().getDestinationStatistics().getMessageSize().getMaxSize();
1:     }
1: 
1:     /**
1:      * @return the min size of a message (bytes)
1:      */
1:     public long getMinMessageSize() {
1:         return safeGetBroker().getDestinationStatistics().getMessageSize().getMinSize();
1:     }
1: 
1: 
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1:     private ObjectName jmsJobScheduler;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public ObjectName getJMSJobScheduler() {
1:         return this.jmsJobScheduler;
1:     }
1:     
1:     public void setJMSJobScheduler(ObjectName name) {
0:         this.jmsJobScheduler=name;
1:     }
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),true);
0:         broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),true);
commit:98497b1
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval)
0:             throws Exception {
1:         brokerService.stopGracefully(connectorName, queueName, timeout, pollInterval);
1:     }
1:     
commit:6fc3744
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getDataDirectory() {
1:         File file = brokerService.getDataDirectoryFile();
1:         try {
0:             return file != null ? file.getCanonicalPath():"";
1:         } catch (IOException e) {
1:             return "";
1:         }
1:     }
commit:c1051c8
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
1:     
1: 
0:     public String getOpenWireURL() {
0:         String answer = brokerService.getTransportConnectorURIsAsMap().get("tcp");
0:         return answer != null ? answer : "";
1:     }
1: 
0:     public String getStompURL() {
0:         String answer = brokerService.getTransportConnectorURIsAsMap().get("stomp");
0:         return answer != null ? answer : "";
1:     }
1: 
0:     public String getSslURL() {
0:         String answer = brokerService.getTransportConnectorURIsAsMap().get("ssl");
0:         return answer != null ? answer : "";
1:     }
1: 
0:     public String getStompSslURL() {
0:         String answer = brokerService.getTransportConnectorURIsAsMap().get("stomp+ssl");
0:         return answer != null ? answer : "";
1:     }
1: 
1:     public String getVMURL() {
1:         URI answer = brokerService.getVmConnectorURI();
1:         return answer != null ? answer.toString() : "";
1:     }
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1:     public int getMemoryPercentUsage() {
/////////////////////////////////////////////////////////////////////////
1:     public int getStorePercentUsage() {
1:     public long getTempLimit() {
1:     public int getTempPercentUsage() {
/////////////////////////////////////////////////////////////////////////
1:     public void setTempLimit(long limit) {
/////////////////////////////////////////////////////////////////////////
0:         return broker.getTopicSubscribers();
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:     
1:     public long getStoreLimit() {
1:         return brokerService.getSystemUsage().getStoreUsage().getLimit();
1:     }
1: 
0:     public int getStorePercentageUsed() {
1:         return brokerService.getSystemUsage().getStoreUsage().getPercentUsage();
1:     }
1: 
1:  
0:     public long getTmpLimit() {
0:        return brokerService.getSystemUsage().getTempUsage().getLimit();
1:     }
1: 
0:     public int getTmpPercentageUsed() {
0:        return brokerService.getSystemUsage().getTempUsage().getPercentUsage();
1:     }
1: 
1:     public void setStoreLimit(long limit) {
1:         brokerService.getSystemUsage().getStoreUsage().setLimit(limit);
1:     }
1: 
0:     public void setTmpLimit(long limit) {
1:         brokerService.getSystemUsage().getTempUsage().setLimit(limit);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
commit:082bbf0
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isPersistent() {
1:         return brokerService.isPersistent();
1:     }
commit:e2ef8b8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1:     public String addConnector(String discoveryAddress) throws Exception {
1:         TransportConnector connector = brokerService.addConnector(discoveryAddress);
1:         connector.start();
1:         return connector.getName();
1:     }
1: 
1:     public String addNetworkConnector(String discoveryAddress) throws Exception {
1:         NetworkConnector connector = brokerService.addNetworkConnector(discoveryAddress);
1:         connector.start();
1:         return connector.getName();
1:     }
1: 
1:     public boolean removeConnector(String connectorName) throws Exception {
1:         TransportConnector connector = brokerService.getConnectorByName(connectorName);
1:         connector.stop();
1:         return brokerService.removeConnector(connector);
1:     }
1: 
1:     public boolean removeNetworkConnector(String connectorName) throws Exception {
1:         NetworkConnector connector = brokerService.getNetworkConnectorByName(connectorName);
1:         connector.stop();
1:         return brokerService.removeNetworkConnector(connector);
1:     }
1: 
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
0:         return brokerService.getUsageManager().getMemoryUsage().getPercentUsage();
0:         return brokerService.getUsageManager().getMemoryUsage().getLimit();
0:         brokerService.getUsageManager().getMemoryUsage().setLimit(limit);
commit:54c8eeb
/////////////////////////////////////////////////////////////////////////
0: //import org.apache.log4j.LogManager;
0: //import org.apache.log4j.PropertyConfigurator;
/////////////////////////////////////////////////////////////////////////
0:         /*
1:         */
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: import java.net.URL;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.log4j.LogManager;
0: import org.apache.log4j.PropertyConfigurator;
/////////////////////////////////////////////////////////////////////////
1:     
0:     //  doc comment inherited from BrokerViewMBean
0:     public void reloadLog4jProperties() throws Exception {
0:         LogManager.resetConfiguration();
0:         ClassLoader cl = this.getClass().getClassLoader();
0:         URL log4jprops = cl.getResource("log4j.properties");
0:         if (log4jprops != null) {
0:             PropertyConfigurator.configure(log4jprops);
1:         }
1:     }
1:     
commit:c82f6f3
/////////////////////////////////////////////////////////////////////////
0:     public ObjectName[] getInactiveDurableTopicSubscribers(){
0:         return broker.getInactiveDurableTopicSubscribers();
1:     }
1:     
commit:3601e81
/////////////////////////////////////////////////////////////////////////
1: import javax.management.ObjectName;
0:     private final ManagedRegionBroker broker;
0:     public BrokerView(ManagedRegionBroker broker, UsageManager usageManager) {
/////////////////////////////////////////////////////////////////////////
0:         return broker.getDestinationStatistics().getEnqueues().getCount();    
0:         return broker.getDestinationStatistics().getDequeues().getCount();
0:         return broker.getDestinationStatistics().getConsumers().getCount();
0:         return broker.getDestinationStatistics().getMessages().getCount();
0:         return broker.getDestinationStatistics().getMessagesCached().getCount();
/////////////////////////////////////////////////////////////////////////
0:         broker.getDestinationStatistics().reset();
1: 
0:     public ObjectName[] getTopics(){
0:         return broker.getTopics();
1:     }
1: 
0:     public ObjectName[] getQueues(){
0:         return broker.getQueues();
1:     }
1: 
0:     public ObjectName[] getTemporaryTopics(){
0:         return broker.getTemporaryTopics();
1:     }
1: 
0:     public ObjectName[] getTemporaryQueues(){
0:         return broker.getTemporaryQueues();
1:     }
1: 
0:     public ObjectName[] getTopicSubscribers(){
0:       return broker.getTemporaryTopicSubscribers();
1:     }
1: 
0:     public ObjectName[] getDurableTopicSubscribers(){
0:         return broker.getDurableTopicSubscribers();
1:     }
1: 
0:     public ObjectName[] getQueueSubscribers(){
0:        return broker.getQueueSubscribers();
1:     }
1: 
0:     public ObjectName[] getTemporaryTopicSubscribers(){
0:         return broker.getTemporaryTopicSubscribers();
1:     }
1: 
0:     public ObjectName[] getTemporaryQueueSubscribers(){
0:         return broker.getTemporaryQueueSubscribers();
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e06685f
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getBroker().removeSubscription(context, info);
commit:cb895f0
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     public  Map<String, String> getTransportConnectors() {
1:         Map<String, String> answer = new HashMap<String, String>();
1:         try {
1:             for (TransportConnector connector : brokerService.getTransportConnectors()) {
1:                 answer.put(connector.getName(), connector.getConnectUri().toString());
1:             }
1:         } catch (Exception e) {
1:             LOG.debug("Failed to read URI to build transport connectors map", e);
1:         }
1:         return answer;
1:     }
1: 
1:     @Override
1:     public String getTransportConnectorByType(String type) {
1:         return brokerService.getTransportConnectorURIsAsMap().get(type);
1:     }
1: 
0:     @Deprecated
1:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
0:      */
0:     @Deprecated
1:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
0:      */
0:     @Deprecated
1:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
0:      */
0:     @Deprecated
1:     /**
0:      * @deprecated use {@link #getTransportConnectors()} or {@link #getTransportConnectorByType(String)}
0:      */
commit:df7cb77
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.BrokerSupport;
/////////////////////////////////////////////////////////////////////////
0:         broker.getContextBroker().addDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),true);
0:         broker.getContextBroker().addDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),true);
0:         broker.getContextBroker().removeDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
0:         broker.getContextBroker().removeDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
/////////////////////////////////////////////////////////////////////////
commit:17851fa
/////////////////////////////////////////////////////////////////////////
0:         broker.getContextBroker().addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),true);
0:         broker.getContextBroker().addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),true);
0:         broker.getContextBroker().removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
0:         broker.getContextBroker().removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
commit:093c901
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.ActiveMQConnectionMetaData;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getBrokerVersion() {
1:     	return ActiveMQConnectionMetaData.PROVIDER_VERSION;
1:     }
commit:b3873fb
/////////////////////////////////////////////////////////////////////////
1:     ManagedRegionBroker broker;
/////////////////////////////////////////////////////////////////////////
1:     public void setBroker(ManagedRegionBroker broker) {
1:         this.broker = broker;
1:     }
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4a16c1f
/////////////////////////////////////////////////////////////////////////
1:     public void restart() throws Exception {
0:         brokerService.requestRestart();
1:         brokerService.stop();
1:     }
1: 
1:     @Override
commit:30f531d
/////////////////////////////////////////////////////////////////////////
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.InvocationTargetException;
0: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * @version $Revision$
0:  */
/////////////////////////////////////////////////////////////////////////
1:     public void reloadLog4jProperties() throws Throwable {
1: 
0:         // Avoid a direct dependency on log4j.. use reflection.
1:         try {
0:             ClassLoader cl = getClass().getClassLoader();
0:             Class logManagerClass = cl.loadClass("org.apache.log4j.LogManager");
1:             
0:             Method resetConfiguration = logManagerClass.getMethod("resetConfiguration", new Class[]{});
0:             resetConfiguration.invoke(null, new Object[]{});
1:             
0:             URL log4jprops = cl.getResource("log4j.properties");
0:             if (log4jprops != null) {
0:                 Class propertyConfiguratorClass = cl.loadClass("org.apache.log4j.PropertyConfigurator");
0:                 Method configure = propertyConfiguratorClass.getMethod("configure", new Class[]{URL.class});
0:                 configure.invoke(null, new Object[]{log4jprops});
1:             }
0:         } catch (InvocationTargetException e) {
0:             throw e.getTargetException();
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:         return brokerService.getSystemUsage().getMemoryUsage().getPercentUsage();
1:         return brokerService.getSystemUsage().getMemoryUsage().getLimit();
1:         brokerService.getSystemUsage().getMemoryUsage().setLimit(limit);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         info.setSubscriptionName(subscriberName);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:     private final BrokerService brokerService;
1:         this.broker = managedBroker;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         brokerService.getBroker().gc();
1:         brokerService.start();
1: 
0:         brokerService.stop();
1: 
0:         return broker.getDestinationStatistics().getEnqueues().getCount();
1: 
1: 
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         brokerService.getMemoryManager().setLimit(limit);
1: 
1: 
1:     }
1: 
1: 
1:     public boolean isStatisticsEnabled() {
0:         return broker.getDestinationStatistics().isEnabled();
1:     }
1:     public ObjectName[] getTopics() {
1:     public ObjectName[] getQueues() {
1:     public ObjectName[] getTemporaryTopics() {
1:     public ObjectName[] getTemporaryQueues() {
1:     public ObjectName[] getTopicSubscribers() {
1:     public ObjectName[] getDurableTopicSubscribers() {
0:         return broker.getDurableTopicSubscribers();
1:     }
1: 
1:     public ObjectName[] getQueueSubscribers() {
0:         return broker.getQueueSubscribers();
1:     }
1: 
1:     public ObjectName[] getTemporaryTopicSubscribers() {
0:         return broker.getTemporaryTopicSubscribers();
1:     }
1: 
1:     public ObjectName[] getTemporaryQueueSubscribers() {
1: 
1:     public ObjectName[] getInactiveDurableTopicSubscribers() {
/////////////////////////////////////////////////////////////////////////
0:         broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
0:                                  1000);
0:         broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
0:                                  1000);
1: 
0:     public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName,
0:                                               String selector) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
0:      * Returns the broker's administration connection context used for
0:      * configuring the broker at startup
/////////////////////////////////////////////////////////////////////////
1: 
0:      * Factory method to create the new administration connection context
0:      * object. Note this method is here rather than inside a default broker
0:      * implementation to ensure that the broker reference inside it is the outer
0:      * most interceptor
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
commit:333158a
/////////////////////////////////////////////////////////////////////////
1:         info.setSubscriptionName(subscriberName);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
0: 	private final BrokerService brokerService;
1:     public BrokerView(BrokerService brokerService, ManagedRegionBroker managedBroker) throws Exception {
1:         this.brokerService = brokerService;
0: 		this.broker = managedBroker;
1:     public void gc() throws Exception {
0:     	brokerService.getBroker().gc();
0:     	brokerService.start();
0:     	brokerService.stop();
/////////////////////////////////////////////////////////////////////////
1:     public long getTotalMessageCount() {
/////////////////////////////////////////////////////////////////////////
0:         return brokerService.getMemoryManager().getPercentUsage();
0:         return brokerService.getMemoryManager().getLimit();
0:     	brokerService.getMemoryManager().setLimit(limit);
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void addTopic(String name) throws Exception {
1:     public void addQueue(String name) throws Exception {
1:     public void removeTopic(String name) throws Exception {
1:     public void removeQueue(String name) throws Exception {
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.ConnectionContext;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void addTopic(String name) throws Throwable {
0:         broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name));
1:     }
1: 
0:     public void addQueue(String name) throws Throwable {
0:         broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name));
1:     }
1: 
0:     public void removeTopic(String name) throws Throwable {
0:         broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name), 1000);
1:     }
1: 
0:     public void removeQueue(String name) throws Throwable {
0:         broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name), 1000);
1:     }
0:     static public ConnectionContext getConnectionContext(Broker broker) {
0:         ConnectionContext context = new ConnectionContext();
0:         context.setBroker(broker);
0:         return context;
1:     }
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.broker.jmx;
0: 
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.region.DestinationStatistics;
0: import org.apache.activemq.memory.UsageManager;
0: 
1: public class BrokerView implements BrokerViewMBean {
0:     
0:     private final Broker broker;
0:     private final DestinationStatistics destinationStatistics;
0:     private final UsageManager usageManager;
0: 
0:     public BrokerView(Broker broker, DestinationStatistics destinationStatistics, UsageManager usageManager) {
0:         this.broker = broker;
0:         this.destinationStatistics = destinationStatistics;
0:         this.usageManager = usageManager;        
1:     }
0:     
1:     public String getBrokerId() {
0:         return broker.getBrokerId().toString();
1:     }
0:     
0:     public void gc() {
0:         broker.gc();
1:     }
0: 
1:     public void start() throws Exception {
0:         broker.start();
1:     }
0:     
1:     public void stop() throws Exception {
0:         broker.stop();
1:     }
0:     
1:     public long getTotalEnqueueCount() {
0:         return destinationStatistics.getEnqueues().getCount();    
1:     }
1:     public long getTotalDequeueCount() {
0:         return destinationStatistics.getDequeues().getCount();
1:     }
1:     public long getTotalConsumerCount() {
0:         return destinationStatistics.getConsumers().getCount();
1:     }
0:     public long getTotalMessages() {
0:         return destinationStatistics.getMessages().getCount();
1:     }    
1:     public long getTotalMessagesCached() {
0:         return destinationStatistics.getMessagesCached().getCount();
1:     }
0: 
0:     public int getMemoryPercentageUsed() {
0:         return usageManager.getPercentUsage();
1:     }
1:     public long getMemoryLimit() {
0:         return usageManager.getLimit();
1:     }
1:     public void setMemoryLimit(long limit) {
0:         usageManager.setLimit(limit);
1:     }
0:     
1:     public void resetStatistics() {
0:         destinationStatistics.reset();
1:     }
0: 
1:     public void terminateJVM(int exitCode) {
1:         System.exit(exitCode);
1:     }
0:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d75e418
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
0: 
1:     @Override
0: 
1:     @Override
1:     @Override
1:     @Override
0: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     public boolean isSlave() {
1:         return brokerService.isSlave();
1:     }
0: 
commit:f21992e
/////////////////////////////////////////////////////////////////////////
0:     
1:     public long getJobSchedulerStoreLimit() {
1:         return brokerService.getSystemUsage().getJobSchedulerUsage().getLimit();
1:     }
0:     
1:     public int getJobSchedulerStorePercentUsage() {
1:         return brokerService.getSystemUsage().getJobSchedulerUsage().getPercentUsage();
1:     }
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void setJobSchedulerStoreLimit(long limit) {
1:         brokerService.getSystemUsage().getJobSchedulerUsage().setLimit(limit);
1:     }
commit:999dc0d
/////////////////////////////////////////////////////////////////////////
0: import java.util.NoSuchElementException;
/////////////////////////////////////////////////////////////////////////
1:         return safeGetBroker().getBrokerId().toString();
1:         return safeGetBroker().getBrokerName();
/////////////////////////////////////////////////////////////////////////
1:         return safeGetBroker().getDestinationStatistics().getEnqueues().getCount();
1:         return safeGetBroker().getDestinationStatistics().getDequeues().getCount();
1:         return safeGetBroker().getDestinationStatistics().getConsumers().getCount();
1:         return safeGetBroker().getDestinationStatistics().getProducers().getCount();
1:         return safeGetBroker().getDestinationStatistics().getMessages().getCount();
1:         return safeGetBroker().getDestinationStatistics().getMessagesCached().getCount();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         safeGetBroker().getDestinationStatistics().reset();
1:         safeGetBroker().getDestinationStatistics().setEnabled(true);
1:         safeGetBroker().getDestinationStatistics().setEnabled(false);
1:         return safeGetBroker().getDestinationStatistics().isEnabled();
/////////////////////////////////////////////////////////////////////////
0:         return safeGetBroker().getTopics();
0:         return safeGetBroker().getQueues();
0:         return safeGetBroker().getTemporaryTopics();
0:         return safeGetBroker().getTemporaryQueues();
0:         return safeGetBroker().getTopicSubscribers();
0:         return safeGetBroker().getDurableTopicSubscribers();
0:         return safeGetBroker().getQueueSubscribers();
0:         return safeGetBroker().getTemporaryTopicSubscribers();
0:         return safeGetBroker().getTemporaryQueueSubscribers();
0:         return safeGetBroker().getInactiveDurableTopicSubscribers();
0:         return safeGetBroker().getTopicProducers();
0:         return safeGetBroker().getQueueProducers();
0:         return safeGetBroker().getTemporaryTopicProducers();
0:         return safeGetBroker().getTemporaryQueueProducers();
0:         return safeGetBroker().getDynamicDestinationProducers();
1:         if (connector == null) {
1:             throw new NoSuchElementException("Not connector matched the given name: " + discoveryAddress);
1:         }
1:         if (connector == null) {
1:             throw new NoSuchElementException("Not connector matched the given name: " + discoveryAddress);
1:         }
1:         if (connector == null) {
1:             throw new NoSuchElementException("Not connector matched the given name: " + connectorName);
1:         }
1:         if (connector == null) {
1:             throw new NoSuchElementException("Not connector matched the given name: " + connectorName);
1:         }
0:         safeGetBroker().getContextBroker().addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQTopic(name),true);
0:         safeGetBroker().getContextBroker().addDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQQueue(name),true);
1:         safeGetBroker().getContextBroker().removeDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQTopic(name), 1000);
1:         safeGetBroker().getContextBroker().removeDestination(BrokerSupport.getConnectionContext(safeGetBroker().getContextBroker()), new ActiveMQQueue(name), 1000);
1:         context.setBroker(safeGetBroker());
/////////////////////////////////////////////////////////////////////////
1:         Subscription subscription = safeGetBroker().addConsumer(context, info);
1:         safeGetBroker().removeConsumer(context, info);
/////////////////////////////////////////////////////////////////////////
1:         context.setBroker(safeGetBroker());
0:         safeGetBroker().removeSubscription(context, info);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:     private ManagedRegionBroker safeGetBroker() {
1:         if (broker == null) {
1:             throw new IllegalStateException("Broker is not yet started.");
1:         }
0: 
1:         return broker;
1:     }
commit:b4b3950
/////////////////////////////////////////////////////////////////////////
0: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
0:             Class<?> logManagerClass = cl.loadClass("org.apache.log4j.LogManager");
0:             String configurationOptionStr = System.getProperty("log4j.configuration");
0:             URL log4jprops = null;
0:             if (configurationOptionStr != null) {
0:                 try {
0:                     log4jprops = new URL(configurationOptionStr);
0:                 } catch (MalformedURLException ex) {
0:                     log4jprops = cl.getResource("log4j.properties");
1:                 }
0:             } else {
0:                log4jprops = cl.getResource("log4j.properties");
1:             }
0: 
0:                 Class<?> propertyConfiguratorClass = cl.loadClass("org.apache.log4j.PropertyConfigurator");
commit:629b18c
/////////////////////////////////////////////////////////////////////////
1:     public ObjectName[] getDynamicDestinationProducers() {
0:         return broker.getDynamicDestinationProducers();
0:     }
0: 
commit:7092b19
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     }
0: 
0:         return ActiveMQConnectionMetaData.PROVIDER_VERSION;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:     public long getTotalProducerCount() {
0:         return broker.getDestinationStatistics().getProducers().getCount();
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
1:     public ObjectName[] getTopicProducers() {
0:         return broker.getTopicProducers();
0:     }
0: 
1:     public ObjectName[] getQueueProducers() {
0:         return broker.getQueueProducers();
0:     }
0: 
1:     public ObjectName[] getTemporaryTopicProducers() {
0:         return broker.getTemporaryTopicProducers();
0:     }
0: 
1:     public ObjectName[] getTemporaryQueueProducers() {
0:         return broker.getTemporaryQueueProducers();
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:89f22da
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(BrokerView.class);
/////////////////////////////////////////////////////////////////////////
0:         try {
1:             brokerService.getPersistenceAdapter().checkpoint(true);
1:         } catch (IOException e) {
0:             LOG.error("Failed to checkpoint persistence adapter on gc request, reason:" + e, e);
0:         }
commit:9e885ef
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.security.SecurityContext;
/////////////////////////////////////////////////////////////////////////
0:         context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
commit:a38e372
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isSlave() {
0:         return brokerService.isSlave();
0:     }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:89f793e
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getBrokerName() {
0:         return broker.getBrokerName();
0:     }    
commit:ccf3f3c
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void enableStatistics() {
0:         broker.getDestinationStatistics().setEnabled(true);
0:     }    
0:     
1:     public void disableStatistics() {
0:         broker.getDestinationStatistics().setEnabled(false);
0:     }   
0:     
0:     public boolean isStatisticsEnabled() {
0:     	return broker.getDestinationStatistics().isEnabled();
0:     }
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:e8c8abc
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
0: 
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger sessionIdCounter = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1:         consumerId.setSessionId(sessionIdCounter.incrementAndGet());
commit:1a070b7
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
0:      * Returns the broker's administration connection context used for configuring the broker
0:      * at startup
0:      */
0:     public static ConnectionContext getConnectionContext(Broker broker) {
0:         ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
0:         if (adminConnectionContext == null) {
0:             adminConnectionContext = createAdminConnectionContext(broker);
0:             broker.setAdminConnectionContext(adminConnectionContext);
0:         }
0:         return adminConnectionContext;
0:     }
0:     
0:     /**
0:      * Factory method to create the new administration connection context object.
0:      * Note this method is here rather than inside a default broker implementation to
0:      * ensure that the broker reference inside it is the outer most interceptor
0:      */
0:     protected static ConnectionContext createAdminConnectionContext(Broker broker) {
0:         ConnectionContext context = new ConnectionContext();
0:         context.setBroker(broker);
0:         return context;
commit:8abb655
/////////////////////////////////////////////////////////////////////////
0:         return broker.getAdminConnectionContext();
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
1:     public ManagedRegionBroker getBroker() {
1:         return broker;
0:     }
0: 
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
0:     public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         Subscription subscription = broker.addConsumer(context, info);
1:         if (subscription != null) {
1:             return subscription.getObjectName();
0:         }
1:         return null;
commit:ad5ad88
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ConsumerId;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.RemoveSubscriptionInfo;
0:     final ManagedRegionBroker broker;
/////////////////////////////////////////////////////////////////////////
0:     public void createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception {
0:         ConnectionContext context = new ConnectionContext();
0:         context.setBroker(broker);
1:         context.setClientId(clientId);
1:         ConsumerInfo info = new ConsumerInfo();
1:         ConsumerId consumerId = new ConsumerId();
1:         consumerId.setConnectionId(clientId);
0:         consumerId.setSessionId(0);
1:         consumerId.setValue(0);
1:         info.setConsumerId(consumerId);
1:         info.setDestination(new ActiveMQTopic(topicName));
0:         info.setSubcriptionName(subscriberName);
1:         info.setSelector(selector);
0:         broker.addConsumer(context, info);
0:         broker.removeConsumer(context, info);
0:     }
0: 
1:     public void destroyDurableSubscriber(String clientId, String subscriberName) throws Exception {
1:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:         info.setClientId(clientId);
0:         info.setSubcriptionName(subscriberName);
0:         ConnectionContext context = new ConnectionContext();
0:         context.setBroker(broker);
1:         context.setClientId(clientId);
0:         broker.removeSubscription(context, info);
0:     }
0:     
============================================================================