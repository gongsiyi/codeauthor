1:456c1b1: /**
1:456c1b1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456c1b1:  * contributor license agreements.  See the NOTICE file distributed with
1:456c1b1:  * this work for additional information regarding copyright ownership.
1:456c1b1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456c1b1:  * (the "License"); you may not use this file except in compliance with
1:456c1b1:  * the License.  You may obtain a copy of the License at
1:456c1b1:  *
1:456c1b1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456c1b1:  *
1:456c1b1:  * Unless required by applicable law or agreed to in writing, software
1:456c1b1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456c1b1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456c1b1:  * See the License for the specific language governing permissions and
1:456c1b1:  * limitations under the License.
1:456c1b1:  */
1:456c1b1: package org.apache.activemq.broker.policy;
1:456c1b1: 
1:456c1b1: import java.util.concurrent.atomic.AtomicInteger;
1:456c1b1: 
1:456c1b1: import javax.jms.Destination;
1:456c1b1: import javax.jms.JMSException;
1:456c1b1: import javax.jms.Message;
1:456c1b1: import javax.jms.MessageListener;
1:456c1b1: import javax.jms.Session;
1:456c1b1: 
1:456c1b1: import org.apache.activemq.ActiveMQConnection;
1:456c1b1: import org.apache.activemq.ActiveMQConnectionFactory;
1:456c1b1: import org.apache.activemq.RedeliveryPolicy;
1:456c1b1: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:456c1b1: 
1:456c1b1: public class MessageListenerDeadLetterTest extends DeadLetterTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory
1:8bf987b:             .getLogger(MessageListenerDeadLetterTest.class);
1:456c1b1: 
1:456c1b1:     private int rollbackCount;
1:456c1b1: 
1:456c1b1:     private Session dlqSession;
1:456c1b1: 
1:456c1b1:     private final Error[] error = new Error[1];
1:456c1b1: 
1:456c1b1:     protected void doTest() throws Exception {
1:456c1b1:         messageCount = 200;
1:456c1b1:         connection.start();
1:456c1b1: 
1:456c1b1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:456c1b1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:456c1b1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:456c1b1: 
1:456c1b1:         makeConsumer();
1:456c1b1:         makeDlqConsumer();
1:456c1b1: 
1:456c1b1:         sendMessages();
1:456c1b1: 
1:456c1b1:         // now lets receive and rollback N times
1:456c1b1:         int maxRollbacks = messageCount * rollbackCount;
1:456c1b1:         consumer.setMessageListener(new RollbackMessageListener(maxRollbacks, rollbackCount));
1:456c1b1: 
1:456c1b1:         for (int i = 0; i < messageCount; i++) {
1:456c1b1:             Message msg = dlqConsumer.receive(4000);
1:456c1b1:             if (error[0] != null) {
1:456c1b1:                 // error from message listener
1:456c1b1:                 throw error[0];
2:456c1b1:             }
1:456c1b1:             assertMessage(msg, i);
1:456c1b1:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:8bf987b:         }
1:456c1b1:         if (error[0] != null) {
1:456c1b1:             throw error[0];
1:456c1b1:         }
1:456c1b1:     }
1:456c1b1: 
1:456c1b1:     protected void makeDlqConsumer() throws JMSException {
1:456c1b1:         dlqDestination = createDlqDestination();
1:456c1b1: 
1:456c1b1:         LOG.info("Consuming from dead letter on: " + dlqDestination);
1:456c1b1:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:456c1b1:     }
1:456c1b1: 
1:456c1b1:     @Override
1:456c1b1:     protected void setUp() throws Exception {
1:456c1b1:         transactedMode = true;
1:456c1b1:         super.setUp();
1:456c1b1:         dlqSession = connection.createSession(transactedMode, acknowledgeMode);
1:456c1b1:     }
1:456c1b1: 
1:456c1b1:     @Override
1:456c1b1:     protected void tearDown() throws Exception {
1:456c1b1:         dlqConsumer.close();
1:456c1b1:         dlqSession.close();
1:456c1b1:         session.close();
1:456c1b1:         super.tearDown();
1:456c1b1:     };
1:456c1b1: 
1:456c1b1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:456c1b1:             throws Exception {
1:456c1b1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:456c1b1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:456c1b1:         policy.setMaximumRedeliveries(3);
1:456c1b1:         policy.setBackOffMultiplier((short) 1);
1:dc5ebcd:         policy.setRedeliveryDelay(0);
1:456c1b1:         policy.setInitialRedeliveryDelay(0);
1:456c1b1:         policy.setUseExponentialBackOff(false);
1:456c1b1:         answer.setRedeliveryPolicy(policy);
1:456c1b1:         return answer;
1:456c1b1:     }
1:456c1b1: 
1:456c1b1:     protected Destination createDlqDestination() {
1:456c1b1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:456c1b1:     }
1:456c1b1: 
1:456c1b1:     class RollbackMessageListener implements MessageListener {
1:456c1b1: 
1:456c1b1:         final int maxRollbacks;
1:456c1b1: 
1:456c1b1:         final int deliveryCount;
1:456c1b1: 
1:456c1b1:         AtomicInteger rollbacks = new AtomicInteger();
1:456c1b1: 
1:456c1b1:         RollbackMessageListener(int c, int delvery) {
1:456c1b1:             maxRollbacks = c;
1:456c1b1:             deliveryCount = delvery;
1:456c1b1:         }
1:456c1b1: 
1:456c1b1:         public void onMessage(Message message) {
1:456c1b1:             try {
1:456c1b1:                 int expectedMessageId = rollbacks.get() / deliveryCount;
1:456c1b1:                 LOG.info("expecting messageId: " + expectedMessageId);
1:456c1b1:                 assertMessage(message, expectedMessageId);
1:456c1b1:                 if (rollbacks.incrementAndGet() > maxRollbacks) {
1:456c1b1:                     fail("received too many messages, already done too many rollbacks: "
1:456c1b1:                             + rollbacks);
1:456c1b1:                 }
1:456c1b1:                 session.rollback();
1:456c1b1: 
1:456c1b1:             } catch (Throwable e) {
1:456c1b1:                 LOG.error("unexpected exception:" + e, e);
1:456c1b1:                 // propagating assertError to execution task will cause a hang
1:456c1b1:                 // at shutdown
1:456c1b1:                 if (e instanceof Error) {
1:456c1b1:                     error[0] = (Error) e;
1:456c1b1:                 } else {
1:456c1b1:                     fail("unexpected exception: " + e);
1:456c1b1:                 }
1:456c1b1: 
1:456c1b1:             }
1:456c1b1:         }
1:456c1b1:     }
1:456c1b1: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(MessageListenerDeadLetterTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:dc5ebcd
/////////////////////////////////////////////////////////////////////////
1:         policy.setRedeliveryDelay(0);
author:Robert Davies
-------------------------------------------------------------------------------
commit:456c1b1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class MessageListenerDeadLetterTest extends DeadLetterTestSupport {
0:     private static final Log LOG = LogFactory
0:             .getLog(MessageListenerDeadLetterTest.class);
1: 
1:     private int rollbackCount;
1: 
1:     private Session dlqSession;
1: 
1:     private final Error[] error = new Error[1];
1: 
1:     protected void doTest() throws Exception {
1:         messageCount = 200;
1:         connection.start();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         makeDlqConsumer();
1: 
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         int maxRollbacks = messageCount * rollbackCount;
1:         consumer.setMessageListener(new RollbackMessageListener(maxRollbacks, rollbackCount));
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             Message msg = dlqConsumer.receive(4000);
1:             if (error[0] != null) {
1:                 // error from message listener
1:                 throw error[0];
1:             }
1:             assertMessage(msg, i);
1:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:         }
1:         if (error[0] != null) {
1:             throw error[0];
1:         }
1:     }
1: 
1:     protected void makeDlqConsumer() throws JMSException {
1:         dlqDestination = createDlqDestination();
1: 
1:         LOG.info("Consuming from dead letter on: " + dlqDestination);
1:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         transactedMode = true;
1:         super.setUp();
1:         dlqSession = connection.createSession(transactedMode, acknowledgeMode);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         dlqConsumer.close();
1:         dlqSession.close();
1:         session.close();
1:         super.tearDown();
1:     };
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:             throws Exception {
1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:         policy.setMaximumRedeliveries(3);
1:         policy.setBackOffMultiplier((short) 1);
1:         policy.setInitialRedeliveryDelay(0);
1:         policy.setUseExponentialBackOff(false);
1:         answer.setRedeliveryPolicy(policy);
1:         return answer;
1:     }
1: 
1:     protected Destination createDlqDestination() {
1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:     }
1: 
1:     class RollbackMessageListener implements MessageListener {
1: 
1:         final int maxRollbacks;
1: 
1:         final int deliveryCount;
1: 
1:         AtomicInteger rollbacks = new AtomicInteger();
1: 
1:         RollbackMessageListener(int c, int delvery) {
1:             maxRollbacks = c;
1:             deliveryCount = delvery;
1:         }
1: 
1:         public void onMessage(Message message) {
1:             try {
1:                 int expectedMessageId = rollbacks.get() / deliveryCount;
1:                 LOG.info("expecting messageId: " + expectedMessageId);
1:                 assertMessage(message, expectedMessageId);
1:                 if (rollbacks.incrementAndGet() > maxRollbacks) {
1:                     fail("received too many messages, already done too many rollbacks: "
1:                             + rollbacks);
1:                 }
1:                 session.rollback();
1: 
1:             } catch (Throwable e) {
1:                 LOG.error("unexpected exception:" + e, e);
1:                 // propagating assertError to execution task will cause a hang
1:                 // at shutdown
1:                 if (e instanceof Error) {
1:                     error[0] = (Error) e;
1:                 } else {
1:                     fail("unexpected exception: " + e);
1:                 }
1: 
1:             }
1:         }
1:     }
1: }
============================================================================