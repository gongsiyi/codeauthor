1:3f9b6ed: /**
1:3f9b6ed:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f9b6ed:  * contributor license agreements.  See the NOTICE file distributed with
1:3f9b6ed:  * this work for additional information regarding copyright ownership.
1:3f9b6ed:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f9b6ed:  * (the "License"); you may not use this file except in compliance with
1:3f9b6ed:  * the License.  You may obtain a copy of the License at
1:3f9b6ed:  *
1:3f9b6ed:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f9b6ed:  *
1:3f9b6ed:  * Unless required by applicable law or agreed to in writing, software
1:3f9b6ed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f9b6ed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f9b6ed:  * See the License for the specific language governing permissions and
1:3f9b6ed:  * limitations under the License.
1:3f9b6ed:  */
1:3f9b6ed: package org.apache.activemq.bugs;
1:3f9b6ed: 
1:3f9b6ed: import static org.junit.Assert.assertEquals;
1:3f9b6ed: import static org.junit.Assert.assertTrue;
1:3f9b6ed: 
1:3f9b6ed: import java.util.concurrent.CountDownLatch;
1:3f9b6ed: import java.util.concurrent.ExecutorService;
1:3f9b6ed: import java.util.concurrent.Executors;
1:3f9b6ed: import java.util.concurrent.TimeUnit;
1:3f9b6ed: 
1:3f9b6ed: import javax.jms.Connection;
1:3f9b6ed: import javax.jms.ConnectionFactory;
1:3f9b6ed: 
1:3f9b6ed: import org.apache.activemq.ActiveMQConnectionFactory;
1:3f9b6ed: import org.apache.activemq.broker.BrokerService;
1:3f9b6ed: import org.apache.activemq.broker.TransportConnector;
1:3f9b6ed: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:3f9b6ed: import org.apache.activemq.util.Wait;
1:3f9b6ed: import org.junit.After;
1:3f9b6ed: import org.junit.Before;
1:3f9b6ed: import org.junit.Test;
1:3f9b6ed: import org.springframework.jms.support.JmsUtils;
1:3f9b6ed: 
1:3f9b6ed: public class AMQ4469Test {
1:3f9b6ed: 
1:3f9b6ed:     private static final int maxConnections = 100;
1:3f9b6ed: 
1:3f9b6ed:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:3f9b6ed:     private String connectionUri;
1:3f9b6ed:     private BrokerService service;
1:3f9b6ed:     private TransportConnector connector;
1:3f9b6ed: 
1:3f9b6ed:     @Before
1:3f9b6ed:     public void setUp() throws Exception {
1:3f9b6ed:         service = new BrokerService();
1:3f9b6ed:         service.setPersistent(false);
1:3f9b6ed:         service.setUseJmx(false);
1:3f9b6ed:         connector = service.addConnector("tcp://0.0.0.0:0?maximumConnections="+maxConnections);
1:3f9b6ed:         connectionUri = connector.getPublishableConnectString();
1:3f9b6ed:         service.start();
1:3f9b6ed:         service.waitUntilStarted();
1:3f9b6ed:     }
1:3f9b6ed: 
1:3f9b6ed:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:3f9b6ed:         return new ActiveMQConnectionFactory(connectionUri);
1:3f9b6ed:     }
1:3f9b6ed: 
1:3f9b6ed:     @Test
1:3f9b6ed:     public void testMaxConnectionControl() throws Exception {
1:3f9b6ed:         final ConnectionFactory cf = createConnectionFactory();
1:3f9b6ed:         final CountDownLatch startupLatch = new CountDownLatch(1);
1:3f9b6ed:         for(int i = 0; i < maxConnections + 20; i++) {
1:3f9b6ed:             executor.submit(new Runnable() {
1:3f9b6ed:                 @Override
1:3f9b6ed:                 public void run() {
1:3f9b6ed:                     Connection conn = null;
1:3f9b6ed:                     try {
1:3f9b6ed:                         startupLatch.await();
1:3f9b6ed:                         conn = cf.createConnection();
1:3f9b6ed:                         conn.start();
1:3f9b6ed:                     } catch (Exception e) {
1:3f9b6ed:                         e.printStackTrace();
1:3f9b6ed:                         JmsUtils.closeConnection(conn);
1:3f9b6ed:                     }
1:3f9b6ed:                 }
1:3f9b6ed:             });
1:3f9b6ed:         }
1:3f9b6ed: 
1:3f9b6ed:         TcpTransportServer transportServer = (TcpTransportServer)connector.getServer();
1:3f9b6ed:         // ensure the max connections is in effect
1:3f9b6ed:         assertEquals(maxConnections, transportServer.getMaximumConnections());
1:3f9b6ed:         // No connections at first
1:3f9b6ed:         assertEquals(0, connector.getConnections().size());
1:3f9b6ed:         // Release the latch to set up connections in parallel
1:3f9b6ed:         startupLatch.countDown();
1:3f9b6ed:         TimeUnit.SECONDS.sleep(5);
1:3f9b6ed: 
1:3f9b6ed:         final TransportConnector connector = this.connector;
1:3f9b6ed: 
1:3f9b6ed:         // Expect the max connections is created
1:3f9b6ed:         assertTrue("Expected: " + maxConnections + " found: " + connector.getConnections().size(),
1:3f9b6ed:             Wait.waitFor(new Wait.Condition() {
1:3f9b6ed:                 @Override
1:3f9b6ed:                 public boolean isSatisified() throws Exception {
1:3f9b6ed:                     return connector.getConnections().size() == maxConnections;
1:3f9b6ed:                 }
1:3f9b6ed:             })
1:3f9b6ed:         );
1:3f9b6ed:     }
1:3f9b6ed: 
1:3f9b6ed:     @After
1:3f9b6ed:     public void tearDown() throws Exception {
1:3f9b6ed:         executor.shutdown();
1:3f9b6ed: 
1:3f9b6ed:         service.stop();
1:3f9b6ed:         service.waitUntilStopped();
1:3f9b6ed:     }
1:3f9b6ed: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3f9b6ed
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.springframework.jms.support.JmsUtils;
1: 
1: public class AMQ4469Test {
1: 
1:     private static final int maxConnections = 100;
1: 
1:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:     private String connectionUri;
1:     private BrokerService service;
1:     private TransportConnector connector;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         connector = service.addConnector("tcp://0.0.0.0:0?maximumConnections="+maxConnections);
1:         connectionUri = connector.getPublishableConnectString();
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     @Test
1:     public void testMaxConnectionControl() throws Exception {
1:         final ConnectionFactory cf = createConnectionFactory();
1:         final CountDownLatch startupLatch = new CountDownLatch(1);
1:         for(int i = 0; i < maxConnections + 20; i++) {
1:             executor.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     Connection conn = null;
1:                     try {
1:                         startupLatch.await();
1:                         conn = cf.createConnection();
1:                         conn.start();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                         JmsUtils.closeConnection(conn);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         TcpTransportServer transportServer = (TcpTransportServer)connector.getServer();
1:         // ensure the max connections is in effect
1:         assertEquals(maxConnections, transportServer.getMaximumConnections());
1:         // No connections at first
1:         assertEquals(0, connector.getConnections().size());
1:         // Release the latch to set up connections in parallel
1:         startupLatch.countDown();
1:         TimeUnit.SECONDS.sleep(5);
1: 
1:         final TransportConnector connector = this.connector;
1: 
1:         // Expect the max connections is created
1:         assertTrue("Expected: " + maxConnections + " found: " + connector.getConnections().size(),
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return connector.getConnections().size() == maxConnections;
1:                 }
1:             })
1:         );
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         executor.shutdown();
1: 
1:         service.stop();
1:         service.waitUntilStopped();
1:     }
1: }
============================================================================