1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.properties;
1:b656266: 
1:a072126: import java.util.HashMap;
1:a072126: import java.util.Map;
1:a072126: import java.util.Set;
1:a072126: 
1:a072126: import org.slf4j.Logger;
1:a072126: import org.slf4j.LoggerFactory;
1:a072126: 
1:a88906f: public class JmsProducerProperties extends JmsClientProperties {
1:e47e0e0: 
1:e47e0e0:     private static final Logger LOG = LoggerFactory.getLogger(ReflectionUtil.class);
1:e47e0e0: 
1:a88906f:     public static final String TIME_BASED_SENDING  = "time"; // Produce messages base on a time interval
1:a88906f:     public static final String COUNT_BASED_SENDING = "count"; // Produce a specific count of messages
1:a88906f:     public static final String DELIVERY_MODE_PERSISTENT     = "persistent"; // Persistent message delivery
1:a88906f:     public static final String DELIVERY_MODE_NON_PERSISTENT = "nonpersistent"; // Non-persistent message delivery
1:e47e0e0: 
1:a88906f:     protected String deliveryMode = DELIVERY_MODE_NON_PERSISTENT; // Message delivery mode
1:a88906f:     protected int messageSize = 1024; // Send 1kb messages by default
1:a88906f:     protected long sendCount  = 1000000; // Send a million messages by default
1:a88906f:     protected long sendDuration = 5 * 60 * 1000; // Send for 5 mins by default
1:a88906f:     protected String sendType = TIME_BASED_SENDING;
1:576230b:     protected long sendDelay = 0;  // delay in milliseconds between each producer send
1:b656266:     protected String msgFileName = null; // for sending a particular msg from a file
1:e47e0e0: 
1:a072126:     protected Map<String,Object> headerMap = null;
1:e47e0e0: 
1:e47e0e0: 
1:540dd5c:     // If true, create a different message on each send, otherwise reuse.
1:e47e0e0:     protected boolean createNewMsg;
1:e47e0e0: 
1:a072126:     public JmsProducerProperties() {
1:e47e0e0:         this.headerMap = new HashMap<String, Object>();
1:a072126:     }
1:b656266: 
1:a88906f:     public String getDeliveryMode() {
1:a88906f:         return deliveryMode;
1:a072126:     }
1:b656266: 
1:a88906f:     public void setDeliveryMode(String deliveryMode) {
1:a88906f:         this.deliveryMode = deliveryMode;
1:a072126:     }
1:b656266: 
1:a88906f:     public int getMessageSize() {
1:a88906f:         return messageSize;
1:a072126:     }
1:576230b: 
1:a88906f:     public void setMessageSize(int messageSize) {
1:a88906f:         this.messageSize = messageSize;
5:a88906f:     }
1:576230b: 
1:a88906f:     public long getSendCount() {
1:a88906f:         return sendCount;
1:a88906f:     }
1:a072126: 
1:a88906f:     public void setSendCount(long sendCount) {
1:a88906f:         this.sendCount = sendCount;
1:a88906f:     }
1:a072126: 
1:a88906f:     public long getSendDuration() {
1:a88906f:         return sendDuration;
1:a88906f:     }
1:a072126: 
1:a88906f:     public void setSendDuration(long sendDuration) {
1:a88906f:         this.sendDuration = sendDuration;
1:a88906f:     }
1:a072126: 
1:a88906f:     public String getSendType() {
1:a88906f:         return sendType;
1:a88906f:     }
1:a072126: 
1:a88906f:     public void setSendType(String sendType) {
1:a88906f:         this.sendType = sendType;
1:a88906f:     }
9:a072126: 
1:a88906f:     public boolean isCreateNewMsg() {
1:a88906f:         return createNewMsg;
1:a88906f:     }
1:a072126: 
1:a88906f:     public void setCreateNewMsg(boolean createNewMsg) {
1:a88906f:         this.createNewMsg = createNewMsg;
1:a88906f:     }
1:e47e0e0: 
1:576230b:     public void setSendDelay(long delay) {
1:e47e0e0:         this.sendDelay = delay;
1:576230b:     }
1:e47e0e0: 
1:576230b:     public long getSendDelay() {
1:e47e0e0:         return this.sendDelay;
1:576230b:     }
1:e47e0e0: 
1:e47e0e0: 
1:a072126:     /* Operations for supporting message headers */
1:e47e0e0: 
1:a072126:     /**
1:e47e0e0:      * Method for setting a message header.
1:a072126:      * @param encodedHeader - the header is encoded as a string using this syntax:
1:a072126:      * encodedHeader = [headerkey '=' headervalue ':' ]*
1:a072126:      * E.g. an encodedHeader could read "JMSType=car", or
1:a072126:      * "JMSType=car:MyHeader=MyValue"
1:a072126:      *
1:e47e0e0:      * That implies neither the header key nor the value
1:a072126:      * can contain any of the characters ':' and '='.
1:a072126:      */
1:a072126:     public void setHeader(String encodedHeader) {
1:576230b: 
1:e47e0e0:         // remove any trailing ':' characters
1:e47e0e0:         if (encodedHeader.endsWith(":")) {
1:e47e0e0:             encodedHeader = encodedHeader.substring(0, encodedHeader.length()-1);
1:e47e0e0:         }
1:e47e0e0: 
1:e47e0e0:         // split headers
1:e47e0e0:         String headers[] = encodedHeader.split(":");
1:e47e0e0:         for (String h : headers) {
1:e47e0e0: 
1:e47e0e0:             // split into header name and value
1:e47e0e0:             String tokens[] = h.split("=");
1:e47e0e0: 
1:e47e0e0:             // sanity check, don't allow empty string for header names
1:e47e0e0:             if (tokens.length != 2 || tokens[0].equals("") || tokens[1].equals("") ) {
1:e47e0e0:                 LOG.error("Error parsing message headers. Header: \"" + h +
1:e47e0e0:                         "\". This header will be ignored.");
1:e47e0e0:             } else {
1:e47e0e0:                 this.headerMap.put(tokens[0], tokens[1]);
1:e47e0e0:             }
1:e47e0e0:         }
1:a072126:     }
1:e47e0e0: 
1:a072126:     public Set<String> getHeaderKeys() {
1:e47e0e0:         return this.headerMap.keySet();
1:a072126:     }
1:e47e0e0: 
1:a072126:     public Object getHeaderValue(String key) {
1:e47e0e0:         return this.headerMap.get(key);
1:e47e0e0:     }
1:e47e0e0: 
1:a072126:     public void clearHeaders() {
1:e47e0e0:         this.headerMap.clear();
1:a072126:     }
1:e47e0e0: 
1:b656266:     public void setMsgFileName(String file) {
1:e47e0e0:         LOG.info("\"producer.msgFileName\" specified. " +
1:e47e0e0:                 "Will ignore setting \"producer.messageSize\".");
1:e47e0e0:         this.msgFileName = file;
1:b656266:     }
1:e47e0e0: 
1:b656266:     public String getMsgFileName() {
1:e47e0e0:         return this.msgFileName;
1:b656266:     }
1:e47e0e0: 
1:a072126: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ReflectionUtil.class);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     protected boolean createNewMsg;
1: 
1:         this.headerMap = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1: 
1:         this.sendDelay = delay;
1: 
1:         return this.sendDelay;
1: 
1: 
1: 
1:      * Method for setting a message header.
1:      * That implies neither the header key nor the value
1:         // remove any trailing ':' characters
1:         if (encodedHeader.endsWith(":")) {
1:             encodedHeader = encodedHeader.substring(0, encodedHeader.length()-1);
1:         }
1: 
1:         // split headers
1:         String headers[] = encodedHeader.split(":");
1:         for (String h : headers) {
1: 
1:             // split into header name and value
1:             String tokens[] = h.split("=");
1: 
1:             // sanity check, don't allow empty string for header names
1:             if (tokens.length != 2 || tokens[0].equals("") || tokens[1].equals("") ) {
1:                 LOG.error("Error parsing message headers. Header: \"" + h +
1:                         "\". This header will be ignored.");
1:             } else {
1:                 this.headerMap.put(tokens[0], tokens[1]);
1:             }
1:         }
1: 
1:         return this.headerMap.keySet();
1: 
1:         return this.headerMap.get(key);
1:     }
1: 
1:         this.headerMap.clear();
1: 
1:         LOG.info("\"producer.msgFileName\" specified. " +
1:                 "Will ignore setting \"producer.messageSize\".");
1:         this.msgFileName = file;
1: 
1:         return this.msgFileName;
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
commit:b656266
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected String msgFileName = null; // for sending a particular msg from a file
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setMsgFileName(String file) {
0:     	LOG.info("\"producer.msgFileName\" specified. " +
0:     			"Will ignore setting \"producer.messageSize\".");
0:     	this.msgFileName = file;
1:     }
1:     
1:     public String getMsgFileName() {
0:     	return this.msgFileName;
1:     }
1:     
commit:576230b
/////////////////////////////////////////////////////////////////////////
1:     protected long sendDelay = 0;  // delay in milliseconds between each producer send
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setSendDelay(long delay) {
0:     	this.sendDelay = delay;
1:     }
1:     
1:     public long getSendDelay() {
0:     	return this.sendDelay;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a072126
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 	
0: 	private static final Logger LOG = LoggerFactory.getLogger(ReflectionUtil.class);
1: 	
/////////////////////////////////////////////////////////////////////////
1:     protected Map<String,Object> headerMap = null;
1:  
1:     
1:     
1:     public JmsProducerProperties() {
0:     	this.headerMap = new HashMap();
1:     }
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     /* Operations for supporting message headers */
1:     
1:     /**
0:      * Method for setting a message header. 
1:      * @param encodedHeader - the header is encoded as a string using this syntax:
1:      * encodedHeader = [headerkey '=' headervalue ':' ]*
1:      * E.g. an encodedHeader could read "JMSType=car", or
1:      * "JMSType=car:MyHeader=MyValue"
1:      *
0:      * That implies neither the header key nor the value 
1:      * can contain any of the characters ':' and '='.
1:      */
1:     public void setHeader(String encodedHeader) {
1:     	
0:     	// remove any trailing ':' characters
0:     	if (encodedHeader.endsWith(":")) {
0:     		encodedHeader = encodedHeader.substring(0, encodedHeader.length()-1);
1:     	}
1: 
0:     	// split headers 
0:     	String headers[] = encodedHeader.split(":");
0:     	for (String h : headers) {
1:     		
0:     		// split into header name and value
0:     		String tokens[] = h.split("=");
1:     		
0:     		// sanity check, don't allow empty string for header names
0:     		if (tokens.length != 2 || tokens[0].equals("") || tokens[1].equals("") ) {
0:     			LOG.error("Error parsing message headers. Header: \"" + h +
0:     					"\". This header will be ignored.");
0:     		} else {
0:     			this.headerMap.put(tokens[0], tokens[1]);
1:     		}
1:     	}
1:     }
1:     
1:     public Set<String> getHeaderKeys() {
0:     	return this.headerMap.keySet();
1:     }
1:     
1:     public Object getHeaderValue(String key) {
0:     	return this.headerMap.get(key);
1:     }  
1:     
1:     public void clearHeaders() {
0:     	this.headerMap.clear();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     // If true, create a different message on each send, otherwise reuse.
0:     protected boolean createNewMsg; 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.properties;
0: 
1: public class JmsProducerProperties extends JmsClientProperties {
1:     public static final String TIME_BASED_SENDING  = "time"; // Produce messages base on a time interval
1:     public static final String COUNT_BASED_SENDING = "count"; // Produce a specific count of messages
1:     public static final String DELIVERY_MODE_PERSISTENT     = "persistent"; // Persistent message delivery
1:     public static final String DELIVERY_MODE_NON_PERSISTENT = "nonpersistent"; // Non-persistent message delivery
0: 
1:     protected String deliveryMode = DELIVERY_MODE_NON_PERSISTENT; // Message delivery mode
1:     protected int messageSize = 1024; // Send 1kb messages by default
1:     protected long sendCount  = 1000000; // Send a million messages by default
1:     protected long sendDuration = 5 * 60 * 1000; // Send for 5 mins by default
1:     protected String sendType = TIME_BASED_SENDING;
0:     protected boolean createNewMsg = false; // If true, create a different message on each send, otherwise reuse.
0: 
1:     public String getDeliveryMode() {
1:         return deliveryMode;
1:     }
0: 
1:     public void setDeliveryMode(String deliveryMode) {
1:         this.deliveryMode = deliveryMode;
1:     }
0: 
1:     public int getMessageSize() {
1:         return messageSize;
1:     }
0: 
1:     public void setMessageSize(int messageSize) {
1:         this.messageSize = messageSize;
1:     }
0: 
1:     public long getSendCount() {
1:         return sendCount;
1:     }
0: 
1:     public void setSendCount(long sendCount) {
1:         this.sendCount = sendCount;
1:     }
0: 
1:     public long getSendDuration() {
1:         return sendDuration;
1:     }
0: 
1:     public void setSendDuration(long sendDuration) {
1:         this.sendDuration = sendDuration;
1:     }
0: 
1:     public String getSendType() {
1:         return sendType;
1:     }
0: 
1:     public void setSendType(String sendType) {
1:         this.sendType = sendType;
1:     }
0: 
1:     public boolean isCreateNewMsg() {
1:         return createNewMsg;
1:     }
0: 
1:     public void setCreateNewMsg(boolean createNewMsg) {
1:         this.createNewMsg = createNewMsg;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.properties;
0: 
0: public class JmsProducerProperties extends JmsClientProperties {
0:     public static final String TIME_BASED_SENDING  = "time"; // Produce messages base on a time interval
0:     public static final String COUNT_BASED_SENDING = "count"; // Produce a specific count of messages
0:     public static final String DELIVERY_MODE_PERSISTENT     = "persistent"; // Persistent message delivery
0:     public static final String DELIVERY_MODE_NON_PERSISTENT = "nonpersistent"; // Non-persistent message delivery
0: 
0:     protected String deliveryMode = DELIVERY_MODE_NON_PERSISTENT; // Message delivery mode
0:     protected int messageSize = 1024; // Send 1kb messages by default
0:     protected long sendCount  = 1000000; // Send a million messages by default
0:     protected long sendDuration = 5 * 60 * 1000; // Send for 5 mins by default
0:     protected String sendType = TIME_BASED_SENDING;
0:     protected boolean createNewMsg = false; // If true, create a different message on each send, otherwise reuse.
0: 
0:     public String getDeliveryMode() {
0:         return deliveryMode;
0:     }
0: 
0:     public void setDeliveryMode(String deliveryMode) {
0:         this.deliveryMode = deliveryMode;
0:     }
0: 
0:     public int getMessageSize() {
0:         return messageSize;
0:     }
0: 
0:     public void setMessageSize(int messageSize) {
0:         this.messageSize = messageSize;
0:     }
0: 
0:     public long getSendCount() {
0:         return sendCount;
0:     }
0: 
0:     public void setSendCount(long sendCount) {
0:         this.sendCount = sendCount;
0:     }
0: 
0:     public long getSendDuration() {
0:         return sendDuration;
0:     }
0: 
0:     public void setSendDuration(long sendDuration) {
0:         this.sendDuration = sendDuration;
0:     }
0: 
0:     public String getSendType() {
0:         return sendType;
0:     }
0: 
0:     public void setSendType(String sendType) {
0:         this.sendType = sendType;
0:     }
0: 
0:     public boolean isCreateNewMsg() {
0:         return createNewMsg;
0:     }
0: 
0:     public void setCreateNewMsg(boolean createNewMsg) {
0:         this.createNewMsg = createNewMsg;
0:     }
0: }
============================================================================