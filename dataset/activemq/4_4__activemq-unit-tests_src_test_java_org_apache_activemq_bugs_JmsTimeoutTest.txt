1:261ccab: /**
1:261ccab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:261ccab:  * contributor license agreements.  See the NOTICE file distributed with
1:261ccab:  * this work for additional information regarding copyright ownership.
1:261ccab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:261ccab:  * (the "License"); you may not use this file except in compliance with
1:261ccab:  * the License.  You may obtain a copy of the License at
1:261ccab:  *
1:261ccab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:261ccab:  *
1:261ccab:  * Unless required by applicable law or agreed to in writing, software
1:261ccab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:261ccab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:261ccab:  * See the License for the specific language governing permissions and
1:261ccab:  * limitations under the License.
1:261ccab:  */
1:83128fc: package org.apache.activemq.bugs;
2:83128fc: 
1:83128fc: import java.util.concurrent.atomic.AtomicInteger;
1:83128fc: 
1:42e51a3: import javax.jms.ConnectionFactory;
1:83128fc: import javax.jms.DeliveryMode;
1:83128fc: import javax.jms.JMSException;
1:83128fc: import javax.jms.MessageProducer;
1:83128fc: import javax.jms.ResourceAllocationException;
1:83128fc: import javax.jms.Session;
1:83128fc: import javax.jms.TextMessage;
1:83128fc: 
1:83128fc: import org.apache.activemq.ActiveMQConnection;
1:42e51a3: import org.apache.activemq.ActiveMQConnectionFactory;
1:83128fc: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:83128fc: import org.apache.activemq.command.ActiveMQDestination;
1:52675ab: import org.apache.activemq.transport.RequestTimedOutIOException;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:83128fc: 
1:83128fc: public class JmsTimeoutTest extends EmbeddedBrokerTestSupport {
1:83128fc: 
1:42e51a3:     static final Logger LOG = LoggerFactory.getLogger(JmsTimeoutTest.class);
1:83128fc: 
1:77d46dc:     protected final int messageSize=1024*64;
1:77d46dc:     protected final int messageCount=10000;
1:77d46dc:     protected final AtomicInteger exceptionCount = new AtomicInteger(0);
1:83128fc: 
1:42e51a3:     /**
1:42e51a3:      * Test the case where the broker is blocked due to a memory limit
1:42e51a3:      * and a producer timeout is set on the connection.
1:42e51a3:      * @throws Exception
1:42e51a3:      */
1:42e51a3:     public void testBlockedProducerConnectionTimeout() throws Exception {
1:42e51a3:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:42e51a3:         final ActiveMQDestination queue = createDestination("testqueue");
1:83128fc: 
1:42e51a3:         // we should not take longer than 10 seconds to return from send
1:42e51a3:         cx.setSendTimeout(10000);
1:83128fc: 
1:42e51a3:         Runnable r = new Runnable() {
1:42e51a3:             public void run() {
1:42e51a3:                 try {
1:42e51a3:                     LOG.info("Sender thread starting");
1:42e51a3:                     Session session = cx.createSession(false, 1);
1:42e51a3:                     MessageProducer producer = session.createProducer(queue);
1:42e51a3:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:83128fc: 
1:42e51a3:                     TextMessage message = session.createTextMessage(createMessageText());
1:42e51a3:                     for(int count=0; count<messageCount; count++){
1:42e51a3:                         producer.send(message);
1:42e51a3:                     }
1:42e51a3:                     LOG.info("Done sending..");
1:42e51a3:                 } catch (JMSException e) {
1:42e51a3:                     if (e.getCause() instanceof RequestTimedOutIOException) {
1:42e51a3:                         exceptionCount.incrementAndGet();
1:42e51a3:                     } else {
1:42e51a3:                         e.printStackTrace();
1:42e51a3:                     }
1:42e51a3:                     return;
1:42e51a3:                 }
1:83128fc: 
1:42e51a3:             }
1:42e51a3:         };
1:42e51a3:         cx.start();
1:42e51a3:         Thread producerThread = new Thread(r);
1:42e51a3:         producerThread.start();
1:42e51a3:         producerThread.join(30000);
1:42e51a3:         cx.close();
1:42e51a3:         // We should have a few timeout exceptions as memory store will fill up
1:42e51a3:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:42e51a3:     }
1:83128fc: 
1:42e51a3:     /**
1:42e51a3:      * Test the case where the broker is blocked due to a memory limit
1:42e51a3:      * with a fail timeout
1:42e51a3:      * @throws Exception
1:42e51a3:      */
1:42e51a3:     public void testBlockedProducerUsageSendFailTimeout() throws Exception {
1:42e51a3:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:42e51a3:         final ActiveMQDestination queue = createDestination("testqueue");
1:83128fc: 
1:42e51a3:         broker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);
1:42e51a3:         Runnable r = new Runnable() {
1:42e51a3:             public void run() {
1:42e51a3:                 try {
1:42e51a3:                     LOG.info("Sender thread starting");
1:42e51a3:                     Session session = cx.createSession(false, 1);
1:42e51a3:                     MessageProducer producer = session.createProducer(queue);
1:42e51a3:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:83128fc: 
1:42e51a3:                     TextMessage message = session.createTextMessage(createMessageText());
1:42e51a3:                     for(int count=0; count<messageCount; count++){
1:42e51a3:                         producer.send(message);
1:42e51a3:                     }
1:42e51a3:                     LOG.info("Done sending..");
1:42e51a3:                 } catch (JMSException e) {
1:42e51a3:                     if (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {
1:42e51a3:                         exceptionCount.incrementAndGet();
1:42e51a3:                     } else {
1:42e51a3:                         e.printStackTrace();
1:42e51a3:                     }
1:42e51a3:                     return;
1:42e51a3:                 }
1:42e51a3:             }
1:42e51a3:         };
1:42e51a3:         cx.start();
1:42e51a3:         Thread producerThread = new Thread(r);
1:42e51a3:         producerThread.start();
1:42e51a3:         producerThread.join(30000);
1:42e51a3:         cx.close();
1:42e51a3:         // We should have a few timeout exceptions as memory store will fill up
1:42e51a3:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:42e51a3:     }
1:42e51a3: 
1:42e51a3:     protected void setUp() throws Exception {
1:42e51a3:         exceptionCount.set(0);
1:42e51a3:         bindAddress = "tcp://localhost:0";
1:42e51a3:         broker = createBroker();
1:42e51a3:         broker.setDeleteAllMessagesOnStartup(true);
1:42e51a3:         broker.getSystemUsage().getMemoryUsage().setLimit(5*1024*1024);
1:42e51a3: 
1:42e51a3:         super.setUp();
1:42e51a3:     }
1:42e51a3: 
1:42e51a3:     @Override
1:42e51a3:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:42e51a3:         return new ActiveMQConnectionFactory(
1:42e51a3:             broker.getTransportConnectors().get(0).getPublishableConnectString());
1:42e51a3:     }
1:42e51a3: 
1:77d46dc:     protected String createMessageText() {
1:42e51a3:         StringBuffer buffer = new StringBuffer();
1:42e51a3:         buffer.append("<filler>");
1:42e51a3:         for (int i = buffer.length(); i < messageSize; i++) {
1:42e51a3:             buffer.append('X');
1:42e51a3:         }
1:42e51a3:         buffer.append("</filler>");
1:42e51a3:         return buffer.toString();
1:42e51a3:     }
1:42e51a3: 
1:42e51a3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:77d46dc
/////////////////////////////////////////////////////////////////////////
1:     protected final int messageSize=1024*64;
1:     protected final int messageCount=10000;
1:     protected final AtomicInteger exceptionCount = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1:     protected String createMessageText() {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(JmsTimeoutTest.class);
0:     private final int messageSize=1024*64;
0:     private final int messageCount=10000;
0:     private final AtomicInteger exceptionCount = new AtomicInteger(0);
1:     /**
1:      * Test the case where the broker is blocked due to a memory limit
1:      * and a producer timeout is set on the connection.
1:      * @throws Exception
1:      */
1:     public void testBlockedProducerConnectionTimeout() throws Exception {
1:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:         final ActiveMQDestination queue = createDestination("testqueue");
1:         // we should not take longer than 10 seconds to return from send
1:         cx.setSendTimeout(10000);
1:         Runnable r = new Runnable() {
1:             public void run() {
1:                 try {
1:                     LOG.info("Sender thread starting");
1:                     Session session = cx.createSession(false, 1);
1:                     MessageProducer producer = session.createProducer(queue);
1:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                     TextMessage message = session.createTextMessage(createMessageText());
1:                     for(int count=0; count<messageCount; count++){
1:                         producer.send(message);
1:                     }
1:                     LOG.info("Done sending..");
1:                 } catch (JMSException e) {
1:                     if (e.getCause() instanceof RequestTimedOutIOException) {
1:                         exceptionCount.incrementAndGet();
1:                     } else {
1:                         e.printStackTrace();
1:                     }
1:                     return;
1:                 }
1:             }
1:         };
1:         cx.start();
1:         Thread producerThread = new Thread(r);
1:         producerThread.start();
1:         producerThread.join(30000);
1:         cx.close();
1:         // We should have a few timeout exceptions as memory store will fill up
1:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:     }
1:     /**
1:      * Test the case where the broker is blocked due to a memory limit
1:      * with a fail timeout
1:      * @throws Exception
1:      */
1:     public void testBlockedProducerUsageSendFailTimeout() throws Exception {
1:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:         final ActiveMQDestination queue = createDestination("testqueue");
1:         broker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);
1:         Runnable r = new Runnable() {
1:             public void run() {
1:                 try {
1:                     LOG.info("Sender thread starting");
1:                     Session session = cx.createSession(false, 1);
1:                     MessageProducer producer = session.createProducer(queue);
1:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                     TextMessage message = session.createTextMessage(createMessageText());
1:                     for(int count=0; count<messageCount; count++){
1:                         producer.send(message);
1:                     }
1:                     LOG.info("Done sending..");
1:                 } catch (JMSException e) {
1:                     if (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {
1:                         exceptionCount.incrementAndGet();
1:                     } else {
1:                         e.printStackTrace();
1:                     }
1:                     return;
1:                 }
1:             }
1:         };
1:         cx.start();
1:         Thread producerThread = new Thread(r);
1:         producerThread.start();
1:         producerThread.join(30000);
1:         cx.close();
1:         // We should have a few timeout exceptions as memory store will fill up
1:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         exceptionCount.set(0);
1:         bindAddress = "tcp://localhost:0";
1:         broker = createBroker();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(5*1024*1024);
1: 
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(
1:             broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
0:     private String createMessageText() {
1:         StringBuffer buffer = new StringBuffer();
1:         buffer.append("<filler>");
1:         for (int i = buffer.length(); i < messageSize; i++) {
1:             buffer.append('X');
1:         }
1:         buffer.append("</filler>");
1:         return buffer.toString();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 		static final Logger LOG = LoggerFactory.getLogger(JmsTimeoutTest.class);
/////////////////////////////////////////////////////////////////////////
0: 	}
commit:261ccab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:99d5126
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 		static final Log LOG = LogFactory.getLog(JmsTimeoutTest.class);
/////////////////////////////////////////////////////////////////////////
0: 	                	LOG.info("Sender thread starting");
/////////////////////////////////////////////////////////////////////////
0: 	                    LOG.info("Done sending..");
commit:fed9ac7
/////////////////////////////////////////////////////////////////////////
0: 	                    if (e instanceof ResourceAllocationException) {
0: 	                        exceptionCount.incrementAndGet();
0: 	                    }
0: 	                    return;
/////////////////////////////////////////////////////////////////////////
0: 	        assertTrue("No exception from the broker", exceptionCount.get() > 0);
commit:83128fc
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.DeliveryMode;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.log4j.Logger;
1: 
1: 
1: public class JmsTimeoutTest extends EmbeddedBrokerTestSupport {
1: 
0: 		private final static Logger logger = Logger.getLogger( JmsTimeoutTest.class );
1: 	
0: 		private int messageSize=1024*64;
0: 		private int messageCount=10000;
0: 		private final AtomicInteger exceptionCount = new AtomicInteger(0);
1: 		
0: 	    /**
0: 	     * Test the case where the broker is blocked due to a memory limit 
0: 	     * and a producer timeout is set on the connection.
0: 	     * @throws Exception
0: 	     */
0: 	    public void testBlockedProducerConnectionTimeout() throws Exception {
0: 	        final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
0: 	        final ActiveMQDestination queue = createDestination("testqueue");
1: 	        
0: 	        // we should not take longer than 5 seconds to return from send
0: 	        cx.setSendTimeout(10000);
1: 	        	
0: 	        Runnable r = new Runnable() {
0: 	            public void run() {
0: 	                try {
0: 	                	logger.info("Sender thread starting");
0: 	                    Session session = cx.createSession(false, 1);
0: 	                    MessageProducer producer = session.createProducer(queue);
0: 	                    producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 	                    
0: 	                    TextMessage message = session.createTextMessage(createMessageText());
0: 	                    for(int count=0; count<messageCount; count++){
0: 	                    	producer.send(message);
0: 	                    	// Currently after the timeout producer just
0: 	                    	// returns but there is no way to know that
0: 	                    	// the send timed out
0: 	                    }	  
0: 	                    logger.info("Done sending..");
0: 	                } catch (JMSException e) {
0: 	                    e.printStackTrace();
0: 	                	exceptionCount.incrementAndGet();
0: 	                	return;
0: 	                }
0: 	            }
0: 	        };
0: 	        cx.start();
0: 	        Thread producerThread = new Thread(r);
0: 	        producerThread.start();
0: 	        producerThread.join(30000);
0: 	        cx.close();
0: 	        // We should have a few timeout exceptions as memory store will fill up
0: 	        assertTrue(exceptionCount.get() > 0);
0: 	    }
1: 
0: 	    protected void setUp() throws Exception {
0: 	        bindAddress = "tcp://localhost:61616";
0: 	        broker = createBroker();
0: 	        broker.setDeleteAllMessagesOnStartup(true);
0: 	        broker.getSystemUsage().getMemoryUsage().setLimit(5*1024*1024);
0: 	        broker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);
0: 	        super.setUp();
0: 	    }
1: 
0:         private String createMessageText() {
0: 	        StringBuffer buffer = new StringBuffer();
0: 	        buffer.append("<filler>");
0: 	        for (int i = buffer.length(); i < messageSize; i++) {
0: 	            buffer.append('X');
0: 	        }
0: 	        buffer.append("</filler>");
0: 	        return buffer.toString();
0: 	    }
1: 	    
0: 	}
author:Gary Tully
-------------------------------------------------------------------------------
commit:52675ab
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.RequestTimedOutIOException;
/////////////////////////////////////////////////////////////////////////
0: 	        // we should not take longer than 10 seconds to return from send
/////////////////////////////////////////////////////////////////////////
0:                     } catch (JMSException e) {
0:                         if (e.getCause() instanceof RequestTimedOutIOException) {
0:                         } else {
0:                             e.printStackTrace();
0:                         }
0: 
0: 	            }
0: 	        };
0: 	        cx.start();
0: 	        Thread producerThread = new Thread(r);
0: 	        producerThread.start();
0: 	        producerThread.join(30000);
0: 	        cx.close();
0: 	        // We should have a few timeout exceptions as memory store will fill up
0: 	        assertTrue("No exception from the broker", exceptionCount.get() > 0);
0: 	    }
0: 
0: 
0:         /**
0: 	     * Test the case where the broker is blocked due to a memory limit
0: 	     * with a fail timeout
0: 	     * @throws Exception
0: 	     */
0: 	    public void testBlockedProducerUsageSendFailTimeout() throws Exception {
0: 	        final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
0: 	        final ActiveMQDestination queue = createDestination("testqueue");
0: 
0:             broker.getSystemUsage().setSendFailIfNoSpaceAfterTimeout(5000);
0: 	        Runnable r = new Runnable() {
0: 	            public void run() {
0: 	                try {
0: 	                	LOG.info("Sender thread starting");
0: 	                    Session session = cx.createSession(false, 1);
0: 	                    MessageProducer producer = session.createProducer(queue);
0: 	                    producer.setDeliveryMode(DeliveryMode.PERSISTENT);
0: 
0: 	                    TextMessage message = session.createTextMessage(createMessageText());
0: 	                    for(int count=0; count<messageCount; count++){
0: 	                    	producer.send(message);
0: 	                    }
0: 	                    LOG.info("Done sending..");
0:                     } catch (JMSException e) {
0:                         if (e instanceof ResourceAllocationException || e.getCause() instanceof RequestTimedOutIOException) {
0: 	                        exceptionCount.incrementAndGet();
0:                         } else {
0:                             e.printStackTrace();
0:                         }
0: 	                    return;
0: 	                }
0: 
/////////////////////////////////////////////////////////////////////////
0:             exceptionCount.set(0);
0: 
============================================================================