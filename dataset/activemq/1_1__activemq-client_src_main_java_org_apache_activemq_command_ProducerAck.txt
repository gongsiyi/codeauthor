1:ec14f65: /**
1:ec14f65:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ec14f65:  * contributor license agreements.  See the NOTICE file distributed with
1:ec14f65:  * this work for additional information regarding copyright ownership.
1:ec14f65:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ec14f65:  * (the "License"); you may not use this file except in compliance with
1:ec14f65:  * the License.  You may obtain a copy of the License at
2:ec14f65:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ec14f65:  *
1:ec14f65:  * Unless required by applicable law or agreed to in writing, software
1:ec14f65:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec14f65:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec14f65:  * See the License for the specific language governing permissions and
1:ec14f65:  * limitations under the License.
1:ec14f65:  */
1:ec14f65: package org.apache.activemq.command;
8:ec14f65: 
1:ec14f65: import org.apache.activemq.state.CommandVisitor;
1:ec14f65: 
1:ec14f65: /**
1:230a86c:  * A ProducerAck command is sent by a broker to a producer to let it know it has
1:230a86c:  * received and processed messages that it has produced. The producer will be
1:230a86c:  * flow controlled if it does not receive ProducerAck commands back from the
1:230a86c:  * broker.
1:ec14f65:  * 
1:ec14f65:  * @openwire:marshaller code="19" version="3"
1:b0c2a40:  * 
1:ec14f65:  */
1:ec14f65: public class ProducerAck extends BaseCommand {
1:ec14f65: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PRODUCER_ACK;
1:230a86c: 
1:ec14f65:     protected ProducerId producerId;
1:ec14f65:     protected int size;
1:230a86c: 
1:ec14f65:     public ProducerAck() {
5:ec14f65:     }
1:230a86c: 
1:4207bd9:     public ProducerAck(ProducerId producerId, int size) {
1:230a86c:         this.producerId = producerId;
1:230a86c:         this.size = size;
1:4207bd9:     }
1:230a86c: 
1:ec14f65:     public void copy(ProducerAck copy) {
1:ec14f65:         super.copy(copy);
1:ec14f65:         copy.producerId = producerId;
1:ec14f65:         copy.size = size;
1:ec14f65:     }
1:4207bd9: 
1:ec14f65:     public byte getDataStructureType() {
1:ec14f65:         return DATA_STRUCTURE_TYPE;
1:ec14f65:     }
1:230a86c: 
1:ec14f65:     public Response visit(CommandVisitor visitor) throws Exception {
1:230a86c:         return visitor.processProducerAck(this);
1:ec14f65:     }
1:ec14f65: 
1:ec14f65:     /**
1:ec14f65:      * The producer id that this ack message is destined for.
1:ec14f65:      * 
1:ec14f65:      * @openwire:property version=3
1:ec14f65:      */
1:230a86c:     public ProducerId getProducerId() {
1:230a86c:         return producerId;
1:230a86c:     }
1:ec14f65: 
1:230a86c:     public void setProducerId(ProducerId producerId) {
1:230a86c:         this.producerId = producerId;
1:230a86c:     }
1:ec14f65: 
1:ec14f65:     /**
1:ec14f65:      * The number of bytes that are being acked.
1:ec14f65:      * 
1:ec14f65:      * @openwire:property version=3
1:ec14f65:      */
1:230a86c:     public int getSize() {
1:230a86c:         return size;
1:230a86c:     }
1:ec14f65: 
1:230a86c:     public void setSize(int size) {
1:230a86c:         this.size = size;
1:230a86c:     }
1:ec14f65: 
1:ec14f65: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A ProducerAck command is sent by a broker to a producer to let it know it has
1:  * received and processed messages that it has produced. The producer will be
1:  * flow controlled if it does not receive ProducerAck commands back from the
1:  * broker.
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.PRODUCER_ACK;
1: 
1: 
1: 
1:         this.producerId = producerId;
1:         this.size = size;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         return visitor.processProducerAck(this);
/////////////////////////////////////////////////////////////////////////
1:     public ProducerId getProducerId() {
1:         return producerId;
1:     }
1:     public void setProducerId(ProducerId producerId) {
1:         this.producerId = producerId;
1:     }
1:     public int getSize() {
1:         return size;
1:     }
1:     public void setSize(int size) {
1:         this.size = size;
1:     }
commit:4207bd9
/////////////////////////////////////////////////////////////////////////
1:     public ProducerAck(ProducerId producerId, int size) {
0:     	this.producerId = producerId;
0:     	this.size = size;
1:     }
1:     
commit:ec14f65
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: 
1: /**
0:  * A ProducerAck command is sent by a broker to a producer to let it know it has received and processed 
0:  * messages that it has produced.  The producer will be flow controlled if it does not receive 
0:  * ProducerAck commands back from the broker.
1:  * 
1:  * @openwire:marshaller code="19" version="3"
0:  * @version $Revision: 1.11 $
1:  */
1: public class ProducerAck extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.PRODUCER_ACK;
1:     
1:     protected ProducerId producerId;
1:     protected int size;
1:     
1:     public ProducerAck() {
1:     }
1:     
1:     public void copy(ProducerAck copy) {
1:         super.copy(copy);
1:         copy.producerId = producerId;
1:         copy.size = size;
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     public Response visit(CommandVisitor visitor) throws Exception {
0:         return visitor.processProducerAck( this );
1:     }
1: 
1:     /**
1:      * The producer id that this ack message is destined for.
1:      * 
1:      * @openwire:property version=3
1:      */
0: 	public ProducerId getProducerId() {
0: 		return producerId;
1: 	}
1: 
0: 	public void setProducerId(ProducerId producerId) {
0: 		this.producerId = producerId;
1: 	}
1: 
1:     /**
1:      * The number of bytes that are being acked.
1:      * 
1:      * @openwire:property version=3
1:      */
0: 	public int getSize() {
0: 		return size;
1: 	}
1: 
0: 	public void setSize(int size) {
0: 		this.size = size;
1: 	}
1: 
1: 
1: }
============================================================================