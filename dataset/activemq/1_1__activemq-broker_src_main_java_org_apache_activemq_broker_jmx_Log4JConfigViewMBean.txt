1:25f1fe8: /**
1:25f1fe8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25f1fe8:  * contributor license agreements.  See the NOTICE file distributed with
1:25f1fe8:  * this work for additional information regarding copyright ownership.
1:25f1fe8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25f1fe8:  * (the "License"); you may not use this file except in compliance with
1:25f1fe8:  * the License.  You may obtain a copy of the License at
1:25f1fe8:  *
1:25f1fe8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25f1fe8:  *
1:25f1fe8:  * Unless required by applicable law or agreed to in writing, software
1:25f1fe8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25f1fe8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25f1fe8:  * See the License for the specific language governing permissions and
1:25f1fe8:  * limitations under the License.
1:25f1fe8:  */
1:25f1fe8: package org.apache.activemq.broker.jmx;
1:25f1fe8: 
1:25f1fe8: import java.util.List;
1:25f1fe8: 
1:25f1fe8: /**
1:25f1fe8:  * Log4J Configuration Management MBean used to alter the runtime log levels
1:25f1fe8:  * or force a reload of the Log4J configuration file.
1:25f1fe8:  */
1:25f1fe8: public interface Log4JConfigViewMBean {
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * Get the log level for the root logger
1:25f1fe8:      *
1:25f1fe8:      * @returns the current log level of the root logger.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs while getting the root level.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo("Returns the current logging level of the root logger.")
1:25f1fe8:     String getRootLogLevel() throws Exception;
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * Get the log level for the root logger
1:25f1fe8:      *
1:25f1fe8:      * @param level
1:25f1fe8:      *        the new level to assign to the root logger.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs while setting the root level.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo("Sets the current logging level of the root logger.")
1:25f1fe8:     void setRootLogLevel(String level) throws Exception;
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * list of all the logger names and their levels
1:25f1fe8:      *
1:5e05df1:      * @return a List of all known loggers names.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs while getting the loggers.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo("List of all loggers that are available for configuration.")
1:25f1fe8:     List<String> getLoggers() throws Exception;
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * Get the log level for a given logger
1:25f1fe8:      *
1:25f1fe8:      * @param loggerName
1:25f1fe8:      *        the name of the logger whose level should be queried.
1:25f1fe8:      *
1:5e05df1:      * @return the current log level of the given logger.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs while getting the log level.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo("Returns the current logging level of a named logger.")
1:25f1fe8:     String getLogLevel(String loggerName) throws Exception;
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * Set the log level for a given logger
1:25f1fe8:      *
1:25f1fe8:      * @param loggerName
1:25f1fe8:      *        the name of the logger whose level is to be adjusted.
1:25f1fe8:      * @param level
1:25f1fe8:      *        the new level to assign the given logger.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs while setting the log level.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo("Sets the logging level for the named logger.")
1:25f1fe8:     void setLogLevel(String loggerName, String level) throws Exception;
1:25f1fe8: 
1:25f1fe8:     /**
1:25f1fe8:      * Reloads log4j.properties from the classpath.
1:25f1fe8:      *
1:25f1fe8:      * @throws Exception if an error occurs trying to reload the config file.
1:25f1fe8:      */
1:25f1fe8:     @MBeanInfo(value="Reloads log4j.properties from the classpath.")
1:25f1fe8:     public void reloadLog4jProperties() throws Throwable;
1:25f1fe8: 
1:25f1fe8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * @return a List of all known loggers names.
/////////////////////////////////////////////////////////////////////////
1:      * @return the current log level of the given logger.
commit:25f1fe8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.List;
1: 
1: /**
1:  * Log4J Configuration Management MBean used to alter the runtime log levels
1:  * or force a reload of the Log4J configuration file.
1:  */
1: public interface Log4JConfigViewMBean {
1: 
1:     /**
1:      * Get the log level for the root logger
1:      *
1:      * @returns the current log level of the root logger.
1:      *
1:      * @throws Exception if an error occurs while getting the root level.
1:      */
1:     @MBeanInfo("Returns the current logging level of the root logger.")
1:     String getRootLogLevel() throws Exception;
1: 
1:     /**
1:      * Get the log level for the root logger
1:      *
1:      * @param level
1:      *        the new level to assign to the root logger.
1:      *
1:      * @throws Exception if an error occurs while setting the root level.
1:      */
1:     @MBeanInfo("Sets the current logging level of the root logger.")
1:     void setRootLogLevel(String level) throws Exception;
1: 
1:     /**
1:      * list of all the logger names and their levels
1:      *
0:      * @returns a List of all known loggers names.
1:      *
1:      * @throws Exception if an error occurs while getting the loggers.
1:      */
1:     @MBeanInfo("List of all loggers that are available for configuration.")
1:     List<String> getLoggers() throws Exception;
1: 
1:     /**
1:      * Get the log level for a given logger
1:      *
1:      * @param loggerName
1:      *        the name of the logger whose level should be queried.
1:      *
0:      * @returns the current log level of the given logger.
1:      *
1:      * @throws Exception if an error occurs while getting the log level.
1:      */
1:     @MBeanInfo("Returns the current logging level of a named logger.")
1:     String getLogLevel(String loggerName) throws Exception;
1: 
1:     /**
1:      * Set the log level for a given logger
1:      *
1:      * @param loggerName
1:      *        the name of the logger whose level is to be adjusted.
1:      * @param level
1:      *        the new level to assign the given logger.
1:      *
1:      * @throws Exception if an error occurs while setting the log level.
1:      */
1:     @MBeanInfo("Sets the logging level for the named logger.")
1:     void setLogLevel(String loggerName, String level) throws Exception;
1: 
1:     /**
1:      * Reloads log4j.properties from the classpath.
1:      *
1:      * @throws Exception if an error occurs trying to reload the config file.
1:      */
1:     @MBeanInfo(value="Reloads log4j.properties from the classpath.")
1:     public void reloadLog4jProperties() throws Throwable;
1: 
1: }
============================================================================