1:d54e21b: /*
1:d54e21b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d54e21b:  * contributor license agreements.  See the NOTICE file distributed with
1:d54e21b:  * this work for additional information regarding copyright ownership.
1:d54e21b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d54e21b:  * (the "License"); you may not use this file except in compliance with
1:d54e21b:  * the License.  You may obtain a copy of the License at
1:d54e21b:  *
1:d54e21b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d54e21b:  *
1:d54e21b:  * Unless required by applicable law or agreed to in writing, software
1:d54e21b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d54e21b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d54e21b:  * See the License for the specific language governing permissions and
1:d54e21b:  * limitations under the License.
1:d54e21b:  */
1:d54e21b: package org.apache.activemq.transport.amqp.message;
1:d4c7cce: 
1:d54e21b: import java.nio.ByteBuffer;
1:5702ec8: import java.nio.charset.StandardCharsets;
1:d54e21b: import java.util.Arrays;
1:d54e21b: import java.util.Collection;
1:d54e21b: import java.util.HashMap;
1:d54e21b: import java.util.Map;
1:d54e21b: import java.util.concurrent.TimeUnit;
34:d54e21b: 
1:d54e21b: import org.apache.activemq.command.ActiveMQMessage;
1:d54e21b: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
1:d54e21b: import org.apache.qpid.proton.Proton;
1:d54e21b: import org.apache.qpid.proton.amqp.Symbol;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:d54e21b: import org.apache.qpid.proton.codec.CompositeWritableBuffer;
1:d54e21b: import org.apache.qpid.proton.codec.DroppingWritableBuffer;
1:d54e21b: import org.apache.qpid.proton.codec.WritableBuffer;
1:d54e21b: import org.apache.qpid.proton.message.Message;
1:d54e21b: import org.apache.qpid.proton.message.ProtonJMessage;
1:d54e21b: import org.junit.Ignore;
1:d4c7cce: import org.junit.Rule;
1:d54e21b: import org.junit.Test;
1:d4c7cce: import org.junit.rules.TestName;
1:d54e21b: import org.junit.runner.RunWith;
1:d54e21b: import org.junit.runners.Parameterized;
1:d54e21b: import org.junit.runners.Parameterized.Parameters;
1:d54e21b: import org.slf4j.Logger;
1:d54e21b: import org.slf4j.LoggerFactory;
1:d54e21b: 
1:d54e21b: /**
1:d54e21b:  * Some simple performance tests for the Message Transformers.
1:d54e21b:  */
1:63d62a7: @Ignore("Enable for profiling")
1:d54e21b: @RunWith(Parameterized.class)
1:d54e21b: public class JMSTransformationSpeedComparisonTest {
1:d54e21b: 
1:d54e21b:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1:d54e21b: 
1:d4c7cce:     @Rule
1:d4c7cce:     public TestName test = new TestName();
1:d4c7cce: 
1:d54e21b:     private final String transformer;
1:d54e21b: 
1:baef8f8:     private final int WARM_CYCLES = 10000;
1:d54e21b:     private final int PROFILE_CYCLES = 1000000;
1:d54e21b: 
1:d54e21b:     public JMSTransformationSpeedComparisonTest(String transformer) {
1:d54e21b:         this.transformer = transformer;
3:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Parameters(name="Transformer->{0}")
1:d54e21b:     public static Collection<Object[]> data() {
1:d54e21b:         return Arrays.asList(new Object[][] {
1:d54e21b:                 {"jms"},
1:d54e21b:                 {"native"},
1:d54e21b:                 {"raw"},
1:d54e21b:             });
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private InboundTransformer getInboundTransformer() {
1:d54e21b:         switch (transformer) {
1:d54e21b:             case "raw":
1:63d62a7:                 return new AMQPRawInboundTransformer();
1:d54e21b:             case "native":
1:63d62a7:                 return new AMQPNativeInboundTransformer();
1:d54e21b:             default:
1:63d62a7:                 return new JMSMappingInboundTransformer();
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private OutboundTransformer getOutboundTransformer() {
1:d54e21b:         switch (transformer) {
1:d54e21b:             case "raw":
1:d54e21b:             case "native":
1:63d62a7:                 return new AMQPNativeOutboundTransformer();
1:d54e21b:             default:
1:63d62a7:                 return new JMSMappingOutboundTransformer();
1:d54e21b:         }
1:d54e21b:     }
1:d54e21b: 
1:63d62a7:     @Test
1:d54e21b:     public void testBodyOnlyMessage() throws Exception {
1:63d62a7: 
4:d54e21b:         Message message = Proton.message();
1:63d62a7: 
4:d54e21b:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:63d62a7: 
4:d54e21b:         EncodedMessage encoded = encode(message);
1:63d62a7:         InboundTransformer inboundTransformer = getInboundTransformer();
1:63d62a7:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:63d62a7: 
1:d54e21b:         // Warm up
1:d54e21b:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:63d62a7:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:63d62a7:         }
1:63d62a7: 
1:d54e21b:         long totalDuration = 0;
1:63d62a7: 
1:d54e21b:         long startTime = System.nanoTime();
1:d54e21b:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
2:d54e21b:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:5702ec8:         }
1:d54e21b:         totalDuration += System.nanoTime() - startTime;
1:5702ec8: 
1:d4c7cce:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:d4c7cce:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d4c7cce:     }
1:d4c7cce: 
1:d4c7cce:     @Test
1:d54e21b:     public void testMessageWithNoPropertiesOrAnnotations() throws Exception {
1:d4c7cce: 
1:d54e21b:         Message message = Proton.message();
1:d4c7cce: 
4:d54e21b:         message.setAddress("queue://test-queue");
4:d54e21b:         message.setDeliveryCount(1);
4:d54e21b:         message.setCreationTime(System.currentTimeMillis());
4:d54e21b:         message.setContentType("text/plain");
1:d54e21b:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:d4c7cce: 
1:d54e21b:         EncodedMessage encoded = encode(message);
1:d4c7cce:         InboundTransformer inboundTransformer = getInboundTransformer();
1:d4c7cce:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:d4c7cce: 
1:d54e21b:         // Warm up
1:d54e21b:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:d54e21b:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:d54e21b:         }
1:d4c7cce: 
1:d54e21b:         long totalDuration = 0;
1:d54e21b: 
1:d54e21b:         long startTime = System.nanoTime();
1:d54e21b:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:d54e21b:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:d54e21b:         }
1:d54e21b:         totalDuration += System.nanoTime() - startTime;
1:d54e21b: 
1:d4c7cce:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:d4c7cce:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d54e21b:     }
1:d54e21b: 
3:d54e21b:     @Test
1:d54e21b:     public void testTypicalQpidJMSMessage() throws Exception {
1:d54e21b: 
1:d4c7cce:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
3:d54e21b:         InboundTransformer inboundTransformer = getInboundTransformer();
3:d54e21b:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:d54e21b: 
1:d54e21b:         // Warm up
1:d54e21b:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:d54e21b:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         long totalDuration = 0;
1:d54e21b: 
1:d54e21b:         long startTime = System.nanoTime();
1:d54e21b:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:d54e21b:             intermediate.onSend();
1:d54e21b:             outboundTransformer.transform(intermediate);
1:d54e21b:         }
1:d54e21b:         totalDuration += System.nanoTime() - startTime;
1:d54e21b: 
1:d4c7cce:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:d4c7cce:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:5702ec8:     public void testComplexQpidJMSMessage() throws Exception {
1:5702ec8: 
1:5702ec8:         EncodedMessage encoded = encode(createComplexQpidJMSMessage());
1:5702ec8:         InboundTransformer inboundTransformer = getInboundTransformer();
1:5702ec8:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:5702ec8: 
1:5702ec8:         // Warm up
1:5702ec8:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:5702ec8:             intermediate.onSend();
1:5702ec8:             outboundTransformer.transform(intermediate);
1:5702ec8:         }
1:5702ec8: 
1:5702ec8:         long totalDuration = 0;
1:5702ec8: 
1:5702ec8:         long startTime = System.nanoTime();
1:5702ec8:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:63d62a7:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:5702ec8:             intermediate.onSend();
1:5702ec8:             outboundTransformer.transform(intermediate);
1:5702ec8:         }
1:5702ec8:         totalDuration += System.nanoTime() - startTime;
1:5702ec8: 
1:5702ec8:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:5702ec8:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d54e21b:     }
1:d54e21b: 
1:5702ec8:     @Test
1:d54e21b:     public void testTypicalQpidJMSMessageInBoundOnly() throws Exception {
1:d54e21b: 
1:d4c7cce:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
1:d54e21b:         InboundTransformer inboundTransformer = getInboundTransformer();
1:d54e21b: 
1:d54e21b:         // Warm up
1:d54e21b:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:d54e21b:             inboundTransformer.transform(encoded);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         long totalDuration = 0;
1:d54e21b: 
1:d54e21b:         long startTime = System.nanoTime();
1:d54e21b:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:d54e21b:             inboundTransformer.transform(encoded);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         totalDuration += System.nanoTime() - startTime;
1:d54e21b: 
1:d4c7cce:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:d4c7cce:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testTypicalQpidJMSMessageOutBoundOnly() throws Exception {
1:d54e21b: 
1:d4c7cce:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
1:d54e21b:         InboundTransformer inboundTransformer = getInboundTransformer();
1:d54e21b:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1:d54e21b: 
1:63d62a7:         ActiveMQMessage outbound = inboundTransformer.transform(encoded);
1:d4c7cce:         outbound.onSend();
1:d4c7cce: 
1:d54e21b:         // Warm up
1:d54e21b:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:d54e21b:             outboundTransformer.transform(outbound);
1:d4c7cce:         }
1:d4c7cce: 
1:d54e21b:         long totalDuration = 0;
1:d4c7cce: 
1:d54e21b:         long startTime = System.nanoTime();
1:d54e21b:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:d54e21b:             outboundTransformer.transform(outbound);
1:d54e21b:         }
1:d4c7cce: 
1:d54e21b:         totalDuration += System.nanoTime() - startTime;
1:d4c7cce: 
1:d4c7cce:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:d4c7cce:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:d54e21b:     }
1:d4c7cce: 
1:d4c7cce:     private Message createTypicalQpidJMSMessage() {
1:d4c7cce:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:d4c7cce:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1:d4c7cce: 
1:d4c7cce:         applicationProperties.put("property-1", "string");
1:d4c7cce:         applicationProperties.put("property-2", 512);
1:d4c7cce:         applicationProperties.put("property-3", true);
1:d4c7cce: 
1:d4c7cce:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:d4c7cce:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1:d4c7cce: 
1:d4c7cce:         Message message = Proton.message();
1:d4c7cce: 
1:d4c7cce:         message.setAddress("queue://test-queue");
1:d4c7cce:         message.setDeliveryCount(1);
1:d4c7cce:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:d4c7cce:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:d4c7cce:         message.setCreationTime(System.currentTimeMillis());
1:d4c7cce:         message.setContentType("text/plain");
1:d4c7cce:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:d4c7cce: 
1:d4c7cce:         return message;
1:d54e21b:     }
1:d54e21b: 
1:5702ec8:     private Message createComplexQpidJMSMessage() {
1:5702ec8:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:5702ec8:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1:5702ec8: 
1:5702ec8:         applicationProperties.put("property-1", "string-1");
1:5702ec8:         applicationProperties.put("property-2", 512);
1:5702ec8:         applicationProperties.put("property-3", true);
1:5702ec8:         applicationProperties.put("property-4", "string-2");
1:5702ec8:         applicationProperties.put("property-5", 512);
1:5702ec8:         applicationProperties.put("property-6", true);
1:5702ec8:         applicationProperties.put("property-7", "string-3");
1:5702ec8:         applicationProperties.put("property-8", 512);
1:5702ec8:         applicationProperties.put("property-9", true);
1:5702ec8: 
1:5702ec8:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:5702ec8:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1:5702ec8: 
1:5702ec8:         Message message = Proton.message();
1:5702ec8: 
1:5702ec8:         // Header Values
1:5702ec8:         message.setPriority((short) 9);
1:5702ec8:         message.setDurable(true);
1:5702ec8:         message.setDeliveryCount(2);
1:5702ec8:         message.setTtl(5000);
1:5702ec8: 
1:5702ec8:         // Properties
1:5702ec8:         message.setMessageId("ID:SomeQualifier:0:0:1");
1:5702ec8:         message.setGroupId("Group-ID-1");
1:5702ec8:         message.setGroupSequence(15);
1:5702ec8:         message.setAddress("queue://test-queue");
1:5702ec8:         message.setReplyTo("queue://reply-queue");
1:5702ec8:         message.setCreationTime(System.currentTimeMillis());
1:5702ec8:         message.setContentType("text/plain");
1:5702ec8:         message.setCorrelationId("ID:SomeQualifier:0:7:9");
1:5702ec8:         message.setUserId("username".getBytes(StandardCharsets.UTF_8));
1:5702ec8: 
1:5702ec8:         // Application Properties / Message Annotations / Body
1:5702ec8:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:5702ec8:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:5702ec8:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1:5702ec8: 
1:5702ec8:         return message;
1:5702ec8:     }
1:5702ec8: 
1:d54e21b:     private EncodedMessage encode(Message message) {
1:d54e21b:         ProtonJMessage amqp = (ProtonJMessage) message;
1:d54e21b: 
1:d54e21b:         ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
1:d54e21b:         final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
1:d54e21b:         int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
1:d54e21b:         if (overflow.position() > 0) {
1:d54e21b:             buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
1:d54e21b:             c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return new EncodedMessage(1, buffer.array(), 0, c);
1:d54e21b:     }
1:d54e21b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:baef8f8
/////////////////////////////////////////////////////////////////////////
1:     private final int WARM_CYCLES = 10000;
commit:45f60e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1: @Ignore("Enable for profiling")
/////////////////////////////////////////////////////////////////////////
0:     private final int WARM_CYCLES = 1000;
/////////////////////////////////////////////////////////////////////////
1:                 return new AMQPRawInboundTransformer();
1:                 return new AMQPNativeInboundTransformer();
1:                 return new JMSMappingInboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:                 return new AMQPNativeOutboundTransformer();
1:                 return new JMSMappingOutboundTransformer();
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage outbound = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage outbound = inboundTransformer.transform(encoded);
/////////////////////////////////////////////////////////////////////////
1:     @Test
0:     public void testBodyOnlyEncodeDecode() throws Exception {
1: 
0:         Message incomingMessage = Proton.message();
1: 
0:         incomingMessage.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
0:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
0:         ActiveMQMessage intermediate = inboundTransformer.transform(encoded);
1:         intermediate.onSend();
0:         Message outboudMessage = outboundTransformer.transform(intermediate).decode();
1: 
0:         assertNull(outboudMessage.getHeader());
0:         assertNull(outboudMessage.getProperties());
1:     }
1: 
commit:5702ec8
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
/////////////////////////////////////////////////////////////////////////
1:     public void testComplexQpidJMSMessage() throws Exception {
1: 
1:         EncodedMessage encoded = encode(createComplexQpidJMSMessage());
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1:         totalDuration += System.nanoTime() - startTime;
1: 
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     private Message createComplexQpidJMSMessage() {
1:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
1:         applicationProperties.put("property-1", "string-1");
1:         applicationProperties.put("property-2", 512);
1:         applicationProperties.put("property-3", true);
1:         applicationProperties.put("property-4", "string-2");
1:         applicationProperties.put("property-5", 512);
1:         applicationProperties.put("property-6", true);
1:         applicationProperties.put("property-7", "string-3");
1:         applicationProperties.put("property-8", 512);
1:         applicationProperties.put("property-9", true);
1: 
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1: 
1:         Message message = Proton.message();
1: 
1:         // Header Values
1:         message.setPriority((short) 9);
1:         message.setDurable(true);
1:         message.setDeliveryCount(2);
1:         message.setTtl(5000);
1: 
1:         // Properties
1:         message.setMessageId("ID:SomeQualifier:0:0:1");
1:         message.setGroupId("Group-ID-1");
1:         message.setGroupSequence(15);
1:         message.setAddress("queue://test-queue");
1:         message.setReplyTo("queue://reply-queue");
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setCorrelationId("ID:SomeQualifier:0:7:9");
1:         message.setUserId("username".getBytes(StandardCharsets.UTF_8));
1: 
1:         // Application Properties / Message Annotations / Body
1:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         return message;
1:     }
1: 
commit:d4c7cce
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Rule;
1: import org.junit.rules.TestName;
/////////////////////////////////////////////////////////////////////////
1:     @Rule
1:     public TestName test = new TestName();
1: 
0:     private final int WARM_CYCLES = 50;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:         EncodedMessage encoded = encode(createTypicalQpidJMSMessage());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms  -> [{}]",
1:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration), test.getMethodName());
1:     }
1: 
0:     @Ignore
1:     @Test
0:     public void testEncodeDecodeIsWorking() throws Exception {
0:         Message incomingMessage = createTypicalQpidJMSMessage();
0:         EncodedMessage encoded = encode(incomingMessage);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
0:         ActiveMQMessage outbound = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:         outbound.onSend();
0:         Message outboudMessage = outboundTransformer.transform(outbound).decode();
1: 
0:         // Test that message details are equal
0:         assertEquals(incomingMessage.getAddress(), outboudMessage.getAddress());
0:         assertEquals(incomingMessage.getDeliveryCount(), outboudMessage.getDeliveryCount());
0:         assertEquals(incomingMessage.getCreationTime(), outboudMessage.getCreationTime());
0:         assertEquals(incomingMessage.getContentType(), outboudMessage.getContentType());
1: 
0:         // Test Message annotations
0:         ApplicationProperties incomingApplicationProperties = incomingMessage.getApplicationProperties();
0:         ApplicationProperties outgoingApplicationProperties = outboudMessage.getApplicationProperties();
1: 
0:         assertEquals(incomingApplicationProperties.getValue(), outgoingApplicationProperties.getValue());
1: 
0:         // Test Message properties
0:         MessageAnnotations incomingMessageAnnotations = incomingMessage.getMessageAnnotations();
0:         MessageAnnotations outgoingMessageAnnotations = outboudMessage.getMessageAnnotations();
1: 
0:         assertEquals(incomingMessageAnnotations.getValue(), outgoingMessageAnnotations.getValue());
1: 
0:         // Test that bodies are equal
0:         assertTrue(incomingMessage.getBody() instanceof AmqpValue);
0:         assertTrue(outboudMessage.getBody() instanceof AmqpValue);
1: 
0:         AmqpValue incomingBody = (AmqpValue) incomingMessage.getBody();
0:         AmqpValue outgoingBody = (AmqpValue) outboudMessage.getBody();
1: 
0:         assertTrue(incomingBody.getValue() instanceof String);
0:         assertTrue(outgoingBody.getValue() instanceof String);
1: 
0:         assertEquals(incomingBody.getValue(), outgoingBody.getValue());
1:     }
1: 
1:     private Message createTypicalQpidJMSMessage() {
1:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
1:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
1:         applicationProperties.put("property-1", "string");
1:         applicationProperties.put("property-2", 512);
1:         applicationProperties.put("property-3", true);
1: 
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-dest"), 0);
1: 
1:         Message message = Proton.message();
1: 
1:         message.setAddress("queue://test-queue");
1:         message.setDeliveryCount(1);
1:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
1:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         return message;
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
1: import org.apache.qpid.proton.Proton;
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.codec.CompositeWritableBuffer;
1: import org.apache.qpid.proton.codec.DroppingWritableBuffer;
1: import org.apache.qpid.proton.codec.WritableBuffer;
1: import org.apache.qpid.proton.message.Message;
1: import org.apache.qpid.proton.message.ProtonJMessage;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Some simple performance tests for the Message Transformers.
1:  */
0: @Ignore("Turn on to profile.")
1: @RunWith(Parameterized.class)
1: public class JMSTransformationSpeedComparisonTest {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1: 
1:     private final String transformer;
1: 
0:     private final int WARM_CYCLES = 10;
1:     private final int PROFILE_CYCLES = 1000000;
1: 
1:     public JMSTransformationSpeedComparisonTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Parameters(name="Transformer->{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"jms"},
1:                 {"native"},
1:                 {"raw"},
1:             });
1:     }
1: 
1:     private InboundTransformer getInboundTransformer() {
1:         switch (transformer) {
1:             case "raw":
0:                 return new AMQPRawInboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:             case "native":
0:                 return new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:             default:
0:                 return new JMSMappingInboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:         }
1:     }
1: 
1:     private OutboundTransformer getOutboundTransformer() {
1:         switch (transformer) {
1:             case "raw":
1:             case "native":
0:                 return new AMQPNativeOutboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:             default:
0:                 return new JMSMappingOutboundTransformer(ActiveMQJMSVendor.INSTANCE);
1:         }
1:     }
1: 
1:     @Test
1:     public void testBodyOnlyMessage() throws Exception {
1: 
1:         Message message = Proton.message();
1: 
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1:         totalDuration += System.nanoTime() - startTime;
1: 
0:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms",
0:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration));
1:     }
1: 
1:     @Test
1:     public void testMessageWithNoPropertiesOrAnnotations() throws Exception {
1: 
1:         Message message = Proton.message();
1: 
1:         message.setAddress("queue://test-queue");
1:         message.setDeliveryCount(1);
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1:         totalDuration += System.nanoTime() - startTime;
1: 
0:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms",
0:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration));
1:     }
1: 
1:     @Test
1:     public void testTypicalQpidJMSMessage() throws Exception {
1: 
0:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
0:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
0:         applicationProperties.put("property-1", "string");
0:         applicationProperties.put("property-2", 512);
0:         applicationProperties.put("property-3", true);
1: 
0:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1: 
1:         Message message = Proton.message();
1: 
1:         message.setAddress("queue://test-queue");
1:         message.setDeliveryCount(1);
0:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
0:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
0:             ActiveMQMessage intermediate = (ActiveMQMessage) inboundTransformer.transform(encoded);
1:             intermediate.onSend();
1:             outboundTransformer.transform(intermediate);
1:         }
1:         totalDuration += System.nanoTime() - startTime;
1: 
0:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms",
0:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration));
1:     }
1: 
1:     @Test
1:     public void testTypicalQpidJMSMessageInBoundOnly() throws Exception {
1: 
0:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
0:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
0:         applicationProperties.put("property-1", "string");
0:         applicationProperties.put("property-2", 512);
0:         applicationProperties.put("property-3", true);
1: 
0:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1: 
1:         Message message = Proton.message();
1: 
1:         message.setAddress("queue://test-queue");
1:         message.setDeliveryCount(1);
0:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
0:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:             inboundTransformer.transform(encoded);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:             inboundTransformer.transform(encoded);
1:         }
1: 
1:         totalDuration += System.nanoTime() - startTime;
1: 
0:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms",
0:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration));
1:     }
1: 
1:     @Test
1:     public void testTypicalQpidJMSMessageOutBoundOnly() throws Exception {
1: 
0:         Map<String, Object> applicationProperties = new HashMap<String, Object>();
0:         Map<Symbol, Object> messageAnnotations = new HashMap<Symbol, Object>();
1: 
0:         applicationProperties.put("property-1", "string");
0:         applicationProperties.put("property-2", 512);
0:         applicationProperties.put("property-3", true);
1: 
0:         messageAnnotations.put(Symbol.valueOf("x-opt-jms-msg-type"), 0);
1: 
1:         Message message = Proton.message();
1: 
1:         message.setAddress("queue://test-queue");
1:         message.setDeliveryCount(1);
0:         message.setApplicationProperties(new ApplicationProperties(applicationProperties));
0:         message.setMessageAnnotations(new MessageAnnotations(messageAnnotations));
1:         message.setCreationTime(System.currentTimeMillis());
1:         message.setContentType("text/plain");
1:         message.setBody(new AmqpValue("String payload for AMQP message conversion performance testing."));
1: 
1:         EncodedMessage encoded = encode(message);
1:         InboundTransformer inboundTransformer = getInboundTransformer();
1:         OutboundTransformer outboundTransformer = getOutboundTransformer();
1: 
0:         ActiveMQMessage outbound = (ActiveMQMessage) inboundTransformer.transform(encoded);
0:         outbound.onSend();
1: 
1:         // Warm up
1:         for (int i = 0; i < WARM_CYCLES; ++i) {
1:             outboundTransformer.transform(outbound);
1:         }
1: 
1:         long totalDuration = 0;
1: 
1:         long startTime = System.nanoTime();
1:         for (int i = 0; i < PROFILE_CYCLES; ++i) {
1:             outboundTransformer.transform(outbound);
1:         }
1: 
1:         totalDuration += System.nanoTime() - startTime;
1: 
0:         LOG.info("[{}] Total time for {} cycles of transforms = {} ms",
0:             transformer, PROFILE_CYCLES, TimeUnit.NANOSECONDS.toMillis(totalDuration));
1:     }
1: 
1:     private EncodedMessage encode(Message message) {
1:         ProtonJMessage amqp = (ProtonJMessage) message;
1: 
1:         ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
1:         final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
1:         int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
1:         if (overflow.position() > 0) {
1:             buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
1:             c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
1:         }
1: 
1:         return new EncodedMessage(1, buffer.array(), 0, c);
1:     }
1: }
============================================================================