1:5a5056e: /**
1:5a5056e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5a5056e:  * contributor license agreements.  See the NOTICE file distributed with
1:5a5056e:  * this work for additional information regarding copyright ownership.
1:5a5056e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5a5056e:  * (the "License"); you may not use this file except in compliance with
1:5a5056e:  * the License.  You may obtain a copy of the License at
1:5a5056e:  *
1:5a5056e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5a5056e:  *
1:5a5056e:  * Unless required by applicable law or agreed to in writing, software
1:5a5056e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5a5056e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5a5056e:  * See the License for the specific language governing permissions and
1:5a5056e:  * limitations under the License.
1:5a5056e:  */
1:5a5056e: package org.apache.activemq.web;
1:5a5056e: 
1:5a5056e: import javax.jms.JMSException;
1:5a5056e: import javax.jms.Queue;
1:5a5056e: import javax.jms.QueueBrowser;
1:5a5056e: import javax.jms.Session;
1:5a5056e: 
1:5a5056e: import org.springframework.beans.factory.DisposableBean;
1:5a5056e: 
1:5a5056e: /**
1:0bbc0ac:  * 
1:5a5056e:  * 
1:5a5056e:  */
1:5a5056e: public class QueueBrowseQuery extends DestinationFacade implements DisposableBean {
1:5a5056e:     private SessionPool sessionPool;
1:5a5056e:     private String selector;
1:5a5056e:     private Session session;
1:5a5056e:     private Queue queue;
1:5a5056e:     private QueueBrowser browser;
1:5a5056e: 
1:5a5056e:     public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
1:5a5056e:         super(brokerFacade);
1:5a5056e:         this.sessionPool = sessionPool;
1:5a5056e:         this.session = sessionPool.borrowSession();
1:5a5056e:         setJMSDestinationType("query");
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void destroy() throws Exception {
1:5a5056e:         if (browser != null) {
1:5a5056e:             browser.close();
1:5a5056e:         }
1:5a5056e:         sessionPool.returnSession(session);
1:5a5056e:         session = null;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public QueueBrowser getBrowser() throws JMSException {
1:5a5056e:         if (browser == null) {
1:5a5056e:             browser = createBrowser();
1:5a5056e:         }
1:5a5056e:         return browser;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setBrowser(QueueBrowser browser) {
1:5a5056e:         this.browser = browser;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public Queue getQueue() throws JMSException {
1:5a5056e:         if (queue == null) {
1:5a5056e:             queue = session.createQueue(getValidDestination());
1:5a5056e:         }
1:5a5056e:         return queue;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setQueue(Queue queue) {
1:5a5056e:         this.queue = queue;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public String getSelector() {
1:5a5056e:         return selector;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public void setSelector(String selector) {
1:5a5056e:         this.selector = selector;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public Session getSession() {
1:5a5056e:         return session;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     public boolean isQueue() {
1:5a5056e:         return true;
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     protected QueueBrowser createBrowser() throws JMSException {
1:5a5056e:         return getSession().createBrowser(getQueue(), getSelector());
1:5a5056e:     }
1:5a5056e: 
1:5a5056e:     
1:5a5056e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:James Strachan
-------------------------------------------------------------------------------
commit:5a5056e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: 
1: import org.springframework.beans.factory.DisposableBean;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class QueueBrowseQuery extends DestinationFacade implements DisposableBean {
1:     private SessionPool sessionPool;
1:     private String selector;
1:     private Session session;
1:     private Queue queue;
1:     private QueueBrowser browser;
1: 
1:     public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
1:         super(brokerFacade);
1:         this.sessionPool = sessionPool;
1:         this.session = sessionPool.borrowSession();
1:         setJMSDestinationType("query");
1:     }
1: 
1:     public void destroy() throws Exception {
1:         if (browser != null) {
1:             browser.close();
1:         }
1:         sessionPool.returnSession(session);
1:         session = null;
1:     }
1: 
1:     public QueueBrowser getBrowser() throws JMSException {
1:         if (browser == null) {
1:             browser = createBrowser();
1:         }
1:         return browser;
1:     }
1: 
1:     public void setBrowser(QueueBrowser browser) {
1:         this.browser = browser;
1:     }
1: 
1:     public Queue getQueue() throws JMSException {
1:         if (queue == null) {
1:             queue = session.createQueue(getValidDestination());
1:         }
1:         return queue;
1:     }
1: 
1:     public void setQueue(Queue queue) {
1:         this.queue = queue;
1:     }
1: 
1:     public String getSelector() {
1:         return selector;
1:     }
1: 
1:     public void setSelector(String selector) {
1:         this.selector = selector;
1:     }
1: 
1:     public Session getSession() {
1:         return session;
1:     }
1: 
1:     public boolean isQueue() {
1:         return true;
1:     }
1: 
1:     protected QueueBrowser createBrowser() throws JMSException {
1:         return getSession().createBrowser(getQueue(), getSelector());
1:     }
1: 
1:     
1: }
============================================================================