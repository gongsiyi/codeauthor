1:e027f8f: /**
1:e027f8f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e027f8f:  * contributor license agreements.  See the NOTICE file distributed with
1:e027f8f:  * this work for additional information regarding copyright ownership.
1:e027f8f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e027f8f:  * (the "License"); you may not use this file except in compliance with
1:e027f8f:  * the License.  You may obtain a copy of the License at
1:e027f8f:  *
1:e027f8f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e027f8f:  *
1:e027f8f:  * Unless required by applicable law or agreed to in writing, software
1:e027f8f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e027f8f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e027f8f:  * See the License for the specific language governing permissions and
1:e027f8f:  * limitations under the License.
1:e027f8f:  */
1:e027f8f: package org.apache.activemq.bugs;
10:e027f8f: 
1:e027f8f: import java.util.ArrayList;
1:e027f8f: import java.util.concurrent.atomic.AtomicBoolean;
1:e027f8f: import java.util.concurrent.atomic.AtomicLong;
1:e027f8f: 
1:e027f8f: import javax.jms.Connection;
1:e027f8f: import javax.jms.MessageConsumer;
1:e027f8f: import javax.jms.MessageProducer;
1:e027f8f: import javax.jms.Session;
1:e027f8f: import javax.jms.TextMessage;
1:e027f8f: 
1:2a77d4c: import junit.framework.TestCase;
1:e027f8f: 
1:e027f8f: import org.apache.activemq.ActiveMQConnectionFactory;
1:e027f8f: import org.apache.activemq.broker.BrokerService;
1:08e01e7: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:08e01e7: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e027f8f: import org.apache.activemq.command.ActiveMQQueue;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e027f8f: 
1:e027f8f: /**
1:e027f8f:  * This is a test case for the issue reported at:
1:e027f8f:  * https://issues.apache.org/activemq/browse/AMQ-1866
1:e027f8f:  *
1:2a77d4c:  * If you have a JMS producer sending messages to multiple fast consumers and
1:2a77d4c:  * one slow consumer, eventually all consumers will run as slow as
1:e027f8f:  * the slowest consumer.
1:e027f8f:  */
1:e027f8f: public class AMQ1866 extends TestCase {
1:e027f8f: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(ConsumerThread.class);
1:e027f8f:     private BrokerService brokerService;
1:e027f8f:     private ArrayList<Thread> threads = new ArrayList<Thread>();
1:e027f8f: 
1:42e51a3:     private final String ACTIVEMQ_BROKER_BIND = "tcp://localhost:0";
1:42e51a3:     private String ACTIVEMQ_BROKER_URI;
1:e027f8f: 
1:e027f8f:     AtomicBoolean shutdown = new AtomicBoolean();
1:2a77d4c:     private ActiveMQQueue destination;
1:e027f8f: 
1:e027f8f:     @Override
1:e027f8f:     protected void setUp() throws Exception {
1:e027f8f:         // Start an embedded broker up.
1:e027f8f:         brokerService = new BrokerService();
1:b2fca26:         LevelDBStore adaptor = new LevelDBStore();
1:7614fe2:         brokerService.setPersistenceAdapter(adaptor);
1:08e01e7:         brokerService.deleteAllMessages();
1:08e01e7: 
1:08e01e7:         // A small max page size makes this issue occur faster.
1:08e01e7:         PolicyMap policyMap = new PolicyMap();
1:08e01e7:         PolicyEntry pe = new PolicyEntry();
1:08e01e7:         pe.setMaxPageSize(1);
1:08e01e7:         policyMap.put(new ActiveMQQueue(">"), pe);
1:08e01e7:         brokerService.setDestinationPolicy(policyMap);
1:08e01e7: 
1:e027f8f:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:e027f8f:         brokerService.start();
1:e027f8f: 
1:42e51a3:         ACTIVEMQ_BROKER_URI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:2a77d4c:         destination = new ActiveMQQueue(getName());
4:e027f8f:     }
1:2a77d4c: 
1:e027f8f:     @Override
1:e027f8f:     protected void tearDown() throws Exception {
1:e027f8f:         // Stop any running threads.
1:e027f8f:         shutdown.set(true);
1:e027f8f:         for (Thread t : threads) {
1:08e01e7:             t.interrupt();
1:e027f8f:             t.join();
1:e027f8f:         }
1:e027f8f:         brokerService.stop();
1:e027f8f:     }
1:2a77d4c: 
1:08e01e7:     public void testConsumerSlowDownPrefetch0() throws Exception {
1:42e51a3:         ACTIVEMQ_BROKER_URI = ACTIVEMQ_BROKER_URI + "?jms.prefetchPolicy.queuePrefetch=0";
1:e027f8f:         doTestConsumerSlowDown();
1:e027f8f:     }
1:e027f8f: 
1:08e01e7:     public void testConsumerSlowDownPrefetch10() throws Exception {
1:42e51a3:         ACTIVEMQ_BROKER_URI = ACTIVEMQ_BROKER_URI + "?jms.prefetchPolicy.queuePrefetch=10";
1:e027f8f:         doTestConsumerSlowDown();
1:e027f8f:     }
1:e027f8f: 
1:08e01e7:     public void testConsumerSlowDownDefaultPrefetch() throws Exception {
1:e027f8f:         doTestConsumerSlowDown();
1:e027f8f:     }
1:e027f8f: 
1:08e01e7:     public void doTestConsumerSlowDown() throws Exception {
1:e027f8f: 
1:08e01e7:         // Preload the queue.
1:08e01e7:         produce(20000);
1:08e01e7: 
1:08e01e7:         Thread producer = new Thread() {
1:08e01e7:             @Override
1:08e01e7:             public void run() {
1:08e01e7:                 try {
1:08e01e7:                     while(!shutdown.get()) {
1:08e01e7:                         produce(1000);
1:08e01e7:                     }
1:08e01e7:                 } catch (Exception e) {
1:08e01e7:                 }
1:08e01e7:             }
1:08e01e7:         };
1:08e01e7:         threads.add(producer);
1:08e01e7:         producer.start();
1:08e01e7: 
1:08e01e7:         // This is the slow consumer.
1:2a77d4c:         ConsumerThread c1 = new ConsumerThread("Consumer-1");
1:2a77d4c:         threads.add(c1);
1:2a77d4c:         c1.start();
1:2a77d4c: 
1:08e01e7:         // Wait a bit so that the slow consumer gets assigned most of the messages.
1:08e01e7:         Thread.sleep(500);
1:2a77d4c:         ConsumerThread c2 = new ConsumerThread("Consumer-2");
1:2a77d4c:         threads.add(c2);
1:2a77d4c:         c2.start();
1:e027f8f: 
1:3c32abd:         int totalReceived = 0;
1:e027f8f:         for ( int i=0; i < 30; i++) {
1:e027f8f:             Thread.sleep(1000);
1:e027f8f:             long c1Counter = c1.counter.getAndSet(0);
1:e027f8f:             long c2Counter = c2.counter.getAndSet(0);
1:42e51a3:             log.debug("c1: "+c1Counter+", c2: "+c2Counter);
1:3c32abd:             totalReceived += c1Counter;
1:3c32abd:             totalReceived += c2Counter;
1:e027f8f: 
1:e027f8f:             // Once message have been flowing for a few seconds, start asserting that c2 always gets messages.  It should be receiving about 100 / sec
1:3c32abd:             if( i > 10 ) {
1:3c32abd:                 assertTrue("Total received=" + totalReceived + ", Consumer 2 should be receiving new messages every second.", c2Counter > 0);
1:e027f8f:             }
1:e027f8f:         }
1:e027f8f:     }
1:e027f8f: 
1:08e01e7:     public void produce(int count) throws Exception {
1:08e01e7:         Connection connection=null;
1:08e01e7:         try {
1:08e01e7:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:08e01e7:             factory.setDispatchAsync(true);
1:08e01e7: 
1:08e01e7:             connection = factory.createConnection();
1:08e01e7: 
1:08e01e7:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:08e01e7:             MessageProducer producer = session.createProducer(destination);
1:08e01e7:             connection.start();
1:08e01e7: 
1:08e01e7:             for( int i=0 ; i< count; i++ ) {
1:08e01e7:                 producer.send(session.createTextMessage(getName()+" Message "+(++i)));
1:08e01e7:             }
1:08e01e7: 
1:08e01e7:         } finally {
2:e027f8f:             try {
1:08e01e7:                 connection.close();
1:08e01e7:             } catch (Throwable e) {
1:e027f8f:             }
1:e027f8f:         }
1:e027f8f:     }
1:08e01e7: 
1:e027f8f:     public class ConsumerThread extends Thread {
2:e027f8f:         final AtomicLong counter = new AtomicLong();
1:e027f8f: 
1:e027f8f:         public ConsumerThread(String threadId) {
2:e027f8f:             super(threadId);
1:e027f8f:         }
1:e027f8f: 
2:e027f8f:         public void run() {
2:e027f8f:             Connection connection=null;
1:e027f8f:             try {
2:e027f8f:                 log.debug(getName() + ": is running");
1:e027f8f: 
2:e027f8f:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
2:e027f8f:                 factory.setDispatchAsync(true);
1:e027f8f: 
2:e027f8f:                 connection = factory.createConnection();
1:e027f8f: 
2:e027f8f:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a77d4c:                 MessageConsumer consumer = session.createConsumer(destination);
2:e027f8f:                 connection.start();
1:e027f8f: 
2:e027f8f:                 while (!shutdown.get()) {
1:e027f8f:                     TextMessage msg = (TextMessage)consumer.receive(1000);
1:e027f8f:                     if ( msg!=null ) {
1:e027f8f:                         int sleepingTime;
1:e027f8f:                         if (getName().equals("Consumer-1")) {
1:08e01e7:                             sleepingTime = 1000 * 1000;
1:e027f8f:                         } else {
1:2a77d4c:                             sleepingTime = 1;
1:e027f8f:                         }
2:e027f8f:                         counter.incrementAndGet();
1:e027f8f:                         Thread.sleep(sleepingTime);
1:e027f8f:                     }
1:e027f8f:                 }
1:e027f8f: 
2:e027f8f:             } catch (Exception e) {
2:e027f8f:             } finally {
1:08e01e7:                 log.debug(getName() + ": is stopping");
1:e027f8f:                 try {
2:e027f8f:                     connection.close();
2:e027f8f:                 } catch (Throwable e) {
1:e027f8f:                 }
1:e027f8f:             }
1:e027f8f:         }
1:e027f8f: 
1:e027f8f:     }
1:e027f8f: 
1:e027f8f: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
1:         LevelDBStore adaptor = new LevelDBStore();
commit:08e01e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.deleteAllMessages();
1:         
1:         // A small max page size makes this issue occur faster.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setMaxPageSize(1);
1:         policyMap.put(new ActiveMQQueue(">"), pe);
1:         brokerService.setDestinationPolicy(policyMap);
1:         
/////////////////////////////////////////////////////////////////////////
1:             t.interrupt();
1:     public void testConsumerSlowDownPrefetch0() throws Exception {
1:     public void testConsumerSlowDownPrefetch10() throws Exception {
1:     public void testConsumerSlowDownDefaultPrefetch() throws Exception {
1:     public void doTestConsumerSlowDown() throws Exception {
1:         // Preload the queue.
1:         produce(20000);
1:         
1:         Thread producer = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     while(!shutdown.get()) {
1:                         produce(1000);
1:                     }
1:                 } catch (Exception e) {
1:                 }
1:             }
1:         };
1:         threads.add(producer);
1:         producer.start();
1:         
1:         // This is the slow consumer.
1:         // Wait a bit so that the slow consumer gets assigned most of the messages.
1:         Thread.sleep(500);
0:             System.out.println("c1: "+c1Counter+", c2: "+c2Counter);
/////////////////////////////////////////////////////////////////////////
1:     public void produce(int count) throws Exception {
1:         Connection connection=null;
1:         try {
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:             factory.setDispatchAsync(true);
1:             
1:             connection = factory.createConnection();
1:             
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             connection.start();
1:             
1:             for( int i=0 ; i< count; i++ ) {
1:                 producer.send(session.createTextMessage(getName()+" Message "+(++i)));
1:             }
1:             
1:         } finally {
1:                 connection.close();
1:             } catch (Throwable e) {
1:     
/////////////////////////////////////////////////////////////////////////
1:                             sleepingTime = 1000 * 1000;
/////////////////////////////////////////////////////////////////////////
1:                 log.debug(getName() + ": is stopping");
commit:2a77d4c
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:  * If you have a JMS producer sending messages to multiple fast consumers and 
1:  * one slow consumer, eventually all consumers will run as slow as 
/////////////////////////////////////////////////////////////////////////
1:     private ActiveMQQueue destination;
/////////////////////////////////////////////////////////////////////////
1:         destination = new ActiveMQQueue(getName());
/////////////////////////////////////////////////////////////////////////
1:         
0:         // Wait a bit before starting the consumers to load up the queues a bit..
0:         // If the queue is loaded up it seems that the even the Default Prefetch size case fails.
0:         Thread.sleep(10000);
1: 
1:         ConsumerThread c1 = new ConsumerThread("Consumer-1");
1:         threads.add(c1);
1:         c1.start();
1: 
1:         ConsumerThread c2 = new ConsumerThread("Consumer-2");
1:         threads.add(c2);
1:         c2.start();
/////////////////////////////////////////////////////////////////////////
0:             if( i > 3 ) {
/////////////////////////////////////////////////////////////////////////
0:                 MessageProducer producer = session.createProducer(destination);
0:                     Thread.sleep(1);
/////////////////////////////////////////////////////////////////////////
1:                 MessageConsumer consumer = session.createConsumer(destination);
/////////////////////////////////////////////////////////////////////////
1:                             sleepingTime = 1; 
commit:e027f8f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.util.ArrayList;
0: import java.util.Random;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * This is a test case for the issue reported at:
1:  * https://issues.apache.org/activemq/browse/AMQ-1866
1:  * 
0:  * If you have a JMS producer sending messages to multiple consumers and 
0:  * you have a low prefetch, eventually all consumers will run as slow as 
1:  * the slowest consumer.  
1:  */
1: public class AMQ1866 extends TestCase {
1: 
0:     private static final Log log = LogFactory.getLog(ConsumerThread.class);
1:     private BrokerService brokerService;
1:     private ArrayList<Thread> threads = new ArrayList<Thread>();
1:     
0:     String ACTIVEMQ_BROKER_BIND = "tcp://localhost:61616";    
0:     String ACTIVEMQ_BROKER_URI = "tcp://localhost:61616";
0:     String REQUEST_QUEUE = "provider.queue";
1:     
1:     AtomicBoolean shutdown = new AtomicBoolean();
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         // Start an embedded broker up.
1:         brokerService = new BrokerService();
1:         brokerService.addConnector(ACTIVEMQ_BROKER_BIND);
1:         brokerService.start();
1:     }
1:     
1:     @Override
1:     protected void tearDown() throws Exception {
1:         // Stop any running threads.
1:         shutdown.set(true);
1:         for (Thread t : threads) {
1:             t.join();
1:         }        
1:         brokerService.stop();
1:     }
1: 
0:     // Failing
0:     public void testConsumerSlowDownPrefetch0() throws InterruptedException {
0:         ACTIVEMQ_BROKER_URI = "tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=0";
1:         doTestConsumerSlowDown();
1:     }
1: 
0:     // Failing
0:     public void testConsumerSlowDownPrefetch10() throws InterruptedException {
0:         ACTIVEMQ_BROKER_URI = "tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=10";
1:         doTestConsumerSlowDown();
1:     }
1:     
0:     // Passing
0:     public void testConsumerSlowDownDefaultPrefetch() throws InterruptedException {
0:         ACTIVEMQ_BROKER_URI = "tcp://localhost:61616";
1:         doTestConsumerSlowDown();
1:     }
1: 
0:     public void doTestConsumerSlowDown() throws InterruptedException {
0:         ConsumerThread c1 = new ConsumerThread("Consumer-1");
0:         ConsumerThread c2 = new ConsumerThread("Consumer-2");
0:         ProducerThread p1 = new ProducerThread("Producer-1");
0:         threads.add(c1);
0:         threads.add(c2);
0:         threads.add(p1);
0:         c1.start();
0:         c2.start();
0:         p1.start();
1: 
1:         for ( int i=0; i < 30; i++) {
1:             Thread.sleep(1000);
0:             long p1Counter = p1.counter.getAndSet(0);
1:             long c1Counter = c1.counter.getAndSet(0);
1:             long c2Counter = c2.counter.getAndSet(0);
0:             System.out.println("p1: "+p1Counter+", c1: "+c1Counter+", c2: "+c2Counter);
1:             
1:             // Once message have been flowing for a few seconds, start asserting that c2 always gets messages.  It should be receiving about 100 / sec
0:             if( i > 2 ) {
0:                 assertTrue("Consumer 2 should be receiving new messages every second.", c2Counter > 0);
1:             }
1:         }
1:     }    
1:     
0:     public class ProducerThread extends Thread {
1:         final AtomicLong counter = new AtomicLong();
1:         
0:         public ProducerThread(String threadId) {
1:             super(threadId);
1:         }
1: 
1:         public void run() {
1:             Connection connection=null;
1:             try {
1:                 log.debug(getName() + ": is running");
1:                 
1:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:                 factory.setDispatchAsync(true);
0:                 Destination requestDestination = new ActiveMQQueue(REQUEST_QUEUE);
1:                 
1:                 connection = factory.createConnection();
1:                 
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 MessageProducer producer = session.createProducer(requestDestination);
1:                 connection.start();
1:                 
0:                 int i = 0;
1:                 while (!shutdown.get()) {
0:                     producer.send(session.createTextMessage(getName()+" Message "+(++i)));
1:                     counter.incrementAndGet();
0:                     Thread.sleep(10);
1:                 }
1:                 
1:             } catch (Exception e) {
0:                 e.printStackTrace();
1:             } finally {
1:                 try {
1:                     connection.close();
1:                 } catch (Throwable e) {
1:                 }
1:             }
1:         }
1: 
1:     }
1: 
1:     public class ConsumerThread extends Thread {
1:         final AtomicLong counter = new AtomicLong();
1: 
1:         public ConsumerThread(String threadId) {
1:             super(threadId);
1:         }
1: 
1:         public void run() {
1:             Connection connection=null;
1:             try {
1:                 log.debug(getName() + ": is running");
1:                 
1:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(ACTIVEMQ_BROKER_URI);
1:                 factory.setDispatchAsync(true);
0:                 Destination requestDestination = new ActiveMQQueue(REQUEST_QUEUE);
1:                 
1:                 connection = factory.createConnection();
1:                 
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 MessageConsumer consumer = session.createConsumer(requestDestination);
1:                 connection.start();
1:                 
0:                 int i = 0;
1:                 while (!shutdown.get()) {
1:                     TextMessage msg = (TextMessage)consumer.receive(1000);
1:                     if ( msg!=null ) {
1:                         int sleepingTime;
1:                         if (getName().equals("Consumer-1")) {
0:                             sleepingTime = 10 * 1000;
1:                         } else {
0:                             sleepingTime = 10; 
1:                         }
1:                         Thread.sleep(sleepingTime);
1:                         counter.incrementAndGet();
1:                     }
1:                 }
1:                 
1:             } catch (Exception e) {
0:                 e.printStackTrace();
1:             } finally {
1:                 try {
1:                     connection.close();
1:                 } catch (Throwable e) {
1:                 }
1:             }
1:         }
1: 
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * If you have a JMS producer sending messages to multiple fast consumers and
0:  * one slow consumer, eventually all consumers will run as slow as
0:  * the slowest consumer.
0: 
1:     private final String ACTIVEMQ_BROKER_BIND = "tcp://localhost:0";
1:     private String ACTIVEMQ_BROKER_URI;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
1:         ACTIVEMQ_BROKER_URI = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
0: 
/////////////////////////////////////////////////////////////////////////
0:         }
1:         ACTIVEMQ_BROKER_URI = ACTIVEMQ_BROKER_URI + "?jms.prefetchPolicy.queuePrefetch=0";
1:         ACTIVEMQ_BROKER_URI = ACTIVEMQ_BROKER_URI + "?jms.prefetchPolicy.queuePrefetch=10";
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:             log.debug("c1: "+c1Counter+", c2: "+c2Counter);
0: 
0:     }
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:                             sleepingTime = 1;
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(ConsumerThread.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:3c32abd
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         int totalReceived = 0;
1:             totalReceived += c1Counter;
1:             totalReceived += c2Counter;
1:             if( i > 10 ) {
1:                 assertTrue("Total received=" + totalReceived + ", Consumer 2 should be receiving new messages every second.", c2Counter > 0);
/////////////////////////////////////////////////////////////////////////
0:                         Thread.sleep(sleepingTime);
author:Robert Davies
-------------------------------------------------------------------------------
commit:7614fe2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0:         AMQPersistenceAdapter adaptor = new AMQPersistenceAdapter();
0:         adaptor.setIndexBinSize(4096);
1:         brokerService.setPersistenceAdapter(adaptor);
============================================================================