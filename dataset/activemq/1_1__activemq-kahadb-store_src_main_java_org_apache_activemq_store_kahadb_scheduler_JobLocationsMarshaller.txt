1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.store.kahadb.scheduler;
1:74846bb: 
1:74846bb: import java.io.DataInput;
1:74846bb: import java.io.DataOutput;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.ArrayList;
1:74846bb: import java.util.List;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * A VariableMarshaller instance that performs the read and write of a list of
1:74846bb:  * JobLocation objects using the JobLocation's built in read and write methods.
1:74846bb:  */
1:74846bb: class JobLocationsMarshaller extends VariableMarshaller<List<JobLocation>> {
1:74846bb:     static JobLocationsMarshaller INSTANCE = new JobLocationsMarshaller();
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public List<JobLocation> readPayload(DataInput dataIn) throws IOException {
1:74846bb:         List<JobLocation> result = new ArrayList<JobLocation>();
1:74846bb:         int size = dataIn.readInt();
1:74846bb:         for (int i = 0; i < size; i++) {
1:74846bb:             JobLocation jobLocation = new JobLocation();
1:74846bb:             jobLocation.readExternal(dataIn);
1:74846bb:             result.add(jobLocation);
1:74846bb:         }
1:74846bb:         return result;
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException {
1:74846bb:         dataOut.writeInt(value.size());
1:74846bb:         for (JobLocation jobLocation : value) {
1:74846bb:             jobLocation.writeExternal(dataOut);
1:74846bb:         }
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.scheduler;
1: 
1: import java.io.DataInput;
1: import java.io.DataOutput;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1: 
1: /**
1:  * A VariableMarshaller instance that performs the read and write of a list of
1:  * JobLocation objects using the JobLocation's built in read and write methods.
1:  */
1: class JobLocationsMarshaller extends VariableMarshaller<List<JobLocation>> {
1:     static JobLocationsMarshaller INSTANCE = new JobLocationsMarshaller();
1: 
1:     @Override
1:     public List<JobLocation> readPayload(DataInput dataIn) throws IOException {
1:         List<JobLocation> result = new ArrayList<JobLocation>();
1:         int size = dataIn.readInt();
1:         for (int i = 0; i < size; i++) {
1:             JobLocation jobLocation = new JobLocation();
1:             jobLocation.readExternal(dataIn);
1:             result.add(jobLocation);
1:         }
1:         return result;
1:     }
1: 
1:     @Override
1:     public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException {
1:         dataOut.writeInt(value.size());
1:         for (JobLocation jobLocation : value) {
1:             jobLocation.writeExternal(dataOut);
1:         }
1:     }
1: }
============================================================================