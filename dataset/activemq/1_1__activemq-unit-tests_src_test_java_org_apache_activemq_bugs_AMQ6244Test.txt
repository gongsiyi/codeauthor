1:7a61718: /**
1:7a61718:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7a61718:  * contributor license agreements.  See the NOTICE file distributed with
1:7a61718:  * this work for additional information regarding copyright ownership.
1:7a61718:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7a61718:  * (the "License"); you may not use this file except in compliance with
1:7a61718:  * the License.  You may obtain a copy of the License at
1:7a61718:  *
1:7a61718:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7a61718:  *
1:7a61718:  * Unless required by applicable law or agreed to in writing, software
1:7a61718:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a61718:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a61718:  * See the License for the specific language governing permissions and
1:7a61718:  * limitations under the License.
1:7a61718:  */
1:7a61718: package org.apache.activemq.bugs;
1:7a61718: 
1:7a61718: import com.google.common.base.Throwables;
1:7a61718: 
1:7a61718: import org.apache.activemq.ActiveMQConnection;
1:7a61718: import org.apache.activemq.ActiveMQConnectionFactory;
1:7a61718: import org.apache.activemq.command.ActiveMQBytesMessage;
1:7a61718: import org.apache.activemq.command.ActiveMQMessage;
1:7a61718: import org.apache.activemq.junit.EmbeddedActiveMQBroker;
1:7a61718: import org.junit.Assert;
1:7a61718: import org.junit.Rule;
1:7a61718: import org.junit.Test;
1:7a61718: import org.junit.rules.TestName;
1:7a61718: 
1:7a61718: import java.io.PrintWriter;
1:7a61718: import java.io.StringWriter;
1:7a61718: import java.util.Arrays;
1:7a61718: import java.util.Random;
1:7a61718: import java.util.zip.DataFormatException;
1:7a61718: 
1:7a61718: import javax.jms.Connection;
1:7a61718: import javax.jms.JMSException;
1:7a61718: import javax.jms.MessageConsumer;
1:7a61718: import javax.jms.MessageProducer;
1:7a61718: import javax.jms.Queue;
1:7a61718: import javax.jms.Session;
1:7a61718: 
1:7a61718: public class AMQ6244Test {
1:7a61718: 
1:7a61718:     public static final byte[] ORIG_MSG_CONTENT = randomByteArray();
1:7a61718: 
1:7a61718:     @Rule
1:7a61718:     public TestName name = new TestName();
1:7a61718: 
1:7a61718:     @Rule
1:7a61718:     public EmbeddedActiveMQBroker brokerRule = new EmbeddedActiveMQBroker();
1:7a61718: 
1:7a61718:     public AMQ6244Test() {
1:7a61718:         brokerRule.setBrokerName(this.getClass().getName());
1:7a61718:     }
1:7a61718: 
1:7a61718:     @Test
1:7a61718:     public void bytesMsgCompressedFlagTest() throws Exception {
1:7a61718:         final ActiveMQConnection compressionEnabledConnection = createConnection(brokerRule.getVmURL(), true);
1:7a61718:         final ActiveMQConnection compressionDisabledConnection = createConnection(brokerRule.getVmURL(), false);
1:7a61718: 
1:7a61718:         // Consumer (compression=false)
1:7a61718:         final Session consumerSession = compressionDisabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a61718:         final Queue destination = consumerSession.createQueue(name.getMethodName());
1:7a61718:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1:7a61718: 
1:7a61718:         // Producer (compression=false)
1:7a61718:         final Session compressionDisabledProducerSession = compressionDisabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a61718:         final MessageProducer compressionDisabledProducer = compressionDisabledProducerSession.createProducer(destination);
1:7a61718: 
1:7a61718:         // Producer (compression=true)
1:7a61718:         final Session compressionEnabledProducerSession = compressionEnabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7a61718:         final MessageProducer compressionEnabledProducer = compressionEnabledProducerSession.createProducer(destination);
1:7a61718: 
1:7a61718:         try {
1:7a61718:             /*
1:7a61718:              * Publish a BytesMessage on the compressed connection
1:7a61718:              */
1:7a61718:             final ActiveMQBytesMessage originalCompressedMsg = (ActiveMQBytesMessage) compressionEnabledProducerSession.createBytesMessage();
1:7a61718:             originalCompressedMsg.writeBytes(ORIG_MSG_CONTENT);
1:7a61718:             Assert.assertFalse(originalCompressedMsg.isReadOnlyBody());
1:7a61718: 
1:7a61718:             // send first message
1:7a61718:             compressionEnabledProducer.send(originalCompressedMsg);
1:7a61718:             Assert.assertEquals(
1:7a61718:                     "Once sent, the Message's 'compressed' flag should match the 'useCompression' flag on the Producer's Connection",
1:7a61718:                     compressionEnabledConnection.isUseCompression(), originalCompressedMsg.isCompressed());
1:7a61718: 
1:7a61718:             /*
1:7a61718:              * Consume the compressed message and resend it decompressed
1:7a61718:              */
1:7a61718:             final ActiveMQBytesMessage compressedMsg = receiveMsg(consumer, originalCompressedMsg);
1:7a61718:             validateMsgContent(compressedMsg);
1:7a61718: 
1:7a61718:             // make message writable so the client can reuse it
1:7a61718:             makeWritable(compressedMsg);
1:7a61718:             compressedMsg.setStringProperty(this.getClass().getName(), "test");
1:7a61718:             compressionDisabledProducer.send(compressedMsg);
1:7a61718: 
1:7a61718:             /*
1:7a61718:              * AMQ-6244 ERROR STATE 1: Produced Message is marked 'compressed' when its contents are not compressed
1:7a61718:              */
1:7a61718:             Assert.assertEquals(
1:7a61718:                     "AMQ-6244 Error State Achieved: Produced Message's 'compressed' flag is enabled after message is published on a connection with 'useCompression=false'",
1:7a61718:                     compressionDisabledConnection.isUseCompression(), compressedMsg.isCompressed());
1:7a61718: 
1:7a61718:             /*
1:7a61718:              * AMQ-6244 ERROR STATE 2: Consumer cannot handle Message marked 'compressed' when its contents are not compressed
1:7a61718:              */
1:7a61718:             try {
1:7a61718:                 final ActiveMQBytesMessage uncompressedMsg = receiveMsg(consumer, compressedMsg);
1:7a61718:                 validateMsgContent(uncompressedMsg);
1:7a61718:             } catch (JMSException jmsE) {
1:7a61718:                 final Throwable rootCause = Throwables.getRootCause(jmsE);
1:7a61718: 
1:7a61718:                 if (rootCause instanceof DataFormatException || rootCause instanceof NegativeArraySizeException) {
1:7a61718:                     final StringWriter sw = new StringWriter();
1:7a61718:                     final PrintWriter pw = new PrintWriter(sw);
1:7a61718: 
1:7a61718:                     jmsE.printStackTrace(pw);
1:7a61718: 
1:7a61718:                     Assert.fail(
1:7a61718:                             "AMQ-6244 Error State Achieved: Attempted to decompress BytesMessage contents that are not compressed\n" + sw
1:7a61718:                                     .toString());
1:7a61718:                 } else {
1:7a61718:                     throw jmsE;
1:7a61718:                 }
1:7a61718:             }
1:7a61718:         } finally {
1:7a61718:             compressionEnabledProducerSession.close();
1:7a61718:             compressionEnabledConnection.close();
1:7a61718:             consumerSession.close();
1:7a61718:             compressionDisabledProducerSession.close();
1:7a61718:             compressionDisabledConnection.close();
1:7a61718:         }
1:7a61718:     }
1:7a61718: 
1:7a61718:     private ActiveMQBytesMessage receiveMsg(final MessageConsumer consumer, final ActiveMQMessage sentMessage) throws JMSException {
1:7a61718:         // receive the message
1:7a61718:         final ActiveMQBytesMessage message = (ActiveMQBytesMessage) consumer.receive();
1:7a61718:         Assert.assertNotNull(message);
1:7a61718:         Assert.assertTrue("Consumed Message should be read-only", message.isReadOnlyBody());
1:7a61718:         Assert.assertEquals("Consumed Message's 'compressed' flag should match the produced Message's 'compressed' flag",
1:7a61718:                             sentMessage.isCompressed(), message.isCompressed());
1:7a61718: 
1:7a61718:         return message;
1:7a61718:     }
1:7a61718: 
1:7a61718:     private void validateMsgContent(final ActiveMQBytesMessage message) throws JMSException {
1:7a61718:         // ensure consumed message content matches what was originally set
1:7a61718:         final byte[] msgContent = new byte[(int) message.getBodyLength()];
1:7a61718:         message.readBytes(msgContent);
1:7a61718: 
1:7a61718:         Assert.assertTrue("Consumed Message content should match the original Message content",
1:7a61718:                           Arrays.equals(ORIG_MSG_CONTENT, msgContent));
1:7a61718:     }
1:7a61718: 
1:7a61718:     protected static ActiveMQConnection createConnection(final String URL, final boolean useCompression) throws Exception {
1:7a61718:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(URL);
1:7a61718:         factory.setUseCompression(useCompression);
1:7a61718:         Connection connection = factory.createConnection();
1:7a61718:         connection.start();
1:7a61718:         return (ActiveMQConnection) connection;
1:7a61718:     }
1:7a61718: 
1:7a61718:     protected static byte[] randomByteArray() {
1:7a61718:         final Random random = new Random();
1:7a61718:         final byte[] byteArray = new byte[random.nextInt(10 * 1024)];
1:7a61718:         random.nextBytes(byteArray);
1:7a61718: 
1:7a61718:         return byteArray;
1:7a61718:     }
1:7a61718: 
1:7a61718:     protected static void makeWritable(final ActiveMQMessage message) {
1:7a61718:         message.setReadOnlyBody(false);
1:7a61718:         message.setReadOnlyProperties(false);
1:7a61718:     }
1:7a61718: }
============================================================================
author:Brian D. Johnson
-------------------------------------------------------------------------------
commit:7a61718
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import com.google.common.base.Throwables;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.junit.EmbeddedActiveMQBroker;
1: import org.junit.Assert;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: import java.io.PrintWriter;
1: import java.io.StringWriter;
1: import java.util.Arrays;
1: import java.util.Random;
1: import java.util.zip.DataFormatException;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: public class AMQ6244Test {
1: 
1:     public static final byte[] ORIG_MSG_CONTENT = randomByteArray();
1: 
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     @Rule
1:     public EmbeddedActiveMQBroker brokerRule = new EmbeddedActiveMQBroker();
1: 
1:     public AMQ6244Test() {
1:         brokerRule.setBrokerName(this.getClass().getName());
1:     }
1: 
1:     @Test
1:     public void bytesMsgCompressedFlagTest() throws Exception {
1:         final ActiveMQConnection compressionEnabledConnection = createConnection(brokerRule.getVmURL(), true);
1:         final ActiveMQConnection compressionDisabledConnection = createConnection(brokerRule.getVmURL(), false);
1: 
1:         // Consumer (compression=false)
1:         final Session consumerSession = compressionDisabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue destination = consumerSession.createQueue(name.getMethodName());
1:         final MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1:         // Producer (compression=false)
1:         final Session compressionDisabledProducerSession = compressionDisabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer compressionDisabledProducer = compressionDisabledProducerSession.createProducer(destination);
1: 
1:         // Producer (compression=true)
1:         final Session compressionEnabledProducerSession = compressionEnabledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer compressionEnabledProducer = compressionEnabledProducerSession.createProducer(destination);
1: 
1:         try {
1:             /*
1:              * Publish a BytesMessage on the compressed connection
1:              */
1:             final ActiveMQBytesMessage originalCompressedMsg = (ActiveMQBytesMessage) compressionEnabledProducerSession.createBytesMessage();
1:             originalCompressedMsg.writeBytes(ORIG_MSG_CONTENT);
1:             Assert.assertFalse(originalCompressedMsg.isReadOnlyBody());
1: 
1:             // send first message
1:             compressionEnabledProducer.send(originalCompressedMsg);
1:             Assert.assertEquals(
1:                     "Once sent, the Message's 'compressed' flag should match the 'useCompression' flag on the Producer's Connection",
1:                     compressionEnabledConnection.isUseCompression(), originalCompressedMsg.isCompressed());
1: 
1:             /*
1:              * Consume the compressed message and resend it decompressed
1:              */
1:             final ActiveMQBytesMessage compressedMsg = receiveMsg(consumer, originalCompressedMsg);
1:             validateMsgContent(compressedMsg);
1: 
1:             // make message writable so the client can reuse it
1:             makeWritable(compressedMsg);
1:             compressedMsg.setStringProperty(this.getClass().getName(), "test");
1:             compressionDisabledProducer.send(compressedMsg);
1: 
1:             /*
1:              * AMQ-6244 ERROR STATE 1: Produced Message is marked 'compressed' when its contents are not compressed
1:              */
1:             Assert.assertEquals(
1:                     "AMQ-6244 Error State Achieved: Produced Message's 'compressed' flag is enabled after message is published on a connection with 'useCompression=false'",
1:                     compressionDisabledConnection.isUseCompression(), compressedMsg.isCompressed());
1: 
1:             /*
1:              * AMQ-6244 ERROR STATE 2: Consumer cannot handle Message marked 'compressed' when its contents are not compressed
1:              */
1:             try {
1:                 final ActiveMQBytesMessage uncompressedMsg = receiveMsg(consumer, compressedMsg);
1:                 validateMsgContent(uncompressedMsg);
1:             } catch (JMSException jmsE) {
1:                 final Throwable rootCause = Throwables.getRootCause(jmsE);
1: 
1:                 if (rootCause instanceof DataFormatException || rootCause instanceof NegativeArraySizeException) {
1:                     final StringWriter sw = new StringWriter();
1:                     final PrintWriter pw = new PrintWriter(sw);
1: 
1:                     jmsE.printStackTrace(pw);
1: 
1:                     Assert.fail(
1:                             "AMQ-6244 Error State Achieved: Attempted to decompress BytesMessage contents that are not compressed\n" + sw
1:                                     .toString());
1:                 } else {
1:                     throw jmsE;
1:                 }
1:             }
1:         } finally {
1:             compressionEnabledProducerSession.close();
1:             compressionEnabledConnection.close();
1:             consumerSession.close();
1:             compressionDisabledProducerSession.close();
1:             compressionDisabledConnection.close();
1:         }
1:     }
1: 
1:     private ActiveMQBytesMessage receiveMsg(final MessageConsumer consumer, final ActiveMQMessage sentMessage) throws JMSException {
1:         // receive the message
1:         final ActiveMQBytesMessage message = (ActiveMQBytesMessage) consumer.receive();
1:         Assert.assertNotNull(message);
1:         Assert.assertTrue("Consumed Message should be read-only", message.isReadOnlyBody());
1:         Assert.assertEquals("Consumed Message's 'compressed' flag should match the produced Message's 'compressed' flag",
1:                             sentMessage.isCompressed(), message.isCompressed());
1: 
1:         return message;
1:     }
1: 
1:     private void validateMsgContent(final ActiveMQBytesMessage message) throws JMSException {
1:         // ensure consumed message content matches what was originally set
1:         final byte[] msgContent = new byte[(int) message.getBodyLength()];
1:         message.readBytes(msgContent);
1: 
1:         Assert.assertTrue("Consumed Message content should match the original Message content",
1:                           Arrays.equals(ORIG_MSG_CONTENT, msgContent));
1:     }
1: 
1:     protected static ActiveMQConnection createConnection(final String URL, final boolean useCompression) throws Exception {
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(URL);
1:         factory.setUseCompression(useCompression);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         return (ActiveMQConnection) connection;
1:     }
1: 
1:     protected static byte[] randomByteArray() {
1:         final Random random = new Random();
1:         final byte[] byteArray = new byte[random.nextInt(10 * 1024)];
1:         random.nextBytes(byteArray);
1: 
1:         return byteArray;
1:     }
1: 
1:     protected static void makeWritable(final ActiveMQMessage message) {
1:         message.setReadOnlyBody(false);
1:         message.setReadOnlyProperties(false);
1:     }
1: }
============================================================================