1:25b2165: /**
1:25b2165:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25b2165:  * contributor license agreements.  See the NOTICE file distributed with
1:25b2165:  * this work for additional information regarding copyright ownership.
1:25b2165:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25b2165:  * (the "License"); you may not use this file except in compliance with
1:25b2165:  * the License.  You may obtain a copy of the License at
1:25b2165:  *
1:25b2165:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25b2165:  *
1:25b2165:  * Unless required by applicable law or agreed to in writing, software
1:25b2165:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25b2165:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25b2165:  * See the License for the specific language governing permissions and
1:25b2165:  * limitations under the License.
1:25b2165:  */
1:25b2165: package org.apache.activemq.network;
1:25b2165: 
1:25b2165: import junit.framework.Test;
1:25b2165: 
1:25b2165: import org.apache.activemq.broker.StubConnection;
1:25b2165: import org.apache.activemq.command.ActiveMQDestination;
1:25b2165: import org.apache.activemq.command.ConnectionInfo;
1:25b2165: import org.apache.activemq.command.ConsumerInfo;
1:25b2165: import org.apache.activemq.command.Message;
1:25b2165: import org.apache.activemq.command.ProducerInfo;
1:25b2165: import org.apache.activemq.command.SessionInfo;
1:25b2165: 
1:25d396b: import java.util.Arrays;
1:25d396b: 
1:25b2165: 
1:25b2165: public class DemandForwardingBridgeFilterTest extends NetworkTestSupport {
1:25b2165: 
1:25b2165:     private DemandForwardingBridge bridge;
1:25b2165: 
1:25b2165:     private StubConnection producerConnection;
1:25b2165: 
1:25b2165:     private ProducerInfo producerInfo;
1:25b2165: 
1:25b2165:     private StubConnection consumerConnection;
1:25b2165: 
1:25b2165:     private SessionInfo consumerSessionInfo;
1:25b2165: 
1:25b2165:     public void testWildcardOnExcludedDestination() throws Exception {
1:25b2165: 
1:25d396b:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25d396b: 
1:25d396b:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>",
1:25d396b:                 ActiveMQDestination.TOPIC_TYPE)));
1:25d396b:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:25d396b:                 "TEST", ActiveMQDestination.QUEUE_TYPE)));
1:25d396b: 
1:25d396b:         configureAndStartBridge(configuration);
1:25b2165: 
1:25b2165:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:25b2165:     }
1:25b2165: 
1:25b2165:     public void testWildcardOnTwoExcludedDestination() throws Exception {
1:25d396b:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25b2165: 
1:25d396b:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
1:25d396b:                 ActiveMQDestination.createDestination("TEST.X1", ActiveMQDestination.QUEUE_TYPE)));
1:25d396b:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:25d396b:                 "TEST.X2", ActiveMQDestination.QUEUE_TYPE)));
1:25d396b: 
1:25d396b:         configureAndStartBridge(configuration);
1:25b2165: 
1:25b2165:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveNoMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveNoMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:     }
1:25d396b: 
1:25b2165: 
1:25b2165:     public void testWildcardOnDynamicallyIncludedDestination() throws Exception {
1:25d396b: 
1:25d396b:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25b2165: 
1:25d396b:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
1:25d396b:                 ActiveMQDestination.createDestination("TEST.X2", ActiveMQDestination.QUEUE_TYPE)));
1:25d396b: 
1:25d396b:         configureAndStartBridge(configuration);
1:25d396b: 
1:25b2165: 
1:25b2165:         assertReceiveMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:     }
1:25b2165: 
1:25b2165:     public void testDistinctTopicAndQueue() throws Exception {
1:25d396b: 
1:25d396b:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25b2165: 
1:25d396b:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(">",
1:25d396b:                 ActiveMQDestination.TOPIC_TYPE)));
1:25d396b:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:25d396b:                 ">", ActiveMQDestination.QUEUE_TYPE)));
1:25d396b: 
1:25d396b:         configureAndStartBridge(configuration);
1:25b2165: 
1:25b2165:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveNoMessageOn("TEST", ActiveMQDestination.TOPIC_TYPE);
1:25b2165:     }
1:25b2165: 
1:25b2165:     public void testListOfExcludedDestinationWithWildcard() throws Exception {
1:25b2165: 
1:25d396b:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25b2165: 
1:25d396b:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.TOPIC_TYPE),
1:25d396b:                 ActiveMQDestination.createDestination("TEST.*", ActiveMQDestination.TOPIC_TYPE)));
1:25d396b:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:25d396b:                 "TEST.X1", ActiveMQDestination.QUEUE_TYPE)));
1:25b2165: 
1:25d396b:         configureAndStartBridge(configuration);
1:25b2165: 
1:25b2165:         assertReceiveMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:25b2165:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:25b2165:         assertReceiveNoMessageOn("OTHER.T2", ActiveMQDestination.TOPIC_TYPE);
1:25b2165:     }
1:1faa4af: 
1:1faa4af:     public void testExcludeStaticDestinations() throws Exception {
1:1faa4af: 
1:1faa4af:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:25b2165: 
1:1faa4af:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("TEST.X1", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination("OTHER.X1", ActiveMQDestination.QUEUE_TYPE)));
1:1faa4af:         configuration.setStaticallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:1faa4af:                 "TEST.>", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination(
1:1faa4af:                 "OTHER.X1", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination(
1:1faa4af:                 "OTHER.X2", ActiveMQDestination.QUEUE_TYPE)));
1:1faa4af: 
1:1faa4af:         configureAndStartBridge(configuration);
1:1faa4af: 
1:1faa4af:         assertReceiveNoMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:1faa4af:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:1faa4af:         assertReceiveNoMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:1faa4af:         assertReceiveMessageOn("OTHER.X2", ActiveMQDestination.QUEUE_TYPE);
1:1faa4af:     }
1:1faa4af: 
1:25b2165:     private void assertReceiveMessageOn(String destinationName, byte destinationType) throws Exception,
1:25b2165:             InterruptedException {
1:25b2165: 
1:25b2165:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1:25b2165: 
1:25b2165:         // Send the message to the local broker.
1:25b2165:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1:25b2165: 
1:25b2165:         // Make sure the message was delivered via the remote.
1:25b2165:         Message m = createConsumerAndReceiveMessage(destination);
1:25b2165: 
1:25b2165:         assertNotNull(m);
1:25b2165:     }
1:25b2165: 
1:25b2165:     private void assertReceiveNoMessageOn(String destinationName, byte destinationType) throws Exception,
1:25b2165:             InterruptedException {
1:25b2165: 
1:25b2165:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1:25b2165: 
1:25b2165:         // Send the message to the local broker.
1:25b2165:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1:25b2165: 
1:25b2165:         // Make sure the message was delivered via the remote.
1:25b2165:         Message m = createConsumerAndReceiveMessage(destination);
1:25b2165:         assertNull(m);
1:25b2165:     }
1:25b2165: 
1:25b2165:     private Message createConsumerAndReceiveMessage(ActiveMQDestination destination) throws Exception {
1:25b2165:         // Now create remote consumer that should cause message to move to this
1:25b2165:         // remote consumer.
1:25b2165:         ConsumerInfo consumerInfo = createConsumerInfo(consumerSessionInfo, destination);
1:25b2165:         consumerConnection.send(consumerInfo);
1:25b2165: 
1:25b2165:         Message m = receiveMessage(consumerConnection);
1:25b2165:         return m;
1:25b2165:     }
1:25b2165: 
1:25b2165:     protected void setUp() throws Exception {
1:25b2165:         super.setUp();
1:25d396b: 
1:25b2165: 
1:25b2165:         producerConnection = createConnection();
1:25b2165:         ConnectionInfo producerConnectionInfo = createConnectionInfo();
1:25b2165:         SessionInfo producerSessionInfo = createSessionInfo(producerConnectionInfo);
1:25b2165:         producerInfo = createProducerInfo(producerSessionInfo);
1:25b2165:         producerConnection.send(producerConnectionInfo);
1:25b2165:         producerConnection.send(producerSessionInfo);
1:25b2165:         producerConnection.send(producerInfo);
1:25b2165: 
1:25b2165:         consumerConnection = createRemoteConnection();
1:25b2165:         ConnectionInfo consumerConnectionInfo = createConnectionInfo();
1:25b2165:         consumerSessionInfo = createSessionInfo(consumerConnectionInfo);
1:25b2165:         consumerConnection.send(consumerConnectionInfo);
1:25b2165:         consumerConnection.send(consumerSessionInfo);
1:25b2165:     }
1:25b2165: 
1:25b2165:     protected void tearDown() throws Exception {
1:25b2165:         bridge.stop();
1:25b2165:         super.tearDown();
1:25b2165:     }
1:25b2165: 
1:25b2165:     public static Test suite() {
1:25b2165:         return suite(DemandForwardingBridgeFilterTest.class);
1:25b2165:     }
1:25b2165: 
1:25b2165:     public static void main(String[] args) {
1:25b2165:         junit.textui.TestRunner.run(suite());
1:25b2165:     }
1:25b2165: 
1:25d396b:     public NetworkBridgeConfiguration getDefaultBridgeConfiguration() {
1:25d396b:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:25d396b:         config.setBrokerName("local");
1:25d396b:         config.setDispatchAsync(false);
1:25d396b:         return config;
1:25d396b:     }
1:25d396b: 
1:25d396b:     private void configureAndStartBridge(NetworkBridgeConfiguration configuration) throws Exception {
1:25d396b:         bridge = new DemandForwardingBridge(configuration, createTransport(), createRemoteTransport());
1:25d396b:         bridge.setBrokerService(broker);
1:25d396b:         bridge.setDynamicallyIncludedDestinations(configuration.getDynamicallyIncludedDestinations().toArray(
1:25d396b:                 new ActiveMQDestination[configuration.getDynamicallyIncludedDestinations().size()]
1:25d396b:         ));
1:25d396b:         bridge.setExcludedDestinations(configuration.getExcludedDestinations().toArray(
1:25d396b:                 new ActiveMQDestination[configuration.getExcludedDestinations().size()]
1:25d396b:         ));
1:25d396b:         bridge.setStaticallyIncludedDestinations(configuration.getStaticallyIncludedDestinations().toArray(
1:25d396b:                 new ActiveMQDestination[configuration.getStaticallyIncludedDestinations().size()]
1:25d396b:         ));
1:25d396b:         bridge.start();
1:25d396b:     }
1:25d396b: 
1:25b2165: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:1faa4af
/////////////////////////////////////////////////////////////////////////
1:     public void testExcludeStaticDestinations() throws Exception {
1: 
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1: 
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("TEST.X1", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination("OTHER.X1", ActiveMQDestination.QUEUE_TYPE)));
1:         configuration.setStaticallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 "TEST.>", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination(
1:                 "OTHER.X1", ActiveMQDestination.QUEUE_TYPE), ActiveMQDestination.createDestination(
1:                 "OTHER.X2", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
1: 
1:         assertReceiveNoMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveMessageOn("OTHER.X2", ActiveMQDestination.QUEUE_TYPE);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Christian Posta
-------------------------------------------------------------------------------
commit:25d396b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1: 
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>",
1:                 ActiveMQDestination.TOPIC_TYPE)));
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 "TEST", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
1:                 ActiveMQDestination.createDestination("TEST.X1", ActiveMQDestination.QUEUE_TYPE)));
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 "TEST.X2", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
1: 
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1: 
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
1:                 ActiveMQDestination.createDestination("TEST.X2", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
1: 
/////////////////////////////////////////////////////////////////////////
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1: 
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(">",
1:                 ActiveMQDestination.TOPIC_TYPE)));
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 ">", ActiveMQDestination.QUEUE_TYPE)));
1: 
1:         configureAndStartBridge(configuration);
/////////////////////////////////////////////////////////////////////////
1:         NetworkBridgeConfiguration configuration = getDefaultBridgeConfiguration();
1:         configuration.setExcludedDestinations(Arrays.asList(ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.TOPIC_TYPE),
1:                 ActiveMQDestination.createDestination("TEST.*", ActiveMQDestination.TOPIC_TYPE)));
1:         configuration.setDynamicallyIncludedDestinations(Arrays.asList(ActiveMQDestination.createDestination(
1:                 "TEST.X1", ActiveMQDestination.QUEUE_TYPE)));
1:         configureAndStartBridge(configuration);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public NetworkBridgeConfiguration getDefaultBridgeConfiguration() {
1:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
1:         config.setBrokerName("local");
1:         config.setDispatchAsync(false);
1:         return config;
1:     }
1: 
1:     private void configureAndStartBridge(NetworkBridgeConfiguration configuration) throws Exception {
1:         bridge = new DemandForwardingBridge(configuration, createTransport(), createRemoteTransport());
1:         bridge.setBrokerService(broker);
1:         bridge.setDynamicallyIncludedDestinations(configuration.getDynamicallyIncludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getDynamicallyIncludedDestinations().size()]
1:         ));
1:         bridge.setExcludedDestinations(configuration.getExcludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getExcludedDestinations().size()]
1:         ));
1:         bridge.setStaticallyIncludedDestinations(configuration.getStaticallyIncludedDestinations().toArray(
1:                 new ActiveMQDestination[configuration.getStaticallyIncludedDestinations().size()]
1:         ));
1:         bridge.start();
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:25b2165
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
1: 
1: public class DemandForwardingBridgeFilterTest extends NetworkTestSupport {
1: 
1:     private DemandForwardingBridge bridge;
1: 
1:     private StubConnection producerConnection;
1: 
1:     private ProducerInfo producerInfo;
1: 
1:     private StubConnection consumerConnection;
1: 
1:     private SessionInfo consumerSessionInfo;
1: 
1:     public void testWildcardOnExcludedDestination() throws Exception {
1: 
0:         bridge.setExcludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination("OTHER.>",
0:             ActiveMQDestination.TOPIC_TYPE) });
0:         bridge.setDynamicallyIncludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination(
0:             "TEST", ActiveMQDestination.QUEUE_TYPE) });
0:         bridge.start();
1: 
1:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:     }
1: 
1:     public void testWildcardOnTwoExcludedDestination() throws Exception {
1: 
0:         bridge.setExcludedDestinations(new ActiveMQDestination[] {
0:                 ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
0:                 ActiveMQDestination.createDestination("TEST.X1", ActiveMQDestination.QUEUE_TYPE) });
0:         bridge.setDynamicallyIncludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination(
0:             "TEST.X2", ActiveMQDestination.QUEUE_TYPE) });
0:         bridge.start();
1: 
1:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:     }
1: 
1:     public void testWildcardOnDynamicallyIncludedDestination() throws Exception {
1: 
0:         bridge.setDynamicallyIncludedDestinations(new ActiveMQDestination[] {
0:                 ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.QUEUE_TYPE),
0:                 ActiveMQDestination.createDestination("TEST.X2", ActiveMQDestination.QUEUE_TYPE) });
0:         bridge.start();
1: 
1:         assertReceiveMessageOn("OTHER.X1", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveMessageOn("TEST.X2", ActiveMQDestination.QUEUE_TYPE);
1:     }
1: 
1:     public void testDistinctTopicAndQueue() throws Exception {
1: 
0:         bridge.setExcludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination(">",
0:             ActiveMQDestination.TOPIC_TYPE) });
0:         bridge.setDynamicallyIncludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination(
0:             ">", ActiveMQDestination.QUEUE_TYPE) });
0:         bridge.start();
1: 
1:         assertReceiveMessageOn("TEST", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("TEST", ActiveMQDestination.TOPIC_TYPE);
1:     }
1: 
1:     public void testListOfExcludedDestinationWithWildcard() throws Exception {
1: 
0:         bridge.setExcludedDestinations(new ActiveMQDestination[] {
0:                 ActiveMQDestination.createDestination("OTHER.>", ActiveMQDestination.TOPIC_TYPE),
0:                 ActiveMQDestination.createDestination("TEST.*", ActiveMQDestination.TOPIC_TYPE) });
1: 
0:         bridge.setDynamicallyIncludedDestinations(new ActiveMQDestination[] { ActiveMQDestination.createDestination(
0:             "TEST.X1", ActiveMQDestination.QUEUE_TYPE) });
1: 
0:         bridge.start();
1: 
1:         assertReceiveMessageOn("TEST.X1", ActiveMQDestination.QUEUE_TYPE);
1:         assertReceiveNoMessageOn("OTHER.T1", ActiveMQDestination.TOPIC_TYPE);
1:         assertReceiveNoMessageOn("OTHER.T2", ActiveMQDestination.TOPIC_TYPE);
1:     }
1: 
1:     private void assertReceiveMessageOn(String destinationName, byte destinationType) throws Exception,
1:             InterruptedException {
1: 
1:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1: 
1:         // Send the message to the local broker.
1:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1: 
1:         // Make sure the message was delivered via the remote.
1:         Message m = createConsumerAndReceiveMessage(destination);
1: 
1:         assertNotNull(m);
1:     }
1: 
1:     private void assertReceiveNoMessageOn(String destinationName, byte destinationType) throws Exception,
1:             InterruptedException {
1: 
1:         ActiveMQDestination destination = ActiveMQDestination.createDestination(destinationName, destinationType);
1: 
1:         // Send the message to the local broker.
1:         producerConnection.send(createMessage(producerInfo, destination, destinationType));
1: 
1:         // Make sure the message was delivered via the remote.
1:         Message m = createConsumerAndReceiveMessage(destination);
1:         assertNull(m);
1:     }
1: 
1:     private Message createConsumerAndReceiveMessage(ActiveMQDestination destination) throws Exception {
1:         // Now create remote consumer that should cause message to move to this
1:         // remote consumer.
1:         ConsumerInfo consumerInfo = createConsumerInfo(consumerSessionInfo, destination);
1:         consumerConnection.send(consumerInfo);
1: 
1:         Message m = receiveMessage(consumerConnection);
1:         return m;
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
0:         NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
0:         config.setBrokerName("local");
0:         config.setDispatchAsync(false);
0:         bridge = new DemandForwardingBridge(config, createTransport(), createRemoteTransport());
0:         bridge.setBrokerService(broker);
1: 
1:         producerConnection = createConnection();
1:         ConnectionInfo producerConnectionInfo = createConnectionInfo();
1:         SessionInfo producerSessionInfo = createSessionInfo(producerConnectionInfo);
1:         producerInfo = createProducerInfo(producerSessionInfo);
1:         producerConnection.send(producerConnectionInfo);
1:         producerConnection.send(producerSessionInfo);
1:         producerConnection.send(producerInfo);
1: 
1:         consumerConnection = createRemoteConnection();
1:         ConnectionInfo consumerConnectionInfo = createConnectionInfo();
1:         consumerSessionInfo = createSessionInfo(consumerConnectionInfo);
1:         consumerConnection.send(consumerConnectionInfo);
1:         consumerConnection.send(consumerSessionInfo);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         bridge.stop();
1:         super.tearDown();
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DemandForwardingBridgeFilterTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
============================================================================