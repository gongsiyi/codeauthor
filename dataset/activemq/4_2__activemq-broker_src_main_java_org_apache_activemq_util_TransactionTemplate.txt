1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
2:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.store.PersistenceAdapter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * A helper class for running code with a PersistenceAdapter in a transaction.
1:b0c2a40:  * 
1:f812e34:  * 
1:d29ca2a:  */
1:d29ca2a: public class TransactionTemplate {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransactionTemplate.class);
1:d29ca2a:     private PersistenceAdapter persistenceAdapter;
1:d29ca2a:     private ConnectionContext context;
1:d29ca2a: 
1:d29ca2a:     public TransactionTemplate(PersistenceAdapter persistenceAdapter, ConnectionContext context) {
1:d29ca2a:         this.persistenceAdapter = persistenceAdapter;
1:f812e34:         this.context = context;
6:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void run(Callback task) throws IOException {
1:d29ca2a:         persistenceAdapter.beginTransaction(context);
1:d29ca2a:         Throwable throwable = null;
1:d29ca2a:         try {
1:d29ca2a:             task.execute();
1:f812e34:         } catch (IOException t) {
1:d29ca2a:             throwable = t;
1:d29ca2a:             throw t;
1:f812e34:         } catch (RuntimeException t) {
1:d29ca2a:             throwable = t;
1:d29ca2a:             throw t;
1:f812e34:         } catch (Throwable t) {
1:d29ca2a:             throwable = t;
1:f812e34:             throw IOExceptionSupport.create("Persistence task failed: " + t, t);
1:d29ca2a:         } finally {
1:d29ca2a:             if (throwable == null) {
1:d29ca2a:                 persistenceAdapter.commitTransaction(context);
1:f812e34:             } else {
1:f812e34:                 LOG.error("Having to Rollback - caught an exception: " + throwable);
1:d29ca2a:                 persistenceAdapter.rollbackTransaction(context);
1:f812e34:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ConnectionContext getContext() {
1:d29ca2a:         return context;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public PersistenceAdapter getPersistenceAdapter() {
1:d29ca2a:         return persistenceAdapter;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TransactionTemplate.class);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A helper class for running code with a PersistenceAdapter in a transaction.
1:  * 
0:     static private final Log LOG = LogFactory.getLog(TransactionTemplate.class);
1:         this.context = context;
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException t) {
1:         } catch (RuntimeException t) {
1:         } catch (Throwable t) {
1:             throw IOExceptionSupport.create("Persistence task failed: " + t, t);
1:             } else {
1:                 LOG.error("Having to Rollback - caught an exception: " + throwable);
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.store.PersistenceAdapter;
1: 
1: /**
0:  * A helper class for running code with a PersistenceAdapter
0:  * in a transaction.
1:  *
0:  * @version $Revision: 1.2 $
1:  */
1: public class TransactionTemplate {
1:     private PersistenceAdapter persistenceAdapter;
1:     private ConnectionContext context;
1: 
1:     public TransactionTemplate(PersistenceAdapter persistenceAdapter, ConnectionContext context) {
1:         this.persistenceAdapter = persistenceAdapter;
0:         this.context=context;
1:     }
1: 
1:     public void run(Callback task) throws IOException {
1:         persistenceAdapter.beginTransaction(context);
1:         Throwable throwable = null;
1:         try {
1:             task.execute();
1:         }
0:         catch (IOException t) {
1:             throwable = t;
1:             throw t;
1:         }
0:         catch (RuntimeException t) {
1:             throwable = t;
1:             throw t;
1:         }
0:         catch (Throwable t) {
1:             throwable = t;
0:             throw IOExceptionSupport.create("Persistence task failed: "+t, t);
1:         } finally {
1:             if (throwable == null) {
1:                 persistenceAdapter.commitTransaction(context);
1:             }
0:             else {
1:                 persistenceAdapter.rollbackTransaction(context);
1:             }            
1:         }
1:     }
1: 
1:     public ConnectionContext getContext() {
1:         return context;
1:     }
1: 
1:     public PersistenceAdapter getPersistenceAdapter() {
1:         return persistenceAdapter;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransactionTemplate.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:7b317ba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     static private final Log log=LogFactory.getLog(TransactionTemplate.class);
/////////////////////////////////////////////////////////////////////////
0:                 log.error("Having to Rollback - caught an exception: " + throwable);
============================================================================