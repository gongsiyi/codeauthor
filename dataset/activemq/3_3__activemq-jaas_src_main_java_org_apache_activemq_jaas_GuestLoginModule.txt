1:d3ec081: /**
1:d3ec081:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d3ec081:  * contributor license agreements.  See the NOTICE file distributed with
1:d3ec081:  * this work for additional information regarding copyright ownership.
1:d3ec081:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d3ec081:  * (the "License"); you may not use this file except in compliance with
1:d3ec081:  * the License.  You may obtain a copy of the License at
1:d3ec081:  *
1:d3ec081:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d3ec081:  *
1:d3ec081:  * Unless required by applicable law or agreed to in writing, software
1:d3ec081:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d3ec081:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d3ec081:  * See the License for the specific language governing permissions and
1:d3ec081:  * limitations under the License.
1:d3ec081:  */
5:d3ec081: 
1:d3ec081: package org.apache.activemq.jaas;
1:d3ec081: 
1:69f5605: import java.io.IOException;
1:d3ec081: import java.security.Principal;
1:d3ec081: import java.util.HashSet;
1:d3ec081: import java.util.Map;
1:d3ec081: import java.util.Set;
1:69f5605: import javax.security.auth.Subject;
1:69f5605: import javax.security.auth.callback.Callback;
1:69f5605: import javax.security.auth.callback.CallbackHandler;
1:69f5605: import javax.security.auth.callback.PasswordCallback;
1:69f5605: import javax.security.auth.callback.UnsupportedCallbackException;
1:69f5605: import javax.security.auth.login.LoginException;
1:69f5605: import javax.security.auth.spi.LoginModule;
1:69f5605: import org.slf4j.Logger;
1:69f5605: import org.slf4j.LoggerFactory;
1:d3ec081: 
1:d3ec081: /**
1:d3ec081:  * Always login the user with a default 'guest' identity.
1:d3ec081:  *
1:d3ec081:  * Useful for unauthenticated communication channels being used in the
1:d3ec081:  * same broker as authenticated ones.
1:d3ec081:  * 
1:d3ec081:  */
1:d3ec081: public class GuestLoginModule implements LoginModule {
1:d3ec081: 
1:d3ec081:     private static final String GUEST_USER = "org.apache.activemq.jaas.guest.user";
1:d3ec081:     private static final String GUEST_GROUP = "org.apache.activemq.jaas.guest.group";
1:d3ec081: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(GuestLoginModule.class);
1:d3ec081:     
1:d3ec081: 
1:d3ec081:     private String userName = "guest";
1:d3ec081:     private String groupName = "guests";
1:d3ec081:     private Subject subject;
1:d3ec081:     private boolean debug;
1:69f5605:     private boolean credentialsInvalidate;
1:d3ec081:     private Set<Principal> principals = new HashSet<Principal>();
1:69f5605:     private CallbackHandler callbackHandler;
1:69f5605:     private boolean loginSucceeded;
1:d3ec081: 
1:1667d80:     @Override
1:d3ec081:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:d3ec081:         this.subject = subject;
1:69f5605:         this.callbackHandler = callbackHandler;
1:d3ec081:         debug = "true".equalsIgnoreCase((String)options.get("debug"));
1:69f5605:         credentialsInvalidate = "true".equalsIgnoreCase((String)options.get("credentialsInvalidate"));
1:d3ec081:         if (options.get(GUEST_USER) != null) {
1:d3ec081:             userName = (String)options.get(GUEST_USER);
2:d3ec081:         }
1:d3ec081:         if (options.get(GUEST_GROUP) != null) {
1:d3ec081:             groupName = (String)options.get(GUEST_GROUP);
1:d3ec081:         }
1:d3ec081:         principals.add(new UserPrincipal(userName));
1:d3ec081:         principals.add(new GroupPrincipal(groupName));
1:d3ec081:         
1:d3ec081:         if (debug) {
1:d3ec081:             LOG.debug("Initialized debug=" + debug + " guestUser=" + userName + " guestGroup=" + groupName);
1:d3ec081:         }
1:d3ec081: 
1:d3ec081:     }
1:d3ec081: 
1:1667d80:     @Override
1:d3ec081:     public boolean login() throws LoginException {
1:69f5605:         loginSucceeded = true;
1:69f5605:         if (credentialsInvalidate) {
1:69f5605:             PasswordCallback passwordCallback = new PasswordCallback("Password: ", false);
1:69f5605:             try {
1:69f5605:                  callbackHandler.handle(new Callback[]{passwordCallback});
1:69f5605:                  if (passwordCallback.getPassword() != null) {
1:69f5605:                      if (debug) {
1:69f5605:                         LOG.debug("Guest login failing (credentialsInvalidate=true) on presence of a password");
1:69f5605:                      }
1:69f5605:                      loginSucceeded = false;
1:69f5605:                      passwordCallback.clearPassword();
1:69f5605:                  };
1:69f5605:              } catch (IOException ioe) {
1:69f5605:              } catch (UnsupportedCallbackException uce) {
1:69f5605:              }
1:69f5605:         }
1:d3ec081:         if (debug) {
1:69f5605:             LOG.debug("Guest login " + loginSucceeded);
1:69f5605:         }
1:69f5605:         return loginSucceeded;
1:d3ec081:     }
1:d3ec081: 
1:1667d80:     @Override
1:d3ec081:     public boolean commit() throws LoginException {
1:69f5605:         if (loginSucceeded) {
1:69f5605:             subject.getPrincipals().addAll(principals);
1:69f5605:         }
1:d3ec081: 
1:d3ec081:         if (debug) {
1:d3ec081:             LOG.debug("commit");
1:d3ec081:         }
1:69f5605:         return loginSucceeded;
1:d3ec081:     }
1:d3ec081: 
1:1667d80:     @Override
1:d3ec081:     public boolean abort() throws LoginException {
1:d3ec081: 
1:d3ec081:         if (debug) {
1:d3ec081:             LOG.debug("abort");
1:d3ec081:         }
1:69f5605:         return true;
1:69f5605:     }
1:d3ec081: 
1:1667d80:     @Override
1:d3ec081:     public boolean logout() throws LoginException {
1:d3ec081:         subject.getPrincipals().removeAll(principals);
1:d3ec081: 
1:d3ec081:         if (debug) {
1:d3ec081:             LOG.debug("logout");
1:8bf987b:         }
2:d3ec081:         return true;
1:d3ec081:     }
1:d3ec081: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:1667d80
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:69f5605
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.Callback;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.callback.PasswordCallback;
1: import javax.security.auth.callback.UnsupportedCallbackException;
1: import javax.security.auth.login.LoginException;
1: import javax.security.auth.spi.LoginModule;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private boolean credentialsInvalidate;
1:     private CallbackHandler callbackHandler;
1:     private boolean loginSucceeded;
1:         this.callbackHandler = callbackHandler;
1:         credentialsInvalidate = "true".equalsIgnoreCase((String)options.get("credentialsInvalidate"));
/////////////////////////////////////////////////////////////////////////
1:         loginSucceeded = true;
1:         if (credentialsInvalidate) {
1:             PasswordCallback passwordCallback = new PasswordCallback("Password: ", false);
1:             try {
1:                  callbackHandler.handle(new Callback[]{passwordCallback});
1:                  if (passwordCallback.getPassword() != null) {
1:                      if (debug) {
1:                         LOG.debug("Guest login failing (credentialsInvalidate=true) on presence of a password");
1:                      }
1:                      loginSucceeded = false;
1:                      passwordCallback.clearPassword();
1:                  };
1:              } catch (IOException ioe) {
1:              } catch (UnsupportedCallbackException uce) {
1:              }
1:         }
1:             LOG.debug("Guest login " + loginSucceeded);
1:         }
1:         return loginSucceeded;
1:         if (loginSucceeded) {
1:             subject.getPrincipals().addAll(principals);
1:         }
1:         return loginSucceeded;
/////////////////////////////////////////////////////////////////////////
1:         return true;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(GuestLoginModule.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d3ec081
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.jaas;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.security.auth.Subject;
0: import javax.security.auth.callback.CallbackHandler;
0: import javax.security.auth.login.LoginException;
0: import javax.security.auth.spi.LoginModule;
1: import java.security.Principal;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: /**
1:  * Always login the user with a default 'guest' identity.
1:  *
1:  * Useful for unauthenticated communication channels being used in the
1:  * same broker as authenticated ones.
1:  * 
1:  */
1: public class GuestLoginModule implements LoginModule {
1: 
1:     private static final String GUEST_USER = "org.apache.activemq.jaas.guest.user";
1:     private static final String GUEST_GROUP = "org.apache.activemq.jaas.guest.group";
1: 
0:     private static final Log LOG = LogFactory.getLog(GuestLoginModule.class);
1:     
1: 
1:     private String userName = "guest";
1:     private String groupName = "guests";
1:     private Subject subject;
1:     private boolean debug;
1:     private Set<Principal> principals = new HashSet<Principal>();
1: 
1: 
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:         this.subject = subject;
1: 
1:         debug = "true".equalsIgnoreCase((String)options.get("debug"));
1:         if (options.get(GUEST_USER) != null) {
1:             userName = (String)options.get(GUEST_USER);
1:         }
1:         if (options.get(GUEST_GROUP) != null) {
1:             groupName = (String)options.get(GUEST_GROUP);
1:         }
1:         principals.add(new UserPrincipal(userName));
1:         principals.add(new GroupPrincipal(groupName));
1:         
1:         if (debug) {
1:             LOG.debug("Initialized debug=" + debug + " guestUser=" + userName + " guestGroup=" + groupName);
1:         }
1: 
1:     }
1: 
1:     public boolean login() throws LoginException {
1: 
1:         if (debug) {
0:             LOG.debug("login " + userName);
0:         }return true;
1:     }
1: 
1:     public boolean commit() throws LoginException {
0:         subject.getPrincipals().addAll(principals);
1: 
1:         if (debug) {
1:             LOG.debug("commit");
1:         }
1:         return true;
1:     }
1: 
1:     public boolean abort() throws LoginException {
1: 
1:         if (debug) {
1:             LOG.debug("abort");
1:         }
0:         return true;    }
1: 
1:     public boolean logout() throws LoginException {
1:         subject.getPrincipals().removeAll(principals);
1: 
1:         if (debug) {
1:             LOG.debug("logout");
1:         }
1:         return true;
1:     }
1: }
============================================================================