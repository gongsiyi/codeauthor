1:3306467: /**
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
1:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
1:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
1:3306467: 
1:3306467: import org.apache.activemq.command.ActiveMQDestination;
1:0dd806f: import org.apache.activemq.command.LocalTransactionId;
1:3306467: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:3306467: import org.apache.qpid.proton.engine.Delivery;
1:3306467: 
1:3306467: /**
1:3306467:  * Interface used to define the operations needed to implement an AMQP
1:3306467:  * Link based endpoint, i.e. Sender, Receiver or Coordinator.
1:3306467:  */
1:3306467: public interface AmqpLink extends AmqpResource {
1:3306467: 
1:3306467:     /**
1:3306467:      * Close the Link with an error indicating the reson for the close.
1:3306467:      *
1:3306467:      * @param error
1:3306467:      *        the error that prompted the close.
1:3306467:      */
1:3306467:     void close(ErrorCondition error);
1:3306467: 
1:3306467:     /**
1:3306467:      * Request from the remote peer to detach this resource.
1:3306467:      */
1:3306467:     void detach();
1:3306467: 
1:3306467:     /**
1:3306467:      * Handles an incoming flow control.
1:3306467:      *
1:3306467:      * @throws Excption if an error occurs during the flow processing.
1:3306467:      */
1:3306467:     void flow() throws Exception;
1:3306467: 
1:3306467:     /**
1:3306467:      * Called when a new Delivery arrives for the given Link.
1:3306467:      *
1:3306467:      * @param delivery
1:3306467:      *        the newly arrived delivery on this link.
1:3306467:      *
1:3306467:      * @throws Exception if an error occurs while processing the new Delivery.
1:3306467:      */
1:3306467:     void delivery(Delivery delivery) throws Exception;
1:3306467: 
1:3306467:     /**
1:3306467:      * Handle work necessary on commit of transacted resources associated with
1:3306467:      * this Link instance.
1:3306467:      *
1:0dd806f:      * @param txnId
1:0dd806f:      *      The Transaction ID being committed.
1:0dd806f:      *
1:3306467:      * @throws Exception if an error occurs while performing the commit.
1:3306467:      */
1:0dd806f:     void commit(LocalTransactionId txnId) throws Exception;
1:3306467: 
1:3306467:     /**
1:3306467:      * Handle work necessary on rollback of transacted resources associated with
1:3306467:      * this Link instance.
1:3306467:      *
1:0dd806f:      * @param txnId
1:0dd806f:      *      The Transaction ID being rolled back.
1:0dd806f:      *
1:3306467:      * @throws Exception if an error occurs while performing the rollback.
1:3306467:      */
1:0dd806f:     void rollback(LocalTransactionId txnId) throws Exception;
1:3306467: 
1:3306467:     /**
1:3306467:      * @return the ActiveMQDestination that this link is servicing.
1:3306467:      */
1:3306467:     public ActiveMQDestination getDestination();
1:3306467: 
1:3306467:     /**
1:3306467:      * Sets the ActiveMQDestination that this link will be servicing.
1:3306467:      *
1:3306467:      * @param destination
1:3306467:      *        the ActiveMQDestination that this link services.
1:3306467:      */
1:3306467:     public void setDestination(ActiveMQDestination destination);
1:3306467: 
1:3306467:     /**
1:3306467:      * Adds a new Runnable that is called on close of this link.
1:3306467:      *
1:3306467:      * @param action
1:3306467:      *        a Runnable that will be executed when the link closes or detaches.
1:3306467:      */
1:3306467:     public void addCloseAction(Runnable action);
1:3306467: 
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0dd806f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.LocalTransactionId;
/////////////////////////////////////////////////////////////////////////
1:      * @param txnId
1:      *      The Transaction ID being committed.
1:      *
1:     void commit(LocalTransactionId txnId) throws Exception;
1:      * @param txnId
1:      *      The Transaction ID being rolled back.
1:      *
1:     void rollback(LocalTransactionId txnId) throws Exception;
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: import org.apache.qpid.proton.engine.Delivery;
1: 
1: /**
1:  * Interface used to define the operations needed to implement an AMQP
1:  * Link based endpoint, i.e. Sender, Receiver or Coordinator.
1:  */
1: public interface AmqpLink extends AmqpResource {
1: 
1:     /**
1:      * Close the Link with an error indicating the reson for the close.
1:      *
1:      * @param error
1:      *        the error that prompted the close.
1:      */
1:     void close(ErrorCondition error);
1: 
1:     /**
1:      * Request from the remote peer to detach this resource.
1:      */
1:     void detach();
1: 
1:     /**
1:      * Handles an incoming flow control.
1:      *
1:      * @throws Excption if an error occurs during the flow processing.
1:      */
1:     void flow() throws Exception;
1: 
1:     /**
1:      * Called when a new Delivery arrives for the given Link.
1:      *
1:      * @param delivery
1:      *        the newly arrived delivery on this link.
1:      *
1:      * @throws Exception if an error occurs while processing the new Delivery.
1:      */
1:     void delivery(Delivery delivery) throws Exception;
1: 
1:     /**
1:      * Handle work necessary on commit of transacted resources associated with
1:      * this Link instance.
1:      *
1:      * @throws Exception if an error occurs while performing the commit.
1:      */
0:     void commit() throws Exception;
1: 
1:     /**
1:      * Handle work necessary on rollback of transacted resources associated with
1:      * this Link instance.
1:      *
1:      * @throws Exception if an error occurs while performing the rollback.
1:      */
0:     void rollback() throws Exception;
1: 
1:     /**
1:      * @return the ActiveMQDestination that this link is servicing.
1:      */
1:     public ActiveMQDestination getDestination();
1: 
1:     /**
1:      * Sets the ActiveMQDestination that this link will be servicing.
1:      *
1:      * @param destination
1:      *        the ActiveMQDestination that this link services.
1:      */
1:     public void setDestination(ActiveMQDestination destination);
1: 
1:     /**
1:      * Adds a new Runnable that is called on close of this link.
1:      *
1:      * @param action
1:      *        a Runnable that will be executed when the link closes or detaches.
1:      */
1:     public void addCloseAction(Runnable action);
1: 
1: }
============================================================================