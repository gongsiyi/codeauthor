1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d84e052:  *
1:d84e052:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d84e052:  *
1:d84e052:  * Unless required by applicable law or agreed to in writing, software
1:d84e052:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d84e052:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d84e052:  * See the License for the specific language governing permissions and
1:d84e052:  * limitations under the License.
1:d84e052:  */
1:d84e052: package org.apache.activemq.broker.view;
13:d84e052: 
1:f812e34: import java.io.PrintWriter;
1:f812e34: import java.util.Collection;
1:f812e34: import java.util.Iterator;
1:d84e052: import org.apache.activemq.broker.Broker;
1:d84e052: import org.apache.activemq.broker.ConnectionContext;
1:d84e052: import org.apache.activemq.broker.region.Destination;
1:d84e052: import org.apache.activemq.command.ActiveMQDestination;
1:d84e052: import org.apache.activemq.filter.DestinationMap;
1:d84e052: import org.apache.activemq.filter.DestinationMapNode;
1:f812e34: 
1:d84e052: /**
1:b0c2a40:  * 
1:d84e052:  */
1:4ba19ca: public class DestinationDotFileInterceptor extends DotFileInterceptorSupport {
1:d84e052: 
1:d84e052:     protected static final String ID_SEPARATOR = "_";
1:d84e052: 
1:d84e052:     public DestinationDotFileInterceptor(Broker next, String file) {
1:4ba19ca:         super(next, file);
7:d84e052:     }
1:4ba19ca: 
1:204f91f:     @Override
1:204f91f:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
1:204f91f:         Destination answer = super.addDestination(context, destination,create);
1:4ba19ca:         generateFile();
2:d84e052:         return answer;
1:5bed19f:     }
1:d84e052: 
1:204f91f:     @Override
1:f812e34:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1:d84e052:         super.removeDestination(context, destination, timeout);
1:4ba19ca:         generateFile();
1:d84e052:     }
1:d84e052: 
1:204f91f:     @Override
1:4ba19ca:     protected void generateFile(PrintWriter writer) throws Exception {
1:d84e052:         ActiveMQDestination[] destinations = getDestinations();
1:d84e052: 
1:d84e052:         // lets split into a tree
1:d84e052:         DestinationMap map = new DestinationMap();
1:d84e052: 
1:d84e052:         for (int i = 0; i < destinations.length; i++) {
1:d84e052:             ActiveMQDestination destination = destinations[i];
1:d84e052:             map.put(destination, destination);
1:d84e052:         }
1:d84e052: 
1:d84e052:         // now lets navigate the tree
1:d84e052:         writer.println("digraph \"ActiveMQ Destinations\" {");
2:d84e052:         writer.println();
1:d84e052:         writer.println("node [style = \"rounded,filled\", fontname=\"Helvetica-Oblique\"];");
1:d84e052:         writer.println();
1:d84e052:         writer.println("topic_root [fillcolor = deepskyblue, label = \"Topics\" ];");
1:d84e052:         writer.println("queue_root [fillcolor = deepskyblue, label = \"Queues\" ];");
1:d84e052:         writer.println();
1:f812e34: 
1:d84e052:         writer.println("subgraph queues {");
1:d84e052:         writer.println("  node [fillcolor=red];     ");
1:d84e052:         writer.println("  label = \"Queues\"");
1:d84e052:         writer.println();
1:d84e052:         printNodeLinks(writer, map.getQueueRootNode(), "queue");
1:d84e052:         writer.println("}");
1:d84e052:         writer.println();
1:d84e052: 
1:789789f:         writer.println("subgraph temp queues {");
1:789789f:         writer.println("  node [fillcolor=red];     ");
1:789789f:         writer.println("  label = \"TempQueues\"");
1:789789f:         writer.println();
1:789789f:         printNodeLinks(writer, map.getTempQueueRootNode(), "tempqueue");
1:789789f:         writer.println("}");
1:789789f:         writer.println();
1:789789f: 
1:d84e052:         writer.println("subgraph topics {");
1:d84e052:         writer.println("  node [fillcolor=green];     ");
1:d84e052:         writer.println("  label = \"Topics\"");
1:f812e34:         writer.println();
1:d84e052:         printNodeLinks(writer, map.getTopicRootNode(), "topic");
1:d84e052:         writer.println("}");
1:d84e052:         writer.println();
1:f812e34: 
1:789789f:         writer.println("subgraph temp topics {");
1:789789f:         writer.println("  node [fillcolor=green];     ");
1:789789f:         writer.println("  label = \"TempTopics\"");
1:789789f:         writer.println();
1:789789f:         printNodeLinks(writer, map.getTempTopicRootNode(), "temptopic");
1:789789f:         writer.println("}");
1:789789f:         writer.println();
1:789789f: 
1:d84e052:         printNodes(writer, map.getQueueRootNode(), "queue");
1:d84e052:         writer.println();
1:f812e34: 
1:789789f:         printNodes(writer, map.getTempQueueRootNode(), "tempqueue");
1:789789f:         writer.println();
1:789789f: 
1:d84e052:         printNodes(writer, map.getTopicRootNode(), "topic");
1:d84e052:         writer.println();
1:f812e34: 
1:789789f:         printNodes(writer, map.getTempTopicRootNode(), "temptopic");
1:789789f:         writer.println();
1:f812e34: 
1:d84e052:         writer.println("}");
1:d84e052:     }
1:789789f: 
1:d84e052:     protected void printNodes(PrintWriter writer, DestinationMapNode node, String prefix) {
1:d84e052:         String path = getPath(node);
1:d84e052:         writer.print("  ");
1:d84e052:         writer.print(prefix);
1:d84e052:         writer.print(ID_SEPARATOR);
1:d84e052:         writer.print(path);
1:d84e052:         String label = path;
1:d84e052:         if (prefix.equals("topic")) {
1:d84e052:             label = "Topics";
1:f812e34:         } else if (prefix.equals("queue")) {
1:d84e052:             label = "Queues";
1:d84e052:         }
1:d84e052:         writer.print("[ label = \"");
1:d84e052:         writer.print(label);
1:d84e052:         writer.println("\" ];");
1:d84e052: 
1:d84e052:         Collection children = node.getChildren();
1:d84e052:         for (Iterator iter = children.iterator(); iter.hasNext();) {
1:f812e34:             DestinationMapNode child = (DestinationMapNode)iter.next();
1:d84e052:             printNodes(writer, child, prefix + ID_SEPARATOR + path);
1:d84e052:         }
1:d84e052:     }
1:d84e052: 
1:d84e052:     protected void printNodeLinks(PrintWriter writer, DestinationMapNode node, String prefix) {
1:d84e052:         String path = getPath(node);
1:d84e052:         Collection children = node.getChildren();
1:d84e052:         for (Iterator iter = children.iterator(); iter.hasNext();) {
1:f812e34:             DestinationMapNode child = (DestinationMapNode)iter.next();
1:d84e052: 
1:d84e052:             writer.print("  ");
1:d84e052:             writer.print(prefix);
1:d84e052:             writer.print(ID_SEPARATOR);
1:d84e052:             writer.print(path);
1:d84e052:             writer.print(" -> ");
1:d84e052:             writer.print(prefix);
1:d84e052:             writer.print(ID_SEPARATOR);
1:d84e052:             writer.print(path);
1:d84e052:             writer.print(ID_SEPARATOR);
1:d84e052:             writer.print(getPath(child));
1:d84e052:             writer.println(";");
1:d84e052: 
1:d84e052:             printNodeLinks(writer, child, prefix + ID_SEPARATOR + path);
1:d84e052:         }
1:d84e052:     }
1:d84e052: 
1:d84e052:     protected String getPath(DestinationMapNode node) {
1:d84e052:         String path = node.getPath();
1:d84e052:         if (path.equals("*")) {
1:d84e052:             return "root";
1:d84e052:         }
1:d84e052:         return path;
1:d84e052:     }
1:d84e052: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.io.PrintWriter;
1: import java.util.Collection;
1: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         writer.println();
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         } else if (prefix.equals("queue")) {
/////////////////////////////////////////////////////////////////////////
1:             DestinationMapNode child = (DestinationMapNode)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             DestinationMapNode child = (DestinationMapNode)iter.next();
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:789789f
/////////////////////////////////////////////////////////////////////////
1:         writer.println("subgraph temp queues {");
1:         writer.println("  node [fillcolor=red];     ");
1:         writer.println("  label = \"TempQueues\"");
1:         writer.println();
1:         printNodeLinks(writer, map.getTempQueueRootNode(), "tempqueue");
1:         writer.println("}");
1:         writer.println();
1: 
/////////////////////////////////////////////////////////////////////////
1:         writer.println("subgraph temp topics {");
1:         writer.println("  node [fillcolor=green];     ");
1:         writer.println("  label = \"TempTopics\"");
1:         writer.println();
1:         printNodeLinks(writer, map.getTempTopicRootNode(), "temptopic");
1:         writer.println("}");
1:         writer.println();
1: 
1:         printNodes(writer, map.getTempQueueRootNode(), "tempqueue");
1:         writer.println();
1: 
1:         printNodes(writer, map.getTempTopicRootNode(), "temptopic");
1:         writer.println();
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
1:         Destination answer = super.addDestination(context, destination,create);
1:     @Override
1:     @Override
author:James Strachan
-------------------------------------------------------------------------------
commit:d1a18f5
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4ba19ca
/////////////////////////////////////////////////////////////////////////
1: public class DestinationDotFileInterceptor extends DotFileInterceptorSupport {
1:         super(next, file);
1:         
1:         generateFile();
1:         generateFile();
1:     protected void generateFile(PrintWriter writer) throws Exception {
commit:5bed19f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(DestinationDotFileInterceptor.class);
0:     private String file;
/////////////////////////////////////////////////////////////////////////
0:         if (log.isDebugEnabled()) {
0:             log.debug("Creating destination DOT file at: " + file);
1:         }
commit:d84e052
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.view;
1: 
1: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.filter.DestinationMapNode;
1: 
0: import java.io.FileWriter;
0: import java.io.PrintWriter;
0: import java.util.Collection;
0: import java.util.Iterator;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
0: public class DestinationDotFileInterceptor extends BrokerFilter {
1: 
1:     protected static final String ID_SEPARATOR = "_";
1:     
0:     private String file = "ActiveMQDestinations.dot";
1: 
1:     public DestinationDotFileInterceptor(Broker next, String file) {
0:         super(next);
1:     }
1: 
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
0:         Subscription answer = super.addConsumer(context, info);
0:         //generateDestinationGraph();
1:         return answer;
1:     }
1: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         Destination answer = super.addDestination(context, destination);
0:         generateDestinationGraph();
1:         return answer;
1:     }
1: 
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
0:             throws Exception {
1:         super.removeDestination(context, destination, timeout);
0:         generateDestinationGraph();
1:     }
1: 
0:     protected void generateDestinationGraph() throws Exception {
0:         System.out.println("Autogenerating file: " + file);
0:         PrintWriter writer = new PrintWriter(new FileWriter(file));
0:         try {
0:             generateDestinationGraph(writer);
1:         }
0:         finally {
0:             writer.close();
1:         }
1:     }
1: 
0:     protected void generateDestinationGraph(PrintWriter writer) throws Exception {
1:         ActiveMQDestination[] destinations = getDestinations();
1: 
1:         // lets split into a tree
1:         DestinationMap map = new DestinationMap();
1: 
1:         for (int i = 0; i < destinations.length; i++) {
1:             ActiveMQDestination destination = destinations[i];
1:             map.put(destination, destination);
1:         }
1: 
1:         // now lets navigate the tree
1:         writer.println("digraph \"ActiveMQ Destinations\" {");
1:         writer.println();
1:         writer.println("node [style = \"rounded,filled\", fontname=\"Helvetica-Oblique\"];");
1:         writer.println();
1:         writer.println("topic_root [fillcolor = deepskyblue, label = \"Topics\" ];");
1:         writer.println("queue_root [fillcolor = deepskyblue, label = \"Queues\" ];");
1:         writer.println();
1:         
1:         writer.println("subgraph queues {");
1:         writer.println("  node [fillcolor=red];     ");
1:         writer.println("  label = \"Queues\"");
1:         writer.println();
1:         printNodeLinks(writer, map.getQueueRootNode(), "queue");
1:         writer.println("}");
1:         writer.println();
1: 
1:         writer.println("subgraph topics {");
1:         writer.println("  node [fillcolor=green];     ");
1:         writer.println("  label = \"Topics\"");
1:         writer.println();            
1:         printNodeLinks(writer, map.getTopicRootNode(), "topic");
1:         writer.println("}");
1:         writer.println();
1:         
1:         printNodes(writer, map.getQueueRootNode(), "queue");
1:         writer.println();
1:         
1:         printNodes(writer, map.getTopicRootNode(), "topic");
1:         writer.println();
1:         
1:         writer.println("}");
1:     }
1:     
1:     protected void printNodes(PrintWriter writer, DestinationMapNode node, String prefix) {
1:         String path = getPath(node);
1:         writer.print("  ");
1:         writer.print(prefix);
1:         writer.print(ID_SEPARATOR);
1:         writer.print(path);
1:         String label = path;
1:         if (prefix.equals("topic")) {
1:             label = "Topics";
1:         }
0:         else if (prefix.equals("queue")) {
1:             label = "Queues";
1:         }
1:         writer.print("[ label = \"");
1:         writer.print(label);
1:         writer.println("\" ];");
1: 
1:         Collection children = node.getChildren();
1:         for (Iterator iter = children.iterator(); iter.hasNext();) {
0:             DestinationMapNode child = (DestinationMapNode) iter.next();
1:             printNodes(writer, child, prefix + ID_SEPARATOR + path);
1:         }
1:     }
1: 
1:     protected void printNodeLinks(PrintWriter writer, DestinationMapNode node, String prefix) {
1:         String path = getPath(node);
1:         Collection children = node.getChildren();
1:         for (Iterator iter = children.iterator(); iter.hasNext();) {
0:             DestinationMapNode child = (DestinationMapNode) iter.next();
1: 
1:             writer.print("  ");
1:             writer.print(prefix);
1:             writer.print(ID_SEPARATOR);
1:             writer.print(path);
1:             writer.print(" -> ");
1:             writer.print(prefix);
1:             writer.print(ID_SEPARATOR);
1:             writer.print(path);
1:             writer.print(ID_SEPARATOR);
1:             writer.print(getPath(child));
1:             writer.println(";");
1: 
1:             printNodeLinks(writer, child, prefix + ID_SEPARATOR + path);
1:         }
1:     }
1: 
1: 
1:     protected String getPath(DestinationMapNode node) {
1:         String path = node.getPath();
1:         if (path.equals("*")) {
1:             return "root";
1:         }
1:         return path;
1:     }
1: }
============================================================================