1:d427952: /**
1:d427952:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d427952:  * contributor license agreements.  See the NOTICE file distributed with
1:d427952:  * this work for additional information regarding copyright ownership.
1:d427952:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d427952:  * (the "License"); you may not use this file except in compliance with
1:d427952:  * the License.  You may obtain a copy of the License at
1:d427952:  *
1:d427952:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d427952:  *
1:d427952:  * Unless required by applicable law or agreed to in writing, software
1:d427952:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d427952:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d427952:  * See the License for the specific language governing permissions and
1:d427952:  * limitations under the License.
1:d427952:  */
1:d427952: package org.apache.activemq.store.kahadb.disk.journal;
3:d427952: 
1:71bb54f: import static org.junit.Assert.assertEquals;
1:71bb54f: 
1:71bb54f: import java.io.File;
1:71bb54f: 
1:d427952: import org.jmock.Expectations;
1:d427952: import org.jmock.Mockery;
1:d427952: import org.jmock.lib.legacy.ClassImposteriser;
1:d427952: import org.junit.Before;
1:71bb54f: import org.junit.Rule;
1:d427952: import org.junit.Test;
1:71bb54f: import org.junit.rules.TemporaryFolder;
1:d427952: 
1:d427952: public class DataFileAccessorPoolTest {
1:d427952:     private Mockery context;
1:d427952: 
1:71bb54f:     @Rule
1:71bb54f:     public TemporaryFolder temporaryFolder = new TemporaryFolder();
1:71bb54f: 
1:d427952:     @Before
1:d427952:     public void setUp() throws Exception {
1:d427952:         context = new Mockery() {
1:d427952:             {
1:d427952:                 setImposteriser(ClassImposteriser.INSTANCE);
1:d427952:             }
1:d427952:         };
1:d427952:     }
1:d427952: 
1:d427952:     @Test
1:d427952:     public void disposeUnused() throws Exception {
1:d427952: 
1:d427952:         final Journal journal = context.mock(Journal.class);
1:d427952: 
1:d427952:         DataFileAccessorPool underTest = new DataFileAccessorPool(journal);
1:d427952: 
1:d427952:         context.checking(new Expectations(){{exactly(1).of(journal).getInflightWrites();}});
1:d427952: 
1:71bb54f:         DataFile dataFile = new DataFile(new File(temporaryFolder.getRoot(), "aa"), 1);
1:d427952:         underTest.closeDataFileAccessor(underTest.openDataFileAccessor(dataFile));
1:d427952: 
1:d427952:         assertEquals("one in the pool", 1, underTest.size());
1:d427952:         underTest.disposeUnused();
1:d427952: 
1:d427952:         assertEquals("0 in the pool", 0, underTest.size());
1:d427952: 
1:d427952:         context.assertIsSatisfied();
1:d427952:     }
1:d427952: 
1:d427952: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:71bb54f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: 
1: import org.junit.Rule;
1: import org.junit.rules.TemporaryFolder;
1:     @Rule
1:     public TemporaryFolder temporaryFolder = new TemporaryFolder();
1: 
/////////////////////////////////////////////////////////////////////////
1:         DataFile dataFile = new DataFile(new File(temporaryFolder.getRoot(), "aa"), 1);
author:gtully
-------------------------------------------------------------------------------
commit:d427952
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.disk.journal;
1: 
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
1: import org.jmock.lib.legacy.ClassImposteriser;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.io.File;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
1: public class DataFileAccessorPoolTest {
1:     private Mockery context;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         context = new Mockery() {
1:             {
1:                 setImposteriser(ClassImposteriser.INSTANCE);
1:             }
1:         };
1:     }
1: 
1:     @Test
1:     public void disposeUnused() throws Exception {
1: 
1:         final Journal journal = context.mock(Journal.class);
1: 
1:         DataFileAccessorPool underTest = new DataFileAccessorPool(journal);
1: 
1:         context.checking(new Expectations(){{exactly(1).of(journal).getInflightWrites();}});
1: 
0:         DataFile dataFile = new DataFile(new File("aa"), 1);
1:         underTest.closeDataFileAccessor(underTest.openDataFileAccessor(dataFile));
1: 
1:         assertEquals("one in the pool", 1, underTest.size());
1:         underTest.disposeUnused();
1: 
1:         assertEquals("0 in the pool", 0, underTest.size());
1: 
1:         context.assertIsSatisfied();
1:     }
1: 
1: }
============================================================================