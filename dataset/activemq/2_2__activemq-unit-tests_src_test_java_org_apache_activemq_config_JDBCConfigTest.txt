1:fc519e1: /**
1:fc519e1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc519e1:  * contributor license agreements.  See the NOTICE file distributed with
1:fc519e1:  * this work for additional information regarding copyright ownership.
1:fc519e1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc519e1:  * (the "License"); you may not use this file except in compliance with
1:fc519e1:  * the License.  You may obtain a copy of the License at
1:fc519e1:  *
1:fc519e1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc519e1:  *
1:fc519e1:  * Unless required by applicable law or agreed to in writing, software
1:fc519e1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc519e1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc519e1:  * See the License for the specific language governing permissions and
1:fc519e1:  * limitations under the License.
1:fc519e1:  */
1:856e506: package org.apache.activemq.config;
1:856e506: 
1:856e506: import static org.junit.Assert.assertEquals;
1:856e506: import static org.junit.Assert.assertTrue;
1:856e506: 
1:856e506: import java.io.File;
1:856e506: 
1:856e506: import org.apache.activemq.broker.BrokerService;
1:856e506: import org.apache.activemq.store.PersistenceAdapter;
1:856e506: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:856e506: import org.apache.activemq.wireformat.ObjectStreamWireFormat;
1:856e506: import org.apache.activemq.xbean.BrokerFactoryBean;
1:856e506: import org.apache.derby.jdbc.EmbeddedDataSource;
1:856e506: import org.junit.Test;
1:856e506: import org.slf4j.Logger;
1:856e506: import org.slf4j.LoggerFactory;
1:856e506: import org.springframework.core.io.ClassPathResource;
1:856e506: import org.springframework.core.io.FileSystemResource;
1:856e506: import org.springframework.core.io.Resource;
1:856e506: 
1:856e506: public class JDBCConfigTest {
1:856e506: 
1:856e506:     protected static final String JOURNAL_ROOT = "target/test-data/";
1:856e506:     protected static final String DERBY_ROOT = "target/test-data/";
1:856e506:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/config/sample-conf/";
1:856e506:     private static final Logger LOG = LoggerFactory.getLogger(JDBCConfigTest.class);
1:856e506: 
1:856e506:     /*
1:856e506:      * This tests creating a jdbc persistence adapter using xbeans-spring
1:856e506:      */
1:856e506:     @Test
1:856e506:     public void testJdbcConfig() throws Exception {
1:856e506:         File journalFile = new File(JOURNAL_ROOT + "testJDBCConfig/journal");
1:856e506:         recursiveDelete(journalFile);
1:856e506: 
1:856e506:         File derbyFile = new File(DERBY_ROOT + "testJDBCConfig/derbydb"); // Default
1:856e506:         recursiveDelete(derbyFile);
1:856e506: 
1:856e506:         BrokerService broker;
1:856e506:         broker = createBroker(new FileSystemResource(CONF_ROOT + "jdbc-example.xml"));
1:856e506:         try {
1:856e506:             assertEquals("Broker Config Error (brokerName)", "brokerJdbcConfigTest", broker.getBrokerName());
1:856e506: 
1:856e506:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1:856e506: 
1:856e506:             assertTrue("Should have created a jdbc persistence adapter", adapter instanceof JDBCPersistenceAdapter);
1:856e506:             assertEquals("JDBC Adapter Config Error (cleanupPeriod)", 60000, ((JDBCPersistenceAdapter) adapter).getCleanupPeriod());
1:856e506:             assertTrue("Should have created an EmbeddedDataSource", ((JDBCPersistenceAdapter) adapter).getDataSource() instanceof EmbeddedDataSource);
1:856e506:             assertTrue("Should have created a DefaultWireFormat", ((JDBCPersistenceAdapter) adapter).getWireFormat() instanceof ObjectStreamWireFormat);
1:856e506: 
1:856e506:             LOG.info("Success");
1:856e506:         } finally {
1:856e506:             if (broker != null) {
1:856e506:                 broker.stop();
1:856e506:             }
1:856e506:         }
1:856e506:     }
1:856e506: 
1:856e506:     protected static void recursiveDelete(File file) {
1:856e506:         if (file.isDirectory()) {
1:856e506:             File[] files = file.listFiles();
1:856e506:             for (int i = 0; i < files.length; i++) {
1:856e506:                 recursiveDelete(files[i]);
1:856e506:             }
1:856e506:         }
1:856e506:         file.delete();
1:856e506:     }
1:856e506: 
1:856e506:     protected BrokerService createBroker(String resource) throws Exception {
1:856e506:         return createBroker(new ClassPathResource(resource));
1:856e506:     }
1:856e506: 
1:856e506:     protected BrokerService createBroker(Resource resource) throws Exception {
1:856e506:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:856e506:         factory.afterPropertiesSet();
1:856e506: 
1:856e506:         BrokerService broker = factory.getBroker();
1:856e506: 
1:856e506:         assertTrue("Should have a broker!", broker != null);
1:856e506: 
1:856e506:         // Broker is already started by default when using the XML file
1:856e506:         // broker.start();
1:856e506: 
1:856e506:         return broker;
1:856e506:     }
1:856e506: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc519e1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:856e506
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.config;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.wireformat.ObjectStreamWireFormat;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.FileSystemResource;
1: import org.springframework.core.io.Resource;
1: 
1: public class JDBCConfigTest {
1: 
1:     protected static final String JOURNAL_ROOT = "target/test-data/";
1:     protected static final String DERBY_ROOT = "target/test-data/";
1:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/config/sample-conf/";
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCConfigTest.class);
1: 
1:     /*
1:      * This tests creating a jdbc persistence adapter using xbeans-spring
1:      */
1:     @Test
1:     public void testJdbcConfig() throws Exception {
1:         File journalFile = new File(JOURNAL_ROOT + "testJDBCConfig/journal");
1:         recursiveDelete(journalFile);
1: 
1:         File derbyFile = new File(DERBY_ROOT + "testJDBCConfig/derbydb"); // Default
1:         recursiveDelete(derbyFile);
1: 
1:         BrokerService broker;
1:         broker = createBroker(new FileSystemResource(CONF_ROOT + "jdbc-example.xml"));
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerJdbcConfigTest", broker.getBrokerName());
1: 
1:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1: 
1:             assertTrue("Should have created a jdbc persistence adapter", adapter instanceof JDBCPersistenceAdapter);
1:             assertEquals("JDBC Adapter Config Error (cleanupPeriod)", 60000, ((JDBCPersistenceAdapter) adapter).getCleanupPeriod());
1:             assertTrue("Should have created an EmbeddedDataSource", ((JDBCPersistenceAdapter) adapter).getDataSource() instanceof EmbeddedDataSource);
1:             assertTrue("Should have created a DefaultWireFormat", ((JDBCPersistenceAdapter) adapter).getWireFormat() instanceof ObjectStreamWireFormat);
1: 
1:             LOG.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     protected static void recursiveDelete(File file) {
1:         if (file.isDirectory()) {
1:             File[] files = file.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         file.delete();
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1: 
1:         BrokerService broker = factory.getBroker();
1: 
1:         assertTrue("Should have a broker!", broker != null);
1: 
1:         // Broker is already started by default when using the XML file
1:         // broker.start();
1: 
1:         return broker;
1:     }
1: }
============================================================================