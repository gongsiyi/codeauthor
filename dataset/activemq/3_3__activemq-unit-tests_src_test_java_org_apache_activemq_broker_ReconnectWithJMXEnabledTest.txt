1:3cd3fd3: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
3:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:3cd3fd3:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:3cd3fd3: package org.apache.activemq.broker;
2:3cd3fd3: 
1:3cd3fd3: import javax.jms.Connection;
1:7a46a1c: import javax.jms.ConnectionFactory;
1:3cd3fd3: import javax.jms.Destination;
1:3cd3fd3: import javax.jms.Message;
1:3cd3fd3: import javax.jms.MessageConsumer;
1:3cd3fd3: import javax.jms.MessageProducer;
1:3cd3fd3: import javax.jms.Session;
1:3cd3fd3: 
1:7a46a1c: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:74a7a8b: 
1:3cd3fd3: /**
1:7a46a1c:  *
1:7a46a1c:  *
1:3cd3fd3:  */
1:3cd3fd3: public class ReconnectWithJMXEnabledTest extends EmbeddedBrokerTestSupport {
1:3cd3fd3: 
1:3cd3fd3:     protected Connection connection;
1:3cd3fd3:     protected boolean transacted;
1:3cd3fd3:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1:3cd3fd3: 
1:3cd3fd3:     public void testTestUseConnectionCloseBrokerThenRestartInSameJVM() throws Exception {
1:3cd3fd3:         connection = connectionFactory.createConnection();
1:3cd3fd3:         useConnection(connection);
1:3cd3fd3:         connection.close();
1:3cd3fd3: 
1:3cd3fd3:         broker.stop();
1:3cd3fd3:         broker = createBroker();
1:3cd3fd3:         startBroker();
1:3cd3fd3: 
1:7a46a1c:         connectionFactory = createConnectionFactory();
1:3cd3fd3:         connection = connectionFactory.createConnection();
1:3cd3fd3:         useConnection(connection);
1:3cd3fd3:     }
1:3cd3fd3: 
1:3cd3fd3:     protected void setUp() throws Exception {
1:7a46a1c:         bindAddress = "tcp://localhost:0";
1:3cd3fd3:         super.setUp();
1:3cd3fd3:     }
1:3cd3fd3: 
1:7a46a1c:     @Override
1:7a46a1c:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:7a46a1c:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:7a46a1c:     }
1:7a46a1c: 
1:3cd3fd3:     protected void tearDown() throws Exception {
1:3cd3fd3:         if (connection != null) {
1:3cd3fd3:             connection.close();
1:3cd3fd3:             connection = null;
1:3cd3fd3:         }
1:3cd3fd3:         super.tearDown();
1:3cd3fd3:     }
1:3cd3fd3: 
1:3cd3fd3:     protected BrokerService createBroker() throws Exception {
1:3cd3fd3:         BrokerService answer = new BrokerService();
1:3cd3fd3:         answer.setUseJmx(true);
1:3cd3fd3:         answer.setPersistent(isPersistent());
1:3cd3fd3:         answer.addConnector(bindAddress);
1:3cd3fd3:         return answer;
1:3cd3fd3:     }
1:3cd3fd3: 
1:3cd3fd3:     protected void useConnection(Connection connection) throws Exception {
1:3cd3fd3:         connection.setClientID("foo");
1:3cd3fd3:         connection.start();
1:3cd3fd3:         Session session = connection.createSession(transacted, authMode);
1:3cd3fd3:         Destination destination = createDestination();
1:3cd3fd3:         MessageConsumer consumer = session.createConsumer(destination);
1:3cd3fd3:         MessageProducer producer = session.createProducer(destination);
1:3cd3fd3:         Message message = session.createTextMessage("Hello World");
1:3cd3fd3:         producer.send(message);
1:3cd3fd3:         Thread.sleep(1000);
1:7a46a1c:         consumer.close();
1:3cd3fd3:     }
1:3cd3fd3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:7a46a1c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:         connectionFactory = createConnectionFactory();
1:         bindAddress = "tcp://localhost:0";
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         consumer.close();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:3cd3fd3
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class ReconnectWithJMXEnabledTest extends EmbeddedBrokerTestSupport {
1: 
1:     protected Connection connection;
1:     protected boolean transacted;
1:     protected int authMode = Session.AUTO_ACKNOWLEDGE;
1: 
1:     public void testTestUseConnectionCloseBrokerThenRestartInSameJVM() throws Exception {
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1:         connection.close();
1: 
1:         broker.stop();
1:         broker = createBroker();
1:         startBroker();
1: 
1:         connection = connectionFactory.createConnection();
1:         useConnection(connection);
1:     }
1: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:61616";
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(true);
1:         answer.setPersistent(isPersistent());
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     protected void useConnection(Connection connection) throws Exception {
1:         connection.setClientID("foo");
1:         connection.start();
1:         Session session = connection.createSession(transacted, authMode);
1:         Destination destination = createDestination();
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         Message message = session.createTextMessage("Hello World");
1:         producer.send(message);
1:         Thread.sleep(1000);
1:     }
1: }
============================================================================