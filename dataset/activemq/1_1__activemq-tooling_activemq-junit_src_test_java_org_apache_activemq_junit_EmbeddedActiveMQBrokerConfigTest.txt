1:da3b138: /*
1:da3b138:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:da3b138:  * contributor license agreements.  See the NOTICE file distributed with
1:da3b138:  * this work for additional information regarding copyright ownership.
1:da3b138:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:da3b138:  * (the "License"); you may not use this file except in compliance with
1:da3b138:  * the License.  You may obtain a copy of the License at
1:da3b138:  *
1:da3b138:  *      http://www.apache.org/licenses/LICENSE-2.0
1:da3b138:  *
1:da3b138:  * Unless required by applicable law or agreed to in writing, software
1:da3b138:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da3b138:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da3b138:  * See the License for the specific language governing permissions and
1:da3b138:  * limitations under the License.
1:da3b138:  */
1:da3b138: package org.apache.activemq.junit;
1:da3b138: 
1:da3b138: import org.junit.Before;
1:da3b138: import org.junit.Test;
1:da3b138: 
1:da3b138: import static org.junit.Assert.*;
1:da3b138: 
1:da3b138: /**
1:da3b138:  * Verify the get/set operations are working properly
1:da3b138:  */
1:da3b138: public class EmbeddedActiveMQBrokerConfigTest {
1:da3b138: 
1:da3b138:     // Don't use @Rule in this case - just testing getters/setters
1:da3b138:     EmbeddedActiveMQBroker instance;
1:da3b138: 
1:da3b138:     @Before
1:da3b138:     public void setUp() throws Exception {
1:da3b138:         instance = new EmbeddedActiveMQBroker();
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testGetVmURL() throws Exception {
1:da3b138:         assertEquals( "Default VM URL in incorrect", "failover:(vm://embedded-broker?create=false)", instance.getVmURL());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testGetBrokerName() throws Exception {
1:da3b138:         assertEquals( "Default Broker Name in incorrect", "embedded-broker", instance.getBrokerName());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testBrokerNameConfig() throws Exception {
1:da3b138:         String dummyName = "test-broker-name";
1:da3b138: 
1:da3b138:         instance.setBrokerName( dummyName);
1:da3b138: 
1:da3b138:         assertEquals( "Broker Name not set correctly", dummyName, instance.getBrokerName());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testStatisticsPluginConfig() throws Exception {
1:da3b138:         assertFalse( "Statistics plugin should not be enabled by default", instance.isStatisticsPluginEnabled());
1:da3b138:         instance.enableStatisticsPlugin();
1:da3b138:         assertTrue( "Statistics plugin not enabled", instance.isStatisticsPluginEnabled());
1:da3b138:         instance.disableStatisticsPlugin();
1:da3b138:         assertFalse( "Statistics plugin not disabled", instance.isStatisticsPluginEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testAdvisoryForDeliveryConfig() throws Exception {
1:da3b138:         assertFalse( "Advisory messages for delivery should not be enabled by default", instance.isAdvisoryForDeliveryEnabled());
1:da3b138:         instance.enableAdvisoryForDelivery();
1:da3b138:         assertTrue( "Advisory messages for delivery not enabled", instance.isAdvisoryForDeliveryEnabled());
1:da3b138:         instance.disableAdvisoryForDelivery();
1:da3b138:         assertFalse( "Advisory messages for delivery not disabled", instance.isAdvisoryForDeliveryEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testAdvisoryForConsumedConfig() throws Exception {
1:da3b138:         assertFalse( "Advisory messages for consumed should not be enabled by default", instance.isAdvisoryForConsumedEnabled());
1:da3b138:         instance.enableAdvisoryForConsumed();
1:da3b138:         assertTrue( "Advisory messages for consumed not enabled", instance.isAdvisoryForConsumedEnabled());
1:da3b138:         instance.disableAdvisoryForConsumed();
1:da3b138:         assertFalse( "Advisory messages for consumed not disabled", instance.isAdvisoryForConsumedEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testAdvisoryForDiscardingMessagesConfig() throws Exception {
1:da3b138:         assertFalse( "Advisory messages for discarding messages should not be enabled by default", instance.isAdvisoryForDiscardingMessagesEnabled());
1:da3b138:         instance.enableAdvisoryForDiscardingMessages();
1:da3b138:         assertTrue( "Advisory messages for discarding messages not enabled", instance.isAdvisoryForDiscardingMessagesEnabled());
1:da3b138:         instance.disableAdvisoryForDiscardingMessages();
1:da3b138:         assertFalse( "Advisory messages for discarding messages not disabled", instance.isAdvisoryForDiscardingMessagesEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testAdvisoryForFastProducersConfig() throws Exception {
1:da3b138:         assertFalse( "Advisory messages for fast producers should not be enabled by default", instance.isAdvisoryForFastProducersEnabled());
1:da3b138:         instance.enableAdvisoryForFastProducers();
1:da3b138:         assertTrue( "Advisory messages for fast producers not enabled", instance.isAdvisoryForFastProducersEnabled());
1:da3b138:         instance.disableAdvisoryForFastProducers();
1:da3b138:         assertFalse( "Advisory messages for fast producers not disabled", instance.isAdvisoryForFastProducersEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138:     @Test
1:da3b138:     public void testAdvisoryForSlowConsumersConfig() throws Exception {
1:da3b138:         assertFalse( "Advisory messages for slow consumers should not be enabled by default", instance.isAdvisoryForSlowConsumersEnabled());
1:da3b138:         instance.enableAdvisoryForSlowConsumers();
1:da3b138:         assertTrue( "Advisory messages for slow consumers not enabled", instance.isAdvisoryForSlowConsumersEnabled());
1:da3b138:         instance.disableAdvisoryForSlowConsumers();
1:da3b138:         assertFalse( "Advisory messages for slow consumers not disabled", instance.isAdvisoryForSlowConsumersEnabled());
1:da3b138:     }
1:da3b138: 
1:da3b138: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:da3b138
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * Verify the get/set operations are working properly
1:  */
1: public class EmbeddedActiveMQBrokerConfigTest {
1: 
1:     // Don't use @Rule in this case - just testing getters/setters
1:     EmbeddedActiveMQBroker instance;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         instance = new EmbeddedActiveMQBroker();
1:     }
1: 
1:     @Test
1:     public void testGetVmURL() throws Exception {
1:         assertEquals( "Default VM URL in incorrect", "failover:(vm://embedded-broker?create=false)", instance.getVmURL());
1:     }
1: 
1:     @Test
1:     public void testGetBrokerName() throws Exception {
1:         assertEquals( "Default Broker Name in incorrect", "embedded-broker", instance.getBrokerName());
1:     }
1: 
1:     @Test
1:     public void testBrokerNameConfig() throws Exception {
1:         String dummyName = "test-broker-name";
1: 
1:         instance.setBrokerName( dummyName);
1: 
1:         assertEquals( "Broker Name not set correctly", dummyName, instance.getBrokerName());
1:     }
1: 
1:     @Test
1:     public void testStatisticsPluginConfig() throws Exception {
1:         assertFalse( "Statistics plugin should not be enabled by default", instance.isStatisticsPluginEnabled());
1:         instance.enableStatisticsPlugin();
1:         assertTrue( "Statistics plugin not enabled", instance.isStatisticsPluginEnabled());
1:         instance.disableStatisticsPlugin();
1:         assertFalse( "Statistics plugin not disabled", instance.isStatisticsPluginEnabled());
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForDeliveryConfig() throws Exception {
1:         assertFalse( "Advisory messages for delivery should not be enabled by default", instance.isAdvisoryForDeliveryEnabled());
1:         instance.enableAdvisoryForDelivery();
1:         assertTrue( "Advisory messages for delivery not enabled", instance.isAdvisoryForDeliveryEnabled());
1:         instance.disableAdvisoryForDelivery();
1:         assertFalse( "Advisory messages for delivery not disabled", instance.isAdvisoryForDeliveryEnabled());
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForConsumedConfig() throws Exception {
1:         assertFalse( "Advisory messages for consumed should not be enabled by default", instance.isAdvisoryForConsumedEnabled());
1:         instance.enableAdvisoryForConsumed();
1:         assertTrue( "Advisory messages for consumed not enabled", instance.isAdvisoryForConsumedEnabled());
1:         instance.disableAdvisoryForConsumed();
1:         assertFalse( "Advisory messages for consumed not disabled", instance.isAdvisoryForConsumedEnabled());
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForDiscardingMessagesConfig() throws Exception {
1:         assertFalse( "Advisory messages for discarding messages should not be enabled by default", instance.isAdvisoryForDiscardingMessagesEnabled());
1:         instance.enableAdvisoryForDiscardingMessages();
1:         assertTrue( "Advisory messages for discarding messages not enabled", instance.isAdvisoryForDiscardingMessagesEnabled());
1:         instance.disableAdvisoryForDiscardingMessages();
1:         assertFalse( "Advisory messages for discarding messages not disabled", instance.isAdvisoryForDiscardingMessagesEnabled());
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForFastProducersConfig() throws Exception {
1:         assertFalse( "Advisory messages for fast producers should not be enabled by default", instance.isAdvisoryForFastProducersEnabled());
1:         instance.enableAdvisoryForFastProducers();
1:         assertTrue( "Advisory messages for fast producers not enabled", instance.isAdvisoryForFastProducersEnabled());
1:         instance.disableAdvisoryForFastProducers();
1:         assertFalse( "Advisory messages for fast producers not disabled", instance.isAdvisoryForFastProducersEnabled());
1:     }
1: 
1:     @Test
1:     public void testAdvisoryForSlowConsumersConfig() throws Exception {
1:         assertFalse( "Advisory messages for slow consumers should not be enabled by default", instance.isAdvisoryForSlowConsumersEnabled());
1:         instance.enableAdvisoryForSlowConsumers();
1:         assertTrue( "Advisory messages for slow consumers not enabled", instance.isAdvisoryForSlowConsumersEnabled());
1:         instance.disableAdvisoryForSlowConsumers();
1:         assertFalse( "Advisory messages for slow consumers not disabled", instance.isAdvisoryForSlowConsumersEnabled());
1:     }
1: 
1: }
============================================================================