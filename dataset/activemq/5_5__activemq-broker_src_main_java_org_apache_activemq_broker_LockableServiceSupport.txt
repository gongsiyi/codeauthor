1:170b86a: /**
1:170b86a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:170b86a:  * contributor license agreements.  See the NOTICE file distributed with
1:170b86a:  * this work for additional information regarding copyright ownership.
1:170b86a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:170b86a:  * (the "License"); you may not use this file except in compliance with
1:170b86a:  * the License.  You may obtain a copy of the License at
1:170b86a:  *
1:170b86a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:170b86a:  *
1:170b86a:  * Unless required by applicable law or agreed to in writing, software
1:170b86a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:170b86a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:170b86a:  * See the License for the specific language governing permissions and
1:170b86a:  * limitations under the License.
1:170b86a:  */
1:170b86a: package org.apache.activemq.broker;
1:170b86a: 
1:170b86a: import org.apache.activemq.store.PersistenceAdapter;
1:170b86a: import org.apache.activemq.util.ServiceStopper;
1:170b86a: import org.apache.activemq.util.ServiceSupport;
1:170b86a: import org.apache.activemq.util.ThreadPoolUtils;
1:170b86a: import org.slf4j.Logger;
1:170b86a: import org.slf4j.LoggerFactory;
1:170b86a: 
1:170b86a: import java.io.IOException;
1:170b86a: import java.util.concurrent.ScheduledFuture;
1:170b86a: import java.util.concurrent.ScheduledThreadPoolExecutor;
1:170b86a: import java.util.concurrent.ThreadFactory;
1:170b86a: import java.util.concurrent.TimeUnit;
1:170b86a: 
1:170b86a: /**
1:170b86a:  * Helper class for working with services that requires locking
1:170b86a:  */
1:170b86a: public abstract class LockableServiceSupport extends ServiceSupport implements Lockable, BrokerServiceAware {
1:170b86a: 
1:170b86a:     private static final Logger LOG = LoggerFactory.getLogger(LockableServiceSupport.class);
1:170b86a:     boolean useLock = true;
1:170b86a:     Locker locker;
1:170b86a:     long lockKeepAlivePeriod = 0;
1:170b86a:     private ScheduledFuture<?> keepAliveTicket;
1:bc3587c:     protected ScheduledThreadPoolExecutor clockDaemon;
1:90beb3f:     protected BrokerService brokerService;
1:170b86a: 
1:170b86a:     /**
1:170b86a:      * Initialize resources before locking
1:170b86a:      *
1:170b86a:      * @throws Exception
1:170b86a:      */
1:170b86a:     abstract public void init() throws Exception;
1:170b86a: 
1:170b86a:     @Override
1:170b86a:     public void setUseLock(boolean useLock) {
1:170b86a:         this.useLock = useLock;
2:170b86a:     }
1:170b86a: 
1:0f90695:     public boolean isUseLock() {
1:0f90695:         return this.useLock;
1:0f90695:     }
1:0f90695: 
1:170b86a:     @Override
1:170b86a:     public void setLocker(Locker locker) throws IOException {
1:170b86a:         this.locker = locker;
1:efaa351:         locker.setLockable(this);
1:170b86a:         if (this instanceof PersistenceAdapter) {
1:170b86a:             this.locker.configure((PersistenceAdapter)this);
1:170b86a:         }
1:170b86a:     }
1:170b86a: 
1:170b86a:     public Locker getLocker() throws IOException {
1:170b86a:         if (this.locker == null) {
1:efaa351:             setLocker(createDefaultLocker());
1:170b86a:         }
1:170b86a:         return this.locker;
1:170b86a:     }
1:170b86a: 
1:170b86a:     @Override
1:170b86a:     public void setLockKeepAlivePeriod(long lockKeepAlivePeriod) {
1:170b86a:         this.lockKeepAlivePeriod = lockKeepAlivePeriod;
1:170b86a:     }
1:170b86a: 
1:170b86a:     @Override
1:ef1d254:     public long getLockKeepAlivePeriod() {
1:ef1d254:         return lockKeepAlivePeriod;
1:ef1d254:     }
1:ef1d254: 
1:ef1d254:     @Override
1:170b86a:     public void preStart() throws Exception {
1:170b86a:         init();
1:170b86a:         if (useLock) {
1:170b86a:             if (getLocker() == null) {
1:170b86a:                 LOG.warn("No locker configured");
1:170b86a:             } else {
1:170b86a:                 getLocker().start();
1:170b86a:                 if (lockKeepAlivePeriod > 0) {
1:170b86a:                     keepAliveTicket = getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable() {
1:170b86a:                         public void run() {
1:170b86a:                             keepLockAlive();
1:170b86a:                         }
1:170b86a:                     }, lockKeepAlivePeriod, lockKeepAlivePeriod, TimeUnit.MILLISECONDS);
1:170b86a:                 }
1:170b86a:             }
1:170b86a:         }
1:170b86a:     }
1:170b86a: 
1:170b86a:     @Override
1:170b86a:     public void postStop(ServiceStopper stopper) throws Exception {
1:170b86a:         if (useLock) {
1:170b86a:             if (keepAliveTicket != null) {
1:170b86a:                 keepAliveTicket.cancel(false);
1:170b86a:                 keepAliveTicket = null;
1:170b86a:             }
1:170b86a:             if (locker != null) {
1:170b86a:                 getLocker().stop();
1:17f4f34:                 locker = null;
1:170b86a:             }
1:170b86a:         }
1:bc3587c:         ThreadPoolUtils.shutdown(clockDaemon);
1:bc3587c:         clockDaemon = null;
1:170b86a:     }
1:170b86a: 
1:170b86a:     protected void keepLockAlive() {
1:170b86a:         boolean stop = false;
1:170b86a:         try {
1:170b86a:             Locker locker = getLocker();
1:170b86a:             if (locker != null) {
1:170b86a:                 if (!locker.keepAlive()) {
1:170b86a:                     stop = true;
1:170b86a:                 }
1:170b86a:             }
1:29b90b5:         } catch (SuppressReplyException e) {
1:29b90b5:             LOG.warn("locker keepAlive resulted in", e);
1:170b86a:         } catch (IOException e) {
1:e1bbde7:             LOG.warn("locker keepAlive resulted in", e);
1:170b86a:         }
1:170b86a:         if (stop) {
1:170b86a:             stopBroker();
1:170b86a:         }
1:170b86a:     }
1:170b86a: 
1:170b86a:     protected void stopBroker() {
1:170b86a:         // we can no longer keep the lock so lets fail
1:e1bbde7:         LOG.error("{}, no longer able to keep the exclusive lock so giving up being a master", brokerService.getBrokerName());
1:170b86a:         try {
1:4a16c1f:             if( brokerService.isRestartAllowed() ) {
1:4a16c1f:                 brokerService.requestRestart();
1:4a16c1f:             }
1:170b86a:             brokerService.stop();
1:170b86a:         } catch (Exception e) {
1:170b86a:             LOG.warn("Failure occurred while stopping broker");
1:170b86a:         }
1:170b86a:     }
1:170b86a: 
1:170b86a:     public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {
1:170b86a:         if (clockDaemon == null) {
1:170b86a:             clockDaemon = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
1:170b86a:                 public Thread newThread(Runnable runnable) {
1:170b86a:                     Thread thread = new Thread(runnable, "ActiveMQ Lock KeepAlive Timer");
1:170b86a:                     thread.setDaemon(true);
1:170b86a:                     return thread;
1:170b86a:                 }
1:170b86a:             });
1:170b86a:         }
1:170b86a:         return clockDaemon;
1:170b86a:     }
1:170b86a: 
1:bc3587c:     public void setScheduledThreadPoolExecutor(ScheduledThreadPoolExecutor clockDaemon) {
1:bc3587c:         this.clockDaemon = clockDaemon;
1:bc3587c:     }
1:bc3587c: 
1:170b86a:     @Override
1:170b86a:     public void setBrokerService(BrokerService brokerService) {
1:170b86a:         this.brokerService = brokerService;
1:170b86a:     }
1:efaa351: 
1:efaa351:     public BrokerService getBrokerService() {
1:efaa351:         return this.brokerService;
1:efaa351:     }
1:170b86a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:17f4f34
/////////////////////////////////////////////////////////////////////////
1:                 locker = null;
commit:bc3587c
/////////////////////////////////////////////////////////////////////////
1:     protected ScheduledThreadPoolExecutor clockDaemon;
/////////////////////////////////////////////////////////////////////////
1:         ThreadPoolUtils.shutdown(clockDaemon);
1:         clockDaemon = null;
/////////////////////////////////////////////////////////////////////////
1:     public void setScheduledThreadPoolExecutor(ScheduledThreadPoolExecutor clockDaemon) {
1:         this.clockDaemon = clockDaemon;
1:     }
1: 
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1:         locker.setLockable(this);
/////////////////////////////////////////////////////////////////////////
1:             setLocker(createDefaultLocker());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public BrokerService getBrokerService() {
1:         return this.brokerService;
1:     }
commit:0f90695
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseLock() {
1:         return this.useLock;
1:     }
1: 
commit:29b90b5
/////////////////////////////////////////////////////////////////////////
1:         } catch (SuppressReplyException e) {
1:             LOG.warn("locker keepAlive resulted in", e);
commit:74b35bc
/////////////////////////////////////////////////////////////////////////
0:         LOG.error(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master");
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("locker keepAlive resulted in", e);
/////////////////////////////////////////////////////////////////////////
1:         LOG.error("{}, no longer able to keep the exclusive lock so giving up being a master", brokerService.getBrokerName());
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("locker keepAlive resulted in: " + e, e);
commit:ef1d254
/////////////////////////////////////////////////////////////////////////
1:     public long getLockKeepAlivePeriod() {
1:         return lockKeepAlivePeriod;
1:     }
1: 
1:     @Override
commit:69d8258
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4a16c1f
/////////////////////////////////////////////////////////////////////////
1:             if( brokerService.isRestartAllowed() ) {
1:                 brokerService.requestRestart();
1:             }
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:90beb3f
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService brokerService;
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.ServiceSupport;
1: import org.apache.activemq.util.ThreadPoolUtils;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.io.IOException;
1: import java.util.concurrent.ScheduledFuture;
1: import java.util.concurrent.ScheduledThreadPoolExecutor;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Helper class for working with services that requires locking
1:  */
1: public abstract class LockableServiceSupport extends ServiceSupport implements Lockable, BrokerServiceAware {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(LockableServiceSupport.class);
1:     boolean useLock = true;
1:     Locker locker;
1:     long lockKeepAlivePeriod = 0;
1:     private ScheduledFuture<?> keepAliveTicket;
0:     private ScheduledThreadPoolExecutor clockDaemon;
0:     private BrokerService brokerService;
1: 
1:     /**
1:      * Initialize resources before locking
1:      *
1:      * @throws Exception
1:      */
1:     abstract public void init() throws Exception;
1: 
1:     @Override
1:     public void setUseLock(boolean useLock) {
1:         this.useLock = useLock;
1:     }
1: 
1:     @Override
1:     public void setLocker(Locker locker) throws IOException {
1:         this.locker = locker;
1:         if (this instanceof PersistenceAdapter) {
1:             this.locker.configure((PersistenceAdapter)this);
1:         }
1:     }
1: 
1:     public Locker getLocker() throws IOException {
1:         if (this.locker == null) {
0:             this.locker = createDefaultLocker();
1:         }
1:         return this.locker;
1:     }
1: 
1:     @Override
1:     public void setLockKeepAlivePeriod(long lockKeepAlivePeriod) {
1:         this.lockKeepAlivePeriod = lockKeepAlivePeriod;
1:     }
1: 
1:     @Override
1:     public void preStart() throws Exception {
1:         init();
1:         if (useLock) {
1:             if (getLocker() == null) {
1:                 LOG.warn("No locker configured");
1:             } else {
1:                 getLocker().start();
1:                 if (lockKeepAlivePeriod > 0) {
1:                     keepAliveTicket = getScheduledThreadPoolExecutor().scheduleAtFixedRate(new Runnable() {
1:                         public void run() {
1:                             keepLockAlive();
1:                         }
1:                     }, lockKeepAlivePeriod, lockKeepAlivePeriod, TimeUnit.MILLISECONDS);
1:                 }
0:                 if (brokerService != null) {
0:                     brokerService.getBroker().nowMasterBroker();
1:                 }
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void postStop(ServiceStopper stopper) throws Exception {
1:         if (useLock) {
1:             if (keepAliveTicket != null) {
1:                 keepAliveTicket.cancel(false);
1:                 keepAliveTicket = null;
1:             }
1:             if (locker != null) {
1:                 getLocker().stop();
1:             }
0:             ThreadPoolUtils.shutdown(clockDaemon);
1:         }
1:     }
1: 
1:     protected void keepLockAlive() {
1:         boolean stop = false;
1:         try {
1:             Locker locker = getLocker();
1:             if (locker != null) {
1:                 if (!locker.keepAlive()) {
1:                     stop = true;
1:                 }
1:             }
1:         } catch (IOException e) {
0:             LOG.warn("locker keepalive resulted in: " + e, e);
1:         }
1:         if (stop) {
1:             stopBroker();
1:         }
1:     }
1: 
1:     protected void stopBroker() {
1:         // we can no longer keep the lock so lets fail
0:         LOG.info(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master");
1:         try {
1:             brokerService.stop();
1:         } catch (Exception e) {
1:             LOG.warn("Failure occurred while stopping broker");
1:         }
1:     }
1: 
1:     public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {
1:         if (clockDaemon == null) {
1:             clockDaemon = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
1:                 public Thread newThread(Runnable runnable) {
1:                     Thread thread = new Thread(runnable, "ActiveMQ Lock KeepAlive Timer");
1:                     thread.setDaemon(true);
1:                     return thread;
1:                 }
1:             });
1:         }
1:         return clockDaemon;
1:     }
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: }
============================================================================