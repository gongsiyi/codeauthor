3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:ea1dad7:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:ea1dad7:  */
1:d29ca2a: package org.apache.activemq.spring;
4:ea1dad7: 
1:ea1dad7: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:ea1dad7: 
1:67310ad: public class SpringTest extends SpringTestSupport {
1:ea1dad7: 
1:ea1dad7:     /**
1:d29ca2a:      * Uses ActiveMQConnectionFactory to create the connection context.
1:d29ca2a:      * Configuration file is /resources/spring.xml
1:d29ca2a:      *
1:ea1dad7:      * @throws Exception
3:d29ca2a:      */
1:d29ca2a:     public void testSenderWithSpringXml() throws Exception {
1:d29ca2a:         String config = "spring.xml";
1:d29ca2a:         assertSenderConfig(config);
1:ea1dad7:     }
1:ea1dad7: 
1:ec09a75:     /**
1:d29ca2a:      * Spring configured test that uses ActiveMQConnectionFactory for
1:d29ca2a:      * connection context and ActiveMQQueue for destination. Configuration
1:d29ca2a:      * file is /resources/spring-queue.xml.
1:ec09a75:      *
1:ec09a75:      * @throws Exception
1:ec09a75:      */
1:d29ca2a:     public void testSenderWithSpringXmlAndQueue() throws Exception {
1:d29ca2a:         String config = "spring-queue.xml";
1:d29ca2a:         assertSenderConfig(config);
6:d29ca2a:     }
1:ea1dad7: 
1:d29ca2a:     /**
1:d29ca2a:      * Spring configured test that uses JNDI. Configuration file is
1:d29ca2a:      * /resources/spring-jndi.xml.
1:d29ca2a:      *
3:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSenderWithSpringXmlUsingJNDI() throws Exception {
1:d29ca2a:         String config = "spring-jndi.xml";
1:d29ca2a:         assertSenderConfig(config);
1:d29ca2a:     }
1:ea1dad7: 
1:d29ca2a:     /**
1:d29ca2a:      * Spring configured test where in the connection context is set to use
1:d29ca2a:      * an embedded broker. Configuration file is /resources/spring-embedded.xml
1:d29ca2a:      * and /resources/activemq.xml.
1:d29ca2a:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSenderWithSpringXmlEmbeddedBrokerConfiguredViaXml() throws Exception {
1:d29ca2a:         String config = "spring-embedded.xml";
1:d29ca2a:         assertSenderConfig(config);
1:d29ca2a:     }
1:ea1dad7: 
1:d29ca2a:     /**
1:8786dbf:      * Spring configured test case that tests the remotely deployed xsd
1:800cab1:      * http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-SNAPSHOT.xsd
1:d29ca2a:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:6b03bd3:     public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {
1:6b03bd3:         String config = "spring-embedded-xbean.xml";
1:6b03bd3:         assertSenderConfig(config);
1:d29ca2a:     }
1:ea1dad7: 
1:d29ca2a:     /**
1:8786dbf:      * Spring configured test case that tests the locally generated xsd
1:d29ca2a:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:8786dbf:     public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXmlUsingLocalXsd() throws Exception {
1:8786dbf:         String config = "spring-embedded-xbean-local.xml";
1:8786dbf:         assertSenderConfig(config);
1:d29ca2a:     }
1:144a362:     
1:144a362:     public void testStartFalse() throws Exception {
1:144a362:         String config = "spring-start-false.xml";
1:144a362:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:144a362:         context = new ClassPathXmlApplicationContext(config);
1:144a362:         BrokerService broker = (BrokerService)context.getBean(BrokerService.class);
1:144a362:         assertFalse("Broker is started", broker.isStarted());
1:144a362:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:144a362
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testStartFalse() throws Exception {
1:         String config = "spring-start-false.xml";
1:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:         context = new ClassPathXmlApplicationContext(config);
1:         BrokerService broker = (BrokerService)context.getBean(BrokerService.class);
1:         assertFalse("Broker is started", broker.isStarted());
1:     }
commit:e0d7906
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec09a75
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Broken: http://issues.apache.org/activemq/browse/AMQ-1002
0:      * Needs to be fixed.
1:      * 
1:      * @throws Exception
1:      */
0:     public void XtestSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:ea1dad7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0:      * Make sure that brokers are being pooled properly.
1:      *
1:      * @throws Exception
1:      */
0:     public void testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml() throws Exception {
0:         String config = "spring-embedded-pooled.xml";
1:         
0:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
0:         ClassPathXmlApplicationContext context1 = new ClassPathXmlApplicationContext(config);
1: 
0:         BrokerService bs1 = (BrokerService) context1.getBean("broker1");
0:         assertNotNull(bs1);
0:         BrokerService bs2 = (BrokerService) context1.getBean("broker2");
0:         assertNotNull(bs1);
1:         
0:         // It should be the same broker;
0:         assertEquals(bs1, bs2);
1: 
0:         // Even if we load up another context, it should still be the same broker.
0:         ClassPathXmlApplicationContext context2 = new ClassPathXmlApplicationContext(config);
1: 
0:         BrokerService bs3 = (BrokerService) context2.getBean("broker1");
0:         assertNotNull(bs3);
0:         BrokerService bs4 = (BrokerService) context2.getBean("broker2");
0:         assertNotNull(bs4);
1: 
0:         // It should be the same broker;
0:         assertEquals(bs1, bs3);
0:         assertEquals(bs1, bs4);
1:         
0:         // And it should be started.
0:         assertTrue(bs1.isStarted());
1:         
0:         // should still be started asfter the 2nd context closes.
0:         context2.close();
0:         assertTrue(bs1.isStarted());
1:         
0:         // Should stop once all contexts close.
0:         context1.close();
0:         assertFalse(bs1.isStarted());
1: 
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     
commit:a5ee130
/////////////////////////////////////////////////////////////////////////
0:         
0:         // Wait a little to drain any left over messages.
0:         Thread.sleep(1000);
0:         consumer.flushMessages();
commit:050637c
/////////////////////////////////////////////////////////////////////////
0:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.spring;
0: 
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
0: 
0: public class SpringTest extends TestCase {
0:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(SpringTest.class);
0: 
0:     protected AbstractApplicationContext context;
0:     protected SpringConsumer consumer;
0:     protected SpringProducer producer;
0: 
1:     /**
1:      * Uses ActiveMQConnectionFactory to create the connection context.
1:      * Configuration file is /resources/spring.xml
1:      *
1:      * @throws Exception
1:      */
1:     public void testSenderWithSpringXml() throws Exception {
1:         String config = "spring.xml";
1:         assertSenderConfig(config);
1:     }
0: 
1:     /**
1:      * Spring configured test that uses ActiveMQConnectionFactory for
1:      * connection context and ActiveMQQueue for destination. Configuration
1:      * file is /resources/spring-queue.xml.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSenderWithSpringXmlAndQueue() throws Exception {
1:         String config = "spring-queue.xml";
1:         assertSenderConfig(config);
1:     }
0: 
1:     /**
1:      * Spring configured test that uses JNDI. Configuration file is
1:      * /resources/spring-jndi.xml.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSenderWithSpringXmlUsingJNDI() throws Exception {
1:         String config = "spring-jndi.xml";
1:         assertSenderConfig(config);
1:     }
0: 
1:     /**
1:      * Spring configured test where in the connection context is set to use
1:      * an embedded broker. Configuration file is /resources/spring-embedded.xml
1:      * and /resources/activemq.xml.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSenderWithSpringXmlEmbeddedBrokerConfiguredViaXml() throws Exception {
1:         String config = "spring-embedded.xml";
1:         assertSenderConfig(config);
1:     }
0: 
1:     /**
0:      * assert method that is used by all the test method to send and receive messages
0:      * based on each spring configuration.
1:      *
0:      * @param config
1:      * @throws Exception
1:      */
0:     protected void assertSenderConfig(String config) throws Exception {
0:         context = new ClassPathXmlApplicationContext(config);
0: 
0:         consumer = (SpringConsumer) context.getBean("consumer");
0:         assertTrue("Found a valid consumer", consumer != null);
0: 
0:         consumer.start();
0: 
0:         producer = (SpringProducer) context.getBean("producer");
0:         assertTrue("Found a valid producer", producer != null);
0: 
0:         consumer.flushMessages();
0:         producer.start();
0: 
0:         // lets sleep a little to give the JMS time to dispatch stuff
0:         consumer.waitForMessagesToArrive(producer.getMessageCount());
0: 
0:         // now lets check that the consumer has received some messages
0:         List messages = consumer.flushMessages();
0:         log.info("Consumer has received messages....");
0:         for (Iterator iter = messages.iterator(); iter.hasNext();) {
0:             Object message = iter.next();
0:             log.info("Received: " + message);
1:         }
0: 
0:         assertEquals("Message count", producer.getMessageCount(), messages.size());
1:     }
0: 
1:     /**
0:      * Clean up method.
1:      *
1:      * @throws Exception
1:      */
0:     protected void tearDown() throws Exception {
0:         if (consumer != null) {
0:             consumer.stop();
1:         }
0:         if (producer != null) {
0:             producer.stop();
1:         }
0: 
0:         if (context != null) {
0:             context.destroy();
1:         }
1:     }
0: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:67310ad
/////////////////////////////////////////////////////////////////////////
1: public class SpringTest extends SpringTestSupport {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
commit:6b03bd3
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
1:     public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {
1:         String config = "spring-embedded-xbean.xml";
1:         assertSenderConfig(config);
0:     }
0:     
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:4474eb8
/////////////////////////////////////////////////////////////////////////
0:      *  
0:     public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {
commit:800cab1
/////////////////////////////////////////////////////////////////////////
1:      * http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-SNAPSHOT.xsd
commit:8786dbf
/////////////////////////////////////////////////////////////////////////
1:      * Spring configured test case that tests the remotely deployed xsd
0:      * http://people.apache.org/repository/org.apache.activemq/xsds/activemq-core-4.1-incubator-SNAPSHOT.xsd
0:      * 
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * Spring configured test case that tests the locally generated xsd
0:      *
0:      * @throws Exception
0:      */
1:     public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXmlUsingLocalXsd() throws Exception {
1:         String config = "spring-embedded-xbean-local.xml";
1:         assertSenderConfig(config);
0:     }
============================================================================