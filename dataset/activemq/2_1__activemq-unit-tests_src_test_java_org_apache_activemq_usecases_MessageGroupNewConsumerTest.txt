1:43982af: /**
1:43982af:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43982af:  * contributor license agreements.  See the NOTICE file distributed with
1:43982af:  * this work for additional information regarding copyright ownership.
1:43982af:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43982af:  * (the "License"); you may not use this file except in compliance with
1:43982af:  * the License.  You may obtain a copy of the License at
1:43982af:  *
1:43982af:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43982af:  *
1:43982af:  * Unless required by applicable law or agreed to in writing, software
1:43982af:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43982af:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43982af:  * See the License for the specific language governing permissions and
1:43982af:  * limitations under the License.
1:43982af:  */
1:977393d: package org.apache.activemq.usecases;
2:977393d: 
1:977393d: import java.util.concurrent.CountDownLatch;
1:977393d: 
1:977393d: import javax.jms.Connection;
1:977393d: import javax.jms.JMSException;
1:977393d: import javax.jms.Message;
1:977393d: import javax.jms.MessageConsumer;
1:977393d: import javax.jms.MessageProducer;
1:977393d: import javax.jms.Queue;
1:977393d: import javax.jms.Session;
1:977393d: import javax.jms.TextMessage;
1:977393d: 
1:977393d: import org.apache.activemq.ActiveMQConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:977393d: import junit.framework.TestCase;
1:977393d: 
1:977393d: /*
1:977393d:  * Test plan:
1:977393d:  * Producer: publish messages into a queue, with three message groups
1:977393d:  * Consumer1: created before any messages are created
1:977393d:  * Consumer2: created after consumer1 has processed one message from each message group
1:977393d:  * 
1:977393d:  * All three groups are handled by to consumer1, so consumer2 should not get any messages.
1:977393d:  * See bug AMQ-2016: Message grouping fails when consumers are added
1:977393d:  */
1:977393d: public class MessageGroupNewConsumerTest extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MessageGroupNewConsumerTest.class);
1:977393d:     private Connection connection;
1:977393d:     // Released after the messages are created
1:977393d:     private CountDownLatch latchMessagesCreated = new CountDownLatch(1);
1:977393d:     // Released after one message from each group is consumed
1:977393d:     private CountDownLatch latchGroupsAcquired = new CountDownLatch(1);
1:977393d: 
1:977393d:     private static final String[] groupNames = { "GrA", "GrB", "GrC" };
1:977393d:     private int messagesSent, messagesRecvd1, messagesRecvd2;
1:977393d:     // with the prefetch too high, this bug is not realized
1:977393d:     private static final String connStr = "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.prefetchPolicy.all=1";
1:977393d: 
1:977393d:     public void testNewConsumer() throws JMSException, InterruptedException {
1:977393d:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connStr);
1:977393d:         connection = factory.createConnection();
1:977393d:         connection.start();
1:977393d:         final String queueName = this.getClass().getSimpleName();
1:977393d:         final Thread producerThread = new Thread() {
1:977393d:             public void run() {
1:977393d:                 try {
1:977393d:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:977393d:                     Queue queue = session.createQueue(queueName);
1:977393d:                     MessageProducer prod = session.createProducer(queue);
1:977393d:                     for (int i=0; i<10; i++) {
1:977393d:                         for(String group : groupNames) {
1:977393d:                             Message message = generateMessage(session, group, i+1);
1:977393d:                             prod.send(message);
1:977393d:                             session.commit();
1:977393d:                             messagesSent++;
1:977393d:                         }
1:977393d:                         LOG.info("Sent message seq "+ (i+1));
1:977393d:                         if (i==0) {
1:977393d:                             latchMessagesCreated.countDown();
1:977393d:                         }
1:977393d:                         if (i==2) {
1:977393d:                             LOG.info("Prod: Waiting for groups");
1:977393d:                             latchGroupsAcquired.await();
1:977393d:                         }
1:977393d:                         Thread.sleep(20);
1:977393d:                     }
1:977393d:                     LOG.info(messagesSent+" messages sent");
1:977393d:                     prod.close();
1:977393d:                     session.close();
1:977393d:                 } catch (Exception e) {
1:977393d:                     LOG.error("Producer failed", e);
1:977393d:                 }
1:977393d:             }
1:977393d:         };
1:977393d:         final Thread consumerThread1 = new Thread() {
1:977393d:             public void run() {
1:977393d:                 try {
1:977393d:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:977393d:                     Queue queue = session.createQueue(queueName);
1:977393d:                     MessageConsumer con1 = session.createConsumer(queue);
1:977393d:                     latchMessagesCreated.await();
1:977393d:                     while(true) {
1:977393d:                         Message message = con1.receive(1000);
1:977393d:                         if (message == null)  break;
1:977393d:                         LOG.info("Con1 got message "+formatMessage(message));
1:977393d:                         session.commit();
1:977393d:                         messagesRecvd1++;
1:977393d:                         // since we get the messages in order, the first few messages will be one from each group
1:977393d:                         // after we get one from each group, start the other consumer
1:977393d:                         if (messagesRecvd1 == groupNames.length) {
1:977393d:                             LOG.info("All groups acquired");
1:977393d:                             latchGroupsAcquired.countDown();
1:977393d:                             Thread.sleep(1000);
1:977393d:                         }
1:977393d:                         Thread.sleep(50);
1:977393d:                     }
1:977393d:                     LOG.info(messagesRecvd1+" messages received by consumer1");
1:977393d:                     con1.close();
1:977393d:                     session.close();
1:977393d:                 } catch (Exception e) {
1:977393d:                     LOG.error("Consumer 1 failed", e);
1:977393d:                 }
1:977393d:             }
1:977393d:         };
1:977393d:         final Thread consumerThread2 = new Thread() {
1:977393d:             public void run() {
1:977393d:                 try {
1:977393d:                     latchGroupsAcquired.await();
1:977393d:                     while(consumerThread1.isAlive()) {
1:977393d:                         LOG.info("(re)starting consumer2");
1:977393d:                         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:977393d:                         Queue queue = session.createQueue(queueName);
1:977393d:                         MessageConsumer con2 = session.createConsumer(queue);
1:977393d:                         while(true) {
1:977393d:                             Message message = con2.receive(500);
1:977393d:                             if (message == null) break;
1:977393d:                             LOG.info("Con2 got message       "+formatMessage(message));
1:977393d:                             session.commit();
1:977393d:                             messagesRecvd2++;
1:977393d:                             Thread.sleep(50);
1:977393d:                         }
1:977393d:                         con2.close();
1:977393d:                         session.close();
1:977393d:                     }
1:977393d:                     LOG.info(messagesRecvd2+" messages received by consumer2");
1:977393d:                 } catch (Exception e) {
1:977393d:                     LOG.error("Consumer 2 failed", e);
1:977393d:                 }
1:977393d:             }
1:977393d:         };
1:977393d:         consumerThread2.start();
1:977393d:         consumerThread1.start();
1:977393d:         producerThread.start();
1:977393d:         // wait for threads to finish
1:977393d:         producerThread.join();
1:977393d:         consumerThread1.join();
1:977393d:         consumerThread2.join();
1:977393d:         connection.close();
1:977393d:         // check results
1:977393d:         assertEquals("consumer 2 should not get any messages", 0, messagesRecvd2);
1:977393d:         assertEquals("consumer 1 should get all the messages", messagesSent, messagesRecvd1);
1:977393d:         assertTrue("producer failed to send any messages", messagesSent > 0);
1:977393d:     }
1:977393d: 
1:977393d:     public Message generateMessage(Session session, String groupId, int seq) throws JMSException {
1:977393d:         TextMessage m = session.createTextMessage();
1:977393d:         m.setJMSType("TEST_MESSAGE");
1:977393d:         m.setStringProperty("JMSXGroupID", groupId);
1:977393d:         m.setIntProperty("JMSXGroupSeq", seq);
1:977393d:         m.setText("<?xml?><testMessage/>");
1:977393d:         return m;
1:977393d:     }
1:977393d:     public String formatMessage(Message m) {
1:977393d:         try {
1:977393d:             return m.getStringProperty("JMSXGroupID")+"-"+m.getIntProperty("JMSXGroupSeq")+"-"+m.getBooleanProperty("JMSXGroupFirstForConsumer");
1:977393d:         } catch (Exception e) {
1:977393d:             return e.getClass().getSimpleName()+": "+e.getMessage();
1:977393d:         }
1:977393d:     }
1:977393d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageGroupNewConsumerTest.class);
commit:43982af
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:977393d
/////////////////////////////////////////////////////////////////////////
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import junit.framework.TestCase;
1: 
1: /*
1:  * Test plan:
1:  * Producer: publish messages into a queue, with three message groups
1:  * Consumer1: created before any messages are created
1:  * Consumer2: created after consumer1 has processed one message from each message group
1:  * 
1:  * All three groups are handled by to consumer1, so consumer2 should not get any messages.
1:  * See bug AMQ-2016: Message grouping fails when consumers are added
1:  */
1: public class MessageGroupNewConsumerTest extends TestCase {
0:     private static final Log LOG = LogFactory.getLog(MessageGroupNewConsumerTest.class);
1:     private Connection connection;
1:     // Released after the messages are created
1:     private CountDownLatch latchMessagesCreated = new CountDownLatch(1);
1:     // Released after one message from each group is consumed
1:     private CountDownLatch latchGroupsAcquired = new CountDownLatch(1);
1: 
1:     private static final String[] groupNames = { "GrA", "GrB", "GrC" };
1:     private int messagesSent, messagesRecvd1, messagesRecvd2;
1:     // with the prefetch too high, this bug is not realized
1:     private static final String connStr = "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.prefetchPolicy.all=1";
1: 
1:     public void testNewConsumer() throws JMSException, InterruptedException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connStr);
1:         connection = factory.createConnection();
1:         connection.start();
1:         final String queueName = this.getClass().getSimpleName();
1:         final Thread producerThread = new Thread() {
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     Queue queue = session.createQueue(queueName);
1:                     MessageProducer prod = session.createProducer(queue);
1:                     for (int i=0; i<10; i++) {
1:                         for(String group : groupNames) {
1:                             Message message = generateMessage(session, group, i+1);
1:                             prod.send(message);
1:                             session.commit();
1:                             messagesSent++;
1:                         }
1:                         LOG.info("Sent message seq "+ (i+1));
1:                         if (i==0) {
1:                             latchMessagesCreated.countDown();
1:                         }
1:                         if (i==2) {
1:                             LOG.info("Prod: Waiting for groups");
1:                             latchGroupsAcquired.await();
1:                         }
1:                         Thread.sleep(20);
1:                     }
1:                     LOG.info(messagesSent+" messages sent");
1:                     prod.close();
1:                     session.close();
1:                 } catch (Exception e) {
1:                     LOG.error("Producer failed", e);
1:                 }
1:             }
1:         };
1:         final Thread consumerThread1 = new Thread() {
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     Queue queue = session.createQueue(queueName);
1:                     MessageConsumer con1 = session.createConsumer(queue);
1:                     latchMessagesCreated.await();
1:                     while(true) {
1:                         Message message = con1.receive(1000);
1:                         if (message == null)  break;
1:                         LOG.info("Con1 got message "+formatMessage(message));
1:                         session.commit();
1:                         messagesRecvd1++;
1:                         // since we get the messages in order, the first few messages will be one from each group
1:                         // after we get one from each group, start the other consumer
1:                         if (messagesRecvd1 == groupNames.length) {
1:                             LOG.info("All groups acquired");
1:                             latchGroupsAcquired.countDown();
1:                             Thread.sleep(1000);
1:                         }
1:                         Thread.sleep(50);
1:                     }
1:                     LOG.info(messagesRecvd1+" messages received by consumer1");
1:                     con1.close();
1:                     session.close();
1:                 } catch (Exception e) {
1:                     LOG.error("Consumer 1 failed", e);
1:                 }
1:             }
1:         };
1:         final Thread consumerThread2 = new Thread() {
1:             public void run() {
1:                 try {
1:                     latchGroupsAcquired.await();
1:                     while(consumerThread1.isAlive()) {
1:                         LOG.info("(re)starting consumer2");
1:                         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                         Queue queue = session.createQueue(queueName);
1:                         MessageConsumer con2 = session.createConsumer(queue);
1:                         while(true) {
1:                             Message message = con2.receive(500);
1:                             if (message == null) break;
1:                             LOG.info("Con2 got message       "+formatMessage(message));
1:                             session.commit();
1:                             messagesRecvd2++;
1:                             Thread.sleep(50);
1:                         }
1:                         con2.close();
1:                         session.close();
1:                     }
1:                     LOG.info(messagesRecvd2+" messages received by consumer2");
1:                 } catch (Exception e) {
1:                     LOG.error("Consumer 2 failed", e);
1:                 }
1:             }
1:         };
1:         consumerThread2.start();
1:         consumerThread1.start();
1:         producerThread.start();
1:         // wait for threads to finish
1:         producerThread.join();
1:         consumerThread1.join();
1:         consumerThread2.join();
1:         connection.close();
1:         // check results
1:         assertEquals("consumer 2 should not get any messages", 0, messagesRecvd2);
1:         assertEquals("consumer 1 should get all the messages", messagesSent, messagesRecvd1);
1:         assertTrue("producer failed to send any messages", messagesSent > 0);
1:     }
1: 
1:     public Message generateMessage(Session session, String groupId, int seq) throws JMSException {
1:         TextMessage m = session.createTextMessage();
1:         m.setJMSType("TEST_MESSAGE");
1:         m.setStringProperty("JMSXGroupID", groupId);
1:         m.setIntProperty("JMSXGroupSeq", seq);
1:         m.setText("<?xml?><testMessage/>");
1:         return m;
1:     }
1:     public String formatMessage(Message m) {
1:         try {
1:             return m.getStringProperty("JMSXGroupID")+"-"+m.getIntProperty("JMSXGroupSeq")+"-"+m.getBooleanProperty("JMSXGroupFirstForConsumer");
1:         } catch (Exception e) {
1:             return e.getClass().getSimpleName()+": "+e.getMessage();
1:         }
1:     }
1: }
============================================================================