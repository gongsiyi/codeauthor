1:0601fb7: /**
1:0601fb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0601fb7:  * contributor license agreements.  See the NOTICE file distributed with
1:0601fb7:  * this work for additional information regarding copyright ownership.
1:0601fb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0601fb7:  * (the "License"); you may not use this file except in compliance with
1:0601fb7:  * the License.  You may obtain a copy of the License at
1:0601fb7:  *
1:0601fb7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0601fb7:  *
1:0601fb7:  * Unless required by applicable law or agreed to in writing, software
1:0601fb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0601fb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0601fb7:  * See the License for the specific language governing permissions and
1:0601fb7:  * limitations under the License.
1:0601fb7:  */
1:0601fb7: package org.apache.activemq.network;
1:0601fb7: 
1:0601fb7: import junit.framework.TestCase;
1:0601fb7: import org.apache.activemq.ActiveMQConnectionFactory;
1:0601fb7: import org.apache.activemq.broker.BrokerService;
1:0601fb7: import org.apache.activemq.command.ActiveMQQueue;
1:0601fb7: import org.junit.Test;
1:0601fb7: import org.slf4j.Logger;
1:0601fb7: import org.slf4j.LoggerFactory;
1:0601fb7: 
1:0601fb7: import javax.jms.*;
1:0601fb7: 
1:0601fb7: public class NetworkConnectionsTest extends TestCase {
1:0601fb7:     private static final Logger LOG = LoggerFactory.getLogger(NetworkConnectionsTest.class);
1:0601fb7: 
1:0601fb7:     private static final String LOCAL_BROKER_TRANSPORT_URI = "tcp://localhost:61616";
1:0601fb7:     private static final String REMOTE_BROKER_TRANSPORT_URI = "tcp://localhost:61617";
1:0601fb7:     private static final String DESTINATION_NAME = "TEST.RECONNECT";
1:0601fb7: 
1:0601fb7:     private BrokerService localBroker;
1:0601fb7:     private BrokerService remoteBroker;
1:0601fb7: 
1:0601fb7:     @Test
1:0601fb7:     public void testIsStarted() throws Exception {
1:0601fb7:         LOG.info("testIsStarted is starting...");
1:0601fb7: 
1:0601fb7:         LOG.info("Adding network connector...");
1:0601fb7:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:0601fb7:         nc.setName("NC1");
1:0601fb7: 
1:0601fb7:         LOG.info("Starting network connector...");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Stopping network connector...");
1:0601fb7:         nc.stop();
1:0601fb7: 
1:0601fb7:         while (nc.isStopping()) {
1:0601fb7:             LOG.info("... still stopping ...");
1:0601fb7:             Thread.sleep(100);
1:0601fb7:         }
1:0601fb7: 
1:0601fb7:         assertTrue(nc.isStopped());
1:0601fb7:         assertFalse(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Starting network connector...");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Stopping network connector...");
1:0601fb7:         nc.stop();
1:0601fb7: 
1:0601fb7:         while (nc.isStopping()) {
1:0601fb7:             LOG.info("... still stopping ...");
1:0601fb7:             Thread.sleep(100);
1:0601fb7:         }
1:0601fb7: 
1:0601fb7:         assertTrue(nc.isStopped());
1:0601fb7:         assertFalse(nc.isStarted());
1:0601fb7:     }
1:0601fb7: 
1:0601fb7:     @Test
1:0601fb7:     public void testNetworkConnectionRestart() throws Exception {
1:0601fb7:         LOG.info("testNetworkConnectionRestart is starting...");
1:0601fb7: 
1:0601fb7:         LOG.info("Adding network connector...");
1:0601fb7:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:0601fb7:         nc.setName("NC1");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Setting up Message Producer and Consumer");
1:0601fb7:         ActiveMQQueue destination = new ActiveMQQueue(DESTINATION_NAME);
1:0601fb7: 
1:0601fb7:         ActiveMQConnectionFactory localFactory = new ActiveMQConnectionFactory(LOCAL_BROKER_TRANSPORT_URI);
1:0601fb7:         Connection localConnection = localFactory.createConnection();
1:0601fb7:         localConnection.start();
1:0601fb7:         Session localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0601fb7:         MessageProducer localProducer = localSession.createProducer(destination);
1:0601fb7: 
1:0601fb7:         ActiveMQConnectionFactory remoteFactory = new ActiveMQConnectionFactory(REMOTE_BROKER_TRANSPORT_URI);
1:0601fb7:         Connection remoteConnection = remoteFactory.createConnection();
1:0601fb7:         remoteConnection.start();
1:0601fb7:         Session remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0601fb7:         MessageConsumer remoteConsumer = remoteSession.createConsumer(destination);
1:0601fb7: 
1:0601fb7:         Message message = localSession.createTextMessage("test");
1:0601fb7:         localProducer.send(message);
1:0601fb7: 
1:0601fb7:         LOG.info("Testing initial network connection...");
1:0601fb7:         message = remoteConsumer.receive(10000);
1:0601fb7:         assertNotNull(message);
1:0601fb7: 
1:0601fb7:         LOG.info("Stopping network connection...");
1:0601fb7:         nc.stop();
1:0601fb7:         assertFalse(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Sending 2nd message...");
1:0601fb7:         message = localSession.createTextMessage("test stop");
1:0601fb7:         localProducer.send(message);
1:0601fb7: 
1:0601fb7:         message = remoteConsumer.receive(1000);
1:0601fb7:         assertNull("Message should not have been delivered since NetworkConnector was stopped", message);
1:0601fb7: 
1:0601fb7:         LOG.info("(Re)starting network connection...");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Wait for 2nd message to get forwarded and received...");
1:0601fb7:         message = remoteConsumer.receive(10000);
1:0601fb7:         assertNotNull("Should have received 2nd message", message);
1:0601fb7:     }
1:0601fb7: 
1:0601fb7:     @Test
1:0601fb7:     public void testNetworkConnectionReAddURI() throws Exception {
1:0601fb7:         LOG.info("testNetworkConnectionReAddURI is starting...");
1:0601fb7: 
1:0601fb7:         LOG.info("Adding network connector 'NC1'...");
1:0601fb7:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:0601fb7:         nc.setName("NC1");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Looking up network connector by name...");
1:0601fb7:         NetworkConnector nc1 = localBroker.getNetworkConnectorByName("NC1");
1:0601fb7:         assertNotNull("Should find network connector 'NC1'", nc1);
1:0601fb7:         assertTrue(nc1.isStarted());
1:0601fb7:         assertEquals(nc, nc1);
1:0601fb7: 
1:0601fb7:         LOG.info("Setting up producer and consumer...");
1:0601fb7:         ActiveMQQueue destination = new ActiveMQQueue(DESTINATION_NAME);
1:0601fb7: 
1:0601fb7:         ActiveMQConnectionFactory localFactory = new ActiveMQConnectionFactory(LOCAL_BROKER_TRANSPORT_URI);
1:0601fb7:         Connection localConnection = localFactory.createConnection();
1:0601fb7:         localConnection.start();
1:0601fb7:         Session localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0601fb7:         MessageProducer localProducer = localSession.createProducer(destination);
1:0601fb7: 
1:0601fb7:         ActiveMQConnectionFactory remoteFactory = new ActiveMQConnectionFactory(REMOTE_BROKER_TRANSPORT_URI);
1:0601fb7:         Connection remoteConnection = remoteFactory.createConnection();
1:0601fb7:         remoteConnection.start();
1:0601fb7:         Session remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0601fb7:         MessageConsumer remoteConsumer = remoteSession.createConsumer(destination);
1:0601fb7: 
1:0601fb7:         Message message = localSession.createTextMessage("test");
1:0601fb7:         localProducer.send(message);
1:0601fb7: 
1:0601fb7:         LOG.info("Testing initial network connection...");
1:0601fb7:         message = remoteConsumer.receive(10000);
1:0601fb7:         assertNotNull(message);
1:0601fb7: 
1:0601fb7:         LOG.info("Stopping network connector 'NC1'...");
1:0601fb7:         nc.stop();
1:0601fb7:         assertFalse(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Removing network connector...");
1:0601fb7:         assertTrue(localBroker.removeNetworkConnector(nc));
1:0601fb7: 
1:0601fb7:         nc1 = localBroker.getNetworkConnectorByName("NC1");
1:0601fb7:         assertNull("Should not find network connector 'NC1'", nc1);
1:0601fb7: 
1:0601fb7:         LOG.info("Re-adding network connector 'NC2'...");
1:0601fb7:         nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:0601fb7:         nc.setName("NC2");
1:0601fb7:         nc.start();
1:0601fb7:         assertTrue(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Looking up network connector by name...");
1:0601fb7:         NetworkConnector nc2 = localBroker.getNetworkConnectorByName("NC2");
1:0601fb7:         assertNotNull(nc2);
1:0601fb7:         assertTrue(nc2.isStarted());
1:0601fb7:         assertEquals(nc, nc2);
1:0601fb7: 
1:0601fb7:         LOG.info("Testing re-added network connection...");
1:0601fb7:         message = localSession.createTextMessage("test");
1:0601fb7:         localProducer.send(message);
1:0601fb7: 
1:0601fb7:         message = remoteConsumer.receive(10000);
1:0601fb7:         assertNotNull(message);
1:0601fb7: 
1:0601fb7:         LOG.info("Stopping network connector...");
1:0601fb7:         nc.stop();
1:0601fb7:         assertFalse(nc.isStarted());
1:0601fb7: 
1:0601fb7:         LOG.info("Removing network connection 'NC2'");
1:0601fb7:         assertTrue(localBroker.removeNetworkConnector(nc));
1:0601fb7: 
1:0601fb7:         nc2 = localBroker.getNetworkConnectorByName("NC2");
1:0601fb7:         assertNull("Should not find network connector 'NC2'", nc2);
1:0601fb7:     }
1:0601fb7: 
1:0601fb7:     @Override
1:0601fb7:     protected void setUp() throws Exception {
1:0601fb7:         LOG.info("Setting up LocalBroker");
1:0601fb7:         localBroker = new BrokerService();
1:0601fb7:         localBroker.setBrokerName("LocalBroker");
1:0601fb7:         localBroker.setUseJmx(false);
1:0601fb7:         localBroker.setPersistent(false);
1:0601fb7:         localBroker.setTransportConnectorURIs(new String[]{LOCAL_BROKER_TRANSPORT_URI});
1:0601fb7:         localBroker.start();
1:0601fb7:         localBroker.waitUntilStarted();
1:0601fb7: 
1:0601fb7:         LOG.info("Setting up RemoteBroker");
1:0601fb7:         remoteBroker = new BrokerService();
1:0601fb7:         remoteBroker.setBrokerName("RemoteBroker");
1:0601fb7:         remoteBroker.setUseJmx(false);
1:0601fb7:         remoteBroker.setPersistent(false);
1:0601fb7:         remoteBroker.setTransportConnectorURIs(new String[]{REMOTE_BROKER_TRANSPORT_URI});
1:0601fb7:         remoteBroker.start();
1:0601fb7:         remoteBroker.waitUntilStarted();
1:0601fb7:     }
1:0601fb7: 
1:0601fb7:     @Override
1:0601fb7:     protected void tearDown() throws Exception {
1:0601fb7:         if (localBroker.isStarted()) {
1:0601fb7:             LOG.info("Stopping LocalBroker");
1:0601fb7:             localBroker.stop();
1:0601fb7:             localBroker.waitUntilStopped();
1:0601fb7:             localBroker = null;
1:0601fb7:         }
1:0601fb7: 
1:0601fb7:         if (remoteBroker.isStarted()) {
1:0601fb7:             LOG.info("Stopping RemoteBroker");
1:0601fb7:             remoteBroker.stop();
1:0601fb7:             remoteBroker.waitUntilStopped();
1:0601fb7:             remoteBroker = null;
1:0601fb7:         }
1:0601fb7:     }
1:0601fb7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0601fb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: 
1: public class NetworkConnectionsTest extends TestCase {
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkConnectionsTest.class);
1: 
1:     private static final String LOCAL_BROKER_TRANSPORT_URI = "tcp://localhost:61616";
1:     private static final String REMOTE_BROKER_TRANSPORT_URI = "tcp://localhost:61617";
1:     private static final String DESTINATION_NAME = "TEST.RECONNECT";
1: 
1:     private BrokerService localBroker;
1:     private BrokerService remoteBroker;
1: 
1:     @Test
1:     public void testIsStarted() throws Exception {
1:         LOG.info("testIsStarted is starting...");
1: 
1:         LOG.info("Adding network connector...");
1:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:         nc.setName("NC1");
1: 
1:         LOG.info("Starting network connector...");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Stopping network connector...");
1:         nc.stop();
1: 
1:         while (nc.isStopping()) {
1:             LOG.info("... still stopping ...");
1:             Thread.sleep(100);
1:         }
1: 
1:         assertTrue(nc.isStopped());
1:         assertFalse(nc.isStarted());
1: 
1:         LOG.info("Starting network connector...");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Stopping network connector...");
1:         nc.stop();
1: 
1:         while (nc.isStopping()) {
1:             LOG.info("... still stopping ...");
1:             Thread.sleep(100);
1:         }
1: 
1:         assertTrue(nc.isStopped());
1:         assertFalse(nc.isStarted());
1:     }
1: 
1:     @Test
1:     public void testNetworkConnectionRestart() throws Exception {
1:         LOG.info("testNetworkConnectionRestart is starting...");
1: 
1:         LOG.info("Adding network connector...");
1:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:         nc.setName("NC1");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Setting up Message Producer and Consumer");
1:         ActiveMQQueue destination = new ActiveMQQueue(DESTINATION_NAME);
1: 
1:         ActiveMQConnectionFactory localFactory = new ActiveMQConnectionFactory(LOCAL_BROKER_TRANSPORT_URI);
1:         Connection localConnection = localFactory.createConnection();
1:         localConnection.start();
1:         Session localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer localProducer = localSession.createProducer(destination);
1: 
1:         ActiveMQConnectionFactory remoteFactory = new ActiveMQConnectionFactory(REMOTE_BROKER_TRANSPORT_URI);
1:         Connection remoteConnection = remoteFactory.createConnection();
1:         remoteConnection.start();
1:         Session remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer remoteConsumer = remoteSession.createConsumer(destination);
1: 
1:         Message message = localSession.createTextMessage("test");
1:         localProducer.send(message);
1: 
1:         LOG.info("Testing initial network connection...");
1:         message = remoteConsumer.receive(10000);
1:         assertNotNull(message);
1: 
1:         LOG.info("Stopping network connection...");
1:         nc.stop();
1:         assertFalse(nc.isStarted());
1: 
1:         LOG.info("Sending 2nd message...");
1:         message = localSession.createTextMessage("test stop");
1:         localProducer.send(message);
1: 
1:         message = remoteConsumer.receive(1000);
1:         assertNull("Message should not have been delivered since NetworkConnector was stopped", message);
1: 
1:         LOG.info("(Re)starting network connection...");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Wait for 2nd message to get forwarded and received...");
1:         message = remoteConsumer.receive(10000);
1:         assertNotNull("Should have received 2nd message", message);
1:     }
1: 
1:     @Test
1:     public void testNetworkConnectionReAddURI() throws Exception {
1:         LOG.info("testNetworkConnectionReAddURI is starting...");
1: 
1:         LOG.info("Adding network connector 'NC1'...");
1:         NetworkConnector nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:         nc.setName("NC1");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Looking up network connector by name...");
1:         NetworkConnector nc1 = localBroker.getNetworkConnectorByName("NC1");
1:         assertNotNull("Should find network connector 'NC1'", nc1);
1:         assertTrue(nc1.isStarted());
1:         assertEquals(nc, nc1);
1: 
1:         LOG.info("Setting up producer and consumer...");
1:         ActiveMQQueue destination = new ActiveMQQueue(DESTINATION_NAME);
1: 
1:         ActiveMQConnectionFactory localFactory = new ActiveMQConnectionFactory(LOCAL_BROKER_TRANSPORT_URI);
1:         Connection localConnection = localFactory.createConnection();
1:         localConnection.start();
1:         Session localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer localProducer = localSession.createProducer(destination);
1: 
1:         ActiveMQConnectionFactory remoteFactory = new ActiveMQConnectionFactory(REMOTE_BROKER_TRANSPORT_URI);
1:         Connection remoteConnection = remoteFactory.createConnection();
1:         remoteConnection.start();
1:         Session remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer remoteConsumer = remoteSession.createConsumer(destination);
1: 
1:         Message message = localSession.createTextMessage("test");
1:         localProducer.send(message);
1: 
1:         LOG.info("Testing initial network connection...");
1:         message = remoteConsumer.receive(10000);
1:         assertNotNull(message);
1: 
1:         LOG.info("Stopping network connector 'NC1'...");
1:         nc.stop();
1:         assertFalse(nc.isStarted());
1: 
1:         LOG.info("Removing network connector...");
1:         assertTrue(localBroker.removeNetworkConnector(nc));
1: 
1:         nc1 = localBroker.getNetworkConnectorByName("NC1");
1:         assertNull("Should not find network connector 'NC1'", nc1);
1: 
1:         LOG.info("Re-adding network connector 'NC2'...");
1:         nc = localBroker.addNetworkConnector("static:(" + REMOTE_BROKER_TRANSPORT_URI + ")");
1:         nc.setName("NC2");
1:         nc.start();
1:         assertTrue(nc.isStarted());
1: 
1:         LOG.info("Looking up network connector by name...");
1:         NetworkConnector nc2 = localBroker.getNetworkConnectorByName("NC2");
1:         assertNotNull(nc2);
1:         assertTrue(nc2.isStarted());
1:         assertEquals(nc, nc2);
1: 
1:         LOG.info("Testing re-added network connection...");
1:         message = localSession.createTextMessage("test");
1:         localProducer.send(message);
1: 
1:         message = remoteConsumer.receive(10000);
1:         assertNotNull(message);
1: 
1:         LOG.info("Stopping network connector...");
1:         nc.stop();
1:         assertFalse(nc.isStarted());
1: 
1:         LOG.info("Removing network connection 'NC2'");
1:         assertTrue(localBroker.removeNetworkConnector(nc));
1: 
1:         nc2 = localBroker.getNetworkConnectorByName("NC2");
1:         assertNull("Should not find network connector 'NC2'", nc2);
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         LOG.info("Setting up LocalBroker");
1:         localBroker = new BrokerService();
1:         localBroker.setBrokerName("LocalBroker");
1:         localBroker.setUseJmx(false);
1:         localBroker.setPersistent(false);
1:         localBroker.setTransportConnectorURIs(new String[]{LOCAL_BROKER_TRANSPORT_URI});
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1: 
1:         LOG.info("Setting up RemoteBroker");
1:         remoteBroker = new BrokerService();
1:         remoteBroker.setBrokerName("RemoteBroker");
1:         remoteBroker.setUseJmx(false);
1:         remoteBroker.setPersistent(false);
1:         remoteBroker.setTransportConnectorURIs(new String[]{REMOTE_BROKER_TRANSPORT_URI});
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (localBroker.isStarted()) {
1:             LOG.info("Stopping LocalBroker");
1:             localBroker.stop();
1:             localBroker.waitUntilStopped();
1:             localBroker = null;
1:         }
1: 
1:         if (remoteBroker.isStarted()) {
1:             LOG.info("Stopping RemoteBroker");
1:             remoteBroker.stop();
1:             remoteBroker.waitUntilStopped();
1:             remoteBroker = null;
1:         }
1:     }
1: }
============================================================================