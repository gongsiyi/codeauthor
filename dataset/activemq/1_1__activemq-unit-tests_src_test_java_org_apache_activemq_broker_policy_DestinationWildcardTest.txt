1:ee4672b: /**
1:ee4672b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ee4672b:  * contributor license agreements.  See the NOTICE file distributed with
1:ee4672b:  * this work for additional information regarding copyright ownership.
1:ee4672b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ee4672b:  * (the "License"); you may not use this file except in compliance with
1:ee4672b:  * the License.  You may obtain a copy of the License at
1:ee4672b:  *
1:ee4672b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ee4672b:  *
1:ee4672b:  * Unless required by applicable law or agreed to in writing, software
1:ee4672b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee4672b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee4672b:  * See the License for the specific language governing permissions and
1:ee4672b:  * limitations under the License.
1:ee4672b:  */
1:ee4672b: package org.apache.activemq.broker.policy;
1:ee4672b: 
1:ee4672b: 
1:ee4672b: import java.util.ArrayList;
1:ee4672b: import java.util.List;
1:ee4672b: 
1:ee4672b: import org.apache.activemq.broker.BrokerService;
1:ee4672b: import org.apache.activemq.broker.ConnectionContext;
1:ee4672b: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1:ee4672b: import org.apache.activemq.broker.region.Queue;
1:ee4672b: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ee4672b: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ee4672b: import org.apache.activemq.command.ActiveMQQueue;
1:ee4672b: 
1:ee4672b: import org.junit.After;
1:ee4672b: import org.junit.Before;
1:ee4672b: import org.junit.Test;
1:ee4672b: import org.junit.Assert;
1:ee4672b: 
1:ee4672b: import org.slf4j.Logger;
1:ee4672b: import org.slf4j.LoggerFactory;
1:ee4672b: 
1:ee4672b: 
1:ee4672b: public class DestinationWildcardTest {
1:ee4672b:     protected final static String DESTNAME="DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue";
1:ee4672b:     protected final static int QUEUE_LIMIT = 5000000;
1:ee4672b:     protected static Logger LOG = LoggerFactory.getLogger(DestinationWildcardTest.class);
1:ee4672b:     private BrokerService broker = null;
1:ee4672b: 
1:ee4672b:     @Before
1:ee4672b:     public void setUp() throws Exception {
1:ee4672b:         broker = new BrokerService();
1:ee4672b:         broker.setPersistent(false);
1:ee4672b:         broker.setDeleteAllMessagesOnStartup(true);
1:ee4672b:     }
1:ee4672b: 
1:ee4672b:     @After
1:ee4672b:     public void tearDown() throws Exception {
1:ee4672b:         LOG.info("Shutting down");
1:ee4672b:         if (broker != null && broker.isStarted()) {
1:ee4672b:             LOG.info("Broker still running, stopping it now.");
1:ee4672b:             broker.stop();
1:ee4672b:         }
1:ee4672b:         else {
1:ee4672b:             LOG.info("Broker not running, nothing to shutdown.");
1:ee4672b:         }
1:ee4672b:     }
1:ee4672b: 
1:ee4672b:     /**
1:ee4672b:      * Configures broker for two wildcard policies and one specific destination policy, creates a destination
1:ee4672b:      * and checks if the right policy is applied to the destination.
1:ee4672b:      */
1:ee4672b:     @Test
1:ee4672b:     public void testDestinationWildcardThreeEntries() throws Exception {
1:ee4672b:         LOG.info("testDestinationWildcard() called.");
1:ee4672b: 
1:ee4672b:         // configure broker for policyEntries
1:ee4672b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:ee4672b: 
1:ee4672b:         PolicyEntry e1 = new PolicyEntry();
1:ee4672b:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue"));
1:ee4672b:         e1.setMemoryLimit(QUEUE_LIMIT);
1:ee4672b:         e1.setPrioritizedMessages(true);
1:ee4672b:         entries.add(e1);
1:ee4672b: 
1:ee4672b:         PolicyEntry e2 = new PolicyEntry();
1:ee4672b:         e2.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:ee4672b:         e2.setMemoryLimit(3000000);
1:ee4672b:         e2.setPrioritizedMessages(false);
1:ee4672b:         entries.add(e2);
1:ee4672b: 
1:ee4672b:         PolicyEntry e3 = new PolicyEntry();
1:ee4672b:         e3.setDestination(new ActiveMQQueue("DomainA.DomainB.>"));
1:ee4672b:         e3.setMemoryLimit(3000000);
1:ee4672b:         e3.setPrioritizedMessages(false);
1:ee4672b:         entries.add(e3);
1:ee4672b: 
1:ee4672b:         PolicyMap policyMap = new PolicyMap();
1:ee4672b:         policyMap.setPolicyEntries(entries);
1:ee4672b:         broker.setDestinationPolicy(policyMap);
1:ee4672b:         broker.start();
1:ee4672b:         broker.waitUntilStarted();
1:ee4672b: 
1:ee4672b:         // verify broker isn't null
1:ee4672b:         Assert.assertNotNull(broker);
1:ee4672b: 
1:ee4672b:         // verify effective policy is in place.
1:ee4672b:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:ee4672b:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:ee4672b:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:ee4672b:         long limit = queue.getMemoryUsage().getLimit();
1:ee4672b:         LOG.info("MemoryLimit of {}: expected: 5242880, actual: {}", DESTNAME, limit);
1:ee4672b:         Assert.assertEquals("Memory limit is expected to be " + QUEUE_LIMIT + " for this destination, but does not match.", QUEUE_LIMIT, limit);
1:ee4672b:     }
1:ee4672b: 
1:ee4672b: 
1:ee4672b:     /**
1:ee4672b:      * Configures broker for two wildcard policies, creates a destination
1:ee4672b:      * and checks if the policy is applied to the destination.
1:ee4672b:      */
1:ee4672b:     @Test
1:ee4672b:     public void testDestinationWildcardTwoEntries() throws Exception {
1:ee4672b:         LOG.info("testDestinationWildcard() called.");
1:ee4672b: 
1:ee4672b:         // configure broker for policyEntries
1:ee4672b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:ee4672b: 
1:ee4672b:         PolicyEntry e1 = new PolicyEntry();
1:ee4672b:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:ee4672b:         e1.setMemoryLimit(QUEUE_LIMIT);
1:ee4672b:         e1.setPrioritizedMessages(true);
1:ee4672b:         entries.add(e1);
1:ee4672b: 
1:ee4672b:         PolicyEntry e2 = new PolicyEntry();
1:ee4672b:         e2.setDestination(new ActiveMQQueue("DomainA.DomainB.>"));
1:ee4672b:         e2.setMemoryLimit(3000000);
1:ee4672b:         e2.setPrioritizedMessages(false);
1:ee4672b:         entries.add(e2);
1:ee4672b: 
1:ee4672b:         PolicyMap policyMap = new PolicyMap();
1:ee4672b:         policyMap.setPolicyEntries(entries);
1:ee4672b:         broker.setDestinationPolicy(policyMap);
1:ee4672b:         broker.start();
1:ee4672b:         broker.waitUntilStarted();
1:ee4672b: 
1:ee4672b:         // verify broker isn't null
1:ee4672b:         Assert.assertNotNull(broker);
1:ee4672b: 
1:ee4672b:         // verify effective policy is in place.
1:ee4672b:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:ee4672b:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:ee4672b:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:ee4672b:         long limit = queue.getMemoryUsage().getLimit();
1:ee4672b:         LOG.info("MemoryLimit of {}: expected: 5242880, actual: {}", DESTNAME, limit);
1:ee4672b:         Assert.assertEquals("Memory limit is expected to be " + QUEUE_LIMIT + " for this destination, but does not match.", QUEUE_LIMIT, limit);
1:ee4672b:     }
1:ee4672b: 
1:ee4672b: 
1:ee4672b:     @Test
1:ee4672b:     public void testDestinationWildcardOneEntry() throws Exception {
1:ee4672b:         LOG.info("testDestinationWildcard2() called.");
1:ee4672b:         // verify broker isn't null
1:ee4672b:         Assert.assertNotNull(broker);
1:ee4672b: 
1:ee4672b:         // configure broker for policyEntries
1:ee4672b:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:ee4672b: 
1:ee4672b:         PolicyEntry e1 = new PolicyEntry();
1:ee4672b:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:ee4672b:         e1.setMemoryLimit(QUEUE_LIMIT);
1:ee4672b:         e1.setPrioritizedMessages(true);
1:ee4672b:         entries.add(e1);
1:ee4672b:         PolicyMap policyMap = new PolicyMap();
1:ee4672b:         policyMap.setPolicyEntries(entries);
1:ee4672b:         broker.setDestinationPolicy(policyMap);
1:ee4672b:         broker.start();
1:ee4672b:         broker.waitUntilStarted();
1:ee4672b: 
1:ee4672b:         // verify effective policy is in place.
1:ee4672b:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:ee4672b:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:ee4672b:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:ee4672b:         long limit = queue.getMemoryUsage().getLimit();
1:ee4672b:         LOG.info("MemoryLimit of {}: expected: 5000000, actual: {}", "DomainA", limit);
1:ee4672b:         Assert.assertEquals("Memory limit is expected to be " + 5000000 + " for this destination, but does not match.", 5000000, limit);
1:ee4672b:     }
1:ee4672b: }
1:ee4672b: 
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ee4672b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.Assert;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class DestinationWildcardTest {
1:     protected final static String DESTNAME="DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue";
1:     protected final static int QUEUE_LIMIT = 5000000;
1:     protected static Logger LOG = LoggerFactory.getLogger(DestinationWildcardTest.class);
1:     private BrokerService broker = null;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         LOG.info("Shutting down");
1:         if (broker != null && broker.isStarted()) {
1:             LOG.info("Broker still running, stopping it now.");
1:             broker.stop();
1:         }
1:         else {
1:             LOG.info("Broker not running, nothing to shutdown.");
1:         }
1:     }
1: 
1:     /**
1:      * Configures broker for two wildcard policies and one specific destination policy, creates a destination
1:      * and checks if the right policy is applied to the destination.
1:      */
1:     @Test
1:     public void testDestinationWildcardThreeEntries() throws Exception {
1:         LOG.info("testDestinationWildcard() called.");
1: 
1:         // configure broker for policyEntries
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1: 
1:         PolicyEntry e1 = new PolicyEntry();
1:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue"));
1:         e1.setMemoryLimit(QUEUE_LIMIT);
1:         e1.setPrioritizedMessages(true);
1:         entries.add(e1);
1: 
1:         PolicyEntry e2 = new PolicyEntry();
1:         e2.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:         e2.setMemoryLimit(3000000);
1:         e2.setPrioritizedMessages(false);
1:         entries.add(e2);
1: 
1:         PolicyEntry e3 = new PolicyEntry();
1:         e3.setDestination(new ActiveMQQueue("DomainA.DomainB.>"));
1:         e3.setMemoryLimit(3000000);
1:         e3.setPrioritizedMessages(false);
1:         entries.add(e3);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         // verify broker isn't null
1:         Assert.assertNotNull(broker);
1: 
1:         // verify effective policy is in place.
1:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:         long limit = queue.getMemoryUsage().getLimit();
1:         LOG.info("MemoryLimit of {}: expected: 5242880, actual: {}", DESTNAME, limit);
1:         Assert.assertEquals("Memory limit is expected to be " + QUEUE_LIMIT + " for this destination, but does not match.", QUEUE_LIMIT, limit);
1:     }
1: 
1: 
1:     /**
1:      * Configures broker for two wildcard policies, creates a destination
1:      * and checks if the policy is applied to the destination.
1:      */
1:     @Test
1:     public void testDestinationWildcardTwoEntries() throws Exception {
1:         LOG.info("testDestinationWildcard() called.");
1: 
1:         // configure broker for policyEntries
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1: 
1:         PolicyEntry e1 = new PolicyEntry();
1:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:         e1.setMemoryLimit(QUEUE_LIMIT);
1:         e1.setPrioritizedMessages(true);
1:         entries.add(e1);
1: 
1:         PolicyEntry e2 = new PolicyEntry();
1:         e2.setDestination(new ActiveMQQueue("DomainA.DomainB.>"));
1:         e2.setMemoryLimit(3000000);
1:         e2.setPrioritizedMessages(false);
1:         entries.add(e2);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         // verify broker isn't null
1:         Assert.assertNotNull(broker);
1: 
1:         // verify effective policy is in place.
1:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:         long limit = queue.getMemoryUsage().getLimit();
1:         LOG.info("MemoryLimit of {}: expected: 5242880, actual: {}", DESTNAME, limit);
1:         Assert.assertEquals("Memory limit is expected to be " + QUEUE_LIMIT + " for this destination, but does not match.", QUEUE_LIMIT, limit);
1:     }
1: 
1: 
1:     @Test
1:     public void testDestinationWildcardOneEntry() throws Exception {
1:         LOG.info("testDestinationWildcard2() called.");
1:         // verify broker isn't null
1:         Assert.assertNotNull(broker);
1: 
1:         // configure broker for policyEntries
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1: 
1:         PolicyEntry e1 = new PolicyEntry();
1:         e1.setDestination(new ActiveMQQueue("DomainA.DomainB.*.*.Prioritised.Queue"));
1:         e1.setMemoryLimit(QUEUE_LIMIT);
1:         e1.setPrioritizedMessages(true);
1:         entries.add(e1);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         // verify effective policy is in place.
1:         ManagedRegionBroker rb = (ManagedRegionBroker) broker.getRegionBroker();
1:         org.apache.activemq.broker.region.Queue queue = (Queue) rb.addDestination(new ConnectionContext(), new ActiveMQQueue(DESTNAME), true);
1:         Assert.assertTrue("PolicyEntry should have priorityMessages enabled for destination " + DESTNAME, queue.isPrioritizedMessages());
1:         long limit = queue.getMemoryUsage().getLimit();
1:         LOG.info("MemoryLimit of {}: expected: 5000000, actual: {}", "DomainA", limit);
1:         Assert.assertEquals("Memory limit is expected to be " + 5000000 + " for this destination, but does not match.", 5000000, limit);
1:     }
1: }
1: 
============================================================================