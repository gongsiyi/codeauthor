1:d4133c4: /**
1:d4133c4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d4133c4:  * contributor license agreements.  See the NOTICE file distributed with
1:d4133c4:  * this work for additional information regarding copyright ownership.
1:d4133c4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d4133c4:  * (the "License"); you may not use this file except in compliance with
1:d4133c4:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:d4133c4:  *      http://www.apache.org/licenses/LICENSE-2.0
3:d4133c4:  *
1:d4133c4:  * Unless required by applicable law or agreed to in writing, software
1:d4133c4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d4133c4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d4133c4:  * See the License for the specific language governing permissions and
1:d4133c4:  * limitations under the License.
1:d4133c4:  */
1:d4133c4: package org.apache.activemq.transport.stomp;
2:d4133c4: 
1:d4133c4: import java.io.IOException;
1:d4133c4: import java.net.Socket;
1:d4133c4: import java.net.URI;
1:d4133c4: import java.net.URISyntaxException;
1:d4133c4: import java.net.UnknownHostException;
1:f33f32e: import java.util.HashMap;
1:d4133c4: import java.util.Map;
1:d4133c4: 
1:d4133c4: import javax.net.ServerSocketFactory;
1:d4133c4: import javax.net.SocketFactory;
1:d4133c4: 
1:11705e7: import org.apache.activemq.broker.BrokerContext;
1:d4133c4: import org.apache.activemq.broker.BrokerService;
1:d4133c4: import org.apache.activemq.broker.BrokerServiceAware;
1:f33f32e: import org.apache.activemq.transport.MutexTransport;
1:d4133c4: import org.apache.activemq.transport.Transport;
1:d4133c4: import org.apache.activemq.transport.nio.NIOTransportFactory;
1:d4133c4: import org.apache.activemq.transport.tcp.TcpTransport;
1:04ee70a: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
1:d4133c4: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:d4133c4: import org.apache.activemq.util.IntrospectionSupport;
1:d4133c4: import org.apache.activemq.wireformat.WireFormat;
1:d4133c4: 
1:d4133c4: /**
1:d4133c4:  * A <a href="http://stomp.codehaus.org/">STOMP</a> over NIO transport factory
1:0bbc0ac:  *
1:0885c60:  *
1:d4133c4:  */
1:d4133c4: public class StompNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware {
1:d4133c4: 
1:11705e7:     private BrokerContext brokerContext = null;
1:d4133c4: 
1:04ee70a:     @Override
1:d4133c4:     protected String getDefaultWireFormatType() {
1:d4133c4:         return "stomp";
4:d4133c4:     }
1:d4133c4: 
1:04ee70a:     @Override
1:d4133c4:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:d4133c4:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:04ee70a:             @Override
1:d4133c4:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:d4133c4:                 return new StompNIOTransport(format, socket);
1:d4133c4:             }
1:d4133c4:         };
1:d4133c4:     }
1:d4133c4: 
1:04ee70a:     @Override
1:d4133c4:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:d4133c4:         return new StompNIOTransport(wf, socketFactory, location, localLocation);
1:0885c60:     }
1:d4133c4: 
1:04ee70a:     @Override
1:04ee70a:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:04ee70a:             InitBuffer initBuffer) throws IOException {
1:04ee70a:         return new StompNIOTransport(wireFormat, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:0885c60:     @SuppressWarnings("rawtypes")
1:f33f32e:     @Override
1:f33f32e:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:f33f32e:         transport = super.serverConfigure(transport, format, options);
1:f33f32e: 
1:f33f32e:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:f33f32e:         if (mutex != null) {
1:f33f32e:             mutex.setSyncOnCommand(true);
1:f33f32e:         }
1:f33f32e: 
1:f33f32e:         return transport;
1:f33f32e:     }
1:f33f32e: 
1:04ee70a:     @Override
1:f33f32e:     @SuppressWarnings("rawtypes")
1:d4133c4:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:0885c60:         transport = new StompTransportFilter(transport, format, brokerContext);
1:d4133c4:         IntrospectionSupport.setProperties(transport, options);
1:d4133c4:         return super.compositeConfigure(transport, format, options);
1:d4133c4:     }
1:d4133c4: 
1:04ee70a:     @Override
1:d4133c4:     public void setBrokerService(BrokerService brokerService) {
1:11705e7:         this.brokerContext = brokerService.getBrokerContext();
1:d4133c4:     }
1:d4133c4: 
1:b7a1883:     @Override
1:b7a1883:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:b7a1883:         StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format);
1:b7a1883: 
1:b7a1883:         StompTransportFilter filter = (StompTransportFilter) transport.narrow(StompTransportFilter.class);
1:b7a1883:         filter.setInactivityMonitor(monitor);
1:b7a1883: 
1:b7a1883:         return monitor;
1:b7a1883:     }
1:d4133c4: }
1:d4133c4: 
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport.InitBuffer;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:             @Override
1:     @Override
1:     @Override
1:     public TcpTransport createTransport(WireFormat wireFormat, Socket socket,
1:             InitBuffer initBuffer) throws IOException {
1:         return new StompNIOTransport(wireFormat, socket, initBuffer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b7a1883
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format);
1: 
1:         StompTransportFilter filter = (StompTransportFilter) transport.narrow(StompTransportFilter.class);
1:         filter.setInactivityMonitor(monitor);
1: 
1:         return monitor;
1:     }
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.MutexTransport;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = super.serverConfigure(transport, format, options);
1: 
1:         MutexTransport mutex = transport.narrow(MutexTransport.class);
1:         if (mutex != null) {
1:             mutex.setSyncOnCommand(true);
1:         }
1: 
1:         return transport;
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     }
1:     @SuppressWarnings("rawtypes")
1:         transport = new StompTransportFilter(transport, format, brokerContext);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:11705e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerContext;
/////////////////////////////////////////////////////////////////////////
1:     private BrokerContext brokerContext = null;
/////////////////////////////////////////////////////////////////////////
0:         transport = new StompTransportFilter(transport, new LegacyFrameTranslator(), brokerContext);
/////////////////////////////////////////////////////////////////////////
1:         this.brokerContext = brokerService.getBrokerContext();
commit:d4133c4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.Map;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.nio.NIOTransport;
1: import org.apache.activemq.transport.nio.NIOTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.xbean.XBeanBrokerService;
0: import org.springframework.context.ApplicationContext;
1: 
1: /**
1:  * A <a href="http://stomp.codehaus.org/">STOMP</a> over NIO transport factory
1:  * 
0:  * @version $Revision: 645574 $
1:  */
1: public class StompNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware {
1: 
0:     private ApplicationContext applicationContext = null;
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "stomp";
1:     }
1: 
1:     protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         return new TcpTransportServer(this, location, serverSocketFactory) {
1:             protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:                 return new StompNIOTransport(format, socket);
1:             }
1:         };
1:     }
1: 
1:     protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new StompNIOTransport(wf, socketFactory, location, localLocation);
1:     }  
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         transport = new StompTransportFilter(transport, new LegacyFrameTranslator(), applicationContext);
1:         IntrospectionSupport.setProperties(transport, options);
1:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
0:     protected boolean isUseInactivityMonitor(Transport transport) {
0:         // lets disable the inactivity monitor as stomp does not use keep alive
0:         // packets
0:         return false;
1:     }
1:     
1:     public void setBrokerService(BrokerService brokerService) {
0:         if (brokerService instanceof XBeanBrokerService) {
0:             this.applicationContext = ((XBeanBrokerService)brokerService).getApplicationContext();
1:         }
1:     }
1: 
1: }
1: 
============================================================================